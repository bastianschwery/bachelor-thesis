
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	c8 d3 00 20 ed d8 00 00 b9 df 01 00 1d d9 00 00     ... ............
    8010:	1d d9 00 00 1d d9 00 00 1d d9 00 00 1d d9 00 00     ................
	...
    802c:	b5 d6 00 00 1d d9 00 00 00 00 00 00 59 d6 00 00     ............Y...
    803c:	55 c4 00 00                                         U...

00008040 <_irq_vector_table>:
    8040:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8050:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8060:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8070:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8080:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8090:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    80a0:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    80b0:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    80c0:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    80d0:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    80e0:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    80f0:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8100:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8110:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8120:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8130:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8140:	ad d8 00 00 ad d8 00 00 ad d8 00 00 ad d8 00 00     ................
    8150:	ad d8 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	28 ea 01 00 01 00 00 00 00 80 00 00 00 80 00 00     (...............
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
}

/*
 * calculate speed
 */
uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d04b      	beq.n	8eee <_ZN7dataCSC9calcSpeedEv+0xa6>
    uint16_t nbrRevSpeed = sumRevSpeed-oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b23      	ldr	r3, [pc, #140]	; (8f00 <_ZN7dataCSC9calcSpeedEv+0xb8>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
            rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed/100);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30e      	add	r3, pc, #56	; (adr r3, 8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 2308 	strd	r2, r3, [r5, #32]
            retVal = (uint16_t) (speed/100);
    8ee4:	2200      	movs	r2, #0
    8ee6:	4b07      	ldr	r3, [pc, #28]	; (8f04 <_ZN7dataCSC9calcSpeedEv+0xbc>)
    8ee8:	f7ff fc90 	bl	880c <__aeabi_ddiv>
    8eec:	e7d7      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8eee:	2400      	movs	r4, #0
    8ef0:	e7d8      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8ef2:	bf00      	nop
    8ef4:	f3af 8000 	nop.w
    8ef8:	c083126f 	.word	0xc083126f
    8efc:	400921ca 	.word	0x400921ca
    8f00:	3f500000 	.word	0x3f500000
    8f04:	40590000 	.word	0x40590000

00008f08 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    8f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    8f0a:	4d5f      	ldr	r5, [pc, #380]	; (9088 <bt_init+0x180>)
    8f0c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    8f10:	6899      	ldr	r1, [r3, #8]
    8f12:	f011 0101 	ands.w	r1, r1, #1
    8f16:	d11e      	bne.n	8f56 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    8f18:	f640 4003 	movw	r0, #3075	; 0xc03
    8f1c:	aa01      	add	r2, sp, #4
    8f1e:	f005 ff73 	bl	ee08 <bt_hci_cmd_send_sync>
		if (err) {
    8f22:	4604      	mov	r4, r0
    8f24:	2800      	cmp	r0, #0
    8f26:	f040 80ac 	bne.w	9082 <bt_init+0x17a>
	uint8_t status = buf->data[0];
    8f2a:	9b01      	ldr	r3, [sp, #4]
    8f2c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    8f2e:	781b      	ldrb	r3, [r3, #0]
    8f30:	b973      	cbnz	r3, 8f50 <bt_init+0x48>
	scan_dev_found_cb = NULL;
    8f32:	4a56      	ldr	r2, [pc, #344]	; (908c <bt_init+0x184>)
    8f34:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    8f36:	f105 0394 	add.w	r3, r5, #148	; 0x94
    8f3a:	4618      	mov	r0, r3
    8f3c:	f015 fa4d 	bl	1e3da <atomic_get>
    8f40:	f000 0005 	and.w	r0, r0, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8f44:	e8d3 2fef 	ldaex	r2, [r3]
    8f48:	e8c3 0fe1 	stlex	r1, r0, [r3]
    8f4c:	2900      	cmp	r1, #0
    8f4e:	d1f9      	bne.n	8f44 <bt_init+0x3c>
		net_buf_unref(rsp);
    8f50:	9801      	ldr	r0, [sp, #4]
    8f52:	f00e fae1 	bl	17518 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    8f56:	2100      	movs	r1, #0
    8f58:	f241 0003 	movw	r0, #4099	; 0x1003
    8f5c:	aa01      	add	r2, sp, #4
    8f5e:	f005 ff53 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    8f62:	4604      	mov	r4, r0
    8f64:	2800      	cmp	r0, #0
    8f66:	f040 808c 	bne.w	9082 <bt_init+0x17a>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    8f6a:	9b01      	ldr	r3, [sp, #4]
    8f6c:	2208      	movs	r2, #8
    8f6e:	6899      	ldr	r1, [r3, #8]
    8f70:	4847      	ldr	r0, [pc, #284]	; (9090 <bt_init+0x188>)
    8f72:	3101      	adds	r1, #1
    8f74:	f015 f91e 	bl	1e1b4 <memcpy>
	net_buf_unref(rsp);
    8f78:	9801      	ldr	r0, [sp, #4]
    8f7a:	f00e facd 	bl	17518 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    8f7e:	4621      	mov	r1, r4
    8f80:	f241 0001 	movw	r0, #4097	; 0x1001
    8f84:	aa01      	add	r2, sp, #4
    8f86:	f005 ff3f 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    8f8a:	4604      	mov	r4, r0
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d178      	bne.n	9082 <bt_init+0x17a>
	read_local_ver_complete(rsp);
    8f90:	9801      	ldr	r0, [sp, #4]
    8f92:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    8f94:	785a      	ldrb	r2, [r3, #1]
    8f96:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    8f9a:	78d9      	ldrb	r1, [r3, #3]
    8f9c:	789a      	ldrb	r2, [r3, #2]
    8f9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8fa2:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    8fa4:	791a      	ldrb	r2, [r3, #4]
    8fa6:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    8faa:	7a19      	ldrb	r1, [r3, #8]
    8fac:	79da      	ldrb	r2, [r3, #7]
    8fae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8fb2:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    8fb4:	795a      	ldrb	r2, [r3, #5]
    8fb6:	799b      	ldrb	r3, [r3, #6]
    8fb8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    8fbc:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    8fbe:	f00e faab 	bl	17518 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    8fc2:	4621      	mov	r1, r4
    8fc4:	f241 0002 	movw	r0, #4098	; 0x1002
    8fc8:	aa01      	add	r2, sp, #4
    8fca:	f005 ff1d 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    8fce:	4604      	mov	r4, r0
    8fd0:	2800      	cmp	r0, #0
    8fd2:	d156      	bne.n	9082 <bt_init+0x17a>
	memcpy(bt_dev.supported_commands, rp->commands,
    8fd4:	9b01      	ldr	r3, [sp, #4]
    8fd6:	2240      	movs	r2, #64	; 0x40
    8fd8:	6899      	ldr	r1, [r3, #8]
    8fda:	482e      	ldr	r0, [pc, #184]	; (9094 <bt_init+0x18c>)
    8fdc:	3101      	adds	r1, #1
    8fde:	f015 f8e9 	bl	1e1b4 <memcpy>
	net_buf_unref(rsp);
    8fe2:	9801      	ldr	r0, [sp, #4]
    8fe4:	f00e fa98 	bl	17518 <net_buf_unref>
		err = prng_init();
    8fe8:	f007 ff06 	bl	10df8 <prng_init>
		if (err) {
    8fec:	4604      	mov	r4, r0
    8fee:	2800      	cmp	r0, #0
    8ff0:	d147      	bne.n	9082 <bt_init+0x17a>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    8ff2:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    8ff6:	069a      	lsls	r2, r3, #26
    8ff8:	d40e      	bmi.n	9018 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    8ffa:	2157      	movs	r1, #87	; 0x57
    8ffc:	4826      	ldr	r0, [pc, #152]	; (9098 <bt_init+0x190>)
    8ffe:	f013 fc21 	bl	1c844 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9002:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    9006:	065b      	lsls	r3, r3, #25
    9008:	d44a      	bmi.n	90a0 <bt_init+0x198>
		BT_ERR("Non-LE capable controller detected!");
    900a:	2145      	movs	r1, #69	; 0x45
    900c:	4823      	ldr	r0, [pc, #140]	; (909c <bt_init+0x194>)
    900e:	f013 fc19 	bl	1c844 <printk>
		return -ENODEV;
    9012:	f06f 0412 	mvn.w	r4, #18
    9016:	e034      	b.n	9082 <bt_init+0x17a>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9018:	2107      	movs	r1, #7
    901a:	f640 4033 	movw	r0, #3123	; 0xc33
    901e:	f005 fea9 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    9022:	4607      	mov	r7, r0
    9024:	b910      	cbnz	r0, 902c <bt_init+0x124>
		return -ENOBUFS;
    9026:	f06f 0436 	mvn.w	r4, #54	; 0x36
    902a:	e02a      	b.n	9082 <bt_init+0x17a>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    902c:	2107      	movs	r1, #7
    902e:	3008      	adds	r0, #8
    9030:	f00e fb88 	bl	17744 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    9034:	4621      	mov	r1, r4
    9036:	2207      	movs	r2, #7
    9038:	4606      	mov	r6, r0
    903a:	f015 f8e6 	bl	1e20a <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    903e:	2345      	movs	r3, #69	; 0x45
    9040:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    9042:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9044:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    9046:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    9048:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    904a:	4639      	mov	r1, r7
    904c:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    9050:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9052:	f005 fed9 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    9056:	4604      	mov	r4, r0
    9058:	b998      	cbnz	r0, 9082 <bt_init+0x17a>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    905a:	2101      	movs	r1, #1
    905c:	f640 4031 	movw	r0, #3121	; 0xc31
    9060:	f005 fe88 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    9064:	4606      	mov	r6, r0
    9066:	2800      	cmp	r0, #0
    9068:	d0dd      	beq.n	9026 <bt_init+0x11e>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
    906a:	2101      	movs	r1, #1
    906c:	f015 f9f0 	bl	1e450 <net_buf_add_u8.isra.0>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    9070:	4622      	mov	r2, r4
    9072:	4631      	mov	r1, r6
    9074:	f640 4031 	movw	r0, #3121	; 0xc31
    9078:	f005 fec6 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    907c:	4604      	mov	r4, r0
    907e:	2800      	cmp	r0, #0
    9080:	d0bf      	beq.n	9002 <bt_init+0xfa>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    9082:	4620      	mov	r0, r4
    9084:	b003      	add	sp, #12
    9086:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9088:	20008000 	.word	0x20008000
    908c:	20009c14 	.word	0x20009c14
    9090:	2000803c 	.word	0x2000803c
    9094:	20008044 	.word	0x20008044
    9098:	000245e8 	.word	0x000245e8
    909c:	0002461b 	.word	0x0002461b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    90a0:	2100      	movs	r1, #0
    90a2:	f242 0003 	movw	r0, #8195	; 0x2003
    90a6:	aa01      	add	r2, sp, #4
    90a8:	f005 feae 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    90ac:	4604      	mov	r4, r0
    90ae:	2800      	cmp	r0, #0
    90b0:	d1e7      	bne.n	9082 <bt_init+0x17a>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    90b2:	9b01      	ldr	r3, [sp, #4]
    90b4:	2208      	movs	r2, #8
    90b6:	6899      	ldr	r1, [r3, #8]
    90b8:	48b9      	ldr	r0, [pc, #740]	; (93a0 <bt_init+0x498>)
    90ba:	3101      	adds	r1, #1
    90bc:	f015 f87a 	bl	1e1b4 <memcpy>
	net_buf_unref(rsp);
    90c0:	9801      	ldr	r0, [sp, #4]
    90c2:	f00e fa29 	bl	17518 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    90c6:	4621      	mov	r1, r4
    90c8:	f242 0002 	movw	r0, #8194	; 0x2002
    90cc:	aa01      	add	r2, sp, #4
    90ce:	f005 fe9b 	bl	ee08 <bt_hci_cmd_send_sync>
		if (err) {
    90d2:	4604      	mov	r4, r0
    90d4:	2800      	cmp	r0, #0
    90d6:	d1d4      	bne.n	9082 <bt_init+0x17a>
		le_read_buffer_size_complete(rsp);
    90d8:	9b01      	ldr	r3, [sp, #4]
    90da:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    90dc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    90e0:	b291      	uxth	r1, r2
    90e2:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    90e6:	b121      	cbz	r1, 90f2 <bt_init+0x1ea>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    90e8:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    90ea:	48ae      	ldr	r0, [pc, #696]	; (93a4 <bt_init+0x49c>)
    90ec:	4611      	mov	r1, r2
    90ee:	f018 f911 	bl	21314 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    90f2:	9801      	ldr	r0, [sp, #4]
    90f4:	f00e fa10 	bl	17518 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    90f8:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    90fc:	f016 0620 	ands.w	r6, r6, #32
    9100:	f000 80f3 	beq.w	92ea <bt_init+0x3e2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9104:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    9108:	071f      	lsls	r7, r3, #28
    910a:	d512      	bpl.n	9132 <bt_init+0x22a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    910c:	2100      	movs	r1, #0
    910e:	f242 001c 	movw	r0, #8220	; 0x201c
    9112:	aa01      	add	r2, sp, #4
    9114:	f005 fe78 	bl	ee08 <bt_hci_cmd_send_sync>
		if (err) {
    9118:	4604      	mov	r4, r0
    911a:	2800      	cmp	r0, #0
    911c:	d1b1      	bne.n	9082 <bt_init+0x17a>
		le_read_supp_states_complete(rsp);
    911e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    9120:	6883      	ldr	r3, [r0, #8]
    9122:	f8d3 2001 	ldr.w	r2, [r3, #1]
    9126:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    912a:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    912e:	f00e f9f3 	bl	17518 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    9132:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9136:	069e      	lsls	r6, r3, #26
    9138:	d524      	bpl.n	9184 <bt_init+0x27c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    913a:	4668      	mov	r0, sp
    913c:	f10d 0102 	add.w	r1, sp, #2
    9140:	f005 fec4 	bl	eecc <hci_le_read_max_data_len>
		if (err) {
    9144:	4604      	mov	r4, r0
    9146:	2800      	cmp	r0, #0
    9148:	d19b      	bne.n	9082 <bt_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    914a:	2104      	movs	r1, #4
    914c:	f242 0024 	movw	r0, #8228	; 0x2024
    9150:	f005 fe10 	bl	ed74 <bt_hci_cmd_create>
		if (!buf) {
    9154:	4606      	mov	r6, r0
    9156:	2800      	cmp	r0, #0
    9158:	f43f af65 	beq.w	9026 <bt_init+0x11e>
    915c:	2104      	movs	r1, #4
    915e:	3008      	adds	r0, #8
    9160:	f00e faf0 	bl	17744 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9164:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9168:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    916a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    916c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9170:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9172:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9174:	f242 0024 	movw	r0, #8228	; 0x2024
    9178:	f005 fe46 	bl	ee08 <bt_hci_cmd_send_sync>
		if (err) {
    917c:	4604      	mov	r4, r0
    917e:	2800      	cmp	r0, #0
    9180:	f47f af7f 	bne.w	9082 <bt_init+0x17a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9184:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9188:	065c      	lsls	r4, r3, #25
    918a:	d510      	bpl.n	91ae <bt_init+0x2a6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    918c:	2100      	movs	r1, #0
    918e:	f242 002a 	movw	r0, #8234	; 0x202a
    9192:	aa01      	add	r2, sp, #4
    9194:	f005 fe38 	bl	ee08 <bt_hci_cmd_send_sync>
		if (err) {
    9198:	4604      	mov	r4, r0
    919a:	2800      	cmp	r0, #0
    919c:	f47f af71 	bne.w	9082 <bt_init+0x17a>
		le_read_resolving_list_size_complete(rsp);
    91a0:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
    91a2:	6883      	ldr	r3, [r0, #8]
    91a4:	785b      	ldrb	r3, [r3, #1]
    91a6:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    91aa:	f00e f9b5 	bl	17518 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    91ae:	2108      	movs	r1, #8
    91b0:	f242 0001 	movw	r0, #8193	; 0x2001
    91b4:	f005 fdde 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    91b8:	4604      	mov	r4, r0
    91ba:	2800      	cmp	r0, #0
    91bc:	f43f af33 	beq.w	9026 <bt_init+0x11e>
    91c0:	2108      	movs	r1, #8
    91c2:	4408      	add	r0, r1
    91c4:	f00e fabe 	bl	17744 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    91c8:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    91cc:	f240 2302 	movw	r3, #514	; 0x202
    91d0:	f011 0f40 	tst.w	r1, #64	; 0x40
    91d4:	bf08      	it	eq
    91d6:	2303      	moveq	r3, #3
    91d8:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    91da:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    91dc:	bf4c      	ite	mi
    91de:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    91e2:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    91e6:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    91ea:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    91ec:	bf48      	it	mi
    91ee:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    91f2:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    91f6:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    91fa:	bf18      	it	ne
    91fc:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9200:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9204:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9206:	bf48      	it	mi
    9208:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    920c:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    920e:	bf08      	it	eq
    9210:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    9214:	2100      	movs	r1, #0
    9216:	f015 f91e 	bl	1e456 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    921a:	4621      	mov	r1, r4
    921c:	2200      	movs	r2, #0
    921e:	f242 0001 	movw	r0, #8193	; 0x2001
    9222:	f005 fdf1 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    9226:	4604      	mov	r4, r0
    9228:	2800      	cmp	r0, #0
    922a:	f47f af2a 	bne.w	9082 <bt_init+0x17a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    922e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    9232:	0698      	lsls	r0, r3, #26
    9234:	d41e      	bmi.n	9274 <bt_init+0x36c>
	if (bt_dev.le.acl_mtu) {
    9236:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    923a:	b9d9      	cbnz	r1, 9274 <bt_init+0x36c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    923c:	f241 0005 	movw	r0, #4101	; 0x1005
    9240:	aa01      	add	r2, sp, #4
    9242:	f005 fde1 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    9246:	4604      	mov	r4, r0
    9248:	2800      	cmp	r0, #0
    924a:	f47f af1a 	bne.w	9082 <bt_init+0x17a>
	if (bt_dev.le.acl_mtu) {
    924e:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    9252:	b963      	cbnz	r3, 926e <bt_init+0x366>
    9254:	9b01      	ldr	r3, [sp, #4]
    9256:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9258:	785a      	ldrb	r2, [r3, #1]
    925a:	7899      	ldrb	r1, [r3, #2]
    925c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9260:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    9264:	889a      	ldrh	r2, [r3, #4]
    9266:	484f      	ldr	r0, [pc, #316]	; (93a4 <bt_init+0x49c>)
    9268:	4611      	mov	r1, r2
    926a:	f018 f853 	bl	21314 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    926e:	9801      	ldr	r0, [sp, #4]
    9270:	f00e f952 	bl	17518 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9274:	2108      	movs	r1, #8
    9276:	f640 4001 	movw	r0, #3073	; 0xc01
    927a:	f005 fd7b 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    927e:	4604      	mov	r4, r0
    9280:	2800      	cmp	r0, #0
    9282:	f43f aed0 	beq.w	9026 <bt_init+0x11e>
    9286:	2108      	movs	r1, #8
    9288:	4408      	add	r0, r1
    928a:	f00e fa5b 	bl	17744 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    928e:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9292:	4602      	mov	r2, r0
    9294:	07d9      	lsls	r1, r3, #31
    9296:	d543      	bpl.n	9320 <bt_init+0x418>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9298:	a13f      	add	r1, pc, #252	; (adr r1, 9398 <bt_init+0x490>)
    929a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    929e:	f015 f8da 	bl	1e456 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    92a2:	4621      	mov	r1, r4
    92a4:	2200      	movs	r2, #0
    92a6:	f640 4001 	movw	r0, #3073	; 0xc01
    92aa:	f005 fdad 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    92ae:	4604      	mov	r4, r0
    92b0:	2800      	cmp	r0, #0
    92b2:	f47f aee6 	bne.w	9082 <bt_init+0x17a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    92b6:	4601      	mov	r1, r0
    92b8:	aa01      	add	r2, sp, #4
    92ba:	f64f 4001 	movw	r0, #64513	; 0xfc01
    92be:	f005 fda3 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    92c2:	4604      	mov	r4, r0
    92c4:	b380      	cbz	r0, 9328 <bt_init+0x420>
		BT_WARN("Vendor HCI extensions not available");
    92c6:	2157      	movs	r1, #87	; 0x57
    92c8:	4837      	ldr	r0, [pc, #220]	; (93a8 <bt_init+0x4a0>)
			BT_WARN("Failed to read supported vendor features");
    92ca:	f013 fabb 	bl	1c844 <printk>
		err = bt_conn_init();
    92ce:	f008 fd11 	bl	11cf4 <bt_conn_init>
		if (err) {
    92d2:	4604      	mov	r4, r0
    92d4:	2800      	cmp	r0, #0
    92d6:	f47f aed4 	bne.w	9082 <bt_init+0x17a>
		if (!bt_dev.id_count) {
    92da:	79eb      	ldrb	r3, [r5, #7]
    92dc:	2b00      	cmp	r3, #0
    92de:	d154      	bne.n	938a <bt_init+0x482>
			BT_INFO("No ID address. App must call settings_load()");
    92e0:	2149      	movs	r1, #73	; 0x49
    92e2:	4832      	ldr	r0, [pc, #200]	; (93ac <bt_init+0x4a4>)
    92e4:	f013 faae 	bl	1c844 <printk>
			return 0;
    92e8:	e6cb      	b.n	9082 <bt_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    92ea:	2102      	movs	r1, #2
    92ec:	f640 406d 	movw	r0, #3181	; 0xc6d
    92f0:	f005 fd40 	bl	ed74 <bt_hci_cmd_create>
		if (!buf) {
    92f4:	4604      	mov	r4, r0
    92f6:	2800      	cmp	r0, #0
    92f8:	f43f ae95 	beq.w	9026 <bt_init+0x11e>
    92fc:	2102      	movs	r1, #2
    92fe:	3008      	adds	r0, #8
    9300:	f00e fa20 	bl	17744 <net_buf_simple_add>
		cp_le->le = 0x01;
    9304:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9306:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    9308:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    930a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    930c:	4632      	mov	r2, r6
    930e:	f640 406d 	movw	r0, #3181	; 0xc6d
    9312:	f005 fd79 	bl	ee08 <bt_hci_cmd_send_sync>
		if (err) {
    9316:	4604      	mov	r4, r0
    9318:	2800      	cmp	r0, #0
    931a:	f43f aef3 	beq.w	9104 <bt_init+0x1fc>
    931e:	e6b0      	b.n	9082 <bt_init+0x17a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    9320:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    9324:	4822      	ldr	r0, [pc, #136]	; (93b0 <bt_init+0x4a8>)
    9326:	e7ba      	b.n	929e <bt_init+0x396>
	net_buf_unref(rsp);
    9328:	9801      	ldr	r0, [sp, #4]
    932a:	f00e f8f5 	bl	17518 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    932e:	4621      	mov	r1, r4
    9330:	f64f 4002 	movw	r0, #64514	; 0xfc02
    9334:	aa01      	add	r2, sp, #4
    9336:	f005 fd67 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    933a:	4604      	mov	r4, r0
    933c:	b110      	cbz	r0, 9344 <bt_init+0x43c>
		BT_WARN("Failed to read supported vendor commands");
    933e:	2157      	movs	r1, #87	; 0x57
    9340:	481c      	ldr	r0, [pc, #112]	; (93b4 <bt_init+0x4ac>)
    9342:	e7c2      	b.n	92ca <bt_init+0x3c2>
	rp.cmds = (void *)rsp->data;
    9344:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9346:	2202      	movs	r2, #2
    9348:	6899      	ldr	r1, [r3, #8]
    934a:	481b      	ldr	r0, [pc, #108]	; (93b8 <bt_init+0x4b0>)
    934c:	3101      	adds	r1, #1
    934e:	f014 ff31 	bl	1e1b4 <memcpy>
	net_buf_unref(rsp);
    9352:	9801      	ldr	r0, [sp, #4]
    9354:	f00e f8e0 	bl	17518 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9358:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    935c:	075b      	lsls	r3, r3, #29
    935e:	d5b6      	bpl.n	92ce <bt_init+0x3c6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    9360:	4621      	mov	r1, r4
    9362:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9366:	aa01      	add	r2, sp, #4
    9368:	f005 fd4e 	bl	ee08 <bt_hci_cmd_send_sync>
		if (err) {
    936c:	b110      	cbz	r0, 9374 <bt_init+0x46c>
			BT_WARN("Failed to read supported vendor features");
    936e:	2157      	movs	r1, #87	; 0x57
    9370:	4812      	ldr	r0, [pc, #72]	; (93bc <bt_init+0x4b4>)
    9372:	e7aa      	b.n	92ca <bt_init+0x3c2>
		memcpy(bt_dev.vs_features, rp.feat->features,
    9374:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    9376:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9378:	4811      	ldr	r0, [pc, #68]	; (93c0 <bt_init+0x4b8>)
    937a:	6899      	ldr	r1, [r3, #8]
    937c:	4411      	add	r1, r2
    937e:	f014 ff19 	bl	1e1b4 <memcpy>
		net_buf_unref(rsp);
    9382:	9801      	ldr	r0, [sp, #4]
    9384:	f00e f8c8 	bl	17518 <net_buf_unref>
    9388:	e7a1      	b.n	92ce <bt_init+0x3c6>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    938a:	2104      	movs	r1, #4
    938c:	480d      	ldr	r0, [pc, #52]	; (93c4 <bt_init+0x4bc>)
    938e:	f015 f82a 	bl	1e3e6 <atomic_or>
	bt_finalize_init();
    9392:	f006 ff4b 	bl	1022c <bt_finalize_init>
	return 0;
    9396:	e674      	b.n	9082 <bt_init+0x17a>
    9398:	02008890 	.word	0x02008890
    939c:	20008000 	.word	0x20008000
    93a0:	20008098 	.word	0x20008098
    93a4:	200080c8 	.word	0x200080c8
    93a8:	00024644 	.word	0x00024644
    93ac:	000246c9 	.word	0x000246c9
    93b0:	02008810 	.word	0x02008810
    93b4:	0002466d 	.word	0x0002466d
    93b8:	20008085 	.word	0x20008085
    93bc:	0002469b 	.word	0x0002469b
    93c0:	20008084 	.word	0x20008084
    93c4:	20008094 	.word	0x20008094

000093c8 <main>:
 */

#include "deviceManager.h"

void main(void)
{
    93c8:	b500      	push	{lr}
	printk("Application start\n");
    93ca:	4807      	ldr	r0, [pc, #28]	; (93e8 <main+0x20>)
{
    93cc:	b093      	sub	sp, #76	; 0x4c
	printk("Application start\n");
    93ce:	f013 fa39 	bl	1c844 <printk>
	// create a new device manager
	deviceManager dManager;
    93d2:	4668      	mov	r0, sp
    93d4:	f000 f996 	bl	9704 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    93d8:	2201      	movs	r2, #1
    93da:	4668      	mov	r0, sp
    93dc:	4611      	mov	r1, r2
    93de:	f000 fadf 	bl	99a0 <_ZN13deviceManager9setDeviceEbb>
    93e2:	b013      	add	sp, #76	; 0x4c
    93e4:	f85d fb04 	ldr.w	pc, [sp], #4
    93e8:	000225b4 	.word	0x000225b4

000093ec <_ZN13deviceManager13app_button_cbEv>:
/*
 * button callback method
 */
bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    93ec:	4b01      	ldr	r3, [pc, #4]	; (93f4 <_ZN13deviceManager13app_button_cbEv+0x8>)
    93ee:	7818      	ldrb	r0, [r3, #0]
    93f0:	4770      	bx	lr
    93f2:	bf00      	nop
    93f4:	2000b04a 	.word	0x2000b04a

000093f8 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
 * callback method
 * called when while discovering an error appears
 */
void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    93f8:	4801      	ldr	r0, [pc, #4]	; (9400 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    93fa:	f013 ba23 	b.w	1c844 <printk>
    93fe:	bf00      	nop
    9400:	000225c7 	.word	0x000225c7

00009404 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    9404:	b510      	push	{r4, lr}
	printk("Service not found!\n");
    9406:	4814      	ldr	r0, [pc, #80]	; (9458 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x54>)
    9408:	f013 fa1c 	bl	1c844 <printk>
	if (cnt < 2)
    940c:	4a13      	ldr	r2, [pc, #76]	; (945c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x58>)
    940e:	7813      	ldrb	r3, [r2, #0]
    9410:	2b01      	cmp	r3, #1
    9412:	d818      	bhi.n	9446 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x42>
		printk("nbr central connections: %d\n", centralConnections);
    9414:	4c12      	ldr	r4, [pc, #72]	; (9460 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x5c>)
		cnt++;
    9416:	3301      	adds	r3, #1
		printk("nbr central connections: %d\n", centralConnections);
    9418:	4621      	mov	r1, r4
    941a:	4812      	ldr	r0, [pc, #72]	; (9464 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x60>)
		cnt++;
    941c:	7013      	strb	r3, [r2, #0]
		printk("nbr central connections: %d\n", centralConnections);
    941e:	f013 fa11 	bl	1c844 <printk>
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9422:	4b11      	ldr	r3, [pc, #68]	; (9468 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x64>)
    9424:	4911      	ldr	r1, [pc, #68]	; (946c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x68>)
    9426:	7818      	ldrb	r0, [r3, #0]
    9428:	4a11      	ldr	r2, [pc, #68]	; (9470 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x6c>)
    942a:	3801      	subs	r0, #1
    942c:	2300      	movs	r3, #0
    942e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9432:	f003 fb47 	bl	cac4 <bt_gatt_dm_start>
		if (err) 
    9436:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    943a:	d00b      	beq.n	9454 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x50>
}
    943c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			printk("Could not start service discovery, err %d\n", err);
    9440:	480c      	ldr	r0, [pc, #48]	; (9474 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x70>)
    9442:	f013 b9ff 	b.w	1c844 <printk>
		cnt = 0;
    9446:	2300      	movs	r3, #0
    9448:	7013      	strb	r3, [r2, #0]
		printk("Service definitly not found -> Restart application\n");
    944a:	480b      	ldr	r0, [pc, #44]	; (9478 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x74>)
}
    944c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Service definitly not found -> Restart application\n");
    9450:	f013 b9f8 	b.w	1c844 <printk>
}
    9454:	bd10      	pop	{r4, pc}
    9456:	bf00      	nop
    9458:	000225ef 	.word	0x000225ef
    945c:	2000b04f 	.word	0x2000b04f
    9460:	200096ec 	.word	0x200096ec
    9464:	00022603 	.word	0x00022603
    9468:	2000b04c 	.word	0x2000b04c
    946c:	00022514 	.word	0x00022514
    9470:	20008160 	.word	0x20008160
    9474:	00022620 	.word	0x00022620
    9478:	0002264b 	.word	0x0002264b

0000947c <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    947c:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    947e:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    9480:	d507      	bpl.n	9492 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    9482:	1e04      	subs	r4, r0, #0
    9484:	bf18      	it	ne
    9486:	2401      	movne	r4, #1
    9488:	4620      	mov	r0, r4
    948a:	f003 fed3 	bl	d234 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    948e:	4b01      	ldr	r3, [pc, #4]	; (9494 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    9490:	701c      	strb	r4, [r3, #0]
}
    9492:	bd10      	pop	{r4, pc}
    9494:	2000b04a 	.word	0x2000b04a

00009498 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
 * callback method
 * called every second with data
 */
uint8_t deviceManager::onReceived(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params,
			const void *data, uint16_t length) {
    9498:	b537      	push	{r0, r1, r2, r4, r5, lr}
    949a:	4611      	mov	r1, r2

	// start calculating and showing data only when all characteristics are subscribed
	if (subscriptionDone)
    949c:	4a2f      	ldr	r2, [pc, #188]	; (955c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xc4>)
    949e:	7812      	ldrb	r2, [r2, #0]
    94a0:	b372      	cbz	r2, 9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
	{
		if (length > 0)
    94a2:	b36b      	cbz	r3, 9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
		{
			// save the new received data
			deviceManager::data.saveData(data);
    94a4:	4c2e      	ldr	r4, [pc, #184]	; (9560 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xc8>)
    94a6:	4620      	mov	r0, r4
    94a8:	f000 fbcc 	bl	9c44 <_ZN7dataCSC8saveDataEPKv>
			uint8_t type;
			float test = 12.123;
			uint8_t idk;
			uint8_t dataToSend[2];

			if (getDiameter() != 0 && diameterSet == false)
    94ac:	f000 fcb2 	bl	9e14 <_Z11getDiameterv>
    94b0:	2200      	movs	r2, #0
    94b2:	2300      	movs	r3, #0
    94b4:	f7ff fae8 	bl	8a88 <__aeabi_dcmpeq>
    94b8:	bb28      	cbnz	r0, 9506 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6e>
    94ba:	4b2a      	ldr	r3, [pc, #168]	; (9564 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    94bc:	781a      	ldrb	r2, [r3, #0]
    94be:	bb12      	cbnz	r2, 9506 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6e>
			{
				diameterSet = true;
    94c0:	2201      	movs	r2, #1
    94c2:	701a      	strb	r2, [r3, #0]
				deviceManager::data.wheelDiameter = getDiameter();
    94c4:	f000 fca6 	bl	9e14 <_Z11getDiameterv>
    94c8:	e9c4 0106 	strd	r0, r1, [r4, #24]
			{
				// reset button was pressed
				diameterSet = false;
			}
			
			if (deviceManager::data.type == CSC_SPEED)
    94cc:	7c24      	ldrb	r4, [r4, #16]
    94ce:	2c01      	cmp	r4, #1
    94d0:	d128      	bne.n	9524 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8c>
			{
				// calculate speed
				if (diameterSet)
    94d2:	4b24      	ldr	r3, [pc, #144]	; (9564 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    94d4:	781b      	ldrb	r3, [r3, #0]
    94d6:	b19b      	cbz	r3, 9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
				{
					uint16_t speed = deviceManager::data.calcSpeed();
    94d8:	4821      	ldr	r0, [pc, #132]	; (9560 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xc8>)
    94da:	f7ff fcb5 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>

					if (speed > 0)
    94de:	4601      	mov	r1, r0
    94e0:	b170      	cbz	r0, 9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
					{
						type = 1;
						dataToSend[0] = type;
    94e2:	f88d 4004 	strb.w	r4, [sp, #4]
						tx_data = (uint8_t) speed;
						dataToSend[1] = (uint8_t) speed;	
						if (peripheralConn != nullptr)
    94e6:	4c20      	ldr	r4, [pc, #128]	; (9568 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
						tx_data = (uint8_t) speed;
    94e8:	f88d 0005 	strb.w	r0, [sp, #5]
						if (peripheralConn != nullptr)
    94ec:	6823      	ldr	r3, [r4, #0]
    94ee:	b13b      	cbz	r3, 9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
						{	
							printk("Speed: %d\n",speed);
    94f0:	481e      	ldr	r0, [pc, #120]	; (956c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    94f2:	f013 f9a7 	bl	1c844 <printk>
							//data_service_send(peripheralConn,&type, sizeof(idk));
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    94f6:	2202      	movs	r2, #2
    94f8:	6820      	ldr	r0, [r4, #0]
    94fa:	a901      	add	r1, sp, #4
						dataToSend[0] = type;		
						if (peripheralConn != nullptr)
						{
							printk("Cadence rpm: %d\n",tx_data);
							//data_service_send(peripheralConn,&type, sizeof(idk));
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    94fc:	f000 fc60 	bl	9dc0 <_Z17data_service_sendP7bt_connPKht>
			bt_lbs_send_button_state(true);
			dk_set_led_on(TOGGLE_LED);
		}*/
	}
	return BT_GATT_ITER_CONTINUE;
}
    9500:	2001      	movs	r0, #1
    9502:	b003      	add	sp, #12
    9504:	bd30      	pop	{r4, r5, pc}
			else if (getDiameter() == 0 && diameterSet == true)
    9506:	f000 fc85 	bl	9e14 <_Z11getDiameterv>
    950a:	2200      	movs	r2, #0
    950c:	2300      	movs	r3, #0
    950e:	f7ff fabb 	bl	8a88 <__aeabi_dcmpeq>
    9512:	2800      	cmp	r0, #0
    9514:	d0da      	beq.n	94cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x34>
    9516:	4b13      	ldr	r3, [pc, #76]	; (9564 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    9518:	781a      	ldrb	r2, [r3, #0]
    951a:	2a00      	cmp	r2, #0
    951c:	d0d6      	beq.n	94cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x34>
				diameterSet = false;
    951e:	2200      	movs	r2, #0
    9520:	701a      	strb	r2, [r3, #0]
    9522:	e7d3      	b.n	94cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x34>
			else if (deviceManager::data.type == CSC_CADENCE)
    9524:	2c02      	cmp	r4, #2
    9526:	d1eb      	bne.n	9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
				if (diameterSet)
    9528:	4b0e      	ldr	r3, [pc, #56]	; (9564 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    952a:	781b      	ldrb	r3, [r3, #0]
    952c:	2b00      	cmp	r3, #0
    952e:	d0e7      	beq.n	9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
					uint16_t rpm = deviceManager::data.calcRPM();
    9530:	480b      	ldr	r0, [pc, #44]	; (9560 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xc8>)
    9532:	f000 fba9 	bl	9c88 <_ZN7dataCSC7calcRPMEv>
					dataToSend[1] = (uint8_t) rpm;
    9536:	b2c1      	uxtb	r1, r0
    9538:	f88d 1005 	strb.w	r1, [sp, #5]
					if (rpm > 0)
    953c:	2800      	cmp	r0, #0
    953e:	d0df      	beq.n	9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
						if (peripheralConn != nullptr)
    9540:	4d09      	ldr	r5, [pc, #36]	; (9568 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
						dataToSend[0] = type;		
    9542:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    9546:	682b      	ldr	r3, [r5, #0]
    9548:	2b00      	cmp	r3, #0
    954a:	d0d9      	beq.n	9500 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
							printk("Cadence rpm: %d\n",tx_data);
    954c:	4808      	ldr	r0, [pc, #32]	; (9570 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
    954e:	f013 f979 	bl	1c844 <printk>
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    9552:	4622      	mov	r2, r4
    9554:	6828      	ldr	r0, [r5, #0]
    9556:	a901      	add	r1, sp, #4
    9558:	e7d0      	b.n	94fc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x64>
    955a:	bf00      	nop
    955c:	2000b04b 	.word	0x2000b04b
    9560:	200086c8 	.word	0x200086c8
    9564:	2000b048 	.word	0x2000b048
    9568:	200096e8 	.word	0x200096e8
    956c:	0002267f 	.word	0x0002267f
    9570:	0002268a 	.word	0x0002268a

00009574 <bt_addr_le_to_str.constprop.0.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9574:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    9576:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9578:	b08a      	sub	sp, #40	; 0x28
    957a:	4604      	mov	r4, r0
    957c:	460e      	mov	r6, r1
    957e:	ad07      	add	r5, sp, #28
    9580:	2b03      	cmp	r3, #3
    9582:	d820      	bhi.n	95c6 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    9584:	e8df f003 	tbb	[pc, r3]
    9588:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    958c:	4911      	ldr	r1, [pc, #68]	; (95d4 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    958e:	4628      	mov	r0, r5
    9590:	f014 fdb6 	bl	1e100 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    9594:	7863      	ldrb	r3, [r4, #1]
    9596:	211e      	movs	r1, #30
    9598:	9304      	str	r3, [sp, #16]
    959a:	78a3      	ldrb	r3, [r4, #2]
    959c:	4630      	mov	r0, r6
    959e:	9303      	str	r3, [sp, #12]
    95a0:	78e3      	ldrb	r3, [r4, #3]
    95a2:	4a0d      	ldr	r2, [pc, #52]	; (95d8 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    95a4:	9302      	str	r3, [sp, #8]
    95a6:	7923      	ldrb	r3, [r4, #4]
    95a8:	9505      	str	r5, [sp, #20]
    95aa:	9301      	str	r3, [sp, #4]
    95ac:	7963      	ldrb	r3, [r4, #5]
    95ae:	9300      	str	r3, [sp, #0]
    95b0:	79a3      	ldrb	r3, [r4, #6]
    95b2:	f013 f954 	bl	1c85e <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    95b6:	b00a      	add	sp, #40	; 0x28
    95b8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    95ba:	4908      	ldr	r1, [pc, #32]	; (95dc <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    95bc:	e7e7      	b.n	958e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    95be:	4908      	ldr	r1, [pc, #32]	; (95e0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    95c0:	e7e5      	b.n	958e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    95c2:	4908      	ldr	r1, [pc, #32]	; (95e4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    95c4:	e7e3      	b.n	958e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    95c6:	210a      	movs	r1, #10
    95c8:	4628      	mov	r0, r5
    95ca:	4a07      	ldr	r2, [pc, #28]	; (95e8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    95cc:	f013 f947 	bl	1c85e <snprintk>
		break;
    95d0:	e7e0      	b.n	9594 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    95d2:	bf00      	nop
    95d4:	0002269b 	.word	0x0002269b
    95d8:	000226c4 	.word	0x000226c4
    95dc:	000226a2 	.word	0x000226a2
    95e0:	000226a9 	.word	0x000226a9
    95e4:	000226b3 	.word	0x000226b3
    95e8:	000226bd 	.word	0x000226bd

000095ec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    95ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    95f0:	b099      	sub	sp, #100	; 0x64
	char speed_sensor[18] = "D4:D6:5E:D1:66:D";
    95f2:	ad01      	add	r5, sp, #4
			      bool connectable) {
    95f4:	4604      	mov	r4, r0
    95f6:	4616      	mov	r6, r2
    95f8:	462f      	mov	r7, r5
	char speed_sensor[18] = "D4:D6:5E:D1:66:D";
    95fa:	4b37      	ldr	r3, [pc, #220]	; (96d8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xec>)
    95fc:	f103 0c10 	add.w	ip, r3, #16
    9600:	462a      	mov	r2, r5
    9602:	6818      	ldr	r0, [r3, #0]
    9604:	6859      	ldr	r1, [r3, #4]
    9606:	3308      	adds	r3, #8
    9608:	c203      	stmia	r2!, {r0, r1}
    960a:	4563      	cmp	r3, ip
    960c:	4615      	mov	r5, r2
    960e:	d1f7      	bne.n	9600 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x14>
    9610:	781b      	ldrb	r3, [r3, #0]
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    9612:	ad06      	add	r5, sp, #24
	char speed_sensor[18] = "D4:D6:5E:D1:66:D";
    9614:	7013      	strb	r3, [r2, #0]
    9616:	2300      	movs	r3, #0
    9618:	46a8      	mov	r8, r5
    961a:	f88d 3015 	strb.w	r3, [sp, #21]
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    961e:	4b2f      	ldr	r3, [pc, #188]	; (96dc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xf0>)
    9620:	f103 0c10 	add.w	ip, r3, #16
    9624:	462a      	mov	r2, r5
    9626:	6818      	ldr	r0, [r3, #0]
    9628:	6859      	ldr	r1, [r3, #4]
    962a:	3308      	adds	r3, #8
    962c:	c203      	stmia	r2!, {r0, r1}
    962e:	4563      	cmp	r3, ip
    9630:	4615      	mov	r5, r2
    9632:	d1f7      	bne.n	9624 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x38>
	char cadence_sensor_2[18] = "E6:6C:AF:76:18:AD";
    9634:	ad0b      	add	r5, sp, #44	; 0x2c
    9636:	46a9      	mov	r9, r5
	char cadence_sensor_1[18] = "C4:64:9B:C6:7B:AE";
    9638:	881b      	ldrh	r3, [r3, #0]
    963a:	8013      	strh	r3, [r2, #0]
	char cadence_sensor_2[18] = "E6:6C:AF:76:18:AD";
    963c:	4b28      	ldr	r3, [pc, #160]	; (96e0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xf4>)
    963e:	f103 0c10 	add.w	ip, r3, #16
    9642:	462a      	mov	r2, r5
    9644:	6818      	ldr	r0, [r3, #0]
    9646:	6859      	ldr	r1, [r3, #4]
    9648:	3308      	adds	r3, #8
    964a:	c203      	stmia	r2!, {r0, r1}
    964c:	4563      	cmp	r3, ip
    964e:	4615      	mov	r5, r2
    9650:	d1f7      	bne.n	9642 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x56>
    9652:	881b      	ldrh	r3, [r3, #0]
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9654:	a910      	add	r1, sp, #64	; 0x40
	char cadence_sensor_2[18] = "E6:6C:AF:76:18:AD";
    9656:	8013      	strh	r3, [r2, #0]
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9658:	6823      	ldr	r3, [r4, #0]
    965a:	6818      	ldr	r0, [r3, #0]
    965c:	f7ff ff8a 	bl	9574 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Filters matched. Address: %s connectable: %s\n",
    9660:	4b20      	ldr	r3, [pc, #128]	; (96e4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xf8>)
    9662:	4a21      	ldr	r2, [pc, #132]	; (96e8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xfc>)
    9664:	4821      	ldr	r0, [pc, #132]	; (96ec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x100>)
    9666:	a910      	add	r1, sp, #64	; 0x40
    9668:	2e00      	cmp	r6, #0
    966a:	bf08      	it	eq
    966c:	461a      	moveq	r2, r3
    966e:	f013 f8e9 	bl	1c844 <printk>
	if (strstr(addr,speed_sensor))
    9672:	4639      	mov	r1, r7
    9674:	a810      	add	r0, sp, #64	; 0x40
    9676:	f014 fd23 	bl	1e0c0 <strstr>
    967a:	b160      	cbz	r0, 9696 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
		bt_scan_stop();
    967c:	f013 ffe1 	bl	1d642 <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
    9680:	4b1b      	ldr	r3, [pc, #108]	; (96f0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x104>)
    9682:	6820      	ldr	r0, [r4, #0]
    9684:	781a      	ldrb	r2, [r3, #0]
    9686:	4b1b      	ldr	r3, [pc, #108]	; (96f4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x108>)
    9688:	491b      	ldr	r1, [pc, #108]	; (96f8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x10c>)
    968a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    968e:	6800      	ldr	r0, [r0, #0]
    9690:	6862      	ldr	r2, [r4, #4]
    9692:	f008 f861 	bl	11758 <bt_conn_le_create>
	if ((strstr(addr,cadence_sensor_1) || strstr(addr,cadence_sensor_2)) && !once)
    9696:	4641      	mov	r1, r8
    9698:	a810      	add	r0, sp, #64	; 0x40
    969a:	f014 fd11 	bl	1e0c0 <strstr>
    969e:	b190      	cbz	r0, 96c6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xda>
    96a0:	4b16      	ldr	r3, [pc, #88]	; (96fc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x110>)
    96a2:	781a      	ldrb	r2, [r3, #0]
    96a4:	b9aa      	cbnz	r2, 96d2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe6>
		once = true;
    96a6:	2201      	movs	r2, #1
    96a8:	701a      	strb	r2, [r3, #0]
		bt_scan_stop();
    96aa:	f013 ffca 	bl	1d642 <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
    96ae:	4b10      	ldr	r3, [pc, #64]	; (96f0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x104>)
    96b0:	6820      	ldr	r0, [r4, #0]
    96b2:	781a      	ldrb	r2, [r3, #0]
    96b4:	4b0f      	ldr	r3, [pc, #60]	; (96f4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x108>)
    96b6:	4912      	ldr	r1, [pc, #72]	; (9700 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x114>)
    96b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    96bc:	6800      	ldr	r0, [r0, #0]
    96be:	6862      	ldr	r2, [r4, #4]
    96c0:	f008 f84a 	bl	11758 <bt_conn_le_create>
}
    96c4:	e005      	b.n	96d2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe6>
	if ((strstr(addr,cadence_sensor_1) || strstr(addr,cadence_sensor_2)) && !once)
    96c6:	4649      	mov	r1, r9
    96c8:	a810      	add	r0, sp, #64	; 0x40
    96ca:	f014 fcf9 	bl	1e0c0 <strstr>
    96ce:	2800      	cmp	r0, #0
    96d0:	d1e6      	bne.n	96a0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xb4>
}
    96d2:	b019      	add	sp, #100	; 0x64
    96d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    96d8:	00021a10 	.word	0x00021a10
    96dc:	0002271c 	.word	0x0002271c
    96e0:	0002272e 	.word	0x0002272e
    96e4:	000226eb 	.word	0x000226eb
    96e8:	000226e7 	.word	0x000226e7
    96ec:	000226ee 	.word	0x000226ee
    96f0:	2000b04c 	.word	0x2000b04c
    96f4:	200096ec 	.word	0x200096ec
    96f8:	00021b0c 	.word	0x00021b0c
    96fc:	2000b04e 	.word	0x2000b04e
    9700:	00021b1c 	.word	0x00021b1c

00009704 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    9704:	b510      	push	{r4, lr}
    9706:	221c      	movs	r2, #28
    9708:	4604      	mov	r4, r0
    970a:	2100      	movs	r1, #0
    970c:	f014 fd7d 	bl	1e20a <memset>
    9710:	4a0d      	ldr	r2, [pc, #52]	; (9748 <_ZN13deviceManagerC1Ev+0x44>)
    9712:	4b0e      	ldr	r3, [pc, #56]	; (974c <_ZN13deviceManagerC1Ev+0x48>)
    9714:	e892 0003 	ldmia.w	r2, {r0, r1}
    9718:	2224      	movs	r2, #36	; 0x24
    971a:	6023      	str	r3, [r4, #0]
    971c:	4b0c      	ldr	r3, [pc, #48]	; (9750 <_ZN13deviceManagerC1Ev+0x4c>)
    971e:	6063      	str	r3, [r4, #4]
    9720:	f104 031c 	add.w	r3, r4, #28
    9724:	e883 0003 	stmia.w	r3, {r0, r1}
    9728:	18a0      	adds	r0, r4, r2
    972a:	2100      	movs	r1, #0
    972c:	f014 fd6d 	bl	1e20a <memset>
		centralConnections[i] = nullptr;
    9730:	2300      	movs	r3, #0
    9732:	4a08      	ldr	r2, [pc, #32]	; (9754 <_ZN13deviceManagerC1Ev+0x50>)
}
    9734:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    9736:	e9c2 3300 	strd	r3, r3, [r2]
    973a:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    973e:	4a06      	ldr	r2, [pc, #24]	; (9758 <_ZN13deviceManagerC1Ev+0x54>)
    9740:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    9742:	4a06      	ldr	r2, [pc, #24]	; (975c <_ZN13deviceManagerC1Ev+0x58>)
    9744:	7013      	strb	r3, [r2, #0]
}
    9746:	bd10      	pop	{r4, pc}
    9748:	00021a24 	.word	0x00021a24
    974c:	000099e5 	.word	0x000099e5
    9750:	00009ac1 	.word	0x00009ac1
    9754:	200096ec 	.word	0x200096ec
    9758:	2000b047 	.word	0x2000b047
    975c:	2000b046 	.word	0x2000b046

00009760 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    9760:	4a07      	ldr	r2, [pc, #28]	; (9780 <_ZN13deviceManager9getDeviceEv+0x20>)
    9762:	4b08      	ldr	r3, [pc, #32]	; (9784 <_ZN13deviceManager9getDeviceEv+0x24>)
    9764:	7812      	ldrb	r2, [r2, #0]
    9766:	781b      	ldrb	r3, [r3, #0]
    9768:	b122      	cbz	r2, 9774 <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    976a:	2b00      	cmp	r3, #0
    976c:	bf14      	ite	ne
    976e:	2003      	movne	r0, #3
    9770:	2001      	moveq	r0, #1
    9772:	4770      	bx	lr
        return 0;
    9774:	2b00      	cmp	r3, #0
    9776:	bf14      	ite	ne
    9778:	2002      	movne	r0, #2
    977a:	2000      	moveq	r0, #0
}
    977c:	4770      	bx	lr
    977e:	bf00      	nop
    9780:	2000b04d 	.word	0x2000b04d
    9784:	2000b049 	.word	0x2000b049

00009788 <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    9788:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    978a:	4805      	ldr	r0, [pc, #20]	; (97a0 <_ZN13deviceManager10initButtonEv+0x18>)
    978c:	f00f f87e 	bl	1888c <dk_buttons_init>
	if (err) {
    9790:	4604      	mov	r4, r0
    9792:	b118      	cbz	r0, 979c <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    9794:	4601      	mov	r1, r0
    9796:	4803      	ldr	r0, [pc, #12]	; (97a4 <_ZN13deviceManager10initButtonEv+0x1c>)
    9798:	f013 f854 	bl	1c844 <printk>
}
    979c:	4620      	mov	r0, r4
    979e:	bd10      	pop	{r4, pc}
    97a0:	0000947d 	.word	0x0000947d
    97a4:	00022740 	.word	0x00022740

000097a8 <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    97a8:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    97aa:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    97ac:	490b      	ldr	r1, [pc, #44]	; (97dc <_ZN13deviceManager16startAdvertisingEv+0x34>)
    97ae:	9300      	str	r3, [sp, #0]
    97b0:	2202      	movs	r2, #2
    97b2:	4b0b      	ldr	r3, [pc, #44]	; (97e0 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    97b4:	480b      	ldr	r0, [pc, #44]	; (97e4 <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    97b6:	f006 ffeb 	bl	10790 <bt_le_adv_start>
	if (err) {
    97ba:	4601      	mov	r1, r0
    97bc:	b128      	cbz	r0, 97ca <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    97be:	480a      	ldr	r0, [pc, #40]	; (97e8 <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    97c0:	b003      	add	sp, #12
    97c2:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    97c6:	f013 b83d 	b.w	1c844 <printk>
	printk("Advertising successfully started\n");
    97ca:	4808      	ldr	r0, [pc, #32]	; (97ec <_ZN13deviceManager16startAdvertisingEv+0x44>)
    97cc:	f013 f83a 	bl	1c844 <printk>
	printk("Waiting for connection...\n");
    97d0:	4807      	ldr	r0, [pc, #28]	; (97f0 <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    97d2:	b003      	add	sp, #12
    97d4:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    97d8:	f013 b834 	b.w	1c844 <printk>
    97dc:	00021b68 	.word	0x00021b68
    97e0:	00021b78 	.word	0x00021b78
    97e4:	00021af8 	.word	0x00021af8
    97e8:	0002275f 	.word	0x0002275f
    97ec:	00022785 	.word	0x00022785
    97f0:	000227a7 	.word	0x000227a7

000097f4 <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    97f4:	b510      	push	{r4, lr}
    97f6:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    97f8:	f7ff ffb2 	bl	9760 <_ZN13deviceManager9getDeviceEv>
    97fc:	1e83      	subs	r3, r0, #2
    97fe:	b2db      	uxtb	r3, r3
    9800:	2b01      	cmp	r3, #1
    9802:	d82d      	bhi.n	9860 <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    9804:	f00e ffdc 	bl	187c0 <dk_leds_init>
        if (err) {
    9808:	4601      	mov	r1, r0
    980a:	b120      	cbz	r0, 9816 <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    980c:	4815      	ldr	r0, [pc, #84]	; (9864 <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    980e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    9812:	f013 b817 	b.w	1c844 <printk>
        err = initButton();
    9816:	f7ff ffb7 	bl	9788 <_ZN13deviceManager10initButtonEv>
    981a:	4601      	mov	r1, r0
        if (err) {
    981c:	b108      	cbz	r0, 9822 <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    981e:	4812      	ldr	r0, [pc, #72]	; (9868 <_ZN13deviceManager14initPeripheralEv+0x74>)
    9820:	e7f5      	b.n	980e <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    9822:	f006 fd1b 	bl	1025c <bt_enable>
        if (err) {
    9826:	4601      	mov	r1, r0
    9828:	b108      	cbz	r0, 982e <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    982a:	4810      	ldr	r0, [pc, #64]	; (986c <_ZN13deviceManager14initPeripheralEv+0x78>)
    982c:	e7ef      	b.n	980e <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    982e:	4810      	ldr	r0, [pc, #64]	; (9870 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    9830:	f013 f808 	bl	1c844 <printk>
		bt_conn_cb_register(&conn_callbacks);
    9834:	4620      	mov	r0, r4
    9836:	f007 fc69 	bl	1110c <bt_conn_cb_register>
            settings_load();
    983a:	f013 fc93 	bl	1d164 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    983e:	f104 001c 	add.w	r0, r4, #28
    9842:	f003 fced 	bl	d220 <bt_lbs_init>
        if (err) {
    9846:	4601      	mov	r1, r0
    9848:	b108      	cbz	r0, 984e <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    984a:	480a      	ldr	r0, [pc, #40]	; (9874 <_ZN13deviceManager14initPeripheralEv+0x80>)
    984c:	e7df      	b.n	980e <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    984e:	f000 faa5 	bl	9d9c <_Z17data_service_initv>
		if (err) 
    9852:	4601      	mov	r1, r0
    9854:	2800      	cmp	r0, #0
    9856:	d1f8      	bne.n	984a <_ZN13deviceManager14initPeripheralEv+0x56>
}
    9858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    985c:	f7ff bfa4 	b.w	97a8 <_ZN13deviceManager16startAdvertisingEv>
}
    9860:	bd10      	pop	{r4, pc}
    9862:	bf00      	nop
    9864:	000227c2 	.word	0x000227c2
    9868:	000227dd 	.word	0x000227dd
    986c:	000227fa 	.word	0x000227fa
    9870:	0002281a 	.word	0x0002281a
    9874:	00022831 	.word	0x00022831

00009878 <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    9878:	b500      	push	{lr}
    987a:	b089      	sub	sp, #36	; 0x24
	struct bt_le_scan_param scanParam =
    987c:	ab03      	add	r3, sp, #12
    987e:	2100      	movs	r1, #0
    9880:	4618      	mov	r0, r3
    9882:	2214      	movs	r2, #20
    9884:	f014 fcc1 	bl	1e20a <memset>
    9888:	2201      	movs	r2, #1
    988a:	f88d 200c 	strb.w	r2, [sp, #12]
    988e:	9204      	str	r2, [sp, #16]
    9890:	4a0f      	ldr	r2, [pc, #60]	; (98d0 <_ZN13deviceManager8initScanEv+0x58>)
	};
    9892:	9000      	str	r0, [sp, #0]
	struct bt_le_scan_param scanParam =
    9894:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    9896:	2200      	movs	r2, #0
    9898:	9201      	str	r2, [sp, #4]
    989a:	4a0e      	ldr	r2, [pc, #56]	; (98d4 <_ZN13deviceManager8initScanEv+0x5c>)
	bt_scan_init(&scanInit);
    989c:	4668      	mov	r0, sp
	struct bt_scan_init_param scanInit = {
    989e:	9202      	str	r2, [sp, #8]
	bt_scan_init(&scanInit);
    98a0:	f003 fc44 	bl	d12c <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    98a4:	480c      	ldr	r0, [pc, #48]	; (98d8 <_ZN13deviceManager8initScanEv+0x60>)
    98a6:	f003 faab 	bl	ce00 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    98aa:	490c      	ldr	r1, [pc, #48]	; (98dc <_ZN13deviceManager8initScanEv+0x64>)
    98ac:	2003      	movs	r0, #3
    98ae:	f003 fab7 	bl	ce20 <bt_scan_filter_add>
	if (err) {
    98b2:	4601      	mov	r1, r0
    98b4:	b128      	cbz	r0, 98c2 <_ZN13deviceManager8initScanEv+0x4a>
		printk("Scanning filters cannot be set\n");
    98b6:	480a      	ldr	r0, [pc, #40]	; (98e0 <_ZN13deviceManager8initScanEv+0x68>)
		printk("Filters cannot be turned on\n");
    98b8:	f012 ffc4 	bl	1c844 <printk>
}
    98bc:	b009      	add	sp, #36	; 0x24
    98be:	f85d fb04 	ldr.w	pc, [sp], #4
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    98c2:	2004      	movs	r0, #4
    98c4:	f003 fb10 	bl	cee8 <bt_scan_filter_enable>
	if (err) {
    98c8:	2800      	cmp	r0, #0
    98ca:	d0f7      	beq.n	98bc <_ZN13deviceManager8initScanEv+0x44>
		printk("Filters cannot be turned on\n");
    98cc:	4805      	ldr	r0, [pc, #20]	; (98e4 <_ZN13deviceManager8initScanEv+0x6c>)
    98ce:	e7f3      	b.n	98b8 <_ZN13deviceManager8initScanEv+0x40>
    98d0:	00300060 	.word	0x00300060
    98d4:	000224f8 	.word	0x000224f8
    98d8:	2000816c 	.word	0x2000816c
    98dc:	00022500 	.word	0x00022500
    98e0:	0002284e 	.word	0x0002284e
    98e4:	0002286e 	.word	0x0002286e

000098e8 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    98e8:	2001      	movs	r0, #1
void deviceManager::startScan(){
    98ea:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    98ec:	f003 fc50 	bl	d190 <bt_scan_start>
	if (err) {
    98f0:	4601      	mov	r1, r0
    98f2:	b110      	cbz	r0, 98fa <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    98f4:	4803      	ldr	r0, [pc, #12]	; (9904 <_ZN13deviceManager9startScanEv+0x1c>)
    98f6:	f012 ffa5 	bl	1c844 <printk>
}
    98fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    98fe:	4802      	ldr	r0, [pc, #8]	; (9908 <_ZN13deviceManager9startScanEv+0x20>)
    9900:	f012 bfa0 	b.w	1c844 <printk>
    9904:	0002288b 	.word	0x0002288b
    9908:	000228ad 	.word	0x000228ad

0000990c <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    990c:	b510      	push	{r4, lr}
    990e:	4604      	mov	r4, r0
	printk("Init Central\n");
    9910:	481c      	ldr	r0, [pc, #112]	; (9984 <_ZN13deviceManager11initCentralEv+0x78>)
    9912:	f012 ff97 	bl	1c844 <printk>
	if (getDevice() == 1 || getDevice() == 3)
    9916:	f7ff ff23 	bl	9760 <_ZN13deviceManager9getDeviceEv>
    991a:	2801      	cmp	r0, #1
    991c:	d00a      	beq.n	9934 <_ZN13deviceManager11initCentralEv+0x28>
    991e:	2803      	cmp	r0, #3
    9920:	d12f      	bne.n	9982 <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    9922:	4620      	mov	r0, r4
    9924:	f007 fbf2 	bl	1110c <bt_conn_cb_register>
		initScan();
    9928:	f7ff ffa6 	bl	9878 <_ZN13deviceManager8initScanEv>
}
    992c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9930:	f7ff bfda 	b.w	98e8 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    9934:	2000      	movs	r0, #0
    9936:	f006 fc91 	bl	1025c <bt_enable>
			if (err) {
    993a:	4601      	mov	r1, r0
    993c:	b120      	cbz	r0, 9948 <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    993e:	4812      	ldr	r0, [pc, #72]	; (9988 <_ZN13deviceManager11initCentralEv+0x7c>)
}
    9940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9944:	f012 bf7e 	b.w	1c844 <printk>
			printk("Bluetooth ready\n");
    9948:	4810      	ldr	r0, [pc, #64]	; (998c <_ZN13deviceManager11initCentralEv+0x80>)
    994a:	f012 ff7b 	bl	1c844 <printk>
			err = dk_leds_init();
    994e:	f00e ff37 	bl	187c0 <dk_leds_init>
			if (err) {
    9952:	4601      	mov	r1, r0
    9954:	b108      	cbz	r0, 995a <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    9956:	480e      	ldr	r0, [pc, #56]	; (9990 <_ZN13deviceManager11initCentralEv+0x84>)
    9958:	e7f2      	b.n	9940 <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    995a:	f7ff ff15 	bl	9788 <_ZN13deviceManager10initButtonEv>
			if (err) {
    995e:	4601      	mov	r1, r0
    9960:	b108      	cbz	r0, 9966 <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    9962:	480c      	ldr	r0, [pc, #48]	; (9994 <_ZN13deviceManager11initCentralEv+0x88>)
    9964:	e7ec      	b.n	9940 <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    9966:	f104 001c 	add.w	r0, r4, #28
    996a:	f003 fc59 	bl	d220 <bt_lbs_init>
			if (err) {
    996e:	4601      	mov	r1, r0
    9970:	b108      	cbz	r0, 9976 <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    9972:	4809      	ldr	r0, [pc, #36]	; (9998 <_ZN13deviceManager11initCentralEv+0x8c>)
    9974:	e7e4      	b.n	9940 <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    9976:	f013 fbf5 	bl	1d164 <settings_load>
				printk("Settings loaded\n");
    997a:	4808      	ldr	r0, [pc, #32]	; (999c <_ZN13deviceManager11initCentralEv+0x90>)
    997c:	f012 ff62 	bl	1c844 <printk>
    9980:	e7cf      	b.n	9922 <_ZN13deviceManager11initCentralEv+0x16>
}
    9982:	bd10      	pop	{r4, pc}
    9984:	000228ba 	.word	0x000228ba
    9988:	000227fa 	.word	0x000227fa
    998c:	000228c8 	.word	0x000228c8
    9990:	000227c2 	.word	0x000227c2
    9994:	000227dd 	.word	0x000227dd
    9998:	00022831 	.word	0x00022831
    999c:	000228d9 	.word	0x000228d9

000099a0 <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    99a0:	b410      	push	{r4}
    isPeripheral = p;
    99a2:	4c09      	ldr	r4, [pc, #36]	; (99c8 <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    99a4:	4603      	mov	r3, r0
    isPeripheral = p;
    99a6:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    99a8:	4c08      	ldr	r4, [pc, #32]	; (99cc <_ZN13deviceManager9setDeviceEbb+0x2c>)
    99aa:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    99ac:	b139      	cbz	r1, 99be <_ZN13deviceManager9setDeviceEbb+0x1e>
    99ae:	b11a      	cbz	r2, 99b8 <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    99b0:	4618      	mov	r0, r3
}
    99b2:	bc10      	pop	{r4}
		initPeripheral();
    99b4:	f7ff bf1e 	b.w	97f4 <_ZN13deviceManager14initPeripheralEv>
}
    99b8:	bc10      	pop	{r4}
		initCentral();
    99ba:	f7ff bfa7 	b.w	990c <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    99be:	2a00      	cmp	r2, #0
    99c0:	d1f6      	bne.n	99b0 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    99c2:	bc10      	pop	{r4}
    99c4:	4770      	bx	lr
    99c6:	bf00      	nop
    99c8:	2000b049 	.word	0x2000b049
    99cc:	2000b04d 	.word	0x2000b04d

000099d0 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    99d0:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    99d2:	4803      	ldr	r0, [pc, #12]	; (99e0 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    99d4:	f012 ff36 	bl	1c844 <printk>
}
    99d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    99dc:	f7ff bf84 	b.w	98e8 <_ZN13deviceManager9startScanEv>
    99e0:	000228ea 	.word	0x000228ea

000099e4 <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    99e4:	b570      	push	{r4, r5, r6, lr}
    99e6:	b090      	sub	sp, #64	; 0x40
    99e8:	460d      	mov	r5, r1
	int error = bt_conn_get_info(conn,&info);
    99ea:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    99ec:	4606      	mov	r6, r0
	int error = bt_conn_get_info(conn,&info);
    99ee:	f007 fe87 	bl	11700 <bt_conn_get_info>
	if (error)
    99f2:	b120      	cbz	r0, 99fe <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    99f4:	4826      	ldr	r0, [pc, #152]	; (9a90 <_ZN13deviceManager9connectedEP7bt_connh+0xac>)
    99f6:	f012 ff25 	bl	1c844 <printk>
}
    99fa:	b010      	add	sp, #64	; 0x40
    99fc:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    99fe:	f89d 4005 	ldrb.w	r4, [sp, #5]
    9a02:	bb4c      	cbnz	r4, 9a58 <_ZN13deviceManager9connectedEP7bt_connh+0x74>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9a04:	4630      	mov	r0, r6
    9a06:	f014 fffb 	bl	1ea00 <bt_conn_get_dst>
    9a0a:	a908      	add	r1, sp, #32
    9a0c:	f7ff fdb2 	bl	9574 <bt_addr_le_to_str.constprop.0.isra.0>
		if (err) {
    9a10:	b13d      	cbz	r5, 9a22 <_ZN13deviceManager9connectedEP7bt_connh+0x3e>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9a12:	462a      	mov	r2, r5
    9a14:	481f      	ldr	r0, [pc, #124]	; (9a94 <_ZN13deviceManager9connectedEP7bt_connh+0xb0>)
    9a16:	a908      	add	r1, sp, #32
    9a18:	f012 ff14 	bl	1c844 <printk>
			startScan();
    9a1c:	f7ff ff64 	bl	98e8 <_ZN13deviceManager9startScanEv>
    9a20:	e7eb      	b.n	99fa <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected: %s\n", addr);
    9a22:	481d      	ldr	r0, [pc, #116]	; (9a98 <_ZN13deviceManager9connectedEP7bt_connh+0xb4>)
    9a24:	a908      	add	r1, sp, #32
    9a26:	f012 ff0d 	bl	1c844 <printk>
		centralConnections[nbrConnectionsCentral] = conn;
    9a2a:	4b1c      	ldr	r3, [pc, #112]	; (9a9c <_ZN13deviceManager9connectedEP7bt_connh+0xb8>)
    9a2c:	481c      	ldr	r0, [pc, #112]	; (9aa0 <_ZN13deviceManager9connectedEP7bt_connh+0xbc>)
    9a2e:	781c      	ldrb	r4, [r3, #0]
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9a30:	491c      	ldr	r1, [pc, #112]	; (9aa4 <_ZN13deviceManager9connectedEP7bt_connh+0xc0>)
		centralConnections[nbrConnectionsCentral] = conn;
    9a32:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
		nbrConnectionsCentral++;
    9a36:	3401      	adds	r4, #1
    9a38:	b2e4      	uxtb	r4, r4
    9a3a:	701c      	strb	r4, [r3, #0]
		err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9a3c:	3c01      	subs	r4, #1
    9a3e:	462b      	mov	r3, r5
    9a40:	4a19      	ldr	r2, [pc, #100]	; (9aa8 <_ZN13deviceManager9connectedEP7bt_connh+0xc4>)
    9a42:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    9a46:	f003 f83d 	bl	cac4 <bt_gatt_dm_start>
		if (err) 
    9a4a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9a4e:	d0d4      	beq.n	99fa <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			printk("Could not start service discovery, err %d\n", err);
    9a50:	4816      	ldr	r0, [pc, #88]	; (9aac <_ZN13deviceManager9connectedEP7bt_connh+0xc8>)
			printk("Connection failed (err %u)\n", err);
    9a52:	f012 fef7 	bl	1c844 <printk>
			return;
    9a56:	e7d0      	b.n	99fa <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9a58:	2c01      	cmp	r4, #1
    9a5a:	d1ce      	bne.n	99fa <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    9a5c:	b115      	cbz	r5, 9a64 <_ZN13deviceManager9connectedEP7bt_connh+0x80>
			printk("Connection failed (err %u)\n", err);
    9a5e:	4629      	mov	r1, r5
    9a60:	4813      	ldr	r0, [pc, #76]	; (9ab0 <_ZN13deviceManager9connectedEP7bt_connh+0xcc>)
    9a62:	e7f6      	b.n	9a52 <_ZN13deviceManager9connectedEP7bt_connh+0x6e>
		printk("Connected\n");
    9a64:	4813      	ldr	r0, [pc, #76]	; (9ab4 <_ZN13deviceManager9connectedEP7bt_connh+0xd0>)
    9a66:	f012 feed 	bl	1c844 <printk>
		connectedP = true;
    9a6a:	4b13      	ldr	r3, [pc, #76]	; (9ab8 <_ZN13deviceManager9connectedEP7bt_connh+0xd4>)
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9a6c:	4628      	mov	r0, r5
		connectedP = true;
    9a6e:	701c      	strb	r4, [r3, #0]
		peripheralConn = conn;
    9a70:	4b12      	ldr	r3, [pc, #72]	; (9abc <_ZN13deviceManager9connectedEP7bt_connh+0xd8>)
    9a72:	601e      	str	r6, [r3, #0]
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9a74:	f016 ffa1 	bl	209ba <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9a78:	f7ff fe72 	bl	9760 <_ZN13deviceManager9getDeviceEv>
    9a7c:	2803      	cmp	r0, #3
    9a7e:	d1bc      	bne.n	99fa <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9a80:	4b06      	ldr	r3, [pc, #24]	; (9a9c <_ZN13deviceManager9connectedEP7bt_connh+0xb8>)
    9a82:	781b      	ldrb	r3, [r3, #0]
    9a84:	2b00      	cmp	r3, #0
    9a86:	d1b8      	bne.n	99fa <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    9a88:	f7ff fef6 	bl	9878 <_ZN13deviceManager8initScanEv>
    9a8c:	e7c6      	b.n	9a1c <_ZN13deviceManager9connectedEP7bt_connh+0x38>
    9a8e:	bf00      	nop
    9a90:	000228fd 	.word	0x000228fd
    9a94:	00022923 	.word	0x00022923
    9a98:	00022941 	.word	0x00022941
    9a9c:	2000b04c 	.word	0x2000b04c
    9aa0:	200096ec 	.word	0x200096ec
    9aa4:	00022504 	.word	0x00022504
    9aa8:	20008174 	.word	0x20008174
    9aac:	00022620 	.word	0x00022620
    9ab0:	00022950 	.word	0x00022950
    9ab4:	0002296c 	.word	0x0002296c
    9ab8:	2000b047 	.word	0x2000b047
    9abc:	200096e8 	.word	0x200096e8

00009ac0 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ac2:	b091      	sub	sp, #68	; 0x44
    9ac4:	460f      	mov	r7, r1
	int error = bt_conn_get_info(conn,&info);
    9ac6:	a901      	add	r1, sp, #4
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9ac8:	4606      	mov	r6, r0
	int error = bt_conn_get_info(conn,&info);
    9aca:	f007 fe19 	bl	11700 <bt_conn_get_info>
	if (error)
    9ace:	4605      	mov	r5, r0
    9ad0:	b120      	cbz	r0, 9adc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c>
		printk("Cannot get info of connection object\n");
    9ad2:	481f      	ldr	r0, [pc, #124]	; (9b50 <_ZN13deviceManager12disconnectedEP7bt_connh+0x90>)
    9ad4:	f012 feb6 	bl	1c844 <printk>
}
    9ad8:	b011      	add	sp, #68	; 0x44
    9ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9adc:	f89d 4005 	ldrb.w	r4, [sp, #5]
    9ae0:	2c01      	cmp	r4, #1
    9ae2:	d10d      	bne.n	9b00 <_ZN13deviceManager12disconnectedEP7bt_connh+0x40>
		printk("Disconnected from Application (reason %u)\n", reason);
    9ae4:	4639      	mov	r1, r7
    9ae6:	481b      	ldr	r0, [pc, #108]	; (9b54 <_ZN13deviceManager12disconnectedEP7bt_connh+0x94>)
    9ae8:	f012 feac 	bl	1c844 <printk>
		connectedP = false;
    9aec:	4b1a      	ldr	r3, [pc, #104]	; (9b58 <_ZN13deviceManager12disconnectedEP7bt_connh+0x98>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9aee:	4628      	mov	r0, r5
		connectedP = false;
    9af0:	701d      	strb	r5, [r3, #0]
		peripheralConn = nullptr;
    9af2:	4b1a      	ldr	r3, [pc, #104]	; (9b5c <_ZN13deviceManager12disconnectedEP7bt_connh+0x9c>)
    9af4:	601d      	str	r5, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9af6:	f016 ff63 	bl	209c0 <dk_set_led_off>
		startAdvertising();
    9afa:	f7ff fe55 	bl	97a8 <_ZN13deviceManager16startAdvertisingEv>
    9afe:	e7eb      	b.n	9ad8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9b00:	2c00      	cmp	r4, #0
    9b02:	d1e9      	bne.n	9ad8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9b04:	4630      	mov	r0, r6
    9b06:	f014 ff7b 	bl	1ea00 <bt_conn_get_dst>
    9b0a:	a908      	add	r1, sp, #32
    9b0c:	f7ff fd32 	bl	9574 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9b10:	4813      	ldr	r0, [pc, #76]	; (9b60 <_ZN13deviceManager12disconnectedEP7bt_connh+0xa0>)
    9b12:	a908      	add	r1, sp, #32
    9b14:	463a      	mov	r2, r7
    9b16:	f012 fe95 	bl	1c844 <printk>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9b1a:	4912      	ldr	r1, [pc, #72]	; (9b64 <_ZN13deviceManager12disconnectedEP7bt_connh+0xa4>)
			if (centralConnections[i] == conn)
    9b1c:	4d12      	ldr	r5, [pc, #72]	; (9b68 <_ZN13deviceManager12disconnectedEP7bt_connh+0xa8>)
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9b1e:	780b      	ldrb	r3, [r1, #0]
    9b20:	1e58      	subs	r0, r3, #1
    9b22:	b2e2      	uxtb	r2, r4
    9b24:	4282      	cmp	r2, r0
    9b26:	da09      	bge.n	9b3c <_ZN13deviceManager12disconnectedEP7bt_connh+0x7c>
			if (centralConnections[i] == conn)
    9b28:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
    9b2c:	3401      	adds	r4, #1
    9b2e:	42b7      	cmp	r7, r6
    9b30:	d1f7      	bne.n	9b22 <_ZN13deviceManager12disconnectedEP7bt_connh+0x62>
				centralConnections[i] = nullptr;
    9b32:	2300      	movs	r3, #0
				nbrConnectionsCentral--;
    9b34:	7008      	strb	r0, [r1, #0]
				centralConnections[i] = nullptr;
    9b36:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
				return;
    9b3a:	e7cd      	b.n	9ad8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
		if (nbrConnectionsCentral == 0)
    9b3c:	b923      	cbnz	r3, 9b48 <_ZN13deviceManager12disconnectedEP7bt_connh+0x88>
			connectedC = false;
    9b3e:	4a0b      	ldr	r2, [pc, #44]	; (9b6c <_ZN13deviceManager12disconnectedEP7bt_connh+0xac>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9b40:	2001      	movs	r0, #1
			connectedC = false;
    9b42:	7013      	strb	r3, [r2, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9b44:	f016 ff3c 	bl	209c0 <dk_set_led_off>
		startScan();	
    9b48:	f7ff fece 	bl	98e8 <_ZN13deviceManager9startScanEv>
    9b4c:	e7c4      	b.n	9ad8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
    9b4e:	bf00      	nop
    9b50:	000228fd 	.word	0x000228fd
    9b54:	00022977 	.word	0x00022977
    9b58:	2000b047 	.word	0x2000b047
    9b5c:	200096e8 	.word	0x200096e8
    9b60:	000229a2 	.word	0x000229a2
    9b64:	2000b04c 	.word	0x2000b04c
    9b68:	200096ec 	.word	0x200096ec
    9b6c:	2000b046 	.word	0x2000b046

00009b70 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompleted(struct bt_gatt_dm *disc, void *ctx) {
    9b70:	b570      	push	{r4, r5, r6, lr}
	chrc = bt_gatt_dm_char_by_uuid(disc,BT_UUID_CSC_MEASUREMENT);
    9b72:	4927      	ldr	r1, [pc, #156]	; (9c10 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xa0>)
void deviceManager::discoveryCompleted(struct bt_gatt_dm *disc, void *ctx) {
    9b74:	4604      	mov	r4, r0
	chrc = bt_gatt_dm_char_by_uuid(disc,BT_UUID_CSC_MEASUREMENT);
    9b76:	f002 ff79 	bl	ca6c <bt_gatt_dm_char_by_uuid>
	if (!chrc) {
    9b7a:	4605      	mov	r5, r0
    9b7c:	b960      	cbnz	r0, 9b98 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x28>
		printk("Missing CSC measurement characteristic\n");
    9b7e:	4825      	ldr	r0, [pc, #148]	; (9c14 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xa4>)
		printk("Missing CSC measurement char CCC descriptor\n");
    9b80:	f012 fe60 	bl	1c844 <printk>
		err = bt_gatt_dm_data_release(disc);
    9b84:	4620      	mov	r0, r4
    9b86:	f013 fd44 	bl	1d612 <bt_gatt_dm_data_release>
		if (err) {
    9b8a:	4601      	mov	r1, r0
    9b8c:	b360      	cbz	r0, 9be8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x78>
}
    9b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Could not release discovery data, err: %d\n", err);
    9b92:	4821      	ldr	r0, [pc, #132]	; (9c18 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xa8>)
    9b94:	f012 be56 	b.w	1c844 <printk>
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_CSC_MEASUREMENT);
    9b98:	4601      	mov	r1, r0
    9b9a:	4a20      	ldr	r2, [pc, #128]	; (9c1c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xac>)
    9b9c:	4620      	mov	r0, r4
    9b9e:	f013 fd26 	bl	1d5ee <bt_gatt_dm_desc_by_uuid>
	if (!desc) {
    9ba2:	b908      	cbnz	r0, 9ba8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x38>
		printk("Missing CSC measurement char CCC descriptor\n");
    9ba4:	481e      	ldr	r0, [pc, #120]	; (9c20 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xb0>)
    9ba6:	e7eb      	b.n	9b80 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x10>
	param.value_handle = desc->handle;
    9ba8:	8883      	ldrh	r3, [r0, #4]
    9baa:	4e1e      	ldr	r6, [pc, #120]	; (9c24 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xb4>)
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    9bac:	4629      	mov	r1, r5
    9bae:	4620      	mov	r0, r4
    9bb0:	4a1d      	ldr	r2, [pc, #116]	; (9c28 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xb8>)
	param.value_handle = desc->handle;
    9bb2:	8133      	strh	r3, [r6, #8]
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    9bb4:	f013 fd1b 	bl	1d5ee <bt_gatt_dm_desc_by_uuid>
	if (!desc) {
    9bb8:	2800      	cmp	r0, #0
    9bba:	d0f3      	beq.n	9ba4 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x34>
	param.ccc_handle = desc->handle;
    9bbc:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
    9bbe:	4620      	mov	r0, r4
	param.ccc_handle = desc->handle;
    9bc0:	8173      	strh	r3, [r6, #10]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param);
    9bc2:	f013 fcc7 	bl	1d554 <bt_gatt_dm_conn_get>
    9bc6:	4631      	mov	r1, r6
    9bc8:	f00b f850 	bl	14c6c <bt_gatt_subscribe>
	if (err) {
    9bcc:	4601      	mov	r1, r0
    9bce:	b110      	cbz	r0, 9bd6 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x66>
		printk("Subscribtion failed (err %d)\n", err);
    9bd0:	4816      	ldr	r0, [pc, #88]	; (9c2c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xbc>)
    9bd2:	f012 fe37 	bl	1c844 <printk>
	bt_gatt_dm_data_release(disc);
    9bd6:	4620      	mov	r0, r4
    9bd8:	f013 fd1b 	bl	1d612 <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    9bdc:	4b14      	ldr	r3, [pc, #80]	; (9c30 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xc0>)
    9bde:	781b      	ldrb	r3, [r3, #0]
    9be0:	2b01      	cmp	r3, #1
    9be2:	d002      	beq.n	9bea <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x7a>
    9be4:	2b02      	cmp	r3, #2
    9be6:	d007      	beq.n	9bf8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x88>
}
    9be8:	bd70      	pop	{r4, r5, r6, pc}
		startScan();
    9bea:	f7ff fe7d 	bl	98e8 <_ZN13deviceManager9startScanEv>
}
    9bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("First discovery completed\n");
    9bf2:	4810      	ldr	r0, [pc, #64]	; (9c34 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xc4>)
    9bf4:	f012 be26 	b.w	1c844 <printk>
		printk("Second discovery completed\n");
    9bf8:	480f      	ldr	r0, [pc, #60]	; (9c38 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xc8>)
    9bfa:	f012 fe23 	bl	1c844 <printk>
		dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9bfe:	2001      	movs	r0, #1
    9c00:	f016 fedb 	bl	209ba <dk_set_led_on>
		connectedC = true;	
    9c04:	2301      	movs	r3, #1
    9c06:	4a0d      	ldr	r2, [pc, #52]	; (9c3c <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xcc>)
    9c08:	7013      	strb	r3, [r2, #0]
		subscriptionDone = true;
    9c0a:	4a0d      	ldr	r2, [pc, #52]	; (9c40 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0xd0>)
    9c0c:	7013      	strb	r3, [r2, #0]
		break;
    9c0e:	e7eb      	b.n	9be8 <_ZN13deviceManager18discoveryCompletedEP10bt_gatt_dmPv+0x78>
    9c10:	00022508 	.word	0x00022508
    9c14:	000229d0 	.word	0x000229d0
    9c18:	000229f8 	.word	0x000229f8
    9c1c:	0002250c 	.word	0x0002250c
    9c20:	00022a23 	.word	0x00022a23
    9c24:	20008148 	.word	0x20008148
    9c28:	00022510 	.word	0x00022510
    9c2c:	00022a50 	.word	0x00022a50
    9c30:	2000b04c 	.word	0x2000b04c
    9c34:	00022a6e 	.word	0x00022a6e
    9c38:	00022a89 	.word	0x00022a89
    9c3c:	2000b046 	.word	0x2000b046
    9c40:	2000b04b 	.word	0x2000b04b

00009c44 <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9c44:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9c46:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9c48:	7403      	strb	r3, [r0, #16]
    switch (type)
    9c4a:	d004      	beq.n	9c56 <_ZN7dataCSC8saveDataEPKv+0x12>
    9c4c:	2b02      	cmp	r3, #2
    9c4e:	d00d      	beq.n	9c6c <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9c50:	480c      	ldr	r0, [pc, #48]	; (9c84 <_ZN7dataCSC8saveDataEPKv+0x40>)
    9c52:	f012 bdf7 	b.w	1c844 <printk>
        oldSumRevSpeed = sumRevSpeed;
    9c56:	8803      	ldrh	r3, [r0, #0]
    9c58:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9c5a:	8903      	ldrh	r3, [r0, #8]
    9c5c:	8143      	strh	r3, [r0, #10]
	return ((uint16_t)src[1] << 8) | src[0];
    9c5e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9c62:	8003      	strh	r3, [r0, #0]
    9c64:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9c68:	8103      	strh	r3, [r0, #8]
        break;
    9c6a:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    9c6c:	8883      	ldrh	r3, [r0, #4]
    9c6e:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    9c70:	8983      	ldrh	r3, [r0, #12]
    9c72:	81c3      	strh	r3, [r0, #14]
    9c74:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9c78:	8083      	strh	r3, [r0, #4]
    9c7a:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9c7e:	8183      	strh	r3, [r0, #12]
}
    9c80:	4770      	bx	lr
    9c82:	bf00      	nop
    9c84:	00022ab7 	.word	0x00022ab7

00009c88 <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9c8c:	8985      	ldrh	r5, [r0, #12]
    9c8e:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9c90:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9c92:	429d      	cmp	r5, r3
    9c94:	d02f      	beq.n	9cf6 <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9c96:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9c9a:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9c9e:	45c8      	cmp	r8, r9
    9ca0:	d029      	beq.n	9cf6 <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9ca2:	1aed      	subs	r5, r5, r3
    9ca4:	4628      	mov	r0, r5
    9ca6:	f7fe fc1d 	bl	84e4 <__aeabi_i2d>
    9caa:	2200      	movs	r2, #0
    9cac:	4b13      	ldr	r3, [pc, #76]	; (9cfc <_ZN7dataCSC7calcRPMEv+0x74>)
    9cae:	f7fe fc83 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9cb2:	2200      	movs	r2, #0
    9cb4:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9cb6:	4606      	mov	r6, r0
    9cb8:	460f      	mov	r7, r1
        if (time < 0)
    9cba:	f7fe feef 	bl	8a9c <__aeabi_dcmplt>
    9cbe:	b130      	cbz	r0, 9cce <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff -oldLastEventCadence + lastEventCadence;
    9cc0:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9cc4:	30ff      	adds	r0, #255	; 0xff
    9cc6:	f7fe fc0d 	bl	84e4 <__aeabi_i2d>
    9cca:	4606      	mov	r6, r0
    9ccc:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9cce:	203c      	movs	r0, #60	; 0x3c
    9cd0:	eba8 0809 	sub.w	r8, r8, r9
    9cd4:	fb00 f008 	mul.w	r0, r0, r8
    9cd8:	f7fe fc04 	bl	84e4 <__aeabi_i2d>
    9cdc:	4632      	mov	r2, r6
    9cde:	463b      	mov	r3, r7
    9ce0:	f7fe fd94 	bl	880c <__aeabi_ddiv>
    9ce4:	4602      	mov	r2, r0
    9ce6:	460b      	mov	r3, r1
    9ce8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
        retVal = (uint16_t) rpm;
    9cec:	f7fe fefe 	bl	8aec <__aeabi_d2uiz>
    9cf0:	b280      	uxth	r0, r0
}
    9cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9cf6:	2000      	movs	r0, #0
    9cf8:	e7fb      	b.n	9cf2 <_ZN7dataCSC7calcRPMEv+0x6a>
    9cfa:	bf00      	nop
    9cfc:	3f500000 	.word	0x3f500000

00009d00 <_Z15on_cccd_changedPK12bt_gatt_attrt>:

/* This function is called whenever the CCCD register has been changed by the client*/
void on_cccd_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
    9d00:	2901      	cmp	r1, #1
    9d02:	d004      	beq.n	9d0e <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9d04:	2902      	cmp	r1, #2
    9d06:	d005      	beq.n	9d14 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9d08:	b931      	cbnz	r1, 9d18 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9d0a:	4804      	ldr	r0, [pc, #16]	; (9d1c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9d0c:	e000      	b.n	9d10 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9d0e:	4804      	ldr	r0, [pc, #16]	; (9d20 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9d10:	f012 bd98 	b.w	1c844 <printk>
            printk("Notifications ON with Indications\n");
    9d14:	4803      	ldr	r0, [pc, #12]	; (9d24 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9d16:	e7fb      	b.n	9d10 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9d18:	4803      	ldr	r0, [pc, #12]	; (9d28 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9d1a:	e7f9      	b.n	9d10 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9d1c:	00022afa 	.word	0x00022afa
    9d20:	00022ac5 	.word	0x00022ac5
    9d24:	00022ad7 	.word	0x00022ad7
    9d28:	00022b0d 	.word	0x00022b0d

00009d2c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{
    9d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d2e:	4607      	mov	r7, r0
    9d30:	461c      	mov	r4, r3
    diameter = (uint8_t ) *buffer;
    9d32:	7810      	ldrb	r0, [r2, #0]
    9d34:	4b13      	ldr	r3, [pc, #76]	; (9d84 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x58>)
{
    9d36:	460e      	mov	r6, r1
    diameter = (uint8_t ) *buffer;
    9d38:	7018      	strb	r0, [r3, #0]
    if (diameter & 0b10000000 == 0b10000000)
    9d3a:	07c3      	lsls	r3, r0, #31
{
    9d3c:	4615      	mov	r5, r2
    if (diameter & 0b10000000 == 0b10000000)
    9d3e:	d519      	bpl.n	9d74 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
        dia = diameter + 0.5;
    9d40:	f7fe fbd0 	bl	84e4 <__aeabi_i2d>
    9d44:	2200      	movs	r2, #0
    9d46:	4b10      	ldr	r3, [pc, #64]	; (9d88 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>)
    9d48:	f7fe fa80 	bl	824c <__adddf3>
    9d4c:	4b0f      	ldr	r3, [pc, #60]	; (9d8c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x60>)
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    9d4e:	463a      	mov	r2, r7
    9d50:	e9c3 0100 	strd	r0, r1, [r3]
    9d54:	8a31      	ldrh	r1, [r6, #16]
    9d56:	480e      	ldr	r0, [pc, #56]	; (9d90 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x64>)
    9d58:	f012 fd74 	bl	1c844 <printk>
    9d5c:	2100      	movs	r1, #0
        printk("%02X", buffer[i]);
    9d5e:	4f0d      	ldr	r7, [pc, #52]	; (9d94 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x68>)
    for(uint8_t i = 0; i < len; i++){
    9d60:	1c4e      	adds	r6, r1, #1
    9d62:	b2c9      	uxtb	r1, r1
    9d64:	42a1      	cmp	r1, r4
    9d66:	da08      	bge.n	9d7a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x4e>
        printk("%02X", buffer[i]);
    9d68:	5c69      	ldrb	r1, [r5, r1]
    9d6a:	4638      	mov	r0, r7
    9d6c:	f012 fd6a 	bl	1c844 <printk>
    for(uint8_t i = 0; i < len; i++){
    9d70:	4631      	mov	r1, r6
    9d72:	e7f5      	b.n	9d60 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x34>
        dia = diameter;
    9d74:	f7fe fba6 	bl	84c4 <__aeabi_ui2d>
    9d78:	e7e8      	b.n	9d4c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x20>
    printk("\n");
    9d7a:	4807      	ldr	r0, [pc, #28]	; (9d98 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x6c>)
    9d7c:	f012 fd62 	bl	1c844 <printk>
}
    9d80:	4620      	mov	r0, r4
    9d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d84:	2000b230 	.word	0x2000b230
    9d88:	3fe00000 	.word	0x3fe00000
    9d8c:	200086f8 	.word	0x200086f8
    9d90:	00022b3b 	.word	0x00022b3b
    9d94:	00022b67 	.word	0x00022b67
    9d98:	000260f6 	.word	0x000260f6

00009d9c <_Z17data_service_initv>:
{
    9d9c:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    9d9e:	22f0      	movs	r2, #240	; 0xf0
    9da0:	2100      	movs	r1, #0
    9da2:	4805      	ldr	r0, [pc, #20]	; (9db8 <_Z17data_service_initv+0x1c>)
    9da4:	f014 fa31 	bl	1e20a <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    9da8:	22f0      	movs	r2, #240	; 0xf0
    9daa:	2100      	movs	r1, #0
    9dac:	4803      	ldr	r0, [pc, #12]	; (9dbc <_Z17data_service_initv+0x20>)
    9dae:	f014 fa2c 	bl	1e20a <memset>
}
    9db2:	2000      	movs	r0, #0
    9db4:	bd08      	pop	{r3, pc}
    9db6:	bf00      	nop
    9db8:	2000b050 	.word	0x2000b050
    9dbc:	2000b140 	.word	0x2000b140

00009dc0 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    9dc0:	2300      	movs	r3, #0
{
    9dc2:	b510      	push	{r4, lr}
    9dc4:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    9dc6:	9303      	str	r3, [sp, #12]
    9dc8:	9305      	str	r3, [sp, #20]
    9dca:	4b0d      	ldr	r3, [pc, #52]	; (9e00 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    9dcc:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    9dd0:	9300      	str	r3, [sp, #0]
    9dd2:	4b0c      	ldr	r3, [pc, #48]	; (9e04 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9dd4:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    9dd6:	9304      	str	r3, [sp, #16]
    };
    9dd8:	4b0b      	ldr	r3, [pc, #44]	; (9e08 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    9dda:	4604      	mov	r4, r0
    };
    9ddc:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9de0:	4619      	mov	r1, r3
    9de2:	f00a fb2f 	bl	14444 <bt_gatt_is_subscribed>
    9de6:	b148      	cbz	r0, 9dfc <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    9de8:	4669      	mov	r1, sp
    9dea:	4620      	mov	r0, r4
    9dec:	f00a f932 	bl	14054 <bt_gatt_notify_cb>
    9df0:	b110      	cbz	r0, 9df8 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    9df2:	4806      	ldr	r0, [pc, #24]	; (9e0c <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    9df4:	f012 fd26 	bl	1c844 <printk>
    }
}
    9df8:	b006      	add	sp, #24
    9dfa:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    9dfc:	4804      	ldr	r0, [pc, #16]	; (9e10 <_Z17data_service_sendP7bt_connPKht+0x50>)
    9dfe:	e7f9      	b.n	9df4 <_Z17data_service_sendP7bt_connPKht+0x34>
    9e00:	00022c22 	.word	0x00022c22
    9e04:	0001c70d 	.word	0x0001c70d
    9e08:	00021bcc 	.word	0x00021bcc
    9e0c:	00022b6c 	.word	0x00022b6c
    9e10:	00022b90 	.word	0x00022b90

00009e14 <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
    9e14:	4b01      	ldr	r3, [pc, #4]	; (9e1c <_Z11getDiameterv+0x8>)
    9e16:	e9d3 0100 	ldrd	r0, r1, [r3]
    9e1a:	4770      	bx	lr
    9e1c:	200086f8 	.word	0x200086f8

00009e20 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    9e20:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    9e22:	4c0a      	ldr	r4, [pc, #40]	; (9e4c <crc8_ccitt+0x2c>)
    9e24:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    9e26:	4291      	cmp	r1, r2
    9e28:	d100      	bne.n	9e2c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    9e2a:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    9e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
    9e30:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    9e32:	0903      	lsrs	r3, r0, #4
    9e34:	5ce3      	ldrb	r3, [r4, r3]
    9e36:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    9e3a:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    9e3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    9e40:	5ce0      	ldrb	r0, [r4, r3]
    9e42:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    9e46:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    9e48:	e7ed      	b.n	9e26 <crc8_ccitt+0x6>
    9e4a:	bf00      	nop
    9e4c:	00022c33 	.word	0x00022c33

00009e50 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9e50:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    9e52:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    9e54:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    9e58:	2b02      	cmp	r3, #2
{
    9e5a:	4604      	mov	r4, r0
    9e5c:	460e      	mov	r6, r1
	notify->result = res;
    9e5e:	6081      	str	r1, [r0, #8]
	switch (method) {
    9e60:	d010      	beq.n	9e84 <sys_notify_finalize+0x34>
    9e62:	2b03      	cmp	r3, #3
    9e64:	d004      	beq.n	9e70 <sys_notify_finalize+0x20>
    9e66:	2b01      	cmp	r3, #1
    9e68:	d10f      	bne.n	9e8a <sys_notify_finalize+0x3a>
    9e6a:	2500      	movs	r5, #0
    9e6c:	4628      	mov	r0, r5
    9e6e:	e001      	b.n	9e74 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9e70:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    9e72:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9e74:	2300      	movs	r3, #0
    9e76:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    9e78:	b110      	cbz	r0, 9e80 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    9e7a:	4631      	mov	r1, r6
    9e7c:	f012 fbb4 	bl	1c5e8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9e80:	4628      	mov	r0, r5
    9e82:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    9e84:	2500      	movs	r5, #0
		sig = notify->method.signal;
    9e86:	6800      	ldr	r0, [r0, #0]
		break;
    9e88:	e7f4      	b.n	9e74 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    9e8a:	2245      	movs	r2, #69	; 0x45
    9e8c:	4904      	ldr	r1, [pc, #16]	; (9ea0 <sys_notify_finalize+0x50>)
    9e8e:	4805      	ldr	r0, [pc, #20]	; (9ea4 <sys_notify_finalize+0x54>)
    9e90:	f012 fcd8 	bl	1c844 <printk>
    9e94:	2145      	movs	r1, #69	; 0x45
    9e96:	4802      	ldr	r0, [pc, #8]	; (9ea0 <sys_notify_finalize+0x50>)
    9e98:	f012 ff7a 	bl	1cd90 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    9e9c:	2500      	movs	r5, #0
    9e9e:	e7e8      	b.n	9e72 <sys_notify_finalize+0x22>
    9ea0:	00022c43 	.word	0x00022c43
    9ea4:	00022c66 	.word	0x00022c66

00009ea8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    9ea8:	680b      	ldr	r3, [r1, #0]
    9eaa:	3301      	adds	r3, #1
    9eac:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    9eae:	4b01      	ldr	r3, [pc, #4]	; (9eb4 <char_out+0xc>)
    9eb0:	681b      	ldr	r3, [r3, #0]
    9eb2:	4718      	bx	r3
    9eb4:	200081bc 	.word	0x200081bc

00009eb8 <__printk_hook_install>:
	_char_out = fn;
    9eb8:	4b01      	ldr	r3, [pc, #4]	; (9ec0 <__printk_hook_install+0x8>)
    9eba:	6018      	str	r0, [r3, #0]
}
    9ebc:	4770      	bx	lr
    9ebe:	bf00      	nop
    9ec0:	200081bc 	.word	0x200081bc

00009ec4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    9ec4:	b507      	push	{r0, r1, r2, lr}
    9ec6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    9ec8:	2100      	movs	r1, #0
{
    9eca:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    9ecc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    9ece:	4803      	ldr	r0, [pc, #12]	; (9edc <vprintk+0x18>)
    9ed0:	a901      	add	r1, sp, #4
    9ed2:	f000 fbe9 	bl	a6a8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    9ed6:	b003      	add	sp, #12
    9ed8:	f85d fb04 	ldr.w	pc, [sp], #4
    9edc:	00009ea9 	.word	0x00009ea9

00009ee0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9ee0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    9ee2:	2500      	movs	r5, #0
{
    9ee4:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    9ee6:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    9eea:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    9eec:	a901      	add	r1, sp, #4
    9eee:	4805      	ldr	r0, [pc, #20]	; (9f04 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    9ef0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    9ef2:	f000 fbd9 	bl	a6a8 <cbvprintf>

	if (ctx.count < ctx.max) {
    9ef6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    9efa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    9efc:	bfb8      	it	lt
    9efe:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    9f00:	b005      	add	sp, #20
    9f02:	bd30      	pop	{r4, r5, pc}
    9f04:	0001c81f 	.word	0x0001c81f

00009f08 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f0c:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    9f10:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9f12:	f01a 0f08 	tst.w	sl, #8
{
    9f16:	4693      	mov	fp, r2
	if (processing) {
    9f18:	d01c      	beq.n	9f54 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    9f1a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9f1c:	bf0c      	ite	eq
    9f1e:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    9f22:	f04a 0a20 	orrne.w	sl, sl, #32
    9f26:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9f2a:	f104 0014 	add.w	r0, r4, #20
    9f2e:	f011 fcc3 	bl	1b8b8 <z_spin_unlock_valid>
    9f32:	b940      	cbnz	r0, 9f46 <process_event+0x3e>
    9f34:	4992      	ldr	r1, [pc, #584]	; (a180 <process_event+0x278>)
    9f36:	4893      	ldr	r0, [pc, #588]	; (a184 <process_event+0x27c>)
    9f38:	22a7      	movs	r2, #167	; 0xa7
    9f3a:	f012 fc83 	bl	1c844 <printk>
    9f3e:	21a7      	movs	r1, #167	; 0xa7
    9f40:	488f      	ldr	r0, [pc, #572]	; (a180 <process_event+0x278>)
    9f42:	f012 ff25 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9f46:	f38b 8811 	msr	BASEPRI, fp
    9f4a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    9f4e:	b003      	add	sp, #12
    9f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    9f54:	4f8c      	ldr	r7, [pc, #560]	; (a188 <process_event+0x280>)
    9f56:	f8df 822c 	ldr.w	r8, [pc, #556]	; a184 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f5a:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    9f5e:	2902      	cmp	r1, #2
    9f60:	d106      	bne.n	9f70 <process_event+0x68>
			evt = process_recheck(mgr);
    9f62:	4620      	mov	r0, r4
    9f64:	f012 fc88 	bl	1c878 <process_recheck>
		if (evt == EVT_NOP) {
    9f68:	2800      	cmp	r0, #0
    9f6a:	d0de      	beq.n	9f2a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    9f6c:	2801      	cmp	r0, #1
    9f6e:	d163      	bne.n	a038 <process_event+0x130>
			res = mgr->last_res;
    9f70:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f74:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    9f76:	f1b9 0f00 	cmp.w	r9, #0
    9f7a:	da19      	bge.n	9fb0 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    9f7c:	2600      	movs	r6, #0
		*clients = mgr->clients;
    9f7e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f80:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    9f84:	e9c4 6600 	strd	r6, r6, [r4]
    9f88:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9f8c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9f8e:	8ba3      	ldrh	r3, [r4, #28]
    9f90:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9f94:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9f96:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    9f98:	d003      	beq.n	9fa2 <process_event+0x9a>
		if (do_monitors
    9f9a:	68a2      	ldr	r2, [r4, #8]
    9f9c:	2a00      	cmp	r2, #0
    9f9e:	f040 80f5 	bne.w	a18c <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    9fa2:	b915      	cbnz	r5, 9faa <process_event+0xa2>
		    || (transit != NULL)) {
    9fa4:	2e00      	cmp	r6, #0
    9fa6:	f000 812f 	beq.w	a208 <process_event+0x300>
    9faa:	f04f 0a00 	mov.w	sl, #0
    9fae:	e0ef      	b.n	a190 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9fb0:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9fb4:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9fb6:	2901      	cmp	r1, #1
    9fb8:	d820      	bhi.n	9ffc <process_event+0xf4>
	list->head = NULL;
    9fba:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9fbc:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    9fc0:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    9fc2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9fc4:	b29b      	uxth	r3, r3
	list->tail = NULL;
    9fc6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9fca:	d10a      	bne.n	9fe2 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9fcc:	b13d      	cbz	r5, 9fde <process_event+0xd6>
    9fce:	4629      	mov	r1, r5
    9fd0:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    9fd2:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    9fd4:	3201      	adds	r2, #1
    9fd6:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9fd8:	2900      	cmp	r1, #0
    9fda:	d1fa      	bne.n	9fd2 <process_event+0xca>
    9fdc:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9fde:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    9fe2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9fe4:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9fe6:	f012 fc47 	bl	1c878 <process_recheck>
    9fea:	4606      	mov	r6, r0
    9fec:	2800      	cmp	r0, #0
    9fee:	d0ce      	beq.n	9f8e <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9ff0:	8ba3      	ldrh	r3, [r4, #28]
    9ff2:	f043 0320 	orr.w	r3, r3, #32
    9ff6:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    9ff8:	2600      	movs	r6, #0
    9ffa:	e7c8      	b.n	9f8e <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9ffc:	2a04      	cmp	r2, #4
    9ffe:	d10d      	bne.n	a01c <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a000:	f023 0307 	bic.w	r3, r3, #7
    a004:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    a006:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a008:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a00a:	f012 fc35 	bl	1c878 <process_recheck>
    a00e:	4605      	mov	r5, r0
    a010:	b180      	cbz	r0, a034 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a012:	f042 0220 	orr.w	r2, r2, #32
    a016:	2500      	movs	r5, #0
    a018:	83a2      	strh	r2, [r4, #28]
    a01a:	e7ed      	b.n	9ff8 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    a01c:	f240 1219 	movw	r2, #281	; 0x119
    a020:	4639      	mov	r1, r7
    a022:	4640      	mov	r0, r8
    a024:	f012 fc0e 	bl	1c844 <printk>
    a028:	f240 1119 	movw	r1, #281	; 0x119
    a02c:	4638      	mov	r0, r7
    a02e:	f012 feaf 	bl	1cd90 <assert_post_action>
    a032:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    a034:	462e      	mov	r6, r5
    a036:	e7aa      	b.n	9f8e <process_event+0x86>
		} else if (evt == EVT_START) {
    a038:	2803      	cmp	r0, #3
    a03a:	d131      	bne.n	a0a0 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    a03c:	f1ba 0f00 	cmp.w	sl, #0
    a040:	d00a      	beq.n	a058 <process_event+0x150>
    a042:	4639      	mov	r1, r7
    a044:	4640      	mov	r0, r8
    a046:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a04a:	f012 fbfb 	bl	1c844 <printk>
    a04e:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a052:	4638      	mov	r0, r7
    a054:	f012 fe9c 	bl	1cd90 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a058:	6823      	ldr	r3, [r4, #0]
    a05a:	b953      	cbnz	r3, a072 <process_event+0x16a>
    a05c:	4639      	mov	r1, r7
    a05e:	4640      	mov	r0, r8
    a060:	f240 1255 	movw	r2, #341	; 0x155
    a064:	f012 fbee 	bl	1c844 <printk>
    a068:	f240 1155 	movw	r1, #341	; 0x155
    a06c:	4638      	mov	r0, r7
    a06e:	f012 fe8f 	bl	1cd90 <assert_post_action>
			transit = mgr->transitions->start;
    a072:	6923      	ldr	r3, [r4, #16]
    a074:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a076:	b956      	cbnz	r6, a08e <process_event+0x186>
    a078:	4639      	mov	r1, r7
    a07a:	4640      	mov	r0, r8
    a07c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a080:	f012 fbe0 	bl	1c844 <printk>
    a084:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a088:	4638      	mov	r0, r7
    a08a:	f012 fe81 	bl	1cd90 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a08e:	8ba3      	ldrh	r3, [r4, #28]
    a090:	f023 0307 	bic.w	r3, r3, #7
    a094:	f043 0306 	orr.w	r3, r3, #6
}
    a098:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a09a:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a09c:	46a9      	mov	r9, r5
}
    a09e:	e776      	b.n	9f8e <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a0a0:	2804      	cmp	r0, #4
    a0a2:	d12e      	bne.n	a102 <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a0a4:	f1ba 0f02 	cmp.w	sl, #2
    a0a8:	d00a      	beq.n	a0c0 <process_event+0x1b8>
    a0aa:	4639      	mov	r1, r7
    a0ac:	4640      	mov	r0, r8
    a0ae:	f240 125b 	movw	r2, #347	; 0x15b
    a0b2:	f012 fbc7 	bl	1c844 <printk>
    a0b6:	f240 115b 	movw	r1, #347	; 0x15b
    a0ba:	4638      	mov	r0, r7
    a0bc:	f012 fe68 	bl	1cd90 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a0c0:	8be3      	ldrh	r3, [r4, #30]
    a0c2:	b153      	cbz	r3, a0da <process_event+0x1d2>
    a0c4:	4639      	mov	r1, r7
    a0c6:	4640      	mov	r0, r8
    a0c8:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a0cc:	f012 fbba 	bl	1c844 <printk>
    a0d0:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a0d4:	4638      	mov	r0, r7
    a0d6:	f012 fe5b 	bl	1cd90 <assert_post_action>
			transit = mgr->transitions->stop;
    a0da:	6923      	ldr	r3, [r4, #16]
    a0dc:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a0de:	b956      	cbnz	r6, a0f6 <process_event+0x1ee>
    a0e0:	4639      	mov	r1, r7
    a0e2:	4640      	mov	r0, r8
    a0e4:	f240 125f 	movw	r2, #351	; 0x15f
    a0e8:	f012 fbac 	bl	1c844 <printk>
    a0ec:	f240 115f 	movw	r1, #351	; 0x15f
    a0f0:	4638      	mov	r0, r7
    a0f2:	f012 fe4d 	bl	1cd90 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0f6:	8ba3      	ldrh	r3, [r4, #28]
    a0f8:	f023 0307 	bic.w	r3, r3, #7
    a0fc:	f043 0304 	orr.w	r3, r3, #4
    a100:	e7ca      	b.n	a098 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a102:	2805      	cmp	r0, #5
    a104:	d12e      	bne.n	a164 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a106:	f1ba 0f01 	cmp.w	sl, #1
    a10a:	d00a      	beq.n	a122 <process_event+0x21a>
    a10c:	4639      	mov	r1, r7
    a10e:	4640      	mov	r0, r8
    a110:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a114:	f012 fb96 	bl	1c844 <printk>
    a118:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a11c:	4638      	mov	r0, r7
    a11e:	f012 fe37 	bl	1cd90 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a122:	6823      	ldr	r3, [r4, #0]
    a124:	b953      	cbnz	r3, a13c <process_event+0x234>
    a126:	4639      	mov	r1, r7
    a128:	4640      	mov	r0, r8
    a12a:	f240 1263 	movw	r2, #355	; 0x163
    a12e:	f012 fb89 	bl	1c844 <printk>
    a132:	f240 1163 	movw	r1, #355	; 0x163
    a136:	4638      	mov	r0, r7
    a138:	f012 fe2a 	bl	1cd90 <assert_post_action>
			transit = mgr->transitions->reset;
    a13c:	6923      	ldr	r3, [r4, #16]
    a13e:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a140:	b956      	cbnz	r6, a158 <process_event+0x250>
    a142:	4639      	mov	r1, r7
    a144:	4640      	mov	r0, r8
    a146:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a14a:	f012 fb7b 	bl	1c844 <printk>
    a14e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a152:	4638      	mov	r0, r7
    a154:	f012 fe1c 	bl	1cd90 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a158:	8ba3      	ldrh	r3, [r4, #28]
    a15a:	f023 0307 	bic.w	r3, r3, #7
    a15e:	f043 0305 	orr.w	r3, r3, #5
    a162:	e799      	b.n	a098 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a164:	2500      	movs	r5, #0
    a166:	f240 1269 	movw	r2, #361	; 0x169
    a16a:	4639      	mov	r1, r7
    a16c:	4640      	mov	r0, r8
    a16e:	f012 fb69 	bl	1c844 <printk>
    a172:	f240 1169 	movw	r1, #361	; 0x169
    a176:	4638      	mov	r0, r7
    a178:	f012 fe0a 	bl	1cd90 <assert_post_action>
		onoff_transition_fn transit = NULL;
    a17c:	462e      	mov	r6, r5
    a17e:	e78d      	b.n	a09c <process_event+0x194>
    a180:	00022ca0 	.word	0x00022ca0
    a184:	00022c66 	.word	0x00022c66
    a188:	00022c7e 	.word	0x00022c7e
				   && !sys_slist_is_empty(&mgr->monitors);
    a18c:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a190:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a194:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a196:	f104 0314 	add.w	r3, r4, #20
    a19a:	4618      	mov	r0, r3
    a19c:	9301      	str	r3, [sp, #4]
    a19e:	f011 fb8b 	bl	1b8b8 <z_spin_unlock_valid>
    a1a2:	b940      	cbnz	r0, a1b6 <process_event+0x2ae>
    a1a4:	4640      	mov	r0, r8
    a1a6:	4931      	ldr	r1, [pc, #196]	; (a26c <process_event+0x364>)
    a1a8:	22a7      	movs	r2, #167	; 0xa7
    a1aa:	f012 fb4b 	bl	1c844 <printk>
    a1ae:	21a7      	movs	r1, #167	; 0xa7
    a1b0:	482e      	ldr	r0, [pc, #184]	; (a26c <process_event+0x364>)
    a1b2:	f012 fded 	bl	1cd90 <assert_post_action>
    a1b6:	f38b 8811 	msr	BASEPRI, fp
    a1ba:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a1be:	f1ba 0f00 	cmp.w	sl, #0
    a1c2:	d130      	bne.n	a226 <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a1c4:	2d00      	cmp	r5, #0
    a1c6:	d140      	bne.n	a24a <process_event+0x342>
			if (transit != NULL) {
    a1c8:	b116      	cbz	r6, a1d0 <process_event+0x2c8>
				transit(mgr, transition_complete);
    a1ca:	4620      	mov	r0, r4
    a1cc:	4928      	ldr	r1, [pc, #160]	; (a270 <process_event+0x368>)
    a1ce:	47b0      	blx	r6
	__asm__ volatile(
    a1d0:	f04f 0320 	mov.w	r3, #32
    a1d4:	f3ef 8b11 	mrs	fp, BASEPRI
    a1d8:	f383 8811 	msr	BASEPRI, r3
    a1dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a1e0:	9801      	ldr	r0, [sp, #4]
    a1e2:	f011 fb5b 	bl	1b89c <z_spin_lock_valid>
    a1e6:	b940      	cbnz	r0, a1fa <process_event+0x2f2>
    a1e8:	4640      	mov	r0, r8
    a1ea:	4920      	ldr	r1, [pc, #128]	; (a26c <process_event+0x364>)
    a1ec:	227c      	movs	r2, #124	; 0x7c
    a1ee:	f012 fb29 	bl	1c844 <printk>
    a1f2:	217c      	movs	r1, #124	; 0x7c
    a1f4:	481d      	ldr	r0, [pc, #116]	; (a26c <process_event+0x364>)
    a1f6:	f012 fdcb 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
    a1fa:	9801      	ldr	r0, [sp, #4]
    a1fc:	f011 fb6a 	bl	1b8d4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a200:	8ba3      	ldrh	r3, [r4, #28]
    a202:	f023 0308 	bic.w	r3, r3, #8
    a206:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a208:	8ba3      	ldrh	r3, [r4, #28]
    a20a:	06da      	lsls	r2, r3, #27
    a20c:	d525      	bpl.n	a25a <process_event+0x352>
			evt = EVT_COMPLETE;
    a20e:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a210:	f023 0310 	bic.w	r3, r3, #16
    a214:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a216:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    a21a:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    a21e:	2900      	cmp	r1, #0
    a220:	f47f ae9d 	bne.w	9f5e <process_event+0x56>
out:
    a224:	e681      	b.n	9f2a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a226:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a228:	2900      	cmp	r1, #0
    a22a:	d0cb      	beq.n	a1c4 <process_event+0x2bc>
	return node->next;
    a22c:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    a230:	464b      	mov	r3, r9
    a232:	4620      	mov	r0, r4
    a234:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a238:	9a00      	ldr	r2, [sp, #0]
    a23a:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a23c:	f1ba 0f00 	cmp.w	sl, #0
    a240:	d0c0      	beq.n	a1c4 <process_event+0x2bc>
    a242:	4651      	mov	r1, sl
    a244:	f8da a000 	ldr.w	sl, [sl]
    a248:	e7f2      	b.n	a230 <process_event+0x328>
    a24a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a24c:	464b      	mov	r3, r9
    a24e:	4620      	mov	r0, r4
    a250:	9a00      	ldr	r2, [sp, #0]
    a252:	682d      	ldr	r5, [r5, #0]
    a254:	f012 fb2c 	bl	1c8b0 <notify_one>
    a258:	e7b4      	b.n	a1c4 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a25a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a25e:	bf1e      	ittt	ne
    a260:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a264:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a266:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a268:	e7d5      	b.n	a216 <process_event+0x30e>
    a26a:	bf00      	nop
    a26c:	00022ca0 	.word	0x00022ca0
    a270:	0000a275 	.word	0x0000a275

0000a274 <transition_complete>:
{
    a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a276:	4604      	mov	r4, r0
    a278:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a27a:	f100 0614 	add.w	r6, r0, #20
    a27e:	f04f 0320 	mov.w	r3, #32
    a282:	f3ef 8711 	mrs	r7, BASEPRI
    a286:	f383 8811 	msr	BASEPRI, r3
    a28a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a28e:	4630      	mov	r0, r6
    a290:	f011 fb04 	bl	1b89c <z_spin_lock_valid>
    a294:	b940      	cbnz	r0, a2a8 <transition_complete+0x34>
    a296:	490a      	ldr	r1, [pc, #40]	; (a2c0 <transition_complete+0x4c>)
    a298:	480a      	ldr	r0, [pc, #40]	; (a2c4 <transition_complete+0x50>)
    a29a:	227c      	movs	r2, #124	; 0x7c
    a29c:	f012 fad2 	bl	1c844 <printk>
    a2a0:	217c      	movs	r1, #124	; 0x7c
    a2a2:	4807      	ldr	r0, [pc, #28]	; (a2c0 <transition_complete+0x4c>)
    a2a4:	f012 fd74 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
    a2a8:	4630      	mov	r0, r6
    a2aa:	f011 fb13 	bl	1b8d4 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a2ae:	463a      	mov	r2, r7
    a2b0:	4620      	mov	r0, r4
	mgr->last_res = res;
    a2b2:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a2b4:	2101      	movs	r1, #1
}
    a2b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a2ba:	f7ff be25 	b.w	9f08 <process_event>
    a2be:	bf00      	nop
    a2c0:	00022ca0 	.word	0x00022ca0
    a2c4:	00022c66 	.word	0x00022c66

0000a2c8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a2cc:	4604      	mov	r4, r0
    a2ce:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a2d0:	f012 fb04 	bl	1c8dc <validate_args>

	if (rv < 0) {
    a2d4:	1e05      	subs	r5, r0, #0
    a2d6:	db54      	blt.n	a382 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a2d8:	f104 0914 	add.w	r9, r4, #20
    a2dc:	f04f 0320 	mov.w	r3, #32
    a2e0:	f3ef 8a11 	mrs	sl, BASEPRI
    a2e4:	f383 8811 	msr	BASEPRI, r3
    a2e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2ec:	4648      	mov	r0, r9
    a2ee:	f011 fad5 	bl	1b89c <z_spin_lock_valid>
    a2f2:	b940      	cbnz	r0, a306 <onoff_request+0x3e>
    a2f4:	4933      	ldr	r1, [pc, #204]	; (a3c4 <onoff_request+0xfc>)
    a2f6:	4834      	ldr	r0, [pc, #208]	; (a3c8 <onoff_request+0x100>)
    a2f8:	227c      	movs	r2, #124	; 0x7c
    a2fa:	f012 faa3 	bl	1c844 <printk>
    a2fe:	217c      	movs	r1, #124	; 0x7c
    a300:	4830      	ldr	r0, [pc, #192]	; (a3c4 <onoff_request+0xfc>)
    a302:	f012 fd45 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
    a306:	4648      	mov	r0, r9
    a308:	f011 fae4 	bl	1b8d4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a30c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a310:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a312:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a314:	428b      	cmp	r3, r1
    a316:	f002 0607 	and.w	r6, r2, #7
    a31a:	d04a      	beq.n	a3b2 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a31c:	2e02      	cmp	r6, #2
    a31e:	d11f      	bne.n	a360 <onoff_request+0x98>
	rv = state;
    a320:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a322:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a326:	3301      	adds	r3, #1
    a328:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a32a:	4648      	mov	r0, r9
    a32c:	f011 fac4 	bl	1b8b8 <z_spin_unlock_valid>
    a330:	b940      	cbnz	r0, a344 <onoff_request+0x7c>
    a332:	4924      	ldr	r1, [pc, #144]	; (a3c4 <onoff_request+0xfc>)
    a334:	4824      	ldr	r0, [pc, #144]	; (a3c8 <onoff_request+0x100>)
    a336:	22a7      	movs	r2, #167	; 0xa7
    a338:	f012 fa84 	bl	1c844 <printk>
    a33c:	21a7      	movs	r1, #167	; 0xa7
    a33e:	4821      	ldr	r0, [pc, #132]	; (a3c4 <onoff_request+0xfc>)
    a340:	f012 fd26 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
    a344:	f38a 8811 	msr	BASEPRI, sl
    a348:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a34c:	f1b8 0f00 	cmp.w	r8, #0
    a350:	d017      	beq.n	a382 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a352:	2300      	movs	r3, #0
    a354:	4632      	mov	r2, r6
    a356:	4639      	mov	r1, r7
    a358:	4620      	mov	r0, r4
    a35a:	f012 faa9 	bl	1c8b0 <notify_one>
    a35e:	e010      	b.n	a382 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a360:	0793      	lsls	r3, r2, #30
    a362:	d001      	beq.n	a368 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a364:	2e06      	cmp	r6, #6
    a366:	d10f      	bne.n	a388 <onoff_request+0xc0>
	parent->next = child;
    a368:	2300      	movs	r3, #0
    a36a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a36c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a36e:	b9eb      	cbnz	r3, a3ac <onoff_request+0xe4>
	list->head = node;
    a370:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a374:	4635      	mov	r5, r6
    a376:	b9f6      	cbnz	r6, a3b6 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a378:	4652      	mov	r2, sl
    a37a:	2102      	movs	r1, #2
    a37c:	4620      	mov	r0, r4
    a37e:	f7ff fdc3 	bl	9f08 <process_event>
		}
	}

	return rv;
}
    a382:	4628      	mov	r0, r5
    a384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a388:	2e05      	cmp	r6, #5
    a38a:	d017      	beq.n	a3bc <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a38c:	2e01      	cmp	r6, #1
    a38e:	d00a      	beq.n	a3a6 <onoff_request+0xde>
    a390:	490e      	ldr	r1, [pc, #56]	; (a3cc <onoff_request+0x104>)
    a392:	480d      	ldr	r0, [pc, #52]	; (a3c8 <onoff_request+0x100>)
    a394:	f240 12c5 	movw	r2, #453	; 0x1c5
    a398:	f012 fa54 	bl	1c844 <printk>
    a39c:	f240 11c5 	movw	r1, #453	; 0x1c5
    a3a0:	480a      	ldr	r0, [pc, #40]	; (a3cc <onoff_request+0x104>)
    a3a2:	f012 fcf5 	bl	1cd90 <assert_post_action>
		rv = -EIO;
    a3a6:	f06f 0504 	mvn.w	r5, #4
    a3aa:	e004      	b.n	a3b6 <onoff_request+0xee>
	parent->next = child;
    a3ac:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a3ae:	6067      	str	r7, [r4, #4]
}
    a3b0:	e7e0      	b.n	a374 <onoff_request+0xac>
		rv = -EAGAIN;
    a3b2:	f06f 050a 	mvn.w	r5, #10
    a3b6:	f04f 0800 	mov.w	r8, #0
    a3ba:	e7b6      	b.n	a32a <onoff_request+0x62>
		rv = -ENOTSUP;
    a3bc:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a3c0:	e7f9      	b.n	a3b6 <onoff_request+0xee>
    a3c2:	bf00      	nop
    a3c4:	00022ca0 	.word	0x00022ca0
    a3c8:	00022c66 	.word	0x00022c66
    a3cc:	00022c7e 	.word	0x00022c7e

0000a3d0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3d4:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a3d6:	4e14      	ldr	r6, [pc, #80]	; (a428 <z_work_q_main+0x58>)
    a3d8:	f8df 8050 	ldr.w	r8, [pc, #80]	; a42c <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a3dc:	f04f 32ff 	mov.w	r2, #4294967295
    a3e0:	f04f 33ff 	mov.w	r3, #4294967295
    a3e4:	4628      	mov	r0, r5
    a3e6:	f010 f801 	bl	1a3ec <z_impl_k_queue_get>
		if (work == NULL) {
    a3ea:	4604      	mov	r4, r0
    a3ec:	2800      	cmp	r0, #0
    a3ee:	d0f5      	beq.n	a3dc <z_work_q_main+0xc>
		handler = work->handler;
    a3f0:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a3f2:	b947      	cbnz	r7, a406 <z_work_q_main+0x36>
    a3f4:	4631      	mov	r1, r6
    a3f6:	4640      	mov	r0, r8
    a3f8:	221c      	movs	r2, #28
    a3fa:	f012 fa23 	bl	1c844 <printk>
    a3fe:	211c      	movs	r1, #28
    a400:	4630      	mov	r0, r6
    a402:	f012 fcc5 	bl	1cd90 <assert_post_action>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a406:	f104 0308 	add.w	r3, r4, #8
    a40a:	e8d3 2fef 	ldaex	r2, [r3]
    a40e:	f022 0101 	bic.w	r1, r2, #1
    a412:	e8c3 1fe0 	stlex	r0, r1, [r3]
    a416:	2800      	cmp	r0, #0
    a418:	d1f7      	bne.n	a40a <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a41a:	07d3      	lsls	r3, r2, #31
    a41c:	d501      	bpl.n	a422 <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a41e:	4620      	mov	r0, r4
    a420:	47b8      	blx	r7
	z_impl_k_yield();
    a422:	f010 ff0d 	bl	1b240 <z_impl_k_yield>
    a426:	e7d9      	b.n	a3dc <z_work_q_main+0xc>
    a428:	00022cc6 	.word	0x00022cc6
    a42c:	00022c66 	.word	0x00022c66

0000a430 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    a430:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    a432:	2900      	cmp	r1, #0
    a434:	d039      	beq.n	a4aa <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    a436:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a438:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a43a:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a43c:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    a43e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a442:	bf2c      	ite	cs
    a444:	2408      	movcs	r4, #8
    a446:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a448:	1b0c      	subs	r4, r1, r4
    a44a:	1b64      	subs	r4, r4, r5
    a44c:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a44e:	4621      	mov	r1, r4
    a450:	f012 fa70 	bl	1c934 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    a454:	07c3      	lsls	r3, r0, #31
    a456:	d408      	bmi.n	a46a <sys_heap_free+0x3a>
    a458:	4914      	ldr	r1, [pc, #80]	; (a4ac <sys_heap_free+0x7c>)
    a45a:	4815      	ldr	r0, [pc, #84]	; (a4b0 <sys_heap_free+0x80>)
    a45c:	229a      	movs	r2, #154	; 0x9a
    a45e:	f012 f9f1 	bl	1c844 <printk>
    a462:	219a      	movs	r1, #154	; 0x9a
    a464:	4811      	ldr	r0, [pc, #68]	; (a4ac <sys_heap_free+0x7c>)
    a466:	f012 fc93 	bl	1cd90 <assert_post_action>
	return c + chunk_size(h, c);
    a46a:	4621      	mov	r1, r4
    a46c:	4628      	mov	r0, r5
    a46e:	f012 fa77 	bl	1c960 <chunk_size>
    a472:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    a474:	4631      	mov	r1, r6
    a476:	2200      	movs	r2, #0
    a478:	4628      	mov	r0, r5
    a47a:	f012 fa5b 	bl	1c934 <chunk_field>
    a47e:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    a480:	42b4      	cmp	r4, r6
    a482:	d008      	beq.n	a496 <sys_heap_free+0x66>
    a484:	4909      	ldr	r1, [pc, #36]	; (a4ac <sys_heap_free+0x7c>)
    a486:	480a      	ldr	r0, [pc, #40]	; (a4b0 <sys_heap_free+0x80>)
    a488:	22a2      	movs	r2, #162	; 0xa2
    a48a:	f012 f9db 	bl	1c844 <printk>
    a48e:	21a2      	movs	r1, #162	; 0xa2
    a490:	4806      	ldr	r0, [pc, #24]	; (a4ac <sys_heap_free+0x7c>)
    a492:	f012 fc7d 	bl	1cd90 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    a496:	4621      	mov	r1, r4
    a498:	4628      	mov	r0, r5
    a49a:	2200      	movs	r2, #0
    a49c:	f012 fa66 	bl	1c96c <set_chunk_used>
	free_chunk(h, c);
    a4a0:	4621      	mov	r1, r4
}
    a4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    a4a6:	f012 bba3 	b.w	1cbf0 <free_chunk>
}
    a4aa:	bd70      	pop	{r4, r5, r6, pc}
    a4ac:	00022ce9 	.word	0x00022ce9
    a4b0:	00022c66 	.word	0x00022c66

0000a4b4 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a4b8:	f101 39ff 	add.w	r9, r1, #4294967295
    a4bc:	ea19 0f01 	tst.w	r9, r1
{
    a4c0:	4680      	mov	r8, r0
    a4c2:	460f      	mov	r7, r1
    a4c4:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    a4c6:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a4c8:	d008      	beq.n	a4dc <sys_heap_aligned_alloc+0x28>
    a4ca:	4931      	ldr	r1, [pc, #196]	; (a590 <sys_heap_aligned_alloc+0xdc>)
    a4cc:	4831      	ldr	r0, [pc, #196]	; (a594 <sys_heap_aligned_alloc+0xe0>)
    a4ce:	22fc      	movs	r2, #252	; 0xfc
    a4d0:	f012 f9b8 	bl	1c844 <printk>
    a4d4:	21fc      	movs	r1, #252	; 0xfc
    a4d6:	482e      	ldr	r0, [pc, #184]	; (a590 <sys_heap_aligned_alloc+0xdc>)
    a4d8:	f012 fc5a 	bl	1cd90 <assert_post_action>
	return big_heap_chunks(h->len);
    a4dc:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    a4de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a4e2:	bf2c      	ite	cs
    a4e4:	2308      	movcs	r3, #8
    a4e6:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    a4e8:	429f      	cmp	r7, r3
    a4ea:	d805      	bhi.n	a4f8 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    a4ec:	4621      	mov	r1, r4
    a4ee:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    a4f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    a4f4:	f012 bbbe 	b.w	1cc74 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a4f8:	b91c      	cbnz	r4, a502 <sys_heap_aligned_alloc+0x4e>
		return NULL;
    a4fa:	2600      	movs	r6, #0
}
    a4fc:	4630      	mov	r0, r6
    a4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    a502:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    a506:	d9f8      	bls.n	a4fa <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    a508:	1939      	adds	r1, r7, r4
    a50a:	1ac9      	subs	r1, r1, r3
    a50c:	f012 fa4a 	bl	1c9a4 <bytes_to_chunksz.isra.0>
    a510:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a512:	4628      	mov	r0, r5
    a514:	f012 faa1 	bl	1ca5a <alloc_chunk>
	if (c0 == 0) {
    a518:	4680      	mov	r8, r0
    a51a:	2800      	cmp	r0, #0
    a51c:	d0ed      	beq.n	a4fa <sys_heap_aligned_alloc+0x46>
    a51e:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a520:	427f      	negs	r7, r7
    a522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a526:	bf2c      	ite	cs
    a528:	2308      	movcs	r3, #8
    a52a:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a52c:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    a530:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a532:	444e      	add	r6, r9
    a534:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a536:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a538:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a53a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a53c:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a53e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a542:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    a544:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a548:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a54c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a550:	d208      	bcs.n	a564 <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    a552:	4601      	mov	r1, r0
    a554:	463a      	mov	r2, r7
    a556:	4628      	mov	r0, r5
    a558:	f012 fac2 	bl	1cae0 <split_chunks>
		free_list_add(h, c0);
    a55c:	4641      	mov	r1, r8
    a55e:	4628      	mov	r0, r5
    a560:	f012 fb03 	bl	1cb6a <free_list_add>
	return c + chunk_size(h, c);
    a564:	4639      	mov	r1, r7
    a566:	4628      	mov	r0, r5
    a568:	f012 f9fa 	bl	1c960 <chunk_size>
    a56c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a56e:	4284      	cmp	r4, r0
    a570:	d208      	bcs.n	a584 <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    a572:	4639      	mov	r1, r7
    a574:	4628      	mov	r0, r5
    a576:	4622      	mov	r2, r4
    a578:	f012 fab2 	bl	1cae0 <split_chunks>
		free_list_add(h, c_end);
    a57c:	4621      	mov	r1, r4
    a57e:	4628      	mov	r0, r5
    a580:	f012 faf3 	bl	1cb6a <free_list_add>
	set_chunk_used(h, c, true);
    a584:	2201      	movs	r2, #1
    a586:	4639      	mov	r1, r7
    a588:	4628      	mov	r0, r5
    a58a:	f012 f9ef 	bl	1c96c <set_chunk_used>
	return mem;
    a58e:	e7b5      	b.n	a4fc <sys_heap_aligned_alloc+0x48>
    a590:	00022ce9 	.word	0x00022ce9
    a594:	00022c66 	.word	0x00022c66

0000a598 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    a598:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a59e:	4607      	mov	r7, r0
    a5a0:	460c      	mov	r4, r1
    a5a2:	4616      	mov	r6, r2
    a5a4:	d20e      	bcs.n	a5c4 <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    a5a6:	2a04      	cmp	r2, #4
    a5a8:	d80a      	bhi.n	a5c0 <sys_heap_init+0x28>
    a5aa:	493d      	ldr	r1, [pc, #244]	; (a6a0 <sys_heap_init+0x108>)
    a5ac:	483d      	ldr	r0, [pc, #244]	; (a6a4 <sys_heap_init+0x10c>)
    a5ae:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    a5b2:	f012 f947 	bl	1c844 <printk>
    a5b6:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    a5ba:	4839      	ldr	r0, [pc, #228]	; (a6a0 <sys_heap_init+0x108>)
    a5bc:	f012 fbe8 	bl	1cd90 <assert_post_action>
    a5c0:	2204      	movs	r2, #4
    a5c2:	e000      	b.n	a5c6 <sys_heap_init+0x2e>
    a5c4:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    a5c6:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a5c8:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a5ca:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a5cc:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a5d0:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a5d4:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a5d6:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a5d8:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a5dc:	d80a      	bhi.n	a5f4 <sys_heap_init+0x5c>
    a5de:	4930      	ldr	r1, [pc, #192]	; (a6a0 <sys_heap_init+0x108>)
    a5e0:	4830      	ldr	r0, [pc, #192]	; (a6a4 <sys_heap_init+0x10c>)
    a5e2:	f240 1275 	movw	r2, #373	; 0x175
    a5e6:	f012 f92d 	bl	1c844 <printk>
    a5ea:	f240 1175 	movw	r1, #373	; 0x175
    a5ee:	482c      	ldr	r0, [pc, #176]	; (a6a0 <sys_heap_init+0x108>)
    a5f0:	f012 fbce 	bl	1cd90 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    a5f4:	2300      	movs	r3, #0
    a5f6:	2200      	movs	r2, #0
	heap->heap = h;
    a5f8:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    a5fa:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    a5fe:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a600:	4631      	mov	r1, r6
    a602:	4630      	mov	r0, r6
	h->len = buf_sz;
    a604:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    a606:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a608:	f012 f9d5 	bl	1c9b6 <bucket_idx.isra.0>
    a60c:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a60e:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a610:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a612:	4630      	mov	r0, r6
    a614:	f012 f9c6 	bl	1c9a4 <bytes_to_chunksz.isra.0>
    a618:	341b      	adds	r4, #27
    a61a:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    a61c:	4420      	add	r0, r4
    a61e:	42b0      	cmp	r0, r6
    a620:	d30a      	bcc.n	a638 <sys_heap_init+0xa0>
    a622:	491f      	ldr	r1, [pc, #124]	; (a6a0 <sys_heap_init+0x108>)
    a624:	481f      	ldr	r0, [pc, #124]	; (a6a4 <sys_heap_init+0x10c>)
    a626:	f240 1281 	movw	r2, #385	; 0x181
    a62a:	f012 f90b 	bl	1c844 <printk>
    a62e:	f240 1181 	movw	r1, #385	; 0x181
    a632:	481b      	ldr	r0, [pc, #108]	; (a6a0 <sys_heap_init+0x108>)
    a634:	f012 fbac 	bl	1cd90 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    a638:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    a63a:	4619      	mov	r1, r3
    a63c:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    a640:	42bb      	cmp	r3, r7
    a642:	db28      	blt.n	a696 <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a644:	4622      	mov	r2, r4
    a646:	4628      	mov	r0, r5
    a648:	2100      	movs	r1, #0
    a64a:	f012 f9a7 	bl	1c99c <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a64e:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    a650:	4628      	mov	r0, r5
    a652:	2201      	movs	r2, #1
    a654:	2100      	movs	r1, #0
    a656:	f012 f989 	bl	1c96c <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a65a:	463a      	mov	r2, r7
    a65c:	4621      	mov	r1, r4
    a65e:	f012 f99d 	bl	1c99c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a662:	4623      	mov	r3, r4
    a664:	2200      	movs	r2, #0
    a666:	4621      	mov	r1, r4
    a668:	4628      	mov	r0, r5
    a66a:	f012 f96e 	bl	1c94a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    a66e:	4631      	mov	r1, r6
    a670:	4628      	mov	r0, r5
    a672:	f012 f993 	bl	1c99c <set_chunk_size>
    a676:	463b      	mov	r3, r7
    a678:	4631      	mov	r1, r6
    a67a:	4628      	mov	r0, r5
    a67c:	2200      	movs	r2, #0
    a67e:	f012 f964 	bl	1c94a <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    a682:	4631      	mov	r1, r6
    a684:	4628      	mov	r0, r5
    a686:	2201      	movs	r2, #1
    a688:	f012 f970 	bl	1c96c <set_chunk_used>

	free_list_add(h, chunk0_size);
    a68c:	4621      	mov	r1, r4
}
    a68e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a692:	f012 ba6a 	b.w	1cb6a <free_list_add>
		h->buckets[i].next = 0;
    a696:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a69a:	3301      	adds	r3, #1
    a69c:	e7d0      	b.n	a640 <sys_heap_init+0xa8>
    a69e:	bf00      	nop
    a6a0:	00022ce9 	.word	0x00022ce9
    a6a4:	00022c66 	.word	0x00022c66

0000a6a8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6ac:	468b      	mov	fp, r1
    a6ae:	4692      	mov	sl, r2
    a6b0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a6b2:	2500      	movs	r5, #0
{
    a6b4:	b091      	sub	sp, #68	; 0x44
    a6b6:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a6b8:	f89a 0000 	ldrb.w	r0, [sl]
    a6bc:	b908      	cbnz	r0, a6c2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a6be:	4628      	mov	r0, r5
    a6c0:	e35f      	b.n	ad82 <cbvprintf+0x6da>
		if (*fp != '%') {
    a6c2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a6c4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    a6c8:	d007      	beq.n	a6da <cbvprintf+0x32>
			OUTC('%');
    a6ca:	4659      	mov	r1, fp
    a6cc:	9b02      	ldr	r3, [sp, #8]
    a6ce:	4798      	blx	r3
    a6d0:	2800      	cmp	r0, #0
    a6d2:	f2c0 8356 	blt.w	ad82 <cbvprintf+0x6da>
    a6d6:	3501      	adds	r5, #1
			break;
    a6d8:	e212      	b.n	ab00 <cbvprintf+0x458>
		} state = {
    a6da:	2218      	movs	r2, #24
    a6dc:	2100      	movs	r1, #0
    a6de:	a80a      	add	r0, sp, #40	; 0x28
    a6e0:	f013 fd93 	bl	1e20a <memset>
	if (*sp == '%') {
    a6e4:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a6e8:	2b25      	cmp	r3, #37	; 0x25
    a6ea:	d078      	beq.n	a7de <cbvprintf+0x136>
    a6ec:	2200      	movs	r2, #0
    a6ee:	4694      	mov	ip, r2
    a6f0:	4696      	mov	lr, r2
    a6f2:	4616      	mov	r6, r2
    a6f4:	4610      	mov	r0, r2
    a6f6:	4639      	mov	r1, r7
		switch (*sp) {
    a6f8:	f817 3b01 	ldrb.w	r3, [r7], #1
    a6fc:	2b2b      	cmp	r3, #43	; 0x2b
    a6fe:	f000 809d 	beq.w	a83c <cbvprintf+0x194>
    a702:	f200 8094 	bhi.w	a82e <cbvprintf+0x186>
    a706:	2b20      	cmp	r3, #32
    a708:	f000 809a 	beq.w	a840 <cbvprintf+0x198>
    a70c:	2b23      	cmp	r3, #35	; 0x23
    a70e:	f000 809a 	beq.w	a846 <cbvprintf+0x19e>
    a712:	b128      	cbz	r0, a720 <cbvprintf+0x78>
    a714:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a718:	f040 0004 	orr.w	r0, r0, #4
    a71c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a720:	b12e      	cbz	r6, a72e <cbvprintf+0x86>
    a722:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a726:	f040 0008 	orr.w	r0, r0, #8
    a72a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a72e:	f1be 0f00 	cmp.w	lr, #0
    a732:	d005      	beq.n	a740 <cbvprintf+0x98>
    a734:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a738:	f040 0010 	orr.w	r0, r0, #16
    a73c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a740:	f1bc 0f00 	cmp.w	ip, #0
    a744:	d005      	beq.n	a752 <cbvprintf+0xaa>
    a746:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a74a:	f040 0020 	orr.w	r0, r0, #32
    a74e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a752:	b12a      	cbz	r2, a760 <cbvprintf+0xb8>
    a754:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    a75c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    a760:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a764:	f002 0044 	and.w	r0, r2, #68	; 0x44
    a768:	2844      	cmp	r0, #68	; 0x44
    a76a:	d103      	bne.n	a774 <cbvprintf+0xcc>
		conv->flag_zero = false;
    a76c:	f36f 1286 	bfc	r2, #6, #1
    a770:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    a774:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a778:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    a77a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a77e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a782:	d17b      	bne.n	a87c <cbvprintf+0x1d4>
		conv->width_star = true;
    a784:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    a788:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a78a:	f042 0201 	orr.w	r2, r2, #1
    a78e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    a792:	781a      	ldrb	r2, [r3, #0]
    a794:	2a2e      	cmp	r2, #46	; 0x2e
    a796:	bf0c      	ite	eq
    a798:	2101      	moveq	r1, #1
    a79a:	2100      	movne	r1, #0
    a79c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a7a0:	f361 0241 	bfi	r2, r1, #1, #1
    a7a4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    a7a8:	d174      	bne.n	a894 <cbvprintf+0x1ec>
	if (*sp == '*') {
    a7aa:	785a      	ldrb	r2, [r3, #1]
    a7ac:	2a2a      	cmp	r2, #42	; 0x2a
    a7ae:	d06a      	beq.n	a886 <cbvprintf+0x1de>
	size_t val = 0;
    a7b0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    a7b2:	260a      	movs	r6, #10
	++sp;
    a7b4:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a7b6:	4618      	mov	r0, r3
    a7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
    a7bc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a7c0:	2f09      	cmp	r7, #9
    a7c2:	f240 808e 	bls.w	a8e2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    a7c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    a7ca:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    a7cc:	f3c2 0040 	ubfx	r0, r2, #1, #1
    a7d0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    a7d4:	f361 0241 	bfi	r2, r1, #1, #1
    a7d8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    a7dc:	e05a      	b.n	a894 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    a7de:	f10a 0702 	add.w	r7, sl, #2
    a7e2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    a7e6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a7ea:	07d9      	lsls	r1, r3, #31
    a7ec:	f140 8149 	bpl.w	aa82 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    a7f0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    a7f4:	f1b9 0f00 	cmp.w	r9, #0
    a7f8:	da07      	bge.n	a80a <cbvprintf+0x162>
				conv->flag_dash = true;
    a7fa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    a7fe:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    a802:	f042 0204 	orr.w	r2, r2, #4
    a806:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    a80a:	075a      	lsls	r2, r3, #29
    a80c:	f140 8142 	bpl.w	aa94 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    a810:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    a814:	f1b8 0f00 	cmp.w	r8, #0
    a818:	f280 8141 	bge.w	aa9e <cbvprintf+0x3f6>
				conv->prec_present = false;
    a81c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a820:	f36f 0341 	bfc	r3, #1, #1
    a824:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    a828:	f04f 38ff 	mov.w	r8, #4294967295
    a82c:	e137      	b.n	aa9e <cbvprintf+0x3f6>
		switch (*sp) {
    a82e:	2b2d      	cmp	r3, #45	; 0x2d
    a830:	d00c      	beq.n	a84c <cbvprintf+0x1a4>
    a832:	2b30      	cmp	r3, #48	; 0x30
    a834:	f47f af6d 	bne.w	a712 <cbvprintf+0x6a>
			conv->flag_zero = true;
    a838:	2201      	movs	r2, #1
	} while (loop);
    a83a:	e75c      	b.n	a6f6 <cbvprintf+0x4e>
			conv->flag_plus = true;
    a83c:	2601      	movs	r6, #1
    a83e:	e75a      	b.n	a6f6 <cbvprintf+0x4e>
			conv->flag_space = true;
    a840:	f04f 0e01 	mov.w	lr, #1
    a844:	e757      	b.n	a6f6 <cbvprintf+0x4e>
			conv->flag_hash = true;
    a846:	f04f 0c01 	mov.w	ip, #1
    a84a:	e754      	b.n	a6f6 <cbvprintf+0x4e>
		switch (*sp) {
    a84c:	2001      	movs	r0, #1
    a84e:	e752      	b.n	a6f6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    a850:	4633      	mov	r3, r6
    a852:	fb0c 0202 	mla	r2, ip, r2, r0
    a856:	3a30      	subs	r2, #48	; 0x30
    a858:	461e      	mov	r6, r3
    a85a:	f816 0b01 	ldrb.w	r0, [r6], #1
    a85e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a862:	2f09      	cmp	r7, #9
    a864:	d9f4      	bls.n	a850 <cbvprintf+0x1a8>
	if (sp != wp) {
    a866:	4299      	cmp	r1, r3
    a868:	d093      	beq.n	a792 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a86a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    a86e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    a870:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a872:	f362 0141 	bfi	r1, r2, #1, #1
    a876:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    a87a:	e78a      	b.n	a792 <cbvprintf+0xea>
    a87c:	460b      	mov	r3, r1
	size_t val = 0;
    a87e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a880:	f04f 0c0a 	mov.w	ip, #10
    a884:	e7e8      	b.n	a858 <cbvprintf+0x1b0>
		conv->prec_star = true;
    a886:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    a88a:	3302      	adds	r3, #2
		conv->prec_star = true;
    a88c:	f042 0204 	orr.w	r2, r2, #4
    a890:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    a894:	461f      	mov	r7, r3
    a896:	f817 2b01 	ldrb.w	r2, [r7], #1
    a89a:	2a6c      	cmp	r2, #108	; 0x6c
    a89c:	d041      	beq.n	a922 <cbvprintf+0x27a>
    a89e:	d825      	bhi.n	a8ec <cbvprintf+0x244>
    a8a0:	2a68      	cmp	r2, #104	; 0x68
    a8a2:	d02b      	beq.n	a8fc <cbvprintf+0x254>
    a8a4:	2a6a      	cmp	r2, #106	; 0x6a
    a8a6:	d046      	beq.n	a936 <cbvprintf+0x28e>
    a8a8:	2a4c      	cmp	r2, #76	; 0x4c
    a8aa:	d04c      	beq.n	a946 <cbvprintf+0x29e>
    a8ac:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    a8ae:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    a8b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    a8b6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    a8b8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    a8bc:	f200 80d9 	bhi.w	aa72 <cbvprintf+0x3ca>
    a8c0:	2a57      	cmp	r2, #87	; 0x57
    a8c2:	d84d      	bhi.n	a960 <cbvprintf+0x2b8>
    a8c4:	2a41      	cmp	r2, #65	; 0x41
    a8c6:	d003      	beq.n	a8d0 <cbvprintf+0x228>
    a8c8:	3a45      	subs	r2, #69	; 0x45
    a8ca:	2a02      	cmp	r2, #2
    a8cc:	f200 80d1 	bhi.w	aa72 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    a8d0:	2204      	movs	r2, #4
    a8d2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    a8d6:	f362 0302 	bfi	r3, r2, #0, #3
    a8da:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    a8de:	2301      	movs	r3, #1
			break;
    a8e0:	e09e      	b.n	aa20 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    a8e2:	fb06 2101 	mla	r1, r6, r1, r2
    a8e6:	4603      	mov	r3, r0
    a8e8:	3930      	subs	r1, #48	; 0x30
    a8ea:	e764      	b.n	a7b6 <cbvprintf+0x10e>
	switch (*sp) {
    a8ec:	2a74      	cmp	r2, #116	; 0x74
    a8ee:	d026      	beq.n	a93e <cbvprintf+0x296>
    a8f0:	2a7a      	cmp	r2, #122	; 0x7a
    a8f2:	d1db      	bne.n	a8ac <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    a8f4:	2206      	movs	r2, #6
    a8f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a8fa:	e00d      	b.n	a918 <cbvprintf+0x270>
		if (*++sp == 'h') {
    a8fc:	785a      	ldrb	r2, [r3, #1]
    a8fe:	2a68      	cmp	r2, #104	; 0x68
    a900:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a904:	d106      	bne.n	a914 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    a906:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    a908:	f361 02c6 	bfi	r2, r1, #3, #4
    a90c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    a910:	1c9f      	adds	r7, r3, #2
    a912:	e7cc      	b.n	a8ae <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    a914:	4613      	mov	r3, r2
    a916:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    a918:	f362 03c6 	bfi	r3, r2, #3, #4
    a91c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    a920:	e7c5      	b.n	a8ae <cbvprintf+0x206>
		if (*++sp == 'l') {
    a922:	785a      	ldrb	r2, [r3, #1]
    a924:	2a6c      	cmp	r2, #108	; 0x6c
    a926:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a92a:	d101      	bne.n	a930 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    a92c:	2104      	movs	r1, #4
    a92e:	e7eb      	b.n	a908 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    a930:	4613      	mov	r3, r2
    a932:	2203      	movs	r2, #3
    a934:	e7f0      	b.n	a918 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    a936:	2205      	movs	r2, #5
    a938:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a93c:	e7ec      	b.n	a918 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    a93e:	2207      	movs	r2, #7
    a940:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a944:	e7e8      	b.n	a918 <cbvprintf+0x270>
		conv->unsupported = true;
    a946:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    a94a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    a94e:	f023 0302 	bic.w	r3, r3, #2
    a952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    a956:	f043 0302 	orr.w	r3, r3, #2
    a95a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    a95e:	e7a6      	b.n	a8ae <cbvprintf+0x206>
    a960:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    a964:	2920      	cmp	r1, #32
    a966:	f200 8084 	bhi.w	aa72 <cbvprintf+0x3ca>
    a96a:	a001      	add	r0, pc, #4	; (adr r0, a970 <cbvprintf+0x2c8>)
    a96c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    a970:	0000aa35 	.word	0x0000aa35
    a974:	0000aa73 	.word	0x0000aa73
    a978:	0000aa73 	.word	0x0000aa73
    a97c:	0000aa73 	.word	0x0000aa73
    a980:	0000aa73 	.word	0x0000aa73
    a984:	0000aa73 	.word	0x0000aa73
    a988:	0000aa73 	.word	0x0000aa73
    a98c:	0000aa73 	.word	0x0000aa73
    a990:	0000aa73 	.word	0x0000aa73
    a994:	0000a8d1 	.word	0x0000a8d1
    a998:	0000aa73 	.word	0x0000aa73
    a99c:	0000aa35 	.word	0x0000aa35
    a9a0:	0000a9f5 	.word	0x0000a9f5
    a9a4:	0000a8d1 	.word	0x0000a8d1
    a9a8:	0000a8d1 	.word	0x0000a8d1
    a9ac:	0000a8d1 	.word	0x0000a8d1
    a9b0:	0000aa73 	.word	0x0000aa73
    a9b4:	0000a9f5 	.word	0x0000a9f5
    a9b8:	0000aa73 	.word	0x0000aa73
    a9bc:	0000aa73 	.word	0x0000aa73
    a9c0:	0000aa73 	.word	0x0000aa73
    a9c4:	0000aa73 	.word	0x0000aa73
    a9c8:	0000aa3d 	.word	0x0000aa3d
    a9cc:	0000aa35 	.word	0x0000aa35
    a9d0:	0000aa59 	.word	0x0000aa59
    a9d4:	0000aa73 	.word	0x0000aa73
    a9d8:	0000aa73 	.word	0x0000aa73
    a9dc:	0000aa59 	.word	0x0000aa59
    a9e0:	0000aa73 	.word	0x0000aa73
    a9e4:	0000aa35 	.word	0x0000aa35
    a9e8:	0000aa73 	.word	0x0000aa73
    a9ec:	0000aa73 	.word	0x0000aa73
    a9f0:	0000aa35 	.word	0x0000aa35
		conv->specifier_cat = SPECIFIER_SINT;
    a9f4:	2001      	movs	r0, #1
    a9f6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    a9fa:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    a9fe:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa02:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    aa04:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    aa08:	bf02      	ittt	eq
    aa0a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    aa0e:	f041 0101 	orreq.w	r1, r1, #1
    aa12:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    aa16:	2a63      	cmp	r2, #99	; 0x63
    aa18:	d131      	bne.n	aa7e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    aa1a:	3b00      	subs	r3, #0
    aa1c:	bf18      	it	ne
    aa1e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    aa20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    aa24:	f3c2 0140 	ubfx	r1, r2, #1, #1
    aa28:	430b      	orrs	r3, r1
    aa2a:	f363 0241 	bfi	r2, r3, #1, #1
    aa2e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    aa32:	e6d8      	b.n	a7e6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    aa34:	2002      	movs	r0, #2
    aa36:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    aa3a:	e7de      	b.n	a9fa <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    aa3c:	2103      	movs	r1, #3
    aa3e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa42:	f003 0378 	and.w	r3, r3, #120	; 0x78
    aa46:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    aa4a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa4e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    aa50:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa54:	4143      	adcs	r3, r0
    aa56:	e7e3      	b.n	aa20 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    aa58:	2103      	movs	r1, #3
    aa5a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    aa5e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    aa62:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    aa66:	bf14      	ite	ne
    aa68:	2301      	movne	r3, #1
    aa6a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    aa6c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    aa70:	e7d6      	b.n	aa20 <cbvprintf+0x378>
		conv->invalid = true;
    aa72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    aa76:	f043 0301 	orr.w	r3, r3, #1
    aa7a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    aa7e:	2300      	movs	r3, #0
    aa80:	e7ce      	b.n	aa20 <cbvprintf+0x378>
		} else if (conv->width_present) {
    aa82:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    aa86:	2a00      	cmp	r2, #0
		int width = -1;
    aa88:	bfac      	ite	ge
    aa8a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    aa8e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    aa92:	e6ba      	b.n	a80a <cbvprintf+0x162>
		} else if (conv->prec_present) {
    aa94:	079b      	lsls	r3, r3, #30
    aa96:	f57f aec7 	bpl.w	a828 <cbvprintf+0x180>
			precision = conv->prec_value;
    aa9a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    aa9e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    aaa0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    aaa4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    aaa8:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    aaac:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    aab0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    aab2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    aab6:	d138      	bne.n	ab2a <cbvprintf+0x482>
			switch (length_mod) {
    aab8:	1ecb      	subs	r3, r1, #3
    aaba:	2b04      	cmp	r3, #4
    aabc:	d822      	bhi.n	ab04 <cbvprintf+0x45c>
    aabe:	e8df f003 	tbb	[pc, r3]
    aac2:	0903      	.short	0x0903
    aac4:	2109      	.short	0x2109
    aac6:	21          	.byte	0x21
    aac7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    aac8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    aacc:	17da      	asrs	r2, r3, #31
    aace:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    aad2:	e006      	b.n	aae2 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    aad4:	3407      	adds	r4, #7
    aad6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    aada:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    aade:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    aae2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    aae6:	f013 0603 	ands.w	r6, r3, #3
    aaea:	d056      	beq.n	ab9a <cbvprintf+0x4f2>
			OUTS(sp, fp);
    aaec:	463b      	mov	r3, r7
    aaee:	4652      	mov	r2, sl
    aaf0:	4659      	mov	r1, fp
    aaf2:	9802      	ldr	r0, [sp, #8]
    aaf4:	f012 f936 	bl	1cd64 <outs>
    aaf8:	2800      	cmp	r0, #0
    aafa:	f2c0 8142 	blt.w	ad82 <cbvprintf+0x6da>
    aafe:	4405      	add	r5, r0
			continue;
    ab00:	46ba      	mov	sl, r7
    ab02:	e5d9      	b.n	a6b8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ab04:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ab08:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ab0a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ab0e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    ab12:	d105      	bne.n	ab20 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    ab14:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    ab18:	930a      	str	r3, [sp, #40]	; 0x28
    ab1a:	2300      	movs	r3, #0
    ab1c:	930b      	str	r3, [sp, #44]	; 0x2c
    ab1e:	e7e0      	b.n	aae2 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    ab20:	2902      	cmp	r1, #2
    ab22:	d1de      	bne.n	aae2 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    ab24:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    ab28:	e7d0      	b.n	aacc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ab2a:	2b02      	cmp	r3, #2
    ab2c:	d123      	bne.n	ab76 <cbvprintf+0x4ce>
			switch (length_mod) {
    ab2e:	1ecb      	subs	r3, r1, #3
    ab30:	2b04      	cmp	r3, #4
    ab32:	d813      	bhi.n	ab5c <cbvprintf+0x4b4>
    ab34:	e8df f003 	tbb	[pc, r3]
    ab38:	120a0a03 	.word	0x120a0a03
    ab3c:	12          	.byte	0x12
    ab3d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    ab3e:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    ab40:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    ab42:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    ab44:	920a      	str	r2, [sp, #40]	; 0x28
    ab46:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    ab48:	4604      	mov	r4, r0
    ab4a:	e7ca      	b.n	aae2 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    ab4c:	1de0      	adds	r0, r4, #7
    ab4e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    ab52:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    ab56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    ab5a:	e7f5      	b.n	ab48 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    ab5c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ab60:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    ab62:	930a      	str	r3, [sp, #40]	; 0x28
    ab64:	f04f 0300 	mov.w	r3, #0
    ab68:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    ab6a:	d0d3      	beq.n	ab14 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    ab6c:	2902      	cmp	r1, #2
    ab6e:	d1b8      	bne.n	aae2 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    ab70:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ab74:	e7d0      	b.n	ab18 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    ab76:	2b04      	cmp	r3, #4
    ab78:	d109      	bne.n	ab8e <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    ab7a:	1de3      	adds	r3, r4, #7
    ab7c:	f023 0307 	bic.w	r3, r3, #7
    ab80:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ab8c:	e7a9      	b.n	aae2 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ab8e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    ab90:	bf04      	itt	eq
    ab92:	f854 3b04 	ldreq.w	r3, [r4], #4
    ab96:	930a      	streq	r3, [sp, #40]	; 0x28
    ab98:	e7a3      	b.n	aae2 <cbvprintf+0x43a>
		switch (conv->specifier) {
    ab9a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ab9e:	2878      	cmp	r0, #120	; 0x78
    aba0:	d8ae      	bhi.n	ab00 <cbvprintf+0x458>
    aba2:	2862      	cmp	r0, #98	; 0x62
    aba4:	d822      	bhi.n	abec <cbvprintf+0x544>
    aba6:	2825      	cmp	r0, #37	; 0x25
    aba8:	f43f ad8f 	beq.w	a6ca <cbvprintf+0x22>
    abac:	2858      	cmp	r0, #88	; 0x58
    abae:	d1a7      	bne.n	ab00 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    abb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    abb4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    abb8:	9300      	str	r3, [sp, #0]
    abba:	aa0c      	add	r2, sp, #48	; 0x30
    abbc:	ab04      	add	r3, sp, #16
    abbe:	f012 f88b 	bl	1ccd8 <encode_uint>
    abc2:	4682      	mov	sl, r0
			if (precision >= 0) {
    abc4:	f1b8 0f00 	cmp.w	r8, #0
    abc8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    abcc:	db0c      	blt.n	abe8 <cbvprintf+0x540>
				conv->flag_zero = false;
    abce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    abd2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    abd6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    abda:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    abdc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    abe0:	d902      	bls.n	abe8 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    abe2:	eba8 0303 	sub.w	r3, r8, r3
    abe6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    abe8:	4680      	mov	r8, r0
    abea:	e03d      	b.n	ac68 <cbvprintf+0x5c0>
    abec:	3863      	subs	r0, #99	; 0x63
    abee:	2815      	cmp	r0, #21
    abf0:	d886      	bhi.n	ab00 <cbvprintf+0x458>
    abf2:	a201      	add	r2, pc, #4	; (adr r2, abf8 <cbvprintf+0x550>)
    abf4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    abf8:	0000ac79 	.word	0x0000ac79
    abfc:	0000acdd 	.word	0x0000acdd
    ac00:	0000ab01 	.word	0x0000ab01
    ac04:	0000ab01 	.word	0x0000ab01
    ac08:	0000ab01 	.word	0x0000ab01
    ac0c:	0000ab01 	.word	0x0000ab01
    ac10:	0000acdd 	.word	0x0000acdd
    ac14:	0000ab01 	.word	0x0000ab01
    ac18:	0000ab01 	.word	0x0000ab01
    ac1c:	0000ab01 	.word	0x0000ab01
    ac20:	0000ab01 	.word	0x0000ab01
    ac24:	0000ad37 	.word	0x0000ad37
    ac28:	0000ad05 	.word	0x0000ad05
    ac2c:	0000ad09 	.word	0x0000ad09
    ac30:	0000ab01 	.word	0x0000ab01
    ac34:	0000ab01 	.word	0x0000ab01
    ac38:	0000ac51 	.word	0x0000ac51
    ac3c:	0000ab01 	.word	0x0000ab01
    ac40:	0000ad05 	.word	0x0000ad05
    ac44:	0000ab01 	.word	0x0000ab01
    ac48:	0000ab01 	.word	0x0000ab01
    ac4c:	0000ad05 	.word	0x0000ad05
			if (precision >= 0) {
    ac50:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    ac54:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    ac58:	db0a      	blt.n	ac70 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    ac5a:	4641      	mov	r1, r8
    ac5c:	4650      	mov	r0, sl
    ac5e:	f013 fa72 	bl	1e146 <strnlen>
		char sign = 0;
    ac62:	2600      	movs	r6, #0
			bpe = bps + len;
    ac64:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    ac68:	f1ba 0f00 	cmp.w	sl, #0
    ac6c:	d10c      	bne.n	ac88 <cbvprintf+0x5e0>
    ac6e:	e747      	b.n	ab00 <cbvprintf+0x458>
				len = strlen(bps);
    ac70:	4650      	mov	r0, sl
    ac72:	f013 fa61 	bl	1e138 <strlen>
    ac76:	e7f4      	b.n	ac62 <cbvprintf+0x5ba>
			break;
    ac78:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ac7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    ac7c:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ac80:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    ac84:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    ac88:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    ac8c:	b106      	cbz	r6, ac90 <cbvprintf+0x5e8>
			nj_len += 1U;
    ac8e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    ac90:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    ac94:	06d0      	lsls	r0, r2, #27
    ac96:	d568      	bpl.n	ad6a <cbvprintf+0x6c2>
			nj_len += 2U;
    ac98:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    ac9a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    ac9c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    ac9e:	bf48      	it	mi
    aca0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    aca2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    aca4:	bf48      	it	mi
    aca6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    aca8:	f1b9 0f00 	cmp.w	r9, #0
    acac:	dd76      	ble.n	ad9c <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    acae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    acb2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    acb6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    acba:	9303      	str	r3, [sp, #12]
    acbc:	0753      	lsls	r3, r2, #29
    acbe:	d46d      	bmi.n	ad9c <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    acc0:	0650      	lsls	r0, r2, #25
    acc2:	d561      	bpl.n	ad88 <cbvprintf+0x6e0>
					if (sign != 0) {
    acc4:	b146      	cbz	r6, acd8 <cbvprintf+0x630>
						OUTC(sign);
    acc6:	4659      	mov	r1, fp
    acc8:	4630      	mov	r0, r6
    acca:	9b02      	ldr	r3, [sp, #8]
    accc:	4798      	blx	r3
    acce:	2800      	cmp	r0, #0
    acd0:	db57      	blt.n	ad82 <cbvprintf+0x6da>
						sign = 0;
    acd2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    acd4:	3501      	adds	r5, #1
						sign = 0;
    acd6:	461e      	mov	r6, r3
					pad = '0';
    acd8:	2330      	movs	r3, #48	; 0x30
    acda:	e056      	b.n	ad8a <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    acdc:	071e      	lsls	r6, r3, #28
    acde:	d40f      	bmi.n	ad00 <cbvprintf+0x658>
				sign = ' ';
    ace0:	f013 0610 	ands.w	r6, r3, #16
    ace4:	bf18      	it	ne
    ace6:	2620      	movne	r6, #32
			if (value->sint < 0) {
    ace8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    acec:	2b00      	cmp	r3, #0
    acee:	f6bf af5f 	bge.w	abb0 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    acf2:	4252      	negs	r2, r2
    acf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    acf8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    acfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    acfe:	e757      	b.n	abb0 <cbvprintf+0x508>
				sign = '+';
    ad00:	262b      	movs	r6, #43	; 0x2b
    ad02:	e7f1      	b.n	ace8 <cbvprintf+0x640>
		switch (conv->specifier) {
    ad04:	2600      	movs	r6, #0
    ad06:	e753      	b.n	abb0 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    ad08:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad0a:	b340      	cbz	r0, ad5e <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ad0c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ad10:	9300      	str	r3, [sp, #0]
    ad12:	2100      	movs	r1, #0
    ad14:	ab04      	add	r3, sp, #16
    ad16:	aa0c      	add	r2, sp, #48	; 0x30
    ad18:	f011 ffde 	bl	1ccd8 <encode_uint>
				conv->altform_0c = true;
    ad1c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ad20:	4682      	mov	sl, r0
				conv->altform_0c = true;
    ad22:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ad26:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ad2a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ad2e:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ad30:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ad34:	e746      	b.n	abc4 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    ad36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    ad38:	2907      	cmp	r1, #7
    ad3a:	f63f aee1 	bhi.w	ab00 <cbvprintf+0x458>
    ad3e:	e8df f001 	tbb	[pc, r1]
    ad42:	040c      	.short	0x040c
    ad44:	08080c06 	.word	0x08080c06
    ad48:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    ad4a:	701d      	strb	r5, [r3, #0]
		break;
    ad4c:	e6d8      	b.n	ab00 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    ad4e:	801d      	strh	r5, [r3, #0]
		break;
    ad50:	e6d6      	b.n	ab00 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    ad52:	17ea      	asrs	r2, r5, #31
    ad54:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    ad58:	e6d2      	b.n	ab00 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ad5a:	601d      	str	r5, [r3, #0]
		break;
    ad5c:	e6d0      	b.n	ab00 <cbvprintf+0x458>
			bps = "(nil)";
    ad5e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; ae28 <cbvprintf+0x780>
    ad62:	4606      	mov	r6, r0
			bpe = bps + 5;
    ad64:	f10a 0805 	add.w	r8, sl, #5
    ad68:	e78e      	b.n	ac88 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    ad6a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    ad6c:	bf48      	it	mi
    ad6e:	3301      	addmi	r3, #1
    ad70:	e793      	b.n	ac9a <cbvprintf+0x5f2>
					OUTC(pad);
    ad72:	4618      	mov	r0, r3
    ad74:	9303      	str	r3, [sp, #12]
    ad76:	4659      	mov	r1, fp
    ad78:	9b02      	ldr	r3, [sp, #8]
    ad7a:	4798      	blx	r3
    ad7c:	2800      	cmp	r0, #0
    ad7e:	9b03      	ldr	r3, [sp, #12]
    ad80:	da04      	bge.n	ad8c <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    ad82:	b011      	add	sp, #68	; 0x44
    ad84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ad88:	2320      	movs	r3, #32
    ad8a:	444d      	add	r5, r9
    ad8c:	464a      	mov	r2, r9
				while (width-- > 0) {
    ad8e:	2a00      	cmp	r2, #0
    ad90:	eba5 0109 	sub.w	r1, r5, r9
    ad94:	f109 39ff 	add.w	r9, r9, #4294967295
    ad98:	dceb      	bgt.n	ad72 <cbvprintf+0x6ca>
    ad9a:	460d      	mov	r5, r1
		if (sign != 0) {
    ad9c:	b136      	cbz	r6, adac <cbvprintf+0x704>
			OUTC(sign);
    ad9e:	4659      	mov	r1, fp
    ada0:	4630      	mov	r0, r6
    ada2:	9b02      	ldr	r3, [sp, #8]
    ada4:	4798      	blx	r3
    ada6:	2800      	cmp	r0, #0
    ada8:	dbeb      	blt.n	ad82 <cbvprintf+0x6da>
    adaa:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    adac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    adb0:	06d9      	lsls	r1, r3, #27
    adb2:	d401      	bmi.n	adb8 <cbvprintf+0x710>
    adb4:	071a      	lsls	r2, r3, #28
    adb6:	d506      	bpl.n	adc6 <cbvprintf+0x71e>
				OUTC('0');
    adb8:	4659      	mov	r1, fp
    adba:	2030      	movs	r0, #48	; 0x30
    adbc:	9b02      	ldr	r3, [sp, #8]
    adbe:	4798      	blx	r3
    adc0:	2800      	cmp	r0, #0
    adc2:	dbde      	blt.n	ad82 <cbvprintf+0x6da>
    adc4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    adc6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    adca:	06db      	lsls	r3, r3, #27
    adcc:	d507      	bpl.n	adde <cbvprintf+0x736>
				OUTC(conv->specifier);
    adce:	4659      	mov	r1, fp
    add0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    add4:	9b02      	ldr	r3, [sp, #8]
    add6:	4798      	blx	r3
    add8:	2800      	cmp	r0, #0
    adda:	dbd2      	blt.n	ad82 <cbvprintf+0x6da>
    addc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    adde:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    ade0:	442e      	add	r6, r5
    ade2:	1b73      	subs	r3, r6, r5
    ade4:	2b00      	cmp	r3, #0
    ade6:	dc16      	bgt.n	ae16 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    ade8:	4643      	mov	r3, r8
    adea:	4652      	mov	r2, sl
    adec:	4659      	mov	r1, fp
    adee:	9802      	ldr	r0, [sp, #8]
    adf0:	f011 ffb8 	bl	1cd64 <outs>
    adf4:	2800      	cmp	r0, #0
    adf6:	dbc4      	blt.n	ad82 <cbvprintf+0x6da>
    adf8:	4405      	add	r5, r0
		while (width > 0) {
    adfa:	44a9      	add	r9, r5
    adfc:	eba9 0305 	sub.w	r3, r9, r5
    ae00:	2b00      	cmp	r3, #0
    ae02:	f77f ae7d 	ble.w	ab00 <cbvprintf+0x458>
			OUTC(' ');
    ae06:	4659      	mov	r1, fp
    ae08:	2020      	movs	r0, #32
    ae0a:	9b02      	ldr	r3, [sp, #8]
    ae0c:	4798      	blx	r3
    ae0e:	2800      	cmp	r0, #0
    ae10:	dbb7      	blt.n	ad82 <cbvprintf+0x6da>
    ae12:	3501      	adds	r5, #1
			--width;
    ae14:	e7f2      	b.n	adfc <cbvprintf+0x754>
				OUTC('0');
    ae16:	4659      	mov	r1, fp
    ae18:	2030      	movs	r0, #48	; 0x30
    ae1a:	9b02      	ldr	r3, [sp, #8]
    ae1c:	4798      	blx	r3
    ae1e:	2800      	cmp	r0, #0
    ae20:	dbaf      	blt.n	ad82 <cbvprintf+0x6da>
    ae22:	3501      	adds	r5, #1
    ae24:	e7dd      	b.n	ade2 <cbvprintf+0x73a>
    ae26:	bf00      	nop
    ae28:	00022d0a 	.word	0x00022d0a

0000ae2c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ae2c:	b148      	cbz	r0, ae42 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    ae2e:	4b05      	ldr	r3, [pc, #20]	; (ae44 <arch_busy_wait+0x18>)
    ae30:	681a      	ldr	r2, [r3, #0]
    ae32:	4b05      	ldr	r3, [pc, #20]	; (ae48 <arch_busy_wait+0x1c>)
    ae34:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    ae38:	4b04      	ldr	r3, [pc, #16]	; (ae4c <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    ae3a:	4350      	muls	r0, r2
    ae3c:	f043 0301 	orr.w	r3, r3, #1
    ae40:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ae42:	4770      	bx	lr
    ae44:	200083e8 	.word	0x200083e8
    ae48:	000f4240 	.word	0x000f4240
    ae4c:	00021af0 	.word	0x00021af0

0000ae50 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    ae50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ae54:	460e      	mov	r6, r1
    ae56:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ae58:	2108      	movs	r1, #8
    ae5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    ae5c:	f012 f87a 	bl	1cf54 <nvs_al_size.isra.0>
    ae60:	4607      	mov	r7, r0

	*addr -= ate_size;
    ae62:	6834      	ldr	r4, [r6, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    ae64:	f8df 9044 	ldr.w	r9, [pc, #68]	; aeac <nvs_recover_last_ate+0x5c>
	*addr -= ate_size;
    ae68:	1a24      	subs	r4, r4, r0
    ae6a:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    ae6c:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    ae70:	42ac      	cmp	r4, r5
    ae72:	d803      	bhi.n	ae7c <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    ae74:	2000      	movs	r0, #0
}
    ae76:	b003      	add	sp, #12
    ae78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ae7c:	2308      	movs	r3, #8
    ae7e:	466a      	mov	r2, sp
    ae80:	4621      	mov	r1, r4
    ae82:	4640      	mov	r0, r8
    ae84:	f011 ffc2 	bl	1ce0c <nvs_flash_rd>
		if (rc) {
    ae88:	2800      	cmp	r0, #0
    ae8a:	d1f4      	bne.n	ae76 <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    ae8c:	4668      	mov	r0, sp
    ae8e:	f012 f841 	bl	1cf14 <nvs_ate_crc8_check>
    ae92:	b940      	cbnz	r0, aea6 <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    ae94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ae98:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    ae9c:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    aea0:	4413      	add	r3, r2
    aea2:	441d      	add	r5, r3
			*addr = ate_end_addr;
    aea4:	6034      	str	r4, [r6, #0]
		ate_end_addr -= ate_size;
    aea6:	1be4      	subs	r4, r4, r7
    aea8:	e7e2      	b.n	ae70 <nvs_recover_last_ate+0x20>
    aeaa:	bf00      	nop
    aeac:	ffff0000 	.word	0xffff0000

0000aeb0 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    aeb4:	2108      	movs	r1, #8
{
    aeb6:	b093      	sub	sp, #76	; 0x4c
    aeb8:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    aeba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    aebc:	f012 f84a 	bl	1cf54 <nvs_al_size.isra.0>
    aec0:	4680      	mov	r8, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    aec2:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    aec4:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    aec6:	0c1b      	lsrs	r3, r3, #16
    aec8:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    aeca:	a901      	add	r1, sp, #4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    aecc:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    aece:	f012 f836 	bl	1cf3e <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    aed2:	9b01      	ldr	r3, [sp, #4]
    aed4:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    aed6:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    aed8:	4419      	add	r1, r3
    aeda:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    aede:	2308      	movs	r3, #8
    aee0:	aa04      	add	r2, sp, #16
	gc_addr = sec_addr + fs->sector_size - ate_size;
    aee2:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    aee4:	f011 ff92 	bl	1ce0c <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    aee8:	2800      	cmp	r0, #0
    aeea:	f2c0 8083 	blt.w	aff4 <nvs_gc+0x144>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    aeee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    aef0:	aa04      	add	r2, sp, #16
    aef2:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    aef4:	2300      	movs	r3, #0
		if (data8[i] != value) {
    aef6:	f812 0b01 	ldrb.w	r0, [r2], #1
    aefa:	4281      	cmp	r1, r0
    aefc:	d16c      	bne.n	afd8 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    aefe:	3301      	adds	r3, #1
    af00:	2b08      	cmp	r3, #8
    af02:	d1f8      	bne.n	aef6 <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    af04:	4620      	mov	r0, r4
    af06:	9901      	ldr	r1, [sp, #4]
    af08:	f011 ffdd 	bl	1cec6 <nvs_flash_erase_sector>
		if (rc) {
    af0c:	e072      	b.n	aff4 <nvs_gc+0x144>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    af0e:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    af10:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    af14:	0c1b      	lsrs	r3, r3, #16
    af16:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    af18:	4413      	add	r3, r2
    af1a:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    af1c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; affc <nvs_gc+0x14c>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    af20:	4620      	mov	r0, r4
    af22:	aa06      	add	r2, sp, #24
    af24:	a902      	add	r1, sp, #8
		gc_prev_addr = gc_addr;
    af26:	f8dd 9008 	ldr.w	r9, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    af2a:	f012 f81d 	bl	1cf68 <nvs_prev_ate>
		if (rc) {
    af2e:	2800      	cmp	r0, #0
    af30:	d160      	bne.n	aff4 <nvs_gc+0x144>
		if (nvs_ate_crc8_check(&gc_ate)) {
    af32:	a806      	add	r0, sp, #24
    af34:	f011 ffee 	bl	1cf14 <nvs_ate_crc8_check>
    af38:	bb80      	cbnz	r0, af9c <nvs_gc+0xec>
		wlk_addr = fs->ate_wra;
    af3a:	6863      	ldr	r3, [r4, #4]
    af3c:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    af3e:	4620      	mov	r0, r4
    af40:	aa08      	add	r2, sp, #32
    af42:	a903      	add	r1, sp, #12
			wlk_prev_addr = wlk_addr;
    af44:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    af46:	f012 f80f 	bl	1cf68 <nvs_prev_ate>
			if (rc) {
    af4a:	2800      	cmp	r0, #0
    af4c:	d152      	bne.n	aff4 <nvs_gc+0x144>
			if ((wlk_ate.id == gc_ate.id) &&
    af4e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    af52:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    af56:	429a      	cmp	r2, r3
    af58:	d023      	beq.n	afa2 <nvs_gc+0xf2>
		} while (wlk_addr != fs->ate_wra);
    af5a:	6862      	ldr	r2, [r4, #4]
    af5c:	9b03      	ldr	r3, [sp, #12]
    af5e:	429a      	cmp	r2, r3
    af60:	d1ed      	bne.n	af3e <nvs_gc+0x8e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    af62:	454d      	cmp	r5, r9
    af64:	d11a      	bne.n	af9c <nvs_gc+0xec>
    af66:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    af6a:	b1bb      	cbz	r3, af9c <nvs_gc+0xec>
			data_addr += gc_ate.offset;
    af6c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    af70:	ea09 060a 	and.w	r6, r9, sl
			data_addr += gc_ate.offset;
    af74:	441e      	add	r6, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    af76:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    af78:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    af7a:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    af7e:	f011 ffd5 	bl	1cf2c <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    af82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    af84:	f8bd 701c 	ldrh.w	r7, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    af88:	681d      	ldr	r5, [r3, #0]
    af8a:	426d      	negs	r5, r5
	block_size =
    af8c:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    af90:	b96f      	cbnz	r7, afae <nvs_gc+0xfe>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    af92:	4620      	mov	r0, r4
    af94:	a906      	add	r1, sp, #24
    af96:	f012 f895 	bl	1d0c4 <nvs_flash_ate_wrt>
			if (rc) {
    af9a:	bb58      	cbnz	r0, aff4 <nvs_gc+0x144>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    af9c:	45c1      	cmp	r9, r8
    af9e:	d1bf      	bne.n	af20 <nvs_gc+0x70>
    afa0:	e7b0      	b.n	af04 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    afa2:	a808      	add	r0, sp, #32
    afa4:	f011 ffb6 	bl	1cf14 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    afa8:	2800      	cmp	r0, #0
    afaa:	d1d6      	bne.n	af5a <nvs_gc+0xaa>
    afac:	e7d9      	b.n	af62 <nvs_gc+0xb2>
		bytes_to_copy = MIN(block_size, len);
    afae:	42bd      	cmp	r5, r7
    afb0:	46ab      	mov	fp, r5
    afb2:	bf28      	it	cs
    afb4:	46bb      	movcs	fp, r7
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    afb6:	4631      	mov	r1, r6
    afb8:	465b      	mov	r3, fp
    afba:	4620      	mov	r0, r4
    afbc:	aa0a      	add	r2, sp, #40	; 0x28
    afbe:	f011 ff25 	bl	1ce0c <nvs_flash_rd>
		if (rc) {
    afc2:	b9b8      	cbnz	r0, aff4 <nvs_gc+0x144>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
    afc4:	465a      	mov	r2, fp
    afc6:	4620      	mov	r0, r4
    afc8:	a90a      	add	r1, sp, #40	; 0x28
    afca:	f012 f868 	bl	1d09e <nvs_flash_data_wrt>
		if (rc) {
    afce:	b988      	cbnz	r0, aff4 <nvs_gc+0x144>
		len -= bytes_to_copy;
    afd0:	eba7 070b 	sub.w	r7, r7, fp
		addr += bytes_to_copy;
    afd4:	445e      	add	r6, fp
    afd6:	e7db      	b.n	af90 <nvs_gc+0xe0>
	stop_addr = gc_addr - ate_size;
    afd8:	9802      	ldr	r0, [sp, #8]
    afda:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    afde:	a804      	add	r0, sp, #16
    afe0:	f011 ff98 	bl	1cf14 <nvs_ate_crc8_check>
    afe4:	2800      	cmp	r0, #0
    afe6:	d092      	beq.n	af0e <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    afe8:	4620      	mov	r0, r4
    afea:	a902      	add	r1, sp, #8
    afec:	f7ff ff30 	bl	ae50 <nvs_recover_last_ate>
		if (rc) {
    aff0:	2800      	cmp	r0, #0
    aff2:	d093      	beq.n	af1c <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    aff4:	b013      	add	sp, #76	; 0x4c
    aff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    affa:	bf00      	nop
    affc:	ffff0000 	.word	0xffff0000

0000b000 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    b000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b004:	4604      	mov	r4, r0
    b006:	460d      	mov	r5, r1
    b008:	b086      	sub	sp, #24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    b00a:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    b00e:	4630      	mov	r0, r6
    b010:	f016 f908 	bl	21224 <z_impl_k_mutex_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b014:	4628      	mov	r0, r5
    b016:	f00e fc7f 	bl	19918 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    b01a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    b01c:	b948      	cbnz	r0, b032 <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    b01e:	2145      	movs	r1, #69	; 0x45
    b020:	488b      	ldr	r0, [pc, #556]	; (b250 <nvs_init+0x250>)
    b022:	f011 fc0f 	bl	1c844 <printk>
		return -ENXIO;
    b026:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    b02a:	4628      	mov	r0, r5
    b02c:	b006      	add	sp, #24
    b02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    b032:	6883      	ldr	r3, [r0, #8]
    b034:	691b      	ldr	r3, [r3, #16]
    b036:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    b038:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    b03a:	b930      	cbnz	r0, b04a <nvs_init+0x4a>
		LOG_ERR("Could not obtain flash parameters");
    b03c:	2145      	movs	r1, #69	; 0x45
    b03e:	4885      	ldr	r0, [pc, #532]	; (b254 <nvs_init+0x254>)
		LOG_ERR("Configuration error - sector count");
    b040:	f011 fc00 	bl	1c844 <printk>
		return -EINVAL;
    b044:	f06f 0515 	mvn.w	r5, #21
    b048:	e7ef      	b.n	b02a <nvs_init+0x2a>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    b04a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    b04c:	6883      	ldr	r3, [r0, #8]
    b04e:	691b      	ldr	r3, [r3, #16]
    b050:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    b052:	6803      	ldr	r3, [r0, #0]
    b054:	3b01      	subs	r3, #1
    b056:	2b1f      	cmp	r3, #31
    b058:	d902      	bls.n	b060 <nvs_init+0x60>
		LOG_ERR("Unsupported write block size");
    b05a:	2145      	movs	r1, #69	; 0x45
    b05c:	487e      	ldr	r0, [pc, #504]	; (b258 <nvs_init+0x258>)
    b05e:	e7ef      	b.n	b040 <nvs_init+0x40>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    b060:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b062:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    b064:	aa03      	add	r2, sp, #12
    b066:	f015 fb39 	bl	206dc <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    b06a:	b110      	cbz	r0, b072 <nvs_init+0x72>
		LOG_ERR("Unable to get page info");
    b06c:	2145      	movs	r1, #69	; 0x45
    b06e:	487b      	ldr	r0, [pc, #492]	; (b25c <nvs_init+0x25c>)
    b070:	e7e6      	b.n	b040 <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    b072:	89a5      	ldrh	r5, [r4, #12]
    b074:	b12d      	cbz	r5, b082 <nvs_init+0x82>
    b076:	9b04      	ldr	r3, [sp, #16]
    b078:	fbb5 f2f3 	udiv	r2, r5, r3
    b07c:	fb03 5512 	mls	r5, r3, r2, r5
    b080:	b115      	cbz	r5, b088 <nvs_init+0x88>
		LOG_ERR("Invalid sector size");
    b082:	2145      	movs	r1, #69	; 0x45
    b084:	4876      	ldr	r0, [pc, #472]	; (b260 <nvs_init+0x260>)
    b086:	e7db      	b.n	b040 <nvs_init+0x40>
	if (fs->sector_count < 2) {
    b088:	89e3      	ldrh	r3, [r4, #14]
    b08a:	2b01      	cmp	r3, #1
    b08c:	d802      	bhi.n	b094 <nvs_init+0x94>
		LOG_ERR("Configuration error - sector count");
    b08e:	2145      	movs	r1, #69	; 0x45
    b090:	4874      	ldr	r0, [pc, #464]	; (b264 <nvs_init+0x264>)
    b092:	e7d5      	b.n	b040 <nvs_init+0x40>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    b094:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    b096:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    b098:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b09c:	f04f 33ff 	mov.w	r3, #4294967295
    b0a0:	f04f 32ff 	mov.w	r2, #4294967295
    b0a4:	4630      	mov	r0, r6
    b0a6:	f00e ff59 	bl	19f5c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b0aa:	2108      	movs	r1, #8
    b0ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b0ae:	f011 ff51 	bl	1cf54 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    b0b2:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b0b4:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    b0b6:	89e3      	ldrh	r3, [r4, #14]
    b0b8:	fa1f fa85 	uxth.w	sl, r5
    b0bc:	4553      	cmp	r3, sl
    b0be:	d868      	bhi.n	b192 <nvs_init+0x192>
	if (closed_sectors == fs->sector_count) {
    b0c0:	89e3      	ldrh	r3, [r4, #14]
    b0c2:	4543      	cmp	r3, r8
    b0c4:	f000 80a8 	beq.w	b218 <nvs_init+0x218>
	if (i == fs->sector_count) {
    b0c8:	459a      	cmp	sl, r3
    b0ca:	d10b      	bne.n	b0e4 <nvs_init+0xe4>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    b0cc:	9900      	ldr	r1, [sp, #0]
    b0ce:	2308      	movs	r3, #8
    b0d0:	464a      	mov	r2, r9
    b0d2:	4620      	mov	r0, r4
    b0d4:	1bc9      	subs	r1, r1, r7
    b0d6:	f011 fed1 	bl	1ce7c <nvs_flash_cmp_const>
		if (!rc) {
    b0da:	b918      	cbnz	r0, b0e4 <nvs_init+0xe4>
			nvs_sector_advance(fs, &addr);
    b0dc:	4669      	mov	r1, sp
    b0de:	89e0      	ldrh	r0, [r4, #14]
    b0e0:	f011 ff2d 	bl	1cf3e <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    b0e4:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    b0e6:	f8df 8180 	ldr.w	r8, [pc, #384]	; b268 <nvs_init+0x268>
	fs->ate_wra = addr - ate_size;
    b0ea:	1bda      	subs	r2, r3, r7
	fs->data_wra = addr & ADDR_SECT_MASK;
    b0ec:	ea03 0308 	and.w	r3, r3, r8
	fs->ate_wra = addr - ate_size;
    b0f0:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    b0f2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    b0f4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    b0f8:	4299      	cmp	r1, r3
    b0fa:	d30f      	bcc.n	b11c <nvs_init+0x11c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b0fc:	2308      	movs	r3, #8
    b0fe:	4620      	mov	r0, r4
    b100:	aa01      	add	r2, sp, #4
    b102:	f011 fe83 	bl	1ce0c <nvs_flash_rd>
		if (rc) {
    b106:	4605      	mov	r5, r0
    b108:	bb30      	cbnz	r0, b158 <nvs_init+0x158>
    b10a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    b10c:	f813 2b01 	ldrb.w	r2, [r3], #1
    b110:	4591      	cmp	r9, r2
    b112:	f040 8084 	bne.w	b21e <nvs_init+0x21e>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    b116:	3501      	adds	r5, #1
    b118:	2d08      	cmp	r5, #8
    b11a:	d1f7      	bne.n	b10c <nvs_init+0x10c>
	while (fs->ate_wra > fs->data_wra) {
    b11c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    b120:	428b      	cmp	r3, r1
    b122:	d907      	bls.n	b134 <nvs_init+0x134>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    b124:	464a      	mov	r2, r9
    b126:	4620      	mov	r0, r4
    b128:	1a5b      	subs	r3, r3, r1
    b12a:	f011 fea7 	bl	1ce7c <nvs_flash_cmp_const>
		if (rc < 0) {
    b12e:	1e05      	subs	r5, r0, #0
    b130:	db12      	blt.n	b158 <nvs_init+0x158>
		if (!rc) {
    b132:	d153      	bne.n	b1dc <nvs_init+0x1dc>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b134:	6863      	ldr	r3, [r4, #4]
    b136:	f8df 8130 	ldr.w	r8, [pc, #304]	; b268 <nvs_init+0x268>
	nvs_sector_advance(fs, &addr);
    b13a:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b13c:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    b140:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b142:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    b144:	f011 fefb 	bl	1cf3e <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    b148:	464a      	mov	r2, r9
    b14a:	4620      	mov	r0, r4
    b14c:	89a3      	ldrh	r3, [r4, #12]
    b14e:	9900      	ldr	r1, [sp, #0]
    b150:	f011 fe94 	bl	1ce7c <nvs_flash_cmp_const>
	if (rc < 0) {
    b154:	1e05      	subs	r5, r0, #0
    b156:	da47      	bge.n	b1e8 <nvs_init+0x1e8>
	return z_impl_k_mutex_unlock(mutex);
    b158:	4630      	mov	r0, r6
    b15a:	f00e ffcb 	bl	1a0f4 <z_impl_k_mutex_unlock>
	if (rc) {
    b15e:	2d00      	cmp	r5, #0
    b160:	f47f af63 	bne.w	b02a <nvs_init+0x2a>
	fs->ready = true;
    b164:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    b166:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
    b168:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    b16a:	2149      	movs	r1, #73	; 0x49
    b16c:	89a3      	ldrh	r3, [r4, #12]
    b16e:	483f      	ldr	r0, [pc, #252]	; (b26c <nvs_init+0x26c>)
    b170:	f011 fb68 	bl	1c844 <printk>
	LOG_INF("alloc wra: %d, %x",
    b174:	6862      	ldr	r2, [r4, #4]
    b176:	2149      	movs	r1, #73	; 0x49
    b178:	b293      	uxth	r3, r2
    b17a:	483d      	ldr	r0, [pc, #244]	; (b270 <nvs_init+0x270>)
    b17c:	0c12      	lsrs	r2, r2, #16
    b17e:	f011 fb61 	bl	1c844 <printk>
	LOG_INF("data wra: %d, %x",
    b182:	68a2      	ldr	r2, [r4, #8]
    b184:	2149      	movs	r1, #73	; 0x49
    b186:	b293      	uxth	r3, r2
    b188:	483a      	ldr	r0, [pc, #232]	; (b274 <nvs_init+0x274>)
    b18a:	0c12      	lsrs	r2, r2, #16
    b18c:	f011 fb5a 	bl	1c844 <printk>
	return 0;
    b190:	e74b      	b.n	b02a <nvs_init+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
    b192:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    b194:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    b196:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    b198:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b19c:	464a      	mov	r2, r9
    b19e:	2308      	movs	r3, #8
    b1a0:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    b1a2:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b1a4:	f011 fe6a 	bl	1ce7c <nvs_flash_cmp_const>
		if (rc) {
    b1a8:	b180      	cbz	r0, b1cc <nvs_init+0x1cc>
			nvs_sector_advance(fs, &addr);
    b1aa:	4669      	mov	r1, sp
    b1ac:	89e0      	ldrh	r0, [r4, #14]
    b1ae:	f011 fec6 	bl	1cf3e <nvs_sector_advance.isra.0>
			closed_sectors++;
    b1b2:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b1b6:	2308      	movs	r3, #8
    b1b8:	464a      	mov	r2, r9
    b1ba:	4620      	mov	r0, r4
    b1bc:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
    b1be:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b1c2:	f011 fe5b 	bl	1ce7c <nvs_flash_cmp_const>
			if (!rc) {
    b1c6:	2800      	cmp	r0, #0
    b1c8:	f43f af7a 	beq.w	b0c0 <nvs_init+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    b1cc:	3501      	adds	r5, #1
    b1ce:	e772      	b.n	b0b6 <nvs_init+0xb6>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b1d0:	f1ba 0f00 	cmp.w	sl, #0
    b1d4:	d039      	beq.n	b24a <nvs_init+0x24a>
				rc = -ESPIPE;
    b1d6:	f06f 051c 	mvn.w	r5, #28
    b1da:	e7bd      	b.n	b158 <nvs_init+0x158>
		fs->data_wra += fs->flash_parameters->write_block_size;
    b1dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    b1de:	68a3      	ldr	r3, [r4, #8]
    b1e0:	6812      	ldr	r2, [r2, #0]
    b1e2:	4413      	add	r3, r2
    b1e4:	60a3      	str	r3, [r4, #8]
    b1e6:	e799      	b.n	b11c <nvs_init+0x11c>
	if (rc) {
    b1e8:	d0b6      	beq.n	b158 <nvs_init+0x158>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    b1ea:	4620      	mov	r0, r4
    b1ec:	6861      	ldr	r1, [r4, #4]
    b1ee:	f011 fe6a 	bl	1cec6 <nvs_flash_erase_sector>
		if (rc) {
    b1f2:	4605      	mov	r5, r0
    b1f4:	2800      	cmp	r0, #0
    b1f6:	d1af      	bne.n	b158 <nvs_init+0x158>
		fs->ate_wra &= ADDR_SECT_MASK;
    b1f8:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    b1fa:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    b1fc:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    b200:	4403      	add	r3, r0
    b202:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    b206:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    b208:	ea00 0008 	and.w	r0, r0, r8
    b20c:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    b20e:	4620      	mov	r0, r4
    b210:	f7ff fe4e 	bl	aeb0 <nvs_gc>
    b214:	4605      	mov	r5, r0
end:
    b216:	e79f      	b.n	b158 <nvs_init+0x158>
		rc = -EDEADLK;
    b218:	f06f 0520 	mvn.w	r5, #32
    b21c:	e79c      	b.n	b158 <nvs_init+0x158>
		if (!nvs_ate_crc8_check(&last_ate)) {
    b21e:	a801      	add	r0, sp, #4
    b220:	f011 fe78 	bl	1cf14 <nvs_ate_crc8_check>
    b224:	6865      	ldr	r5, [r4, #4]
    b226:	b980      	cbnz	r0, b24a <nvs_init+0x24a>
			fs->data_wra = addr & ADDR_SECT_MASK;
    b228:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    b22a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b22e:	f8bd a008 	ldrh.w	sl, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    b232:	ea02 0208 	and.w	r2, r2, r8
			fs->data_wra += last_ate.offset;
    b236:	441a      	add	r2, r3
    b238:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b23a:	4651      	mov	r1, sl
    b23c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b23e:	f011 fe89 	bl	1cf54 <nvs_al_size.isra.0>
    b242:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b244:	42aa      	cmp	r2, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    b246:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b248:	d0c2      	beq.n	b1d0 <nvs_init+0x1d0>
		fs->ate_wra -= ate_size;
    b24a:	1bed      	subs	r5, r5, r7
    b24c:	6065      	str	r5, [r4, #4]
    b24e:	e751      	b.n	b0f4 <nvs_init+0xf4>
    b250:	00022d55 	.word	0x00022d55
    b254:	00022d76 	.word	0x00022d76
    b258:	00022d9d 	.word	0x00022d9d
    b25c:	00022dbf 	.word	0x00022dbf
    b260:	00022ddc 	.word	0x00022ddc
    b264:	00022df5 	.word	0x00022df5
    b268:	ffff0000 	.word	0xffff0000
    b26c:	00022e1d 	.word	0x00022e1d
    b270:	00022e39 	.word	0x00022e39
    b274:	00022e50 	.word	0x00022e50

0000b278 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b27c:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    b27e:	7c03      	ldrb	r3, [r0, #16]
{
    b280:	4604      	mov	r4, r0
    b282:	4689      	mov	r9, r1
    b284:	4690      	mov	r8, r2
    b286:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
    b288:	b94b      	cbnz	r3, b29e <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    b28a:	2145      	movs	r1, #69	; 0x45
    b28c:	485d      	ldr	r0, [pc, #372]	; (b404 <nvs_write+0x18c>)
    b28e:	f011 fad9 	bl	1c844 <printk>
		return -EACCES;
    b292:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    b296:	4628      	mov	r0, r5
    b298:	b009      	add	sp, #36	; 0x24
    b29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b29e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    b2a0:	2108      	movs	r1, #8
    b2a2:	4610      	mov	r0, r2
    b2a4:	f011 fe56 	bl	1cf54 <nvs_al_size.isra.0>
    b2a8:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    b2aa:	4631      	mov	r1, r6
    b2ac:	4610      	mov	r0, r2
    b2ae:	f011 fe51 	bl	1cf54 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    b2b2:	89a3      	ldrh	r3, [r4, #12]
    b2b4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    b2b8:	1a9b      	subs	r3, r3, r2
    b2ba:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    b2bc:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    b2be:	f0c0 809d 	bcc.w	b3fc <nvs_write+0x184>
    b2c2:	b11e      	cbz	r6, b2cc <nvs_write+0x54>
	    ((len > 0) && (data == NULL))) {
    b2c4:	f1b8 0f00 	cmp.w	r8, #0
    b2c8:	f000 8098 	beq.w	b3fc <nvs_write+0x184>
	wlk_addr = fs->ate_wra;
    b2cc:	6863      	ldr	r3, [r4, #4]
    b2ce:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b2d0:	4620      	mov	r0, r4
    b2d2:	aa04      	add	r2, sp, #16
    b2d4:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    b2d6:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b2da:	f011 fe45 	bl	1cf68 <nvs_prev_ate>
		if (rc) {
    b2de:	4605      	mov	r5, r0
    b2e0:	2800      	cmp	r0, #0
    b2e2:	d1d8      	bne.n	b296 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    b2e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b2e8:	454b      	cmp	r3, r9
    b2ea:	d005      	beq.n	b2f8 <nvs_write+0x80>
		if (wlk_addr == fs->ate_wra) {
    b2ec:	6862      	ldr	r2, [r4, #4]
    b2ee:	9b03      	ldr	r3, [sp, #12]
    b2f0:	429a      	cmp	r2, r3
    b2f2:	d1ed      	bne.n	b2d0 <nvs_write+0x58>
		if (len == 0) {
    b2f4:	b9de      	cbnz	r6, b32e <nvs_write+0xb6>
    b2f6:	e7ce      	b.n	b296 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    b2f8:	a804      	add	r0, sp, #16
    b2fa:	f011 fe0b 	bl	1cf14 <nvs_ate_crc8_check>
    b2fe:	2800      	cmp	r0, #0
    b300:	d1f4      	bne.n	b2ec <nvs_write+0x74>
			if (wlk_ate.len == 0U) {
    b302:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    b306:	b186      	cbz	r6, b32a <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
    b308:	42b3      	cmp	r3, r6
    b30a:	d110      	bne.n	b32e <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
    b30c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    b310:	ea4f 411b 	mov.w	r1, fp, lsr #16
    b314:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    b316:	4401      	add	r1, r0
    b318:	4633      	mov	r3, r6
    b31a:	4642      	mov	r2, r8
    b31c:	4620      	mov	r0, r4
    b31e:	f011 fd83 	bl	1ce28 <nvs_flash_block_cmp>
			if (rc <= 0) {
    b322:	2800      	cmp	r0, #0
    b324:	dc03      	bgt.n	b32e <nvs_write+0xb6>
    b326:	4605      	mov	r5, r0
    b328:	e7b5      	b.n	b296 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    b32a:	2b00      	cmp	r3, #0
    b32c:	d0b3      	beq.n	b296 <nvs_write+0x1e>
	if (data_size) {
    b32e:	bba7      	cbnz	r7, b39a <nvs_write+0x122>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    b330:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    b334:	f04f 32ff 	mov.w	r2, #4294967295
    b338:	f04f 33ff 	mov.w	r3, #4294967295
    b33c:	4650      	mov	r0, sl
    b33e:	f00e fe0d 	bl	19f5c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    b342:	f8df b0c4 	ldr.w	fp, [pc, #196]	; b408 <nvs_write+0x190>
		if (gc_count == fs->sector_count) {
    b346:	89e3      	ldrh	r3, [r4, #14]
    b348:	429d      	cmp	r5, r3
    b34a:	d054      	beq.n	b3f6 <nvs_write+0x17e>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    b34c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    b350:	18f9      	adds	r1, r7, r3
    b352:	428a      	cmp	r2, r1
    b354:	d324      	bcc.n	b3a0 <nvs_write+0x128>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    b356:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    b35a:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    b35c:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    b35e:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    b362:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    b366:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    b36a:	f011 fddf 	bl	1cf2c <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    b36e:	4632      	mov	r2, r6
    b370:	4641      	mov	r1, r8
    b372:	4620      	mov	r0, r4
    b374:	f011 fe93 	bl	1d09e <nvs_flash_data_wrt>
	if (rc) {
    b378:	4603      	mov	r3, r0
    b37a:	b938      	cbnz	r0, b38c <nvs_write+0x114>
	rc = nvs_flash_ate_wrt(fs, &entry);
    b37c:	4620      	mov	r0, r4
    b37e:	a906      	add	r1, sp, #24
    b380:	f011 fea0 	bl	1d0c4 <nvs_flash_ate_wrt>
	rc = len;
    b384:	2800      	cmp	r0, #0
    b386:	bf14      	ite	ne
    b388:	4603      	movne	r3, r0
    b38a:	4633      	moveq	r3, r6
    b38c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    b38e:	4650      	mov	r0, sl
    b390:	f00e feb0 	bl	1a0f4 <z_impl_k_mutex_unlock>
	return rc;
    b394:	9b01      	ldr	r3, [sp, #4]
    b396:	461d      	mov	r5, r3
    b398:	e77d      	b.n	b296 <nvs_write+0x1e>
		required_space = data_size + ate_size;
    b39a:	4457      	add	r7, sl
    b39c:	b2bf      	uxth	r7, r7
    b39e:	e7c7      	b.n	b330 <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b3a0:	2108      	movs	r1, #8
    b3a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b3a4:	f011 fdd6 	bl	1cf54 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    b3a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b3ac:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    b3b0:	2300      	movs	r3, #0
    b3b2:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    b3b6:	1813      	adds	r3, r2, r0
    b3b8:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    b3bc:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    b3be:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    b3c2:	441a      	add	r2, r3
    b3c4:	1a12      	subs	r2, r2, r0
    b3c6:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    b3c8:	a806      	add	r0, sp, #24
    b3ca:	f011 fdaf 	bl	1cf2c <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    b3ce:	a906      	add	r1, sp, #24
    b3d0:	4620      	mov	r0, r4
    b3d2:	f011 fe77 	bl	1d0c4 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    b3d6:	89e0      	ldrh	r0, [r4, #14]
    b3d8:	1d21      	adds	r1, r4, #4
    b3da:	f011 fdb0 	bl	1cf3e <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b3de:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    b3e0:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b3e2:	ea03 030b 	and.w	r3, r3, fp
    b3e6:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    b3e8:	f7ff fd62 	bl	aeb0 <nvs_gc>
		if (rc) {
    b3ec:	4603      	mov	r3, r0
    b3ee:	2800      	cmp	r0, #0
    b3f0:	d1cc      	bne.n	b38c <nvs_write+0x114>
		gc_count++;
    b3f2:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    b3f4:	e7a7      	b.n	b346 <nvs_write+0xce>
			rc = -ENOSPC;
    b3f6:	f06f 031b 	mvn.w	r3, #27
    b3fa:	e7c7      	b.n	b38c <nvs_write+0x114>
		return -EINVAL;
    b3fc:	f06f 0515 	mvn.w	r5, #21
    b400:	e749      	b.n	b296 <nvs_write+0x1e>
    b402:	bf00      	nop
    b404:	00022d3c 	.word	0x00022d3c
    b408:	ffff0000 	.word	0xffff0000

0000b40c <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    b40c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    b410:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    b412:	7c03      	ldrb	r3, [r0, #16]
{
    b414:	4604      	mov	r4, r0
    b416:	460f      	mov	r7, r1
    b418:	4690      	mov	r8, r2
    b41a:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
    b41e:	b943      	cbnz	r3, b432 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    b420:	4828      	ldr	r0, [pc, #160]	; (b4c4 <nvs_read_hist+0xb8>)
    b422:	2145      	movs	r1, #69	; 0x45
    b424:	f011 fa0e 	bl	1c844 <printk>
		return -EACCES;
    b428:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    b42c:	b004      	add	sp, #16
    b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b432:	2108      	movs	r1, #8
    b434:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b436:	f011 fd8d 	bl	1cf54 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    b43a:	89a3      	ldrh	r3, [r4, #12]
    b43c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    b440:	42b3      	cmp	r3, r6
    b442:	d33b      	bcc.n	b4bc <nvs_read_hist+0xb0>
	cnt_his = 0U;
    b444:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
    b448:	6863      	ldr	r3, [r4, #4]
    b44a:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b44c:	4620      	mov	r0, r4
    b44e:	aa02      	add	r2, sp, #8
    b450:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
    b452:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b454:	f011 fd88 	bl	1cf68 <nvs_prev_ate>
		if (rc) {
    b458:	2800      	cmp	r0, #0
    b45a:	d1e7      	bne.n	b42c <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    b45c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b460:	42bb      	cmp	r3, r7
    b462:	d107      	bne.n	b474 <nvs_read_hist+0x68>
    b464:	a802      	add	r0, sp, #8
    b466:	f011 fd55 	bl	1cf14 <nvs_ate_crc8_check>
    b46a:	b918      	cbnz	r0, b474 <nvs_read_hist+0x68>
			cnt_his++;
    b46c:	f10a 0a01 	add.w	sl, sl, #1
    b470:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    b474:	6862      	ldr	r2, [r4, #4]
    b476:	9b01      	ldr	r3, [sp, #4]
    b478:	429a      	cmp	r2, r3
    b47a:	d018      	beq.n	b4ae <nvs_read_hist+0xa2>
	while (cnt_his <= cnt) {
    b47c:	45ca      	cmp	sl, r9
    b47e:	d9e5      	bls.n	b44c <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    b480:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    b484:	b1bb      	cbz	r3, b4b6 <nvs_read_hist+0xaa>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    b486:	45ca      	cmp	sl, r9
    b488:	d315      	bcc.n	b4b6 <nvs_read_hist+0xaa>
	rd_addr += wlk_ate.offset;
    b48a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    b48e:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    b490:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    b492:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    b496:	bf28      	it	cs
    b498:	4633      	movcs	r3, r6
    b49a:	4642      	mov	r2, r8
    b49c:	4620      	mov	r0, r4
    b49e:	4429      	add	r1, r5
    b4a0:	f011 fcb4 	bl	1ce0c <nvs_flash_rd>
	if (rc) {
    b4a4:	2800      	cmp	r0, #0
    b4a6:	d1c1      	bne.n	b42c <nvs_read_hist+0x20>
	return wlk_ate.len;
    b4a8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b4ac:	e7be      	b.n	b42c <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    b4ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b4b2:	42bb      	cmp	r3, r7
    b4b4:	d0e4      	beq.n	b480 <nvs_read_hist+0x74>
		return -ENOENT;
    b4b6:	f06f 0001 	mvn.w	r0, #1
    b4ba:	e7b7      	b.n	b42c <nvs_read_hist+0x20>
		return -EINVAL;
    b4bc:	f06f 0015 	mvn.w	r0, #21
    b4c0:	e7b4      	b.n	b42c <nvs_read_hist+0x20>
    b4c2:	bf00      	nop
    b4c4:	00022d3c 	.word	0x00022d3c

0000b4c8 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b4c8:	4b01      	ldr	r3, [pc, #4]	; (b4d0 <virtio_set_status+0x8>)
    b4ca:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b4cc:	4770      	bx	lr
    b4ce:	bf00      	nop
    b4d0:	20070000 	.word	0x20070000

0000b4d4 <init_status_flag>:
    b4d4:	2000      	movs	r0, #0
    b4d6:	4b01      	ldr	r3, [pc, #4]	; (b4dc <init_status_flag+0x8>)
    b4d8:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b4da:	4770      	bx	lr
    b4dc:	20070000 	.word	0x20070000

0000b4e0 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b4e0:	4b01      	ldr	r3, [pc, #4]	; (b4e8 <ipm_callback_process+0x8>)
    b4e2:	6818      	ldr	r0, [r3, #0]
    b4e4:	f015 bcfd 	b.w	20ee2 <virtqueue_notification>
    b4e8:	20009710 	.word	0x20009710

0000b4ec <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b4ec:	4b0a      	ldr	r3, [pc, #40]	; (b518 <virtio_notify+0x2c>)
{
    b4ee:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b4f0:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b4f2:	2300      	movs	r3, #0
    b4f4:	6882      	ldr	r2, [r0, #8]
    b4f6:	9300      	str	r3, [sp, #0]
    b4f8:	6814      	ldr	r4, [r2, #0]
    b4fa:	4619      	mov	r1, r3
    b4fc:	461a      	mov	r2, r3
    b4fe:	47a0      	blx	r4
	if (status != 0) {
    b500:	4602      	mov	r2, r0
    b502:	b130      	cbz	r0, b512 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    b504:	2145      	movs	r1, #69	; 0x45
    b506:	4805      	ldr	r0, [pc, #20]	; (b51c <virtio_notify+0x30>)
}
    b508:	b002      	add	sp, #8
    b50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    b50e:	f011 b999 	b.w	1c844 <printk>
}
    b512:	b002      	add	sp, #8
    b514:	bd10      	pop	{r4, pc}
    b516:	bf00      	nop
    b518:	20009700 	.word	0x20009700
    b51c:	00022e6d 	.word	0x00022e6d

0000b520 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b520:	4907      	ldr	r1, [pc, #28]	; (b540 <ipm_callback+0x20>)
    b522:	e8d1 3fef 	ldaex	r3, [r1]
    b526:	f043 0201 	orr.w	r2, r3, #1
    b52a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b52e:	2800      	cmp	r0, #0
    b530:	d1f7      	bne.n	b522 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b532:	07db      	lsls	r3, r3, #31
    b534:	d403      	bmi.n	b53e <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    b536:	4803      	ldr	r0, [pc, #12]	; (b544 <ipm_callback+0x24>)
    b538:	3908      	subs	r1, #8
    b53a:	f015 be93 	b.w	21264 <k_queue_append>
}
    b53e:	4770      	bx	lr
    b540:	2000970c 	.word	0x2000970c
    b544:	20008700 	.word	0x20008700

0000b548 <rpmsg_backend_init>:
{
    b548:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b54a:	4b47      	ldr	r3, [pc, #284]	; (b668 <rpmsg_backend_init+0x120>)
{
    b54c:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b54e:	ac02      	add	r4, sp, #8
{
    b550:	4606      	mov	r6, r0
    b552:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b554:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b558:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b55c:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b560:	f04f 33ff 	mov.w	r3, #4294967295
    b564:	4941      	ldr	r1, [pc, #260]	; (b66c <rpmsg_backend_init+0x124>)
    b566:	4842      	ldr	r0, [pc, #264]	; (b670 <rpmsg_backend_init+0x128>)
    b568:	f010 f9e8 	bl	1b93c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b56c:	4941      	ldr	r1, [pc, #260]	; (b674 <rpmsg_backend_init+0x12c>)
    b56e:	4842      	ldr	r0, [pc, #264]	; (b678 <rpmsg_backend_init+0x130>)
    b570:	f015 feea 	bl	21348 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b574:	2200      	movs	r2, #0
    b576:	4b41      	ldr	r3, [pc, #260]	; (b67c <rpmsg_backend_init+0x134>)
    b578:	4941      	ldr	r1, [pc, #260]	; (b680 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b57a:	4620      	mov	r0, r4
    b57c:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b580:	601a      	str	r2, [r3, #0]
    b582:	f00d feb1 	bl	192e8 <metal_init>
	if (err) {
    b586:	4604      	mov	r4, r0
    b588:	b138      	cbz	r0, b59a <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b58a:	2145      	movs	r1, #69	; 0x45
    b58c:	4602      	mov	r2, r0
    b58e:	483d      	ldr	r0, [pc, #244]	; (b684 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b590:	f011 f958 	bl	1c844 <printk>
}
    b594:	4620      	mov	r0, r4
    b596:	b005      	add	sp, #20
    b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b59a:	483b      	ldr	r0, [pc, #236]	; (b688 <rpmsg_backend_init+0x140>)
    b59c:	f00d fe84 	bl	192a8 <metal_register_generic_device>
	if (err) {
    b5a0:	4604      	mov	r4, r0
    b5a2:	b118      	cbz	r0, b5ac <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b5a4:	4602      	mov	r2, r0
    b5a6:	2145      	movs	r1, #69	; 0x45
    b5a8:	4838      	ldr	r0, [pc, #224]	; (b68c <rpmsg_backend_init+0x144>)
    b5aa:	e7f1      	b.n	b590 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b5ac:	4938      	ldr	r1, [pc, #224]	; (b690 <rpmsg_backend_init+0x148>)
    b5ae:	4839      	ldr	r0, [pc, #228]	; (b694 <rpmsg_backend_init+0x14c>)
    b5b0:	aa01      	add	r2, sp, #4
    b5b2:	f015 fa16 	bl	209e2 <metal_device_open>
	if (err) {
    b5b6:	4604      	mov	r4, r0
    b5b8:	b118      	cbz	r0, b5c2 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    b5ba:	4602      	mov	r2, r0
    b5bc:	2145      	movs	r1, #69	; 0x45
    b5be:	4836      	ldr	r0, [pc, #216]	; (b698 <rpmsg_backend_init+0x150>)
    b5c0:	e7e6      	b.n	b590 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    b5c2:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b5c4:	689a      	ldr	r2, [r3, #8]
    b5c6:	b92a      	cbnz	r2, b5d4 <rpmsg_backend_init+0x8c>
    b5c8:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    b5ca:	2145      	movs	r1, #69	; 0x45
    b5cc:	4833      	ldr	r0, [pc, #204]	; (b69c <rpmsg_backend_init+0x154>)
    b5ce:	f011 f939 	bl	1c844 <printk>
		return err;
    b5d2:	e7df      	b.n	b594 <rpmsg_backend_init+0x4c>
    b5d4:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    b5d6:	6033      	str	r3, [r6, #0]
	if (!*io) {
    b5d8:	2b00      	cmp	r3, #0
    b5da:	d0f6      	beq.n	b5ca <rpmsg_backend_init+0x82>
    b5dc:	4830      	ldr	r0, [pc, #192]	; (b6a0 <rpmsg_backend_init+0x158>)
    b5de:	f00e f99b 	bl	19918 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    b5e2:	4f30      	ldr	r7, [pc, #192]	; (b6a4 <rpmsg_backend_init+0x15c>)
    b5e4:	6038      	str	r0, [r7, #0]
    b5e6:	4830      	ldr	r0, [pc, #192]	; (b6a8 <rpmsg_backend_init+0x160>)
    b5e8:	f00e f996 	bl	19918 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    b5ec:	683a      	ldr	r2, [r7, #0]
    b5ee:	b932      	cbnz	r2, b5fe <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    b5f0:	2145      	movs	r1, #69	; 0x45
    b5f2:	482e      	ldr	r0, [pc, #184]	; (b6ac <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    b5f4:	f011 f926 	bl	1c844 <printk>
		return -ENODEV;
    b5f8:	f06f 0412 	mvn.w	r4, #18
    b5fc:	e7ca      	b.n	b594 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    b5fe:	b910      	cbnz	r0, b606 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    b600:	2145      	movs	r1, #69	; 0x45
    b602:	482b      	ldr	r0, [pc, #172]	; (b6b0 <rpmsg_backend_init+0x168>)
    b604:	e7f6      	b.n	b5f4 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    b606:	6883      	ldr	r3, [r0, #8]
    b608:	4622      	mov	r2, r4
    b60a:	685b      	ldr	r3, [r3, #4]
    b60c:	4929      	ldr	r1, [pc, #164]	; (b6b4 <rpmsg_backend_init+0x16c>)
    b60e:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    b610:	f011 fd79 	bl	1d106 <virtqueue_allocate.constprop.0>
    b614:	4f28      	ldr	r7, [pc, #160]	; (b6b8 <rpmsg_backend_init+0x170>)
    b616:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    b618:	b930      	cbnz	r0, b628 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    b61a:	2145      	movs	r1, #69	; 0x45
    b61c:	4827      	ldr	r0, [pc, #156]	; (b6bc <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b61e:	f011 f911 	bl	1c844 <printk>
		return -ENOMEM;
    b622:	f06f 040b 	mvn.w	r4, #11
    b626:	e7b5      	b.n	b594 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    b628:	f011 fd6d 	bl	1d106 <virtqueue_allocate.constprop.0>
    b62c:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    b62e:	b910      	cbnz	r0, b636 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b630:	2145      	movs	r1, #69	; 0x45
    b632:	4823      	ldr	r0, [pc, #140]	; (b6c0 <rpmsg_backend_init+0x178>)
    b634:	e7f3      	b.n	b61e <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    b636:	6832      	ldr	r2, [r6, #0]
    b638:	4b22      	ldr	r3, [pc, #136]	; (b6c4 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    b63a:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    b63c:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b63e:	4a22      	ldr	r2, [pc, #136]	; (b6c8 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    b640:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b642:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b644:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    b646:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b648:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    b64a:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    b64c:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    b64e:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b650:	4e1e      	ldr	r6, [pc, #120]	; (b6cc <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    b652:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    b654:	4a1e      	ldr	r2, [pc, #120]	; (b6d0 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    b656:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b658:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    b65a:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    b65c:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    b65e:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    b660:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    b662:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    b664:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    b666:	e795      	b.n	b594 <rpmsg_backend_init+0x4c>
    b668:	00021a2c 	.word	0x00021a2c
    b66c:	2000b770 	.word	0x2000b770
    b670:	20008700 	.word	0x20008700
    b674:	00022e90 	.word	0x00022e90
    b678:	20008720 	.word	0x20008720
    b67c:	20009704 	.word	0x20009704
    b680:	0000b4e1 	.word	0x0000b4e1
    b684:	00022e9b 	.word	0x00022e9b
    b688:	20008200 	.word	0x20008200
    b68c:	00022ec3 	.word	0x00022ec3
    b690:	00022ef3 	.word	0x00022ef3
    b694:	00022efd 	.word	0x00022efd
    b698:	00022f05 	.word	0x00022f05
    b69c:	00022f27 	.word	0x00022f27
    b6a0:	00022f58 	.word	0x00022f58
    b6a4:	20009700 	.word	0x20009700
    b6a8:	00022f5e 	.word	0x00022f5e
    b6ac:	00022f64 	.word	0x00022f64
    b6b0:	00022f8c 	.word	0x00022f8c
    b6b4:	0000b521 	.word	0x0000b521
    b6b8:	20009710 	.word	0x20009710
    b6bc:	00022fb4 	.word	0x00022fb4
    b6c0:	00022fe2 	.word	0x00022fe2
    b6c4:	200081d0 	.word	0x200081d0
    b6c8:	2007fc00 	.word	0x2007fc00
    b6cc:	2007f800 	.word	0x2007f800
    b6d0:	00021c6c 	.word	0x00021c6c

0000b6d4 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b6d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b6d8:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b6da:	4e1b      	ldr	r6, [pc, #108]	; (b748 <ns_bind_cb+0x74>)
{
    b6dc:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b6de:	6831      	ldr	r1, [r6, #0]
    b6e0:	4628      	mov	r0, r5
{
    b6e2:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b6e4:	f012 fd38 	bl	1e158 <strcmp>
    b6e8:	b168      	cbz	r0, b706 <ns_bind_cb+0x32>
    b6ea:	4628      	mov	r0, r5
    b6ec:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b6ee:	f012 fd33 	bl	1e158 <strcmp>
    b6f2:	b138      	cbz	r0, b704 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b6f4:	462a      	mov	r2, r5
    b6f6:	2145      	movs	r1, #69	; 0x45
    b6f8:	4814      	ldr	r0, [pc, #80]	; (b74c <ns_bind_cb+0x78>)
}
    b6fa:	b004      	add	sp, #16
    b6fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b700:	f011 b8a0 	b.w	1c844 <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b704:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b706:	244c      	movs	r4, #76	; 0x4c
    b708:	4344      	muls	r4, r0
    b70a:	4b11      	ldr	r3, [pc, #68]	; (b750 <ns_bind_cb+0x7c>)
    b70c:	f104 0008 	add.w	r0, r4, #8
    b710:	9302      	str	r3, [sp, #8]
    b712:	4434      	add	r4, r6
    b714:	6863      	ldr	r3, [r4, #4]
    b716:	462a      	mov	r2, r5
    b718:	e9cd 8300 	strd	r8, r3, [sp]
    b71c:	4639      	mov	r1, r7
    b71e:	f04f 33ff 	mov.w	r3, #4294967295
    b722:	4430      	add	r0, r6
    b724:	f00d feac 	bl	19480 <rpmsg_create_ept>
			if (err != 0) {
    b728:	4603      	mov	r3, r0
    b72a:	b138      	cbz	r0, b73c <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b72c:	462a      	mov	r2, r5
    b72e:	2145      	movs	r1, #69	; 0x45
    b730:	4808      	ldr	r0, [pc, #32]	; (b754 <ns_bind_cb+0x80>)
}
    b732:	b004      	add	sp, #16
    b734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    b738:	f011 b884 	b.w	1c844 <printk>
				endpoints[i].bound = true;
    b73c:	2301      	movs	r3, #1
    b73e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    b742:	b004      	add	sp, #16
    b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b748:	20009718 	.word	0x20009718
    b74c:	0002301e 	.word	0x0002301e
    b750:	0001d121 	.word	0x0001d121
    b754:	0002304d 	.word	0x0002304d

0000b758 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    b758:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    b75a:	4d13      	ldr	r5, [pc, #76]	; (b7a8 <rpmsg_service_init+0x50>)
    b75c:	4913      	ldr	r1, [pc, #76]	; (b7ac <rpmsg_service_init+0x54>)
    b75e:	4628      	mov	r0, r5
    b760:	f7ff fef2 	bl	b548 <rpmsg_backend_init>
	if (err) {
    b764:	4604      	mov	r4, r0
    b766:	b138      	cbz	r0, b778 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    b768:	2145      	movs	r1, #69	; 0x45
    b76a:	4602      	mov	r2, r0
    b76c:	4810      	ldr	r0, [pc, #64]	; (b7b0 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b76e:	f011 f869 	bl	1c844 <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    b772:	4620      	mov	r0, r4
    b774:	b003      	add	sp, #12
    b776:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    b778:	4c0e      	ldr	r4, [pc, #56]	; (b7b4 <rpmsg_service_init+0x5c>)
    b77a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    b77e:	4620      	mov	r0, r4
    b780:	490d      	ldr	r1, [pc, #52]	; (b7b8 <rpmsg_service_init+0x60>)
    b782:	f015 fd38 	bl	211f6 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    b786:	9400      	str	r4, [sp, #0]
    b788:	682b      	ldr	r3, [r5, #0]
    b78a:	4a0c      	ldr	r2, [pc, #48]	; (b7bc <rpmsg_service_init+0x64>)
    b78c:	4907      	ldr	r1, [pc, #28]	; (b7ac <rpmsg_service_init+0x54>)
    b78e:	480c      	ldr	r0, [pc, #48]	; (b7c0 <rpmsg_service_init+0x68>)
    b790:	f00d ffa2 	bl	196d8 <rpmsg_init_vdev>
	if (err) {
    b794:	4604      	mov	r4, r0
    b796:	b118      	cbz	r0, b7a0 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b798:	4602      	mov	r2, r0
    b79a:	2145      	movs	r1, #69	; 0x45
    b79c:	4809      	ldr	r0, [pc, #36]	; (b7c4 <rpmsg_service_init+0x6c>)
    b79e:	e7e6      	b.n	b76e <rpmsg_service_init+0x16>
	ep_crt_started = true;
    b7a0:	2201      	movs	r2, #1
    b7a2:	4b09      	ldr	r3, [pc, #36]	; (b7c8 <rpmsg_service_init+0x70>)
    b7a4:	701a      	strb	r2, [r3, #0]
	return 0;
    b7a6:	e7e4      	b.n	b772 <rpmsg_service_init+0x1a>
    b7a8:	200097b0 	.word	0x200097b0
    b7ac:	200087b0 	.word	0x200087b0
    b7b0:	00023083 	.word	0x00023083
    b7b4:	20009844 	.word	0x20009844
    b7b8:	20070400 	.word	0x20070400
    b7bc:	0000b6d5 	.word	0x0000b6d5
    b7c0:	200097b4 	.word	0x200097b4
    b7c4:	000230b0 	.word	0x000230b0
    b7c8:	2000b231 	.word	0x2000b231

0000b7cc <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    b7cc:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    b7ce:	4b0d      	ldr	r3, [pc, #52]	; (b804 <rpmsg_service_register_endpoint+0x38>)
{
    b7d0:	4602      	mov	r2, r0
	if (ep_crt_started) {
    b7d2:	781b      	ldrb	r3, [r3, #0]
    b7d4:	b993      	cbnz	r3, b7fc <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    b7d6:	4c0c      	ldr	r4, [pc, #48]	; (b808 <rpmsg_service_register_endpoint+0x3c>)
    b7d8:	6820      	ldr	r0, [r4, #0]
    b7da:	b148      	cbz	r0, b7f0 <rpmsg_service_register_endpoint+0x24>
    b7dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b7de:	b133      	cbz	r3, b7ee <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    b7e0:	480a      	ldr	r0, [pc, #40]	; (b80c <rpmsg_service_register_endpoint+0x40>)
    b7e2:	2145      	movs	r1, #69	; 0x45
    b7e4:	f011 f82e 	bl	1c844 <printk>

	return -ENOMEM;
    b7e8:	f06f 000b 	mvn.w	r0, #11
}
    b7ec:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b7ee:	2001      	movs	r0, #1
			endpoints[i].name = name;
    b7f0:	234c      	movs	r3, #76	; 0x4c
    b7f2:	4343      	muls	r3, r0
    b7f4:	18e5      	adds	r5, r4, r3
    b7f6:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    b7f8:	6069      	str	r1, [r5, #4]
			return i;
    b7fa:	e7f7      	b.n	b7ec <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    b7fc:	f06f 0043 	mvn.w	r0, #67	; 0x43
    b800:	e7f4      	b.n	b7ec <rpmsg_service_register_endpoint+0x20>
    b802:	bf00      	nop
    b804:	2000b231 	.word	0x2000b231
    b808:	20009718 	.word	0x20009718
    b80c:	000230cf 	.word	0x000230cf

0000b810 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    b810:	224c      	movs	r2, #76	; 0x4c
    b812:	4b03      	ldr	r3, [pc, #12]	; (b820 <rpmsg_service_endpoint_is_bound+0x10>)
    b814:	fb02 3300 	mla	r3, r2, r0, r3
    b818:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b81c:	4770      	bx	lr
    b81e:	bf00      	nop
    b820:	20009718 	.word	0x20009718

0000b824 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    b824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b826:	244c      	movs	r4, #76	; 0x4c
    b828:	460b      	mov	r3, r1
    b82a:	2101      	movs	r1, #1
    b82c:	4344      	muls	r4, r0
    b82e:	e9cd 2100 	strd	r2, r1, [sp]
    b832:	4d05      	ldr	r5, [pc, #20]	; (b848 <rpmsg_service_send+0x24>)
    b834:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    b836:	3408      	adds	r4, #8
    b838:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    b83c:	1928      	adds	r0, r5, r4
    b83e:	f00d fe0d 	bl	1945c <rpmsg_send_offchannel_raw>
}
    b842:	b003      	add	sp, #12
    b844:	bd30      	pop	{r4, r5, pc}
    b846:	bf00      	nop
    b848:	20009718 	.word	0x20009718

0000b84c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    b84c:	4b08      	ldr	r3, [pc, #32]	; (b870 <get_flash_area_from_id+0x24>)
{
    b84e:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    b850:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    b852:	4b08      	ldr	r3, [pc, #32]	; (b874 <get_flash_area_from_id+0x28>)
{
    b854:	4601      	mov	r1, r0
    b856:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    b858:	2300      	movs	r3, #0
    b85a:	429c      	cmp	r4, r3
    b85c:	dc01      	bgt.n	b862 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    b85e:	2000      	movs	r0, #0
}
    b860:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    b862:	4610      	mov	r0, r2
    b864:	7805      	ldrb	r5, [r0, #0]
    b866:	3210      	adds	r2, #16
    b868:	428d      	cmp	r5, r1
    b86a:	d0f9      	beq.n	b860 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    b86c:	3301      	adds	r3, #1
    b86e:	e7f4      	b.n	b85a <get_flash_area_from_id+0xe>
    b870:	00021cc0 	.word	0x00021cc0
    b874:	20008258 	.word	0x20008258

0000b878 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    b878:	4b08      	ldr	r3, [pc, #32]	; (b89c <flash_area_open+0x24>)
{
    b87a:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    b87c:	681b      	ldr	r3, [r3, #0]
{
    b87e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    b880:	b12b      	cbz	r3, b88e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    b882:	f7ff ffe3 	bl	b84c <get_flash_area_from_id>
	if (area == NULL) {
    b886:	b128      	cbz	r0, b894 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    b888:	6020      	str	r0, [r4, #0]
	return 0;
    b88a:	2000      	movs	r0, #0
}
    b88c:	bd10      	pop	{r4, pc}
		return -EACCES;
    b88e:	f06f 000c 	mvn.w	r0, #12
    b892:	e7fb      	b.n	b88c <flash_area_open+0x14>
		return -ENOENT;
    b894:	f06f 0001 	mvn.w	r0, #1
    b898:	e7f8      	b.n	b88c <flash_area_open+0x14>
    b89a:	bf00      	nop
    b89c:	20008258 	.word	0x20008258

0000b8a0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    b8a0:	b530      	push	{r4, r5, lr}
    b8a2:	b089      	sub	sp, #36	; 0x24
    b8a4:	460c      	mov	r4, r1
    b8a6:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    b8a8:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    b8aa:	f7ff ffcf 	bl	b84c <get_flash_area_from_id>
	if (fa == NULL) {
    b8ae:	b1b8      	cbz	r0, b8e0 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    b8b0:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    b8b2:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    b8b4:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    b8b6:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    b8b8:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    b8ba:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    b8be:	2300      	movs	r3, #0
	cb_data->status = 0;
    b8c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    b8c4:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    b8c6:	f011 fc2d 	bl	1d124 <device_get_binding>
	if (flash_dev == NULL) {
    b8ca:	b160      	cbz	r0, b8e6 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    b8cc:	4907      	ldr	r1, [pc, #28]	; (b8ec <flash_area_get_sectors+0x4c>)
    b8ce:	aa01      	add	r2, sp, #4
    b8d0:	f014 ff08 	bl	206e4 <flash_page_foreach>
	if (cb_data->status == 0) {
    b8d4:	9807      	ldr	r0, [sp, #28]
    b8d6:	b908      	cbnz	r0, b8dc <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    b8d8:	9b05      	ldr	r3, [sp, #20]
    b8da:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    b8dc:	b009      	add	sp, #36	; 0x24
    b8de:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    b8e0:	f06f 0015 	mvn.w	r0, #21
    b8e4:	e7fa      	b.n	b8dc <flash_area_get_sectors+0x3c>
		return -ENODEV;
    b8e6:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    b8ea:	e7f7      	b.n	b8dc <flash_area_get_sectors+0x3c>
    b8ec:	0001d129 	.word	0x0001d129

0000b8f0 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    b8f0:	4b10      	ldr	r3, [pc, #64]	; (b934 <settings_save_one+0x44>)
{
    b8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    b8f6:	681c      	ldr	r4, [r3, #0]
{
    b8f8:	4605      	mov	r5, r0
    b8fa:	460e      	mov	r6, r1
    b8fc:	4617      	mov	r7, r2
	if (!cs) {
    b8fe:	b1ac      	cbz	r4, b92c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    b900:	f04f 32ff 	mov.w	r2, #4294967295
    b904:	f04f 33ff 	mov.w	r3, #4294967295
    b908:	480b      	ldr	r0, [pc, #44]	; (b938 <settings_save_one+0x48>)
    b90a:	f00e fb27 	bl	19f5c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    b90e:	6863      	ldr	r3, [r4, #4]
    b910:	4632      	mov	r2, r6
    b912:	f8d3 8008 	ldr.w	r8, [r3, #8]
    b916:	4629      	mov	r1, r5
    b918:	463b      	mov	r3, r7
    b91a:	4620      	mov	r0, r4
    b91c:	47c0      	blx	r8
    b91e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b920:	4805      	ldr	r0, [pc, #20]	; (b938 <settings_save_one+0x48>)
    b922:	f00e fbe7 	bl	1a0f4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    b926:	4620      	mov	r0, r4
    b928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    b92c:	f06f 0401 	mvn.w	r4, #1
    b930:	e7f9      	b.n	b926 <settings_save_one+0x36>
    b932:	bf00      	nop
    b934:	20009858 	.word	0x20009858
    b938:	2000854c 	.word	0x2000854c

0000b93c <settings_src_register>:
	parent->next = child;
    b93c:	2300      	movs	r3, #0
    b93e:	6003      	str	r3, [r0, #0]
	return list->tail;
    b940:	4b04      	ldr	r3, [pc, #16]	; (b954 <settings_src_register+0x18>)
    b942:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    b944:	b912      	cbnz	r2, b94c <settings_src_register+0x10>
	list->head = node;
    b946:	e9c3 0000 	strd	r0, r0, [r3]
}
    b94a:	4770      	bx	lr
	parent->next = child;
    b94c:	6010      	str	r0, [r2, #0]
	list->tail = node;
    b94e:	6058      	str	r0, [r3, #4]
}
    b950:	4770      	bx	lr
    b952:	bf00      	nop
    b954:	20009850 	.word	0x20009850

0000b958 <settings_dst_register>:
	settings_save_dst = cs;
    b958:	4b01      	ldr	r3, [pc, #4]	; (b960 <settings_dst_register+0x8>)
    b95a:	6018      	str	r0, [r3, #0]
}
    b95c:	4770      	bx	lr
    b95e:	bf00      	nop
    b960:	20009858 	.word	0x20009858

0000b964 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    b964:	2300      	movs	r3, #0
{
    b966:	b530      	push	{r4, r5, lr}
    b968:	b085      	sub	sp, #20
    b96a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    b96c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    b970:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b972:	f04f 33ff 	mov.w	r3, #4294967295
    b976:	f04f 32ff 	mov.w	r2, #4294967295
    b97a:	480b      	ldr	r0, [pc, #44]	; (b9a8 <settings_load_subtree+0x44>)
    b97c:	f00e faee 	bl	19f5c <z_impl_k_mutex_lock>
	return list->head;
    b980:	4b0a      	ldr	r3, [pc, #40]	; (b9ac <settings_load_subtree+0x48>)
    b982:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b984:	b134      	cbz	r4, b994 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    b986:	6863      	ldr	r3, [r4, #4]
    b988:	4620      	mov	r0, r4
    b98a:	681b      	ldr	r3, [r3, #0]
    b98c:	a901      	add	r1, sp, #4
    b98e:	4798      	blx	r3
	return node->next;
    b990:	6824      	ldr	r4, [r4, #0]
    b992:	e7f7      	b.n	b984 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    b994:	4628      	mov	r0, r5
    b996:	f000 f8d3 	bl	bb40 <settings_commit_subtree>
    b99a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b99c:	4802      	ldr	r0, [pc, #8]	; (b9a8 <settings_load_subtree+0x44>)
    b99e:	f00e fba9 	bl	1a0f4 <z_impl_k_mutex_unlock>
}
    b9a2:	4620      	mov	r0, r4
    b9a4:	b005      	add	sp, #20
    b9a6:	bd30      	pop	{r4, r5, pc}
    b9a8:	2000854c 	.word	0x2000854c
    b9ac:	20009850 	.word	0x20009850

0000b9b0 <settings_load_subtree_direct>:
{
    b9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    b9b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
    b9b6:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    b9b8:	f04f 33ff 	mov.w	r3, #4294967295
    b9bc:	f04f 32ff 	mov.w	r2, #4294967295
    b9c0:	4809      	ldr	r0, [pc, #36]	; (b9e8 <settings_load_subtree_direct+0x38>)
    b9c2:	f00e facb 	bl	19f5c <z_impl_k_mutex_lock>
	return list->head;
    b9c6:	4b09      	ldr	r3, [pc, #36]	; (b9ec <settings_load_subtree_direct+0x3c>)
    b9c8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b9ca:	b134      	cbz	r4, b9da <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    b9cc:	6863      	ldr	r3, [r4, #4]
    b9ce:	4620      	mov	r0, r4
    b9d0:	681b      	ldr	r3, [r3, #0]
    b9d2:	a901      	add	r1, sp, #4
    b9d4:	4798      	blx	r3
	return node->next;
    b9d6:	6824      	ldr	r4, [r4, #0]
    b9d8:	e7f7      	b.n	b9ca <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    b9da:	4803      	ldr	r0, [pc, #12]	; (b9e8 <settings_load_subtree_direct+0x38>)
    b9dc:	f00e fb8a 	bl	1a0f4 <z_impl_k_mutex_unlock>
}
    b9e0:	2000      	movs	r0, #0
    b9e2:	b004      	add	sp, #16
    b9e4:	bd10      	pop	{r4, pc}
    b9e6:	bf00      	nop
    b9e8:	2000854c 	.word	0x2000854c
    b9ec:	20009850 	.word	0x20009850

0000b9f0 <settings_store_init>:
	list->head = NULL;
    b9f0:	2200      	movs	r2, #0
    b9f2:	4b02      	ldr	r3, [pc, #8]	; (b9fc <settings_store_init+0xc>)
	list->tail = NULL;
    b9f4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    b9f8:	4770      	bx	lr
    b9fa:	bf00      	nop
    b9fc:	20009850 	.word	0x20009850

0000ba00 <settings_init>:
	list->head = NULL;
    ba00:	2200      	movs	r2, #0
    ba02:	4b02      	ldr	r3, [pc, #8]	; (ba0c <settings_init+0xc>)
	list->tail = NULL;
    ba04:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    ba08:	f7ff bff2 	b.w	b9f0 <settings_store_init>
    ba0c:	2000985c 	.word	0x2000985c

0000ba10 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    ba10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ba14:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    ba16:	460e      	mov	r6, r1
    ba18:	b109      	cbz	r1, ba1e <settings_parse_and_lookup+0xe>
		*next = NULL;
    ba1a:	2300      	movs	r3, #0
    ba1c:	600b      	str	r3, [r1, #0]
    ba1e:	2500      	movs	r5, #0
    ba20:	4c23      	ldr	r4, [pc, #140]	; (bab0 <settings_parse_and_lookup+0xa0>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ba22:	f8df 8090 	ldr.w	r8, [pc, #144]	; bab4 <settings_parse_and_lookup+0xa4>
    ba26:	f8df 9090 	ldr.w	r9, [pc, #144]	; bab8 <settings_parse_and_lookup+0xa8>
    ba2a:	4544      	cmp	r4, r8
    ba2c:	d908      	bls.n	ba40 <settings_parse_and_lookup+0x30>
    ba2e:	4649      	mov	r1, r9
    ba30:	4822      	ldr	r0, [pc, #136]	; (babc <settings_parse_and_lookup+0xac>)
    ba32:	2294      	movs	r2, #148	; 0x94
    ba34:	f010 ff06 	bl	1c844 <printk>
    ba38:	2194      	movs	r1, #148	; 0x94
    ba3a:	4648      	mov	r0, r9
    ba3c:	f011 f9a8 	bl	1cd90 <assert_post_action>
    ba40:	4544      	cmp	r4, r8
    ba42:	d308      	bcc.n	ba56 <settings_parse_and_lookup+0x46>
	return list->head;
    ba44:	4b1e      	ldr	r3, [pc, #120]	; (bac0 <settings_parse_and_lookup+0xb0>)
    ba46:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ba48:	b10c      	cbz	r4, ba4e <settings_parse_and_lookup+0x3e>
    ba4a:	3c14      	subs	r4, #20
    ba4c:	b9c4      	cbnz	r4, ba80 <settings_parse_and_lookup+0x70>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    ba4e:	4628      	mov	r0, r5
    ba50:	b003      	add	sp, #12
    ba52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ba56:	4638      	mov	r0, r7
    ba58:	6821      	ldr	r1, [r4, #0]
    ba5a:	aa01      	add	r2, sp, #4
    ba5c:	f011 fb89 	bl	1d172 <settings_name_steq>
    ba60:	b160      	cbz	r0, ba7c <settings_parse_and_lookup+0x6c>
		if (!bestmatch) {
    ba62:	b925      	cbnz	r5, ba6e <settings_parse_and_lookup+0x5e>
			if (next) {
    ba64:	b10e      	cbz	r6, ba6a <settings_parse_and_lookup+0x5a>
				*next = tmpnext;
    ba66:	9b01      	ldr	r3, [sp, #4]
    ba68:	6033      	str	r3, [r6, #0]
    ba6a:	4625      	mov	r5, r4
    ba6c:	e006      	b.n	ba7c <settings_parse_and_lookup+0x6c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ba6e:	2200      	movs	r2, #0
    ba70:	6829      	ldr	r1, [r5, #0]
    ba72:	6820      	ldr	r0, [r4, #0]
    ba74:	f011 fb7d 	bl	1d172 <settings_name_steq>
    ba78:	2800      	cmp	r0, #0
    ba7a:	d1f3      	bne.n	ba64 <settings_parse_and_lookup+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ba7c:	3414      	adds	r4, #20
    ba7e:	e7d4      	b.n	ba2a <settings_parse_and_lookup+0x1a>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ba80:	4638      	mov	r0, r7
    ba82:	6821      	ldr	r1, [r4, #0]
    ba84:	aa01      	add	r2, sp, #4
    ba86:	f011 fb74 	bl	1d172 <settings_name_steq>
    ba8a:	b160      	cbz	r0, baa6 <settings_parse_and_lookup+0x96>
		if (!bestmatch) {
    ba8c:	b925      	cbnz	r5, ba98 <settings_parse_and_lookup+0x88>
			if (next) {
    ba8e:	b10e      	cbz	r6, ba94 <settings_parse_and_lookup+0x84>
				*next = tmpnext;
    ba90:	9b01      	ldr	r3, [sp, #4]
    ba92:	6033      	str	r3, [r6, #0]
    ba94:	4625      	mov	r5, r4
    ba96:	e006      	b.n	baa6 <settings_parse_and_lookup+0x96>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ba98:	2200      	movs	r2, #0
    ba9a:	6829      	ldr	r1, [r5, #0]
    ba9c:	6820      	ldr	r0, [r4, #0]
    ba9e:	f011 fb68 	bl	1d172 <settings_name_steq>
    baa2:	2800      	cmp	r0, #0
    baa4:	d1f3      	bne.n	ba8e <settings_parse_and_lookup+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    baa6:	f114 0f14 	cmn.w	r4, #20
    baaa:	d0d0      	beq.n	ba4e <settings_parse_and_lookup+0x3e>
	return node->next;
    baac:	6964      	ldr	r4, [r4, #20]
    baae:	e7cb      	b.n	ba48 <settings_parse_and_lookup+0x38>
    bab0:	00021884 	.word	0x00021884
    bab4:	000218fc 	.word	0x000218fc
    bab8:	0002311b 	.word	0x0002311b
    babc:	00022c66 	.word	0x00022c66
    bac0:	2000985c 	.word	0x2000985c

0000bac4 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    bac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bac8:	b085      	sub	sp, #20
    baca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    bace:	4604      	mov	r4, r0
    bad0:	460d      	mov	r5, r1
    bad2:	4616      	mov	r6, r2
    bad4:	461f      	mov	r7, r3
	int rc;
	const char *name_key = name;
    bad6:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
    bad8:	f1b8 0f00 	cmp.w	r8, #0
    badc:	d018      	beq.n	bb10 <settings_call_set_handler+0x4c>
    bade:	f8d8 1000 	ldr.w	r1, [r8]
    bae2:	b181      	cbz	r1, bb06 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    bae4:	aa03      	add	r2, sp, #12
    bae6:	f011 fb44 	bl	1d172 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    baea:	b960      	cbnz	r0, bb06 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    baec:	2000      	movs	r0, #0
    baee:	e007      	b.n	bb00 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    baf0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    baf4:	4632      	mov	r2, r6
    baf6:	9300      	str	r3, [sp, #0]
    baf8:	4629      	mov	r1, r5
    bafa:	463b      	mov	r3, r7
    bafc:	9803      	ldr	r0, [sp, #12]
    bafe:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    bb00:	b005      	add	sp, #20
    bb02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    bb06:	f8d8 9004 	ldr.w	r9, [r8, #4]
    bb0a:	f1b9 0f00 	cmp.w	r9, #0
    bb0e:	d1ef      	bne.n	baf0 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    bb10:	4620      	mov	r0, r4
    bb12:	a903      	add	r1, sp, #12
    bb14:	f7ff ff7c 	bl	ba10 <settings_parse_and_lookup>
		if (!ch) {
    bb18:	2800      	cmp	r0, #0
    bb1a:	d0e7      	beq.n	baec <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    bb1c:	463b      	mov	r3, r7
    bb1e:	f8d0 8008 	ldr.w	r8, [r0, #8]
    bb22:	4632      	mov	r2, r6
    bb24:	4629      	mov	r1, r5
    bb26:	9803      	ldr	r0, [sp, #12]
    bb28:	47c0      	blx	r8
		if (rc != 0) {
    bb2a:	4603      	mov	r3, r0
    bb2c:	2800      	cmp	r0, #0
    bb2e:	d0dd      	beq.n	baec <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
    bb30:	4622      	mov	r2, r4
    bb32:	2145      	movs	r1, #69	; 0x45
    bb34:	4801      	ldr	r0, [pc, #4]	; (bb3c <settings_call_set_handler+0x78>)
    bb36:	f010 fe85 	bl	1c844 <printk>
    bb3a:	e7d7      	b.n	baec <settings_call_set_handler+0x28>
    bb3c:	0002314d 	.word	0x0002314d

0000bb40 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    bb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb44:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    bb46:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bb48:	4c1f      	ldr	r4, [pc, #124]	; (bbc8 <settings_commit_subtree+0x88>)
    bb4a:	4f20      	ldr	r7, [pc, #128]	; (bbcc <settings_commit_subtree+0x8c>)
    bb4c:	f8df 8080 	ldr.w	r8, [pc, #128]	; bbd0 <settings_commit_subtree+0x90>
    bb50:	42bc      	cmp	r4, r7
    bb52:	d908      	bls.n	bb66 <settings_commit_subtree+0x26>
    bb54:	4641      	mov	r1, r8
    bb56:	481f      	ldr	r0, [pc, #124]	; (bbd4 <settings_commit_subtree+0x94>)
    bb58:	22f4      	movs	r2, #244	; 0xf4
    bb5a:	f010 fe73 	bl	1c844 <printk>
    bb5e:	21f4      	movs	r1, #244	; 0xf4
    bb60:	4640      	mov	r0, r8
    bb62:	f011 f915 	bl	1cd90 <assert_post_action>
    bb66:	42bc      	cmp	r4, r7
    bb68:	d307      	bcc.n	bb7a <settings_commit_subtree+0x3a>
	return list->head;
    bb6a:	4b1b      	ldr	r3, [pc, #108]	; (bbd8 <settings_commit_subtree+0x98>)
    bb6c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    bb6e:	b10c      	cbz	r4, bb74 <settings_commit_subtree+0x34>
    bb70:	3c14      	subs	r4, #20
    bb72:	b9a4      	cbnz	r4, bb9e <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    bb74:	4628      	mov	r0, r5
    bb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bb7a:	b91e      	cbnz	r6, bb84 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    bb7c:	68e3      	ldr	r3, [r4, #12]
    bb7e:	b94b      	cbnz	r3, bb94 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bb80:	3414      	adds	r4, #20
    bb82:	e7e5      	b.n	bb50 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bb84:	2200      	movs	r2, #0
    bb86:	4631      	mov	r1, r6
    bb88:	6820      	ldr	r0, [r4, #0]
    bb8a:	f011 faf2 	bl	1d172 <settings_name_steq>
    bb8e:	2800      	cmp	r0, #0
    bb90:	d1f4      	bne.n	bb7c <settings_commit_subtree+0x3c>
    bb92:	e7f5      	b.n	bb80 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    bb94:	4798      	blx	r3
				rc = rc2;
    bb96:	2d00      	cmp	r5, #0
    bb98:	bf08      	it	eq
    bb9a:	4605      	moveq	r5, r0
    bb9c:	e7f0      	b.n	bb80 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bb9e:	b936      	cbnz	r6, bbae <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    bba0:	68e3      	ldr	r3, [r4, #12]
    bba2:	b963      	cbnz	r3, bbbe <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bba4:	f114 0f14 	cmn.w	r4, #20
    bba8:	d0e4      	beq.n	bb74 <settings_commit_subtree+0x34>
	return node->next;
    bbaa:	6964      	ldr	r4, [r4, #20]
    bbac:	e7df      	b.n	bb6e <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bbae:	2200      	movs	r2, #0
    bbb0:	4631      	mov	r1, r6
    bbb2:	6820      	ldr	r0, [r4, #0]
    bbb4:	f011 fadd 	bl	1d172 <settings_name_steq>
    bbb8:	2800      	cmp	r0, #0
    bbba:	d1f1      	bne.n	bba0 <settings_commit_subtree+0x60>
    bbbc:	e7f2      	b.n	bba4 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    bbbe:	4798      	blx	r3
				rc = rc2;
    bbc0:	2d00      	cmp	r5, #0
    bbc2:	bf08      	it	eq
    bbc4:	4605      	moveq	r5, r0
    bbc6:	e7ed      	b.n	bba4 <settings_commit_subtree+0x64>
    bbc8:	00021884 	.word	0x00021884
    bbcc:	000218fc 	.word	0x000218fc
    bbd0:	0002311b 	.word	0x0002311b
    bbd4:	00022c66 	.word	0x00022c66
    bbd8:	2000985c 	.word	0x2000985c

0000bbdc <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    bbdc:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    bbde:	4c06      	ldr	r4, [pc, #24]	; (bbf8 <settings_subsys_init+0x1c>)
    bbe0:	7823      	ldrb	r3, [r4, #0]
    bbe2:	b93b      	cbnz	r3, bbf4 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    bbe4:	f7ff ff0c 	bl	ba00 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    bbe8:	f000 f864 	bl	bcb4 <settings_backend_init>

	if (!err) {
    bbec:	b908      	cbnz	r0, bbf2 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    bbee:	2301      	movs	r3, #1
    bbf0:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    bbf2:	bd10      	pop	{r4, pc}
		return 0;
    bbf4:	2000      	movs	r0, #0
    bbf6:	e7fc      	b.n	bbf2 <settings_subsys_init+0x16>
    bbf8:	2000b232 	.word	0x2000b232

0000bbfc <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    bbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc00:	4680      	mov	r8, r0
    bc02:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    bc04:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    bc06:	f8df a0a8 	ldr.w	sl, [pc, #168]	; bcb0 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    bc0a:	3401      	adds	r4, #1
{
    bc0c:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    bc0e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    bc10:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    bc14:	1e65      	subs	r5, r4, #1
    bc16:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    bc18:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bc1c:	d045      	beq.n	bcaa <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    bc1e:	234a      	movs	r3, #74	; 0x4a
    bc20:	4629      	mov	r1, r5
    bc22:	aa05      	add	r2, sp, #20
    bc24:	4630      	mov	r0, r6
    bc26:	f011 fa62 	bl	1d0ee <nvs_read>
    bc2a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    bc2e:	343f      	adds	r4, #63	; 0x3f
    bc30:	b2a4      	uxth	r4, r4
    bc32:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    bc34:	4621      	mov	r1, r4
    bc36:	2301      	movs	r3, #1
    bc38:	4630      	mov	r0, r6
    bc3a:	f10d 020b 	add.w	r2, sp, #11
    bc3e:	f011 fa56 	bl	1d0ee <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    bc42:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    bc44:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    bc46:	dc03      	bgt.n	bc50 <settings_nvs_load+0x54>
    bc48:	2800      	cmp	r0, #0
    bc4a:	dc03      	bgt.n	bc54 <settings_nvs_load+0x58>
{
    bc4c:	462c      	mov	r4, r5
    bc4e:	e7e1      	b.n	bc14 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    bc50:	2800      	cmp	r0, #0
    bc52:	dc16      	bgt.n	bc82 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    bc54:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    bc58:	42ab      	cmp	r3, r5
    bc5a:	d109      	bne.n	bc70 <settings_nvs_load+0x74>
				cf->last_name_id--;
    bc5c:	4642      	mov	r2, r8
    bc5e:	1e6b      	subs	r3, r5, #1
    bc60:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    bc64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    bc68:	2302      	movs	r3, #2
    bc6a:	4630      	mov	r0, r6
    bc6c:	f7ff fb04 	bl	b278 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    bc70:	4629      	mov	r1, r5
    bc72:	4630      	mov	r0, r6
    bc74:	f011 fa37 	bl	1d0e6 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    bc78:	4621      	mov	r1, r4
    bc7a:	4630      	mov	r0, r6
    bc7c:	f011 fa33 	bl	1d0e6 <nvs_delete>
			continue;
    bc80:	e7e4      	b.n	bc4c <settings_nvs_load+0x50>
		name[rc1] = '\0';
    bc82:	ab18      	add	r3, sp, #96	; 0x60
    bc84:	441f      	add	r7, r3
    bc86:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    bc88:	4652      	mov	r2, sl
		name[rc1] = '\0';
    bc8a:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    bc8e:	a805      	add	r0, sp, #20
    bc90:	f8cd 9000 	str.w	r9, [sp]
    bc94:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    bc96:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    bc98:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    bc9c:	f7ff ff12 	bl	bac4 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    bca0:	2800      	cmp	r0, #0
    bca2:	d0d3      	beq.n	bc4c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    bca4:	b018      	add	sp, #96	; 0x60
    bca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bcaa:	2000      	movs	r0, #0
	return ret;
    bcac:	e7fa      	b.n	bca4 <settings_nvs_load+0xa8>
    bcae:	bf00      	nop
    bcb0:	0001d1e5 	.word	0x0001d1e5

0000bcb4 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    bcb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    bcb6:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    bcb8:	4669      	mov	r1, sp
    bcba:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
    bcbc:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    bcbe:	f7ff fddb 	bl	b878 <flash_area_open>
	if (rc) {
    bcc2:	4604      	mov	r4, r0
    bcc4:	2800      	cmp	r0, #0
    bcc6:	d136      	bne.n	bd36 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    bcc8:	2002      	movs	r0, #2
    bcca:	aa02      	add	r2, sp, #8
    bccc:	a901      	add	r1, sp, #4
    bcce:	f7ff fde7 	bl	b8a0 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    bcd2:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    bcd6:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    bcd8:	d02d      	beq.n	bd36 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    bcda:	b138      	cbz	r0, bcec <settings_backend_init+0x38>
    bcdc:	340c      	adds	r4, #12
    bcde:	d005      	beq.n	bcec <settings_backend_init+0x38>
		k_panic();
    bce0:	4040      	eors	r0, r0
    bce2:	f380 8811 	msr	BASEPRI, r0
    bce6:	f04f 0004 	mov.w	r0, #4
    bcea:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    bcec:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    bcee:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    bcf2:	d223      	bcs.n	bd3c <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    bcf4:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    bcf6:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    bcf8:	9a00      	ldr	r2, [sp, #0]
    bcfa:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
    bcfc:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    bcfe:	4285      	cmp	r5, r0
    bd00:	b29c      	uxth	r4, r3
    bd02:	d303      	bcc.n	bd0c <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    bd04:	3301      	adds	r3, #1
    bd06:	2b08      	cmp	r3, #8
    bd08:	d1f8      	bne.n	bcfc <settings_backend_init+0x48>
    bd0a:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    bd0c:	4d0d      	ldr	r5, [pc, #52]	; (bd44 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    bd0e:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    bd10:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    bd12:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    bd14:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    bd16:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    bd18:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    bd1a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    bd1c:	f011 faf9 	bl	1d312 <settings_nvs_backend_init>
	if (rc) {
    bd20:	4604      	mov	r4, r0
    bd22:	b940      	cbnz	r0, bd36 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    bd24:	4e08      	ldr	r6, [pc, #32]	; (bd48 <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    bd26:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    bd28:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    bd2a:	f7ff fe07 	bl	b93c <settings_src_register>
	settings_dst_register(&cf->cf_store);
    bd2e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    bd30:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    bd32:	f7ff fe11 	bl	b958 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    bd36:	4620      	mov	r0, r4
    bd38:	b004      	add	sp, #16
    bd3a:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    bd3c:	f06f 0424 	mvn.w	r4, #36	; 0x24
    bd40:	e7f9      	b.n	bd36 <settings_backend_init+0x82>
    bd42:	bf00      	nop
    bd44:	20009864 	.word	0x20009864
    bd48:	2000825c 	.word	0x2000825c

0000bd4c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    bd4c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    bd4e:	4c04      	ldr	r4, [pc, #16]	; (bd60 <rtt_console_init+0x14>)
    bd50:	4620      	mov	r0, r4
    bd52:	f7fe f8b1 	bl	9eb8 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    bd56:	4620      	mov	r0, r4
    bd58:	f002 fa20 	bl	e19c <__stdout_hook_install>

	return 0;
}
    bd5c:	2000      	movs	r0, #0
    bd5e:	bd10      	pop	{r4, pc}
    bd60:	0000bd65 	.word	0x0000bd65

0000bd64 <rtt_console_out>:
{
    bd64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bd68:	4604      	mov	r4, r0
	char c = (char)character;
    bd6a:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    bd6c:	f8df 8058 	ldr.w	r8, [pc, #88]	; bdc8 <rtt_console_out+0x64>
    bd70:	4e16      	ldr	r6, [pc, #88]	; (bdcc <rtt_console_out+0x68>)
    bd72:	f88d 0007 	strb.w	r0, [sp, #7]
    bd76:	f04f 33ff 	mov.w	r3, #4294967295
    bd7a:	f04f 32ff 	mov.w	r2, #4294967295
    bd7e:	4640      	mov	r0, r8
    bd80:	f00e f8ec 	bl	19f5c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    bd84:	2201      	movs	r2, #1
    bd86:	f10d 0107 	add.w	r1, sp, #7
    bd8a:	2000      	movs	r0, #0
    bd8c:	f001 faa4 	bl	d2d8 <SEGGER_RTT_WriteNoLock>
    bd90:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    bd92:	4640      	mov	r0, r8
    bd94:	f00e f9ae 	bl	1a0f4 <z_impl_k_mutex_unlock>
		if (cnt) {
    bd98:	b12f      	cbz	r7, bda6 <rtt_console_out+0x42>
			host_present = true;
    bd9a:	2301      	movs	r3, #1
    bd9c:	7033      	strb	r3, [r6, #0]
}
    bd9e:	4620      	mov	r0, r4
    bda0:	b002      	add	sp, #8
    bda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    bda6:	7833      	ldrb	r3, [r6, #0]
    bda8:	2b00      	cmp	r3, #0
    bdaa:	d0f8      	beq.n	bd9e <rtt_console_out+0x3a>
			if (max_cnt) {
    bdac:	3d01      	subs	r5, #1
    bdae:	d008      	beq.n	bdc2 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    bdb0:	f015 fac0 	bl	21334 <k_is_in_isr>
    bdb4:	2800      	cmp	r0, #0
    bdb6:	d1de      	bne.n	bd76 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    bdb8:	2100      	movs	r1, #0
    bdba:	2042      	movs	r0, #66	; 0x42
    bdbc:	f00f fb4c 	bl	1b458 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bdc0:	e7d9      	b.n	bd76 <rtt_console_out+0x12>
				host_present = false;
    bdc2:	7035      	strb	r5, [r6, #0]
    bdc4:	e7eb      	b.n	bd9e <rtt_console_out+0x3a>
    bdc6:	bf00      	nop
    bdc8:	20008524 	.word	0x20008524
    bdcc:	2000b233 	.word	0x2000b233

0000bdd0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    bdd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bdd2:	2340      	movs	r3, #64	; 0x40
{
    bdd4:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bdd6:	490a      	ldr	r1, [pc, #40]	; (be00 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bdd8:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    bdda:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bddc:	1149      	asrs	r1, r1, #5
{
    bdde:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bde0:	4623      	mov	r3, r4
    bde2:	4a08      	ldr	r2, [pc, #32]	; (be04 <onoff_start+0x34>)
    bde4:	4808      	ldr	r0, [pc, #32]	; (be08 <onoff_start+0x38>)
    bde6:	f011 fac3 	bl	1d370 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    bdea:	1e01      	subs	r1, r0, #0
    bdec:	da05      	bge.n	bdfa <onoff_start+0x2a>
		notify(mgr, err);
    bdee:	4628      	mov	r0, r5
    bdf0:	4623      	mov	r3, r4
	}
}
    bdf2:	b003      	add	sp, #12
    bdf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    bdf8:	4718      	bx	r3
}
    bdfa:	b003      	add	sp, #12
    bdfc:	bd30      	pop	{r4, r5, pc}
    bdfe:	bf00      	nop
    be00:	200098b4 	.word	0x200098b4
    be04:	0001d3e3 	.word	0x0001d3e3
    be08:	20008434 	.word	0x20008434

0000be0c <get_status>:
{
    be0c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    be0e:	b2cc      	uxtb	r4, r1
    be10:	2c03      	cmp	r4, #3
{
    be12:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    be14:	d908      	bls.n	be28 <get_status+0x1c>
    be16:	4909      	ldr	r1, [pc, #36]	; (be3c <get_status+0x30>)
    be18:	4809      	ldr	r0, [pc, #36]	; (be40 <get_status+0x34>)
    be1a:	227e      	movs	r2, #126	; 0x7e
    be1c:	f010 fd12 	bl	1c844 <printk>
    be20:	217e      	movs	r1, #126	; 0x7e
    be22:	4806      	ldr	r0, [pc, #24]	; (be3c <get_status+0x30>)
    be24:	f010 ffb4 	bl	1cd90 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    be28:	230c      	movs	r3, #12
    be2a:	68e9      	ldr	r1, [r5, #12]
    be2c:	fb04 1403 	mla	r4, r4, r3, r1
    be30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    be34:	f000 0007 	and.w	r0, r0, #7
    be38:	bd38      	pop	{r3, r4, r5, pc}
    be3a:	bf00      	nop
    be3c:	0002317d 	.word	0x0002317d
    be40:	00022c66 	.word	0x00022c66

0000be44 <stop>:
{
    be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be46:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    be48:	2c03      	cmp	r4, #3
{
    be4a:	4605      	mov	r5, r0
    be4c:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    be4e:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    be50:	d90a      	bls.n	be68 <stop+0x24>
    be52:	4919      	ldr	r1, [pc, #100]	; (beb8 <stop+0x74>)
    be54:	4819      	ldr	r0, [pc, #100]	; (bebc <stop+0x78>)
    be56:	f240 1253 	movw	r2, #339	; 0x153
    be5a:	f010 fcf3 	bl	1c844 <printk>
    be5e:	f240 1153 	movw	r1, #339	; 0x153
    be62:	4815      	ldr	r0, [pc, #84]	; (beb8 <stop+0x74>)
    be64:	f010 ff94 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
    be68:	f04f 0320 	mov.w	r3, #32
    be6c:	f3ef 8111 	mrs	r1, BASEPRI
    be70:	f383 8811 	msr	BASEPRI, r3
    be74:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    be78:	220c      	movs	r2, #12
    be7a:	fb02 6304 	mla	r3, r2, r4, r6
    be7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    be82:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    be86:	d001      	beq.n	be8c <stop+0x48>
    be88:	429f      	cmp	r7, r3
    be8a:	d112      	bne.n	beb2 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    be8c:	2301      	movs	r3, #1
	int err = 0;
    be8e:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    be90:	fb02 6604 	mla	r6, r2, r4, r6
    be94:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    be98:	f381 8811 	msr	BASEPRI, r1
    be9c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bea0:	b930      	cbnz	r0, beb0 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    bea2:	230c      	movs	r3, #12
    bea4:	6869      	ldr	r1, [r5, #4]
    bea6:	fb03 1404 	mla	r4, r3, r4, r1
    beaa:	6863      	ldr	r3, [r4, #4]
    beac:	4798      	blx	r3
	return 0;
    beae:	2000      	movs	r0, #0
}
    beb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    beb2:	f04f 30ff 	mov.w	r0, #4294967295
    beb6:	e7ef      	b.n	be98 <stop+0x54>
    beb8:	0002317d 	.word	0x0002317d
    bebc:	00022c66 	.word	0x00022c66

0000bec0 <onoff_stop>:
{
    bec0:	b570      	push	{r4, r5, r6, lr}
    bec2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bec4:	4906      	ldr	r1, [pc, #24]	; (bee0 <onoff_stop+0x20>)
{
    bec6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    bec8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    beca:	1149      	asrs	r1, r1, #5
    becc:	2240      	movs	r2, #64	; 0x40
    bece:	4805      	ldr	r0, [pc, #20]	; (bee4 <onoff_stop+0x24>)
    bed0:	f7ff ffb8 	bl	be44 <stop>
	notify(mgr, res);
    bed4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bed6:	4601      	mov	r1, r0
	notify(mgr, res);
    bed8:	4620      	mov	r0, r4
}
    beda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    bede:	4718      	bx	r3
    bee0:	200098b4 	.word	0x200098b4
    bee4:	20008434 	.word	0x20008434

0000bee8 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    bee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    beec:	2200      	movs	r2, #0
    beee:	2101      	movs	r1, #1
{
    bef0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bef2:	2005      	movs	r0, #5
    bef4:	f001 fc0c 	bl	d710 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    bef8:	2005      	movs	r0, #5
    befa:	f001 fbeb 	bl	d6d4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    befe:	4811      	ldr	r0, [pc, #68]	; (bf44 <clk_init+0x5c>)
    bf00:	f00c fe16 	bl	18b30 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    bf04:	4b10      	ldr	r3, [pc, #64]	; (bf48 <clk_init+0x60>)
    bf06:	4298      	cmp	r0, r3
    bf08:	d119      	bne.n	bf3e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    bf0a:	f00c fe31 	bl	18b70 <nrfx_clock_enable>
    bf0e:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bf10:	f04f 080c 	mov.w	r8, #12
    bf14:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bf16:	f8df 9034 	ldr.w	r9, [pc, #52]	; bf4c <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    bf1a:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bf1c:	4649      	mov	r1, r9
    bf1e:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    bf22:	f010 fcea 	bl	1c8fa <onoff_manager_init>
		if (err < 0) {
    bf26:	2800      	cmp	r0, #0
    bf28:	db07      	blt.n	bf3a <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bf2a:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    bf2e:	3401      	adds	r4, #1
    bf30:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bf32:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    bf36:	d1f0      	bne.n	bf1a <clk_init+0x32>
	}

	return 0;
    bf38:	2000      	movs	r0, #0
}
    bf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    bf3e:	f06f 0004 	mvn.w	r0, #4
    bf42:	e7fa      	b.n	bf3a <clk_init+0x52>
    bf44:	0000bf89 	.word	0x0000bf89
    bf48:	0bad0000 	.word	0x0bad0000
    bf4c:	00021d08 	.word	0x00021d08

0000bf50 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    bf50:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    bf52:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    bf54:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    bf56:	434b      	muls	r3, r1
    bf58:	4809      	ldr	r0, [pc, #36]	; (bf80 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    bf5a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    bf5c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    bf5e:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    bf60:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bf64:	4418      	add	r0, r3
	sub_data->cb = NULL;
    bf66:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bf6a:	f011 f9ee 	bl	1d34a <set_on_state>
	if (callback) {
    bf6e:	b12d      	cbz	r5, bf7c <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    bf70:	4632      	mov	r2, r6
    bf72:	462b      	mov	r3, r5
}
    bf74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    bf78:	4802      	ldr	r0, [pc, #8]	; (bf84 <clkstarted_handle.constprop.0+0x34>)
    bf7a:	4718      	bx	r3
}
    bf7c:	bd70      	pop	{r4, r5, r6, pc}
    bf7e:	bf00      	nop
    bf80:	200098b4 	.word	0x200098b4
    bf84:	20008434 	.word	0x20008434

0000bf88 <clock_event_handler>:
{
    bf88:	b508      	push	{r3, lr}
    bf8a:	2805      	cmp	r0, #5
    bf8c:	d821      	bhi.n	bfd2 <clock_event_handler+0x4a>
    bf8e:	e8df f000 	tbb	[pc, r0]
    bf92:	1103      	.short	0x1103
    bf94:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    bf98:	4b13      	ldr	r3, [pc, #76]	; (bfe8 <clock_event_handler+0x60>)
    bf9a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    bf9e:	f010 0007 	ands.w	r0, r0, #7
    bfa2:	d11f      	bne.n	bfe4 <clock_event_handler+0x5c>
}
    bfa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    bfa8:	f7ff bfd2 	b.w	bf50 <clkstarted_handle.constprop.0>
    bfac:	2002      	movs	r0, #2
    bfae:	e7f9      	b.n	bfa4 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    bfb0:	2003      	movs	r0, #3
    bfb2:	e7f7      	b.n	bfa4 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    bfb4:	2001      	movs	r0, #1
    bfb6:	e7f5      	b.n	bfa4 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    bfb8:	490c      	ldr	r1, [pc, #48]	; (bfec <clock_event_handler+0x64>)
    bfba:	f240 2266 	movw	r2, #614	; 0x266
    bfbe:	480c      	ldr	r0, [pc, #48]	; (bff0 <clock_event_handler+0x68>)
    bfc0:	f010 fc40 	bl	1c844 <printk>
    bfc4:	f240 2166 	movw	r1, #614	; 0x266
}
    bfc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    bfcc:	4807      	ldr	r0, [pc, #28]	; (bfec <clock_event_handler+0x64>)
    bfce:	f010 bedf 	b.w	1cd90 <assert_post_action>
    bfd2:	4906      	ldr	r1, [pc, #24]	; (bfec <clock_event_handler+0x64>)
    bfd4:	f240 226a 	movw	r2, #618	; 0x26a
    bfd8:	4805      	ldr	r0, [pc, #20]	; (bff0 <clock_event_handler+0x68>)
    bfda:	f010 fc33 	bl	1c844 <printk>
    bfde:	f240 216a 	movw	r1, #618	; 0x26a
    bfe2:	e7f1      	b.n	bfc8 <clock_event_handler+0x40>
}
    bfe4:	bd08      	pop	{r3, pc}
    bfe6:	bf00      	nop
    bfe8:	200098b4 	.word	0x200098b4
    bfec:	0002317d 	.word	0x0002317d
    bff0:	00022c66 	.word	0x00022c66

0000bff4 <generic_hfclk_start>:
{
    bff4:	b508      	push	{r3, lr}
	__asm__ volatile(
    bff6:	f04f 0320 	mov.w	r3, #32
    bffa:	f3ef 8111 	mrs	r1, BASEPRI
    bffe:	f383 8811 	msr	BASEPRI, r3
    c002:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    c006:	4a11      	ldr	r2, [pc, #68]	; (c04c <generic_hfclk_start+0x58>)
    c008:	6813      	ldr	r3, [r2, #0]
    c00a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    c00e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    c012:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    c014:	d00b      	beq.n	c02e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c016:	4a0e      	ldr	r2, [pc, #56]	; (c050 <generic_hfclk_start+0x5c>)
    c018:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c01c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    c020:	f013 0301 	ands.w	r3, r3, #1
    c024:	d003      	beq.n	c02e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    c026:	480b      	ldr	r0, [pc, #44]	; (c054 <generic_hfclk_start+0x60>)
    c028:	f011 f98f 	bl	1d34a <set_on_state>
			already_started = true;
    c02c:	2301      	movs	r3, #1
	__asm__ volatile(
    c02e:	f381 8811 	msr	BASEPRI, r1
    c032:	f3bf 8f6f 	isb	sy
	if (already_started) {
    c036:	b123      	cbz	r3, c042 <generic_hfclk_start+0x4e>
}
    c038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    c03c:	2000      	movs	r0, #0
    c03e:	f7ff bf87 	b.w	bf50 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c042:	2001      	movs	r0, #1
}
    c044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c048:	f00c bdb6 	b.w	18bb8 <nrfx_clock_start>
    c04c:	20009964 	.word	0x20009964
    c050:	40005000 	.word	0x40005000
    c054:	2000993c 	.word	0x2000993c

0000c058 <api_blocking_start>:
{
    c058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c05a:	2200      	movs	r2, #0
    c05c:	2301      	movs	r3, #1
    c05e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c062:	ab04      	add	r3, sp, #16
    c064:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c068:	4a09      	ldr	r2, [pc, #36]	; (c090 <api_blocking_start+0x38>)
    c06a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c06c:	f8cd d000 	str.w	sp, [sp]
    c070:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c074:	f011 f9ae 	bl	1d3d4 <api_start>
	if (err < 0) {
    c078:	2800      	cmp	r0, #0
    c07a:	db05      	blt.n	c088 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    c07c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c080:	2300      	movs	r3, #0
    c082:	4668      	mov	r0, sp
    c084:	f00f fa5a 	bl	1b53c <z_impl_k_sem_take>
}
    c088:	b007      	add	sp, #28
    c08a:	f85d fb04 	ldr.w	pc, [sp], #4
    c08e:	bf00      	nop
    c090:	0001d419 	.word	0x0001d419

0000c094 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c094:	4b07      	ldr	r3, [pc, #28]	; (c0b4 <generic_hfclk_stop+0x20>)
    c096:	e8d3 2fef 	ldaex	r2, [r3]
    c09a:	f022 0102 	bic.w	r1, r2, #2
    c09e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    c0a2:	2800      	cmp	r0, #0
    c0a4:	d1f7      	bne.n	c096 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    c0a6:	07d3      	lsls	r3, r2, #31
    c0a8:	d402      	bmi.n	c0b0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c0aa:	2001      	movs	r0, #1
    c0ac:	f00c bdee 	b.w	18c8c <nrfx_clock_stop>
}
    c0b0:	4770      	bx	lr
    c0b2:	bf00      	nop
    c0b4:	20009964 	.word	0x20009964

0000c0b8 <z_nrf_clock_control_lf_on>:
{
    c0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c0bc:	2201      	movs	r2, #1
    c0be:	4606      	mov	r6, r0
    c0c0:	4942      	ldr	r1, [pc, #264]	; (c1cc <z_nrf_clock_control_lf_on+0x114>)
    c0c2:	e8d1 3fef 	ldaex	r3, [r1]
    c0c6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c0ca:	2800      	cmp	r0, #0
    c0cc:	d1f9      	bne.n	c0c2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    c0ce:	b99b      	cbnz	r3, c0f8 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    c0d0:	493f      	ldr	r1, [pc, #252]	; (c1d0 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    c0d2:	4840      	ldr	r0, [pc, #256]	; (c1d4 <z_nrf_clock_control_lf_on+0x11c>)
    c0d4:	604b      	str	r3, [r1, #4]
    c0d6:	60cb      	str	r3, [r1, #12]
    c0d8:	608a      	str	r2, [r1, #8]
    c0da:	f7fe f8f5 	bl	a2c8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    c0de:	2800      	cmp	r0, #0
    c0e0:	da0a      	bge.n	c0f8 <z_nrf_clock_control_lf_on+0x40>
    c0e2:	493d      	ldr	r1, [pc, #244]	; (c1d8 <z_nrf_clock_control_lf_on+0x120>)
    c0e4:	483d      	ldr	r0, [pc, #244]	; (c1dc <z_nrf_clock_control_lf_on+0x124>)
    c0e6:	f240 2226 	movw	r2, #550	; 0x226
    c0ea:	f010 fbab 	bl	1c844 <printk>
    c0ee:	f240 2126 	movw	r1, #550	; 0x226
    c0f2:	4839      	ldr	r0, [pc, #228]	; (c1d8 <z_nrf_clock_control_lf_on+0x120>)
    c0f4:	f010 fe4c 	bl	1cd90 <assert_post_action>
	switch (start_mode) {
    c0f8:	b386      	cbz	r6, c15c <z_nrf_clock_control_lf_on+0xa4>
    c0fa:	1e73      	subs	r3, r6, #1
    c0fc:	2b01      	cmp	r3, #1
    c0fe:	d852      	bhi.n	c1a6 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c100:	2e01      	cmp	r6, #1
    c102:	d106      	bne.n	c112 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c104:	4b36      	ldr	r3, [pc, #216]	; (c1e0 <z_nrf_clock_control_lf_on+0x128>)
    c106:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    c10a:	f003 0303 	and.w	r3, r3, #3
    c10e:	2b02      	cmp	r3, #2
    c110:	d024      	beq.n	c15c <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    c112:	f015 f90f 	bl	21334 <k_is_in_isr>
    c116:	4604      	mov	r4, r0
    c118:	b918      	cbnz	r0, c122 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    c11a:	4b32      	ldr	r3, [pc, #200]	; (c1e4 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    c11c:	781b      	ldrb	r3, [r3, #0]
    c11e:	2b00      	cmp	r3, #0
    c120:	d14e      	bne.n	c1c0 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    c122:	f04f 0320 	mov.w	r3, #32
    c126:	f3ef 8711 	mrs	r7, BASEPRI
    c12a:	f383 8811 	msr	BASEPRI, r3
    c12e:	f3bf 8f6f 	isb	sy
    c132:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c134:	4d2a      	ldr	r5, [pc, #168]	; (c1e0 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c136:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c1e8 <z_nrf_clock_control_lf_on+0x130>
    c13a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c13e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    c142:	03d2      	lsls	r2, r2, #15
    c144:	d50c      	bpl.n	c160 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c146:	f003 0303 	and.w	r3, r3, #3
    c14a:	2b02      	cmp	r3, #2
    c14c:	d001      	beq.n	c152 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    c14e:	2e01      	cmp	r6, #1
    c150:	d106      	bne.n	c160 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    c152:	b324      	cbz	r4, c19e <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    c154:	f387 8811 	msr	BASEPRI, r7
    c158:	f3bf 8f6f 	isb	sy
}
    c15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    c160:	b1c4      	cbz	r4, c194 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    c162:	4638      	mov	r0, r7
    c164:	f001 fb44 	bl	d7f0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    c168:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    c16c:	b2db      	uxtb	r3, r3
    c16e:	2b01      	cmp	r3, #1
    c170:	d1e3      	bne.n	c13a <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c172:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    c176:	2a00      	cmp	r2, #0
    c178:	d0df      	beq.n	c13a <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c17a:	2200      	movs	r2, #0
    c17c:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    c180:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    c184:	2202      	movs	r2, #2
    c186:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    c18a:	2220      	movs	r2, #32
    c18c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c190:	60ab      	str	r3, [r5, #8]
}
    c192:	e7d2      	b.n	c13a <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    c194:	2100      	movs	r1, #0
    c196:	2021      	movs	r0, #33	; 0x21
    c198:	f00f f95e 	bl	1b458 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    c19c:	e7e4      	b.n	c168 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    c19e:	2302      	movs	r3, #2
    c1a0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    c1a4:	e7da      	b.n	c15c <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    c1a6:	490c      	ldr	r1, [pc, #48]	; (c1d8 <z_nrf_clock_control_lf_on+0x120>)
    c1a8:	480c      	ldr	r0, [pc, #48]	; (c1dc <z_nrf_clock_control_lf_on+0x124>)
    c1aa:	f44f 720e 	mov.w	r2, #568	; 0x238
    c1ae:	f010 fb49 	bl	1c844 <printk>
}
    c1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    c1b6:	f44f 710e 	mov.w	r1, #568	; 0x238
    c1ba:	4807      	ldr	r0, [pc, #28]	; (c1d8 <z_nrf_clock_control_lf_on+0x120>)
    c1bc:	f010 bde8 	b.w	1cd90 <assert_post_action>
    p_reg->INTENCLR = mask;
    c1c0:	2202      	movs	r2, #2
    c1c2:	4b07      	ldr	r3, [pc, #28]	; (c1e0 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    c1c4:	4607      	mov	r7, r0
    c1c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c1ca:	e7b3      	b.n	c134 <z_nrf_clock_control_lf_on+0x7c>
    c1cc:	20009968 	.word	0x20009968
    c1d0:	200098a4 	.word	0x200098a4
    c1d4:	200098d4 	.word	0x200098d4
    c1d8:	0002317d 	.word	0x0002317d
    c1dc:	00022c66 	.word	0x00022c66
    c1e0:	40005000 	.word	0x40005000
    c1e4:	2000b76b 	.word	0x2000b76b
    c1e8:	e000e100 	.word	0xe000e100

0000c1ec <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    c1ec:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    c1ee:	f000 f905 	bl	c3fc <bt_rpmsg_platform_init>
	if (err < 0) {
    c1f2:	1e04      	subs	r4, r0, #0
    c1f4:	da06      	bge.n	c204 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    c1f6:	4622      	mov	r2, r4
    c1f8:	2145      	movs	r1, #69	; 0x45
    c1fa:	4807      	ldr	r0, [pc, #28]	; (c218 <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c1fc:	f010 fb22 	bl	1c844 <printk>
	}

	return err;
}
    c200:	4620      	mov	r0, r4
    c202:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    c204:	4805      	ldr	r0, [pc, #20]	; (c21c <bt_rpmsg_init+0x30>)
    c206:	f003 fffd 	bl	10204 <bt_hci_driver_register>
	if (err < 0) {
    c20a:	1e04      	subs	r4, r0, #0
    c20c:	daf8      	bge.n	c200 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c20e:	4622      	mov	r2, r4
    c210:	2145      	movs	r1, #69	; 0x45
    c212:	4803      	ldr	r0, [pc, #12]	; (c220 <bt_rpmsg_init+0x34>)
    c214:	e7f2      	b.n	c1fc <bt_rpmsg_init+0x10>
    c216:	bf00      	nop
    c218:	000231ef 	.word	0x000231ef
    c21c:	00021d14 	.word	0x00021d14
    c220:	0002321b 	.word	0x0002321b

0000c224 <bt_rpmsg_send>:
{
    c224:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c226:	7d02      	ldrb	r2, [r0, #20]
    c228:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c22a:	2a02      	cmp	r2, #2
    c22c:	d00c      	beq.n	c248 <bt_rpmsg_send+0x24>
    c22e:	2a04      	cmp	r2, #4
    c230:	d009      	beq.n	c246 <bt_rpmsg_send+0x22>
    c232:	b1b2      	cbz	r2, c262 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    c234:	2145      	movs	r1, #69	; 0x45
    c236:	480c      	ldr	r0, [pc, #48]	; (c268 <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    c238:	f010 fb04 	bl	1c844 <printk>
	net_buf_unref(buf);
    c23c:	4620      	mov	r0, r4
    c23e:	f00b f96b 	bl	17518 <net_buf_unref>
}
    c242:	2000      	movs	r0, #0
    c244:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    c246:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    c248:	4611      	mov	r1, r2
    c24a:	f104 0008 	add.w	r0, r4, #8
    c24e:	f014 f91e 	bl	2048e <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    c252:	4620      	mov	r0, r4
    c254:	f000 f8ee 	bl	c434 <bt_rpmsg_platform_send>
	if (err < 0) {
    c258:	1e02      	subs	r2, r0, #0
    c25a:	daef      	bge.n	c23c <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    c25c:	2145      	movs	r1, #69	; 0x45
    c25e:	4803      	ldr	r0, [pc, #12]	; (c26c <bt_rpmsg_send+0x48>)
    c260:	e7ea      	b.n	c238 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    c262:	2201      	movs	r2, #1
    c264:	e7f0      	b.n	c248 <bt_rpmsg_send+0x24>
    c266:	bf00      	nop
    c268:	0002324a 	.word	0x0002324a
    c26c:	0002325f 	.word	0x0002325f

0000c270 <bt_rpmsg_rx>:
{
    c270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    c274:	4680      	mov	r8, r0
{
    c276:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    c278:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    c27c:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    c27e:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    c280:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    c284:	d009      	beq.n	c29a <bt_rpmsg_rx+0x2a>
    c286:	2805      	cmp	r0, #5
    c288:	d074      	beq.n	c374 <bt_rpmsg_rx+0x104>
    c28a:	2802      	cmp	r0, #2
    c28c:	f040 8099 	bne.w	c3c2 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    c290:	2b03      	cmp	r3, #3
    c292:	d84a      	bhi.n	c32a <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    c294:	2145      	movs	r1, #69	; 0x45
    c296:	484f      	ldr	r0, [pc, #316]	; (c3d4 <bt_rpmsg_rx+0x164>)
    c298:	e003      	b.n	c2a2 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c29a:	2b01      	cmp	r3, #1
    c29c:	d806      	bhi.n	c2ac <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    c29e:	2145      	movs	r1, #69	; 0x45
    c2a0:	484d      	ldr	r0, [pc, #308]	; (c3d8 <bt_rpmsg_rx+0x168>)
}
    c2a2:	b002      	add	sp, #8
    c2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    c2a8:	f010 bacc 	b.w	1c844 <printk>
	switch (evt_type) {
    c2ac:	7873      	ldrb	r3, [r6, #1]
    c2ae:	2b3e      	cmp	r3, #62	; 0x3e
    c2b0:	d117      	bne.n	c2e2 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    c2b2:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    c2b4:	2f02      	cmp	r7, #2
    c2b6:	d016      	beq.n	c2e6 <bt_rpmsg_rx+0x76>
    c2b8:	f1a7 030d 	sub.w	r3, r7, #13
    c2bc:	425f      	negs	r7, r3
    c2be:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    c2c0:	2202      	movs	r2, #2
    c2c2:	4641      	mov	r1, r8
    c2c4:	a801      	add	r0, sp, #4
    c2c6:	f011 ff75 	bl	1e1b4 <memcpy>
	if (remaining != hdr.len) {
    c2ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    c2ce:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    c2d0:	429d      	cmp	r5, r3
    c2d2:	d00a      	beq.n	c2ea <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    c2d4:	2145      	movs	r1, #69	; 0x45
    c2d6:	4841      	ldr	r0, [pc, #260]	; (c3dc <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    c2d8:	f010 fab4 	bl	1c844 <printk>
}
    c2dc:	b002      	add	sp, #8
    c2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c2e2:	2700      	movs	r7, #0
    c2e4:	e7ec      	b.n	c2c0 <bt_rpmsg_rx+0x50>
			return true;
    c2e6:	2701      	movs	r7, #1
    c2e8:	e7ea      	b.n	c2c0 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    c2ea:	2200      	movs	r2, #0
    c2ec:	2300      	movs	r3, #0
    c2ee:	4639      	mov	r1, r7
    c2f0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c2f4:	f002 f92a 	bl	e54c <bt_buf_get_evt>
	if (!buf) {
    c2f8:	4604      	mov	r4, r0
    c2fa:	b920      	cbnz	r0, c306 <bt_rpmsg_rx+0x96>
		if (discardable) {
    c2fc:	2f00      	cmp	r7, #0
    c2fe:	d1ed      	bne.n	c2dc <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    c300:	2145      	movs	r1, #69	; 0x45
    c302:	4837      	ldr	r0, [pc, #220]	; (c3e0 <bt_rpmsg_rx+0x170>)
    c304:	e7e8      	b.n	c2d8 <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c306:	f100 0708 	add.w	r7, r0, #8
    c30a:	2202      	movs	r2, #2
    c30c:	a901      	add	r1, sp, #4
    c30e:	4638      	mov	r0, r7
    c310:	f014 f8e0 	bl	204d4 <net_buf_simple_add_mem>
    c314:	462a      	mov	r2, r5
    c316:	1cf1      	adds	r1, r6, #3
    c318:	4638      	mov	r0, r7
    c31a:	f014 f8db 	bl	204d4 <net_buf_simple_add_mem>
		bt_recv(buf);
    c31e:	4620      	mov	r0, r4
}
    c320:	b002      	add	sp, #8
    c322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    c326:	f003 bf43 	b.w	101b0 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    c32a:	2200      	movs	r2, #0
    c32c:	2300      	movs	r3, #0
    c32e:	2003      	movs	r0, #3
    c330:	f002 f8ba 	bl	e4a8 <bt_buf_get_rx>
	if (buf) {
    c334:	4604      	mov	r4, r0
    c336:	b1d0      	cbz	r0, c36e <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c338:	2204      	movs	r2, #4
    c33a:	4641      	mov	r1, r8
    c33c:	eb0d 0002 	add.w	r0, sp, r2
    c340:	f011 ff38 	bl	1e1b4 <memcpy>
    c344:	2204      	movs	r2, #4
    c346:	f104 0708 	add.w	r7, r4, #8
    c34a:	4638      	mov	r0, r7
    c34c:	eb0d 0102 	add.w	r1, sp, r2
    c350:	f014 f8c0 	bl	204d4 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c354:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c358:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c35a:	429d      	cmp	r5, r3
    c35c:	d02e      	beq.n	c3bc <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    c35e:	2145      	movs	r1, #69	; 0x45
    c360:	4820      	ldr	r0, [pc, #128]	; (c3e4 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    c362:	f010 fa6f 	bl	1c844 <printk>
		net_buf_unref(buf);
    c366:	4620      	mov	r0, r4
    c368:	f00b f8d6 	bl	17518 <net_buf_unref>
	if (buf) {
    c36c:	e7b6      	b.n	c2dc <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    c36e:	2145      	movs	r1, #69	; 0x45
    c370:	481d      	ldr	r0, [pc, #116]	; (c3e8 <bt_rpmsg_rx+0x178>)
    c372:	e796      	b.n	c2a2 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c374:	2b03      	cmp	r3, #3
    c376:	d802      	bhi.n	c37e <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    c378:	2145      	movs	r1, #69	; 0x45
    c37a:	481c      	ldr	r0, [pc, #112]	; (c3ec <bt_rpmsg_rx+0x17c>)
    c37c:	e791      	b.n	c2a2 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    c37e:	2200      	movs	r2, #0
    c380:	2300      	movs	r3, #0
    c382:	f002 f891 	bl	e4a8 <bt_buf_get_rx>
	if (buf) {
    c386:	4604      	mov	r4, r0
    c388:	b1a8      	cbz	r0, c3b6 <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c38a:	2204      	movs	r2, #4
    c38c:	4641      	mov	r1, r8
    c38e:	eb0d 0002 	add.w	r0, sp, r2
    c392:	f011 ff0f 	bl	1e1b4 <memcpy>
    c396:	2204      	movs	r2, #4
    c398:	f104 0708 	add.w	r7, r4, #8
    c39c:	4638      	mov	r0, r7
    c39e:	eb0d 0102 	add.w	r1, sp, r2
    c3a2:	f014 f897 	bl	204d4 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c3a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c3aa:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c3ac:	429d      	cmp	r5, r3
    c3ae:	d005      	beq.n	c3bc <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    c3b0:	2145      	movs	r1, #69	; 0x45
    c3b2:	480f      	ldr	r0, [pc, #60]	; (c3f0 <bt_rpmsg_rx+0x180>)
    c3b4:	e7d5      	b.n	c362 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    c3b6:	2145      	movs	r1, #69	; 0x45
    c3b8:	480e      	ldr	r0, [pc, #56]	; (c3f4 <bt_rpmsg_rx+0x184>)
    c3ba:	e772      	b.n	c2a2 <bt_rpmsg_rx+0x32>
    c3bc:	462a      	mov	r2, r5
    c3be:	1d71      	adds	r1, r6, #5
    c3c0:	e7aa      	b.n	c318 <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c3c2:	4602      	mov	r2, r0
    c3c4:	2145      	movs	r1, #69	; 0x45
    c3c6:	480c      	ldr	r0, [pc, #48]	; (c3f8 <bt_rpmsg_rx+0x188>)
}
    c3c8:	b002      	add	sp, #8
    c3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c3ce:	f010 ba39 	b.w	1c844 <printk>
    c3d2:	bf00      	nop
    c3d4:	000232ec 	.word	0x000232ec
    c3d8:	0002327c 	.word	0x0002327c
    c3dc:	000232a2 	.word	0x000232a2
    c3e0:	000232cb 	.word	0x000232cb
    c3e4:	0002332f 	.word	0x0002332f
    c3e8:	00023310 	.word	0x00023310
    c3ec:	00023356 	.word	0x00023356
    c3f0:	00023399 	.word	0x00023399
    c3f4:	0002337a 	.word	0x0002337a
    c3f8:	000233c0 	.word	0x000233c0

0000c3fc <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c3fc:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c3fe:	4908      	ldr	r1, [pc, #32]	; (c420 <bt_rpmsg_platform_init+0x24>)
    c400:	4808      	ldr	r0, [pc, #32]	; (c424 <bt_rpmsg_platform_init+0x28>)
    c402:	f7ff f9e3 	bl	b7cc <rpmsg_service_register_endpoint>

	if (err < 0) {
    c406:	1e02      	subs	r2, r0, #0
    c408:	da05      	bge.n	c416 <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c40a:	4807      	ldr	r0, [pc, #28]	; (c428 <bt_rpmsg_platform_init+0x2c>)
    c40c:	2145      	movs	r1, #69	; 0x45
    c40e:	f010 fa19 	bl	1c844 <printk>
		return RPMSG_ERR_INIT;
    c412:	4806      	ldr	r0, [pc, #24]	; (c42c <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c414:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c416:	4b06      	ldr	r3, [pc, #24]	; (c430 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c418:	2000      	movs	r0, #0
	endpoint_id = err;
    c41a:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c41c:	e7fa      	b.n	c414 <bt_rpmsg_platform_init+0x18>
    c41e:	bf00      	nop
    c420:	0001d435 	.word	0x0001d435
    c424:	000233ed 	.word	0x000233ed
    c428:	000233f8 	.word	0x000233f8
    c42c:	fffff82a 	.word	0xfffff82a
    c430:	2000996c 	.word	0x2000996c

0000c434 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c434:	4b02      	ldr	r3, [pc, #8]	; (c440 <bt_rpmsg_platform_send+0xc>)
    c436:	8982      	ldrh	r2, [r0, #12]
    c438:	6881      	ldr	r1, [r0, #8]
    c43a:	6818      	ldr	r0, [r3, #0]
    c43c:	f7ff b9f2 	b.w	b824 <rpmsg_service_send>
    c440:	2000996c 	.word	0x2000996c

0000c444 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c444:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c446:	4b02      	ldr	r3, [pc, #8]	; (c450 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c448:	6818      	ldr	r0, [r3, #0]
    c44a:	f7ff f9e1 	bl	b810 <rpmsg_service_endpoint_is_bound>
}
    c44e:	bd08      	pop	{r3, pc}
    c450:	2000996c 	.word	0x2000996c

0000c454 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c454:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c456:	4c06      	ldr	r4, [pc, #24]	; (c470 <z_clock_isr+0x1c>)
    c458:	4806      	ldr	r0, [pc, #24]	; (c474 <z_clock_isr+0x20>)
    c45a:	4621      	mov	r1, r4
    c45c:	2217      	movs	r2, #23
    c45e:	f010 f9f1 	bl	1c844 <printk>
    c462:	4620      	mov	r0, r4
}
    c464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c468:	2117      	movs	r1, #23
    c46a:	f010 bc91 	b.w	1cd90 <assert_post_action>
    c46e:	bf00      	nop
    c470:	00023435 	.word	0x00023435
    c474:	00022c66 	.word	0x00022c66

0000c478 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c478:	4a04      	ldr	r2, [pc, #16]	; (c48c <sys_clock_timeout_handler+0x14>)
    c47a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c47c:	1ac8      	subs	r0, r1, r3
    c47e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c482:	4403      	add	r3, r0
    c484:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c486:	f00f bcfd 	b.w	1be84 <z_clock_announce>
    c48a:	bf00      	nop
    c48c:	2000997c 	.word	0x2000997c

0000c490 <set_absolute_alarm>:
{
    c490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c494:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c498:	f04f 0900 	mov.w	r9, #0
    c49c:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c49e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c4a2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c4a6:	00a4      	lsls	r4, r4, #2
    c4a8:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c4ac:	b2a4      	uxth	r4, r4
    c4ae:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c4b2:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c4b6:	f8df 806c 	ldr.w	r8, [pc, #108]	; c524 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c4ba:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c4be:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c4c2:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c4c4:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c4c8:	eba3 030a 	sub.w	r3, r3, sl
    c4cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c4d0:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c4d4:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c4d6:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c4da:	d102      	bne.n	c4e2 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c4dc:	2013      	movs	r0, #19
    c4de:	f014 ff2f 	bl	21340 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c4e2:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c4e6:	1aab      	subs	r3, r5, r2
    c4e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c4ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c4f0:	bf88      	it	hi
    c4f2:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c4f4:	f8c4 9000 	str.w	r9, [r4]
    c4f8:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c4fa:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c4fe:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c502:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c506:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c50a:	459a      	cmp	sl, r3
    c50c:	d006      	beq.n	c51c <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c50e:	1aeb      	subs	r3, r5, r3
    c510:	3b02      	subs	r3, #2
    c512:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c51a:	d801      	bhi.n	c520 <set_absolute_alarm+0x90>
}
    c51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c520:	462b      	mov	r3, r5
    c522:	e7cf      	b.n	c4c4 <set_absolute_alarm+0x34>
    c524:	40015000 	.word	0x40015000

0000c528 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c52a:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c52c:	462f      	mov	r7, r5
    c52e:	4c10      	ldr	r4, [pc, #64]	; (c570 <rtc_nrf_isr+0x48>)
    c530:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c532:	4b10      	ldr	r3, [pc, #64]	; (c574 <rtc_nrf_isr+0x4c>)
    c534:	b105      	cbz	r5, c538 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c538:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c53c:	03d2      	lsls	r2, r2, #15
    c53e:	d5fa      	bpl.n	c536 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c540:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c544:	2a00      	cmp	r2, #0
    c546:	d0f6      	beq.n	c536 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c548:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c54c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c554:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c558:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c55a:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c55e:	b126      	cbz	r6, c56a <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c560:	2000      	movs	r0, #0
    c562:	6862      	ldr	r2, [r4, #4]
    c564:	6027      	str	r7, [r4, #0]
    c566:	47b0      	blx	r6
    c568:	e7e2      	b.n	c530 <rtc_nrf_isr+0x8>
    c56a:	6026      	str	r6, [r4, #0]
}
    c56c:	e7e3      	b.n	c536 <rtc_nrf_isr+0xe>
    c56e:	bf00      	nop
    c570:	20009970 	.word	0x20009970
    c574:	40015000 	.word	0x40015000

0000c578 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c578:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c57a:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c57c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c580:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c584:	4c0c      	ldr	r4, [pc, #48]	; (c5b8 <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c586:	2101      	movs	r1, #1
    c588:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c58c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c590:	4b0a      	ldr	r3, [pc, #40]	; (c5bc <z_clock_driver_init+0x44>)
    c592:	2015      	movs	r0, #21
    c594:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c598:	462a      	mov	r2, r5
    c59a:	f001 f8b9 	bl	d710 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c59e:	2015      	movs	r0, #21
    c5a0:	f001 f898 	bl	d6d4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c5a4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c5a6:	4a06      	ldr	r2, [pc, #24]	; (c5c0 <z_clock_driver_init+0x48>)
    c5a8:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c5aa:	2002      	movs	r0, #2
    c5ac:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c5ae:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c5b0:	f7ff fd82 	bl	c0b8 <z_nrf_clock_control_lf_on>

	return 0;
}
    c5b4:	4628      	mov	r0, r5
    c5b6:	bd38      	pop	{r3, r4, r5, pc}
    c5b8:	40015000 	.word	0x40015000
    c5bc:	e000e100 	.word	0xe000e100
    c5c0:	20009978 	.word	0x20009978

0000c5c4 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c5c4:	4a13      	ldr	r2, [pc, #76]	; (c614 <z_clock_set_timeout+0x50>)
    c5c6:	f1b0 3fff 	cmp.w	r0, #4294967295
    c5ca:	bf14      	ite	ne
    c5cc:	4603      	movne	r3, r0
    c5ce:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c5d0:	3b01      	subs	r3, #1
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	dd1c      	ble.n	c610 <z_clock_set_timeout+0x4c>
    c5d6:	4293      	cmp	r3, r2
    c5d8:	bfa8      	it	ge
    c5da:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c5dc:	4a0e      	ldr	r2, [pc, #56]	; (c618 <z_clock_set_timeout+0x54>)
    c5de:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c5e2:	4a0e      	ldr	r2, [pc, #56]	; (c61c <z_clock_set_timeout+0x58>)
    c5e4:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c5e6:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c5e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c5ec:	bf18      	it	ne
    c5ee:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c5f0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c5f4:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c5f6:	480a      	ldr	r0, [pc, #40]	; (c620 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c5f8:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c5fa:	4a0a      	ldr	r2, [pc, #40]	; (c624 <z_clock_set_timeout+0x60>)
    c5fc:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c5fe:	2000      	movs	r0, #0
    c600:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c602:	4a04      	ldr	r2, [pc, #16]	; (c614 <z_clock_set_timeout+0x50>)
    c604:	4293      	cmp	r3, r2
    c606:	bf94      	ite	ls
    c608:	18c9      	addls	r1, r1, r3
    c60a:	1889      	addhi	r1, r1, r2
    c60c:	f7ff bf40 	b.w	c490 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c610:	2300      	movs	r3, #0
    c612:	e7e3      	b.n	c5dc <z_clock_set_timeout+0x18>
    c614:	007fffff 	.word	0x007fffff
    c618:	40015000 	.word	0x40015000
    c61c:	2000997c 	.word	0x2000997c
    c620:	0000c479 	.word	0x0000c479
    c624:	20009970 	.word	0x20009970

0000c628 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c628:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c62a:	f04f 0320 	mov.w	r3, #32
    c62e:	f3ef 8511 	mrs	r5, BASEPRI
    c632:	f383 8811 	msr	BASEPRI, r3
    c636:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c63a:	4815      	ldr	r0, [pc, #84]	; (c690 <z_clock_elapsed+0x68>)
    c63c:	f00f f92e 	bl	1b89c <z_spin_lock_valid>
    c640:	b940      	cbnz	r0, c654 <z_clock_elapsed+0x2c>
    c642:	4914      	ldr	r1, [pc, #80]	; (c694 <z_clock_elapsed+0x6c>)
    c644:	4814      	ldr	r0, [pc, #80]	; (c698 <z_clock_elapsed+0x70>)
    c646:	227c      	movs	r2, #124	; 0x7c
    c648:	f010 f8fc 	bl	1c844 <printk>
    c64c:	217c      	movs	r1, #124	; 0x7c
    c64e:	4811      	ldr	r0, [pc, #68]	; (c694 <z_clock_elapsed+0x6c>)
    c650:	f010 fb9e 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
    c654:	480e      	ldr	r0, [pc, #56]	; (c690 <z_clock_elapsed+0x68>)
    c656:	f00f f93d 	bl	1b8d4 <z_spin_lock_set_owner>
    c65a:	4b10      	ldr	r3, [pc, #64]	; (c69c <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c65c:	480c      	ldr	r0, [pc, #48]	; (c690 <z_clock_elapsed+0x68>)
    c65e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c662:	4b0f      	ldr	r3, [pc, #60]	; (c6a0 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c664:	681b      	ldr	r3, [r3, #0]
    c666:	1ae4      	subs	r4, r4, r3
    c668:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c66c:	f00f f924 	bl	1b8b8 <z_spin_unlock_valid>
    c670:	b940      	cbnz	r0, c684 <z_clock_elapsed+0x5c>
    c672:	4908      	ldr	r1, [pc, #32]	; (c694 <z_clock_elapsed+0x6c>)
    c674:	4808      	ldr	r0, [pc, #32]	; (c698 <z_clock_elapsed+0x70>)
    c676:	22a7      	movs	r2, #167	; 0xa7
    c678:	f010 f8e4 	bl	1c844 <printk>
    c67c:	21a7      	movs	r1, #167	; 0xa7
    c67e:	4805      	ldr	r0, [pc, #20]	; (c694 <z_clock_elapsed+0x6c>)
    c680:	f010 fb86 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
    c684:	f385 8811 	msr	BASEPRI, r5
    c688:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c68c:	4620      	mov	r0, r4
    c68e:	bd38      	pop	{r3, r4, r5, pc}
    c690:	20009980 	.word	0x20009980
    c694:	00022ca0 	.word	0x00022ca0
    c698:	00022c66 	.word	0x00022c66
    c69c:	40015000 	.word	0x40015000
    c6a0:	2000997c 	.word	0x2000997c

0000c6a4 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c6a4:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c6a6:	1cc5      	adds	r5, r0, #3
    c6a8:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c6ac:	2d74      	cmp	r5, #116	; 0x74
    c6ae:	d908      	bls.n	c6c2 <user_data_alloc.constprop.0+0x1e>
    c6b0:	4917      	ldr	r1, [pc, #92]	; (c710 <user_data_alloc.constprop.0+0x6c>)
    c6b2:	4818      	ldr	r0, [pc, #96]	; (c714 <user_data_alloc.constprop.0+0x70>)
    c6b4:	2250      	movs	r2, #80	; 0x50
    c6b6:	f010 f8c5 	bl	1c844 <printk>
    c6ba:	2150      	movs	r1, #80	; 0x50
    c6bc:	4814      	ldr	r0, [pc, #80]	; (c710 <user_data_alloc.constprop.0+0x6c>)
    c6be:	f010 fb67 	bl	1cd90 <assert_post_action>
	return list->head;
    c6c2:	4c15      	ldr	r4, [pc, #84]	; (c718 <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c6c4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c6c8:	b123      	cbz	r3, c6d4 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c6ca:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c6ce:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c6d0:	2b74      	cmp	r3, #116	; 0x74
    c6d2:	d919      	bls.n	c708 <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c6d4:	2178      	movs	r1, #120	; 0x78
    c6d6:	2004      	movs	r0, #4
    c6d8:	f00f ffd0 	bl	1c67c <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c6dc:	b178      	cbz	r0, c6fe <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c6de:	2300      	movs	r3, #0
	return list->tail;
    c6e0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c6e4:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c6e6:	b95a      	cbnz	r2, c700 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c6e8:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c6ec:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c6f0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c6f4:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c6f6:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c6f8:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c6fa:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c6fe:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c700:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c702:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c706:	e7f1      	b.n	c6ec <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c708:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c70c:	e7f0      	b.n	c6f0 <user_data_alloc.constprop.0+0x4c>
    c70e:	bf00      	nop
    c710:	000234a2 	.word	0x000234a2
    c714:	00022c66 	.word	0x00022c66
    c718:	20009984 	.word	0x20009984

0000c71c <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c71c:	4808      	ldr	r0, [pc, #32]	; (c740 <discovery_complete.constprop.0+0x24>)
    c71e:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c722:	e8d3 2fef 	ldaex	r2, [r3]
    c726:	f042 0202 	orr.w	r2, r2, #2
    c72a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c72e:	2900      	cmp	r1, #0
    c730:	d1f7      	bne.n	c722 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c732:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    c736:	681b      	ldr	r3, [r3, #0]
    c738:	b10b      	cbz	r3, c73e <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    c73a:	6841      	ldr	r1, [r0, #4]
    c73c:	4718      	bx	r3
	}
}
    c73e:	4770      	bx	lr
    c740:	20009984 	.word	0x20009984

0000c744 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c744:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    c746:	4c0b      	ldr	r4, [pc, #44]	; (c774 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c748:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    c74a:	4620      	mov	r0, r4
    c74c:	f010 fe98 	bl	1d480 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c750:	f06f 0101 	mvn.w	r1, #1
    c754:	f504 709c 	add.w	r0, r4, #312	; 0x138
    c758:	f010 fea9 	bl	1d4ae <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    c75c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c760:	689b      	ldr	r3, [r3, #8]
    c762:	b12b      	cbz	r3, c770 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    c764:	4629      	mov	r1, r5
    c766:	6862      	ldr	r2, [r4, #4]
    c768:	6820      	ldr	r0, [r4, #0]
	}
}
    c76a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    c76e:	4718      	bx	r3
}
    c770:	bd70      	pop	{r4, r5, r6, pc}
    c772:	bf00      	nop
    c774:	20009984 	.word	0x20009984

0000c778 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c77c:	4c1f      	ldr	r4, [pc, #124]	; (c7fc <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c77e:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c780:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c784:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c786:	2b22      	cmp	r3, #34	; 0x22
    c788:	d907      	bls.n	c79a <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    c78a:	2145      	movs	r1, #69	; 0x45
    c78c:	481c      	ldr	r0, [pc, #112]	; (c800 <attr_store.constprop.0+0x88>)
    c78e:	f010 f859 	bl	1c844 <printk>
		return NULL;
    c792:	2500      	movs	r5, #0
}
    c794:	4628      	mov	r0, r5
    c796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    c79a:	6803      	ldr	r3, [r0, #0]
    c79c:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    c79e:	2b02      	cmp	r3, #2
    c7a0:	d80d      	bhi.n	c7be <attr_store.constprop.0+0x46>
    c7a2:	4a18      	ldr	r2, [pc, #96]	; (c804 <attr_store.constprop.0+0x8c>)
    c7a4:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    c7a8:	eb06 0009 	add.w	r0, r6, r9
    c7ac:	f7ff ff7a 	bl	c6a4 <user_data_alloc.constprop.0>
	if (!attr_data) {
    c7b0:	4605      	mov	r5, r0
    c7b2:	b958      	cbnz	r0, c7cc <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    c7b4:	2145      	movs	r1, #69	; 0x45
    c7b6:	4814      	ldr	r0, [pc, #80]	; (c808 <attr_store.constprop.0+0x90>)
    c7b8:	f010 f844 	bl	1c844 <printk>
		return NULL;
    c7bc:	e7ea      	b.n	c794 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    c7be:	2145      	movs	r1, #69	; 0x45
    c7c0:	4812      	ldr	r0, [pc, #72]	; (c80c <attr_store.constprop.0+0x94>)
    c7c2:	f010 f83f 	bl	1c844 <printk>
    c7c6:	f04f 0900 	mov.w	r9, #0
    c7ca:	e7ed      	b.n	c7a8 <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c7cc:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c7d0:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c7d2:	1c5a      	adds	r2, r3, #1
    c7d4:	3303      	adds	r3, #3
    c7d6:	00db      	lsls	r3, r3, #3
    c7d8:	f103 0804 	add.w	r8, r3, #4
    c7dc:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    c7e0:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    c7e2:	441c      	add	r4, r3
    c7e4:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c7e6:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    c7e8:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    c7ea:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c7ec:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    c7ee:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c7f0:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c7f2:	f011 fcdf 	bl	1e1b4 <memcpy>
	return cur_attr;
    c7f6:	4645      	mov	r5, r8
    c7f8:	e7cc      	b.n	c794 <attr_store.constprop.0+0x1c>
    c7fa:	bf00      	nop
    c7fc:	20009984 	.word	0x20009984
    c800:	000234cd 	.word	0x000234cd
    c804:	00023698 	.word	0x00023698
    c808:	0002350a 	.word	0x0002350a
    c80c:	000234ee 	.word	0x000234ee

0000c810 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    c810:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    c812:	4604      	mov	r4, r0
    c814:	b930      	cbnz	r0, c824 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    c816:	2145      	movs	r1, #69	; 0x45
    c818:	480c      	ldr	r0, [pc, #48]	; (c84c <uuid_store.constprop.0+0x3c>)
    c81a:	f010 f813 	bl	1c844 <printk>
    c81e:	4625      	mov	r5, r4
}
    c820:	4628      	mov	r0, r5
    c822:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    c824:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    c826:	2b02      	cmp	r3, #2
    c828:	d80a      	bhi.n	c840 <uuid_store.constprop.0+0x30>
    c82a:	4a09      	ldr	r2, [pc, #36]	; (c850 <uuid_store.constprop.0+0x40>)
    c82c:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    c82e:	4630      	mov	r0, r6
    c830:	f7ff ff38 	bl	c6a4 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    c834:	4632      	mov	r2, r6
    c836:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    c838:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    c83a:	f011 fcbb 	bl	1e1b4 <memcpy>
	return (struct bt_uuid *)buffer;
    c83e:	e7ef      	b.n	c820 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    c840:	2145      	movs	r1, #69	; 0x45
    c842:	4804      	ldr	r0, [pc, #16]	; (c854 <uuid_store.constprop.0+0x44>)
    c844:	f00f fffe 	bl	1c844 <printk>
    c848:	2600      	movs	r6, #0
    c84a:	e7f0      	b.n	c82e <uuid_store.constprop.0+0x1e>
    c84c:	0002352c 	.word	0x0002352c
    c850:	00023698 	.word	0x00023698
    c854:	000234ee 	.word	0x000234ee

0000c858 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    c858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    c85c:	4e79      	ldr	r6, [pc, #484]	; (ca44 <discovery_callback+0x1ec>)
{
    c85e:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    c860:	6833      	ldr	r3, [r6, #0]
    c862:	4283      	cmp	r3, r0
    c864:	d008      	beq.n	c878 <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    c866:	4878      	ldr	r0, [pc, #480]	; (ca48 <discovery_callback+0x1f0>)
    c868:	2145      	movs	r1, #69	; 0x45
    c86a:	f00f ffeb 	bl	1c844 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    c86e:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    c872:	f7ff ff67 	bl	c744 <discovery_complete_error.constprop.0>
    c876:	e031      	b.n	c8dc <discovery_callback+0x84>
    c878:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    c87a:	2b03      	cmp	r3, #3
    c87c:	f000 80ae 	beq.w	c9dc <discovery_callback+0x184>
    c880:	d80d      	bhi.n	c89e <discovery_callback+0x46>
    c882:	2b02      	cmp	r3, #2
    c884:	d126      	bne.n	c8d4 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    c886:	f240 12b3 	movw	r2, #435	; 0x1b3
    c88a:	4970      	ldr	r1, [pc, #448]	; (ca4c <discovery_callback+0x1f4>)
    c88c:	4870      	ldr	r0, [pc, #448]	; (ca50 <discovery_callback+0x1f8>)
    c88e:	f00f ffd9 	bl	1c844 <printk>
    c892:	f240 11b3 	movw	r1, #435	; 0x1b3
    c896:	486d      	ldr	r0, [pc, #436]	; (ca4c <discovery_callback+0x1f4>)
    c898:	f010 fa7a 	bl	1cd90 <assert_post_action>
    c89c:	e01e      	b.n	c8dc <discovery_callback+0x84>
	switch (params->type) {
    c89e:	2b05      	cmp	r3, #5
    c8a0:	d1f1      	bne.n	c886 <discovery_callback+0x2e>
	if (!attr) {
    c8a2:	2900      	cmp	r1, #0
    c8a4:	f040 8081 	bne.w	c9aa <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    c8a8:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    c8ac:	2b01      	cmp	r3, #1
    c8ae:	d979      	bls.n	c9a4 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    c8b0:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    c8b2:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    c8b6:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    c8b8:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    c8ba:	2303      	movs	r3, #3
    c8bc:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    c8be:	f007 fe2b 	bl	14518 <bt_gatt_discover>
			if (err) {
    c8c2:	4604      	mov	r4, r0
    c8c4:	b150      	cbz	r0, c8dc <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    c8c6:	4602      	mov	r2, r0
    c8c8:	2145      	movs	r1, #69	; 0x45
    c8ca:	4862      	ldr	r0, [pc, #392]	; (ca54 <discovery_callback+0x1fc>)
    c8cc:	f00f ffba 	bl	1c844 <printk>
				discovery_complete_error(dm, err);
    c8d0:	4620      	mov	r0, r4
    c8d2:	e7ce      	b.n	c872 <discovery_callback+0x1a>
	if (!attr) {
    c8d4:	b921      	cbnz	r1, c8e0 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    c8d6:	4630      	mov	r0, r6
    c8d8:	f010 fdf4 	bl	1d4c4 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    c8dc:	2400      	movs	r4, #0
    c8de:	e04a      	b.n	c976 <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    c8e0:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    c8e4:	4628      	mov	r0, r5
    c8e6:	2108      	movs	r1, #8
    c8e8:	f7ff ff46 	bl	c778 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c8ec:	2400      	movs	r4, #0
    c8ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    c8f2:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c8f4:	4669      	mov	r1, sp
    c8f6:	6828      	ldr	r0, [r5, #0]
    c8f8:	f88d 4000 	strb.w	r4, [sp]
    c8fc:	f8ad 3002 	strh.w	r3, [sp, #2]
    c900:	f011 fcf3 	bl	1e2ea <bt_uuid_cmp>
    c904:	b1a8      	cbz	r0, c932 <discovery_callback+0xda>
    c906:	f642 0301 	movw	r3, #10241	; 0x2801
    c90a:	6828      	ldr	r0, [r5, #0]
    c90c:	a901      	add	r1, sp, #4
    c90e:	f88d 4004 	strb.w	r4, [sp, #4]
    c912:	f8ad 3006 	strh.w	r3, [sp, #6]
    c916:	f011 fce8 	bl	1e2ea <bt_uuid_cmp>
    c91a:	b150      	cbz	r0, c932 <discovery_callback+0xda>
    c91c:	494b      	ldr	r1, [pc, #300]	; (ca4c <discovery_callback+0x1f4>)
    c91e:	484c      	ldr	r0, [pc, #304]	; (ca50 <discovery_callback+0x1f8>)
    c920:	f240 1217 	movw	r2, #279	; 0x117
    c924:	f00f ff8e 	bl	1c844 <printk>
    c928:	f240 1117 	movw	r1, #279	; 0x117
    c92c:	4847      	ldr	r0, [pc, #284]	; (ca4c <discovery_callback+0x1f4>)
    c92e:	f010 fa2f 	bl	1cd90 <assert_post_action>
	if (!cur_attr) {
    c932:	b937      	cbnz	r7, c942 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    c934:	4848      	ldr	r0, [pc, #288]	; (ca58 <discovery_callback+0x200>)
    c936:	2145      	movs	r1, #69	; 0x45
    c938:	f00f ff84 	bl	1c844 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c93c:	f06f 000b 	mvn.w	r0, #11
    c940:	e797      	b.n	c872 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    c942:	4638      	mov	r0, r7
    c944:	f010 fdd2 	bl	1d4ec <bt_gatt_dm_attr_service_val>
    c948:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    c94a:	2208      	movs	r2, #8
    c94c:	4641      	mov	r1, r8
    c94e:	f011 fc31 	bl	1e1b4 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    c952:	6828      	ldr	r0, [r5, #0]
    c954:	f7ff ff5c 	bl	c810 <uuid_store.constprop.0>
    c958:	4604      	mov	r4, r0
    c95a:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    c95c:	b930      	cbnz	r0, c96c <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    c95e:	2145      	movs	r1, #69	; 0x45
    c960:	483e      	ldr	r0, [pc, #248]	; (ca5c <discovery_callback+0x204>)
    c962:	f00f ff6f 	bl	1c844 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c966:	f06f 000b 	mvn.w	r0, #11
    c96a:	e058      	b.n	ca1e <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    c96c:	88bb      	ldrh	r3, [r7, #4]
    c96e:	88aa      	ldrh	r2, [r5, #4]
    c970:	4293      	cmp	r3, r2
    c972:	d104      	bne.n	c97e <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    c974:	2401      	movs	r4, #1
}
    c976:	4620      	mov	r0, r4
    c978:	b002      	add	sp, #8
    c97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c97e:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    c980:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c982:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c984:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c986:	4936      	ldr	r1, [pc, #216]	; (ca60 <discovery_callback+0x208>)
    c988:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    c98a:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    c98c:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c98e:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c990:	f007 fdc2 	bl	14518 <bt_gatt_discover>
	if (err) {
    c994:	4602      	mov	r2, r0
    c996:	2800      	cmp	r0, #0
    c998:	d0a0      	beq.n	c8dc <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    c99a:	2145      	movs	r1, #69	; 0x45
    c99c:	4831      	ldr	r0, [pc, #196]	; (ca64 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    c99e:	f00f ff51 	bl	1c844 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c9a2:	e7e0      	b.n	c966 <discovery_callback+0x10e>
			discovery_complete(dm);
    c9a4:	f7ff feba 	bl	c71c <discovery_complete.constprop.0>
    c9a8:	e798      	b.n	c8dc <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    c9aa:	2400      	movs	r4, #0
    c9ac:	f642 0303 	movw	r3, #10243	; 0x2803
    c9b0:	6828      	ldr	r0, [r5, #0]
    c9b2:	a901      	add	r1, sp, #4
    c9b4:	f88d 4004 	strb.w	r4, [sp, #4]
    c9b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    c9bc:	f011 fc95 	bl	1e2ea <bt_uuid_cmp>
    c9c0:	b950      	cbnz	r0, c9d8 <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    c9c2:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    c9c4:	4628      	mov	r0, r5
    c9c6:	f7ff fed7 	bl	c778 <attr_store.constprop.0>
    c9ca:	4604      	mov	r4, r0
	if (!cur_attr) {
    c9cc:	2800      	cmp	r0, #0
    c9ce:	d1d1      	bne.n	c974 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    c9d0:	2145      	movs	r1, #69	; 0x45
    c9d2:	8a2a      	ldrh	r2, [r5, #16]
    c9d4:	4824      	ldr	r0, [pc, #144]	; (ca68 <discovery_callback+0x210>)
    c9d6:	e7e2      	b.n	c99e <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    c9d8:	4621      	mov	r1, r4
    c9da:	e7f3      	b.n	c9c4 <discovery_callback+0x16c>
	if (!attr) {
    c9dc:	2900      	cmp	r1, #0
    c9de:	d0e1      	beq.n	c9a4 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    c9e0:	2300      	movs	r3, #0
    c9e2:	f88d 3004 	strb.w	r3, [sp, #4]
    c9e6:	f642 0303 	movw	r3, #10243	; 0x2803
    c9ea:	6828      	ldr	r0, [r5, #0]
    c9ec:	a901      	add	r1, sp, #4
    c9ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    c9f2:	f011 fc7a 	bl	1e2ea <bt_uuid_cmp>
    c9f6:	b150      	cbz	r0, ca0e <discovery_callback+0x1b6>
    c9f8:	4914      	ldr	r1, [pc, #80]	; (ca4c <discovery_callback+0x1f4>)
    c9fa:	4815      	ldr	r0, [pc, #84]	; (ca50 <discovery_callback+0x1f8>)
    c9fc:	f44f 72c0 	mov.w	r2, #384	; 0x180
    ca00:	f00f ff20 	bl	1c844 <printk>
    ca04:	f44f 71c0 	mov.w	r1, #384	; 0x180
    ca08:	4810      	ldr	r0, [pc, #64]	; (ca4c <discovery_callback+0x1f4>)
    ca0a:	f010 f9c1 	bl	1cd90 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    ca0e:	8a29      	ldrh	r1, [r5, #16]
    ca10:	480c      	ldr	r0, [pc, #48]	; (ca44 <discovery_callback+0x1ec>)
    ca12:	f010 fd17 	bl	1d444 <attr_find_by_handle>
	if (!cur_attr) {
    ca16:	4604      	mov	r4, r0
    ca18:	b920      	cbnz	r0, ca24 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    ca1a:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    ca1e:	f7ff fe91 	bl	c744 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    ca22:	e7a8      	b.n	c976 <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    ca24:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    ca26:	f010 fd81 	bl	1d52c <bt_gatt_dm_attr_chrc_val>
    ca2a:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    ca2c:	4621      	mov	r1, r4
    ca2e:	2208      	movs	r2, #8
    ca30:	f011 fbc0 	bl	1e1b4 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    ca34:	6828      	ldr	r0, [r5, #0]
    ca36:	f7ff feeb 	bl	c810 <uuid_store.constprop.0>
    ca3a:	4604      	mov	r4, r0
    ca3c:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    ca3e:	2800      	cmp	r0, #0
    ca40:	d198      	bne.n	c974 <discovery_callback+0x11c>
    ca42:	e790      	b.n	c966 <discovery_callback+0x10e>
    ca44:	20009984 	.word	0x20009984
    ca48:	00023545 	.word	0x00023545
    ca4c:	000234a2 	.word	0x000234a2
    ca50:	00022c66 	.word	0x00022c66
    ca54:	000235f9 	.word	0x000235f9
    ca58:	0002356c 	.word	0x0002356c
    ca5c:	0002359a 	.word	0x0002359a
    ca60:	2000998c 	.word	0x2000998c
    ca64:	000235cd 	.word	0x000235cd
    ca68:	00023629 	.word	0x00023629

0000ca6c <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    ca6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca70:	4606      	mov	r6, r0
    ca72:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    ca74:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    ca76:	f8df 8044 	ldr.w	r8, [pc, #68]	; cabc <bt_gatt_dm_char_by_uuid+0x50>
    ca7a:	f8df 9044 	ldr.w	r9, [pc, #68]	; cac0 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    ca7e:	4621      	mov	r1, r4
    ca80:	4630      	mov	r0, r6
    ca82:	f010 fd69 	bl	1d558 <bt_gatt_dm_char_next>
    ca86:	4604      	mov	r4, r0
    ca88:	b1a0      	cbz	r0, cab4 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    ca8a:	f010 fd4f 	bl	1d52c <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    ca8e:	4605      	mov	r5, r0
    ca90:	b950      	cbnz	r0, caa8 <bt_gatt_dm_char_by_uuid+0x3c>
    ca92:	4641      	mov	r1, r8
    ca94:	4648      	mov	r0, r9
    ca96:	f240 12fb 	movw	r2, #507	; 0x1fb
    ca9a:	f00f fed3 	bl	1c844 <printk>
    ca9e:	f240 11fb 	movw	r1, #507	; 0x1fb
    caa2:	4640      	mov	r0, r8
    caa4:	f010 f974 	bl	1cd90 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    caa8:	4638      	mov	r0, r7
    caaa:	6829      	ldr	r1, [r5, #0]
    caac:	f011 fc1d 	bl	1e2ea <bt_uuid_cmp>
    cab0:	2800      	cmp	r0, #0
    cab2:	d1e4      	bne.n	ca7e <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    cab4:	4620      	mov	r0, r4
    cab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    caba:	bf00      	nop
    cabc:	000234a2 	.word	0x000234a2
    cac0:	00022c66 	.word	0x00022c66

0000cac4 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    cac4:	b570      	push	{r4, r5, r6, lr}
    cac6:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    cac8:	4608      	mov	r0, r1
    caca:	b119      	cbz	r1, cad4 <bt_gatt_dm_start+0x10>
    cacc:	7809      	ldrb	r1, [r1, #0]
    cace:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    cad2:	d139      	bne.n	cb48 <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    cad4:	2a00      	cmp	r2, #0
    cad6:	d037      	beq.n	cb48 <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cad8:	4c1e      	ldr	r4, [pc, #120]	; (cb54 <bt_gatt_dm_start+0x90>)
    cada:	f504 769c 	add.w	r6, r4, #312	; 0x138
    cade:	e8d6 1fef 	ldaex	r1, [r6]
    cae2:	f041 0c01 	orr.w	ip, r1, #1
    cae6:	e8c6 cfee 	stlex	lr, ip, [r6]
    caea:	f1be 0f00 	cmp.w	lr, #0
    caee:	d1f6      	bne.n	cade <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    caf0:	f011 0101 	ands.w	r1, r1, #1
    caf4:	d12b      	bne.n	cb4e <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    caf6:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    cafa:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    cafe:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    cb02:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    cb06:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cb0a:	b108      	cbz	r0, cb10 <bt_gatt_dm_start+0x4c>
    cb0c:	f7ff fe80 	bl	c810 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    cb10:	4b11      	ldr	r3, [pc, #68]	; (cb58 <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cb12:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    cb14:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    cb16:	2301      	movs	r3, #1
    cb18:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    cb1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cb1e:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cb20:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    cb22:	4628      	mov	r0, r5
    cb24:	490d      	ldr	r1, [pc, #52]	; (cb5c <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cb26:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    cb28:	f007 fcf6 	bl	14518 <bt_gatt_discover>
	if (err) {
    cb2c:	4604      	mov	r4, r0
    cb2e:	b148      	cbz	r0, cb44 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    cb30:	4602      	mov	r2, r0
    cb32:	2145      	movs	r1, #69	; 0x45
    cb34:	480a      	ldr	r0, [pc, #40]	; (cb60 <bt_gatt_dm_start+0x9c>)
    cb36:	f00f fe85 	bl	1c844 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cb3a:	f06f 0101 	mvn.w	r1, #1
    cb3e:	4809      	ldr	r0, [pc, #36]	; (cb64 <bt_gatt_dm_start+0xa0>)
    cb40:	f010 fcb5 	bl	1d4ae <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    cb44:	4620      	mov	r0, r4
    cb46:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    cb48:	f06f 0415 	mvn.w	r4, #21
    cb4c:	e7fa      	b.n	cb44 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    cb4e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    cb52:	e7f7      	b.n	cb44 <bt_gatt_dm_start+0x80>
    cb54:	20009984 	.word	0x20009984
    cb58:	0000c859 	.word	0x0000c859
    cb5c:	2000998c 	.word	0x2000998c
    cb60:	0002366c 	.word	0x0002366c
    cb64:	20009abc 	.word	0x20009abc

0000cb68 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    cb68:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    cb6a:	4c06      	ldr	r4, [pc, #24]	; (cb84 <scan_default_param_set+0x1c>)
{
    cb6c:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    cb6e:	ad01      	add	r5, sp, #4
    cb70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cb72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cb74:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    cb76:	4c04      	ldr	r4, [pc, #16]	; (cb88 <scan_default_param_set+0x20>)
    cb78:	ad01      	add	r5, sp, #4
    cb7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cb7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cb7e:	6026      	str	r6, [r4, #0]
}
    cb80:	b006      	add	sp, #24
    cb82:	bd70      	pop	{r4, r5, r6, pc}
    cb84:	00021a34 	.word	0x00021a34
    cb88:	20009b00 	.word	0x20009b00

0000cb8c <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    cb8c:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    cb90:	4b02      	ldr	r3, [pc, #8]	; (cb9c <scan_default_conn_param_set+0x10>)
    cb92:	4903      	ldr	r1, [pc, #12]	; (cba0 <scan_default_conn_param_set+0x14>)
    cb94:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
    cb98:	4770      	bx	lr
    cb9a:	bf00      	nop
    cb9c:	20009ad0 	.word	0x20009ad0
    cba0:	00280018 	.word	0x00280018

0000cba4 <uuid_check>:
{
    cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    cba8:	4c29      	ldr	r4, [pc, #164]	; (cc50 <uuid_check+0xac>)
{
    cbaa:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    cbac:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
    cbb0:	4606      	mov	r6, r0
    cbb2:	9100      	str	r1, [sp, #0]
    cbb4:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d03c      	beq.n	cc34 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    cbba:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    cbbc:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    cbbe:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    cbc0:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    cbc4:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
    cbc8:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    cbca:	4557      	cmp	r7, sl
    cbcc:	d30e      	bcc.n	cbec <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    cbce:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    cbd2:	f1bb 0f00 	cmp.w	fp, #0
    cbd6:	d02b      	beq.n	cc30 <uuid_check+0x8c>
    cbd8:	45aa      	cmp	sl, r5
    cbda:	d12b      	bne.n	cc34 <uuid_check+0x90>
			control->filter_match_cnt++;
    cbdc:	7873      	ldrb	r3, [r6, #1]
    cbde:	3301      	adds	r3, #1
    cbe0:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    cbe2:	2301      	movs	r3, #1
    cbe4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    cbe8:	70b3      	strb	r3, [r6, #2]
}
    cbea:	e023      	b.n	cc34 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cbec:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    cbf0:	9b00      	ldr	r3, [sp, #0]
    cbf2:	9a03      	ldr	r2, [sp, #12]
    cbf4:	685b      	ldr	r3, [r3, #4]
    cbf6:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    cbf8:	4b16      	ldr	r3, [pc, #88]	; (cc54 <uuid_check+0xb0>)
    cbfa:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cbfe:	9b01      	ldr	r3, [sp, #4]
    cc00:	4599      	cmp	r9, r3
    cc02:	d305      	bcc.n	cc10 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    cc04:	f1bb 0f00 	cmp.w	fp, #0
    cc08:	d1e1      	bne.n	cbce <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    cc0a:	3701      	adds	r7, #1
    cc0c:	3418      	adds	r4, #24
    cc0e:	e7dc      	b.n	cbca <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    cc10:	9b02      	ldr	r3, [sp, #8]
    cc12:	4642      	mov	r2, r8
    cc14:	eb03 0109 	add.w	r1, r3, r9
    cc18:	a805      	add	r0, sp, #20
    cc1a:	f011 fb94 	bl	1e346 <bt_uuid_create>
    cc1e:	2800      	cmp	r0, #0
    cc20:	d0f0      	beq.n	cc04 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    cc22:	68a1      	ldr	r1, [r4, #8]
    cc24:	a805      	add	r0, sp, #20
    cc26:	f011 fb60 	bl	1e2ea <bt_uuid_cmp>
    cc2a:	b130      	cbz	r0, cc3a <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cc2c:	44c1      	add	r9, r8
    cc2e:	e7e6      	b.n	cbfe <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    cc30:	2d00      	cmp	r5, #0
    cc32:	d1d3      	bne.n	cbdc <uuid_check+0x38>
}
    cc34:	b00b      	add	sp, #44	; 0x2c
    cc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    cc3a:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cc3c:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    cc40:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cc42:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    cc44:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    cc46:	f1bb 0f00 	cmp.w	fp, #0
    cc4a:	d1de      	bne.n	cc0a <uuid_check+0x66>
    cc4c:	e7bf      	b.n	cbce <uuid_check+0x2a>
    cc4e:	bf00      	nop
    cc50:	20009ad0 	.word	0x20009ad0
    cc54:	000236a7 	.word	0x000236a7

0000cc58 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    cc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    cc5c:	7803      	ldrb	r3, [r0, #0]
{
    cc5e:	4605      	mov	r5, r0
	switch (data->type) {
    cc60:	2b19      	cmp	r3, #25
{
    cc62:	460c      	mov	r4, r1
	switch (data->type) {
    cc64:	d812      	bhi.n	cc8c <adv_data_found+0x34>
    cc66:	2b01      	cmp	r3, #1
    cc68:	d912      	bls.n	cc90 <adv_data_found+0x38>
    cc6a:	3b02      	subs	r3, #2
    cc6c:	2b17      	cmp	r3, #23
    cc6e:	d80f      	bhi.n	cc90 <adv_data_found+0x38>
    cc70:	e8df f003 	tbb	[pc, r3]
    cc74:	7f7f7979 	.word	0x7f7f7979
    cc78:	11318181 	.word	0x11318181
    cc7c:	0e0e0e0e 	.word	0x0e0e0e0e
    cc80:	0e0e0e0e 	.word	0x0e0e0e0e
    cc84:	0e0e0e0e 	.word	0x0e0e0e0e
    cc88:	560e0e0e 	.word	0x560e0e0e
    cc8c:	2bff      	cmp	r3, #255	; 0xff
    cc8e:	d074      	beq.n	cd7a <adv_data_found+0x122>
	default:
		break;
	}

	return true;
}
    cc90:	2001      	movs	r0, #1
    cc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    cc96:	4f4d      	ldr	r7, [pc, #308]	; (cdcc <adv_data_found+0x174>)
	if (is_name_filter_enabled()) {
    cc98:	787b      	ldrb	r3, [r7, #1]
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d0f8      	beq.n	cc90 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cc9e:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    cca0:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    cca4:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cca8:	4556      	cmp	r6, sl
    ccaa:	d2f1      	bcs.n	cc90 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    ccac:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    ccb0:	4642      	mov	r2, r8
    ccb2:	4648      	mov	r0, r9
    ccb4:	6869      	ldr	r1, [r5, #4]
    ccb6:	f011 fa5b 	bl	1e170 <strncmp>
		if (adv_name_cmp(data->data,
    ccba:	b950      	cbnz	r0, ccd2 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    ccbc:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    ccbe:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    ccc2:	3301      	adds	r3, #1
    ccc4:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    ccc6:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    ccc8:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    cccc:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    ccce:	70a3      	strb	r3, [r4, #2]
    ccd0:	e7de      	b.n	cc90 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    ccd2:	3601      	adds	r6, #1
    ccd4:	e7e8      	b.n	cca8 <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    ccd6:	4e3d      	ldr	r6, [pc, #244]	; (cdcc <adv_data_found+0x174>)
	if (is_short_name_filter_enabled()) {
    ccd8:	78f3      	ldrb	r3, [r6, #3]
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d0d8      	beq.n	cc90 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    ccde:	78b3      	ldrb	r3, [r6, #2]
    cce0:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cce4:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    cce8:	18f7      	adds	r7, r6, r3
    ccea:	42be      	cmp	r6, r7
    ccec:	d0d0      	beq.n	cc90 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    ccee:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    ccf2:	4543      	cmp	r3, r8
    ccf4:	d812      	bhi.n	cd1c <adv_data_found+0xc4>
    ccf6:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    ccfa:	4642      	mov	r2, r8
    ccfc:	4648      	mov	r0, r9
    ccfe:	6869      	ldr	r1, [r5, #4]
    cd00:	f011 fa36 	bl	1e170 <strncmp>
	if ((data_len >= short_name_min_len) &&
    cd04:	b950      	cbnz	r0, cd1c <adv_data_found+0xc4>
			control->filter_match_cnt++;
    cd06:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    cd08:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    cd0c:	3301      	adds	r3, #1
    cd0e:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    cd10:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    cd12:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    cd16:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    cd1a:	e7d8      	b.n	ccce <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cd1c:	3621      	adds	r6, #33	; 0x21
    cd1e:	e7e4      	b.n	ccea <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    cd20:	482a      	ldr	r0, [pc, #168]	; (cdcc <adv_data_found+0x174>)
	if (is_appearance_filter_enabled()) {
    cd22:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    cd26:	2b00      	cmp	r3, #0
    cd28:	d0b2      	beq.n	cc90 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cd2a:	2300      	movs	r3, #0
	const uint8_t counter =
    cd2c:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
	uint8_t data_len = data->data_len;
    cd30:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    cd32:	42b3      	cmp	r3, r6
    cd34:	d2ac      	bcs.n	cc90 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    cd36:	2f02      	cmp	r7, #2
    cd38:	d113      	bne.n	cd62 <adv_data_found+0x10a>
	if (decoded_appearance == *appearance) {
    cd3a:	686a      	ldr	r2, [r5, #4]
    cd3c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    cd40:	8812      	ldrh	r2, [r2, #0]
    cd42:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    cd44:	ba52      	rev16	r2, r2
    cd46:	b292      	uxth	r2, r2
    cd48:	4291      	cmp	r1, r2
    cd4a:	d10a      	bne.n	cd62 <adv_data_found+0x10a>
		if (find_appearance(data->data,
    cd4c:	3312      	adds	r3, #18
    cd4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    cd52:	6463      	str	r3, [r4, #68]	; 0x44
			control->filter_match_cnt++;
    cd54:	7863      	ldrb	r3, [r4, #1]
    cd56:	3301      	adds	r3, #1
    cd58:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    cd5a:	2301      	movs	r3, #1
    cd5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			control->filter_match = true;
    cd60:	e7b5      	b.n	ccce <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cd62:	3301      	adds	r3, #1
    cd64:	e7e5      	b.n	cd32 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    cd66:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    cd68:	4629      	mov	r1, r5
    cd6a:	4620      	mov	r0, r4
    cd6c:	f7ff ff1a 	bl	cba4 <uuid_check>
		break;
    cd70:	e78e      	b.n	cc90 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    cd72:	2201      	movs	r2, #1
    cd74:	e7f8      	b.n	cd68 <adv_data_found+0x110>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    cd76:	2202      	movs	r2, #2
    cd78:	e7f6      	b.n	cd68 <adv_data_found+0x110>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    cd7a:	f8df 8050 	ldr.w	r8, [pc, #80]	; cdcc <adv_data_found+0x174>
	if (is_manufacturer_data_filter_enabled()) {
    cd7e:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
    cd82:	2b00      	cmp	r3, #0
    cd84:	d084      	beq.n	cc90 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    cd86:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    cd88:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    cd8a:	f817 9f26 	ldrb.w	r9, [r7, #38]!
	for (size_t i = 0; i < counter; i++) {
    cd8e:	454e      	cmp	r6, r9
    cd90:	f4bf af7e 	bcs.w	cc90 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    cd94:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    cd98:	786b      	ldrb	r3, [r5, #1]
    cd9a:	4293      	cmp	r3, r2
    cd9c:	d313      	bcc.n	cdc6 <adv_data_found+0x16e>
	if (memcmp(target_data, data, target_data_len) != 0) {
    cd9e:	4638      	mov	r0, r7
    cda0:	6869      	ldr	r1, [r5, #4]
    cda2:	f011 f9f6 	bl	1e192 <memcmp>
    cda6:	b970      	cbnz	r0, cdc6 <adv_data_found+0x16e>
				md_filter->manufacturer_data[i].data_len;
    cda8:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    cdac:	64e7      	str	r7, [r4, #76]	; 0x4c
				md_filter->manufacturer_data[i].data_len;
    cdae:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    cdb0:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
    cdb4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			control->filter_match_cnt++;
    cdb8:	7863      	ldrb	r3, [r4, #1]
    cdba:	3301      	adds	r3, #1
    cdbc:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    cdbe:	2301      	movs	r3, #1
    cdc0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    cdc4:	e783      	b.n	ccce <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cdc6:	3601      	adds	r6, #1
    cdc8:	3721      	adds	r7, #33	; 0x21
    cdca:	e7e0      	b.n	cd8e <adv_data_found+0x136>
    cdcc:	20009ad0 	.word	0x20009ad0

0000cdd0 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cdd2:	4605      	mov	r5, r0
    cdd4:	460e      	mov	r6, r1
    cdd6:	4617      	mov	r7, r2
	return list->head;
    cdd8:	4b08      	ldr	r3, [pc, #32]	; (cdfc <notify_filter_matched.constprop.0+0x2c>)
    cdda:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cddc:	b10c      	cbz	r4, cde2 <notify_filter_matched.constprop.0+0x12>
    cdde:	3c04      	subs	r4, #4
    cde0:	b904      	cbnz	r4, cde4 <notify_filter_matched.constprop.0+0x14>
}
    cde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    cde4:	6823      	ldr	r3, [r4, #0]
    cde6:	681b      	ldr	r3, [r3, #0]
    cde8:	b11b      	cbz	r3, cdf2 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    cdea:	463a      	mov	r2, r7
    cdec:	4631      	mov	r1, r6
    cdee:	4628      	mov	r0, r5
    cdf0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cdf2:	1d23      	adds	r3, r4, #4
    cdf4:	d0f5      	beq.n	cde2 <notify_filter_matched.constprop.0+0x12>
	return node->next;
    cdf6:	6864      	ldr	r4, [r4, #4]
    cdf8:	e7f0      	b.n	cddc <notify_filter_matched.constprop.0+0xc>
    cdfa:	bf00      	nop
    cdfc:	20009b1c 	.word	0x20009b1c

0000ce00 <bt_scan_cb_register>:
	if (!cb) {
    ce00:	b150      	cbz	r0, ce18 <bt_scan_cb_register+0x18>
	parent->next = child;
    ce02:	2300      	movs	r3, #0
    ce04:	6043      	str	r3, [r0, #4]
	return list->tail;
    ce06:	4b05      	ldr	r3, [pc, #20]	; (ce1c <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    ce08:	1d02      	adds	r2, r0, #4
    ce0a:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    ce0c:	b911      	cbnz	r1, ce14 <bt_scan_cb_register+0x14>
	list->head = node;
    ce0e:	e9c3 2200 	strd	r2, r2, [r3]
}
    ce12:	4770      	bx	lr
	parent->next = child;
    ce14:	600a      	str	r2, [r1, #0]
	list->tail = node;
    ce16:	605a      	str	r2, [r3, #4]
}
    ce18:	4770      	bx	lr
    ce1a:	bf00      	nop
    ce1c:	20009b1c 	.word	0x20009b1c

0000ce20 <bt_scan_filter_add>:
{
    ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce22:	4605      	mov	r5, r0
	if (!data) {
    ce24:	460c      	mov	r4, r1
    ce26:	2900      	cmp	r1, #0
    ce28:	d048      	beq.n	cebc <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    ce2a:	f04f 32ff 	mov.w	r2, #4294967295
    ce2e:	f04f 33ff 	mov.w	r3, #4294967295
    ce32:	4824      	ldr	r0, [pc, #144]	; (cec4 <bt_scan_filter_add+0xa4>)
    ce34:	f00d f892 	bl	19f5c <z_impl_k_mutex_lock>
	switch (type) {
    ce38:	2d03      	cmp	r5, #3
    ce3a:	d00c      	beq.n	ce56 <bt_scan_filter_add+0x36>
    ce3c:	d938      	bls.n	ceb0 <bt_scan_filter_add+0x90>
    ce3e:	3d04      	subs	r5, #4
		err = -EINVAL;
    ce40:	2d01      	cmp	r5, #1
    ce42:	bf94      	ite	ls
    ce44:	f06f 040b 	mvnls.w	r4, #11
    ce48:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    ce4c:	481d      	ldr	r0, [pc, #116]	; (cec4 <bt_scan_filter_add+0xa4>)
    ce4e:	f00d f951 	bl	1a0f4 <z_impl_k_mutex_unlock>
}
    ce52:	4620      	mov	r0, r4
    ce54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    ce56:	4a1c      	ldr	r2, [pc, #112]	; (cec8 <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    ce58:	f892 3020 	ldrb.w	r3, [r2, #32]
    ce5c:	bb43      	cbnz	r3, ceb0 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
    ce5e:	7823      	ldrb	r3, [r4, #0]
    ce60:	2b01      	cmp	r3, #1
    ce62:	d00c      	beq.n	ce7e <bt_scan_filter_add+0x5e>
    ce64:	2b02      	cmp	r3, #2
    ce66:	d011      	beq.n	ce8c <bt_scan_filter_add+0x6c>
    ce68:	bb2b      	cbnz	r3, ceb6 <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    ce6a:	6820      	ldr	r0, [r4, #0]
    ce6c:	f102 030c 	add.w	r3, r2, #12
    ce70:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    ce72:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    ce74:	2301      	movs	r3, #1
	return 0;
    ce76:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
    ce78:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    ce7c:	e7e6      	b.n	ce4c <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    ce7e:	f102 030c 	add.w	r3, r2, #12
    ce82:	e894 0003 	ldmia.w	r4, {r0, r1}
    ce86:	e883 0003 	stmia.w	r3, {r0, r1}
    ce8a:	e7f2      	b.n	ce72 <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    ce8c:	4623      	mov	r3, r4
    ce8e:	f102 040c 	add.w	r4, r2, #12
    ce92:	4626      	mov	r6, r4
    ce94:	f103 0710 	add.w	r7, r3, #16
    ce98:	4625      	mov	r5, r4
    ce9a:	6818      	ldr	r0, [r3, #0]
    ce9c:	6859      	ldr	r1, [r3, #4]
    ce9e:	3308      	adds	r3, #8
    cea0:	c503      	stmia	r5!, {r0, r1}
    cea2:	42bb      	cmp	r3, r7
    cea4:	462c      	mov	r4, r5
    cea6:	d1f7      	bne.n	ce98 <bt_scan_filter_add+0x78>
    cea8:	781b      	ldrb	r3, [r3, #0]
    ceaa:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
    ceac:	6096      	str	r6, [r2, #8]
		break;
    ceae:	e7e1      	b.n	ce74 <bt_scan_filter_add+0x54>
		return -ENOMEM;
    ceb0:	f06f 040b 	mvn.w	r4, #11
    ceb4:	e7ca      	b.n	ce4c <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    ceb6:	f06f 0415 	mvn.w	r4, #21
    ceba:	e7c7      	b.n	ce4c <bt_scan_filter_add+0x2c>
		return -EINVAL;
    cebc:	f06f 0415 	mvn.w	r4, #21
    cec0:	e7c7      	b.n	ce52 <bt_scan_filter_add+0x32>
    cec2:	bf00      	nop
    cec4:	20008538 	.word	0x20008538
    cec8:	20009ad0 	.word	0x20009ad0

0000cecc <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    cecc:	2200      	movs	r2, #0
    cece:	4b05      	ldr	r3, [pc, #20]	; (cee4 <bt_scan_filter_disable+0x18>)
    ced0:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    ced2:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    ced4:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    ced6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    ceda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    cede:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    cee2:	4770      	bx	lr
    cee4:	20009ad0 	.word	0x20009ad0

0000cee8 <bt_scan_filter_enable>:
{
    cee8:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    ceea:	0683      	lsls	r3, r0, #26
    ceec:	d025      	beq.n	cf3a <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    ceee:	f7ff ffed 	bl	cecc <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    cef2:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    cef6:	bf18      	it	ne
    cef8:	2201      	movne	r2, #1
    cefa:	4b11      	ldr	r3, [pc, #68]	; (cf40 <bt_scan_filter_enable+0x58>)
    cefc:	bf18      	it	ne
    cefe:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    cf00:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    cf02:	bf44      	itt	mi
    cf04:	2201      	movmi	r2, #1
    cf06:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    cf08:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    cf0a:	bf44      	itt	mi
    cf0c:	2201      	movmi	r2, #1
    cf0e:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    cf10:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    cf12:	bf44      	itt	mi
    cf14:	2201      	movmi	r2, #1
    cf16:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    cf1a:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    cf1c:	bf44      	itt	mi
    cf1e:	2201      	movmi	r2, #1
    cf20:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    cf24:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    cf26:	bf48      	it	mi
    cf28:	2201      	movmi	r2, #1
	return 0;
    cf2a:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    cf2e:	bf48      	it	mi
    cf30:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    cf34:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    cf38:	bd08      	pop	{r3, pc}
		return -EINVAL;
    cf3a:	f06f 0015 	mvn.w	r0, #21
    cf3e:	e7fb      	b.n	cf38 <bt_scan_filter_enable+0x50>
    cf40:	20009ad0 	.word	0x20009ad0

0000cf44 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    cf44:	b570      	push	{r4, r5, r6, lr}
    cf46:	460e      	mov	r6, r1
    cf48:	b086      	sub	sp, #24
    cf4a:	4605      	mov	r5, r0
	bt_scan_stop();
    cf4c:	f010 fb79 	bl	1d642 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    cf50:	4b18      	ldr	r3, [pc, #96]	; (cfb4 <scan_connect_with_target.part.0+0x70>)
    cf52:	ac02      	add	r4, sp, #8
    cf54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    cf56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    cf5a:	4621      	mov	r1, r4
    cf5c:	ab01      	add	r3, sp, #4
    cf5e:	4630      	mov	r0, r6
    cf60:	4a15      	ldr	r2, [pc, #84]	; (cfb8 <scan_connect_with_target.part.0+0x74>)
    cf62:	f004 fbf9 	bl	11758 <bt_conn_le_create>
	if (err) {
    cf66:	4b15      	ldr	r3, [pc, #84]	; (cfbc <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    cf68:	3508      	adds	r5, #8
	return list->head;
    cf6a:	681c      	ldr	r4, [r3, #0]
	if (err) {
    cf6c:	b168      	cbz	r0, cf8a <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cf6e:	b10c      	cbz	r4, cf74 <scan_connect_with_target.part.0+0x30>
    cf70:	3c04      	subs	r4, #4
    cf72:	b90c      	cbnz	r4, cf78 <scan_connect_with_target.part.0+0x34>
}
    cf74:	b006      	add	sp, #24
    cf76:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    cf78:	6823      	ldr	r3, [r4, #0]
    cf7a:	689b      	ldr	r3, [r3, #8]
    cf7c:	b10b      	cbz	r3, cf82 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    cf7e:	4628      	mov	r0, r5
    cf80:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cf82:	1d22      	adds	r2, r4, #4
    cf84:	d0f6      	beq.n	cf74 <scan_connect_with_target.part.0+0x30>
	return node->next;
    cf86:	6864      	ldr	r4, [r4, #4]
    cf88:	e7f1      	b.n	cf6e <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cf8a:	b91c      	cbnz	r4, cf94 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    cf8c:	9801      	ldr	r0, [sp, #4]
    cf8e:	f004 fa29 	bl	113e4 <bt_conn_unref>
    cf92:	e7ef      	b.n	cf74 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    cf94:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cf96:	3c04      	subs	r4, #4
    cf98:	2c00      	cmp	r4, #0
    cf9a:	d0f7      	beq.n	cf8c <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    cf9c:	6823      	ldr	r3, [r4, #0]
    cf9e:	68db      	ldr	r3, [r3, #12]
    cfa0:	b113      	cbz	r3, cfa8 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    cfa2:	4631      	mov	r1, r6
    cfa4:	4628      	mov	r0, r5
    cfa6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cfa8:	1d23      	adds	r3, r4, #4
    cfaa:	d0ef      	beq.n	cf8c <scan_connect_with_target.part.0+0x48>
	return node->next;
    cfac:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cfae:	2c00      	cmp	r4, #0
    cfb0:	d1f1      	bne.n	cf96 <scan_connect_with_target.part.0+0x52>
    cfb2:	e7eb      	b.n	cf8c <scan_connect_with_target.part.0+0x48>
    cfb4:	00021a48 	.word	0x00021a48
    cfb8:	20009b14 	.word	0x20009b14
    cfbc:	20009b1c 	.word	0x20009b1c

0000cfc0 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cfc4:	4c54      	ldr	r4, [pc, #336]	; (d118 <scan_recv+0x158>)
{
    cfc6:	b097      	sub	sp, #92	; 0x5c
	memset(&scan_control, 0, sizeof(scan_control));
    cfc8:	2254      	movs	r2, #84	; 0x54
{
    cfca:	4606      	mov	r6, r0
    cfcc:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    cfce:	a801      	add	r0, sp, #4
    cfd0:	2100      	movs	r1, #0
    cfd2:	f011 f91a 	bl	1e20a <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cfd6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return bt_scan.scan_filters.addr.enabled;
    cfda:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cfdc:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    cfe0:	2300      	movs	r3, #0
    cfe2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    cfe6:	b112      	cbz	r2, cfee <scan_recv+0x2e>
		control->filter_cnt++;
    cfe8:	2301      	movs	r3, #1
    cfea:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    cfee:	7863      	ldrb	r3, [r4, #1]
    cff0:	b123      	cbz	r3, cffc <scan_recv+0x3c>
		control->filter_cnt++;
    cff2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cff6:	3301      	adds	r3, #1
    cff8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    cffc:	78e3      	ldrb	r3, [r4, #3]
    cffe:	b123      	cbz	r3, d00a <scan_recv+0x4a>
		control->filter_cnt++;
    d000:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d004:	3301      	adds	r3, #1
    d006:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    d00a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d00e:	b123      	cbz	r3, d01a <scan_recv+0x5a>
		control->filter_cnt++;
    d010:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d014:	3301      	adds	r3, #1
    d016:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    d01a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    d01e:	b123      	cbz	r3, d02a <scan_recv+0x6a>
		control->filter_cnt++;
    d020:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d024:	3301      	adds	r3, #1
    d026:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    d02a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d02e:	b123      	cbz	r3, d03a <scan_recv+0x7a>
		control->filter_cnt++;
    d030:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d034:	3301      	adds	r3, #1
    d036:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    d03a:	7a33      	ldrb	r3, [r6, #8]
    d03c:	f003 0301 	and.w	r3, r3, #1
    d040:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    d044:	b1ea      	cbz	r2, d082 <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    d046:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    d04a:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    d04e:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    d052:	4f32      	ldr	r7, [pc, #200]	; (d11c <scan_recv+0x15c>)
    d054:	45c8      	cmp	r8, r9
    d056:	d214      	bcs.n	d082 <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    d058:	4639      	mov	r1, r7
    d05a:	2207      	movs	r2, #7
    d05c:	4650      	mov	r0, sl
    d05e:	f011 f898 	bl	1e192 <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    d062:	46bb      	mov	fp, r7
    d064:	3707      	adds	r7, #7
    d066:	2800      	cmp	r0, #0
    d068:	d13a      	bne.n	d0e0 <scan_recv+0x120>
			control->filter_match_cnt++;
    d06a:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    d06e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    d072:	3301      	adds	r3, #1
    d074:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    d078:	2301      	movs	r3, #1
    d07a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    d07e:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    d082:	4628      	mov	r0, r5
    d084:	f013 fa1a 	bl	204bc <net_buf_simple_headroom>
    d088:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    d08a:	4925      	ldr	r1, [pc, #148]	; (d120 <scan_recv+0x160>)
    d08c:	4628      	mov	r0, r5
    d08e:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    d090:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    d094:	f002 fd50 	bl	fb38 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    d098:	4b22      	ldr	r3, [pc, #136]	; (d124 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    d09a:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    d09c:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    d0a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d0a4:	fa10 f787 	uxtah	r7, r0, r7
    d0a8:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    d0aa:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    d0ae:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    d0b0:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    d0b2:	b1c3      	cbz	r3, d0e6 <scan_recv+0x126>
    d0b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    d0b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d0bc:	429a      	cmp	r2, r3
    d0be:	d116      	bne.n	d0ee <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    d0c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d0c4:	a906      	add	r1, sp, #24
    d0c6:	a803      	add	r0, sp, #12
    d0c8:	f7ff fe82 	bl	cdd0 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    d0cc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    d0d0:	b11b      	cbz	r3, d0da <scan_recv+0x11a>
    d0d2:	4629      	mov	r1, r5
    d0d4:	a801      	add	r0, sp, #4
    d0d6:	f7ff ff35 	bl	cf44 <scan_connect_with_target.part.0>
}
    d0da:	b017      	add	sp, #92	; 0x5c
    d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    d0e0:	f108 0801 	add.w	r8, r8, #1
    d0e4:	e7b6      	b.n	d054 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    d0e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d0ea:	2b00      	cmp	r3, #0
    d0ec:	d1e8      	bne.n	d0c0 <scan_recv+0x100>
	return list->head;
    d0ee:	4b0e      	ldr	r3, [pc, #56]	; (d128 <scan_recv+0x168>)
    d0f0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0f2:	2c00      	cmp	r4, #0
    d0f4:	d0f1      	beq.n	d0da <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    d0f6:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0fa:	3c04      	subs	r4, #4
    d0fc:	2c00      	cmp	r4, #0
    d0fe:	d0ec      	beq.n	d0da <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    d100:	6823      	ldr	r3, [r4, #0]
    d102:	685b      	ldr	r3, [r3, #4]
    d104:	b113      	cbz	r3, d10c <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    d106:	4629      	mov	r1, r5
    d108:	a803      	add	r0, sp, #12
    d10a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d10c:	1d23      	adds	r3, r4, #4
    d10e:	d0e4      	beq.n	d0da <scan_recv+0x11a>
	return node->next;
    d110:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d112:	2c00      	cmp	r4, #0
    d114:	d1f1      	bne.n	d0fa <scan_recv+0x13a>
    d116:	e7e0      	b.n	d0da <scan_recv+0x11a>
    d118:	20009ad0 	.word	0x20009ad0
    d11c:	20009ad4 	.word	0x20009ad4
    d120:	0000cc59 	.word	0x0000cc59
    d124:	20009b14 	.word	0x20009b14
    d128:	20009b1c 	.word	0x20009b1c

0000d12c <bt_scan_init>:
{
    d12c:	b570      	push	{r4, r5, r6, lr}
    d12e:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d130:	4c14      	ldr	r4, [pc, #80]	; (d184 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    d132:	4815      	ldr	r0, [pc, #84]	; (d188 <bt_scan_init+0x5c>)
    d134:	f003 fd5e 	bl	10bf4 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d138:	222c      	movs	r2, #44	; 0x2c
    d13a:	2100      	movs	r1, #0
    d13c:	4620      	mov	r0, r4
    d13e:	f011 f864 	bl	1e20a <memset>
	if (init) {
    d142:	b1be      	cbz	r6, d174 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    d144:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    d146:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    d148:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    d14c:	b15d      	cbz	r5, d166 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    d14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d150:	3430      	adds	r4, #48	; 0x30
    d152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d154:	682b      	ldr	r3, [r5, #0]
    d156:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    d158:	68b2      	ldr	r2, [r6, #8]
    d15a:	b13a      	cbz	r2, d16c <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    d15c:	4b0b      	ldr	r3, [pc, #44]	; (d18c <bt_scan_init+0x60>)
    d15e:	6810      	ldr	r0, [r2, #0]
    d160:	6851      	ldr	r1, [r2, #4]
    d162:	c303      	stmia	r3!, {r0, r1}
}
    d164:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    d166:	f7ff fcff 	bl	cb68 <scan_default_param_set>
    d16a:	e7f5      	b.n	d158 <bt_scan_init+0x2c>
}
    d16c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    d170:	f7ff bd0c 	b.w	cb8c <scan_default_conn_param_set>
		scan_default_param_set();
    d174:	f7ff fcf8 	bl	cb68 <scan_default_param_set>
		scan_default_conn_param_set();
    d178:	f7ff fd08 	bl	cb8c <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    d17c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
    d180:	e7f0      	b.n	d164 <bt_scan_init+0x38>
    d182:	bf00      	nop
    d184:	20009ad0 	.word	0x20009ad0
    d188:	2000826c 	.word	0x2000826c
    d18c:	20009b14 	.word	0x20009b14

0000d190 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    d190:	b108      	cbz	r0, d196 <bt_scan_start+0x6>
    d192:	2801      	cmp	r0, #1
    d194:	d106      	bne.n	d1a4 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d196:	4b05      	ldr	r3, [pc, #20]	; (d1ac <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d198:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d19a:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d19e:	4804      	ldr	r0, [pc, #16]	; (d1b0 <bt_scan_start+0x20>)
    d1a0:	f003 bcae 	b.w	10b00 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    d1a4:	f06f 0015 	mvn.w	r0, #21
    d1a8:	4770      	bx	lr
    d1aa:	bf00      	nop
    d1ac:	20009ad0 	.word	0x20009ad0
    d1b0:	20009b00 	.word	0x20009b00

0000d1b4 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d1b4:	1e4b      	subs	r3, r1, #1
    d1b6:	4259      	negs	r1, r3
    d1b8:	4159      	adcs	r1, r3
    d1ba:	4b01      	ldr	r3, [pc, #4]	; (d1c0 <lbslc_ccc_cfg_changed+0xc>)
    d1bc:	7019      	strb	r1, [r3, #0]
}
    d1be:	4770      	bx	lr
    d1c0:	2000b235 	.word	0x2000b235

0000d1c4 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d1c4:	b510      	push	{r4, lr}
    d1c6:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d1c8:	4b03      	ldr	r3, [pc, #12]	; (d1d8 <write_led+0x14>)
    d1ca:	681b      	ldr	r3, [r3, #0]
    d1cc:	b10b      	cbz	r3, d1d2 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d1ce:	7810      	ldrb	r0, [r2, #0]
    d1d0:	4798      	blx	r3
	}

	return len;
}
    d1d2:	4620      	mov	r0, r4
    d1d4:	bd10      	pop	{r4, pc}
    d1d6:	bf00      	nop
    d1d8:	20009b24 	.word	0x20009b24

0000d1dc <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d1dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d1e0:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d1e2:	4b0d      	ldr	r3, [pc, #52]	; (d218 <read_button+0x3c>)
{
    d1e4:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d1e6:	6858      	ldr	r0, [r3, #4]
{
    d1e8:	460c      	mov	r4, r1
    d1ea:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d1ec:	b180      	cbz	r0, d210 <read_button+0x34>
	const char *value = attr->user_data;
    d1ee:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d1f2:	4780      	blx	r0
    d1f4:	4b09      	ldr	r3, [pc, #36]	; (d21c <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d1f6:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d1f8:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d1fa:	2301      	movs	r3, #1
    d1fc:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d200:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d204:	4621      	mov	r1, r4
    d206:	9300      	str	r3, [sp, #0]
    d208:	4628      	mov	r0, r5
    d20a:	463b      	mov	r3, r7
    d20c:	f012 fadc 	bl	1f7c8 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d210:	b004      	add	sp, #16
    d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d216:	bf00      	nop
    d218:	20009b24 	.word	0x20009b24
    d21c:	2000b234 	.word	0x2000b234

0000d220 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d220:	b120      	cbz	r0, d22c <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d222:	4b03      	ldr	r3, [pc, #12]	; (d230 <bt_lbs_init+0x10>)
    d224:	6802      	ldr	r2, [r0, #0]
    d226:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d228:	6842      	ldr	r2, [r0, #4]
    d22a:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d22c:	2000      	movs	r0, #0
    d22e:	4770      	bx	lr
    d230:	20009b24 	.word	0x20009b24

0000d234 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d234:	b500      	push	{lr}
	if (!notify_enabled) {
    d236:	4b0e      	ldr	r3, [pc, #56]	; (d270 <bt_lbs_send_button_state+0x3c>)
{
    d238:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d23a:	781b      	ldrb	r3, [r3, #0]
{
    d23c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d240:	b19b      	cbz	r3, d26a <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d242:	2100      	movs	r1, #0
    d244:	2218      	movs	r2, #24
    d246:	a802      	add	r0, sp, #8
    d248:	f010 ffdf 	bl	1e20a <memset>

	params.attr = attr;
    d24c:	4b09      	ldr	r3, [pc, #36]	; (d274 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d24e:	2000      	movs	r0, #0
	params.attr = attr;
    d250:	9303      	str	r3, [sp, #12]
	params.data = data;
    d252:	f10d 0307 	add.w	r3, sp, #7
    d256:	9304      	str	r3, [sp, #16]
	params.len = len;
    d258:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d25a:	a902      	add	r1, sp, #8
	params.len = len;
    d25c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d260:	f006 fef8 	bl	14054 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d264:	b009      	add	sp, #36	; 0x24
    d266:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d26a:	f06f 000c 	mvn.w	r0, #12
    d26e:	e7f9      	b.n	d264 <bt_lbs_send_button_state+0x30>
    d270:	2000b235 	.word	0x2000b235
    d274:	00021d50 	.word	0x00021d50

0000d278 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d278:	2303      	movs	r3, #3
static void _DoInit(void) {
    d27a:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d27c:	4c10      	ldr	r4, [pc, #64]	; (d2c0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d27e:	4a11      	ldr	r2, [pc, #68]	; (d2c4 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d280:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d284:	4b10      	ldr	r3, [pc, #64]	; (d2c8 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d286:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d288:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d28e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d290:	4a0e      	ldr	r2, [pc, #56]	; (d2cc <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d292:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d294:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d296:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d298:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d29a:	490d      	ldr	r1, [pc, #52]	; (d2d0 <_DoInit+0x58>)
    d29c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d29e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d2a0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d2a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d2a4:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d2a6:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d2a8:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d2aa:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d2ac:	f010 ff28 	bl	1e100 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d2b0:	4620      	mov	r0, r4
    d2b2:	4908      	ldr	r1, [pc, #32]	; (d2d4 <_DoInit+0x5c>)
    d2b4:	f010 ff24 	bl	1e100 <strcpy>
  p->acID[6] = ' ';
    d2b8:	2320      	movs	r3, #32
    d2ba:	71a3      	strb	r3, [r4, #6]
}
    d2bc:	bd10      	pop	{r4, pc}
    d2be:	bf00      	nop
    d2c0:	20009b2c 	.word	0x20009b2c
    d2c4:	00023706 	.word	0x00023706
    d2c8:	2000b246 	.word	0x2000b246
    d2cc:	2000b236 	.word	0x2000b236
    d2d0:	0002370f 	.word	0x0002370f
    d2d4:	00023713 	.word	0x00023713

0000d2d8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d2d8:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d2da:	2418      	movs	r4, #24
    d2dc:	fb00 4504 	mla	r5, r0, r4, r4
    d2e0:	4b14      	ldr	r3, [pc, #80]	; (d334 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d2e2:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d2e4:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d2e6:	fb04 3300 	mla	r3, r4, r0, r3
    d2ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d2ec:	2c01      	cmp	r4, #1
    d2ee:	d00e      	beq.n	d30e <SEGGER_RTT_WriteNoLock+0x36>
    d2f0:	2c02      	cmp	r4, #2
    d2f2:	d018      	beq.n	d326 <SEGGER_RTT_WriteNoLock+0x4e>
    d2f4:	b9e4      	cbnz	r4, d330 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d2f6:	4628      	mov	r0, r5
    d2f8:	f010 f9b1 	bl	1d65e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d2fc:	4286      	cmp	r6, r0
    d2fe:	d804      	bhi.n	d30a <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d300:	4632      	mov	r2, r6
    d302:	4628      	mov	r0, r5
    d304:	f010 f9b4 	bl	1d670 <_WriteNoCheck>
    d308:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d30a:	4620      	mov	r0, r4
    d30c:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d30e:	4628      	mov	r0, r5
    d310:	f010 f9a5 	bl	1d65e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d314:	4286      	cmp	r6, r0
    d316:	4634      	mov	r4, r6
    d318:	bf28      	it	cs
    d31a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d31c:	4628      	mov	r0, r5
    d31e:	4622      	mov	r2, r4
    d320:	f010 f9a6 	bl	1d670 <_WriteNoCheck>
    break;
    d324:	e7f1      	b.n	d30a <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d326:	4628      	mov	r0, r5
}
    d328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d32c:	f010 b9bc 	b.w	1d6a8 <_WriteBlocking>
  switch (pRing->Flags) {
    d330:	2400      	movs	r4, #0
  return Status;
    d332:	e7ea      	b.n	d30a <SEGGER_RTT_WriteNoLock+0x32>
    d334:	20009b2c 	.word	0x20009b2c

0000d338 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d338:	4904      	ldr	r1, [pc, #16]	; (d34c <sub_bytes+0x14>)
    d33a:	1e43      	subs	r3, r0, #1
    d33c:	300f      	adds	r0, #15
    d33e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d342:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d344:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d346:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d348:	d1f9      	bne.n	d33e <sub_bytes+0x6>
	}
}
    d34a:	4770      	bx	lr
    d34c:	0002371a 	.word	0x0002371a

0000d350 <tc_aes128_set_encrypt_key>:
{
    d350:	b5f0      	push	{r4, r5, r6, r7, lr}
    d352:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d354:	4e26      	ldr	r6, [pc, #152]	; (d3f0 <tc_aes128_set_encrypt_key+0xa0>)
{
    d356:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d358:	ad01      	add	r5, sp, #4
{
    d35a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d35c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d35e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d360:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d364:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d368:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d36c:	4638      	mov	r0, r7
    d36e:	2f00      	cmp	r7, #0
    d370:	d039      	beq.n	d3e6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d372:	2c00      	cmp	r4, #0
    d374:	d039      	beq.n	d3ea <tc_aes128_set_encrypt_key+0x9a>
    d376:	1f38      	subs	r0, r7, #4
    d378:	4602      	mov	r2, r0
    d37a:	4621      	mov	r1, r4
    d37c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d37e:	784b      	ldrb	r3, [r1, #1]
    d380:	780d      	ldrb	r5, [r1, #0]
    d382:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d384:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d388:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d38a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d38c:	432b      	orrs	r3, r5
    d38e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d392:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d394:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d398:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d39c:	d1ef      	bne.n	d37e <tc_aes128_set_encrypt_key+0x2e>
    d39e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d3a0:	4c14      	ldr	r4, [pc, #80]	; (d3f4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d3a2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d3a4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d3a6:	d116      	bne.n	d3d6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d3a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d3ac:	5ca5      	ldrb	r5, [r4, r2]
    d3ae:	0e1a      	lsrs	r2, r3, #24
    d3b0:	5ca2      	ldrb	r2, [r4, r2]
    d3b2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d3b6:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d3ba:	5d65      	ldrb	r5, [r4, r5]
    d3bc:	b2db      	uxtb	r3, r3
    d3be:	5ce3      	ldrb	r3, [r4, r3]
    d3c0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d3c4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d3c8:	ad0c      	add	r5, sp, #48	; 0x30
    d3ca:	f021 0303 	bic.w	r3, r1, #3
    d3ce:	442b      	add	r3, r5
    d3d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d3d4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d3d6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d3da:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d3dc:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d3de:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d3e0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d3e2:	d1de      	bne.n	d3a2 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d3e4:	2001      	movs	r0, #1
}
    d3e6:	b00d      	add	sp, #52	; 0x34
    d3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d3ea:	4620      	mov	r0, r4
    d3ec:	e7fb      	b.n	d3e6 <tc_aes128_set_encrypt_key+0x96>
    d3ee:	bf00      	nop
    d3f0:	00021a58 	.word	0x00021a58
    d3f4:	0002371a 	.word	0x0002371a

0000d3f8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d3fc:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d3fe:	6803      	ldr	r3, [r0, #0]
{
    d400:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d402:	9302      	str	r3, [sp, #8]
    d404:	6843      	ldr	r3, [r0, #4]
    d406:	f8df a1b8 	ldr.w	sl, [pc, #440]	; d5c0 <compress+0x1c8>
    d40a:	9303      	str	r3, [sp, #12]
    d40c:	6883      	ldr	r3, [r0, #8]
    d40e:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d412:	9304      	str	r3, [sp, #16]
    d414:	68c3      	ldr	r3, [r0, #12]
    d416:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d418:	6903      	ldr	r3, [r0, #16]
    d41a:	9306      	str	r3, [sp, #24]
    d41c:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d41e:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d422:	9307      	str	r3, [sp, #28]
    d424:	6983      	ldr	r3, [r0, #24]
    d426:	9308      	str	r3, [sp, #32]
    d428:	69c3      	ldr	r3, [r0, #28]
    d42a:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d42e:	4698      	mov	r8, r3
    d430:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d432:	9b04      	ldr	r3, [sp, #16]
    d434:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d436:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d438:	ab0c      	add	r3, sp, #48	; 0x30
    d43a:	ba2d      	rev	r5, r5
    d43c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d43e:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d442:	3704      	adds	r7, #4
    d444:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d448:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d44c:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d450:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d454:	444d      	add	r5, r9
    d456:	ea2b 0302 	bic.w	r3, fp, r2
    d45a:	ea02 090c 	and.w	r9, r2, ip
    d45e:	ea83 0309 	eor.w	r3, r3, r9
    d462:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d464:	9d00      	ldr	r5, [sp, #0]
    d466:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d46a:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d46c:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d46e:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d472:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d476:	4025      	ands	r5, r4
    d478:	ea06 0909 	and.w	r9, r6, r9
    d47c:	ea85 0509 	eor.w	r5, r5, r9
    d480:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d484:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d486:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d488:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d48c:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d48e:	f8dd e000 	ldr.w	lr, [sp]
    d492:	46d8      	mov	r8, fp
    d494:	f040 8085 	bne.w	d5a2 <compress+0x1aa>
    d498:	f04f 0a10 	mov.w	sl, #16
    d49c:	4949      	ldr	r1, [pc, #292]	; (d5c4 <compress+0x1cc>)
    d49e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d4a0:	4651      	mov	r1, sl
    d4a2:	f10a 0a01 	add.w	sl, sl, #1
    d4a6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d4aa:	f00a 070f 	and.w	r7, sl, #15
    d4ae:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d4b2:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d4b6:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d4ba:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d4be:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d4c0:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d4c4:	f101 070e 	add.w	r7, r1, #14
    d4c8:	f007 070f 	and.w	r7, r7, #15
    d4cc:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d4d0:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d4d4:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d4d6:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d4da:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    d4de:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d4e2:	f001 010f 	and.w	r1, r1, #15
    d4e6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d4ea:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    d4ee:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    d4f2:	f851 1c40 	ldr.w	r1, [r1, #-64]
    d4f6:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    d4fa:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d4fe:	4471      	add	r1, lr
		s0 = sigma0(s0);
    d500:	f8dd e004 	ldr.w	lr, [sp, #4]
    d504:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    d508:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d50c:	4441      	add	r1, r8
		s1 = sigma1(s1);
    d50e:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d512:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d514:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d516:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d51a:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    d51e:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d522:	ea05 0802 	and.w	r8, r5, r2
    d526:	970a      	str	r7, [sp, #40]	; 0x28
    d528:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    d52c:	ea2c 0705 	bic.w	r7, ip, r5
    d530:	ea87 0708 	eor.w	r7, r7, r8
    d534:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    d538:	444f      	add	r7, r9
    d53a:	4477      	add	r7, lr
    d53c:	4439      	add	r1, r7
    d53e:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    d540:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d544:	ea84 0b06 	eor.w	fp, r4, r6
    d548:	ea0b 0b03 	and.w	fp, fp, r3
    d54c:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    d550:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    d554:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    d558:	ea8b 0e0e 	eor.w	lr, fp, lr
    d55c:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    d560:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    d562:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    d564:	46e3      	mov	fp, ip
    d566:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    d568:	9600      	str	r6, [sp, #0]
    d56a:	d121      	bne.n	d5b0 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    d56c:	9f02      	ldr	r7, [sp, #8]
    d56e:	440f      	add	r7, r1
    d570:	9903      	ldr	r1, [sp, #12]
    d572:	6007      	str	r7, [r0, #0]
    d574:	4419      	add	r1, r3
    d576:	9b04      	ldr	r3, [sp, #16]
    d578:	6041      	str	r1, [r0, #4]
    d57a:	4423      	add	r3, r4
    d57c:	6083      	str	r3, [r0, #8]
    d57e:	9b05      	ldr	r3, [sp, #20]
    d580:	4433      	add	r3, r6
    d582:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    d584:	9b06      	ldr	r3, [sp, #24]
    d586:	4443      	add	r3, r8
    d588:	6103      	str	r3, [r0, #16]
    d58a:	9b07      	ldr	r3, [sp, #28]
    d58c:	442b      	add	r3, r5
    d58e:	6143      	str	r3, [r0, #20]
    d590:	9b08      	ldr	r3, [sp, #32]
    d592:	4413      	add	r3, r2
    d594:	6183      	str	r3, [r0, #24]
    d596:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d598:	4463      	add	r3, ip
    d59a:	61c3      	str	r3, [r0, #28]
}
    d59c:	b01d      	add	sp, #116	; 0x74
    d59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5a2:	46e3      	mov	fp, ip
    d5a4:	9600      	str	r6, [sp, #0]
    d5a6:	4694      	mov	ip, r2
    d5a8:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    d5aa:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    d5ac:	461c      	mov	r4, r3
    d5ae:	e742      	b.n	d436 <compress+0x3e>
    d5b0:	4694      	mov	ip, r2
    d5b2:	4626      	mov	r6, r4
    d5b4:	462a      	mov	r2, r5
    d5b6:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    d5b8:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    d5ba:	460b      	mov	r3, r1
    d5bc:	e770      	b.n	d4a0 <compress+0xa8>
    d5be:	bf00      	nop
    d5c0:	00021da0 	.word	0x00021da0
    d5c4:	00021de0 	.word	0x00021de0

0000d5c8 <tc_sha256_init>:
{
    d5c8:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    d5ca:	4604      	mov	r4, r0
    d5cc:	b1c8      	cbz	r0, d602 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    d5ce:	2270      	movs	r2, #112	; 0x70
    d5d0:	2100      	movs	r1, #0
    d5d2:	f010 f8a6 	bl	1d722 <_set>
	s->iv[1] = 0xbb67ae85;
    d5d6:	4b0b      	ldr	r3, [pc, #44]	; (d604 <tc_sha256_init+0x3c>)
    d5d8:	4a0b      	ldr	r2, [pc, #44]	; (d608 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    d5da:	490c      	ldr	r1, [pc, #48]	; (d60c <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    d5dc:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    d5e0:	4b0b      	ldr	r3, [pc, #44]	; (d610 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    d5e2:	480c      	ldr	r0, [pc, #48]	; (d614 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    d5e4:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    d5e8:	4b0b      	ldr	r3, [pc, #44]	; (d618 <tc_sha256_init+0x50>)
    d5ea:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    d5ee:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    d5f0:	4b0a      	ldr	r3, [pc, #40]	; (d61c <tc_sha256_init+0x54>)
    d5f2:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    d5f4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    d5f8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    d5fc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    d600:	61e3      	str	r3, [r4, #28]
}
    d602:	bd10      	pop	{r4, pc}
    d604:	bb67ae85 	.word	0xbb67ae85
    d608:	6a09e667 	.word	0x6a09e667
    d60c:	3c6ef372 	.word	0x3c6ef372
    d610:	a54ff53a 	.word	0xa54ff53a
    d614:	510e527f 	.word	0x510e527f
    d618:	9b05688c 	.word	0x9b05688c
    d61c:	1f83d9ab 	.word	0x1f83d9ab

0000d620 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d620:	4a0a      	ldr	r2, [pc, #40]	; (d64c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d622:	490b      	ldr	r1, [pc, #44]	; (d650 <arch_swap+0x30>)
	_current->arch.basepri = key;
    d624:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d626:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d628:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    d62c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d630:	4908      	ldr	r1, [pc, #32]	; (d654 <arch_swap+0x34>)
    d632:	684b      	ldr	r3, [r1, #4]
    d634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d638:	604b      	str	r3, [r1, #4]
    d63a:	2300      	movs	r3, #0
    d63c:	f383 8811 	msr	BASEPRI, r3
    d640:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d644:	6893      	ldr	r3, [r2, #8]
}
    d646:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    d64a:	4770      	bx	lr
    d64c:	20009fbc 	.word	0x20009fbc
    d650:	000224cc 	.word	0x000224cc
    d654:	e000ed00 	.word	0xe000ed00

0000d658 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d658:	4914      	ldr	r1, [pc, #80]	; (d6ac <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d65a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d65c:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    d660:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d662:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d666:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d66a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d66c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d670:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d674:	4f0e      	ldr	r7, [pc, #56]	; (d6b0 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d676:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d67a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    d67c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d67e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d680:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    d684:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d686:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d68a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d68e:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    d692:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d696:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d69a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d69e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d6a0:	f010 fc82 	bl	1dfa8 <configure_builtin_stack_guard>
    pop {r2, lr}
    d6a4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d6a8:	4770      	bx	lr
    d6aa:	0000      	.short	0x0000
    ldr r1, =_kernel
    d6ac:	20009fbc 	.word	0x20009fbc
    ldr v4, =_SCS_ICSR
    d6b0:	e000ed04 	.word	0xe000ed04

0000d6b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d6b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d6b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d6ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d6be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d6c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d6c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d6c8:	2902      	cmp	r1, #2
    beq _oops
    d6ca:	d0ff      	beq.n	d6cc <_oops>

0000d6cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d6cc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d6ce:	f010 fc6f 	bl	1dfb0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d6d2:	bd01      	pop	{r0, pc}

0000d6d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d6d4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	db08      	blt.n	d6ec <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d6da:	2201      	movs	r2, #1
    d6dc:	f000 001f 	and.w	r0, r0, #31
    d6e0:	fa02 f000 	lsl.w	r0, r2, r0
    d6e4:	4a02      	ldr	r2, [pc, #8]	; (d6f0 <arch_irq_enable+0x1c>)
    d6e6:	095b      	lsrs	r3, r3, #5
    d6e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d6ec:	4770      	bx	lr
    d6ee:	bf00      	nop
    d6f0:	e000e100 	.word	0xe000e100

0000d6f4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d6f4:	4b05      	ldr	r3, [pc, #20]	; (d70c <arch_irq_is_enabled+0x18>)
    d6f6:	0942      	lsrs	r2, r0, #5
    d6f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d6fc:	2301      	movs	r3, #1
    d6fe:	f000 001f 	and.w	r0, r0, #31
    d702:	fa03 f000 	lsl.w	r0, r3, r0
}
    d706:	4010      	ands	r0, r2
    d708:	4770      	bx	lr
    d70a:	bf00      	nop
    d70c:	e000e100 	.word	0xe000e100

0000d710 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    d710:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    d712:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d714:	2c07      	cmp	r4, #7
{
    d716:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d718:	d908      	bls.n	d72c <z_arm_irq_priority_set+0x1c>
    d71a:	490d      	ldr	r1, [pc, #52]	; (d750 <z_arm_irq_priority_set+0x40>)
    d71c:	480d      	ldr	r0, [pc, #52]	; (d754 <z_arm_irq_priority_set+0x44>)
    d71e:	225c      	movs	r2, #92	; 0x5c
    d720:	f00f f890 	bl	1c844 <printk>
    d724:	215c      	movs	r1, #92	; 0x5c
    d726:	480a      	ldr	r0, [pc, #40]	; (d750 <z_arm_irq_priority_set+0x40>)
    d728:	f00f fb32 	bl	1cd90 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d72c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d72e:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d730:	bfac      	ite	ge
    d732:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d736:	4b08      	ldrlt	r3, [pc, #32]	; (d758 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d738:	ea4f 1444 	mov.w	r4, r4, lsl #5
    d73c:	b2e4      	uxtb	r4, r4
    d73e:	bfab      	itete	ge
    d740:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d744:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d748:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d74c:	555c      	strblt	r4, [r3, r5]
}
    d74e:	bd38      	pop	{r3, r4, r5, pc}
    d750:	0002381a 	.word	0x0002381a
    d754:	00022c66 	.word	0x00022c66
    d758:	e000ed14 	.word	0xe000ed14

0000d75c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    d75c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    d760:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    d762:	490b      	ldr	r1, [pc, #44]	; (d790 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    d764:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    d768:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    d76a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    d76e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    d772:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    d774:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    d778:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    d77c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d780:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    d784:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    d786:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    d788:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    d78a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d78e:	4770      	bx	lr
    d790:	0001c921 	.word	0x0001c921

0000d794 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    d794:	4604      	mov	r4, r0
    d796:	b508      	push	{r3, lr}
    d798:	460e      	mov	r6, r1
    d79a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    d79c:	f000 faf6 	bl	dd8c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    d7a0:	4b08      	ldr	r3, [pc, #32]	; (d7c4 <arch_switch_to_main_thread+0x30>)
    d7a2:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d7a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
    d7a6:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d7aa:	4628      	mov	r0, r5
    d7ac:	f386 8809 	msr	PSP, r6
    d7b0:	2100      	movs	r1, #0
    d7b2:	b663      	cpsie	if
    d7b4:	f381 8811 	msr	BASEPRI, r1
    d7b8:	f3bf 8f6f 	isb	sy
    d7bc:	2200      	movs	r2, #0
    d7be:	2300      	movs	r3, #0
    d7c0:	f00f f8ae 	bl	1c920 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d7c4:	20009fbc 	.word	0x20009fbc

0000d7c8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d7c8:	4901      	ldr	r1, [pc, #4]	; (d7d0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d7ca:	2210      	movs	r2, #16
	str	r2, [r1]
    d7cc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d7ce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d7d0:	e000ed10 	.word	0xe000ed10

0000d7d4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d7d4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d7d6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d7d8:	f380 8811 	msr	BASEPRI, r0
	isb
    d7dc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d7e0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d7e4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d7e6:	b662      	cpsie	i
	isb
    d7e8:	f3bf 8f6f 	isb	sy

	bx	lr
    d7ec:	4770      	bx	lr
    d7ee:	bf00      	nop

0000d7f0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    d7f0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    d7f2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    d7f4:	f381 8811 	msr	BASEPRI, r1

	wfe
    d7f8:	bf20      	wfe

	msr	BASEPRI, r0
    d7fa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    d7fe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    d800:	4770      	bx	lr
    d802:	bf00      	nop

0000d804 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d804:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d806:	4605      	mov	r5, r0

	if (esf != NULL) {
    d808:	460c      	mov	r4, r1
    d80a:	b1c9      	cbz	r1, d840 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d80c:	688b      	ldr	r3, [r1, #8]
    d80e:	4810      	ldr	r0, [pc, #64]	; (d850 <z_arm_fatal_error+0x4c>)
    d810:	9300      	str	r3, [sp, #0]
    d812:	e9d1 2300 	ldrd	r2, r3, [r1]
    d816:	2145      	movs	r1, #69	; 0x45
    d818:	f00f f814 	bl	1c844 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d81c:	6963      	ldr	r3, [r4, #20]
    d81e:	2145      	movs	r1, #69	; 0x45
    d820:	9300      	str	r3, [sp, #0]
    d822:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    d826:	480b      	ldr	r0, [pc, #44]	; (d854 <z_arm_fatal_error+0x50>)
    d828:	f00f f80c 	bl	1c844 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d82c:	2145      	movs	r1, #69	; 0x45
    d82e:	69e2      	ldr	r2, [r4, #28]
    d830:	4809      	ldr	r0, [pc, #36]	; (d858 <z_arm_fatal_error+0x54>)
    d832:	f00f f807 	bl	1c844 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d836:	2145      	movs	r1, #69	; 0x45
    d838:	69a2      	ldr	r2, [r4, #24]
    d83a:	4808      	ldr	r0, [pc, #32]	; (d85c <z_arm_fatal_error+0x58>)
    d83c:	f00f f802 	bl	1c844 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d840:	4621      	mov	r1, r4
    d842:	4628      	mov	r0, r5
}
    d844:	b003      	add	sp, #12
    d846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    d84a:	f00c b891 	b.w	19970 <z_fatal_error>
    d84e:	bf00      	nop
    d850:	00023850 	.word	0x00023850
    d854:	00023884 	.word	0x00023884
    d858:	000238b8 	.word	0x000238b8
    d85c:	000238cc 	.word	0x000238cc

0000d860 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d860:	bf30      	wfi
    b z_SysNmiOnReset
    d862:	f7ff bffd 	b.w	d860 <z_SysNmiOnReset>
    d866:	bf00      	nop

0000d868 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d868:	4a0e      	ldr	r2, [pc, #56]	; (d8a4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d86a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d86c:	4b0e      	ldr	r3, [pc, #56]	; (d8a8 <z_arm_prep_c+0x40>)
    d86e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d872:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d874:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d878:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d87c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d880:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d888:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d88c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d890:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d894:	f00c f8f8 	bl	19a88 <z_bss_zero>
	z_data_copy();
    d898:	f00e f92e 	bl	1baf8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d89c:	f000 fa48 	bl	dd30 <z_arm_interrupt_init>
	z_cstart();
    d8a0:	f00c f916 	bl	19ad0 <z_cstart>
    d8a4:	00008000 	.word	0x00008000
    d8a8:	e000ed00 	.word	0xe000ed00

0000d8ac <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d8ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    d8ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d8b0:	4a0b      	ldr	r2, [pc, #44]	; (d8e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d8b2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    d8b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d8b6:	bf1e      	ittt	ne
	movne	r1, #0
    d8b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d8ba:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    d8bc:	f013 fca0 	blne	21200 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d8c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d8c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d8c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d8ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    d8ce:	4905      	ldr	r1, [pc, #20]	; (d8e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d8d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d8d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    d8d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d8d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d8da:	4903      	ldr	r1, [pc, #12]	; (d8e8 <_isr_wrapper+0x3c>)
	bx r1
    d8dc:	4708      	bx	r1
    d8de:	0000      	.short	0x0000
	ldr r2, =_kernel
    d8e0:	20009fbc 	.word	0x20009fbc
	ldr r1, =_sw_isr_table
    d8e4:	00021608 	.word	0x00021608
	ldr r1, =z_arm_int_exit
    d8e8:	0000dcf1 	.word	0x0000dcf1

0000d8ec <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    d8ec:	f00f fa6f 	bl	1cdce <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d8f0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d8f2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d8f6:	4808      	ldr	r0, [pc, #32]	; (d918 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d8f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d8fc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d8fe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d902:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d906:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d908:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d90a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d90e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d912:	f7ff ffa9 	bl	d868 <z_arm_prep_c>
    d916:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    d918:	2000d508 	.word	0x2000d508

0000d91c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d91c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d920:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d924:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d926:	4672      	mov	r2, lr
	bl z_arm_fault
    d928:	f000 f91a 	bl	db60 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d92c:	bd01      	pop	{r0, pc}
    d92e:	bf00      	nop

0000d930 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    d930:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d932:	4c21      	ldr	r4, [pc, #132]	; (d9b8 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    d934:	2145      	movs	r1, #69	; 0x45
    d936:	4821      	ldr	r0, [pc, #132]	; (d9bc <usage_fault.constprop.0+0x8c>)
    d938:	f00e ff84 	bl	1c844 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d93c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d93e:	019d      	lsls	r5, r3, #6
    d940:	d503      	bpl.n	d94a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    d942:	2145      	movs	r1, #69	; 0x45
    d944:	481e      	ldr	r0, [pc, #120]	; (d9c0 <usage_fault.constprop.0+0x90>)
    d946:	f00e ff7d 	bl	1c844 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d94a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d94c:	01dc      	lsls	r4, r3, #7
    d94e:	d503      	bpl.n	d958 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    d950:	2145      	movs	r1, #69	; 0x45
    d952:	481c      	ldr	r0, [pc, #112]	; (d9c4 <usage_fault.constprop.0+0x94>)
    d954:	f00e ff76 	bl	1c844 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d958:	4d17      	ldr	r5, [pc, #92]	; (d9b8 <usage_fault.constprop.0+0x88>)
    d95a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    d95c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    d960:	d004      	beq.n	d96c <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    d962:	2145      	movs	r1, #69	; 0x45
    d964:	4818      	ldr	r0, [pc, #96]	; (d9c8 <usage_fault.constprop.0+0x98>)
    d966:	f00e ff6d 	bl	1c844 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    d96a:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d96c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d96e:	0318      	lsls	r0, r3, #12
    d970:	d503      	bpl.n	d97a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    d972:	2145      	movs	r1, #69	; 0x45
    d974:	4815      	ldr	r0, [pc, #84]	; (d9cc <usage_fault.constprop.0+0x9c>)
    d976:	f00e ff65 	bl	1c844 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d97a:	4d0f      	ldr	r5, [pc, #60]	; (d9b8 <usage_fault.constprop.0+0x88>)
    d97c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d97e:	0359      	lsls	r1, r3, #13
    d980:	d503      	bpl.n	d98a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d982:	2145      	movs	r1, #69	; 0x45
    d984:	4812      	ldr	r0, [pc, #72]	; (d9d0 <usage_fault.constprop.0+0xa0>)
    d986:	f00e ff5d 	bl	1c844 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d98a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d98c:	039a      	lsls	r2, r3, #14
    d98e:	d503      	bpl.n	d998 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d990:	2145      	movs	r1, #69	; 0x45
    d992:	4810      	ldr	r0, [pc, #64]	; (d9d4 <usage_fault.constprop.0+0xa4>)
    d994:	f00e ff56 	bl	1c844 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d998:	4d07      	ldr	r5, [pc, #28]	; (d9b8 <usage_fault.constprop.0+0x88>)
    d99a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d99c:	03db      	lsls	r3, r3, #15
    d99e:	d503      	bpl.n	d9a8 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d9a0:	2145      	movs	r1, #69	; 0x45
    d9a2:	480d      	ldr	r0, [pc, #52]	; (d9d8 <usage_fault.constprop.0+0xa8>)
    d9a4:	f00e ff4e 	bl	1c844 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d9a8:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    d9aa:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d9ac:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d9b0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d9b4:	62ab      	str	r3, [r5, #40]	; 0x28
}
    d9b6:	bd38      	pop	{r3, r4, r5, pc}
    d9b8:	e000ed00 	.word	0xe000ed00
    d9bc:	000238ff 	.word	0x000238ff
    d9c0:	0002391c 	.word	0x0002391c
    d9c4:	00023934 	.word	0x00023934
    d9c8:	00023953 	.word	0x00023953
    d9cc:	00023982 	.word	0x00023982
    d9d0:	000239a5 	.word	0x000239a5
    d9d4:	000239cf 	.word	0x000239cf
    d9d8:	000239ee 	.word	0x000239ee

0000d9dc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d9dc:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d9de:	4c23      	ldr	r4, [pc, #140]	; (da6c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d9e0:	4606      	mov	r6, r0
    d9e2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    d9e4:	4822      	ldr	r0, [pc, #136]	; (da70 <bus_fault.constprop.0+0x94>)
    d9e6:	2145      	movs	r1, #69	; 0x45
    d9e8:	f00e ff2c 	bl	1c844 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d9ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d9ee:	04d9      	lsls	r1, r3, #19
    d9f0:	d503      	bpl.n	d9fa <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    d9f2:	2145      	movs	r1, #69	; 0x45
    d9f4:	481f      	ldr	r0, [pc, #124]	; (da74 <bus_fault.constprop.0+0x98>)
    d9f6:	f00e ff25 	bl	1c844 <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d9fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d9fc:	051a      	lsls	r2, r3, #20
    d9fe:	d503      	bpl.n	da08 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    da00:	2145      	movs	r1, #69	; 0x45
    da02:	481d      	ldr	r0, [pc, #116]	; (da78 <bus_fault.constprop.0+0x9c>)
    da04:	f00e ff1e 	bl	1c844 <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    da08:	4c18      	ldr	r4, [pc, #96]	; (da6c <bus_fault.constprop.0+0x90>)
    da0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da0c:	059b      	lsls	r3, r3, #22
    da0e:	d510      	bpl.n	da32 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    da10:	481a      	ldr	r0, [pc, #104]	; (da7c <bus_fault.constprop.0+0xa0>)
    da12:	2145      	movs	r1, #69	; 0x45
    da14:	f00e ff16 	bl	1c844 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    da18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    da1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da1c:	0418      	lsls	r0, r3, #16
    da1e:	d508      	bpl.n	da32 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    da20:	2145      	movs	r1, #69	; 0x45
    da22:	4817      	ldr	r0, [pc, #92]	; (da80 <bus_fault.constprop.0+0xa4>)
    da24:	f00e ff0e 	bl	1c844 <printk>
			if (from_hard_fault) {
    da28:	b11e      	cbz	r6, da32 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    da2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    da30:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    da32:	4c0e      	ldr	r4, [pc, #56]	; (da6c <bus_fault.constprop.0+0x90>)
    da34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da36:	0559      	lsls	r1, r3, #21
    da38:	d503      	bpl.n	da42 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    da3a:	2145      	movs	r1, #69	; 0x45
    da3c:	4811      	ldr	r0, [pc, #68]	; (da84 <bus_fault.constprop.0+0xa8>)
    da3e:	f00e ff01 	bl	1c844 <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    da42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da44:	05da      	lsls	r2, r3, #23
    da46:	d50b      	bpl.n	da60 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    da48:	2145      	movs	r1, #69	; 0x45
    da4a:	480f      	ldr	r0, [pc, #60]	; (da88 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    da4c:	f00e fefa 	bl	1c844 <printk>
	*recoverable = memory_fault_recoverable(esf);
    da50:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    da52:	4a06      	ldr	r2, [pc, #24]	; (da6c <bus_fault.constprop.0+0x90>)
    da54:	6a93      	ldr	r3, [r2, #40]	; 0x28
    da56:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    da5a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    da5c:	7028      	strb	r0, [r5, #0]
}
    da5e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    da60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da62:	049b      	lsls	r3, r3, #18
    da64:	d5f4      	bpl.n	da50 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    da66:	2145      	movs	r1, #69	; 0x45
    da68:	4808      	ldr	r0, [pc, #32]	; (da8c <bus_fault.constprop.0+0xb0>)
    da6a:	e7ef      	b.n	da4c <bus_fault.constprop.0+0x70>
    da6c:	e000ed00 	.word	0xe000ed00
    da70:	00023a1e 	.word	0x00023a1e
    da74:	00023a39 	.word	0x00023a39
    da78:	00023a4f 	.word	0x00023a4f
    da7c:	00023a67 	.word	0x00023a67
    da80:	00023a85 	.word	0x00023a85
    da84:	00023a9f 	.word	0x00023a9f
    da88:	00023abf 	.word	0x00023abf
    da8c:	00023adc 	.word	0x00023adc

0000da90 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    da90:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    da92:	4c29      	ldr	r4, [pc, #164]	; (db38 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    da94:	4606      	mov	r6, r0
    da96:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    da98:	4828      	ldr	r0, [pc, #160]	; (db3c <mem_manage_fault.constprop.0+0xac>)
    da9a:	2145      	movs	r1, #69	; 0x45
    da9c:	f00e fed2 	bl	1c844 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    daa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    daa2:	06d8      	lsls	r0, r3, #27
    daa4:	d503      	bpl.n	daae <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    daa6:	2145      	movs	r1, #69	; 0x45
    daa8:	4825      	ldr	r0, [pc, #148]	; (db40 <mem_manage_fault.constprop.0+0xb0>)
    daaa:	f00e fecb 	bl	1c844 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    daae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dab0:	0719      	lsls	r1, r3, #28
    dab2:	d503      	bpl.n	dabc <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dab4:	2145      	movs	r1, #69	; 0x45
    dab6:	4823      	ldr	r0, [pc, #140]	; (db44 <mem_manage_fault.constprop.0+0xb4>)
    dab8:	f00e fec4 	bl	1c844 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dabc:	4c1e      	ldr	r4, [pc, #120]	; (db38 <mem_manage_fault.constprop.0+0xa8>)
    dabe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dac0:	079a      	lsls	r2, r3, #30
    dac2:	d510      	bpl.n	dae6 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    dac4:	2145      	movs	r1, #69	; 0x45
    dac6:	4820      	ldr	r0, [pc, #128]	; (db48 <mem_manage_fault.constprop.0+0xb8>)
    dac8:	f00e febc 	bl	1c844 <printk>
		uint32_t temp = SCB->MMFAR;
    dacc:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dace:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dad0:	061b      	lsls	r3, r3, #24
    dad2:	d508      	bpl.n	dae6 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dad4:	2145      	movs	r1, #69	; 0x45
    dad6:	481d      	ldr	r0, [pc, #116]	; (db4c <mem_manage_fault.constprop.0+0xbc>)
    dad8:	f00e feb4 	bl	1c844 <printk>
			if (from_hard_fault) {
    dadc:	b11e      	cbz	r6, dae6 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dae4:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dae6:	4c14      	ldr	r4, [pc, #80]	; (db38 <mem_manage_fault.constprop.0+0xa8>)
    dae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    daea:	07d8      	lsls	r0, r3, #31
    daec:	d503      	bpl.n	daf6 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    daee:	2145      	movs	r1, #69	; 0x45
    daf0:	4817      	ldr	r0, [pc, #92]	; (db50 <mem_manage_fault.constprop.0+0xc0>)
    daf2:	f00e fea7 	bl	1c844 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    daf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    daf8:	0699      	lsls	r1, r3, #26
    dafa:	d503      	bpl.n	db04 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    dafc:	2145      	movs	r1, #69	; 0x45
    dafe:	4815      	ldr	r0, [pc, #84]	; (db54 <mem_manage_fault.constprop.0+0xc4>)
    db00:	f00e fea0 	bl	1c844 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    db04:	4b0c      	ldr	r3, [pc, #48]	; (db38 <mem_manage_fault.constprop.0+0xa8>)
    db06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db08:	06d2      	lsls	r2, r2, #27
    db0a:	d402      	bmi.n	db12 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    db0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    db0e:	079b      	lsls	r3, r3, #30
    db10:	d50a      	bpl.n	db28 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    db12:	4911      	ldr	r1, [pc, #68]	; (db58 <mem_manage_fault.constprop.0+0xc8>)
    db14:	4811      	ldr	r0, [pc, #68]	; (db5c <mem_manage_fault.constprop.0+0xcc>)
    db16:	f240 1247 	movw	r2, #327	; 0x147
    db1a:	f00e fe93 	bl	1c844 <printk>
    db1e:	f240 1147 	movw	r1, #327	; 0x147
    db22:	480d      	ldr	r0, [pc, #52]	; (db58 <mem_manage_fault.constprop.0+0xc8>)
    db24:	f00f f934 	bl	1cd90 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    db28:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    db2a:	4a03      	ldr	r2, [pc, #12]	; (db38 <mem_manage_fault.constprop.0+0xa8>)
    db2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    db2e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    db32:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    db34:	7028      	strb	r0, [r5, #0]
}
    db36:	bd70      	pop	{r4, r5, r6, pc}
    db38:	e000ed00 	.word	0xe000ed00
    db3c:	00023b10 	.word	0x00023b10
    db40:	00023b2b 	.word	0x00023b2b
    db44:	00023a4f 	.word	0x00023a4f
    db48:	00023b63 	.word	0x00023b63
    db4c:	00023b80 	.word	0x00023b80
    db50:	00023b9b 	.word	0x00023b9b
    db54:	00023adc 	.word	0x00023adc
    db58:	00023bbf 	.word	0x00023bbf
    db5c:	00022c66 	.word	0x00022c66

0000db60 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    db60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    db64:	4b51      	ldr	r3, [pc, #324]	; (dcac <z_arm_fault+0x14c>)
{
    db66:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    db68:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    db6c:	4689      	mov	r9, r1
    db6e:	4614      	mov	r4, r2
    db70:	2600      	movs	r6, #0
    db72:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    db74:	f3c8 0708 	ubfx	r7, r8, #0, #9
    db78:	f386 8811 	msr	BASEPRI, r6
    db7c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    db80:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    db84:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    db88:	d111      	bne.n	dbae <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    db8a:	07d0      	lsls	r0, r2, #31
    db8c:	d40f      	bmi.n	dbae <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    db8e:	0651      	lsls	r1, r2, #25
    db90:	d403      	bmi.n	db9a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    db92:	0722      	lsls	r2, r4, #28
    db94:	d408      	bmi.n	dba8 <z_arm_fault+0x48>
			*nested_exc = true;
    db96:	2601      	movs	r6, #1
    db98:	e008      	b.n	dbac <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    db9a:	2145      	movs	r1, #69	; 0x45
    db9c:	4844      	ldr	r0, [pc, #272]	; (dcb0 <z_arm_fault+0x150>)
    db9e:	f00e fe51 	bl	1c844 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    dba2:	f014 0404 	ands.w	r4, r4, #4
    dba6:	d000      	beq.n	dbaa <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    dba8:	464d      	mov	r5, r9
	*nested_exc = false;
    dbaa:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    dbac:	b95d      	cbnz	r5, dbc6 <z_arm_fault+0x66>
    dbae:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    dbb2:	4940      	ldr	r1, [pc, #256]	; (dcb4 <z_arm_fault+0x154>)
    dbb4:	4840      	ldr	r0, [pc, #256]	; (dcb8 <z_arm_fault+0x158>)
    dbb6:	f00e fe45 	bl	1c844 <printk>
    dbba:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    dbbe:	483d      	ldr	r0, [pc, #244]	; (dcb4 <z_arm_fault+0x154>)
    dbc0:	f00f f8e6 	bl	1cd90 <assert_post_action>
    dbc4:	2500      	movs	r5, #0
	*recoverable = false;
    dbc6:	2400      	movs	r4, #0
    dbc8:	1efb      	subs	r3, r7, #3
    dbca:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    dbce:	2b09      	cmp	r3, #9
    dbd0:	d85a      	bhi.n	dc88 <z_arm_fault+0x128>
    dbd2:	e8df f003 	tbb	[pc, r3]
    dbd6:	4e05      	.short	0x4e05
    dbd8:	59593252 	.word	0x59593252
    dbdc:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dbe0:	4f32      	ldr	r7, [pc, #200]	; (dcac <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    dbe2:	2145      	movs	r1, #69	; 0x45
    dbe4:	4835      	ldr	r0, [pc, #212]	; (dcbc <z_arm_fault+0x15c>)
    dbe6:	f00e fe2d 	bl	1c844 <printk>
	*recoverable = false;
    dbea:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dbee:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    dbf0:	f014 0402 	ands.w	r4, r4, #2
    dbf4:	d005      	beq.n	dc02 <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    dbf6:	2145      	movs	r1, #69	; 0x45
    dbf8:	4831      	ldr	r0, [pc, #196]	; (dcc0 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    dbfa:	f00e fe23 	bl	1c844 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    dbfe:	2400      	movs	r4, #0
}
    dc00:	e01e      	b.n	dc40 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc04:	005b      	lsls	r3, r3, #1
    dc06:	d51b      	bpl.n	dc40 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    dc08:	2145      	movs	r1, #69	; 0x45
    dc0a:	482e      	ldr	r0, [pc, #184]	; (dcc4 <z_arm_fault+0x164>)
    dc0c:	f00e fe1a 	bl	1c844 <printk>
		if (SCB_MMFSR != 0) {
    dc10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    dc14:	b12b      	cbz	r3, dc22 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    dc16:	2001      	movs	r0, #1
    dc18:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dc1c:	f7ff ff38 	bl	da90 <mem_manage_fault.constprop.0>
    dc20:	e00d      	b.n	dc3e <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    dc22:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    dc26:	b12b      	cbz	r3, dc34 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    dc28:	2001      	movs	r0, #1
    dc2a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dc2e:	f7ff fed5 	bl	d9dc <bus_fault.constprop.0>
    dc32:	e004      	b.n	dc3e <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    dc34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    dc36:	b29b      	uxth	r3, r3
    dc38:	b113      	cbz	r3, dc40 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    dc3a:	f7ff fe79 	bl	d930 <usage_fault.constprop.0>
    dc3e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    dc40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc44:	b993      	cbnz	r3, dc6c <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    dc46:	2220      	movs	r2, #32
    dc48:	4629      	mov	r1, r5
    dc4a:	a802      	add	r0, sp, #8
    dc4c:	f010 fab2 	bl	1e1b4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    dc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dc52:	b336      	cbz	r6, dca2 <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    dc54:	f3c3 0208 	ubfx	r2, r3, #0, #9
    dc58:	b922      	cbnz	r2, dc64 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    dc5a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    dc5e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dc62:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    dc64:	4620      	mov	r0, r4
    dc66:	a902      	add	r1, sp, #8
    dc68:	f7ff fdcc 	bl	d804 <z_arm_fatal_error>
}
    dc6c:	b00b      	add	sp, #44	; 0x2c
    dc6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    dc72:	2000      	movs	r0, #0
    dc74:	f10d 0107 	add.w	r1, sp, #7
    dc78:	e7d0      	b.n	dc1c <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    dc7a:	2000      	movs	r0, #0
    dc7c:	f10d 0107 	add.w	r1, sp, #7
    dc80:	e7d5      	b.n	dc2e <z_arm_fault+0xce>
	PR_FAULT_INFO(
    dc82:	2145      	movs	r1, #69	; 0x45
    dc84:	4810      	ldr	r0, [pc, #64]	; (dcc8 <z_arm_fault+0x168>)
    dc86:	e7b8      	b.n	dbfa <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    dc88:	4910      	ldr	r1, [pc, #64]	; (dccc <z_arm_fault+0x16c>)
    dc8a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    dc8e:	4a10      	ldr	r2, [pc, #64]	; (dcd0 <z_arm_fault+0x170>)
    dc90:	4810      	ldr	r0, [pc, #64]	; (dcd4 <z_arm_fault+0x174>)
    dc92:	bf08      	it	eq
    dc94:	460a      	moveq	r2, r1
    dc96:	f1a7 0310 	sub.w	r3, r7, #16
    dc9a:	2145      	movs	r1, #69	; 0x45
    dc9c:	f00e fdd2 	bl	1c844 <printk>
    dca0:	e7ad      	b.n	dbfe <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dca2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    dca6:	f023 0301 	bic.w	r3, r3, #1
    dcaa:	e7da      	b.n	dc62 <z_arm_fault+0x102>
    dcac:	e000ed00 	.word	0xe000ed00
    dcb0:	00023c27 	.word	0x00023c27
    dcb4:	00023bbf 	.word	0x00023bbf
    dcb8:	00022c66 	.word	0x00022c66
    dcbc:	00023c4f 	.word	0x00023c4f
    dcc0:	00023c6b 	.word	0x00023c6b
    dcc4:	00023c91 	.word	0x00023c91
    dcc8:	00023cb5 	.word	0x00023cb5
    dccc:	00023bf9 	.word	0x00023bf9
    dcd0:	00023c0e 	.word	0x00023c0e
    dcd4:	00023cf0 	.word	0x00023cf0

0000dcd8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    dcd8:	4b04      	ldr	r3, [pc, #16]	; (dcec <z_arm_fault_init+0x14>)
    dcda:	695a      	ldr	r2, [r3, #20]
    dcdc:	f042 0210 	orr.w	r2, r2, #16
    dce0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    dce2:	695a      	ldr	r2, [r3, #20]
    dce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    dce8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    dcea:	4770      	bx	lr
    dcec:	e000ed00 	.word	0xe000ed00

0000dcf0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    dcf0:	4b04      	ldr	r3, [pc, #16]	; (dd04 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    dcf2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    dcf4:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    dcf6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    dcf8:	d003      	beq.n	dd02 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    dcfa:	4903      	ldr	r1, [pc, #12]	; (dd08 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    dcfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    dd00:	600a      	str	r2, [r1, #0]

0000dd02 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    dd02:	4770      	bx	lr
	ldr r3, =_kernel
    dd04:	20009fbc 	.word	0x20009fbc
	ldr r1, =_SCS_ICSR
    dd08:	e000ed04 	.word	0xe000ed04

0000dd0c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    dd0c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    dd10:	4905      	ldr	r1, [pc, #20]	; (dd28 <sys_arch_reboot+0x1c>)
    dd12:	4b06      	ldr	r3, [pc, #24]	; (dd2c <sys_arch_reboot+0x20>)
    dd14:	68ca      	ldr	r2, [r1, #12]
    dd16:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    dd1a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    dd1c:	60cb      	str	r3, [r1, #12]
    dd1e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    dd22:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    dd24:	e7fd      	b.n	dd22 <sys_arch_reboot+0x16>
    dd26:	bf00      	nop
    dd28:	e000ed00 	.word	0xe000ed00
    dd2c:	05fa0004 	.word	0x05fa0004

0000dd30 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    dd30:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dd32:	2120      	movs	r1, #32
    dd34:	4803      	ldr	r0, [pc, #12]	; (dd44 <z_arm_interrupt_init+0x14>)
    dd36:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    dd38:	3301      	adds	r3, #1
    dd3a:	2b45      	cmp	r3, #69	; 0x45
    dd3c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    dd40:	d1f9      	bne.n	dd36 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    dd42:	4770      	bx	lr
    dd44:	e000e100 	.word	0xe000e100

0000dd48 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    dd48:	b508      	push	{r3, lr}
	if (_current == thread) {
    dd4a:	4b0e      	ldr	r3, [pc, #56]	; (dd84 <z_impl_k_thread_abort+0x3c>)
    dd4c:	689b      	ldr	r3, [r3, #8]
    dd4e:	4283      	cmp	r3, r0
    dd50:	d107      	bne.n	dd62 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    dd52:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    dd56:	b193      	cbz	r3, dd7e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    dd58:	4a0b      	ldr	r2, [pc, #44]	; (dd88 <z_impl_k_thread_abort+0x40>)
    dd5a:	6853      	ldr	r3, [r2, #4]
    dd5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    dd60:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    dd62:	f00c ffb1 	bl	1acc8 <z_thread_single_abort>
	__asm__ volatile(
    dd66:	f04f 0320 	mov.w	r3, #32
    dd6a:	f3ef 8011 	mrs	r0, BASEPRI
    dd6e:	f383 8811 	msr	BASEPRI, r3
    dd72:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    dd76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    dd7a:	f013 ba91 	b.w	212a0 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    dd7e:	f00d fdb1 	bl	1b8e4 <z_self_abort>
    dd82:	bf00      	nop
    dd84:	20009fbc 	.word	0x20009fbc
    dd88:	e000ed00 	.word	0xe000ed00

0000dd8c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    dd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    dd8e:	4c09      	ldr	r4, [pc, #36]	; (ddb4 <z_arm_configure_static_mpu_regions+0x28>)
    dd90:	4a09      	ldr	r2, [pc, #36]	; (ddb8 <z_arm_configure_static_mpu_regions+0x2c>)
    dd92:	4623      	mov	r3, r4
    dd94:	2101      	movs	r1, #1
    dd96:	4809      	ldr	r0, [pc, #36]	; (ddbc <z_arm_configure_static_mpu_regions+0x30>)
    dd98:	f000 f976 	bl	e088 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    dd9c:	2300      	movs	r3, #0
    dd9e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    dda0:	4b07      	ldr	r3, [pc, #28]	; (ddc0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    dda2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    dda4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    dda6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    dda8:	9301      	str	r3, [sp, #4]
    ddaa:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ddac:	f000 f988 	bl	e0c0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    ddb0:	b004      	add	sp, #16
    ddb2:	bd10      	pop	{r4, pc}
    ddb4:	20070000 	.word	0x20070000
    ddb8:	20008000 	.word	0x20008000
    ddbc:	00021ea0 	.word	0x00021ea0
    ddc0:	200086c8 	.word	0x200086c8

0000ddc4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    ddc4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    ddc6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    ddc8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    ddca:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    ddce:	f004 031f 	and.w	r3, r4, #31
    ddd2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    ddd4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    ddd6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    ddd8:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    dddc:	4905      	ldr	r1, [pc, #20]	; (ddf4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    ddde:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    dde2:	f043 0301 	orr.w	r3, r3, #1
    dde6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    ddea:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    ddee:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    ddf2:	bd10      	pop	{r4, pc}
    ddf4:	e000ed00 	.word	0xe000ed00

0000ddf8 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    ddf8:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    ddfa:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    ddfc:	680c      	ldr	r4, [r1, #0]
{
    ddfe:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    de00:	890a      	ldrh	r2, [r1, #8]
    de02:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    de04:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    de06:	3b01      	subs	r3, #1
    de08:	f024 041f 	bic.w	r4, r4, #31
    de0c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    de0e:	f002 021f 	and.w	r2, r2, #31
    de12:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    de16:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    de1a:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    de1c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    de1e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    de22:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    de24:	d909      	bls.n	de3a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    de26:	4602      	mov	r2, r0
    de28:	2145      	movs	r1, #69	; 0x45
    de2a:	4806      	ldr	r0, [pc, #24]	; (de44 <mpu_configure_region+0x4c>)
    de2c:	f00e fd0a 	bl	1c844 <printk>
    de30:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    de34:	4620      	mov	r0, r4
    de36:	b005      	add	sp, #20
    de38:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    de3a:	4669      	mov	r1, sp
    de3c:	f7ff ffc2 	bl	ddc4 <region_init>
	return region_allocate_and_init(index,
    de40:	e7f8      	b.n	de34 <mpu_configure_region+0x3c>
    de42:	bf00      	nop
    de44:	00023d0c 	.word	0x00023d0c

0000de48 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de4c:	4689      	mov	r9, r1
    de4e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    de50:	4606      	mov	r6, r0
    de52:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    de56:	4d59      	ldr	r5, [pc, #356]	; (dfbc <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    de58:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    de5a:	45c8      	cmp	r8, r9
    de5c:	da27      	bge.n	deae <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    de5e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    de62:	f1ba 0f00 	cmp.w	sl, #0
    de66:	d045      	beq.n	def4 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    de68:	f1ba 0f1f 	cmp.w	sl, #31
    de6c:	d918      	bls.n	dea0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    de6e:	f01a 0f1f 	tst.w	sl, #31
    de72:	d115      	bne.n	dea0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    de74:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    de78:	f01b 0f1f 	tst.w	fp, #31
    de7c:	d110      	bne.n	dea0 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    de7e:	4658      	mov	r0, fp
    de80:	f010 f8a1 	bl	1dfc6 <arm_cmse_mpu_region_get>
    de84:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    de86:	eb0a 000b 	add.w	r0, sl, fp
    de8a:	3801      	subs	r0, #1
    de8c:	f010 f89b 	bl	1dfc6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    de90:	4287      	cmp	r7, r0
    de92:	d010      	beq.n	deb6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    de94:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    de98:	463a      	mov	r2, r7
    de9a:	2145      	movs	r1, #69	; 0x45
    de9c:	4848      	ldr	r0, [pc, #288]	; (dfc0 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    de9e:	e002      	b.n	dea6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    dea0:	4642      	mov	r2, r8
    dea2:	2145      	movs	r1, #69	; 0x45
    dea4:	4847      	ldr	r0, [pc, #284]	; (dfc4 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    dea6:	f00e fccd 	bl	1c844 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    deaa:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    deae:	4620      	mov	r0, r4
    deb0:	b005      	add	sp, #20
    deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    deb6:	f117 0f16 	cmn.w	r7, #22
    deba:	d0ed      	beq.n	de98 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    debc:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    debe:	42bb      	cmp	r3, r7
    dec0:	dbea      	blt.n	de98 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    dec2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    dec6:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    deca:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    dece:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    ded2:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    ded6:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    deda:	e9d6 3200 	ldrd	r3, r2, [r6]
    dede:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    dee0:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    dee2:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    dee6:	d11d      	bne.n	df24 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    dee8:	45d3      	cmp	fp, sl
    deea:	d107      	bne.n	defc <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    deec:	4631      	mov	r1, r6
    deee:	b2f8      	uxtb	r0, r7
    def0:	f7ff ff82 	bl	ddf8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    def4:	f108 0801 	add.w	r8, r8, #1
    def8:	360c      	adds	r6, #12
    defa:	e7ae      	b.n	de5a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    defc:	4631      	mov	r1, r6
	MPU->RNR = index;
    defe:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    df02:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    df06:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    df0a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    df0e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    df10:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    df14:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    df16:	f7ff ff6f 	bl	ddf8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    df1a:	f110 0f16 	cmn.w	r0, #22
    df1e:	d0c4      	beq.n	deaa <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    df20:	1c44      	adds	r4, r0, #1
    df22:	e7e7      	b.n	def4 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    df24:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    df26:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    df28:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    df2a:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    df2e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    df32:	d108      	bne.n	df46 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    df34:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    df38:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    df3a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    df3e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    df40:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    df44:	e7e7      	b.n	df16 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    df46:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    df4a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    df4e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    df50:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    df54:	4631      	mov	r1, r6
    df56:	f7ff ff4f 	bl	ddf8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    df5a:	f110 0f16 	cmn.w	r0, #22
    df5e:	d0a4      	beq.n	deaa <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    df60:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    df64:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    df68:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    df6c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    df70:	f362 0304 	bfi	r3, r2, #0, #5
    df74:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    df78:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    df7c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    df80:	085b      	lsrs	r3, r3, #1
    df82:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    df86:	e9d6 3100 	ldrd	r3, r1, [r6]
    df8a:	440b      	add	r3, r1
    df8c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    df8e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    df92:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    df94:	445b      	add	r3, fp
    df96:	eba3 030a 	sub.w	r3, r3, sl
    df9a:	b2c0      	uxtb	r0, r0
    df9c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    dfa0:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    dfa2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    dfa6:	9303      	str	r3, [sp, #12]
    dfa8:	d903      	bls.n	dfb2 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    dfaa:	4602      	mov	r2, r0
    dfac:	2145      	movs	r1, #69	; 0x45
    dfae:	4806      	ldr	r0, [pc, #24]	; (dfc8 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    dfb0:	e779      	b.n	dea6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    dfb2:	4669      	mov	r1, sp
    dfb4:	f7ff ff06 	bl	ddc4 <region_init>
    dfb8:	e7b2      	b.n	df20 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    dfba:	bf00      	nop
    dfbc:	e000ed00 	.word	0xe000ed00
    dfc0:	00023d5f 	.word	0x00023d5f
    dfc4:	00023d37 	.word	0x00023d37
    dfc8:	00023d0c 	.word	0x00023d0c

0000dfcc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    dfcc:	2205      	movs	r2, #5
    dfce:	4b04      	ldr	r3, [pc, #16]	; (dfe0 <arm_core_mpu_enable+0x14>)
    dfd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    dfd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dfd8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    dfdc:	4770      	bx	lr
    dfde:	bf00      	nop
    dfe0:	e000ed00 	.word	0xe000ed00

0000dfe4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    dfe4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    dfe8:	2200      	movs	r2, #0
    dfea:	4b02      	ldr	r3, [pc, #8]	; (dff4 <arm_core_mpu_disable+0x10>)
    dfec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    dff0:	4770      	bx	lr
    dff2:	bf00      	nop
    dff4:	e000ed00 	.word	0xe000ed00

0000dff8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    dff8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    dffa:	4d1d      	ldr	r5, [pc, #116]	; (e070 <arm_mpu_init+0x78>)
    dffc:	682c      	ldr	r4, [r5, #0]
    dffe:	2c08      	cmp	r4, #8
    e000:	d90d      	bls.n	e01e <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e002:	f240 123b 	movw	r2, #315	; 0x13b
    e006:	491b      	ldr	r1, [pc, #108]	; (e074 <arm_mpu_init+0x7c>)
    e008:	481b      	ldr	r0, [pc, #108]	; (e078 <arm_mpu_init+0x80>)
    e00a:	f00e fc1b 	bl	1c844 <printk>
    e00e:	4819      	ldr	r0, [pc, #100]	; (e074 <arm_mpu_init+0x7c>)
    e010:	f240 113b 	movw	r1, #315	; 0x13b
    e014:	f00e febc 	bl	1cd90 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e018:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e01c:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e01e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e020:	f7ff ffe0 	bl	dfe4 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e024:	4b15      	ldr	r3, [pc, #84]	; (e07c <arm_mpu_init+0x84>)
    e026:	4a16      	ldr	r2, [pc, #88]	; (e080 <arm_mpu_init+0x88>)
    e028:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e02c:	4284      	cmp	r4, r0
    e02e:	d117      	bne.n	e060 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e030:	4b14      	ldr	r3, [pc, #80]	; (e084 <arm_mpu_init+0x8c>)
    e032:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e034:	f7ff ffca 	bl	dfcc <arm_core_mpu_enable>
	__ASSERT(
    e038:	4b10      	ldr	r3, [pc, #64]	; (e07c <arm_mpu_init+0x84>)
    e03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e03e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e042:	2b08      	cmp	r3, #8
    e044:	d00a      	beq.n	e05c <arm_mpu_init+0x64>
    e046:	490b      	ldr	r1, [pc, #44]	; (e074 <arm_mpu_init+0x7c>)
    e048:	480b      	ldr	r0, [pc, #44]	; (e078 <arm_mpu_init+0x80>)
    e04a:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e04e:	f00e fbf9 	bl	1c844 <printk>
    e052:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e056:	4807      	ldr	r0, [pc, #28]	; (e074 <arm_mpu_init+0x7c>)
    e058:	f00e fe9a 	bl	1cd90 <assert_post_action>
	return 0;
    e05c:	2000      	movs	r0, #0
    e05e:	e7dd      	b.n	e01c <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e060:	6869      	ldr	r1, [r5, #4]
    e062:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e066:	f7ff fead 	bl	ddc4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e06a:	3001      	adds	r0, #1
    e06c:	e7de      	b.n	e02c <arm_mpu_init+0x34>
    e06e:	bf00      	nop
    e070:	00021eac 	.word	0x00021eac
    e074:	00023d87 	.word	0x00023d87
    e078:	00022c66 	.word	0x00022c66
    e07c:	e000ed00 	.word	0xe000ed00
    e080:	0044ffaa 	.word	0x0044ffaa
    e084:	2000b646 	.word	0x2000b646

0000e088 <arm_core_mpu_configure_static_mpu_regions>:
{
    e088:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e08a:	4c0a      	ldr	r4, [pc, #40]	; (e0b4 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e08c:	7822      	ldrb	r2, [r4, #0]
    e08e:	f7ff fedb 	bl	de48 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e092:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e094:	3016      	adds	r0, #22
    e096:	d10c      	bne.n	e0b2 <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e098:	4907      	ldr	r1, [pc, #28]	; (e0b8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e09a:	4808      	ldr	r0, [pc, #32]	; (e0bc <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e09c:	f44f 7282 	mov.w	r2, #260	; 0x104
    e0a0:	f00e fbd0 	bl	1c844 <printk>
}
    e0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e0a8:	f44f 7182 	mov.w	r1, #260	; 0x104
    e0ac:	4802      	ldr	r0, [pc, #8]	; (e0b8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e0ae:	f00e be6f 	b.w	1cd90 <assert_post_action>
}
    e0b2:	bd10      	pop	{r4, pc}
    e0b4:	2000b646 	.word	0x2000b646
    e0b8:	00023d87 	.word	0x00023d87
    e0bc:	00022c66 	.word	0x00022c66

0000e0c0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0c4:	4d30      	ldr	r5, [pc, #192]	; (e188 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e0c6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e0c8:	4606      	mov	r6, r0
    e0ca:	f04f 0800 	mov.w	r8, #0
    e0ce:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e0d0:	4f2e      	ldr	r7, [pc, #184]	; (e18c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e0d2:	45d0      	cmp	r8, sl
    e0d4:	db02      	blt.n	e0dc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e0d6:	b003      	add	sp, #12
    e0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e0dc:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e0e0:	f1b9 0f00 	cmp.w	r9, #0
    e0e4:	d04a      	beq.n	e17c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e0e6:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e0e8:	4608      	mov	r0, r1
    e0ea:	9101      	str	r1, [sp, #4]
    e0ec:	f00f ff6b 	bl	1dfc6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e0f0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e0f2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e0f4:	eb09 0001 	add.w	r0, r9, r1
    e0f8:	3801      	subs	r0, #1
    e0fa:	f00f ff64 	bl	1dfc6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e0fe:	4284      	cmp	r4, r0
    e100:	f04f 0214 	mov.w	r2, #20
    e104:	4b22      	ldr	r3, [pc, #136]	; (e190 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e106:	d013      	beq.n	e130 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e108:	f06f 0315 	mvn.w	r3, #21
    e10c:	fb02 f808 	mul.w	r8, r2, r8
    e110:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e114:	f44f 728a 	mov.w	r2, #276	; 0x114
    e118:	491e      	ldr	r1, [pc, #120]	; (e194 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e11a:	481f      	ldr	r0, [pc, #124]	; (e198 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e11c:	f00e fb92 	bl	1c844 <printk>
    e120:	f44f 718a 	mov.w	r1, #276	; 0x114
    e124:	481b      	ldr	r0, [pc, #108]	; (e194 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e126:	b003      	add	sp, #12
    e128:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e12c:	f00e be30 	b.w	1cd90 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e130:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e134:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e136:	d0ed      	beq.n	e114 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e138:	7819      	ldrb	r1, [r3, #0]
    e13a:	42a1      	cmp	r1, r4
    e13c:	ddea      	ble.n	e114 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e13e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e142:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e146:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e14a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e14e:	f100 0108 	add.w	r1, r0, #8
    e152:	7b00      	ldrb	r0, [r0, #12]
    e154:	f364 0004 	bfi	r0, r4, #0, #5
    e158:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e15a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e15e:	790c      	ldrb	r4, [r1, #4]
    e160:	0840      	lsrs	r0, r0, #1
    e162:	f360 1447 	bfi	r4, r0, #5, #3
    e166:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e168:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e16c:	f021 011f 	bic.w	r1, r1, #31
    e170:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e172:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e176:	f021 011f 	bic.w	r1, r1, #31
    e17a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e17c:	f108 0801 	add.w	r8, r8, #1
    e180:	3514      	adds	r5, #20
    e182:	360c      	adds	r6, #12
    e184:	e7a5      	b.n	e0d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e186:	bf00      	nop
    e188:	20009bd4 	.word	0x20009bd4
    e18c:	e000ed00 	.word	0xe000ed00
    e190:	2000b646 	.word	0x2000b646
    e194:	00023d87 	.word	0x00023d87
    e198:	00022c66 	.word	0x00022c66

0000e19c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e19c:	4b01      	ldr	r3, [pc, #4]	; (e1a4 <__stdout_hook_install+0x8>)
    e19e:	6018      	str	r0, [r3, #0]
}
    e1a0:	4770      	bx	lr
    e1a2:	bf00      	nop
    e1a4:	200082b4 	.word	0x200082b4

0000e1a8 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e1a8:	2000      	movs	r0, #0
    e1aa:	4b02      	ldr	r3, [pc, #8]	; (e1b4 <remoteproc_mgr_boot+0xc>)
    e1ac:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e1b0:	4770      	bx	lr
    e1b2:	bf00      	nop
    e1b4:	40005000 	.word	0x40005000

0000e1b8 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e1b8:	4b0e      	ldr	r3, [pc, #56]	; (e1f4 <bt_hex_real+0x3c>)
    e1ba:	2940      	cmp	r1, #64	; 0x40
    e1bc:	bf28      	it	cs
    e1be:	2140      	movcs	r1, #64	; 0x40
{
    e1c0:	b570      	push	{r4, r5, r6, lr}
    e1c2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e1c4:	4c0c      	ldr	r4, [pc, #48]	; (e1f8 <bt_hex_real+0x40>)
    e1c6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e1c8:	42b0      	cmp	r0, r6
    e1ca:	f103 0302 	add.w	r3, r3, #2
    e1ce:	d104      	bne.n	e1da <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e1d0:	2300      	movs	r3, #0
    e1d2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e1d6:	4807      	ldr	r0, [pc, #28]	; (e1f4 <bt_hex_real+0x3c>)
    e1d8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e1da:	7802      	ldrb	r2, [r0, #0]
    e1dc:	0912      	lsrs	r2, r2, #4
    e1de:	5ca2      	ldrb	r2, [r4, r2]
    e1e0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e1e4:	f810 2b01 	ldrb.w	r2, [r0], #1
    e1e8:	f002 020f 	and.w	r2, r2, #15
    e1ec:	5ca2      	ldrb	r2, [r4, r2]
    e1ee:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e1f2:	e7e9      	b.n	e1c8 <bt_hex_real+0x10>
    e1f4:	2000b665 	.word	0x2000b665
    e1f8:	00023df0 	.word	0x00023df0

0000e1fc <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e1fc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e1fe:	7803      	ldrb	r3, [r0, #0]
    e200:	b08b      	sub	sp, #44	; 0x2c
    e202:	4604      	mov	r4, r0
    e204:	ad07      	add	r5, sp, #28
    e206:	2b03      	cmp	r3, #3
    e208:	d821      	bhi.n	e24e <bt_addr_le_str_real+0x52>
    e20a:	e8df f003 	tbb	[pc, r3]
    e20e:	1a02      	.short	0x1a02
    e210:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e212:	4912      	ldr	r1, [pc, #72]	; (e25c <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e214:	4628      	mov	r0, r5
    e216:	f00f ff73 	bl	1e100 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e21a:	7863      	ldrb	r3, [r4, #1]
    e21c:	211e      	movs	r1, #30
    e21e:	9304      	str	r3, [sp, #16]
    e220:	78a3      	ldrb	r3, [r4, #2]
    e222:	4a0f      	ldr	r2, [pc, #60]	; (e260 <bt_addr_le_str_real+0x64>)
    e224:	9303      	str	r3, [sp, #12]
    e226:	78e3      	ldrb	r3, [r4, #3]
    e228:	9505      	str	r5, [sp, #20]
    e22a:	9302      	str	r3, [sp, #8]
    e22c:	7923      	ldrb	r3, [r4, #4]
    e22e:	480d      	ldr	r0, [pc, #52]	; (e264 <bt_addr_le_str_real+0x68>)
    e230:	9301      	str	r3, [sp, #4]
    e232:	7963      	ldrb	r3, [r4, #5]
    e234:	9300      	str	r3, [sp, #0]
    e236:	79a3      	ldrb	r3, [r4, #6]
    e238:	f00e fb11 	bl	1c85e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e23c:	4809      	ldr	r0, [pc, #36]	; (e264 <bt_addr_le_str_real+0x68>)
    e23e:	b00b      	add	sp, #44	; 0x2c
    e240:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e242:	4909      	ldr	r1, [pc, #36]	; (e268 <bt_addr_le_str_real+0x6c>)
    e244:	e7e6      	b.n	e214 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e246:	4909      	ldr	r1, [pc, #36]	; (e26c <bt_addr_le_str_real+0x70>)
    e248:	e7e4      	b.n	e214 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e24a:	4909      	ldr	r1, [pc, #36]	; (e270 <bt_addr_le_str_real+0x74>)
    e24c:	e7e2      	b.n	e214 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e24e:	210a      	movs	r1, #10
    e250:	4628      	mov	r0, r5
    e252:	4a08      	ldr	r2, [pc, #32]	; (e274 <bt_addr_le_str_real+0x78>)
    e254:	f00e fb03 	bl	1c85e <snprintk>
		break;
    e258:	e7df      	b.n	e21a <bt_addr_le_str_real+0x1e>
    e25a:	bf00      	nop
    e25c:	0002269b 	.word	0x0002269b
    e260:	000226c4 	.word	0x000226c4
    e264:	2000b647 	.word	0x2000b647
    e268:	000226a2 	.word	0x000226a2
    e26c:	000226a9 	.word	0x000226a9
    e270:	000226b3 	.word	0x000226b3
    e274:	000226bd 	.word	0x000226bd

0000e278 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e278:	2149      	movs	r1, #73	; 0x49
{
    e27a:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e27c:	4809      	ldr	r0, [pc, #36]	; (e2a4 <save_id+0x2c>)
    e27e:	f00e fae1 	bl	1c844 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e282:	4909      	ldr	r1, [pc, #36]	; (e2a8 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e284:	4809      	ldr	r0, [pc, #36]	; (e2ac <save_id+0x34>)
    e286:	79ca      	ldrb	r2, [r1, #7]
    e288:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e28c:	f7fd fb30 	bl	b8f0 <settings_save_one>
	if (err) {
    e290:	4602      	mov	r2, r0
    e292:	b128      	cbz	r0, e2a0 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e298:	2145      	movs	r1, #69	; 0x45
    e29a:	4805      	ldr	r0, [pc, #20]	; (e2b0 <save_id+0x38>)
    e29c:	f00e bad2 	b.w	1c844 <printk>
}
    e2a0:	bd08      	pop	{r3, pc}
    e2a2:	bf00      	nop
    e2a4:	00023e08 	.word	0x00023e08
    e2a8:	20008000 	.word	0x20008000
    e2ac:	00023e17 	.word	0x00023e17
    e2b0:	00023e1d 	.word	0x00023e1d

0000e2b4 <set>:
{
    e2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e2b6:	4616      	mov	r6, r2
    e2b8:	461f      	mov	r7, r3
	if (!name) {
    e2ba:	4604      	mov	r4, r0
    e2bc:	b930      	cbnz	r0, e2cc <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e2be:	2145      	movs	r1, #69	; 0x45
    e2c0:	4819      	ldr	r0, [pc, #100]	; (e328 <set+0x74>)
    e2c2:	f00e fabf 	bl	1c844 <printk>
	return -ENOENT;
    e2c6:	f06f 0401 	mvn.w	r4, #1
    e2ca:	e013      	b.n	e2f4 <set+0x40>
	len = settings_name_next(name, &next);
    e2cc:	a901      	add	r1, sp, #4
    e2ce:	f00e ff73 	bl	1d1b8 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e2d2:	4916      	ldr	r1, [pc, #88]	; (e32c <set+0x78>)
	len = settings_name_next(name, &next);
    e2d4:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e2d6:	4620      	mov	r0, r4
    e2d8:	f00f ff4a 	bl	1e170 <strncmp>
    e2dc:	4604      	mov	r4, r0
    e2de:	2800      	cmp	r0, #0
    e2e0:	d1f1      	bne.n	e2c6 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e2e2:	4d13      	ldr	r5, [pc, #76]	; (e330 <set+0x7c>)
    e2e4:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e2e8:	075b      	lsls	r3, r3, #29
    e2ea:	d506      	bpl.n	e2fa <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e2ec:	2157      	movs	r1, #87	; 0x57
    e2ee:	4811      	ldr	r0, [pc, #68]	; (e334 <set+0x80>)
    e2f0:	f00e faa8 	bl	1c844 <printk>
}
    e2f4:	4620      	mov	r0, r4
    e2f6:	b003      	add	sp, #12
    e2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e2fa:	3d94      	subs	r5, #148	; 0x94
    e2fc:	2207      	movs	r2, #7
    e2fe:	4629      	mov	r1, r5
    e300:	4638      	mov	r0, r7
    e302:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e304:	2806      	cmp	r0, #6
    e306:	d80a      	bhi.n	e31e <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e308:	2145      	movs	r1, #69	; 0x45
    e30a:	480b      	ldr	r0, [pc, #44]	; (e338 <set+0x84>)
    e30c:	f00e fa9a 	bl	1c844 <printk>
			(void)memset(bt_dev.id_addr, 0,
    e310:	2207      	movs	r2, #7
    e312:	4621      	mov	r1, r4
    e314:	4628      	mov	r0, r5
    e316:	f00f ff78 	bl	1e20a <memset>
			bt_dev.id_count = 0U;
    e31a:	71ec      	strb	r4, [r5, #7]
    e31c:	e7ea      	b.n	e2f4 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e31e:	2307      	movs	r3, #7
    e320:	fbb0 f0f3 	udiv	r0, r0, r3
    e324:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e326:	e7e5      	b.n	e2f4 <set+0x40>
    e328:	00023e3d 	.word	0x00023e3d
    e32c:	000226b0 	.word	0x000226b0
    e330:	20008094 	.word	0x20008094
    e334:	00023e63 	.word	0x00023e63
    e338:	00023e8c 	.word	0x00023e8c

0000e33c <bt_settings_encode_key>:
{
    e33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e340:	b088      	sub	sp, #32
    e342:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e346:	799c      	ldrb	r4, [r3, #6]
    e348:	795d      	ldrb	r5, [r3, #5]
    e34a:	791e      	ldrb	r6, [r3, #4]
    e34c:	78df      	ldrb	r7, [r3, #3]
    e34e:	f893 c002 	ldrb.w	ip, [r3, #2]
    e352:	f893 e001 	ldrb.w	lr, [r3, #1]
    e356:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e358:	f1b8 0f00 	cmp.w	r8, #0
    e35c:	d00e      	beq.n	e37c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e35e:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e362:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e366:	4613      	mov	r3, r2
    e368:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e36c:	e9cd 4500 	strd	r4, r5, [sp]
    e370:	4a08      	ldr	r2, [pc, #32]	; (e394 <bt_settings_encode_key+0x58>)
    e372:	f00e fa74 	bl	1c85e <snprintk>
}
    e376:	b008      	add	sp, #32
    e378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e37c:	e9cd e305 	strd	lr, r3, [sp, #20]
    e380:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e384:	4613      	mov	r3, r2
    e386:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e38a:	4a03      	ldr	r2, [pc, #12]	; (e398 <bt_settings_encode_key+0x5c>)
    e38c:	9400      	str	r4, [sp, #0]
    e38e:	f00e fa66 	bl	1c85e <snprintk>
}
    e392:	e7f0      	b.n	e376 <bt_settings_encode_key+0x3a>
    e394:	00023eb6 	.word	0x00023eb6
    e398:	00023eda 	.word	0x00023eda

0000e39c <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e39c:	4907      	ldr	r1, [pc, #28]	; (e3bc <bt_settings_save_id+0x20>)
    e39e:	e8d1 3fef 	ldaex	r3, [r1]
    e3a2:	f043 0201 	orr.w	r2, r3, #1
    e3a6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e3aa:	2800      	cmp	r0, #0
    e3ac:	d1f7      	bne.n	e39e <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e3ae:	07db      	lsls	r3, r3, #31
    e3b0:	d403      	bmi.n	e3ba <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e3b2:	4803      	ldr	r0, [pc, #12]	; (e3c0 <bt_settings_save_id+0x24>)
    e3b4:	3908      	subs	r1, #8
    e3b6:	f012 bf55 	b.w	21264 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e3ba:	4770      	bx	lr
    e3bc:	200082c0 	.word	0x200082c0
    e3c0:	20009630 	.word	0x20009630

0000e3c4 <commit>:

static int commit(void)
{
    e3c4:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e3c6:	4c13      	ldr	r4, [pc, #76]	; (e414 <commit+0x50>)
    e3c8:	79e3      	ldrb	r3, [r4, #7]
    e3ca:	b96b      	cbnz	r3, e3e8 <commit+0x24>
		bt_setup_public_id_addr();
    e3cc:	f002 f80c 	bl	103e8 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e3d0:	79e3      	ldrb	r3, [r4, #7]
    e3d2:	b94b      	cbnz	r3, e3e8 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e3d4:	f002 f896 	bl	10504 <bt_setup_random_id_addr>
		if (err) {
    e3d8:	4604      	mov	r4, r0
    e3da:	b128      	cbz	r0, e3e8 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e3dc:	2145      	movs	r1, #69	; 0x45
    e3de:	480e      	ldr	r0, [pc, #56]	; (e418 <commit+0x54>)
    e3e0:	f00e fa30 	bl	1c844 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e3e4:	4620      	mov	r0, r4
    e3e6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e3e8:	4d0c      	ldr	r5, [pc, #48]	; (e41c <commit+0x58>)
    e3ea:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e3ee:	079b      	lsls	r3, r3, #30
    e3f0:	d401      	bmi.n	e3f6 <commit+0x32>
		bt_finalize_init();
    e3f2:	f001 ff1b 	bl	1022c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e3f6:	e8d5 4fef 	ldaex	r4, [r5]
    e3fa:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e3fe:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e402:	2a00      	cmp	r2, #0
    e404:	d1f7      	bne.n	e3f6 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e406:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e40a:	d0eb      	beq.n	e3e4 <commit+0x20>
		bt_settings_save_id();
    e40c:	f7ff ffc6 	bl	e39c <bt_settings_save_id>
	return 0;
    e410:	2400      	movs	r4, #0
    e412:	e7e7      	b.n	e3e4 <commit+0x20>
    e414:	20008000 	.word	0x20008000
    e418:	00023efb 	.word	0x00023efb
    e41c:	20008094 	.word	0x20008094

0000e420 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e420:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e422:	f7fd fbdb 	bl	bbdc <settings_subsys_init>
	if (err) {
    e426:	4604      	mov	r4, r0
    e428:	b120      	cbz	r0, e434 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e42a:	4602      	mov	r2, r0
    e42c:	2145      	movs	r1, #69	; 0x45
    e42e:	4802      	ldr	r0, [pc, #8]	; (e438 <bt_settings_init+0x18>)
    e430:	f00e fa08 	bl	1c844 <printk>
		return err;
	}

	return 0;
}
    e434:	4620      	mov	r0, r4
    e436:	bd10      	pop	{r4, pc}
    e438:	00023f24 	.word	0x00023f24

0000e43c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e43c:	4603      	mov	r3, r0
    e43e:	b430      	push	{r4, r5}
	switch (src->type) {
    e440:	781a      	ldrb	r2, [r3, #0]
{
    e442:	4608      	mov	r0, r1
	switch (src->type) {
    e444:	2a01      	cmp	r2, #1
    e446:	d013      	beq.n	e470 <uuid_to_uuid128+0x34>
    e448:	2a02      	cmp	r2, #2
    e44a:	d026      	beq.n	e49a <uuid_to_uuid128+0x5e>
    e44c:	b972      	cbnz	r2, e46c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e44e:	4a15      	ldr	r2, [pc, #84]	; (e4a4 <uuid_to_uuid128+0x68>)
    e450:	f102 0410 	add.w	r4, r2, #16
    e454:	f852 5b04 	ldr.w	r5, [r2], #4
    e458:	42a2      	cmp	r2, r4
    e45a:	f841 5b04 	str.w	r5, [r1], #4
    e45e:	d1f9      	bne.n	e454 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e460:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e462:	7812      	ldrb	r2, [r2, #0]
    e464:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e466:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e468:	0a1b      	lsrs	r3, r3, #8
    e46a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e46c:	bc30      	pop	{r4, r5}
    e46e:	4770      	bx	lr
		*dst = uuid128_base;
    e470:	4a0c      	ldr	r2, [pc, #48]	; (e4a4 <uuid_to_uuid128+0x68>)
    e472:	f102 0410 	add.w	r4, r2, #16
    e476:	f852 5b04 	ldr.w	r5, [r2], #4
    e47a:	42a2      	cmp	r2, r4
    e47c:	f841 5b04 	str.w	r5, [r1], #4
    e480:	d1f9      	bne.n	e476 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e482:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e484:	7812      	ldrb	r2, [r2, #0]
    e486:	700a      	strb	r2, [r1, #0]
    e488:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e48c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e48e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e490:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e492:	0a1b      	lsrs	r3, r3, #8
    e494:	7382      	strb	r2, [r0, #14]
    e496:	7403      	strb	r3, [r0, #16]
}
    e498:	e7e8      	b.n	e46c <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e49a:	2211      	movs	r2, #17
}
    e49c:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e49e:	4619      	mov	r1, r3
    e4a0:	f00f be88 	b.w	1e1b4 <memcpy>
    e4a4:	00023f5d 	.word	0x00023f5d

0000e4a8 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e4a8:	2801      	cmp	r0, #1
{
    e4aa:	b570      	push	{r4, r5, r6, lr}
    e4ac:	4605      	mov	r5, r0
    e4ae:	4616      	mov	r6, r2
    e4b0:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e4b2:	d010      	beq.n	e4d6 <bt_buf_get_rx+0x2e>
    e4b4:	2803      	cmp	r0, #3
    e4b6:	d00a      	beq.n	e4ce <bt_buf_get_rx+0x26>
    e4b8:	2805      	cmp	r0, #5
    e4ba:	d008      	beq.n	e4ce <bt_buf_get_rx+0x26>
    e4bc:	490c      	ldr	r1, [pc, #48]	; (e4f0 <bt_buf_get_rx+0x48>)
    e4be:	480d      	ldr	r0, [pc, #52]	; (e4f4 <bt_buf_get_rx+0x4c>)
    e4c0:	2233      	movs	r2, #51	; 0x33
    e4c2:	f00e f9bf 	bl	1c844 <printk>
    e4c6:	2133      	movs	r1, #51	; 0x33
    e4c8:	4809      	ldr	r0, [pc, #36]	; (e4f0 <bt_buf_get_rx+0x48>)
    e4ca:	f00e fc61 	bl	1cd90 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e4ce:	4632      	mov	r2, r6
    e4d0:	4623      	mov	r3, r4
    e4d2:	4809      	ldr	r0, [pc, #36]	; (e4f8 <bt_buf_get_rx+0x50>)
    e4d4:	e000      	b.n	e4d8 <bt_buf_get_rx+0x30>
    e4d6:	4809      	ldr	r0, [pc, #36]	; (e4fc <bt_buf_get_rx+0x54>)
    e4d8:	f011 ffce 	bl	20478 <net_buf_alloc_fixed>
    e4dc:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e4de:	b12c      	cbz	r4, e4ec <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    e4e0:	2101      	movs	r1, #1
    e4e2:	f104 0008 	add.w	r0, r4, #8
    e4e6:	f008 ffc5 	bl	17474 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e4ea:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e4ec:	4620      	mov	r0, r4
    e4ee:	bd70      	pop	{r4, r5, r6, pc}
    e4f0:	00023f6e 	.word	0x00023f6e
    e4f4:	00022c66 	.word	0x00022c66
    e4f8:	20008594 	.word	0x20008594
    e4fc:	20008670 	.word	0x20008670

0000e500 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e500:	4602      	mov	r2, r0
    e502:	460b      	mov	r3, r1
    e504:	b570      	push	{r4, r5, r6, lr}
    e506:	f04f 0120 	mov.w	r1, #32
    e50a:	f3ef 8511 	mrs	r5, BASEPRI
    e50e:	f381 8811 	msr	BASEPRI, r1
    e512:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    e516:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    e518:	490b      	ldr	r1, [pc, #44]	; (e548 <bt_buf_get_cmd_complete+0x48>)
    e51a:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    e51e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
	__asm__ volatile(
    e522:	f385 8811 	msr	BASEPRI, r5
    e526:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    e52a:	b924      	cbnz	r4, e536 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    e52c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e530:	2001      	movs	r0, #1
    e532:	f7ff bfb9 	b.w	e4a8 <bt_buf_get_rx>
    e536:	2101      	movs	r1, #1
		buf->len = 0U;
    e538:	81a0      	strh	r0, [r4, #12]
    e53a:	7521      	strb	r1, [r4, #20]
    e53c:	f104 0008 	add.w	r0, r4, #8
    e540:	f008 ff98 	bl	17474 <net_buf_simple_reserve>
}
    e544:	4620      	mov	r0, r4
    e546:	bd70      	pop	{r4, r5, r6, pc}
    e548:	20008000 	.word	0x20008000

0000e54c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e54c:	b570      	push	{r4, r5, r6, lr}
    e54e:	4604      	mov	r4, r0
	switch (evt) {
    e550:	2c0f      	cmp	r4, #15
{
    e552:	460d      	mov	r5, r1
    e554:	4610      	mov	r0, r2
    e556:	4619      	mov	r1, r3
	switch (evt) {
    e558:	d805      	bhi.n	e566 <bt_buf_get_evt+0x1a>
    e55a:	2c0d      	cmp	r4, #13
    e55c:	d912      	bls.n	e584 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    e55e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    e562:	f7ff bfcd 	b.w	e500 <bt_buf_get_cmd_complete>
	switch (evt) {
    e566:	2c13      	cmp	r4, #19
    e568:	d10c      	bne.n	e584 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    e56a:	480b      	ldr	r0, [pc, #44]	; (e598 <bt_buf_get_evt+0x4c>)
    e56c:	f011 ff84 	bl	20478 <net_buf_alloc_fixed>
			if (buf) {
    e570:	4604      	mov	r4, r0
    e572:	b128      	cbz	r0, e580 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    e574:	2101      	movs	r1, #1
    e576:	3008      	adds	r0, #8
    e578:	f008 ff7c 	bl	17474 <net_buf_simple_reserve>
    e57c:	2301      	movs	r3, #1
    e57e:	7523      	strb	r3, [r4, #20]
}
    e580:	4620      	mov	r0, r4
    e582:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    e584:	4602      	mov	r2, r0
    e586:	460b      	mov	r3, r1
		if (discardable) {
    e588:	b10d      	cbz	r5, e58e <bt_buf_get_evt+0x42>
    e58a:	4804      	ldr	r0, [pc, #16]	; (e59c <bt_buf_get_evt+0x50>)
    e58c:	e7ee      	b.n	e56c <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e58e:	2001      	movs	r0, #1
}
    e590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e594:	f7ff bf88 	b.w	e4a8 <bt_buf_get_rx>
    e598:	2000869c 	.word	0x2000869c
    e59c:	200085ec 	.word	0x200085ec

0000e5a0 <bt_adv_foreach>:
{
    e5a0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    e5a2:	4801      	ldr	r0, [pc, #4]	; (e5a8 <bt_adv_foreach+0x8>)
    e5a4:	4718      	bx	r3
    e5a6:	bf00      	nop
    e5a8:	20008018 	.word	0x20008018

0000e5ac <le_dhkey_complete>:
	if (dh_key_cb) {
    e5ac:	4905      	ldr	r1, [pc, #20]	; (e5c4 <le_dhkey_complete+0x18>)
    e5ae:	680b      	ldr	r3, [r1, #0]
    e5b0:	b133      	cbz	r3, e5c0 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    e5b2:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    e5b4:	2000      	movs	r0, #0
    e5b6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    e5b8:	7811      	ldrb	r1, [r2, #0]
    e5ba:	b901      	cbnz	r1, e5be <le_dhkey_complete+0x12>
    e5bc:	1c50      	adds	r0, r2, #1
    e5be:	4718      	bx	r3
}
    e5c0:	4770      	bx	lr
    e5c2:	bf00      	nop
    e5c4:	20009c00 	.word	0x20009c00

0000e5c8 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    e5c8:	6883      	ldr	r3, [r0, #8]
    e5ca:	2157      	movs	r1, #87	; 0x57
    e5cc:	781a      	ldrb	r2, [r3, #0]
    e5ce:	4801      	ldr	r0, [pc, #4]	; (e5d4 <hci_data_buf_overflow+0xc>)
    e5d0:	f00e b938 	b.w	1c844 <printk>
    e5d4:	00023fa4 	.word	0x00023fa4

0000e5d8 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    e5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5da:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e5dc:	2500      	movs	r5, #0
    e5de:	4f09      	ldr	r7, [pc, #36]	; (e604 <id_find+0x2c>)
    e5e0:	79fb      	ldrb	r3, [r7, #7]
    e5e2:	b2ec      	uxtb	r4, r5
    e5e4:	42a3      	cmp	r3, r4
    e5e6:	d802      	bhi.n	e5ee <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e5e8:	f06f 0401 	mvn.w	r4, #1
    e5ec:	e008      	b.n	e600 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    e5ee:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e5f2:	4630      	mov	r0, r6
    e5f4:	4439      	add	r1, r7
    e5f6:	f00f ff0c 	bl	1e412 <bt_addr_le_cmp>
    e5fa:	3501      	adds	r5, #1
    e5fc:	2800      	cmp	r0, #0
    e5fe:	d1ef      	bne.n	e5e0 <id_find+0x8>
}
    e600:	4620      	mov	r0, r4
    e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e604:	20008000 	.word	0x20008000

0000e608 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e608:	6843      	ldr	r3, [r0, #4]
{
    e60a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e60c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e60e:	0558      	lsls	r0, r3, #21
    e610:	d502      	bpl.n	e618 <valid_adv_param+0x10>
		return false;
    e612:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    e614:	b003      	add	sp, #12
    e616:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e618:	6922      	ldr	r2, [r4, #16]
    e61a:	b10a      	cbz	r2, e620 <valid_adv_param+0x18>
    e61c:	07d9      	lsls	r1, r3, #31
    e61e:	d5f8      	bpl.n	e612 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    e620:	4d1a      	ldr	r5, [pc, #104]	; (e68c <valid_adv_param+0x84>)
    e622:	7820      	ldrb	r0, [r4, #0]
    e624:	79eb      	ldrb	r3, [r5, #7]
    e626:	4283      	cmp	r3, r0
    e628:	d9f3      	bls.n	e612 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    e62a:	2300      	movs	r3, #0
    e62c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e630:	4669      	mov	r1, sp
    e632:	4428      	add	r0, r5
    e634:	9300      	str	r3, [sp, #0]
    e636:	f8cd 3003 	str.w	r3, [sp, #3]
    e63a:	f00f feea 	bl	1e412 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    e63e:	2800      	cmp	r0, #0
    e640:	d0e7      	beq.n	e612 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e642:	6860      	ldr	r0, [r4, #4]
    e644:	07c2      	lsls	r2, r0, #31
    e646:	d406      	bmi.n	e656 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    e648:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    e64c:	2b08      	cmp	r3, #8
    e64e:	d802      	bhi.n	e656 <valid_adv_param+0x4e>
    e650:	68a3      	ldr	r3, [r4, #8]
    e652:	2b9f      	cmp	r3, #159	; 0x9f
    e654:	d9dd      	bls.n	e612 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    e656:	f010 0f30 	tst.w	r0, #48	; 0x30
    e65a:	d002      	beq.n	e662 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    e65c:	6923      	ldr	r3, [r4, #16]
    e65e:	2b00      	cmp	r3, #0
    e660:	d0d7      	beq.n	e612 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    e662:	06c3      	lsls	r3, r0, #27
    e664:	d401      	bmi.n	e66a <valid_adv_param+0x62>
    e666:	6923      	ldr	r3, [r4, #16]
    e668:	b943      	cbnz	r3, e67c <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    e66a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e66e:	429a      	cmp	r2, r3
    e670:	d8cf      	bhi.n	e612 <valid_adv_param+0xa>
    e672:	2a1f      	cmp	r2, #31
    e674:	d9cd      	bls.n	e612 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    e676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e67a:	d8ca      	bhi.n	e612 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    e67c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    e680:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    e684:	bf18      	it	ne
    e686:	2001      	movne	r0, #1
    e688:	e7c4      	b.n	e614 <valid_adv_param+0xc>
    e68a:	bf00      	nop
    e68c:	20008000 	.word	0x20008000

0000e690 <le_pkey_complete>:
{
    e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    e692:	6885      	ldr	r5, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e694:	f06f 0110 	mvn.w	r1, #16
    e698:	480e      	ldr	r0, [pc, #56]	; (e6d4 <le_pkey_complete+0x44>)
    e69a:	f00f febd 	bl	1e418 <atomic_and>
	if (!evt->status) {
    e69e:	782b      	ldrb	r3, [r5, #0]
    e6a0:	b943      	cbnz	r3, e6b4 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    e6a2:	1c69      	adds	r1, r5, #1
    e6a4:	2240      	movs	r2, #64	; 0x40
    e6a6:	480c      	ldr	r0, [pc, #48]	; (e6d8 <le_pkey_complete+0x48>)
    e6a8:	f00f fd84 	bl	1e1b4 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e6ac:	2108      	movs	r1, #8
    e6ae:	4809      	ldr	r0, [pc, #36]	; (e6d4 <le_pkey_complete+0x44>)
    e6b0:	f00f fe99 	bl	1e3e6 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e6b4:	4e09      	ldr	r6, [pc, #36]	; (e6dc <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    e6b6:	4f08      	ldr	r7, [pc, #32]	; (e6d8 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e6b8:	6834      	ldr	r4, [r6, #0]
    e6ba:	b90c      	cbnz	r4, e6c0 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    e6bc:	6034      	str	r4, [r6, #0]
}
    e6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    e6c0:	782a      	ldrb	r2, [r5, #0]
    e6c2:	6823      	ldr	r3, [r4, #0]
    e6c4:	2a00      	cmp	r2, #0
    e6c6:	bf0c      	ite	eq
    e6c8:	4638      	moveq	r0, r7
    e6ca:	2000      	movne	r0, #0
    e6cc:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    e6ce:	6864      	ldr	r4, [r4, #4]
    e6d0:	e7f3      	b.n	e6ba <le_pkey_complete+0x2a>
    e6d2:	bf00      	nop
    e6d4:	20008094 	.word	0x20008094
    e6d8:	2000b6e6 	.word	0x2000b6e6
    e6dc:	20009c04 	.word	0x20009c04

0000e6e0 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e6e0:	6883      	ldr	r3, [r0, #8]
{
    e6e2:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e6e4:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    e6e6:	4620      	mov	r0, r4
    e6e8:	f002 fea0 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    e6ec:	b930      	cbnz	r0, e6fc <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e6ee:	4622      	mov	r2, r4
}
    e6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e6f4:	2145      	movs	r1, #69	; 0x45
    e6f6:	4803      	ldr	r0, [pc, #12]	; (e704 <le_data_len_change+0x24>)
    e6f8:	f00e b8a4 	b.w	1c844 <printk>
}
    e6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    e700:	f002 be70 	b.w	113e4 <bt_conn_unref>
    e704:	00023fd1 	.word	0x00023fd1

0000e708 <hci_disconn_complete_prio>:
{
    e708:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e70a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    e70c:	781a      	ldrb	r2, [r3, #0]
    e70e:	b9aa      	cbnz	r2, e73c <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e710:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    e714:	4628      	mov	r0, r5
    e716:	f002 fe89 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    e71a:	4604      	mov	r4, r0
    e71c:	b930      	cbnz	r0, e72c <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e71e:	462a      	mov	r2, r5
}
    e720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    e724:	2145      	movs	r1, #69	; 0x45
    e726:	4806      	ldr	r0, [pc, #24]	; (e740 <hci_disconn_complete_prio+0x38>)
    e728:	f00e b88c 	b.w	1c844 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e72c:	2101      	movs	r1, #1
    e72e:	f002 fe85 	bl	1143c <bt_conn_set_state>
	bt_conn_unref(conn);
    e732:	4620      	mov	r0, r4
}
    e734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    e738:	f002 be54 	b.w	113e4 <bt_conn_unref>
}
    e73c:	bd38      	pop	{r3, r4, r5, pc}
    e73e:	bf00      	nop
    e740:	00023ffa 	.word	0x00023ffa

0000e744 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    e744:	2101      	movs	r1, #1
{
    e746:	b508      	push	{r3, lr}
    e748:	3008      	adds	r0, #8
    e74a:	f008 ffdd 	bl	17708 <net_buf_simple_pull_mem>
}
    e74e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    e752:	7802      	ldrb	r2, [r0, #0]
    e754:	2145      	movs	r1, #69	; 0x45
    e756:	4801      	ldr	r0, [pc, #4]	; (e75c <hci_hardware_error+0x18>)
    e758:	f00e b874 	b.w	1c844 <printk>
    e75c:	00024025 	.word	0x00024025

0000e760 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    e760:	8981      	ldrh	r1, [r0, #12]
{
    e762:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e764:	6880      	ldr	r0, [r0, #8]
    e766:	f7ff fd27 	bl	e1b8 <bt_hex_real>
}
    e76a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e76e:	4602      	mov	r2, r0
    e770:	2157      	movs	r1, #87	; 0x57
    e772:	4801      	ldr	r0, [pc, #4]	; (e778 <hci_vendor_event+0x18>)
    e774:	f00e b866 	b.w	1c844 <printk>
    e778:	0002404c 	.word	0x0002404c

0000e77c <le_conn_update_complete>:
{
    e77c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    e77e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    e780:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e784:	4630      	mov	r0, r6
    e786:	f002 fe51 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    e78a:	4604      	mov	r4, r0
    e78c:	b938      	cbnz	r0, e79e <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e78e:	4632      	mov	r2, r6
    e790:	2145      	movs	r1, #69	; 0x45
    e792:	4821      	ldr	r0, [pc, #132]	; (e818 <le_conn_update_complete+0x9c>)
}
    e794:	b002      	add	sp, #8
    e796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e79a:	f00e b853 	b.w	1c844 <printk>
	if (!evt->status) {
    e79e:	782b      	ldrb	r3, [r5, #0]
    e7a0:	b9cb      	cbnz	r3, e7d6 <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    e7a2:	792a      	ldrb	r2, [r5, #4]
    e7a4:	78eb      	ldrb	r3, [r5, #3]
    e7a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e7aa:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    e7ae:	79aa      	ldrb	r2, [r5, #6]
    e7b0:	796b      	ldrb	r3, [r5, #5]
    e7b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e7b6:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e7ba:	79eb      	ldrb	r3, [r5, #7]
    e7bc:	7a2a      	ldrb	r2, [r5, #8]
    e7be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e7c2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    e7c6:	f002 fc23 	bl	11010 <notify_le_param_updated>
	bt_conn_unref(conn);
    e7ca:	4620      	mov	r0, r4
}
    e7cc:	b002      	add	sp, #8
    e7ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    e7d2:	f002 be07 	b.w	113e4 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    e7d6:	2b1a      	cmp	r3, #26
    e7d8:	d1f7      	bne.n	e7ca <le_conn_update_complete+0x4e>
    e7da:	78c3      	ldrb	r3, [r0, #3]
    e7dc:	2b01      	cmp	r3, #1
    e7de:	d1f4      	bne.n	e7ca <le_conn_update_complete+0x4e>
		   !atomic_test_and_set_bit(conn->flags,
    e7e0:	210a      	movs	r1, #10
    e7e2:	3004      	adds	r0, #4
    e7e4:	f00f fe0a 	bl	1e3fc <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    e7e8:	2800      	cmp	r0, #0
    e7ea:	d1ee      	bne.n	e7ca <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    e7ec:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    e7f0:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    e7f2:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    e7f6:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    e7fa:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    e7fc:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    e800:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    e804:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    e808:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    e80c:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    e810:	f003 fc1c 	bl	1204c <bt_l2cap_update_conn_param>
    e814:	e7d9      	b.n	e7ca <le_conn_update_complete+0x4e>
    e816:	bf00      	nop
    e818:	00023fd1 	.word	0x00023fd1

0000e81c <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    e81c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    e81e:	7803      	ldrb	r3, [r0, #0]
{
    e820:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    e822:	f88d 3004 	strb.w	r3, [sp, #4]
    e826:	2300      	movs	r3, #0
{
    e828:	4605      	mov	r5, r0
    e82a:	460f      	mov	r7, r1
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    e82c:	4822      	ldr	r0, [pc, #136]	; (e8b8 <le_adv_start_add_conn+0x9c>)
    e82e:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    e830:	f88d 3005 	strb.w	r3, [sp, #5]
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    e834:	f7ff feb4 	bl	e5a0 <bt_adv_foreach>
	if (check_data.adv_enabled) {
    e838:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e83c:	bb9b      	cbnz	r3, e8a6 <le_adv_start_add_conn+0x8a>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    e83e:	462e      	mov	r6, r5
    e840:	4a1e      	ldr	r2, [pc, #120]	; (e8bc <le_adv_start_add_conn+0xa0>)
    e842:	f816 1b09 	ldrb.w	r1, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e846:	9302      	str	r3, [sp, #8]
	bt_dev.adv_conn_id = adv->id;
    e848:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e84c:	4630      	mov	r0, r6
    e84e:	a902      	add	r1, sp, #8
    e850:	f8cd 300b 	str.w	r3, [sp, #11]
    e854:	f00f fddd 	bl	1e412 <bt_addr_le_cmp>
    e858:	782a      	ldrb	r2, [r5, #0]
    e85a:	4604      	mov	r4, r0
    e85c:	b9a8      	cbnz	r0, e88a <le_adv_start_add_conn+0x6e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    e85e:	4b18      	ldr	r3, [pc, #96]	; (e8c0 <le_adv_start_add_conn+0xa4>)
    e860:	6818      	ldr	r0, [r3, #0]
    e862:	8899      	ldrh	r1, [r3, #4]
    e864:	799b      	ldrb	r3, [r3, #6]
    e866:	9004      	str	r0, [sp, #16]
    e868:	f8ad 1014 	strh.w	r1, [sp, #20]
    e86c:	4610      	mov	r0, r2
    e86e:	a904      	add	r1, sp, #16
    e870:	f88d 3016 	strb.w	r3, [sp, #22]
    e874:	f002 fd88 	bl	11388 <bt_conn_add_le>
		if (!conn) {
    e878:	4605      	mov	r5, r0
    e87a:	b1d0      	cbz	r0, e8b2 <le_adv_start_add_conn+0x96>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    e87c:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e87e:	f002 fddd 	bl	1143c <bt_conn_set_state>
	*out_conn = conn;
    e882:	603d      	str	r5, [r7, #0]
	return 0;
}
    e884:	4620      	mov	r0, r4
    e886:	b007      	add	sp, #28
    e888:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    e88a:	4631      	mov	r1, r6
    e88c:	4610      	mov	r0, r2
    e88e:	f002 feeb 	bl	11668 <bt_conn_exists_le>
    e892:	4604      	mov	r4, r0
    e894:	b950      	cbnz	r0, e8ac <le_adv_start_add_conn+0x90>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    e896:	7828      	ldrb	r0, [r5, #0]
    e898:	4631      	mov	r1, r6
    e89a:	f002 fd75 	bl	11388 <bt_conn_add_le>
	if (!conn) {
    e89e:	4605      	mov	r5, r0
    e8a0:	b138      	cbz	r0, e8b2 <le_adv_start_add_conn+0x96>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e8a2:	2105      	movs	r1, #5
    e8a4:	e7eb      	b.n	e87e <le_adv_start_add_conn+0x62>
		return -ENOTSUP;
    e8a6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e8aa:	e7eb      	b.n	e884 <le_adv_start_add_conn+0x68>
		return -EINVAL;
    e8ac:	f06f 0415 	mvn.w	r4, #21
    e8b0:	e7e8      	b.n	e884 <le_adv_start_add_conn+0x68>
		return -ENOMEM;
    e8b2:	f06f 040b 	mvn.w	r4, #11
    e8b6:	e7e5      	b.n	e884 <le_adv_start_add_conn+0x68>
    e8b8:	0001e477 	.word	0x0001e477
    e8bc:	20008000 	.word	0x20008000
    e8c0:	00021aa4 	.word	0x00021aa4

0000e8c4 <update_sec_level.part.0>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    e8c4:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
static void update_sec_level(struct bt_conn *conn)
    e8c8:	b510      	push	{r4, lr}
    e8ca:	4604      	mov	r4, r0
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    e8cc:	b1cb      	cbz	r3, e902 <update_sec_level.part.0+0x3e>
    e8ce:	7b5a      	ldrb	r2, [r3, #13]
    e8d0:	07d1      	lsls	r1, r2, #31
    e8d2:	d516      	bpl.n	e902 <update_sec_level.part.0+0x3e>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    e8d4:	06d2      	lsls	r2, r2, #27
    e8d6:	d512      	bpl.n	e8fe <update_sec_level.part.0+0x3a>
    e8d8:	7b1b      	ldrb	r3, [r3, #12]
    e8da:	2b10      	cmp	r3, #16
    e8dc:	d10f      	bne.n	e8fe <update_sec_level.part.0+0x3a>
			conn->sec_level = BT_SECURITY_L4;
    e8de:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    e8e0:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    e8e2:	7aa2      	ldrb	r2, [r4, #10]
    e8e4:	7a63      	ldrb	r3, [r4, #9]
    e8e6:	429a      	cmp	r2, r3
    e8e8:	d90d      	bls.n	e906 <update_sec_level.part.0+0x42>
		BT_ERR("Failed to set required security level");
    e8ea:	2145      	movs	r1, #69	; 0x45
    e8ec:	4806      	ldr	r0, [pc, #24]	; (e908 <update_sec_level.part.0+0x44>)
    e8ee:	f00d ffa9 	bl	1c844 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    e8f2:	4620      	mov	r0, r4
}
    e8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    e8f8:	2105      	movs	r1, #5
    e8fa:	f003 b839 	b.w	11970 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    e8fe:	2303      	movs	r3, #3
    e900:	e7ee      	b.n	e8e0 <update_sec_level.part.0+0x1c>
		conn->sec_level = BT_SECURITY_L2;
    e902:	2302      	movs	r3, #2
    e904:	e7ec      	b.n	e8e0 <update_sec_level.part.0+0x1c>
}
    e906:	bd10      	pop	{r4, pc}
    e908:	00024075 	.word	0x00024075

0000e90c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    e90c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e90e:	4c0c      	ldr	r4, [pc, #48]	; (e940 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    e910:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e912:	2205      	movs	r2, #5
    e914:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    e918:	f002 fec2 	bl	116a0 <bt_conn_lookup_state_le>
		if (!conn) {
    e91c:	b970      	cbnz	r0, e93c <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    e91e:	4b09      	ldr	r3, [pc, #36]	; (e944 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e920:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    e922:	6818      	ldr	r0, [r3, #0]
    e924:	889a      	ldrh	r2, [r3, #4]
    e926:	799b      	ldrb	r3, [r3, #6]
    e928:	9000      	str	r0, [sp, #0]
    e92a:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e92e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    e932:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    e934:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e938:	f002 feb2 	bl	116a0 <bt_conn_lookup_state_le>
}
    e93c:	b002      	add	sp, #8
    e93e:	bd10      	pop	{r4, pc}
    e940:	20008000 	.word	0x20008000
    e944:	00021aa4 	.word	0x00021aa4

0000e948 <handle_event>:
{
    e948:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e94a:	4605      	mov	r5, r0
    e94c:	4614      	mov	r4, r2
    e94e:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    e950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    e954:	7822      	ldrb	r2, [r4, #0]
    e956:	42aa      	cmp	r2, r5
    e958:	d010      	beq.n	e97c <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    e95a:	3408      	adds	r4, #8
    e95c:	429c      	cmp	r4, r3
    e95e:	d1f9      	bne.n	e954 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    e960:	8984      	ldrh	r4, [r0, #12]
    e962:	6880      	ldr	r0, [r0, #8]
    e964:	4621      	mov	r1, r4
    e966:	f7ff fc27 	bl	e1b8 <bt_hex_real>
    e96a:	4623      	mov	r3, r4
    e96c:	9000      	str	r0, [sp, #0]
    e96e:	462a      	mov	r2, r5
    e970:	2157      	movs	r1, #87	; 0x57
    e972:	480b      	ldr	r0, [pc, #44]	; (e9a0 <handle_event+0x58>)
    e974:	f00d ff66 	bl	1c844 <printk>
}
    e978:	b003      	add	sp, #12
    e97a:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    e97c:	8982      	ldrh	r2, [r0, #12]
    e97e:	7863      	ldrb	r3, [r4, #1]
    e980:	4293      	cmp	r3, r2
    e982:	d907      	bls.n	e994 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    e984:	462b      	mov	r3, r5
    e986:	2145      	movs	r1, #69	; 0x45
    e988:	4806      	ldr	r0, [pc, #24]	; (e9a4 <handle_event+0x5c>)
}
    e98a:	b003      	add	sp, #12
    e98c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    e990:	f00d bf58 	b.w	1c844 <printk>
		handler->handler(buf);
    e994:	6863      	ldr	r3, [r4, #4]
}
    e996:	b003      	add	sp, #12
    e998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    e99c:	4718      	bx	r3
    e99e:	bf00      	nop
    e9a0:	000240c7 	.word	0x000240c7
    e9a4:	000240a0 	.word	0x000240a0

0000e9a8 <hci_le_meta_event>:
{
    e9a8:	b510      	push	{r4, lr}
    e9aa:	2101      	movs	r1, #1
    e9ac:	4604      	mov	r4, r0
    e9ae:	3008      	adds	r0, #8
    e9b0:	f008 feaa 	bl	17708 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e9b4:	4621      	mov	r1, r4
}
    e9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e9ba:	230b      	movs	r3, #11
    e9bc:	4a01      	ldr	r2, [pc, #4]	; (e9c4 <hci_le_meta_event+0x1c>)
    e9be:	7800      	ldrb	r0, [r0, #0]
    e9c0:	f7ff bfc2 	b.w	e948 <handle_event>
    e9c4:	00021f14 	.word	0x00021f14

0000e9c8 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e9c8:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e9ca:	4d18      	ldr	r5, [pc, #96]	; (ea2c <id_create.constprop.0+0x64>)
    e9cc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e9d0:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e9d2:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e9d4:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e9d6:	b1b1      	cbz	r1, ea06 <id_create.constprop.0+0x3e>
    e9d8:	2300      	movs	r3, #0
    e9da:	4620      	mov	r0, r4
    e9dc:	a902      	add	r1, sp, #8
    e9de:	9302      	str	r3, [sp, #8]
    e9e0:	f8cd 300b 	str.w	r3, [sp, #11]
    e9e4:	f00f fd15 	bl	1e412 <bt_addr_le_cmp>
    e9e8:	b168      	cbz	r0, ea06 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e9ea:	4621      	mov	r1, r4
    e9ec:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e9ee:	f00f fcf7 	bl	1e3e0 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e9f2:	480f      	ldr	r0, [pc, #60]	; (ea30 <id_create.constprop.0+0x68>)
    e9f4:	f00f fcf1 	bl	1e3da <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e9f8:	0783      	lsls	r3, r0, #30
    e9fa:	d515      	bpl.n	ea28 <id_create.constprop.0+0x60>
}
    e9fc:	b005      	add	sp, #20
    e9fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    ea02:	f7ff bccb 	b.w	e39c <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    ea06:	4668      	mov	r0, sp
    ea08:	f00f fcb8 	bl	1e37c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    ea0c:	4668      	mov	r0, sp
    ea0e:	f7ff fde3 	bl	e5d8 <id_find>
    ea12:	2800      	cmp	r0, #0
    ea14:	daf7      	bge.n	ea06 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ea16:	4669      	mov	r1, sp
    ea18:	4628      	mov	r0, r5
    ea1a:	f00f fce1 	bl	1e3e0 <bt_addr_le_copy>
		if (addr) {
    ea1e:	2c00      	cmp	r4, #0
    ea20:	d0e7      	beq.n	e9f2 <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ea22:	4629      	mov	r1, r5
    ea24:	4620      	mov	r0, r4
    ea26:	e7e2      	b.n	e9ee <id_create.constprop.0+0x26>
}
    ea28:	b005      	add	sp, #20
    ea2a:	bd30      	pop	{r4, r5, pc}
    ea2c:	20008000 	.word	0x20008000
    ea30:	20008094 	.word	0x20008094

0000ea34 <hci_rx_thread>:
{
    ea34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ea38:	4f40      	ldr	r7, [pc, #256]	; (eb3c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ea3a:	f8df 8104 	ldr.w	r8, [pc, #260]	; eb40 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ea3e:	4e41      	ldr	r6, [pc, #260]	; (eb44 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ea40:	f04f 32ff 	mov.w	r2, #4294967295
    ea44:	f04f 33ff 	mov.w	r3, #4294967295
    ea48:	4638      	mov	r0, r7
    ea4a:	f008 fce3 	bl	17414 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ea4e:	7d02      	ldrb	r2, [r0, #20]
    ea50:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    ea52:	2a01      	cmp	r2, #1
    ea54:	d041      	beq.n	eada <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7a>
    ea56:	2a03      	cmp	r2, #3
    ea58:	d16c      	bne.n	eb34 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ea5a:	8983      	ldrh	r3, [r0, #12]
    ea5c:	2b03      	cmp	r3, #3
    ea5e:	d80b      	bhi.n	ea78 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>
    ea60:	f240 42ac 	movw	r2, #1196	; 0x4ac
    ea64:	4631      	mov	r1, r6
    ea66:	4838      	ldr	r0, [pc, #224]	; (eb48 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    ea68:	f00d feec 	bl	1c844 <printk>
    ea6c:	4040      	eors	r0, r0
    ea6e:	f380 8811 	msr	BASEPRI, r0
    ea72:	f04f 0003 	mov.w	r0, #3
    ea76:	df02      	svc	2
    ea78:	2104      	movs	r1, #4
    ea7a:	f104 0008 	add.w	r0, r4, #8
    ea7e:	f008 fe43 	bl	17708 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ea82:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    ea84:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ea86:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ea8a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ea8c:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ea8e:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    ea92:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    ea94:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    ea96:	d007      	beq.n	eaa8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ea98:	2145      	movs	r1, #69	; 0x45
    ea9a:	482c      	ldr	r0, [pc, #176]	; (eb4c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xec>)
    ea9c:	f00d fed2 	bl	1c844 <printk>
			net_buf_unref(buf);
    eaa0:	4620      	mov	r0, r4
    eaa2:	f008 fd39 	bl	17518 <net_buf_unref>
			break;
    eaa6:	e015      	b.n	ead4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    eaa8:	f002 fcc0 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    eaac:	4605      	mov	r5, r0
    eaae:	b928      	cbnz	r0, eabc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    eab0:	2145      	movs	r1, #69	; 0x45
    eab2:	8ae2      	ldrh	r2, [r4, #22]
    eab4:	4826      	ldr	r0, [pc, #152]	; (eb50 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    eab6:	f00d fec5 	bl	1c844 <printk>
    eaba:	e7f1      	b.n	eaa0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>
	acl(buf)->index = bt_conn_index(conn);
    eabc:	f003 f8ec 	bl	11c98 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    eac0:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    eac2:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    eac4:	ea4f 3219 	mov.w	r2, r9, lsr #12
    eac8:	4628      	mov	r0, r5
    eaca:	f002 fb67 	bl	1119c <bt_conn_recv>
	bt_conn_unref(conn);
    eace:	4628      	mov	r0, r5
    ead0:	f002 fc88 	bl	113e4 <bt_conn_unref>
	z_impl_k_yield();
    ead4:	f00c fbb4 	bl	1b240 <z_impl_k_yield>
	while (1) {
    ead8:	e7b2      	b.n	ea40 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    eada:	8983      	ldrh	r3, [r0, #12]
    eadc:	2b01      	cmp	r3, #1
    eade:	d80b      	bhi.n	eaf8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eae0:	f241 32fb 	movw	r2, #5115	; 0x13fb
    eae4:	4631      	mov	r1, r6
    eae6:	4818      	ldr	r0, [pc, #96]	; (eb48 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    eae8:	f00d feac 	bl	1c844 <printk>
    eaec:	4040      	eors	r0, r0
    eaee:	f380 8811 	msr	BASEPRI, r0
    eaf2:	f04f 0003 	mov.w	r0, #3
    eaf6:	df02      	svc	2
    eaf8:	2102      	movs	r1, #2
    eafa:	f104 0008 	add.w	r0, r4, #8
    eafe:	f008 fe03 	bl	17708 <net_buf_simple_pull_mem>
    eb02:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    eb04:	7800      	ldrb	r0, [r0, #0]
    eb06:	f00f fc47 	bl	1e398 <bt_hci_evt_get_flags>
    eb0a:	0783      	lsls	r3, r0, #30
    eb0c:	d40b      	bmi.n	eb26 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc6>
    eb0e:	f241 32ff 	movw	r2, #5119	; 0x13ff
    eb12:	4631      	mov	r1, r6
    eb14:	480c      	ldr	r0, [pc, #48]	; (eb48 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    eb16:	f00d fe95 	bl	1c844 <printk>
    eb1a:	4040      	eors	r0, r0
    eb1c:	f380 8811 	msr	BASEPRI, r0
    eb20:	f04f 0003 	mov.w	r0, #3
    eb24:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    eb26:	2306      	movs	r3, #6
    eb28:	4642      	mov	r2, r8
    eb2a:	4621      	mov	r1, r4
    eb2c:	7828      	ldrb	r0, [r5, #0]
    eb2e:	f7ff ff0b 	bl	e948 <handle_event>
	net_buf_unref(buf);
    eb32:	e7b5      	b.n	eaa0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    eb34:	2145      	movs	r1, #69	; 0x45
    eb36:	4807      	ldr	r0, [pc, #28]	; (eb54 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4>)
    eb38:	e7bd      	b.n	eab6 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x56>
    eb3a:	bf00      	nop
    eb3c:	20008104 	.word	0x20008104
    eb40:	00021f7c 	.word	0x00021f7c
    eb44:	000240ee 	.word	0x000240ee
    eb48:	00022c66 	.word	0x00022c66
    eb4c:	00024122 	.word	0x00024122
    eb50:	0002414b 	.word	0x0002414b
    eb54:	00024172 	.word	0x00024172

0000eb58 <hci_cmd_done>:
{
    eb58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    eb5c:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    eb5e:	7990      	ldrb	r0, [r2, #6]
{
    eb60:	460f      	mov	r7, r1
    eb62:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    eb64:	f008 fb58 	bl	17218 <net_buf_pool_get>
    eb68:	4d2a      	ldr	r5, [pc, #168]	; (ec14 <hci_cmd_done+0xbc>)
    eb6a:	4285      	cmp	r5, r0
    eb6c:	d00e      	beq.n	eb8c <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    eb6e:	79a4      	ldrb	r4, [r4, #6]
    eb70:	4620      	mov	r0, r4
    eb72:	f008 fb51 	bl	17218 <net_buf_pool_get>
    eb76:	4623      	mov	r3, r4
    eb78:	e9cd 0500 	strd	r0, r5, [sp]
    eb7c:	4632      	mov	r2, r6
    eb7e:	2157      	movs	r1, #87	; 0x57
    eb80:	4825      	ldr	r0, [pc, #148]	; (ec18 <hci_cmd_done+0xc0>)
    eb82:	f00d fe5f 	bl	1c844 <printk>
}
    eb86:	b002      	add	sp, #8
    eb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    eb8c:	4620      	mov	r0, r4
    eb8e:	f008 fb4b 	bl	17228 <net_buf_id>
    eb92:	f04f 080c 	mov.w	r8, #12
    eb96:	4d21      	ldr	r5, [pc, #132]	; (ec1c <hci_cmd_done+0xc4>)
    eb98:	fb08 5000 	mla	r0, r8, r0, r5
    eb9c:	8843      	ldrh	r3, [r0, #2]
    eb9e:	42b3      	cmp	r3, r6
    eba0:	d00a      	beq.n	ebb8 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    eba2:	4620      	mov	r0, r4
    eba4:	f008 fb40 	bl	17228 <net_buf_id>
    eba8:	fb08 5000 	mla	r0, r8, r0, r5
    ebac:	4632      	mov	r2, r6
    ebae:	8843      	ldrh	r3, [r0, #2]
    ebb0:	2157      	movs	r1, #87	; 0x57
    ebb2:	481b      	ldr	r0, [pc, #108]	; (ec20 <hci_cmd_done+0xc8>)
    ebb4:	f00d fe46 	bl	1c844 <printk>
	if (cmd(buf)->state && !status) {
    ebb8:	4620      	mov	r0, r4
    ebba:	f008 fb35 	bl	17228 <net_buf_id>
    ebbe:	260c      	movs	r6, #12
    ebc0:	fb06 5000 	mla	r0, r6, r0, r5
    ebc4:	6843      	ldr	r3, [r0, #4]
    ebc6:	b15b      	cbz	r3, ebe0 <hci_cmd_done+0x88>
    ebc8:	b957      	cbnz	r7, ebe0 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    ebca:	4620      	mov	r0, r4
    ebcc:	f008 fb2c 	bl	17228 <net_buf_id>
    ebd0:	fb06 5000 	mla	r0, r6, r0, r5
    ebd4:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    ebd6:	7a1a      	ldrb	r2, [r3, #8]
    ebd8:	e9d3 0100 	ldrd	r0, r1, [r3]
    ebdc:	f00f fc27 	bl	1e42e <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    ebe0:	4620      	mov	r0, r4
    ebe2:	f008 fb21 	bl	17228 <net_buf_id>
    ebe6:	260c      	movs	r6, #12
    ebe8:	fb06 5000 	mla	r0, r6, r0, r5
    ebec:	6883      	ldr	r3, [r0, #8]
    ebee:	2b00      	cmp	r3, #0
    ebf0:	d0c9      	beq.n	eb86 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    ebf2:	4620      	mov	r0, r4
    ebf4:	f008 fb18 	bl	17228 <net_buf_id>
    ebf8:	4370      	muls	r0, r6
    ebfa:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    ebfc:	4620      	mov	r0, r4
    ebfe:	f008 fb13 	bl	17228 <net_buf_id>
    ec02:	fb06 5500 	mla	r5, r6, r0, r5
    ec06:	68a8      	ldr	r0, [r5, #8]
}
    ec08:	b002      	add	sp, #8
    ec0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    ec0e:	f00c bc59 	b.w	1b4c4 <z_impl_k_sem_give>
    ec12:	bf00      	nop
    ec14:	20008644 	.word	0x20008644
    ec18:	0002418b 	.word	0x0002418b
    ec1c:	20009be8 	.word	0x20009be8
    ec20:	000241c5 	.word	0x000241c5

0000ec24 <hci_cmd_status>:
{
    ec24:	b538      	push	{r3, r4, r5, lr}
    ec26:	2104      	movs	r1, #4
    ec28:	4604      	mov	r4, r0
    ec2a:	3008      	adds	r0, #8
    ec2c:	f008 fd6c 	bl	17708 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    ec30:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    ec32:	7801      	ldrb	r1, [r0, #0]
    ec34:	4622      	mov	r2, r4
    ec36:	8840      	ldrh	r0, [r0, #2]
    ec38:	f7ff ff8e 	bl	eb58 <hci_cmd_done>
	if (ncmd) {
    ec3c:	b125      	cbz	r5, ec48 <hci_cmd_status+0x24>
}
    ec3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ec42:	4802      	ldr	r0, [pc, #8]	; (ec4c <hci_cmd_status+0x28>)
    ec44:	f00c bc3e 	b.w	1b4c4 <z_impl_k_sem_give>
    ec48:	bd38      	pop	{r3, r4, r5, pc}
    ec4a:	bf00      	nop
    ec4c:	200080e8 	.word	0x200080e8

0000ec50 <hci_cmd_complete>:
{
    ec50:	b538      	push	{r3, r4, r5, lr}
    ec52:	2103      	movs	r1, #3
    ec54:	4604      	mov	r4, r0
    ec56:	3008      	adds	r0, #8
    ec58:	f008 fd56 	bl	17708 <net_buf_simple_pull_mem>
	status = buf->data[0];
    ec5c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    ec5e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    ec60:	4622      	mov	r2, r4
    ec62:	7819      	ldrb	r1, [r3, #0]
    ec64:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    ec68:	f7ff ff76 	bl	eb58 <hci_cmd_done>
	if (ncmd) {
    ec6c:	b125      	cbz	r5, ec78 <hci_cmd_complete+0x28>
}
    ec6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ec72:	4802      	ldr	r0, [pc, #8]	; (ec7c <hci_cmd_complete+0x2c>)
    ec74:	f00c bc26 	b.w	1b4c4 <z_impl_k_sem_give>
    ec78:	bd38      	pop	{r3, r4, r5, pc}
    ec7a:	bf00      	nop
    ec7c:	200080e8 	.word	0x200080e8

0000ec80 <hci_num_completed_packets>:
{
    ec80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    ec84:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    ec86:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    ec88:	6887      	ldr	r7, [r0, #8]
    ec8a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; ed68 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    ec8e:	783b      	ldrb	r3, [r7, #0]
    ec90:	429d      	cmp	r5, r3
    ec92:	db01      	blt.n	ec98 <hci_num_completed_packets+0x18>
}
    ec94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    ec98:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    ec9c:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    eca0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    eca4:	4650      	mov	r0, sl
    eca6:	f002 fbc1 	bl	1142c <bt_conn_lookup_handle>
		if (!conn) {
    ecaa:	4604      	mov	r4, r0
    ecac:	b1d0      	cbz	r0, ece4 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ecae:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    ecb2:	b37e      	cbz	r6, ed14 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    ecb4:	f04f 0320 	mov.w	r3, #32
    ecb8:	f3ef 8211 	mrs	r2, BASEPRI
    ecbc:	f383 8811 	msr	BASEPRI, r3
    ecc0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ecc4:	69e3      	ldr	r3, [r4, #28]
    ecc6:	b1a3      	cbz	r3, ecf2 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    ecc8:	3b01      	subs	r3, #1
    ecca:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    eccc:	f382 8811 	msr	BASEPRI, r2
    ecd0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    ecd4:	4620      	mov	r0, r4
    ecd6:	f002 f997 	bl	11008 <bt_conn_get_pkts>
    ecda:	3e01      	subs	r6, #1
    ecdc:	f00c fbf2 	bl	1b4c4 <z_impl_k_sem_give>
    ece0:	b2b6      	uxth	r6, r6
    ece2:	e7e6      	b.n	ecb2 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    ece4:	4652      	mov	r2, sl
    ece6:	2145      	movs	r1, #69	; 0x45
    ece8:	4820      	ldr	r0, [pc, #128]	; (ed6c <hci_num_completed_packets+0xec>)
    ecea:	f00d fdab 	bl	1c844 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    ecee:	3501      	adds	r5, #1
    ecf0:	e7cd      	b.n	ec8e <hci_num_completed_packets+0xe>
	return list->head;
    ecf2:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ecf4:	b12b      	cbz	r3, ed02 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ecf6:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    ecf8:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ecfa:	428b      	cmp	r3, r1
	list->head = node;
    ecfc:	6160      	str	r0, [r4, #20]
	list->tail = node;
    ecfe:	bf08      	it	eq
    ed00:	61a0      	streq	r0, [r4, #24]
    ed02:	f382 8811 	msr	BASEPRI, r2
    ed06:	f3bf 8f6f 	isb	sy
			if (!node) {
    ed0a:	b93b      	cbnz	r3, ed1c <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    ed0c:	2145      	movs	r1, #69	; 0x45
    ed0e:	4818      	ldr	r0, [pc, #96]	; (ed70 <hci_num_completed_packets+0xf0>)
    ed10:	f00d fd98 	bl	1c844 <printk>
		bt_conn_unref(conn);
    ed14:	4620      	mov	r0, r4
    ed16:	f002 fb65 	bl	113e4 <bt_conn_unref>
    ed1a:	e7e8      	b.n	ecee <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    ed1c:	f04f 0220 	mov.w	r2, #32
    ed20:	f3ef 8111 	mrs	r1, BASEPRI
    ed24:	f382 8811 	msr	BASEPRI, r2
    ed28:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    ed2c:	68da      	ldr	r2, [r3, #12]
    ed2e:	61e2      	str	r2, [r4, #28]
	return list->tail;
    ed30:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    ed32:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    ed36:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    ed3a:	b98a      	cbnz	r2, ed60 <hci_num_completed_packets+0xe0>
	list->head = node;
    ed3c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    ed40:	f381 8811 	msr	BASEPRI, r1
    ed44:	f3bf 8f6f 	isb	sy
    ed48:	2100      	movs	r1, #0
    ed4a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ed4e:	f00f fb55 	bl	1e3fc <atomic_test_and_set_bit>
    ed52:	2800      	cmp	r0, #0
    ed54:	d1be      	bne.n	ecd4 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    ed56:	4651      	mov	r1, sl
    ed58:	4648      	mov	r0, r9
    ed5a:	f012 fa83 	bl	21264 <k_queue_append>
    ed5e:	e7b9      	b.n	ecd4 <hci_num_completed_packets+0x54>
	parent->next = child;
    ed60:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ed62:	6263      	str	r3, [r4, #36]	; 0x24
}
    ed64:	e7ec      	b.n	ed40 <hci_num_completed_packets+0xc0>
    ed66:	bf00      	nop
    ed68:	20009630 	.word	0x20009630
    ed6c:	000241fd 	.word	0x000241fd
    ed70:	0002421e 	.word	0x0002421e

0000ed74 <bt_hci_cmd_create>:
{
    ed74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    ed78:	f04f 32ff 	mov.w	r2, #4294967295
    ed7c:	4606      	mov	r6, r0
    ed7e:	f04f 33ff 	mov.w	r3, #4294967295
    ed82:	481d      	ldr	r0, [pc, #116]	; (edf8 <bt_hci_cmd_create+0x84>)
    ed84:	460f      	mov	r7, r1
    ed86:	f011 fb77 	bl	20478 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    ed8a:	4604      	mov	r4, r0
    ed8c:	b950      	cbnz	r0, eda4 <bt_hci_cmd_create+0x30>
    ed8e:	491b      	ldr	r1, [pc, #108]	; (edfc <bt_hci_cmd_create+0x88>)
    ed90:	481b      	ldr	r0, [pc, #108]	; (ee00 <bt_hci_cmd_create+0x8c>)
    ed92:	f44f 7281 	mov.w	r2, #258	; 0x102
    ed96:	f00d fd55 	bl	1c844 <printk>
    ed9a:	f44f 7181 	mov.w	r1, #258	; 0x102
    ed9e:	4817      	ldr	r0, [pc, #92]	; (edfc <bt_hci_cmd_create+0x88>)
    eda0:	f00d fff6 	bl	1cd90 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    eda4:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    eda8:	f104 0a08 	add.w	sl, r4, #8
    edac:	2101      	movs	r1, #1
    edae:	4650      	mov	r0, sl
    edb0:	f008 fb60 	bl	17474 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    edb4:	4620      	mov	r0, r4
    edb6:	f884 8014 	strb.w	r8, [r4, #20]
    edba:	f008 fa35 	bl	17228 <net_buf_id>
    edbe:	f04f 090c 	mov.w	r9, #12
    edc2:	4d10      	ldr	r5, [pc, #64]	; (ee04 <bt_hci_cmd_create+0x90>)
    edc4:	fb09 5000 	mla	r0, r9, r0, r5
    edc8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    edca:	4620      	mov	r0, r4
    edcc:	f008 fa2c 	bl	17228 <net_buf_id>
    edd0:	fb09 5000 	mla	r0, r9, r0, r5
    edd4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    edd8:	4620      	mov	r0, r4
    edda:	f008 fa25 	bl	17228 <net_buf_id>
    edde:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    ede2:	2103      	movs	r1, #3
    ede4:	4650      	mov	r0, sl
    ede6:	f8c5 8004 	str.w	r8, [r5, #4]
    edea:	f008 fcab 	bl	17744 <net_buf_simple_add>
	hdr->param_len = param_len;
    edee:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    edf0:	8006      	strh	r6, [r0, #0]
}
    edf2:	4620      	mov	r0, r4
    edf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    edf8:	20008644 	.word	0x20008644
    edfc:	000240ee 	.word	0x000240ee
    ee00:	00022c66 	.word	0x00022c66
    ee04:	20009be8 	.word	0x20009be8

0000ee08 <bt_hci_cmd_send_sync>:
{
    ee08:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee0a:	4607      	mov	r7, r0
    ee0c:	4615      	mov	r5, r2
	if (!buf) {
    ee0e:	460c      	mov	r4, r1
{
    ee10:	b087      	sub	sp, #28
	if (!buf) {
    ee12:	b921      	cbnz	r1, ee1e <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    ee14:	f7ff ffae 	bl	ed74 <bt_hci_cmd_create>
		if (!buf) {
    ee18:	4604      	mov	r4, r0
    ee1a:	2800      	cmp	r0, #0
    ee1c:	d048      	beq.n	eeb0 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    ee1e:	2201      	movs	r2, #1
    ee20:	2100      	movs	r1, #0
    ee22:	4668      	mov	r0, sp
    ee24:	f012 fa76 	bl	21314 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    ee28:	4620      	mov	r0, r4
    ee2a:	f008 f9fd 	bl	17228 <net_buf_id>
    ee2e:	230c      	movs	r3, #12
    ee30:	4e21      	ldr	r6, [pc, #132]	; (eeb8 <bt_hci_cmd_send_sync+0xb0>)
    ee32:	fb03 6000 	mla	r0, r3, r0, r6
    ee36:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    ee3a:	4620      	mov	r0, r4
    ee3c:	f008 fbb0 	bl	175a0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    ee40:	4621      	mov	r1, r4
    ee42:	481e      	ldr	r0, [pc, #120]	; (eebc <bt_hci_cmd_send_sync+0xb4>)
    ee44:	f008 fb3a 	bl	174bc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    ee48:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ee4c:	2300      	movs	r3, #0
    ee4e:	4668      	mov	r0, sp
    ee50:	f00c fb74 	bl	1b53c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    ee54:	b158      	cbz	r0, ee6e <bt_hci_cmd_send_sync+0x66>
    ee56:	f240 124d 	movw	r2, #333	; 0x14d
    ee5a:	4919      	ldr	r1, [pc, #100]	; (eec0 <bt_hci_cmd_send_sync+0xb8>)
    ee5c:	4819      	ldr	r0, [pc, #100]	; (eec4 <bt_hci_cmd_send_sync+0xbc>)
    ee5e:	f00d fcf1 	bl	1c844 <printk>
    ee62:	4040      	eors	r0, r0
    ee64:	f380 8811 	msr	BASEPRI, r0
    ee68:	f04f 0003 	mov.w	r0, #3
    ee6c:	df02      	svc	2
	status = cmd(buf)->status;
    ee6e:	4620      	mov	r0, r4
    ee70:	f008 f9da 	bl	17228 <net_buf_id>
    ee74:	230c      	movs	r3, #12
    ee76:	4358      	muls	r0, r3
    ee78:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    ee7a:	b186      	cbz	r6, ee9e <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    ee7c:	4633      	mov	r3, r6
    ee7e:	463a      	mov	r2, r7
    ee80:	2157      	movs	r1, #87	; 0x57
    ee82:	4811      	ldr	r0, [pc, #68]	; (eec8 <bt_hci_cmd_send_sync+0xc0>)
    ee84:	f00d fcde 	bl	1c844 <printk>
		net_buf_unref(buf);
    ee88:	4620      	mov	r0, r4
    ee8a:	f008 fb45 	bl	17518 <net_buf_unref>
			return -EIO;
    ee8e:	2e09      	cmp	r6, #9
    ee90:	bf0c      	ite	eq
    ee92:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    ee96:	f06f 0004 	mvnne.w	r0, #4
}
    ee9a:	b007      	add	sp, #28
    ee9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    ee9e:	b115      	cbz	r5, eea6 <bt_hci_cmd_send_sync+0x9e>
	return 0;
    eea0:	4630      	mov	r0, r6
		*rsp = buf;
    eea2:	602c      	str	r4, [r5, #0]
    eea4:	e7f9      	b.n	ee9a <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    eea6:	4620      	mov	r0, r4
    eea8:	f008 fb36 	bl	17518 <net_buf_unref>
	return 0;
    eeac:	4628      	mov	r0, r5
    eeae:	e7f4      	b.n	ee9a <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    eeb0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    eeb4:	e7f1      	b.n	ee9a <bt_hci_cmd_send_sync+0x92>
    eeb6:	bf00      	nop
    eeb8:	20009be8 	.word	0x20009be8
    eebc:	20008120 	.word	0x20008120
    eec0:	000240ee 	.word	0x000240ee
    eec4:	00022c66 	.word	0x00022c66
    eec8:	0002423a 	.word	0x0002423a

0000eecc <hci_le_read_max_data_len>:
{
    eecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    eece:	4606      	mov	r6, r0
    eed0:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    eed2:	f242 002f 	movw	r0, #8239	; 0x202f
    eed6:	2100      	movs	r1, #0
    eed8:	aa01      	add	r2, sp, #4
    eeda:	f7ff ff95 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    eede:	4604      	mov	r4, r0
    eee0:	b130      	cbz	r0, eef0 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    eee2:	2145      	movs	r1, #69	; 0x45
    eee4:	4808      	ldr	r0, [pc, #32]	; (ef08 <hci_le_read_max_data_len+0x3c>)
    eee6:	f00d fcad 	bl	1c844 <printk>
}
    eeea:	4620      	mov	r0, r4
    eeec:	b002      	add	sp, #8
    eeee:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    eef0:	9801      	ldr	r0, [sp, #4]
    eef2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    eef4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    eef8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    eefa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    eefe:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    ef00:	f008 fb0a 	bl	17518 <net_buf_unref>
	return 0;
    ef04:	e7f1      	b.n	eeea <hci_le_read_max_data_len+0x1e>
    ef06:	bf00      	nop
    ef08:	0002425b 	.word	0x0002425b

0000ef0c <set_random_address>:
{
    ef0c:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    ef0e:	4e15      	ldr	r6, [pc, #84]	; (ef64 <set_random_address+0x58>)
    ef10:	2206      	movs	r2, #6
    ef12:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    ef16:	4605      	mov	r5, r0
    ef18:	f00f f93b 	bl	1e192 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    ef1c:	4604      	mov	r4, r0
    ef1e:	b1e0      	cbz	r0, ef5a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    ef20:	2106      	movs	r1, #6
    ef22:	f242 0005 	movw	r0, #8197	; 0x2005
    ef26:	f7ff ff25 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    ef2a:	4604      	mov	r4, r0
    ef2c:	b1b8      	cbz	r0, ef5e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ef2e:	2206      	movs	r2, #6
    ef30:	4629      	mov	r1, r5
    ef32:	3008      	adds	r0, #8
    ef34:	f011 face 	bl	204d4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    ef38:	4621      	mov	r1, r4
    ef3a:	2200      	movs	r2, #0
    ef3c:	f242 0005 	movw	r0, #8197	; 0x2005
    ef40:	f7ff ff62 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    ef44:	4604      	mov	r4, r0
    ef46:	b940      	cbnz	r0, ef5a <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    ef48:	2206      	movs	r2, #6
    ef4a:	4629      	mov	r1, r5
    ef4c:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    ef50:	f00f f930 	bl	1e1b4 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    ef54:	2301      	movs	r3, #1
    ef56:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    ef5a:	4620      	mov	r0, r4
    ef5c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    ef5e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    ef62:	e7fa      	b.n	ef5a <set_random_address+0x4e>
    ef64:	20008000 	.word	0x20008000

0000ef68 <set_le_adv_enable_legacy>:
{
    ef68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ef6a:	4606      	mov	r6, r0
    ef6c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    ef6e:	f242 000a 	movw	r0, #8202	; 0x200a
    ef72:	2101      	movs	r1, #1
    ef74:	f7ff fefe 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    ef78:	4604      	mov	r4, r0
    ef7a:	b1e0      	cbz	r0, efb6 <set_le_adv_enable_legacy+0x4e>
	if (enable) {
    ef7c:	b1cd      	cbz	r5, efb2 <set_le_adv_enable_legacy+0x4a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    ef7e:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    ef80:	f00f fa66 	bl	1e450 <net_buf_add_u8.isra.0>
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    ef84:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    ef86:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    ef88:	3610      	adds	r6, #16
    ef8a:	9302      	str	r3, [sp, #8]
	state->target = target;
    ef8c:	9601      	str	r6, [sp, #4]
	state->val = val;
    ef8e:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    ef92:	f008 f949 	bl	17228 <net_buf_id>
    ef96:	220c      	movs	r2, #12
    ef98:	4b08      	ldr	r3, [pc, #32]	; (efbc <set_le_adv_enable_legacy+0x54>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    ef9a:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    ef9c:	fb02 3300 	mla	r3, r2, r0, r3
    efa0:	aa01      	add	r2, sp, #4
    efa2:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    efa4:	f242 000a 	movw	r0, #8202	; 0x200a
    efa8:	2200      	movs	r2, #0
    efaa:	f7ff ff2d 	bl	ee08 <bt_hci_cmd_send_sync>
}
    efae:	b004      	add	sp, #16
    efb0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    efb2:	4629      	mov	r1, r5
    efb4:	e7e4      	b.n	ef80 <set_le_adv_enable_legacy+0x18>
		return -ENOBUFS;
    efb6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    efba:	e7f8      	b.n	efae <set_le_adv_enable_legacy+0x46>
    efbc:	20009be8 	.word	0x20009be8

0000efc0 <set_le_scan_enable_legacy>:
{
    efc0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    efc2:	2102      	movs	r1, #2
{
    efc4:	4604      	mov	r4, r0
    efc6:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    efc8:	f242 000c 	movw	r0, #8204	; 0x200c
    efcc:	f7ff fed2 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    efd0:	4605      	mov	r5, r0
    efd2:	b348      	cbz	r0, f028 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    efd4:	2102      	movs	r1, #2
    efd6:	3008      	adds	r0, #8
    efd8:	f008 fbb4 	bl	17744 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    efdc:	2c01      	cmp	r4, #1
    efde:	4603      	mov	r3, r0
    efe0:	d11f      	bne.n	f022 <set_le_scan_enable_legacy+0x62>
    efe2:	4813      	ldr	r0, [pc, #76]	; (f030 <set_le_scan_enable_legacy+0x70>)
    efe4:	f00f f9f9 	bl	1e3da <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    efe8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    efec:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    efee:	701c      	strb	r4, [r3, #0]
	state->target = target;
    eff0:	4b0f      	ldr	r3, [pc, #60]	; (f030 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    eff2:	4628      	mov	r0, r5
    eff4:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    eff6:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    eff8:	f004 0401 	and.w	r4, r4, #1
    effc:	9302      	str	r3, [sp, #8]
    effe:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    f002:	f008 f911 	bl	17228 <net_buf_id>
    f006:	220c      	movs	r2, #12
    f008:	4b0a      	ldr	r3, [pc, #40]	; (f034 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f00a:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    f00c:	fb02 3300 	mla	r3, r2, r0, r3
    f010:	aa01      	add	r2, sp, #4
    f012:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f014:	f242 000c 	movw	r0, #8204	; 0x200c
    f018:	2200      	movs	r2, #0
    f01a:	f7ff fef5 	bl	ee08 <bt_hci_cmd_send_sync>
}
    f01e:	b005      	add	sp, #20
    f020:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f022:	2200      	movs	r2, #0
    f024:	7042      	strb	r2, [r0, #1]
    f026:	e7e2      	b.n	efee <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    f028:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f02c:	e7f7      	b.n	f01e <set_le_scan_enable_legacy+0x5e>
    f02e:	bf00      	nop
    f030:	20008094 	.word	0x20008094
    f034:	20009be8 	.word	0x20009be8

0000f038 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f038:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f03c:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f03e:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f042:	460e      	mov	r6, r1
    f044:	4691      	mov	r9, r2
    f046:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f048:	d02c      	beq.n	f0a4 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f04a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f12c <le_adv_set_random_addr.isra.0+0xf4>
    f04e:	b12a      	cbz	r2, f05c <le_adv_set_random_addr.isra.0+0x24>
    f050:	068c      	lsls	r4, r1, #26
    f052:	d503      	bpl.n	f05c <le_adv_set_random_addr.isra.0+0x24>
    f054:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f058:	0658      	lsls	r0, r3, #25
    f05a:	d563      	bpl.n	f124 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f05c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f060:	f818 3003 	ldrb.w	r3, [r8, r3]
    f064:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f068:	2b01      	cmp	r3, #1
    f06a:	d009      	beq.n	f080 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f06c:	ebaa 0505 	sub.w	r5, sl, r5
    f070:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f074:	f1b9 0f00 	cmp.w	r9, #0
    f078:	d10f      	bne.n	f09a <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f07a:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f07c:	703b      	strb	r3, [r7, #0]
    f07e:	e008      	b.n	f092 <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f080:	2007      	movs	r0, #7
    f082:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f086:	4440      	add	r0, r8
    f088:	f7ff ff40 	bl	ef0c <set_random_address>
				if (err) {
    f08c:	4604      	mov	r4, r0
    f08e:	2800      	cmp	r0, #0
    f090:	d0ec      	beq.n	f06c <le_adv_set_random_addr.isra.0+0x34>
}
    f092:	4620      	mov	r0, r4
    f094:	b002      	add	sp, #8
    f096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f09a:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f09c:	bf48      	it	mi
    f09e:	f043 0302 	orrmi.w	r3, r3, #2
    f0a2:	e7ea      	b.n	f07a <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f0a4:	f011 0604 	ands.w	r6, r1, #4
    f0a8:	d014      	beq.n	f0d4 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f0aa:	f8df 8080 	ldr.w	r8, [pc, #128]	; f12c <le_adv_set_random_addr.isra.0+0xf4>
    f0ae:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f0b2:	f818 3003 	ldrb.w	r3, [r8, r3]
    f0b6:	00ee      	lsls	r6, r5, #3
    f0b8:	2b01      	cmp	r3, #1
    f0ba:	d105      	bne.n	f0c8 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f0bc:	2007      	movs	r0, #7
    f0be:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f0c2:	4440      	add	r0, r8
    f0c4:	f7ff ff22 	bl	ef0c <set_random_address>
			*own_addr_type = id_addr->type;
    f0c8:	1b75      	subs	r5, r6, r5
    f0ca:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f0ce:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f0d0:	703b      	strb	r3, [r7, #0]
    f0d2:	e7de      	b.n	f092 <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f0d4:	4816      	ldr	r0, [pc, #88]	; (f130 <le_adv_set_random_addr.isra.0+0xf8>)
    f0d6:	f00f f980 	bl	1e3da <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f0da:	0682      	lsls	r2, r0, #26
    f0dc:	d417      	bmi.n	f10e <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f0de:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f0e0:	2106      	movs	r1, #6
    f0e2:	4668      	mov	r0, sp
    f0e4:	f001 feb6 	bl	10e54 <bt_rand>
	if (err) {
    f0e8:	4604      	mov	r4, r0
    f0ea:	b948      	cbnz	r0, f100 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f0ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f0f0:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f0f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f0f6:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f0fa:	f7ff ff07 	bl	ef0c <set_random_address>
    f0fe:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f100:	2001      	movs	r0, #1
    f102:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f104:	2d00      	cmp	r5, #0
    f106:	d0c4      	beq.n	f092 <le_adv_set_random_addr.isra.0+0x5a>
				set_le_scan_enable(true);
    f108:	f00f fa18 	bl	1e53c <set_le_scan_enable.isra.0>
		if (err) {
    f10c:	e7c1      	b.n	f092 <le_adv_set_random_addr.isra.0+0x5a>
    f10e:	4808      	ldr	r0, [pc, #32]	; (f130 <le_adv_set_random_addr.isra.0+0xf8>)
    f110:	f00f f963 	bl	1e3da <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f114:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f116:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f11a:	d5e0      	bpl.n	f0de <le_adv_set_random_addr.isra.0+0xa6>
				set_le_scan_enable(false);
    f11c:	4630      	mov	r0, r6
    f11e:	f00f fa0d 	bl	1e53c <set_le_scan_enable.isra.0>
    f122:	e7dd      	b.n	f0e0 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f124:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f128:	e7b3      	b.n	f092 <le_adv_set_random_addr.isra.0+0x5a>
    f12a:	bf00      	nop
    f12c:	20008000 	.word	0x20008000
    f130:	20008094 	.word	0x20008094

0000f134 <hci_set_ad>:
{
    f134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f138:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f13a:	2120      	movs	r1, #32
{
    f13c:	4682      	mov	sl, r0
    f13e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f140:	f7ff fe18 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    f144:	4606      	mov	r6, r0
    f146:	2800      	cmp	r0, #0
    f148:	d056      	beq.n	f1f8 <hci_set_ad+0xc4>
    f14a:	2120      	movs	r1, #32
    f14c:	3008      	adds	r0, #8
    f14e:	f008 faf9 	bl	17744 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f152:	2220      	movs	r2, #32
    f154:	4681      	mov	r9, r0
    f156:	2100      	movs	r1, #0
    f158:	f00f f857 	bl	1e20a <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f15c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f160:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f162:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f166:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f168:	2300      	movs	r3, #0
    f16a:	f8d4 8000 	ldr.w	r8, [r4]
    f16e:	6862      	ldr	r2, [r4, #4]
    f170:	4293      	cmp	r3, r2
    f172:	d30d      	bcc.n	f190 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f174:	9b00      	ldr	r3, [sp, #0]
    f176:	3408      	adds	r4, #8
    f178:	429c      	cmp	r4, r3
    f17a:	d1f5      	bne.n	f168 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f17c:	2200      	movs	r2, #0
    f17e:	4631      	mov	r1, r6
    f180:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f182:	f889 5000 	strb.w	r5, [r9]
}
    f186:	b003      	add	sp, #12
    f188:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f18c:	f7ff be3c 	b.w	ee08 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f190:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f194:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f196:	1881      	adds	r1, r0, r2
    f198:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f19a:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f19e:	d914      	bls.n	f1ca <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f1a0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f1a4:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f1a8:	d101      	bne.n	f1ae <hci_set_ad+0x7a>
    f1aa:	2a00      	cmp	r2, #0
    f1ac:	dc0b      	bgt.n	f1c6 <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f1ae:	2145      	movs	r1, #69	; 0x45
    f1b0:	4813      	ldr	r0, [pc, #76]	; (f200 <hci_set_ad+0xcc>)
    f1b2:	f00d fb47 	bl	1c844 <printk>
		net_buf_unref(buf);
    f1b6:	4630      	mov	r0, r6
    f1b8:	f008 f9ae 	bl	17518 <net_buf_unref>
					return -EINVAL;
    f1bc:	f06f 0015 	mvn.w	r0, #21
}
    f1c0:	b003      	add	sp, #12
    f1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f1c6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f1ca:	b2d7      	uxtb	r7, r2
    f1cc:	1c79      	adds	r1, r7, #1
    f1ce:	f80b 1005 	strb.w	r1, [fp, r5]
    f1d2:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f1d4:	b2c9      	uxtb	r1, r1
    f1d6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f1da:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f1de:	fa5b f080 	uxtab	r0, fp, r0
    f1e2:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f1e4:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f1e6:	f00e ffe5 	bl	1e1b4 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f1ea:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f1ec:	443d      	add	r5, r7
    f1ee:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f1f0:	3301      	adds	r3, #1
    f1f2:	f108 0808 	add.w	r8, r8, #8
    f1f6:	e7ba      	b.n	f16e <hci_set_ad+0x3a>
		return -ENOBUFS;
    f1f8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f1fc:	e7e0      	b.n	f1c0 <hci_set_ad+0x8c>
    f1fe:	bf00      	nop
    f200:	00024280 	.word	0x00024280

0000f204 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f208:	b087      	sub	sp, #28
    f20a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f20e:	4606      	mov	r6, r0
    f210:	460c      	mov	r4, r1
    f212:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f214:	2100      	movs	r1, #0
    f216:	2210      	movs	r2, #16
    f218:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f21a:	461d      	mov	r5, r3
    f21c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f220:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f224:	f00e fff1 	bl	1e20a <memset>
	if (use_name) {
    f228:	f1b8 0f00 	cmp.w	r8, #0
    f22c:	d00e      	beq.n	f24c <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f22e:	bbb4      	cbnz	r4, f29e <le_adv_update.constprop.0+0x9a>
    f230:	2d00      	cmp	r5, #0
    f232:	d13f      	bne.n	f2b4 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f234:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f2e8 <le_adv_update.constprop.0+0xe4>
    f238:	4658      	mov	r0, fp
    f23a:	f00e ff7d 	bl	1e138 <strlen>
    f23e:	2309      	movs	r3, #9
    f240:	f88d 0001 	strb.w	r0, [sp, #1]
    f244:	f88d 3000 	strb.w	r3, [sp]
    f248:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f24c:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f250:	f1b8 0f00 	cmp.w	r8, #0
    f254:	d030      	beq.n	f2b8 <le_adv_update.constprop.0+0xb4>
    f256:	f1ba 0f00 	cmp.w	sl, #0
    f25a:	d12d      	bne.n	f2b8 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f25c:	2301      	movs	r3, #1
			d_len = 2;
    f25e:	2202      	movs	r2, #2
			d[1].data = &data;
    f260:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f264:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f266:	f242 0008 	movw	r0, #8200	; 0x2008
    f26a:	a902      	add	r1, sp, #8
    f26c:	f7ff ff62 	bl	f134 <hci_set_ad>
		if (err) {
    f270:	4604      	mov	r4, r0
    f272:	b938      	cbnz	r0, f284 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f274:	f1ba 0f00 	cmp.w	sl, #0
    f278:	d120      	bne.n	f2bc <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f27a:	2104      	movs	r1, #4
    f27c:	f106 0010 	add.w	r0, r6, #16
    f280:	f00f f8b1 	bl	1e3e6 <atomic_or>
}
    f284:	4620      	mov	r0, r4
    f286:	b007      	add	sp, #28
    f288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f28c:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f290:	3a08      	subs	r2, #8
    f292:	2a01      	cmp	r2, #1
    f294:	d925      	bls.n	f2e2 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f296:	3301      	adds	r3, #1
    f298:	429f      	cmp	r7, r3
    f29a:	d1f7      	bne.n	f28c <le_adv_update.constprop.0+0x88>
    f29c:	e7c8      	b.n	f230 <le_adv_update.constprop.0+0x2c>
    f29e:	2300      	movs	r3, #0
    f2a0:	e7fa      	b.n	f298 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f2a2:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f2a6:	3a08      	subs	r2, #8
    f2a8:	2a01      	cmp	r2, #1
    f2aa:	d91a      	bls.n	f2e2 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f2ac:	3301      	adds	r3, #1
    f2ae:	4599      	cmp	r9, r3
    f2b0:	d1f7      	bne.n	f2a2 <le_adv_update.constprop.0+0x9e>
    f2b2:	e7bf      	b.n	f234 <le_adv_update.constprop.0+0x30>
    f2b4:	2300      	movs	r3, #0
    f2b6:	e7fa      	b.n	f2ae <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f2b8:	2201      	movs	r2, #1
    f2ba:	e7d4      	b.n	f266 <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f2bc:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f2be:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f2c2:	f1b8 0f00 	cmp.w	r8, #0
    f2c6:	d003      	beq.n	f2d0 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f2c8:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f2ca:	2202      	movs	r2, #2
			d[1].data = &data;
    f2cc:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f2d0:	f242 0009 	movw	r0, #8201	; 0x2009
    f2d4:	a902      	add	r1, sp, #8
    f2d6:	f7ff ff2d 	bl	f134 <hci_set_ad>
		if (err) {
    f2da:	2800      	cmp	r0, #0
    f2dc:	d0cd      	beq.n	f27a <le_adv_update.constprop.0+0x76>
    f2de:	4604      	mov	r4, r0
    f2e0:	e7d0      	b.n	f284 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f2e2:	f06f 0415 	mvn.w	r4, #21
    f2e6:	e7cd      	b.n	f284 <le_adv_update.constprop.0+0x80>
    f2e8:	00022aa5 	.word	0x00022aa5

0000f2ec <start_le_scan_legacy>:
{
    f2ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f2ee:	460e      	mov	r6, r1
    f2f0:	4605      	mov	r5, r0
    f2f2:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f2f4:	2100      	movs	r1, #0
    f2f6:	2207      	movs	r2, #7
    f2f8:	4668      	mov	r0, sp
    f2fa:	f00e ff86 	bl	1e20a <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f2fe:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f302:	4e26      	ldr	r6, [pc, #152]	; (f39c <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f304:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f306:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f308:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f30c:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f310:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f314:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f318:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f31c:	f00f f85d 	bl	1e3da <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f320:	0641      	lsls	r1, r0, #25
    f322:	d413      	bmi.n	f34c <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f324:	f00f f8bc 	bl	1e4a0 <le_set_private_addr.constprop.0>
			if (err) {
    f328:	4604      	mov	r4, r0
    f32a:	b160      	cbz	r0, f346 <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f32c:	2d01      	cmp	r5, #1
    f32e:	d02e      	beq.n	f38e <start_le_scan_legacy+0xa2>
    f330:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f334:	f00f f851 	bl	1e3da <atomic_get>
    f338:	0642      	lsls	r2, r0, #25
    f33a:	d528      	bpl.n	f38e <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f33c:	4622      	mov	r2, r4
    f33e:	2157      	movs	r1, #87	; 0x57
    f340:	4817      	ldr	r0, [pc, #92]	; (f3a0 <start_le_scan_legacy+0xb4>)
    f342:	f00d fa7f 	bl	1c844 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f346:	2301      	movs	r3, #1
    f348:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f34c:	2107      	movs	r1, #7
    f34e:	f242 000b 	movw	r0, #8203	; 0x200b
    f352:	f7ff fd0f 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    f356:	4604      	mov	r4, r0
    f358:	b1e0      	cbz	r0, f394 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f35a:	2207      	movs	r2, #7
    f35c:	4669      	mov	r1, sp
    f35e:	3008      	adds	r0, #8
    f360:	f011 f8b8 	bl	204d4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f364:	4621      	mov	r1, r4
    f366:	2200      	movs	r2, #0
    f368:	f242 000b 	movw	r0, #8203	; 0x200b
    f36c:	f7ff fd4c 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    f370:	4604      	mov	r4, r0
    f372:	b960      	cbnz	r0, f38e <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f374:	2001      	movs	r0, #1
    f376:	f7ff fe23 	bl	efc0 <set_le_scan_enable_legacy>
	if (err) {
    f37a:	4604      	mov	r4, r0
    f37c:	b938      	cbnz	r0, f38e <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f37e:	1e6b      	subs	r3, r5, #1
    f380:	425a      	negs	r2, r3
    f382:	f04f 0107 	mov.w	r1, #7
    f386:	4807      	ldr	r0, [pc, #28]	; (f3a4 <start_le_scan_legacy+0xb8>)
    f388:	415a      	adcs	r2, r3
    f38a:	f00f f850 	bl	1e42e <atomic_set_bit_to>
}
    f38e:	4620      	mov	r0, r4
    f390:	b002      	add	sp, #8
    f392:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f394:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f398:	e7f9      	b.n	f38e <start_le_scan_legacy+0xa2>
    f39a:	bf00      	nop
    f39c:	20008000 	.word	0x20008000
    f3a0:	0002429e 	.word	0x0002429e
    f3a4:	20008094 	.word	0x20008094

0000f3a8 <bt_le_scan_random_addr_check>:
{
    f3a8:	b508      	push	{r3, lr}
    f3aa:	4802      	ldr	r0, [pc, #8]	; (f3b4 <bt_le_scan_random_addr_check+0xc>)
    f3ac:	f00f f815 	bl	1e3da <atomic_get>
}
    f3b0:	2001      	movs	r0, #1
    f3b2:	bd08      	pop	{r3, pc}
    f3b4:	20008028 	.word	0x20008028

0000f3b8 <bt_le_create_conn_legacy>:
{
    f3b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f3bc:	4e30      	ldr	r6, [pc, #192]	; (f480 <bt_le_create_conn_legacy+0xc8>)
{
    f3be:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f3c0:	7833      	ldrb	r3, [r6, #0]
    f3c2:	2b01      	cmp	r3, #1
    f3c4:	d00b      	beq.n	f3de <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f3c6:	2119      	movs	r1, #25
    f3c8:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f3cc:	f896 8000 	ldrb.w	r8, [r6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f3d0:	f7ff fcd0 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    f3d4:	4607      	mov	r7, r0
    f3d6:	b950      	cbnz	r0, f3ee <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f3d8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f3dc:	e004      	b.n	f3e8 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f3de:	1c70      	adds	r0, r6, #1
    f3e0:	f7ff fd94 	bl	ef0c <set_random_address>
			if (err) {
    f3e4:	2800      	cmp	r0, #0
    f3e6:	d0ee      	beq.n	f3c6 <bt_le_create_conn_legacy+0xe>
}
    f3e8:	b004      	add	sp, #16
    f3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f3ee:	2119      	movs	r1, #25
    f3f0:	3008      	adds	r0, #8
    f3f2:	f008 f9a7 	bl	17744 <net_buf_simple_add>
    f3f6:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f3f8:	2219      	movs	r2, #25
    f3fa:	2100      	movs	r1, #0
    f3fc:	f00e ff05 	bl	1e20a <memset>
	cp->own_addr_type = own_addr_type;
    f400:	f884 800c 	strb.w	r8, [r4, #12]
		if (!bt_dev.le.rl_size ||
    f404:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    f408:	b3bb      	cbz	r3, f47a <bt_le_create_conn_legacy+0xc2>
    f40a:	f896 20e1 	ldrb.w	r2, [r6, #225]	; 0xe1
    f40e:	429a      	cmp	r2, r3
    f410:	d833      	bhi.n	f47a <bt_le_create_conn_legacy+0xc2>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    f412:	f105 0188 	add.w	r1, r5, #136	; 0x88
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f416:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f41a:	1d60      	adds	r0, r4, #5
    f41c:	f00e ffe0 	bl	1e3e0 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f420:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f424:	89b3      	ldrh	r3, [r6, #12]
	cmd(buf)->state = &state;
    f426:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f428:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f42a:	89f3      	ldrh	r3, [r6, #14]
    f42c:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f42e:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f432:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f436:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f43a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f43e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f442:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f446:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f44a:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f44e:	4b0d      	ldr	r3, [pc, #52]	; (f484 <bt_le_create_conn_legacy+0xcc>)
    f450:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f452:	230b      	movs	r3, #11
    f454:	9302      	str	r3, [sp, #8]
	state->val = val;
    f456:	2301      	movs	r3, #1
    f458:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f45c:	f007 fee4 	bl	17228 <net_buf_id>
    f460:	220c      	movs	r2, #12
    f462:	4b09      	ldr	r3, [pc, #36]	; (f488 <bt_le_create_conn_legacy+0xd0>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f464:	4639      	mov	r1, r7
	cmd(buf)->state = &state;
    f466:	fb02 3300 	mla	r3, r2, r0, r3
    f46a:	aa01      	add	r2, sp, #4
    f46c:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f46e:	f242 000d 	movw	r0, #8205	; 0x200d
    f472:	4642      	mov	r2, r8
    f474:	f7ff fcc8 	bl	ee08 <bt_hci_cmd_send_sync>
    f478:	e7b6      	b.n	f3e8 <bt_le_create_conn_legacy+0x30>
			peer_addr = &conn->le.resp_addr;
    f47a:	f105 0196 	add.w	r1, r5, #150	; 0x96
    f47e:	e7ca      	b.n	f416 <bt_le_create_conn_legacy+0x5e>
    f480:	20008000 	.word	0x20008000
    f484:	20008094 	.word	0x20008094
    f488:	20009be8 	.word	0x20009be8

0000f48c <bt_le_create_conn_cancel>:
{
    f48c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f48e:	2100      	movs	r1, #0
{
    f490:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f492:	f242 000e 	movw	r0, #8206	; 0x200e
    f496:	f7ff fc6d 	bl	ed74 <bt_hci_cmd_create>
	state->target = target;
    f49a:	4b0c      	ldr	r3, [pc, #48]	; (f4cc <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f49c:	2500      	movs	r5, #0
	state->target = target;
    f49e:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f4a0:	230b      	movs	r3, #11
    f4a2:	4604      	mov	r4, r0
    f4a4:	9302      	str	r3, [sp, #8]
	state->val = val;
    f4a6:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f4aa:	f007 febd 	bl	17228 <net_buf_id>
    f4ae:	220c      	movs	r2, #12
    f4b0:	4b07      	ldr	r3, [pc, #28]	; (f4d0 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f4b2:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f4b4:	fb02 3300 	mla	r3, r2, r0, r3
    f4b8:	aa01      	add	r2, sp, #4
    f4ba:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f4bc:	f242 000e 	movw	r0, #8206	; 0x200e
    f4c0:	462a      	mov	r2, r5
    f4c2:	f7ff fca1 	bl	ee08 <bt_hci_cmd_send_sync>
}
    f4c6:	b005      	add	sp, #20
    f4c8:	bd30      	pop	{r4, r5, pc}
    f4ca:	bf00      	nop
    f4cc:	20008094 	.word	0x20008094
    f4d0:	20009be8 	.word	0x20009be8

0000f4d4 <bt_security_err_get>:
	switch (hci_err) {
    f4d4:	2829      	cmp	r0, #41	; 0x29
    f4d6:	bf9a      	itte	ls
    f4d8:	4b01      	ldrls	r3, [pc, #4]	; (f4e0 <bt_security_err_get+0xc>)
    f4da:	5c18      	ldrbls	r0, [r3, r0]
{
    f4dc:	2008      	movhi	r0, #8
}
    f4de:	4770      	bx	lr
    f4e0:	00024926 	.word	0x00024926

0000f4e4 <hci_encrypt_key_refresh_complete>:
{
    f4e4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    f4e6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    f4e8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    f4ec:	4630      	mov	r0, r6
    f4ee:	f001 ff9d 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    f4f2:	4604      	mov	r4, r0
    f4f4:	b930      	cbnz	r0, f504 <hci_encrypt_key_refresh_complete+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f4f6:	4632      	mov	r2, r6
}
    f4f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f4fc:	2145      	movs	r1, #69	; 0x45
    f4fe:	4810      	ldr	r0, [pc, #64]	; (f540 <hci_encrypt_key_refresh_complete+0x5c>)
    f500:	f00d b9a0 	b.w	1c844 <printk>
	if (evt->status) {
    f504:	7829      	ldrb	r1, [r5, #0]
    f506:	b159      	cbz	r1, f520 <hci_encrypt_key_refresh_complete+0x3c>
		bt_conn_security_changed(conn, evt->status,
    f508:	4608      	mov	r0, r1
    f50a:	f7ff ffe3 	bl	f4d4 <bt_security_err_get>
    f50e:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f510:	4620      	mov	r0, r4
    f512:	f001 fde5 	bl	110e0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    f516:	4620      	mov	r0, r4
}
    f518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f51c:	f001 bf62 	b.w	113e4 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    f520:	7886      	ldrb	r6, [r0, #2]
    f522:	2e01      	cmp	r6, #1
    f524:	d104      	bne.n	f530 <hci_encrypt_key_refresh_complete+0x4c>
		bt_smp_update_keys(conn);
    f526:	f007 fc7b 	bl	16e20 <bt_smp_update_keys>
	if (!conn->encrypt) {
    f52a:	7ae3      	ldrb	r3, [r4, #11]
    f52c:	b91b      	cbnz	r3, f536 <hci_encrypt_key_refresh_complete+0x52>
		conn->sec_level = BT_SECURITY_L1;
    f52e:	7266      	strb	r6, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f530:	2200      	movs	r2, #0
    f532:	7829      	ldrb	r1, [r5, #0]
    f534:	e7ec      	b.n	f510 <hci_encrypt_key_refresh_complete+0x2c>
    f536:	4620      	mov	r0, r4
    f538:	f7ff f9c4 	bl	e8c4 <update_sec_level.part.0>
    f53c:	e7f8      	b.n	f530 <hci_encrypt_key_refresh_complete+0x4c>
    f53e:	bf00      	nop
    f540:	00023ffa 	.word	0x00023ffa

0000f544 <hci_encrypt_change>:
{
    f544:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    f546:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f548:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    f54c:	4630      	mov	r0, r6
    f54e:	f001 ff6d 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    f552:	4604      	mov	r4, r0
    f554:	b930      	cbnz	r0, f564 <hci_encrypt_change+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f556:	4632      	mov	r2, r6
}
    f558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f55c:	2145      	movs	r1, #69	; 0x45
    f55e:	4812      	ldr	r0, [pc, #72]	; (f5a8 <hci_encrypt_change+0x64>)
    f560:	f00d b970 	b.w	1c844 <printk>
	if (evt->status) {
    f564:	7829      	ldrb	r1, [r5, #0]
    f566:	b159      	cbz	r1, f580 <hci_encrypt_change+0x3c>
		bt_conn_security_changed(conn, evt->status,
    f568:	4608      	mov	r0, r1
    f56a:	f7ff ffb3 	bl	f4d4 <bt_security_err_get>
    f56e:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f570:	4620      	mov	r0, r4
    f572:	f001 fdb5 	bl	110e0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    f576:	4620      	mov	r0, r4
}
    f578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f57c:	f001 bf32 	b.w	113e4 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    f580:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    f582:	78eb      	ldrb	r3, [r5, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    f584:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    f586:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    f588:	d102      	bne.n	f590 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
    f58a:	b923      	cbnz	r3, f596 <hci_encrypt_change+0x52>
		conn->sec_level = BT_SECURITY_L1;
    f58c:	2301      	movs	r3, #1
    f58e:	7263      	strb	r3, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    f590:	2200      	movs	r2, #0
    f592:	7829      	ldrb	r1, [r5, #0]
    f594:	e7ec      	b.n	f570 <hci_encrypt_change+0x2c>
			bt_smp_update_keys(conn);
    f596:	f007 fc43 	bl	16e20 <bt_smp_update_keys>
	if (!conn->encrypt) {
    f59a:	7ae3      	ldrb	r3, [r4, #11]
    f59c:	2b00      	cmp	r3, #0
    f59e:	d0f5      	beq.n	f58c <hci_encrypt_change+0x48>
    f5a0:	4620      	mov	r0, r4
    f5a2:	f7ff f98f 	bl	e8c4 <update_sec_level.part.0>
    f5a6:	e7f3      	b.n	f590 <hci_encrypt_change+0x4c>
    f5a8:	00023ffa 	.word	0x00023ffa

0000f5ac <bt_id_add>:
{
    f5ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f5b0:	4c54      	ldr	r4, [pc, #336]	; (f704 <bt_id_add+0x158>)
{
    f5b2:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f5b4:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    f5b8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f5bc:	b10a      	cbz	r2, f5c2 <bt_id_add+0x16>
    f5be:	429a      	cmp	r2, r3
    f5c0:	d209      	bcs.n	f5d6 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
    f5c2:	3301      	adds	r3, #1
    f5c4:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    f5c8:	7a2b      	ldrb	r3, [r5, #8]
    f5ca:	f043 0304 	orr.w	r3, r3, #4
    f5ce:	722b      	strb	r3, [r5, #8]
}
    f5d0:	b002      	add	sp, #8
    f5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    f5d6:	2100      	movs	r1, #0
    f5d8:	2206      	movs	r2, #6
    f5da:	4608      	mov	r0, r1
    f5dc:	f002 f860 	bl	116a0 <bt_conn_lookup_state_le>
	if (conn) {
    f5e0:	4606      	mov	r6, r0
    f5e2:	b178      	cbz	r0, f604 <bt_id_add+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f5e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f5e8:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f5ec:	f00e fefb 	bl	1e3e6 <atomic_or>
		bt_conn_unref(conn);
    f5f0:	4630      	mov	r0, r6
	keys->state |= flag;
    f5f2:	7a2b      	ldrb	r3, [r5, #8]
    f5f4:	f043 0301 	orr.w	r3, r3, #1
    f5f8:	722b      	strb	r3, [r5, #8]
}
    f5fa:	b002      	add	sp, #8
    f5fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    f600:	f001 bef0 	b.w	113e4 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f604:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f608:	f00e fee7 	bl	1e3da <atomic_get>
	bt_adv_foreach(adv_pause_enabled, NULL);
    f60c:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f60e:	f3c0 1740 	ubfx	r7, r0, #5, #1
    f612:	483d      	ldr	r0, [pc, #244]	; (f708 <bt_id_add+0x15c>)
    f614:	f7fe ffc4 	bl	e5a0 <bt_adv_foreach>
	if (scan_enabled) {
    f618:	b117      	cbz	r7, f620 <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    f61a:	4630      	mov	r0, r6
    f61c:	f00e ff8e 	bl	1e53c <set_le_scan_enable.isra.0>
	if (bt_dev.le.rl_entries) {
    f620:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f624:	b143      	cbz	r3, f638 <bt_id_add+0x8c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    f626:	2000      	movs	r0, #0
    f628:	f00e ff71 	bl	1e50e <addr_res_enable>
		if (err) {
    f62c:	b120      	cbz	r0, f638 <bt_id_add+0x8c>
			BT_WARN("Failed to disable address resolution");
    f62e:	2157      	movs	r1, #87	; 0x57
    f630:	4836      	ldr	r0, [pc, #216]	; (f70c <bt_id_add+0x160>)
		BT_WARN("Set privacy mode command is not supported");
    f632:	f00d f907 	bl	1c844 <printk>
	if (err) {
    f636:	e01c      	b.n	f672 <bt_id_add+0xc6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    f638:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    f63c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f640:	429a      	cmp	r2, r3
    f642:	d124      	bne.n	f68e <bt_id_add+0xe2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    f644:	2157      	movs	r1, #87	; 0x57
    f646:	4832      	ldr	r0, [pc, #200]	; (f710 <bt_id_add+0x164>)
    f648:	f00d f8fc 	bl	1c844 <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    f64c:	2200      	movs	r2, #0
    f64e:	f242 0029 	movw	r0, #8233	; 0x2029
    f652:	4611      	mov	r1, r2
    f654:	f7ff fbd8 	bl	ee08 <bt_hci_cmd_send_sync>
		if (err) {
    f658:	b110      	cbz	r0, f660 <bt_id_add+0xb4>
			BT_ERR("Failed to clear resolution list");
    f65a:	2145      	movs	r1, #69	; 0x45
    f65c:	482d      	ldr	r0, [pc, #180]	; (f714 <bt_id_add+0x168>)
    f65e:	e7e8      	b.n	f632 <bt_id_add+0x86>
		bt_dev.le.rl_entries++;
    f660:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f664:	3301      	adds	r3, #1
    f666:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    f66a:	7a2b      	ldrb	r3, [r5, #8]
    f66c:	f043 0304 	orr.w	r3, r3, #4
    f670:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    f672:	2001      	movs	r0, #1
    f674:	f00e ff4b 	bl	1e50e <addr_res_enable>
	if (scan_enabled) {
    f678:	b117      	cbz	r7, f680 <bt_id_add+0xd4>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    f67a:	2001      	movs	r0, #1
    f67c:	f00e ff5e 	bl	1e53c <set_le_scan_enable.isra.0>
	bt_adv_foreach(adv_unpause_enabled, NULL);
    f680:	2100      	movs	r1, #0
    f682:	4825      	ldr	r0, [pc, #148]	; (f718 <bt_id_add+0x16c>)
}
    f684:	b002      	add	sp, #8
    f686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    f68a:	f7fe bf89 	b.w	e5a0 <bt_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    f68e:	f105 0801 	add.w	r8, r5, #1
    f692:	4640      	mov	r0, r8
    f694:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    f698:	f00e ff52 	bl	1e540 <hci_id_add.constprop.0>
	if (err) {
    f69c:	4606      	mov	r6, r0
    f69e:	b110      	cbz	r0, f6a6 <bt_id_add+0xfa>
		BT_ERR("Failed to add IRK to controller");
    f6a0:	2145      	movs	r1, #69	; 0x45
    f6a2:	481e      	ldr	r0, [pc, #120]	; (f71c <bt_id_add+0x170>)
    f6a4:	e7c5      	b.n	f632 <bt_id_add+0x86>
	bt_dev.le.rl_entries++;
    f6a6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f6aa:	3301      	adds	r3, #1
    f6ac:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    f6b0:	7a2b      	ldrb	r3, [r5, #8]
    f6b2:	f043 0304 	orr.w	r3, r3, #4
    f6b6:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    f6b8:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    f6bc:	075b      	lsls	r3, r3, #29
    f6be:	d402      	bmi.n	f6c6 <bt_id_add+0x11a>
		BT_WARN("Set privacy mode command is not supported");
    f6c0:	2157      	movs	r1, #87	; 0x57
    f6c2:	4817      	ldr	r0, [pc, #92]	; (f720 <bt_id_add+0x174>)
    f6c4:	e7b5      	b.n	f632 <bt_id_add+0x86>
	bt_addr_le_copy(&cp.id_addr, addr);
    f6c6:	4641      	mov	r1, r8
    f6c8:	4668      	mov	r0, sp
    f6ca:	f00e fe89 	bl	1e3e0 <bt_addr_le_copy>
	cp.mode = mode;
    f6ce:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    f6d0:	2108      	movs	r1, #8
    f6d2:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    f6d6:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    f6da:	f7ff fb4b 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    f6de:	4604      	mov	r4, r0
    f6e0:	b910      	cbnz	r0, f6e8 <bt_id_add+0x13c>
		BT_ERR("Failed to set privacy mode");
    f6e2:	2145      	movs	r1, #69	; 0x45
    f6e4:	480f      	ldr	r0, [pc, #60]	; (f724 <bt_id_add+0x178>)
    f6e6:	e7a4      	b.n	f632 <bt_id_add+0x86>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f6e8:	2208      	movs	r2, #8
    f6ea:	4669      	mov	r1, sp
    f6ec:	4410      	add	r0, r2
    f6ee:	f010 fef1 	bl	204d4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    f6f2:	4632      	mov	r2, r6
    f6f4:	4621      	mov	r1, r4
    f6f6:	f242 004e 	movw	r0, #8270	; 0x204e
    f6fa:	f7ff fb85 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    f6fe:	2800      	cmp	r0, #0
    f700:	d0b7      	beq.n	f672 <bt_id_add+0xc6>
    f702:	e7ee      	b.n	f6e2 <bt_id_add+0x136>
    f704:	20008000 	.word	0x20008000
    f708:	0001e4c5 	.word	0x0001e4c5
    f70c:	000242d9 	.word	0x000242d9
    f710:	00024303 	.word	0x00024303
    f714:	00024339 	.word	0x00024339
    f718:	0001e4ef 	.word	0x0001e4ef
    f71c:	0002435e 	.word	0x0002435e
    f720:	00024383 	.word	0x00024383
    f724:	000243b2 	.word	0x000243b2

0000f728 <bt_id_del>:
{
    f728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    f72c:	4c47      	ldr	r4, [pc, #284]	; (f84c <bt_id_del+0x124>)
{
    f72e:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    f730:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    f734:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	if (!bt_dev.le.rl_size ||
    f738:	b112      	cbz	r2, f740 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    f73a:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    f73c:	4293      	cmp	r3, r2
    f73e:	dd08      	ble.n	f752 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    f740:	3b01      	subs	r3, #1
    f742:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    f746:	7a2b      	ldrb	r3, [r5, #8]
    f748:	f023 0304 	bic.w	r3, r3, #4
    f74c:	722b      	strb	r3, [r5, #8]
}
    f74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    f752:	2100      	movs	r1, #0
    f754:	2206      	movs	r2, #6
    f756:	4608      	mov	r0, r1
    f758:	f001 ffa2 	bl	116a0 <bt_conn_lookup_state_le>
	if (conn) {
    f75c:	4606      	mov	r6, r0
    f75e:	b170      	cbz	r0, f77e <bt_id_del+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f760:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f768:	f00e fe3d 	bl	1e3e6 <atomic_or>
	keys->state |= flag;
    f76c:	7a2b      	ldrb	r3, [r5, #8]
		bt_conn_unref(conn);
    f76e:	4630      	mov	r0, r6
	keys->state |= flag;
    f770:	f043 0302 	orr.w	r3, r3, #2
    f774:	722b      	strb	r3, [r5, #8]
}
    f776:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    f77a:	f001 be33 	b.w	113e4 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f77e:	f104 0094 	add.w	r0, r4, #148	; 0x94
    f782:	f00e fe2a 	bl	1e3da <atomic_get>
	bt_adv_foreach(adv_pause_enabled, NULL);
    f786:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f788:	f3c0 1840 	ubfx	r8, r0, #5, #1
    f78c:	4830      	ldr	r0, [pc, #192]	; (f850 <bt_id_del+0x128>)
    f78e:	f7fe ff07 	bl	e5a0 <bt_adv_foreach>
	if (scan_enabled) {
    f792:	f1b8 0f00 	cmp.w	r8, #0
    f796:	d002      	beq.n	f79e <bt_id_del+0x76>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    f798:	4630      	mov	r0, r6
    f79a:	f00e fecf 	bl	1e53c <set_le_scan_enable.isra.0>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    f79e:	2000      	movs	r0, #0
    f7a0:	f00e feb5 	bl	1e50e <addr_res_enable>
	if (err) {
    f7a4:	4606      	mov	r6, r0
    f7a6:	b1b0      	cbz	r0, f7d6 <bt_id_del+0xae>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    f7a8:	4602      	mov	r2, r0
    f7aa:	2145      	movs	r1, #69	; 0x45
    f7ac:	4829      	ldr	r0, [pc, #164]	; (f854 <bt_id_del+0x12c>)
    f7ae:	f00d f849 	bl	1c844 <printk>
	if (bt_dev.le.rl_entries) {
    f7b2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f7b6:	b113      	cbz	r3, f7be <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    f7b8:	2001      	movs	r0, #1
    f7ba:	f00e fea8 	bl	1e50e <addr_res_enable>
	if (scan_enabled) {
    f7be:	f1b8 0f00 	cmp.w	r8, #0
    f7c2:	d002      	beq.n	f7ca <bt_id_del+0xa2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    f7c4:	2001      	movs	r0, #1
    f7c6:	f00e feb9 	bl	1e53c <set_le_scan_enable.isra.0>
}
    f7ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    f7ce:	2100      	movs	r1, #0
    f7d0:	4821      	ldr	r0, [pc, #132]	; (f858 <bt_id_del+0x130>)
    f7d2:	f7fe bee5 	b.w	e5a0 <bt_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    f7d6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f7da:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    f7de:	429a      	cmp	r2, r3
    f7e0:	d20c      	bcs.n	f7fc <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
    f7e2:	3b01      	subs	r3, #1
    f7e4:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    f7e8:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    f7ea:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    f7ec:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    f7f0:	2002      	movs	r0, #2
    f7f2:	491a      	ldr	r1, [pc, #104]	; (f85c <bt_id_del+0x134>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    f7f4:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    f7f6:	f007 fbd3 	bl	16fa0 <bt_keys_foreach>
		goto done;
    f7fa:	e7da      	b.n	f7b2 <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    f7fc:	2107      	movs	r1, #7
    f7fe:	f242 0028 	movw	r0, #8232	; 0x2028
    f802:	f7ff fab7 	bl	ed74 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    f806:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
    f80a:	4607      	mov	r7, r0
    f80c:	b920      	cbnz	r0, f818 <bt_id_del+0xf0>
		BT_ERR("Failed to remove IRK from controller");
    f80e:	2145      	movs	r1, #69	; 0x45
    f810:	4813      	ldr	r0, [pc, #76]	; (f860 <bt_id_del+0x138>)
    f812:	f00d f817 	bl	1c844 <printk>
		goto done;
    f816:	e7cc      	b.n	f7b2 <bt_id_del+0x8a>
	return net_buf_simple_add(&buf->b, len);
    f818:	2107      	movs	r1, #7
    f81a:	3008      	adds	r0, #8
    f81c:	f007 ff92 	bl	17744 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    f820:	4649      	mov	r1, r9
    f822:	f00e fddd 	bl	1e3e0 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    f826:	4632      	mov	r2, r6
    f828:	4639      	mov	r1, r7
    f82a:	f242 0028 	movw	r0, #8232	; 0x2028
    f82e:	f7ff faeb 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
    f832:	2800      	cmp	r0, #0
    f834:	d1eb      	bne.n	f80e <bt_id_del+0xe6>
	bt_dev.le.rl_entries--;
    f836:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f83a:	3b01      	subs	r3, #1
    f83c:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    f840:	7a2b      	ldrb	r3, [r5, #8]
    f842:	f023 0304 	bic.w	r3, r3, #4
    f846:	722b      	strb	r3, [r5, #8]
    f848:	e7b3      	b.n	f7b2 <bt_id_del+0x8a>
    f84a:	bf00      	nop
    f84c:	20008000 	.word	0x20008000
    f850:	0001e4c5 	.word	0x0001e4c5
    f854:	000243d2 	.word	0x000243d2
    f858:	0001e4ef 	.word	0x0001e4ef
    f85c:	0001e591 	.word	0x0001e591
    f860:	00024404 	.word	0x00024404

0000f864 <bt_le_scan_update>:
{
    f864:	b570      	push	{r4, r5, r6, lr}
    f866:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f868:	481c      	ldr	r0, [pc, #112]	; (f8dc <bt_le_scan_update+0x78>)
    f86a:	f00e fdb6 	bl	1e3da <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f86e:	0641      	lsls	r1, r0, #25
    f870:	f3c0 1380 	ubfx	r3, r0, #6, #1
    f874:	d501      	bpl.n	f87a <bt_le_scan_update+0x16>
			return 0;
    f876:	2000      	movs	r0, #0
    f878:	e02b      	b.n	f8d2 <bt_le_scan_update+0x6e>
    f87a:	4818      	ldr	r0, [pc, #96]	; (f8dc <bt_le_scan_update+0x78>)
    f87c:	f00e fdad 	bl	1e3da <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f880:	0682      	lsls	r2, r0, #26
    f882:	d421      	bmi.n	f8c8 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f884:	2100      	movs	r1, #0
    f886:	2206      	movs	r2, #6
    f888:	4608      	mov	r0, r1
    f88a:	f001 ff09 	bl	116a0 <bt_conn_lookup_state_le>
		if (conn) {
    f88e:	4604      	mov	r4, r0
    f890:	bb00      	cbnz	r0, f8d4 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f892:	2202      	movs	r2, #2
    f894:	4601      	mov	r1, r0
    f896:	f001 ff03 	bl	116a0 <bt_conn_lookup_state_le>
		if (conn) {
    f89a:	4605      	mov	r5, r0
    f89c:	2800      	cmp	r0, #0
    f89e:	d0ea      	beq.n	f876 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f8a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    f8a4:	480d      	ldr	r0, [pc, #52]	; (f8dc <bt_le_scan_update+0x78>)
    f8a6:	f00e fd9e 	bl	1e3e6 <atomic_or>
			bt_conn_unref(conn);
    f8aa:	4628      	mov	r0, r5
    f8ac:	f001 fd9a 	bl	113e4 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    f8b0:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f8b2:	4620      	mov	r0, r4
}
    f8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f8b8:	bf15      	itete	ne
    f8ba:	2230      	movne	r2, #48	; 0x30
    f8bc:	2212      	moveq	r2, #18
    f8be:	2160      	movne	r1, #96	; 0x60
    f8c0:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    f8c4:	f7ff bd12 	b.w	f2ec <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    f8c8:	4618      	mov	r0, r3
    f8ca:	f7ff fb79 	bl	efc0 <set_le_scan_enable_legacy>
		if (err) {
    f8ce:	2800      	cmp	r0, #0
    f8d0:	d0d8      	beq.n	f884 <bt_le_scan_update+0x20>
}
    f8d2:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    f8d4:	f001 fd86 	bl	113e4 <bt_conn_unref>
    f8d8:	e7cd      	b.n	f876 <bt_le_scan_update+0x12>
    f8da:	bf00      	nop
    f8dc:	20008094 	.word	0x20008094

0000f8e0 <hci_disconn_complete>:
{
    f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    f8e2:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    f8e4:	7835      	ldrb	r5, [r6, #0]
    f8e6:	bb45      	cbnz	r5, f93a <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f8e8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    f8ec:	4638      	mov	r0, r7
    f8ee:	f001 fd9d 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    f8f2:	4604      	mov	r4, r0
    f8f4:	b930      	cbnz	r0, f904 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f8f6:	463a      	mov	r2, r7
}
    f8f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f8fc:	2145      	movs	r1, #69	; 0x45
    f8fe:	480f      	ldr	r0, [pc, #60]	; (f93c <hci_disconn_complete+0x5c>)
    f900:	f00c bfa0 	b.w	1c844 <printk>
	conn->err = evt->reason;
    f904:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f906:	4629      	mov	r1, r5
	conn->err = evt->reason;
    f908:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f90a:	f001 fd97 	bl	1143c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    f90e:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    f910:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    f912:	2b01      	cmp	r3, #1
    f914:	d004      	beq.n	f920 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    f916:	4620      	mov	r0, r4
}
    f918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    f91c:	f001 bd62 	b.w	113e4 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f920:	1d20      	adds	r0, r4, #4
    f922:	f00e fd5a 	bl	1e3da <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    f926:	07c3      	lsls	r3, r0, #31
    f928:	d5f5      	bpl.n	f916 <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    f92a:	4620      	mov	r0, r4
    f92c:	2102      	movs	r1, #2
    f92e:	f001 fd85 	bl	1143c <bt_conn_set_state>
		bt_le_scan_update(false);
    f932:	4628      	mov	r0, r5
    f934:	f7ff ff96 	bl	f864 <bt_le_scan_update>
    f938:	e7ed      	b.n	f916 <hci_disconn_complete+0x36>
}
    f93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f93c:	00023ffa 	.word	0x00023ffa

0000f940 <le_adv_report>:
{
    f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    f944:	f100 0708 	add.w	r7, r0, #8
    f948:	b08d      	sub	sp, #52	; 0x34
    f94a:	4604      	mov	r4, r0
    f94c:	4638      	mov	r0, r7
    f94e:	f010 fda5 	bl	2049c <net_buf_simple_pull_u8>
    f952:	f8df 81d0 	ldr.w	r8, [pc, #464]	; fb24 <le_adv_report+0x1e4>
	if (scan_dev_found_cb) {
    f956:	f8df a1d0 	ldr.w	sl, [pc, #464]	; fb28 <le_adv_report+0x1e8>
    f95a:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    f95c:	9b01      	ldr	r3, [sp, #4]
    f95e:	b913      	cbnz	r3, f966 <le_adv_report+0x26>
}
    f960:	b00d      	add	sp, #52	; 0x34
    f962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    f966:	89a3      	ldrh	r3, [r4, #12]
    f968:	2b08      	cmp	r3, #8
    f96a:	d806      	bhi.n	f97a <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    f96c:	2145      	movs	r1, #69	; 0x45
    f96e:	486f      	ldr	r0, [pc, #444]	; (fb2c <le_adv_report+0x1ec>)
}
    f970:	b00d      	add	sp, #52	; 0x34
    f972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    f976:	f00c bf65 	b.w	1c844 <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    f97a:	2109      	movs	r1, #9
    f97c:	4638      	mov	r0, r7
    f97e:	f007 fec3 	bl	17708 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    f982:	237f      	movs	r3, #127	; 0x7f
    f984:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    f988:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f98a:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    f98c:	9300      	str	r3, [sp, #0]
    f98e:	18c3      	adds	r3, r0, r3
    f990:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f992:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    f996:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    f99a:	23ff      	movs	r3, #255	; 0xff
    f99c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    f9a0:	2300      	movs	r3, #0
    f9a2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    f9a6:	7802      	ldrb	r2, [r0, #0]
    f9a8:	4606      	mov	r6, r0
    f9aa:	2a04      	cmp	r2, #4
    f9ac:	bf98      	it	ls
    f9ae:	4b60      	ldrls	r3, [pc, #384]	; (fb30 <le_adv_report+0x1f0>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    f9b0:	f100 0901 	add.w	r9, r0, #1
    f9b4:	bf98      	it	ls
    f9b6:	5c9b      	ldrbls	r3, [r3, r2]
    f9b8:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    f9ba:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    f9be:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    f9c2:	f00e fd0a 	bl	1e3da <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f9c6:	0645      	lsls	r5, r0, #25
    f9c8:	d50d      	bpl.n	f9e6 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    f9ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f9ce:	0758      	lsls	r0, r3, #29
    f9d0:	d509      	bpl.n	f9e6 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    f9d2:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    f9d4:	4638      	mov	r0, r7
    f9d6:	3101      	adds	r1, #1
    f9d8:	f007 fe7a 	bl	176d0 <net_buf_simple_pull>
    f9dc:	9b01      	ldr	r3, [sp, #4]
    f9de:	1e58      	subs	r0, r3, #1
    f9e0:	b2c3      	uxtb	r3, r0
    f9e2:	9301      	str	r3, [sp, #4]
    f9e4:	e7ba      	b.n	f95c <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    f9e6:	7873      	ldrb	r3, [r6, #1]
    f9e8:	1e9a      	subs	r2, r3, #2
    f9ea:	2a01      	cmp	r2, #1
    f9ec:	d84c      	bhi.n	fa88 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    f9ee:	4649      	mov	r1, r9
    f9f0:	a804      	add	r0, sp, #16
    f9f2:	f00e fcf5 	bl	1e3e0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    f9f6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    f9fa:	3b02      	subs	r3, #2
    f9fc:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    fa00:	ab04      	add	r3, sp, #16
    fa02:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    fa04:	f8da 3000 	ldr.w	r3, [sl]
    fa08:	b1a3      	cbz	r3, fa34 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    fa0a:	4638      	mov	r0, r7
    fa0c:	f010 fd56 	bl	204bc <net_buf_simple_headroom>
    fa10:	4683      	mov	fp, r0
		buf->len = len;
    fa12:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    fa14:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fa16:	a804      	add	r0, sp, #16
		buf->len = len;
    fa18:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fa1a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    fa1e:	463b      	mov	r3, r7
    fa20:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    fa24:	f8da c000 	ldr.w	ip, [sl]
    fa28:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    fa2a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fa2c:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    fa2e:	fa10 f08b 	uxtah	r0, r0, fp
    fa32:	60a0      	str	r0, [r4, #8]
	return list->head;
    fa34:	4b3f      	ldr	r3, [pc, #252]	; (fb34 <le_adv_report+0x1f4>)
    fa36:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fa38:	2b00      	cmp	r3, #0
    fa3a:	d036      	beq.n	faaa <le_adv_report+0x16a>
    fa3c:	f1b3 0208 	subs.w	r2, r3, #8
    fa40:	d033      	beq.n	faaa <le_adv_report+0x16a>
	return node->next;
    fa42:	681d      	ldr	r5, [r3, #0]
    fa44:	b105      	cbz	r5, fa48 <le_adv_report+0x108>
    fa46:	3d08      	subs	r5, #8
		if (listener->recv) {
    fa48:	6813      	ldr	r3, [r2, #0]
    fa4a:	9203      	str	r2, [sp, #12]
    fa4c:	b193      	cbz	r3, fa74 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    fa4e:	4638      	mov	r0, r7
    fa50:	f010 fd34 	bl	204bc <net_buf_simple_headroom>
    fa54:	4683      	mov	fp, r0
	state->len = buf->len;
    fa56:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fa58:	9a03      	ldr	r2, [sp, #12]
    fa5a:	9302      	str	r3, [sp, #8]
			buf->len = len;
    fa5c:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    fa5e:	a808      	add	r0, sp, #32
			buf->len = len;
    fa60:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fa62:	4639      	mov	r1, r7
    fa64:	6812      	ldr	r2, [r2, #0]
    fa66:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    fa68:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fa6a:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    fa6c:	fa10 f08b 	uxtah	r0, r0, fp
    fa70:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    fa72:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fa74:	b1cd      	cbz	r5, faaa <le_adv_report+0x16a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fa76:	f115 0308 	adds.w	r3, r5, #8
    fa7a:	d002      	beq.n	fa82 <le_adv_report+0x142>
	return node->next;
    fa7c:	68ab      	ldr	r3, [r5, #8]
    fa7e:	b103      	cbz	r3, fa82 <le_adv_report+0x142>
    fa80:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    fa82:	462a      	mov	r2, r5
    fa84:	461d      	mov	r5, r3
    fa86:	e7df      	b.n	fa48 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    fa88:	2bff      	cmp	r3, #255	; 0xff
    fa8a:	d108      	bne.n	fa9e <le_adv_report+0x15e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fa8c:	2300      	movs	r3, #0
    fa8e:	a906      	add	r1, sp, #24
    fa90:	9306      	str	r3, [sp, #24]
    fa92:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    fa96:	a804      	add	r0, sp, #16
    fa98:	f00e fca2 	bl	1e3e0 <bt_addr_le_copy>
    fa9c:	e7b0      	b.n	fa00 <le_adv_report+0xc0>
    fa9e:	4649      	mov	r1, r9
    faa0:	2000      	movs	r0, #0
    faa2:	f00e fd7e 	bl	1e5a2 <bt_lookup_id_addr>
    faa6:	4601      	mov	r1, r0
    faa8:	e7f5      	b.n	fa96 <le_adv_report+0x156>
    faaa:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    faac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fab0:	f00e fc93 	bl	1e3da <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fab4:	0641      	lsls	r1, r0, #25
    fab6:	f3c0 1580 	ubfx	r5, r0, #6, #1
    faba:	d48a      	bmi.n	f9d2 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    fabc:	07da      	lsls	r2, r3, #31
    fabe:	d588      	bpl.n	f9d2 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    fac0:	2202      	movs	r2, #2
    fac2:	4628      	mov	r0, r5
    fac4:	a904      	add	r1, sp, #16
    fac6:	f001 fdeb 	bl	116a0 <bt_conn_lookup_state_le>
	if (!conn) {
    faca:	4683      	mov	fp, r0
    facc:	2800      	cmp	r0, #0
    face:	d080      	beq.n	f9d2 <le_adv_report+0x92>
    fad0:	4640      	mov	r0, r8
    fad2:	f00e fc82 	bl	1e3da <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fad6:	0683      	lsls	r3, r0, #26
    fad8:	d410      	bmi.n	fafc <le_adv_report+0x1bc>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    fada:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    fade:	4649      	mov	r1, r9
    fae0:	f00e fc7e 	bl	1e3e0 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    fae4:	4658      	mov	r0, fp
    fae6:	f7ff fc67 	bl	f3b8 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    faea:	b960      	cbnz	r0, fb06 <le_adv_report+0x1c6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    faec:	4658      	mov	r0, fp
    faee:	2106      	movs	r1, #6
    faf0:	f001 fca4 	bl	1143c <bt_conn_set_state>
	bt_conn_unref(conn);
    faf4:	4658      	mov	r0, fp
    faf6:	f001 fc75 	bl	113e4 <bt_conn_unref>
	return;
    fafa:	e76a      	b.n	f9d2 <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    fafc:	4628      	mov	r0, r5
    fafe:	f7ff fa5f 	bl	efc0 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fb02:	2800      	cmp	r0, #0
    fb04:	d0e9      	beq.n	fada <le_adv_report+0x19a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fb06:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fb08:	2100      	movs	r1, #0
    fb0a:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fb0c:	f88b 300c 	strb.w	r3, [fp, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fb10:	f001 fc94 	bl	1143c <bt_conn_set_state>
	bt_conn_unref(conn);
    fb14:	4658      	mov	r0, fp
    fb16:	f001 fc65 	bl	113e4 <bt_conn_unref>
	bt_le_scan_update(false);
    fb1a:	2000      	movs	r0, #0
    fb1c:	f7ff fea2 	bl	f864 <bt_le_scan_update>
    fb20:	e757      	b.n	f9d2 <le_adv_report+0x92>
    fb22:	bf00      	nop
    fb24:	20008094 	.word	0x20008094
    fb28:	20009c14 	.word	0x20009c14
    fb2c:	0002442e 	.word	0x0002442e
    fb30:	00024921 	.word	0x00024921
    fb34:	20009c0c 	.word	0x20009c0c

0000fb38 <bt_data_parse>:
{
    fb38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fb3a:	4604      	mov	r4, r0
    fb3c:	460e      	mov	r6, r1
    fb3e:	4617      	mov	r7, r2
	while (ad->len > 1) {
    fb40:	88a3      	ldrh	r3, [r4, #4]
    fb42:	2b01      	cmp	r3, #1
    fb44:	d801      	bhi.n	fb4a <bt_data_parse+0x12>
}
    fb46:	b003      	add	sp, #12
    fb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    fb4a:	4620      	mov	r0, r4
    fb4c:	f010 fca6 	bl	2049c <net_buf_simple_pull_u8>
		if (len == 0U) {
    fb50:	4605      	mov	r5, r0
    fb52:	2800      	cmp	r0, #0
    fb54:	d0f7      	beq.n	fb46 <bt_data_parse+0xe>
		if (len > ad->len) {
    fb56:	88a2      	ldrh	r2, [r4, #4]
    fb58:	b283      	uxth	r3, r0
    fb5a:	429a      	cmp	r2, r3
    fb5c:	d206      	bcs.n	fb6c <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    fb5e:	2157      	movs	r1, #87	; 0x57
    fb60:	480c      	ldr	r0, [pc, #48]	; (fb94 <bt_data_parse+0x5c>)
}
    fb62:	b003      	add	sp, #12
    fb64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    fb68:	f00c be6c 	b.w	1c844 <printk>
		data.type = net_buf_simple_pull_u8(ad);
    fb6c:	4620      	mov	r0, r4
    fb6e:	f010 fc95 	bl	2049c <net_buf_simple_pull_u8>
		data.data = ad->data;
    fb72:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    fb74:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    fb78:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    fb7a:	4639      	mov	r1, r7
    fb7c:	4668      	mov	r0, sp
		data.data_len = len - 1;
    fb7e:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    fb82:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    fb84:	47b0      	blx	r6
    fb86:	2800      	cmp	r0, #0
    fb88:	d0dd      	beq.n	fb46 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    fb8a:	4629      	mov	r1, r5
    fb8c:	4620      	mov	r0, r4
    fb8e:	f007 fd9f 	bl	176d0 <net_buf_simple_pull>
    fb92:	e7d5      	b.n	fb40 <bt_data_parse+0x8>
    fb94:	0002444c 	.word	0x0002444c

0000fb98 <bt_send>:
	return bt_dev.drv->send(buf);
    fb98:	4b02      	ldr	r3, [pc, #8]	; (fba4 <bt_send+0xc>)
    fb9a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    fb9e:	691b      	ldr	r3, [r3, #16]
    fba0:	4718      	bx	r3
    fba2:	bf00      	nop
    fba4:	20008000 	.word	0x20008000

0000fba8 <bt_hci_cmd_send>:
{
    fba8:	b538      	push	{r3, r4, r5, lr}
    fbaa:	4605      	mov	r5, r0
	if (!buf) {
    fbac:	460c      	mov	r4, r1
    fbae:	b919      	cbnz	r1, fbb8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    fbb0:	f7ff f8e0 	bl	ed74 <bt_hci_cmd_create>
		if (!buf) {
    fbb4:	4604      	mov	r4, r0
    fbb6:	b1c0      	cbz	r0, fbea <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    fbb8:	f640 4335 	movw	r3, #3125	; 0xc35
    fbbc:	429d      	cmp	r5, r3
    fbbe:	d10e      	bne.n	fbde <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    fbc0:	4620      	mov	r0, r4
    fbc2:	f7ff ffe9 	bl	fb98 <bt_send>
		if (err) {
    fbc6:	4605      	mov	r5, r0
    fbc8:	b138      	cbz	r0, fbda <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    fbca:	4602      	mov	r2, r0
    fbcc:	2145      	movs	r1, #69	; 0x45
    fbce:	4808      	ldr	r0, [pc, #32]	; (fbf0 <bt_hci_cmd_send+0x48>)
    fbd0:	f00c fe38 	bl	1c844 <printk>
			net_buf_unref(buf);
    fbd4:	4620      	mov	r0, r4
    fbd6:	f007 fc9f 	bl	17518 <net_buf_unref>
}
    fbda:	4628      	mov	r0, r5
    fbdc:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    fbde:	4621      	mov	r1, r4
    fbe0:	4804      	ldr	r0, [pc, #16]	; (fbf4 <bt_hci_cmd_send+0x4c>)
    fbe2:	f007 fc6b 	bl	174bc <net_buf_put>
	return 0;
    fbe6:	2500      	movs	r5, #0
    fbe8:	e7f7      	b.n	fbda <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    fbea:	f06f 0536 	mvn.w	r5, #54	; 0x36
    fbee:	e7f4      	b.n	fbda <bt_hci_cmd_send+0x32>
    fbf0:	00024460 	.word	0x00024460
    fbf4:	20008120 	.word	0x20008120

0000fbf8 <bt_hci_host_num_completed_packets>:
{
    fbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbfa:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    fbfc:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fbfe:	7980      	ldrb	r0, [r0, #6]
    fc00:	f007 fb0a 	bl	17218 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    fc04:	4621      	mov	r1, r4
    fc06:	f011 fb38 	bl	2127a <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    fc0a:	4b24      	ldr	r3, [pc, #144]	; (fc9c <bt_hci_host_num_completed_packets+0xa4>)
    fc0c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    fc10:	069b      	lsls	r3, r3, #26
    fc12:	d541      	bpl.n	fc98 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    fc14:	7d60      	ldrb	r0, [r4, #21]
    fc16:	f002 f85f 	bl	11cd8 <bt_conn_lookup_index>
	if (!conn) {
    fc1a:	4605      	mov	r5, r0
    fc1c:	b930      	cbnz	r0, fc2c <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    fc1e:	7d62      	ldrb	r2, [r4, #21]
    fc20:	2157      	movs	r1, #87	; 0x57
}
    fc22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    fc26:	481e      	ldr	r0, [pc, #120]	; (fca0 <bt_hci_host_num_completed_packets+0xa8>)
    fc28:	f00c be0c 	b.w	1c844 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    fc2c:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    fc2e:	2b01      	cmp	r3, #1
    fc30:	d002      	beq.n	fc38 <bt_hci_host_num_completed_packets+0x40>
    fc32:	3b07      	subs	r3, #7
    fc34:	2b01      	cmp	r3, #1
    fc36:	d80f      	bhi.n	fc58 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    fc38:	4628      	mov	r0, r5
    fc3a:	f001 fbd3 	bl	113e4 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    fc3e:	2105      	movs	r1, #5
    fc40:	f640 4035 	movw	r0, #3125	; 0xc35
    fc44:	f7ff f896 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    fc48:	4604      	mov	r4, r0
    fc4a:	b970      	cbnz	r0, fc6a <bt_hci_host_num_completed_packets+0x72>
}
    fc4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    fc50:	2145      	movs	r1, #69	; 0x45
    fc52:	4814      	ldr	r0, [pc, #80]	; (fca4 <bt_hci_host_num_completed_packets+0xac>)
    fc54:	f00c bdf6 	b.w	1c844 <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    fc58:	4813      	ldr	r0, [pc, #76]	; (fca8 <bt_hci_host_num_completed_packets+0xb0>)
    fc5a:	2157      	movs	r1, #87	; 0x57
    fc5c:	f00c fdf2 	bl	1c844 <printk>
		bt_conn_unref(conn);
    fc60:	4628      	mov	r0, r5
}
    fc62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    fc66:	f001 bbbd 	b.w	113e4 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    fc6a:	f100 0708 	add.w	r7, r0, #8
    fc6e:	2101      	movs	r1, #1
    fc70:	4638      	mov	r0, r7
    fc72:	f007 fd67 	bl	17744 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    fc76:	2501      	movs	r5, #1
    fc78:	2104      	movs	r1, #4
    fc7a:	7005      	strb	r5, [r0, #0]
    fc7c:	4638      	mov	r0, r7
    fc7e:	f007 fd61 	bl	17744 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    fc82:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    fc84:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    fc86:	7085      	strb	r5, [r0, #2]
    fc88:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fc8a:	4621      	mov	r1, r4
}
    fc8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fc90:	f640 4035 	movw	r0, #3125	; 0xc35
    fc94:	f7ff bf88 	b.w	fba8 <bt_hci_cmd_send>
}
    fc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc9a:	bf00      	nop
    fc9c:	20008000 	.word	0x20008000
    fca0:	00024487 	.word	0x00024487
    fca4:	000244e6 	.word	0x000244e6
    fca8:	000244b5 	.word	0x000244b5

0000fcac <le_ltk_request>:
{
    fcac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    fcae:	6884      	ldr	r4, [r0, #8]
{
    fcb0:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
    fcb2:	8826      	ldrh	r6, [r4, #0]
    fcb4:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
    fcb6:	4638      	mov	r0, r7
    fcb8:	f001 fbb8 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    fcbc:	4605      	mov	r5, r0
    fcbe:	b938      	cbnz	r0, fcd0 <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fcc0:	463a      	mov	r2, r7
    fcc2:	2145      	movs	r1, #69	; 0x45
    fcc4:	4820      	ldr	r0, [pc, #128]	; (fd48 <le_ltk_request+0x9c>)
}
    fcc6:	b007      	add	sp, #28
    fcc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fccc:	f00c bdba 	b.w	1c844 <printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    fcd0:	af02      	add	r7, sp, #8
    fcd2:	f8d4 2002 	ldr.w	r2, [r4, #2]
    fcd6:	f8d4 3006 	ldr.w	r3, [r4, #6]
    fcda:	9701      	str	r7, [sp, #4]
    fcdc:	8961      	ldrh	r1, [r4, #10]
    fcde:	9100      	str	r1, [sp, #0]
    fce0:	f010 fa62 	bl	201a8 <bt_smp_request_ltk>
    fce4:	b1f8      	cbz	r0, fd26 <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    fce6:	2112      	movs	r1, #18
    fce8:	f242 001a 	movw	r0, #8218	; 0x201a
    fcec:	f7ff f842 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    fcf0:	4604      	mov	r4, r0
    fcf2:	b940      	cbnz	r0, fd06 <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
    fcf4:	2145      	movs	r1, #69	; 0x45
    fcf6:	4815      	ldr	r0, [pc, #84]	; (fd4c <le_ltk_request+0xa0>)
    fcf8:	f00c fda4 	bl	1c844 <printk>
	bt_conn_unref(conn);
    fcfc:	4628      	mov	r0, r5
    fcfe:	f001 fb71 	bl	113e4 <bt_conn_unref>
}
    fd02:	b007      	add	sp, #28
    fd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd06:	2112      	movs	r1, #18
    fd08:	3008      	adds	r0, #8
    fd0a:	f007 fd1b 	bl	17744 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    fd0e:	4639      	mov	r1, r7
    fd10:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    fd12:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    fd16:	f00e fa4d 	bl	1e1b4 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    fd1a:	4621      	mov	r1, r4
    fd1c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fd20:	f7ff ff42 	bl	fba8 <bt_hci_cmd_send>
    fd24:	e7ea      	b.n	fcfc <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    fd26:	2102      	movs	r1, #2
    fd28:	f242 001b 	movw	r0, #8219	; 0x201b
    fd2c:	f7ff f822 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    fd30:	4604      	mov	r4, r0
    fd32:	2800      	cmp	r0, #0
    fd34:	d0de      	beq.n	fcf4 <le_ltk_request+0x48>
    fd36:	2102      	movs	r1, #2
    fd38:	3008      	adds	r0, #8
    fd3a:	f007 fd03 	bl	17744 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fd3e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    fd40:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    fd42:	f242 001b 	movw	r0, #8219	; 0x201b
    fd46:	e7eb      	b.n	fd20 <le_ltk_request+0x74>
    fd48:	00023fd1 	.word	0x00023fd1
    fd4c:	0002450e 	.word	0x0002450e

0000fd50 <conn_auto_initiate>:
{
    fd50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    fd52:	7b43      	ldrb	r3, [r0, #13]
{
    fd54:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    fd56:	2b07      	cmp	r3, #7
    fd58:	d15d      	bne.n	fe16 <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    fd5a:	1d06      	adds	r6, r0, #4
    fd5c:	4630      	mov	r0, r6
    fd5e:	f00e fb3c 	bl	1e3da <atomic_get>
    fd62:	0483      	lsls	r3, r0, #18
    fd64:	d41b      	bmi.n	fd9e <conn_auto_initiate+0x4e>
    fd66:	78e3      	ldrb	r3, [r4, #3]
    fd68:	b123      	cbz	r3, fd74 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    fd6a:	4b2c      	ldr	r3, [pc, #176]	; (fe1c <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    fd6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fd70:	071d      	lsls	r5, r3, #28
    fd72:	d514      	bpl.n	fd9e <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    fd74:	2102      	movs	r1, #2
    fd76:	f242 0016 	movw	r0, #8214	; 0x2016
    fd7a:	f7fe fffb 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    fd7e:	4605      	mov	r5, r0
    fd80:	b168      	cbz	r0, fd9e <conn_auto_initiate+0x4e>
    fd82:	2102      	movs	r1, #2
    fd84:	3008      	adds	r0, #8
    fd86:	f007 fcdd 	bl	17744 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    fd8a:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fd8c:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    fd8e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fd90:	f242 0016 	movw	r0, #8214	; 0x2016
}
    fd94:	b004      	add	sp, #16
    fd96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fd9a:	f7ff bf05 	b.w	fba8 <bt_hci_cmd_send>
    fd9e:	4630      	mov	r0, r6
    fda0:	f00e fb1b 	bl	1e3da <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fda4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    fda8:	4d1c      	ldr	r5, [pc, #112]	; (fe1c <conn_auto_initiate+0xcc>)
    fdaa:	f3c0 3100 	ubfx	r1, r0, #12, #1
    fdae:	d116      	bne.n	fdde <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    fdb0:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    fdb4:	07d8      	lsls	r0, r3, #31
    fdb6:	d512      	bpl.n	fdde <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    fdb8:	2302      	movs	r3, #2
    fdba:	4620      	mov	r0, r4
    fdbc:	461a      	mov	r2, r3
    fdbe:	9100      	str	r1, [sp, #0]
    fdc0:	f00e fc62 	bl	1e688 <bt_le_set_phy>
		if (!err) {
    fdc4:	4602      	mov	r2, r0
    fdc6:	b930      	cbnz	r0, fdd6 <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fdc8:	2180      	movs	r1, #128	; 0x80
    fdca:	4630      	mov	r0, r6
}
    fdcc:	b004      	add	sp, #16
    fdce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fdd2:	f00e bb08 	b.w	1e3e6 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    fdd6:	2145      	movs	r1, #69	; 0x45
    fdd8:	4811      	ldr	r0, [pc, #68]	; (fe20 <conn_auto_initiate+0xd0>)
    fdda:	f00c fd33 	bl	1c844 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    fdde:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    fde2:	069a      	lsls	r2, r3, #26
    fde4:	d517      	bpl.n	fe16 <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    fde6:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    fdea:	689b      	ldr	r3, [r3, #8]
    fdec:	079b      	lsls	r3, r3, #30
    fdee:	d512      	bpl.n	fe16 <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    fdf0:	f10d 010e 	add.w	r1, sp, #14
    fdf4:	a803      	add	r0, sp, #12
    fdf6:	f7ff f869 	bl	eecc <hci_le_read_max_data_len>
			if (!err) {
    fdfa:	b960      	cbnz	r0, fe16 <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    fdfc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fe00:	4620      	mov	r0, r4
    fe02:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    fe06:	f00e fc22 	bl	1e64e <bt_le_set_data_len>
				if (err) {
    fe0a:	4602      	mov	r2, r0
    fe0c:	b118      	cbz	r0, fe16 <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    fe0e:	2145      	movs	r1, #69	; 0x45
    fe10:	4804      	ldr	r0, [pc, #16]	; (fe24 <conn_auto_initiate+0xd4>)
    fe12:	f00c fd17 	bl	1c844 <printk>
}
    fe16:	b004      	add	sp, #16
    fe18:	bd70      	pop	{r4, r5, r6, pc}
    fe1a:	bf00      	nop
    fe1c:	20008000 	.word	0x20008000
    fe20:	0002452a 	.word	0x0002452a
    fe24:	00024549 	.word	0x00024549

0000fe28 <le_phy_update_complete>:
{
    fe28:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fe2a:	6883      	ldr	r3, [r0, #8]
    fe2c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    fe30:	4628      	mov	r0, r5
    fe32:	f001 fafb 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    fe36:	4604      	mov	r4, r0
    fe38:	b930      	cbnz	r0, fe48 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe3a:	462a      	mov	r2, r5
}
    fe3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe40:	2145      	movs	r1, #69	; 0x45
    fe42:	480c      	ldr	r0, [pc, #48]	; (fe74 <le_phy_update_complete+0x4c>)
    fe44:	f00c bcfe 	b.w	1c844 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    fe48:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fe4a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    fe4e:	4628      	mov	r0, r5
    fe50:	f00e fae2 	bl	1e418 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fe54:	0603      	lsls	r3, r0, #24
    fe56:	d507      	bpl.n	fe68 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fe58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fe5c:	4628      	mov	r0, r5
    fe5e:	f00e fac2 	bl	1e3e6 <atomic_or>
		conn_auto_initiate(conn);
    fe62:	4620      	mov	r0, r4
    fe64:	f7ff ff74 	bl	fd50 <conn_auto_initiate>
	bt_conn_unref(conn);
    fe68:	4620      	mov	r0, r4
}
    fe6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    fe6e:	f001 bab9 	b.w	113e4 <bt_conn_unref>
    fe72:	bf00      	nop
    fe74:	00023fd1 	.word	0x00023fd1

0000fe78 <le_remote_feat_complete>:
{
    fe78:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    fe7a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fe7c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    fe80:	4630      	mov	r0, r6
    fe82:	f001 fad3 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    fe86:	4604      	mov	r4, r0
    fe88:	b930      	cbnz	r0, fe98 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe8a:	4632      	mov	r2, r6
}
    fe8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe90:	2145      	movs	r1, #69	; 0x45
    fe92:	480b      	ldr	r0, [pc, #44]	; (fec0 <le_remote_feat_complete+0x48>)
    fe94:	f00c bcd6 	b.w	1c844 <printk>
	if (!evt->status) {
    fe98:	782b      	ldrb	r3, [r5, #0]
    fe9a:	b923      	cbnz	r3, fea6 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    fe9c:	2208      	movs	r2, #8
    fe9e:	1ce9      	adds	r1, r5, #3
    fea0:	30ac      	adds	r0, #172	; 0xac
    fea2:	f00e f987 	bl	1e1b4 <memcpy>
    fea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    feaa:	1d20      	adds	r0, r4, #4
    feac:	f00e fa9b 	bl	1e3e6 <atomic_or>
	conn_auto_initiate(conn);
    feb0:	4620      	mov	r0, r4
    feb2:	f7ff ff4d 	bl	fd50 <conn_auto_initiate>
	bt_conn_unref(conn);
    feb6:	4620      	mov	r0, r4
}
    feb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    febc:	f001 ba92 	b.w	113e4 <bt_conn_unref>
    fec0:	00023fd1 	.word	0x00023fd1

0000fec4 <le_conn_param_neg_reply>:
{
    fec4:	b570      	push	{r4, r5, r6, lr}
    fec6:	4606      	mov	r6, r0
    fec8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    feca:	f242 0021 	movw	r0, #8225	; 0x2021
    fece:	2103      	movs	r1, #3
    fed0:	f7fe ff50 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    fed4:	4604      	mov	r4, r0
    fed6:	b928      	cbnz	r0, fee4 <le_conn_param_neg_reply+0x20>
}
    fed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    fedc:	2145      	movs	r1, #69	; 0x45
    fede:	4808      	ldr	r0, [pc, #32]	; (ff00 <le_conn_param_neg_reply+0x3c>)
    fee0:	f00c bcb0 	b.w	1c844 <printk>
    fee4:	2103      	movs	r1, #3
    fee6:	3008      	adds	r0, #8
    fee8:	f007 fc2c 	bl	17744 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    feec:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    feee:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fef0:	4621      	mov	r1, r4
}
    fef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fef6:	f242 0021 	movw	r0, #8225	; 0x2021
    fefa:	f7ff be55 	b.w	fba8 <bt_hci_cmd_send>
    fefe:	bf00      	nop
    ff00:	0002456a 	.word	0x0002456a

0000ff04 <le_conn_param_req>:
{
    ff04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    ff06:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ff08:	78d9      	ldrb	r1, [r3, #3]
    ff0a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    ff0c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ff0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff12:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ff16:	7959      	ldrb	r1, [r3, #5]
    ff18:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    ff1a:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ff1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff20:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    ff24:	799a      	ldrb	r2, [r3, #6]
    ff26:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    ff28:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    ff2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff2e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    ff32:	7a1a      	ldrb	r2, [r3, #8]
    ff34:	7a5b      	ldrb	r3, [r3, #9]
    ff36:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ff3a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    ff3e:	f001 fa75 	bl	1142c <bt_conn_lookup_handle>
	if (!conn) {
    ff42:	4606      	mov	r6, r0
    ff44:	b950      	cbnz	r0, ff5c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ff46:	2145      	movs	r1, #69	; 0x45
    ff48:	481c      	ldr	r0, [pc, #112]	; (ffbc <le_conn_param_req+0xb8>)
    ff4a:	4622      	mov	r2, r4
    ff4c:	f00c fc7a 	bl	1c844 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    ff50:	2102      	movs	r1, #2
    ff52:	4620      	mov	r0, r4
    ff54:	f7ff ffb6 	bl	fec4 <le_conn_param_neg_reply>
}
    ff58:	b003      	add	sp, #12
    ff5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    ff5c:	4669      	mov	r1, sp
    ff5e:	f001 f885 	bl	1106c <le_param_req>
    ff62:	b938      	cbnz	r0, ff74 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    ff64:	211e      	movs	r1, #30
    ff66:	4620      	mov	r0, r4
    ff68:	f7ff ffac 	bl	fec4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    ff6c:	4630      	mov	r0, r6
    ff6e:	f001 fa39 	bl	113e4 <bt_conn_unref>
    ff72:	e7f1      	b.n	ff58 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    ff74:	210e      	movs	r1, #14
    ff76:	f242 0020 	movw	r0, #8224	; 0x2020
    ff7a:	f7fe fefb 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
    ff7e:	4605      	mov	r5, r0
    ff80:	2800      	cmp	r0, #0
    ff82:	d0f3      	beq.n	ff6c <le_conn_param_req+0x68>
    ff84:	210e      	movs	r1, #14
    ff86:	3008      	adds	r0, #8
    ff88:	f007 fbdc 	bl	17744 <net_buf_simple_add>
    ff8c:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    ff8e:	220e      	movs	r2, #14
    ff90:	2100      	movs	r1, #0
    ff92:	f00e f93a 	bl	1e20a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ff96:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ff9a:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ff9c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ff9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    ffa2:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ffa4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    ffa6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ffaa:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    ffae:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    ffb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ffb4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ffb6:	f7ff fdf7 	bl	fba8 <bt_hci_cmd_send>
    ffba:	e7d7      	b.n	ff6c <le_conn_param_req+0x68>
    ffbc:	00023fd1 	.word	0x00023fd1

0000ffc0 <hci_tx_thread>:
{
    ffc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    ffc4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 100f0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf0>
		BT_ASSERT(err == 0);
    ffc8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 100f4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf4>
			ev_count += bt_conn_prepare_events(&events[1]);
    ffcc:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    ffd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ffd4:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    ffd6:	f36f 3310 	bfc	r3, #12, #5
    ffda:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ffde:	f001 f997 	bl	11310 <bt_conn_prepare_events>
    ffe2:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    ffe4:	f04f 32ff 	mov.w	r2, #4294967295
    ffe8:	f04f 33ff 	mov.w	r3, #4294967295
    ffec:	4631      	mov	r1, r6
    ffee:	4840      	ldr	r0, [pc, #256]	; (100f0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf0>)
    fff0:	f00c fa24 	bl	1c43c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    fff4:	b158      	cbz	r0, 1000e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe>
    fff6:	f241 4271 	movw	r2, #5233	; 0x1471
    fffa:	4649      	mov	r1, r9
    fffc:	483e      	ldr	r0, [pc, #248]	; (100f8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf8>)
    fffe:	f00c fc21 	bl	1c844 <printk>
   10002:	4040      	eors	r0, r0
   10004:	f380 8811 	msr	BASEPRI, r0
   10008:	f04f 0003 	mov.w	r0, #3
   1000c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1000e:	4d3b      	ldr	r5, [pc, #236]	; (100fc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xfc>)
{
   10010:	4f37      	ldr	r7, [pc, #220]	; (100f0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf0>)
   10012:	f105 0be8 	add.w	fp, r5, #232	; 0xe8
	for (; count; ev++, count--) {
   10016:	b916      	cbnz	r6, 1001e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1e>
	z_impl_k_yield();
   10018:	f00b f912 	bl	1b240 <z_impl_k_yield>
	while (1) {
   1001c:	e7d8      	b.n	ffd0 <hci_tx_thread+0x10>
		switch (ev->state) {
   1001e:	68fa      	ldr	r2, [r7, #12]
   10020:	f3c2 3204 	ubfx	r2, r2, #12, #5
   10024:	2a01      	cmp	r2, #1
   10026:	d953      	bls.n	100d0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd0>
   10028:	2a04      	cmp	r2, #4
   1002a:	d15b      	bne.n	100e4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe4>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1002c:	7b3b      	ldrb	r3, [r7, #12]
   1002e:	2b00      	cmp	r3, #0
   10030:	d151      	bne.n	100d6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd6>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   10032:	2200      	movs	r2, #0
   10034:	2300      	movs	r3, #0
   10036:	4832      	ldr	r0, [pc, #200]	; (10100 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x100>)
   10038:	f007 f9ec 	bl	17414 <net_buf_get>
	BT_ASSERT(buf);
   1003c:	4604      	mov	r4, r0
   1003e:	b958      	cbnz	r0, 10058 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x58>
   10040:	f241 420e 	movw	r2, #5134	; 0x140e
   10044:	4649      	mov	r1, r9
   10046:	482c      	ldr	r0, [pc, #176]	; (100f8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf8>)
   10048:	f00c fbfc 	bl	1c844 <printk>
   1004c:	4040      	eors	r0, r0
   1004e:	f380 8811 	msr	BASEPRI, r0
   10052:	f04f 0003 	mov.w	r0, #3
   10056:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10058:	f04f 33ff 	mov.w	r3, #4294967295
   1005c:	f04f 32ff 	mov.w	r2, #4294967295
   10060:	4658      	mov	r0, fp
   10062:	f00b fa6b 	bl	1b53c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   10066:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1006a:	b153      	cbz	r3, 10082 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x82>
		BT_ERR("Uncleared pending sent_cmd");
   1006c:	2145      	movs	r1, #69	; 0x45
   1006e:	4825      	ldr	r0, [pc, #148]	; (10104 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x104>)
   10070:	f00c fbe8 	bl	1c844 <printk>
		net_buf_unref(bt_dev.sent_cmd);
   10074:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   10078:	f007 fa4e 	bl	17518 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1007c:	2300      	movs	r3, #0
   1007e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
   10082:	4620      	mov	r0, r4
   10084:	f007 fa8c 	bl	175a0 <net_buf_ref>
   10088:	f8c5 0100 	str.w	r0, [r5, #256]	; 0x100
	err = bt_send(buf);
   1008c:	4620      	mov	r0, r4
   1008e:	f7ff fd83 	bl	fb98 <bt_send>
	if (err) {
   10092:	4602      	mov	r2, r0
   10094:	b1e0      	cbz	r0, 100d0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd0>
		BT_ERR("Unable to send to driver (err %d)", err);
   10096:	2145      	movs	r1, #69	; 0x45
   10098:	481b      	ldr	r0, [pc, #108]	; (10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>)
   1009a:	f00c fbd3 	bl	1c844 <printk>
	z_impl_k_sem_give(sem);
   1009e:	481b      	ldr	r0, [pc, #108]	; (1010c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10c>)
   100a0:	f00b fa10 	bl	1b4c4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   100a4:	4620      	mov	r0, r4
   100a6:	f007 f8bf 	bl	17228 <net_buf_id>
   100aa:	220c      	movs	r2, #12
   100ac:	4b18      	ldr	r3, [pc, #96]	; (10110 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x110>)
   100ae:	211f      	movs	r1, #31
   100b0:	fb02 3000 	mla	r0, r2, r0, r3
   100b4:	4622      	mov	r2, r4
   100b6:	8840      	ldrh	r0, [r0, #2]
   100b8:	f7fe fd4e 	bl	eb58 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   100bc:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   100c0:	f007 fa2a 	bl	17518 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   100c4:	2300      	movs	r3, #0
		net_buf_unref(buf);
   100c6:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   100c8:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
		net_buf_unref(buf);
   100cc:	f007 fa24 	bl	17518 <net_buf_unref>
	for (; count; ev++, count--) {
   100d0:	3714      	adds	r7, #20
   100d2:	3e01      	subs	r6, #1
   100d4:	e79f      	b.n	10016 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x16>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   100d6:	2b01      	cmp	r3, #1
   100d8:	d1fa      	bne.n	100d0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd0>
					conn = CONTAINER_OF(ev->fifo,
   100da:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   100dc:	3834      	subs	r0, #52	; 0x34
   100de:	f001 fd7f 	bl	11be0 <bt_conn_process_tx>
   100e2:	e7f5      	b.n	100d0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd0>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   100e4:	2157      	movs	r1, #87	; 0x57
   100e6:	480b      	ldr	r0, [pc, #44]	; (10114 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x114>)
   100e8:	f00c fbac 	bl	1c844 <printk>
   100ec:	e7f0      	b.n	100d0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd0>
   100ee:	bf00      	nop
   100f0:	200082c4 	.word	0x200082c4
   100f4:	000240ee 	.word	0x000240ee
   100f8:	00022c66 	.word	0x00022c66
   100fc:	20008000 	.word	0x20008000
   10100:	20008120 	.word	0x20008120
   10104:	00024589 	.word	0x00024589
   10108:	00024460 	.word	0x00024460
   1010c:	200080e8 	.word	0x200080e8
   10110:	20009be8 	.word	0x20009be8
   10114:	000245a9 	.word	0x000245a9

00010118 <hci_event_prio>:
{
   10118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1011c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1011e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   10122:	4630      	mov	r0, r6
   10124:	f010 f9ca 	bl	204bc <net_buf_simple_headroom>
	state->len = buf->len;
   10128:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1012c:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1012e:	f1b8 0f01 	cmp.w	r8, #1
   10132:	d80b      	bhi.n	1014c <hci_event_prio+0x34>
   10134:	f641 02ae 	movw	r2, #6318	; 0x18ae
   10138:	491a      	ldr	r1, [pc, #104]	; (101a4 <hci_event_prio+0x8c>)
   1013a:	481b      	ldr	r0, [pc, #108]	; (101a8 <hci_event_prio+0x90>)
   1013c:	f00c fb82 	bl	1c844 <printk>
   10140:	4040      	eors	r0, r0
   10142:	f380 8811 	msr	BASEPRI, r0
   10146:	f04f 0003 	mov.w	r0, #3
   1014a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1014c:	4630      	mov	r0, r6
   1014e:	2102      	movs	r1, #2
   10150:	f007 fada 	bl	17708 <net_buf_simple_pull_mem>
   10154:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10156:	7800      	ldrb	r0, [r0, #0]
   10158:	f00e f91e 	bl	1e398 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1015c:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1015e:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   10160:	d40b      	bmi.n	1017a <hci_event_prio+0x62>
   10162:	f641 02b2 	movw	r2, #6322	; 0x18b2
   10166:	490f      	ldr	r1, [pc, #60]	; (101a4 <hci_event_prio+0x8c>)
   10168:	480f      	ldr	r0, [pc, #60]	; (101a8 <hci_event_prio+0x90>)
   1016a:	f00c fb6b 	bl	1c844 <printk>
   1016e:	4040      	eors	r0, r0
   10170:	f380 8811 	msr	BASEPRI, r0
   10174:	f04f 0003 	mov.w	r0, #3
   10178:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1017a:	2305      	movs	r3, #5
   1017c:	4621      	mov	r1, r4
   1017e:	4a0b      	ldr	r2, [pc, #44]	; (101ac <hci_event_prio+0x94>)
   10180:	7838      	ldrb	r0, [r7, #0]
   10182:	f7fe fbe1 	bl	e948 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   10186:	07b3      	lsls	r3, r6, #30
   10188:	d507      	bpl.n	1019a <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   1018a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1018c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   10190:	fa10 f585 	uxtah	r5, r0, r5
   10194:	60a5      	str	r5, [r4, #8]
}
   10196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1019a:	4620      	mov	r0, r4
}
   1019c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   101a0:	f007 b9ba 	b.w	17518 <net_buf_unref>
   101a4:	000240ee 	.word	0x000240ee
   101a8:	00022c66 	.word	0x00022c66
   101ac:	00021fac 	.word	0x00021fac

000101b0 <bt_recv>:
{
   101b0:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   101b2:	7d02      	ldrb	r2, [r0, #20]
   101b4:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   101b6:	2a01      	cmp	r2, #1
   101b8:	d007      	beq.n	101ca <bt_recv+0x1a>
   101ba:	2a03      	cmp	r2, #3
   101bc:	d113      	bne.n	101e6 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   101be:	480f      	ldr	r0, [pc, #60]	; (101fc <bt_recv+0x4c>)
   101c0:	4629      	mov	r1, r5
   101c2:	f007 f97b 	bl	174bc <net_buf_put>
		return 0;
   101c6:	2000      	movs	r0, #0
   101c8:	e00c      	b.n	101e4 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   101ca:	6883      	ldr	r3, [r0, #8]
   101cc:	7818      	ldrb	r0, [r3, #0]
   101ce:	f00e f8e3 	bl	1e398 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   101d2:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   101d4:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   101d6:	d502      	bpl.n	101de <bt_recv+0x2e>
			hci_event_prio(buf);
   101d8:	4628      	mov	r0, r5
   101da:	f7ff ff9d 	bl	10118 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   101de:	f014 0002 	ands.w	r0, r4, #2
   101e2:	d1ec      	bne.n	101be <bt_recv+0xe>
}
   101e4:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   101e6:	2145      	movs	r1, #69	; 0x45
   101e8:	4805      	ldr	r0, [pc, #20]	; (10200 <bt_recv+0x50>)
   101ea:	f00c fb2b 	bl	1c844 <printk>
		net_buf_unref(buf);
   101ee:	4628      	mov	r0, r5
   101f0:	f007 f992 	bl	17518 <net_buf_unref>
		return -EINVAL;
   101f4:	f06f 0015 	mvn.w	r0, #21
   101f8:	e7f4      	b.n	101e4 <bt_recv+0x34>
   101fa:	bf00      	nop
   101fc:	20008104 	.word	0x20008104
   10200:	000245cf 	.word	0x000245cf

00010204 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   10204:	4a08      	ldr	r2, [pc, #32]	; (10228 <bt_hci_driver_register+0x24>)
{
   10206:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   10208:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   1020c:	b930      	cbnz	r0, 1021c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1020e:	68d9      	ldr	r1, [r3, #12]
   10210:	b139      	cbz	r1, 10222 <bt_hci_driver_register+0x1e>
   10212:	6919      	ldr	r1, [r3, #16]
   10214:	b129      	cbz	r1, 10222 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   10216:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   1021a:	4770      	bx	lr
		return -EALREADY;
   1021c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10220:	4770      	bx	lr
		return -EINVAL;
   10222:	f06f 0015 	mvn.w	r0, #21
}
   10226:	4770      	bx	lr
   10228:	20008000 	.word	0x20008000

0001022c <bt_finalize_init>:
{
   1022c:	b508      	push	{r3, lr}
   1022e:	2102      	movs	r1, #2
   10230:	4803      	ldr	r0, [pc, #12]	; (10240 <bt_finalize_init+0x14>)
   10232:	f00e f8d8 	bl	1e3e6 <atomic_or>
}
   10236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   1023a:	2000      	movs	r0, #0
   1023c:	f7ff bb12 	b.w	f864 <bt_le_scan_update>
   10240:	20008094 	.word	0x20008094

00010244 <init_work>:
{
   10244:	b510      	push	{r4, lr}
	err = bt_init();
   10246:	f7f8 fe5f 	bl	8f08 <bt_init>
	if (ready_cb) {
   1024a:	4b03      	ldr	r3, [pc, #12]	; (10258 <init_work+0x14>)
   1024c:	681b      	ldr	r3, [r3, #0]
   1024e:	b113      	cbz	r3, 10256 <init_work+0x12>
}
   10250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   10254:	4718      	bx	r3
}
   10256:	bd10      	pop	{r4, pc}
   10258:	20009c08 	.word	0x20009c08

0001025c <bt_enable>:
{
   1025c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   10260:	4d35      	ldr	r5, [pc, #212]	; (10338 <bt_enable+0xdc>)
{
   10262:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   10264:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   10268:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   1026a:	b94b      	cbnz	r3, 10280 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   1026c:	2145      	movs	r1, #69	; 0x45
   1026e:	4833      	ldr	r0, [pc, #204]	; (1033c <bt_enable+0xe0>)
   10270:	f00c fae8 	bl	1c844 <printk>
		return -ENODEV;
   10274:	f06f 0412 	mvn.w	r4, #18
}
   10278:	4620      	mov	r0, r4
   1027a:	b008      	add	sp, #32
   1027c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   10280:	2100      	movs	r1, #0
   10282:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10286:	f00e f8b9 	bl	1e3fc <atomic_test_and_set_bit>
   1028a:	2800      	cmp	r0, #0
   1028c:	d151      	bne.n	10332 <bt_enable+0xd6>
		err = bt_settings_init();
   1028e:	f7fe f8c7 	bl	e420 <bt_settings_init>
		if (err) {
   10292:	4604      	mov	r4, r0
   10294:	2800      	cmp	r0, #0
   10296:	d1ef      	bne.n	10278 <bt_enable+0x1c>
	ready_cb = cb;
   10298:	4b29      	ldr	r3, [pc, #164]	; (10340 <bt_enable+0xe4>)
   1029a:	f04f 0800 	mov.w	r8, #0
   1029e:	f04f 0900 	mov.w	r9, #0
   102a2:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   102a4:	f06f 0308 	mvn.w	r3, #8
   102a8:	e9cd 0000 	strd	r0, r0, [sp]
   102ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
   102b0:	9004      	str	r0, [sp, #16]
   102b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   102b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   102ba:	4b22      	ldr	r3, [pc, #136]	; (10344 <bt_enable+0xe8>)
   102bc:	4922      	ldr	r1, [pc, #136]	; (10348 <bt_enable+0xec>)
   102be:	4823      	ldr	r0, [pc, #140]	; (1034c <bt_enable+0xf0>)
   102c0:	f00b fa28 	bl	1b714 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   102c4:	4922      	ldr	r1, [pc, #136]	; (10350 <bt_enable+0xf4>)
   102c6:	4821      	ldr	r0, [pc, #132]	; (1034c <bt_enable+0xf0>)
   102c8:	f011 f83e 	bl	21348 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   102cc:	f06f 0307 	mvn.w	r3, #7
   102d0:	f640 0298 	movw	r2, #2200	; 0x898
   102d4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   102d8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   102dc:	e9cd 4400 	strd	r4, r4, [sp]
   102e0:	4b1c      	ldr	r3, [pc, #112]	; (10354 <bt_enable+0xf8>)
   102e2:	491d      	ldr	r1, [pc, #116]	; (10358 <bt_enable+0xfc>)
   102e4:	9404      	str	r4, [sp, #16]
   102e6:	481d      	ldr	r0, [pc, #116]	; (1035c <bt_enable+0x100>)
   102e8:	f00b fa14 	bl	1b714 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   102ec:	491c      	ldr	r1, [pc, #112]	; (10360 <bt_enable+0x104>)
   102ee:	481b      	ldr	r0, [pc, #108]	; (1035c <bt_enable+0x100>)
   102f0:	f011 f82a 	bl	21348 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   102f4:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   102f8:	68db      	ldr	r3, [r3, #12]
   102fa:	4798      	blx	r3
	if (err) {
   102fc:	4604      	mov	r4, r0
   102fe:	b128      	cbz	r0, 1030c <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   10300:	4602      	mov	r2, r0
   10302:	2145      	movs	r1, #69	; 0x45
   10304:	4817      	ldr	r0, [pc, #92]	; (10364 <bt_enable+0x108>)
   10306:	f00c fa9d 	bl	1c844 <printk>
		return err;
   1030a:	e7b5      	b.n	10278 <bt_enable+0x1c>
	if (!cb) {
   1030c:	b926      	cbnz	r6, 10318 <bt_enable+0xbc>
}
   1030e:	b008      	add	sp, #32
   10310:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   10314:	f7f8 bdf8 	b.w	8f08 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   10318:	4601      	mov	r1, r0
   1031a:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1031e:	f00e f86d 	bl	1e3fc <atomic_test_and_set_bit>
   10322:	2800      	cmp	r0, #0
   10324:	d1a8      	bne.n	10278 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   10326:	4810      	ldr	r0, [pc, #64]	; (10368 <bt_enable+0x10c>)
   10328:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1032c:	f010 ff9a 	bl	21264 <k_queue_append>
   10330:	e7a2      	b.n	10278 <bt_enable+0x1c>
		return -EALREADY;
   10332:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10336:	e79f      	b.n	10278 <bt_enable+0x1c>
   10338:	20008000 	.word	0x20008000
   1033c:	000246fb 	.word	0x000246fb
   10340:	20009c08 	.word	0x20009c08
   10344:	0000ffc1 	.word	0x0000ffc1
   10348:	2000c808 	.word	0x2000c808
   1034c:	20008870 	.word	0x20008870
   10350:	00024719 	.word	0x00024719
   10354:	0000ea35 	.word	0x0000ea35
   10358:	2000bf70 	.word	0x2000bf70
   1035c:	200087e0 	.word	0x200087e0
   10360:	0002471f 	.word	0x0002471f
   10364:	00024725 	.word	0x00024725
   10368:	20009630 	.word	0x20009630

0001036c <bt_get_name>:
}
   1036c:	4800      	ldr	r0, [pc, #0]	; (10370 <bt_get_name+0x4>)
   1036e:	4770      	bx	lr
   10370:	00022aa5 	.word	0x00022aa5

00010374 <bt_id_create>:
{
   10374:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10376:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10378:	4605      	mov	r5, r0
   1037a:	b918      	cbnz	r0, 10384 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1037c:	b314      	cbz	r4, 103c4 <bt_id_create+0x50>
		return -EINVAL;
   1037e:	f06f 0415 	mvn.w	r4, #21
   10382:	e01c      	b.n	103be <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10384:	2300      	movs	r3, #0
   10386:	4669      	mov	r1, sp
   10388:	9300      	str	r3, [sp, #0]
   1038a:	f8cd 3003 	str.w	r3, [sp, #3]
   1038e:	f00e f840 	bl	1e412 <bt_addr_le_cmp>
   10392:	2800      	cmp	r0, #0
   10394:	d0f2      	beq.n	1037c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10396:	782b      	ldrb	r3, [r5, #0]
   10398:	2b01      	cmp	r3, #1
   1039a:	d104      	bne.n	103a6 <bt_id_create+0x32>
   1039c:	79ab      	ldrb	r3, [r5, #6]
   1039e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   103a2:	2bc0      	cmp	r3, #192	; 0xc0
   103a4:	d004      	beq.n	103b0 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   103a6:	2145      	movs	r1, #69	; 0x45
   103a8:	480d      	ldr	r0, [pc, #52]	; (103e0 <bt_id_create+0x6c>)
   103aa:	f00c fa4b 	bl	1c844 <printk>
			return -EINVAL;
   103ae:	e7e6      	b.n	1037e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   103b0:	4628      	mov	r0, r5
   103b2:	f7fe f911 	bl	e5d8 <id_find>
   103b6:	2800      	cmp	r0, #0
   103b8:	dbe0      	blt.n	1037c <bt_id_create+0x8>
			return -EALREADY;
   103ba:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   103be:	4620      	mov	r0, r4
   103c0:	b003      	add	sp, #12
   103c2:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   103c4:	4b07      	ldr	r3, [pc, #28]	; (103e4 <bt_id_create+0x70>)
   103c6:	79dc      	ldrb	r4, [r3, #7]
   103c8:	2c01      	cmp	r4, #1
   103ca:	d006      	beq.n	103da <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   103cc:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   103ce:	4629      	mov	r1, r5
   103d0:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   103d2:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   103d4:	f7fe faf8 	bl	e9c8 <id_create.constprop.0>
	return new_id;
   103d8:	e7f1      	b.n	103be <bt_id_create+0x4a>
		return -ENOMEM;
   103da:	f06f 040b 	mvn.w	r4, #11
   103de:	e7ee      	b.n	103be <bt_id_create+0x4a>
   103e0:	00024746 	.word	0x00024746
   103e4:	20008000 	.word	0x20008000

000103e8 <bt_setup_public_id_addr>:
{
   103e8:	b570      	push	{r4, r5, r6, lr}
   103ea:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   103ec:	2100      	movs	r1, #0
   103ee:	f241 0009 	movw	r0, #4105	; 0x1009
   103f2:	aa01      	add	r2, sp, #4
   103f4:	f7fe fd08 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
   103f8:	4e1d      	ldr	r6, [pc, #116]	; (10470 <bt_setup_public_id_addr+0x88>)
   103fa:	4604      	mov	r4, r0
   103fc:	b138      	cbz	r0, 1040e <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   103fe:	2157      	movs	r1, #87	; 0x57
   10400:	481c      	ldr	r0, [pc, #112]	; (10474 <bt_setup_public_id_addr+0x8c>)
   10402:	f00c fa1f 	bl	1c844 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   10406:	2300      	movs	r3, #0
   10408:	71f3      	strb	r3, [r6, #7]
}
   1040a:	b006      	add	sp, #24
   1040c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1040e:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   10410:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10412:	689d      	ldr	r5, [r3, #8]
   10414:	a904      	add	r1, sp, #16
   10416:	3501      	adds	r5, #1
   10418:	9004      	str	r0, [sp, #16]
   1041a:	f8ad 0014 	strh.w	r0, [sp, #20]
   1041e:	4628      	mov	r0, r5
   10420:	f00d feb7 	bl	1e192 <memcmp>
   10424:	b918      	cbnz	r0, 1042e <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   10426:	9801      	ldr	r0, [sp, #4]
   10428:	f007 f876 	bl	17518 <net_buf_unref>
   1042c:	e7eb      	b.n	10406 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1042e:	4b12      	ldr	r3, [pc, #72]	; (10478 <bt_setup_public_id_addr+0x90>)
   10430:	2206      	movs	r2, #6
   10432:	f8d3 0007 	ldr.w	r0, [r3, #7]
   10436:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   1043a:	9002      	str	r0, [sp, #8]
   1043c:	a902      	add	r1, sp, #8
   1043e:	4628      	mov	r0, r5
   10440:	f8ad 300c 	strh.w	r3, [sp, #12]
   10444:	f00d fea5 	bl	1e192 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10448:	2800      	cmp	r0, #0
   1044a:	d0ec      	beq.n	10426 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   1044c:	4629      	mov	r1, r5
   1044e:	2206      	movs	r2, #6
   10450:	f10d 0011 	add.w	r0, sp, #17
   10454:	f00d feae 	bl	1e1b4 <memcpy>
	net_buf_unref(rsp);
   10458:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1045a:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   1045e:	f007 f85b 	bl	17518 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   10462:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   10464:	4620      	mov	r0, r4
   10466:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   10468:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   1046a:	f7fe faad 	bl	e9c8 <id_create.constprop.0>
   1046e:	e7cc      	b.n	1040a <bt_setup_public_id_addr+0x22>
   10470:	20008000 	.word	0x20008000
   10474:	00024779 	.word	0x00024779
   10478:	00021aa4 	.word	0x00021aa4

0001047c <bt_read_static_addr>:
{
   1047c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   10480:	4b1c      	ldr	r3, [pc, #112]	; (104f4 <bt_read_static_addr+0x78>)
{
   10482:	4607      	mov	r7, r0
   10484:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   10488:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1048a:	f014 0401 	ands.w	r4, r4, #1
   1048e:	d104      	bne.n	1049a <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   10490:	2157      	movs	r1, #87	; 0x57
   10492:	4819      	ldr	r0, [pc, #100]	; (104f8 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   10494:	f00c f9d6 	bl	1c844 <printk>
   10498:	e00c      	b.n	104b4 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1049a:	2100      	movs	r1, #0
   1049c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   104a0:	aa01      	add	r2, sp, #4
   104a2:	f7fe fcb1 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
   104a6:	4605      	mov	r5, r0
   104a8:	b140      	cbz	r0, 104bc <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   104aa:	2157      	movs	r1, #87	; 0x57
   104ac:	4813      	ldr	r0, [pc, #76]	; (104fc <bt_read_static_addr+0x80>)
   104ae:	f00c f9c9 	bl	1c844 <printk>
		return 0;
   104b2:	2400      	movs	r4, #0
}
   104b4:	4620      	mov	r0, r4
   104b6:	b002      	add	sp, #8
   104b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   104bc:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   104c0:	9b01      	ldr	r3, [sp, #4]
   104c2:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   104c4:	785c      	ldrb	r4, [r3, #1]
   104c6:	42b4      	cmp	r4, r6
   104c8:	bf28      	it	cs
   104ca:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   104cc:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   104ce:	42a5      	cmp	r5, r4
   104d0:	db07      	blt.n	104e2 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   104d2:	9801      	ldr	r0, [sp, #4]
   104d4:	f007 f820 	bl	17518 <net_buf_unref>
	if (!cnt) {
   104d8:	2c00      	cmp	r4, #0
   104da:	d1eb      	bne.n	104b4 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   104dc:	2157      	movs	r1, #87	; 0x57
   104de:	4808      	ldr	r0, [pc, #32]	; (10500 <bt_read_static_addr+0x84>)
   104e0:	e7d8      	b.n	10494 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   104e2:	fb08 7005 	mla	r0, r8, r5, r7
   104e6:	2216      	movs	r2, #22
   104e8:	4631      	mov	r1, r6
   104ea:	f00d fe63 	bl	1e1b4 <memcpy>
	for (i = 0; i < cnt; i++) {
   104ee:	3501      	adds	r5, #1
   104f0:	e7ed      	b.n	104ce <bt_read_static_addr+0x52>
   104f2:	bf00      	nop
   104f4:	20008000 	.word	0x20008000
   104f8:	0002479c 	.word	0x0002479c
   104fc:	000247cd 	.word	0x000247cd
   10500:	000247f2 	.word	0x000247f2

00010504 <bt_setup_random_id_addr>:
{
   10504:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   10506:	4d15      	ldr	r5, [pc, #84]	; (1055c <bt_setup_random_id_addr+0x58>)
{
   10508:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   1050a:	79ec      	ldrb	r4, [r5, #7]
   1050c:	b9f4      	cbnz	r4, 1054c <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1050e:	2101      	movs	r1, #1
   10510:	a802      	add	r0, sp, #8
   10512:	f7ff ffb3 	bl	1047c <bt_read_static_addr>
   10516:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   10518:	b1c0      	cbz	r0, 1054c <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1051a:	2716      	movs	r7, #22
   1051c:	b2e6      	uxtb	r6, r4
   1051e:	ab02      	add	r3, sp, #8
   10520:	2206      	movs	r2, #6
   10522:	fb07 3106 	mla	r1, r7, r6, r3
   10526:	f10d 0001 	add.w	r0, sp, #1
   1052a:	f00d fe43 	bl	1e1b4 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1052e:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   10530:	4669      	mov	r1, sp
   10532:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   10534:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   10538:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   1053a:	f7fe fa45 	bl	e9c8 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1053e:	79ea      	ldrb	r2, [r5, #7]
   10540:	b2e3      	uxtb	r3, r4
   10542:	429a      	cmp	r2, r3
   10544:	d8ea      	bhi.n	1051c <bt_setup_random_id_addr+0x18>
}
   10546:	2000      	movs	r0, #0
   10548:	b009      	add	sp, #36	; 0x24
   1054a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   1054c:	2100      	movs	r1, #0
   1054e:	4608      	mov	r0, r1
}
   10550:	b009      	add	sp, #36	; 0x24
   10552:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   10556:	f7ff bf0d 	b.w	10374 <bt_id_create>
   1055a:	bf00      	nop
   1055c:	20008000 	.word	0x20008000

00010560 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   10560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10564:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   10566:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   10568:	690d      	ldr	r5, [r1, #16]
{
   1056a:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   1056c:	ebb5 0b03 	subs.w	fp, r5, r3
{
   10570:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10572:	4884      	ldr	r0, [pc, #528]	; (10784 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   10574:	bf18      	it	ne
   10576:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   1057a:	9307      	str	r3, [sp, #28]
   1057c:	f00d ff2d 	bl	1e3da <atomic_get>
{
   10580:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10582:	0782      	lsls	r2, r0, #30
{
   10584:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10586:	f140 80ef 	bpl.w	10768 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1058a:	4608      	mov	r0, r1
   1058c:	f7fe f83c 	bl	e608 <valid_adv_param>
   10590:	4607      	mov	r7, r0
   10592:	2800      	cmp	r0, #0
   10594:	f000 80eb 	beq.w	1076e <bt_le_adv_start_legacy+0x20e>
   10598:	487a      	ldr	r0, [pc, #488]	; (10784 <bt_le_adv_start_legacy+0x224>)
   1059a:	f00d ff1e 	bl	1e3da <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   1059e:	0503      	lsls	r3, r0, #20
   105a0:	d402      	bmi.n	105a8 <bt_le_adv_start_legacy+0x48>
   105a2:	4878      	ldr	r0, [pc, #480]	; (10784 <bt_le_adv_start_legacy+0x224>)
   105a4:	f00d ff19 	bl	1e3da <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   105a8:	f106 0810 	add.w	r8, r6, #16
   105ac:	4640      	mov	r0, r8
   105ae:	f00d ff14 	bl	1e3da <atomic_get>
   105b2:	f3c0 1180 	ubfx	r1, r0, #6, #1
   105b6:	0640      	lsls	r0, r0, #25
   105b8:	f100 80dc 	bmi.w	10774 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   105bc:	220f      	movs	r2, #15
   105be:	a80a      	add	r0, sp, #40	; 0x28
   105c0:	9105      	str	r1, [sp, #20]
   105c2:	f00d fe22 	bl	1e20a <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   105c6:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   105c8:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   105ca:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   105ce:	68e3      	ldr	r3, [r4, #12]
   105d0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   105d4:	f00d fef2 	bl	1e3bc <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   105d8:	7832      	ldrb	r2, [r6, #0]
   105da:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   105dc:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   105de:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   105e0:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   105e4:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   105e8:	d004      	beq.n	105f4 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   105ea:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   105ee:	4865      	ldr	r0, [pc, #404]	; (10784 <bt_le_adv_start_legacy+0x224>)
   105f0:	f00d ff12 	bl	1e418 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   105f4:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   105f6:	4b64      	ldr	r3, [pc, #400]	; (10788 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   105f8:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   105fa:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   105fe:	465a      	mov	r2, fp
   10600:	6861      	ldr	r1, [r4, #4]
   10602:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   10606:	f7fe fd17 	bl	f038 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   1060a:	4683      	mov	fp, r0
   1060c:	2800      	cmp	r0, #0
   1060e:	d169      	bne.n	106e4 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10610:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   10614:	2d00      	cmp	r5, #0
   10616:	d042      	beq.n	1069e <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10618:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1061a:	f00d fee1 	bl	1e3e0 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1061e:	6860      	ldr	r0, [r4, #4]
   10620:	07c1      	lsls	r1, r0, #31
   10622:	d544      	bpl.n	106ae <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   10624:	2d00      	cmp	r5, #0
   10626:	d03f      	beq.n	106a8 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   10628:	f010 0f10 	tst.w	r0, #16
   1062c:	bf14      	ite	ne
   1062e:	2304      	movne	r3, #4
   10630:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   10632:	6921      	ldr	r1, [r4, #16]
   10634:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   10638:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1063c:	f00d fed0 	bl	1e3e0 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   10640:	210f      	movs	r1, #15
   10642:	f242 0006 	movw	r0, #8198	; 0x2006
   10646:	f7fe fb95 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   1064a:	4683      	mov	fp, r0
   1064c:	2800      	cmp	r0, #0
   1064e:	f000 8094 	beq.w	1077a <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10652:	220f      	movs	r2, #15
   10654:	a90a      	add	r1, sp, #40	; 0x28
   10656:	3008      	adds	r0, #8
   10658:	f00f ff3c 	bl	204d4 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1065c:	2200      	movs	r2, #0
   1065e:	4659      	mov	r1, fp
   10660:	f242 0006 	movw	r0, #8198	; 0x2006
   10664:	f7fe fbd0 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
   10668:	2800      	cmp	r0, #0
   1066a:	f040 8089 	bne.w	10780 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   1066e:	b34d      	cbz	r5, 106c4 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   10670:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10672:	07da      	lsls	r2, r3, #31
   10674:	d43a      	bmi.n	106ec <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   10676:	2101      	movs	r1, #1
   10678:	4630      	mov	r0, r6
   1067a:	f7fe fc75 	bl	ef68 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   1067e:	4683      	mov	fp, r0
   10680:	2800      	cmp	r0, #0
   10682:	d06a      	beq.n	1075a <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   10684:	4841      	ldr	r0, [pc, #260]	; (1078c <bt_le_adv_start_legacy+0x22c>)
   10686:	2145      	movs	r1, #69	; 0x45
   10688:	f00c f8dc 	bl	1c844 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1068c:	9807      	ldr	r0, [sp, #28]
   1068e:	b348      	cbz	r0, 106e4 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10690:	2100      	movs	r1, #0
   10692:	f000 fed3 	bl	1143c <bt_conn_set_state>
			bt_conn_unref(conn);
   10696:	9807      	ldr	r0, [sp, #28]
   10698:	f000 fea4 	bl	113e4 <bt_conn_unref>
   1069c:	e022      	b.n	106e4 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1069e:	9508      	str	r5, [sp, #32]
   106a0:	a908      	add	r1, sp, #32
   106a2:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   106a6:	e7b8      	b.n	1061a <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   106a8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   106ac:	e7c8      	b.n	10640 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   106ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
   106b0:	b933      	cbnz	r3, 106c0 <bt_le_adv_start_legacy+0x160>
   106b2:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   106b6:	f1c7 0303 	rsb	r3, r7, #3
   106ba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   106be:	e7bf      	b.n	10640 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   106c0:	2701      	movs	r7, #1
   106c2:	e7f8      	b.n	106b6 <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   106c4:	6863      	ldr	r3, [r4, #4]
   106c6:	4652      	mov	r2, sl
   106c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   106cc:	e9cd 7301 	strd	r7, r3, [sp, #4]
   106d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   106d2:	4649      	mov	r1, r9
   106d4:	9300      	str	r3, [sp, #0]
   106d6:	4630      	mov	r0, r6
   106d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   106da:	f7fe fd93 	bl	f204 <le_adv_update.constprop.0>
		if (err) {
   106de:	4683      	mov	fp, r0
   106e0:	2800      	cmp	r0, #0
   106e2:	d0c5      	beq.n	10670 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   106e4:	4658      	mov	r0, fp
   106e6:	b00f      	add	sp, #60	; 0x3c
   106e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   106ec:	4630      	mov	r0, r6
   106ee:	a907      	add	r1, sp, #28
   106f0:	f7fe f894 	bl	e81c <le_adv_start_add_conn>
		if (err) {
   106f4:	4683      	mov	fp, r0
   106f6:	2800      	cmp	r0, #0
   106f8:	d0bd      	beq.n	10676 <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   106fa:	f110 0f0c 	cmn.w	r0, #12
   106fe:	d1f1      	bne.n	106e4 <bt_le_adv_start_legacy+0x184>
   10700:	2d00      	cmp	r5, #0
   10702:	d1ef      	bne.n	106e4 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   10704:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   10706:	079b      	lsls	r3, r3, #30
   10708:	d4ec      	bmi.n	106e4 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1070a:	6860      	ldr	r0, [r4, #4]
   1070c:	f080 0002 	eor.w	r0, r0, #2
   10710:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   10714:	f00b 0201 	and.w	r2, fp, #1
   10718:	210c      	movs	r1, #12
   1071a:	4640      	mov	r0, r8
   1071c:	f00d fe87 	bl	1e42e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   10720:	6862      	ldr	r2, [r4, #4]
   10722:	2107      	movs	r1, #7
   10724:	4640      	mov	r0, r8
   10726:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1072a:	f00d fe80 	bl	1e42e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1072e:	6862      	ldr	r2, [r4, #4]
   10730:	2108      	movs	r1, #8
   10732:	4640      	mov	r0, r8
   10734:	f002 0201 	and.w	r2, r2, #1
   10738:	f00d fe79 	bl	1e42e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1073c:	463a      	mov	r2, r7
   1073e:	2109      	movs	r1, #9
   10740:	4640      	mov	r0, r8
   10742:	f00d fe74 	bl	1e42e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   10746:	6862      	ldr	r2, [r4, #4]
   10748:	210b      	movs	r1, #11
   1074a:	4640      	mov	r0, r8
   1074c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10750:	f00d fe6d 	bl	1e42e <atomic_set_bit_to>
	return 0;
   10754:	f04f 0b00 	mov.w	fp, #0
   10758:	e7c4      	b.n	106e4 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1075a:	9807      	ldr	r0, [sp, #28]
   1075c:	b108      	cbz	r0, 10762 <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   1075e:	f000 fe41 	bl	113e4 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10762:	2d00      	cmp	r5, #0
   10764:	d1d6      	bne.n	10714 <bt_le_adv_start_legacy+0x1b4>
   10766:	e7d0      	b.n	1070a <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   10768:	f06f 0b0a 	mvn.w	fp, #10
   1076c:	e7ba      	b.n	106e4 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   1076e:	f06f 0b15 	mvn.w	fp, #21
   10772:	e7b7      	b.n	106e4 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   10774:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   10778:	e7b4      	b.n	106e4 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   1077a:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   1077e:	e7b1      	b.n	106e4 <bt_le_adv_start_legacy+0x184>
   10780:	4683      	mov	fp, r0
   10782:	e7af      	b.n	106e4 <bt_le_adv_start_legacy+0x184>
   10784:	20008094 	.word	0x20008094
   10788:	20008000 	.word	0x20008000
   1078c:	00024820 	.word	0x00024820

00010790 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   10790:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   10792:	9c04      	ldr	r4, [sp, #16]
   10794:	e9cd 3400 	strd	r3, r4, [sp]
   10798:	4613      	mov	r3, r2
   1079a:	460a      	mov	r2, r1
   1079c:	4601      	mov	r1, r0
   1079e:	4802      	ldr	r0, [pc, #8]	; (107a8 <bt_le_adv_start+0x18>)
   107a0:	f7ff fede 	bl	10560 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   107a4:	b002      	add	sp, #8
   107a6:	bd10      	pop	{r4, pc}
   107a8:	20008018 	.word	0x20008018

000107ac <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   107ac:	b530      	push	{r4, r5, lr}
   107ae:	4c29      	ldr	r4, [pc, #164]	; (10854 <bt_le_adv_stop+0xa8>)
   107b0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   107b4:	b085      	sub	sp, #20
   107b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   107ba:	f00d fe2d 	bl	1e418 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   107be:	f104 0028 	add.w	r0, r4, #40	; 0x28
   107c2:	f00d fe0a 	bl	1e3da <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   107c6:	0641      	lsls	r1, r0, #25
   107c8:	d403      	bmi.n	107d2 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
   107ca:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   107cc:	4620      	mov	r0, r4
   107ce:	b005      	add	sp, #20
   107d0:	bd30      	pop	{r4, r5, pc}
   107d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   107d6:	f00d fe00 	bl	1e3da <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   107da:	05c2      	lsls	r2, r0, #23
   107dc:	d521      	bpl.n	10822 <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   107de:	2300      	movs	r3, #0
   107e0:	4669      	mov	r1, sp
   107e2:	f104 0021 	add.w	r0, r4, #33	; 0x21
   107e6:	9300      	str	r3, [sp, #0]
   107e8:	f8cd 3003 	str.w	r3, [sp, #3]
   107ec:	f00d fe11 	bl	1e412 <bt_addr_le_cmp>
   107f0:	7e25      	ldrb	r5, [r4, #24]
   107f2:	bb58      	cbnz	r0, 1084c <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   107f4:	4b18      	ldr	r3, [pc, #96]	; (10858 <bt_le_adv_stop+0xac>)
   107f6:	a902      	add	r1, sp, #8
   107f8:	889a      	ldrh	r2, [r3, #4]
   107fa:	6818      	ldr	r0, [r3, #0]
   107fc:	f8ad 200c 	strh.w	r2, [sp, #12]
   10800:	2204      	movs	r2, #4
   10802:	799b      	ldrb	r3, [r3, #6]
   10804:	9002      	str	r0, [sp, #8]
   10806:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1080a:	4628      	mov	r0, r5
   1080c:	f000 ff48 	bl	116a0 <bt_conn_lookup_state_le>
   10810:	4604      	mov	r4, r0
	if (conn) {
   10812:	b130      	cbz	r0, 10822 <bt_le_adv_stop+0x76>
		conn->err = status;
   10814:	2100      	movs	r1, #0
   10816:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10818:	f000 fe10 	bl	1143c <bt_conn_set_state>
		bt_conn_unref(conn);
   1081c:	4620      	mov	r0, r4
   1081e:	f000 fde1 	bl	113e4 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
   10822:	2100      	movs	r1, #0
   10824:	480d      	ldr	r0, [pc, #52]	; (1085c <bt_le_adv_stop+0xb0>)
   10826:	f7fe fb9f 	bl	ef68 <set_le_adv_enable_legacy>
		if (err) {
   1082a:	4604      	mov	r4, r0
   1082c:	2800      	cmp	r0, #0
   1082e:	d1cd      	bne.n	107cc <bt_le_adv_stop+0x20>
   10830:	480b      	ldr	r0, [pc, #44]	; (10860 <bt_le_adv_stop+0xb4>)
   10832:	f00d fdd2 	bl	1e3da <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10836:	0683      	lsls	r3, r0, #26
   10838:	d5c7      	bpl.n	107ca <bt_le_adv_stop+0x1e>
			set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
   1083a:	4620      	mov	r0, r4
   1083c:	f00d fe7e 	bl	1e53c <set_le_scan_enable.isra.0>
			le_set_private_addr(BT_ID_DEFAULT);
   10840:	f00d fe2e 	bl	1e4a0 <le_set_private_addr.constprop.0>
			set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
   10844:	2001      	movs	r0, #1
   10846:	f00d fe79 	bl	1e53c <set_le_scan_enable.isra.0>
   1084a:	e7bf      	b.n	107cc <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1084c:	2205      	movs	r2, #5
   1084e:	f104 0121 	add.w	r1, r4, #33	; 0x21
   10852:	e7da      	b.n	1080a <bt_le_adv_stop+0x5e>
   10854:	20008000 	.word	0x20008000
   10858:	00021aa4 	.word	0x00021aa4
   1085c:	20008018 	.word	0x20008018
   10860:	20008094 	.word	0x20008094

00010864 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   10864:	b513      	push	{r0, r1, r4, lr}
   10866:	4818      	ldr	r0, [pc, #96]	; (108c8 <bt_le_adv_resume+0x64>)
   10868:	f00d fdb7 	bl	1e3da <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1086c:	04c1      	lsls	r1, r0, #19
   1086e:	d529      	bpl.n	108c4 <bt_le_adv_resume+0x60>
   10870:	4815      	ldr	r0, [pc, #84]	; (108c8 <bt_le_adv_resume+0x64>)
   10872:	f00d fdb2 	bl	1e3da <atomic_get>
   10876:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10878:	f3c0 1480 	ubfx	r4, r0, #6, #1
   1087c:	d422      	bmi.n	108c4 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1087e:	4812      	ldr	r0, [pc, #72]	; (108c8 <bt_le_adv_resume+0x64>)
   10880:	f00d fdab 	bl	1e3da <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10884:	05c3      	lsls	r3, r0, #23
   10886:	d51d      	bpl.n	108c4 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   10888:	4810      	ldr	r0, [pc, #64]	; (108cc <bt_le_adv_resume+0x68>)
   1088a:	a901      	add	r1, sp, #4
   1088c:	f7fd ffc6 	bl	e81c <le_adv_start_add_conn>
	if (err) {
   10890:	b9c0      	cbnz	r0, 108c4 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   10892:	2101      	movs	r1, #1
   10894:	480d      	ldr	r0, [pc, #52]	; (108cc <bt_le_adv_resume+0x68>)
   10896:	f7fe fb67 	bl	ef68 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   1089a:	b150      	cbz	r0, 108b2 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1089c:	4621      	mov	r1, r4
   1089e:	9801      	ldr	r0, [sp, #4]
   108a0:	f000 fdcc 	bl	1143c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   108a4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   108a8:	4807      	ldr	r0, [pc, #28]	; (108c8 <bt_le_adv_resume+0x64>)
   108aa:	f00d fdb5 	bl	1e418 <atomic_and>
	return (old & mask) != 0;
   108ae:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   108b2:	9801      	ldr	r0, [sp, #4]
   108b4:	f000 fd96 	bl	113e4 <bt_conn_unref>
	if (persist_paused) {
   108b8:	b124      	cbz	r4, 108c4 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   108ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   108be:	4802      	ldr	r0, [pc, #8]	; (108c8 <bt_le_adv_resume+0x64>)
   108c0:	f00d fd91 	bl	1e3e6 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   108c4:	b002      	add	sp, #8
   108c6:	bd10      	pop	{r4, pc}
   108c8:	20008028 	.word	0x20008028
   108cc:	20008018 	.word	0x20008018

000108d0 <enh_conn_complete>:
{
   108d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   108d4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   108d8:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
{
   108dc:	4605      	mov	r5, r0
   108de:	4880      	ldr	r0, [pc, #512]	; (10ae0 <enh_conn_complete+0x210>)
   108e0:	f00d fd9a 	bl	1e418 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   108e4:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   108e6:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   108ea:	d504      	bpl.n	108f6 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   108ec:	2200      	movs	r2, #0
   108ee:	2002      	movs	r0, #2
   108f0:	497c      	ldr	r1, [pc, #496]	; (10ae4 <enh_conn_complete+0x214>)
   108f2:	f006 fb55 	bl	16fa0 <bt_keys_foreach>
	if (evt->status) {
   108f6:	782c      	ldrb	r4, [r5, #0]
   108f8:	2c00      	cmp	r4, #0
   108fa:	d048      	beq.n	1098e <enh_conn_complete+0xbe>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   108fc:	2c3c      	cmp	r4, #60	; 0x3c
   108fe:	d11a      	bne.n	10936 <enh_conn_complete+0x66>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10900:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10904:	4878      	ldr	r0, [pc, #480]	; (10ae8 <enh_conn_complete+0x218>)
   10906:	f00d fd87 	bl	1e418 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1090a:	2000      	movs	r0, #0
   1090c:	f7fd fffe 	bl	e90c <find_pending_connect.part.0>
		if (!conn) {
   10910:	4605      	mov	r5, r0
   10912:	b930      	cbnz	r0, 10922 <enh_conn_complete+0x52>
			BT_ERR("No pending slave connection");
   10914:	2145      	movs	r1, #69	; 0x45
   10916:	4875      	ldr	r0, [pc, #468]	; (10aec <enh_conn_complete+0x21c>)
}
   10918:	b004      	add	sp, #16
   1091a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   1091e:	f00b bf91 	b.w	1c844 <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10922:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10924:	2100      	movs	r1, #0
   10926:	f000 fd89 	bl	1143c <bt_conn_set_state>
		bt_conn_unref(conn);
   1092a:	4628      	mov	r0, r5
}
   1092c:	b004      	add	sp, #16
   1092e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10932:	f000 bd57 	b.w	113e4 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10936:	2c02      	cmp	r4, #2
   10938:	d121      	bne.n	1097e <enh_conn_complete+0xae>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1093a:	2100      	movs	r1, #0
   1093c:	2206      	movs	r2, #6
   1093e:	4608      	mov	r0, r1
   10940:	f000 feae 	bl	116a0 <bt_conn_lookup_state_le>
	if (!conn) {
   10944:	4605      	mov	r5, r0
   10946:	b948      	cbnz	r0, 1095c <enh_conn_complete+0x8c>
		BT_ERR("No pending master connection");
   10948:	2145      	movs	r1, #69	; 0x45
   1094a:	4869      	ldr	r0, [pc, #420]	; (10af0 <enh_conn_complete+0x220>)
   1094c:	f00b ff7a 	bl	1c844 <printk>
			bt_le_scan_update(false);
   10950:	2000      	movs	r0, #0
   10952:	f7fe ff87 	bl	f864 <bt_le_scan_update>
}
   10956:	b004      	add	sp, #16
   10958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1095c:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1095e:	2100      	movs	r1, #0
   10960:	f000 fd6c 	bl	1143c <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10964:	1d28      	adds	r0, r5, #4
   10966:	f00d fd38 	bl	1e3da <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1096a:	07c2      	lsls	r2, r0, #31
   1096c:	d503      	bpl.n	10976 <enh_conn_complete+0xa6>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1096e:	4621      	mov	r1, r4
   10970:	4628      	mov	r0, r5
   10972:	f000 fd63 	bl	1143c <bt_conn_set_state>
	bt_conn_unref(conn);
   10976:	4628      	mov	r0, r5
   10978:	f000 fd34 	bl	113e4 <bt_conn_unref>
   1097c:	e7e8      	b.n	10950 <enh_conn_complete+0x80>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1097e:	4622      	mov	r2, r4
   10980:	2157      	movs	r1, #87	; 0x57
   10982:	485c      	ldr	r0, [pc, #368]	; (10af4 <enh_conn_complete+0x224>)
}
   10984:	b004      	add	sp, #16
   10986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1098a:	f00b bf5b 	b.w	1c844 <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1098e:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10990:	1d2e      	adds	r6, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10992:	3b02      	subs	r3, #2
   10994:	2b01      	cmp	r3, #1
   10996:	d836      	bhi.n	10a06 <enh_conn_complete+0x136>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10998:	4631      	mov	r1, r6
   1099a:	a802      	add	r0, sp, #8
   1099c:	f00d fd20 	bl	1e3e0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   109a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   109a4:	2206      	movs	r2, #6
   109a6:	3b02      	subs	r3, #2
   109a8:	f105 0111 	add.w	r1, r5, #17
   109ac:	f10d 0001 	add.w	r0, sp, #1
   109b0:	f88d 3008 	strb.w	r3, [sp, #8]
   109b4:	f00d fbfe 	bl	1e1b4 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   109b8:	2301      	movs	r3, #1
   109ba:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   109be:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   109c0:	bba0      	cbnz	r0, 10a2c <enh_conn_complete+0x15c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   109c2:	2206      	movs	r2, #6
   109c4:	a902      	add	r1, sp, #8
   109c6:	f000 fe6b 	bl	116a0 <bt_conn_lookup_state_le>
   109ca:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   109cc:	78eb      	ldrb	r3, [r5, #3]
   109ce:	2b01      	cmp	r3, #1
   109d0:	d104      	bne.n	109dc <enh_conn_complete+0x10c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   109d2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   109d6:	4844      	ldr	r0, [pc, #272]	; (10ae8 <enh_conn_complete+0x218>)
   109d8:	f00d fd1e 	bl	1e418 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   109dc:	78eb      	ldrb	r3, [r5, #3]
   109de:	b923      	cbnz	r3, 109ea <enh_conn_complete+0x11a>
   109e0:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   109e4:	483e      	ldr	r0, [pc, #248]	; (10ae0 <enh_conn_complete+0x210>)
   109e6:	f00d fd17 	bl	1e418 <atomic_and>
	if (!conn) {
   109ea:	bb3c      	cbnz	r4, 10a3c <enh_conn_complete+0x16c>
		BT_ERR("No pending conn for peer %s",
   109ec:	4630      	mov	r0, r6
   109ee:	f7fd fc05 	bl	e1fc <bt_addr_le_str_real>
   109f2:	2145      	movs	r1, #69	; 0x45
   109f4:	4602      	mov	r2, r0
   109f6:	4840      	ldr	r0, [pc, #256]	; (10af8 <enh_conn_complete+0x228>)
   109f8:	f00b ff24 	bl	1c844 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   109fc:	211f      	movs	r1, #31
   109fe:	4640      	mov	r0, r8
   10a00:	f00d fdd9 	bl	1e5b6 <bt_hci_disconnect>
		return;
   10a04:	e7a7      	b.n	10956 <enh_conn_complete+0x86>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   10a06:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   10a08:	4631      	mov	r1, r6
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   10a0a:	2b01      	cmp	r3, #1
   10a0c:	bf04      	itt	eq
   10a0e:	4b3b      	ldreq	r3, [pc, #236]	; (10afc <enh_conn_complete+0x22c>)
   10a10:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   10a14:	4620      	mov	r0, r4
   10a16:	f00d fdc4 	bl	1e5a2 <bt_lookup_id_addr>
   10a1a:	4601      	mov	r1, r0
   10a1c:	a802      	add	r0, sp, #8
   10a1e:	f00d fcdf 	bl	1e3e0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10a22:	4631      	mov	r1, r6
   10a24:	4668      	mov	r0, sp
   10a26:	f00d fcdb 	bl	1e3e0 <bt_addr_le_copy>
   10a2a:	e7c8      	b.n	109be <enh_conn_complete+0xee>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10a2c:	2801      	cmp	r0, #1
   10a2e:	d103      	bne.n	10a38 <enh_conn_complete+0x168>
   10a30:	a802      	add	r0, sp, #8
   10a32:	f7fd ff6b 	bl	e90c <find_pending_connect.part.0>
   10a36:	e7c8      	b.n	109ca <enh_conn_complete+0xfa>
	return NULL;
   10a38:	2400      	movs	r4, #0
   10a3a:	e7c7      	b.n	109cc <enh_conn_complete+0xfc>
	conn->handle = handle;
   10a3c:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10a3e:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10a40:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10a44:	f00d fccc 	bl	1e3e0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10a48:	7e2a      	ldrb	r2, [r5, #24]
   10a4a:	7deb      	ldrb	r3, [r5, #23]
   10a4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10a50:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10a54:	7eaa      	ldrb	r2, [r5, #26]
   10a56:	7e6b      	ldrb	r3, [r5, #25]
   10a58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10a5c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10a60:	7f2a      	ldrb	r2, [r5, #28]
   10a62:	7eeb      	ldrb	r3, [r5, #27]
   10a64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10a68:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10a6a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10a6e:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10a70:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10a72:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10a74:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10a76:	d113      	bne.n	10aa0 <enh_conn_complete+0x1d0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10a78:	4669      	mov	r1, sp
   10a7a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10a7e:	f00d fcaf 	bl	1e3e0 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10a82:	7a21      	ldrb	r1, [r4, #8]
   10a84:	4d1d      	ldr	r5, [pc, #116]	; (10afc <enh_conn_complete+0x22c>)
   10a86:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10a8a:	4429      	add	r1, r5
   10a8c:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10a90:	f00d fca6 	bl	1e3e0 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10a94:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10a98:	065b      	lsls	r3, r3, #25
   10a9a:	d501      	bpl.n	10aa0 <enh_conn_complete+0x1d0>
			bt_le_adv_resume();
   10a9c:	f7ff fee2 	bl	10864 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10aa0:	78e3      	ldrb	r3, [r4, #3]
   10aa2:	b96b      	cbnz	r3, 10ac0 <enh_conn_complete+0x1f0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10aa4:	4669      	mov	r1, sp
   10aa6:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10aaa:	f00d fc99 	bl	1e3e0 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10aae:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10ab0:	4b12      	ldr	r3, [pc, #72]	; (10afc <enh_conn_complete+0x22c>)
					&bt_dev.id_addr[conn->id]);
   10ab2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10ab6:	4419      	add	r1, r3
   10ab8:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10abc:	f00d fc90 	bl	1e3e0 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10ac0:	2107      	movs	r1, #7
   10ac2:	4620      	mov	r0, r4
   10ac4:	f000 fcba 	bl	1143c <bt_conn_set_state>
	conn_auto_initiate(conn);
   10ac8:	4620      	mov	r0, r4
   10aca:	f7ff f941 	bl	fd50 <conn_auto_initiate>
	bt_conn_unref(conn);
   10ace:	4620      	mov	r0, r4
   10ad0:	f000 fc88 	bl	113e4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ad4:	78e3      	ldrb	r3, [r4, #3]
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	f47f af3d 	bne.w	10956 <enh_conn_complete+0x86>
   10adc:	e738      	b.n	10950 <enh_conn_complete+0x80>
   10ade:	bf00      	nop
   10ae0:	20008094 	.word	0x20008094
   10ae4:	0001e62f 	.word	0x0001e62f
   10ae8:	20008028 	.word	0x20008028
   10aec:	00024840 	.word	0x00024840
   10af0:	00024861 	.word	0x00024861
   10af4:	00024883 	.word	0x00024883
   10af8:	000248a1 	.word	0x000248a1
   10afc:	20008000 	.word	0x20008000

00010b00 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10b00:	b570      	push	{r4, r5, r6, lr}
   10b02:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10b04:	482e      	ldr	r0, [pc, #184]	; (10bc0 <bt_le_scan_start+0xc0>)
   10b06:	f00d fc68 	bl	1e3da <atomic_get>
   10b0a:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10b0c:	0781      	lsls	r1, r0, #30
   10b0e:	d553      	bpl.n	10bb8 <bt_le_scan_start+0xb8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10b10:	782a      	ldrb	r2, [r5, #0]
   10b12:	2a01      	cmp	r2, #1
   10b14:	d903      	bls.n	10b1e <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10b16:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10b1a:	4620      	mov	r0, r4
   10b1c:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10b1e:	686b      	ldr	r3, [r5, #4]
   10b20:	f033 030f 	bics.w	r3, r3, #15
   10b24:	d1f7      	bne.n	10b16 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10b26:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10b2a:	8928      	ldrh	r0, [r5, #8]
   10b2c:	1f03      	subs	r3, r0, #4
   10b2e:	b29b      	uxth	r3, r3
   10b30:	42a3      	cmp	r3, r4
   10b32:	d8f0      	bhi.n	10b16 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10b34:	8969      	ldrh	r1, [r5, #10]
   10b36:	1f0b      	subs	r3, r1, #4
   10b38:	b29b      	uxth	r3, r3
   10b3a:	42a3      	cmp	r3, r4
   10b3c:	d8eb      	bhi.n	10b16 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10b3e:	4288      	cmp	r0, r1
   10b40:	d3e9      	bcc.n	10b16 <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10b42:	b942      	cbnz	r2, 10b56 <bt_le_scan_start+0x56>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10b44:	2106      	movs	r1, #6
   10b46:	481e      	ldr	r0, [pc, #120]	; (10bc0 <bt_le_scan_start+0xc0>)
   10b48:	f00d fc58 	bl	1e3fc <atomic_test_and_set_bit>
   10b4c:	4603      	mov	r3, r0
   10b4e:	b138      	cbz	r0, 10b60 <bt_le_scan_start+0x60>
		return -EALREADY;
   10b50:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10b54:	e7e1      	b.n	10b1a <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10b56:	f7fe fc27 	bl	f3a8 <bt_le_scan_random_addr_check>
   10b5a:	2800      	cmp	r0, #0
   10b5c:	d1f2      	bne.n	10b44 <bt_le_scan_start+0x44>
   10b5e:	e7da      	b.n	10b16 <bt_le_scan_start+0x16>
   10b60:	4817      	ldr	r0, [pc, #92]	; (10bc0 <bt_le_scan_start+0xc0>)
   10b62:	f00d fc3a 	bl	1e3da <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10b66:	0682      	lsls	r2, r0, #26
   10b68:	d50a      	bpl.n	10b80 <bt_le_scan_start+0x80>
	return set_le_scan_enable_legacy(enable);
   10b6a:	4618      	mov	r0, r3
   10b6c:	f7fe fa28 	bl	efc0 <set_le_scan_enable_legacy>
		if (err) {
   10b70:	4604      	mov	r4, r0
   10b72:	b128      	cbz	r0, 10b80 <bt_le_scan_start+0x80>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10b74:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10b78:	4811      	ldr	r0, [pc, #68]	; (10bc0 <bt_le_scan_start+0xc0>)
   10b7a:	f00d fc4d 	bl	1e418 <atomic_and>
		return err;
   10b7e:	e7cc      	b.n	10b1a <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10b80:	686a      	ldr	r2, [r5, #4]
   10b82:	2108      	movs	r1, #8
   10b84:	480e      	ldr	r0, [pc, #56]	; (10bc0 <bt_le_scan_start+0xc0>)
   10b86:	f002 0201 	and.w	r2, r2, #1
   10b8a:	f00d fc50 	bl	1e42e <atomic_set_bit_to>
		if (param->timeout) {
   10b8e:	89ab      	ldrh	r3, [r5, #12]
   10b90:	b13b      	cbz	r3, 10ba2 <bt_le_scan_start+0xa2>
   10b92:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10b96:	480a      	ldr	r0, [pc, #40]	; (10bc0 <bt_le_scan_start+0xc0>)
   10b98:	f00d fc3e 	bl	1e418 <atomic_and>
			return -ENOTSUP;
   10b9c:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10ba0:	e7bb      	b.n	10b1a <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10ba2:	896a      	ldrh	r2, [r5, #10]
   10ba4:	8929      	ldrh	r1, [r5, #8]
   10ba6:	7828      	ldrb	r0, [r5, #0]
   10ba8:	f7fe fba0 	bl	f2ec <start_le_scan_legacy>
	if (err) {
   10bac:	4604      	mov	r4, r0
   10bae:	2800      	cmp	r0, #0
   10bb0:	d1e0      	bne.n	10b74 <bt_le_scan_start+0x74>
	scan_dev_found_cb = cb;
   10bb2:	4b04      	ldr	r3, [pc, #16]	; (10bc4 <bt_le_scan_start+0xc4>)
   10bb4:	601e      	str	r6, [r3, #0]
	return 0;
   10bb6:	e7b0      	b.n	10b1a <bt_le_scan_start+0x1a>
		return -EAGAIN;
   10bb8:	f06f 040a 	mvn.w	r4, #10
   10bbc:	e7ad      	b.n	10b1a <bt_le_scan_start+0x1a>
   10bbe:	bf00      	nop
   10bc0:	20008094 	.word	0x20008094
   10bc4:	20009c14 	.word	0x20009c14

00010bc8 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   10bc8:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10bca:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10bce:	4807      	ldr	r0, [pc, #28]	; (10bec <bt_le_scan_stop+0x24>)
   10bd0:	f00d fc22 	bl	1e418 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10bd4:	0643      	lsls	r3, r0, #25
   10bd6:	d506      	bpl.n	10be6 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   10bd8:	2000      	movs	r0, #0
   10bda:	4b05      	ldr	r3, [pc, #20]	; (10bf0 <bt_le_scan_stop+0x28>)
   10bdc:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   10bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10be2:	f7fe be3f 	b.w	f864 <bt_le_scan_update>
}
   10be6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10bea:	bd08      	pop	{r3, pc}
   10bec:	20008094 	.word	0x20008094
   10bf0:	20009c14 	.word	0x20009c14

00010bf4 <bt_le_scan_cb_register>:
	parent->next = child;
   10bf4:	2300      	movs	r3, #0
   10bf6:	6083      	str	r3, [r0, #8]
	return list->tail;
   10bf8:	4b05      	ldr	r3, [pc, #20]	; (10c10 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   10bfa:	f100 0208 	add.w	r2, r0, #8
   10bfe:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10c00:	b911      	cbnz	r1, 10c08 <bt_le_scan_cb_register+0x14>
	list->head = node;
   10c02:	e9c3 2200 	strd	r2, r2, [r3]
}
   10c06:	4770      	bx	lr
	parent->next = child;
   10c08:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10c0a:	605a      	str	r2, [r3, #4]
}
   10c0c:	4770      	bx	lr
   10c0e:	bf00      	nop
   10c10:	20009c0c 	.word	0x20009c0c

00010c14 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   10c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   10c16:	4e1b      	ldr	r6, [pc, #108]	; (10c84 <bt_pub_key_gen+0x70>)
   10c18:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
   10c1c:	f003 0306 	and.w	r3, r3, #6
   10c20:	2b06      	cmp	r3, #6
   10c22:	d007      	beq.n	10c34 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   10c24:	2157      	movs	r1, #87	; 0x57
   10c26:	4818      	ldr	r0, [pc, #96]	; (10c88 <bt_pub_key_gen+0x74>)
   10c28:	f00b fe0c 	bl	1c844 <printk>
		return -ENOTSUP;
   10c2c:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
   10c30:	4620      	mov	r0, r4
   10c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
   10c34:	4f15      	ldr	r7, [pc, #84]	; (10c8c <bt_pub_key_gen+0x78>)
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10c36:	2104      	movs	r1, #4
	new_cb->_next = pub_key_cb;
   10c38:	683b      	ldr	r3, [r7, #0]
	pub_key_cb = new_cb;
   10c3a:	6038      	str	r0, [r7, #0]
	new_cb->_next = pub_key_cb;
   10c3c:	6043      	str	r3, [r0, #4]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10c3e:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10c42:	f00d fbdb 	bl	1e3fc <atomic_test_and_set_bit>
   10c46:	4605      	mov	r5, r0
   10c48:	b9d0      	cbnz	r0, 10c80 <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10c4a:	f06f 0108 	mvn.w	r1, #8
   10c4e:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10c52:	f00d fbe1 	bl	1e418 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   10c56:	462a      	mov	r2, r5
   10c58:	4629      	mov	r1, r5
   10c5a:	f242 0025 	movw	r0, #8229	; 0x2025
   10c5e:	f7fe f8d3 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
   10c62:	4604      	mov	r4, r0
   10c64:	2800      	cmp	r0, #0
   10c66:	d0e3      	beq.n	10c30 <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
   10c68:	2145      	movs	r1, #69	; 0x45
   10c6a:	4809      	ldr	r0, [pc, #36]	; (10c90 <bt_pub_key_gen+0x7c>)
   10c6c:	f00b fdea 	bl	1c844 <printk>
   10c70:	f06f 0110 	mvn.w	r1, #16
   10c74:	f106 0094 	add.w	r0, r6, #148	; 0x94
   10c78:	f00d fbce 	bl	1e418 <atomic_and>
		pub_key_cb = NULL;
   10c7c:	603d      	str	r5, [r7, #0]
		return err;
   10c7e:	e7d7      	b.n	10c30 <bt_pub_key_gen+0x1c>
		return 0;
   10c80:	2400      	movs	r4, #0
   10c82:	e7d5      	b.n	10c30 <bt_pub_key_gen+0x1c>
   10c84:	20008000 	.word	0x20008000
   10c88:	000248c2 	.word	0x000248c2
   10c8c:	20009c04 	.word	0x20009c04
   10c90:	000248e6 	.word	0x000248e6

00010c94 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
   10c94:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10c96:	4804      	ldr	r0, [pc, #16]	; (10ca8 <bt_pub_key_get+0x14>)
   10c98:	f00d fb9f 	bl	1e3da <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
   10c9c:	f010 0f08 	tst.w	r0, #8
	}

	return NULL;
}
   10ca0:	4802      	ldr	r0, [pc, #8]	; (10cac <bt_pub_key_get+0x18>)
   10ca2:	bf08      	it	eq
   10ca4:	2000      	moveq	r0, #0
   10ca6:	bd08      	pop	{r3, pc}
   10ca8:	20008094 	.word	0x20008094
   10cac:	2000b6e6 	.word	0x2000b6e6

00010cb0 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   10cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
   10cb2:	4d1c      	ldr	r5, [pc, #112]	; (10d24 <bt_dh_key_gen+0x74>)
{
   10cb4:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   10cb6:	682b      	ldr	r3, [r5, #0]
   10cb8:	428b      	cmp	r3, r1
   10cba:	d02d      	beq.n	10d18 <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10cbc:	b113      	cbz	r3, 10cc4 <bt_dh_key_gen+0x14>
		return -EBUSY;
   10cbe:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
   10cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10cc4:	4818      	ldr	r0, [pc, #96]	; (10d28 <bt_dh_key_gen+0x78>)
   10cc6:	f00d fb88 	bl	1e3da <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10cca:	06c2      	lsls	r2, r0, #27
   10ccc:	f3c0 1700 	ubfx	r7, r0, #4, #1
   10cd0:	d4f5      	bmi.n	10cbe <bt_dh_key_gen+0xe>
   10cd2:	4815      	ldr	r0, [pc, #84]	; (10d28 <bt_dh_key_gen+0x78>)
   10cd4:	f00d fb81 	bl	1e3da <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   10cd8:	0703      	lsls	r3, r0, #28
   10cda:	d520      	bpl.n	10d1e <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
   10cdc:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   10cde:	f242 0026 	movw	r0, #8230	; 0x2026
   10ce2:	2140      	movs	r1, #64	; 0x40
   10ce4:	f7fe f846 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   10ce8:	4604      	mov	r4, r0
   10cea:	b918      	cbnz	r0, 10cf4 <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
   10cec:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
   10cee:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10cf2:	e7e6      	b.n	10cc2 <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
   10cf4:	2140      	movs	r1, #64	; 0x40
   10cf6:	3008      	adds	r0, #8
   10cf8:	f006 fd24 	bl	17744 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   10cfc:	2240      	movs	r2, #64	; 0x40
   10cfe:	4631      	mov	r1, r6
   10d00:	f00d fa58 	bl	1e1b4 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   10d04:	463a      	mov	r2, r7
   10d06:	4621      	mov	r1, r4
   10d08:	f242 0026 	movw	r0, #8230	; 0x2026
   10d0c:	f7fe f87c 	bl	ee08 <bt_hci_cmd_send_sync>
	if (err) {
   10d10:	2800      	cmp	r0, #0
   10d12:	d0d6      	beq.n	10cc2 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   10d14:	602f      	str	r7, [r5, #0]
		return err;
   10d16:	e7d4      	b.n	10cc2 <bt_dh_key_gen+0x12>
		return -EALREADY;
   10d18:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10d1c:	e7d1      	b.n	10cc2 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   10d1e:	f06f 0030 	mvn.w	r0, #48	; 0x30
   10d22:	e7ce      	b.n	10cc2 <bt_dh_key_gen+0x12>
   10d24:	20009c00 	.word	0x20009c00
   10d28:	20008094 	.word	0x20008094

00010d2c <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d2e:	b08d      	sub	sp, #52	; 0x34
   10d30:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10d32:	2700      	movs	r7, #0
   10d34:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10d36:	2100      	movs	r1, #0
   10d38:	f242 0018 	movw	r0, #8216	; 0x2018
   10d3c:	aa02      	add	r2, sp, #8
   10d3e:	f7fe f863 	bl	ee08 <bt_hci_cmd_send_sync>
		if (ret) {
   10d42:	4604      	mov	r4, r0
   10d44:	bb58      	cbnz	r0, 10d9e <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   10d46:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10d48:	2208      	movs	r2, #8
   10d4a:	6899      	ldr	r1, [r3, #8]
   10d4c:	4630      	mov	r0, r6
   10d4e:	3101      	adds	r1, #1
   10d50:	f00d fa30 	bl	1e1b4 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10d54:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   10d56:	9802      	ldr	r0, [sp, #8]
   10d58:	f006 fbde 	bl	17518 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10d5c:	2f04      	cmp	r7, #4
   10d5e:	f106 0608 	add.w	r6, r6, #8
   10d62:	d1e8      	bne.n	10d36 <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   10d64:	f010 fb52 	bl	2140c <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   10d68:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   10d6c:	fba0 3206 	umull	r3, r2, r0, r6
   10d70:	fb06 2101 	mla	r1, r6, r1, r2
   10d74:	0bdb      	lsrs	r3, r3, #15
   10d76:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10d7a:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   10d7c:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10d80:	2308      	movs	r3, #8
   10d82:	2220      	movs	r2, #32
   10d84:	9300      	str	r3, [sp, #0]
   10d86:	4629      	mov	r1, r5
   10d88:	4806      	ldr	r0, [pc, #24]	; (10da4 <prng_reseed.constprop.0+0x78>)
   10d8a:	446b      	add	r3, sp
   10d8c:	f00d f8a8 	bl	1dee0 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   10d90:	b928      	cbnz	r0, 10d9e <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   10d92:	2145      	movs	r1, #69	; 0x45
   10d94:	4804      	ldr	r0, [pc, #16]	; (10da8 <prng_reseed.constprop.0+0x7c>)
   10d96:	f00b fd55 	bl	1c844 <printk>
		return -EIO;
   10d9a:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   10d9e:	4620      	mov	r0, r4
   10da0:	b00d      	add	sp, #52	; 0x34
   10da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10da4:	20008900 	.word	0x20008900
   10da8:	00024950 	.word	0x00024950

00010dac <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   10dac:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   10dae:	b570      	push	{r4, r5, r6, lr}
   10db0:	4604      	mov	r4, r0
   10db2:	460d      	mov	r5, r1
   10db4:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   10db8:	d915      	bls.n	10de6 <sys_memcpy_swap.constprop.0+0x3a>
   10dba:	42b0      	cmp	r0, r6
   10dbc:	d20a      	bcs.n	10dd4 <sys_memcpy_swap.constprop.0+0x28>
   10dbe:	490c      	ldr	r1, [pc, #48]	; (10df0 <sys_memcpy_swap.constprop.0+0x44>)
   10dc0:	480c      	ldr	r0, [pc, #48]	; (10df4 <sys_memcpy_swap.constprop.0+0x48>)
   10dc2:	f240 2217 	movw	r2, #535	; 0x217
   10dc6:	f00b fd3d 	bl	1c844 <printk>
   10dca:	f240 2117 	movw	r1, #535	; 0x217
   10dce:	4808      	ldr	r0, [pc, #32]	; (10df0 <sys_memcpy_swap.constprop.0+0x44>)
   10dd0:	f00b ffde 	bl	1cd90 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   10dd4:	4633      	mov	r3, r6
   10dd6:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   10dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   10ddc:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   10dde:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   10de2:	d1f9      	bne.n	10dd8 <sys_memcpy_swap.constprop.0+0x2c>
	}
}
   10de4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   10de6:	d0ea      	beq.n	10dbe <sys_memcpy_swap.constprop.0+0x12>
   10de8:	f100 0310 	add.w	r3, r0, #16
   10dec:	4299      	cmp	r1, r3
   10dee:	e7e5      	b.n	10dbc <sys_memcpy_swap.constprop.0+0x10>
   10df0:	0002496c 	.word	0x0002496c
   10df4:	00022c66 	.word	0x00022c66

00010df8 <prng_init>:

int prng_init(void)
{
   10df8:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10dfa:	4b13      	ldr	r3, [pc, #76]	; (10e48 <prng_init+0x50>)
   10dfc:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   10e00:	2b00      	cmp	r3, #0
   10e02:	da1d      	bge.n	10e40 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10e04:	2100      	movs	r1, #0
   10e06:	f242 0018 	movw	r0, #8216	; 0x2018
   10e0a:	aa01      	add	r2, sp, #4
   10e0c:	f7fd fffc 	bl	ee08 <bt_hci_cmd_send_sync>
	if (ret) {
   10e10:	b988      	cbnz	r0, 10e36 <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   10e12:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   10e14:	2208      	movs	r2, #8
   10e16:	6899      	ldr	r1, [r3, #8]
   10e18:	480c      	ldr	r0, [pc, #48]	; (10e4c <prng_init+0x54>)
   10e1a:	3101      	adds	r1, #1
   10e1c:	f00d f840 	bl	1dea0 <tc_hmac_prng_init>
   10e20:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   10e22:	9801      	ldr	r0, [sp, #4]
   10e24:	f006 fb78 	bl	17518 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   10e28:	b93c      	cbnz	r4, 10e3a <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   10e2a:	4809      	ldr	r0, [pc, #36]	; (10e50 <prng_init+0x58>)
   10e2c:	2145      	movs	r1, #69	; 0x45
   10e2e:	f00b fd09 	bl	1c844 <printk>
		return -EIO;
   10e32:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   10e36:	b002      	add	sp, #8
   10e38:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   10e3a:	f7ff ff77 	bl	10d2c <prng_reseed.constprop.0>
   10e3e:	e7fa      	b.n	10e36 <prng_init+0x3e>
		return -ENOTSUP;
   10e40:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10e44:	e7f7      	b.n	10e36 <prng_init+0x3e>
   10e46:	bf00      	nop
   10e48:	20008000 	.word	0x20008000
   10e4c:	20008900 	.word	0x20008900
   10e50:	00024997 	.word	0x00024997

00010e54 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   10e54:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   10e56:	4a0a      	ldr	r2, [pc, #40]	; (10e80 <bt_rand+0x2c>)
{
   10e58:	4604      	mov	r4, r0
   10e5a:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   10e5c:	f00d f859 	bl	1df12 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   10e60:	1c43      	adds	r3, r0, #1
   10e62:	d107      	bne.n	10e74 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   10e64:	f7ff ff62 	bl	10d2c <prng_reseed.constprop.0>
		if (ret) {
   10e68:	b948      	cbnz	r0, 10e7e <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   10e6a:	4629      	mov	r1, r5
   10e6c:	4620      	mov	r0, r4
   10e6e:	4a04      	ldr	r2, [pc, #16]	; (10e80 <bt_rand+0x2c>)
   10e70:	f00d f84f 	bl	1df12 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   10e74:	2801      	cmp	r0, #1
   10e76:	bf14      	ite	ne
   10e78:	f06f 0004 	mvnne.w	r0, #4
   10e7c:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   10e7e:	bd38      	pop	{r3, r4, r5, pc}
   10e80:	20008900 	.word	0x20008900

00010e84 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10e84:	2300      	movs	r3, #0
{
   10e86:	4601      	mov	r1, r0
	tx->user_data = NULL;
   10e88:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   10e8c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   10e8e:	4801      	ldr	r0, [pc, #4]	; (10e94 <tx_free+0x10>)
   10e90:	f010 b9e8 	b.w	21264 <k_queue_append>
   10e94:	20008578 	.word	0x20008578

00010e98 <notify_connected>:
{
   10e98:	b538      	push	{r3, r4, r5, lr}
   10e9a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   10e9c:	4b08      	ldr	r3, [pc, #32]	; (10ec0 <notify_connected+0x28>)
   10e9e:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   10ea0:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
   10ea2:	b92d      	cbnz	r5, 10eb0 <notify_connected+0x18>
	if (!conn->err) {
   10ea4:	b951      	cbnz	r1, 10ebc <notify_connected+0x24>
		bt_gatt_connected(conn);
   10ea6:	4620      	mov	r0, r4
}
   10ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   10eac:	f004 b85a 	b.w	14f64 <bt_gatt_connected>
		if (cb->connected) {
   10eb0:	682b      	ldr	r3, [r5, #0]
   10eb2:	b10b      	cbz	r3, 10eb8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   10eb4:	4620      	mov	r0, r4
   10eb6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10eb8:	69ad      	ldr	r5, [r5, #24]
   10eba:	e7f1      	b.n	10ea0 <notify_connected+0x8>
}
   10ebc:	bd38      	pop	{r3, r4, r5, pc}
   10ebe:	bf00      	nop
   10ec0:	20009c1c 	.word	0x20009c1c

00010ec4 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   10ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ec8:	4604      	mov	r4, r0
   10eca:	460e      	mov	r6, r1
   10ecc:	4691      	mov	r9, r2
   10ece:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10ed0:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   10ed2:	f04f 33ff 	mov.w	r3, #4294967295
   10ed6:	f04f 32ff 	mov.w	r2, #4294967295
   10eda:	4847      	ldr	r0, [pc, #284]	; (10ff8 <send_frag+0x134>)
   10edc:	f00a fb2e 	bl	1b53c <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   10ee0:	7b63      	ldrb	r3, [r4, #13]
   10ee2:	2b07      	cmp	r3, #7
   10ee4:	d14b      	bne.n	10f7e <send_frag+0xba>
	__asm__ volatile(
   10ee6:	f04f 0320 	mov.w	r3, #32
   10eea:	f3ef 8211 	mrs	r2, BASEPRI
   10eee:	f383 8811 	msr	BASEPRI, r3
   10ef2:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   10ef6:	69a3      	ldr	r3, [r4, #24]
   10ef8:	2d00      	cmp	r5, #0
   10efa:	d052      	beq.n	10fa2 <send_frag+0xde>
	parent->next = child;
   10efc:	2100      	movs	r1, #0
   10efe:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   10f00:	2b00      	cmp	r3, #0
   10f02:	d14b      	bne.n	10f9c <send_frag+0xd8>
	list->head = node;
   10f04:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   10f08:	f382 8811 	msr	BASEPRI, r2
   10f0c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   10f10:	2104      	movs	r1, #4
   10f12:	f106 0008 	add.w	r0, r6, #8
   10f16:	f006 fbbd 	bl	17694 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10f1a:	8823      	ldrh	r3, [r4, #0]
   10f1c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   10f20:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10f24:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10f26:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10f2a:	3b04      	subs	r3, #4
   10f2c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10f2e:	2302      	movs	r3, #2
	return bt_send(buf);
   10f30:	4630      	mov	r0, r6
   10f32:	7533      	strb	r3, [r6, #20]
   10f34:	f7fe fe30 	bl	fb98 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   10f38:	4602      	mov	r2, r0
   10f3a:	2800      	cmp	r0, #0
   10f3c:	d059      	beq.n	10ff2 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   10f3e:	2145      	movs	r1, #69	; 0x45
   10f40:	482e      	ldr	r0, [pc, #184]	; (10ffc <send_frag+0x138>)
   10f42:	f00b fc7f 	bl	1c844 <printk>
	__asm__ volatile(
   10f46:	f04f 0320 	mov.w	r3, #32
   10f4a:	f3ef 8911 	mrs	r9, BASEPRI
   10f4e:	f383 8811 	msr	BASEPRI, r3
   10f52:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   10f56:	2d00      	cmp	r5, #0
   10f58:	d037      	beq.n	10fca <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10f5a:	2200      	movs	r2, #0
	return list->head;
   10f5c:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10f5e:	b153      	cbz	r3, 10f76 <send_frag+0xb2>
   10f60:	429d      	cmp	r5, r3
   10f62:	d12f      	bne.n	10fc4 <send_frag+0x100>
	return node->next;
   10f64:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   10f66:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   10f68:	bb3a      	cbnz	r2, 10fba <send_frag+0xf6>
   10f6a:	42a9      	cmp	r1, r5
	list->head = node;
   10f6c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   10f6e:	d100      	bne.n	10f72 <send_frag+0xae>
	list->tail = node;
   10f70:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   10f72:	2300      	movs	r3, #0
   10f74:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   10f76:	f389 8811 	msr	BASEPRI, r9
   10f7a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   10f7e:	481e      	ldr	r0, [pc, #120]	; (10ff8 <send_frag+0x134>)
   10f80:	f00a faa0 	bl	1b4c4 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   10f84:	b115      	cbz	r5, 10f8c <send_frag+0xc8>
		tx_free(tx);
   10f86:	4628      	mov	r0, r5
   10f88:	f7ff ff7c 	bl	10e84 <tx_free>
	}

	if (always_consume) {
   10f8c:	b11f      	cbz	r7, 10f96 <send_frag+0xd2>
		net_buf_unref(buf);
   10f8e:	4630      	mov	r0, r6
   10f90:	f006 fac2 	bl	17518 <net_buf_unref>
	}
	return false;
   10f94:	2700      	movs	r7, #0
}
   10f96:	4638      	mov	r0, r7
   10f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10f9c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10f9e:	61a5      	str	r5, [r4, #24]
}
   10fa0:	e7b2      	b.n	10f08 <send_frag+0x44>
		if (tail_tx) {
   10fa2:	b133      	cbz	r3, 10fb2 <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   10fa4:	f103 080c 	add.w	r8, r3, #12
   10fa8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   10faa:	3301      	adds	r3, #1
   10fac:	f8c8 3000 	str.w	r3, [r8]
   10fb0:	e7aa      	b.n	10f08 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   10fb2:	69e3      	ldr	r3, [r4, #28]
   10fb4:	f104 081c 	add.w	r8, r4, #28
   10fb8:	e7f7      	b.n	10faa <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   10fba:	42a9      	cmp	r1, r5
	parent->next = child;
   10fbc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10fbe:	bf08      	it	eq
   10fc0:	61a2      	streq	r2, [r4, #24]
}
   10fc2:	e7d6      	b.n	10f72 <send_frag+0xae>
	return node->next;
   10fc4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10fc6:	681b      	ldr	r3, [r3, #0]
   10fc8:	e7c9      	b.n	10f5e <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   10fca:	f8d8 3000 	ldr.w	r3, [r8]
   10fce:	b953      	cbnz	r3, 10fe6 <send_frag+0x122>
   10fd0:	490b      	ldr	r1, [pc, #44]	; (11000 <send_frag+0x13c>)
   10fd2:	480c      	ldr	r0, [pc, #48]	; (11004 <send_frag+0x140>)
   10fd4:	f240 4292 	movw	r2, #1170	; 0x492
   10fd8:	f00b fc34 	bl	1c844 <printk>
   10fdc:	f240 4192 	movw	r1, #1170	; 0x492
   10fe0:	4807      	ldr	r0, [pc, #28]	; (11000 <send_frag+0x13c>)
   10fe2:	f00b fed5 	bl	1cd90 <assert_post_action>
			(*pending_no_cb)--;
   10fe6:	f8d8 3000 	ldr.w	r3, [r8]
   10fea:	3b01      	subs	r3, #1
   10fec:	f8c8 3000 	str.w	r3, [r8]
   10ff0:	e7c1      	b.n	10f76 <send_frag+0xb2>
	return true;
   10ff2:	2701      	movs	r7, #1
   10ff4:	e7cf      	b.n	10f96 <send_frag+0xd2>
   10ff6:	bf00      	nop
   10ff8:	200080c8 	.word	0x200080c8
   10ffc:	00024460 	.word	0x00024460
   11000:	000249c0 	.word	0x000249c0
   11004:	00022c66 	.word	0x00022c66

00011008 <bt_conn_get_pkts>:
}
   11008:	4800      	ldr	r0, [pc, #0]	; (1100c <bt_conn_get_pkts+0x4>)
   1100a:	4770      	bx	lr
   1100c:	200080c8 	.word	0x200080c8

00011010 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11010:	1d03      	adds	r3, r0, #4
{
   11012:	b570      	push	{r4, r5, r6, lr}
   11014:	4604      	mov	r4, r0
   11016:	4618      	mov	r0, r3
   11018:	f00d fbca 	bl	1e7b0 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1101c:	0582      	lsls	r2, r0, #22
   1101e:	d512      	bpl.n	11046 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   11020:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11024:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   11028:	4291      	cmp	r1, r2
   1102a:	d80c      	bhi.n	11046 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   1102c:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   11030:	4291      	cmp	r1, r2
   11032:	d308      	bcc.n	11046 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   11034:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   11038:	4291      	cmp	r1, r2
   1103a:	d104      	bne.n	11046 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1103c:	f46f 7100 	mvn.w	r1, #512	; 0x200
   11040:	4618      	mov	r0, r3
   11042:	f00d fbb8 	bl	1e7b6 <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
   11046:	4b08      	ldr	r3, [pc, #32]	; (11068 <notify_le_param_updated+0x58>)
   11048:	681d      	ldr	r5, [r3, #0]
   1104a:	b905      	cbnz	r5, 1104e <notify_le_param_updated+0x3e>
}
   1104c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1104e:	68ee      	ldr	r6, [r5, #12]
   11050:	b13e      	cbz	r6, 11062 <notify_le_param_updated+0x52>
			cb->le_param_updated(conn, conn->le.interval,
   11052:	4620      	mov	r0, r4
   11054:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   11058:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1105c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   11060:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   11062:	69ad      	ldr	r5, [r5, #24]
   11064:	e7f1      	b.n	1104a <notify_le_param_updated+0x3a>
   11066:	bf00      	nop
   11068:	20009c1c 	.word	0x20009c1c

0001106c <le_param_req>:
{
   1106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1106e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   11070:	4608      	mov	r0, r1
{
   11072:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11074:	f00d faba 	bl	1e5ec <bt_le_conn_params_valid>
   11078:	4604      	mov	r4, r0
   1107a:	b910      	cbnz	r0, 11082 <le_param_req+0x16>
		return false;
   1107c:	2400      	movs	r4, #0
}
   1107e:	4620      	mov	r0, r4
   11080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   11082:	4b09      	ldr	r3, [pc, #36]	; (110a8 <le_param_req+0x3c>)
   11084:	681e      	ldr	r6, [r3, #0]
   11086:	2e00      	cmp	r6, #0
   11088:	d0f9      	beq.n	1107e <le_param_req+0x12>
		if (!cb->le_param_req) {
   1108a:	68b3      	ldr	r3, [r6, #8]
   1108c:	b90b      	cbnz	r3, 11092 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1108e:	69b6      	ldr	r6, [r6, #24]
   11090:	e7f9      	b.n	11086 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   11092:	4629      	mov	r1, r5
   11094:	4638      	mov	r0, r7
   11096:	4798      	blx	r3
   11098:	2800      	cmp	r0, #0
   1109a:	d0ef      	beq.n	1107c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   1109c:	4628      	mov	r0, r5
   1109e:	f00d faa5 	bl	1e5ec <bt_le_conn_params_valid>
   110a2:	2800      	cmp	r0, #0
   110a4:	d1f3      	bne.n	1108e <le_param_req+0x22>
   110a6:	e7e9      	b.n	1107c <le_param_req+0x10>
   110a8:	20009c1c 	.word	0x20009c1c

000110ac <bt_conn_identity_resolved>:
{
   110ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   110ae:	78c3      	ldrb	r3, [r0, #3]
{
   110b0:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   110b2:	b93b      	cbnz	r3, 110c4 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   110b4:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   110b8:	4b08      	ldr	r3, [pc, #32]	; (110dc <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   110ba:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   110be:	681d      	ldr	r5, [r3, #0]
   110c0:	b91d      	cbnz	r5, 110ca <bt_conn_identity_resolved+0x1e>
}
   110c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   110c4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   110c8:	e7f6      	b.n	110b8 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   110ca:	692b      	ldr	r3, [r5, #16]
   110cc:	b11b      	cbz	r3, 110d6 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   110ce:	463a      	mov	r2, r7
   110d0:	4631      	mov	r1, r6
   110d2:	4620      	mov	r0, r4
   110d4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   110d6:	69ad      	ldr	r5, [r5, #24]
   110d8:	e7f2      	b.n	110c0 <bt_conn_identity_resolved+0x14>
   110da:	bf00      	nop
   110dc:	20009c1c 	.word	0x20009c1c

000110e0 <bt_conn_security_changed>:
{
   110e0:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   110e2:	7a43      	ldrb	r3, [r0, #9]
{
   110e4:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   110e6:	7283      	strb	r3, [r0, #10]
{
   110e8:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   110ea:	f00d fd01 	bl	1eaf0 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   110ee:	4b06      	ldr	r3, [pc, #24]	; (11108 <bt_conn_security_changed+0x28>)
   110f0:	681d      	ldr	r5, [r3, #0]
   110f2:	b905      	cbnz	r5, 110f6 <bt_conn_security_changed+0x16>
}
   110f4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   110f6:	696b      	ldr	r3, [r5, #20]
   110f8:	b11b      	cbz	r3, 11102 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   110fa:	4632      	mov	r2, r6
   110fc:	4620      	mov	r0, r4
   110fe:	7a61      	ldrb	r1, [r4, #9]
   11100:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11102:	69ad      	ldr	r5, [r5, #24]
   11104:	e7f5      	b.n	110f2 <bt_conn_security_changed+0x12>
   11106:	bf00      	nop
   11108:	20009c1c 	.word	0x20009c1c

0001110c <bt_conn_cb_register>:
	cb->_next = callback_list;
   1110c:	4b02      	ldr	r3, [pc, #8]	; (11118 <bt_conn_cb_register+0xc>)
   1110e:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   11110:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   11112:	6182      	str	r2, [r0, #24]
}
   11114:	4770      	bx	lr
   11116:	bf00      	nop
   11118:	20009c1c 	.word	0x20009c1c

0001111c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   1111c:	b570      	push	{r4, r5, r6, lr}
   1111e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   11120:	f100 0634 	add.w	r6, r0, #52	; 0x34
   11124:	2200      	movs	r2, #0
   11126:	2300      	movs	r3, #0
   11128:	4630      	mov	r0, r6
   1112a:	f006 f973 	bl	17414 <net_buf_get>
   1112e:	4605      	mov	r5, r0
   11130:	bb28      	cbnz	r0, 1117e <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   11132:	6963      	ldr	r3, [r4, #20]
   11134:	b153      	cbz	r3, 1114c <conn_cleanup+0x30>
   11136:	4916      	ldr	r1, [pc, #88]	; (11190 <conn_cleanup+0x74>)
   11138:	4816      	ldr	r0, [pc, #88]	; (11194 <conn_cleanup+0x78>)
   1113a:	f240 520c 	movw	r2, #1292	; 0x50c
   1113e:	f00b fb81 	bl	1c844 <printk>
   11142:	f240 510c 	movw	r1, #1292	; 0x50c
   11146:	4812      	ldr	r0, [pc, #72]	; (11190 <conn_cleanup+0x74>)
   11148:	f00b fe22 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1114c:	69e3      	ldr	r3, [r4, #28]
   1114e:	b153      	cbz	r3, 11166 <conn_cleanup+0x4a>
   11150:	490f      	ldr	r1, [pc, #60]	; (11190 <conn_cleanup+0x74>)
   11152:	4810      	ldr	r0, [pc, #64]	; (11194 <conn_cleanup+0x78>)
   11154:	f240 520d 	movw	r2, #1293	; 0x50d
   11158:	f00b fb74 	bl	1c844 <printk>
   1115c:	f240 510d 	movw	r1, #1293	; 0x50d
   11160:	480b      	ldr	r0, [pc, #44]	; (11190 <conn_cleanup+0x74>)
   11162:	f00b fe15 	bl	1cd90 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   11166:	4620      	mov	r0, r4
   11168:	f00d fbe8 	bl	1e93c <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1116c:	f104 0158 	add.w	r1, r4, #88	; 0x58
   11170:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   11172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11176:	2300      	movs	r3, #0
   11178:	4807      	ldr	r0, [pc, #28]	; (11198 <conn_cleanup+0x7c>)
   1117a:	f00a bc05 	b.w	1b988 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   1117e:	6968      	ldr	r0, [r5, #20]
   11180:	b108      	cbz	r0, 11186 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   11182:	f7ff fe7f 	bl	10e84 <tx_free>
		net_buf_unref(buf);
   11186:	4628      	mov	r0, r5
   11188:	f006 f9c6 	bl	17518 <net_buf_unref>
   1118c:	e7ca      	b.n	11124 <conn_cleanup+0x8>
   1118e:	bf00      	nop
   11190:	000249c0 	.word	0x000249c0
   11194:	00022c66 	.word	0x00022c66
   11198:	20009630 	.word	0x20009630

0001119c <bt_conn_recv>:
{
   1119c:	b570      	push	{r4, r5, r6, lr}
   1119e:	4616      	mov	r6, r2
   111a0:	4604      	mov	r4, r0
   111a2:	460d      	mov	r5, r1
	tx_notify(conn);
   111a4:	f00d fb1d 	bl	1e7e2 <tx_notify>
	switch (flags) {
   111a8:	2e01      	cmp	r6, #1
   111aa:	d01f      	beq.n	111ec <bt_conn_recv+0x50>
   111ac:	2e02      	cmp	r6, #2
   111ae:	d140      	bne.n	11232 <bt_conn_recv+0x96>
		if (conn->rx) {
   111b0:	6923      	ldr	r3, [r4, #16]
   111b2:	b133      	cbz	r3, 111c2 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   111b4:	4826      	ldr	r0, [pc, #152]	; (11250 <bt_conn_recv+0xb4>)
   111b6:	2145      	movs	r1, #69	; 0x45
   111b8:	f00b fb44 	bl	1c844 <printk>
			bt_conn_reset_rx_state(conn);
   111bc:	4620      	mov	r0, r4
   111be:	f00d fbbd 	bl	1e93c <bt_conn_reset_rx_state>
		conn->rx = buf;
   111c2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   111c4:	6921      	ldr	r1, [r4, #16]
   111c6:	898a      	ldrh	r2, [r1, #12]
   111c8:	2a01      	cmp	r2, #1
   111ca:	d93f      	bls.n	1124c <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   111cc:	688b      	ldr	r3, [r1, #8]
   111ce:	881b      	ldrh	r3, [r3, #0]
   111d0:	3304      	adds	r3, #4
   111d2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   111d4:	429a      	cmp	r2, r3
   111d6:	d339      	bcc.n	1124c <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   111d8:	d931      	bls.n	1123e <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   111da:	481e      	ldr	r0, [pc, #120]	; (11254 <bt_conn_recv+0xb8>)
   111dc:	2145      	movs	r1, #69	; 0x45
   111de:	f00b fb31 	bl	1c844 <printk>
		bt_conn_reset_rx_state(conn);
   111e2:	4620      	mov	r0, r4
}
   111e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   111e8:	f00d bba8 	b.w	1e93c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   111ec:	6920      	ldr	r0, [r4, #16]
   111ee:	b938      	cbnz	r0, 11200 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   111f0:	2145      	movs	r1, #69	; 0x45
   111f2:	4819      	ldr	r0, [pc, #100]	; (11258 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   111f4:	f00b fb26 	bl	1c844 <printk>
			bt_conn_reset_rx_state(conn);
   111f8:	4620      	mov	r0, r4
   111fa:	f00d fb9f 	bl	1e93c <bt_conn_reset_rx_state>
   111fe:	e001      	b.n	11204 <bt_conn_recv+0x68>
		if (!buf->len) {
   11200:	89ae      	ldrh	r6, [r5, #12]
   11202:	b926      	cbnz	r6, 1120e <bt_conn_recv+0x72>
			net_buf_unref(buf);
   11204:	4628      	mov	r0, r5
}
   11206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1120a:	f006 b985 	b.w	17518 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1120e:	3008      	adds	r0, #8
   11210:	f00f f958 	bl	204c4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   11214:	4286      	cmp	r6, r0
   11216:	d902      	bls.n	1121e <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   11218:	2145      	movs	r1, #69	; 0x45
   1121a:	4810      	ldr	r0, [pc, #64]	; (1125c <bt_conn_recv+0xc0>)
   1121c:	e7ea      	b.n	111f4 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1121e:	6920      	ldr	r0, [r4, #16]
   11220:	89aa      	ldrh	r2, [r5, #12]
   11222:	68a9      	ldr	r1, [r5, #8]
   11224:	3008      	adds	r0, #8
   11226:	f00f f955 	bl	204d4 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1122a:	4628      	mov	r0, r5
   1122c:	f006 f974 	bl	17518 <net_buf_unref>
		break;
   11230:	e7c8      	b.n	111c4 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   11232:	4632      	mov	r2, r6
   11234:	2145      	movs	r1, #69	; 0x45
   11236:	480a      	ldr	r0, [pc, #40]	; (11260 <bt_conn_recv+0xc4>)
   11238:	f00b fb04 	bl	1c844 <printk>
		bt_conn_reset_rx_state(conn);
   1123c:	e7dc      	b.n	111f8 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   1123e:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   11240:	4620      	mov	r0, r4
	conn->rx = NULL;
   11242:	6123      	str	r3, [r4, #16]
}
   11244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   11248:	f000 bed8 	b.w	11ffc <bt_l2cap_recv>
}
   1124c:	bd70      	pop	{r4, r5, r6, pc}
   1124e:	bf00      	nop
   11250:	000249f0 	.word	0x000249f0
   11254:	00024a84 	.word	0x00024a84
   11258:	00024a12 	.word	0x00024a12
   1125c:	00024a35 	.word	0x00024a35
   11260:	00024a61 	.word	0x00024a61

00011264 <bt_conn_send_cb>:
{
   11264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11268:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1126a:	7b43      	ldrb	r3, [r0, #13]
{
   1126c:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1126e:	2b07      	cmp	r3, #7
{
   11270:	460d      	mov	r5, r1
   11272:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   11274:	d009      	beq.n	1128a <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   11276:	4821      	ldr	r0, [pc, #132]	; (112fc <bt_conn_send_cb+0x98>)
   11278:	2145      	movs	r1, #69	; 0x45
   1127a:	f00b fae3 	bl	1c844 <printk>
		net_buf_unref(buf);
   1127e:	4628      	mov	r0, r5
   11280:	f006 f94a 	bl	17518 <net_buf_unref>
			return -ENOTCONN;
   11284:	f06f 0038 	mvn.w	r0, #56	; 0x38
   11288:	e01a      	b.n	112c0 <bt_conn_send_cb+0x5c>
	if (cb) {
   1128a:	2a00      	cmp	r2, #0
   1128c:	d034      	beq.n	112f8 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   1128e:	f00a f913 	bl	1b4b8 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   11292:	4b1b      	ldr	r3, [pc, #108]	; (11300 <bt_conn_send_cb+0x9c>)
   11294:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   11296:	481b      	ldr	r0, [pc, #108]	; (11304 <bt_conn_send_cb+0xa0>)
   11298:	bf07      	ittee	eq
   1129a:	2200      	moveq	r2, #0
   1129c:	2300      	moveq	r3, #0
   1129e:	f04f 32ff 	movne.w	r2, #4294967295
   112a2:	f04f 33ff 	movne.w	r3, #4294967295
   112a6:	f009 f8a1 	bl	1a3ec <z_impl_k_queue_get>
   112aa:	4604      	mov	r4, r0
		if (!tx) {
   112ac:	b950      	cbnz	r0, 112c4 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   112ae:	2145      	movs	r1, #69	; 0x45
   112b0:	4815      	ldr	r0, [pc, #84]	; (11308 <bt_conn_send_cb+0xa4>)
   112b2:	f00b fac7 	bl	1c844 <printk>
			net_buf_unref(buf);
   112b6:	4628      	mov	r0, r5
   112b8:	f006 f92e 	bl	17518 <net_buf_unref>
			return -ENOBUFS;
   112bc:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   112c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   112c4:	7b73      	ldrb	r3, [r6, #13]
   112c6:	2b07      	cmp	r3, #7
   112c8:	d00a      	beq.n	112e0 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   112ca:	2157      	movs	r1, #87	; 0x57
   112cc:	480f      	ldr	r0, [pc, #60]	; (1130c <bt_conn_send_cb+0xa8>)
   112ce:	f00b fab9 	bl	1c844 <printk>
			net_buf_unref(buf);
   112d2:	4628      	mov	r0, r5
   112d4:	f006 f920 	bl	17518 <net_buf_unref>
			tx_free(tx);
   112d8:	4620      	mov	r0, r4
   112da:	f7ff fdd3 	bl	10e84 <tx_free>
   112de:	e7d1      	b.n	11284 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   112e0:	2300      	movs	r3, #0
		tx->user_data = user_data;
   112e2:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   112e6:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   112e8:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   112ea:	f106 0034 	add.w	r0, r6, #52	; 0x34
   112ee:	4629      	mov	r1, r5
   112f0:	f006 f8e4 	bl	174bc <net_buf_put>
	return 0;
   112f4:	2000      	movs	r0, #0
   112f6:	e7e3      	b.n	112c0 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   112f8:	614a      	str	r2, [r1, #20]
   112fa:	e7f6      	b.n	112ea <bt_conn_send_cb+0x86>
   112fc:	00024aa4 	.word	0x00024aa4
   11300:	20009650 	.word	0x20009650
   11304:	20008578 	.word	0x20008578
   11308:	00024ab8 	.word	0x00024ab8
   1130c:	00024adb 	.word	0x00024adb

00011310 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   11310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   11314:	2500      	movs	r5, #0
   11316:	4b1a      	ldr	r3, [pc, #104]	; (11380 <bt_conn_prepare_events+0x70>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11318:	462a      	mov	r2, r5
   1131a:	2101      	movs	r1, #1
{
   1131c:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   1131e:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11320:	2601      	movs	r6, #1
   11322:	f00b f855 	bl	1c3d0 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   11326:	f04f 0914 	mov.w	r9, #20
   1132a:	4c16      	ldr	r4, [pc, #88]	; (11384 <bt_conn_prepare_events+0x74>)
	if (!atomic_get(&conn->ref)) {
   1132c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   11330:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   11334:	f00d fa3c 	bl	1e7b0 <atomic_get>
   11338:	b158      	cbz	r0, 11352 <bt_conn_prepare_events+0x42>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1133a:	7b63      	ldrb	r3, [r4, #13]
   1133c:	b98b      	cbnz	r3, 11362 <bt_conn_prepare_events+0x52>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1133e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11342:	1d20      	adds	r0, r4, #4
   11344:	f00d fa37 	bl	1e7b6 <atomic_and>
   11348:	0643      	lsls	r3, r0, #25
   1134a:	d50a      	bpl.n	11362 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   1134c:	4620      	mov	r0, r4
   1134e:	f7ff fee5 	bl	1111c <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11352:	3501      	adds	r5, #1
   11354:	2d03      	cmp	r5, #3
   11356:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   1135a:	d1e7      	bne.n	1132c <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   1135c:	4630      	mov	r0, r6
   1135e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   11362:	7b63      	ldrb	r3, [r4, #13]
   11364:	2b07      	cmp	r3, #7
   11366:	d1f4      	bne.n	11352 <bt_conn_prepare_events+0x42>
	k_poll_event_init(&events[0],
   11368:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1136c:	2200      	movs	r2, #0
   1136e:	2104      	movs	r1, #4
   11370:	4640      	mov	r0, r8
   11372:	f00b f82d 	bl	1c3d0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   11376:	2301      	movs	r3, #1
   11378:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   1137c:	441e      	add	r6, r3
   1137e:	e7e8      	b.n	11352 <bt_conn_prepare_events+0x42>
   11380:	20008328 	.word	0x20008328
   11384:	20008a38 	.word	0x20008a38

00011388 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   11388:	b570      	push	{r4, r5, r6, lr}
   1138a:	4606      	mov	r6, r0
   1138c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1138e:	4811      	ldr	r0, [pc, #68]	; (113d4 <bt_conn_add_le+0x4c>)
   11390:	2103      	movs	r1, #3
   11392:	f00d fa4c 	bl	1e82e <bt_conn_new>
	if (!conn) {
   11396:	4604      	mov	r4, r0
   11398:	b1c8      	cbz	r0, 113ce <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1139a:	2230      	movs	r2, #48	; 0x30
   1139c:	2100      	movs	r1, #0
   1139e:	3058      	adds	r0, #88	; 0x58
   113a0:	f00c ff33 	bl	1e20a <memset>
   113a4:	4b0c      	ldr	r3, [pc, #48]	; (113d8 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   113a6:	4a0d      	ldr	r2, [pc, #52]	; (113dc <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   113a8:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   113aa:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   113ac:	4629      	mov	r1, r5
   113ae:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   113b2:	62a3      	str	r3, [r4, #40]	; 0x28
   113b4:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   113b6:	7226      	strb	r6, [r4, #8]
   113b8:	f104 0088 	add.w	r0, r4, #136	; 0x88
   113bc:	f00c fefa 	bl	1e1b4 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   113c0:	2301      	movs	r3, #1
   113c2:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   113c4:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   113c6:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   113c8:	4b05      	ldr	r3, [pc, #20]	; (113e0 <bt_conn_add_le+0x58>)
   113ca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   113ce:	4620      	mov	r0, r4
   113d0:	bd70      	pop	{r4, r5, r6, pc}
   113d2:	bf00      	nop
   113d4:	20008a38 	.word	0x20008a38
   113d8:	00011a59 	.word	0x00011a59
   113dc:	0001e829 	.word	0x0001e829
   113e0:	00280018 	.word	0x00280018

000113e4 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   113e4:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   113e6:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   113ea:	e8d4 3fef 	ldaex	r3, [r4]
   113ee:	1e5a      	subs	r2, r3, #1
   113f0:	e8c4 2fe1 	stlex	r1, r2, [r4]
   113f4:	2900      	cmp	r1, #0
   113f6:	d1f8      	bne.n	113ea <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   113f8:	2b00      	cmp	r3, #0
   113fa:	dc0a      	bgt.n	11412 <bt_conn_unref+0x2e>
   113fc:	4909      	ldr	r1, [pc, #36]	; (11424 <bt_conn_unref+0x40>)
   113fe:	480a      	ldr	r0, [pc, #40]	; (11428 <bt_conn_unref+0x44>)
   11400:	f240 7265 	movw	r2, #1893	; 0x765
   11404:	f00b fa1e 	bl	1c844 <printk>
   11408:	f240 7165 	movw	r1, #1893	; 0x765
   1140c:	4805      	ldr	r0, [pc, #20]	; (11424 <bt_conn_unref+0x40>)
   1140e:	f00b fcbf 	bl	1cd90 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   11412:	4620      	mov	r0, r4
   11414:	f00d f9cc 	bl	1e7b0 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11418:	b918      	cbnz	r0, 11422 <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   1141a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1141e:	f7ff ba21 	b.w	10864 <bt_le_adv_resume>
}
   11422:	bd10      	pop	{r4, pc}
   11424:	000249c0 	.word	0x000249c0
   11428:	00022c66 	.word	0x00022c66

0001142c <bt_conn_lookup_handle>:
{
   1142c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1142e:	2103      	movs	r1, #3
   11430:	4801      	ldr	r0, [pc, #4]	; (11438 <bt_conn_lookup_handle+0xc>)
   11432:	f00d bac3 	b.w	1e9bc <conn_lookup_handle>
   11436:	bf00      	nop
   11438:	20008a38 	.word	0x20008a38

0001143c <bt_conn_set_state>:
{
   1143c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1143e:	7b45      	ldrb	r5, [r0, #13]
{
   11440:	4604      	mov	r4, r0
	if (conn->state == state) {
   11442:	428d      	cmp	r5, r1
{
   11444:	460e      	mov	r6, r1
	if (conn->state == state) {
   11446:	d10b      	bne.n	11460 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   11448:	2157      	movs	r1, #87	; 0x57
   1144a:	2d08      	cmp	r5, #8
   1144c:	bf96      	itet	ls
   1144e:	4b6b      	ldrls	r3, [pc, #428]	; (115fc <bt_conn_set_state+0x1c0>)
	if (conn->state == state) {
   11450:	4a6b      	ldrhi	r2, [pc, #428]	; (11600 <bt_conn_set_state+0x1c4>)
   11452:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   11456:	486b      	ldr	r0, [pc, #428]	; (11604 <bt_conn_set_state+0x1c8>)
}
   11458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   1145c:	f00b b9f2 	b.w	1c844 <printk>
	conn->state = state;
   11460:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   11462:	b165      	cbz	r5, 1147e <bt_conn_set_state+0x42>
   11464:	2d06      	cmp	r5, #6
   11466:	d00d      	beq.n	11484 <bt_conn_set_state+0x48>
	switch (conn->state) {
   11468:	7b63      	ldrb	r3, [r4, #13]
   1146a:	2b08      	cmp	r3, #8
   1146c:	f200 80c0 	bhi.w	115f0 <bt_conn_set_state+0x1b4>
   11470:	e8df f003 	tbb	[pc, r3]
   11474:	c2c20f4a 	.word	0xc2c20f4a
   11478:	2789c2c2 	.word	0x2789c2c2
   1147c:	c2          	.byte	0xc2
   1147d:	00          	.byte	0x00
		bt_conn_ref(conn);
   1147e:	f00d fa86 	bl	1e98e <bt_conn_ref>
		break;
   11482:	e7f1      	b.n	11468 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11484:	7883      	ldrb	r3, [r0, #2]
   11486:	2b01      	cmp	r3, #1
   11488:	d1ee      	bne.n	11468 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   1148a:	3058      	adds	r0, #88	; 0x58
   1148c:	f00a faec 	bl	1ba68 <k_delayed_work_cancel>
   11490:	e7ea      	b.n	11468 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   11492:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   11494:	4d5c      	ldr	r5, [pc, #368]	; (11608 <bt_conn_set_state+0x1cc>)
	__asm__ volatile(
   11496:	f04f 0320 	mov.w	r3, #32
   1149a:	f3ef 8211 	mrs	r2, BASEPRI
   1149e:	f383 8811 	msr	BASEPRI, r3
   114a2:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   114a6:	69e3      	ldr	r3, [r4, #28]
   114a8:	2b00      	cmp	r3, #0
   114aa:	f000 8082 	beq.w	115b2 <bt_conn_set_state+0x176>
			conn->pending_no_cb--;
   114ae:	3b01      	subs	r3, #1
   114b0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   114b2:	f382 8811 	msr	BASEPRI, r2
   114b6:	f3bf 8f6f 	isb	sy
   114ba:	4628      	mov	r0, r5
   114bc:	f00a f802 	bl	1b4c4 <z_impl_k_sem_give>
}
   114c0:	e7e9      	b.n	11496 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   114c2:	78a3      	ldrb	r3, [r4, #2]
   114c4:	2b04      	cmp	r3, #4
   114c6:	f000 8097 	beq.w	115f8 <bt_conn_set_state+0x1bc>
	z_impl_k_queue_init(queue);
   114ca:	f104 0034 	add.w	r0, r4, #52	; 0x34
   114ce:	f00f febc 	bl	2124a <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   114d2:	2100      	movs	r1, #0
   114d4:	484d      	ldr	r0, [pc, #308]	; (1160c <bt_conn_set_state+0x1d0>)
   114d6:	f00b f887 	bl	1c5e8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   114da:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   114dc:	4620      	mov	r0, r4
	list->tail = NULL;
   114de:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   114e2:	f000 fc99 	bl	11e18 <bt_l2cap_connected>
		notify_connected(conn);
   114e6:	4620      	mov	r0, r4
   114e8:	f7ff fcd6 	bl	10e98 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   114ec:	78e3      	ldrb	r3, [r4, #3]
   114ee:	2b01      	cmp	r3, #1
   114f0:	f040 8082 	bne.w	115f8 <bt_conn_set_state+0x1bc>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   114f4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   114f8:	2300      	movs	r3, #0
   114fa:	f104 0158 	add.w	r1, r4, #88	; 0x58
   114fe:	4844      	ldr	r0, [pc, #272]	; (11610 <bt_conn_set_state+0x1d4>)
}
   11500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11504:	f00a ba40 	b.w	1b988 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11508:	78a3      	ldrb	r3, [r4, #2]
   1150a:	2b04      	cmp	r3, #4
   1150c:	d104      	bne.n	11518 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   1150e:	4620      	mov	r0, r4
}
   11510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   11514:	f7ff bf66 	b.w	113e4 <bt_conn_unref>
		switch (old_state) {
   11518:	2d08      	cmp	r5, #8
   1151a:	d86d      	bhi.n	115f8 <bt_conn_set_state+0x1bc>
   1151c:	a301      	add	r3, pc, #4	; (adr r3, 11524 <bt_conn_set_state+0xe8>)
   1151e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   11522:	bf00      	nop
   11524:	0001157f 	.word	0x0001157f
   11528:	00011549 	.word	0x00011549
   1152c:	00011571 	.word	0x00011571
   11530:	0001150f 	.word	0x0001150f
   11534:	0001150f 	.word	0x0001150f
   11538:	00011571 	.word	0x00011571
   1153c:	00011571 	.word	0x00011571
   11540:	0001157f 	.word	0x0001157f
   11544:	0001157f 	.word	0x0001157f
			tx_notify(conn);
   11548:	4620      	mov	r0, r4
   1154a:	f00d f94a 	bl	1e7e2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1154e:	78a3      	ldrb	r3, [r4, #2]
   11550:	2b01      	cmp	r3, #1
   11552:	d103      	bne.n	1155c <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   11554:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11558:	f00a fa86 	bl	1ba68 <k_delayed_work_cancel>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1155c:	2140      	movs	r1, #64	; 0x40
   1155e:	1d20      	adds	r0, r4, #4
   11560:	f00d f934 	bl	1e7cc <atomic_or>
}
   11564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11568:	2100      	movs	r1, #0
   1156a:	4828      	ldr	r0, [pc, #160]	; (1160c <bt_conn_set_state+0x1d0>)
   1156c:	f00b b83c 	b.w	1c5e8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   11570:	7b23      	ldrb	r3, [r4, #12]
   11572:	2b00      	cmp	r3, #0
   11574:	d0cb      	beq.n	1150e <bt_conn_set_state+0xd2>
				notify_connected(conn);
   11576:	4620      	mov	r0, r4
   11578:	f7ff fc8e 	bl	10e98 <notify_connected>
   1157c:	e7c7      	b.n	1150e <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   1157e:	4632      	mov	r2, r6
   11580:	2157      	movs	r1, #87	; 0x57
   11582:	4824      	ldr	r0, [pc, #144]	; (11614 <bt_conn_set_state+0x1d8>)
   11584:	e768      	b.n	11458 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11586:	78a3      	ldrb	r3, [r4, #2]
   11588:	2b01      	cmp	r3, #1
   1158a:	d135      	bne.n	115f8 <bt_conn_set_state+0x1bc>
				K_MSEC(10 * bt_dev.create_param.timeout));
   1158c:	4b22      	ldr	r3, [pc, #136]	; (11618 <bt_conn_set_state+0x1dc>)
   1158e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11592:	8a9d      	ldrh	r5, [r3, #20]
   11594:	230a      	movs	r3, #10
   11596:	f240 30e7 	movw	r0, #999	; 0x3e7
   1159a:	2100      	movs	r1, #0
   1159c:	435d      	muls	r5, r3
   1159e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   115a2:	2300      	movs	r3, #0
   115a4:	fbc5 0106 	smlal	r0, r1, r5, r6
   115a8:	f7f7 fac0 	bl	8b2c <__aeabi_uldivmod>
   115ac:	4602      	mov	r2, r0
   115ae:	460b      	mov	r3, r1
   115b0:	e7a3      	b.n	114fa <bt_conn_set_state+0xbe>
	return list->head;
   115b2:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   115b4:	b128      	cbz	r0, 115c2 <bt_conn_set_state+0x186>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   115b6:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   115b8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   115ba:	4288      	cmp	r0, r1
	list->head = node;
   115bc:	6163      	str	r3, [r4, #20]
	list->tail = node;
   115be:	bf08      	it	eq
   115c0:	61a3      	streq	r3, [r4, #24]
   115c2:	f382 8811 	msr	BASEPRI, r2
   115c6:	f3bf 8f6f 	isb	sy
		if (!node) {
   115ca:	b1a8      	cbz	r0, 115f8 <bt_conn_set_state+0x1bc>
	__asm__ volatile(
   115cc:	f04f 0220 	mov.w	r2, #32
   115d0:	f3ef 8311 	mrs	r3, BASEPRI
   115d4:	f382 8811 	msr	BASEPRI, r2
   115d8:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   115dc:	68c2      	ldr	r2, [r0, #12]
   115de:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   115e0:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   115e2:	f383 8811 	msr	BASEPRI, r3
   115e6:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   115ea:	f7ff fc4b 	bl	10e84 <tx_free>
   115ee:	e764      	b.n	114ba <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   115f0:	4632      	mov	r2, r6
   115f2:	2157      	movs	r1, #87	; 0x57
   115f4:	4809      	ldr	r0, [pc, #36]	; (1161c <bt_conn_set_state+0x1e0>)
   115f6:	e72f      	b.n	11458 <bt_conn_set_state+0x1c>
}
   115f8:	bd70      	pop	{r4, r5, r6, pc}
   115fa:	bf00      	nop
   115fc:	00021fd4 	.word	0x00021fd4
   11600:	00024b06 	.word	0x00024b06
   11604:	00024b10 	.word	0x00024b10
   11608:	200080c8 	.word	0x200080c8
   1160c:	20008328 	.word	0x20008328
   11610:	20009630 	.word	0x20009630
   11614:	00024b26 	.word	0x00024b26
   11618:	20008000 	.word	0x20008000
   1161c:	00024b42 	.word	0x00024b42

00011620 <bt_conn_lookup_addr_le>:
{
   11620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11624:	4607      	mov	r7, r0
   11626:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11628:	2500      	movs	r5, #0
   1162a:	4e0e      	ldr	r6, [pc, #56]	; (11664 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1162c:	4630      	mov	r0, r6
   1162e:	f00d f9ae 	bl	1e98e <bt_conn_ref>
		if (!conn) {
   11632:	4604      	mov	r4, r0
   11634:	b120      	cbz	r0, 11640 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   11636:	7883      	ldrb	r3, [r0, #2]
   11638:	2b01      	cmp	r3, #1
   1163a:	d00a      	beq.n	11652 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   1163c:	f7ff fed2 	bl	113e4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11640:	3501      	adds	r5, #1
   11642:	2d03      	cmp	r5, #3
   11644:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   11648:	d1f0      	bne.n	1162c <bt_conn_lookup_addr_le+0xc>
	return NULL;
   1164a:	2400      	movs	r4, #0
}
   1164c:	4620      	mov	r0, r4
   1164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   11652:	4642      	mov	r2, r8
   11654:	4639      	mov	r1, r7
   11656:	f00d f97a 	bl	1e94e <bt_conn_is_peer_addr_le>
   1165a:	2800      	cmp	r0, #0
   1165c:	d1f6      	bne.n	1164c <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   1165e:	4620      	mov	r0, r4
   11660:	e7ec      	b.n	1163c <bt_conn_lookup_addr_le+0x1c>
   11662:	bf00      	nop
   11664:	20008a38 	.word	0x20008a38

00011668 <bt_conn_exists_le>:
{
   11668:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1166a:	f7ff ffd9 	bl	11620 <bt_conn_lookup_addr_le>
	if (conn) {
   1166e:	4604      	mov	r4, r0
   11670:	b170      	cbz	r0, 11690 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   11672:	7b43      	ldrb	r3, [r0, #13]
   11674:	2157      	movs	r1, #87	; 0x57
   11676:	2b08      	cmp	r3, #8
   11678:	bf96      	itet	ls
   1167a:	4a06      	ldrls	r2, [pc, #24]	; (11694 <bt_conn_exists_le+0x2c>)
   1167c:	4a06      	ldrhi	r2, [pc, #24]	; (11698 <bt_conn_exists_le+0x30>)
   1167e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   11682:	4806      	ldr	r0, [pc, #24]	; (1169c <bt_conn_exists_le+0x34>)
   11684:	f00b f8de 	bl	1c844 <printk>
		bt_conn_unref(conn);
   11688:	4620      	mov	r0, r4
   1168a:	f7ff feab 	bl	113e4 <bt_conn_unref>
		return true;
   1168e:	2001      	movs	r0, #1
}
   11690:	bd10      	pop	{r4, pc}
   11692:	bf00      	nop
   11694:	00021fd4 	.word	0x00021fd4
   11698:	00024b06 	.word	0x00024b06
   1169c:	00024b63 	.word	0x00024b63

000116a0 <bt_conn_lookup_state_le>:
{
   116a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   116a4:	4606      	mov	r6, r0
   116a6:	460f      	mov	r7, r1
   116a8:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   116aa:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   116ac:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   116b0:	f8df a048 	ldr.w	sl, [pc, #72]	; 116fc <bt_conn_lookup_state_le+0x5c>
   116b4:	fb09 a005 	mla	r0, r9, r5, sl
   116b8:	f00d f969 	bl	1e98e <bt_conn_ref>
		if (!conn) {
   116bc:	4604      	mov	r4, r0
   116be:	b120      	cbz	r0, 116ca <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   116c0:	7883      	ldrb	r3, [r0, #2]
   116c2:	2b01      	cmp	r3, #1
   116c4:	d006      	beq.n	116d4 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   116c6:	f00d f962 	bl	1e98e <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   116ca:	3501      	adds	r5, #1
   116cc:	2d03      	cmp	r5, #3
   116ce:	d1f1      	bne.n	116b4 <bt_conn_lookup_state_le+0x14>
	return NULL;
   116d0:	2400      	movs	r4, #0
   116d2:	e00f      	b.n	116f4 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   116d4:	b147      	cbz	r7, 116e8 <bt_conn_lookup_state_le+0x48>
   116d6:	463a      	mov	r2, r7
   116d8:	4631      	mov	r1, r6
   116da:	f00d f938 	bl	1e94e <bt_conn_is_peer_addr_le>
   116de:	b918      	cbnz	r0, 116e8 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   116e0:	4620      	mov	r0, r4
   116e2:	f7ff fe7f 	bl	113e4 <bt_conn_unref>
			continue;
   116e6:	e7f0      	b.n	116ca <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   116e8:	7b63      	ldrb	r3, [r4, #13]
   116ea:	4543      	cmp	r3, r8
   116ec:	d1f8      	bne.n	116e0 <bt_conn_lookup_state_le+0x40>
   116ee:	7a23      	ldrb	r3, [r4, #8]
   116f0:	42b3      	cmp	r3, r6
   116f2:	d1f5      	bne.n	116e0 <bt_conn_lookup_state_le+0x40>
}
   116f4:	4620      	mov	r0, r4
   116f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   116fa:	bf00      	nop
   116fc:	20008a38 	.word	0x20008a38

00011700 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   11700:	b510      	push	{r4, lr}
	info->type = conn->type;
   11702:	7882      	ldrb	r2, [r0, #2]
   11704:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   11706:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   11708:	2a01      	cmp	r2, #1
	info->role = conn->role;
   1170a:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   1170c:	7a03      	ldrb	r3, [r0, #8]
   1170e:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   11710:	d11c      	bne.n	1174c <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   11712:	f100 0288 	add.w	r2, r0, #136	; 0x88
   11716:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   11718:	4a0e      	ldr	r2, [pc, #56]	; (11754 <bt_conn_get_info+0x54>)
   1171a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1171e:	4413      	add	r3, r2
   11720:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   11722:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   11726:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1172a:	b964      	cbnz	r4, 11746 <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   1172c:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   11730:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   11734:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   11736:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   1173a:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   1173c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   11740:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   11742:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   11744:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   11746:	e9c1 2303 	strd	r2, r3, [r1, #12]
   1174a:	e7f1      	b.n	11730 <bt_conn_get_info+0x30>
	return -EINVAL;
   1174c:	f06f 0015 	mvn.w	r0, #21
   11750:	e7f8      	b.n	11744 <bt_conn_get_info+0x44>
   11752:	bf00      	nop
   11754:	20008000 	.word	0x20008000

00011758 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   11758:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1175c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1175e:	4850      	ldr	r0, [pc, #320]	; (118a0 <bt_conn_le_create+0x148>)
   11760:	f00d f826 	bl	1e7b0 <atomic_get>
   11764:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11766:	0781      	lsls	r1, r0, #30
{
   11768:	4615      	mov	r5, r2
   1176a:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1176c:	f140 808f 	bpl.w	1188e <bt_conn_le_create+0x136>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   11770:	4610      	mov	r0, r2
   11772:	f00c ff3b 	bl	1e5ec <bt_le_conn_params_valid>
   11776:	b928      	cbnz	r0, 11784 <bt_conn_le_create+0x2c>
		return -EINVAL;
   11778:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   1177c:	4628      	mov	r0, r5
   1177e:	b002      	add	sp, #8
   11780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11784:	4846      	ldr	r0, [pc, #280]	; (118a0 <bt_conn_le_create+0x148>)
   11786:	f00d f813 	bl	1e7b0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1178a:	0642      	lsls	r2, r0, #25
   1178c:	d4f4      	bmi.n	11778 <bt_conn_le_create+0x20>
   1178e:	4844      	ldr	r0, [pc, #272]	; (118a0 <bt_conn_le_create+0x148>)
   11790:	f00d f80e 	bl	1e7b0 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   11794:	0503      	lsls	r3, r0, #20
   11796:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   1179a:	d47b      	bmi.n	11894 <bt_conn_le_create+0x13c>
	if (!bt_le_scan_random_addr_check()) {
   1179c:	f7fd fe04 	bl	f3a8 <bt_le_scan_random_addr_check>
   117a0:	2800      	cmp	r0, #0
   117a2:	d0e9      	beq.n	11778 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   117a4:	4621      	mov	r1, r4
   117a6:	4640      	mov	r0, r8
   117a8:	f7ff ff5e 	bl	11668 <bt_conn_exists_le>
   117ac:	2800      	cmp	r0, #0
   117ae:	d1e3      	bne.n	11778 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   117b0:	7823      	ldrb	r3, [r4, #0]
   117b2:	3b02      	subs	r3, #2
   117b4:	2b01      	cmp	r3, #1
   117b6:	d849      	bhi.n	1184c <bt_conn_le_create+0xf4>
   117b8:	2207      	movs	r2, #7
   117ba:	4621      	mov	r1, r4
   117bc:	4668      	mov	r0, sp
   117be:	f00c fcf9 	bl	1e1b4 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   117c2:	f89d 3000 	ldrb.w	r3, [sp]
   117c6:	3b02      	subs	r3, #2
   117c8:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   117cc:	4669      	mov	r1, sp
   117ce:	2000      	movs	r0, #0
   117d0:	f7ff fdda 	bl	11388 <bt_conn_add_le>
	if (!conn) {
   117d4:	4604      	mov	r4, r0
   117d6:	2800      	cmp	r0, #0
   117d8:	d05f      	beq.n	1189a <bt_conn_le_create+0x142>
	conn->le.interval_min = param->interval_min;
   117da:	882b      	ldrh	r3, [r5, #0]
   117dc:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   117e0:	886b      	ldrh	r3, [r5, #2]
   117e2:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   117e6:	88ab      	ldrh	r3, [r5, #4]
   117e8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   117ec:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   117ee:	4d2d      	ldr	r5, [pc, #180]	; (118a4 <bt_conn_le_create+0x14c>)
	conn->le.timeout = param->timeout;
   117f0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   117f4:	f105 0c08 	add.w	ip, r5, #8
   117f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   117fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   11800:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   11802:	2b00      	cmp	r3, #0
   11804:	bf08      	it	eq
   11806:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   1180a:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   1180c:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   1180e:	b903      	cbnz	r3, 11812 <bt_conn_le_create+0xba>
   11810:	89ab      	ldrh	r3, [r5, #12]
   11812:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   11814:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   11816:	b903      	cbnz	r3, 1181a <bt_conn_le_create+0xc2>
   11818:	89eb      	ldrh	r3, [r5, #14]
   1181a:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1181c:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
   11820:	b11b      	cbz	r3, 1182a <bt_conn_le_create+0xd2>
   11822:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
   11826:	429a      	cmp	r2, r3
   11828:	d919      	bls.n	1185e <bt_conn_le_create+0x106>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1182a:	2102      	movs	r1, #2
   1182c:	4620      	mov	r0, r4
   1182e:	f7ff fe05 	bl	1143c <bt_conn_set_state>
		err = bt_le_scan_update(true);
   11832:	2001      	movs	r0, #1
   11834:	f7fe f816 	bl	f864 <bt_le_scan_update>
		if (err) {
   11838:	4605      	mov	r5, r0
   1183a:	b330      	cbz	r0, 1188a <bt_conn_le_create+0x132>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1183c:	4620      	mov	r0, r4
   1183e:	2100      	movs	r1, #0
   11840:	f7ff fdfc 	bl	1143c <bt_conn_set_state>
			bt_conn_unref(conn);
   11844:	4620      	mov	r0, r4
   11846:	f7ff fdcd 	bl	113e4 <bt_conn_unref>
			return err;
   1184a:	e797      	b.n	1177c <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   1184c:	4621      	mov	r1, r4
   1184e:	f00c fea8 	bl	1e5a2 <bt_lookup_id_addr>
   11852:	2207      	movs	r2, #7
   11854:	4601      	mov	r1, r0
   11856:	4668      	mov	r0, sp
   11858:	f00c fcac 	bl	1e1b4 <memcpy>
}
   1185c:	e7b6      	b.n	117cc <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1185e:	2106      	movs	r1, #6
   11860:	4620      	mov	r0, r4
   11862:	f7ff fdeb 	bl	1143c <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   11866:	4620      	mov	r0, r4
   11868:	f00c fea3 	bl	1e5b2 <bt_le_create_conn>
	if (err) {
   1186c:	4605      	mov	r5, r0
   1186e:	b160      	cbz	r0, 1188a <bt_conn_le_create+0x132>
		conn->err = 0;
   11870:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11872:	4620      	mov	r0, r4
   11874:	4631      	mov	r1, r6
		conn->err = 0;
   11876:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11878:	f7ff fde0 	bl	1143c <bt_conn_set_state>
		bt_conn_unref(conn);
   1187c:	4620      	mov	r0, r4
   1187e:	f7ff fdb1 	bl	113e4 <bt_conn_unref>
		bt_le_scan_update(false);
   11882:	4630      	mov	r0, r6
   11884:	f7fd ffee 	bl	f864 <bt_le_scan_update>
		return err;
   11888:	e778      	b.n	1177c <bt_conn_le_create+0x24>
	*ret_conn = conn;
   1188a:	603c      	str	r4, [r7, #0]
	return 0;
   1188c:	e776      	b.n	1177c <bt_conn_le_create+0x24>
		return -EAGAIN;
   1188e:	f06f 050a 	mvn.w	r5, #10
   11892:	e773      	b.n	1177c <bt_conn_le_create+0x24>
		return -EALREADY;
   11894:	f06f 0544 	mvn.w	r5, #68	; 0x44
   11898:	e770      	b.n	1177c <bt_conn_le_create+0x24>
		return -ENOMEM;
   1189a:	f06f 050b 	mvn.w	r5, #11
   1189e:	e76d      	b.n	1177c <bt_conn_le_create+0x24>
   118a0:	20008094 	.word	0x20008094
   118a4:	20008000 	.word	0x20008000

000118a8 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   118a8:	b570      	push	{r4, r5, r6, lr}
   118aa:	4606      	mov	r6, r0
   118ac:	482f      	ldr	r0, [pc, #188]	; (1196c <bt_le_set_auto_conn+0xc4>)
   118ae:	f00c ff7f 	bl	1e7b0 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   118b2:	0780      	lsls	r0, r0, #30
{
   118b4:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   118b6:	d553      	bpl.n	11960 <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   118b8:	b929      	cbnz	r1, 118c6 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   118ba:	f7fd fd75 	bl	f3a8 <bt_le_scan_random_addr_check>
   118be:	b940      	cbnz	r0, 118d2 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   118c0:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   118c4:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   118c6:	4608      	mov	r0, r1
   118c8:	f00c fe90 	bl	1e5ec <bt_le_conn_params_valid>
   118cc:	2800      	cmp	r0, #0
   118ce:	d1f4      	bne.n	118ba <bt_le_set_auto_conn+0x12>
   118d0:	e7f6      	b.n	118c0 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   118d2:	4631      	mov	r1, r6
   118d4:	2000      	movs	r0, #0
   118d6:	f7ff fea3 	bl	11620 <bt_conn_lookup_addr_le>
	if (!conn) {
   118da:	4604      	mov	r4, r0
   118dc:	b928      	cbnz	r0, 118ea <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   118de:	4631      	mov	r1, r6
   118e0:	f7ff fd52 	bl	11388 <bt_conn_add_le>
		if (!conn) {
   118e4:	4604      	mov	r4, r0
   118e6:	2800      	cmp	r0, #0
   118e8:	d03d      	beq.n	11966 <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
   118ea:	1d20      	adds	r0, r4, #4
	if (param) {
   118ec:	b33d      	cbz	r5, 1193e <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
   118ee:	882b      	ldrh	r3, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   118f0:	2101      	movs	r1, #1
   118f2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   118f6:	886b      	ldrh	r3, [r5, #2]
   118f8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   118fc:	88ab      	ldrh	r3, [r5, #4]
   118fe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11902:	88eb      	ldrh	r3, [r5, #6]
   11904:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
   11908:	f00c ff60 	bl	1e7cc <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
   1190c:	07c1      	lsls	r1, r0, #31
   1190e:	d402      	bmi.n	11916 <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
   11910:	4620      	mov	r0, r4
   11912:	f00d f83c 	bl	1e98e <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11916:	7b63      	ldrb	r3, [r4, #13]
   11918:	b963      	cbnz	r3, 11934 <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1191a:	4814      	ldr	r0, [pc, #80]	; (1196c <bt_le_set_auto_conn+0xc4>)
   1191c:	f00c ff48 	bl	1e7b0 <atomic_get>
   11920:	0783      	lsls	r3, r0, #30
   11922:	d507      	bpl.n	11934 <bt_le_set_auto_conn+0x8c>
		if (param) {
   11924:	b11d      	cbz	r5, 1192e <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11926:	2102      	movs	r1, #2
   11928:	4620      	mov	r0, r4
   1192a:	f7ff fd87 	bl	1143c <bt_conn_set_state>
		bt_le_scan_update(false);
   1192e:	2000      	movs	r0, #0
   11930:	f7fd ff98 	bl	f864 <bt_le_scan_update>
	bt_conn_unref(conn);
   11934:	4620      	mov	r0, r4
   11936:	f7ff fd55 	bl	113e4 <bt_conn_unref>
	return 0;
   1193a:	2000      	movs	r0, #0
   1193c:	e7c2      	b.n	118c4 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1193e:	f06f 0101 	mvn.w	r1, #1
   11942:	f00c ff38 	bl	1e7b6 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   11946:	07c2      	lsls	r2, r0, #31
   11948:	d5e5      	bpl.n	11916 <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
   1194a:	4620      	mov	r0, r4
   1194c:	f7ff fd4a 	bl	113e4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   11950:	7b63      	ldrb	r3, [r4, #13]
   11952:	2b02      	cmp	r3, #2
   11954:	d1df      	bne.n	11916 <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11956:	4629      	mov	r1, r5
   11958:	4620      	mov	r0, r4
   1195a:	f7ff fd6f 	bl	1143c <bt_conn_set_state>
   1195e:	e7da      	b.n	11916 <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
   11960:	f06f 000a 	mvn.w	r0, #10
   11964:	e7ae      	b.n	118c4 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   11966:	f06f 000b 	mvn.w	r0, #11
   1196a:	e7ab      	b.n	118c4 <bt_le_set_auto_conn+0x1c>
   1196c:	20008094 	.word	0x20008094

00011970 <bt_conn_disconnect>:
{
   11970:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11972:	7883      	ldrb	r3, [r0, #2]
{
   11974:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11976:	2b01      	cmp	r3, #1
{
   11978:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1197a:	d103      	bne.n	11984 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   1197c:	2100      	movs	r1, #0
   1197e:	3088      	adds	r0, #136	; 0x88
   11980:	f7ff ff92 	bl	118a8 <bt_le_set_auto_conn>
	switch (conn->state) {
   11984:	7b63      	ldrb	r3, [r4, #13]
   11986:	3b02      	subs	r3, #2
   11988:	2b06      	cmp	r3, #6
   1198a:	d805      	bhi.n	11998 <bt_conn_disconnect+0x28>
   1198c:	e8df f003 	tbb	[pc, r3]
   11990:	12040408 	.word	0x12040408
   11994:	271f      	.short	0x271f
   11996:	10          	.byte	0x10
   11997:	00          	.byte	0x00
   11998:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1199c:	4628      	mov	r0, r5
   1199e:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   119a0:	4620      	mov	r0, r4
   119a2:	2100      	movs	r1, #0
		conn->err = reason;
   119a4:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   119a6:	f7ff fd49 	bl	1143c <bt_conn_set_state>
			bt_le_scan_update(false);
   119aa:	2000      	movs	r0, #0
   119ac:	f7fd ff5a 	bl	f864 <bt_le_scan_update>
		return 0;
   119b0:	2500      	movs	r5, #0
   119b2:	e7f3      	b.n	1199c <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   119b4:	2157      	movs	r1, #87	; 0x57
   119b6:	4810      	ldr	r0, [pc, #64]	; (119f8 <bt_conn_disconnect+0x88>)
   119b8:	f00a ff44 	bl	1c844 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   119bc:	4620      	mov	r0, r4
		conn->err = reason;
   119be:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   119c0:	2100      	movs	r1, #0
   119c2:	f7ff fd3b 	bl	1143c <bt_conn_set_state>
}
   119c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   119ca:	f7fe beef 	b.w	107ac <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   119ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
   119d2:	f00a f849 	bl	1ba68 <k_delayed_work_cancel>
}
   119d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   119da:	f7fd bd57 	b.w	f48c <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   119de:	4629      	mov	r1, r5
   119e0:	8820      	ldrh	r0, [r4, #0]
   119e2:	f00c fde8 	bl	1e5b6 <bt_hci_disconnect>
	if (err) {
   119e6:	4605      	mov	r5, r0
   119e8:	2800      	cmp	r0, #0
   119ea:	d1d7      	bne.n	1199c <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   119ec:	2108      	movs	r1, #8
   119ee:	4620      	mov	r0, r4
   119f0:	f7ff fd24 	bl	1143c <bt_conn_set_state>
	return 0;
   119f4:	e7d2      	b.n	1199c <bt_conn_disconnect+0x2c>
   119f6:	bf00      	nop
   119f8:	00024b8b 	.word	0x00024b8b

000119fc <send_conn_le_param_update>:
{
   119fc:	b538      	push	{r3, r4, r5, lr}
   119fe:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11a00:	4608      	mov	r0, r1
{
   11a02:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11a04:	f00c fdf2 	bl	1e5ec <bt_le_conn_params_valid>
   11a08:	b308      	cbz	r0, 11a4e <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11a0a:	4b12      	ldr	r3, [pc, #72]	; (11a54 <send_conn_le_param_update+0x58>)
   11a0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11a10:	0799      	lsls	r1, r3, #30
   11a12:	d407      	bmi.n	11a24 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11a14:	78e3      	ldrb	r3, [r4, #3]
   11a16:	b173      	cbz	r3, 11a36 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11a18:	4629      	mov	r1, r5
   11a1a:	4620      	mov	r0, r4
}
   11a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11a20:	f000 bb14 	b.w	1204c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11a24:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11a28:	079a      	lsls	r2, r3, #30
   11a2a:	d5f3      	bpl.n	11a14 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11a2c:	1d20      	adds	r0, r4, #4
   11a2e:	f00c febf 	bl	1e7b0 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11a32:	0543      	lsls	r3, r0, #21
   11a34:	d4ee      	bmi.n	11a14 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11a36:	4629      	mov	r1, r5
   11a38:	4620      	mov	r0, r4
   11a3a:	f00c ffe3 	bl	1ea04 <bt_conn_le_conn_update>
		if (rc == 0) {
   11a3e:	b928      	cbnz	r0, 11a4c <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   11a40:	88ab      	ldrh	r3, [r5, #4]
   11a42:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11a46:	88eb      	ldrh	r3, [r5, #6]
   11a48:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11a4c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11a4e:	f06f 0015 	mvn.w	r0, #21
   11a52:	e7fb      	b.n	11a4c <send_conn_le_param_update+0x50>
   11a54:	20008000 	.word	0x20008000

00011a58 <deferred_work>:
{
   11a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11a5a:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   11a5e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   11a60:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11a64:	b99b      	cbnz	r3, 11a8e <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   11a66:	4628      	mov	r0, r5
   11a68:	f00d f82c 	bl	1eac4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11a6c:	4b24      	ldr	r3, [pc, #144]	; (11b00 <deferred_work+0xa8>)
   11a6e:	681e      	ldr	r6, [r3, #0]
   11a70:	b92e      	cbnz	r6, 11a7e <deferred_work+0x26>
		bt_conn_unref(conn);
   11a72:	4628      	mov	r0, r5
}
   11a74:	b002      	add	sp, #8
   11a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   11a7a:	f7ff bcb3 	b.w	113e4 <bt_conn_unref>
		if (cb->disconnected) {
   11a7e:	6873      	ldr	r3, [r6, #4]
   11a80:	b11b      	cbz	r3, 11a8a <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   11a82:	4628      	mov	r0, r5
   11a84:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   11a88:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11a8a:	69b6      	ldr	r6, [r6, #24]
   11a8c:	e7f0      	b.n	11a70 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   11a8e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11a92:	2b01      	cmp	r3, #1
   11a94:	d132      	bne.n	11afc <deferred_work+0xa4>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11a96:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   11a9a:	b923      	cbnz	r3, 11aa6 <deferred_work+0x4e>
}
   11a9c:	b002      	add	sp, #8
   11a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   11aa2:	f7fd bcf3 	b.w	f48c <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   11aa6:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11aaa:	f46f 7100 	mvn.w	r1, #512	; 0x200
   11aae:	4630      	mov	r0, r6
   11ab0:	f00c fe81 	bl	1e7b6 <atomic_and>
   11ab4:	0583      	lsls	r3, r0, #22
   11ab6:	d51b      	bpl.n	11af0 <deferred_work+0x98>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11ab8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   11abc:	f8ad 3000 	strh.w	r3, [sp]
   11ac0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   11ac4:	f8ad 3002 	strh.w	r3, [sp, #2]
   11ac8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11acc:	f8ad 3004 	strh.w	r3, [sp, #4]
   11ad0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   11ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   11ad8:	4669      	mov	r1, sp
   11ada:	4628      	mov	r0, r5
   11adc:	f7ff ff8e 	bl	119fc <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
   11ae4:	4630      	mov	r0, r6
}
   11ae6:	b002      	add	sp, #8
   11ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11aec:	f00c be6e 	b.w	1e7cc <atomic_or>
		param = BT_LE_CONN_PARAM(
   11af0:	466b      	mov	r3, sp
   11af2:	4a04      	ldr	r2, [pc, #16]	; (11b04 <deferred_work+0xac>)
   11af4:	6810      	ldr	r0, [r2, #0]
   11af6:	6851      	ldr	r1, [r2, #4]
   11af8:	c303      	stmia	r3!, {r0, r1}
   11afa:	e7ed      	b.n	11ad8 <deferred_work+0x80>
}
   11afc:	b002      	add	sp, #8
   11afe:	bd70      	pop	{r4, r5, r6, pc}
   11b00:	20009c1c 	.word	0x20009c1c
   11b04:	00021a9c 	.word	0x00021a9c

00011b08 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b0a:	4604      	mov	r4, r0
   11b0c:	460d      	mov	r5, r1
   11b0e:	4617      	mov	r7, r2
   11b10:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   11b12:	f00f fc0f 	bl	21334 <k_is_in_isr>
   11b16:	b150      	cbz	r0, 11b2e <bt_conn_create_pdu_timeout+0x26>
   11b18:	490f      	ldr	r1, [pc, #60]	; (11b58 <bt_conn_create_pdu_timeout+0x50>)
   11b1a:	4810      	ldr	r0, [pc, #64]	; (11b5c <bt_conn_create_pdu_timeout+0x54>)
   11b1c:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11b20:	f00a fe90 	bl	1c844 <printk>
   11b24:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11b28:	480b      	ldr	r0, [pc, #44]	; (11b58 <bt_conn_create_pdu_timeout+0x50>)
   11b2a:	f00b f931 	bl	1cd90 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11b2e:	480c      	ldr	r0, [pc, #48]	; (11b60 <bt_conn_create_pdu_timeout+0x58>)
   11b30:	463a      	mov	r2, r7
   11b32:	2c00      	cmp	r4, #0
   11b34:	bf18      	it	ne
   11b36:	4620      	movne	r0, r4
   11b38:	4633      	mov	r3, r6
   11b3a:	f00e fc9d 	bl	20478 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   11b3e:	4604      	mov	r4, r0
   11b40:	b928      	cbnz	r0, 11b4e <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   11b42:	2157      	movs	r1, #87	; 0x57
   11b44:	4807      	ldr	r0, [pc, #28]	; (11b64 <bt_conn_create_pdu_timeout+0x5c>)
   11b46:	f00a fe7d 	bl	1c844 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11b4a:	4620      	mov	r0, r4
   11b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   11b4e:	1d69      	adds	r1, r5, #5
   11b50:	3008      	adds	r0, #8
   11b52:	f005 fc8f 	bl	17474 <net_buf_simple_reserve>
	return buf;
   11b56:	e7f8      	b.n	11b4a <bt_conn_create_pdu_timeout+0x42>
   11b58:	000249c0 	.word	0x000249c0
   11b5c:	00022c66 	.word	0x00022c66
   11b60:	200085c0 	.word	0x200085c0
   11b64:	00024bb7 	.word	0x00024bb7

00011b68 <bt_conn_create_frag_timeout>:
{
   11b68:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11b6a:	4801      	ldr	r0, [pc, #4]	; (11b70 <bt_conn_create_frag_timeout+0x8>)
   11b6c:	f7ff bfcc 	b.w	11b08 <bt_conn_create_pdu_timeout>
   11b70:	20008618 	.word	0x20008618

00011b74 <create_frag>:
{
   11b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b78:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   11b7a:	f04f 33ff 	mov.w	r3, #4294967295
   11b7e:	f04f 32ff 	mov.w	r2, #4294967295
   11b82:	2000      	movs	r0, #0
{
   11b84:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   11b86:	f7ff ffef 	bl	11b68 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   11b8a:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   11b8c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11b8e:	2b07      	cmp	r3, #7
   11b90:	f04f 0600 	mov.w	r6, #0
   11b94:	d005      	beq.n	11ba2 <create_frag+0x2e>
		net_buf_unref(frag);
   11b96:	f005 fcbf 	bl	17518 <net_buf_unref>
		return NULL;
   11b9a:	4635      	mov	r5, r6
}
   11b9c:	4628      	mov	r0, r5
   11b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11ba2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11ba4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11ba8:	4e0c      	ldr	r6, [pc, #48]	; (11bdc <create_frag+0x68>)
   11baa:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11bac:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   11bb0:	f00e fc88 	bl	204c4 <net_buf_simple_tailroom>
   11bb4:	4580      	cmp	r8, r0
   11bb6:	d20c      	bcs.n	11bd2 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11bb8:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11bbc:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11bc0:	4632      	mov	r2, r6
   11bc2:	4638      	mov	r0, r7
   11bc4:	f00e fc86 	bl	204d4 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11bc8:	4631      	mov	r1, r6
   11bca:	4620      	mov	r0, r4
   11bcc:	f005 fd80 	bl	176d0 <net_buf_simple_pull>
   11bd0:	e7e4      	b.n	11b9c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11bd2:	4638      	mov	r0, r7
   11bd4:	f00e fc76 	bl	204c4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11bd8:	b286      	uxth	r6, r0
   11bda:	e7ef      	b.n	11bbc <create_frag+0x48>
   11bdc:	20008000 	.word	0x20008000

00011be0 <bt_conn_process_tx>:
{
   11be0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11be2:	7b43      	ldrb	r3, [r0, #13]
{
   11be4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11be6:	b95b      	cbnz	r3, 11c00 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11be8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11bec:	3004      	adds	r0, #4
   11bee:	f00c fde2 	bl	1e7b6 <atomic_and>
   11bf2:	0643      	lsls	r3, r0, #25
   11bf4:	d504      	bpl.n	11c00 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   11bf6:	4620      	mov	r0, r4
}
   11bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11bfc:	f7ff ba8e 	b.w	1111c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11c00:	2200      	movs	r2, #0
   11c02:	2300      	movs	r3, #0
   11c04:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11c08:	f005 fc04 	bl	17414 <net_buf_get>
	BT_ASSERT(buf);
   11c0c:	4605      	mov	r5, r0
   11c0e:	b958      	cbnz	r0, 11c28 <bt_conn_process_tx+0x48>
   11c10:	f240 525f 	movw	r2, #1375	; 0x55f
   11c14:	491d      	ldr	r1, [pc, #116]	; (11c8c <bt_conn_process_tx+0xac>)
   11c16:	481e      	ldr	r0, [pc, #120]	; (11c90 <bt_conn_process_tx+0xb0>)
   11c18:	f00a fe14 	bl	1c844 <printk>
   11c1c:	4040      	eors	r0, r0
   11c1e:	f380 8811 	msr	BASEPRI, r0
   11c22:	f04f 0003 	mov.w	r0, #3
   11c26:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11c28:	4e1a      	ldr	r6, [pc, #104]	; (11c94 <bt_conn_process_tx+0xb4>)
	if (buf->len <= conn_mtu(conn)) {
   11c2a:	89aa      	ldrh	r2, [r5, #12]
   11c2c:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11c30:	429a      	cmp	r2, r3
   11c32:	d807      	bhi.n	11c44 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11c34:	2300      	movs	r3, #0
   11c36:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11c38:	4629      	mov	r1, r5
   11c3a:	4620      	mov	r0, r4
   11c3c:	f7ff f942 	bl	10ec4 <send_frag>
	if (!send_buf(conn, buf)) {
   11c40:	b130      	cbz	r0, 11c50 <bt_conn_process_tx+0x70>
}
   11c42:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11c44:	4629      	mov	r1, r5
   11c46:	4620      	mov	r0, r4
   11c48:	f7ff ff94 	bl	11b74 <create_frag>
	if (!frag) {
   11c4c:	4601      	mov	r1, r0
   11c4e:	b920      	cbnz	r0, 11c5a <bt_conn_process_tx+0x7a>
		net_buf_unref(buf);
   11c50:	4628      	mov	r0, r5
}
   11c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11c56:	f005 bc5f 	b.w	17518 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11c5a:	2301      	movs	r3, #1
   11c5c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11c5e:	4620      	mov	r0, r4
   11c60:	f7ff f930 	bl	10ec4 <send_frag>
   11c64:	2800      	cmp	r0, #0
   11c66:	d0f3      	beq.n	11c50 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   11c68:	89aa      	ldrh	r2, [r5, #12]
   11c6a:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11c6e:	429a      	cmp	r2, r3
   11c70:	d802      	bhi.n	11c78 <bt_conn_process_tx+0x98>
	return send_frag(conn, buf, FRAG_END, false);
   11c72:	2300      	movs	r3, #0
   11c74:	2203      	movs	r2, #3
   11c76:	e7df      	b.n	11c38 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   11c78:	4629      	mov	r1, r5
   11c7a:	4620      	mov	r0, r4
   11c7c:	f7ff ff7a 	bl	11b74 <create_frag>
		if (!frag) {
   11c80:	4601      	mov	r1, r0
   11c82:	2800      	cmp	r0, #0
   11c84:	d0e4      	beq.n	11c50 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11c86:	2301      	movs	r3, #1
   11c88:	461a      	mov	r2, r3
   11c8a:	e7e8      	b.n	11c5e <bt_conn_process_tx+0x7e>
   11c8c:	000249c0 	.word	0x000249c0
   11c90:	00022c66 	.word	0x00022c66
   11c94:	20008000 	.word	0x20008000

00011c98 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11c98:	4b0b      	ldr	r3, [pc, #44]	; (11cc8 <bt_conn_index+0x30>)
{
   11c9a:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   11c9c:	1ac0      	subs	r0, r0, r3
   11c9e:	4b0b      	ldr	r3, [pc, #44]	; (11ccc <bt_conn_index+0x34>)
   11ca0:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11ca2:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
		index = conn - acl_conns;
   11ca6:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11caa:	d90a      	bls.n	11cc2 <bt_conn_index+0x2a>
   11cac:	4908      	ldr	r1, [pc, #32]	; (11cd0 <bt_conn_index+0x38>)
   11cae:	4809      	ldr	r0, [pc, #36]	; (11cd4 <bt_conn_index+0x3c>)
   11cb0:	f640 2295 	movw	r2, #2709	; 0xa95
   11cb4:	f00a fdc6 	bl	1c844 <printk>
   11cb8:	f640 2195 	movw	r1, #2709	; 0xa95
   11cbc:	4804      	ldr	r0, [pc, #16]	; (11cd0 <bt_conn_index+0x38>)
   11cbe:	f00b f867 	bl	1cd90 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11cc2:	b2e0      	uxtb	r0, r4
   11cc4:	bd10      	pop	{r4, pc}
   11cc6:	bf00      	nop
   11cc8:	20008a38 	.word	0x20008a38
   11ccc:	aaaaaaab 	.word	0xaaaaaaab
   11cd0:	000249c0 	.word	0x000249c0
   11cd4:	00022c66 	.word	0x00022c66

00011cd8 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11cd8:	2802      	cmp	r0, #2
   11cda:	d806      	bhi.n	11cea <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11cdc:	4b04      	ldr	r3, [pc, #16]	; (11cf0 <bt_conn_lookup_index+0x18>)
   11cde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11ce2:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11ce6:	f00c be52 	b.w	1e98e <bt_conn_ref>
}
   11cea:	2000      	movs	r0, #0
   11cec:	4770      	bx	lr
   11cee:	bf00      	nop
   11cf0:	20008a38 	.word	0x20008a38

00011cf4 <bt_conn_init>:

int bt_conn_init(void)
{
   11cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11cf6:	4917      	ldr	r1, [pc, #92]	; (11d54 <bt_conn_init+0x60>)
   11cf8:	4817      	ldr	r0, [pc, #92]	; (11d58 <bt_conn_init+0x64>)
   11cfa:	f00f fab3 	bl	21264 <k_queue_append>
   11cfe:	4917      	ldr	r1, [pc, #92]	; (11d5c <bt_conn_init+0x68>)
   11d00:	4815      	ldr	r0, [pc, #84]	; (11d58 <bt_conn_init+0x64>)
   11d02:	f00f faaf 	bl	21264 <k_queue_append>
   11d06:	4916      	ldr	r1, [pc, #88]	; (11d60 <bt_conn_init+0x6c>)
   11d08:	4813      	ldr	r0, [pc, #76]	; (11d58 <bt_conn_init+0x64>)
   11d0a:	f00f faab 	bl	21264 <k_queue_append>
	}

	bt_att_init();
   11d0e:	f00d fa73 	bl	1f1f8 <bt_att_init>

	err = bt_smp_init();
   11d12:	f005 f907 	bl	16f24 <bt_smp_init>
	if (err) {
   11d16:	4605      	mov	r5, r0
   11d18:	b9d0      	cbnz	r0, 11d50 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   11d1a:	f00c ff56 	bl	1ebca <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11d1e:	462e      	mov	r6, r5
   11d20:	4f10      	ldr	r7, [pc, #64]	; (11d64 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11d22:	4638      	mov	r0, r7
   11d24:	f00c fe33 	bl	1e98e <bt_conn_ref>

			if (!conn) {
   11d28:	4604      	mov	r4, r0
   11d2a:	b160      	cbz	r0, 11d46 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11d2c:	3004      	adds	r0, #4
   11d2e:	f00c fd3f 	bl	1e7b0 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11d32:	07c3      	lsls	r3, r0, #31
   11d34:	d504      	bpl.n	11d40 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11d36:	2102      	movs	r1, #2
   11d38:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   11d3a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11d3c:	f7ff fb7e 	bl	1143c <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11d40:	4620      	mov	r0, r4
   11d42:	f7ff fb4f 	bl	113e4 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11d46:	3601      	adds	r6, #1
   11d48:	2e03      	cmp	r6, #3
   11d4a:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   11d4e:	d1e8      	bne.n	11d22 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11d50:	4628      	mov	r0, r5
   11d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d54:	20009c20 	.word	0x20009c20
   11d58:	20008578 	.word	0x20008578
   11d5c:	20009c30 	.word	0x20009c30
   11d60:	20009c40 	.word	0x20009c40
   11d64:	20008a38 	.word	0x20008a38

00011d68 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   11d68:	4b0f      	ldr	r3, [pc, #60]	; (11da8 <l2cap_accept+0x40>)
{
   11d6a:	b510      	push	{r4, lr}
		if (l2cap->chan.chan.conn) {
   11d6c:	681c      	ldr	r4, [r3, #0]
{
   11d6e:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   11d70:	b164      	cbz	r4, 11d8c <l2cap_accept+0x24>
   11d72:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
   11d76:	b190      	cbz	r0, 11d9e <l2cap_accept+0x36>
   11d78:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
   11d7c:	b188      	cbz	r0, 11da2 <l2cap_accept+0x3a>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   11d7e:	480b      	ldr	r0, [pc, #44]	; (11dac <l2cap_accept+0x44>)
   11d80:	2145      	movs	r1, #69	; 0x45
   11d82:	f00a fd5f 	bl	1c844 <printk>
   11d86:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
   11d8a:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11d8c:	4622      	mov	r2, r4
		l2cap->chan.chan.ops = &ops;
   11d8e:	20c0      	movs	r0, #192	; 0xc0
   11d90:	fb00 3302 	mla	r3, r0, r2, r3
   11d94:	4a06      	ldr	r2, [pc, #24]	; (11db0 <l2cap_accept+0x48>)
		return 0;
   11d96:	2000      	movs	r0, #0
		l2cap->chan.chan.ops = &ops;
   11d98:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   11d9a:	600b      	str	r3, [r1, #0]
		return 0;
   11d9c:	e7f5      	b.n	11d8a <l2cap_accept+0x22>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11d9e:	2201      	movs	r2, #1
   11da0:	e7f5      	b.n	11d8e <l2cap_accept+0x26>
   11da2:	2202      	movs	r2, #2
   11da4:	e7f3      	b.n	11d8e <l2cap_accept+0x26>
   11da6:	bf00      	nop
   11da8:	20008c78 	.word	0x20008c78
   11dac:	00024c4f 	.word	0x00024c4f
   11db0:	00022018 	.word	0x00022018

00011db4 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   11db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11db6:	4605      	mov	r5, r0
   11db8:	460f      	mov	r7, r1
   11dba:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   11dbc:	2300      	movs	r3, #0
   11dbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11dc2:	2104      	movs	r1, #4
   11dc4:	2000      	movs	r0, #0
   11dc6:	f7ff fe9f 	bl	11b08 <bt_conn_create_pdu_timeout>
	if (!buf) {
   11dca:	4604      	mov	r4, r0
   11dcc:	b930      	cbnz	r0, 11ddc <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   11dce:	462a      	mov	r2, r5
   11dd0:	2145      	movs	r1, #69	; 0x45
   11dd2:	4806      	ldr	r0, [pc, #24]	; (11dec <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   11dd4:	f00a fd36 	bl	1c844 <printk>
}
   11dd8:	4620      	mov	r0, r4
   11dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   11ddc:	2104      	movs	r1, #4
   11dde:	3008      	adds	r0, #8
   11de0:	f005 fcb0 	bl	17744 <net_buf_simple_add>
	hdr->code = code;
   11de4:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   11de6:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   11de8:	8046      	strh	r6, [r0, #2]
	return buf;
   11dea:	e7f5      	b.n	11dd8 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   11dec:	00024c7b 	.word	0x00024c7b

00011df0 <l2cap_rtx_timeout>:
{
   11df0:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11df2:	4604      	mov	r4, r0
   11df4:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   11df8:	2145      	movs	r1, #69	; 0x45
   11dfa:	4622      	mov	r2, r4
   11dfc:	4805      	ldr	r0, [pc, #20]	; (11e14 <l2cap_rtx_timeout+0x24>)
   11dfe:	f00a fd21 	bl	1c844 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11e02:	4628      	mov	r0, r5
   11e04:	4621      	mov	r1, r4
   11e06:	f00c fe27 	bl	1ea58 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   11e0a:	4620      	mov	r0, r4
}
   11e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   11e10:	f00c be43 	b.w	1ea9a <bt_l2cap_chan_del>
   11e14:	00024ca8 	.word	0x00024ca8

00011e18 <bt_l2cap_connected>:
{
   11e18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11e1c:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11e1e:	4e2d      	ldr	r6, [pc, #180]	; (11ed4 <bt_l2cap_connected+0xbc>)
   11e20:	4f2d      	ldr	r7, [pc, #180]	; (11ed8 <bt_l2cap_connected+0xc0>)
   11e22:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11edc <bt_l2cap_connected+0xc4>
   11e26:	42be      	cmp	r6, r7
   11e28:	d90a      	bls.n	11e40 <bt_l2cap_connected+0x28>
   11e2a:	4641      	mov	r1, r8
   11e2c:	482c      	ldr	r0, [pc, #176]	; (11ee0 <bt_l2cap_connected+0xc8>)
   11e2e:	f240 1267 	movw	r2, #359	; 0x167
   11e32:	f00a fd07 	bl	1c844 <printk>
   11e36:	f240 1167 	movw	r1, #359	; 0x167
   11e3a:	4640      	mov	r0, r8
   11e3c:	f00a ffa8 	bl	1cd90 <assert_post_action>
   11e40:	42be      	cmp	r6, r7
   11e42:	d302      	bcc.n	11e4a <bt_l2cap_connected+0x32>
}
   11e44:	b003      	add	sp, #12
   11e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   11e4a:	4628      	mov	r0, r5
   11e4c:	6873      	ldr	r3, [r6, #4]
   11e4e:	a901      	add	r1, sp, #4
   11e50:	4798      	blx	r3
   11e52:	2800      	cmp	r0, #0
   11e54:	db38      	blt.n	11ec8 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   11e56:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   11e58:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11e5a:	2230      	movs	r2, #48	; 0x30
   11e5c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   11e60:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   11e64:	2100      	movs	r1, #0
   11e66:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   11e6a:	f8d6 9008 	ldr.w	r9, [r6, #8]
   11e6e:	f00c f9cc 	bl	1e20a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11e72:	2200      	movs	r2, #0
   11e74:	4b1b      	ldr	r3, [pc, #108]	; (11ee4 <bt_l2cap_connected+0xcc>)
   11e76:	6163      	str	r3, [r4, #20]
   11e78:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11e7c:	e8d3 1fef 	ldaex	r1, [r3]
   11e80:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11e84:	2800      	cmp	r0, #0
   11e86:	d1f9      	bne.n	11e7c <bt_l2cap_connected+0x64>
	parent->next = child;
   11e88:	60a2      	str	r2, [r4, #8]
	return list->tail;
   11e8a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   11e8c:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   11e90:	b9e2      	cbnz	r2, 11ecc <bt_l2cap_connected+0xb4>
	list->head = node;
   11e92:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   11e96:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   11e98:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   11e9a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   11e9c:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   11ea0:	681b      	ldr	r3, [r3, #0]
   11ea2:	b103      	cbz	r3, 11ea6 <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   11ea4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11ea6:	9b01      	ldr	r3, [sp, #4]
   11ea8:	3340      	adds	r3, #64	; 0x40
   11eaa:	e8d3 2fef 	ldaex	r2, [r3]
   11eae:	f042 0201 	orr.w	r2, r2, #1
   11eb2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11eb6:	2900      	cmp	r1, #0
   11eb8:	d1f7      	bne.n	11eaa <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   11eba:	9801      	ldr	r0, [sp, #4]
   11ebc:	6843      	ldr	r3, [r0, #4]
   11ebe:	699b      	ldr	r3, [r3, #24]
   11ec0:	b113      	cbz	r3, 11ec8 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   11ec2:	f100 0140 	add.w	r1, r0, #64	; 0x40
   11ec6:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11ec8:	360c      	adds	r6, #12
   11eca:	e7ac      	b.n	11e26 <bt_l2cap_connected+0xe>
	parent->next = child;
   11ecc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11ece:	656b      	str	r3, [r5, #84]	; 0x54
}
   11ed0:	e7e1      	b.n	11e96 <bt_l2cap_connected+0x7e>
   11ed2:	bf00      	nop
   11ed4:	00021830 	.word	0x00021830
   11ed8:	00021854 	.word	0x00021854
   11edc:	00024cbd 	.word	0x00024cbd
   11ee0:	00022c66 	.word	0x00022c66
   11ee4:	00011df1 	.word	0x00011df1

00011ee8 <l2cap_recv>:
{
   11ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   11eea:	898b      	ldrh	r3, [r1, #12]
{
   11eec:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11eee:	2b03      	cmp	r3, #3
{
   11ef0:	460d      	mov	r5, r1
   11ef2:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   11ef4:	d804      	bhi.n	11f00 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   11ef6:	2145      	movs	r1, #69	; 0x45
   11ef8:	483a      	ldr	r0, [pc, #232]	; (11fe4 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   11efa:	f00a fca3 	bl	1c844 <printk>
		return 0;
   11efe:	e00d      	b.n	11f1c <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   11f00:	2104      	movs	r1, #4
   11f02:	f105 0008 	add.w	r0, r5, #8
   11f06:	f005 fbff 	bl	17708 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   11f0a:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   11f0c:	8843      	ldrh	r3, [r0, #2]
   11f0e:	4604      	mov	r4, r0
	if (buf->len != len) {
   11f10:	4293      	cmp	r3, r2
   11f12:	d006      	beq.n	11f22 <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   11f14:	2145      	movs	r1, #69	; 0x45
   11f16:	4834      	ldr	r0, [pc, #208]	; (11fe8 <l2cap_recv+0x100>)
   11f18:	f00a fc94 	bl	1c844 <printk>
}
   11f1c:	2000      	movs	r0, #0
   11f1e:	b005      	add	sp, #20
   11f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   11f22:	7841      	ldrb	r1, [r0, #1]
   11f24:	b911      	cbnz	r1, 11f2c <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   11f26:	2145      	movs	r1, #69	; 0x45
   11f28:	4830      	ldr	r0, [pc, #192]	; (11fec <l2cap_recv+0x104>)
   11f2a:	e7e6      	b.n	11efa <l2cap_recv+0x12>
	switch (hdr->code) {
   11f2c:	7802      	ldrb	r2, [r0, #0]
   11f2e:	2a12      	cmp	r2, #18
   11f30:	d00f      	beq.n	11f52 <l2cap_recv+0x6a>
   11f32:	2a13      	cmp	r2, #19
   11f34:	d008      	beq.n	11f48 <l2cap_recv+0x60>
   11f36:	2a01      	cmp	r2, #1
   11f38:	d0f0      	beq.n	11f1c <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   11f3a:	2157      	movs	r1, #87	; 0x57
   11f3c:	482c      	ldr	r0, [pc, #176]	; (11ff0 <l2cap_recv+0x108>)
   11f3e:	f00a fc81 	bl	1c844 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   11f42:	7861      	ldrb	r1, [r4, #1]
   11f44:	6830      	ldr	r0, [r6, #0]
   11f46:	e00d      	b.n	11f64 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   11f48:	2b01      	cmp	r3, #1
   11f4a:	d8e7      	bhi.n	11f1c <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   11f4c:	2145      	movs	r1, #69	; 0x45
   11f4e:	4829      	ldr	r0, [pc, #164]	; (11ff4 <l2cap_recv+0x10c>)
   11f50:	e7d3      	b.n	11efa <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   11f52:	2b07      	cmp	r3, #7
   11f54:	d802      	bhi.n	11f5c <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   11f56:	2145      	movs	r1, #69	; 0x45
   11f58:	4827      	ldr	r0, [pc, #156]	; (11ff8 <l2cap_recv+0x110>)
   11f5a:	e7ce      	b.n	11efa <l2cap_recv+0x12>
   11f5c:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   11f5e:	78e7      	ldrb	r7, [r4, #3]
   11f60:	b11f      	cbz	r7, 11f6a <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   11f62:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   11f64:	f00c fdfa 	bl	1eb5c <l2cap_send_reject.constprop.0>
		break;
   11f68:	e7d8      	b.n	11f1c <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   11f6a:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   11f6c:	7850      	ldrb	r0, [r2, #1]
   11f6e:	7813      	ldrb	r3, [r2, #0]
   11f70:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11f74:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   11f78:	78d0      	ldrb	r0, [r2, #3]
   11f7a:	7893      	ldrb	r3, [r2, #2]
   11f7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11f80:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   11f84:	7950      	ldrb	r0, [r2, #5]
   11f86:	7913      	ldrb	r3, [r2, #4]
   11f88:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11f8c:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   11f90:	7993      	ldrb	r3, [r2, #6]
   11f92:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11f94:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   11f96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11f9a:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   11f9c:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11fa0:	f7ff ff08 	bl	11db4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11fa4:	4605      	mov	r5, r0
   11fa6:	2800      	cmp	r0, #0
   11fa8:	d0b8      	beq.n	11f1c <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   11faa:	a902      	add	r1, sp, #8
   11fac:	4620      	mov	r0, r4
   11fae:	f7ff f85d 	bl	1106c <le_param_req>
   11fb2:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   11fb4:	2102      	movs	r1, #2
   11fb6:	f105 0008 	add.w	r0, r5, #8
   11fba:	f005 fbc3 	bl	17744 <net_buf_simple_add>
	if (accepted) {
   11fbe:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   11fc2:	b2db      	uxtb	r3, r3
   11fc4:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   11fc6:	462a      	mov	r2, r5
   11fc8:	463b      	mov	r3, r7
   11fca:	2105      	movs	r1, #5
   11fcc:	4620      	mov	r0, r4
   11fce:	9700      	str	r7, [sp, #0]
   11fd0:	f00c fdab 	bl	1eb2a <bt_l2cap_send_cb>
	if (accepted) {
   11fd4:	2e00      	cmp	r6, #0
   11fd6:	d0a1      	beq.n	11f1c <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   11fd8:	4620      	mov	r0, r4
   11fda:	a902      	add	r1, sp, #8
   11fdc:	f00c fd12 	bl	1ea04 <bt_conn_le_conn_update>
   11fe0:	e79c      	b.n	11f1c <l2cap_recv+0x34>
   11fe2:	bf00      	nop
   11fe4:	00024cee 	.word	0x00024cee
   11fe8:	00024d11 	.word	0x00024d11
   11fec:	00024d37 	.word	0x00024d37
   11ff0:	00024da6 	.word	0x00024da6
   11ff4:	00024d5d 	.word	0x00024d5d
   11ff8:	00024d7e 	.word	0x00024d7e

00011ffc <bt_l2cap_recv>:
{
   11ffc:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   11ffe:	898b      	ldrh	r3, [r1, #12]
{
   12000:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   12002:	2b03      	cmp	r3, #3
{
   12004:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   12006:	d808      	bhi.n	1201a <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   12008:	2145      	movs	r1, #69	; 0x45
   1200a:	480e      	ldr	r0, [pc, #56]	; (12044 <bt_l2cap_recv+0x48>)
   1200c:	f00a fc1a 	bl	1c844 <printk>
	net_buf_unref(buf);
   12010:	4620      	mov	r0, r4
}
   12012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   12016:	f005 ba7f 	b.w	17518 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1201a:	2104      	movs	r1, #4
   1201c:	f104 0008 	add.w	r0, r4, #8
   12020:	f005 fb72 	bl	17708 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   12024:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   12026:	4628      	mov	r0, r5
   12028:	4611      	mov	r1, r2
   1202a:	f00c fdbe 	bl	1ebaa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1202e:	b920      	cbnz	r0, 1203a <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   12030:	2157      	movs	r1, #87	; 0x57
   12032:	4805      	ldr	r0, [pc, #20]	; (12048 <bt_l2cap_recv+0x4c>)
   12034:	f00a fc06 	bl	1c844 <printk>
		net_buf_unref(buf);
   12038:	e7ea      	b.n	12010 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   1203a:	6843      	ldr	r3, [r0, #4]
   1203c:	4621      	mov	r1, r4
   1203e:	691b      	ldr	r3, [r3, #16]
   12040:	4798      	blx	r3
   12042:	e7e5      	b.n	12010 <bt_l2cap_recv+0x14>
   12044:	00024dc9 	.word	0x00024dc9
   12048:	00024deb 	.word	0x00024deb

0001204c <bt_l2cap_update_conn_param>:
{
   1204c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1204e:	460c      	mov	r4, r1
	ident++;
   12050:	4914      	ldr	r1, [pc, #80]	; (120a4 <bt_l2cap_update_conn_param+0x58>)
{
   12052:	4605      	mov	r5, r0
	ident++;
   12054:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12056:	2208      	movs	r2, #8
	ident++;
   12058:	3301      	adds	r3, #1
	if (!ident) {
   1205a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1205e:	bf08      	it	eq
   12060:	2301      	moveq	r3, #1
   12062:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12064:	2012      	movs	r0, #18
   12066:	7809      	ldrb	r1, [r1, #0]
   12068:	f7ff fea4 	bl	11db4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1206c:	4606      	mov	r6, r0
   1206e:	b1b0      	cbz	r0, 1209e <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   12070:	2108      	movs	r1, #8
   12072:	4408      	add	r0, r1
   12074:	f005 fb66 	bl	17744 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   12078:	8822      	ldrh	r2, [r4, #0]
   1207a:	2105      	movs	r1, #5
   1207c:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1207e:	8862      	ldrh	r2, [r4, #2]
   12080:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   12082:	88a2      	ldrh	r2, [r4, #4]
   12084:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   12086:	88e2      	ldrh	r2, [r4, #6]
   12088:	2400      	movs	r4, #0
   1208a:	80c2      	strh	r2, [r0, #6]
   1208c:	4623      	mov	r3, r4
   1208e:	4632      	mov	r2, r6
   12090:	4628      	mov	r0, r5
   12092:	9400      	str	r4, [sp, #0]
   12094:	f00c fd49 	bl	1eb2a <bt_l2cap_send_cb>
	return 0;
   12098:	4620      	mov	r0, r4
}
   1209a:	b002      	add	sp, #8
   1209c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1209e:	f06f 000b 	mvn.w	r0, #11
   120a2:	e7fa      	b.n	1209a <bt_l2cap_update_conn_param+0x4e>
   120a4:	2000b726 	.word	0x2000b726

000120a8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   120a8:	4b02      	ldr	r3, [pc, #8]	; (120b4 <att_cfm_sent+0xc>)
   120aa:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   120ae:	f00c bd9f 	b.w	1ebf0 <att_sent>
   120b2:	bf00      	nop
   120b4:	0001efff 	.word	0x0001efff

000120b8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   120b8:	4b02      	ldr	r3, [pc, #8]	; (120c4 <att_rsp_sent+0xc>)
   120ba:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   120be:	f00c bd97 	b.w	1ebf0 <att_sent>
   120c2:	bf00      	nop
   120c4:	0001efeb 	.word	0x0001efeb

000120c8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   120c8:	4b02      	ldr	r3, [pc, #8]	; (120d4 <att_req_sent+0xc>)
   120ca:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   120ce:	f00c bd8f 	b.w	1ebf0 <att_sent>
   120d2:	bf00      	nop
   120d4:	00012285 	.word	0x00012285

000120d8 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   120d8:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   120da:	7b43      	ldrb	r3, [r0, #13]
   120dc:	2b07      	cmp	r3, #7
   120de:	d005      	beq.n	120ec <att_get+0x14>
		BT_WARN("Not connected");
   120e0:	2157      	movs	r1, #87	; 0x57
   120e2:	480e      	ldr	r0, [pc, #56]	; (1211c <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   120e4:	f00a fbae 	bl	1c844 <printk>
		return NULL;
   120e8:	2400      	movs	r4, #0
   120ea:	e008      	b.n	120fe <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   120ec:	2104      	movs	r1, #4
   120ee:	f00c fd5c 	bl	1ebaa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   120f2:	4604      	mov	r4, r0
   120f4:	b928      	cbnz	r0, 12102 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   120f6:	2145      	movs	r1, #69	; 0x45
   120f8:	4809      	ldr	r0, [pc, #36]	; (12120 <att_get+0x48>)
   120fa:	f00a fba3 	bl	1c844 <printk>
	}

	return att_chan->att;
}
   120fe:	4620      	mov	r0, r4
   12100:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12102:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   12106:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1210a:	075b      	lsls	r3, r3, #29
   1210c:	d502      	bpl.n	12114 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   1210e:	2157      	movs	r1, #87	; 0x57
   12110:	4804      	ldr	r0, [pc, #16]	; (12124 <att_get+0x4c>)
   12112:	e7e7      	b.n	120e4 <att_get+0xc>
	return att_chan->att;
   12114:	f850 4c08 	ldr.w	r4, [r0, #-8]
   12118:	e7f1      	b.n	120fe <att_get+0x26>
   1211a:	bf00      	nop
   1211c:	00024e25 	.word	0x00024e25
   12120:	00024e38 	.word	0x00024e38
   12124:	00024e58 	.word	0x00024e58

00012128 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   12128:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1212a:	3808      	subs	r0, #8
   1212c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1212e:	a901      	add	r1, sp, #4
   12130:	4802      	ldr	r0, [pc, #8]	; (1213c <bt_att_released+0x14>)
   12132:	f007 fec5 	bl	19ec0 <k_mem_slab_free>
}
   12136:	b003      	add	sp, #12
   12138:	f85d fb04 	ldr.w	pc, [sp], #4
   1213c:	200084d4 	.word	0x200084d4

00012140 <find_type_cb>:
{
   12140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12144:	f642 0301 	movw	r3, #10241	; 0x2801
   12148:	2500      	movs	r5, #0
{
   1214a:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   1214c:	f8d2 9000 	ldr.w	r9, [r2]
{
   12150:	4607      	mov	r7, r0
   12152:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12154:	6800      	ldr	r0, [r0, #0]
   12156:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   12158:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   1215c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1215e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   12162:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   12166:	f00c f8c0 	bl	1e2ea <bt_uuid_cmp>
   1216a:	2800      	cmp	r0, #0
   1216c:	d060      	beq.n	12230 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1216e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12172:	6838      	ldr	r0, [r7, #0]
   12174:	a90b      	add	r1, sp, #44	; 0x2c
   12176:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1217a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1217e:	f00c f8b4 	bl	1e2ea <bt_uuid_cmp>
   12182:	b138      	cbz	r0, 12194 <find_type_cb+0x54>
		if (data->group &&
   12184:	68a3      	ldr	r3, [r4, #8]
   12186:	b11b      	cbz	r3, 12190 <find_type_cb+0x50>
   12188:	885a      	ldrh	r2, [r3, #2]
   1218a:	42b2      	cmp	r2, r6
   1218c:	d200      	bcs.n	12190 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1218e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   12190:	2001      	movs	r0, #1
   12192:	e009      	b.n	121a8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   12194:	6861      	ldr	r1, [r4, #4]
   12196:	4608      	mov	r0, r1
   12198:	f00c fd22 	bl	1ebe0 <net_buf_frags_len>
   1219c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   121a0:	1a1b      	subs	r3, r3, r0
   121a2:	2b03      	cmp	r3, #3
   121a4:	d803      	bhi.n	121ae <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   121a6:	2000      	movs	r0, #0
}
   121a8:	b011      	add	sp, #68	; 0x44
   121aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   121ae:	4608      	mov	r0, r1
   121b0:	f005 fa0e 	bl	175d0 <net_buf_frag_last>
   121b4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   121b6:	6860      	ldr	r0, [r4, #4]
   121b8:	f00c fd12 	bl	1ebe0 <net_buf_frags_len>
   121bc:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   121c0:	f105 0b08 	add.w	fp, r5, #8
   121c4:	ebaa 0a00 	sub.w	sl, sl, r0
   121c8:	4658      	mov	r0, fp
   121ca:	f00e f97b 	bl	204c4 <net_buf_simple_tailroom>
   121ce:	4582      	cmp	sl, r0
   121d0:	d231      	bcs.n	12236 <find_type_cb+0xf6>
   121d2:	6860      	ldr	r0, [r4, #4]
   121d4:	f00c fd04 	bl	1ebe0 <net_buf_frags_len>
   121d8:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   121dc:	1a18      	subs	r0, r3, r0
	if (!len) {
   121de:	b970      	cbnz	r0, 121fe <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   121e0:	6863      	ldr	r3, [r4, #4]
   121e2:	7998      	ldrb	r0, [r3, #6]
   121e4:	f005 f818 	bl	17218 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   121e8:	2200      	movs	r2, #0
   121ea:	2300      	movs	r3, #0
   121ec:	f00e f944 	bl	20478 <net_buf_alloc_fixed>
		if (!frag) {
   121f0:	4605      	mov	r5, r0
   121f2:	2800      	cmp	r0, #0
   121f4:	d0d7      	beq.n	121a6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   121f6:	4601      	mov	r1, r0
   121f8:	6860      	ldr	r0, [r4, #4]
   121fa:	f005 fa29 	bl	17650 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   121fe:	2300      	movs	r3, #0
   12200:	9300      	str	r3, [sp, #0]
   12202:	4639      	mov	r1, r7
   12204:	f8d7 9004 	ldr.w	r9, [r7, #4]
   12208:	2310      	movs	r3, #16
   1220a:	4640      	mov	r0, r8
   1220c:	aa02      	add	r2, sp, #8
   1220e:	47c8      	blx	r9
	if (read < 0) {
   12210:	1e07      	subs	r7, r0, #0
   12212:	db0d      	blt.n	12230 <find_type_cb+0xf0>
	if (read != data->value_len) {
   12214:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   12216:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   12218:	42ba      	cmp	r2, r7
   1221a:	d02b      	beq.n	12274 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1221c:	4601      	mov	r1, r0
   1221e:	a80b      	add	r0, sp, #44	; 0x2c
   12220:	f00c f891 	bl	1e346 <bt_uuid_create>
   12224:	b958      	cbnz	r0, 1223e <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   12226:	2157      	movs	r1, #87	; 0x57
   12228:	7c22      	ldrb	r2, [r4, #16]
   1222a:	4814      	ldr	r0, [pc, #80]	; (1227c <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   1222c:	f00a fb0a 	bl	1c844 <printk>
	data->group = NULL;
   12230:	2300      	movs	r3, #0
   12232:	60a3      	str	r3, [r4, #8]
   12234:	e7ac      	b.n	12190 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   12236:	4658      	mov	r0, fp
   12238:	f00e f944 	bl	204c4 <net_buf_simple_tailroom>
   1223c:	e7cf      	b.n	121de <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1223e:	b2fa      	uxtb	r2, r7
   12240:	a902      	add	r1, sp, #8
   12242:	a806      	add	r0, sp, #24
   12244:	f00c f87f 	bl	1e346 <bt_uuid_create>
   12248:	b918      	cbnz	r0, 12252 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   1224a:	463a      	mov	r2, r7
   1224c:	2157      	movs	r1, #87	; 0x57
   1224e:	480c      	ldr	r0, [pc, #48]	; (12280 <find_type_cb+0x140>)
   12250:	e7ec      	b.n	1222c <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   12252:	a906      	add	r1, sp, #24
   12254:	a80b      	add	r0, sp, #44	; 0x2c
   12256:	f00c f848 	bl	1e2ea <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1225a:	2800      	cmp	r0, #0
   1225c:	d1e8      	bne.n	12230 <find_type_cb+0xf0>
	data->err = 0x00;
   1225e:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   12260:	2104      	movs	r1, #4
   12262:	7463      	strb	r3, [r4, #17]
   12264:	f105 0008 	add.w	r0, r5, #8
   12268:	f005 fa6c 	bl	17744 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1226c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1226e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   12270:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   12272:	e78d      	b.n	12190 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   12274:	a902      	add	r1, sp, #8
   12276:	f00b ff8c 	bl	1e192 <memcmp>
   1227a:	e7ee      	b.n	1225a <find_type_cb+0x11a>
   1227c:	00024e81 	.word	0x00024e81
   12280:	00024ea5 	.word	0x00024ea5

00012284 <chan_req_sent>:
	if (chan->req) {
   12284:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   12288:	b13b      	cbz	r3, 1229a <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1228a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   1228e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   12292:	2300      	movs	r3, #0
   12294:	4801      	ldr	r0, [pc, #4]	; (1229c <chan_req_sent+0x18>)
   12296:	f009 bb77 	b.w	1b988 <k_delayed_work_submit_to_queue>
}
   1229a:	4770      	bx	lr
   1229c:	20009630 	.word	0x20009630

000122a0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   122a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   122a2:	2300      	movs	r3, #0
{
   122a4:	4606      	mov	r6, r0
   122a6:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   122a8:	2200      	movs	r2, #0
   122aa:	4669      	mov	r1, sp
   122ac:	4823      	ldr	r0, [pc, #140]	; (1233c <bt_att_accept+0x9c>)
   122ae:	f007 fdad 	bl	19e0c <k_mem_slab_alloc>
   122b2:	4604      	mov	r4, r0
   122b4:	b148      	cbz	r0, 122ca <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   122b6:	4632      	mov	r2, r6
   122b8:	2145      	movs	r1, #69	; 0x45
   122ba:	4821      	ldr	r0, [pc, #132]	; (12340 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   122bc:	f00a fac2 	bl	1c844 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   122c0:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   122c4:	4620      	mov	r0, r4
   122c6:	b003      	add	sp, #12
   122c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   122ca:	4601      	mov	r1, r0
   122cc:	2230      	movs	r2, #48	; 0x30
   122ce:	9800      	ldr	r0, [sp, #0]
   122d0:	f00b ff9b 	bl	1e20a <memset>
	att->conn = conn;
   122d4:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   122d6:	2200      	movs	r2, #0
	list->head = NULL;
   122d8:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   122dc:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   122e0:	60ac      	str	r4, [r5, #8]
   122e2:	2300      	movs	r3, #0
   122e4:	4817      	ldr	r0, [pc, #92]	; (12344 <bt_att_accept+0xa4>)
   122e6:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   122e8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   122ea:	f007 fd8f 	bl	19e0c <k_mem_slab_alloc>
   122ee:	4604      	mov	r4, r0
   122f0:	b118      	cbz	r0, 122fa <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   122f2:	2145      	movs	r1, #69	; 0x45
   122f4:	682a      	ldr	r2, [r5, #0]
   122f6:	4814      	ldr	r0, [pc, #80]	; (12348 <bt_att_accept+0xa8>)
   122f8:	e7e0      	b.n	122bc <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   122fa:	4601      	mov	r1, r0
   122fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12300:	9801      	ldr	r0, [sp, #4]
   12302:	f00b ff82 	bl	1e20a <memset>
	chan->chan.chan.ops = &ops;
   12306:	9801      	ldr	r0, [sp, #4]
   12308:	4b10      	ldr	r3, [pc, #64]	; (1234c <bt_att_accept+0xac>)
   1230a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1230c:	30d0      	adds	r0, #208	; 0xd0
   1230e:	f00e ff9c 	bl	2124a <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   12312:	9801      	ldr	r0, [sp, #4]
   12314:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   12318:	2203      	movs	r2, #3
   1231a:	4611      	mov	r1, r2
   1231c:	f00e fffa 	bl	21314 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12320:	9b01      	ldr	r3, [sp, #4]
   12322:	33c8      	adds	r3, #200	; 0xc8
   12324:	e8d3 2fef 	ldaex	r2, [r3]
   12328:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1232c:	2900      	cmp	r1, #0
   1232e:	d1f9      	bne.n	12324 <bt_att_accept+0x84>
	chan->att = att;
   12330:	9b01      	ldr	r3, [sp, #4]
   12332:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   12336:	603b      	str	r3, [r7, #0]
	return 0;
   12338:	e7c4      	b.n	122c4 <bt_att_accept+0x24>
   1233a:	bf00      	nop
   1233c:	200084b8 	.word	0x200084b8
   12340:	00024ec9 	.word	0x00024ec9
   12344:	200084d4 	.word	0x200084d4
   12348:	00024ef3 	.word	0x00024ef3
   1234c:	20008338 	.word	0x20008338

00012350 <chan_cb.isra.0>:
static bt_att_chan_sent_t chan_cb(struct net_buf *buf)
   12350:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   12352:	7800      	ldrb	r0, [r0, #0]
   12354:	f00c fc64 	bl	1ec20 <att_op_get_type>
   12358:	3801      	subs	r0, #1
   1235a:	b2c0      	uxtb	r0, r0
   1235c:	2804      	cmp	r0, #4
   1235e:	bf96      	itet	ls
   12360:	4b02      	ldrls	r3, [pc, #8]	; (1236c <chan_cb.isra.0+0x1c>)
   12362:	2000      	movhi	r0, #0
   12364:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
   12368:	bd08      	pop	{r3, pc}
   1236a:	bf00      	nop
   1236c:	00022038 	.word	0x00022038

00012370 <read_group_cb>:
{
   12370:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12374:	f04f 0800 	mov.w	r8, #0
   12378:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1237c:	4605      	mov	r5, r0
   1237e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12380:	6800      	ldr	r0, [r0, #0]
   12382:	a902      	add	r1, sp, #8
{
   12384:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   12386:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12388:	f88d 8008 	strb.w	r8, [sp, #8]
   1238c:	f8ad 300a 	strh.w	r3, [sp, #10]
   12390:	f00b ffab 	bl	1e2ea <bt_uuid_cmp>
   12394:	b1a0      	cbz	r0, 123c0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12396:	f642 0301 	movw	r3, #10241	; 0x2801
   1239a:	6828      	ldr	r0, [r5, #0]
   1239c:	a903      	add	r1, sp, #12
   1239e:	f88d 800c 	strb.w	r8, [sp, #12]
   123a2:	f8ad 300e 	strh.w	r3, [sp, #14]
   123a6:	f00b ffa0 	bl	1e2ea <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123aa:	b148      	cbz	r0, 123c0 <read_group_cb+0x50>
		if (data->group &&
   123ac:	6923      	ldr	r3, [r4, #16]
   123ae:	b11b      	cbz	r3, 123b8 <read_group_cb+0x48>
   123b0:	885a      	ldrh	r2, [r3, #2]
   123b2:	42b2      	cmp	r2, r6
   123b4:	d200      	bcs.n	123b8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   123b6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   123b8:	2001      	movs	r0, #1
}
   123ba:	b004      	add	sp, #16
   123bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   123c0:	6861      	ldr	r1, [r4, #4]
   123c2:	6828      	ldr	r0, [r5, #0]
   123c4:	f00b ff91 	bl	1e2ea <bt_uuid_cmp>
   123c8:	b110      	cbz	r0, 123d0 <read_group_cb+0x60>
		data->group = NULL;
   123ca:	2300      	movs	r3, #0
   123cc:	6123      	str	r3, [r4, #16]
   123ce:	e7f3      	b.n	123b8 <read_group_cb+0x48>
	if (data->rsp->len &&
   123d0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   123d2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   123d4:	781a      	ldrb	r2, [r3, #0]
   123d6:	b13a      	cbz	r2, 123e8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   123d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   123dc:	8981      	ldrh	r1, [r0, #12]
   123de:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   123e0:	4293      	cmp	r3, r2
   123e2:	da01      	bge.n	123e8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   123e4:	2000      	movs	r0, #0
   123e6:	e7e8      	b.n	123ba <read_group_cb+0x4a>
   123e8:	2104      	movs	r1, #4
   123ea:	3008      	adds	r0, #8
   123ec:	f005 f9aa 	bl	17744 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   123f0:	4b09      	ldr	r3, [pc, #36]	; (12418 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   123f2:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   123f4:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   123f6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   123f8:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   123fa:	68a2      	ldr	r2, [r4, #8]
   123fc:	9300      	str	r3, [sp, #0]
   123fe:	4638      	mov	r0, r7
   12400:	2300      	movs	r3, #0
   12402:	9401      	str	r4, [sp, #4]
   12404:	f00c fce7 	bl	1edd6 <att_chan_read>
	if (read < 0) {
   12408:	2800      	cmp	r0, #0
   1240a:	dbeb      	blt.n	123e4 <read_group_cb+0x74>
	if (!data->group) {
   1240c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1240e:	3800      	subs	r0, #0
   12410:	bf18      	it	ne
   12412:	2001      	movne	r0, #1
   12414:	e7d1      	b.n	123ba <read_group_cb+0x4a>
   12416:	bf00      	nop
   12418:	0001ed5b 	.word	0x0001ed5b

0001241c <chan_send>:
{
   1241c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12420:	688b      	ldr	r3, [r1, #8]
{
   12422:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12424:	781b      	ldrb	r3, [r3, #0]
{
   12426:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12428:	2bd2      	cmp	r3, #210	; 0xd2
{
   1242a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1242c:	d110      	bne.n	12450 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   1242e:	6803      	ldr	r3, [r0, #0]
   12430:	6818      	ldr	r0, [r3, #0]
   12432:	f00d ff64 	bl	202fe <bt_smp_sign>
		if (err) {
   12436:	4606      	mov	r6, r0
   12438:	b150      	cbz	r0, 12450 <chan_send+0x34>
			BT_ERR("Error signing data");
   1243a:	2145      	movs	r1, #69	; 0x45
   1243c:	481f      	ldr	r0, [pc, #124]	; (124bc <chan_send+0xa0>)
   1243e:	f00a fa01 	bl	1c844 <printk>
		net_buf_unref(buf);
   12442:	4620      	mov	r0, r4
   12444:	f005 f868 	bl	17518 <net_buf_unref>
}
   12448:	4630      	mov	r0, r6
   1244a:	b003      	add	sp, #12
   1244c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   12450:	f104 0008 	add.w	r0, r4, #8
   12454:	f00e f832 	bl	204bc <net_buf_simple_headroom>
	state->len = buf->len;
   12458:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1245c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1245e:	b91f      	cbnz	r7, 12468 <chan_send+0x4c>
   12460:	68a0      	ldr	r0, [r4, #8]
   12462:	f7ff ff75 	bl	12350 <chan_cb.isra.0>
   12466:	4607      	mov	r7, r0
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12468:	682b      	ldr	r3, [r5, #0]
   1246a:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   1246c:	f8c5 7138 	str.w	r7, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12470:	681e      	ldr	r6, [r3, #0]
   12472:	f005 f895 	bl	175a0 <net_buf_ref>
   12476:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   1247a:	4b11      	ldr	r3, [pc, #68]	; (124c0 <chan_send+0xa4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1247c:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   1247e:	4299      	cmp	r1, r3
   12480:	d018      	beq.n	124b4 <chan_send+0x98>
	} else if (cb == chan_cfm_sent) {
   12482:	4b10      	ldr	r3, [pc, #64]	; (124c4 <chan_send+0xa8>)
   12484:	4299      	cmp	r1, r3
   12486:	d017      	beq.n	124b8 <chan_send+0x9c>
		return att_sent;
   12488:	4f0f      	ldr	r7, [pc, #60]	; (124c8 <chan_send+0xac>)
   1248a:	4b10      	ldr	r3, [pc, #64]	; (124cc <chan_send+0xb0>)
   1248c:	4810      	ldr	r0, [pc, #64]	; (124d0 <chan_send+0xb4>)
   1248e:	42b9      	cmp	r1, r7
   12490:	bf18      	it	ne
   12492:	4603      	movne	r3, r0
				&chan->chan.chan);
   12494:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12496:	4630      	mov	r0, r6
   12498:	2104      	movs	r1, #4
   1249a:	9500      	str	r5, [sp, #0]
   1249c:	f00c fb45 	bl	1eb2a <bt_l2cap_send_cb>
	if (!err) {
   124a0:	4606      	mov	r6, r0
   124a2:	2800      	cmp	r0, #0
   124a4:	d0cd      	beq.n	12442 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   124a6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   124a8:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   124ac:	fa10 f088 	uxtah	r0, r0, r8
   124b0:	60a0      	str	r0, [r4, #8]
}
   124b2:	e7c9      	b.n	12448 <chan_send+0x2c>
		return att_rsp_sent;
   124b4:	4b07      	ldr	r3, [pc, #28]	; (124d4 <chan_send+0xb8>)
   124b6:	e7ed      	b.n	12494 <chan_send+0x78>
		return att_cfm_sent;
   124b8:	4b07      	ldr	r3, [pc, #28]	; (124d8 <chan_send+0xbc>)
   124ba:	e7eb      	b.n	12494 <chan_send+0x78>
   124bc:	00024f1d 	.word	0x00024f1d
   124c0:	0001efeb 	.word	0x0001efeb
   124c4:	0001efff 	.word	0x0001efff
   124c8:	00012285 	.word	0x00012285
   124cc:	000120c9 	.word	0x000120c9
   124d0:	0001ebf1 	.word	0x0001ebf1
   124d4:	000120b9 	.word	0x000120b9
   124d8:	000120a9 	.word	0x000120a9

000124dc <bt_att_chan_req_send>:
{
   124dc:	b570      	push	{r4, r5, r6, lr}
   124de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   124e0:	4604      	mov	r4, r0
   124e2:	b950      	cbnz	r0, 124fa <bt_att_chan_req_send+0x1e>
   124e4:	4924      	ldr	r1, [pc, #144]	; (12578 <bt_att_chan_req_send+0x9c>)
   124e6:	4825      	ldr	r0, [pc, #148]	; (1257c <bt_att_chan_req_send+0xa0>)
   124e8:	f240 224f 	movw	r2, #591	; 0x24f
   124ec:	f00a f9aa 	bl	1c844 <printk>
   124f0:	f240 214f 	movw	r1, #591	; 0x24f
   124f4:	4820      	ldr	r0, [pc, #128]	; (12578 <bt_att_chan_req_send+0x9c>)
   124f6:	f00a fc4b 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(req);
   124fa:	b955      	cbnz	r5, 12512 <bt_att_chan_req_send+0x36>
   124fc:	491e      	ldr	r1, [pc, #120]	; (12578 <bt_att_chan_req_send+0x9c>)
   124fe:	481f      	ldr	r0, [pc, #124]	; (1257c <bt_att_chan_req_send+0xa0>)
   12500:	f44f 7214 	mov.w	r2, #592	; 0x250
   12504:	f00a f99e 	bl	1c844 <printk>
   12508:	f44f 7114 	mov.w	r1, #592	; 0x250
   1250c:	481a      	ldr	r0, [pc, #104]	; (12578 <bt_att_chan_req_send+0x9c>)
   1250e:	f00a fc3f 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   12512:	686b      	ldr	r3, [r5, #4]
   12514:	b953      	cbnz	r3, 1252c <bt_att_chan_req_send+0x50>
   12516:	4918      	ldr	r1, [pc, #96]	; (12578 <bt_att_chan_req_send+0x9c>)
   12518:	4818      	ldr	r0, [pc, #96]	; (1257c <bt_att_chan_req_send+0xa0>)
   1251a:	f240 2251 	movw	r2, #593	; 0x251
   1251e:	f00a f991 	bl	1c844 <printk>
   12522:	f240 2151 	movw	r1, #593	; 0x251
   12526:	4814      	ldr	r0, [pc, #80]	; (12578 <bt_att_chan_req_send+0x9c>)
   12528:	f00a fc32 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1252c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12530:	b153      	cbz	r3, 12548 <bt_att_chan_req_send+0x6c>
   12532:	4911      	ldr	r1, [pc, #68]	; (12578 <bt_att_chan_req_send+0x9c>)
   12534:	4811      	ldr	r0, [pc, #68]	; (1257c <bt_att_chan_req_send+0xa0>)
   12536:	f240 2252 	movw	r2, #594	; 0x252
   1253a:	f00a f983 	bl	1c844 <printk>
   1253e:	f240 2152 	movw	r1, #594	; 0x252
   12542:	480d      	ldr	r0, [pc, #52]	; (12578 <bt_att_chan_req_send+0x9c>)
   12544:	f00a fc24 	bl	1cd90 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   12548:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   1254c:	2200      	movs	r2, #0
   1254e:	2300      	movs	r3, #0
   12550:	4630      	mov	r0, r6
   12552:	f008 fff3 	bl	1b53c <z_impl_k_sem_take>
   12556:	2800      	cmp	r0, #0
   12558:	db0a      	blt.n	12570 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   1255a:	4620      	mov	r0, r4
   1255c:	4629      	mov	r1, r5
   1255e:	f00c fcdf 	bl	1ef20 <chan_req_send>
	if (err < 0) {
   12562:	1e04      	subs	r4, r0, #0
   12564:	da02      	bge.n	1256c <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   12566:	4630      	mov	r0, r6
   12568:	f008 ffac 	bl	1b4c4 <z_impl_k_sem_give>
}
   1256c:	4620      	mov	r0, r4
   1256e:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   12570:	f06f 040a 	mvn.w	r4, #10
   12574:	e7fa      	b.n	1256c <bt_att_chan_req_send+0x90>
   12576:	bf00      	nop
   12578:	00024f35 	.word	0x00024f35
   1257c:	00022c66 	.word	0x00022c66

00012580 <read_type_cb>:
{
   12580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   12584:	f8d2 8000 	ldr.w	r8, [r2]
{
   12588:	4606      	mov	r6, r0
   1258a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1258c:	6800      	ldr	r0, [r0, #0]
   1258e:	6851      	ldr	r1, [r2, #4]
{
   12590:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   12592:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12596:	f00b fea8 	bl	1e2ea <bt_uuid_cmp>
   1259a:	4607      	mov	r7, r0
   1259c:	2800      	cmp	r0, #0
   1259e:	d13e      	bne.n	1261e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   125a0:	4628      	mov	r0, r5
   125a2:	2215      	movs	r2, #21
   125a4:	4631      	mov	r1, r6
   125a6:	f00d f982 	bl	1f8ae <bt_gatt_check_perm>
   125aa:	4605      	mov	r5, r0
   125ac:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   125ae:	b148      	cbz	r0, 125c4 <read_type_cb+0x44>
		if (data->rsp->len) {
   125b0:	68e3      	ldr	r3, [r4, #12]
   125b2:	781b      	ldrb	r3, [r3, #0]
   125b4:	b923      	cbnz	r3, 125c0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   125b6:	2500      	movs	r5, #0
}
   125b8:	4628      	mov	r0, r5
   125ba:	b003      	add	sp, #12
   125bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   125c0:	7527      	strb	r7, [r4, #20]
   125c2:	e7f8      	b.n	125b6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   125c4:	68a0      	ldr	r0, [r4, #8]
   125c6:	f005 f803 	bl	175d0 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   125ca:	2102      	movs	r1, #2
   125cc:	3008      	adds	r0, #8
   125ce:	f005 f8b9 	bl	17744 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   125d2:	4b14      	ldr	r3, [pc, #80]	; (12624 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   125d4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   125d6:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   125d8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   125dc:	68a2      	ldr	r2, [r4, #8]
   125de:	9300      	str	r3, [sp, #0]
   125e0:	4640      	mov	r0, r8
   125e2:	462b      	mov	r3, r5
   125e4:	9401      	str	r4, [sp, #4]
   125e6:	f00c fbf6 	bl	1edd6 <att_chan_read>
	if (read < 0) {
   125ea:	2800      	cmp	r0, #0
   125ec:	da07      	bge.n	125fe <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   125ee:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   125f2:	bf32      	itee	cc
   125f4:	200e      	movcc	r0, #14
		return -err;
   125f6:	4240      	negcs	r0, r0
   125f8:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   125fa:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   125fc:	e7dc      	b.n	125b8 <read_type_cb+0x38>
	if (!data->item) {
   125fe:	6923      	ldr	r3, [r4, #16]
   12600:	2b00      	cmp	r3, #0
   12602:	d0d8      	beq.n	125b6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12604:	68a0      	ldr	r0, [r4, #8]
   12606:	f00c faeb 	bl	1ebe0 <net_buf_frags_len>
   1260a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1260e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12610:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12612:	7818      	ldrb	r0, [r3, #0]
   12614:	4285      	cmp	r5, r0
   12616:	bf94      	ite	ls
   12618:	2500      	movls	r5, #0
   1261a:	2501      	movhi	r5, #1
   1261c:	e7cc      	b.n	125b8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1261e:	2501      	movs	r5, #1
   12620:	e7ca      	b.n	125b8 <read_type_cb+0x38>
   12622:	bf00      	nop
   12624:	0001ebfd 	.word	0x0001ebfd

00012628 <bt_att_connected>:
{
   12628:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1262a:	2104      	movs	r1, #4
{
   1262c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1262e:	6800      	ldr	r0, [r0, #0]
   12630:	f00c faab 	bl	1eb8a <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   12634:	4605      	mov	r5, r0
   12636:	b950      	cbnz	r0, 1264e <bt_att_connected+0x26>
   12638:	4919      	ldr	r1, [pc, #100]	; (126a0 <bt_att_connected+0x78>)
   1263a:	481a      	ldr	r0, [pc, #104]	; (126a4 <bt_att_connected+0x7c>)
   1263c:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   12640:	f00a f900 	bl	1c844 <printk>
   12644:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   12648:	4815      	ldr	r0, [pc, #84]	; (126a0 <bt_att_connected+0x78>)
   1264a:	f00a fba1 	bl	1cd90 <assert_post_action>
	struct bt_att *att = att_chan->att;
   1264e:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   12652:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12654:	b91b      	cbnz	r3, 1265e <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   12656:	f105 000c 	add.w	r0, r5, #12
   1265a:	f00e fdf6 	bl	2124a <z_impl_k_queue_init>
	parent->next = child;
   1265e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   12660:	f504 739a 	add.w	r3, r4, #308	; 0x134
   12664:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   12668:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   1266a:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1266c:	b902      	cbnz	r2, 12670 <bt_att_connected+0x48>
	list->tail = node;
   1266e:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12670:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   12674:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   12678:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1267a:	bf58      	it	pl
   1267c:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1267e:	f04f 0230 	mov.w	r2, #48	; 0x30
   12682:	bf5c      	itt	pl
   12684:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   12688:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   1268c:	2100      	movs	r1, #0
   1268e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   12692:	f00b fdba 	bl	1e20a <memset>
   12696:	4b04      	ldr	r3, [pc, #16]	; (126a8 <bt_att_connected+0x80>)
   12698:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   1269c:	bd38      	pop	{r3, r4, r5, pc}
   1269e:	bf00      	nop
   126a0:	00024f35 	.word	0x00024f35
   126a4:	00022c66 	.word	0x00022c66
   126a8:	00013001 	.word	0x00013001

000126ac <bt_att_chan_create_pdu>:
{
   126ac:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   126ae:	1c53      	adds	r3, r2, #1
   126b0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   126b4:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   126b6:	4293      	cmp	r3, r2
   126b8:	d906      	bls.n	126c8 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   126ba:	2157      	movs	r1, #87	; 0x57
   126bc:	4813      	ldr	r0, [pc, #76]	; (1270c <bt_att_chan_create_pdu+0x60>)
   126be:	f00a f8c1 	bl	1c844 <printk>
		return NULL;
   126c2:	2400      	movs	r4, #0
}
   126c4:	4620      	mov	r0, r4
   126c6:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   126c8:	4608      	mov	r0, r1
   126ca:	f00c faa9 	bl	1ec20 <att_op_get_type>
   126ce:	2802      	cmp	r0, #2
   126d0:	d001      	beq.n	126d6 <bt_att_chan_create_pdu+0x2a>
   126d2:	2804      	cmp	r0, #4
   126d4:	d10e      	bne.n	126f4 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   126d6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   126da:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   126dc:	2100      	movs	r1, #0
   126de:	4608      	mov	r0, r1
   126e0:	f00c fa20 	bl	1eb24 <bt_l2cap_create_pdu_timeout>
   126e4:	4604      	mov	r4, r0
	if (!buf) {
   126e6:	b950      	cbnz	r0, 126fe <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   126e8:	462a      	mov	r2, r5
   126ea:	2145      	movs	r1, #69	; 0x45
   126ec:	4808      	ldr	r0, [pc, #32]	; (12710 <bt_att_chan_create_pdu+0x64>)
   126ee:	f00a f8a9 	bl	1c844 <printk>
		return NULL;
   126f2:	e7e7      	b.n	126c4 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   126f4:	f04f 32ff 	mov.w	r2, #4294967295
   126f8:	f04f 33ff 	mov.w	r3, #4294967295
   126fc:	e7ee      	b.n	126dc <bt_att_chan_create_pdu+0x30>
   126fe:	2101      	movs	r1, #1
   12700:	3008      	adds	r0, #8
   12702:	f005 f81f 	bl	17744 <net_buf_simple_add>
	hdr->code = op;
   12706:	7005      	strb	r5, [r0, #0]
	return buf;
   12708:	e7dc      	b.n	126c4 <bt_att_chan_create_pdu+0x18>
   1270a:	bf00      	nop
   1270c:	00024f64 	.word	0x00024f64
   12710:	00024c7b 	.word	0x00024c7b

00012714 <att_indicate>:
{
   12714:	b570      	push	{r4, r5, r6, lr}
   12716:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   12718:	f101 0008 	add.w	r0, r1, #8
   1271c:	460d      	mov	r5, r1
   1271e:	f00d fec5 	bl	204ac <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   12722:	6826      	ldr	r6, [r4, #0]
   12724:	4601      	mov	r1, r0
   12726:	89ab      	ldrh	r3, [r5, #12]
   12728:	68aa      	ldr	r2, [r5, #8]
   1272a:	6830      	ldr	r0, [r6, #0]
   1272c:	f00d f956 	bl	1f9dc <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   12730:	211e      	movs	r1, #30
   12732:	2200      	movs	r2, #0
   12734:	4620      	mov	r0, r4
   12736:	f7ff ffb9 	bl	126ac <bt_att_chan_create_pdu>
	if (!buf) {
   1273a:	4601      	mov	r1, r0
   1273c:	b118      	cbz	r0, 12746 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1273e:	4620      	mov	r0, r4
   12740:	4a02      	ldr	r2, [pc, #8]	; (1274c <att_indicate+0x38>)
   12742:	f00c fc2a 	bl	1ef9a <bt_att_chan_send_rsp>
}
   12746:	2000      	movs	r0, #0
   12748:	bd70      	pop	{r4, r5, r6, pc}
   1274a:	bf00      	nop
   1274c:	0001efff 	.word	0x0001efff

00012750 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   12750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12754:	4688      	mov	r8, r1
   12756:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   12758:	2101      	movs	r1, #1
   1275a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1275c:	4605      	mov	r5, r0
   1275e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   12760:	f7ff ffa4 	bl	126ac <bt_att_chan_create_pdu>
	if (!buf) {
   12764:	4604      	mov	r4, r0
   12766:	b178      	cbz	r0, 12788 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   12768:	2104      	movs	r1, #4
   1276a:	3008      	adds	r0, #8
   1276c:	f004 ffea 	bl	17744 <net_buf_simple_add>
	rsp->request = req;
   12770:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   12774:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   12776:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1277a:	4621      	mov	r1, r4
   1277c:	4628      	mov	r0, r5
}
   1277e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   12782:	4a02      	ldr	r2, [pc, #8]	; (1278c <send_err_rsp.part.0+0x3c>)
   12784:	f00c bc09 	b.w	1ef9a <bt_att_chan_send_rsp>
}
   12788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1278c:	0001efeb 	.word	0x0001efeb

00012790 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   12790:	898b      	ldrh	r3, [r1, #12]
{
   12792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12796:	4604      	mov	r4, r0
   12798:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   1279a:	b933      	cbnz	r3, 127aa <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   1279c:	2145      	movs	r1, #69	; 0x45
   1279e:	4838      	ldr	r0, [pc, #224]	; (12880 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   127a0:	f00a f850 	bl	1c844 <printk>
}
   127a4:	2000      	movs	r0, #0
   127a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   127aa:	2101      	movs	r1, #1
   127ac:	f108 0008 	add.w	r0, r8, #8
   127b0:	f004 ffaa 	bl	17708 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   127b4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   127b8:	4605      	mov	r5, r0
   127ba:	2b00      	cmp	r3, #0
   127bc:	d0f2      	beq.n	127a4 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   127be:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   127c0:	7802      	ldrb	r2, [r0, #0]
   127c2:	4930      	ldr	r1, [pc, #192]	; (12884 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   127c4:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   127c8:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   127cc:	4290      	cmp	r0, r2
   127ce:	d114      	bne.n	127fa <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   127d0:	00d8      	lsls	r0, r3, #3
   127d2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   127d6:	789f      	ldrb	r7, [r3, #2]
   127d8:	2f01      	cmp	r7, #1
   127da:	d123      	bne.n	12824 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   127dc:	34c0      	adds	r4, #192	; 0xc0
   127de:	e8d4 3fef 	ldaex	r3, [r4]
   127e2:	f043 0201 	orr.w	r2, r3, #1
   127e6:	e8c4 2fec 	stlex	ip, r2, [r4]
   127ea:	f1bc 0f00 	cmp.w	ip, #0
   127ee:	d1f6      	bne.n	127de <bt_att_recv+0x4e>
   127f0:	07da      	lsls	r2, r3, #31
   127f2:	d528      	bpl.n	12846 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   127f4:	2157      	movs	r1, #87	; 0x57
   127f6:	4824      	ldr	r0, [pc, #144]	; (12888 <bt_att_recv+0xf8>)
   127f8:	e7d2      	b.n	127a0 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   127fa:	3301      	adds	r3, #1
   127fc:	2b1c      	cmp	r3, #28
   127fe:	d1e3      	bne.n	127c8 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   12800:	2157      	movs	r1, #87	; 0x57
   12802:	4822      	ldr	r0, [pc, #136]	; (1288c <bt_att_recv+0xfc>)
   12804:	f00a f81e 	bl	1c844 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   12808:	7829      	ldrb	r1, [r5, #0]
   1280a:	4608      	mov	r0, r1
   1280c:	f00c fa08 	bl	1ec20 <att_op_get_type>
   12810:	2800      	cmp	r0, #0
   12812:	d0c7      	beq.n	127a4 <bt_att_recv+0x14>
	if (!req) {
   12814:	2900      	cmp	r1, #0
   12816:	d0c5      	beq.n	127a4 <bt_att_recv+0x14>
   12818:	2306      	movs	r3, #6
   1281a:	2200      	movs	r2, #0
   1281c:	4630      	mov	r0, r6
   1281e:	f7ff ff97 	bl	12750 <send_err_rsp.part.0>
   12822:	e7bf      	b.n	127a4 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   12824:	2f05      	cmp	r7, #5
   12826:	d10e      	bne.n	12846 <bt_att_recv+0xb6>
   12828:	34c0      	adds	r4, #192	; 0xc0
   1282a:	e8d4 3fef 	ldaex	r3, [r4]
   1282e:	f043 0202 	orr.w	r2, r3, #2
   12832:	e8c4 2fec 	stlex	ip, r2, [r4]
   12836:	f1bc 0f00 	cmp.w	ip, #0
   1283a:	d1f6      	bne.n	1282a <bt_att_recv+0x9a>
   1283c:	079b      	lsls	r3, r3, #30
   1283e:	d502      	bpl.n	12846 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   12840:	2157      	movs	r1, #87	; 0x57
   12842:	4813      	ldr	r0, [pc, #76]	; (12890 <bt_att_recv+0x100>)
   12844:	e7ac      	b.n	127a0 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   12846:	180b      	adds	r3, r1, r0
   12848:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   1284c:	7859      	ldrb	r1, [r3, #1]
   1284e:	4291      	cmp	r1, r2
   12850:	d908      	bls.n	12864 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   12852:	2145      	movs	r1, #69	; 0x45
   12854:	782b      	ldrb	r3, [r5, #0]
   12856:	480f      	ldr	r0, [pc, #60]	; (12894 <bt_att_recv+0x104>)
   12858:	f009 fff4 	bl	1c844 <printk>
	if (handler->type == ATT_REQUEST && err) {
   1285c:	2f01      	cmp	r7, #1
   1285e:	d1a1      	bne.n	127a4 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   12860:	2304      	movs	r3, #4
   12862:	e008      	b.n	12876 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   12864:	685b      	ldr	r3, [r3, #4]
   12866:	4641      	mov	r1, r8
   12868:	4630      	mov	r0, r6
   1286a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1286c:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   1286e:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   12870:	d198      	bne.n	127a4 <bt_att_recv+0x14>
   12872:	2800      	cmp	r0, #0
   12874:	d096      	beq.n	127a4 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   12876:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   12878:	2900      	cmp	r1, #0
   1287a:	d093      	beq.n	127a4 <bt_att_recv+0x14>
   1287c:	e7cd      	b.n	1281a <bt_att_recv+0x8a>
   1287e:	bf00      	nop
   12880:	00024f8e 	.word	0x00024f8e
   12884:	0002204c 	.word	0x0002204c
   12888:	00024fae 	.word	0x00024fae
   1288c:	00025017 	.word	0x00025017
   12890:	00024fcf 	.word	0x00024fcf
   12894:	00024ff3 	.word	0x00024ff3

00012898 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1289c:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1289e:	6803      	ldr	r3, [r0, #0]
   128a0:	460e      	mov	r6, r1
   128a2:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   128a4:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   128a6:	bf18      	it	ne
   128a8:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   128aa:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   128ac:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   128ae:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   128b0:	f00d f8bf 	bl	1fa32 <bt_gatt_change_aware>
   128b4:	2800      	cmp	r0, #0
   128b6:	d04b      	beq.n	12950 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   128b8:	2f00      	cmp	r7, #0
   128ba:	d04b      	beq.n	12954 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   128bc:	2218      	movs	r2, #24
   128be:	2100      	movs	r1, #0
   128c0:	4668      	mov	r0, sp
   128c2:	f00b fca2 	bl	1e20a <memset>
	if (rsp) {
   128c6:	f1b8 0f00 	cmp.w	r8, #0
   128ca:	d122      	bne.n	12912 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   128cc:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   128ce:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   128d2:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   128d4:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   128d6:	9300      	str	r3, [sp, #0]
	data.value = value;
   128d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   128da:	4638      	mov	r0, r7
	data.value = value;
   128dc:	9303      	str	r3, [sp, #12]
	data.len = len;
   128de:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   128e2:	4a1d      	ldr	r2, [pc, #116]	; (12958 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   128e4:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   128e8:	2301      	movs	r3, #1
   128ea:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   128ee:	466b      	mov	r3, sp
	data.req = req;
   128f0:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   128f4:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   128f8:	f00c f9d8 	bl	1ecac <bt_gatt_foreach_attr>
	if (data.err) {
   128fc:	f89d 4014 	ldrb.w	r4, [sp, #20]
   12900:	b1f4      	cbz	r4, 12940 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   12902:	f1b8 0f00 	cmp.w	r8, #0
   12906:	d10e      	bne.n	12926 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12908:	2400      	movs	r4, #0
}
   1290a:	4620      	mov	r0, r4
   1290c:	b007      	add	sp, #28
   1290e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   12912:	2200      	movs	r2, #0
   12914:	4641      	mov	r1, r8
   12916:	4628      	mov	r0, r5
   12918:	f7ff fec8 	bl	126ac <bt_att_chan_create_pdu>
   1291c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1291e:	2800      	cmp	r0, #0
   12920:	d1d4      	bne.n	128cc <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   12922:	240e      	movs	r4, #14
   12924:	e7f1      	b.n	1290a <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12926:	9801      	ldr	r0, [sp, #4]
   12928:	f004 fdf6 	bl	17518 <net_buf_unref>
	if (!req) {
   1292c:	2e00      	cmp	r6, #0
   1292e:	d0eb      	beq.n	12908 <att_write_rsp.constprop.0+0x70>
   12930:	463a      	mov	r2, r7
   12932:	4631      	mov	r1, r6
   12934:	4628      	mov	r0, r5
   12936:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1293a:	f7ff ff09 	bl	12750 <send_err_rsp.part.0>
   1293e:	e7e3      	b.n	12908 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   12940:	9901      	ldr	r1, [sp, #4]
   12942:	2900      	cmp	r1, #0
   12944:	d0e0      	beq.n	12908 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12946:	4628      	mov	r0, r5
   12948:	4a04      	ldr	r2, [pc, #16]	; (1295c <att_write_rsp.constprop.0+0xc4>)
   1294a:	f00c fb26 	bl	1ef9a <bt_att_chan_send_rsp>
   1294e:	e7dc      	b.n	1290a <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12950:	2412      	movs	r4, #18
   12952:	e7da      	b.n	1290a <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   12954:	2401      	movs	r4, #1
   12956:	e7d8      	b.n	1290a <att_write_rsp.constprop.0+0x72>
   12958:	0001ed7b 	.word	0x0001ed7b
   1295c:	0001efeb 	.word	0x0001efeb

00012960 <bt_att_create_pdu>:
{
   12960:	b570      	push	{r4, r5, r6, lr}
   12962:	460e      	mov	r6, r1
   12964:	4615      	mov	r5, r2
	att = att_get(conn);
   12966:	f7ff fbb7 	bl	120d8 <att_get>
	if (!att) {
   1296a:	b190      	cbz	r0, 12992 <bt_att_create_pdu+0x32>
	return list->head;
   1296c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1296e:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12970:	b15b      	cbz	r3, 1298a <bt_att_create_pdu+0x2a>
   12972:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12976:	d008      	beq.n	1298a <bt_att_create_pdu+0x2a>
	return node->next;
   12978:	681b      	ldr	r3, [r3, #0]
   1297a:	b10b      	cbz	r3, 12980 <bt_att_create_pdu+0x20>
   1297c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12980:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   12984:	428a      	cmp	r2, r1
   12986:	d906      	bls.n	12996 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12988:	b95b      	cbnz	r3, 129a2 <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1298a:	2157      	movs	r1, #87	; 0x57
   1298c:	480a      	ldr	r0, [pc, #40]	; (129b8 <bt_att_create_pdu+0x58>)
   1298e:	f009 ff59 	bl	1c844 <printk>
}
   12992:	2000      	movs	r0, #0
   12994:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   12996:	462a      	mov	r2, r5
   12998:	4631      	mov	r1, r6
}
   1299a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1299e:	f7ff be85 	b.w	126ac <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   129a2:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   129a6:	d004      	beq.n	129b2 <bt_att_create_pdu+0x52>
	return node->next;
   129a8:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   129ac:	b10c      	cbz	r4, 129b2 <bt_att_create_pdu+0x52>
   129ae:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   129b2:	4618      	mov	r0, r3
   129b4:	4623      	mov	r3, r4
   129b6:	e7e3      	b.n	12980 <bt_att_create_pdu+0x20>
   129b8:	00025036 	.word	0x00025036

000129bc <att_read_group_req>:
{
   129bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   129c0:	898c      	ldrh	r4, [r1, #12]
{
   129c2:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   129c4:	3c04      	subs	r4, #4
   129c6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   129c8:	2c02      	cmp	r4, #2
{
   129ca:	4608      	mov	r0, r1
   129cc:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   129ce:	d001      	beq.n	129d4 <att_read_group_req+0x18>
   129d0:	2c10      	cmp	r4, #16
   129d2:	d16f      	bne.n	12ab4 <att_read_group_req+0xf8>
   129d4:	2104      	movs	r1, #4
   129d6:	3008      	adds	r0, #8
   129d8:	f004 fe96 	bl	17708 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   129dc:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   129e0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   129e2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   129e4:	1d01      	adds	r1, r0, #4
   129e6:	4622      	mov	r2, r4
   129e8:	4640      	mov	r0, r8
   129ea:	f00b fcac 	bl	1e346 <bt_uuid_create>
   129ee:	2800      	cmp	r0, #0
   129f0:	d062      	beq.n	12ab8 <att_read_group_req+0xfc>
	if (!start || !end) {
   129f2:	2e00      	cmp	r6, #0
   129f4:	d03a      	beq.n	12a6c <att_read_group_req+0xb0>
   129f6:	2400      	movs	r4, #0
   129f8:	2f00      	cmp	r7, #0
   129fa:	d036      	beq.n	12a6a <att_read_group_req+0xae>
	if (start > end) {
   129fc:	42be      	cmp	r6, r7
   129fe:	d835      	bhi.n	12a6c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12a00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12a04:	4640      	mov	r0, r8
   12a06:	a901      	add	r1, sp, #4
   12a08:	f88d 4004 	strb.w	r4, [sp, #4]
   12a0c:	f8ad 3006 	strh.w	r3, [sp, #6]
   12a10:	f00b fc6b 	bl	1e2ea <bt_uuid_cmp>
   12a14:	2800      	cmp	r0, #0
   12a16:	d134      	bne.n	12a82 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12a18:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12a1a:	2214      	movs	r2, #20
   12a1c:	2100      	movs	r1, #0
   12a1e:	a807      	add	r0, sp, #28
   12a20:	f00b fbf3 	bl	1e20a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12a24:	2201      	movs	r2, #1
   12a26:	2111      	movs	r1, #17
   12a28:	4620      	mov	r0, r4
   12a2a:	f7ff ff99 	bl	12960 <bt_att_create_pdu>
   12a2e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12a30:	2800      	cmp	r0, #0
   12a32:	d041      	beq.n	12ab8 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   12a34:	2101      	movs	r1, #1
   12a36:	3008      	adds	r0, #8
	data.uuid = uuid;
   12a38:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12a3c:	f004 fe82 	bl	17744 <net_buf_simple_add>
	data.rsp->len = 0U;
   12a40:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12a44:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12a46:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12a48:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12a4c:	4639      	mov	r1, r7
   12a4e:	4630      	mov	r0, r6
   12a50:	4a1a      	ldr	r2, [pc, #104]	; (12abc <att_read_group_req+0x100>)
	data.group = NULL;
   12a52:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12a56:	f00c f929 	bl	1ecac <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a5c:	781c      	ldrb	r4, [r3, #0]
   12a5e:	bb1c      	cbnz	r4, 12aa8 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   12a60:	9809      	ldr	r0, [sp, #36]	; 0x24
   12a62:	f004 fd59 	bl	17518 <net_buf_unref>
	if (!req) {
   12a66:	230a      	movs	r3, #10
   12a68:	e018      	b.n	12a9c <att_read_group_req+0xe0>
			*err = 0U;
   12a6a:	463e      	mov	r6, r7
	if (!req) {
   12a6c:	2301      	movs	r3, #1
   12a6e:	4632      	mov	r2, r6
   12a70:	2110      	movs	r1, #16
   12a72:	4628      	mov	r0, r5
   12a74:	f7ff fe6c 	bl	12750 <send_err_rsp.part.0>
		return 0;
   12a78:	2400      	movs	r4, #0
}
   12a7a:	4620      	mov	r0, r4
   12a7c:	b00c      	add	sp, #48	; 0x30
   12a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12a82:	f642 0301 	movw	r3, #10241	; 0x2801
   12a86:	4640      	mov	r0, r8
   12a88:	a907      	add	r1, sp, #28
   12a8a:	f88d 401c 	strb.w	r4, [sp, #28]
   12a8e:	f8ad 301e 	strh.w	r3, [sp, #30]
   12a92:	f00b fc2a 	bl	1e2ea <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12a96:	2800      	cmp	r0, #0
   12a98:	d0be      	beq.n	12a18 <att_read_group_req+0x5c>
	if (!req) {
   12a9a:	2310      	movs	r3, #16
   12a9c:	4632      	mov	r2, r6
   12a9e:	2110      	movs	r1, #16
   12aa0:	4628      	mov	r0, r5
   12aa2:	f7ff fe55 	bl	12750 <send_err_rsp.part.0>
		return 0;
   12aa6:	e7e8      	b.n	12a7a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12aa8:	4628      	mov	r0, r5
   12aaa:	4a05      	ldr	r2, [pc, #20]	; (12ac0 <att_read_group_req+0x104>)
   12aac:	9909      	ldr	r1, [sp, #36]	; 0x24
   12aae:	f00c fa74 	bl	1ef9a <bt_att_chan_send_rsp>
	return 0;
   12ab2:	e7e1      	b.n	12a78 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   12ab4:	2404      	movs	r4, #4
   12ab6:	e7e0      	b.n	12a7a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12ab8:	240e      	movs	r4, #14
   12aba:	e7de      	b.n	12a7a <att_read_group_req+0xbe>
   12abc:	00012371 	.word	0x00012371
   12ac0:	0001efeb 	.word	0x0001efeb

00012ac4 <att_read_mult_req>:
{
   12ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12ac8:	6886      	ldr	r6, [r0, #8]
{
   12aca:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   12acc:	2210      	movs	r2, #16
{
   12ace:	4604      	mov	r4, r0
   12ad0:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   12ad2:	4668      	mov	r0, sp
   12ad4:	2100      	movs	r1, #0
   12ad6:	f00b fb98 	bl	1e20a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12ada:	2200      	movs	r2, #0
   12adc:	210f      	movs	r1, #15
   12ade:	4630      	mov	r0, r6
   12ae0:	f7ff ff3e 	bl	12960 <bt_att_create_pdu>
   12ae4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12ae6:	b360      	cbz	r0, 12b42 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12ae8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12aec:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12b48 <att_read_mult_req+0x84>
	data.chan = chan;
   12af0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   12af2:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12af6:	89ab      	ldrh	r3, [r5, #12]
   12af8:	2b01      	cmp	r3, #1
   12afa:	d805      	bhi.n	12b08 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12afc:	4620      	mov	r0, r4
   12afe:	4a13      	ldr	r2, [pc, #76]	; (12b4c <att_read_mult_req+0x88>)
   12b00:	9902      	ldr	r1, [sp, #8]
   12b02:	f00c fa4a 	bl	1ef9a <bt_att_chan_send_rsp>
   12b06:	e018      	b.n	12b3a <att_read_mult_req+0x76>
   12b08:	4638      	mov	r0, r7
   12b0a:	f00d fccf 	bl	204ac <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b0e:	466b      	mov	r3, sp
   12b10:	464a      	mov	r2, r9
   12b12:	4601      	mov	r1, r0
   12b14:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12b16:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b1a:	f00c f8c7 	bl	1ecac <bt_gatt_foreach_attr>
		if (data.err) {
   12b1e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12b22:	2b00      	cmp	r3, #0
   12b24:	d0e7      	beq.n	12af6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   12b26:	9802      	ldr	r0, [sp, #8]
   12b28:	f004 fcf6 	bl	17518 <net_buf_unref>
	if (!req) {
   12b2c:	4632      	mov	r2, r6
   12b2e:	210e      	movs	r1, #14
   12b30:	4620      	mov	r0, r4
   12b32:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12b36:	f7ff fe0b 	bl	12750 <send_err_rsp.part.0>
	return 0;
   12b3a:	2000      	movs	r0, #0
}
   12b3c:	b005      	add	sp, #20
   12b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   12b42:	200e      	movs	r0, #14
   12b44:	e7fa      	b.n	12b3c <att_read_mult_req+0x78>
   12b46:	bf00      	nop
   12b48:	0001f013 	.word	0x0001f013
   12b4c:	0001efeb 	.word	0x0001efeb

00012b50 <att_read_rsp>:
{
   12b50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12b54:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12b58:	4605      	mov	r5, r0
   12b5a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12b5c:	4640      	mov	r0, r8
   12b5e:	2101      	movs	r1, #1
{
   12b60:	4614      	mov	r4, r2
   12b62:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12b64:	f00c ff65 	bl	1fa32 <bt_gatt_change_aware>
   12b68:	b390      	cbz	r0, 12bd0 <att_read_rsp+0x80>
	if (!handle) {
   12b6a:	b39e      	cbz	r6, 12bd4 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12b6c:	2210      	movs	r2, #16
   12b6e:	2100      	movs	r1, #0
   12b70:	4668      	mov	r0, sp
   12b72:	f00b fb4a 	bl	1e20a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12b76:	2200      	movs	r2, #0
   12b78:	4621      	mov	r1, r4
   12b7a:	4640      	mov	r0, r8
   12b7c:	f7ff fef0 	bl	12960 <bt_att_create_pdu>
   12b80:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12b82:	b348      	cbz	r0, 12bd8 <att_read_rsp+0x88>
	data.offset = offset;
   12b84:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b88:	4631      	mov	r1, r6
	data.offset = offset;
   12b8a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12b8e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b90:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12b92:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b96:	4a11      	ldr	r2, [pc, #68]	; (12bdc <att_read_rsp+0x8c>)
   12b98:	466b      	mov	r3, sp
	data.chan = chan;
   12b9a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b9c:	f00c f886 	bl	1ecac <bt_gatt_foreach_attr>
	if (data.err) {
   12ba0:	f89d 400c 	ldrb.w	r4, [sp, #12]
   12ba4:	b174      	cbz	r4, 12bc4 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   12ba6:	9802      	ldr	r0, [sp, #8]
   12ba8:	f004 fcb6 	bl	17518 <net_buf_unref>
	if (!req) {
   12bac:	4632      	mov	r2, r6
   12bae:	4639      	mov	r1, r7
   12bb0:	4628      	mov	r0, r5
   12bb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12bb6:	f7ff fdcb 	bl	12750 <send_err_rsp.part.0>
		return 0;
   12bba:	2400      	movs	r4, #0
}
   12bbc:	4620      	mov	r0, r4
   12bbe:	b004      	add	sp, #16
   12bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12bc4:	4628      	mov	r0, r5
   12bc6:	4a06      	ldr	r2, [pc, #24]	; (12be0 <att_read_rsp+0x90>)
   12bc8:	9902      	ldr	r1, [sp, #8]
   12bca:	f00c f9e6 	bl	1ef9a <bt_att_chan_send_rsp>
	return 0;
   12bce:	e7f5      	b.n	12bbc <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12bd0:	2412      	movs	r4, #18
   12bd2:	e7f3      	b.n	12bbc <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12bd4:	2401      	movs	r4, #1
   12bd6:	e7f1      	b.n	12bbc <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12bd8:	240e      	movs	r4, #14
   12bda:	e7ef      	b.n	12bbc <att_read_rsp+0x6c>
   12bdc:	0001f013 	.word	0x0001f013
   12be0:	0001efeb 	.word	0x0001efeb

00012be4 <att_read_type_req>:
{
   12be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12be8:	898c      	ldrh	r4, [r1, #12]
{
   12bea:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12bec:	3c04      	subs	r4, #4
   12bee:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12bf0:	2c02      	cmp	r4, #2
{
   12bf2:	4608      	mov	r0, r1
   12bf4:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12bf6:	d001      	beq.n	12bfc <att_read_type_req+0x18>
   12bf8:	2c10      	cmp	r4, #16
   12bfa:	d150      	bne.n	12c9e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12bfc:	2104      	movs	r1, #4
   12bfe:	3008      	adds	r0, #8
   12c00:	f004 fd82 	bl	17708 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12c04:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12c08:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12c0a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12c0c:	1d01      	adds	r1, r0, #4
   12c0e:	4622      	mov	r2, r4
   12c10:	4640      	mov	r0, r8
   12c12:	f00b fb98 	bl	1e346 <bt_uuid_create>
   12c16:	b188      	cbz	r0, 12c3c <att_read_type_req+0x58>
	if (!start || !end) {
   12c18:	b19e      	cbz	r6, 12c42 <att_read_type_req+0x5e>
   12c1a:	b18f      	cbz	r7, 12c40 <att_read_type_req+0x5c>
	if (start > end) {
   12c1c:	42b7      	cmp	r7, r6
   12c1e:	d310      	bcc.n	12c42 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12c20:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12c22:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12c24:	2100      	movs	r1, #0
   12c26:	eb0d 0002 	add.w	r0, sp, r2
   12c2a:	f00b faee 	bl	1e20a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12c2e:	2201      	movs	r2, #1
   12c30:	2109      	movs	r1, #9
   12c32:	4620      	mov	r0, r4
   12c34:	f7ff fe94 	bl	12960 <bt_att_create_pdu>
   12c38:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12c3a:	b968      	cbnz	r0, 12c58 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12c3c:	240e      	movs	r4, #14
   12c3e:	e007      	b.n	12c50 <att_read_type_req+0x6c>
			*err = 0U;
   12c40:	463e      	mov	r6, r7
	if (!req) {
   12c42:	2301      	movs	r3, #1
   12c44:	4632      	mov	r2, r6
   12c46:	2108      	movs	r1, #8
   12c48:	4628      	mov	r0, r5
   12c4a:	f7ff fd81 	bl	12750 <send_err_rsp.part.0>
		return 0;
   12c4e:	2400      	movs	r4, #0
}
   12c50:	4620      	mov	r0, r4
   12c52:	b00c      	add	sp, #48	; 0x30
   12c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12c58:	2101      	movs	r1, #1
   12c5a:	3008      	adds	r0, #8
	data.uuid = uuid;
   12c5c:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12c60:	f004 fd70 	bl	17744 <net_buf_simple_add>
	data.rsp->len = 0U;
   12c64:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12c68:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12c6a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12c6c:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12c6e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12c72:	4a0c      	ldr	r2, [pc, #48]	; (12ca4 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12c74:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12c78:	4630      	mov	r0, r6
   12c7a:	ab06      	add	r3, sp, #24
   12c7c:	f00c f816 	bl	1ecac <bt_gatt_foreach_attr>
	if (data.err) {
   12c80:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12c84:	b12c      	cbz	r4, 12c92 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12c86:	9808      	ldr	r0, [sp, #32]
   12c88:	f004 fc46 	bl	17518 <net_buf_unref>
	if (!req) {
   12c8c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12c90:	e7d8      	b.n	12c44 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12c92:	4628      	mov	r0, r5
   12c94:	4a04      	ldr	r2, [pc, #16]	; (12ca8 <att_read_type_req+0xc4>)
   12c96:	9908      	ldr	r1, [sp, #32]
   12c98:	f00c f97f 	bl	1ef9a <bt_att_chan_send_rsp>
	return 0;
   12c9c:	e7d8      	b.n	12c50 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12c9e:	2404      	movs	r4, #4
   12ca0:	e7d6      	b.n	12c50 <att_read_type_req+0x6c>
   12ca2:	bf00      	nop
   12ca4:	00012581 	.word	0x00012581
   12ca8:	0001efeb 	.word	0x0001efeb

00012cac <att_find_type_req>:
{
   12cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12cb0:	4688      	mov	r8, r1
   12cb2:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12cb4:	2106      	movs	r1, #6
   12cb6:	b086      	sub	sp, #24
   12cb8:	f108 0008 	add.w	r0, r8, #8
   12cbc:	f004 fd24 	bl	17708 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12cc0:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12cc2:	b317      	cbz	r7, 12d0a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12cc4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12cc8:	f1b9 0f00 	cmp.w	r9, #0
   12ccc:	d01c      	beq.n	12d08 <att_find_type_req+0x5c>
	if (start > end) {
   12cce:	454f      	cmp	r7, r9
   12cd0:	d81b      	bhi.n	12d0a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12cd2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12cd4:	2400      	movs	r4, #0
   12cd6:	f8ad 3002 	strh.w	r3, [sp, #2]
   12cda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12cde:	4668      	mov	r0, sp
   12ce0:	a901      	add	r1, sp, #4
	value = buf->data;
   12ce2:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12ce6:	f88d 4000 	strb.w	r4, [sp]
   12cea:	f88d 4004 	strb.w	r4, [sp, #4]
   12cee:	f8ad 3006 	strh.w	r3, [sp, #6]
   12cf2:	f00b fafa 	bl	1e2ea <bt_uuid_cmp>
   12cf6:	4606      	mov	r6, r0
   12cf8:	b190      	cbz	r0, 12d20 <att_find_type_req+0x74>
	if (!req) {
   12cfa:	230a      	movs	r3, #10
   12cfc:	463a      	mov	r2, r7
   12cfe:	2106      	movs	r1, #6
   12d00:	4628      	mov	r0, r5
   12d02:	f7ff fd25 	bl	12750 <send_err_rsp.part.0>
		return 0;
   12d06:	e007      	b.n	12d18 <att_find_type_req+0x6c>
			*err = 0U;
   12d08:	464f      	mov	r7, r9
	if (!req) {
   12d0a:	2301      	movs	r3, #1
   12d0c:	463a      	mov	r2, r7
   12d0e:	2106      	movs	r1, #6
   12d10:	4628      	mov	r0, r5
   12d12:	f7ff fd1d 	bl	12750 <send_err_rsp.part.0>
		return 0;
   12d16:	2400      	movs	r4, #0
}
   12d18:	4620      	mov	r0, r4
   12d1a:	b006      	add	sp, #24
   12d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12d20:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12d24:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12d28:	4601      	mov	r1, r0
   12d2a:	2214      	movs	r2, #20
   12d2c:	a801      	add	r0, sp, #4
   12d2e:	f00b fa6c 	bl	1e20a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12d32:	4632      	mov	r2, r6
   12d34:	2107      	movs	r1, #7
   12d36:	4640      	mov	r0, r8
   12d38:	f7ff fe12 	bl	12960 <bt_att_create_pdu>
   12d3c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12d3e:	b1e0      	cbz	r0, 12d7a <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12d40:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12d42:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12d44:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12d48:	4638      	mov	r0, r7
   12d4a:	4a0d      	ldr	r2, [pc, #52]	; (12d80 <att_find_type_req+0xd4>)
   12d4c:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   12d4e:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   12d52:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12d56:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12d58:	f00b ffa8 	bl	1ecac <bt_gatt_foreach_attr>
	if (data.err) {
   12d5c:	f89d 4015 	ldrb.w	r4, [sp, #21]
   12d60:	b12c      	cbz	r4, 12d6e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   12d62:	9802      	ldr	r0, [sp, #8]
   12d64:	f004 fbd8 	bl	17518 <net_buf_unref>
	if (!req) {
   12d68:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12d6c:	e7ce      	b.n	12d0c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12d6e:	4628      	mov	r0, r5
   12d70:	4a04      	ldr	r2, [pc, #16]	; (12d84 <att_find_type_req+0xd8>)
   12d72:	9902      	ldr	r1, [sp, #8]
   12d74:	f00c f911 	bl	1ef9a <bt_att_chan_send_rsp>
	return 0;
   12d78:	e7ce      	b.n	12d18 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12d7a:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12d7c:	e7cc      	b.n	12d18 <att_find_type_req+0x6c>
   12d7e:	bf00      	nop
   12d80:	00012141 	.word	0x00012141
   12d84:	0001efeb 	.word	0x0001efeb

00012d88 <att_find_info_req>:
{
   12d88:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12d8a:	688b      	ldr	r3, [r1, #8]
{
   12d8c:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   12d8e:	881e      	ldrh	r6, [r3, #0]
{
   12d90:	b085      	sub	sp, #20
	if (!start || !end) {
   12d92:	b19e      	cbz	r6, 12dbc <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12d94:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   12d96:	b184      	cbz	r4, 12dba <att_find_info_req+0x32>
	if (start > end) {
   12d98:	42b4      	cmp	r4, r6
   12d9a:	d30f      	bcc.n	12dbc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12d9c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   12d9e:	2210      	movs	r2, #16
   12da0:	2100      	movs	r1, #0
   12da2:	4668      	mov	r0, sp
   12da4:	f00b fa31 	bl	1e20a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12da8:	2200      	movs	r2, #0
   12daa:	2105      	movs	r1, #5
   12dac:	4638      	mov	r0, r7
   12dae:	f7ff fdd7 	bl	12960 <bt_att_create_pdu>
   12db2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12db4:	b958      	cbnz	r0, 12dce <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12db6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12db8:	e007      	b.n	12dca <att_find_info_req+0x42>
			*err = 0U;
   12dba:	4626      	mov	r6, r4
	if (!req) {
   12dbc:	2301      	movs	r3, #1
   12dbe:	4632      	mov	r2, r6
   12dc0:	2104      	movs	r1, #4
   12dc2:	4628      	mov	r0, r5
   12dc4:	f7ff fcc4 	bl	12750 <send_err_rsp.part.0>
	return 0;
   12dc8:	2000      	movs	r0, #0
}
   12dca:	b005      	add	sp, #20
   12dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12dce:	4621      	mov	r1, r4
   12dd0:	466b      	mov	r3, sp
   12dd2:	4630      	mov	r0, r6
   12dd4:	4a08      	ldr	r2, [pc, #32]	; (12df8 <att_find_info_req+0x70>)
	data.chan = chan;
   12dd6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12dd8:	f00b ff68 	bl	1ecac <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12ddc:	9c02      	ldr	r4, [sp, #8]
   12dde:	b924      	cbnz	r4, 12dea <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   12de0:	9801      	ldr	r0, [sp, #4]
   12de2:	f004 fb99 	bl	17518 <net_buf_unref>
	if (!req) {
   12de6:	230a      	movs	r3, #10
   12de8:	e7e9      	b.n	12dbe <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12dea:	4628      	mov	r0, r5
   12dec:	4a03      	ldr	r2, [pc, #12]	; (12dfc <att_find_info_req+0x74>)
   12dee:	9901      	ldr	r1, [sp, #4]
   12df0:	f00c f8d3 	bl	1ef9a <bt_att_chan_send_rsp>
   12df4:	e7e8      	b.n	12dc8 <att_find_info_req+0x40>
   12df6:	bf00      	nop
   12df8:	0001ecc3 	.word	0x0001ecc3
   12dfc:	0001efeb 	.word	0x0001efeb

00012e00 <att_mtu_req>:
{
   12e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   12e02:	4603      	mov	r3, r0
   12e04:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12e08:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12e0a:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e0c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   12e10:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   12e14:	071b      	lsls	r3, r3, #28
   12e16:	d41e      	bmi.n	12e56 <att_mtu_req+0x56>
	mtu_client = sys_le16_to_cpu(req->mtu);
   12e18:	688b      	ldr	r3, [r1, #8]
   12e1a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   12e1c:	2e16      	cmp	r6, #22
   12e1e:	d91c      	bls.n	12e5a <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   12e20:	2202      	movs	r2, #2
   12e22:	2103      	movs	r1, #3
   12e24:	f7ff fd9c 	bl	12960 <bt_att_create_pdu>
	if (!pdu) {
   12e28:	4607      	mov	r7, r0
   12e2a:	b1c0      	cbz	r0, 12e5e <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   12e2c:	2102      	movs	r1, #2
   12e2e:	3008      	adds	r0, #8
   12e30:	f004 fc88 	bl	17744 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   12e34:	2341      	movs	r3, #65	; 0x41
   12e36:	7044      	strb	r4, [r0, #1]
   12e38:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   12e3a:	4639      	mov	r1, r7
   12e3c:	4628      	mov	r0, r5
   12e3e:	4a09      	ldr	r2, [pc, #36]	; (12e64 <att_mtu_req+0x64>)
   12e40:	f00c f8ab 	bl	1ef9a <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   12e44:	2e41      	cmp	r6, #65	; 0x41
   12e46:	bf28      	it	cs
   12e48:	2641      	movcs	r6, #65	; 0x41
	return 0;
   12e4a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   12e4c:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   12e50:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
}
   12e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   12e56:	2006      	movs	r0, #6
   12e58:	e7fc      	b.n	12e54 <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   12e5a:	2004      	movs	r0, #4
   12e5c:	e7fa      	b.n	12e54 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   12e5e:	200e      	movs	r0, #14
   12e60:	e7f8      	b.n	12e54 <att_mtu_req+0x54>
   12e62:	bf00      	nop
   12e64:	0001efeb 	.word	0x0001efeb

00012e68 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   12e68:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   12e6a:	2400      	movs	r4, #0
{
   12e6c:	4602      	mov	r2, r0
   12e6e:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12e70:	4807      	ldr	r0, [pc, #28]	; (12e90 <bt_att_req_alloc+0x28>)
   12e72:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   12e74:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12e76:	f006 ffc9 	bl	19e0c <k_mem_slab_alloc>
   12e7a:	4601      	mov	r1, r0
   12e7c:	b930      	cbnz	r0, 12e8c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   12e7e:	221c      	movs	r2, #28
   12e80:	9801      	ldr	r0, [sp, #4]
   12e82:	f00b f9c2 	bl	1e20a <memset>

	return req;
   12e86:	9801      	ldr	r0, [sp, #4]
}
   12e88:	b002      	add	sp, #8
   12e8a:	bd10      	pop	{r4, pc}
		return NULL;
   12e8c:	4620      	mov	r0, r4
   12e8e:	e7fb      	b.n	12e88 <bt_att_req_alloc+0x20>
   12e90:	200084f0 	.word	0x200084f0

00012e94 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   12e94:	b507      	push	{r0, r1, r2, lr}
   12e96:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   12e98:	a901      	add	r1, sp, #4
   12e9a:	4803      	ldr	r0, [pc, #12]	; (12ea8 <bt_att_req_free+0x14>)
   12e9c:	f007 f810 	bl	19ec0 <k_mem_slab_free>
}
   12ea0:	b003      	add	sp, #12
   12ea2:	f85d fb04 	ldr.w	pc, [sp], #4
   12ea6:	bf00      	nop
   12ea8:	200084f0 	.word	0x200084f0

00012eac <att_handle_rsp>:
{
   12eac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12eb0:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   12eb2:	30f0      	adds	r0, #240	; 0xf0
{
   12eb4:	460f      	mov	r7, r1
   12eb6:	4690      	mov	r8, r2
   12eb8:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   12eba:	f008 fdd5 	bl	1ba68 <k_delayed_work_cancel>
	if (!chan->req) {
   12ebe:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   12ec2:	f04f 0a00 	mov.w	sl, #0
   12ec6:	b99d      	cbnz	r5, 12ef0 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   12ec8:	2157      	movs	r1, #87	; 0x57
   12eca:	4818      	ldr	r0, [pc, #96]	; (12f2c <att_handle_rsp+0x80>)
   12ecc:	f009 fcba 	bl	1c844 <printk>
	att_req_send_process(chan->att);
   12ed0:	6820      	ldr	r0, [r4, #0]
   12ed2:	f00c f906 	bl	1f0e2 <att_req_send_process>
	if (func) {
   12ed6:	b13d      	cbz	r5, 12ee8 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   12ed8:	6820      	ldr	r0, [r4, #0]
   12eda:	f8cd 9000 	str.w	r9, [sp]
   12ede:	4643      	mov	r3, r8
   12ee0:	463a      	mov	r2, r7
   12ee2:	4631      	mov	r1, r6
   12ee4:	6800      	ldr	r0, [r0, #0]
   12ee6:	47a8      	blx	r5
}
   12ee8:	2000      	movs	r0, #0
   12eea:	b002      	add	sp, #8
   12eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12ef0:	4b0f      	ldr	r3, [pc, #60]	; (12f30 <att_handle_rsp+0x84>)
   12ef2:	429d      	cmp	r5, r3
   12ef4:	d103      	bne.n	12efe <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   12ef6:	4655      	mov	r5, sl
		chan->req = NULL;
   12ef8:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   12efc:	e7e8      	b.n	12ed0 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   12efe:	6928      	ldr	r0, [r5, #16]
   12f00:	b128      	cbz	r0, 12f0e <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   12f02:	f004 fb09 	bl	17518 <net_buf_unref>
		chan->req->buf = NULL;
   12f06:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12f0a:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   12f0e:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   12f12:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   12f16:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   12f18:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   12f1c:	f8d0 9018 	ldr.w	r9, [r0, #24]
	att_req_destroy(chan->req);
   12f20:	f00c f96c 	bl	1f1fc <att_req_destroy>
	chan->req = NULL;
   12f24:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   12f28:	e7d2      	b.n	12ed0 <att_handle_rsp+0x24>
   12f2a:	bf00      	nop
   12f2c:	00025056 	.word	0x00025056
   12f30:	20009c50 	.word	0x20009c50

00012f34 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   12f34:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
{
   12f38:	b570      	push	{r4, r5, r6, lr}
   12f3a:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   12f3c:	b352      	cbz	r2, 12f94 <att_error_rsp+0x60>
   12f3e:	4b1a      	ldr	r3, [pc, #104]	; (12fa8 <att_error_rsp+0x74>)
   12f40:	429a      	cmp	r2, r3
   12f42:	d027      	beq.n	12f94 <att_error_rsp+0x60>
	if (chan->req->buf) {
   12f44:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
   12f46:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
   12f48:	b12b      	cbz	r3, 12f56 <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
   12f4a:	8996      	ldrh	r6, [r2, #12]
   12f4c:	6919      	ldr	r1, [r3, #16]
   12f4e:	89d5      	ldrh	r5, [r2, #14]
   12f50:	4431      	add	r1, r6
   12f52:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
   12f54:	819d      	strh	r5, [r3, #12]
	if (chan->req->retrying) {
   12f56:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
   12f58:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
   12f5a:	b9e3      	cbnz	r3, 12f96 <att_error_rsp+0x62>
	switch (err) {
   12f5c:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   12f5e:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
   12f60:	d006      	beq.n	12f70 <att_error_rsp+0x3c>
   12f62:	2d0f      	cmp	r5, #15
   12f64:	d117      	bne.n	12f96 <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
   12f66:	7a43      	ldrb	r3, [r0, #9]
   12f68:	2b01      	cmp	r3, #1
   12f6a:	d814      	bhi.n	12f96 <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
   12f6c:	2102      	movs	r1, #2
   12f6e:	e007      	b.n	12f80 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
   12f70:	7a43      	ldrb	r3, [r0, #9]
   12f72:	2b01      	cmp	r3, #1
   12f74:	d9fa      	bls.n	12f6c <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   12f76:	2b02      	cmp	r3, #2
   12f78:	d00a      	beq.n	12f90 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   12f7a:	2b03      	cmp	r3, #3
   12f7c:	d10b      	bne.n	12f96 <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
   12f7e:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   12f80:	f00b fcb2 	bl	1e8e8 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   12f84:	b938      	cbnz	r0, 12f96 <att_error_rsp+0x62>
		chan->req->retrying = true;
   12f86:	2201      	movs	r2, #1
   12f88:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12f8c:	751a      	strb	r2, [r3, #20]
}
   12f8e:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   12f90:	2103      	movs	r1, #3
   12f92:	e7f5      	b.n	12f80 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
   12f94:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   12f96:	2200      	movs	r2, #0
   12f98:	462b      	mov	r3, r5
   12f9a:	4620      	mov	r0, r4
}
   12f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   12fa0:	4611      	mov	r1, r2
   12fa2:	f7ff bf83 	b.w	12eac <att_handle_rsp>
   12fa6:	bf00      	nop
   12fa8:	20009c50 	.word	0x20009c50

00012fac <att_reset>:
{
   12fac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12fae:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12fb0:	9803      	ldr	r0, [sp, #12]
   12fb2:	2200      	movs	r2, #0
   12fb4:	2300      	movs	r3, #0
   12fb6:	300c      	adds	r0, #12
   12fb8:	f004 fa2c 	bl	17414 <net_buf_get>
   12fbc:	b948      	cbnz	r0, 12fd2 <att_reset+0x26>
	att->conn = NULL;
   12fbe:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   12fc0:	6854      	ldr	r4, [r2, #4]
   12fc2:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12fc4:	b944      	cbnz	r4, 12fd8 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   12fc6:	480d      	ldr	r0, [pc, #52]	; (12ffc <att_reset+0x50>)
   12fc8:	a903      	add	r1, sp, #12
   12fca:	f006 ff79 	bl	19ec0 <k_mem_slab_free>
}
   12fce:	b004      	add	sp, #16
   12fd0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   12fd2:	f004 faa1 	bl	17518 <net_buf_unref>
   12fd6:	e7eb      	b.n	12fb0 <att_reset+0x4>
	return node->next;
   12fd8:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   12fda:	6866      	ldr	r6, [r4, #4]
   12fdc:	b136      	cbz	r6, 12fec <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   12fde:	69a3      	ldr	r3, [r4, #24]
   12fe0:	210e      	movs	r1, #14
   12fe2:	9300      	str	r3, [sp, #0]
   12fe4:	2300      	movs	r3, #0
   12fe6:	461a      	mov	r2, r3
   12fe8:	4618      	mov	r0, r3
   12fea:	47b0      	blx	r6
		att_req_destroy(req);
   12fec:	4620      	mov	r0, r4
   12fee:	f00c f905 	bl	1f1fc <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12ff2:	2d00      	cmp	r5, #0
   12ff4:	d0e7      	beq.n	12fc6 <att_reset+0x1a>
   12ff6:	462c      	mov	r4, r5
   12ff8:	682d      	ldr	r5, [r5, #0]
   12ffa:	e7ee      	b.n	12fda <att_reset+0x2e>
   12ffc:	200084b8 	.word	0x200084b8

00013000 <att_timeout>:
{
   13000:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   13002:	4605      	mov	r5, r0
   13004:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   13008:	2145      	movs	r1, #69	; 0x45
{
   1300a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1300c:	4808      	ldr	r0, [pc, #32]	; (13030 <att_timeout+0x30>)
   1300e:	f009 fc19 	bl	1c844 <printk>
	att_chan_detach(chan);
   13012:	4628      	mov	r0, r5
   13014:	f00c f960 	bl	1f2d8 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   13018:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   1301a:	b945      	cbnz	r5, 1302e <att_timeout+0x2e>
	att_reset(att);
   1301c:	4630      	mov	r0, r6
   1301e:	f7ff ffc5 	bl	12fac <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   13022:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   13026:	f002 f869 	bl	150fc <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1302a:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   1302e:	bd70      	pop	{r4, r5, r6, pc}
   13030:	00025072 	.word	0x00025072

00013034 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   13034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13038:	460c      	mov	r4, r1
   1303a:	4617      	mov	r7, r2
   1303c:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1303e:	4605      	mov	r5, r0
   13040:	b950      	cbnz	r0, 13058 <bt_att_send+0x24>
   13042:	492e      	ldr	r1, [pc, #184]	; (130fc <bt_att_send+0xc8>)
   13044:	482e      	ldr	r0, [pc, #184]	; (13100 <bt_att_send+0xcc>)
   13046:	f640 32ce 	movw	r2, #3022	; 0xbce
   1304a:	f009 fbfb 	bl	1c844 <printk>
   1304e:	f640 31ce 	movw	r1, #3022	; 0xbce
   13052:	482a      	ldr	r0, [pc, #168]	; (130fc <bt_att_send+0xc8>)
   13054:	f009 fe9c 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   13058:	b954      	cbnz	r4, 13070 <bt_att_send+0x3c>
   1305a:	4928      	ldr	r1, [pc, #160]	; (130fc <bt_att_send+0xc8>)
   1305c:	4828      	ldr	r0, [pc, #160]	; (13100 <bt_att_send+0xcc>)
   1305e:	f640 32cf 	movw	r2, #3023	; 0xbcf
   13062:	f009 fbef 	bl	1c844 <printk>
   13066:	f640 31cf 	movw	r1, #3023	; 0xbcf
   1306a:	4824      	ldr	r0, [pc, #144]	; (130fc <bt_att_send+0xc8>)
   1306c:	f009 fe90 	bl	1cd90 <assert_post_action>

	att = att_get(conn);
   13070:	4628      	mov	r0, r5
   13072:	f7ff f831 	bl	120d8 <att_get>
	if (!att) {
   13076:	4606      	mov	r6, r0
   13078:	b938      	cbnz	r0, 1308a <bt_att_send+0x56>
		net_buf_unref(buf);
   1307a:	4620      	mov	r0, r4
   1307c:	f004 fa4c 	bl	17518 <net_buf_unref>
		return -ENOTCONN;
   13080:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   13084:	b002      	add	sp, #8
   13086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1308a:	b147      	cbz	r7, 1309e <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1308c:	463b      	mov	r3, r7
   1308e:	4622      	mov	r2, r4
   13090:	2104      	movs	r1, #4
   13092:	4628      	mov	r0, r5
   13094:	f8cd 8000 	str.w	r8, [sp]
   13098:	f00b fd47 	bl	1eb2a <bt_l2cap_send_cb>
   1309c:	e7f2      	b.n	13084 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   1309e:	f100 070c 	add.w	r7, r0, #12
   130a2:	4621      	mov	r1, r4
   130a4:	4638      	mov	r0, r7
   130a6:	f004 fa09 	bl	174bc <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   130aa:	2200      	movs	r2, #0
   130ac:	2300      	movs	r3, #0
   130ae:	4638      	mov	r0, r7
   130b0:	f004 f9b0 	bl	17414 <net_buf_get>
	if (!buf) {
   130b4:	4605      	mov	r5, r0
   130b6:	b908      	cbnz	r0, 130bc <bt_att_send+0x88>
	return 0;
   130b8:	2000      	movs	r0, #0
   130ba:	e7e3      	b.n	13084 <bt_att_send+0x50>
	return list->head;
   130bc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   130be:	b1c3      	cbz	r3, 130f2 <bt_att_send+0xbe>
   130c0:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   130c4:	d015      	beq.n	130f2 <bt_att_send+0xbe>
	return node->next;
   130c6:	681c      	ldr	r4, [r3, #0]
   130c8:	b10c      	cbz	r4, 130ce <bt_att_send+0x9a>
   130ca:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   130ce:	2200      	movs	r2, #0
   130d0:	4629      	mov	r1, r5
   130d2:	f00b ff4b 	bl	1ef6c <bt_att_chan_send>
		if (err >= 0) {
   130d6:	2800      	cmp	r0, #0
   130d8:	daee      	bge.n	130b8 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   130da:	b154      	cbz	r4, 130f2 <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   130dc:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   130e0:	d004      	beq.n	130ec <bt_att_send+0xb8>
	return node->next;
   130e2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   130e6:	b10b      	cbz	r3, 130ec <bt_att_send+0xb8>
   130e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   130ec:	4620      	mov	r0, r4
   130ee:	461c      	mov	r4, r3
   130f0:	e7ed      	b.n	130ce <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   130f2:	4629      	mov	r1, r5
   130f4:	4638      	mov	r0, r7
   130f6:	f00e f8c0 	bl	2127a <k_queue_prepend>
   130fa:	e7dd      	b.n	130b8 <bt_att_send+0x84>
   130fc:	00024f35 	.word	0x00024f35
   13100:	00022c66 	.word	0x00022c66

00013104 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   13104:	b538      	push	{r3, r4, r5, lr}
   13106:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   13108:	4605      	mov	r5, r0
   1310a:	b950      	cbnz	r0, 13122 <bt_att_req_send+0x1e>
   1310c:	4918      	ldr	r1, [pc, #96]	; (13170 <bt_att_req_send+0x6c>)
   1310e:	4819      	ldr	r0, [pc, #100]	; (13174 <bt_att_req_send+0x70>)
   13110:	f640 32eb 	movw	r2, #3051	; 0xbeb
   13114:	f009 fb96 	bl	1c844 <printk>
   13118:	f640 31eb 	movw	r1, #3051	; 0xbeb
   1311c:	4814      	ldr	r0, [pc, #80]	; (13170 <bt_att_req_send+0x6c>)
   1311e:	f009 fe37 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(req);
   13122:	b954      	cbnz	r4, 1313a <bt_att_req_send+0x36>
   13124:	4912      	ldr	r1, [pc, #72]	; (13170 <bt_att_req_send+0x6c>)
   13126:	4813      	ldr	r0, [pc, #76]	; (13174 <bt_att_req_send+0x70>)
   13128:	f640 32ec 	movw	r2, #3052	; 0xbec
   1312c:	f009 fb8a 	bl	1c844 <printk>
   13130:	f640 31ec 	movw	r1, #3052	; 0xbec
   13134:	480e      	ldr	r0, [pc, #56]	; (13170 <bt_att_req_send+0x6c>)
   13136:	f009 fe2b 	bl	1cd90 <assert_post_action>

	att = att_get(conn);
   1313a:	4628      	mov	r0, r5
   1313c:	f7fe ffcc 	bl	120d8 <att_get>
	if (!att) {
   13140:	4605      	mov	r5, r0
   13142:	b930      	cbnz	r0, 13152 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   13144:	6920      	ldr	r0, [r4, #16]
   13146:	f004 f9e7 	bl	17518 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   1314a:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   1314e:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   13150:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   13152:	2300      	movs	r3, #0
   13154:	6023      	str	r3, [r4, #0]
	return list->tail;
   13156:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   13158:	b933      	cbnz	r3, 13168 <bt_att_req_send+0x64>
	list->head = node;
   1315a:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   1315e:	4628      	mov	r0, r5
   13160:	f00b ffbf 	bl	1f0e2 <att_req_send_process>
	return 0;
   13164:	2000      	movs	r0, #0
   13166:	e7f3      	b.n	13150 <bt_att_req_send+0x4c>
	parent->next = child;
   13168:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1316a:	6084      	str	r4, [r0, #8]
}
   1316c:	e7f7      	b.n	1315e <bt_att_req_send+0x5a>
   1316e:	bf00      	nop
   13170:	00024f35 	.word	0x00024f35
   13174:	00022c66 	.word	0x00022c66

00013178 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   13178:	b510      	push	{r4, lr}
   1317a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1317c:	b350      	cbz	r0, 131d4 <bt_att_req_cancel+0x5c>
   1317e:	b349      	cbz	r1, 131d4 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   13180:	f7fe ffaa 	bl	120d8 <att_get>
	if (!att) {
   13184:	b330      	cbz	r0, 131d4 <bt_att_req_cancel+0x5c>
	return list->head;
   13186:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13188:	b15b      	cbz	r3, 131a2 <bt_att_req_cancel+0x2a>
   1318a:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   1318e:	d008      	beq.n	131a2 <bt_att_req_cancel+0x2a>
	return node->next;
   13190:	681b      	ldr	r3, [r3, #0]
   13192:	b10b      	cbz	r3, 13198 <bt_att_req_cancel+0x20>
   13194:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   13198:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   1319c:	4294      	cmp	r4, r2
   1319e:	d006      	beq.n	131ae <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   131a0:	b96b      	cbnz	r3, 131be <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   131a2:	3004      	adds	r0, #4
   131a4:	4621      	mov	r1, r4
   131a6:	f00b fea1 	bl	1eeec <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   131aa:	4620      	mov	r0, r4
   131ac:	e003      	b.n	131b6 <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   131ae:	4620      	mov	r0, r4
	chan->req = &cancel;
   131b0:	4b09      	ldr	r3, [pc, #36]	; (131d8 <bt_att_req_cancel+0x60>)
   131b2:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   131b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   131ba:	f00c b81f 	b.w	1f1fc <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   131be:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   131c2:	d004      	beq.n	131ce <bt_att_req_cancel+0x56>
	return node->next;
   131c4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   131c8:	b10a      	cbz	r2, 131ce <bt_att_req_cancel+0x56>
   131ca:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   131ce:	4619      	mov	r1, r3
   131d0:	4613      	mov	r3, r2
   131d2:	e7e1      	b.n	13198 <bt_att_req_cancel+0x20>
}
   131d4:	bd10      	pop	{r4, pc}
   131d6:	bf00      	nop
   131d8:	20009c50 	.word	0x20009c50

000131dc <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   131dc:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   131de:	4618      	mov	r0, r3
{
   131e0:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   131e2:	4907      	ldr	r1, [pc, #28]	; (13200 <db_hash_set+0x24>)
   131e4:	2210      	movs	r2, #16
   131e6:	47a0      	blx	r4
	if (len < 0) {
   131e8:	1e04      	subs	r4, r0, #0
   131ea:	da06      	bge.n	131fa <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   131ec:	4622      	mov	r2, r4
   131ee:	2145      	movs	r1, #69	; 0x45
   131f0:	4804      	ldr	r0, [pc, #16]	; (13204 <db_hash_set+0x28>)
   131f2:	f009 fb27 	bl	1c844 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   131f6:	4620      	mov	r0, r4
   131f8:	bd10      	pop	{r4, pc}
	return 0;
   131fa:	2400      	movs	r4, #0
   131fc:	e7fb      	b.n	131f6 <db_hash_set+0x1a>
   131fe:	bf00      	nop
   13200:	2000b737 	.word	0x2000b737
   13204:	0002508a 	.word	0x0002508a

00013208 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13208:	2210      	movs	r2, #16
{
   1320a:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   1320c:	4906      	ldr	r1, [pc, #24]	; (13228 <db_hash_store+0x20>)
   1320e:	4807      	ldr	r0, [pc, #28]	; (1322c <db_hash_store+0x24>)
   13210:	f7f8 fb6e 	bl	b8f0 <settings_save_one>
	if (err) {
   13214:	4602      	mov	r2, r0
   13216:	b128      	cbz	r0, 13224 <db_hash_store+0x1c>
}
   13218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1321c:	2145      	movs	r1, #69	; 0x45
   1321e:	4804      	ldr	r0, [pc, #16]	; (13230 <db_hash_store+0x28>)
   13220:	f009 bb10 	b.w	1c844 <printk>
}
   13224:	bd08      	pop	{r3, pc}
   13226:	bf00      	nop
   13228:	2000b727 	.word	0x2000b727
   1322c:	000250b0 	.word	0x000250b0
   13230:	000250b8 	.word	0x000250b8

00013234 <find_cf_cfg>:
{
   13234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13236:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13238:	2600      	movs	r6, #0
   1323a:	4d0e      	ldr	r5, [pc, #56]	; (13274 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1323c:	462f      	mov	r7, r5
		if (!conn) {
   1323e:	1c6a      	adds	r2, r5, #1
   13240:	b954      	cbnz	r4, 13258 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13242:	4669      	mov	r1, sp
   13244:	4610      	mov	r0, r2
   13246:	9400      	str	r4, [sp, #0]
   13248:	f8cd 4003 	str.w	r4, [sp, #3]
   1324c:	f00c f902 	bl	1f454 <bt_addr_le_cmp>
   13250:	b940      	cbnz	r0, 13264 <find_cf_cfg+0x30>
}
   13252:	4638      	mov	r0, r7
   13254:	b003      	add	sp, #12
   13256:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13258:	4620      	mov	r0, r4
   1325a:	7829      	ldrb	r1, [r5, #0]
   1325c:	f00b fb77 	bl	1e94e <bt_conn_is_peer_addr_le>
   13260:	2800      	cmp	r0, #0
   13262:	d1f6      	bne.n	13252 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13264:	3601      	adds	r6, #1
   13266:	2e04      	cmp	r6, #4
   13268:	f105 0510 	add.w	r5, r5, #16
   1326c:	d1e6      	bne.n	1323c <find_cf_cfg+0x8>
	return NULL;
   1326e:	2700      	movs	r7, #0
   13270:	e7ef      	b.n	13252 <find_cf_cfg+0x1e>
   13272:	bf00      	nop
   13274:	20009c6c 	.word	0x20009c6c

00013278 <find_sc_cfg>:
{
   13278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1327a:	4606      	mov	r6, r0
   1327c:	460f      	mov	r7, r1
   1327e:	2400      	movs	r4, #0
   13280:	4d09      	ldr	r5, [pc, #36]	; (132a8 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   13282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13286:	42b3      	cmp	r3, r6
   13288:	d107      	bne.n	1329a <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1328a:	4639      	mov	r1, r7
   1328c:	4628      	mov	r0, r5
   1328e:	f00c f8e1 	bl	1f454 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   13292:	b910      	cbnz	r0, 1329a <find_sc_cfg+0x22>
			return &sc_cfg[i];
   13294:	4805      	ldr	r0, [pc, #20]	; (132ac <find_sc_cfg+0x34>)
   13296:	4420      	add	r0, r4
}
   13298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1329a:	340c      	adds	r4, #12
   1329c:	2c30      	cmp	r4, #48	; 0x30
   1329e:	f105 050c 	add.w	r5, r5, #12
   132a2:	d1ee      	bne.n	13282 <find_sc_cfg+0xa>
	return NULL;
   132a4:	2000      	movs	r0, #0
   132a6:	e7f7      	b.n	13298 <find_sc_cfg+0x20>
   132a8:	2000b017 	.word	0x2000b017
   132ac:	2000b016 	.word	0x2000b016

000132b0 <gatt_sub_find>:
{
   132b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   132b2:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   132b4:	2600      	movs	r6, #0
   132b6:	4d0e      	ldr	r5, [pc, #56]	; (132f0 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   132b8:	462f      	mov	r7, r5
		if (!conn) {
   132ba:	1c6a      	adds	r2, r5, #1
   132bc:	b954      	cbnz	r4, 132d4 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   132be:	4669      	mov	r1, sp
   132c0:	4610      	mov	r0, r2
   132c2:	9400      	str	r4, [sp, #0]
   132c4:	f8cd 4003 	str.w	r4, [sp, #3]
   132c8:	f00c f8c4 	bl	1f454 <bt_addr_le_cmp>
   132cc:	b940      	cbnz	r0, 132e0 <gatt_sub_find+0x30>
}
   132ce:	4638      	mov	r0, r7
   132d0:	b003      	add	sp, #12
   132d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   132d4:	4620      	mov	r0, r4
   132d6:	7829      	ldrb	r1, [r5, #0]
   132d8:	f00b fb39 	bl	1e94e <bt_conn_is_peer_addr_le>
   132dc:	2800      	cmp	r0, #0
   132de:	d1f6      	bne.n	132ce <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   132e0:	3601      	adds	r6, #1
   132e2:	2e04      	cmp	r6, #4
   132e4:	f105 0510 	add.w	r5, r5, #16
   132e8:	d1e6      	bne.n	132b8 <gatt_sub_find+0x8>
	return NULL;
   132ea:	2700      	movs	r7, #0
   132ec:	e7ef      	b.n	132ce <gatt_sub_find+0x1e>
   132ee:	bf00      	nop
   132f0:	20009cfc 	.word	0x20009cfc

000132f4 <find_cf_cfg_by_addr>:
{
   132f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132f6:	4606      	mov	r6, r0
   132f8:	460f      	mov	r7, r1
   132fa:	2400      	movs	r4, #0
   132fc:	4d09      	ldr	r5, [pc, #36]	; (13324 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   132fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13302:	42b3      	cmp	r3, r6
   13304:	d107      	bne.n	13316 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   13306:	4629      	mov	r1, r5
   13308:	4638      	mov	r0, r7
   1330a:	f00c f8a3 	bl	1f454 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   1330e:	b910      	cbnz	r0, 13316 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   13310:	4805      	ldr	r0, [pc, #20]	; (13328 <find_cf_cfg_by_addr+0x34>)
   13312:	4420      	add	r0, r4
}
   13314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13316:	3410      	adds	r4, #16
   13318:	2c40      	cmp	r4, #64	; 0x40
   1331a:	f105 0510 	add.w	r5, r5, #16
   1331e:	d1ee      	bne.n	132fe <find_cf_cfg_by_addr+0xa>
	return NULL;
   13320:	2000      	movs	r0, #0
   13322:	e7f7      	b.n	13314 <find_cf_cfg_by_addr+0x20>
   13324:	20009c6d 	.word	0x20009c6d
   13328:	20009c6c 	.word	0x20009c6c

0001332c <bt_gatt_attr_write_ccc>:
{
   1332c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13330:	461f      	mov	r7, r3
   13332:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13336:	4604      	mov	r4, r0
   13338:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1333a:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1333e:	2b00      	cmp	r3, #0
   13340:	d141      	bne.n	133c6 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   13342:	1e7b      	subs	r3, r7, #1
   13344:	2b01      	cmp	r3, #1
   13346:	d841      	bhi.n	133cc <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   13348:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1334a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1334c:	4649      	mov	r1, r9
   1334e:	bf14      	ite	ne
   13350:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   13352:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   13354:	f00c f881 	bl	1f45a <find_ccc_cfg>
	if (!cfg) {
   13358:	4605      	mov	r5, r0
   1335a:	b9b0      	cbnz	r0, 1338a <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   1335c:	b916      	cbnz	r6, 13364 <bt_gatt_attr_write_ccc+0x38>
			return len;
   1335e:	4638      	mov	r0, r7
}
   13360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   13364:	4649      	mov	r1, r9
   13366:	f00c f878 	bl	1f45a <find_ccc_cfg>
		if (!cfg) {
   1336a:	4605      	mov	r5, r0
   1336c:	b930      	cbnz	r0, 1337c <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   1336e:	4819      	ldr	r0, [pc, #100]	; (133d4 <bt_gatt_attr_write_ccc+0xa8>)
   13370:	2157      	movs	r1, #87	; 0x57
   13372:	f009 fa67 	bl	1c844 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13376:	f06f 0010 	mvn.w	r0, #16
   1337a:	e7f1      	b.n	13360 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1337c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   13380:	3001      	adds	r0, #1
   13382:	f00c f8a3 	bl	1f4cc <bt_addr_le_copy>
		cfg->id = conn->id;
   13386:	7a23      	ldrb	r3, [r4, #8]
   13388:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1338a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   1338e:	b973      	cbnz	r3, 133ae <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   13390:	f8b9 301e 	ldrh.w	r3, [r9, #30]
	cfg->value = value;
   13394:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   13396:	42b3      	cmp	r3, r6
   13398:	d003      	beq.n	133a2 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   1339a:	4649      	mov	r1, r9
   1339c:	4640      	mov	r0, r8
   1339e:	f00b ffd9 	bl	1f354 <gatt_ccc_changed>
	if (!value) {
   133a2:	2e00      	cmp	r6, #0
   133a4:	d1db      	bne.n	1335e <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   133a6:	4628      	mov	r0, r5
   133a8:	f00c f893 	bl	1f4d2 <clear_ccc_cfg>
   133ac:	e7d7      	b.n	1335e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   133ae:	4632      	mov	r2, r6
   133b0:	4641      	mov	r1, r8
   133b2:	4620      	mov	r0, r4
   133b4:	4798      	blx	r3
		if (write < 0) {
   133b6:	2800      	cmp	r0, #0
   133b8:	dbd2      	blt.n	13360 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   133ba:	1e44      	subs	r4, r0, #1
   133bc:	2c01      	cmp	r4, #1
   133be:	d9e7      	bls.n	13390 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   133c0:	f06f 000d 	mvn.w	r0, #13
   133c4:	e7cc      	b.n	13360 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   133c6:	f06f 0006 	mvn.w	r0, #6
   133ca:	e7c9      	b.n	13360 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   133cc:	f06f 000c 	mvn.w	r0, #12
   133d0:	e7c6      	b.n	13360 <bt_gatt_attr_write_ccc+0x34>
   133d2:	bf00      	nop
   133d4:	000250e3 	.word	0x000250e3

000133d8 <cf_write>:
{
   133d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   133dc:	461f      	mov	r7, r3
   133de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   133e2:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   133e4:	2b01      	cmp	r3, #1
{
   133e6:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   133e8:	d845      	bhi.n	13476 <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   133ea:	443b      	add	r3, r7
   133ec:	2b01      	cmp	r3, #1
   133ee:	463d      	mov	r5, r7
   133f0:	dc44      	bgt.n	1347c <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   133f2:	f7ff ff1f 	bl	13234 <find_cf_cfg>
	if (!cfg) {
   133f6:	4604      	mov	r4, r0
   133f8:	b918      	cbnz	r0, 13402 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   133fa:	f7ff ff1b 	bl	13234 <find_cf_cfg>
	if (!cfg) {
   133fe:	4604      	mov	r4, r0
   13400:	b1d8      	cbz	r0, 1343a <cf_write+0x62>
   13402:	4632      	mov	r2, r6
   13404:	f104 0008 	add.w	r0, r4, #8
   13408:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   1340c:	4596      	cmp	lr, r2
   1340e:	d11d      	bne.n	1344c <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   13410:	b12f      	cbz	r7, 1341e <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   13412:	7833      	ldrb	r3, [r6, #0]
   13414:	7a22      	ldrb	r2, [r4, #8]
   13416:	f003 0307 	and.w	r3, r3, #7
   1341a:	4313      	orrs	r3, r2
   1341c:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1341e:	f108 0188 	add.w	r1, r8, #136	; 0x88
   13422:	1c60      	adds	r0, r4, #1
   13424:	f00c f852 	bl	1f4cc <bt_addr_le_copy>
	cfg->id = conn->id;
   13428:	4620      	mov	r0, r4
   1342a:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1342e:	2101      	movs	r1, #1
   13430:	f800 3b0c 	strb.w	r3, [r0], #12
   13434:	f00c f85b 	bl	1f4ee <atomic_or>
}
   13438:	e005      	b.n	13446 <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   1343a:	2157      	movs	r1, #87	; 0x57
   1343c:	4812      	ldr	r0, [pc, #72]	; (13488 <cf_write+0xb0>)
   1343e:	f009 fa01 	bl	1c844 <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13442:	f06f 0510 	mvn.w	r5, #16
}
   13446:	4628      	mov	r0, r5
   13448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1344c:	2300      	movs	r3, #0
   1344e:	f812 1b01 	ldrb.w	r1, [r2], #1
   13452:	f810 cb01 	ldrb.w	ip, [r0], #1
   13456:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   1345a:	fa21 f903 	lsr.w	r9, r1, r3
   1345e:	f019 0f01 	tst.w	r9, #1
   13462:	d004      	beq.n	1346e <cf_write+0x96>
   13464:	fa2c f903 	lsr.w	r9, ip, r3
   13468:	f019 0f01 	tst.w	r9, #1
   1346c:	d109      	bne.n	13482 <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   1346e:	3301      	adds	r3, #1
   13470:	2b03      	cmp	r3, #3
   13472:	d1f2      	bne.n	1345a <cf_write+0x82>
   13474:	e7ca      	b.n	1340c <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13476:	f06f 0506 	mvn.w	r5, #6
   1347a:	e7e4      	b.n	13446 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1347c:	f06f 050c 	mvn.w	r5, #12
   13480:	e7e1      	b.n	13446 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   13482:	f06f 0512 	mvn.w	r5, #18
   13486:	e7de      	b.n	13446 <cf_write+0x6e>
   13488:	00025102 	.word	0x00025102

0001348c <sc_store>:
{
   1348c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1348e:	4605      	mov	r5, r0
   13490:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   13494:	4604      	mov	r4, r0
   13496:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   13498:	b1ca      	cbz	r2, 134ce <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1349a:	ae02      	add	r6, sp, #8
   1349c:	2104      	movs	r1, #4
   1349e:	4630      	mov	r0, r6
   134a0:	f009 f936 	bl	1c710 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   134a4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   134a6:	462b      	mov	r3, r5
   134a8:	2124      	movs	r1, #36	; 0x24
   134aa:	4a0a      	ldr	r2, [pc, #40]	; (134d4 <sc_store+0x48>)
   134ac:	a803      	add	r0, sp, #12
   134ae:	f7fa ff45 	bl	e33c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   134b2:	2204      	movs	r2, #4
   134b4:	f104 0108 	add.w	r1, r4, #8
   134b8:	a803      	add	r0, sp, #12
   134ba:	f7f8 fa19 	bl	b8f0 <settings_save_one>
	if (err) {
   134be:	4602      	mov	r2, r0
   134c0:	b118      	cbz	r0, 134ca <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   134c2:	2145      	movs	r1, #69	; 0x45
   134c4:	4804      	ldr	r0, [pc, #16]	; (134d8 <sc_store+0x4c>)
   134c6:	f009 f9bd 	bl	1c844 <printk>
}
   134ca:	b00c      	add	sp, #48	; 0x30
   134cc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   134ce:	9200      	str	r2, [sp, #0]
   134d0:	e7e9      	b.n	134a6 <sc_store+0x1a>
   134d2:	bf00      	nop
   134d4:	0002543e 	.word	0x0002543e
   134d8:	00025133 	.word	0x00025133

000134dc <sc_save>:
{
   134dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   134e0:	4680      	mov	r8, r0
   134e2:	460f      	mov	r7, r1
   134e4:	4616      	mov	r6, r2
   134e6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   134e8:	f7ff fec6 	bl	13278 <find_sc_cfg>
	if (!cfg) {
   134ec:	4604      	mov	r4, r0
   134ee:	b998      	cbnz	r0, 13518 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   134f0:	4669      	mov	r1, sp
   134f2:	9000      	str	r0, [sp, #0]
   134f4:	f8cd 0003 	str.w	r0, [sp, #3]
   134f8:	f7ff febe 	bl	13278 <find_sc_cfg>
		if (!cfg) {
   134fc:	4604      	mov	r4, r0
   134fe:	b930      	cbnz	r0, 1350e <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   13500:	2145      	movs	r1, #69	; 0x45
   13502:	4813      	ldr	r0, [pc, #76]	; (13550 <sc_save+0x74>)
   13504:	f009 f99e 	bl	1c844 <printk>
}
   13508:	b002      	add	sp, #8
   1350a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1350e:	4639      	mov	r1, r7
		cfg->id = id;
   13510:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   13514:	f00b ffda 	bl	1f4cc <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   13518:	8922      	ldrh	r2, [r4, #8]
   1351a:	8963      	ldrh	r3, [r4, #10]
   1351c:	b97a      	cbnz	r2, 1353e <sc_save+0x62>
   1351e:	b983      	cbnz	r3, 13542 <sc_save+0x66>
		cfg->data.start = start;
   13520:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   13522:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   13524:	4621      	mov	r1, r4
   13526:	f811 0b01 	ldrb.w	r0, [r1], #1
   1352a:	f00b f8d3 	bl	1e6d4 <bt_addr_le_is_bonded>
   1352e:	2800      	cmp	r0, #0
   13530:	d0ea      	beq.n	13508 <sc_save+0x2c>
		sc_store(cfg);
   13532:	4620      	mov	r0, r4
}
   13534:	b002      	add	sp, #8
   13536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1353a:	f7ff bfa7 	b.w	1348c <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1353e:	4296      	cmp	r6, r2
   13540:	d302      	bcc.n	13548 <sc_save+0x6c>
   13542:	429d      	cmp	r5, r3
   13544:	d8ed      	bhi.n	13522 <sc_save+0x46>
   13546:	e7df      	b.n	13508 <sc_save+0x2c>
	if (*end < new_end) {
   13548:	429d      	cmp	r5, r3
		*start = new_start;
   1354a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1354c:	d9ea      	bls.n	13524 <sc_save+0x48>
   1354e:	e7e8      	b.n	13522 <sc_save+0x46>
   13550:	00025154 	.word	0x00025154

00013554 <sc_set>:
{
   13554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13558:	460e      	mov	r6, r1
   1355a:	4690      	mov	r8, r2
   1355c:	4699      	mov	r9, r3
	if (!name) {
   1355e:	4604      	mov	r4, r0
{
   13560:	b087      	sub	sp, #28
	if (!name) {
   13562:	b948      	cbnz	r0, 13578 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13564:	2145      	movs	r1, #69	; 0x45
   13566:	4829      	ldr	r0, [pc, #164]	; (1360c <sc_set+0xb8>)
   13568:	f009 f96c 	bl	1c844 <printk>
		return -EINVAL;
   1356c:	f06f 0515 	mvn.w	r5, #21
}
   13570:	4628      	mov	r0, r5
   13572:	b007      	add	sp, #28
   13574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   13578:	a902      	add	r1, sp, #8
   1357a:	f00a fe92 	bl	1e2a2 <bt_settings_decode_key>
	if (err) {
   1357e:	4605      	mov	r5, r0
   13580:	b128      	cbz	r0, 1358e <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   13582:	4622      	mov	r2, r4
   13584:	2145      	movs	r1, #69	; 0x45
   13586:	4822      	ldr	r0, [pc, #136]	; (13610 <sc_set+0xbc>)
   13588:	f009 f95c 	bl	1c844 <printk>
   1358c:	e7ee      	b.n	1356c <sc_set+0x18>
	settings_name_next(name, &next);
   1358e:	4620      	mov	r0, r4
   13590:	a901      	add	r1, sp, #4
   13592:	f009 fe11 	bl	1d1b8 <settings_name_next>
	if (!next) {
   13596:	9801      	ldr	r0, [sp, #4]
   13598:	b1d8      	cbz	r0, 135d2 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   1359a:	220a      	movs	r2, #10
   1359c:	4629      	mov	r1, r5
   1359e:	f00a fd1b 	bl	1dfd8 <strtol>
   135a2:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   135a4:	4638      	mov	r0, r7
   135a6:	a902      	add	r1, sp, #8
   135a8:	f7ff fe66 	bl	13278 <find_sc_cfg>
	if (!cfg && len_rd) {
   135ac:	4604      	mov	r4, r0
   135ae:	bb28      	cbnz	r0, 135fc <sc_set+0xa8>
   135b0:	2e00      	cmp	r6, #0
   135b2:	d0dd      	beq.n	13570 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   135b4:	a904      	add	r1, sp, #16
   135b6:	9004      	str	r0, [sp, #16]
   135b8:	f8cd 0013 	str.w	r0, [sp, #19]
   135bc:	f7ff fe5c 	bl	13278 <find_sc_cfg>
		if (!cfg) {
   135c0:	4604      	mov	r4, r0
   135c2:	b940      	cbnz	r0, 135d6 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   135c4:	2145      	movs	r1, #69	; 0x45
   135c6:	4813      	ldr	r0, [pc, #76]	; (13614 <sc_set+0xc0>)
   135c8:	f009 f93c 	bl	1c844 <printk>
			return -ENOMEM;
   135cc:	f06f 050b 	mvn.w	r5, #11
   135d0:	e7ce      	b.n	13570 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   135d2:	462f      	mov	r7, r5
   135d4:	e7e6      	b.n	135a4 <sc_set+0x50>
		cfg->id = id;
   135d6:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   135da:	a902      	add	r1, sp, #8
   135dc:	f00b ff76 	bl	1f4cc <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   135e0:	f104 0108 	add.w	r1, r4, #8
   135e4:	2204      	movs	r2, #4
   135e6:	4648      	mov	r0, r9
   135e8:	47c0      	blx	r8
		if (len < 0) {
   135ea:	1e04      	subs	r4, r0, #0
   135ec:	dac0      	bge.n	13570 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   135ee:	4622      	mov	r2, r4
   135f0:	2145      	movs	r1, #69	; 0x45
   135f2:	4809      	ldr	r0, [pc, #36]	; (13618 <sc_set+0xc4>)
   135f4:	f009 f926 	bl	1c844 <printk>
			return len;
   135f8:	4625      	mov	r5, r4
   135fa:	e7b9      	b.n	13570 <sc_set+0x1c>
	if (len_rd) {
   135fc:	2e00      	cmp	r6, #0
   135fe:	d1ef      	bne.n	135e0 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   13600:	220c      	movs	r2, #12
   13602:	4631      	mov	r1, r6
   13604:	f00a fe01 	bl	1e20a <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   13608:	e7b2      	b.n	13570 <sc_set+0x1c>
   1360a:	bf00      	nop
   1360c:	00023e3d 	.word	0x00023e3d
   13610:	00025178 	.word	0x00025178
   13614:	00025199 	.word	0x00025199
   13618:	0002508a 	.word	0x0002508a

0001361c <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   1361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13620:	4606      	mov	r6, r0
   13622:	4688      	mov	r8, r1
   13624:	4617      	mov	r7, r2
	if (params) {
   13626:	461c      	mov	r4, r3
   13628:	b31b      	cbz	r3, 13672 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1362a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1362e:	2100      	movs	r1, #0
   13630:	f7ff fc1a 	bl	12e68 <bt_att_req_alloc>
		if (!req) {
   13634:	4605      	mov	r5, r0
   13636:	b920      	cbnz	r0, 13642 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   13638:	f06f 040b 	mvn.w	r4, #11
}
   1363c:	4620      	mov	r0, r4
   1363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   13642:	2300      	movs	r3, #0
		req->user_data = params;
   13644:	6184      	str	r4, [r0, #24]
		err = bt_att_req_send(conn, req);
   13646:	4601      	mov	r1, r0
		req->buf = buf;
   13648:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   1364c:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   1364e:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   13650:	4630      	mov	r0, r6
   13652:	f7ff fd57 	bl	13104 <bt_att_req_send>
		if (err) {
   13656:	4604      	mov	r4, r0
   13658:	2800      	cmp	r0, #0
   1365a:	d0ef      	beq.n	1363c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   1365c:	4628      	mov	r0, r5
   1365e:	f7ff fc19 	bl	12e94 <bt_att_req_free>
	if (err) {
   13662:	2c00      	cmp	r4, #0
   13664:	d0ea      	beq.n	1363c <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   13666:	4622      	mov	r2, r4
   13668:	2145      	movs	r1, #69	; 0x45
   1366a:	4804      	ldr	r0, [pc, #16]	; (1367c <gatt_send.constprop.0+0x60>)
   1366c:	f009 f8ea 	bl	1c844 <printk>
   13670:	e7e4      	b.n	1363c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   13672:	461a      	mov	r2, r3
   13674:	f7ff fcde 	bl	13034 <bt_att_send>
   13678:	4604      	mov	r4, r0
   1367a:	e7f2      	b.n	13662 <gatt_send.constprop.0+0x46>
   1367c:	000251c0 	.word	0x000251c0

00013680 <cf_set>:
{
   13680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13684:	4689      	mov	r9, r1
   13686:	4617      	mov	r7, r2
   13688:	4698      	mov	r8, r3
	if (!name) {
   1368a:	4605      	mov	r5, r0
{
   1368c:	b085      	sub	sp, #20
	if (!name) {
   1368e:	b948      	cbnz	r0, 136a4 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13690:	2145      	movs	r1, #69	; 0x45
   13692:	4826      	ldr	r0, [pc, #152]	; (1372c <cf_set+0xac>)
   13694:	f009 f8d6 	bl	1c844 <printk>
		return -EINVAL;
   13698:	f06f 0415 	mvn.w	r4, #21
}
   1369c:	4620      	mov	r0, r4
   1369e:	b005      	add	sp, #20
   136a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   136a4:	a902      	add	r1, sp, #8
   136a6:	f00a fdfc 	bl	1e2a2 <bt_settings_decode_key>
	if (err) {
   136aa:	4604      	mov	r4, r0
   136ac:	b128      	cbz	r0, 136ba <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   136ae:	462a      	mov	r2, r5
   136b0:	2145      	movs	r1, #69	; 0x45
   136b2:	481f      	ldr	r0, [pc, #124]	; (13730 <cf_set+0xb0>)
   136b4:	f009 f8c6 	bl	1c844 <printk>
   136b8:	e7ee      	b.n	13698 <cf_set+0x18>
	settings_name_next(name, &next);
   136ba:	4628      	mov	r0, r5
   136bc:	a901      	add	r1, sp, #4
   136be:	f009 fd7b 	bl	1d1b8 <settings_name_next>
	if (!next) {
   136c2:	9801      	ldr	r0, [sp, #4]
   136c4:	b1a8      	cbz	r0, 136f2 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   136c6:	220a      	movs	r2, #10
   136c8:	4621      	mov	r1, r4
   136ca:	f00a fc85 	bl	1dfd8 <strtol>
   136ce:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   136d0:	4630      	mov	r0, r6
   136d2:	a902      	add	r1, sp, #8
   136d4:	f7ff fe0e 	bl	132f4 <find_cf_cfg_by_addr>
	if (!cfg) {
   136d8:	4605      	mov	r5, r0
   136da:	b988      	cbnz	r0, 13700 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   136dc:	f7ff fdaa 	bl	13234 <find_cf_cfg>
		if (!cfg) {
   136e0:	4605      	mov	r5, r0
   136e2:	b940      	cbnz	r0, 136f6 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   136e4:	2145      	movs	r1, #69	; 0x45
   136e6:	4813      	ldr	r0, [pc, #76]	; (13734 <cf_set+0xb4>)
   136e8:	f009 f8ac 	bl	1c844 <printk>
			return -ENOMEM;
   136ec:	f06f 040b 	mvn.w	r4, #11
   136f0:	e7d4      	b.n	1369c <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   136f2:	4626      	mov	r6, r4
   136f4:	e7ec      	b.n	136d0 <cf_set+0x50>
		cfg->id = id;
   136f6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   136fa:	a902      	add	r1, sp, #8
   136fc:	f00b fee6 	bl	1f4cc <bt_addr_le_copy>
	if (len_rd) {
   13700:	f1b9 0f00 	cmp.w	r9, #0
   13704:	d00d      	beq.n	13722 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   13706:	f105 0108 	add.w	r1, r5, #8
   1370a:	2201      	movs	r2, #1
   1370c:	4640      	mov	r0, r8
   1370e:	47b8      	blx	r7
		if (len < 0) {
   13710:	1e05      	subs	r5, r0, #0
   13712:	dac3      	bge.n	1369c <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13714:	462a      	mov	r2, r5
   13716:	2145      	movs	r1, #69	; 0x45
   13718:	4807      	ldr	r0, [pc, #28]	; (13738 <cf_set+0xb8>)
   1371a:	f009 f893 	bl	1c844 <printk>
			return len;
   1371e:	462c      	mov	r4, r5
   13720:	e7bc      	b.n	1369c <cf_set+0x1c>
		clear_cf_cfg(cfg);
   13722:	4628      	mov	r0, r5
   13724:	f00b fefd 	bl	1f522 <clear_cf_cfg>
   13728:	e7b8      	b.n	1369c <cf_set+0x1c>
   1372a:	bf00      	nop
   1372c:	00023e3d 	.word	0x00023e3d
   13730:	00025178 	.word	0x00025178
   13734:	000251df 	.word	0x000251df
   13738:	0002508a 	.word	0x0002508a

0001373c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1373c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1373e:	6881      	ldr	r1, [r0, #8]
{
   13740:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13742:	4a07      	ldr	r2, [pc, #28]	; (13760 <remove_peer_from_attr+0x24>)
   13744:	4291      	cmp	r1, r2
   13746:	d109      	bne.n	1375c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   13748:	791a      	ldrb	r2, [r3, #4]
   1374a:	6819      	ldr	r1, [r3, #0]
   1374c:	68c0      	ldr	r0, [r0, #12]
   1374e:	f00b fea3 	bl	1f498 <ccc_find_cfg>
	if (cfg) {
   13752:	b118      	cbz	r0, 1375c <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   13754:	220a      	movs	r2, #10
   13756:	2100      	movs	r1, #0
   13758:	f00a fd57 	bl	1e20a <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1375c:	2001      	movs	r0, #1
   1375e:	bd08      	pop	{r3, pc}
   13760:	0001332d 	.word	0x0001332d

00013764 <ccc_load>:
{
   13764:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13766:	4b21      	ldr	r3, [pc, #132]	; (137ec <ccc_load+0x88>)
{
   13768:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1376a:	6882      	ldr	r2, [r0, #8]
   1376c:	429a      	cmp	r2, r3
   1376e:	d002      	beq.n	13776 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   13770:	2001      	movs	r0, #1
}
   13772:	b002      	add	sp, #8
   13774:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   13776:	68a3      	ldr	r3, [r4, #8]
   13778:	68c6      	ldr	r6, [r0, #12]
   1377a:	b94b      	cbnz	r3, 13790 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1377c:	4630      	mov	r0, r6
   1377e:	7922      	ldrb	r2, [r4, #4]
   13780:	6821      	ldr	r1, [r4, #0]
   13782:	f00b fe89 	bl	1f498 <ccc_find_cfg>
	if (!cfg) {
   13786:	2800      	cmp	r0, #0
   13788:	d0f2      	beq.n	13770 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1378a:	f00b fea2 	bl	1f4d2 <clear_ccc_cfg>
   1378e:	e7ef      	b.n	13770 <ccc_load+0xc>
	} else if (!load->count) {
   13790:	68e0      	ldr	r0, [r4, #12]
   13792:	2800      	cmp	r0, #0
   13794:	d0ed      	beq.n	13772 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   13796:	881b      	ldrh	r3, [r3, #0]
   13798:	4299      	cmp	r1, r3
   1379a:	d00a      	beq.n	137b2 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1379c:	d9e8      	bls.n	13770 <ccc_load+0xc>
	load->count--;
   1379e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   137a0:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   137a2:	3801      	subs	r0, #1
	load->entry++;
   137a4:	3304      	adds	r3, #4
	load->count--;
   137a6:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   137a8:	3800      	subs	r0, #0
   137aa:	bf18      	it	ne
   137ac:	2001      	movne	r0, #1
	load->entry++;
   137ae:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   137b0:	e7df      	b.n	13772 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   137b2:	4630      	mov	r0, r6
   137b4:	7922      	ldrb	r2, [r4, #4]
   137b6:	6821      	ldr	r1, [r4, #0]
   137b8:	f00b fe6e 	bl	1f498 <ccc_find_cfg>
	if (!cfg) {
   137bc:	4605      	mov	r5, r0
   137be:	b980      	cbnz	r0, 137e2 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   137c0:	9000      	str	r0, [sp, #0]
   137c2:	4602      	mov	r2, r0
   137c4:	f8cd 0003 	str.w	r0, [sp, #3]
   137c8:	4669      	mov	r1, sp
   137ca:	4630      	mov	r0, r6
   137cc:	f00b fe64 	bl	1f498 <ccc_find_cfg>
		if (!cfg) {
   137d0:	4605      	mov	r5, r0
   137d2:	2800      	cmp	r0, #0
   137d4:	d0e3      	beq.n	1379e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   137d6:	6821      	ldr	r1, [r4, #0]
   137d8:	3001      	adds	r0, #1
   137da:	f00b fe77 	bl	1f4cc <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   137de:	7923      	ldrb	r3, [r4, #4]
   137e0:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   137e2:	68a3      	ldr	r3, [r4, #8]
   137e4:	885b      	ldrh	r3, [r3, #2]
   137e6:	812b      	strh	r3, [r5, #8]
   137e8:	e7d9      	b.n	1379e <ccc_load+0x3a>
   137ea:	bf00      	nop
   137ec:	0001332d 	.word	0x0001332d

000137f0 <ccc_save>:
{
   137f0:	b538      	push	{r3, r4, r5, lr}
   137f2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   137f4:	4b0b      	ldr	r3, [pc, #44]	; (13824 <ccc_save+0x34>)
   137f6:	6882      	ldr	r2, [r0, #8]
{
   137f8:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   137fa:	429a      	cmp	r2, r3
   137fc:	d10f      	bne.n	1381e <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   137fe:	7922      	ldrb	r2, [r4, #4]
   13800:	6821      	ldr	r1, [r4, #0]
   13802:	68c0      	ldr	r0, [r0, #12]
   13804:	f00b fe48 	bl	1f498 <ccc_find_cfg>
	if (!cfg) {
   13808:	b148      	cbz	r0, 1381e <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1380a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1380e:	8901      	ldrh	r1, [r0, #8]
   13810:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   13814:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   13816:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   13818:	8151      	strh	r1, [r2, #10]
	save->count++;
   1381a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1381e:	2001      	movs	r0, #1
   13820:	bd38      	pop	{r3, r4, r5, pc}
   13822:	bf00      	nop
   13824:	0001332d 	.word	0x0001332d

00013828 <gatt_indicate>:
{
   13828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1382c:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   1382e:	8a92      	ldrh	r2, [r2, #20]
{
   13830:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13832:	3202      	adds	r2, #2
   13834:	211d      	movs	r1, #29
{
   13836:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13838:	f7ff f892 	bl	12960 <bt_att_create_pdu>
	if (!buf) {
   1383c:	4605      	mov	r5, r0
   1383e:	b1e8      	cbz	r0, 1387c <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   13840:	f100 0808 	add.w	r8, r0, #8
   13844:	2102      	movs	r1, #2
   13846:	4640      	mov	r0, r8
   13848:	f003 ff7c 	bl	17744 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1384c:	4606      	mov	r6, r0
   1384e:	8aa1      	ldrh	r1, [r4, #20]
   13850:	f826 9b02 	strh.w	r9, [r6], #2
   13854:	4640      	mov	r0, r8
   13856:	f003 ff75 	bl	17744 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1385a:	4630      	mov	r0, r6
   1385c:	8aa2      	ldrh	r2, [r4, #20]
   1385e:	6921      	ldr	r1, [r4, #16]
   13860:	f00a fca8 	bl	1e1b4 <memcpy>
	if (!params->func) {
   13864:	68a3      	ldr	r3, [r4, #8]
   13866:	b933      	cbnz	r3, 13876 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   13868:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   1386a:	4629      	mov	r1, r5
   1386c:	4638      	mov	r0, r7
}
   1386e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13872:	f7ff bed3 	b.w	1361c <gatt_send.constprop.0>
   13876:	4623      	mov	r3, r4
   13878:	4a04      	ldr	r2, [pc, #16]	; (1388c <gatt_indicate+0x64>)
   1387a:	e7f6      	b.n	1386a <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   1387c:	2157      	movs	r1, #87	; 0x57
   1387e:	4804      	ldr	r0, [pc, #16]	; (13890 <gatt_indicate+0x68>)
   13880:	f008 ffe0 	bl	1c844 <printk>
}
   13884:	f06f 000b 	mvn.w	r0, #11
   13888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1388c:	0001f379 	.word	0x0001f379
   13890:	00025206 	.word	0x00025206

00013894 <gatt_notify>:
{
   13894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13898:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1389a:	8992      	ldrh	r2, [r2, #12]
{
   1389c:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1389e:	3202      	adds	r2, #2
   138a0:	211b      	movs	r1, #27
{
   138a2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   138a4:	f7ff f85c 	bl	12960 <bt_att_create_pdu>
	if (!buf) {
   138a8:	4605      	mov	r5, r0
   138aa:	b1c8      	cbz	r0, 138e0 <gatt_notify+0x4c>
   138ac:	f100 0908 	add.w	r9, r0, #8
   138b0:	2102      	movs	r1, #2
   138b2:	4648      	mov	r0, r9
   138b4:	f003 ff46 	bl	17744 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   138b8:	4606      	mov	r6, r0
   138ba:	89a1      	ldrh	r1, [r4, #12]
   138bc:	f826 8b02 	strh.w	r8, [r6], #2
   138c0:	4648      	mov	r0, r9
   138c2:	f003 ff3f 	bl	17744 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   138c6:	89a2      	ldrh	r2, [r4, #12]
   138c8:	68a1      	ldr	r1, [r4, #8]
   138ca:	4630      	mov	r0, r6
   138cc:	f00a fc72 	bl	1e1b4 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   138d0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   138d4:	4629      	mov	r1, r5
   138d6:	4638      	mov	r0, r7
}
   138d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   138dc:	f7ff bbaa 	b.w	13034 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   138e0:	2157      	movs	r1, #87	; 0x57
   138e2:	4803      	ldr	r0, [pc, #12]	; (138f0 <gatt_notify+0x5c>)
   138e4:	f008 ffae 	bl	1c844 <printk>
}
   138e8:	f06f 000b 	mvn.w	r0, #11
   138ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   138f0:	00025232 	.word	0x00025232

000138f4 <notify_cb>:
{
   138f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   138f8:	4b38      	ldr	r3, [pc, #224]	; (139dc <notify_cb+0xe8>)
{
   138fa:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   138fc:	6882      	ldr	r2, [r0, #8]
{
   138fe:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13900:	429a      	cmp	r2, r3
   13902:	d003      	beq.n	1390c <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13904:	2001      	movs	r0, #1
}
   13906:	b003      	add	sp, #12
   13908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   1390c:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13910:	4b33      	ldr	r3, [pc, #204]	; (139e0 <notify_cb+0xec>)
   13912:	4599      	cmp	r9, r3
   13914:	d01a      	beq.n	1394c <notify_cb+0x58>
   13916:	f04f 0b00 	mov.w	fp, #0
   1391a:	f109 0701 	add.w	r7, r9, #1
   1391e:	f109 0a1f 	add.w	sl, r9, #31
		if (cfg->value != data->type) {
   13922:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   13926:	89a3      	ldrh	r3, [r4, #12]
   13928:	429a      	cmp	r2, r3
   1392a:	d10b      	bne.n	13944 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1392c:	4639      	mov	r1, r7
   1392e:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13932:	f7fd fe75 	bl	11620 <bt_conn_lookup_addr_le>
		if (!conn) {
   13936:	4605      	mov	r5, r0
   13938:	b120      	cbz	r0, 13944 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   1393a:	7b43      	ldrb	r3, [r0, #13]
   1393c:	2b07      	cmp	r3, #7
   1393e:	d029      	beq.n	13994 <notify_cb+0xa0>
			bt_conn_unref(conn);
   13940:	f7fd fd50 	bl	113e4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13944:	370a      	adds	r7, #10
   13946:	4557      	cmp	r7, sl
   13948:	d1eb      	bne.n	13922 <notify_cb+0x2e>
   1394a:	e7db      	b.n	13904 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1394c:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1394e:	4637      	mov	r7, r6
   13950:	4d24      	ldr	r5, [pc, #144]	; (139e4 <notify_cb+0xf0>)
   13952:	4669      	mov	r1, sp
   13954:	4628      	mov	r0, r5
   13956:	9700      	str	r7, [sp, #0]
   13958:	f8cd 7003 	str.w	r7, [sp, #3]
   1395c:	f00b fd7a 	bl	1f454 <bt_addr_le_cmp>
   13960:	b178      	cbz	r0, 13982 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13962:	2207      	movs	r2, #7
   13964:	4629      	mov	r1, r5
   13966:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1396a:	f7fd fe99 	bl	116a0 <bt_conn_lookup_state_le>
			if (!conn) {
   1396e:	b970      	cbnz	r0, 1398e <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13970:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13972:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13974:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13976:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1397a:	8853      	ldrh	r3, [r2, #2]
   1397c:	8812      	ldrh	r2, [r2, #0]
   1397e:	f7ff fdad 	bl	134dc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13982:	3601      	adds	r6, #1
   13984:	2e04      	cmp	r6, #4
   13986:	f105 050c 	add.w	r5, r5, #12
   1398a:	d1e2      	bne.n	13952 <notify_cb+0x5e>
   1398c:	e7c3      	b.n	13916 <notify_cb+0x22>
			bt_conn_unref(conn);
   1398e:	f7fd fd29 	bl	113e4 <bt_conn_unref>
   13992:	e7f6      	b.n	13982 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13994:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   13998:	b123      	cbz	r3, 139a4 <notify_cb+0xb0>
   1399a:	4641      	mov	r1, r8
   1399c:	4798      	blx	r3
   1399e:	b908      	cbnz	r0, 139a4 <notify_cb+0xb0>
			bt_conn_unref(conn);
   139a0:	4628      	mov	r0, r5
   139a2:	e7cd      	b.n	13940 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   139a4:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   139a6:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   139a8:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   139aa:	88a1      	ldrh	r1, [r4, #4]
   139ac:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   139ae:	d10f      	bne.n	139d0 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   139b0:	f7ff ff3a 	bl	13828 <gatt_indicate>
			if (err == 0) {
   139b4:	4606      	mov	r6, r0
   139b6:	b918      	cbnz	r0, 139c0 <notify_cb+0xcc>
				data->ind_params->_ref++;
   139b8:	6922      	ldr	r2, [r4, #16]
   139ba:	7d93      	ldrb	r3, [r2, #22]
   139bc:	3301      	adds	r3, #1
   139be:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   139c0:	4628      	mov	r0, r5
   139c2:	f7fd fd0f 	bl	113e4 <bt_conn_unref>
		if (err < 0) {
   139c6:	2e00      	cmp	r6, #0
   139c8:	db06      	blt.n	139d8 <notify_cb+0xe4>
		data->err = 0;
   139ca:	f8c4 b008 	str.w	fp, [r4, #8]
   139ce:	e7b9      	b.n	13944 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   139d0:	f7ff ff60 	bl	13894 <gatt_notify>
   139d4:	4606      	mov	r6, r0
   139d6:	e7f3      	b.n	139c0 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   139d8:	2000      	movs	r0, #0
   139da:	e794      	b.n	13906 <notify_cb+0x12>
   139dc:	0001332d 	.word	0x0001332d
   139e0:	20008388 	.word	0x20008388
   139e4:	2000b017 	.word	0x2000b017

000139e8 <bt_gatt_clear_sc>:
{
   139e8:	b570      	push	{r4, r5, r6, lr}
   139ea:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   139ec:	f7ff fc44 	bl	13278 <find_sc_cfg>
	if (!cfg) {
   139f0:	4604      	mov	r4, r0
   139f2:	b1e8      	cbz	r0, 13a30 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   139f4:	4605      	mov	r5, r0
   139f6:	f815 2b01 	ldrb.w	r2, [r5], #1
   139fa:	b1e2      	cbz	r2, 13a36 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   139fc:	ae02      	add	r6, sp, #8
   139fe:	2104      	movs	r1, #4
   13a00:	4630      	mov	r0, r6
   13a02:	f008 fe85 	bl	1c710 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13a06:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13a08:	4a0c      	ldr	r2, [pc, #48]	; (13a3c <bt_gatt_clear_sc+0x54>)
   13a0a:	462b      	mov	r3, r5
   13a0c:	2124      	movs	r1, #36	; 0x24
   13a0e:	a803      	add	r0, sp, #12
   13a10:	f7fa fc94 	bl	e33c <bt_settings_encode_key>
		err = settings_delete(key);
   13a14:	a803      	add	r0, sp, #12
   13a16:	f009 fba8 	bl	1d16a <settings_delete>
		if (err) {
   13a1a:	4602      	mov	r2, r0
   13a1c:	b118      	cbz	r0, 13a26 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   13a1e:	2145      	movs	r1, #69	; 0x45
   13a20:	4807      	ldr	r0, [pc, #28]	; (13a40 <bt_gatt_clear_sc+0x58>)
   13a22:	f008 ff0f 	bl	1c844 <printk>
	memset(cfg, 0, sizeof(*cfg));
   13a26:	220c      	movs	r2, #12
   13a28:	2100      	movs	r1, #0
   13a2a:	4620      	mov	r0, r4
   13a2c:	f00a fbed 	bl	1e20a <memset>
}
   13a30:	2000      	movs	r0, #0
   13a32:	b00c      	add	sp, #48	; 0x30
   13a34:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13a36:	9200      	str	r2, [sp, #0]
   13a38:	e7e6      	b.n	13a08 <bt_gatt_clear_sc+0x20>
   13a3a:	bf00      	nop
   13a3c:	0002543e 	.word	0x0002543e
   13a40:	00025260 	.word	0x00025260

00013a44 <sc_clear>:
{
   13a44:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13a46:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   13a4a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13a4c:	4631      	mov	r1, r6
   13a4e:	7a00      	ldrb	r0, [r0, #8]
   13a50:	f00a fe40 	bl	1e6d4 <bt_addr_le_is_bonded>
   13a54:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13a56:	4631      	mov	r1, r6
   13a58:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13a5a:	b14d      	cbz	r5, 13a70 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13a5c:	f7ff ffc4 	bl	139e8 <bt_gatt_clear_sc>
		if (err) {
   13a60:	4602      	mov	r2, r0
   13a62:	b170      	cbz	r0, 13a82 <sc_clear+0x3e>
}
   13a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13a68:	2145      	movs	r1, #69	; 0x45
   13a6a:	4806      	ldr	r0, [pc, #24]	; (13a84 <sc_clear+0x40>)
   13a6c:	f008 beea 	b.w	1c844 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13a70:	f7ff fc02 	bl	13278 <find_sc_cfg>
		if (cfg) {
   13a74:	b128      	cbz	r0, 13a82 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13a76:	4629      	mov	r1, r5
}
   13a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   13a7c:	220c      	movs	r2, #12
   13a7e:	f00a bbc4 	b.w	1e20a <memset>
}
   13a82:	bd70      	pop	{r4, r5, r6, pc}
   13a84:	00025282 	.word	0x00025282

00013a88 <disconnected_cb>:
{
   13a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a8c:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a8e:	4b25      	ldr	r3, [pc, #148]	; (13b24 <disconnected_cb+0x9c>)
   13a90:	6882      	ldr	r2, [r0, #8]
{
   13a92:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a94:	429a      	cmp	r2, r3
   13a96:	d12f      	bne.n	13af8 <disconnected_cb+0x70>
	ccc = attr->user_data;
   13a98:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   13a9a:	8beb      	ldrh	r3, [r5, #30]
   13a9c:	b363      	cbz	r3, 13af8 <disconnected_cb+0x70>
	value_used = false;
   13a9e:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   13aa2:	f8df b084 	ldr.w	fp, [pc, #132]	; 13b28 <disconnected_cb+0xa0>
   13aa6:	1c6c      	adds	r4, r5, #1
   13aa8:	f105 0a1f 	add.w	sl, r5, #31
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13aac:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   13ab0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13ab4:	b19b      	cbz	r3, 13ade <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13ab6:	4622      	mov	r2, r4
   13ab8:	4630      	mov	r0, r6
   13aba:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13abe:	f00a ff46 	bl	1e94e <bt_conn_is_peer_addr_le>
   13ac2:	b9e0      	cbnz	r0, 13afe <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13ac4:	4621      	mov	r1, r4
   13ac6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13aca:	f7fd fda9 	bl	11620 <bt_conn_lookup_addr_le>
			if (tmp) {
   13ace:	b130      	cbz	r0, 13ade <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   13ad0:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   13ad2:	2b07      	cmp	r3, #7
   13ad4:	bf08      	it	eq
   13ad6:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   13ada:	f7fd fc83 	bl	113e4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13ade:	340a      	adds	r4, #10
   13ae0:	45a2      	cmp	sl, r4
   13ae2:	d1e5      	bne.n	13ab0 <disconnected_cb+0x28>
	if (!value_used) {
   13ae4:	f1b8 0f00 	cmp.w	r8, #0
   13ae8:	d106      	bne.n	13af8 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   13aea:	6a2b      	ldr	r3, [r5, #32]
		ccc->value = 0U;
   13aec:	f8a5 801e 	strh.w	r8, [r5, #30]
		if (ccc->cfg_changed) {
   13af0:	b113      	cbz	r3, 13af8 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   13af2:	4641      	mov	r1, r8
   13af4:	4638      	mov	r0, r7
   13af6:	4798      	blx	r3
}
   13af8:	2001      	movs	r0, #1
   13afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13afe:	4649      	mov	r1, r9
   13b00:	7a30      	ldrb	r0, [r6, #8]
   13b02:	f00a fde7 	bl	1e6d4 <bt_addr_le_is_bonded>
   13b06:	b940      	cbnz	r0, 13b1a <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   13b08:	455d      	cmp	r5, fp
   13b0a:	d102      	bne.n	13b12 <disconnected_cb+0x8a>
					sc_clear(conn);
   13b0c:	4630      	mov	r0, r6
   13b0e:	f7ff ff99 	bl	13a44 <sc_clear>
				clear_ccc_cfg(cfg);
   13b12:	1e60      	subs	r0, r4, #1
   13b14:	f00b fcdd 	bl	1f4d2 <clear_ccc_cfg>
   13b18:	e7e1      	b.n	13ade <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13b1a:	4649      	mov	r1, r9
   13b1c:	4620      	mov	r0, r4
   13b1e:	f00b fcd5 	bl	1f4cc <bt_addr_le_copy>
   13b22:	e7dc      	b.n	13ade <disconnected_cb+0x56>
   13b24:	0001332d 	.word	0x0001332d
   13b28:	20008388 	.word	0x20008388

00013b2c <sc_commit>:
{
   13b2c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13b2e:	490b      	ldr	r1, [pc, #44]	; (13b5c <sc_commit+0x30>)
   13b30:	e8d1 3fef 	ldaex	r3, [r1]
   13b34:	f023 0302 	bic.w	r3, r3, #2
   13b38:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13b3c:	2a00      	cmp	r2, #0
   13b3e:	d1f7      	bne.n	13b30 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13b40:	4608      	mov	r0, r1
   13b42:	f00b fcdf 	bl	1f504 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13b46:	07c3      	lsls	r3, r0, #31
   13b48:	d506      	bpl.n	13b58 <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13b4a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13b4e:	2300      	movs	r3, #0
   13b50:	4803      	ldr	r0, [pc, #12]	; (13b60 <sc_commit+0x34>)
   13b52:	3930      	subs	r1, #48	; 0x30
   13b54:	f007 ff18 	bl	1b988 <k_delayed_work_submit_to_queue>
}
   13b58:	2000      	movs	r0, #0
   13b5a:	bd08      	pop	{r3, pc}
   13b5c:	20008f38 	.word	0x20008f38
   13b60:	20009630 	.word	0x20009630

00013b64 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b68:	4688      	mov	r8, r1
   13b6a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13b6c:	2112      	movs	r1, #18
   13b6e:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13b70:	4606      	mov	r6, r0
   13b72:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13b74:	f7fe fef4 	bl	12960 <bt_att_create_pdu>
	if (!buf) {
   13b78:	4604      	mov	r4, r0
   13b7a:	b1c0      	cbz	r0, 13bae <gatt_write_ccc.constprop.0+0x4a>
   13b7c:	f100 0908 	add.w	r9, r0, #8
   13b80:	2102      	movs	r1, #2
   13b82:	4648      	mov	r0, r9
   13b84:	f003 fdde 	bl	17744 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   13b88:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   13b8a:	f8a0 8000 	strh.w	r8, [r0]
   13b8e:	4648      	mov	r0, r9
   13b90:	f00c fcb3 	bl	204fa <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13b94:	2104      	movs	r1, #4
   13b96:	f105 0010 	add.w	r0, r5, #16
   13b9a:	f00b fca8 	bl	1f4ee <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   13b9e:	462b      	mov	r3, r5
   13ba0:	4621      	mov	r1, r4
   13ba2:	4630      	mov	r0, r6
}
   13ba4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   13ba8:	4a03      	ldr	r2, [pc, #12]	; (13bb8 <gatt_write_ccc.constprop.0+0x54>)
   13baa:	f7ff bd37 	b.w	1361c <gatt_send.constprop.0>
}
   13bae:	f06f 000b 	mvn.w	r0, #11
   13bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bb6:	bf00      	nop
   13bb8:	0001f5b1 	.word	0x0001f5b1

00013bbc <sc_indicate_rsp>:
{
   13bbc:	b510      	push	{r4, lr}
   13bbe:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13bc0:	4910      	ldr	r1, [pc, #64]	; (13c04 <sc_indicate_rsp+0x48>)
   13bc2:	e8d1 3fef 	ldaex	r3, [r1]
   13bc6:	f023 0302 	bic.w	r3, r3, #2
   13bca:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13bce:	2a00      	cmp	r2, #0
   13bd0:	d1f7      	bne.n	13bc2 <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13bd2:	4608      	mov	r0, r1
   13bd4:	f00b fc96 	bl	1f504 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13bd8:	07c2      	lsls	r2, r0, #31
   13bda:	d505      	bpl.n	13be8 <sc_indicate_rsp+0x2c>
   13bdc:	2200      	movs	r2, #0
   13bde:	2300      	movs	r3, #0
   13be0:	4809      	ldr	r0, [pc, #36]	; (13c08 <sc_indicate_rsp+0x4c>)
   13be2:	3930      	subs	r1, #48	; 0x30
   13be4:	f007 fed0 	bl	1b988 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   13be8:	4620      	mov	r0, r4
   13bea:	f7ff fb23 	bl	13234 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13bee:	b140      	cbz	r0, 13c02 <sc_indicate_rsp+0x46>
   13bf0:	7a03      	ldrb	r3, [r0, #8]
   13bf2:	07db      	lsls	r3, r3, #31
   13bf4:	d505      	bpl.n	13c02 <sc_indicate_rsp+0x46>
}
   13bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13bfa:	2101      	movs	r1, #1
   13bfc:	300c      	adds	r0, #12
   13bfe:	f00b bc76 	b.w	1f4ee <atomic_or>
   13c02:	bd10      	pop	{r4, pc}
   13c04:	20008f38 	.word	0x20008f38
   13c08:	20009630 	.word	0x20009630

00013c0c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13c0c:	2201      	movs	r2, #1
{
   13c0e:	b570      	push	{r4, r5, r6, lr}
   13c10:	4b26      	ldr	r3, [pc, #152]	; (13cac <bt_gatt_init+0xa0>)
   13c12:	e8d3 1fef 	ldaex	r1, [r3]
   13c16:	2900      	cmp	r1, #0
   13c18:	d103      	bne.n	13c22 <bt_gatt_init+0x16>
   13c1a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13c1e:	2800      	cmp	r0, #0
   13c20:	d1f7      	bne.n	13c12 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13c22:	d142      	bne.n	13caa <bt_gatt_init+0x9e>
   13c24:	4b22      	ldr	r3, [pc, #136]	; (13cb0 <bt_gatt_init+0xa4>)
   13c26:	e8d3 1fef 	ldaex	r1, [r3]
   13c2a:	2900      	cmp	r1, #0
   13c2c:	d103      	bne.n	13c36 <bt_gatt_init+0x2a>
   13c2e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13c32:	2800      	cmp	r0, #0
   13c34:	d1f7      	bne.n	13c26 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13c36:	d034      	beq.n	13ca2 <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13c38:	4c1e      	ldr	r4, [pc, #120]	; (13cb4 <bt_gatt_init+0xa8>)
   13c3a:	2230      	movs	r2, #48	; 0x30
   13c3c:	2100      	movs	r1, #0
   13c3e:	4620      	mov	r0, r4
   13c40:	f00a fae3 	bl	1e20a <memset>
   13c44:	4b1c      	ldr	r3, [pc, #112]	; (13cb8 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13c46:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13c48:	6063      	str	r3, [r4, #4]
   13c4a:	4c1c      	ldr	r4, [pc, #112]	; (13cbc <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13c4c:	2300      	movs	r3, #0
   13c4e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13c52:	481b      	ldr	r0, [pc, #108]	; (13cc0 <bt_gatt_init+0xb4>)
   13c54:	f007 fe98 	bl	1b988 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13c58:	2100      	movs	r1, #0
   13c5a:	f104 0020 	add.w	r0, r4, #32
   13c5e:	2230      	movs	r2, #48	; 0x30
   13c60:	f00a fad3 	bl	1e20a <memset>
   13c64:	4b17      	ldr	r3, [pc, #92]	; (13cc4 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13c66:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13c6a:	6263      	str	r3, [r4, #36]	; 0x24
   13c6c:	2102      	movs	r1, #2
}
   13c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13c72:	f00b bc3c 	b.w	1f4ee <atomic_or>
		last_static_handle += svc->attr_count;
   13c76:	4a14      	ldr	r2, [pc, #80]	; (13cc8 <bt_gatt_init+0xbc>)
   13c78:	6863      	ldr	r3, [r4, #4]
   13c7a:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13c7c:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13c7e:	440b      	add	r3, r1
   13c80:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13c82:	42ac      	cmp	r4, r5
   13c84:	d90a      	bls.n	13c9c <bt_gatt_init+0x90>
   13c86:	4631      	mov	r1, r6
   13c88:	4810      	ldr	r0, [pc, #64]	; (13ccc <bt_gatt_init+0xc0>)
   13c8a:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13c8e:	f008 fdd9 	bl	1c844 <printk>
   13c92:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13c96:	4630      	mov	r0, r6
   13c98:	f009 f87a 	bl	1cd90 <assert_post_action>
   13c9c:	42ac      	cmp	r4, r5
   13c9e:	d3ea      	bcc.n	13c76 <bt_gatt_init+0x6a>
   13ca0:	e7ca      	b.n	13c38 <bt_gatt_init+0x2c>
   13ca2:	4c0b      	ldr	r4, [pc, #44]	; (13cd0 <bt_gatt_init+0xc4>)
   13ca4:	4d0b      	ldr	r5, [pc, #44]	; (13cd4 <bt_gatt_init+0xc8>)
   13ca6:	4e0c      	ldr	r6, [pc, #48]	; (13cd8 <bt_gatt_init+0xcc>)
   13ca8:	e7eb      	b.n	13c82 <bt_gatt_init+0x76>
}
   13caa:	bd70      	pop	{r4, r5, r6, pc}
   13cac:	20009cac 	.word	0x20009cac
   13cb0:	20009cf8 	.word	0x20009cf8
   13cb4:	20008eb8 	.word	0x20008eb8
   13cb8:	0001f8a9 	.word	0x0001f8a9
   13cbc:	20008ee8 	.word	0x20008ee8
   13cc0:	20009630 	.word	0x20009630
   13cc4:	0001429d 	.word	0x0001429d
   13cc8:	2000b014 	.word	0x2000b014
   13ccc:	00022c66 	.word	0x00022c66
   13cd0:	00021854 	.word	0x00021854
   13cd4:	00021884 	.word	0x00021884
   13cd8:	0002529d 	.word	0x0002529d

00013cdc <bt_gatt_attr_get_handle>:
{
   13cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13ce0:	4604      	mov	r4, r0
   13ce2:	b910      	cbnz	r0, 13cea <bt_gatt_attr_get_handle+0xe>
		return 0;
   13ce4:	2000      	movs	r0, #0
}
   13ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   13cea:	8a00      	ldrh	r0, [r0, #16]
   13cec:	2800      	cmp	r0, #0
   13cee:	d1fa      	bne.n	13ce6 <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13cf0:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13cf4:	4d17      	ldr	r5, [pc, #92]	; (13d54 <bt_gatt_attr_get_handle+0x78>)
   13cf6:	4e18      	ldr	r6, [pc, #96]	; (13d58 <bt_gatt_attr_get_handle+0x7c>)
   13cf8:	4f18      	ldr	r7, [pc, #96]	; (13d5c <bt_gatt_attr_get_handle+0x80>)
   13cfa:	42b5      	cmp	r5, r6
   13cfc:	d90a      	bls.n	13d14 <bt_gatt_attr_get_handle+0x38>
   13cfe:	4639      	mov	r1, r7
   13d00:	4817      	ldr	r0, [pc, #92]	; (13d60 <bt_gatt_attr_get_handle+0x84>)
   13d02:	f240 522d 	movw	r2, #1325	; 0x52d
   13d06:	f008 fd9d 	bl	1c844 <printk>
   13d0a:	f240 512d 	movw	r1, #1325	; 0x52d
   13d0e:	4638      	mov	r0, r7
   13d10:	f009 f83e 	bl	1cd90 <assert_post_action>
   13d14:	42b5      	cmp	r5, r6
   13d16:	d2e5      	bcs.n	13ce4 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13d18:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   13d1c:	4564      	cmp	r4, ip
   13d1e:	d306      	bcc.n	13d2e <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13d20:	f04f 0e14 	mov.w	lr, #20
   13d24:	fb0e c301 	mla	r3, lr, r1, ip
   13d28:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   13d2a:	429c      	cmp	r4, r3
   13d2c:	d910      	bls.n	13d50 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13d2e:	eb08 0001 	add.w	r0, r8, r1
   13d32:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13d34:	4680      	mov	r8, r0
   13d36:	3508      	adds	r5, #8
   13d38:	e7df      	b.n	13cfa <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   13d3a:	fb0e c302 	mla	r3, lr, r2, ip
   13d3e:	429c      	cmp	r4, r3
   13d40:	d0d1      	beq.n	13ce6 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13d42:	3201      	adds	r2, #1
   13d44:	eb08 0302 	add.w	r3, r8, r2
   13d48:	4291      	cmp	r1, r2
   13d4a:	b298      	uxth	r0, r3
   13d4c:	d1f5      	bne.n	13d3a <bt_gatt_attr_get_handle+0x5e>
   13d4e:	e7f1      	b.n	13d34 <bt_gatt_attr_get_handle+0x58>
   13d50:	2200      	movs	r2, #0
   13d52:	e7f7      	b.n	13d44 <bt_gatt_attr_get_handle+0x68>
   13d54:	00021854 	.word	0x00021854
   13d58:	00021884 	.word	0x00021884
   13d5c:	0002529d 	.word	0x0002529d
   13d60:	00022c66 	.word	0x00022c66

00013d64 <bt_gatt_foreach_attr_type>:
{
   13d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d68:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   13d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13d6e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13d72:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13d74:	2d00      	cmp	r5, #0
   13d76:	bf08      	it	eq
   13d78:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   13d7a:	4b2b      	ldr	r3, [pc, #172]	; (13e28 <bt_gatt_foreach_attr_type+0xc4>)
{
   13d7c:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13d7e:	881b      	ldrh	r3, [r3, #0]
{
   13d80:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13d82:	4283      	cmp	r3, r0
   13d84:	d24b      	bcs.n	13e1e <bt_gatt_foreach_attr_type+0xba>
}
   13d86:	b003      	add	sp, #12
   13d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13d8c:	6873      	ldr	r3, [r6, #4]
   13d8e:	4423      	add	r3, r4
   13d90:	42bb      	cmp	r3, r7
   13d92:	d241      	bcs.n	13e18 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13d94:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13d96:	3608      	adds	r6, #8
   13d98:	4b24      	ldr	r3, [pc, #144]	; (13e2c <bt_gatt_foreach_attr_type+0xc8>)
   13d9a:	429e      	cmp	r6, r3
   13d9c:	d90a      	bls.n	13db4 <bt_gatt_foreach_attr_type+0x50>
   13d9e:	4659      	mov	r1, fp
   13da0:	4823      	ldr	r0, [pc, #140]	; (13e30 <bt_gatt_foreach_attr_type+0xcc>)
   13da2:	f240 52f1 	movw	r2, #1521	; 0x5f1
   13da6:	f008 fd4d 	bl	1c844 <printk>
   13daa:	f240 51f1 	movw	r1, #1521	; 0x5f1
   13dae:	4658      	mov	r0, fp
   13db0:	f008 ffee 	bl	1cd90 <assert_post_action>
   13db4:	4b1d      	ldr	r3, [pc, #116]	; (13e2c <bt_gatt_foreach_attr_type+0xc8>)
   13db6:	429e      	cmp	r6, r3
   13db8:	d3e8      	bcc.n	13d8c <bt_gatt_foreach_attr_type+0x28>
   13dba:	e7e4      	b.n	13d86 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13dbc:	4640      	mov	r0, r8
   13dbe:	5889      	ldr	r1, [r1, r2]
   13dc0:	9301      	str	r3, [sp, #4]
   13dc2:	f00a fa92 	bl	1e2ea <bt_uuid_cmp>
   13dc6:	9b01      	ldr	r3, [sp, #4]
   13dc8:	b198      	cbz	r0, 13df2 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13dca:	3401      	adds	r4, #1
   13dcc:	f10a 0a01 	add.w	sl, sl, #1
   13dd0:	b2a4      	uxth	r4, r4
   13dd2:	6873      	ldr	r3, [r6, #4]
   13dd4:	4553      	cmp	r3, sl
   13dd6:	d9de      	bls.n	13d96 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   13dd8:	9b00      	ldr	r3, [sp, #0]
   13dda:	429c      	cmp	r4, r3
   13ddc:	d8d3      	bhi.n	13d86 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   13dde:	42bc      	cmp	r4, r7
   13de0:	d3f3      	bcc.n	13dca <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13de2:	2314      	movs	r3, #20
   13de4:	fb03 f20a 	mul.w	r2, r3, sl
   13de8:	6831      	ldr	r1, [r6, #0]
   13dea:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13dec:	f1b8 0f00 	cmp.w	r8, #0
   13df0:	d1e4      	bne.n	13dbc <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   13df2:	f1b9 0f00 	cmp.w	r9, #0
   13df6:	d10b      	bne.n	13e10 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   13df8:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   13dfa:	4618      	mov	r0, r3
	*num_matches -= 1;
   13dfc:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   13dfe:	4621      	mov	r1, r4
   13e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13e04:	4798      	blx	r3
	if (!*num_matches) {
   13e06:	2d00      	cmp	r5, #0
   13e08:	d0bd      	beq.n	13d86 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13e0a:	2800      	cmp	r0, #0
   13e0c:	d1dd      	bne.n	13dca <bt_gatt_foreach_attr_type+0x66>
   13e0e:	e7ba      	b.n	13d86 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   13e10:	68da      	ldr	r2, [r3, #12]
   13e12:	4591      	cmp	r9, r2
   13e14:	d1d9      	bne.n	13dca <bt_gatt_foreach_attr_type+0x66>
   13e16:	e7ef      	b.n	13df8 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13e18:	f04f 0a00 	mov.w	sl, #0
   13e1c:	e7d9      	b.n	13dd2 <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   13e1e:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13e20:	4e04      	ldr	r6, [pc, #16]	; (13e34 <bt_gatt_foreach_attr_type+0xd0>)
   13e22:	f8df b014 	ldr.w	fp, [pc, #20]	; 13e38 <bt_gatt_foreach_attr_type+0xd4>
   13e26:	e7b7      	b.n	13d98 <bt_gatt_foreach_attr_type+0x34>
   13e28:	2000b014 	.word	0x2000b014
   13e2c:	00021884 	.word	0x00021884
   13e30:	00022c66 	.word	0x00022c66
   13e34:	00021854 	.word	0x00021854
   13e38:	0002529d 	.word	0x0002529d

00013e3c <db_hash_gen>:
	uint8_t key[16] = {};
   13e3c:	2300      	movs	r3, #0
{
   13e3e:	b530      	push	{r4, r5, lr}
   13e40:	b0c9      	sub	sp, #292	; 0x124
   13e42:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13e44:	4669      	mov	r1, sp
   13e46:	aa1c      	add	r2, sp, #112	; 0x70
   13e48:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   13e4a:	e9cd 3300 	strd	r3, r3, [sp]
   13e4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13e52:	f009 fdb8 	bl	1d9c6 <tc_cmac_setup>
   13e56:	b928      	cbnz	r0, 13e64 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   13e58:	2145      	movs	r1, #69	; 0x45
   13e5a:	4812      	ldr	r0, [pc, #72]	; (13ea4 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   13e5c:	f008 fcf2 	bl	1c844 <printk>
}
   13e60:	b049      	add	sp, #292	; 0x124
   13e62:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13e64:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13e68:	2001      	movs	r0, #1
   13e6a:	4a0f      	ldr	r2, [pc, #60]	; (13ea8 <db_hash_gen+0x6c>)
   13e6c:	ab04      	add	r3, sp, #16
   13e6e:	f00b fd10 	bl	1f892 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13e72:	480e      	ldr	r0, [pc, #56]	; (13eac <db_hash_gen+0x70>)
   13e74:	a904      	add	r1, sp, #16
   13e76:	f009 fe3c 	bl	1daf2 <tc_cmac_final>
   13e7a:	b910      	cbnz	r0, 13e82 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   13e7c:	2145      	movs	r1, #69	; 0x45
   13e7e:	480c      	ldr	r0, [pc, #48]	; (13eb0 <db_hash_gen+0x74>)
   13e80:	e7ec      	b.n	13e5c <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13e82:	2208      	movs	r2, #8
   13e84:	4b09      	ldr	r3, [pc, #36]	; (13eac <db_hash_gen+0x70>)
   13e86:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   13e8a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13e8c:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   13e90:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13e92:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   13e96:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   13e98:	d1f7      	bne.n	13e8a <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   13e9a:	2c00      	cmp	r4, #0
   13e9c:	d0e0      	beq.n	13e60 <db_hash_gen+0x24>
		db_hash_store();
   13e9e:	f7ff f9b3 	bl	13208 <db_hash_store>
   13ea2:	e7dd      	b.n	13e60 <db_hash_gen+0x24>
   13ea4:	000252cd 	.word	0x000252cd
   13ea8:	0001f3a9 	.word	0x0001f3a9
   13eac:	2000b727 	.word	0x2000b727
   13eb0:	000252eb 	.word	0x000252eb

00013eb4 <db_hash_commit>:
{
   13eb4:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   13eb6:	4821      	ldr	r0, [pc, #132]	; (13f3c <db_hash_commit+0x88>)
   13eb8:	f007 fdd6 	bl	1ba68 <k_delayed_work_cancel>
	if (!err) {
   13ebc:	b908      	cbnz	r0, 13ec2 <db_hash_commit+0xe>
		db_hash_gen(false);
   13ebe:	f7ff ffbd 	bl	13e3c <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   13ec2:	2210      	movs	r2, #16
   13ec4:	491e      	ldr	r1, [pc, #120]	; (13f40 <db_hash_commit+0x8c>)
   13ec6:	481f      	ldr	r0, [pc, #124]	; (13f44 <db_hash_commit+0x90>)
   13ec8:	f00a f963 	bl	1e192 <memcmp>
   13ecc:	b968      	cbnz	r0, 13eea <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   13ece:	481e      	ldr	r0, [pc, #120]	; (13f48 <db_hash_commit+0x94>)
   13ed0:	f007 fdca 	bl	1ba68 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13ed4:	4b1d      	ldr	r3, [pc, #116]	; (13f4c <db_hash_commit+0x98>)
   13ed6:	e8d3 2fef 	ldaex	r2, [r3]
   13eda:	f022 0201 	bic.w	r2, r2, #1
   13ede:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13ee2:	2900      	cmp	r1, #0
   13ee4:	d1f7      	bne.n	13ed6 <db_hash_commit+0x22>
}
   13ee6:	2000      	movs	r0, #0
   13ee8:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13eea:	4c19      	ldr	r4, [pc, #100]	; (13f50 <db_hash_commit+0x9c>)
   13eec:	2101      	movs	r1, #1
   13eee:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13ef2:	f00b fafc 	bl	1f4ee <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13ef6:	07c2      	lsls	r2, r0, #31
   13ef8:	d410      	bmi.n	13f1c <db_hash_commit+0x68>
		gatt_sc.start = start;
   13efa:	4b16      	ldr	r3, [pc, #88]	; (13f54 <db_hash_commit+0xa0>)
   13efc:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13efe:	4813      	ldr	r0, [pc, #76]	; (13f4c <db_hash_commit+0x98>)
   13f00:	f00b fb00 	bl	1f504 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   13f04:	0783      	lsls	r3, r0, #30
   13f06:	d406      	bmi.n	13f16 <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13f08:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13f0c:	2300      	movs	r3, #0
   13f0e:	490e      	ldr	r1, [pc, #56]	; (13f48 <db_hash_commit+0x94>)
   13f10:	4811      	ldr	r0, [pc, #68]	; (13f58 <db_hash_commit+0xa4>)
   13f12:	f007 fd39 	bl	1b988 <k_delayed_work_submit_to_queue>
	db_hash_store();
   13f16:	f7ff f977 	bl	13208 <db_hash_store>
	return 0;
   13f1a:	e7e4      	b.n	13ee6 <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   13f1c:	8b23      	ldrh	r3, [r4, #24]
   13f1e:	8b62      	ldrh	r2, [r4, #26]
   13f20:	2b01      	cmp	r3, #1
   13f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13f26:	d805      	bhi.n	13f34 <db_hash_commit+0x80>
   13f28:	429a      	cmp	r2, r3
   13f2a:	d0f4      	beq.n	13f16 <db_hash_commit+0x62>
		*end = new_end;
   13f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13f30:	8363      	strh	r3, [r4, #26]
   13f32:	e7e4      	b.n	13efe <db_hash_commit+0x4a>
	if (*end < new_end) {
   13f34:	429a      	cmp	r2, r3
		*start = new_start;
   13f36:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   13f38:	d0e1      	beq.n	13efe <db_hash_commit+0x4a>
   13f3a:	e7f7      	b.n	13f2c <db_hash_commit+0x78>
   13f3c:	20008eb8 	.word	0x20008eb8
   13f40:	2000b727 	.word	0x2000b727
   13f44:	2000b737 	.word	0x2000b737
   13f48:	20008f08 	.word	0x20008f08
   13f4c:	20008f38 	.word	0x20008f38
   13f50:	20008ee8 	.word	0x20008ee8
   13f54:	ffff0001 	.word	0xffff0001
   13f58:	20009630 	.word	0x20009630

00013f5c <ccc_set_direct>:
{
   13f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f60:	b0b9      	sub	sp, #228	; 0xe4
   13f62:	4688      	mov	r8, r1
   13f64:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13f66:	492c      	ldr	r1, [pc, #176]	; (14018 <ccc_set_direct+0xbc>)
   13f68:	466a      	mov	r2, sp
   13f6a:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   13f6c:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13f6e:	f009 f900 	bl	1d172 <settings_name_steq>
   13f72:	b948      	cbnz	r0, 13f88 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   13f74:	2145      	movs	r1, #69	; 0x45
   13f76:	4829      	ldr	r0, [pc, #164]	; (1401c <ccc_set_direct+0xc0>)
   13f78:	f008 fc64 	bl	1c844 <printk>
   13f7c:	f06f 0515 	mvn.w	r5, #21
}
   13f80:	4628      	mov	r0, r5
   13f82:	b039      	add	sp, #228	; 0xe4
   13f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   13f88:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   13f8a:	a901      	add	r1, sp, #4
   13f8c:	4620      	mov	r0, r4
   13f8e:	f009 f913 	bl	1d1b8 <settings_name_next>
		if (!name) {
   13f92:	b93c      	cbnz	r4, 13fa4 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   13f94:	2145      	movs	r1, #69	; 0x45
   13f96:	4822      	ldr	r0, [pc, #136]	; (14020 <ccc_set_direct+0xc4>)
   13f98:	f008 fc54 	bl	1c844 <printk>
			return -EINVAL;
   13f9c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   13fa0:	4625      	mov	r5, r4
   13fa2:	e7ed      	b.n	13f80 <ccc_set_direct+0x24>
		} else if (!next) {
   13fa4:	9801      	ldr	r0, [sp, #4]
   13fa6:	b978      	cbnz	r0, 13fc8 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   13fa8:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   13fac:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   13fb0:	4649      	mov	r1, r9
   13fb2:	4620      	mov	r0, r4
   13fb4:	f00a f975 	bl	1e2a2 <bt_settings_decode_key>
		if (err) {
   13fb8:	4605      	mov	r5, r0
   13fba:	b150      	cbz	r0, 13fd2 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   13fbc:	4622      	mov	r2, r4
   13fbe:	2145      	movs	r1, #69	; 0x45
   13fc0:	4818      	ldr	r0, [pc, #96]	; (14024 <ccc_set_direct+0xc8>)
   13fc2:	f008 fc3f 	bl	1c844 <printk>
   13fc6:	e7e9      	b.n	13f9c <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   13fc8:	220a      	movs	r2, #10
   13fca:	2100      	movs	r1, #0
   13fcc:	f00a f804 	bl	1dfd8 <strtol>
   13fd0:	e7ea      	b.n	13fa8 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   13fd2:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   13fd6:	f1b8 0f00 	cmp.w	r8, #0
   13fda:	d019      	beq.n	14010 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   13fdc:	f10d 0820 	add.w	r8, sp, #32
   13fe0:	22c0      	movs	r2, #192	; 0xc0
   13fe2:	4641      	mov	r1, r8
   13fe4:	4638      	mov	r0, r7
   13fe6:	47b0      	blx	r6
			if (len < 0) {
   13fe8:	1e04      	subs	r4, r0, #0
   13fea:	da05      	bge.n	13ff8 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   13fec:	4622      	mov	r2, r4
   13fee:	2145      	movs	r1, #69	; 0x45
   13ff0:	480d      	ldr	r0, [pc, #52]	; (14028 <ccc_set_direct+0xcc>)
   13ff2:	f008 fc27 	bl	1c844 <printk>
				return len;
   13ff6:	e7d3      	b.n	13fa0 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   13ff8:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   13ffa:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   13ffe:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   14000:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14004:	2001      	movs	r0, #1
   14006:	4a09      	ldr	r2, [pc, #36]	; (1402c <ccc_set_direct+0xd0>)
   14008:	ab04      	add	r3, sp, #16
   1400a:	f00b fc42 	bl	1f892 <bt_gatt_foreach_attr>
	return 0;
   1400e:	e7b7      	b.n	13f80 <ccc_set_direct+0x24>
			load.count = 0;
   14010:	e9cd 0006 	strd	r0, r0, [sp, #24]
   14014:	e7f4      	b.n	14000 <ccc_set_direct+0xa4>
   14016:	bf00      	nop
   14018:	00025309 	.word	0x00025309
   1401c:	00025310 	.word	0x00025310
   14020:	00023e3d 	.word	0x00023e3d
   14024:	00025178 	.word	0x00025178
   14028:	0002508a 	.word	0x0002508a
   1402c:	00013765 	.word	0x00013765

00014030 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   14030:	2300      	movs	r3, #0
{
   14032:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   14034:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   14036:	f7ff fe51 	bl	13cdc <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1403a:	1c41      	adds	r1, r0, #1
   1403c:	b289      	uxth	r1, r1
   1403e:	4608      	mov	r0, r1
   14040:	4a03      	ldr	r2, [pc, #12]	; (14050 <bt_gatt_attr_next+0x20>)
   14042:	ab01      	add	r3, sp, #4
   14044:	f00b fc25 	bl	1f892 <bt_gatt_foreach_attr>
}
   14048:	9801      	ldr	r0, [sp, #4]
   1404a:	b003      	add	sp, #12
   1404c:	f85d fb04 	ldr.w	pc, [sp], #4
   14050:	0001f34f 	.word	0x0001f34f

00014054 <bt_gatt_notify_cb>:
{
   14054:	b530      	push	{r4, r5, lr}
   14056:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   14058:	460d      	mov	r5, r1
{
   1405a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1405c:	b951      	cbnz	r1, 14074 <bt_gatt_notify_cb+0x20>
   1405e:	4940      	ldr	r1, [pc, #256]	; (14160 <bt_gatt_notify_cb+0x10c>)
   14060:	4840      	ldr	r0, [pc, #256]	; (14164 <bt_gatt_notify_cb+0x110>)
   14062:	f640 023d 	movw	r2, #2109	; 0x83d
   14066:	f008 fbed 	bl	1c844 <printk>
   1406a:	f640 013d 	movw	r1, #2109	; 0x83d
   1406e:	483c      	ldr	r0, [pc, #240]	; (14160 <bt_gatt_notify_cb+0x10c>)
   14070:	f008 fe8e 	bl	1cd90 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   14074:	686b      	ldr	r3, [r5, #4]
   14076:	b953      	cbnz	r3, 1408e <bt_gatt_notify_cb+0x3a>
   14078:	4939      	ldr	r1, [pc, #228]	; (14160 <bt_gatt_notify_cb+0x10c>)
   1407a:	483a      	ldr	r0, [pc, #232]	; (14164 <bt_gatt_notify_cb+0x110>)
   1407c:	f640 023e 	movw	r2, #2110	; 0x83e
   14080:	f008 fbe0 	bl	1c844 <printk>
   14084:	f640 013e 	movw	r1, #2110	; 0x83e
   14088:	4835      	ldr	r0, [pc, #212]	; (14160 <bt_gatt_notify_cb+0x10c>)
   1408a:	f008 fe81 	bl	1cd90 <assert_post_action>
   1408e:	4836      	ldr	r0, [pc, #216]	; (14168 <bt_gatt_notify_cb+0x114>)
   14090:	f00b fa38 	bl	1f504 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14094:	0782      	lsls	r2, r0, #30
   14096:	d55d      	bpl.n	14154 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   14098:	6868      	ldr	r0, [r5, #4]
   1409a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1409c:	b114      	cbz	r4, 140a4 <bt_gatt_notify_cb+0x50>
   1409e:	7b63      	ldrb	r3, [r4, #13]
   140a0:	2b07      	cmp	r3, #7
   140a2:	d15a      	bne.n	1415a <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   140a4:	f7ff fe1a 	bl	13cdc <bt_gatt_attr_get_handle>
   140a8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   140ac:	b918      	cbnz	r0, 140b6 <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   140ae:	f06f 0001 	mvn.w	r0, #1
}
   140b2:	b00b      	add	sp, #44	; 0x2c
   140b4:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   140b6:	682a      	ldr	r2, [r5, #0]
   140b8:	b9aa      	cbnz	r2, 140e6 <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   140ba:	9b05      	ldr	r3, [sp, #20]
   140bc:	a904      	add	r1, sp, #16
   140be:	6818      	ldr	r0, [r3, #0]
   140c0:	2300      	movs	r3, #0
   140c2:	f88d 3010 	strb.w	r3, [sp, #16]
   140c6:	f642 0303 	movw	r3, #10243	; 0x2803
   140ca:	f8ad 3012 	strh.w	r3, [sp, #18]
   140ce:	f00a f90c 	bl	1e2ea <bt_uuid_cmp>
   140d2:	b1c0      	cbz	r0, 14106 <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   140d4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   140d8:	b314      	cbz	r4, 14120 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   140da:	4601      	mov	r1, r0
   140dc:	462a      	mov	r2, r5
   140de:	4620      	mov	r0, r4
   140e0:	f7ff fbd8 	bl	13894 <gatt_notify>
   140e4:	e7e5      	b.n	140b2 <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   140e6:	a905      	add	r1, sp, #20
   140e8:	9102      	str	r1, [sp, #8]
   140ea:	4920      	ldr	r1, [pc, #128]	; (1416c <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   140ec:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   140ee:	9101      	str	r1, [sp, #4]
   140f0:	2101      	movs	r1, #1
   140f2:	9100      	str	r1, [sp, #0]
   140f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   140f8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   140fa:	f7ff fe33 	bl	13d64 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   140fe:	9b05      	ldr	r3, [sp, #20]
   14100:	2b00      	cmp	r3, #0
   14102:	d1da      	bne.n	140ba <bt_gatt_notify_cb+0x66>
   14104:	e7d3      	b.n	140ae <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   14106:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   14108:	68c3      	ldr	r3, [r0, #12]
   1410a:	799b      	ldrb	r3, [r3, #6]
   1410c:	06db      	lsls	r3, r3, #27
   1410e:	d402      	bmi.n	14116 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   14110:	f06f 0015 	mvn.w	r0, #21
   14114:	e7cd      	b.n	140b2 <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   14116:	f00b fb6e 	bl	1f7f6 <bt_gatt_attr_value_handle>
   1411a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1411e:	e7d9      	b.n	140d4 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   14120:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14124:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   14128:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1412a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1412c:	f8ad 2012 	strh.w	r2, [sp, #18]
   14130:	aa05      	add	r2, sp, #20
   14132:	9202      	str	r2, [sp, #8]
   14134:	4a0e      	ldr	r2, [pc, #56]	; (14170 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   14136:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1413a:	e9cd 3200 	strd	r3, r2, [sp]
   1413e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14142:	4623      	mov	r3, r4
   14144:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   14146:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14148:	f88d 4010 	strb.w	r4, [sp, #16]
   1414c:	f7ff fe0a 	bl	13d64 <bt_gatt_foreach_attr_type>
	return data.err;
   14150:	9807      	ldr	r0, [sp, #28]
   14152:	e7ae      	b.n	140b2 <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   14154:	f06f 000a 	mvn.w	r0, #10
   14158:	e7ab      	b.n	140b2 <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   1415a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1415e:	e7a8      	b.n	140b2 <bt_gatt_notify_cb+0x5e>
   14160:	0002529d 	.word	0x0002529d
   14164:	00022c66 	.word	0x00022c66
   14168:	20008094 	.word	0x20008094
   1416c:	0001f39d 	.word	0x0001f39d
   14170:	000138f5 	.word	0x000138f5

00014174 <bt_gatt_indicate>:
{
   14174:	b530      	push	{r4, r5, lr}
   14176:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   14178:	460c      	mov	r4, r1
{
   1417a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1417c:	b951      	cbnz	r1, 14194 <bt_gatt_indicate+0x20>
   1417e:	4942      	ldr	r1, [pc, #264]	; (14288 <bt_gatt_indicate+0x114>)
   14180:	4842      	ldr	r0, [pc, #264]	; (1428c <bt_gatt_indicate+0x118>)
   14182:	f640 0289 	movw	r2, #2185	; 0x889
   14186:	f008 fb5d 	bl	1c844 <printk>
   1418a:	f640 0189 	movw	r1, #2185	; 0x889
   1418e:	483e      	ldr	r0, [pc, #248]	; (14288 <bt_gatt_indicate+0x114>)
   14190:	f008 fdfe 	bl	1cd90 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   14194:	6863      	ldr	r3, [r4, #4]
   14196:	b953      	cbnz	r3, 141ae <bt_gatt_indicate+0x3a>
   14198:	493b      	ldr	r1, [pc, #236]	; (14288 <bt_gatt_indicate+0x114>)
   1419a:	483c      	ldr	r0, [pc, #240]	; (1428c <bt_gatt_indicate+0x118>)
   1419c:	f640 028a 	movw	r2, #2186	; 0x88a
   141a0:	f008 fb50 	bl	1c844 <printk>
   141a4:	f640 018a 	movw	r1, #2186	; 0x88a
   141a8:	4837      	ldr	r0, [pc, #220]	; (14288 <bt_gatt_indicate+0x114>)
   141aa:	f008 fdf1 	bl	1cd90 <assert_post_action>
   141ae:	4838      	ldr	r0, [pc, #224]	; (14290 <bt_gatt_indicate+0x11c>)
   141b0:	f00b f9a8 	bl	1f504 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   141b4:	0782      	lsls	r2, r0, #30
   141b6:	d561      	bpl.n	1427c <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   141b8:	6860      	ldr	r0, [r4, #4]
   141ba:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   141bc:	b115      	cbz	r5, 141c4 <bt_gatt_indicate+0x50>
   141be:	7b6b      	ldrb	r3, [r5, #13]
   141c0:	2b07      	cmp	r3, #7
   141c2:	d15e      	bne.n	14282 <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   141c4:	f7ff fd8a 	bl	13cdc <bt_gatt_attr_get_handle>
   141c8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   141cc:	b918      	cbnz	r0, 141d6 <bt_gatt_indicate+0x62>
		return -ENOENT;
   141ce:	f06f 0001 	mvn.w	r0, #1
}
   141d2:	b00b      	add	sp, #44	; 0x2c
   141d4:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   141d6:	6822      	ldr	r2, [r4, #0]
   141d8:	b9ba      	cbnz	r2, 1420a <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   141da:	9b05      	ldr	r3, [sp, #20]
   141dc:	a904      	add	r1, sp, #16
   141de:	6818      	ldr	r0, [r3, #0]
   141e0:	2300      	movs	r3, #0
   141e2:	f88d 3010 	strb.w	r3, [sp, #16]
   141e6:	f642 0303 	movw	r3, #10243	; 0x2803
   141ea:	f8ad 3012 	strh.w	r3, [sp, #18]
   141ee:	f00a f87c 	bl	1e2ea <bt_uuid_cmp>
   141f2:	b1d0      	cbz	r0, 1422a <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   141f4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   141f8:	b325      	cbz	r5, 14244 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   141fa:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   141fc:	4601      	mov	r1, r0
   141fe:	4622      	mov	r2, r4
   14200:	4628      	mov	r0, r5
		params->_ref = 1;
   14202:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   14204:	f7ff fb10 	bl	13828 <gatt_indicate>
   14208:	e7e3      	b.n	141d2 <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1420a:	a905      	add	r1, sp, #20
   1420c:	9102      	str	r1, [sp, #8]
   1420e:	4921      	ldr	r1, [pc, #132]	; (14294 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   14210:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14212:	9101      	str	r1, [sp, #4]
   14214:	2101      	movs	r1, #1
   14216:	9100      	str	r1, [sp, #0]
   14218:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1421c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1421e:	f7ff fda1 	bl	13d64 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14222:	9b05      	ldr	r3, [sp, #20]
   14224:	2b00      	cmp	r3, #0
   14226:	d1d8      	bne.n	141da <bt_gatt_indicate+0x66>
   14228:	e7d1      	b.n	141ce <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1422a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1422c:	68c3      	ldr	r3, [r0, #12]
   1422e:	799b      	ldrb	r3, [r3, #6]
   14230:	069b      	lsls	r3, r3, #26
   14232:	d402      	bmi.n	1423a <bt_gatt_indicate+0xc6>
			return -EINVAL;
   14234:	f06f 0015 	mvn.w	r0, #21
   14238:	e7cb      	b.n	141d2 <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1423a:	f00b fadc 	bl	1f7f6 <bt_gatt_attr_value_handle>
   1423e:	f8ad 0018 	strh.w	r0, [sp, #24]
   14242:	e7d7      	b.n	141f4 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   14244:	f06f 0338 	mvn.w	r3, #56	; 0x38
   14248:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1424a:	2302      	movs	r3, #2
   1424c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14250:	f642 1302 	movw	r3, #10498	; 0x2902
   14254:	f8ad 3012 	strh.w	r3, [sp, #18]
   14258:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1425a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1425c:	9302      	str	r3, [sp, #8]
   1425e:	4b0e      	ldr	r3, [pc, #56]	; (14298 <bt_gatt_indicate+0x124>)
   14260:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14264:	9301      	str	r3, [sp, #4]
   14266:	2301      	movs	r3, #1
   14268:	aa04      	add	r2, sp, #16
   1426a:	9300      	str	r3, [sp, #0]
   1426c:	462b      	mov	r3, r5
	data.ind_params = params;
   1426e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14270:	f88d 5010 	strb.w	r5, [sp, #16]
   14274:	f7ff fd76 	bl	13d64 <bt_gatt_foreach_attr_type>
	return data.err;
   14278:	9807      	ldr	r0, [sp, #28]
   1427a:	e7aa      	b.n	141d2 <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   1427c:	f06f 000a 	mvn.w	r0, #10
   14280:	e7a7      	b.n	141d2 <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   14282:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14286:	e7a4      	b.n	141d2 <bt_gatt_indicate+0x5e>
   14288:	0002529d 	.word	0x0002529d
   1428c:	00022c66 	.word	0x00022c66
   14290:	20008094 	.word	0x20008094
   14294:	0001f39d 	.word	0x0001f39d
   14298:	000138f5 	.word	0x000138f5

0001429c <sc_process>:
{
   1429c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1429e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   142a2:	4604      	mov	r4, r0
   142a4:	4628      	mov	r0, r5
   142a6:	f00b f92d 	bl	1f504 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   142aa:	0783      	lsls	r3, r0, #30
   142ac:	d50a      	bpl.n	142c4 <sc_process+0x28>
   142ae:	491b      	ldr	r1, [pc, #108]	; (1431c <sc_process+0x80>)
   142b0:	481b      	ldr	r0, [pc, #108]	; (14320 <sc_process+0x84>)
   142b2:	f240 32ae 	movw	r2, #942	; 0x3ae
   142b6:	f008 fac5 	bl	1c844 <printk>
   142ba:	f240 31ae 	movw	r1, #942	; 0x3ae
   142be:	4817      	ldr	r0, [pc, #92]	; (1431c <sc_process+0x80>)
   142c0:	f008 fd66 	bl	1cd90 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   142c4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   142c8:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   142cc:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   142d0:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   142d4:	e8d5 3fef 	ldaex	r3, [r5]
   142d8:	f023 0301 	bic.w	r3, r3, #1
   142dc:	e8c5 3fe2 	stlex	r2, r3, [r5]
   142e0:	2a00      	cmp	r2, #0
   142e2:	d1f7      	bne.n	142d4 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   142e4:	4b0f      	ldr	r3, [pc, #60]	; (14324 <sc_process+0x88>)
	sc->start = 0U;
   142e6:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   142e8:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   142ec:	4b0e      	ldr	r3, [pc, #56]	; (14328 <sc_process+0x8c>)
	sc->start = 0U;
   142ee:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   142f2:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   142f6:	ab01      	add	r3, sp, #4
   142f8:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   142fc:	2304      	movs	r3, #4
	sc->end = 0U;
   142fe:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   14302:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   14306:	f1a4 0120 	sub.w	r1, r4, #32
   1430a:	f7ff ff33 	bl	14174 <bt_gatt_indicate>
   1430e:	b918      	cbnz	r0, 14318 <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14310:	2102      	movs	r1, #2
   14312:	4628      	mov	r0, r5
   14314:	f00b f8eb 	bl	1f4ee <atomic_or>
}
   14318:	b003      	add	sp, #12
   1431a:	bd30      	pop	{r4, r5, pc}
   1431c:	0002529d 	.word	0x0002529d
   14320:	00022c66 	.word	0x00022c66
   14324:	00022154 	.word	0x00022154
   14328:	00013bbd 	.word	0x00013bbd

0001432c <update_ccc>:
{
   1432c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14330:	4b3d      	ldr	r3, [pc, #244]	; (14428 <update_ccc+0xfc>)
{
   14332:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   14334:	6882      	ldr	r2, [r0, #8]
{
   14336:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   14338:	429a      	cmp	r2, r3
   1433a:	d170      	bne.n	1441e <update_ccc+0xf2>
	ccc = attr->user_data;
   1433c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   14340:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
   14342:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1442c <update_ccc+0x100>
   14346:	f108 0601 	add.w	r6, r8, #1
   1434a:	f108 091f 	add.w	r9, r8, #31
		if (!cfg->value ||
   1434e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   14352:	b19b      	cbz	r3, 1437c <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14354:	4632      	mov	r2, r6
   14356:	4620      	mov	r0, r4
   14358:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   1435c:	f00a faf7 	bl	1e94e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   14360:	b160      	cbz	r0, 1437c <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   14362:	222a      	movs	r2, #42	; 0x2a
   14364:	4629      	mov	r1, r5
   14366:	4620      	mov	r0, r4
   14368:	f00b faa1 	bl	1f8ae <bt_gatt_check_perm>
		if (err) {
   1436c:	b1d8      	cbz	r0, 143a6 <update_ccc+0x7a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1436e:	2803      	cmp	r0, #3
   14370:	d108      	bne.n	14384 <update_ccc+0x58>
				BT_WARN("CCC %p not writable", attr);
   14372:	462a      	mov	r2, r5
   14374:	2157      	movs	r1, #87	; 0x57
   14376:	4650      	mov	r0, sl
   14378:	f008 fa64 	bl	1c844 <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1437c:	360a      	adds	r6, #10
   1437e:	454e      	cmp	r6, r9
   14380:	d1e5      	bne.n	1434e <update_ccc+0x22>
   14382:	e04c      	b.n	1441e <update_ccc+0xf2>
				sec = BT_SECURITY_L3;
   14384:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   14386:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   14388:	bf14      	ite	ne
   1438a:	f04f 0b02 	movne.w	fp, #2
   1438e:	f04f 0b03 	moveq.w	fp, #3
			    bt_conn_get_security(conn) < sec) {
   14392:	f00a fad1 	bl	1e938 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   14396:	4583      	cmp	fp, r0
   14398:	d905      	bls.n	143a6 <update_ccc+0x7a>
				if (data->sec < sec) {
   1439a:	793b      	ldrb	r3, [r7, #4]
   1439c:	455b      	cmp	r3, fp
   1439e:	d2ed      	bcs.n	1437c <update_ccc+0x50>
					data->sec = sec;
   143a0:	f887 b004 	strb.w	fp, [r7, #4]
   143a4:	e7ea      	b.n	1437c <update_ccc+0x50>
		gatt_ccc_changed(attr, ccc);
   143a6:	4641      	mov	r1, r8
   143a8:	4628      	mov	r0, r5
   143aa:	f00a ffd3 	bl	1f354 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   143ae:	4b20      	ldr	r3, [pc, #128]	; (14430 <update_ccc+0x104>)
   143b0:	4598      	cmp	r8, r3
   143b2:	d134      	bne.n	1441e <update_ccc+0xf2>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   143b4:	7a20      	ldrb	r0, [r4, #8]
   143b6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   143ba:	f7fe ff5d 	bl	13278 <find_sc_cfg>
	if (!cfg) {
   143be:	4605      	mov	r5, r0
   143c0:	b368      	cbz	r0, 1441e <update_ccc+0xf2>
	if (!(cfg->data.start || cfg->data.end)) {
   143c2:	8902      	ldrh	r2, [r0, #8]
   143c4:	8943      	ldrh	r3, [r0, #10]
   143c6:	ea52 0103 	orrs.w	r1, r2, r3
   143ca:	d028      	beq.n	1441e <update_ccc+0xf2>
	index = bt_conn_index(conn);
   143cc:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   143ce:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   143d2:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   143d6:	f7fd fc5f 	bl	11c98 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   143da:	2318      	movs	r3, #24
   143dc:	4915      	ldr	r1, [pc, #84]	; (14434 <update_ccc+0x108>)
   143de:	4a16      	ldr	r2, [pc, #88]	; (14438 <update_ccc+0x10c>)
   143e0:	fb03 1300 	mla	r3, r3, r0, r1
   143e4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   143e6:	4a15      	ldr	r2, [pc, #84]	; (1443c <update_ccc+0x110>)
   143e8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   143ea:	aa01      	add	r2, sp, #4
   143ec:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   143ee:	2204      	movs	r2, #4
   143f0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   143f2:	b203      	sxth	r3, r0
   143f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   143f8:	4620      	mov	r0, r4
   143fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   143fe:	f7ff feb9 	bl	14174 <bt_gatt_indicate>
   14402:	b118      	cbz	r0, 1440c <update_ccc+0xe0>
		BT_ERR("SC restore indication failed");
   14404:	2145      	movs	r1, #69	; 0x45
   14406:	480e      	ldr	r0, [pc, #56]	; (14440 <update_ccc+0x114>)
   14408:	f008 fa1c 	bl	1c844 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1440c:	2204      	movs	r2, #4
   1440e:	2100      	movs	r1, #0
   14410:	f105 0008 	add.w	r0, r5, #8
   14414:	f009 fef9 	bl	1e20a <memset>
		sc_store(cfg);
   14418:	4628      	mov	r0, r5
   1441a:	f7ff f837 	bl	1348c <sc_store>
}
   1441e:	2001      	movs	r0, #1
   14420:	b003      	add	sp, #12
   14422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14426:	bf00      	nop
   14428:	0001332d 	.word	0x0001332d
   1442c:	00025321 	.word	0x00025321
   14430:	20008388 	.word	0x20008388
   14434:	20009cb0 	.word	0x20009cb0
   14438:	00022154 	.word	0x00022154
   1443c:	0001f7ad 	.word	0x0001f7ad
   14440:	0002533a 	.word	0x0002533a

00014444 <bt_gatt_is_subscribed>:
{
   14444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14446:	460c      	mov	r4, r1
   14448:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1444a:	4606      	mov	r6, r0
   1444c:	b950      	cbnz	r0, 14464 <bt_gatt_is_subscribed+0x20>
   1444e:	4930      	ldr	r1, [pc, #192]	; (14510 <bt_gatt_is_subscribed+0xcc>)
   14450:	4830      	ldr	r0, [pc, #192]	; (14514 <bt_gatt_is_subscribed+0xd0>)
   14452:	f640 12b5 	movw	r2, #2485	; 0x9b5
   14456:	f008 f9f5 	bl	1c844 <printk>
   1445a:	f640 11b5 	movw	r1, #2485	; 0x9b5
   1445e:	482c      	ldr	r0, [pc, #176]	; (14510 <bt_gatt_is_subscribed+0xcc>)
   14460:	f008 fc96 	bl	1cd90 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   14464:	b954      	cbnz	r4, 1447c <bt_gatt_is_subscribed+0x38>
   14466:	492a      	ldr	r1, [pc, #168]	; (14510 <bt_gatt_is_subscribed+0xcc>)
   14468:	482a      	ldr	r0, [pc, #168]	; (14514 <bt_gatt_is_subscribed+0xd0>)
   1446a:	f640 12b6 	movw	r2, #2486	; 0x9b6
   1446e:	f008 f9e9 	bl	1c844 <printk>
   14472:	f640 11b6 	movw	r1, #2486	; 0x9b6
   14476:	4826      	ldr	r0, [pc, #152]	; (14510 <bt_gatt_is_subscribed+0xcc>)
   14478:	f008 fc8a 	bl	1cd90 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1447c:	7b73      	ldrb	r3, [r6, #13]
   1447e:	2b07      	cmp	r3, #7
   14480:	d130      	bne.n	144e4 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   14482:	2300      	movs	r3, #0
   14484:	f88d 3004 	strb.w	r3, [sp, #4]
   14488:	f642 0303 	movw	r3, #10243	; 0x2803
   1448c:	6820      	ldr	r0, [r4, #0]
   1448e:	a901      	add	r1, sp, #4
   14490:	f8ad 3006 	strh.w	r3, [sp, #6]
   14494:	f009 ff29 	bl	1e2ea <bt_uuid_cmp>
   14498:	b940      	cbnz	r0, 144ac <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   1449a:	68e3      	ldr	r3, [r4, #12]
   1449c:	799b      	ldrb	r3, [r3, #6]
   1449e:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   144a2:	d020      	beq.n	144e6 <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   144a4:	4620      	mov	r0, r4
   144a6:	f7ff fdc3 	bl	14030 <bt_gatt_attr_next>
   144aa:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   144ac:	2300      	movs	r3, #0
   144ae:	6820      	ldr	r0, [r4, #0]
   144b0:	f88d 3004 	strb.w	r3, [sp, #4]
   144b4:	f642 1302 	movw	r3, #10498	; 0x2902
   144b8:	a901      	add	r1, sp, #4
   144ba:	f8ad 3006 	strh.w	r3, [sp, #6]
   144be:	f009 ff14 	bl	1e2ea <bt_uuid_cmp>
   144c2:	b118      	cbz	r0, 144cc <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   144c4:	4620      	mov	r0, r4
   144c6:	f7ff fdb3 	bl	14030 <bt_gatt_attr_next>
   144ca:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   144cc:	2500      	movs	r5, #0
   144ce:	f642 1302 	movw	r3, #10498	; 0x2902
   144d2:	6820      	ldr	r0, [r4, #0]
   144d4:	a901      	add	r1, sp, #4
   144d6:	f88d 5004 	strb.w	r5, [sp, #4]
   144da:	f8ad 3006 	strh.w	r3, [sp, #6]
   144de:	f009 ff04 	bl	1e2ea <bt_uuid_cmp>
   144e2:	b110      	cbz	r0, 144ea <bt_gatt_is_subscribed+0xa6>
		return false;
   144e4:	2000      	movs	r0, #0
}
   144e6:	b003      	add	sp, #12
   144e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   144ea:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   144ec:	1c6c      	adds	r4, r5, #1
   144ee:	351f      	adds	r5, #31
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   144f0:	4622      	mov	r2, r4
   144f2:	4630      	mov	r0, r6
   144f4:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   144f8:	f00a fa29 	bl	1e94e <bt_conn_is_peer_addr_le>
   144fc:	b118      	cbz	r0, 14506 <bt_gatt_is_subscribed+0xc2>
   144fe:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   14502:	421f      	tst	r7, r3
   14504:	d1ef      	bne.n	144e6 <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   14506:	340a      	adds	r4, #10
   14508:	42ac      	cmp	r4, r5
   1450a:	d1f1      	bne.n	144f0 <bt_gatt_is_subscribed+0xac>
   1450c:	e7ea      	b.n	144e4 <bt_gatt_is_subscribed+0xa0>
   1450e:	bf00      	nop
   14510:	0002529d 	.word	0x0002529d
   14514:	00022c66 	.word	0x00022c66

00014518 <bt_gatt_discover>:
{
   14518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1451a:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1451c:	4605      	mov	r5, r0
{
   1451e:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   14520:	b950      	cbnz	r0, 14538 <bt_gatt_discover+0x20>
   14522:	4989      	ldr	r1, [pc, #548]	; (14748 <bt_gatt_discover+0x230>)
   14524:	4889      	ldr	r0, [pc, #548]	; (1474c <bt_gatt_discover+0x234>)
   14526:	f640 5277 	movw	r2, #3447	; 0xd77
   1452a:	f008 f98b 	bl	1c844 <printk>
   1452e:	f640 5177 	movw	r1, #3447	; 0xd77
   14532:	4885      	ldr	r0, [pc, #532]	; (14748 <bt_gatt_discover+0x230>)
   14534:	f008 fc2c 	bl	1cd90 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14538:	b10c      	cbz	r4, 1453e <bt_gatt_discover+0x26>
   1453a:	6863      	ldr	r3, [r4, #4]
   1453c:	b953      	cbnz	r3, 14554 <bt_gatt_discover+0x3c>
   1453e:	4982      	ldr	r1, [pc, #520]	; (14748 <bt_gatt_discover+0x230>)
   14540:	4882      	ldr	r0, [pc, #520]	; (1474c <bt_gatt_discover+0x234>)
   14542:	f640 5278 	movw	r2, #3448	; 0xd78
   14546:	f008 f97d 	bl	1c844 <printk>
   1454a:	f640 5178 	movw	r1, #3448	; 0xd78
   1454e:	487e      	ldr	r0, [pc, #504]	; (14748 <bt_gatt_discover+0x230>)
   14550:	f008 fc1e 	bl	1cd90 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   14554:	8923      	ldrh	r3, [r4, #8]
   14556:	b10b      	cbz	r3, 1455c <bt_gatt_discover+0x44>
   14558:	89e3      	ldrh	r3, [r4, #14]
   1455a:	b953      	cbnz	r3, 14572 <bt_gatt_discover+0x5a>
   1455c:	497a      	ldr	r1, [pc, #488]	; (14748 <bt_gatt_discover+0x230>)
   1455e:	487b      	ldr	r0, [pc, #492]	; (1474c <bt_gatt_discover+0x234>)
   14560:	f640 5279 	movw	r2, #3449	; 0xd79
   14564:	f008 f96e 	bl	1c844 <printk>
   14568:	f640 5179 	movw	r1, #3449	; 0xd79
   1456c:	4876      	ldr	r0, [pc, #472]	; (14748 <bt_gatt_discover+0x230>)
   1456e:	f008 fc0f 	bl	1cd90 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   14572:	8922      	ldrh	r2, [r4, #8]
   14574:	89e3      	ldrh	r3, [r4, #14]
   14576:	429a      	cmp	r2, r3
   14578:	d90a      	bls.n	14590 <bt_gatt_discover+0x78>
   1457a:	4973      	ldr	r1, [pc, #460]	; (14748 <bt_gatt_discover+0x230>)
   1457c:	4873      	ldr	r0, [pc, #460]	; (1474c <bt_gatt_discover+0x234>)
   1457e:	f640 527b 	movw	r2, #3451	; 0xd7b
   14582:	f008 f95f 	bl	1c844 <printk>
   14586:	f640 517b 	movw	r1, #3451	; 0xd7b
   1458a:	486f      	ldr	r0, [pc, #444]	; (14748 <bt_gatt_discover+0x230>)
   1458c:	f008 fc00 	bl	1cd90 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14590:	7b6b      	ldrb	r3, [r5, #13]
   14592:	2b07      	cmp	r3, #7
   14594:	f040 80d5 	bne.w	14742 <bt_gatt_discover+0x22a>
	switch (params->type) {
   14598:	7c22      	ldrb	r2, [r4, #16]
   1459a:	2a05      	cmp	r2, #5
   1459c:	f200 80cc 	bhi.w	14738 <bt_gatt_discover+0x220>
   145a0:	e8df f002 	tbb	[pc, r2]
   145a4:	64640303 	.word	0x64640303
   145a8:	b683      	.short	0xb683
		if (params->uuid) {
   145aa:	6823      	ldr	r3, [r4, #0]
   145ac:	2b00      	cmp	r3, #0
   145ae:	d03e      	beq.n	1462e <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   145b0:	2206      	movs	r2, #6
   145b2:	4628      	mov	r0, r5
   145b4:	4611      	mov	r1, r2
   145b6:	f7fe f9d3 	bl	12960 <bt_att_create_pdu>
	if (!buf) {
   145ba:	4606      	mov	r6, r0
   145bc:	b918      	cbnz	r0, 145c6 <bt_gatt_discover+0xae>
		return -ENOMEM;
   145be:	f06f 000b 	mvn.w	r0, #11
}
   145c2:	b005      	add	sp, #20
   145c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   145c6:	f100 0708 	add.w	r7, r0, #8
   145ca:	2106      	movs	r1, #6
   145cc:	4638      	mov	r0, r7
   145ce:	f003 f8b9 	bl	17744 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   145d2:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   145d4:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   145d6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   145d8:	89e3      	ldrh	r3, [r4, #14]
   145da:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   145dc:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   145de:	2b00      	cmp	r3, #0
   145e0:	f642 0301 	movw	r3, #10241	; 0x2801
   145e4:	bf08      	it	eq
   145e6:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   145ea:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   145ec:	780a      	ldrb	r2, [r1, #0]
   145ee:	b15a      	cbz	r2, 14608 <bt_gatt_discover+0xf0>
   145f0:	2a02      	cmp	r2, #2
   145f2:	d016      	beq.n	14622 <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   145f4:	4856      	ldr	r0, [pc, #344]	; (14750 <bt_gatt_discover+0x238>)
   145f6:	2145      	movs	r1, #69	; 0x45
   145f8:	f008 f924 	bl	1c844 <printk>
		net_buf_unref(buf);
   145fc:	4630      	mov	r0, r6
   145fe:	f002 ff8b 	bl	17518 <net_buf_unref>
	return -EINVAL;
   14602:	f06f 0015 	mvn.w	r0, #21
   14606:	e7dc      	b.n	145c2 <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   14608:	4638      	mov	r0, r7
   1460a:	8849      	ldrh	r1, [r1, #2]
   1460c:	f00b ff75 	bl	204fa <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   14610:	4623      	mov	r3, r4
   14612:	4a50      	ldr	r2, [pc, #320]	; (14754 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14614:	4631      	mov	r1, r6
   14616:	4628      	mov	r0, r5
}
   14618:	b005      	add	sp, #20
   1461a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1461e:	f7fe bffd 	b.w	1361c <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14622:	2210      	movs	r2, #16
   14624:	4638      	mov	r0, r7
   14626:	3101      	adds	r1, #1
   14628:	f00b ff54 	bl	204d4 <net_buf_simple_add_mem>
   1462c:	e7f0      	b.n	14610 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   1462e:	2204      	movs	r2, #4
   14630:	2110      	movs	r1, #16
   14632:	4628      	mov	r0, r5
   14634:	f7fe f994 	bl	12960 <bt_att_create_pdu>
	if (!buf) {
   14638:	4606      	mov	r6, r0
   1463a:	2800      	cmp	r0, #0
   1463c:	d0bf      	beq.n	145be <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1463e:	f100 0708 	add.w	r7, r0, #8
   14642:	2104      	movs	r1, #4
   14644:	4638      	mov	r0, r7
   14646:	f003 f87d 	bl	17744 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1464a:	8923      	ldrh	r3, [r4, #8]
   1464c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1464e:	89e3      	ldrh	r3, [r4, #14]
   14650:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14652:	7c23      	ldrb	r3, [r4, #16]
   14654:	b93b      	cbnz	r3, 14666 <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   14656:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   1465a:	4638      	mov	r0, r7
   1465c:	f00b ff4d 	bl	204fa <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   14660:	4623      	mov	r3, r4
   14662:	4a3d      	ldr	r2, [pc, #244]	; (14758 <bt_gatt_discover+0x240>)
   14664:	e7d6      	b.n	14614 <bt_gatt_discover+0xfc>
   14666:	f642 0101 	movw	r1, #10241	; 0x2801
   1466a:	e7f6      	b.n	1465a <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   1466c:	2204      	movs	r2, #4
   1466e:	2108      	movs	r1, #8
   14670:	4628      	mov	r0, r5
   14672:	f7fe f975 	bl	12960 <bt_att_create_pdu>
	if (!buf) {
   14676:	4606      	mov	r6, r0
   14678:	2800      	cmp	r0, #0
   1467a:	d0a0      	beq.n	145be <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1467c:	f100 0708 	add.w	r7, r0, #8
   14680:	2104      	movs	r1, #4
   14682:	4638      	mov	r0, r7
   14684:	f003 f85e 	bl	17744 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14688:	8923      	ldrh	r3, [r4, #8]
   1468a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1468c:	89e3      	ldrh	r3, [r4, #14]
   1468e:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14690:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   14692:	4638      	mov	r0, r7
   14694:	2b02      	cmp	r3, #2
   14696:	bf0c      	ite	eq
   14698:	f642 0102 	movweq	r1, #10242	; 0x2802
   1469c:	f642 0103 	movwne	r1, #10243	; 0x2803
   146a0:	f00b ff2b 	bl	204fa <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   146a4:	4623      	mov	r3, r4
   146a6:	4a2d      	ldr	r2, [pc, #180]	; (1475c <bt_gatt_discover+0x244>)
   146a8:	e7b4      	b.n	14614 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   146aa:	6820      	ldr	r0, [r4, #0]
   146ac:	b380      	cbz	r0, 14710 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   146ae:	2600      	movs	r6, #0
   146b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   146b4:	4669      	mov	r1, sp
   146b6:	f88d 6000 	strb.w	r6, [sp]
   146ba:	f8ad 3002 	strh.w	r3, [sp, #2]
   146be:	f009 fe14 	bl	1e2ea <bt_uuid_cmp>
		if (params->uuid &&
   146c2:	2800      	cmp	r0, #0
   146c4:	d09d      	beq.n	14602 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   146c6:	f642 0301 	movw	r3, #10241	; 0x2801
   146ca:	6820      	ldr	r0, [r4, #0]
   146cc:	a901      	add	r1, sp, #4
   146ce:	f88d 6004 	strb.w	r6, [sp, #4]
   146d2:	f8ad 3006 	strh.w	r3, [sp, #6]
   146d6:	f009 fe08 	bl	1e2ea <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   146da:	2800      	cmp	r0, #0
   146dc:	d091      	beq.n	14602 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   146de:	f642 0302 	movw	r3, #10242	; 0x2802
   146e2:	6820      	ldr	r0, [r4, #0]
   146e4:	a902      	add	r1, sp, #8
   146e6:	f88d 6008 	strb.w	r6, [sp, #8]
   146ea:	f8ad 300a 	strh.w	r3, [sp, #10]
   146ee:	f009 fdfc 	bl	1e2ea <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   146f2:	2800      	cmp	r0, #0
   146f4:	d085      	beq.n	14602 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   146f6:	f642 0303 	movw	r3, #10243	; 0x2803
   146fa:	6820      	ldr	r0, [r4, #0]
   146fc:	a903      	add	r1, sp, #12
   146fe:	f88d 600c 	strb.w	r6, [sp, #12]
   14702:	f8ad 300e 	strh.w	r3, [sp, #14]
   14706:	f009 fdf0 	bl	1e2ea <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1470a:	2800      	cmp	r0, #0
   1470c:	f43f af79 	beq.w	14602 <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   14710:	2204      	movs	r2, #4
   14712:	4628      	mov	r0, r5
   14714:	4611      	mov	r1, r2
   14716:	f7fe f923 	bl	12960 <bt_att_create_pdu>
	if (!buf) {
   1471a:	4606      	mov	r6, r0
   1471c:	2800      	cmp	r0, #0
   1471e:	f43f af4e 	beq.w	145be <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14722:	2104      	movs	r1, #4
   14724:	3008      	adds	r0, #8
   14726:	f003 f80d 	bl	17744 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1472a:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1472c:	4a0c      	ldr	r2, [pc, #48]	; (14760 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1472e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14730:	89e3      	ldrh	r3, [r4, #14]
   14732:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14734:	4623      	mov	r3, r4
   14736:	e76d      	b.n	14614 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   14738:	2145      	movs	r1, #69	; 0x45
   1473a:	480a      	ldr	r0, [pc, #40]	; (14764 <bt_gatt_discover+0x24c>)
   1473c:	f008 f882 	bl	1c844 <printk>
   14740:	e75f      	b.n	14602 <bt_gatt_discover+0xea>
		return -ENOTCONN;
   14742:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14746:	e73c      	b.n	145c2 <bt_gatt_discover+0xaa>
   14748:	0002529d 	.word	0x0002529d
   1474c:	00022c66 	.word	0x00022c66
   14750:	0002535c 	.word	0x0002535c
   14754:	0001f93f 	.word	0x0001f93f
   14758:	00014769 	.word	0x00014769
   1475c:	00014871 	.word	0x00014871
   14760:	00014b21 	.word	0x00014b21
   14764:	00025376 	.word	0x00025376

00014768 <gatt_read_group_rsp>:
{
   14768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1476c:	b08f      	sub	sp, #60	; 0x3c
   1476e:	4681      	mov	r9, r0
   14770:	4617      	mov	r7, r2
   14772:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   14774:	b131      	cbz	r1, 14784 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   14776:	462a      	mov	r2, r5
   14778:	2100      	movs	r1, #0
   1477a:	686b      	ldr	r3, [r5, #4]
}
   1477c:	b00f      	add	sp, #60	; 0x3c
   1477e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   14782:	4718      	bx	r3
	switch (rsp->len) {
   14784:	7812      	ldrb	r2, [r2, #0]
   14786:	2a06      	cmp	r2, #6
   14788:	d00d      	beq.n	147a6 <gatt_read_group_rsp+0x3e>
   1478a:	2a14      	cmp	r2, #20
   1478c:	d021      	beq.n	147d2 <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   1478e:	2145      	movs	r1, #69	; 0x45
   14790:	4836      	ldr	r0, [pc, #216]	; (1486c <gatt_read_group_rsp+0x104>)
   14792:	f008 f857 	bl	1c844 <printk>
	params->func(conn, NULL, params);
   14796:	462a      	mov	r2, r5
   14798:	2100      	movs	r1, #0
   1479a:	4648      	mov	r0, r9
   1479c:	686b      	ldr	r3, [r5, #4]
   1479e:	4798      	blx	r3
}
   147a0:	b00f      	add	sp, #60	; 0x3c
   147a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   147a6:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   147aa:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   147ac:	3b01      	subs	r3, #1
   147ae:	b29c      	uxth	r4, r3
   147b0:	f107 0801 	add.w	r8, r7, #1
   147b4:	783b      	ldrb	r3, [r7, #0]
   147b6:	42a3      	cmp	r3, r4
   147b8:	d90f      	bls.n	147da <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   147ba:	2c00      	cmp	r4, #0
   147bc:	d1eb      	bne.n	14796 <gatt_read_group_rsp+0x2e>
   147be:	2e00      	cmp	r6, #0
   147c0:	d0e9      	beq.n	14796 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   147c2:	462a      	mov	r2, r5
   147c4:	4631      	mov	r1, r6
   147c6:	4648      	mov	r0, r9
}
   147c8:	b00f      	add	sp, #60	; 0x3c
   147ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   147ce:	f00b b899 	b.w	1f904 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   147d2:	2202      	movs	r2, #2
   147d4:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   147d8:	e7e7      	b.n	147aa <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   147da:	2214      	movs	r2, #20
   147dc:	2100      	movs	r1, #0
   147de:	a809      	add	r0, sp, #36	; 0x24
   147e0:	f009 fd13 	bl	1e20a <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   147e4:	f8b8 a000 	ldrh.w	sl, [r8]
   147e8:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   147ec:	2b00      	cmp	r3, #0
   147ee:	d0d2      	beq.n	14796 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   147f0:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   147f4:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   147f8:	2e00      	cmp	r6, #0
   147fa:	d0cc      	beq.n	14796 <gatt_read_group_rsp+0x2e>
   147fc:	42b3      	cmp	r3, r6
   147fe:	d8ca      	bhi.n	14796 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   14800:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14804:	b323      	cbz	r3, 14850 <gatt_read_group_rsp+0xe8>
   14806:	2b02      	cmp	r3, #2
   14808:	d02a      	beq.n	14860 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1480a:	f04f 0300 	mov.w	r3, #0
   1480e:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14812:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14814:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   14816:	2b00      	cmp	r3, #0
   14818:	f642 0301 	movw	r3, #10241	; 0x2801
   1481c:	bf08      	it	eq
   1481e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   14822:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   14826:	ab04      	add	r3, sp, #16
   14828:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1482a:	ab01      	add	r3, sp, #4
   1482c:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1482e:	ab02      	add	r3, sp, #8
   14830:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14832:	4648      	mov	r0, r9
   14834:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   14836:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   1483a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1483e:	a909      	add	r1, sp, #36	; 0x24
   14840:	4798      	blx	r3
   14842:	2800      	cmp	r0, #0
   14844:	d0ac      	beq.n	147a0 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14846:	783a      	ldrb	r2, [r7, #0]
   14848:	1aa4      	subs	r4, r4, r2
   1484a:	b2a4      	uxth	r4, r4
   1484c:	4490      	add	r8, r2
   1484e:	e7b1      	b.n	147b4 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   14850:	2202      	movs	r2, #2
   14852:	f108 0104 	add.w	r1, r8, #4
   14856:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1485a:	f009 fcab 	bl	1e1b4 <memcpy>
			break;
   1485e:	e7d4      	b.n	1480a <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14860:	2210      	movs	r2, #16
   14862:	f108 0104 	add.w	r1, r8, #4
   14866:	f10d 0011 	add.w	r0, sp, #17
   1486a:	e7f6      	b.n	1485a <gatt_read_group_rsp+0xf2>
   1486c:	00025396 	.word	0x00025396

00014870 <gatt_read_type_rsp>:
{
   14870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14874:	b091      	sub	sp, #68	; 0x44
   14876:	4607      	mov	r7, r0
   14878:	4690      	mov	r8, r2
   1487a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   1487c:	b131      	cbz	r1, 1488c <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   1487e:	462a      	mov	r2, r5
   14880:	2100      	movs	r1, #0
   14882:	686b      	ldr	r3, [r5, #4]
}
   14884:	b011      	add	sp, #68	; 0x44
   14886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1488a:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1488c:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   1488e:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14890:	2802      	cmp	r0, #2
   14892:	f040 8089 	bne.w	149a8 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   14896:	2a06      	cmp	r2, #6
   14898:	d01c      	beq.n	148d4 <gatt_read_type_rsp+0x64>
   1489a:	2a08      	cmp	r2, #8
   1489c:	f040 8088 	bne.w	149b0 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   148a0:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   148a4:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   148a6:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   148a8:	1e5c      	subs	r4, r3, #1
   148aa:	b2a4      	uxth	r4, r4
   148ac:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   148b0:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   148b4:	f898 3000 	ldrb.w	r3, [r8]
   148b8:	42a3      	cmp	r3, r4
   148ba:	d90e      	bls.n	148da <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   148bc:	2c00      	cmp	r4, #0
   148be:	d17b      	bne.n	149b8 <gatt_read_type_rsp+0x148>
   148c0:	2e00      	cmp	r6, #0
   148c2:	d079      	beq.n	149b8 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   148c4:	462a      	mov	r2, r5
   148c6:	4631      	mov	r1, r6
   148c8:	4638      	mov	r0, r7
}
   148ca:	b011      	add	sp, #68	; 0x44
   148cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   148d0:	f00b b818 	b.w	1f904 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   148d4:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   148d8:	e7e4      	b.n	148a4 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   148da:	f8b9 3000 	ldrh.w	r3, [r9]
   148de:	b29e      	uxth	r6, r3
		if (!handle) {
   148e0:	2e00      	cmp	r6, #0
   148e2:	d069      	beq.n	149b8 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   148e4:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   148e8:	f8ad 2014 	strh.w	r2, [sp, #20]
   148ec:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   148ee:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   148f2:	b291      	uxth	r1, r2
   148f4:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   148f8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   148fc:	b182      	cbz	r2, 14920 <gatt_read_type_rsp+0xb0>
   148fe:	2a02      	cmp	r2, #2
   14900:	d019      	beq.n	14936 <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14902:	6829      	ldr	r1, [r5, #0]
   14904:	2900      	cmp	r1, #0
   14906:	d036      	beq.n	14976 <gatt_read_type_rsp+0x106>
   14908:	4650      	mov	r0, sl
   1490a:	9301      	str	r3, [sp, #4]
   1490c:	f009 fced 	bl	1e2ea <bt_uuid_cmp>
   14910:	9b01      	ldr	r3, [sp, #4]
   14912:	b380      	cbz	r0, 14976 <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14914:	f898 2000 	ldrb.w	r2, [r8]
   14918:	1aa4      	subs	r4, r4, r2
   1491a:	b2a4      	uxth	r4, r4
   1491c:	4491      	add	r9, r2
   1491e:	e7c9      	b.n	148b4 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   14920:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   14924:	f899 2006 	ldrb.w	r2, [r9, #6]
   14928:	f899 1007 	ldrb.w	r1, [r9, #7]
   1492c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14930:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   14934:	e7e5      	b.n	14902 <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   14936:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   14938:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   1493a:	4638      	mov	r0, r7
   1493c:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   1493e:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14940:	9201      	str	r2, [sp, #4]
   14942:	f7fe f80d 	bl	12960 <bt_att_create_pdu>
	if (!buf) {
   14946:	4604      	mov	r4, r0
   14948:	b190      	cbz	r0, 14970 <gatt_read_type_rsp+0x100>
   1494a:	9a01      	ldr	r2, [sp, #4]
   1494c:	3008      	adds	r0, #8
   1494e:	4611      	mov	r1, r2
   14950:	f002 fef8 	bl	17744 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14954:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14956:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14958:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   1495a:	4a49      	ldr	r2, [pc, #292]	; (14a80 <gatt_read_type_rsp+0x210>)
   1495c:	462b      	mov	r3, r5
   1495e:	4638      	mov	r0, r7
   14960:	f7fe fe5c 	bl	1361c <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   14964:	b286      	uxth	r6, r0
	if (!handle) {
   14966:	2e00      	cmp	r6, #0
   14968:	d1ac      	bne.n	148c4 <gatt_read_type_rsp+0x54>
}
   1496a:	b011      	add	sp, #68	; 0x44
   1496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   14970:	f06f 000b 	mvn.w	r0, #11
   14974:	e7f6      	b.n	14964 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14976:	f642 0202 	movw	r2, #10242	; 0x2802
   1497a:	f8ad 200e 	strh.w	r2, [sp, #14]
   1497e:	aa03      	add	r2, sp, #12
   14980:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   14984:	aa04      	add	r2, sp, #16
   14986:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14988:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1498c:	462a      	mov	r2, r5
   1498e:	4638      	mov	r0, r7
   14990:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14992:	f88d b00c 	strb.w	fp, [sp, #12]
   14996:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   1499a:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1499e:	a90b      	add	r1, sp, #44	; 0x2c
   149a0:	4798      	blx	r3
   149a2:	2800      	cmp	r0, #0
   149a4:	d1b6      	bne.n	14914 <gatt_read_type_rsp+0xa4>
   149a6:	e7e0      	b.n	1496a <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   149a8:	2a07      	cmp	r2, #7
   149aa:	d00b      	beq.n	149c4 <gatt_read_type_rsp+0x154>
   149ac:	2a15      	cmp	r2, #21
   149ae:	d02e      	beq.n	14a0e <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   149b0:	2145      	movs	r1, #69	; 0x45
   149b2:	4834      	ldr	r0, [pc, #208]	; (14a84 <gatt_read_type_rsp+0x214>)
   149b4:	f007 ff46 	bl	1c844 <printk>
	params->func(conn, NULL, params);
   149b8:	462a      	mov	r2, r5
   149ba:	2100      	movs	r1, #0
   149bc:	4638      	mov	r0, r7
   149be:	686b      	ldr	r3, [r5, #4]
   149c0:	4798      	blx	r3
	if (!handle) {
   149c2:	e7d2      	b.n	1496a <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   149c4:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   149c8:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   149ca:	1e5c      	subs	r4, r3, #1
   149cc:	b2a4      	uxth	r4, r4
   149ce:	f108 0901 	add.w	r9, r8, #1
   149d2:	f10d 0a18 	add.w	sl, sp, #24
   149d6:	f898 3000 	ldrb.w	r3, [r8]
   149da:	42a3      	cmp	r3, r4
   149dc:	f63f af6e 	bhi.w	148bc <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   149e0:	f8b9 b000 	ldrh.w	fp, [r9]
   149e4:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   149e8:	2e00      	cmp	r6, #0
   149ea:	d0e5      	beq.n	149b8 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   149ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
   149f0:	b18b      	cbz	r3, 14a16 <gatt_read_type_rsp+0x1a6>
   149f2:	2b02      	cmp	r3, #2
   149f4:	d018      	beq.n	14a28 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   149f6:	6829      	ldr	r1, [r5, #0]
   149f8:	b1f1      	cbz	r1, 14a38 <gatt_read_type_rsp+0x1c8>
   149fa:	4650      	mov	r0, sl
   149fc:	f009 fc75 	bl	1e2ea <bt_uuid_cmp>
   14a00:	b1d0      	cbz	r0, 14a38 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14a02:	f898 2000 	ldrb.w	r2, [r8]
   14a06:	1aa4      	subs	r4, r4, r2
   14a08:	b2a4      	uxth	r4, r4
   14a0a:	4491      	add	r9, r2
   14a0c:	e7e3      	b.n	149d6 <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   14a0e:	2202      	movs	r2, #2
   14a10:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   14a14:	e7d8      	b.n	149c8 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   14a16:	f899 3005 	ldrb.w	r3, [r9, #5]
   14a1a:	f899 2006 	ldrb.w	r2, [r9, #6]
   14a1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14a22:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   14a26:	e7e6      	b.n	149f6 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   14a28:	2210      	movs	r2, #16
   14a2a:	f109 0105 	add.w	r1, r9, #5
   14a2e:	f10d 0019 	add.w	r0, sp, #25
   14a32:	f009 fbbf 	bl	1e1b4 <memcpy>
			break;
   14a36:	e7de      	b.n	149f6 <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14a38:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   14a3c:	f899 3002 	ldrb.w	r3, [r9, #2]
   14a40:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14a44:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14a48:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14a4c:	2300      	movs	r3, #0
   14a4e:	f8ad 200e 	strh.w	r2, [sp, #14]
   14a52:	aa03      	add	r2, sp, #12
   14a54:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14a58:	aa04      	add	r2, sp, #16
   14a5a:	f88d 300c 	strb.w	r3, [sp, #12]
   14a5e:	930d      	str	r3, [sp, #52]	; 0x34
   14a60:	920e      	str	r2, [sp, #56]	; 0x38
   14a62:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a66:	462a      	mov	r2, r5
   14a68:	4638      	mov	r0, r7
   14a6a:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14a6c:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14a70:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a74:	a90b      	add	r1, sp, #44	; 0x2c
   14a76:	4798      	blx	r3
   14a78:	2800      	cmp	r0, #0
   14a7a:	d1c2      	bne.n	14a02 <gatt_read_type_rsp+0x192>
   14a7c:	e775      	b.n	1496a <gatt_read_type_rsp+0xfa>
   14a7e:	bf00      	nop
   14a80:	00014a89 	.word	0x00014a89
   14a84:	00025396 	.word	0x00025396

00014a88 <read_included_uuid_cb>:
{
   14a88:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14a8a:	2b10      	cmp	r3, #16
{
   14a8c:	b08e      	sub	sp, #56	; 0x38
   14a8e:	4611      	mov	r1, r2
   14a90:	4605      	mov	r5, r0
   14a92:	461a      	mov	r2, r3
   14a94:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   14a96:	d00b      	beq.n	14ab0 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14a98:	2145      	movs	r1, #69	; 0x45
   14a9a:	4820      	ldr	r0, [pc, #128]	; (14b1c <read_included_uuid_cb+0x94>)
   14a9c:	f007 fed2 	bl	1c844 <printk>
		params->func(conn, NULL, params);
   14aa0:	4622      	mov	r2, r4
   14aa2:	2100      	movs	r1, #0
   14aa4:	4628      	mov	r0, r5
   14aa6:	6863      	ldr	r3, [r4, #4]
}
   14aa8:	b00e      	add	sp, #56	; 0x38
   14aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14aae:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14ab0:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   14ab2:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   14ab4:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   14ab8:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   14aba:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   14abe:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   14ac2:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   14ac4:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   14ac6:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   14aca:	f009 fb73 	bl	1e1b4 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14ace:	6821      	ldr	r1, [r4, #0]
   14ad0:	b9c9      	cbnz	r1, 14b06 <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ad2:	f642 0202 	movw	r2, #10242	; 0x2802
   14ad6:	2300      	movs	r3, #0
   14ad8:	f8ad 2006 	strh.w	r2, [sp, #6]
   14adc:	aa01      	add	r2, sp, #4
   14ade:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   14ae2:	f88d 3004 	strb.w	r3, [sp, #4]
   14ae6:	930b      	str	r3, [sp, #44]	; 0x2c
   14ae8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   14aec:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14aee:	aa02      	add	r2, sp, #8
   14af0:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   14af2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14af6:	4622      	mov	r2, r4
   14af8:	4628      	mov	r0, r5
   14afa:	6863      	ldr	r3, [r4, #4]
   14afc:	a909      	add	r1, sp, #36	; 0x24
   14afe:	4798      	blx	r3
   14b00:	b930      	cbnz	r0, 14b10 <read_included_uuid_cb+0x88>
}
   14b02:	b00e      	add	sp, #56	; 0x38
   14b04:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14b06:	4630      	mov	r0, r6
   14b08:	f009 fbef 	bl	1e2ea <bt_uuid_cmp>
   14b0c:	2800      	cmp	r0, #0
   14b0e:	d0e0      	beq.n	14ad2 <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   14b10:	4622      	mov	r2, r4
   14b12:	4628      	mov	r0, r5
   14b14:	8921      	ldrh	r1, [r4, #8]
   14b16:	f00a fef5 	bl	1f904 <gatt_discover_next>
	return;
   14b1a:	e7f2      	b.n	14b02 <read_included_uuid_cb+0x7a>
   14b1c:	00025396 	.word	0x00025396

00014b20 <gatt_find_info_rsp>:
{
   14b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b24:	b08f      	sub	sp, #60	; 0x3c
   14b26:	4680      	mov	r8, r0
   14b28:	4614      	mov	r4, r2
   14b2a:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   14b2c:	b941      	cbnz	r1, 14b40 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   14b2e:	7812      	ldrb	r2, [r2, #0]
   14b30:	2a01      	cmp	r2, #1
   14b32:	d00b      	beq.n	14b4c <gatt_find_info_rsp+0x2c>
   14b34:	2a02      	cmp	r2, #2
   14b36:	d022      	beq.n	14b7e <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   14b38:	2145      	movs	r1, #69	; 0x45
   14b3a:	484b      	ldr	r0, [pc, #300]	; (14c68 <gatt_find_info_rsp+0x148>)
   14b3c:	f007 fe82 	bl	1c844 <printk>
	params->func(conn, NULL, params);
   14b40:	4632      	mov	r2, r6
   14b42:	2100      	movs	r1, #0
   14b44:	4640      	mov	r0, r8
   14b46:	6873      	ldr	r3, [r6, #4]
   14b48:	4798      	blx	r3
   14b4a:	e08a      	b.n	14c62 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14b4c:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14b50:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   14b54:	3b01      	subs	r3, #1
   14b56:	b29b      	uxth	r3, r3
	if (length < len) {
   14b58:	4553      	cmp	r3, sl
   14b5a:	d3f1      	bcc.n	14b40 <gatt_find_info_rsp+0x20>
	bool skip = false;
   14b5c:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14b60:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   14b64:	46cb      	mov	fp, r9
			skip = false;
   14b66:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14b68:	9300      	str	r3, [sp, #0]
   14b6a:	3401      	adds	r4, #1
   14b6c:	af04      	add	r7, sp, #16
   14b6e:	9b00      	ldr	r3, [sp, #0]
   14b70:	b953      	cbnz	r3, 14b88 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   14b72:	4632      	mov	r2, r6
   14b74:	4659      	mov	r1, fp
   14b76:	4640      	mov	r0, r8
   14b78:	f00a fec4 	bl	1f904 <gatt_discover_next>
	return;
   14b7c:	e071      	b.n	14c62 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14b7e:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   14b82:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14b86:	e7e5      	b.n	14b54 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14b88:	8823      	ldrh	r3, [r4, #0]
   14b8a:	9301      	str	r3, [sp, #4]
   14b8c:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14b90:	f1b9 0f00 	cmp.w	r9, #0
   14b94:	d151      	bne.n	14c3a <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   14b96:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d03a      	beq.n	14c14 <gatt_find_info_rsp+0xf4>
   14b9e:	2b02      	cmp	r3, #2
   14ba0:	d03f      	beq.n	14c22 <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14ba2:	6831      	ldr	r1, [r6, #0]
   14ba4:	2900      	cmp	r1, #0
   14ba6:	d143      	bne.n	14c30 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14ba8:	7c33      	ldrb	r3, [r6, #16]
   14baa:	2b04      	cmp	r3, #4
   14bac:	d148      	bne.n	14c40 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14bae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14bb2:	4638      	mov	r0, r7
   14bb4:	a902      	add	r1, sp, #8
   14bb6:	f88d 5008 	strb.w	r5, [sp, #8]
   14bba:	f8ad 300a 	strh.w	r3, [sp, #10]
   14bbe:	f009 fb94 	bl	1e2ea <bt_uuid_cmp>
   14bc2:	b310      	cbz	r0, 14c0a <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14bc4:	f642 0301 	movw	r3, #10241	; 0x2801
   14bc8:	4638      	mov	r0, r7
   14bca:	a903      	add	r1, sp, #12
   14bcc:	f88d 500c 	strb.w	r5, [sp, #12]
   14bd0:	f8ad 300e 	strh.w	r3, [sp, #14]
   14bd4:	f009 fb89 	bl	1e2ea <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14bd8:	b1b8      	cbz	r0, 14c0a <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   14bda:	f642 0302 	movw	r3, #10242	; 0x2802
   14bde:	4638      	mov	r0, r7
   14be0:	a909      	add	r1, sp, #36	; 0x24
   14be2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14be6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14bea:	f009 fb7e 	bl	1e2ea <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14bee:	b160      	cbz	r0, 14c0a <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   14bf0:	f642 0303 	movw	r3, #10243	; 0x2803
   14bf4:	4638      	mov	r0, r7
   14bf6:	a909      	add	r1, sp, #36	; 0x24
   14bf8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14bfc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14c00:	f009 fb73 	bl	1e2ea <bt_uuid_cmp>
   14c04:	b9e0      	cbnz	r0, 14c40 <gatt_find_info_rsp+0x120>
				skip = true;
   14c06:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   14c0a:	9b00      	ldr	r3, [sp, #0]
   14c0c:	4454      	add	r4, sl
   14c0e:	3b01      	subs	r3, #1
   14c10:	9300      	str	r3, [sp, #0]
   14c12:	e7ac      	b.n	14b6e <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   14c14:	78a3      	ldrb	r3, [r4, #2]
   14c16:	78e2      	ldrb	r2, [r4, #3]
   14c18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14c1c:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   14c20:	e7bf      	b.n	14ba2 <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   14c22:	2210      	movs	r2, #16
   14c24:	1ca1      	adds	r1, r4, #2
   14c26:	f10d 0011 	add.w	r0, sp, #17
   14c2a:	f009 fac3 	bl	1e1b4 <memcpy>
			break;
   14c2e:	e7b8      	b.n	14ba2 <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14c30:	4638      	mov	r0, r7
   14c32:	f009 fb5a 	bl	1e2ea <bt_uuid_cmp>
   14c36:	2800      	cmp	r0, #0
   14c38:	d0b6      	beq.n	14ba8 <gatt_find_info_rsp+0x88>
			skip = false;
   14c3a:	f04f 0900 	mov.w	r9, #0
   14c3e:	e7e4      	b.n	14c0a <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   14c40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c44:	4632      	mov	r2, r6
		attr.handle = handle;
   14c46:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c4a:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c4c:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14c50:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c54:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c56:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c5a:	a909      	add	r1, sp, #36	; 0x24
   14c5c:	4798      	blx	r3
   14c5e:	2800      	cmp	r0, #0
   14c60:	d1d3      	bne.n	14c0a <gatt_find_info_rsp+0xea>
}
   14c62:	b00f      	add	sp, #60	; 0x3c
   14c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c68:	000253af 	.word	0x000253af

00014c6c <bt_gatt_subscribe>:
{
   14c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c6e:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14c70:	4606      	mov	r6, r0
   14c72:	b950      	cbnz	r0, 14c8a <bt_gatt_subscribe+0x1e>
   14c74:	4944      	ldr	r1, [pc, #272]	; (14d88 <bt_gatt_subscribe+0x11c>)
   14c76:	4845      	ldr	r0, [pc, #276]	; (14d8c <bt_gatt_subscribe+0x120>)
   14c78:	f640 72fb 	movw	r2, #4091	; 0xffb
   14c7c:	f007 fde2 	bl	1c844 <printk>
   14c80:	f640 71fb 	movw	r1, #4091	; 0xffb
   14c84:	4840      	ldr	r0, [pc, #256]	; (14d88 <bt_gatt_subscribe+0x11c>)
   14c86:	f008 f883 	bl	1cd90 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   14c8a:	b10d      	cbz	r5, 14c90 <bt_gatt_subscribe+0x24>
   14c8c:	682b      	ldr	r3, [r5, #0]
   14c8e:	b953      	cbnz	r3, 14ca6 <bt_gatt_subscribe+0x3a>
   14c90:	493d      	ldr	r1, [pc, #244]	; (14d88 <bt_gatt_subscribe+0x11c>)
   14c92:	483e      	ldr	r0, [pc, #248]	; (14d8c <bt_gatt_subscribe+0x120>)
   14c94:	f640 72fc 	movw	r2, #4092	; 0xffc
   14c98:	f007 fdd4 	bl	1c844 <printk>
   14c9c:	f640 71fc 	movw	r1, #4092	; 0xffc
   14ca0:	4839      	ldr	r0, [pc, #228]	; (14d88 <bt_gatt_subscribe+0x11c>)
   14ca2:	f008 f875 	bl	1cd90 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   14ca6:	89ab      	ldrh	r3, [r5, #12]
   14ca8:	b953      	cbnz	r3, 14cc0 <bt_gatt_subscribe+0x54>
   14caa:	4937      	ldr	r1, [pc, #220]	; (14d88 <bt_gatt_subscribe+0x11c>)
   14cac:	4837      	ldr	r0, [pc, #220]	; (14d8c <bt_gatt_subscribe+0x120>)
   14cae:	f640 72fd 	movw	r2, #4093	; 0xffd
   14cb2:	f007 fdc7 	bl	1c844 <printk>
   14cb6:	f640 71fd 	movw	r1, #4093	; 0xffd
   14cba:	4833      	ldr	r0, [pc, #204]	; (14d88 <bt_gatt_subscribe+0x11c>)
   14cbc:	f008 f868 	bl	1cd90 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   14cc0:	896b      	ldrh	r3, [r5, #10]
   14cc2:	b953      	cbnz	r3, 14cda <bt_gatt_subscribe+0x6e>
   14cc4:	4930      	ldr	r1, [pc, #192]	; (14d88 <bt_gatt_subscribe+0x11c>)
   14cc6:	4831      	ldr	r0, [pc, #196]	; (14d8c <bt_gatt_subscribe+0x120>)
   14cc8:	f241 0203 	movw	r2, #4099	; 0x1003
   14ccc:	f007 fdba 	bl	1c844 <printk>
   14cd0:	f241 0103 	movw	r1, #4099	; 0x1003
   14cd4:	482c      	ldr	r0, [pc, #176]	; (14d88 <bt_gatt_subscribe+0x11c>)
   14cd6:	f008 f85b 	bl	1cd90 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14cda:	7b73      	ldrb	r3, [r6, #13]
   14cdc:	2b07      	cmp	r3, #7
   14cde:	d14b      	bne.n	14d78 <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   14ce0:	4630      	mov	r0, r6
   14ce2:	f7fe fae5 	bl	132b0 <gatt_sub_find>
	if (!sub) {
   14ce6:	4604      	mov	r4, r0
   14ce8:	b958      	cbnz	r0, 14d02 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   14cea:	f7fe fae1 	bl	132b0 <gatt_sub_find>
		if (sub) {
   14cee:	4604      	mov	r4, r0
   14cf0:	2800      	cmp	r0, #0
   14cf2:	d044      	beq.n	14d7e <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14cf4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14cf8:	3001      	adds	r0, #1
   14cfa:	f00a fbe7 	bl	1f4cc <bt_addr_le_copy>
			sub->id = conn->id;
   14cfe:	7a33      	ldrb	r3, [r6, #8]
   14d00:	7023      	strb	r3, [r4, #0]
	return list->head;
   14d02:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14d04:	b90a      	cbnz	r2, 14d0a <bt_gatt_subscribe+0x9e>
   14d06:	4613      	mov	r3, r2
   14d08:	e001      	b.n	14d0e <bt_gatt_subscribe+0xa2>
   14d0a:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   14d0e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14d10:	b97b      	cbnz	r3, 14d32 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   14d12:	bb41      	cbnz	r1, 14d66 <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   14d14:	4630      	mov	r0, r6
   14d16:	462b      	mov	r3, r5
   14d18:	89aa      	ldrh	r2, [r5, #12]
   14d1a:	8969      	ldrh	r1, [r5, #10]
   14d1c:	f7fe ff22 	bl	13b64 <gatt_write_ccc.constprop.0>
		if (err) {
   14d20:	4606      	mov	r6, r0
   14d22:	b300      	cbz	r0, 14d66 <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   14d24:	68a3      	ldr	r3, [r4, #8]
   14d26:	b913      	cbnz	r3, 14d2e <bt_gatt_subscribe+0xc2>
   14d28:	4620      	mov	r0, r4
   14d2a:	f00a fbee 	bl	1f50a <gatt_sub_remove.part.0>
}
   14d2e:	4630      	mov	r0, r6
   14d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   14d32:	42ab      	cmp	r3, r5
   14d34:	d106      	bne.n	14d44 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   14d36:	b912      	cbnz	r2, 14d3e <bt_gatt_subscribe+0xd2>
   14d38:	4620      	mov	r0, r4
   14d3a:	f00a fbe6 	bl	1f50a <gatt_sub_remove.part.0>
			return -EALREADY;
   14d3e:	f06f 0644 	mvn.w	r6, #68	; 0x44
   14d42:	e7f4      	b.n	14d2e <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   14d44:	891f      	ldrh	r7, [r3, #8]
   14d46:	8928      	ldrh	r0, [r5, #8]
   14d48:	4287      	cmp	r7, r0
   14d4a:	d104      	bne.n	14d56 <bt_gatt_subscribe+0xea>
   14d4c:	899f      	ldrh	r7, [r3, #12]
   14d4e:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   14d50:	4287      	cmp	r7, r0
   14d52:	bf28      	it	cs
   14d54:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   14d56:	f113 0f14 	cmn.w	r3, #20
   14d5a:	d0da      	beq.n	14d12 <bt_gatt_subscribe+0xa6>
	return node->next;
   14d5c:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14d5e:	2b00      	cmp	r3, #0
   14d60:	d0d7      	beq.n	14d12 <bt_gatt_subscribe+0xa6>
   14d62:	3b14      	subs	r3, #20
   14d64:	e7d4      	b.n	14d10 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   14d66:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14d68:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   14d6a:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   14d6e:	616a      	str	r2, [r5, #20]
	list->head = node;
   14d70:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14d72:	b93e      	cbnz	r6, 14d84 <bt_gatt_subscribe+0x118>
	list->tail = node;
   14d74:	60e3      	str	r3, [r4, #12]
}
   14d76:	e7da      	b.n	14d2e <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   14d78:	f06f 0638 	mvn.w	r6, #56	; 0x38
   14d7c:	e7d7      	b.n	14d2e <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   14d7e:	f06f 060b 	mvn.w	r6, #11
   14d82:	e7d4      	b.n	14d2e <bt_gatt_subscribe+0xc2>
	return 0;
   14d84:	2600      	movs	r6, #0
   14d86:	e7d2      	b.n	14d2e <bt_gatt_subscribe+0xc2>
   14d88:	0002529d 	.word	0x0002529d
   14d8c:	00022c66 	.word	0x00022c66

00014d90 <bt_gatt_unsubscribe>:
{
   14d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d94:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   14d96:	4607      	mov	r7, r0
   14d98:	b950      	cbnz	r0, 14db0 <bt_gatt_unsubscribe+0x20>
   14d9a:	4947      	ldr	r1, [pc, #284]	; (14eb8 <bt_gatt_unsubscribe+0x128>)
   14d9c:	4847      	ldr	r0, [pc, #284]	; (14ebc <bt_gatt_unsubscribe+0x12c>)
   14d9e:	f241 025c 	movw	r2, #4188	; 0x105c
   14da2:	f007 fd4f 	bl	1c844 <printk>
   14da6:	f241 015c 	movw	r1, #4188	; 0x105c
   14daa:	4843      	ldr	r0, [pc, #268]	; (14eb8 <bt_gatt_unsubscribe+0x128>)
   14dac:	f007 fff0 	bl	1cd90 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   14db0:	b956      	cbnz	r6, 14dc8 <bt_gatt_unsubscribe+0x38>
   14db2:	4941      	ldr	r1, [pc, #260]	; (14eb8 <bt_gatt_unsubscribe+0x128>)
   14db4:	4841      	ldr	r0, [pc, #260]	; (14ebc <bt_gatt_unsubscribe+0x12c>)
   14db6:	f241 025d 	movw	r2, #4189	; 0x105d
   14dba:	f007 fd43 	bl	1c844 <printk>
   14dbe:	f241 015d 	movw	r1, #4189	; 0x105d
   14dc2:	483d      	ldr	r0, [pc, #244]	; (14eb8 <bt_gatt_unsubscribe+0x128>)
   14dc4:	f007 ffe4 	bl	1cd90 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14dc8:	7b7b      	ldrb	r3, [r7, #13]
   14dca:	2b07      	cmp	r3, #7
   14dcc:	d170      	bne.n	14eb0 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   14dce:	4638      	mov	r0, r7
   14dd0:	f7fe fa6e 	bl	132b0 <gatt_sub_find>
	if (!sub) {
   14dd4:	4680      	mov	r8, r0
   14dd6:	b920      	cbnz	r0, 14de2 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   14dd8:	f06f 0015 	mvn.w	r0, #21
}
   14ddc:	b003      	add	sp, #12
   14dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14de2:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14de4:	b1cc      	cbz	r4, 14e1a <bt_gatt_unsubscribe+0x8a>
   14de6:	f1b4 0514 	subs.w	r5, r4, #20
   14dea:	d018      	beq.n	14e1e <bt_gatt_unsubscribe+0x8e>
	return node->next;
   14dec:	6824      	ldr	r4, [r4, #0]
   14dee:	b104      	cbz	r4, 14df2 <bt_gatt_unsubscribe+0x62>
   14df0:	3c14      	subs	r4, #20
   14df2:	f04f 0900 	mov.w	r9, #0
   14df6:	464b      	mov	r3, r9
   14df8:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   14dfa:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14dfe:	b985      	cbnz	r5, 14e22 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   14e00:	2b00      	cmp	r3, #0
   14e02:	d0e9      	beq.n	14dd8 <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   14e04:	f1ba 0f00 	cmp.w	sl, #0
   14e08:	d047      	beq.n	14e9a <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   14e0a:	462b      	mov	r3, r5
   14e0c:	462a      	mov	r2, r5
   14e0e:	4631      	mov	r1, r6
   14e10:	4638      	mov	r0, r7
   14e12:	6834      	ldr	r4, [r6, #0]
   14e14:	47a0      	blx	r4
		return 0;
   14e16:	4628      	mov	r0, r5
   14e18:	e7e0      	b.n	14ddc <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14e1a:	4625      	mov	r5, r4
   14e1c:	e7e9      	b.n	14df2 <bt_gatt_unsubscribe+0x62>
   14e1e:	462c      	mov	r4, r5
   14e20:	e7e7      	b.n	14df2 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   14e22:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14e24:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   14e28:	d12b      	bne.n	14e82 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   14e2a:	696b      	ldr	r3, [r5, #20]
   14e2c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   14e30:	f1b9 0f00 	cmp.w	r9, #0
   14e34:	d11e      	bne.n	14e74 <bt_gatt_unsubscribe+0xe4>
   14e36:	4281      	cmp	r1, r0
	list->head = node;
   14e38:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   14e3c:	d101      	bne.n	14e42 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   14e3e:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   14e42:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14e44:	4658      	mov	r0, fp
   14e46:	616b      	str	r3, [r5, #20]
   14e48:	f00a fb5c 	bl	1f504 <atomic_get>
			if (atomic_test_bit(params->flags,
   14e4c:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14e4e:	f3c0 0380 	ubfx	r3, r0, #2, #1
   14e52:	d51e      	bpl.n	14e92 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   14e54:	4631      	mov	r1, r6
   14e56:	4638      	mov	r0, r7
   14e58:	9301      	str	r3, [sp, #4]
   14e5a:	f7fe f98d 	bl	13178 <bt_att_req_cancel>
}
   14e5e:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14e60:	b1cc      	cbz	r4, 14e96 <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14e62:	f114 0114 	adds.w	r1, r4, #20
   14e66:	d002      	beq.n	14e6e <bt_gatt_unsubscribe+0xde>
	return node->next;
   14e68:	6961      	ldr	r1, [r4, #20]
   14e6a:	b101      	cbz	r1, 14e6e <bt_gatt_unsubscribe+0xde>
   14e6c:	3914      	subs	r1, #20
   14e6e:	4625      	mov	r5, r4
   14e70:	460c      	mov	r4, r1
   14e72:	e7c4      	b.n	14dfe <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   14e74:	4288      	cmp	r0, r1
	parent->next = child;
   14e76:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   14e7a:	bf08      	it	eq
   14e7c:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   14e80:	e7df      	b.n	14e42 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   14e82:	892d      	ldrh	r5, [r5, #8]
   14e84:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14e86:	4689      	mov	r9, r1
   14e88:	4285      	cmp	r5, r0
   14e8a:	bf08      	it	eq
   14e8c:	f04f 0a01 	moveq.w	sl, #1
   14e90:	e7e6      	b.n	14e60 <bt_gatt_unsubscribe+0xd0>
			found = true;
   14e92:	2301      	movs	r3, #1
   14e94:	e7e4      	b.n	14e60 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14e96:	4621      	mov	r1, r4
   14e98:	e7e9      	b.n	14e6e <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14e9a:	4633      	mov	r3, r6
   14e9c:	4652      	mov	r2, sl
   14e9e:	4638      	mov	r0, r7
   14ea0:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   14ea2:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   14ea6:	b003      	add	sp, #12
   14ea8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14eac:	f7fe be5a 	b.w	13b64 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   14eb0:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14eb4:	e792      	b.n	14ddc <bt_gatt_unsubscribe+0x4c>
   14eb6:	bf00      	nop
   14eb8:	0002529d 	.word	0x0002529d
   14ebc:	00022c66 	.word	0x00022c66

00014ec0 <bt_gatt_mult_notification>:
{
   14ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ec4:	b085      	sub	sp, #20
   14ec6:	4680      	mov	r8, r0
   14ec8:	460c      	mov	r4, r1
   14eca:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   14ecc:	f7fe f9f0 	bl	132b0 <gatt_sub_find>
	if (!sub) {
   14ed0:	4606      	mov	r6, r0
   14ed2:	b1d0      	cbz	r0, 14f0a <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   14ed4:	464a      	mov	r2, r9
   14ed6:	4621      	mov	r1, r4
   14ed8:	a801      	add	r0, sp, #4
   14eda:	f00b fad2 	bl	20482 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   14ede:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14ee2:	2b04      	cmp	r3, #4
   14ee4:	d911      	bls.n	14f0a <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   14ee6:	2104      	movs	r1, #4
   14ee8:	eb0d 0001 	add.w	r0, sp, r1
   14eec:	f002 fc0c 	bl	17708 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   14ef0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   14ef4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   14ef8:	4605      	mov	r5, r0
		if (len > buf.len) {
   14efa:	4553      	cmp	r3, sl
   14efc:	d208      	bcs.n	14f10 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   14efe:	464b      	mov	r3, r9
   14f00:	4652      	mov	r2, sl
   14f02:	2145      	movs	r1, #69	; 0x45
   14f04:	4816      	ldr	r0, [pc, #88]	; (14f60 <bt_gatt_mult_notification+0xa0>)
   14f06:	f007 fc9d 	bl	1c844 <printk>
}
   14f0a:	b005      	add	sp, #20
   14f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14f10:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   14f12:	b303      	cbz	r3, 14f56 <bt_gatt_mult_notification+0x96>
   14f14:	f1b3 0714 	subs.w	r7, r3, #20
   14f18:	d01d      	beq.n	14f56 <bt_gatt_mult_notification+0x96>
	return node->next;
   14f1a:	681c      	ldr	r4, [r3, #0]
   14f1c:	b104      	cbz	r4, 14f20 <bt_gatt_mult_notification+0x60>
   14f1e:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   14f20:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   14f24:	893b      	ldrh	r3, [r7, #8]
   14f26:	455b      	cmp	r3, fp
   14f28:	d10b      	bne.n	14f42 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   14f2a:	4653      	mov	r3, sl
   14f2c:	462a      	mov	r2, r5
   14f2e:	4639      	mov	r1, r7
   14f30:	4640      	mov	r0, r8
   14f32:	f8d7 c000 	ldr.w	ip, [r7]
   14f36:	47e0      	blx	ip
   14f38:	b918      	cbnz	r0, 14f42 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   14f3a:	4639      	mov	r1, r7
   14f3c:	4640      	mov	r0, r8
   14f3e:	f7ff ff27 	bl	14d90 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   14f42:	b144      	cbz	r4, 14f56 <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14f44:	f114 0314 	adds.w	r3, r4, #20
   14f48:	d002      	beq.n	14f50 <bt_gatt_mult_notification+0x90>
	return node->next;
   14f4a:	6963      	ldr	r3, [r4, #20]
   14f4c:	b103      	cbz	r3, 14f50 <bt_gatt_mult_notification+0x90>
   14f4e:	3b14      	subs	r3, #20
{
   14f50:	4627      	mov	r7, r4
   14f52:	461c      	mov	r4, r3
   14f54:	e7e6      	b.n	14f24 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   14f56:	4651      	mov	r1, sl
   14f58:	a801      	add	r0, sp, #4
   14f5a:	f002 fbd5 	bl	17708 <net_buf_simple_pull_mem>
   14f5e:	e7be      	b.n	14ede <bt_gatt_mult_notification+0x1e>
   14f60:	000253c6 	.word	0x000253c6

00014f64 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   14f64:	2301      	movs	r3, #1
{
   14f66:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14f68:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   14f6c:	b08e      	sub	sp, #56	; 0x38
   14f6e:	4605      	mov	r5, r0
	data.conn = conn;
   14f70:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14f72:	4631      	mov	r1, r6
   14f74:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   14f76:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14f7a:	f009 fbab 	bl	1e6d4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14f7e:	b190      	cbz	r0, 14fa6 <bt_gatt_connected+0x42>
		if (conn->id) {
   14f80:	7a2a      	ldrb	r2, [r5, #8]
   14f82:	b35a      	cbz	r2, 14fdc <bt_gatt_connected+0x78>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14f84:	ac02      	add	r4, sp, #8
   14f86:	2104      	movs	r1, #4
   14f88:	4620      	mov	r0, r4
   14f8a:	f007 fbc1 	bl	1c710 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14f8e:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14f90:	2124      	movs	r1, #36	; 0x24
   14f92:	4a1e      	ldr	r2, [pc, #120]	; (1500c <bt_gatt_connected+0xa8>)
   14f94:	a805      	add	r0, sp, #20
   14f96:	4633      	mov	r3, r6
   14f98:	f7f9 f9d0 	bl	e33c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   14f9c:	aa05      	add	r2, sp, #20
   14f9e:	4610      	mov	r0, r2
   14fa0:	491b      	ldr	r1, [pc, #108]	; (15010 <bt_gatt_connected+0xac>)
   14fa2:	f7f6 fd05 	bl	b9b0 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14fa6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14faa:	2001      	movs	r0, #1
   14fac:	4a19      	ldr	r2, [pc, #100]	; (15014 <bt_gatt_connected+0xb0>)
   14fae:	ab03      	add	r3, sp, #12
   14fb0:	f00a fc6f 	bl	1f892 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   14fb4:	4628      	mov	r0, r5
   14fb6:	f009 fcbf 	bl	1e938 <bt_conn_get_security>
   14fba:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   14fbe:	4288      	cmp	r0, r1
   14fc0:	d202      	bcs.n	14fc8 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
   14fc2:	4628      	mov	r0, r5
   14fc4:	f009 fc90 	bl	1e8e8 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   14fc8:	4628      	mov	r0, r5
   14fca:	f7fe f971 	bl	132b0 <gatt_sub_find>
	if (!sub) {
   14fce:	b118      	cbz	r0, 14fd8 <bt_gatt_connected+0x74>
	return list->head;
   14fd0:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   14fd2:	b10c      	cbz	r4, 14fd8 <bt_gatt_connected+0x74>
   14fd4:	3c14      	subs	r4, #20
   14fd6:	b91c      	cbnz	r4, 14fe0 <bt_gatt_connected+0x7c>
}
   14fd8:	b00e      	add	sp, #56	; 0x38
   14fda:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14fdc:	9200      	str	r2, [sp, #0]
   14fde:	e7d7      	b.n	14f90 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   14fe0:	4631      	mov	r1, r6
   14fe2:	7a28      	ldrb	r0, [r5, #8]
   14fe4:	f009 fb76 	bl	1e6d4 <bt_addr_le_is_bonded>
   14fe8:	b158      	cbz	r0, 15002 <bt_gatt_connected+0x9e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14fea:	f104 0010 	add.w	r0, r4, #16
   14fee:	f00a fa89 	bl	1f504 <atomic_get>
   14ff2:	0783      	lsls	r3, r0, #30
   14ff4:	d405      	bmi.n	15002 <bt_gatt_connected+0x9e>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   14ff6:	4623      	mov	r3, r4
   14ff8:	4628      	mov	r0, r5
   14ffa:	89a2      	ldrh	r2, [r4, #12]
   14ffc:	8961      	ldrh	r1, [r4, #10]
   14ffe:	f7fe fdb1 	bl	13b64 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15002:	f114 0f14 	cmn.w	r4, #20
   15006:	d0e7      	beq.n	14fd8 <bt_gatt_connected+0x74>
	return node->next;
   15008:	6964      	ldr	r4, [r4, #20]
   1500a:	e7e2      	b.n	14fd2 <bt_gatt_connected+0x6e>
   1500c:	0002530c 	.word	0x0002530c
   15010:	00013f5d 	.word	0x00013f5d
   15014:	0001432d 	.word	0x0001432d

00015018 <bt_gatt_encrypt_change>:
{
   15018:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   1501a:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1501c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1501e:	466b      	mov	r3, sp
   15020:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15024:	4a03      	ldr	r2, [pc, #12]	; (15034 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   15026:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1502a:	f00a fc32 	bl	1f892 <bt_gatt_foreach_attr>
}
   1502e:	b003      	add	sp, #12
   15030:	f85d fb04 	ldr.w	pc, [sp], #4
   15034:	0001432d 	.word	0x0001432d

00015038 <db_hash_read>:
{
   15038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1503a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   1503c:	4810      	ldr	r0, [pc, #64]	; (15080 <db_hash_read+0x48>)
{
   1503e:	4615      	mov	r5, r2
   15040:	461f      	mov	r7, r3
   15042:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   15046:	f006 fd0f 	bl	1ba68 <k_delayed_work_cancel>
	if (!err) {
   1504a:	b910      	cbnz	r0, 15052 <db_hash_read+0x1a>
		db_hash_gen(true);
   1504c:	2001      	movs	r0, #1
   1504e:	f7fe fef5 	bl	13e3c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   15052:	2101      	movs	r1, #1
   15054:	4620      	mov	r0, r4
   15056:	f00a fcec 	bl	1fa32 <bt_gatt_change_aware>
	if (offset > value_len) {
   1505a:	2e10      	cmp	r6, #16
   1505c:	d80c      	bhi.n	15078 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   1505e:	f1c6 0410 	rsb	r4, r6, #16
   15062:	42bc      	cmp	r4, r7
   15064:	bfa8      	it	ge
   15066:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   15068:	4906      	ldr	r1, [pc, #24]	; (15084 <db_hash_read+0x4c>)
   1506a:	4622      	mov	r2, r4
   1506c:	4628      	mov	r0, r5
   1506e:	4431      	add	r1, r6
   15070:	f009 f8a0 	bl	1e1b4 <memcpy>
}
   15074:	4620      	mov	r0, r4
   15076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15078:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   1507c:	e7fa      	b.n	15074 <db_hash_read+0x3c>
   1507e:	bf00      	nop
   15080:	20008eb8 	.word	0x20008eb8
   15084:	2000b727 	.word	0x2000b727

00015088 <bt_gatt_store_ccc>:
	save.count = 0;
   15088:	2300      	movs	r3, #0
{
   1508a:	b570      	push	{r4, r5, r6, lr}
   1508c:	4604      	mov	r4, r0
   1508e:	b0c0      	sub	sp, #256	; 0x100
   15090:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   15092:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   15094:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   15098:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1509a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1509e:	2001      	movs	r0, #1
   150a0:	4a13      	ldr	r2, [pc, #76]	; (150f0 <bt_gatt_store_ccc+0x68>)
   150a2:	ab0d      	add	r3, sp, #52	; 0x34
   150a4:	f00a fbf5 	bl	1f892 <bt_gatt_foreach_attr>
	if (id) {
   150a8:	b1ec      	cbz	r4, 150e6 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   150aa:	ae03      	add	r6, sp, #12
   150ac:	4622      	mov	r2, r4
   150ae:	2104      	movs	r1, #4
   150b0:	4630      	mov	r0, r6
   150b2:	f007 fb2d 	bl	1c710 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   150b6:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   150b8:	4a0e      	ldr	r2, [pc, #56]	; (150f4 <bt_gatt_store_ccc+0x6c>)
   150ba:	462b      	mov	r3, r5
   150bc:	2124      	movs	r1, #36	; 0x24
   150be:	a804      	add	r0, sp, #16
   150c0:	f7f9 f93c 	bl	e33c <bt_settings_encode_key>
	if (save.count) {
   150c4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   150c6:	b182      	cbz	r2, 150ea <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   150c8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   150ca:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   150cc:	a804      	add	r0, sp, #16
   150ce:	f7f6 fc0f 	bl	b8f0 <settings_save_one>
	if (err) {
   150d2:	4604      	mov	r4, r0
   150d4:	b120      	cbz	r0, 150e0 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   150d6:	4602      	mov	r2, r0
   150d8:	2145      	movs	r1, #69	; 0x45
   150da:	4807      	ldr	r0, [pc, #28]	; (150f8 <bt_gatt_store_ccc+0x70>)
   150dc:	f007 fbb2 	bl	1c844 <printk>
}
   150e0:	4620      	mov	r0, r4
   150e2:	b040      	add	sp, #256	; 0x100
   150e4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   150e6:	9400      	str	r4, [sp, #0]
   150e8:	e7e6      	b.n	150b8 <bt_gatt_store_ccc+0x30>
		str = NULL;
   150ea:	4611      	mov	r1, r2
   150ec:	e7ee      	b.n	150cc <bt_gatt_store_ccc+0x44>
   150ee:	bf00      	nop
   150f0:	000137f1 	.word	0x000137f1
   150f4:	0002530c 	.word	0x0002530c
   150f8:	000253e4 	.word	0x000253e4

000150fc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   150fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15100:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15102:	4603      	mov	r3, r0
   15104:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15108:	2001      	movs	r0, #1
{
   1510a:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1510c:	4a52      	ldr	r2, [pc, #328]	; (15258 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1510e:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15112:	f00a fbbe 	bl	1f892 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15116:	4629      	mov	r1, r5
   15118:	7a20      	ldrb	r0, [r4, #8]
   1511a:	f009 fadb 	bl	1e6d4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1511e:	b378      	cbz	r0, 15180 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   15120:	4629      	mov	r1, r5
   15122:	7a20      	ldrb	r0, [r4, #8]
   15124:	f7ff ffb0 	bl	15088 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   15128:	4620      	mov	r0, r4
   1512a:	f7fe f883 	bl	13234 <find_cf_cfg>
	if (!cfg) {
   1512e:	4606      	mov	r6, r0
   15130:	2800      	cmp	r0, #0
   15132:	d05e      	beq.n	151f2 <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   15134:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   15136:	3608      	adds	r6, #8
		if (conn->id) {
   15138:	2a00      	cmp	r2, #0
   1513a:	d05c      	beq.n	151f6 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1513c:	af02      	add	r7, sp, #8
   1513e:	2104      	movs	r1, #4
   15140:	4638      	mov	r0, r7
   15142:	f007 fae5 	bl	1c710 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   15146:	462b      	mov	r3, r5
   15148:	9700      	str	r7, [sp, #0]
   1514a:	2124      	movs	r1, #36	; 0x24
   1514c:	4a43      	ldr	r2, [pc, #268]	; (1525c <bt_gatt_disconnected+0x160>)
   1514e:	a803      	add	r0, sp, #12
   15150:	f7f9 f8f4 	bl	e33c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   15154:	7a23      	ldrb	r3, [r4, #8]
   15156:	2701      	movs	r7, #1
   15158:	b93b      	cbnz	r3, 1516a <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1515a:	2300      	movs	r3, #0
   1515c:	2124      	movs	r1, #36	; 0x24
   1515e:	9300      	str	r3, [sp, #0]
   15160:	4a3e      	ldr	r2, [pc, #248]	; (1525c <bt_gatt_disconnected+0x160>)
   15162:	462b      	mov	r3, r5
   15164:	a803      	add	r0, sp, #12
   15166:	f7f9 f8e9 	bl	e33c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1516a:	463a      	mov	r2, r7
   1516c:	4631      	mov	r1, r6
   1516e:	a803      	add	r0, sp, #12
   15170:	f7f6 fbbe 	bl	b8f0 <settings_save_one>
	if (err) {
   15174:	4602      	mov	r2, r0
   15176:	b118      	cbz	r0, 15180 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   15178:	2145      	movs	r1, #69	; 0x45
   1517a:	4839      	ldr	r0, [pc, #228]	; (15260 <bt_gatt_disconnected+0x164>)
   1517c:	f007 fb62 	bl	1c844 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15180:	4629      	mov	r1, r5
   15182:	7a20      	ldrb	r0, [r4, #8]
   15184:	f009 faa6 	bl	1e6d4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   15188:	b150      	cbz	r0, 151a0 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   1518a:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1518c:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   15190:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15194:	2001      	movs	r0, #1
   15196:	4a33      	ldr	r2, [pc, #204]	; (15264 <bt_gatt_disconnected+0x168>)
   15198:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   1519a:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1519c:	f00a fb79 	bl	1f892 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   151a0:	4620      	mov	r0, r4
   151a2:	f7fe f885 	bl	132b0 <gatt_sub_find>
	if (!sub) {
   151a6:	4607      	mov	r7, r0
   151a8:	b3b0      	cbz	r0, 15218 <bt_gatt_disconnected+0x11c>
	return list->head;
   151aa:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   151ac:	b3a3      	cbz	r3, 15218 <bt_gatt_disconnected+0x11c>
   151ae:	f1b3 0b14 	subs.w	fp, r3, #20
   151b2:	d031      	beq.n	15218 <bt_gatt_disconnected+0x11c>
	return node->next;
   151b4:	681e      	ldr	r6, [r3, #0]
   151b6:	b106      	cbz	r6, 151ba <bt_gatt_disconnected+0xbe>
   151b8:	3e14      	subs	r6, #20
   151ba:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   151be:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   151c0:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   151c4:	4629      	mov	r1, r5
   151c6:	7a20      	ldrb	r0, [r4, #8]
   151c8:	f009 fa84 	bl	1e6d4 <bt_addr_le_is_bonded>
   151cc:	b9a8      	cbnz	r0, 151fa <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   151ce:	465b      	mov	r3, fp
   151d0:	4642      	mov	r2, r8
   151d2:	4639      	mov	r1, r7
   151d4:	4620      	mov	r0, r4
			params->value = 0U;
   151d6:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   151da:	f00a f9bb 	bl	1f554 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   151de:	b1de      	cbz	r6, 15218 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   151e0:	f116 0214 	adds.w	r2, r6, #20
   151e4:	d002      	beq.n	151ec <bt_gatt_disconnected+0xf0>
	return node->next;
   151e6:	6972      	ldr	r2, [r6, #20]
   151e8:	b102      	cbz	r2, 151ec <bt_gatt_disconnected+0xf0>
   151ea:	3a14      	subs	r2, #20
   151ec:	46b3      	mov	fp, r6
   151ee:	4616      	mov	r6, r2
   151f0:	e7e8      	b.n	151c4 <bt_gatt_disconnected+0xc8>
		len = 0;
   151f2:	4607      	mov	r7, r0
   151f4:	e7b1      	b.n	1515a <bt_gatt_disconnected+0x5e>
   151f6:	2701      	movs	r7, #1
   151f8:	e7af      	b.n	1515a <bt_gatt_disconnected+0x5e>
   151fa:	f10b 0010 	add.w	r0, fp, #16
   151fe:	f00a f981 	bl	1f504 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15202:	07c3      	lsls	r3, r0, #31
   15204:	d4e3      	bmi.n	151ce <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   15206:	787b      	ldrb	r3, [r7, #1]
   15208:	b11b      	cbz	r3, 15212 <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1520a:	4629      	mov	r1, r5
   1520c:	4648      	mov	r0, r9
   1520e:	f00a f95d 	bl	1f4cc <bt_addr_le_copy>
			prev = &params->node;
   15212:	f10b 0814 	add.w	r8, fp, #20
   15216:	e7e2      	b.n	151de <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   15218:	4620      	mov	r0, r4
   1521a:	f7fe f80b 	bl	13234 <find_cf_cfg>
	if (!cfg) {
   1521e:	4606      	mov	r6, r0
   15220:	b1b8      	cbz	r0, 15252 <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15222:	4629      	mov	r1, r5
   15224:	7a20      	ldrb	r0, [r4, #8]
   15226:	f009 fa55 	bl	1e6d4 <bt_addr_le_is_bonded>
   1522a:	b928      	cbnz	r0, 15238 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   1522c:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1522e:	b00d      	add	sp, #52	; 0x34
   15230:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15234:	f00a b975 	b.w	1f522 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15238:	1c70      	adds	r0, r6, #1
   1523a:	4629      	mov	r1, r5
   1523c:	f00a f946 	bl	1f4cc <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15240:	360c      	adds	r6, #12
   15242:	e8d6 3fef 	ldaex	r3, [r6]
   15246:	f023 0302 	bic.w	r3, r3, #2
   1524a:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1524e:	2a00      	cmp	r2, #0
   15250:	d1f7      	bne.n	15242 <bt_gatt_disconnected+0x146>
}
   15252:	b00d      	add	sp, #52	; 0x34
   15254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15258:	00013a89 	.word	0x00013a89
   1525c:	00025438 	.word	0x00025438
   15260:	00025407 	.word	0x00025407
   15264:	0001373d 	.word	0x0001373d

00015268 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   15268:	4b10      	ldr	r3, [pc, #64]	; (152ac <get_io_capa+0x44>)
   1526a:	681b      	ldr	r3, [r3, #0]
   1526c:	b1bb      	cbz	r3, 1529e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1526e:	681a      	ldr	r2, [r3, #0]
   15270:	b142      	cbz	r2, 15284 <get_io_capa+0x1c>
   15272:	6859      	ldr	r1, [r3, #4]
   15274:	b131      	cbz	r1, 15284 <get_io_capa+0x1c>
   15276:	6899      	ldr	r1, [r3, #8]
   15278:	b911      	cbnz	r1, 15280 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1527a:	490d      	ldr	r1, [pc, #52]	; (152b0 <get_io_capa+0x48>)
   1527c:	7809      	ldrb	r1, [r1, #0]
   1527e:	b939      	cbnz	r1, 15290 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   15280:	2004      	movs	r0, #4
   15282:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   15284:	490a      	ldr	r1, [pc, #40]	; (152b0 <get_io_capa+0x48>)
   15286:	7809      	ldrb	r1, [r1, #0]
   15288:	b111      	cbz	r1, 15290 <get_io_capa+0x28>
   1528a:	b10a      	cbz	r2, 15290 <get_io_capa+0x28>
   1528c:	6899      	ldr	r1, [r3, #8]
   1528e:	b941      	cbnz	r1, 152a2 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   15290:	685b      	ldr	r3, [r3, #4]
   15292:	b943      	cbnz	r3, 152a6 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   15294:	2a00      	cmp	r2, #0
   15296:	bf0c      	ite	eq
   15298:	2003      	moveq	r0, #3
   1529a:	2000      	movne	r0, #0
   1529c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1529e:	2003      	movs	r0, #3
   152a0:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   152a2:	2001      	movs	r0, #1
   152a4:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   152a6:	2002      	movs	r0, #2
	}
}
   152a8:	4770      	bx	lr
   152aa:	bf00      	nop
   152ac:	20009c18 	.word	0x20009c18
   152b0:	2000b748 	.word	0x2000b748

000152b4 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   152b4:	4601      	mov	r1, r0
   152b6:	2300      	movs	r3, #0
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   152b8:	4a07      	ldr	r2, [pc, #28]	; (152d8 <smp_find+0x24>)
{
   152ba:	b510      	push	{r4, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   152bc:	f102 04c4 	add.w	r4, r2, #196	; 0xc4
   152c0:	18e0      	adds	r0, r4, r3
   152c2:	f00a fc01 	bl	1fac8 <atomic_test_bit>
   152c6:	b108      	cbz	r0, 152cc <smp_find+0x18>
			return &bt_smp_pool[i];
   152c8:	18d0      	adds	r0, r2, r3
		}
	}

	return NULL;
}
   152ca:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   152cc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
   152d0:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
   152d4:	d1f4      	bne.n	152c0 <smp_find+0xc>
   152d6:	e7f8      	b.n	152ca <smp_find+0x16>
   152d8:	20008f40 	.word	0x20008f40

000152dc <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   152dc:	4288      	cmp	r0, r1
{
   152de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152e0:	4604      	mov	r4, r0
   152e2:	460d      	mov	r5, r1
   152e4:	4616      	mov	r6, r2
   152e6:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   152ea:	d916      	bls.n	1531a <sys_memcpy_swap+0x3e>
   152ec:	188b      	adds	r3, r1, r2
   152ee:	4298      	cmp	r0, r3
   152f0:	d20a      	bcs.n	15308 <sys_memcpy_swap+0x2c>
   152f2:	490b      	ldr	r1, [pc, #44]	; (15320 <sys_memcpy_swap+0x44>)
   152f4:	480b      	ldr	r0, [pc, #44]	; (15324 <sys_memcpy_swap+0x48>)
   152f6:	f240 2217 	movw	r2, #535	; 0x217
   152fa:	f007 faa3 	bl	1c844 <printk>
   152fe:	f240 2117 	movw	r1, #535	; 0x217
   15302:	4807      	ldr	r0, [pc, #28]	; (15320 <sys_memcpy_swap+0x44>)
   15304:	f007 fd44 	bl	1cd90 <assert_post_action>
	psrc += length - 1;
   15308:	3e01      	subs	r6, #1
   1530a:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1530c:	f815 3901 	ldrb.w	r3, [r5], #-1
   15310:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   15314:	42bc      	cmp	r4, r7
   15316:	d1f9      	bne.n	1530c <sys_memcpy_swap+0x30>
}
   15318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1531a:	d0ea      	beq.n	152f2 <sys_memcpy_swap+0x16>
   1531c:	42b9      	cmp	r1, r7
   1531e:	e7e7      	b.n	152f0 <sys_memcpy_swap+0x14>
   15320:	0002496c 	.word	0x0002496c
   15324:	00022c66 	.word	0x00022c66

00015328 <smp_g2>:
{
   15328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1532a:	460f      	mov	r7, r1
   1532c:	461e      	mov	r6, r3
   1532e:	4614      	mov	r4, r2
   15330:	b099      	sub	sp, #100	; 0x64
	sys_memcpy_swap(m, u, 32);
   15332:	4601      	mov	r1, r0
   15334:	2220      	movs	r2, #32
   15336:	a804      	add	r0, sp, #16
{
   15338:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1533a:	f7ff ffcf 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1533e:	2220      	movs	r2, #32
   15340:	4639      	mov	r1, r7
   15342:	a80c      	add	r0, sp, #48	; 0x30
   15344:	f7ff ffca 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   15348:	2210      	movs	r2, #16
   1534a:	4631      	mov	r1, r6
   1534c:	a814      	add	r0, sp, #80	; 0x50
   1534e:	f7ff ffc5 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   15352:	4621      	mov	r1, r4
   15354:	2210      	movs	r2, #16
   15356:	4668      	mov	r0, sp
   15358:	f7ff ffc0 	bl	152dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1535c:	466b      	mov	r3, sp
   1535e:	2250      	movs	r2, #80	; 0x50
   15360:	4618      	mov	r0, r3
   15362:	a904      	add	r1, sp, #16
   15364:	f00a fc0e 	bl	1fb84 <bt_smp_aes_cmac>
	if (err) {
   15368:	4604      	mov	r4, r0
   1536a:	b960      	cbnz	r0, 15386 <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
   1536c:	2204      	movs	r2, #4
   1536e:	a903      	add	r1, sp, #12
   15370:	4628      	mov	r0, r5
   15372:	f008 ff1f 	bl	1e1b4 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   15376:	682b      	ldr	r3, [r5, #0]
   15378:	4a04      	ldr	r2, [pc, #16]	; (1538c <smp_g2+0x64>)
   1537a:	ba1b      	rev	r3, r3
   1537c:	fbb3 f1f2 	udiv	r1, r3, r2
   15380:	fb02 3311 	mls	r3, r2, r1, r3
   15384:	602b      	str	r3, [r5, #0]
}
   15386:	4620      	mov	r0, r4
   15388:	b019      	add	sp, #100	; 0x64
   1538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1538c:	000f4240 	.word	0x000f4240

00015390 <smp_chan_get>:
{
   15390:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   15392:	2106      	movs	r1, #6
   15394:	f009 fc09 	bl	1ebaa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15398:	4604      	mov	r4, r0
   1539a:	b918      	cbnz	r0, 153a4 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
   1539c:	2145      	movs	r1, #69	; 0x45
   1539e:	4802      	ldr	r0, [pc, #8]	; (153a8 <smp_chan_get+0x18>)
   153a0:	f007 fa50 	bl	1c844 <printk>
}
   153a4:	4620      	mov	r0, r4
   153a6:	bd10      	pop	{r4, pc}
   153a8:	00025449 	.word	0x00025449

000153ac <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   153ac:	4b0f      	ldr	r3, [pc, #60]	; (153ec <bt_smp_accept+0x40>)
{
   153ae:	b510      	push	{r4, lr}
		if (smp->chan.chan.conn) {
   153b0:	681c      	ldr	r4, [r3, #0]
{
   153b2:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   153b4:	b164      	cbz	r4, 153d0 <bt_smp_accept+0x24>
   153b6:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
   153ba:	b198      	cbz	r0, 153e4 <bt_smp_accept+0x38>
   153bc:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
   153c0:	b190      	cbz	r0, 153e8 <bt_smp_accept+0x3c>
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   153c2:	480b      	ldr	r0, [pc, #44]	; (153f0 <bt_smp_accept+0x44>)
   153c4:	2145      	movs	r1, #69	; 0x45
   153c6:	f007 fa3d 	bl	1c844 <printk>
   153ca:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
   153ce:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   153d0:	4622      	mov	r2, r4
		smp->chan.chan.ops = &ops;
   153d2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   153d6:	fb00 3302 	mla	r3, r0, r2, r3
   153da:	4a06      	ldr	r2, [pc, #24]	; (153f4 <bt_smp_accept+0x48>)
		return 0;
   153dc:	2000      	movs	r0, #0
		smp->chan.chan.ops = &ops;
   153de:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   153e0:	600b      	str	r3, [r1, #0]
		return 0;
   153e2:	e7f4      	b.n	153ce <bt_smp_accept+0x22>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   153e4:	2201      	movs	r2, #1
   153e6:	e7f4      	b.n	153d2 <bt_smp_accept+0x26>
   153e8:	2202      	movs	r2, #2
   153ea:	e7f2      	b.n	153d2 <bt_smp_accept+0x26>
   153ec:	20008f40 	.word	0x20008f40
   153f0:	00025469 	.word	0x00025469
   153f4:	000222d0 	.word	0x000222d0

000153f8 <get_pair_method>:
{
   153f8:	b538      	push	{r3, r4, r5, lr}
   153fa:	4605      	mov	r5, r0
   153fc:	460c      	mov	r4, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   153fe:	30c4      	adds	r0, #196	; 0xc4
   15400:	2105      	movs	r1, #5
   15402:	f00a fb61 	bl	1fac8 <atomic_test_bit>
   15406:	bb00      	cbnz	r0, 1544a <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   15408:	2c04      	cmp	r4, #4
   1540a:	d81d      	bhi.n	15448 <get_pair_method+0x50>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1540c:	f895 30cb 	ldrb.w	r3, [r5, #203]	; 0xcb
   15410:	f895 20d2 	ldrb.w	r2, [r5, #210]	; 0xd2
   15414:	4013      	ands	r3, r2
   15416:	07d9      	lsls	r1, r3, #31
   15418:	d434      	bmi.n	15484 <get_pair_method+0x8c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1541a:	f895 00d3 	ldrb.w	r0, [r5, #211]	; 0xd3
   1541e:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   15422:	4303      	orrs	r3, r0
   15424:	f013 0004 	ands.w	r0, r3, #4
   15428:	d00e      	beq.n	15448 <get_pair_method+0x50>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1542a:	f7ff ff1d 	bl	15268 <get_io_capa>
   1542e:	4b18      	ldr	r3, [pc, #96]	; (15490 <get_pair_method+0x98>)
   15430:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   15434:	441c      	add	r4, r3
   15436:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
   15438:	2804      	cmp	r0, #4
   1543a:	d105      	bne.n	15448 <get_pair_method+0x50>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1543c:	682b      	ldr	r3, [r5, #0]
   1543e:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   15440:	2b00      	cmp	r3, #0
   15442:	bf0c      	ite	eq
   15444:	2002      	moveq	r0, #2
   15446:	2001      	movne	r0, #1
}
   15448:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1544a:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   1544e:	f895 00d3 	ldrb.w	r0, [r5, #211]	; 0xd3
   15452:	ea03 0200 	and.w	r2, r3, r0
   15456:	0712      	lsls	r2, r2, #28
   15458:	d506      	bpl.n	15468 <get_pair_method+0x70>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1545a:	f895 20cb 	ldrb.w	r2, [r5, #203]	; 0xcb
   1545e:	f895 50d2 	ldrb.w	r5, [r5, #210]	; 0xd2
   15462:	432a      	orrs	r2, r5
   15464:	07d2      	lsls	r2, r2, #31
   15466:	d40f      	bmi.n	15488 <get_pair_method+0x90>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   15468:	2c04      	cmp	r4, #4
   1546a:	d80f      	bhi.n	1548c <get_pair_method+0x94>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1546c:	4318      	orrs	r0, r3
   1546e:	f010 0004 	ands.w	r0, r0, #4
   15472:	d0e9      	beq.n	15448 <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
   15474:	f7ff fef8 	bl	15268 <get_io_capa>
   15478:	4906      	ldr	r1, [pc, #24]	; (15494 <get_pair_method+0x9c>)
   1547a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1547e:	440c      	add	r4, r1
   15480:	5c20      	ldrb	r0, [r4, r0]
   15482:	e7e1      	b.n	15448 <get_pair_method+0x50>
		return LEGACY_OOB;
   15484:	2006      	movs	r0, #6
   15486:	e7df      	b.n	15448 <get_pair_method+0x50>
			return LE_SC_OOB;
   15488:	4608      	mov	r0, r1
   1548a:	e7dd      	b.n	15448 <get_pair_method+0x50>
		return JUST_WORKS;
   1548c:	2000      	movs	r0, #0
   1548e:	e7db      	b.n	15448 <get_pair_method+0x50>
   15490:	0002588e 	.word	0x0002588e
   15494:	000258a7 	.word	0x000258a7

00015498 <get_auth.constprop.0>:
	if (sc_supported) {
   15498:	4b0c      	ldr	r3, [pc, #48]	; (154cc <get_auth.constprop.0+0x34>)
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   1549a:	b510      	push	{r4, lr}
	if (sc_supported) {
   1549c:	781b      	ldrb	r3, [r3, #0]
   1549e:	b17b      	cbz	r3, 154c0 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   154a0:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   154a4:	f7ff fee0 	bl	15268 <get_io_capa>
	if (bondable) {
   154a8:	4b09      	ldr	r3, [pc, #36]	; (154d0 <get_auth.constprop.0+0x38>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   154aa:	2803      	cmp	r0, #3
	if (bondable) {
   154ac:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   154ae:	bf0c      	ite	eq
   154b0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   154b4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   154b8:	b12b      	cbz	r3, 154c6 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   154ba:	f044 0001 	orr.w	r0, r4, #1
}
   154be:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   154c0:	f000 0407 	and.w	r4, r0, #7
   154c4:	e7ee      	b.n	154a4 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   154c6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   154ca:	e7f8      	b.n	154be <get_auth.constprop.0+0x26>
   154cc:	2000b748 	.word	0x2000b748
   154d0:	20008431 	.word	0x20008431

000154d4 <smp_f5>:
{
   154d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   154d8:	b09a      	sub	sp, #104	; 0x68
   154da:	4616      	mov	r6, r2
   154dc:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
   154e0:	aa0c      	add	r2, sp, #48	; 0x30
{
   154e2:	4684      	mov	ip, r0
   154e4:	468a      	mov	sl, r1
   154e6:	4690      	mov	r8, r2
   154e8:	461d      	mov	r5, r3
	uint8_t m[53] = { 0x00, /* counter */
   154ea:	4b2c      	ldr	r3, [pc, #176]	; (1559c <smp_f5+0xc8>)
   154ec:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   154f0:	4614      	mov	r4, r2
   154f2:	6818      	ldr	r0, [r3, #0]
   154f4:	6859      	ldr	r1, [r3, #4]
   154f6:	3308      	adds	r3, #8
   154f8:	c403      	stmia	r4!, {r0, r1}
   154fa:	4573      	cmp	r3, lr
   154fc:	4622      	mov	r2, r4
   154fe:	d1f7      	bne.n	154f0 <smp_f5+0x1c>
   15500:	6818      	ldr	r0, [r3, #0]
   15502:	791b      	ldrb	r3, [r3, #4]
	sys_memcpy_swap(ws, w, 32);
   15504:	4661      	mov	r1, ip
	uint8_t m[53] = { 0x00, /* counter */
   15506:	6020      	str	r0, [r4, #0]
   15508:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   1550a:	2220      	movs	r2, #32
   1550c:	a804      	add	r0, sp, #16
   1550e:	f7ff fee5 	bl	152dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   15512:	466b      	mov	r3, sp
   15514:	2220      	movs	r2, #32
   15516:	4822      	ldr	r0, [pc, #136]	; (155a0 <smp_f5+0xcc>)
   15518:	a904      	add	r1, sp, #16
   1551a:	f00a fb33 	bl	1fb84 <bt_smp_aes_cmac>
	if (err) {
   1551e:	4604      	mov	r4, r0
   15520:	bbc0      	cbnz	r0, 15594 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
   15522:	2210      	movs	r2, #16
   15524:	4651      	mov	r1, sl
   15526:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1552a:	f7ff fed7 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1552e:	2210      	movs	r2, #16
   15530:	4631      	mov	r1, r6
   15532:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   15536:	f7ff fed1 	bl	152dc <sys_memcpy_swap>
	m[37] = a1->type;
   1553a:	4629      	mov	r1, r5
   1553c:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   15540:	2206      	movs	r2, #6
   15542:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   15546:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1554a:	f7ff fec7 	bl	152dc <sys_memcpy_swap>
	m[44] = a2->type;
   1554e:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   15550:	2206      	movs	r2, #6
	m[44] = a2->type;
   15552:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   15556:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   1555a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1555e:	f7ff febd 	bl	152dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   15562:	464b      	mov	r3, r9
   15564:	2235      	movs	r2, #53	; 0x35
   15566:	4641      	mov	r1, r8
   15568:	4668      	mov	r0, sp
   1556a:	f00a fb0b 	bl	1fb84 <bt_smp_aes_cmac>
	if (err) {
   1556e:	4604      	mov	r4, r0
   15570:	b980      	cbnz	r0, 15594 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
   15572:	4648      	mov	r0, r9
   15574:	f00a fb6a 	bl	1fc4c <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   15578:	2301      	movs	r3, #1
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1557a:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   1557c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   15580:	4641      	mov	r1, r8
   15582:	463b      	mov	r3, r7
   15584:	4668      	mov	r0, sp
   15586:	f00a fafd 	bl	1fb84 <bt_smp_aes_cmac>
	if (err) {
   1558a:	4604      	mov	r4, r0
   1558c:	b910      	cbnz	r0, 15594 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
   1558e:	4638      	mov	r0, r7
   15590:	f00a fb5c 	bl	1fc4c <sys_mem_swap.constprop.0>
}
   15594:	4620      	mov	r0, r4
   15596:	b01a      	add	sp, #104	; 0x68
   15598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1559c:	00021ab1 	.word	0x00021ab1
   155a0:	000258c0 	.word	0x000258c0

000155a4 <sc_smp_check_confirm>:
{
   155a4:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
   155a6:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
{
   155aa:	4604      	mov	r4, r0
   155ac:	b087      	sub	sp, #28
   155ae:	2a05      	cmp	r2, #5
   155b0:	d81d      	bhi.n	155ee <sc_smp_check_confirm+0x4a>
   155b2:	e8df f002 	tbb	[pc, r2]
   155b6:	0323      	.short	0x0323
   155b8:	301c2303 	.word	0x301c2303
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   155bc:	f890 219c 	ldrb.w	r2, [r0, #412]	; 0x19c
   155c0:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
   155c4:	40d3      	lsrs	r3, r2
   155c6:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   155ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   155ce:	4913      	ldr	r1, [pc, #76]	; (1561c <sc_smp_check_confirm+0x78>)
   155d0:	ad02      	add	r5, sp, #8
   155d2:	9500      	str	r5, [sp, #0]
   155d4:	6809      	ldr	r1, [r1, #0]
   155d6:	f104 02f7 	add.w	r2, r4, #247	; 0xf7
   155da:	f204 1017 	addw	r0, r4, #279	; 0x117
   155de:	f00a fb8f 	bl	1fd00 <smp_f4>
   155e2:	b168      	cbz	r0, 15600 <sc_smp_check_confirm+0x5c>
		BT_ERR("Calculate confirm failed");
   155e4:	2145      	movs	r1, #69	; 0x45
   155e6:	480e      	ldr	r0, [pc, #56]	; (15620 <sc_smp_check_confirm+0x7c>)
   155e8:	f007 f92c 	bl	1c844 <printk>
   155ec:	e003      	b.n	155f6 <sc_smp_check_confirm+0x52>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   155ee:	2145      	movs	r1, #69	; 0x45
   155f0:	480c      	ldr	r0, [pc, #48]	; (15624 <sc_smp_check_confirm+0x80>)
   155f2:	f007 f927 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   155f6:	2008      	movs	r0, #8
}
   155f8:	b007      	add	sp, #28
   155fa:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
   155fc:	2300      	movs	r3, #0
   155fe:	e7e6      	b.n	155ce <sc_smp_check_confirm+0x2a>
	if (memcmp(smp->pcnf, cfm, 16)) {
   15600:	2210      	movs	r2, #16
   15602:	4629      	mov	r1, r5
   15604:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   15608:	f008 fdc3 	bl	1e192 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1560c:	2800      	cmp	r0, #0
   1560e:	bf0c      	ite	eq
   15610:	2000      	moveq	r0, #0
   15612:	2004      	movne	r0, #4
   15614:	e7f0      	b.n	155f8 <sc_smp_check_confirm+0x54>
	switch (smp->method) {
   15616:	2000      	movs	r0, #0
   15618:	e7ee      	b.n	155f8 <sc_smp_check_confirm+0x54>
   1561a:	bf00      	nop
   1561c:	20009d3c 	.word	0x20009d3c
   15620:	000254b4 	.word	0x000254b4
   15624:	00025493 	.word	0x00025493

00015628 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   15628:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1562a:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1562c:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1562e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   15630:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   15632:	460a      	mov	r2, r1
   15634:	6800      	ldr	r0, [r0, #0]
   15636:	2106      	movs	r1, #6
   15638:	f009 fa77 	bl	1eb2a <bt_l2cap_send_cb>
   1563c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15640:	2300      	movs	r3, #0
   15642:	4804      	ldr	r0, [pc, #16]	; (15654 <smp_send.constprop.0+0x2c>)
   15644:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
   15648:	b002      	add	sp, #8
   1564a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1564e:	f006 b99b 	b.w	1b988 <k_delayed_work_submit_to_queue>
   15652:	bf00      	nop
   15654:	20009630 	.word	0x20009630

00015658 <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
   15658:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
   1565a:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   1565c:	d00a      	beq.n	15674 <sec_level_reachable.isra.0+0x1c>
   1565e:	d805      	bhi.n	1566c <sec_level_reachable.isra.0+0x14>
   15660:	3801      	subs	r0, #1
   15662:	2801      	cmp	r0, #1
   15664:	bf8c      	ite	hi
   15666:	2000      	movhi	r0, #0
   15668:	2001      	movls	r0, #1
}
   1566a:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
   1566c:	2804      	cmp	r0, #4
   1566e:	d010      	beq.n	15692 <sec_level_reachable.isra.0+0x3a>
   15670:	2000      	movs	r0, #0
   15672:	e7fa      	b.n	1566a <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15674:	f7ff fdf8 	bl	15268 <get_io_capa>
   15678:	2803      	cmp	r0, #3
   1567a:	d108      	bne.n	1568e <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
   1567c:	4b0c      	ldr	r3, [pc, #48]	; (156b0 <sec_level_reachable.isra.0+0x58>)
   1567e:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15680:	2800      	cmp	r0, #0
   15682:	d0f2      	beq.n	1566a <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
   15684:	68c0      	ldr	r0, [r0, #12]
   15686:	3800      	subs	r0, #0
   15688:	bf18      	it	ne
   1568a:	2001      	movne	r0, #1
   1568c:	e7ed      	b.n	1566a <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1568e:	2001      	movs	r0, #1
   15690:	e7eb      	b.n	1566a <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   15692:	f7ff fde9 	bl	15268 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   15696:	2803      	cmp	r0, #3
   15698:	d104      	bne.n	156a4 <sec_level_reachable.isra.0+0x4c>
   1569a:	4b05      	ldr	r3, [pc, #20]	; (156b0 <sec_level_reachable.isra.0+0x58>)
   1569c:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1569e:	b118      	cbz	r0, 156a8 <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   156a0:	68c0      	ldr	r0, [r0, #12]
   156a2:	b108      	cbz	r0, 156a8 <sec_level_reachable.isra.0+0x50>
   156a4:	4b03      	ldr	r3, [pc, #12]	; (156b4 <sec_level_reachable.isra.0+0x5c>)
   156a6:	7818      	ldrb	r0, [r3, #0]
   156a8:	f000 0001 	and.w	r0, r0, #1
   156ac:	e7dd      	b.n	1566a <sec_level_reachable.isra.0+0x12>
   156ae:	bf00      	nop
   156b0:	20009c18 	.word	0x20009c18
   156b4:	2000b748 	.word	0x2000b748

000156b8 <display_passkey>:
{
   156b8:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   156ba:	2104      	movs	r1, #4
{
   156bc:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   156be:	f500 70cc 	add.w	r0, r0, #408	; 0x198
   156c2:	f7fb fbc7 	bl	10e54 <bt_rand>
   156c6:	4605      	mov	r5, r0
   156c8:	b9e0      	cbnz	r0, 15704 <display_passkey+0x4c>
		smp->passkey %= 1000000;
   156ca:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   156ce:	4a0e      	ldr	r2, [pc, #56]	; (15708 <display_passkey+0x50>)
	if (bt_auth && bt_auth->passkey_display) {
   156d0:	4e0e      	ldr	r6, [pc, #56]	; (1570c <display_passkey+0x54>)
		smp->passkey %= 1000000;
   156d2:	fbb3 f1f2 	udiv	r1, r3, r2
   156d6:	fb02 3311 	mls	r3, r2, r1, r3
	smp->passkey_round = 0U;
   156da:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
   156de:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
   156e0:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
   156e4:	b168      	cbz	r0, 15702 <display_passkey+0x4a>
   156e6:	6800      	ldr	r0, [r0, #0]
   156e8:	b158      	cbz	r0, 15702 <display_passkey+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   156ea:	210b      	movs	r1, #11
   156ec:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   156f0:	f00a fb2b 	bl	1fd4a <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   156f4:	6833      	ldr	r3, [r6, #0]
   156f6:	6820      	ldr	r0, [r4, #0]
   156f8:	681b      	ldr	r3, [r3, #0]
   156fa:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
   156fe:	4798      	blx	r3
	return 0;
   15700:	4628      	mov	r0, r5
}
   15702:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   15704:	2008      	movs	r0, #8
   15706:	e7fc      	b.n	15702 <display_passkey+0x4a>
   15708:	000f4240 	.word	0x000f4240
   1570c:	20009c18 	.word	0x20009c18

00015710 <smp_init>:
{
   15710:	b538      	push	{r3, r4, r5, lr}
   15712:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   15714:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
   15718:	22f0      	movs	r2, #240	; 0xf0
   1571a:	2100      	movs	r1, #0
   1571c:	4628      	mov	r0, r5
   1571e:	f008 fd74 	bl	1e20a <memset>
	if (bt_rand(smp->prnd, 16)) {
   15722:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   15726:	2110      	movs	r1, #16
   15728:	f7fb fb94 	bl	10e54 <bt_rand>
   1572c:	4604      	mov	r4, r0
   1572e:	b948      	cbnz	r0, 15744 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   15730:	2105      	movs	r1, #5
   15732:	4628      	mov	r0, r5
   15734:	f00a fb09 	bl	1fd4a <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   15738:	f7fb faac 	bl	10c94 <bt_pub_key_get>
   1573c:	4b02      	ldr	r3, [pc, #8]	; (15748 <smp_init+0x38>)
   1573e:	6018      	str	r0, [r3, #0]
}
   15740:	4620      	mov	r0, r4
   15742:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   15744:	2408      	movs	r4, #8
   15746:	e7fb      	b.n	15740 <smp_init+0x30>
   15748:	20009d3c 	.word	0x20009d3c

0001574c <smp_dhkey_generate>:
{
   1574c:	b538      	push	{r3, r4, r5, lr}
   1574e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   15750:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   15754:	2108      	movs	r1, #8
   15756:	4628      	mov	r0, r5
   15758:	f00a faf7 	bl	1fd4a <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1575c:	4907      	ldr	r1, [pc, #28]	; (1577c <smp_dhkey_generate+0x30>)
   1575e:	f204 1017 	addw	r0, r4, #279	; 0x117
   15762:	f7fb faa5 	bl	10cb0 <bt_dh_key_gen>
	if (err) {
   15766:	b140      	cbz	r0, 1577a <smp_dhkey_generate+0x2e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   15768:	2108      	movs	r1, #8
   1576a:	4628      	mov	r0, r5
   1576c:	f00a f9ff 	bl	1fb6e <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   15770:	4803      	ldr	r0, [pc, #12]	; (15780 <smp_dhkey_generate+0x34>)
   15772:	2145      	movs	r1, #69	; 0x45
   15774:	f007 f866 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15778:	2008      	movs	r0, #8
}
   1577a:	bd38      	pop	{r3, r4, r5, pc}
   1577c:	0001ff17 	.word	0x0001ff17
   15780:	000254d2 	.word	0x000254d2

00015784 <legacy_request_tk>:
{
   15784:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   15786:	6804      	ldr	r4, [r0, #0]
{
   15788:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1578a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1578e:	7a20      	ldrb	r0, [r4, #8]
   15790:	f001 fc6c 	bl	1706c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   15794:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   15798:	b148      	cbz	r0, 157ae <legacy_request_tk+0x2a>
   1579a:	7b43      	ldrb	r3, [r0, #13]
   1579c:	07db      	lsls	r3, r3, #31
   1579e:	d506      	bpl.n	157ae <legacy_request_tk+0x2a>
   157a0:	b92a      	cbnz	r2, 157ae <legacy_request_tk+0x2a>
		BT_ERR("JustWorks failed, authenticated keys present");
   157a2:	2145      	movs	r1, #69	; 0x45
   157a4:	4830      	ldr	r0, [pc, #192]	; (15868 <legacy_request_tk+0xe4>)
   157a6:	f007 f84d 	bl	1c844 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   157aa:	2008      	movs	r0, #8
   157ac:	e01d      	b.n	157ea <legacy_request_tk+0x66>
	switch (smp->method) {
   157ae:	4610      	mov	r0, r2
   157b0:	2a06      	cmp	r2, #6
   157b2:	d852      	bhi.n	1585a <legacy_request_tk+0xd6>
   157b4:	e8df f002 	tbb	[pc, r2]
   157b8:	511b4619 	.word	0x511b4619
   157bc:	5151      	.short	0x5151
   157be:	04          	.byte	0x04
   157bf:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   157c0:	4e2a      	ldr	r6, [pc, #168]	; (1586c <legacy_request_tk+0xe8>)
   157c2:	6833      	ldr	r3, [r6, #0]
   157c4:	2b00      	cmp	r3, #0
   157c6:	d04d      	beq.n	15864 <legacy_request_tk+0xe0>
   157c8:	68db      	ldr	r3, [r3, #12]
   157ca:	2b00      	cmp	r3, #0
   157cc:	d04a      	beq.n	15864 <legacy_request_tk+0xe0>
			struct bt_conn_oob_info info = {
   157ce:	2400      	movs	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   157d0:	210a      	movs	r1, #10
   157d2:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
			struct bt_conn_oob_info info = {
   157d6:	f8ad 4004 	strh.w	r4, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   157da:	f00a fab6 	bl	1fd4a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   157de:	6833      	ldr	r3, [r6, #0]
   157e0:	6828      	ldr	r0, [r5, #0]
   157e2:	68db      	ldr	r3, [r3, #12]
   157e4:	a901      	add	r1, sp, #4
   157e6:	4798      	blx	r3
	return 0;
   157e8:	2000      	movs	r0, #0
}
   157ea:	b002      	add	sp, #8
   157ec:	bd70      	pop	{r4, r5, r6, pc}
			if (bt_rand(&passkey, sizeof(passkey))) {
   157ee:	2104      	movs	r1, #4
   157f0:	eb0d 0001 	add.w	r0, sp, r1
   157f4:	f7fb fb2e 	bl	10e54 <bt_rand>
   157f8:	2800      	cmp	r0, #0
   157fa:	d1d6      	bne.n	157aa <legacy_request_tk+0x26>
			passkey %= 1000000;
   157fc:	9b01      	ldr	r3, [sp, #4]
   157fe:	4a1c      	ldr	r2, [pc, #112]	; (15870 <legacy_request_tk+0xec>)
		if (bt_auth && bt_auth->passkey_display) {
   15800:	4e1a      	ldr	r6, [pc, #104]	; (1586c <legacy_request_tk+0xe8>)
			passkey %= 1000000;
   15802:	fbb3 f1f2 	udiv	r1, r3, r2
   15806:	fb02 3311 	mls	r3, r2, r1, r3
   1580a:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1580c:	6833      	ldr	r3, [r6, #0]
   1580e:	b15b      	cbz	r3, 15828 <legacy_request_tk+0xa4>
   15810:	681b      	ldr	r3, [r3, #0]
   15812:	b14b      	cbz	r3, 15828 <legacy_request_tk+0xa4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   15814:	210b      	movs	r1, #11
   15816:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1581a:	f00a fa96 	bl	1fd4a <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1581e:	6833      	ldr	r3, [r6, #0]
   15820:	4620      	mov	r0, r4
   15822:	681b      	ldr	r3, [r3, #0]
   15824:	9901      	ldr	r1, [sp, #4]
   15826:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   15828:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
   1582a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1582e:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
	sys_put_le16(val >> 16, &dst[2]);
   15832:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15834:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	dst[1] = val >> 8;
   15838:	0a1b      	lsrs	r3, r3, #8
   1583a:	f885 2108 	strb.w	r2, [r5, #264]	; 0x108
   1583e:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
   15842:	e7d1      	b.n	157e8 <legacy_request_tk+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15844:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   15848:	210a      	movs	r1, #10
   1584a:	f00a fa7e 	bl	1fd4a <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1584e:	4b07      	ldr	r3, [pc, #28]	; (1586c <legacy_request_tk+0xe8>)
   15850:	4620      	mov	r0, r4
   15852:	681b      	ldr	r3, [r3, #0]
   15854:	685b      	ldr	r3, [r3, #4]
   15856:	4798      	blx	r3
   15858:	e7c6      	b.n	157e8 <legacy_request_tk+0x64>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1585a:	2145      	movs	r1, #69	; 0x45
   1585c:	4805      	ldr	r0, [pc, #20]	; (15874 <legacy_request_tk+0xf0>)
   1585e:	f006 fff1 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15862:	e7a2      	b.n	157aa <legacy_request_tk+0x26>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   15864:	2002      	movs	r0, #2
   15866:	e7c0      	b.n	157ea <legacy_request_tk+0x66>
   15868:	000254f0 	.word	0x000254f0
   1586c:	20009c18 	.word	0x20009c18
   15870:	000f4240 	.word	0x000f4240
   15874:	00025493 	.word	0x00025493

00015878 <smp_ident_info>:
{
   15878:	b570      	push	{r4, r5, r6, lr}
   1587a:	460b      	mov	r3, r1
   1587c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1587e:	210d      	movs	r1, #13
   15880:	30c4      	adds	r0, #196	; 0xc4
   15882:	f00a f921 	bl	1fac8 <atomic_test_bit>
   15886:	b1c0      	cbz	r0, 158ba <smp_ident_info+0x42>
		struct bt_smp_ident_info *req = (void *)buf->data;
   15888:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1588a:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1588c:	2002      	movs	r0, #2
   1588e:	f103 0588 	add.w	r5, r3, #136	; 0x88
   15892:	462a      	mov	r2, r5
   15894:	7a19      	ldrb	r1, [r3, #8]
   15896:	f00a fdda 	bl	2044e <bt_keys_get_type>
		if (!keys) {
   1589a:	b948      	cbnz	r0, 158b0 <smp_ident_info+0x38>
			BT_ERR("Unable to get keys for %s",
   1589c:	4628      	mov	r0, r5
   1589e:	f7f8 fcad 	bl	e1fc <bt_addr_le_str_real>
   158a2:	2145      	movs	r1, #69	; 0x45
   158a4:	4602      	mov	r2, r0
   158a6:	4808      	ldr	r0, [pc, #32]	; (158c8 <smp_ident_info+0x50>)
   158a8:	f006 ffcc 	bl	1c844 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   158ac:	2008      	movs	r0, #8
}
   158ae:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   158b0:	2210      	movs	r2, #16
   158b2:	4631      	mov	r1, r6
   158b4:	302a      	adds	r0, #42	; 0x2a
   158b6:	f008 fc7d 	bl	1e1b4 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   158ba:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   158be:	2109      	movs	r1, #9
   158c0:	f00a fa43 	bl	1fd4a <atomic_set_bit>
	return 0;
   158c4:	2000      	movs	r0, #0
   158c6:	e7f2      	b.n	158ae <smp_ident_info+0x36>
   158c8:	00025522 	.word	0x00025522

000158cc <smp_encrypt_info>:
{
   158cc:	b570      	push	{r4, r5, r6, lr}
   158ce:	460b      	mov	r3, r1
   158d0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   158d2:	210d      	movs	r1, #13
   158d4:	30c4      	adds	r0, #196	; 0xc4
   158d6:	f00a f8f7 	bl	1fac8 <atomic_test_bit>
   158da:	b1c0      	cbz	r0, 1590e <smp_encrypt_info+0x42>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   158dc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   158de:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   158e0:	2004      	movs	r0, #4
   158e2:	f103 0588 	add.w	r5, r3, #136	; 0x88
   158e6:	462a      	mov	r2, r5
   158e8:	7a19      	ldrb	r1, [r3, #8]
   158ea:	f00a fdb0 	bl	2044e <bt_keys_get_type>
		if (!keys) {
   158ee:	b948      	cbnz	r0, 15904 <smp_encrypt_info+0x38>
			BT_ERR("Unable to get keys for %s",
   158f0:	4628      	mov	r0, r5
   158f2:	f7f8 fc83 	bl	e1fc <bt_addr_le_str_real>
   158f6:	2145      	movs	r1, #69	; 0x45
   158f8:	4602      	mov	r2, r0
   158fa:	4808      	ldr	r0, [pc, #32]	; (1591c <smp_encrypt_info+0x50>)
   158fc:	f006 ffa2 	bl	1c844 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   15900:	2008      	movs	r0, #8
}
   15902:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   15904:	2210      	movs	r2, #16
   15906:	4631      	mov	r1, r6
   15908:	301a      	adds	r0, #26
   1590a:	f008 fc53 	bl	1e1b4 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1590e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15912:	2107      	movs	r1, #7
   15914:	f00a fa19 	bl	1fd4a <atomic_set_bit>
	return 0;
   15918:	2000      	movs	r0, #0
   1591a:	e7f2      	b.n	15902 <smp_encrypt_info+0x36>
   1591c:	00025522 	.word	0x00025522

00015920 <bt_smp_distribute_keys>:
{
   15920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15924:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   15926:	6800      	ldr	r0, [r0, #0]
{
   15928:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
   1592a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1592e:	b95b      	cbnz	r3, 15948 <bt_smp_distribute_keys+0x28>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   15930:	3088      	adds	r0, #136	; 0x88
   15932:	f7f8 fc63 	bl	e1fc <bt_addr_le_str_real>
   15936:	2145      	movs	r1, #69	; 0x45
   15938:	4602      	mov	r2, r0
   1593a:	483e      	ldr	r0, [pc, #248]	; (15a34 <bt_smp_distribute_keys+0x114>)
   1593c:	f006 ff82 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15940:	2008      	movs	r0, #8
}
   15942:	b009      	add	sp, #36	; 0x24
   15944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15948:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
   1594c:	2105      	movs	r1, #5
   1594e:	4638      	mov	r0, r7
   15950:	f00a f8ba 	bl	1fac8 <atomic_test_bit>
   15954:	b988      	cbnz	r0, 1597a <bt_smp_distribute_keys+0x5a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   15956:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   1595a:	f010 0001 	ands.w	r0, r0, #1
   1595e:	d0f0      	beq.n	15942 <bt_smp_distribute_keys+0x22>
	struct bt_keys *keys = conn->le.keys;
   15960:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   15962:	211a      	movs	r1, #26
   15964:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   15966:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1596a:	f7fb fa73 	bl	10e54 <bt_rand>
   1596e:	4680      	mov	r8, r0
   15970:	b128      	cbz	r0, 1597e <bt_smp_distribute_keys+0x5e>
			BT_ERR("Unable to get random bytes");
   15972:	2145      	movs	r1, #69	; 0x45
   15974:	4830      	ldr	r0, [pc, #192]	; (15a38 <bt_smp_distribute_keys+0x118>)
			BT_ERR("Unable to allocate Master Ident buffer");
   15976:	f006 ff65 	bl	1c844 <printk>
	return 0;
   1597a:	2000      	movs	r0, #0
   1597c:	e7e1      	b.n	15942 <bt_smp_distribute_keys+0x22>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1597e:	2106      	movs	r1, #6
   15980:	4620      	mov	r0, r4
   15982:	f00a fa04 	bl	1fd8e <smp_create_pdu.constprop.0>
		if (!buf) {
   15986:	4606      	mov	r6, r0
   15988:	b910      	cbnz	r0, 15990 <bt_smp_distribute_keys+0x70>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1598a:	2145      	movs	r1, #69	; 0x45
   1598c:	482b      	ldr	r0, [pc, #172]	; (15a3c <bt_smp_distribute_keys+0x11c>)
   1598e:	e7f2      	b.n	15976 <bt_smp_distribute_keys+0x56>
   15990:	2110      	movs	r1, #16
   15992:	3008      	adds	r0, #8
   15994:	f001 fed6 	bl	17744 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   15998:	7b2a      	ldrb	r2, [r5, #12]
   1599a:	a901      	add	r1, sp, #4
   1599c:	4681      	mov	r9, r0
   1599e:	f008 fc09 	bl	1e1b4 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   159a2:	7b28      	ldrb	r0, [r5, #12]
   159a4:	280f      	cmp	r0, #15
   159a6:	d805      	bhi.n	159b4 <bt_smp_distribute_keys+0x94>
			(void)memset(info->ltk + keys->enc_size, 0,
   159a8:	f1c0 0210 	rsb	r2, r0, #16
   159ac:	4641      	mov	r1, r8
   159ae:	4448      	add	r0, r9
   159b0:	f008 fc2b 	bl	1e20a <memset>
		smp_send(smp, buf, NULL, NULL);
   159b4:	4631      	mov	r1, r6
   159b6:	2200      	movs	r2, #0
   159b8:	4620      	mov	r0, r4
   159ba:	f7ff fe35 	bl	15628 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   159be:	2107      	movs	r1, #7
   159c0:	4620      	mov	r0, r4
   159c2:	f00a f9e4 	bl	1fd8e <smp_create_pdu.constprop.0>
		if (!buf) {
   159c6:	4606      	mov	r6, r0
   159c8:	b910      	cbnz	r0, 159d0 <bt_smp_distribute_keys+0xb0>
			BT_ERR("Unable to allocate Master Ident buffer");
   159ca:	2145      	movs	r1, #69	; 0x45
   159cc:	481c      	ldr	r0, [pc, #112]	; (15a40 <bt_smp_distribute_keys+0x120>)
   159ce:	e7d2      	b.n	15976 <bt_smp_distribute_keys+0x56>
   159d0:	210a      	movs	r1, #10
   159d2:	3008      	adds	r0, #8
   159d4:	f001 feb6 	bl	17744 <net_buf_simple_add>
   159d8:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   159da:	2208      	movs	r2, #8
   159dc:	a905      	add	r1, sp, #20
   159de:	3002      	adds	r0, #2
   159e0:	f008 fbe8 	bl	1e1b4 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   159e4:	2202      	movs	r2, #2
   159e6:	a907      	add	r1, sp, #28
   159e8:	4640      	mov	r0, r8
   159ea:	f008 fbe3 	bl	1e1b4 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   159ee:	4631      	mov	r1, r6
   159f0:	4620      	mov	r0, r4
   159f2:	4a14      	ldr	r2, [pc, #80]	; (15a44 <bt_smp_distribute_keys+0x124>)
   159f4:	f7ff fe18 	bl	15628 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   159f8:	210d      	movs	r1, #13
   159fa:	4638      	mov	r0, r7
   159fc:	f00a f864 	bl	1fac8 <atomic_test_bit>
   15a00:	2800      	cmp	r0, #0
   15a02:	d0ba      	beq.n	1597a <bt_smp_distribute_keys+0x5a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   15a04:	4628      	mov	r0, r5
   15a06:	2101      	movs	r1, #1
   15a08:	f00a fd31 	bl	2046e <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   15a0c:	a901      	add	r1, sp, #4
   15a0e:	2210      	movs	r2, #16
   15a10:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   15a14:	f008 fbce 	bl	1e1b4 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   15a18:	a905      	add	r1, sp, #20
   15a1a:	2208      	movs	r2, #8
   15a1c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   15a20:	f008 fbc8 	bl	1e1b4 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   15a24:	2202      	movs	r2, #2
   15a26:	a907      	add	r1, sp, #28
   15a28:	f105 0048 	add.w	r0, r5, #72	; 0x48
   15a2c:	f008 fbc2 	bl	1e1b4 <memcpy>
   15a30:	e7a3      	b.n	1597a <bt_smp_distribute_keys+0x5a>
   15a32:	bf00      	nop
   15a34:	00025541 	.word	0x00025541
   15a38:	0002555b 	.word	0x0002555b
   15a3c:	0002557b 	.word	0x0002557b
   15a40:	000255a7 	.word	0x000255a7
   15a44:	0001679d 	.word	0x0001679d

00015a48 <smp_send_pairing_req>:
{
   15a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15a4c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   15a4e:	f7ff fc9f 	bl	15390 <smp_chan_get>
	if (!smp) {
   15a52:	4605      	mov	r5, r0
   15a54:	2800      	cmp	r0, #0
   15a56:	d06f      	beq.n	15b38 <smp_send_pairing_req+0xf0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   15a58:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   15a5c:	2104      	movs	r1, #4
   15a5e:	4640      	mov	r0, r8
   15a60:	f00a f832 	bl	1fac8 <atomic_test_bit>
   15a64:	2800      	cmp	r0, #0
   15a66:	d16a      	bne.n	15b3e <smp_send_pairing_req+0xf6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15a68:	2103      	movs	r1, #3
   15a6a:	4640      	mov	r0, r8
   15a6c:	f00a f82c 	bl	1fac8 <atomic_test_bit>
   15a70:	b120      	cbz	r0, 15a7c <smp_send_pairing_req+0x34>
		return -EBUSY;
   15a72:	f06f 040f 	mvn.w	r4, #15
}
   15a76:	4620      	mov	r0, r4
   15a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15a7c:	2101      	movs	r1, #1
   15a7e:	4640      	mov	r0, r8
   15a80:	f00a f822 	bl	1fac8 <atomic_test_bit>
   15a84:	2800      	cmp	r0, #0
   15a86:	d1f4      	bne.n	15a72 <smp_send_pairing_req+0x2a>
	if (!sec_level_reachable(conn)) {
   15a88:	7aa0      	ldrb	r0, [r4, #10]
   15a8a:	f7ff fde5 	bl	15658 <sec_level_reachable.isra.0>
   15a8e:	2800      	cmp	r0, #0
   15a90:	d058      	beq.n	15b44 <smp_send_pairing_req+0xfc>
	if (!conn->le.keys) {
   15a92:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   15a96:	b13b      	cbz	r3, 15aa8 <smp_send_pairing_req+0x60>
	if (smp_init(smp)) {
   15a98:	4628      	mov	r0, r5
   15a9a:	f7ff fe39 	bl	15710 <smp_init>
   15a9e:	4604      	mov	r4, r0
   15aa0:	b170      	cbz	r0, 15ac0 <smp_send_pairing_req+0x78>
		return -ENOBUFS;
   15aa2:	f06f 0436 	mvn.w	r4, #54	; 0x36
   15aa6:	e7e6      	b.n	15a76 <smp_send_pairing_req+0x2e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15aa8:	7a20      	ldrb	r0, [r4, #8]
   15aaa:	f104 0188 	add.w	r1, r4, #136	; 0x88
   15aae:	f001 fa4f 	bl	16f50 <bt_keys_get_addr>
   15ab2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   15ab6:	2800      	cmp	r0, #0
   15ab8:	d1ee      	bne.n	15a98 <smp_send_pairing_req+0x50>
			return -ENOMEM;
   15aba:	f06f 040b 	mvn.w	r4, #11
   15abe:	e7da      	b.n	15a76 <smp_send_pairing_req+0x2e>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   15ac0:	2101      	movs	r1, #1
   15ac2:	4628      	mov	r0, r5
   15ac4:	f00a f963 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   15ac8:	4607      	mov	r7, r0
   15aca:	2800      	cmp	r0, #0
   15acc:	d0e9      	beq.n	15aa2 <smp_send_pairing_req+0x5a>
   15ace:	2106      	movs	r1, #6
   15ad0:	3008      	adds	r0, #8
   15ad2:	f001 fe37 	bl	17744 <net_buf_simple_add>
   15ad6:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   15ad8:	2009      	movs	r0, #9
   15ada:	f7ff fcdd 	bl	15498 <get_auth.constprop.0>
   15ade:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
   15ae0:	f7ff fbc2 	bl	15268 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15ae4:	4b19      	ldr	r3, [pc, #100]	; (15b4c <smp_send_pairing_req+0x104>)
	req->resp_key_dist = RECV_KEYS;
   15ae6:	f04f 0903 	mov.w	r9, #3
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15aea:	781b      	ldrb	r3, [r3, #0]
	smp->local_dist = SEND_KEYS;
   15aec:	f240 3201 	movw	r2, #769	; 0x301
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15af0:	7073      	strb	r3, [r6, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   15af2:	2310      	movs	r3, #16
   15af4:	70f3      	strb	r3, [r6, #3]
	req->init_key_dist = SEND_KEYS;
   15af6:	2301      	movs	r3, #1
	req->io_capability = get_io_capa();
   15af8:	7030      	strb	r0, [r6, #0]
	req->init_key_dist = SEND_KEYS;
   15afa:	7133      	strb	r3, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
   15afc:	f886 9005 	strb.w	r9, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   15b00:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15b02:	f885 30c9 	strb.w	r3, [r5, #201]	; 0xc9
	smp->local_dist = SEND_KEYS;
   15b06:	f8a5 21a8 	strh.w	r2, [r5, #424]	; 0x1a8
	memcpy(smp->preq + 1, req, sizeof(*req));
   15b0a:	f105 00ca 	add.w	r0, r5, #202	; 0xca
   15b0e:	2206      	movs	r2, #6
   15b10:	f008 fb50 	bl	1e1b4 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   15b14:	4622      	mov	r2, r4
   15b16:	4639      	mov	r1, r7
   15b18:	4628      	mov	r0, r5
   15b1a:	f7ff fd85 	bl	15628 <smp_send.constprop.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   15b1e:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   15b22:	2102      	movs	r1, #2
   15b24:	f00a f911 	bl	1fd4a <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   15b28:	210b      	movs	r1, #11
   15b2a:	f00a f90e 	bl	1fd4a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   15b2e:	4649      	mov	r1, r9
   15b30:	4640      	mov	r0, r8
   15b32:	f00a f90a 	bl	1fd4a <atomic_set_bit>
	return 0;
   15b36:	e79e      	b.n	15a76 <smp_send_pairing_req+0x2e>
		return -ENOTCONN;
   15b38:	f06f 0438 	mvn.w	r4, #56	; 0x38
   15b3c:	e79b      	b.n	15a76 <smp_send_pairing_req+0x2e>
		return -EIO;
   15b3e:	f06f 0404 	mvn.w	r4, #4
   15b42:	e798      	b.n	15a76 <smp_send_pairing_req+0x2e>
		return -EINVAL;
   15b44:	f06f 0415 	mvn.w	r4, #21
   15b48:	e795      	b.n	15a76 <smp_send_pairing_req+0x2e>
   15b4a:	bf00      	nop
   15b4c:	2000b747 	.word	0x2000b747

00015b50 <smp_security_request>:
{
   15b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   15b52:	4606      	mov	r6, r0
   15b54:	f856 4bc4 	ldr.w	r4, [r6], #196
	struct bt_smp_security_request *req = (void *)buf->data;
   15b58:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15b5a:	4630      	mov	r0, r6
   15b5c:	2103      	movs	r1, #3
   15b5e:	f009 ffb3 	bl	1fac8 <atomic_test_bit>
   15b62:	b110      	cbz	r0, 15b6a <smp_security_request+0x1a>
	return 0;
   15b64:	2000      	movs	r0, #0
}
   15b66:	b003      	add	sp, #12
   15b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15b6a:	2101      	movs	r1, #1
   15b6c:	4630      	mov	r0, r6
   15b6e:	f009 ffab 	bl	1fac8 <atomic_test_bit>
   15b72:	2800      	cmp	r0, #0
   15b74:	d1f6      	bne.n	15b64 <smp_security_request+0x14>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   15b76:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   15b78:	4b2d      	ldr	r3, [pc, #180]	; (15c30 <smp_security_request+0xe0>)
   15b7a:	781b      	ldrb	r3, [r3, #0]
   15b7c:	b17b      	cbz	r3, 15b9e <smp_security_request+0x4e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   15b7e:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   15b82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   15b86:	b16b      	cbz	r3, 15ba4 <smp_security_request+0x54>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   15b88:	89db      	ldrh	r3, [r3, #14]
   15b8a:	f003 0324 	and.w	r3, r3, #36	; 0x24
   15b8e:	b9d3      	cbnz	r3, 15bc6 <smp_security_request+0x76>
	if (smp_send_pairing_req(conn) < 0) {
   15b90:	4620      	mov	r0, r4
   15b92:	f7ff ff59 	bl	15a48 <smp_send_pairing_req>
   15b96:	2800      	cmp	r0, #0
   15b98:	db42      	blt.n	15c20 <smp_security_request+0xd0>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   15b9a:	210f      	movs	r1, #15
   15b9c:	e043      	b.n	15c26 <smp_security_request+0xd6>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   15b9e:	f005 0507 	and.w	r5, r5, #7
   15ba2:	e7ee      	b.n	15b82 <smp_security_request+0x32>
					     &conn->le.dst);
   15ba4:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   15ba8:	463a      	mov	r2, r7
   15baa:	2020      	movs	r0, #32
   15bac:	7a21      	ldrb	r1, [r4, #8]
   15bae:	f001 fa0f 	bl	16fd0 <bt_keys_find>
   15bb2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   15bb6:	b930      	cbnz	r0, 15bc6 <smp_security_request+0x76>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   15bb8:	463a      	mov	r2, r7
   15bba:	2004      	movs	r0, #4
   15bbc:	7a21      	ldrb	r1, [r4, #8]
   15bbe:	f001 fa07 	bl	16fd0 <bt_keys_find>
   15bc2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   15bc6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   15bca:	2900      	cmp	r1, #0
   15bcc:	d0e0      	beq.n	15b90 <smp_security_request+0x40>
	if ((auth & BT_SMP_AUTH_MITM) &&
   15bce:	076f      	lsls	r7, r5, #29
   15bd0:	d50f      	bpl.n	15bf2 <smp_security_request+0xa2>
   15bd2:	7b4b      	ldrb	r3, [r1, #13]
   15bd4:	07d8      	lsls	r0, r3, #31
   15bd6:	d40c      	bmi.n	15bf2 <smp_security_request+0xa2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   15bd8:	f7ff fb46 	bl	15268 <get_io_capa>
   15bdc:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
   15bde:	462a      	mov	r2, r5
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   15be0:	d002      	beq.n	15be8 <smp_security_request+0x98>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15be2:	2149      	movs	r1, #73	; 0x49
   15be4:	4813      	ldr	r0, [pc, #76]	; (15c34 <smp_security_request+0xe4>)
   15be6:	e001      	b.n	15bec <smp_security_request+0x9c>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   15be8:	2157      	movs	r1, #87	; 0x57
   15bea:	4813      	ldr	r0, [pc, #76]	; (15c38 <smp_security_request+0xe8>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15bec:	f006 fe2a 	bl	1c844 <printk>
		goto pair;
   15bf0:	e7ce      	b.n	15b90 <smp_security_request+0x40>
	if ((auth & BT_SMP_AUTH_SC) &&
   15bf2:	072a      	lsls	r2, r5, #28
   15bf4:	d504      	bpl.n	15c00 <smp_security_request+0xb0>
   15bf6:	89cb      	ldrh	r3, [r1, #14]
   15bf8:	069b      	lsls	r3, r3, #26
   15bfa:	d401      	bmi.n	15c00 <smp_security_request+0xb0>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   15bfc:	462a      	mov	r2, r5
   15bfe:	e7f0      	b.n	15be2 <smp_security_request+0x92>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   15c00:	7b0b      	ldrb	r3, [r1, #12]
   15c02:	f101 0218 	add.w	r2, r1, #24
   15c06:	9300      	str	r3, [sp, #0]
   15c08:	4620      	mov	r0, r4
   15c0a:	f101 031a 	add.w	r3, r1, #26
   15c0e:	3110      	adds	r1, #16
   15c10:	f008 fe2f 	bl	1e872 <bt_conn_le_start_encryption>
   15c14:	2800      	cmp	r0, #0
   15c16:	da05      	bge.n	15c24 <smp_security_request+0xd4>
		BT_ERR("Failed to start encryption");
   15c18:	2145      	movs	r1, #69	; 0x45
   15c1a:	4808      	ldr	r0, [pc, #32]	; (15c3c <smp_security_request+0xec>)
   15c1c:	f006 fe12 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15c20:	2008      	movs	r0, #8
   15c22:	e7a0      	b.n	15b66 <smp_security_request+0x16>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   15c24:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   15c26:	4630      	mov	r0, r6
   15c28:	f00a f88f 	bl	1fd4a <atomic_set_bit>
   15c2c:	e79a      	b.n	15b64 <smp_security_request+0x14>
   15c2e:	bf00      	nop
   15c30:	2000b748 	.word	0x2000b748
   15c34:	000255d3 	.word	0x000255d3
   15c38:	000255ff 	.word	0x000255ff
   15c3c:	00025633 	.word	0x00025633

00015c40 <smp_send_pairing_confirm>:
{
   15c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   15c42:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
{
   15c46:	4605      	mov	r5, r0
	switch (smp->method) {
   15c48:	2c02      	cmp	r4, #2
   15c4a:	d823      	bhi.n	15c94 <smp_send_pairing_confirm+0x54>
   15c4c:	b144      	cbz	r4, 15c60 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   15c4e:	f890 219c 	ldrb.w	r2, [r0, #412]	; 0x19c
   15c52:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
   15c56:	40d4      	lsrs	r4, r2
   15c58:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   15c5c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   15c60:	2103      	movs	r1, #3
   15c62:	4628      	mov	r0, r5
   15c64:	f00a f893 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!buf) {
   15c68:	4606      	mov	r6, r0
   15c6a:	b1d0      	cbz	r0, 15ca2 <smp_send_pairing_confirm+0x62>
   15c6c:	2110      	movs	r1, #16
   15c6e:	3008      	adds	r0, #8
   15c70:	f001 fd68 	bl	17744 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   15c74:	9000      	str	r0, [sp, #0]
   15c76:	4813      	ldr	r0, [pc, #76]	; (15cc4 <smp_send_pairing_confirm+0x84>)
   15c78:	4623      	mov	r3, r4
   15c7a:	6800      	ldr	r0, [r0, #0]
   15c7c:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
   15c80:	f205 1117 	addw	r1, r5, #279	; 0x117
   15c84:	f00a f83c 	bl	1fd00 <smp_f4>
   15c88:	4604      	mov	r4, r0
   15c8a:	b170      	cbz	r0, 15caa <smp_send_pairing_confirm+0x6a>
		net_buf_unref(buf);
   15c8c:	4630      	mov	r0, r6
   15c8e:	f001 fc43 	bl	17518 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   15c92:	e006      	b.n	15ca2 <smp_send_pairing_confirm+0x62>
	switch (smp->method) {
   15c94:	2c03      	cmp	r4, #3
   15c96:	d006      	beq.n	15ca6 <smp_send_pairing_confirm+0x66>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15c98:	4622      	mov	r2, r4
   15c9a:	2145      	movs	r1, #69	; 0x45
   15c9c:	480a      	ldr	r0, [pc, #40]	; (15cc8 <smp_send_pairing_confirm+0x88>)
   15c9e:	f006 fdd1 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15ca2:	2008      	movs	r0, #8
   15ca4:	e00c      	b.n	15cc0 <smp_send_pairing_confirm+0x80>
	switch (smp->method) {
   15ca6:	2400      	movs	r4, #0
   15ca8:	e7da      	b.n	15c60 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   15caa:	4602      	mov	r2, r0
   15cac:	4631      	mov	r1, r6
   15cae:	4628      	mov	r0, r5
   15cb0:	f7ff fcba 	bl	15628 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   15cb4:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   15cb8:	4621      	mov	r1, r4
   15cba:	f009 ff58 	bl	1fb6e <atomic_clear_bit>
	return 0;
   15cbe:	4620      	mov	r0, r4
}
   15cc0:	b002      	add	sp, #8
   15cc2:	bd70      	pop	{r4, r5, r6, pc}
   15cc4:	20009d3c 	.word	0x20009d3c
   15cc8:	00025493 	.word	0x00025493

00015ccc <smp_pairing_req>:
{
   15ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   15cd0:	688f      	ldr	r7, [r1, #8]
{
   15cd2:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   15cd4:	78fb      	ldrb	r3, [r7, #3]
   15cd6:	3b07      	subs	r3, #7
   15cd8:	2b09      	cmp	r3, #9
   15cda:	f200 80d7 	bhi.w	15e8c <smp_pairing_req+0x1c0>
	struct bt_conn *conn = smp->chan.chan.conn;
   15cde:	f8d0 8000 	ldr.w	r8, [r0]
	if (!conn->le.keys) {
   15ce2:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   15ce6:	b173      	cbz	r3, 15d06 <smp_pairing_req+0x3a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   15ce8:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   15cec:	210f      	movs	r1, #15
   15cee:	4630      	mov	r0, r6
   15cf0:	f009 feea 	bl	1fac8 <atomic_test_bit>
   15cf4:	b998      	cbnz	r0, 15d1e <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   15cf6:	4620      	mov	r0, r4
   15cf8:	f7ff fd0a 	bl	15710 <smp_init>
		if (ret) {
   15cfc:	b178      	cbz	r0, 15d1e <smp_pairing_req+0x52>
			return ret;
   15cfe:	b2c5      	uxtb	r5, r0
}
   15d00:	4628      	mov	r0, r5
   15d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   15d06:	f898 0008 	ldrb.w	r0, [r8, #8]
   15d0a:	f108 0188 	add.w	r1, r8, #136	; 0x88
   15d0e:	f001 f91f 	bl	16f50 <bt_keys_get_addr>
   15d12:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   15d16:	2800      	cmp	r0, #0
   15d18:	d1e6      	bne.n	15ce8 <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
   15d1a:	2508      	movs	r5, #8
   15d1c:	e7f0      	b.n	15d00 <smp_pairing_req+0x34>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15d1e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   15d20:	2206      	movs	r2, #6
   15d22:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   15d24:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	memcpy(smp->preq + 1, req, sizeof(*req));
   15d28:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   15d2c:	f008 fa42 	bl	1e1b4 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   15d30:	2302      	movs	r3, #2
   15d32:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
   15d36:	78b8      	ldrb	r0, [r7, #2]
   15d38:	f7ff fbae 	bl	15498 <get_auth.constprop.0>
   15d3c:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
   15d40:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
   15d42:	f7ff fa91 	bl	15268 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15d46:	4b53      	ldr	r3, [pc, #332]	; (15e94 <smp_pairing_req+0x1c8>)
	rsp->io_capability = get_io_capa();
   15d48:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   15d4c:	781b      	ldrb	r3, [r3, #0]
   15d4e:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   15d52:	2310      	movs	r3, #16
   15d54:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   15d58:	793b      	ldrb	r3, [r7, #4]
   15d5a:	f003 0303 	and.w	r3, r3, #3
   15d5e:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   15d62:	797b      	ldrb	r3, [r7, #5]
   15d64:	f003 0301 	and.w	r3, r3, #1
   15d68:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   15d6c:	072b      	lsls	r3, r5, #28
   15d6e:	d50f      	bpl.n	15d90 <smp_pairing_req+0xc4>
   15d70:	78bb      	ldrb	r3, [r7, #2]
   15d72:	071d      	lsls	r5, r3, #28
   15d74:	d50c      	bpl.n	15d90 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   15d76:	2105      	movs	r1, #5
   15d78:	4630      	mov	r0, r6
   15d7a:	f009 ffe6 	bl	1fd4a <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   15d7e:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   15d82:	f003 0302 	and.w	r3, r3, #2
   15d86:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
   15d8a:	2300      	movs	r3, #0
   15d8c:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   15d90:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   15d94:	0698      	lsls	r0, r3, #26
   15d96:	d506      	bpl.n	15da6 <smp_pairing_req+0xda>
   15d98:	78bb      	ldrb	r3, [r7, #2]
   15d9a:	0699      	lsls	r1, r3, #26
   15d9c:	d503      	bpl.n	15da6 <smp_pairing_req+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   15d9e:	2114      	movs	r1, #20
   15da0:	4630      	mov	r0, r6
   15da2:	f009 ffd2 	bl	1fd4a <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   15da6:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   15daa:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
   15dae:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   15db2:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   15db6:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   15dba:	07da      	lsls	r2, r3, #31
   15dbc:	d506      	bpl.n	15dcc <smp_pairing_req+0x100>
   15dbe:	78bb      	ldrb	r3, [r7, #2]
   15dc0:	07db      	lsls	r3, r3, #31
   15dc2:	d503      	bpl.n	15dcc <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   15dc4:	210d      	movs	r1, #13
   15dc6:	4630      	mov	r0, r6
   15dc8:	f009 ffbf 	bl	1fd4a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   15dcc:	2103      	movs	r1, #3
   15dce:	4630      	mov	r0, r6
   15dd0:	f009 ffbb 	bl	1fd4a <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
   15dd4:	7839      	ldrb	r1, [r7, #0]
   15dd6:	4620      	mov	r0, r4
   15dd8:	f7ff fb0e 	bl	153f8 <get_pair_method>
   15ddc:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
   15de0:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   15de4:	4620      	mov	r0, r4
   15de6:	f009 fe75 	bl	1fad4 <update_keys_check>
   15dea:	2800      	cmp	r0, #0
   15dec:	d050      	beq.n	15e90 <smp_pairing_req+0x1c4>
	err = remote_sec_level_reachable(smp);
   15dee:	4620      	mov	r0, r4
   15df0:	f009 fe95 	bl	1fb1e <remote_sec_level_reachable>
	if (err) {
   15df4:	4605      	mov	r5, r0
   15df6:	2800      	cmp	r0, #0
   15df8:	d182      	bne.n	15d00 <smp_pairing_req+0x34>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15dfa:	2105      	movs	r1, #5
   15dfc:	4630      	mov	r0, r6
   15dfe:	f009 fe63 	bl	1fac8 <atomic_test_bit>
   15e02:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
   15e06:	bb20      	cbnz	r0, 15e52 <smp_pairing_req+0x186>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15e08:	b995      	cbnz	r5, 15e30 <smp_pairing_req+0x164>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15e0a:	210f      	movs	r1, #15
   15e0c:	4630      	mov	r0, r6
   15e0e:	f009 fe5b 	bl	1fac8 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15e12:	b968      	cbnz	r0, 15e30 <smp_pairing_req+0x164>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15e14:	4f20      	ldr	r7, [pc, #128]	; (15e98 <smp_pairing_req+0x1cc>)
   15e16:	683b      	ldr	r3, [r7, #0]
   15e18:	b153      	cbz	r3, 15e30 <smp_pairing_req+0x164>
	    bt_auth && bt_auth->pairing_confirm) {
   15e1a:	695b      	ldr	r3, [r3, #20]
   15e1c:	b143      	cbz	r3, 15e30 <smp_pairing_req+0x164>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15e1e:	4630      	mov	r0, r6
   15e20:	210a      	movs	r1, #10
   15e22:	f009 ff92 	bl	1fd4a <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   15e26:	683b      	ldr	r3, [r7, #0]
   15e28:	6820      	ldr	r0, [r4, #0]
   15e2a:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   15e2c:	4798      	blx	r3
		return 0;
   15e2e:	e767      	b.n	15d00 <smp_pairing_req+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   15e30:	2103      	movs	r1, #3
   15e32:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15e36:	f009 ff88 	bl	1fd4a <atomic_set_bit>
	ret = send_pairing_rsp(smp);
   15e3a:	4620      	mov	r0, r4
   15e3c:	f009 ffc7 	bl	1fdce <send_pairing_rsp>
	if (ret) {
   15e40:	4605      	mov	r5, r0
   15e42:	2800      	cmp	r0, #0
   15e44:	f47f af5c 	bne.w	15d00 <smp_pairing_req+0x34>
	return legacy_request_tk(smp);
   15e48:	4620      	mov	r0, r4
}
   15e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return legacy_request_tk(smp);
   15e4e:	f7ff bc99 	b.w	15784 <legacy_request_tk>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15e52:	b98d      	cbnz	r5, 15e78 <smp_pairing_req+0x1ac>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15e54:	210f      	movs	r1, #15
   15e56:	4630      	mov	r0, r6
   15e58:	f009 fe36 	bl	1fac8 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   15e5c:	b960      	cbnz	r0, 15e78 <smp_pairing_req+0x1ac>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   15e5e:	4f0e      	ldr	r7, [pc, #56]	; (15e98 <smp_pairing_req+0x1cc>)
   15e60:	683b      	ldr	r3, [r7, #0]
   15e62:	b14b      	cbz	r3, 15e78 <smp_pairing_req+0x1ac>
	    bt_auth && bt_auth->pairing_confirm) {
   15e64:	695b      	ldr	r3, [r3, #20]
   15e66:	b13b      	cbz	r3, 15e78 <smp_pairing_req+0x1ac>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15e68:	4630      	mov	r0, r6
   15e6a:	210a      	movs	r1, #10
   15e6c:	f009 ff6d 	bl	1fd4a <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   15e70:	683b      	ldr	r3, [r7, #0]
   15e72:	4640      	mov	r0, r8
   15e74:	695b      	ldr	r3, [r3, #20]
   15e76:	e7d9      	b.n	15e2c <smp_pairing_req+0x160>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   15e78:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15e7c:	210c      	movs	r1, #12
   15e7e:	f009 ff64 	bl	1fd4a <atomic_set_bit>
	return send_pairing_rsp(smp);
   15e82:	4620      	mov	r0, r4
}
   15e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   15e88:	f009 bfa1 	b.w	1fdce <send_pairing_rsp>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   15e8c:	2506      	movs	r5, #6
   15e8e:	e737      	b.n	15d00 <smp_pairing_req+0x34>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   15e90:	2503      	movs	r5, #3
   15e92:	e735      	b.n	15d00 <smp_pairing_req+0x34>
   15e94:	2000b747 	.word	0x2000b747
   15e98:	20009c18 	.word	0x20009c18

00015e9c <sc_send_public_key>:
{
   15e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   15e9e:	210c      	movs	r1, #12
{
   15ea0:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   15ea2:	f009 ff74 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   15ea6:	4604      	mov	r4, r0
   15ea8:	b1b0      	cbz	r0, 15ed8 <sc_send_public_key+0x3c>
   15eaa:	2140      	movs	r1, #64	; 0x40
   15eac:	3008      	adds	r0, #8
   15eae:	f001 fc49 	bl	17744 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   15eb2:	4f0a      	ldr	r7, [pc, #40]	; (15edc <sc_send_public_key+0x40>)
   15eb4:	2220      	movs	r2, #32
   15eb6:	6839      	ldr	r1, [r7, #0]
   15eb8:	4606      	mov	r6, r0
   15eba:	f008 f97b 	bl	1e1b4 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   15ebe:	2220      	movs	r2, #32
   15ec0:	6839      	ldr	r1, [r7, #0]
   15ec2:	18b0      	adds	r0, r6, r2
   15ec4:	4411      	add	r1, r2
   15ec6:	f008 f975 	bl	1e1b4 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   15eca:	4628      	mov	r0, r5
   15ecc:	2200      	movs	r2, #0
   15ece:	4621      	mov	r1, r4
   15ed0:	f7ff fbaa 	bl	15628 <smp_send.constprop.0>
	return 0;
   15ed4:	2000      	movs	r0, #0
}
   15ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   15ed8:	2008      	movs	r0, #8
   15eda:	e7fc      	b.n	15ed6 <sc_send_public_key+0x3a>
   15edc:	20009d3c 	.word	0x20009d3c

00015ee0 <smp_public_key_slave>:
{
   15ee0:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   15ee2:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
   15ee6:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   15ee8:	210e      	movs	r1, #14
   15eea:	4628      	mov	r0, r5
   15eec:	f009 fdec 	bl	1fac8 <atomic_test_bit>
   15ef0:	b968      	cbnz	r0, 15f0e <smp_public_key_slave+0x2e>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
   15ef2:	4b25      	ldr	r3, [pc, #148]	; (15f88 <smp_public_key_slave+0xa8>)
   15ef4:	2240      	movs	r2, #64	; 0x40
   15ef6:	6819      	ldr	r1, [r3, #0]
   15ef8:	f204 1017 	addw	r0, r4, #279	; 0x117
   15efc:	f008 f949 	bl	1e192 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   15f00:	b928      	cbnz	r0, 15f0e <smp_public_key_slave+0x2e>
		BT_WARN("Remote is using identical public key");
   15f02:	2157      	movs	r1, #87	; 0x57
   15f04:	4821      	ldr	r0, [pc, #132]	; (15f8c <smp_public_key_slave+0xac>)
   15f06:	f006 fc9d 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   15f0a:	2008      	movs	r0, #8
   15f0c:	e015      	b.n	15f3a <smp_public_key_slave+0x5a>
	err = sc_send_public_key(smp);
   15f0e:	4620      	mov	r0, r4
   15f10:	f7ff ffc4 	bl	15e9c <sc_send_public_key>
	if (err) {
   15f14:	b988      	cbnz	r0, 15f3a <smp_public_key_slave+0x5a>
	switch (smp->method) {
   15f16:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   15f1a:	2a05      	cmp	r2, #5
   15f1c:	d82e      	bhi.n	15f7c <smp_public_key_slave+0x9c>
   15f1e:	e8df f002 	tbb	[pc, r2]
   15f22:	1803      	.short	0x1803
   15f24:	2b2d030d 	.word	0x2b2d030d
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   15f28:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15f2c:	2104      	movs	r1, #4
   15f2e:	f009 ff0c 	bl	1fd4a <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   15f32:	4620      	mov	r0, r4
   15f34:	f7ff fe84 	bl	15c40 <smp_send_pairing_confirm>
		if (err) {
   15f38:	b1c8      	cbz	r0, 15f6e <smp_public_key_slave+0x8e>
}
   15f3a:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
   15f3c:	4620      	mov	r0, r4
   15f3e:	f7ff fbbb 	bl	156b8 <display_passkey>
		if (err) {
   15f42:	2800      	cmp	r0, #0
   15f44:	d1f9      	bne.n	15f3a <smp_public_key_slave+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   15f46:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   15f48:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15f4c:	f009 fefd 	bl	1fd4a <atomic_set_bit>
		break;
   15f50:	e00d      	b.n	15f6e <smp_public_key_slave+0x8e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   15f52:	2103      	movs	r1, #3
   15f54:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15f58:	f009 fef7 	bl	1fd4a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   15f5c:	4628      	mov	r0, r5
   15f5e:	210a      	movs	r1, #10
   15f60:	f009 fef3 	bl	1fd4a <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   15f64:	4b0a      	ldr	r3, [pc, #40]	; (15f90 <smp_public_key_slave+0xb0>)
   15f66:	6820      	ldr	r0, [r4, #0]
   15f68:	681b      	ldr	r3, [r3, #0]
   15f6a:	685b      	ldr	r3, [r3, #4]
   15f6c:	4798      	blx	r3
	return generate_dhkey(smp);
   15f6e:	4620      	mov	r0, r4
}
   15f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return generate_dhkey(smp);
   15f74:	f009 befa 	b.w	1fd6c <generate_dhkey>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   15f78:	2104      	movs	r1, #4
   15f7a:	e7e5      	b.n	15f48 <smp_public_key_slave+0x68>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   15f7c:	2145      	movs	r1, #69	; 0x45
   15f7e:	4805      	ldr	r0, [pc, #20]	; (15f94 <smp_public_key_slave+0xb4>)
   15f80:	f006 fc60 	bl	1c844 <printk>
   15f84:	e7c1      	b.n	15f0a <smp_public_key_slave+0x2a>
   15f86:	bf00      	nop
   15f88:	20009d3c 	.word	0x20009d3c
   15f8c:	00025653 	.word	0x00025653
   15f90:	20009c18 	.word	0x20009c18
   15f94:	00025493 	.word	0x00025493

00015f98 <smp_public_key>:
{
   15f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   15f9a:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   15f9c:	f200 1717 	addw	r7, r0, #279	; 0x117
{
   15fa0:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
   15fa2:	2220      	movs	r2, #32
   15fa4:	4629      	mov	r1, r5
   15fa6:	4638      	mov	r0, r7
   15fa8:	f008 f904 	bl	1e1b4 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   15fac:	2220      	movs	r2, #32
   15fae:	f204 1037 	addw	r0, r4, #311	; 0x137
   15fb2:	18a9      	adds	r1, r5, r2
   15fb4:	f008 f8fe 	bl	1e1b4 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
   15fb8:	2240      	movs	r2, #64	; 0x40
   15fba:	4638      	mov	r0, r7
   15fbc:	4956      	ldr	r1, [pc, #344]	; (16118 <smp_public_key+0x180>)
   15fbe:	f008 f8e8 	bl	1e192 <memcmp>
   15fc2:	b1c0      	cbz	r0, 15ff6 <smp_public_key+0x5e>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   15fc4:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15fc6:	78db      	ldrb	r3, [r3, #3]
   15fc8:	2b00      	cmp	r3, #0
   15fca:	f040 8092 	bne.w	160f2 <smp_public_key+0x15a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   15fce:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   15fd2:	210e      	movs	r1, #14
   15fd4:	4630      	mov	r0, r6
   15fd6:	f009 fd77 	bl	1fac8 <atomic_test_bit>
   15fda:	bb70      	cbnz	r0, 1603a <smp_public_key+0xa2>
		    memcmp(smp->pkey, sc_public_key, 64) == 0) {
   15fdc:	4b4f      	ldr	r3, [pc, #316]	; (1611c <smp_public_key+0x184>)
   15fde:	2240      	movs	r2, #64	; 0x40
   15fe0:	4638      	mov	r0, r7
   15fe2:	6819      	ldr	r1, [r3, #0]
   15fe4:	f008 f8d5 	bl	1e192 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   15fe8:	bb38      	cbnz	r0, 1603a <smp_public_key+0xa2>
			BT_WARN("Remote is using identical public key");
   15fea:	2157      	movs	r1, #87	; 0x57
   15fec:	484c      	ldr	r0, [pc, #304]	; (16120 <smp_public_key+0x188>)
   15fee:	f006 fc29 	bl	1c844 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   15ff2:	2008      	movs	r0, #8
   15ff4:	e086      	b.n	16104 <smp_public_key+0x16c>
		BT_INFO("Remote is using Debug Public key");
   15ff6:	2149      	movs	r1, #73	; 0x49
   15ff8:	484a      	ldr	r0, [pc, #296]	; (16124 <smp_public_key+0x18c>)
   15ffa:	f006 fc23 	bl	1c844 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   15ffe:	210e      	movs	r1, #14
   16000:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16004:	f009 fea1 	bl	1fd4a <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   16008:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
   1600a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1600e:	b933      	cbnz	r3, 1601e <smp_public_key+0x86>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   16010:	7a28      	ldrb	r0, [r5, #8]
   16012:	f105 0188 	add.w	r1, r5, #136	; 0x88
   16016:	f000 ff9b 	bl	16f50 <bt_keys_get_addr>
   1601a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1601e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   16022:	2b00      	cmp	r3, #0
   16024:	d0ce      	beq.n	15fc4 <smp_public_key+0x2c>
   16026:	89da      	ldrh	r2, [r3, #14]
   16028:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1602c:	2a00      	cmp	r2, #0
   1602e:	d0c9      	beq.n	15fc4 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   16030:	7b5b      	ldrb	r3, [r3, #13]
   16032:	079b      	lsls	r3, r3, #30
   16034:	d5c6      	bpl.n	15fc4 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   16036:	2003      	movs	r0, #3
   16038:	e064      	b.n	16104 <smp_public_key+0x16c>
		switch (smp->method) {
   1603a:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1603e:	2a05      	cmp	r2, #5
   16040:	d852      	bhi.n	160e8 <smp_public_key+0x150>
   16042:	e8df f002 	tbb	[pc, r2]
   16046:	2103      	.short	0x2103
   16048:	2f510309 	.word	0x2f510309
			atomic_set_bit(&smp->allowed_cmds,
   1604c:	2103      	movs	r1, #3
   1604e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
			atomic_set_bit(&smp->allowed_cmds,
   16052:	f009 fe7a 	bl	1fd4a <atomic_set_bit>
			break;
   16056:	e011      	b.n	1607c <smp_public_key+0xe4>
			err = display_passkey(smp);
   16058:	4620      	mov	r0, r4
   1605a:	f7ff fb2d 	bl	156b8 <display_passkey>
			if (err) {
   1605e:	2800      	cmp	r0, #0
   16060:	d150      	bne.n	16104 <smp_public_key+0x16c>
			atomic_set_bit(&smp->allowed_cmds,
   16062:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16066:	2103      	movs	r1, #3
   16068:	f009 fe6f 	bl	1fd4a <atomic_set_bit>
			atomic_set_bit(&smp->allowed_cmds,
   1606c:	210e      	movs	r1, #14
   1606e:	f009 fe6c 	bl	1fd4a <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   16072:	4620      	mov	r0, r4
   16074:	f7ff fde4 	bl	15c40 <smp_send_pairing_confirm>
			if (err) {
   16078:	2800      	cmp	r0, #0
   1607a:	d143      	bne.n	16104 <smp_public_key+0x16c>
		return generate_dhkey(smp);
   1607c:	4620      	mov	r0, r4
}
   1607e:	b003      	add	sp, #12
   16080:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
   16084:	f009 be72 	b.w	1fd6c <generate_dhkey>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   16088:	4625      	mov	r5, r4
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1608a:	210a      	movs	r1, #10
   1608c:	4630      	mov	r0, r6
   1608e:	f009 fe5c 	bl	1fd4a <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   16092:	4b25      	ldr	r3, [pc, #148]	; (16128 <smp_public_key+0x190>)
   16094:	f855 0bc0 	ldr.w	r0, [r5], #192
   16098:	681b      	ldr	r3, [r3, #0]
   1609a:	685b      	ldr	r3, [r3, #4]
   1609c:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
   1609e:	210e      	movs	r1, #14
   160a0:	4628      	mov	r0, r5
   160a2:	e7d6      	b.n	16052 <smp_public_key+0xba>
			if (bt_rand(smp->prnd, 16)) {
   160a4:	2110      	movs	r1, #16
   160a6:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   160aa:	f7fa fed3 	bl	10e54 <bt_rand>
   160ae:	4605      	mov	r5, r0
   160b0:	2800      	cmp	r0, #0
   160b2:	d19e      	bne.n	15ff2 <smp_public_key+0x5a>
			if (bt_auth && bt_auth->oob_data_request) {
   160b4:	4f1c      	ldr	r7, [pc, #112]	; (16128 <smp_public_key+0x190>)
   160b6:	683b      	ldr	r3, [r7, #0]
   160b8:	b363      	cbz	r3, 16114 <smp_public_key+0x17c>
   160ba:	68db      	ldr	r3, [r3, #12]
   160bc:	b353      	cbz	r3, 16114 <smp_public_key+0x17c>
				struct bt_conn_oob_info info = {
   160be:	4b1b      	ldr	r3, [pc, #108]	; (1612c <smp_public_key+0x194>)
				le_sc_oob_config_set(smp, &info);
   160c0:	4620      	mov	r0, r4
				struct bt_conn_oob_info info = {
   160c2:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
				le_sc_oob_config_set(smp, &info);
   160c6:	a901      	add	r1, sp, #4
				struct bt_conn_oob_info info = {
   160c8:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   160cc:	f009 fcdb 	bl	1fa86 <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
   160d0:	4630      	mov	r0, r6
   160d2:	210c      	movs	r1, #12
				smp->oobd_remote = NULL;
   160d4:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
				atomic_set_bit(smp->flags,
   160d8:	f009 fe37 	bl	1fd4a <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   160dc:	683b      	ldr	r3, [r7, #0]
   160de:	6820      	ldr	r0, [r4, #0]
   160e0:	68db      	ldr	r3, [r3, #12]
   160e2:	a901      	add	r1, sp, #4
   160e4:	4798      	blx	r3
			break;
   160e6:	e7c9      	b.n	1607c <smp_public_key+0xe4>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   160e8:	2145      	movs	r1, #69	; 0x45
   160ea:	4811      	ldr	r0, [pc, #68]	; (16130 <smp_public_key+0x198>)
   160ec:	f006 fbaa 	bl	1c844 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   160f0:	e77f      	b.n	15ff2 <smp_public_key+0x5a>
	if (!sc_public_key) {
   160f2:	4b0a      	ldr	r3, [pc, #40]	; (1611c <smp_public_key+0x184>)
   160f4:	681d      	ldr	r5, [r3, #0]
   160f6:	b93d      	cbnz	r5, 16108 <smp_public_key+0x170>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   160f8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   160fc:	2106      	movs	r1, #6
   160fe:	f009 fe24 	bl	1fd4a <atomic_set_bit>
		return 0;
   16102:	4628      	mov	r0, r5
}
   16104:	b003      	add	sp, #12
   16106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = smp_public_key_slave(smp);
   16108:	4620      	mov	r0, r4
}
   1610a:	b003      	add	sp, #12
   1610c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_slave(smp);
   16110:	f7ff bee6 	b.w	15ee0 <smp_public_key_slave>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   16114:	2002      	movs	r0, #2
   16116:	e7f5      	b.n	16104 <smp_public_key+0x16c>
   16118:	000258d0 	.word	0x000258d0
   1611c:	20009d3c 	.word	0x20009d3c
   16120:	00025653 	.word	0x00025653
   16124:	0002567d 	.word	0x0002567d
   16128:	20009c18 	.word	0x20009c18
   1612c:	00021ab1 	.word	0x00021ab1
   16130:	00025493 	.word	0x00025493

00016134 <compute_and_send_master_dhcheck>:
{
   16134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16138:	4604      	mov	r4, r0
   1613a:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   1613c:	2210      	movs	r2, #16
   1613e:	2100      	movs	r1, #0
   16140:	a808      	add	r0, sp, #32
   16142:	f008 f862 	bl	1e20a <memset>
	switch (smp->method) {
   16146:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1614a:	2a05      	cmp	r2, #5
   1614c:	d82b      	bhi.n	161a6 <compute_and_send_master_dhcheck+0x72>
   1614e:	e8df f002 	tbb	[pc, r2]
   16152:	0309      	.short	0x0309
   16154:	242a0903 	.word	0x242a0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   16158:	2204      	movs	r2, #4
   1615a:	f504 71cc 	add.w	r1, r4, #408	; 0x198
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1615e:	a808      	add	r0, sp, #32
   16160:	f008 f828 	bl	1e1b4 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   16164:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
   16166:	f855 3bf7 	ldr.w	r3, [r5], #247
		   smp->tk)) {
   1616a:	f204 1207 	addw	r2, r4, #263	; 0x107
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1616e:	f204 1787 	addw	r7, r4, #391	; 0x187
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   16172:	e9cd 7201 	strd	r7, r2, [sp, #4]
   16176:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1617a:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1617e:	9200      	str	r2, [sp, #0]
   16180:	4641      	mov	r1, r8
   16182:	462a      	mov	r2, r5
   16184:	338f      	adds	r3, #143	; 0x8f
   16186:	f204 1057 	addw	r0, r4, #343	; 0x157
   1618a:	f7ff f9a3 	bl	154d4 <smp_f5>
   1618e:	b190      	cbz	r0, 161b6 <compute_and_send_master_dhcheck+0x82>
		BT_ERR("Calculate LTK failed");
   16190:	2145      	movs	r1, #69	; 0x45
   16192:	4818      	ldr	r0, [pc, #96]	; (161f4 <compute_and_send_master_dhcheck+0xc0>)
   16194:	f006 fb56 	bl	1c844 <printk>
   16198:	e009      	b.n	161ae <compute_and_send_master_dhcheck+0x7a>
		if (smp->oobd_remote) {
   1619a:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   1619e:	2900      	cmp	r1, #0
   161a0:	d0e0      	beq.n	16164 <compute_and_send_master_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   161a2:	2210      	movs	r2, #16
   161a4:	e7db      	b.n	1615e <compute_and_send_master_dhcheck+0x2a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   161a6:	2145      	movs	r1, #69	; 0x45
   161a8:	4813      	ldr	r0, [pc, #76]	; (161f8 <compute_and_send_master_dhcheck+0xc4>)
   161aa:	f006 fb4b 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   161ae:	2008      	movs	r0, #8
}
   161b0:	b00c      	add	sp, #48	; 0x30
   161b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   &smp->chan.chan.conn->le.init_addr,
   161b6:	4622      	mov	r2, r4
   161b8:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   161bc:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   161be:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   161c2:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   161c4:	e9cd 2300 	strd	r2, r3, [sp]
   161c8:	9102      	str	r1, [sp, #8]
   161ca:	462a      	mov	r2, r5
   161cc:	4641      	mov	r1, r8
   161ce:	4638      	mov	r0, r7
   161d0:	9603      	str	r6, [sp, #12]
   161d2:	ab08      	add	r3, sp, #32
   161d4:	f009 fd48 	bl	1fc68 <smp_f6>
   161d8:	b110      	cbz	r0, 161e0 <compute_and_send_master_dhcheck+0xac>
		BT_ERR("Calculate local DHKey check failed");
   161da:	2145      	movs	r1, #69	; 0x45
   161dc:	4807      	ldr	r0, [pc, #28]	; (161fc <compute_and_send_master_dhcheck+0xc8>)
   161de:	e7d9      	b.n	16194 <compute_and_send_master_dhcheck+0x60>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   161e0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   161e4:	210d      	movs	r1, #13
   161e6:	f009 fdb0 	bl	1fd4a <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   161ea:	4631      	mov	r1, r6
   161ec:	4620      	mov	r0, r4
   161ee:	f009 fe20 	bl	1fe32 <sc_smp_send_dhkey_check>
   161f2:	e7dd      	b.n	161b0 <compute_and_send_master_dhcheck+0x7c>
   161f4:	000256a3 	.word	0x000256a3
   161f8:	00025493 	.word	0x00025493
   161fc:	000256bd 	.word	0x000256bd

00016200 <compute_and_check_and_send_slave_dhcheck>:
{
   16200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16204:	4604      	mov	r4, r0
   16206:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   16208:	2210      	movs	r2, #16
   1620a:	2100      	movs	r1, #0
   1620c:	a80c      	add	r0, sp, #48	; 0x30
   1620e:	f007 fffc 	bl	1e20a <memset>
	switch (smp->method) {
   16212:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16216:	2a05      	cmp	r2, #5
   16218:	d82b      	bhi.n	16272 <compute_and_check_and_send_slave_dhcheck+0x72>
   1621a:	e8df f002 	tbb	[pc, r2]
   1621e:	0309      	.short	0x0309
   16220:	242a0903 	.word	0x242a0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   16224:	2204      	movs	r2, #4
   16226:	f504 71cc 	add.w	r1, r4, #408	; 0x198
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1622a:	a80c      	add	r0, sp, #48	; 0x30
   1622c:	f007 ffc2 	bl	1e1b4 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   16230:	4625      	mov	r5, r4
		   &smp->chan.chan.conn->le.init_addr,
   16232:	f855 3be7 	ldr.w	r3, [r5], #231
		   smp->tk)) {
   16236:	f204 1207 	addw	r2, r4, #263	; 0x107
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1623a:	f204 1687 	addw	r6, r4, #391	; 0x187
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1623e:	e9cd 6201 	strd	r6, r2, [sp, #4]
   16242:	f104 07f7 	add.w	r7, r4, #247	; 0xf7
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   16246:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1624a:	9200      	str	r2, [sp, #0]
   1624c:	4639      	mov	r1, r7
   1624e:	462a      	mov	r2, r5
   16250:	338f      	adds	r3, #143	; 0x8f
   16252:	f204 1057 	addw	r0, r4, #343	; 0x157
   16256:	f7ff f93d 	bl	154d4 <smp_f5>
   1625a:	b198      	cbz	r0, 16284 <compute_and_check_and_send_slave_dhcheck+0x84>
		BT_ERR("Calculate LTK failed");
   1625c:	2145      	movs	r1, #69	; 0x45
   1625e:	4832      	ldr	r0, [pc, #200]	; (16328 <compute_and_check_and_send_slave_dhcheck+0x128>)
		BT_ERR("Calculate remote DHKey check failed");
   16260:	f006 faf0 	bl	1c844 <printk>
   16264:	e009      	b.n	1627a <compute_and_check_and_send_slave_dhcheck+0x7a>
		if (smp->oobd_remote) {
   16266:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   1626a:	2900      	cmp	r1, #0
   1626c:	d0e0      	beq.n	16230 <compute_and_check_and_send_slave_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1626e:	2210      	movs	r2, #16
   16270:	e7db      	b.n	1622a <compute_and_check_and_send_slave_dhcheck+0x2a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   16272:	2145      	movs	r1, #69	; 0x45
   16274:	482d      	ldr	r0, [pc, #180]	; (1632c <compute_and_check_and_send_slave_dhcheck+0x12c>)
   16276:	f006 fae5 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1627a:	2508      	movs	r5, #8
}
   1627c:	4628      	mov	r0, r5
   1627e:	b011      	add	sp, #68	; 0x44
   16280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		   &smp->chan.chan.conn->le.resp_addr,
   16284:	4622      	mov	r2, r4
   16286:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1628a:	f10d 0820 	add.w	r8, sp, #32
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1628e:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   16292:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   16294:	e9cd 2300 	strd	r2, r3, [sp]
   16298:	9102      	str	r1, [sp, #8]
   1629a:	463a      	mov	r2, r7
   1629c:	4629      	mov	r1, r5
   1629e:	4630      	mov	r0, r6
   162a0:	f8cd 800c 	str.w	r8, [sp, #12]
   162a4:	ab0c      	add	r3, sp, #48	; 0x30
   162a6:	f009 fcdf 	bl	1fc68 <smp_f6>
   162aa:	b110      	cbz	r0, 162b2 <compute_and_check_and_send_slave_dhcheck+0xb2>
		BT_ERR("Calculate local DHKey check failed");
   162ac:	2145      	movs	r1, #69	; 0x45
   162ae:	4820      	ldr	r0, [pc, #128]	; (16330 <compute_and_check_and_send_slave_dhcheck+0x130>)
   162b0:	e7d6      	b.n	16260 <compute_and_check_and_send_slave_dhcheck+0x60>
	if (smp->method == LE_SC_OOB) {
   162b2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   162b6:	2b05      	cmp	r3, #5
   162b8:	d106      	bne.n	162c8 <compute_and_check_and_send_slave_dhcheck+0xc8>
		if (smp->oobd_local) {
   162ba:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   162be:	2210      	movs	r2, #16
   162c0:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   162c2:	b1c1      	cbz	r1, 162f6 <compute_and_check_and_send_slave_dhcheck+0xf6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   162c4:	f007 ff76 	bl	1e1b4 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   162c8:	4622      	mov	r2, r4
   162ca:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   162ce:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   162d2:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   162d6:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   162d8:	e9cd 2300 	strd	r2, r3, [sp]
   162dc:	9102      	str	r1, [sp, #8]
   162de:	462a      	mov	r2, r5
   162e0:	4639      	mov	r1, r7
   162e2:	4630      	mov	r0, r6
   162e4:	f8cd 900c 	str.w	r9, [sp, #12]
   162e8:	ab0c      	add	r3, sp, #48	; 0x30
   162ea:	f009 fcbd 	bl	1fc68 <smp_f6>
   162ee:	b128      	cbz	r0, 162fc <compute_and_check_and_send_slave_dhcheck+0xfc>
		BT_ERR("Calculate remote DHKey check failed");
   162f0:	2145      	movs	r1, #69	; 0x45
   162f2:	4810      	ldr	r0, [pc, #64]	; (16334 <compute_and_check_and_send_slave_dhcheck+0x134>)
   162f4:	e7b4      	b.n	16260 <compute_and_check_and_send_slave_dhcheck+0x60>
			memset(r, 0, sizeof(r));
   162f6:	f007 ff88 	bl	1e20a <memset>
   162fa:	e7e5      	b.n	162c8 <compute_and_check_and_send_slave_dhcheck+0xc8>
	if (memcmp(smp->e, re, 16)) {
   162fc:	2210      	movs	r2, #16
   162fe:	4649      	mov	r1, r9
   16300:	f204 1077 	addw	r0, r4, #375	; 0x177
   16304:	f007 ff45 	bl	1e192 <memcmp>
   16308:	b960      	cbnz	r0, 16324 <compute_and_check_and_send_slave_dhcheck+0x124>
	err = sc_smp_send_dhkey_check(smp, e);
   1630a:	4641      	mov	r1, r8
   1630c:	4620      	mov	r0, r4
   1630e:	f009 fd90 	bl	1fe32 <sc_smp_send_dhkey_check>
	if (err) {
   16312:	4605      	mov	r5, r0
   16314:	2800      	cmp	r0, #0
   16316:	d1b1      	bne.n	1627c <compute_and_check_and_send_slave_dhcheck+0x7c>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16318:	2101      	movs	r1, #1
   1631a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1631e:	f009 fd14 	bl	1fd4a <atomic_set_bit>
	return 0;
   16322:	e7ab      	b.n	1627c <compute_and_check_and_send_slave_dhcheck+0x7c>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   16324:	250b      	movs	r5, #11
   16326:	e7a9      	b.n	1627c <compute_and_check_and_send_slave_dhcheck+0x7c>
   16328:	000256a3 	.word	0x000256a3
   1632c:	00025493 	.word	0x00025493
   16330:	000256bd 	.word	0x000256bd
   16334:	000256e5 	.word	0x000256e5

00016338 <smp_dhkey_check>:
{
   16338:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1633a:	6803      	ldr	r3, [r0, #0]
{
   1633c:	4604      	mov	r4, r0
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1633e:	78dd      	ldrb	r5, [r3, #3]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   16340:	688f      	ldr	r7, [r1, #8]
{
   16342:	b091      	sub	sp, #68	; 0x44
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16344:	2d00      	cmp	r5, #0
   16346:	d165      	bne.n	16414 <smp_dhkey_check+0xdc>
		(void)memset(r, 0, sizeof(r));
   16348:	2210      	movs	r2, #16
   1634a:	4629      	mov	r1, r5
   1634c:	a80c      	add	r0, sp, #48	; 0x30
   1634e:	f007 ff5c 	bl	1e20a <memset>
		switch (smp->method) {
   16352:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16356:	2a05      	cmp	r2, #5
   16358:	d84c      	bhi.n	163f4 <smp_dhkey_check+0xbc>
   1635a:	e8df f002 	tbb	[pc, r2]
   1635e:	0309      	.short	0x0309
   16360:	454b0903 	.word	0x454b0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   16364:	2204      	movs	r2, #4
   16366:	f504 71cc 	add.w	r1, r4, #408	; 0x198
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1636a:	a80c      	add	r0, sp, #48	; 0x30
   1636c:	f007 ff22 	bl	1e1b4 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   16370:	4622      	mov	r2, r4
   16372:	f852 3be7 	ldr.w	r3, [r2], #231
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   16376:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.init_addr, e)) {
   16378:	f103 018f 	add.w	r1, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   1637c:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1637e:	9301      	str	r3, [sp, #4]
   16380:	f104 03d1 	add.w	r3, r4, #209	; 0xd1
   16384:	9102      	str	r1, [sp, #8]
   16386:	9300      	str	r3, [sp, #0]
   16388:	9603      	str	r6, [sp, #12]
   1638a:	ab0c      	add	r3, sp, #48	; 0x30
   1638c:	f104 01f7 	add.w	r1, r4, #247	; 0xf7
   16390:	f204 1087 	addw	r0, r4, #391	; 0x187
   16394:	f009 fc68 	bl	1fc68 <smp_f6>
   16398:	bb80      	cbnz	r0, 163fc <smp_dhkey_check+0xc4>
		if (memcmp(e, req->e, 16)) {
   1639a:	4630      	mov	r0, r6
   1639c:	2210      	movs	r2, #16
   1639e:	4639      	mov	r1, r7
   163a0:	f007 fef7 	bl	1e192 <memcmp>
   163a4:	4606      	mov	r6, r0
   163a6:	bb98      	cbnz	r0, 16410 <smp_dhkey_check+0xd8>
	return MIN(req->max_key_size, rsp->max_key_size);
   163a8:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   163ac:	f894 70d4 	ldrb.w	r7, [r4, #212]	; 0xd4
		(void)memset(ediv, 0, sizeof(ediv));
   163b0:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   163b2:	429f      	cmp	r7, r3
   163b4:	bf28      	it	cs
   163b6:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   163b8:	2202      	movs	r2, #2
   163ba:	a805      	add	r0, sp, #20
   163bc:	f007 ff25 	bl	1e20a <memset>
		(void)memset(rand, 0, sizeof(rand));
   163c0:	2208      	movs	r2, #8
   163c2:	4631      	mov	r1, r6
   163c4:	a806      	add	r0, sp, #24
   163c6:	f007 ff20 	bl	1e20a <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   163ca:	6820      	ldr	r0, [r4, #0]
   163cc:	9700      	str	r7, [sp, #0]
   163ce:	f204 1307 	addw	r3, r4, #263	; 0x107
   163d2:	aa05      	add	r2, sp, #20
   163d4:	a906      	add	r1, sp, #24
   163d6:	f008 fa4c 	bl	1e872 <bt_conn_le_start_encryption>
   163da:	2800      	cmp	r0, #0
   163dc:	da12      	bge.n	16404 <smp_dhkey_check+0xcc>
			BT_ERR("Failed to start encryption");
   163de:	2145      	movs	r1, #69	; 0x45
   163e0:	4820      	ldr	r0, [pc, #128]	; (16464 <smp_dhkey_check+0x12c>)
   163e2:	f006 fa2f 	bl	1c844 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   163e6:	e009      	b.n	163fc <smp_dhkey_check+0xc4>
			if (smp->oobd_local) {
   163e8:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   163ec:	2900      	cmp	r1, #0
   163ee:	d0bf      	beq.n	16370 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   163f0:	2210      	movs	r2, #16
   163f2:	e7ba      	b.n	1636a <smp_dhkey_check+0x32>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   163f4:	2145      	movs	r1, #69	; 0x45
   163f6:	481c      	ldr	r0, [pc, #112]	; (16468 <smp_dhkey_check+0x130>)
   163f8:	f006 fa24 	bl	1c844 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   163fc:	2508      	movs	r5, #8
}
   163fe:	4628      	mov	r0, r5
   16400:	b011      	add	sp, #68	; 0x44
   16402:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16404:	2101      	movs	r1, #1
   16406:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1640a:	f009 fc9e 	bl	1fd4a <atomic_set_bit>
			return 0;
   1640e:	e7f6      	b.n	163fe <smp_dhkey_check+0xc6>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   16410:	250b      	movs	r5, #11
   16412:	e7f4      	b.n	163fe <smp_dhkey_check+0xc6>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   16414:	2d01      	cmp	r5, #1
   16416:	d115      	bne.n	16444 <smp_dhkey_check+0x10c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16418:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   1641c:	2110      	movs	r1, #16
   1641e:	4630      	mov	r0, r6
   16420:	f009 fba5 	bl	1fb6e <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   16424:	4639      	mov	r1, r7
   16426:	2210      	movs	r2, #16
   16428:	f204 1077 	addw	r0, r4, #375	; 0x177
   1642c:	f007 fec2 	bl	1e1b4 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   16430:	2107      	movs	r1, #7
   16432:	4630      	mov	r0, r6
   16434:	f009 fb48 	bl	1fac8 <atomic_test_bit>
   16438:	4605      	mov	r5, r0
   1643a:	b128      	cbz	r0, 16448 <smp_dhkey_check+0x110>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1643c:	2109      	movs	r1, #9
   1643e:	4630      	mov	r0, r6
   16440:	f009 fc83 	bl	1fd4a <atomic_set_bit>
	return 0;
   16444:	2500      	movs	r5, #0
   16446:	e7da      	b.n	163fe <smp_dhkey_check+0xc6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   16448:	210a      	movs	r1, #10
   1644a:	4630      	mov	r0, r6
   1644c:	f009 fb3c 	bl	1fac8 <atomic_test_bit>
   16450:	b110      	cbz	r0, 16458 <smp_dhkey_check+0x120>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16452:	2109      	movs	r1, #9
   16454:	4630      	mov	r0, r6
   16456:	e7d8      	b.n	1640a <smp_dhkey_check+0xd2>
		return compute_and_check_and_send_slave_dhcheck(smp);
   16458:	4620      	mov	r0, r4
}
   1645a:	b011      	add	sp, #68	; 0x44
   1645c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   16460:	f7ff bece 	b.w	16200 <compute_and_check_and_send_slave_dhcheck>
   16464:	00025633 	.word	0x00025633
   16468:	00025493 	.word	0x00025493

0001646c <bt_smp_connected>:
{
   1646c:	b510      	push	{r4, lr}
   1646e:	4604      	mov	r4, r0
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16470:	2230      	movs	r2, #48	; 0x30
   16472:	2100      	movs	r1, #0
   16474:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   16478:	f007 fec7 	bl	1e20a <memset>
   1647c:	4b03      	ldr	r3, [pc, #12]	; (1648c <bt_smp_connected+0x20>)
	smp_reset(smp);
   1647e:	4620      	mov	r0, r4
   16480:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
   16484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   16488:	f009 bd00 	b.w	1fe8c <smp_reset>
   1648c:	000166c9 	.word	0x000166c9

00016490 <smp_pairing_complete>:
{
   16490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16494:	4604      	mov	r4, r0
	if (!status) {
   16496:	460d      	mov	r5, r1
   16498:	4f24      	ldr	r7, [pc, #144]	; (1652c <smp_pairing_complete+0x9c>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1649a:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
	if (!status) {
   1649e:	b9b1      	cbnz	r1, 164ce <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   164a0:	210d      	movs	r1, #13
   164a2:	4640      	mov	r0, r8
   164a4:	f009 fb10 	bl	1fac8 <atomic_test_bit>
		if (bond_flag) {
   164a8:	4605      	mov	r5, r0
   164aa:	b120      	cbz	r0, 164b6 <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
   164ac:	6823      	ldr	r3, [r4, #0]
   164ae:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   164b2:	f000 fe87 	bl	171c4 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   164b6:	683b      	ldr	r3, [r7, #0]
   164b8:	b123      	cbz	r3, 164c4 <smp_pairing_complete+0x34>
   164ba:	699b      	ldr	r3, [r3, #24]
   164bc:	b113      	cbz	r3, 164c4 <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
   164be:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   164c0:	6820      	ldr	r0, [r4, #0]
   164c2:	4798      	blx	r3
	smp_reset(smp);
   164c4:	4620      	mov	r0, r4
}
   164c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
   164ca:	f009 bcdf 	b.w	1fe8c <smp_reset>
	switch (smp_err) {
   164ce:	1e4b      	subs	r3, r1, #1
   164d0:	b2db      	uxtb	r3, r3
   164d2:	2b0d      	cmp	r3, #13
   164d4:	bf96      	itet	ls
   164d6:	4a16      	ldrls	r2, [pc, #88]	; (16530 <smp_pairing_complete+0xa0>)
	if (!status) {
   164d8:	2608      	movhi	r6, #8
   164da:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
   164dc:	6803      	ldr	r3, [r0, #0]
   164de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   164e2:	b153      	cbz	r3, 164fa <smp_pairing_complete+0x6a>
   164e4:	7b1b      	ldrb	r3, [r3, #12]
   164e6:	b9d3      	cbnz	r3, 1651e <smp_pairing_complete+0x8e>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
   164e8:	6823      	ldr	r3, [r4, #0]
   164ea:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   164ee:	f000 fdcd 	bl	1708c <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
   164f2:	2200      	movs	r2, #0
   164f4:	6823      	ldr	r3, [r4, #0]
   164f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   164fa:	2102      	movs	r1, #2
   164fc:	4640      	mov	r0, r8
   164fe:	f009 fae3 	bl	1fac8 <atomic_test_bit>
   16502:	b920      	cbnz	r0, 1650e <smp_pairing_complete+0x7e>
			bt_conn_security_changed(smp->chan.chan.conn, status,
   16504:	4632      	mov	r2, r6
   16506:	4629      	mov	r1, r5
   16508:	6820      	ldr	r0, [r4, #0]
   1650a:	f7fa fde9 	bl	110e0 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   1650e:	683b      	ldr	r3, [r7, #0]
   16510:	2b00      	cmp	r3, #0
   16512:	d0d7      	beq.n	164c4 <smp_pairing_complete+0x34>
   16514:	69db      	ldr	r3, [r3, #28]
   16516:	2b00      	cmp	r3, #0
   16518:	d0d4      	beq.n	164c4 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   1651a:	4631      	mov	r1, r6
   1651c:	e7d0      	b.n	164c0 <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1651e:	2102      	movs	r1, #2
   16520:	4640      	mov	r0, r8
   16522:	f009 fad1 	bl	1fac8 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
   16526:	2800      	cmp	r0, #0
   16528:	d1de      	bne.n	164e8 <smp_pairing_complete+0x58>
   1652a:	e7e6      	b.n	164fa <smp_pairing_complete+0x6a>
   1652c:	20009c18 	.word	0x20009c18
   16530:	00025880 	.word	0x00025880

00016534 <bt_smp_recv>:
{
   16534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   16536:	898b      	ldrh	r3, [r1, #12]
{
   16538:	4604      	mov	r4, r0
   1653a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1653c:	b92b      	cbnz	r3, 1654a <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1653e:	2145      	movs	r1, #69	; 0x45
   16540:	4827      	ldr	r0, [pc, #156]	; (165e0 <bt_smp_recv+0xac>)
   16542:	f006 f97f 	bl	1c844 <printk>
}
   16546:	2000      	movs	r0, #0
   16548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1654a:	2101      	movs	r1, #1
   1654c:	f105 0008 	add.w	r0, r5, #8
   16550:	f001 f8da 	bl	17708 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   16554:	2104      	movs	r1, #4
   16556:	4606      	mov	r6, r0
   16558:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1655c:	f009 fab4 	bl	1fac8 <atomic_test_bit>
   16560:	7832      	ldrb	r2, [r6, #0]
   16562:	b120      	cbz	r0, 1656e <bt_smp_recv+0x3a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   16564:	2157      	movs	r1, #87	; 0x57
   16566:	481f      	ldr	r0, [pc, #124]	; (165e4 <bt_smp_recv+0xb0>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   16568:	f006 f96c 	bl	1c844 <printk>
		return 0;
   1656c:	e7eb      	b.n	16546 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1656e:	2a0e      	cmp	r2, #14
   16570:	d902      	bls.n	16578 <bt_smp_recv+0x44>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   16572:	2157      	movs	r1, #87	; 0x57
   16574:	481c      	ldr	r0, [pc, #112]	; (165e8 <bt_smp_recv+0xb4>)
   16576:	e7f7      	b.n	16568 <bt_smp_recv+0x34>
	if (!handlers[hdr->code].func) {
   16578:	4f1c      	ldr	r7, [pc, #112]	; (165ec <bt_smp_recv+0xb8>)
   1657a:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1657e:	b943      	cbnz	r3, 16592 <bt_smp_recv+0x5e>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   16580:	2157      	movs	r1, #87	; 0x57
   16582:	481b      	ldr	r0, [pc, #108]	; (165f0 <bt_smp_recv+0xbc>)
   16584:	f006 f95e 	bl	1c844 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   16588:	2107      	movs	r1, #7
		smp_error(smp, err);
   1658a:	4620      	mov	r0, r4
   1658c:	f009 fca5 	bl	1feda <smp_error>
   16590:	e7d9      	b.n	16546 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
   16592:	4611      	mov	r1, r2
   16594:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16598:	f009 fc64 	bl	1fe64 <atomic_test_and_clear_bit>
   1659c:	7833      	ldrb	r3, [r6, #0]
   1659e:	b948      	cbnz	r0, 165b4 <bt_smp_recv+0x80>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   165a0:	461a      	mov	r2, r3
   165a2:	2157      	movs	r1, #87	; 0x57
   165a4:	4813      	ldr	r0, [pc, #76]	; (165f4 <bt_smp_recv+0xc0>)
   165a6:	f006 f94d 	bl	1c844 <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   165aa:	7833      	ldrb	r3, [r6, #0]
   165ac:	2b05      	cmp	r3, #5
   165ae:	d0ca      	beq.n	16546 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   165b0:	2108      	movs	r1, #8
   165b2:	e7ea      	b.n	1658a <bt_smp_recv+0x56>
	if (buf->len != handlers[hdr->code].expect_len) {
   165b4:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   165b8:	89aa      	ldrh	r2, [r5, #12]
   165ba:	7909      	ldrb	r1, [r1, #4]
   165bc:	4291      	cmp	r1, r2
   165be:	d005      	beq.n	165cc <bt_smp_recv+0x98>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   165c0:	2145      	movs	r1, #69	; 0x45
   165c2:	480d      	ldr	r0, [pc, #52]	; (165f8 <bt_smp_recv+0xc4>)
   165c4:	f006 f93e 	bl	1c844 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   165c8:	210a      	movs	r1, #10
   165ca:	e7de      	b.n	1658a <bt_smp_recv+0x56>
	err = handlers[hdr->code].func(smp, buf);
   165cc:	4629      	mov	r1, r5
   165ce:	4620      	mov	r0, r4
   165d0:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   165d4:	4798      	blx	r3
	if (err) {
   165d6:	4601      	mov	r1, r0
   165d8:	2800      	cmp	r0, #0
   165da:	d0b4      	beq.n	16546 <bt_smp_recv+0x12>
   165dc:	e7d5      	b.n	1658a <bt_smp_recv+0x56>
   165de:	bf00      	nop
   165e0:	0002570e 	.word	0x0002570e
   165e4:	0002572e 	.word	0x0002572e
   165e8:	00025764 	.word	0x00025764
   165ec:	00022258 	.word	0x00022258
   165f0:	0002578b 	.word	0x0002578b
   165f4:	000257aa 	.word	0x000257aa
   165f8:	00024ff3 	.word	0x00024ff3

000165fc <bt_smp_pkey_ready>:
{
   165fc:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   165fe:	4b19      	ldr	r3, [pc, #100]	; (16664 <bt_smp_pkey_ready+0x68>)
   16600:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   16602:	b928      	cbnz	r0, 16610 <bt_smp_pkey_ready+0x14>
}
   16604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Public key not available");
   16608:	2157      	movs	r1, #87	; 0x57
   1660a:	4817      	ldr	r0, [pc, #92]	; (16668 <bt_smp_pkey_ready+0x6c>)
   1660c:	f006 b91a 	b.w	1c844 <printk>
	z_impl_k_sem_give(sem);
   16610:	4816      	ldr	r0, [pc, #88]	; (1666c <bt_smp_pkey_ready+0x70>)
   16612:	f004 ff57 	bl	1b4c4 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   16616:	2500      	movs	r5, #0
   16618:	4c15      	ldr	r4, [pc, #84]	; (16670 <bt_smp_pkey_ready+0x74>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1661a:	2106      	movs	r1, #6
   1661c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16620:	f009 fa52 	bl	1fac8 <atomic_test_bit>
   16624:	b178      	cbz	r0, 16646 <bt_smp_pkey_ready+0x4a>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16626:	6823      	ldr	r3, [r4, #0]
			err = sc_send_public_key(smp);
   16628:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1662a:	78db      	ldrb	r3, [r3, #3]
   1662c:	b98b      	cbnz	r3, 16652 <bt_smp_pkey_ready+0x56>
			err = sc_send_public_key(smp);
   1662e:	f7ff fc35 	bl	15e9c <sc_send_public_key>
			if (err) {
   16632:	4601      	mov	r1, r0
   16634:	b110      	cbz	r0, 1663c <bt_smp_pkey_ready+0x40>
				smp_error(smp, err);
   16636:	4620      	mov	r0, r4
   16638:	f009 fc4f 	bl	1feda <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
   1663c:	210c      	movs	r1, #12
   1663e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16642:	f009 fb82 	bl	1fd4a <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   16646:	3501      	adds	r5, #1
   16648:	2d03      	cmp	r5, #3
   1664a:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
   1664e:	d1e4      	bne.n	1661a <bt_smp_pkey_ready+0x1e>
}
   16650:	bd38      	pop	{r3, r4, r5, pc}
		err = smp_public_key_slave(smp);
   16652:	f7ff fc45 	bl	15ee0 <smp_public_key_slave>
		if (err) {
   16656:	4601      	mov	r1, r0
   16658:	2800      	cmp	r0, #0
   1665a:	d0f4      	beq.n	16646 <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   1665c:	4620      	mov	r0, r4
   1665e:	f009 fc3c 	bl	1feda <smp_error>
   16662:	e7f0      	b.n	16646 <bt_smp_pkey_ready+0x4a>
   16664:	20009d3c 	.word	0x20009d3c
   16668:	000257ca 	.word	0x000257ca
   1666c:	20008560 	.word	0x20008560
   16670:	20008f40 	.word	0x20008f40

00016674 <smp_pairing_failed>:
{
   16674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   16676:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   16678:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1667a:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
   1667e:	2145      	movs	r1, #69	; 0x45
{
   16680:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   16682:	7832      	ldrb	r2, [r6, #0]
   16684:	480e      	ldr	r0, [pc, #56]	; (166c0 <smp_pairing_failed+0x4c>)
   16686:	f006 f8dd 	bl	1c844 <printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1668a:	210a      	movs	r1, #10
   1668c:	4628      	mov	r0, r5
   1668e:	f009 fbe9 	bl	1fe64 <atomic_test_and_clear_bit>
   16692:	b140      	cbz	r0, 166a6 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   16694:	4b0b      	ldr	r3, [pc, #44]	; (166c4 <smp_pairing_failed+0x50>)
   16696:	681b      	ldr	r3, [r3, #0]
   16698:	b963      	cbnz	r3, 166b4 <smp_pairing_failed+0x40>
	smp_pairing_complete(smp, req->reason);
   1669a:	4620      	mov	r0, r4
   1669c:	7831      	ldrb	r1, [r6, #0]
   1669e:	f7ff fef7 	bl	16490 <smp_pairing_complete>
}
   166a2:	2000      	movs	r0, #0
   166a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   166a6:	210b      	movs	r1, #11
   166a8:	4628      	mov	r0, r5
   166aa:	f009 fbdb 	bl	1fe64 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   166ae:	2800      	cmp	r0, #0
   166b0:	d1f0      	bne.n	16694 <smp_pairing_failed+0x20>
   166b2:	e7f2      	b.n	1669a <smp_pairing_failed+0x26>
		if (bt_auth && bt_auth->cancel) {
   166b4:	691b      	ldr	r3, [r3, #16]
   166b6:	2b00      	cmp	r3, #0
   166b8:	d0ef      	beq.n	1669a <smp_pairing_failed+0x26>
			bt_auth->cancel(conn);
   166ba:	4638      	mov	r0, r7
   166bc:	4798      	blx	r3
   166be:	e7ec      	b.n	1669a <smp_pairing_failed+0x26>
   166c0:	000257e8 	.word	0x000257e8
   166c4:	20009c18 	.word	0x20009c18

000166c8 <smp_timeout>:
{
   166c8:	b510      	push	{r4, lr}
   166ca:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   166cc:	2145      	movs	r1, #69	; 0x45
   166ce:	4807      	ldr	r0, [pc, #28]	; (166ec <smp_timeout+0x24>)
   166d0:	f006 f8b8 	bl	1c844 <printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   166d4:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
   166d8:	2108      	movs	r1, #8
   166da:	f7ff fed9 	bl	16490 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   166de:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   166e2:	2104      	movs	r1, #4
}
   166e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   166e8:	f009 bb2f 	b.w	1fd4a <atomic_set_bit>
   166ec:	000257f9 	.word	0x000257f9

000166f0 <smp_master_ident>:
{
   166f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   166f4:	460b      	mov	r3, r1
   166f6:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   166f8:	210d      	movs	r1, #13
	struct bt_conn *conn = smp->chan.chan.conn;
   166fa:	f850 6bc4 	ldr.w	r6, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   166fe:	f009 f9e3 	bl	1fac8 <atomic_test_bit>
   16702:	b328      	cbz	r0, 16750 <smp_master_ident+0x60>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   16704:	f106 0888 	add.w	r8, r6, #136	; 0x88
   16708:	4642      	mov	r2, r8
   1670a:	2004      	movs	r0, #4
   1670c:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1670e:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   16710:	f009 fe9d 	bl	2044e <bt_keys_get_type>
		if (!keys) {
   16714:	4605      	mov	r5, r0
   16716:	b950      	cbnz	r0, 1672e <smp_master_ident+0x3e>
			BT_ERR("Unable to get keys for %s",
   16718:	4640      	mov	r0, r8
   1671a:	f7f7 fd6f 	bl	e1fc <bt_addr_le_str_real>
   1671e:	2145      	movs	r1, #69	; 0x45
   16720:	4602      	mov	r2, r0
   16722:	481d      	ldr	r0, [pc, #116]	; (16798 <smp_master_ident+0xa8>)
   16724:	f006 f88e 	bl	1c844 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   16728:	2008      	movs	r0, #8
}
   1672a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1672e:	2202      	movs	r2, #2
   16730:	4639      	mov	r1, r7
   16732:	3018      	adds	r0, #24
   16734:	f007 fd3e 	bl	1e1b4 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   16738:	2208      	movs	r2, #8
   1673a:	1cb9      	adds	r1, r7, #2
   1673c:	f105 0010 	add.w	r0, r5, #16
   16740:	f007 fd38 	bl	1e1b4 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   16744:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   16748:	f023 0301 	bic.w	r3, r3, #1
   1674c:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   16750:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   16754:	079a      	lsls	r2, r3, #30
   16756:	d50b      	bpl.n	16770 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   16758:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1675a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1675e:	f009 faf4 	bl	1fd4a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16762:	78f3      	ldrb	r3, [r6, #3]
   16764:	b143      	cbz	r3, 16778 <smp_master_ident+0x88>
	if (!smp->local_dist && !smp->remote_dist) {
   16766:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
   1676a:	b17d      	cbz	r5, 1678c <smp_master_ident+0x9c>
	return 0;
   1676c:	2000      	movs	r0, #0
   1676e:	e7dc      	b.n	1672a <smp_master_ident+0x3a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   16770:	075b      	lsls	r3, r3, #29
   16772:	d5f6      	bpl.n	16762 <smp_master_ident+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   16774:	210a      	movs	r1, #10
   16776:	e7f0      	b.n	1675a <smp_master_ident+0x6a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   16778:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1677c:	2b00      	cmp	r3, #0
   1677e:	d1f2      	bne.n	16766 <smp_master_ident+0x76>
		err = bt_smp_distribute_keys(smp);
   16780:	4620      	mov	r0, r4
   16782:	f7ff f8cd 	bl	15920 <bt_smp_distribute_keys>
		if (err) {
   16786:	2800      	cmp	r0, #0
   16788:	d0ed      	beq.n	16766 <smp_master_ident+0x76>
   1678a:	e7ce      	b.n	1672a <smp_master_ident+0x3a>
		smp_pairing_complete(smp, 0);
   1678c:	4620      	mov	r0, r4
   1678e:	4629      	mov	r1, r5
   16790:	f7ff fe7e 	bl	16490 <smp_pairing_complete>
	return 0;
   16794:	4628      	mov	r0, r5
   16796:	e7c8      	b.n	1672a <smp_master_ident+0x3a>
   16798:	00025522 	.word	0x00025522

0001679c <smp_ident_sent>:
{
   1679c:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1679e:	7883      	ldrb	r3, [r0, #2]
   167a0:	2b01      	cmp	r3, #1
   167a2:	d11d      	bne.n	167e0 <smp_ident_sent+0x44>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   167a4:	2106      	movs	r1, #6
   167a6:	f008 f9f0 	bl	1eb8a <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   167aa:	4604      	mov	r4, r0
   167ac:	b950      	cbnz	r0, 167c4 <smp_ident_sent+0x28>
   167ae:	490d      	ldr	r1, [pc, #52]	; (167e4 <smp_ident_sent+0x48>)
   167b0:	480d      	ldr	r0, [pc, #52]	; (167e8 <smp_ident_sent+0x4c>)
   167b2:	f240 3232 	movw	r2, #818	; 0x332
   167b6:	f006 f845 	bl	1c844 <printk>
   167ba:	f240 3132 	movw	r1, #818	; 0x332
   167be:	4809      	ldr	r0, [pc, #36]	; (167e4 <smp_ident_sent+0x48>)
   167c0:	f006 fae6 	bl	1cd90 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   167c4:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   167c8:	f023 0301 	bic.w	r3, r3, #1
   167cc:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   167d0:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   167d4:	b921      	cbnz	r1, 167e0 <smp_ident_sent+0x44>
			smp_pairing_complete(smp, 0);
   167d6:	4620      	mov	r0, r4
}
   167d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   167dc:	f7ff be58 	b.w	16490 <smp_pairing_complete>
}
   167e0:	bd10      	pop	{r4, pc}
   167e2:	bf00      	nop
   167e4:	0002580a 	.word	0x0002580a
   167e8:	00022c66 	.word	0x00022c66

000167ec <smp_ident_addr_info>:
{
   167ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   167f0:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   167f2:	6804      	ldr	r4, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   167f4:	7833      	ldrb	r3, [r6, #0]
{
   167f6:	4605      	mov	r5, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   167f8:	f104 0888 	add.w	r8, r4, #136	; 0x88
   167fc:	b1bb      	cbz	r3, 1682e <smp_ident_addr_info+0x42>
	if (!bt_addr_le_is_identity(&req->addr)) {
   167fe:	79b3      	ldrb	r3, [r6, #6]
   16800:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16804:	2bc0      	cmp	r3, #192	; 0xc0
   16806:	d012      	beq.n	1682e <smp_ident_addr_info+0x42>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   16808:	4630      	mov	r0, r6
   1680a:	f7f7 fcf7 	bl	e1fc <bt_addr_le_str_real>
   1680e:	2145      	movs	r1, #69	; 0x45
   16810:	4602      	mov	r2, r0
   16812:	4846      	ldr	r0, [pc, #280]	; (1692c <smp_ident_addr_info+0x140>)
   16814:	f006 f816 	bl	1c844 <printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   16818:	4640      	mov	r0, r8
   1681a:	f7f7 fcef 	bl	e1fc <bt_addr_le_str_real>
   1681e:	2145      	movs	r1, #69	; 0x45
   16820:	4602      	mov	r2, r0
   16822:	4843      	ldr	r0, [pc, #268]	; (16930 <smp_ident_addr_info+0x144>)
   16824:	f006 f80e 	bl	1c844 <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   16828:	200a      	movs	r0, #10
}
   1682a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1682e:	2207      	movs	r2, #7
   16830:	4631      	mov	r1, r6
   16832:	4640      	mov	r0, r8
   16834:	f007 fcad 	bl	1e192 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   16838:	b168      	cbz	r0, 16856 <smp_ident_addr_info+0x6a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1683a:	4631      	mov	r1, r6
   1683c:	7a20      	ldrb	r0, [r4, #8]
   1683e:	f000 fc15 	bl	1706c <bt_keys_find_addr>
		if (keys) {
   16842:	4607      	mov	r7, r0
   16844:	b138      	cbz	r0, 16856 <smp_ident_addr_info+0x6a>
			if (!update_keys_check(smp, keys)) {
   16846:	4601      	mov	r1, r0
   16848:	4628      	mov	r0, r5
   1684a:	f009 f943 	bl	1fad4 <update_keys_check>
   1684e:	b1c0      	cbz	r0, 16882 <smp_ident_addr_info+0x96>
			bt_keys_clear(keys);
   16850:	4638      	mov	r0, r7
   16852:	f000 fc1b 	bl	1708c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   16856:	210d      	movs	r1, #13
   16858:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1685c:	f009 f934 	bl	1fac8 <atomic_test_bit>
   16860:	2800      	cmp	r0, #0
   16862:	d03c      	beq.n	168de <smp_ident_addr_info+0xf2>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   16864:	4642      	mov	r2, r8
   16866:	2002      	movs	r0, #2
   16868:	7a21      	ldrb	r1, [r4, #8]
   1686a:	f009 fdf0 	bl	2044e <bt_keys_get_type>
		if (!keys) {
   1686e:	4607      	mov	r7, r0
   16870:	b948      	cbnz	r0, 16886 <smp_ident_addr_info+0x9a>
			BT_ERR("Unable to get keys for %s",
   16872:	4640      	mov	r0, r8
   16874:	f7f7 fcc2 	bl	e1fc <bt_addr_le_str_real>
   16878:	2145      	movs	r1, #69	; 0x45
   1687a:	4602      	mov	r2, r0
   1687c:	482d      	ldr	r0, [pc, #180]	; (16934 <smp_ident_addr_info+0x148>)
   1687e:	f005 ffe1 	bl	1c844 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
   16882:	2008      	movs	r0, #8
   16884:	e7d1      	b.n	1682a <smp_ident_addr_info+0x3e>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   16886:	78e3      	ldrb	r3, [r4, #3]
   16888:	2b00      	cmp	r3, #0
   1688a:	d13c      	bne.n	16906 <smp_ident_addr_info+0x11a>
			dst = &conn->le.resp_addr;
   1688c:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   16890:	780b      	ldrb	r3, [r1, #0]
   16892:	2b01      	cmp	r3, #1
   16894:	d120      	bne.n	168d8 <smp_ident_addr_info+0xec>
		if (bt_addr_le_is_rpa(dst)) {
   16896:	798b      	ldrb	r3, [r1, #6]
   16898:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1689c:	2b40      	cmp	r3, #64	; 0x40
   1689e:	d11b      	bne.n	168d8 <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
   168a0:	2206      	movs	r2, #6
   168a2:	3101      	adds	r1, #1
   168a4:	f107 003a 	add.w	r0, r7, #58	; 0x3a
   168a8:	f007 fc84 	bl	1e1b4 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   168ac:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   168b0:	b193      	cbz	r3, 168d8 <smp_ident_addr_info+0xec>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   168b2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   168b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   168ba:	2bc0      	cmp	r3, #192	; 0xc0
   168bc:	d00c      	beq.n	168d8 <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
   168be:	2207      	movs	r2, #7
   168c0:	4631      	mov	r1, r6
   168c2:	1c78      	adds	r0, r7, #1
   168c4:	f007 fc76 	bl	1e1b4 <memcpy>
   168c8:	2207      	movs	r2, #7
   168ca:	4631      	mov	r1, r6
   168cc:	4640      	mov	r0, r8
   168ce:	f007 fc71 	bl	1e1b4 <memcpy>
				bt_conn_identity_resolved(conn);
   168d2:	4620      	mov	r0, r4
   168d4:	f7fa fbea 	bl	110ac <bt_conn_identity_resolved>
		bt_id_add(keys);
   168d8:	4638      	mov	r0, r7
   168da:	f7f8 fe67 	bl	f5ac <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   168de:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   168e2:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   168e6:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   168e8:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   168ec:	d504      	bpl.n	168f8 <smp_ident_addr_info+0x10c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   168ee:	210a      	movs	r1, #10
   168f0:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   168f4:	f009 fa29 	bl	1fd4a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   168f8:	78e3      	ldrb	r3, [r4, #3]
   168fa:	b13b      	cbz	r3, 1690c <smp_ident_addr_info+0x120>
	if (!smp->local_dist && !smp->remote_dist) {
   168fc:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   16900:	b174      	cbz	r4, 16920 <smp_ident_addr_info+0x134>
	return 0;
   16902:	2000      	movs	r0, #0
   16904:	e791      	b.n	1682a <smp_ident_addr_info+0x3e>
			dst = &conn->le.init_addr;
   16906:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1690a:	e7c1      	b.n	16890 <smp_ident_addr_info+0xa4>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   1690c:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   16910:	2b00      	cmp	r3, #0
   16912:	d1f3      	bne.n	168fc <smp_ident_addr_info+0x110>
		err = bt_smp_distribute_keys(smp);
   16914:	4628      	mov	r0, r5
   16916:	f7ff f803 	bl	15920 <bt_smp_distribute_keys>
		if (err) {
   1691a:	2800      	cmp	r0, #0
   1691c:	d0ee      	beq.n	168fc <smp_ident_addr_info+0x110>
   1691e:	e784      	b.n	1682a <smp_ident_addr_info+0x3e>
		smp_pairing_complete(smp, 0);
   16920:	4621      	mov	r1, r4
   16922:	4628      	mov	r0, r5
   16924:	f7ff fdb4 	bl	16490 <smp_pairing_complete>
   16928:	e7eb      	b.n	16902 <smp_ident_addr_info+0x116>
   1692a:	bf00      	nop
   1692c:	00025839 	.word	0x00025839
   16930:	00025852 	.word	0x00025852
   16934:	00025522 	.word	0x00025522

00016938 <smp_pairing_confirm>:
{
   16938:	b570      	push	{r4, r5, r6, lr}
   1693a:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1693c:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1693e:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   16942:	210b      	movs	r1, #11
   16944:	4628      	mov	r0, r5
   16946:	f009 f912 	bl	1fb6e <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1694a:	2210      	movs	r2, #16
   1694c:	4631      	mov	r1, r6
   1694e:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   16952:	f007 fc2f 	bl	1e1b4 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16956:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16958:	78db      	ldrb	r3, [r3, #3]
   1695a:	b94b      	cbnz	r3, 16970 <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1695c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16960:	2104      	movs	r1, #4
   16962:	f009 f9f2 	bl	1fd4a <atomic_set_bit>
		return smp_send_pairing_random(smp);
   16966:	4620      	mov	r0, r4
}
   16968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   1696c:	f009 ba48 	b.w	1fe00 <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16970:	2105      	movs	r1, #5
   16972:	4628      	mov	r0, r5
   16974:	f009 f8a8 	bl	1fac8 <atomic_test_bit>
   16978:	b920      	cbnz	r0, 16984 <smp_pairing_confirm+0x4c>
		return legacy_pairing_confirm(smp);
   1697a:	4620      	mov	r0, r4
}
   1697c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   16980:	f009 bbf4 	b.w	2016c <legacy_pairing_confirm>
	switch (smp->method) {
   16984:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16988:	2a01      	cmp	r2, #1
   1698a:	d00b      	beq.n	169a4 <smp_pairing_confirm+0x6c>
   1698c:	2a02      	cmp	r2, #2
   1698e:	d115      	bne.n	169bc <smp_pairing_confirm+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16990:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16994:	2104      	movs	r1, #4
   16996:	f009 f9d8 	bl	1fd4a <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1699a:	4620      	mov	r0, r4
}
   1699c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   169a0:	f7ff b94e 	b.w	15c40 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   169a4:	210a      	movs	r1, #10
   169a6:	4628      	mov	r0, r5
   169a8:	f009 f88e 	bl	1fac8 <atomic_test_bit>
   169ac:	2800      	cmp	r0, #0
   169ae:	d0ef      	beq.n	16990 <smp_pairing_confirm+0x58>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   169b0:	4628      	mov	r0, r5
   169b2:	2100      	movs	r1, #0
   169b4:	f009 f9c9 	bl	1fd4a <atomic_set_bit>
			return 0;
   169b8:	2000      	movs	r0, #0
}
   169ba:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   169bc:	4802      	ldr	r0, [pc, #8]	; (169c8 <smp_pairing_confirm+0x90>)
   169be:	2145      	movs	r1, #69	; 0x45
   169c0:	f005 ff40 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   169c4:	2008      	movs	r0, #8
   169c6:	e7f8      	b.n	169ba <smp_pairing_confirm+0x82>
   169c8:	00025493 	.word	0x00025493

000169cc <smp_pairing_rsp>:
{
   169cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   169ce:	688d      	ldr	r5, [r1, #8]
{
   169d0:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   169d2:	78eb      	ldrb	r3, [r5, #3]
   169d4:	3b07      	subs	r3, #7
   169d6:	2b09      	cmp	r3, #9
   169d8:	f200 80ad 	bhi.w	16b36 <smp_pairing_rsp+0x16a>
	smp->local_dist &= rsp->init_key_dist;
   169dc:	792a      	ldrb	r2, [r5, #4]
   169de:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	struct bt_conn *conn = smp->chan.chan.conn;
   169e2:	6806      	ldr	r6, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
   169e4:	4013      	ands	r3, r2
   169e6:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
	smp->remote_dist &= rsp->resp_key_dist;
   169ea:	796a      	ldrb	r2, [r5, #5]
   169ec:	f890 31a9 	ldrb.w	r3, [r0, #425]	; 0x1a9
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   169f0:	4629      	mov	r1, r5
	smp->remote_dist &= rsp->resp_key_dist;
   169f2:	4013      	ands	r3, r2
   169f4:	f880 31a9 	strb.w	r3, [r0, #425]	; 0x1a9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   169f8:	2302      	movs	r3, #2
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   169fa:	2206      	movs	r2, #6
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   169fc:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   16a00:	30d1      	adds	r0, #209	; 0xd1
   16a02:	f007 fbd7 	bl	1e1b4 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   16a06:	78ab      	ldrb	r3, [r5, #2]
   16a08:	071b      	lsls	r3, r3, #28
   16a0a:	d508      	bpl.n	16a1e <smp_pairing_rsp+0x52>
   16a0c:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16a10:	071f      	lsls	r7, r3, #28
   16a12:	d504      	bpl.n	16a1e <smp_pairing_rsp+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   16a14:	2105      	movs	r1, #5
   16a16:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16a1a:	f009 f996 	bl	1fd4a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   16a1e:	78ab      	ldrb	r3, [r5, #2]
   16a20:	0698      	lsls	r0, r3, #26
   16a22:	d508      	bpl.n	16a36 <smp_pairing_rsp+0x6a>
   16a24:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16a28:	0699      	lsls	r1, r3, #26
   16a2a:	d504      	bpl.n	16a36 <smp_pairing_rsp+0x6a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   16a2c:	2114      	movs	r1, #20
   16a2e:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16a32:	f009 f98a 	bl	1fd4a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   16a36:	78ab      	ldrb	r3, [r5, #2]
   16a38:	07da      	lsls	r2, r3, #31
   16a3a:	d508      	bpl.n	16a4e <smp_pairing_rsp+0x82>
   16a3c:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   16a40:	07db      	lsls	r3, r3, #31
   16a42:	d504      	bpl.n	16a4e <smp_pairing_rsp+0x82>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   16a44:	210d      	movs	r1, #13
   16a46:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   16a4a:	f009 f97e 	bl	1fd4a <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   16a4e:	7829      	ldrb	r1, [r5, #0]
   16a50:	4620      	mov	r0, r4
   16a52:	f7fe fcd1 	bl	153f8 <get_pair_method>
   16a56:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
   16a5a:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   16a5e:	4620      	mov	r0, r4
   16a60:	f009 f838 	bl	1fad4 <update_keys_check>
   16a64:	2800      	cmp	r0, #0
   16a66:	d068      	beq.n	16b3a <smp_pairing_rsp+0x16e>
	err = remote_sec_level_reachable(smp);
   16a68:	4620      	mov	r0, r4
   16a6a:	f009 f858 	bl	1fb1e <remote_sec_level_reachable>
	if (err) {
   16a6e:	4605      	mov	r5, r0
   16a70:	b9e0      	cbnz	r0, 16aac <smp_pairing_rsp+0xe0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16a72:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   16a76:	2105      	movs	r1, #5
   16a78:	4630      	mov	r0, r6
   16a7a:	f009 f825 	bl	1fac8 <atomic_test_bit>
   16a7e:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16a82:	bb90      	cbnz	r0, 16aea <smp_pairing_rsp+0x11e>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16a84:	4615      	mov	r5, r2
   16a86:	b99a      	cbnz	r2, 16ab0 <smp_pairing_rsp+0xe4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16a88:	210f      	movs	r1, #15
   16a8a:	4630      	mov	r0, r6
   16a8c:	f009 f81c 	bl	1fac8 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16a90:	b170      	cbz	r0, 16ab0 <smp_pairing_rsp+0xe4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16a92:	4f2b      	ldr	r7, [pc, #172]	; (16b40 <smp_pairing_rsp+0x174>)
   16a94:	683b      	ldr	r3, [r7, #0]
   16a96:	b15b      	cbz	r3, 16ab0 <smp_pairing_rsp+0xe4>
	    bt_auth && bt_auth->pairing_confirm) {
   16a98:	695b      	ldr	r3, [r3, #20]
   16a9a:	b14b      	cbz	r3, 16ab0 <smp_pairing_rsp+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16a9c:	4630      	mov	r0, r6
   16a9e:	210a      	movs	r1, #10
   16aa0:	f009 f953 	bl	1fd4a <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   16aa4:	683b      	ldr	r3, [r7, #0]
   16aa6:	6820      	ldr	r0, [r4, #0]
   16aa8:	695b      	ldr	r3, [r3, #20]
   16aaa:	4798      	blx	r3
}
   16aac:	4628      	mov	r0, r5
   16aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = legacy_request_tk(smp);
   16ab0:	4620      	mov	r0, r4
   16ab2:	f7fe fe67 	bl	15784 <legacy_request_tk>
	if (ret) {
   16ab6:	4605      	mov	r5, r0
   16ab8:	2800      	cmp	r0, #0
   16aba:	d1f7      	bne.n	16aac <smp_pairing_rsp+0xe0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   16abc:	210a      	movs	r1, #10
   16abe:	4630      	mov	r0, r6
   16ac0:	f009 f802 	bl	1fac8 <atomic_test_bit>
   16ac4:	b960      	cbnz	r0, 16ae0 <smp_pairing_rsp+0x114>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16ac6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16aca:	2103      	movs	r1, #3
   16acc:	f009 f93d 	bl	1fd4a <atomic_set_bit>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   16ad0:	210e      	movs	r1, #14
   16ad2:	f009 f93a 	bl	1fd4a <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
   16ad6:	4620      	mov	r0, r4
}
   16ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
   16adc:	f009 bb16 	b.w	2010c <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   16ae0:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   16ae2:	4630      	mov	r0, r6
   16ae4:	f009 f931 	bl	1fd4a <atomic_set_bit>
		return 0;
   16ae8:	e7e0      	b.n	16aac <smp_pairing_rsp+0xe0>
	smp->remote_dist &= RECV_KEYS_SC;
   16aea:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
	smp->local_dist &= SEND_KEYS_SC;
   16aee:	f884 51a8 	strb.w	r5, [r4, #424]	; 0x1a8
	smp->remote_dist &= RECV_KEYS_SC;
   16af2:	f003 0302 	and.w	r3, r3, #2
   16af6:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16afa:	b952      	cbnz	r2, 16b12 <smp_pairing_rsp+0x146>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16afc:	210f      	movs	r1, #15
   16afe:	4630      	mov	r0, r6
   16b00:	f008 ffe2 	bl	1fac8 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16b04:	b128      	cbz	r0, 16b12 <smp_pairing_rsp+0x146>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16b06:	4f0e      	ldr	r7, [pc, #56]	; (16b40 <smp_pairing_rsp+0x174>)
   16b08:	683b      	ldr	r3, [r7, #0]
   16b0a:	b113      	cbz	r3, 16b12 <smp_pairing_rsp+0x146>
	    bt_auth && bt_auth->pairing_confirm) {
   16b0c:	695b      	ldr	r3, [r3, #20]
   16b0e:	2b00      	cmp	r3, #0
   16b10:	d1c4      	bne.n	16a9c <smp_pairing_rsp+0xd0>
	if (!sc_public_key) {
   16b12:	4b0c      	ldr	r3, [pc, #48]	; (16b44 <smp_pairing_rsp+0x178>)
   16b14:	681b      	ldr	r3, [r3, #0]
   16b16:	b90b      	cbnz	r3, 16b1c <smp_pairing_rsp+0x150>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   16b18:	2106      	movs	r1, #6
   16b1a:	e7e2      	b.n	16ae2 <smp_pairing_rsp+0x116>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   16b1c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16b20:	210c      	movs	r1, #12
   16b22:	f009 f912 	bl	1fd4a <atomic_set_bit>
	atomic_clear_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   16b26:	210b      	movs	r1, #11
   16b28:	f009 f821 	bl	1fb6e <atomic_clear_bit>
	return sc_send_public_key(smp);
   16b2c:	4620      	mov	r0, r4
}
   16b2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
   16b32:	f7ff b9b3 	b.w	15e9c <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   16b36:	2506      	movs	r5, #6
   16b38:	e7b8      	b.n	16aac <smp_pairing_rsp+0xe0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   16b3a:	2503      	movs	r5, #3
   16b3c:	e7b6      	b.n	16aac <smp_pairing_rsp+0xe0>
   16b3e:	bf00      	nop
   16b40:	20009c18 	.word	0x20009c18
   16b44:	20009d3c 	.word	0x20009d3c

00016b48 <smp_pairing_random>:
{
   16b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b4c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16b4e:	f100 08f7 	add.w	r8, r0, #247	; 0xf7
   16b52:	6889      	ldr	r1, [r1, #8]
{
   16b54:	b08d      	sub	sp, #52	; 0x34
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16b56:	2210      	movs	r2, #16
   16b58:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16b5a:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16b5e:	f007 fb29 	bl	1e1b4 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16b62:	2105      	movs	r1, #5
   16b64:	4638      	mov	r0, r7
   16b66:	f008 ffaf 	bl	1fac8 <atomic_test_bit>
   16b6a:	f8d4 9000 	ldr.w	r9, [r4]
   16b6e:	2800      	cmp	r0, #0
   16b70:	d179      	bne.n	16c66 <smp_pairing_random+0x11e>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   16b72:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16b76:	f204 1a07 	addw	sl, r4, #263	; 0x107
   16b7a:	ae08      	add	r6, sp, #32
   16b7c:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   16b7e:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16b82:	9300      	str	r3, [sp, #0]
   16b84:	4641      	mov	r1, r8
   16b86:	4650      	mov	r0, sl
   16b88:	9602      	str	r6, [sp, #8]
   16b8a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   16b8e:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
   16b92:	f009 fa60 	bl	20056 <smp_c1>
	if (err) {
   16b96:	2800      	cmp	r0, #0
   16b98:	d139      	bne.n	16c0e <smp_pairing_random+0xc6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   16b9a:	2210      	movs	r2, #16
   16b9c:	4631      	mov	r1, r6
   16b9e:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   16ba2:	f007 faf6 	bl	1e192 <memcmp>
   16ba6:	2800      	cmp	r0, #0
   16ba8:	d158      	bne.n	16c5c <smp_pairing_random+0x114>
	    conn->role == BT_HCI_ROLE_MASTER) {
   16baa:	f899 5003 	ldrb.w	r5, [r9, #3]
	memcpy(out, r2, 8);
   16bae:	2208      	movs	r2, #8
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
   16bb0:	f104 0be7 	add.w	fp, r4, #231	; 0xe7
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16bb4:	bb95      	cbnz	r5, 16c1c <smp_pairing_random+0xd4>
	memcpy(out, r2, 8);
   16bb6:	4659      	mov	r1, fp
   16bb8:	4630      	mov	r0, r6
   16bba:	f007 fafb 	bl	1e1b4 <memcpy>
	memcpy(out + 8, r1, 8);
   16bbe:	2208      	movs	r2, #8
   16bc0:	4641      	mov	r1, r8
   16bc2:	a80a      	add	r0, sp, #40	; 0x28
   16bc4:	f007 faf6 	bl	1e1b4 <memcpy>
	return bt_encrypt_le(k, out, out);
   16bc8:	4632      	mov	r2, r6
   16bca:	4631      	mov	r1, r6
   16bcc:	4650      	mov	r0, sl
   16bce:	f007 fdc6 	bl	1e75e <bt_encrypt_le>
		if (err) {
   16bd2:	b9e0      	cbnz	r0, 16c0e <smp_pairing_random+0xc6>
		(void)memset(ediv, 0, sizeof(ediv));
   16bd4:	2202      	movs	r2, #2
   16bd6:	4629      	mov	r1, r5
   16bd8:	a805      	add	r0, sp, #20
   16bda:	f007 fb16 	bl	1e20a <memset>
		(void)memset(rand, 0, sizeof(rand));
   16bde:	2208      	movs	r2, #8
   16be0:	4629      	mov	r1, r5
   16be2:	a806      	add	r0, sp, #24
   16be4:	f007 fb11 	bl	1e20a <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   16be8:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
   16bec:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   16bf0:	4648      	mov	r0, r9
   16bf2:	429a      	cmp	r2, r3
   16bf4:	bf94      	ite	ls
   16bf6:	9200      	strls	r2, [sp, #0]
   16bf8:	9300      	strhi	r3, [sp, #0]
   16bfa:	a906      	add	r1, sp, #24
   16bfc:	4633      	mov	r3, r6
   16bfe:	aa05      	add	r2, sp, #20
   16c00:	f007 fe37 	bl	1e872 <bt_conn_le_start_encryption>
   16c04:	b128      	cbz	r0, 16c12 <smp_pairing_random+0xca>
			BT_ERR("Failed to start encryption");
   16c06:	2145      	movs	r1, #69	; 0x45
   16c08:	487f      	ldr	r0, [pc, #508]	; (16e08 <smp_pairing_random+0x2c0>)
			BT_ERR("Calculate STK failed");
   16c0a:	f005 fe1b 	bl	1c844 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   16c0e:	2508      	movs	r5, #8
   16c10:	e025      	b.n	16c5e <smp_pairing_random+0x116>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16c12:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16c14:	4638      	mov	r0, r7
   16c16:	f009 f898 	bl	1fd4a <atomic_set_bit>
			return 0;
   16c1a:	e020      	b.n	16c5e <smp_pairing_random+0x116>
	memcpy(out, r2, 8);
   16c1c:	4641      	mov	r1, r8
   16c1e:	4630      	mov	r0, r6
   16c20:	f007 fac8 	bl	1e1b4 <memcpy>
	memcpy(out + 8, r1, 8);
   16c24:	2208      	movs	r2, #8
   16c26:	4659      	mov	r1, fp
   16c28:	a80a      	add	r0, sp, #40	; 0x28
   16c2a:	f007 fac3 	bl	1e1b4 <memcpy>
	return bt_encrypt_le(k, out, out);
   16c2e:	4632      	mov	r2, r6
   16c30:	4631      	mov	r1, r6
   16c32:	4650      	mov	r0, sl
   16c34:	f007 fd93 	bl	1e75e <bt_encrypt_le>
		if (err) {
   16c38:	b110      	cbz	r0, 16c40 <smp_pairing_random+0xf8>
			BT_ERR("Calculate STK failed");
   16c3a:	2145      	movs	r1, #69	; 0x45
   16c3c:	4873      	ldr	r0, [pc, #460]	; (16e0c <smp_pairing_random+0x2c4>)
   16c3e:	e7e4      	b.n	16c0a <smp_pairing_random+0xc2>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   16c40:	4631      	mov	r1, r6
   16c42:	2210      	movs	r2, #16
   16c44:	4650      	mov	r0, sl
   16c46:	f007 fab5 	bl	1e1b4 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16c4a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16c4c:	4638      	mov	r0, r7
   16c4e:	f009 f87c 	bl	1fd4a <atomic_set_bit>
	return smp_send_pairing_random(smp);
   16c52:	4620      	mov	r0, r4
   16c54:	f009 f8d4 	bl	1fe00 <smp_send_pairing_random>
   16c58:	4605      	mov	r5, r0
   16c5a:	e000      	b.n	16c5e <smp_pairing_random+0x116>
		return BT_SMP_ERR_CONFIRM_FAILED;
   16c5c:	2504      	movs	r5, #4
}
   16c5e:	4628      	mov	r0, r5
   16c60:	b00d      	add	sp, #52	; 0x34
   16c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   16c66:	f899 3003 	ldrb.w	r3, [r9, #3]
   16c6a:	2b00      	cmp	r3, #0
   16c6c:	d151      	bne.n	16d12 <smp_pairing_random+0x1ca>
		err = sc_smp_check_confirm(smp);
   16c6e:	4620      	mov	r0, r4
   16c70:	f7fe fc98 	bl	155a4 <sc_smp_check_confirm>
		if (err) {
   16c74:	4605      	mov	r5, r0
   16c76:	2800      	cmp	r0, #0
   16c78:	d1f1      	bne.n	16c5e <smp_pairing_random+0x116>
		switch (smp->method) {
   16c7a:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16c7e:	2a05      	cmp	r2, #5
   16c80:	f200 80bb 	bhi.w	16dfa <smp_pairing_random+0x2b2>
   16c84:	e8df f002 	tbb	[pc, r2]
   16c88:	031e1e38 	.word	0x031e1e38
   16c8c:	38b9      	.short	0x38b9
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   16c8e:	ab08      	add	r3, sp, #32
   16c90:	485f      	ldr	r0, [pc, #380]	; (16e10 <smp_pairing_random+0x2c8>)
   16c92:	9300      	str	r3, [sp, #0]
   16c94:	6800      	ldr	r0, [r0, #0]
   16c96:	4643      	mov	r3, r8
   16c98:	f104 02e7 	add.w	r2, r4, #231	; 0xe7
   16c9c:	f204 1117 	addw	r1, r4, #279	; 0x117
   16ca0:	f7fe fb42 	bl	15328 <smp_g2>
   16ca4:	2800      	cmp	r0, #0
   16ca6:	d1b2      	bne.n	16c0e <smp_pairing_random+0xc6>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16ca8:	210a      	movs	r1, #10
   16caa:	4638      	mov	r0, r7
   16cac:	f009 f84d 	bl	1fd4a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16cb0:	2109      	movs	r1, #9
   16cb2:	f009 f84a 	bl	1fd4a <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   16cb6:	4b57      	ldr	r3, [pc, #348]	; (16e14 <smp_pairing_random+0x2cc>)
   16cb8:	9908      	ldr	r1, [sp, #32]
   16cba:	681b      	ldr	r3, [r3, #0]
   16cbc:	689b      	ldr	r3, [r3, #8]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   16cbe:	6820      	ldr	r0, [r4, #0]
   16cc0:	4798      	blx	r3
			return 0;
   16cc2:	e7cc      	b.n	16c5e <smp_pairing_random+0x116>
			smp->passkey_round++;
   16cc4:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   16cc8:	3301      	adds	r3, #1
   16cca:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   16ccc:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   16cce:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
			if (smp->passkey_round == 20U) {
   16cd2:	d011      	beq.n	16cf8 <smp_pairing_random+0x1b0>
			if (bt_rand(smp->prnd, 16)) {
   16cd4:	2110      	movs	r1, #16
   16cd6:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   16cda:	f7fa f8bb 	bl	10e54 <bt_rand>
   16cde:	2800      	cmp	r0, #0
   16ce0:	d195      	bne.n	16c0e <smp_pairing_random+0xc6>
			atomic_set_bit(&smp->allowed_cmds,
   16ce2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16ce6:	2103      	movs	r1, #3
   16ce8:	f009 f82f 	bl	1fd4a <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   16cec:	4620      	mov	r0, r4
}
   16cee:	b00d      	add	sp, #52	; 0x34
   16cf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return smp_send_pairing_confirm(smp);
   16cf4:	f7fe bfa4 	b.w	15c40 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   16cf8:	2107      	movs	r1, #7
   16cfa:	4638      	mov	r0, r7
   16cfc:	f008 fee4 	bl	1fac8 <atomic_test_bit>
   16d00:	b108      	cbz	r0, 16d06 <smp_pairing_random+0x1be>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   16d02:	2109      	movs	r1, #9
   16d04:	e786      	b.n	16c14 <smp_pairing_random+0xcc>
		return compute_and_send_master_dhcheck(smp);
   16d06:	4620      	mov	r0, r4
}
   16d08:	b00d      	add	sp, #52	; 0x34
   16d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return compute_and_send_master_dhcheck(smp);
   16d0e:	f7ff ba11 	b.w	16134 <compute_and_send_master_dhcheck>
	switch (smp->method) {
   16d12:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   16d16:	2a05      	cmp	r2, #5
   16d18:	d86f      	bhi.n	16dfa <smp_pairing_random+0x2b2>
   16d1a:	e8df f002 	tbb	[pc, r2]
   16d1e:	221b      	.short	0x221b
   16d20:	4d6e0322 	.word	0x4d6e0322
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   16d24:	ab08      	add	r3, sp, #32
   16d26:	493a      	ldr	r1, [pc, #232]	; (16e10 <smp_pairing_random+0x2c8>)
   16d28:	9300      	str	r3, [sp, #0]
   16d2a:	4642      	mov	r2, r8
   16d2c:	6809      	ldr	r1, [r1, #0]
   16d2e:	f104 03e7 	add.w	r3, r4, #231	; 0xe7
   16d32:	f204 1017 	addw	r0, r4, #279	; 0x117
   16d36:	f7fe faf7 	bl	15328 <smp_g2>
   16d3a:	2800      	cmp	r0, #0
   16d3c:	f47f af67 	bne.w	16c0e <smp_pairing_random+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16d40:	210a      	movs	r1, #10
   16d42:	4638      	mov	r0, r7
   16d44:	f009 f801 	bl	1fd4a <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   16d48:	4b32      	ldr	r3, [pc, #200]	; (16e14 <smp_pairing_random+0x2cc>)
   16d4a:	9908      	ldr	r1, [sp, #32]
   16d4c:	681b      	ldr	r3, [r3, #0]
   16d4e:	6820      	ldr	r0, [r4, #0]
   16d50:	689b      	ldr	r3, [r3, #8]
   16d52:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   16d54:	210d      	movs	r1, #13
   16d56:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   16d5a:	f008 fff6 	bl	1fd4a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16d5e:	2110      	movs	r1, #16
   16d60:	e774      	b.n	16c4c <smp_pairing_random+0x104>
		err = sc_smp_check_confirm(smp);
   16d62:	4620      	mov	r0, r4
   16d64:	f7fe fc1e 	bl	155a4 <sc_smp_check_confirm>
		if (err) {
   16d68:	4605      	mov	r5, r0
   16d6a:	2800      	cmp	r0, #0
   16d6c:	f47f af77 	bne.w	16c5e <smp_pairing_random+0x116>
		atomic_set_bit(&smp->allowed_cmds,
   16d70:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
   16d74:	2103      	movs	r1, #3
   16d76:	4630      	mov	r0, r6
   16d78:	f008 ffe7 	bl	1fd4a <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   16d7c:	4620      	mov	r0, r4
   16d7e:	f009 f83f 	bl	1fe00 <smp_send_pairing_random>
		if (err) {
   16d82:	4605      	mov	r5, r0
   16d84:	2800      	cmp	r0, #0
   16d86:	f47f af6a 	bne.w	16c5e <smp_pairing_random+0x116>
		smp->passkey_round++;
   16d8a:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   16d8e:	3301      	adds	r3, #1
   16d90:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   16d92:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   16d94:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
   16d98:	d105      	bne.n	16da6 <smp_pairing_random+0x25e>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   16d9a:	210d      	movs	r1, #13
   16d9c:	4630      	mov	r0, r6
   16d9e:	f008 ffd4 	bl	1fd4a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16da2:	2110      	movs	r1, #16
   16da4:	e736      	b.n	16c14 <smp_pairing_random+0xcc>
		if (bt_rand(smp->prnd, 16)) {
   16da6:	2110      	movs	r1, #16
   16da8:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   16dac:	f7fa f852 	bl	10e54 <bt_rand>
   16db0:	2800      	cmp	r0, #0
   16db2:	f43f af54 	beq.w	16c5e <smp_pairing_random+0x116>
   16db6:	e72a      	b.n	16c0e <smp_pairing_random+0xc6>
		if (bt_rand(smp->prnd, 16)) {
   16db8:	2110      	movs	r1, #16
   16dba:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   16dbe:	f7fa f849 	bl	10e54 <bt_rand>
   16dc2:	4605      	mov	r5, r0
   16dc4:	2800      	cmp	r0, #0
   16dc6:	f47f af22 	bne.w	16c0e <smp_pairing_random+0xc6>
		if (bt_auth && bt_auth->oob_data_request) {
   16dca:	4e12      	ldr	r6, [pc, #72]	; (16e14 <smp_pairing_random+0x2cc>)
   16dcc:	6833      	ldr	r3, [r6, #0]
   16dce:	b1cb      	cbz	r3, 16e04 <smp_pairing_random+0x2bc>
   16dd0:	68db      	ldr	r3, [r3, #12]
   16dd2:	b1bb      	cbz	r3, 16e04 <smp_pairing_random+0x2bc>
			struct bt_conn_oob_info info = {
   16dd4:	4b10      	ldr	r3, [pc, #64]	; (16e18 <smp_pairing_random+0x2d0>)
			le_sc_oob_config_set(smp, &info);
   16dd6:	4620      	mov	r0, r4
			struct bt_conn_oob_info info = {
   16dd8:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
			le_sc_oob_config_set(smp, &info);
   16ddc:	a908      	add	r1, sp, #32
			struct bt_conn_oob_info info = {
   16dde:	f8ad 3020 	strh.w	r3, [sp, #32]
			le_sc_oob_config_set(smp, &info);
   16de2:	f008 fe50 	bl	1fa86 <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   16de6:	210c      	movs	r1, #12
   16de8:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   16dea:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   16dee:	f008 ffac 	bl	1fd4a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   16df2:	6833      	ldr	r3, [r6, #0]
   16df4:	a908      	add	r1, sp, #32
   16df6:	68db      	ldr	r3, [r3, #12]
   16df8:	e761      	b.n	16cbe <smp_pairing_random+0x176>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   16dfa:	2145      	movs	r1, #69	; 0x45
   16dfc:	4807      	ldr	r0, [pc, #28]	; (16e1c <smp_pairing_random+0x2d4>)
   16dfe:	f005 fd21 	bl	1c844 <printk>
   16e02:	e704      	b.n	16c0e <smp_pairing_random+0xc6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   16e04:	2502      	movs	r5, #2
   16e06:	e72a      	b.n	16c5e <smp_pairing_random+0x116>
   16e08:	00025633 	.word	0x00025633
   16e0c:	0002585f 	.word	0x0002585f
   16e10:	20009d3c 	.word	0x20009d3c
   16e14:	20009c18 	.word	0x20009c18
   16e18:	00021ab1 	.word	0x00021ab1
   16e1c:	00025493 	.word	0x00025493

00016e20 <bt_smp_update_keys>:
{
   16e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e22:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   16e24:	f7fe fab4 	bl	15390 <smp_chan_get>
	if (!smp) {
   16e28:	4605      	mov	r5, r0
   16e2a:	2800      	cmp	r0, #0
   16e2c:	d077      	beq.n	16f1e <bt_smp_update_keys+0xfe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   16e2e:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   16e32:	2103      	movs	r1, #3
   16e34:	4630      	mov	r0, r6
   16e36:	f008 fe47 	bl	1fac8 <atomic_test_bit>
   16e3a:	2800      	cmp	r0, #0
   16e3c:	d06f      	beq.n	16f1e <bt_smp_update_keys+0xfe>
	if (conn->le.keys) {
   16e3e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16e42:	b108      	cbz	r0, 16e48 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   16e44:	f000 f922 	bl	1708c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   16e48:	f104 0788 	add.w	r7, r4, #136	; 0x88
   16e4c:	4639      	mov	r1, r7
   16e4e:	7a20      	ldrb	r0, [r4, #8]
   16e50:	f000 f87e 	bl	16f50 <bt_keys_get_addr>
   16e54:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   16e58:	b968      	cbnz	r0, 16e76 <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
   16e5a:	4638      	mov	r0, r7
   16e5c:	f7f7 f9ce 	bl	e1fc <bt_addr_le_str_real>
   16e60:	2145      	movs	r1, #69	; 0x45
   16e62:	4602      	mov	r2, r0
   16e64:	482e      	ldr	r0, [pc, #184]	; (16f20 <bt_smp_update_keys+0x100>)
   16e66:	f005 fced 	bl	1c844 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   16e6a:	4628      	mov	r0, r5
}
   16e6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   16e70:	2108      	movs	r1, #8
   16e72:	f009 b832 	b.w	1feda <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   16e76:	210e      	movs	r1, #14
   16e78:	4630      	mov	r0, r6
   16e7a:	f008 fe25 	bl	1fac8 <atomic_test_bit>
   16e7e:	b128      	cbz	r0, 16e8c <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   16e80:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   16e84:	7b53      	ldrb	r3, [r2, #13]
   16e86:	f043 0302 	orr.w	r3, r3, #2
   16e8a:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   16e8c:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   16e90:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   16e94:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   16e96:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   16e98:	d838      	bhi.n	16f0c <bt_smp_update_keys+0xec>
   16e9a:	b3d2      	cbz	r2, 16f12 <bt_smp_update_keys+0xf2>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   16e9c:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   16ea0:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   16ea2:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
   16ea6:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16eaa:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
   16eac:	4293      	cmp	r3, r2
   16eae:	bf28      	it	cs
   16eb0:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   16eb2:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16eb4:	2105      	movs	r1, #5
   16eb6:	f008 fe07 	bl	1fac8 <atomic_test_bit>
   16eba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   16ebe:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16ec0:	b350      	cbz	r0, 16f18 <bt_smp_update_keys+0xf8>
		conn->le.keys->flags |= BT_KEYS_SC;
   16ec2:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   16ec6:	210d      	movs	r1, #13
   16ec8:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   16eca:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   16ecc:	f008 fdfc 	bl	1fac8 <atomic_test_bit>
   16ed0:	b328      	cbz	r0, 16f1e <bt_smp_update_keys+0xfe>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   16ed2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16ed6:	2120      	movs	r1, #32
   16ed8:	f009 fac9 	bl	2046e <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   16edc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16ee0:	f205 1107 	addw	r1, r5, #263	; 0x107
   16ee4:	2210      	movs	r2, #16
   16ee6:	301a      	adds	r0, #26
   16ee8:	f007 f964 	bl	1e1b4 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   16eec:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16ef0:	2208      	movs	r2, #8
   16ef2:	2100      	movs	r1, #0
   16ef4:	3010      	adds	r0, #16
   16ef6:	f007 f988 	bl	1e20a <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   16efa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16efe:	2202      	movs	r2, #2
}
   16f00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   16f04:	2100      	movs	r1, #0
   16f06:	3018      	adds	r0, #24
   16f08:	f007 b97f 	b.w	1e20a <memset>
	switch (smp->method) {
   16f0c:	3a05      	subs	r2, #5
   16f0e:	2a01      	cmp	r2, #1
   16f10:	d9c4      	bls.n	16e9c <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   16f12:	f023 0301 	bic.w	r3, r3, #1
   16f16:	e7c3      	b.n	16ea0 <bt_smp_update_keys+0x80>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   16f18:	f022 0210 	bic.w	r2, r2, #16
   16f1c:	735a      	strb	r2, [r3, #13]
}
   16f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f20:	00025522 	.word	0x00025522

00016f24 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   16f24:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   16f26:	4b07      	ldr	r3, [pc, #28]	; (16f44 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   16f28:	4807      	ldr	r0, [pc, #28]	; (16f48 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   16f2a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   16f2e:	f003 0306 	and.w	r3, r3, #6
   16f32:	1f9a      	subs	r2, r3, #6
   16f34:	4253      	negs	r3, r2
   16f36:	4153      	adcs	r3, r2
   16f38:	4a04      	ldr	r2, [pc, #16]	; (16f4c <bt_smp_init+0x28>)
   16f3a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   16f3c:	f7f9 fe6a 	bl	10c14 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   16f40:	2000      	movs	r0, #0
   16f42:	bd08      	pop	{r3, pc}
   16f44:	20008000 	.word	0x20008000
   16f48:	200083b4 	.word	0x200083b4
   16f4c:	2000b748 	.word	0x2000b748

00016f50 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   16f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   16f52:	4d11      	ldr	r5, [pc, #68]	; (16f98 <bt_keys_get_addr+0x48>)
{
   16f54:	4606      	mov	r6, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   16f56:	782b      	ldrb	r3, [r5, #0]
{
   16f58:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   16f5a:	4283      	cmp	r3, r0
   16f5c:	d00b      	beq.n	16f76 <bt_keys_get_addr+0x26>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   16f5e:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   16f60:	2207      	movs	r2, #7
   16f62:	4669      	mov	r1, sp
   16f64:	480d      	ldr	r0, [pc, #52]	; (16f9c <bt_keys_get_addr+0x4c>)
   16f66:	9400      	str	r4, [sp, #0]
   16f68:	f8cd 4003 	str.w	r4, [sp, #3]
   16f6c:	f007 f911 	bl	1e192 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   16f70:	b150      	cbz	r0, 16f88 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   16f72:	4620      	mov	r0, r4
   16f74:	e006      	b.n	16f84 <bt_keys_get_addr+0x34>
   16f76:	2207      	movs	r2, #7
   16f78:	1c68      	adds	r0, r5, #1
   16f7a:	f007 f90a 	bl	1e192 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   16f7e:	2800      	cmp	r0, #0
   16f80:	d1ed      	bne.n	16f5e <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   16f82:	4628      	mov	r0, r5
}
   16f84:	b003      	add	sp, #12
   16f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   16f88:	2207      	movs	r2, #7
   16f8a:	4639      	mov	r1, r7
   16f8c:	4803      	ldr	r0, [pc, #12]	; (16f9c <bt_keys_get_addr+0x4c>)
		keys->id = id;
   16f8e:	702e      	strb	r6, [r5, #0]
   16f90:	f007 f910 	bl	1e1b4 <memcpy>
		return keys;
   16f94:	4800      	ldr	r0, [pc, #0]	; (16f98 <bt_keys_get_addr+0x48>)
}
   16f96:	e7f5      	b.n	16f84 <bt_keys_get_addr+0x34>
   16f98:	20009d40 	.word	0x20009d40
   16f9c:	20009d41 	.word	0x20009d41

00016fa0 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   16fa0:	460b      	mov	r3, r1
   16fa2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   16fa4:	4a04      	ldr	r2, [pc, #16]	; (16fb8 <bt_keys_foreach+0x18>)
{
   16fa6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   16fa8:	89d4      	ldrh	r4, [r2, #14]
   16faa:	4204      	tst	r4, r0
   16fac:	d002      	beq.n	16fb4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
   16fae:	4610      	mov	r0, r2
		}
	}
}
   16fb0:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   16fb2:	4718      	bx	r3
}
   16fb4:	bc10      	pop	{r4}
   16fb6:	4770      	bx	lr
   16fb8:	20009d40 	.word	0x20009d40

00016fbc <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   16fbc:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   16fbe:	2200      	movs	r2, #0
   16fc0:	2002      	movs	r0, #2
   16fc2:	4902      	ldr	r1, [pc, #8]	; (16fcc <keys_commit+0x10>)
   16fc4:	f7ff ffec 	bl	16fa0 <bt_keys_foreach>
	}

	return 0;
}
   16fc8:	2000      	movs	r0, #0
   16fca:	bd08      	pop	{r3, pc}
   16fcc:	0002044b 	.word	0x0002044b

00016fd0 <bt_keys_find>:
{
   16fd0:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   16fd2:	4c09      	ldr	r4, [pc, #36]	; (16ff8 <bt_keys_find+0x28>)
{
   16fd4:	460b      	mov	r3, r1
   16fd6:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   16fd8:	89e2      	ldrh	r2, [r4, #14]
   16fda:	4202      	tst	r2, r0
   16fdc:	d007      	beq.n	16fee <bt_keys_find+0x1e>
   16fde:	7822      	ldrb	r2, [r4, #0]
   16fe0:	429a      	cmp	r2, r3
   16fe2:	d104      	bne.n	16fee <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   16fe4:	2207      	movs	r2, #7
   16fe6:	1c60      	adds	r0, r4, #1
   16fe8:	f007 f8d3 	bl	1e192 <memcmp>
   16fec:	b108      	cbz	r0, 16ff2 <bt_keys_find+0x22>
	return NULL;
   16fee:	2000      	movs	r0, #0
}
   16ff0:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   16ff2:	4620      	mov	r0, r4
   16ff4:	e7fc      	b.n	16ff0 <bt_keys_find+0x20>
   16ff6:	bf00      	nop
   16ff8:	20009d40 	.word	0x20009d40

00016ffc <bt_keys_find_irk>:
{
   16ffc:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   16ffe:	780b      	ldrb	r3, [r1, #0]
   17000:	4606      	mov	r6, r0
   17002:	2b01      	cmp	r3, #1
   17004:	460d      	mov	r5, r1
   17006:	d001      	beq.n	1700c <bt_keys_find_irk+0x10>
		return NULL;
   17008:	2000      	movs	r0, #0
}
   1700a:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1700c:	798b      	ldrb	r3, [r1, #6]
   1700e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17012:	2b40      	cmp	r3, #64	; 0x40
   17014:	d1f8      	bne.n	17008 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   17016:	4c12      	ldr	r4, [pc, #72]	; (17060 <bt_keys_find_irk+0x64>)
   17018:	89e3      	ldrh	r3, [r4, #14]
   1701a:	079b      	lsls	r3, r3, #30
   1701c:	d5f4      	bpl.n	17008 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1701e:	7823      	ldrb	r3, [r4, #0]
   17020:	42b3      	cmp	r3, r6
   17022:	d10b      	bne.n	1703c <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   17024:	2206      	movs	r2, #6
   17026:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1702a:	1c68      	adds	r0, r5, #1
   1702c:	f007 f8b1 	bl	1e192 <memcmp>
   17030:	b908      	cbnz	r0, 17036 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   17032:	4620      	mov	r0, r4
   17034:	e7e9      	b.n	1700a <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   17036:	89e3      	ldrh	r3, [r4, #14]
   17038:	079a      	lsls	r2, r3, #30
   1703a:	d5e5      	bpl.n	17008 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1703c:	7823      	ldrb	r3, [r4, #0]
   1703e:	42b3      	cmp	r3, r6
   17040:	d1e2      	bne.n	17008 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   17042:	3501      	adds	r5, #1
   17044:	4629      	mov	r1, r5
   17046:	4807      	ldr	r0, [pc, #28]	; (17064 <bt_keys_find_irk+0x68>)
   17048:	f007 f905 	bl	1e256 <bt_rpa_irk_matches>
   1704c:	2800      	cmp	r0, #0
   1704e:	d0db      	beq.n	17008 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   17050:	2206      	movs	r2, #6
   17052:	4629      	mov	r1, r5
   17054:	4804      	ldr	r0, [pc, #16]	; (17068 <bt_keys_find_irk+0x6c>)
   17056:	f007 f8ad 	bl	1e1b4 <memcpy>
			return &key_pool[i];
   1705a:	4801      	ldr	r0, [pc, #4]	; (17060 <bt_keys_find_irk+0x64>)
}
   1705c:	e7d5      	b.n	1700a <bt_keys_find_irk+0xe>
   1705e:	bf00      	nop
   17060:	20009d40 	.word	0x20009d40
   17064:	20009d6a 	.word	0x20009d6a
   17068:	20009d7a 	.word	0x20009d7a

0001706c <bt_keys_find_addr>:
{
   1706c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1706e:	4c06      	ldr	r4, [pc, #24]	; (17088 <bt_keys_find_addr+0x1c>)
   17070:	7823      	ldrb	r3, [r4, #0]
   17072:	4283      	cmp	r3, r0
   17074:	d104      	bne.n	17080 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   17076:	2207      	movs	r2, #7
   17078:	1c60      	adds	r0, r4, #1
   1707a:	f007 f88a 	bl	1e192 <memcmp>
   1707e:	b108      	cbz	r0, 17084 <bt_keys_find_addr+0x18>
	return NULL;
   17080:	2000      	movs	r0, #0
}
   17082:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   17084:	4620      	mov	r0, r4
   17086:	e7fc      	b.n	17082 <bt_keys_find_addr+0x16>
   17088:	20009d40 	.word	0x20009d40

0001708c <bt_keys_clear>:
{
   1708c:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1708e:	7a03      	ldrb	r3, [r0, #8]
{
   17090:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   17092:	075b      	lsls	r3, r3, #29
{
   17094:	b08c      	sub	sp, #48	; 0x30
	if (keys->state & BT_KEYS_ID_ADDED) {
   17096:	d501      	bpl.n	1709c <bt_keys_clear+0x10>
		bt_id_del(keys);
   17098:	f7f8 fb46 	bl	f728 <bt_id_del>
		if (keys->id) {
   1709c:	4625      	mov	r5, r4
   1709e:	f815 2b01 	ldrb.w	r2, [r5], #1
   170a2:	b1b2      	cbz	r2, 170d2 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   170a4:	ae02      	add	r6, sp, #8
   170a6:	2104      	movs	r1, #4
   170a8:	4630      	mov	r0, r6
   170aa:	f005 fb31 	bl	1c710 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   170ae:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   170b0:	462b      	mov	r3, r5
   170b2:	2124      	movs	r1, #36	; 0x24
   170b4:	4a08      	ldr	r2, [pc, #32]	; (170d8 <bt_keys_clear+0x4c>)
   170b6:	a803      	add	r0, sp, #12
   170b8:	f7f7 f940 	bl	e33c <bt_settings_encode_key>
		settings_delete(key);
   170bc:	a803      	add	r0, sp, #12
   170be:	f006 f854 	bl	1d16a <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   170c2:	225c      	movs	r2, #92	; 0x5c
   170c4:	2100      	movs	r1, #0
   170c6:	4620      	mov	r0, r4
}
   170c8:	b00c      	add	sp, #48	; 0x30
   170ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   170ce:	f007 b89c 	b.w	1e20a <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   170d2:	9200      	str	r2, [sp, #0]
   170d4:	e7ec      	b.n	170b0 <bt_keys_clear+0x24>
   170d6:	bf00      	nop
   170d8:	000259c8 	.word	0x000259c8

000170dc <keys_set>:
{
   170dc:	b570      	push	{r4, r5, r6, lr}
   170de:	4605      	mov	r5, r0
   170e0:	4614      	mov	r4, r2
   170e2:	4618      	mov	r0, r3
   170e4:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   170e6:	b945      	cbnz	r5, 170fa <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   170e8:	2145      	movs	r1, #69	; 0x45
   170ea:	4830      	ldr	r0, [pc, #192]	; (171ac <keys_set+0xd0>)
   170ec:	f005 fbaa 	bl	1c844 <printk>
		return -EINVAL;
   170f0:	f06f 0415 	mvn.w	r4, #21
}
   170f4:	4620      	mov	r0, r4
   170f6:	b018      	add	sp, #96	; 0x60
   170f8:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   170fa:	2250      	movs	r2, #80	; 0x50
   170fc:	a904      	add	r1, sp, #16
   170fe:	47a0      	blx	r4
	if (len < 0) {
   17100:	1e04      	subs	r4, r0, #0
   17102:	da05      	bge.n	17110 <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   17104:	4622      	mov	r2, r4
   17106:	2145      	movs	r1, #69	; 0x45
   17108:	4829      	ldr	r0, [pc, #164]	; (171b0 <keys_set+0xd4>)
   1710a:	f005 fb9b 	bl	1c844 <printk>
   1710e:	e7ef      	b.n	170f0 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   17110:	4628      	mov	r0, r5
   17112:	a902      	add	r1, sp, #8
   17114:	f007 f8c5 	bl	1e2a2 <bt_settings_decode_key>
	if (err) {
   17118:	4606      	mov	r6, r0
   1711a:	b118      	cbz	r0, 17124 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   1711c:	462a      	mov	r2, r5
   1711e:	2145      	movs	r1, #69	; 0x45
   17120:	4824      	ldr	r0, [pc, #144]	; (171b4 <keys_set+0xd8>)
   17122:	e7f2      	b.n	1710a <keys_set+0x2e>
	settings_name_next(name, &next);
   17124:	4628      	mov	r0, r5
   17126:	a901      	add	r1, sp, #4
   17128:	f006 f846 	bl	1d1b8 <settings_name_next>
	if (!next) {
   1712c:	9801      	ldr	r0, [sp, #4]
   1712e:	b120      	cbz	r0, 1713a <keys_set+0x5e>
		id = strtol(next, NULL, 10);
   17130:	220a      	movs	r2, #10
   17132:	4631      	mov	r1, r6
   17134:	f006 ff50 	bl	1dfd8 <strtol>
   17138:	b2c0      	uxtb	r0, r0
	if (!len) {
   1713a:	b99c      	cbnz	r4, 17164 <keys_set+0x88>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1713c:	4601      	mov	r1, r0
   1713e:	aa02      	add	r2, sp, #8
   17140:	203f      	movs	r0, #63	; 0x3f
   17142:	f7ff ff45 	bl	16fd0 <bt_keys_find>
		if (keys) {
   17146:	b120      	cbz	r0, 17152 <keys_set+0x76>
			(void)memset(keys, 0, sizeof(*keys));
   17148:	225c      	movs	r2, #92	; 0x5c
   1714a:	4621      	mov	r1, r4
   1714c:	f007 f85d 	bl	1e20a <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   17150:	e7d0      	b.n	170f4 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   17152:	a802      	add	r0, sp, #8
   17154:	f7f7 f852 	bl	e1fc <bt_addr_le_str_real>
   17158:	2157      	movs	r1, #87	; 0x57
   1715a:	4602      	mov	r2, r0
   1715c:	4816      	ldr	r0, [pc, #88]	; (171b8 <keys_set+0xdc>)
   1715e:	f005 fb71 	bl	1c844 <printk>
   17162:	e7c7      	b.n	170f4 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
   17164:	a902      	add	r1, sp, #8
   17166:	f7ff fef3 	bl	16f50 <bt_keys_get_addr>
	if (!keys) {
   1716a:	4605      	mov	r5, r0
   1716c:	b950      	cbnz	r0, 17184 <keys_set+0xa8>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1716e:	a802      	add	r0, sp, #8
   17170:	f7f7 f844 	bl	e1fc <bt_addr_le_str_real>
   17174:	2145      	movs	r1, #69	; 0x45
   17176:	4602      	mov	r2, r0
   17178:	4810      	ldr	r0, [pc, #64]	; (171bc <keys_set+0xe0>)
   1717a:	f005 fb63 	bl	1c844 <printk>
		return -ENOMEM;
   1717e:	f06f 040b 	mvn.w	r4, #11
   17182:	e7b7      	b.n	170f4 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   17184:	2c50      	cmp	r4, #80	; 0x50
   17186:	d009      	beq.n	1719c <keys_set+0xc0>
			BT_ERR("Invalid key length %zd != %zu", len,
   17188:	2350      	movs	r3, #80	; 0x50
   1718a:	4622      	mov	r2, r4
   1718c:	2145      	movs	r1, #69	; 0x45
   1718e:	480c      	ldr	r0, [pc, #48]	; (171c0 <keys_set+0xe4>)
   17190:	f005 fb58 	bl	1c844 <printk>
			bt_keys_clear(keys);
   17194:	4628      	mov	r0, r5
   17196:	f7ff ff79 	bl	1708c <bt_keys_clear>
			return -EINVAL;
   1719a:	e7a9      	b.n	170f0 <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   1719c:	4622      	mov	r2, r4
   1719e:	a904      	add	r1, sp, #16
   171a0:	300c      	adds	r0, #12
   171a2:	f007 f807 	bl	1e1b4 <memcpy>
	return 0;
   171a6:	2400      	movs	r4, #0
   171a8:	e7a4      	b.n	170f4 <keys_set+0x18>
   171aa:	bf00      	nop
   171ac:	00023e3d 	.word	0x00023e3d
   171b0:	00025910 	.word	0x00025910
   171b4:	00025178 	.word	0x00025178
   171b8:	00025934 	.word	0x00025934
   171bc:	0002595c 	.word	0x0002595c
   171c0:	00025980 	.word	0x00025980

000171c4 <bt_keys_store>:
{
   171c4:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   171c6:	4605      	mov	r5, r0
   171c8:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   171cc:	4604      	mov	r4, r0
   171ce:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   171d0:	b1da      	cbz	r2, 1720a <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
   171d2:	ae02      	add	r6, sp, #8
   171d4:	2104      	movs	r1, #4
   171d6:	4630      	mov	r0, r6
   171d8:	f005 fa9a 	bl	1c710 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   171dc:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   171de:	462b      	mov	r3, r5
   171e0:	2124      	movs	r1, #36	; 0x24
   171e2:	4a0b      	ldr	r2, [pc, #44]	; (17210 <bt_keys_store+0x4c>)
   171e4:	a803      	add	r0, sp, #12
   171e6:	f7f7 f8a9 	bl	e33c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   171ea:	f104 010c 	add.w	r1, r4, #12
   171ee:	2250      	movs	r2, #80	; 0x50
   171f0:	a803      	add	r0, sp, #12
   171f2:	f7f4 fb7d 	bl	b8f0 <settings_save_one>
	if (err) {
   171f6:	4604      	mov	r4, r0
   171f8:	b120      	cbz	r0, 17204 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
   171fa:	4602      	mov	r2, r0
   171fc:	2145      	movs	r1, #69	; 0x45
   171fe:	4805      	ldr	r0, [pc, #20]	; (17214 <bt_keys_store+0x50>)
   17200:	f005 fb20 	bl	1c844 <printk>
}
   17204:	4620      	mov	r0, r4
   17206:	b00c      	add	sp, #48	; 0x30
   17208:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1720a:	9200      	str	r2, [sp, #0]
   1720c:	e7e7      	b.n	171de <bt_keys_store+0x1a>
   1720e:	bf00      	nop
   17210:	000259c8 	.word	0x000259c8
   17214:	000259a3 	.word	0x000259a3

00017218 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   17218:	222c      	movs	r2, #44	; 0x2c
   1721a:	4b02      	ldr	r3, [pc, #8]	; (17224 <net_buf_pool_get+0xc>)
   1721c:	fb02 3000 	mla	r0, r2, r0, r3
   17220:	4770      	bx	lr
   17222:	bf00      	nop
   17224:	20008594 	.word	0x20008594

00017228 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   17228:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1722a:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1722c:	4b04      	ldr	r3, [pc, #16]	; (17240 <net_buf_id+0x18>)
   1722e:	fb01 3302 	mla	r3, r1, r2, r3
   17232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17234:	1ac0      	subs	r0, r0, r3
}
   17236:	4b03      	ldr	r3, [pc, #12]	; (17244 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   17238:	10c0      	asrs	r0, r0, #3
}
   1723a:	4358      	muls	r0, r3
   1723c:	4770      	bx	lr
   1723e:	bf00      	nop
   17240:	20008594 	.word	0x20008594
   17244:	aaaaaaab 	.word	0xaaaaaaab

00017248 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   17248:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1724a:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1724c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1724e:	4b09      	ldr	r3, [pc, #36]	; (17274 <fixed_data_alloc+0x2c>)
   17250:	fb04 3302 	mla	r3, r4, r2, r3
   17254:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   17256:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17258:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1725a:	6823      	ldr	r3, [r4, #0]
   1725c:	429a      	cmp	r2, r3
   1725e:	bf94      	ite	ls
   17260:	600a      	strls	r2, [r1, #0]
   17262:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   17264:	f7ff ffe0 	bl	17228 <net_buf_id>
   17268:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1726c:	fb02 3000 	mla	r0, r2, r0, r3
   17270:	bd10      	pop	{r4, pc}
   17272:	bf00      	nop
   17274:	20008594 	.word	0x20008594

00017278 <net_buf_reset>:
{
   17278:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1727a:	7943      	ldrb	r3, [r0, #5]
{
   1727c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1727e:	b143      	cbz	r3, 17292 <net_buf_reset+0x1a>
   17280:	490c      	ldr	r1, [pc, #48]	; (172b4 <net_buf_reset+0x3c>)
   17282:	480d      	ldr	r0, [pc, #52]	; (172b8 <net_buf_reset+0x40>)
   17284:	224f      	movs	r2, #79	; 0x4f
   17286:	f005 fadd 	bl	1c844 <printk>
   1728a:	214f      	movs	r1, #79	; 0x4f
   1728c:	4809      	ldr	r0, [pc, #36]	; (172b4 <net_buf_reset+0x3c>)
   1728e:	f005 fd7f 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   17292:	6823      	ldr	r3, [r4, #0]
   17294:	b143      	cbz	r3, 172a8 <net_buf_reset+0x30>
   17296:	4907      	ldr	r1, [pc, #28]	; (172b4 <net_buf_reset+0x3c>)
   17298:	4807      	ldr	r0, [pc, #28]	; (172b8 <net_buf_reset+0x40>)
   1729a:	2250      	movs	r2, #80	; 0x50
   1729c:	f005 fad2 	bl	1c844 <printk>
   172a0:	2150      	movs	r1, #80	; 0x50
   172a2:	4804      	ldr	r0, [pc, #16]	; (172b4 <net_buf_reset+0x3c>)
   172a4:	f005 fd74 	bl	1cd90 <assert_post_action>
	buf->len  = 0U;
   172a8:	2300      	movs	r3, #0
   172aa:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   172ac:	6923      	ldr	r3, [r4, #16]
   172ae:	60a3      	str	r3, [r4, #8]
}
   172b0:	bd10      	pop	{r4, pc}
   172b2:	bf00      	nop
   172b4:	000259d5 	.word	0x000259d5
   172b8:	00022c66 	.word	0x00022c66

000172bc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   172bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172c0:	4605      	mov	r5, r0
   172c2:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   172c4:	4610      	mov	r0, r2
   172c6:	4619      	mov	r1, r3
{
   172c8:	4691      	mov	r9, r2
   172ca:	4698      	mov	r8, r3
   172cc:	4617      	mov	r7, r2
   172ce:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   172d0:	f00a f89e 	bl	21410 <z_timeout_end_calc>
   172d4:	4682      	mov	sl, r0
   172d6:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   172d8:	b945      	cbnz	r5, 172ec <net_buf_alloc_len+0x30>
   172da:	494a      	ldr	r1, [pc, #296]	; (17404 <net_buf_alloc_len+0x148>)
   172dc:	484a      	ldr	r0, [pc, #296]	; (17408 <net_buf_alloc_len+0x14c>)
   172de:	22ed      	movs	r2, #237	; 0xed
   172e0:	f005 fab0 	bl	1c844 <printk>
   172e4:	21ed      	movs	r1, #237	; 0xed
   172e6:	4847      	ldr	r0, [pc, #284]	; (17404 <net_buf_alloc_len+0x148>)
   172e8:	f005 fd52 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   172ec:	f04f 0320 	mov.w	r3, #32
   172f0:	f3ef 8111 	mrs	r1, BASEPRI
   172f4:	f383 8811 	msr	BASEPRI, r3
   172f8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   172fc:	8beb      	ldrh	r3, [r5, #30]
   172fe:	2b00      	cmp	r3, #0
   17300:	d055      	beq.n	173ae <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   17302:	8baa      	ldrh	r2, [r5, #28]
   17304:	429a      	cmp	r2, r3
   17306:	d93e      	bls.n	17386 <net_buf_alloc_len+0xca>
   17308:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1730a:	2200      	movs	r2, #0
   1730c:	2300      	movs	r3, #0
   1730e:	4628      	mov	r0, r5
   17310:	f003 f86c 	bl	1a3ec <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   17314:	9900      	ldr	r1, [sp, #0]
   17316:	4604      	mov	r4, r0
   17318:	2800      	cmp	r0, #0
   1731a:	d034      	beq.n	17386 <net_buf_alloc_len+0xca>
	__asm__ volatile(
   1731c:	f381 8811 	msr	BASEPRI, r1
   17320:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   17324:	9d01      	ldr	r5, [sp, #4]
   17326:	2d00      	cmp	r5, #0
   17328:	d069      	beq.n	173fe <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1732a:	ea58 0309 	orrs.w	r3, r8, r9
   1732e:	d00f      	beq.n	17350 <net_buf_alloc_len+0x94>
   17330:	f1b8 3fff 	cmp.w	r8, #4294967295
   17334:	bf08      	it	eq
   17336:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1733a:	d009      	beq.n	17350 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1733c:	f004 fe40 	bl	1bfc0 <z_tick_get>
   17340:	ebba 0700 	subs.w	r7, sl, r0
   17344:	eb6b 0601 	sbc.w	r6, fp, r1
   17348:	2e00      	cmp	r6, #0
   1734a:	bfbc      	itt	lt
   1734c:	2700      	movlt	r7, #0
   1734e:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   17350:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17354:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   17356:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1740c <net_buf_alloc_len+0x150>
   1735a:	463a      	mov	r2, r7
   1735c:	fb09 8303 	mla	r3, r9, r3, r8
   17360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17362:	4620      	mov	r0, r4
   17364:	681b      	ldr	r3, [r3, #0]
   17366:	a901      	add	r1, sp, #4
   17368:	f8d3 a000 	ldr.w	sl, [r3]
   1736c:	4633      	mov	r3, r6
   1736e:	47d0      	blx	sl
   17370:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   17372:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   17374:	bb58      	cbnz	r0, 173ce <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   17376:	79a0      	ldrb	r0, [r4, #6]
   17378:	4621      	mov	r1, r4
   1737a:	fb00 8009 	mla	r0, r0, r9, r8
   1737e:	f009 ff7c 	bl	2127a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   17382:	4634      	mov	r4, r6
}
   17384:	e01f      	b.n	173c6 <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   17386:	8beb      	ldrh	r3, [r5, #30]
   17388:	1e5a      	subs	r2, r3, #1
   1738a:	83ea      	strh	r2, [r5, #30]
   1738c:	f381 8811 	msr	BASEPRI, r1
   17390:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   17394:	2018      	movs	r0, #24
   17396:	8bac      	ldrh	r4, [r5, #28]
   17398:	1ae3      	subs	r3, r4, r3
   1739a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1739c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   173a0:	481a      	ldr	r0, [pc, #104]	; (1740c <net_buf_alloc_len+0x150>)
   173a2:	4b1b      	ldr	r3, [pc, #108]	; (17410 <net_buf_alloc_len+0x154>)
   173a4:	1a2d      	subs	r5, r5, r0
   173a6:	10ad      	asrs	r5, r5, #2
   173a8:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   173aa:	71a5      	strb	r5, [r4, #6]
		goto success;
   173ac:	e7ba      	b.n	17324 <net_buf_alloc_len+0x68>
   173ae:	f381 8811 	msr	BASEPRI, r1
   173b2:	f3bf 8f6f 	isb	sy
   173b6:	464a      	mov	r2, r9
   173b8:	4643      	mov	r3, r8
   173ba:	4628      	mov	r0, r5
   173bc:	f003 f816 	bl	1a3ec <z_impl_k_queue_get>
	if (!buf) {
   173c0:	4604      	mov	r4, r0
   173c2:	2800      	cmp	r0, #0
   173c4:	d1ae      	bne.n	17324 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   173c6:	4620      	mov	r0, r4
   173c8:	b003      	add	sp, #12
   173ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   173ce:	9b01      	ldr	r3, [sp, #4]
   173d0:	429d      	cmp	r5, r3
   173d2:	d90a      	bls.n	173ea <net_buf_alloc_len+0x12e>
   173d4:	490b      	ldr	r1, [pc, #44]	; (17404 <net_buf_alloc_len+0x148>)
   173d6:	480c      	ldr	r0, [pc, #48]	; (17408 <net_buf_alloc_len+0x14c>)
   173d8:	f240 124d 	movw	r2, #333	; 0x14d
   173dc:	f005 fa32 	bl	1c844 <printk>
   173e0:	f240 114d 	movw	r1, #333	; 0x14d
   173e4:	4807      	ldr	r0, [pc, #28]	; (17404 <net_buf_alloc_len+0x148>)
   173e6:	f005 fcd3 	bl	1cd90 <assert_post_action>
	buf->frags = NULL;
   173ea:	2300      	movs	r3, #0
   173ec:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   173ee:	2301      	movs	r3, #1
   173f0:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   173f2:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   173f4:	4620      	mov	r0, r4
	buf->size  = size;
   173f6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   173f8:	f7ff ff3e 	bl	17278 <net_buf_reset>
	return buf;
   173fc:	e7e3      	b.n	173c6 <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   173fe:	6125      	str	r5, [r4, #16]
   17400:	e7f3      	b.n	173ea <net_buf_alloc_len+0x12e>
   17402:	bf00      	nop
   17404:	000259d5 	.word	0x000259d5
   17408:	00022c66 	.word	0x00022c66
   1740c:	20008594 	.word	0x20008594
   17410:	ba2e8ba3 	.word	0xba2e8ba3

00017414 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   17414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17418:	4606      	mov	r6, r0
   1741a:	f002 ffe7 	bl	1a3ec <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1741e:	4605      	mov	r5, r0
   17420:	b140      	cbz	r0, 17434 <net_buf_get+0x20>
   17422:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   17424:	4f11      	ldr	r7, [pc, #68]	; (1746c <net_buf_get+0x58>)
   17426:	f8df 8048 	ldr.w	r8, [pc, #72]	; 17470 <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1742a:	7963      	ldrb	r3, [r4, #5]
   1742c:	f013 0301 	ands.w	r3, r3, #1
   17430:	d103      	bne.n	1743a <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   17432:	6023      	str	r3, [r4, #0]

	return buf;
}
   17434:	4628      	mov	r0, r5
   17436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1743a:	2200      	movs	r2, #0
   1743c:	2300      	movs	r3, #0
   1743e:	4630      	mov	r0, r6
   17440:	f002 ffd4 	bl	1a3ec <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17444:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   17446:	b950      	cbnz	r0, 1745e <net_buf_get+0x4a>
   17448:	4639      	mov	r1, r7
   1744a:	4640      	mov	r0, r8
   1744c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   17450:	f005 f9f8 	bl	1c844 <printk>
   17454:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   17458:	4638      	mov	r0, r7
   1745a:	f005 fc99 	bl	1cd90 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1745e:	7963      	ldrb	r3, [r4, #5]
   17460:	f023 0301 	bic.w	r3, r3, #1
   17464:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17466:	6824      	ldr	r4, [r4, #0]
   17468:	e7df      	b.n	1742a <net_buf_get+0x16>
   1746a:	bf00      	nop
   1746c:	000259d5 	.word	0x000259d5
   17470:	00022c66 	.word	0x00022c66

00017474 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   17474:	b538      	push	{r3, r4, r5, lr}
   17476:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   17478:	4604      	mov	r4, r0
   1747a:	b950      	cbnz	r0, 17492 <net_buf_simple_reserve+0x1e>
   1747c:	490d      	ldr	r1, [pc, #52]	; (174b4 <net_buf_simple_reserve+0x40>)
   1747e:	480e      	ldr	r0, [pc, #56]	; (174b8 <net_buf_simple_reserve+0x44>)
   17480:	f240 12bb 	movw	r2, #443	; 0x1bb
   17484:	f005 f9de 	bl	1c844 <printk>
   17488:	f240 11bb 	movw	r1, #443	; 0x1bb
   1748c:	4809      	ldr	r0, [pc, #36]	; (174b4 <net_buf_simple_reserve+0x40>)
   1748e:	f005 fc7f 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   17492:	88a3      	ldrh	r3, [r4, #4]
   17494:	b153      	cbz	r3, 174ac <net_buf_simple_reserve+0x38>
   17496:	4907      	ldr	r1, [pc, #28]	; (174b4 <net_buf_simple_reserve+0x40>)
   17498:	4807      	ldr	r0, [pc, #28]	; (174b8 <net_buf_simple_reserve+0x44>)
   1749a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1749e:	f005 f9d1 	bl	1c844 <printk>
   174a2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   174a6:	4803      	ldr	r0, [pc, #12]	; (174b4 <net_buf_simple_reserve+0x40>)
   174a8:	f005 fc72 	bl	1cd90 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   174ac:	68a3      	ldr	r3, [r4, #8]
   174ae:	442b      	add	r3, r5
   174b0:	6023      	str	r3, [r4, #0]
}
   174b2:	bd38      	pop	{r3, r4, r5, pc}
   174b4:	000259d5 	.word	0x000259d5
   174b8:	00022c66 	.word	0x00022c66

000174bc <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   174bc:	b538      	push	{r3, r4, r5, lr}
   174be:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   174c0:	4605      	mov	r5, r0
   174c2:	b950      	cbnz	r0, 174da <net_buf_put+0x1e>
   174c4:	4912      	ldr	r1, [pc, #72]	; (17510 <net_buf_put+0x54>)
   174c6:	4813      	ldr	r0, [pc, #76]	; (17514 <net_buf_put+0x58>)
   174c8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   174cc:	f005 f9ba 	bl	1c844 <printk>
   174d0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   174d4:	480e      	ldr	r0, [pc, #56]	; (17510 <net_buf_put+0x54>)
   174d6:	f005 fc5b 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   174da:	b954      	cbnz	r4, 174f2 <net_buf_put+0x36>
   174dc:	490c      	ldr	r1, [pc, #48]	; (17510 <net_buf_put+0x54>)
   174de:	480d      	ldr	r0, [pc, #52]	; (17514 <net_buf_put+0x58>)
   174e0:	f240 12f9 	movw	r2, #505	; 0x1f9
   174e4:	f005 f9ae 	bl	1c844 <printk>
   174e8:	f240 11f9 	movw	r1, #505	; 0x1f9
   174ec:	4808      	ldr	r0, [pc, #32]	; (17510 <net_buf_put+0x54>)
   174ee:	f005 fc4f 	bl	1cd90 <assert_post_action>
{
   174f2:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   174f4:	6811      	ldr	r1, [r2, #0]
   174f6:	b929      	cbnz	r1, 17504 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   174f8:	4621      	mov	r1, r4
   174fa:	4628      	mov	r0, r5
}
   174fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   17500:	f002 bf20 	b.w	1a344 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   17504:	7953      	ldrb	r3, [r2, #5]
   17506:	f043 0301 	orr.w	r3, r3, #1
   1750a:	7153      	strb	r3, [r2, #5]
   1750c:	460a      	mov	r2, r1
   1750e:	e7f1      	b.n	174f4 <net_buf_put+0x38>
   17510:	000259d5 	.word	0x000259d5
   17514:	00022c66 	.word	0x00022c66

00017518 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1751c:	4605      	mov	r5, r0
   1751e:	b328      	cbz	r0, 1756c <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17520:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   17522:	f04f 082c 	mov.w	r8, #44	; 0x2c
   17526:	4e1b      	ldr	r6, [pc, #108]	; (17594 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   17528:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1752a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1752c:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1752e:	3b01      	subs	r3, #1
   17530:	b2db      	uxtb	r3, r3
   17532:	7123      	strb	r3, [r4, #4]
   17534:	b9c3      	cbnz	r3, 17568 <net_buf_unref+0x50>
		if (buf->__buf) {
   17536:	6921      	ldr	r1, [r4, #16]
   17538:	b159      	cbz	r1, 17552 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1753a:	7963      	ldrb	r3, [r4, #5]
   1753c:	079b      	lsls	r3, r3, #30
   1753e:	d407      	bmi.n	17550 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17540:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   17542:	4620      	mov	r0, r4
   17544:	fb08 6303 	mla	r3, r8, r3, r6
   17548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1754a:	681b      	ldr	r3, [r3, #0]
   1754c:	689b      	ldr	r3, [r3, #8]
   1754e:	4798      	blx	r3
			buf->__buf = NULL;
   17550:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   17552:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   17554:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   17556:	fb08 6300 	mla	r3, r8, r0, r6
   1755a:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   1755c:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1755e:	b193      	cbz	r3, 17586 <net_buf_unref+0x6e>
			pool->destroy(buf);
   17560:	4620      	mov	r0, r4
   17562:	4798      	blx	r3
	while (buf) {
   17564:	2d00      	cmp	r5, #0
   17566:	d1df      	bne.n	17528 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   17568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1756c:	490a      	ldr	r1, [pc, #40]	; (17598 <net_buf_unref+0x80>)
   1756e:	480b      	ldr	r0, [pc, #44]	; (1759c <net_buf_unref+0x84>)
   17570:	f44f 7202 	mov.w	r2, #520	; 0x208
   17574:	f005 f966 	bl	1c844 <printk>
}
   17578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1757c:	f44f 7102 	mov.w	r1, #520	; 0x208
   17580:	4805      	ldr	r0, [pc, #20]	; (17598 <net_buf_unref+0x80>)
   17582:	f005 bc05 	b.w	1cd90 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   17586:	4621      	mov	r1, r4
   17588:	fb00 6008 	mla	r0, r0, r8, r6
   1758c:	f009 fe75 	bl	2127a <k_queue_prepend>
}
   17590:	e7e8      	b.n	17564 <net_buf_unref+0x4c>
   17592:	bf00      	nop
   17594:	20008594 	.word	0x20008594
   17598:	000259d5 	.word	0x000259d5
   1759c:	00022c66 	.word	0x00022c66

000175a0 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   175a0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   175a2:	4604      	mov	r4, r0
   175a4:	b950      	cbnz	r0, 175bc <net_buf_ref+0x1c>
   175a6:	4908      	ldr	r1, [pc, #32]	; (175c8 <net_buf_ref+0x28>)
   175a8:	4808      	ldr	r0, [pc, #32]	; (175cc <net_buf_ref+0x2c>)
   175aa:	f240 2237 	movw	r2, #567	; 0x237
   175ae:	f005 f949 	bl	1c844 <printk>
   175b2:	f240 2137 	movw	r1, #567	; 0x237
   175b6:	4804      	ldr	r0, [pc, #16]	; (175c8 <net_buf_ref+0x28>)
   175b8:	f005 fbea 	bl	1cd90 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   175bc:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   175be:	4620      	mov	r0, r4
	buf->ref++;
   175c0:	3301      	adds	r3, #1
   175c2:	7123      	strb	r3, [r4, #4]
}
   175c4:	bd10      	pop	{r4, pc}
   175c6:	bf00      	nop
   175c8:	000259d5 	.word	0x000259d5
   175cc:	00022c66 	.word	0x00022c66

000175d0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   175d0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   175d2:	4604      	mov	r4, r0
   175d4:	b950      	cbnz	r0, 175ec <net_buf_frag_last+0x1c>
   175d6:	4908      	ldr	r1, [pc, #32]	; (175f8 <net_buf_frag_last+0x28>)
   175d8:	4808      	ldr	r0, [pc, #32]	; (175fc <net_buf_frag_last+0x2c>)
   175da:	f44f 721d 	mov.w	r2, #628	; 0x274
   175de:	f005 f931 	bl	1c844 <printk>
   175e2:	f44f 711d 	mov.w	r1, #628	; 0x274
   175e6:	4804      	ldr	r0, [pc, #16]	; (175f8 <net_buf_frag_last+0x28>)
   175e8:	f005 fbd2 	bl	1cd90 <assert_post_action>

	while (buf->frags) {
   175ec:	4620      	mov	r0, r4
   175ee:	6824      	ldr	r4, [r4, #0]
   175f0:	2c00      	cmp	r4, #0
   175f2:	d1fb      	bne.n	175ec <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   175f4:	bd10      	pop	{r4, pc}
   175f6:	bf00      	nop
   175f8:	000259d5 	.word	0x000259d5
   175fc:	00022c66 	.word	0x00022c66

00017600 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   17600:	b538      	push	{r3, r4, r5, lr}
   17602:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   17604:	4604      	mov	r4, r0
   17606:	b950      	cbnz	r0, 1761e <net_buf_frag_insert+0x1e>
   17608:	490f      	ldr	r1, [pc, #60]	; (17648 <net_buf_frag_insert+0x48>)
   1760a:	4810      	ldr	r0, [pc, #64]	; (1764c <net_buf_frag_insert+0x4c>)
   1760c:	f240 227f 	movw	r2, #639	; 0x27f
   17610:	f005 f918 	bl	1c844 <printk>
   17614:	f240 217f 	movw	r1, #639	; 0x27f
   17618:	480b      	ldr	r0, [pc, #44]	; (17648 <net_buf_frag_insert+0x48>)
   1761a:	f005 fbb9 	bl	1cd90 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1761e:	b955      	cbnz	r5, 17636 <net_buf_frag_insert+0x36>
   17620:	4909      	ldr	r1, [pc, #36]	; (17648 <net_buf_frag_insert+0x48>)
   17622:	480a      	ldr	r0, [pc, #40]	; (1764c <net_buf_frag_insert+0x4c>)
   17624:	f44f 7220 	mov.w	r2, #640	; 0x280
   17628:	f005 f90c 	bl	1c844 <printk>
   1762c:	f44f 7120 	mov.w	r1, #640	; 0x280
   17630:	4805      	ldr	r0, [pc, #20]	; (17648 <net_buf_frag_insert+0x48>)
   17632:	f005 fbad 	bl	1cd90 <assert_post_action>

	if (parent->frags) {
   17636:	6823      	ldr	r3, [r4, #0]
   17638:	b123      	cbz	r3, 17644 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1763a:	4628      	mov	r0, r5
   1763c:	f7ff ffc8 	bl	175d0 <net_buf_frag_last>
   17640:	6823      	ldr	r3, [r4, #0]
   17642:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   17644:	6025      	str	r5, [r4, #0]
}
   17646:	bd38      	pop	{r3, r4, r5, pc}
   17648:	000259d5 	.word	0x000259d5
   1764c:	00022c66 	.word	0x00022c66

00017650 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   17650:	b538      	push	{r3, r4, r5, lr}
   17652:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   17654:	460d      	mov	r5, r1
   17656:	b951      	cbnz	r1, 1766e <net_buf_frag_add+0x1e>
   17658:	490c      	ldr	r1, [pc, #48]	; (1768c <net_buf_frag_add+0x3c>)
   1765a:	480d      	ldr	r0, [pc, #52]	; (17690 <net_buf_frag_add+0x40>)
   1765c:	f240 228b 	movw	r2, #651	; 0x28b
   17660:	f005 f8f0 	bl	1c844 <printk>
   17664:	f240 218b 	movw	r1, #651	; 0x28b
   17668:	4808      	ldr	r0, [pc, #32]	; (1768c <net_buf_frag_add+0x3c>)
   1766a:	f005 fb91 	bl	1cd90 <assert_post_action>

	if (!head) {
   1766e:	b924      	cbnz	r4, 1767a <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   17670:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   17672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   17676:	f7ff bf93 	b.w	175a0 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1767a:	4620      	mov	r0, r4
   1767c:	f7ff ffa8 	bl	175d0 <net_buf_frag_last>
   17680:	4629      	mov	r1, r5
   17682:	f7ff ffbd 	bl	17600 <net_buf_frag_insert>
}
   17686:	4620      	mov	r0, r4
   17688:	bd38      	pop	{r3, r4, r5, pc}
   1768a:	bf00      	nop
   1768c:	000259d5 	.word	0x000259d5
   17690:	00022c66 	.word	0x00022c66

00017694 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   17694:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   17696:	6882      	ldr	r2, [r0, #8]
   17698:	6803      	ldr	r3, [r0, #0]
{
   1769a:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   1769c:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1769e:	4299      	cmp	r1, r3
{
   176a0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   176a2:	d90a      	bls.n	176ba <net_buf_simple_push+0x26>
   176a4:	4908      	ldr	r1, [pc, #32]	; (176c8 <net_buf_simple_push+0x34>)
   176a6:	4809      	ldr	r0, [pc, #36]	; (176cc <net_buf_simple_push+0x38>)
   176a8:	f240 4204 	movw	r2, #1028	; 0x404
   176ac:	f005 f8ca 	bl	1c844 <printk>
   176b0:	f240 4104 	movw	r1, #1028	; 0x404
   176b4:	4804      	ldr	r0, [pc, #16]	; (176c8 <net_buf_simple_push+0x34>)
   176b6:	f005 fb6b 	bl	1cd90 <assert_post_action>
	buf->data -= len;
   176ba:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   176bc:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   176be:	1b40      	subs	r0, r0, r5
	buf->len += len;
   176c0:	440d      	add	r5, r1
	buf->data -= len;
   176c2:	6020      	str	r0, [r4, #0]
	buf->len += len;
   176c4:	80a5      	strh	r5, [r4, #4]
}
   176c6:	bd38      	pop	{r3, r4, r5, pc}
   176c8:	000259d5 	.word	0x000259d5
   176cc:	00022c66 	.word	0x00022c66

000176d0 <net_buf_simple_pull>:
{
   176d0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   176d2:	8883      	ldrh	r3, [r0, #4]
{
   176d4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   176d6:	428b      	cmp	r3, r1
{
   176d8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   176da:	d20a      	bcs.n	176f2 <net_buf_simple_pull+0x22>
   176dc:	4908      	ldr	r1, [pc, #32]	; (17700 <net_buf_simple_pull+0x30>)
   176de:	4809      	ldr	r0, [pc, #36]	; (17704 <net_buf_simple_pull+0x34>)
   176e0:	f240 4264 	movw	r2, #1124	; 0x464
   176e4:	f005 f8ae 	bl	1c844 <printk>
   176e8:	f240 4164 	movw	r1, #1124	; 0x464
   176ec:	4804      	ldr	r0, [pc, #16]	; (17700 <net_buf_simple_pull+0x30>)
   176ee:	f005 fb4f 	bl	1cd90 <assert_post_action>
	buf->len -= len;
   176f2:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   176f4:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   176f6:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   176f8:	4428      	add	r0, r5
	buf->len -= len;
   176fa:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   176fc:	6020      	str	r0, [r4, #0]
}
   176fe:	bd38      	pop	{r3, r4, r5, pc}
   17700:	000259d5 	.word	0x000259d5
   17704:	00022c66 	.word	0x00022c66

00017708 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   17708:	8883      	ldrh	r3, [r0, #4]
{
   1770a:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1770c:	428b      	cmp	r3, r1
{
   1770e:	4604      	mov	r4, r0
   17710:	460d      	mov	r5, r1
	void *data = buf->data;
   17712:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   17714:	d20a      	bcs.n	1772c <net_buf_simple_pull_mem+0x24>
   17716:	4909      	ldr	r1, [pc, #36]	; (1773c <net_buf_simple_pull_mem+0x34>)
   17718:	4809      	ldr	r0, [pc, #36]	; (17740 <net_buf_simple_pull_mem+0x38>)
   1771a:	f44f 628e 	mov.w	r2, #1136	; 0x470
   1771e:	f005 f891 	bl	1c844 <printk>
   17722:	f44f 618e 	mov.w	r1, #1136	; 0x470
   17726:	4805      	ldr	r0, [pc, #20]	; (1773c <net_buf_simple_pull_mem+0x34>)
   17728:	f005 fb32 	bl	1cd90 <assert_post_action>
	buf->len -= len;
   1772c:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1772e:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   17730:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   17732:	4429      	add	r1, r5
}
   17734:	4630      	mov	r0, r6
	buf->len -= len;
   17736:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   17738:	6021      	str	r1, [r4, #0]
}
   1773a:	bd70      	pop	{r4, r5, r6, pc}
   1773c:	000259d5 	.word	0x000259d5
   17740:	00022c66 	.word	0x00022c66

00017744 <net_buf_simple_add>:
{
   17744:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   17746:	6803      	ldr	r3, [r0, #0]
   17748:	8886      	ldrh	r6, [r0, #4]
   1774a:	4604      	mov	r4, r0
   1774c:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1774e:	f008 feb9 	bl	204c4 <net_buf_simple_tailroom>
   17752:	4288      	cmp	r0, r1
{
   17754:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   17756:	d20a      	bcs.n	1776e <net_buf_simple_add+0x2a>
   17758:	4907      	ldr	r1, [pc, #28]	; (17778 <net_buf_simple_add+0x34>)
   1775a:	4808      	ldr	r0, [pc, #32]	; (1777c <net_buf_simple_add+0x38>)
   1775c:	f240 3215 	movw	r2, #789	; 0x315
   17760:	f005 f870 	bl	1c844 <printk>
   17764:	f240 3115 	movw	r1, #789	; 0x315
   17768:	4803      	ldr	r0, [pc, #12]	; (17778 <net_buf_simple_add+0x34>)
   1776a:	f005 fb11 	bl	1cd90 <assert_post_action>
	buf->len += len;
   1776e:	88a1      	ldrh	r1, [r4, #4]
}
   17770:	4630      	mov	r0, r6
	buf->len += len;
   17772:	440d      	add	r5, r1
   17774:	80a5      	strh	r5, [r4, #4]
}
   17776:	bd70      	pop	{r4, r5, r6, pc}
   17778:	000259d5 	.word	0x000259d5
   1777c:	00022c66 	.word	0x00022c66

00017780 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   17780:	b570      	push	{r4, r5, r6, lr}
   17782:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   17784:	460c      	mov	r4, r1
	return port->data;
   17786:	68c5      	ldr	r5, [r0, #12]
   17788:	b941      	cbnz	r1, 1779c <gpio_nrfx_manage_callback+0x1c>
   1778a:	491e      	ldr	r1, [pc, #120]	; (17804 <gpio_nrfx_manage_callback+0x84>)
   1778c:	481e      	ldr	r0, [pc, #120]	; (17808 <gpio_nrfx_manage_callback+0x88>)
   1778e:	2224      	movs	r2, #36	; 0x24
   17790:	f005 f858 	bl	1c844 <printk>
   17794:	2124      	movs	r1, #36	; 0x24
   17796:	481b      	ldr	r0, [pc, #108]	; (17804 <gpio_nrfx_manage_callback+0x84>)
   17798:	f005 fafa 	bl	1cd90 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1779c:	6863      	ldr	r3, [r4, #4]
   1779e:	b943      	cbnz	r3, 177b2 <gpio_nrfx_manage_callback+0x32>
   177a0:	4918      	ldr	r1, [pc, #96]	; (17804 <gpio_nrfx_manage_callback+0x84>)
   177a2:	4819      	ldr	r0, [pc, #100]	; (17808 <gpio_nrfx_manage_callback+0x88>)
   177a4:	2225      	movs	r2, #37	; 0x25
   177a6:	f005 f84d 	bl	1c844 <printk>
   177aa:	2125      	movs	r1, #37	; 0x25
   177ac:	4815      	ldr	r0, [pc, #84]	; (17804 <gpio_nrfx_manage_callback+0x84>)
   177ae:	f005 faef 	bl	1cd90 <assert_post_action>
	return list->head;
   177b2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   177b4:	b15b      	cbz	r3, 177ce <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   177b6:	2200      	movs	r2, #0
   177b8:	429c      	cmp	r4, r3
   177ba:	d112      	bne.n	177e2 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   177bc:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   177be:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   177c0:	b952      	cbnz	r2, 177d8 <gpio_nrfx_manage_callback+0x58>
   177c2:	42a1      	cmp	r1, r4
	list->head = node;
   177c4:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   177c6:	d100      	bne.n	177ca <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   177c8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   177ca:	2300      	movs	r3, #0
   177cc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   177ce:	b96e      	cbnz	r6, 177ec <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   177d0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   177d2:	bd70      	pop	{r4, r5, r6, pc}
   177d4:	460b      	mov	r3, r1
   177d6:	e7ef      	b.n	177b8 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   177d8:	42a1      	cmp	r1, r4
	parent->next = child;
   177da:	6013      	str	r3, [r2, #0]
	list->tail = node;
   177dc:	bf08      	it	eq
   177de:	60aa      	streq	r2, [r5, #8]
}
   177e0:	e7f3      	b.n	177ca <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   177e2:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   177e4:	461a      	mov	r2, r3
   177e6:	2900      	cmp	r1, #0
   177e8:	d1f4      	bne.n	177d4 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   177ea:	b13e      	cbz	r6, 177fc <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   177ec:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   177ee:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   177f0:	6023      	str	r3, [r4, #0]
	list->head = node;
   177f2:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   177f4:	2800      	cmp	r0, #0
   177f6:	d1eb      	bne.n	177d0 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   177f8:	60ac      	str	r4, [r5, #8]
}
   177fa:	e7ea      	b.n	177d2 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   177fc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   17800:	e7e7      	b.n	177d2 <gpio_nrfx_manage_callback+0x52>
   17802:	bf00      	nop
   17804:	00025a01 	.word	0x00025a01
   17808:	00022c66 	.word	0x00022c66

0001780c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1780c:	6802      	ldr	r2, [r0, #0]
{
   1780e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   17810:	0953      	lsrs	r3, r2, #5
{
   17812:	4604      	mov	r4, r0
    switch (port)
   17814:	d029      	beq.n	1786a <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   17816:	2b01      	cmp	r3, #1
   17818:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1781c:	bf18      	it	ne
   1781e:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   17820:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   17824:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17826:	07db      	lsls	r3, r3, #31
   17828:	d40a      	bmi.n	17840 <nrf_gpio_pin_port_decode+0x34>
   1782a:	4912      	ldr	r1, [pc, #72]	; (17874 <nrf_gpio_pin_port_decode+0x68>)
   1782c:	4812      	ldr	r0, [pc, #72]	; (17878 <nrf_gpio_pin_port_decode+0x6c>)
   1782e:	f240 221a 	movw	r2, #538	; 0x21a
   17832:	f005 f807 	bl	1c844 <printk>
   17836:	f240 211a 	movw	r1, #538	; 0x21a
   1783a:	480e      	ldr	r0, [pc, #56]	; (17874 <nrf_gpio_pin_port_decode+0x68>)
   1783c:	f005 faa8 	bl	1cd90 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   17840:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   17842:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17846:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   17848:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1784a:	d00c      	beq.n	17866 <nrf_gpio_pin_port_decode+0x5a>
   1784c:	2b01      	cmp	r3, #1
   1784e:	d00f      	beq.n	17870 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   17850:	4908      	ldr	r1, [pc, #32]	; (17874 <nrf_gpio_pin_port_decode+0x68>)
   17852:	4809      	ldr	r0, [pc, #36]	; (17878 <nrf_gpio_pin_port_decode+0x6c>)
   17854:	f240 221f 	movw	r2, #543	; 0x21f
   17858:	f004 fff4 	bl	1c844 <printk>
   1785c:	f240 211f 	movw	r1, #543	; 0x21f
   17860:	4804      	ldr	r0, [pc, #16]	; (17874 <nrf_gpio_pin_port_decode+0x68>)
   17862:	f005 fa95 	bl	1cd90 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17866:	4805      	ldr	r0, [pc, #20]	; (1787c <nrf_gpio_pin_port_decode+0x70>)
}
   17868:	bd10      	pop	{r4, pc}
    switch (port)
   1786a:	f04f 33ff 	mov.w	r3, #4294967295
   1786e:	e7d7      	b.n	17820 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   17870:	4803      	ldr	r0, [pc, #12]	; (17880 <nrf_gpio_pin_port_decode+0x74>)
   17872:	e7f9      	b.n	17868 <nrf_gpio_pin_port_decode+0x5c>
   17874:	00025a2e 	.word	0x00025a2e
   17878:	00022c66 	.word	0x00022c66
   1787c:	40842500 	.word	0x40842500
   17880:	40842800 	.word	0x40842800

00017884 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17884:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   17886:	4b09      	ldr	r3, [pc, #36]	; (178ac <gpio_nrfx_init+0x28>)
   17888:	781a      	ldrb	r2, [r3, #0]
   1788a:	b96a      	cbnz	r2, 178a8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1788c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1788e:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   17890:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17892:	2105      	movs	r1, #5
   17894:	f7f5 ff3c 	bl	d710 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   17898:	202f      	movs	r0, #47	; 0x2f
   1789a:	f7f5 ff1b 	bl	d6d4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1789e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   178a2:	4b03      	ldr	r3, [pc, #12]	; (178b0 <gpio_nrfx_init+0x2c>)
   178a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   178a8:	2000      	movs	r0, #0
   178aa:	bd08      	pop	{r3, pc}
   178ac:	2000b749 	.word	0x2000b749
   178b0:	4002f000 	.word	0x4002f000

000178b4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   178b4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   178b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   178bc:	4680      	mov	r8, r0
   178be:	460e      	mov	r6, r1
   178c0:	4617      	mov	r7, r2
   178c2:	4699      	mov	r9, r3
	return port->data;
   178c4:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   178c6:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   178ca:	f040 80ab 	bne.w	17a24 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   178ce:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   178d0:	a801      	add	r0, sp, #4
   178d2:	7a1b      	ldrb	r3, [r3, #8]
   178d4:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   178d8:	9301      	str	r3, [sp, #4]
   178da:	f7ff ff97 	bl	1780c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   178de:	9b01      	ldr	r3, [sp, #4]
   178e0:	3380      	adds	r3, #128	; 0x80
   178e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   178e6:	07d8      	lsls	r0, r3, #31
   178e8:	f100 80bb 	bmi.w	17a62 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   178ec:	2101      	movs	r1, #1
   178ee:	68e3      	ldr	r3, [r4, #12]
   178f0:	40b1      	lsls	r1, r6
   178f2:	4319      	orrs	r1, r3
   178f4:	60e1      	str	r1, [r4, #12]
   178f6:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   178f8:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   178fa:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   178fc:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   178fe:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   17902:	bf0c      	ite	eq
   17904:	430b      	orreq	r3, r1
   17906:	438b      	bicne	r3, r1
   17908:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1790a:	69a3      	ldr	r3, [r4, #24]
   1790c:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   17910:	bf0c      	ite	eq
   17912:	430b      	orreq	r3, r1
   17914:	438b      	bicne	r3, r1
   17916:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   17918:	6923      	ldr	r3, [r4, #16]
   1791a:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1791e:	bf0c      	ite	eq
   17920:	4319      	orreq	r1, r3
   17922:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17926:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1792a:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1792c:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1792e:	4a4e      	ldr	r2, [pc, #312]	; (17a68 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   17930:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   17934:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   17938:	f8d8 700c 	ldr.w	r7, [r8, #12]
   1793c:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1793e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   17942:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   17946:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1794a:	428d      	cmp	r5, r1
   1794c:	d175      	bne.n	17a3a <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   1794e:	fa23 f100 	lsr.w	r1, r3, r0
   17952:	07c9      	lsls	r1, r1, #31
   17954:	d571      	bpl.n	17a3a <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   17956:	0083      	lsls	r3, r0, #2
   17958:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1795c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   17960:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   17964:	f021 0101 	bic.w	r1, r1, #1
   17968:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1796c:	2301      	movs	r3, #1
   1796e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   17970:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   17974:	b2c0      	uxtb	r0, r0
   17976:	f001 fa8b 	bl	18e90 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1797a:	4628      	mov	r0, r5
   1797c:	2100      	movs	r1, #0
   1797e:	f008 fde5 	bl	2054c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   17982:	68f8      	ldr	r0, [r7, #12]
   17984:	40f0      	lsrs	r0, r6
   17986:	f010 0001 	ands.w	r0, r0, #1
   1798a:	d048      	beq.n	17a1e <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   1798c:	6978      	ldr	r0, [r7, #20]
   1798e:	40f0      	lsrs	r0, r6
   17990:	f010 0401 	ands.w	r4, r0, #1
   17994:	d059      	beq.n	17a4a <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   17996:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   17998:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   1799a:	40f3      	lsrs	r3, r6
   1799c:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1799e:	bf57      	itett	pl
   179a0:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   179a2:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   179a4:	fa21 f606 	lsrpl.w	r6, r1, r6
   179a8:	f006 0601 	andpl.w	r6, r6, #1
   179ac:	bf5c      	itt	pl
   179ae:	f1c6 0602 	rsbpl	r6, r6, #2
   179b2:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   179b4:	f001 fa8c 	bl	18ed0 <nrfx_gpiote_channel_alloc>
   179b8:	4b2c      	ldr	r3, [pc, #176]	; (17a6c <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   179ba:	4298      	cmp	r0, r3
   179bc:	d142      	bne.n	17a44 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   179be:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   179c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   179c4:	022d      	lsls	r5, r5, #8
   179c6:	008b      	lsls	r3, r1, #2
   179c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   179cc:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   179d0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   179d4:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   179d8:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   179dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   179e0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   179e4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   179e8:	4315      	orrs	r5, r2
   179ea:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   179ee:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   179f2:	4b1f      	ldr	r3, [pc, #124]	; (17a70 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   179f4:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   179f6:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   179f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   179fc:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   179fe:	008b      	lsls	r3, r1, #2
   17a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17a04:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   17a08:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17a0c:	f042 0201 	orr.w	r2, r2, #1
   17a10:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   17a14:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   17a16:	4a14      	ldr	r2, [pc, #80]	; (17a68 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   17a18:	408b      	lsls	r3, r1
   17a1a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17a1e:	b003      	add	sp, #12
   17a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17a24:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   17a28:	f47f af60 	bne.w	178ec <gpio_nrfx_pin_interrupt_configure+0x38>
   17a2c:	2101      	movs	r1, #1
   17a2e:	fa01 f306 	lsl.w	r3, r1, r6
   17a32:	68e1      	ldr	r1, [r4, #12]
   17a34:	ea21 0103 	bic.w	r1, r1, r3
   17a38:	e75c      	b.n	178f4 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17a3a:	3001      	adds	r0, #1
   17a3c:	2808      	cmp	r0, #8
   17a3e:	f47f af7e 	bne.w	1793e <gpio_nrfx_pin_interrupt_configure+0x8a>
   17a42:	e79a      	b.n	1797a <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   17a44:	f06f 0012 	mvn.w	r0, #18
   17a48:	e7e9      	b.n	17a1e <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   17a4a:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17a4c:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   17a4e:	40f1      	lsrs	r1, r6
   17a50:	f001 0101 	and.w	r1, r1, #1
   17a54:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17a58:	b2c9      	uxtb	r1, r1
   17a5a:	f008 fd77 	bl	2054c <nrf_gpio_cfg_sense_set>
	int res = 0;
   17a5e:	4620      	mov	r0, r4
   17a60:	e7dd      	b.n	17a1e <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   17a62:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17a66:	e7da      	b.n	17a1e <gpio_nrfx_pin_interrupt_configure+0x16a>
   17a68:	4002f000 	.word	0x4002f000
   17a6c:	0bad0000 	.word	0x0bad0000
   17a70:	4002f100 	.word	0x4002f100

00017a74 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17a74:	4b2e      	ldr	r3, [pc, #184]	; (17b30 <gpio_nrfx_config+0xbc>)
{
   17a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17a78:	4c2e      	ldr	r4, [pc, #184]	; (17b34 <gpio_nrfx_config+0xc0>)
   17a7a:	4013      	ands	r3, r2
   17a7c:	42a3      	cmp	r3, r4
	return port->config;
   17a7e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17a80:	d044      	beq.n	17b0c <gpio_nrfx_config+0x98>
   17a82:	d80e      	bhi.n	17aa2 <gpio_nrfx_config+0x2e>
   17a84:	2b06      	cmp	r3, #6
   17a86:	d043      	beq.n	17b10 <gpio_nrfx_config+0x9c>
   17a88:	d806      	bhi.n	17a98 <gpio_nrfx_config+0x24>
   17a8a:	2b00      	cmp	r3, #0
   17a8c:	d040      	beq.n	17b10 <gpio_nrfx_config+0x9c>
   17a8e:	2b02      	cmp	r3, #2
   17a90:	d040      	beq.n	17b14 <gpio_nrfx_config+0xa0>
   17a92:	f06f 0015 	mvn.w	r0, #21
   17a96:	e037      	b.n	17b08 <gpio_nrfx_config+0x94>
   17a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17a9c:	d1f9      	bne.n	17a92 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   17a9e:	2401      	movs	r4, #1
   17aa0:	e009      	b.n	17ab6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17aa2:	4c25      	ldr	r4, [pc, #148]	; (17b38 <gpio_nrfx_config+0xc4>)
   17aa4:	42a3      	cmp	r3, r4
   17aa6:	d037      	beq.n	17b18 <gpio_nrfx_config+0xa4>
   17aa8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   17aac:	d036      	beq.n	17b1c <gpio_nrfx_config+0xa8>
   17aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   17ab2:	d1ee      	bne.n	17a92 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   17ab4:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   17ab6:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17ab8:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   17abc:	bf4c      	ite	mi
   17abe:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   17ac0:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17ac4:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17ac8:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   17aca:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17ace:	d507      	bpl.n	17ae0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17ad0:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17ad2:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17ad6:	d523      	bpl.n	17b20 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   17ad8:	2301      	movs	r3, #1
   17ada:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   17adc:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   17ae0:	7a03      	ldrb	r3, [r0, #8]
   17ae2:	f001 011f 	and.w	r1, r1, #31
   17ae6:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17aea:	a801      	add	r0, sp, #4
   17aec:	9101      	str	r1, [sp, #4]
   17aee:	f7ff fe8d 	bl	1780c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   17af2:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   17af4:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   17af8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   17afc:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   17b00:	3280      	adds	r2, #128	; 0x80
   17b02:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   17b06:	2000      	movs	r0, #0
}
   17b08:	b003      	add	sp, #12
   17b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   17b0c:	2407      	movs	r4, #7
   17b0e:	e7d2      	b.n	17ab6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17b10:	461c      	mov	r4, r3
   17b12:	e7d0      	b.n	17ab6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   17b14:	2404      	movs	r4, #4
   17b16:	e7ce      	b.n	17ab6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   17b18:	2405      	movs	r4, #5
   17b1a:	e7cc      	b.n	17ab6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   17b1c:	2403      	movs	r4, #3
   17b1e:	e7ca      	b.n	17ab6 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   17b20:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   17b22:	bf42      	ittt	mi
   17b24:	2301      	movmi	r3, #1
   17b26:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   17b28:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   17b2c:	e7d8      	b.n	17ae0 <gpio_nrfx_config+0x6c>
   17b2e:	bf00      	nop
   17b30:	00f00006 	.word	0x00f00006
   17b34:	00100006 	.word	0x00100006
   17b38:	00400002 	.word	0x00400002

00017b3c <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   17b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17b40:	460f      	mov	r7, r1
   17b42:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17b44:	4604      	mov	r4, r0
   17b46:	b1e0      	cbz	r0, 17b82 <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   17b48:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   17b4a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 17b88 <gpio_fire_callbacks.isra.0+0x4c>
   17b4e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 17b8c <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   17b52:	68a3      	ldr	r3, [r4, #8]
   17b54:	421e      	tst	r6, r3
   17b56:	d010      	beq.n	17b7a <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   17b58:	6863      	ldr	r3, [r4, #4]
   17b5a:	b943      	cbnz	r3, 17b6e <gpio_fire_callbacks.isra.0+0x32>
   17b5c:	4641      	mov	r1, r8
   17b5e:	4648      	mov	r0, r9
   17b60:	2245      	movs	r2, #69	; 0x45
   17b62:	f004 fe6f 	bl	1c844 <printk>
   17b66:	2145      	movs	r1, #69	; 0x45
   17b68:	4640      	mov	r0, r8
   17b6a:	f005 f911 	bl	1cd90 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   17b6e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   17b72:	4621      	mov	r1, r4
   17b74:	4638      	mov	r0, r7
   17b76:	4032      	ands	r2, r6
   17b78:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17b7a:	b115      	cbz	r5, 17b82 <gpio_fire_callbacks.isra.0+0x46>
   17b7c:	462c      	mov	r4, r5
   17b7e:	682d      	ldr	r5, [r5, #0]
   17b80:	e7e7      	b.n	17b52 <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   17b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17b86:	bf00      	nop
   17b88:	00025a01 	.word	0x00025a01
   17b8c:	00022c66 	.word	0x00022c66

00017b90 <gpiote_event_handler>:
{
   17b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17b92:	2600      	movs	r6, #0
   17b94:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17b98:	4d28      	ldr	r5, [pc, #160]	; (17c3c <gpiote_event_handler+0xac>)
   17b9a:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   17b9e:	b15c      	cbz	r4, 17bb8 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   17ba0:	4827      	ldr	r0, [pc, #156]	; (17c40 <gpiote_event_handler+0xb0>)
   17ba2:	f008 fd0c 	bl	205be <check_level_trigger_pins>
		fired_triggers[0] =
   17ba6:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   17ba8:	4826      	ldr	r0, [pc, #152]	; (17c44 <gpiote_event_handler+0xb4>)
   17baa:	f008 fd08 	bl	205be <check_level_trigger_pins>
		fired_triggers[1] =
   17bae:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17bb0:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   17bb4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   17bb8:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   17bba:	2601      	movs	r6, #1
   17bbc:	4694      	mov	ip, r2
{
   17bbe:	4922      	ldr	r1, [pc, #136]	; (17c48 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   17bc0:	4d1e      	ldr	r5, [pc, #120]	; (17c3c <gpiote_event_handler+0xac>)
   17bc2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   17bc6:	fa06 f002 	lsl.w	r0, r6, r2
   17bca:	4218      	tst	r0, r3
   17bcc:	d016      	beq.n	17bfc <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17bce:	680b      	ldr	r3, [r1, #0]
   17bd0:	b1a3      	cbz	r3, 17bfc <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17bd2:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   17bd6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   17bda:	af02      	add	r7, sp, #8
   17bdc:	f3c3 3040 	ubfx	r0, r3, #13, #1
   17be0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   17be4:	f850 7c08 	ldr.w	r7, [r0, #-8]
   17be8:	f3c3 2304 	ubfx	r3, r3, #8, #5
   17bec:	fa06 f303 	lsl.w	r3, r6, r3
   17bf0:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17bf2:	f8c1 c000 	str.w	ip, [r1]
   17bf6:	f840 3c08 	str.w	r3, [r0, #-8]
   17bfa:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17bfc:	3201      	adds	r2, #1
   17bfe:	2a08      	cmp	r2, #8
   17c00:	f101 0104 	add.w	r1, r1, #4
   17c04:	d1dd      	bne.n	17bc2 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   17c06:	9a00      	ldr	r2, [sp, #0]
   17c08:	b122      	cbz	r2, 17c14 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   17c0a:	4b10      	ldr	r3, [pc, #64]	; (17c4c <gpiote_event_handler+0xbc>)
   17c0c:	490c      	ldr	r1, [pc, #48]	; (17c40 <gpiote_event_handler+0xb0>)
   17c0e:	6858      	ldr	r0, [r3, #4]
   17c10:	f7ff ff94 	bl	17b3c <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   17c14:	9a01      	ldr	r2, [sp, #4]
   17c16:	b122      	cbz	r2, 17c22 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   17c18:	4b0d      	ldr	r3, [pc, #52]	; (17c50 <gpiote_event_handler+0xc0>)
   17c1a:	490a      	ldr	r1, [pc, #40]	; (17c44 <gpiote_event_handler+0xb4>)
   17c1c:	6858      	ldr	r0, [r3, #4]
   17c1e:	f7ff ff8d 	bl	17b3c <gpio_fire_callbacks.isra.0>
	if (port_event) {
   17c22:	b144      	cbz	r4, 17c36 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   17c24:	4806      	ldr	r0, [pc, #24]	; (17c40 <gpiote_event_handler+0xb0>)
   17c26:	f008 fca4 	bl	20572 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   17c2a:	4806      	ldr	r0, [pc, #24]	; (17c44 <gpiote_event_handler+0xb4>)
}
   17c2c:	b003      	add	sp, #12
   17c2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   17c32:	f008 bc9e 	b.w	20572 <cfg_level_pins>
}
   17c36:	b003      	add	sp, #12
   17c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c3a:	bf00      	nop
   17c3c:	4002f000 	.word	0x4002f000
   17c40:	20008484 	.word	0x20008484
   17c44:	20008494 	.word	0x20008494
   17c48:	4002f100 	.word	0x4002f100
   17c4c:	20009d9c 	.word	0x20009d9c
   17c50:	20009db8 	.word	0x20009db8

00017c54 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   17c54:	4b02      	ldr	r3, [pc, #8]	; (17c60 <vipm_nrf_1_register_callback+0xc>)
   17c56:	6059      	str	r1, [r3, #4]
   17c58:	645a      	str	r2, [r3, #68]	; 0x44
   17c5a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   17c5e:	4770      	bx	lr
   17c60:	20009ddc 	.word	0x20009ddc

00017c64 <vipm_nrf_0_set_enabled>:
   17c64:	b508      	push	{r3, lr}
   17c66:	2145      	movs	r1, #69	; 0x45
   17c68:	4802      	ldr	r0, [pc, #8]	; (17c74 <vipm_nrf_0_set_enabled+0x10>)
   17c6a:	f004 fdeb 	bl	1c844 <printk>
   17c6e:	f06f 0015 	mvn.w	r0, #21
   17c72:	bd08      	pop	{r3, pc}
   17c74:	00025a6f 	.word	0x00025a6f

00017c78 <vipm_nrf_0_register_callback>:
   17c78:	2157      	movs	r1, #87	; 0x57
   17c7a:	4801      	ldr	r0, [pc, #4]	; (17c80 <vipm_nrf_0_register_callback+0x8>)
   17c7c:	f004 bde2 	b.w	1c844 <printk>
   17c80:	00025a90 	.word	0x00025a90

00017c84 <vipm_nrf_1_send>:
   17c84:	b508      	push	{r3, lr}
   17c86:	2145      	movs	r1, #69	; 0x45
   17c88:	4802      	ldr	r0, [pc, #8]	; (17c94 <vipm_nrf_1_send+0x10>)
   17c8a:	f004 fddb 	bl	1c844 <printk>
   17c8e:	f06f 0015 	mvn.w	r0, #21
   17c92:	bd08      	pop	{r3, pc}
   17c94:	00025ac7 	.word	0x00025ac7

00017c98 <vipm_nrf_init>:
{
   17c98:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   17c9a:	4d0b      	ldr	r5, [pc, #44]	; (17cc8 <vipm_nrf_init+0x30>)
   17c9c:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   17ca0:	b97c      	cbnz	r4, 17cc2 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   17ca2:	4a0a      	ldr	r2, [pc, #40]	; (17ccc <vipm_nrf_init+0x34>)
   17ca4:	490a      	ldr	r1, [pc, #40]	; (17cd0 <vipm_nrf_init+0x38>)
   17ca6:	4620      	mov	r0, r4
   17ca8:	f001 f94a 	bl	18f40 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   17cac:	4622      	mov	r2, r4
   17cae:	2101      	movs	r1, #1
   17cb0:	202a      	movs	r0, #42	; 0x2a
   17cb2:	f7f5 fd2d 	bl	d710 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   17cb6:	4807      	ldr	r0, [pc, #28]	; (17cd4 <vipm_nrf_init+0x3c>)
   17cb8:	f001 f968 	bl	18f8c <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   17cbc:	2301      	movs	r3, #1
   17cbe:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   17cc2:	2000      	movs	r0, #0
   17cc4:	bd38      	pop	{r3, r4, r5, pc}
   17cc6:	bf00      	nop
   17cc8:	20009ddc 	.word	0x20009ddc
   17ccc:	20009dd4 	.word	0x20009dd4
   17cd0:	00017cd9 	.word	0x00017cd9
   17cd4:	00022338 	.word	0x00022338

00017cd8 <vipm_dispatcher>:
{
   17cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17cdc:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   17cde:	4f17      	ldr	r7, [pc, #92]	; (17d3c <vipm_dispatcher+0x64>)
   17ce0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 17d40 <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17ce4:	4e17      	ldr	r6, [pc, #92]	; (17d44 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   17ce6:	b90d      	cbnz	r5, 17cec <vipm_dispatcher+0x14>
}
   17ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   17cec:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   17cf0:	b30c      	cbz	r4, 17d36 <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   17cf2:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   17cf6:	2b0f      	cmp	r3, #15
   17cf8:	461c      	mov	r4, r3
   17cfa:	dd08      	ble.n	17d0e <vipm_dispatcher+0x36>
   17cfc:	4639      	mov	r1, r7
   17cfe:	4640      	mov	r0, r8
   17d00:	2283      	movs	r2, #131	; 0x83
   17d02:	f004 fd9f 	bl	1c844 <printk>
   17d06:	2183      	movs	r1, #131	; 0x83
   17d08:	4638      	mov	r0, r7
   17d0a:	f005 f841 	bl	1cd90 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   17d0e:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17d10:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   17d14:	40a3      	lsls	r3, r4
   17d16:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   17d1a:	f1b9 0f00 	cmp.w	r9, #0
   17d1e:	d0e2      	beq.n	17ce6 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   17d20:	2300      	movs	r3, #0
   17d22:	f104 0110 	add.w	r1, r4, #16
   17d26:	3420      	adds	r4, #32
   17d28:	461a      	mov	r2, r3
   17d2a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   17d2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   17d32:	47c8      	blx	r9
   17d34:	e7d7      	b.n	17ce6 <vipm_dispatcher+0xe>
    return 32U;
   17d36:	2420      	movs	r4, #32
   17d38:	e7e0      	b.n	17cfc <vipm_dispatcher+0x24>
   17d3a:	bf00      	nop
   17d3c:	00025ae8 	.word	0x00025ae8
   17d40:	00022c66 	.word	0x00022c66
   17d44:	20009ddc 	.word	0x20009ddc

00017d48 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   17d48:	2a10      	cmp	r2, #16
   17d4a:	b508      	push	{r3, lr}
   17d4c:	d810      	bhi.n	17d70 <vipm_nrf_0_send+0x28>
   17d4e:	b11a      	cbz	r2, 17d58 <vipm_nrf_0_send+0x10>
   17d50:	2157      	movs	r1, #87	; 0x57
   17d52:	4809      	ldr	r0, [pc, #36]	; (17d78 <vipm_nrf_0_send+0x30>)
   17d54:	f004 fd76 	bl	1c844 <printk>
   17d58:	9b02      	ldr	r3, [sp, #8]
   17d5a:	2b00      	cmp	r3, #0
   17d5c:	dd03      	ble.n	17d66 <vipm_nrf_0_send+0x1e>
   17d5e:	2157      	movs	r1, #87	; 0x57
   17d60:	4806      	ldr	r0, [pc, #24]	; (17d7c <vipm_nrf_0_send+0x34>)
   17d62:	f004 fd6f 	bl	1c844 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17d66:	2201      	movs	r2, #1
   17d68:	2000      	movs	r0, #0
   17d6a:	4b05      	ldr	r3, [pc, #20]	; (17d80 <vipm_nrf_0_send+0x38>)
   17d6c:	601a      	str	r2, [r3, #0]
   17d6e:	bd08      	pop	{r3, pc}
   17d70:	f06f 0015 	mvn.w	r0, #21
   17d74:	e7fb      	b.n	17d6e <vipm_nrf_0_send+0x26>
   17d76:	bf00      	nop
   17d78:	00025b16 	.word	0x00025b16
   17d7c:	00025b4f 	.word	0x00025b4f
   17d80:	4002a000 	.word	0x4002a000

00017d84 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   17d84:	4b02      	ldr	r3, [pc, #8]	; (17d90 <flash_nrf_pages_layout+0xc>)
   17d86:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   17d88:	2301      	movs	r3, #1
   17d8a:	6013      	str	r3, [r2, #0]
}
   17d8c:	4770      	bx	lr
   17d8e:	bf00      	nop
   17d90:	20009ea0 	.word	0x20009ea0

00017d94 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   17d94:	4800      	ldr	r0, [pc, #0]	; (17d98 <flash_nrf_get_parameters+0x4>)
   17d96:	4770      	bx	lr
   17d98:	000223fc 	.word	0x000223fc

00017d9c <flash_nrf_read>:
{
   17d9c:	b570      	push	{r4, r5, r6, lr}
   17d9e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   17da0:	4619      	mov	r1, r3
   17da2:	4628      	mov	r0, r5
{
   17da4:	4616      	mov	r6, r2
   17da6:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   17da8:	f008 fc46 	bl	20638 <is_regular_addr_valid>
   17dac:	b940      	cbnz	r0, 17dc0 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17dae:	480d      	ldr	r0, [pc, #52]	; (17de4 <flash_nrf_read+0x48>)
   17db0:	4623      	mov	r3, r4
   17db2:	462a      	mov	r2, r5
   17db4:	2145      	movs	r1, #69	; 0x45
   17db6:	f004 fd45 	bl	1c844 <printk>
   17dba:	f06f 0015 	mvn.w	r0, #21
}
   17dbe:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   17dc0:	b16c      	cbz	r4, 17dde <flash_nrf_read+0x42>
	if (addr < PM_APP_ADDRESS) {
   17dc2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return spm_request_read(data, addr, len);
   17dc6:	4622      	mov	r2, r4
   17dc8:	4629      	mov	r1, r5
   17dca:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   17dcc:	da03      	bge.n	17dd6 <flash_nrf_read+0x3a>
}
   17dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   17dd2:	f005 bc38 	b.w	1d646 <spm_request_read>
	memcpy(data, (void *)addr, len);
   17dd6:	f006 f9ed 	bl	1e1b4 <memcpy>
	return 0;
   17dda:	2000      	movs	r0, #0
   17ddc:	e7ef      	b.n	17dbe <flash_nrf_read+0x22>
		return 0;
   17dde:	4620      	mov	r0, r4
   17de0:	e7ed      	b.n	17dbe <flash_nrf_read+0x22>
   17de2:	bf00      	nop
   17de4:	00025b92 	.word	0x00025b92

00017de8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   17de8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17dea:	2201      	movs	r2, #1
   17dec:	4806      	ldr	r0, [pc, #24]	; (17e08 <nrf_flash_init+0x20>)
   17dee:	4611      	mov	r1, r2
   17df0:	f009 fa90 	bl	21314 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   17df4:	f008 fdf2 	bl	209dc <nrfx_nvmc_flash_page_count_get>
   17df8:	4c04      	ldr	r4, [pc, #16]	; (17e0c <nrf_flash_init+0x24>)
   17dfa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   17dfc:	f008 fdeb 	bl	209d6 <nrfx_nvmc_flash_page_size_get>
   17e00:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   17e02:	2000      	movs	r0, #0
   17e04:	bd10      	pop	{r4, pc}
   17e06:	bf00      	nop
   17e08:	20009ea8 	.word	0x20009ea8
   17e0c:	20009ea0 	.word	0x20009ea0

00017e10 <flash_nrf_erase>:
{
   17e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e12:	460e      	mov	r6, r1
   17e14:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17e16:	f008 fdde 	bl	209d6 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   17e1a:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17e1c:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   17e1e:	4630      	mov	r0, r6
   17e20:	f008 fc0a 	bl	20638 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   17e24:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   17e26:	b348      	cbz	r0, 17e7c <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   17e28:	fbb6 f3f5 	udiv	r3, r6, r5
   17e2c:	fb05 6313 	mls	r3, r5, r3, r6
   17e30:	b923      	cbnz	r3, 17e3c <flash_nrf_erase+0x2c>
   17e32:	fbb4 f0f5 	udiv	r0, r4, r5
   17e36:	fb05 4010 	mls	r0, r5, r0, r4
   17e3a:	b140      	cbz	r0, 17e4e <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   17e3c:	4623      	mov	r3, r4
   17e3e:	4632      	mov	r2, r6
   17e40:	2145      	movs	r1, #69	; 0x45
   17e42:	4811      	ldr	r0, [pc, #68]	; (17e88 <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17e44:	f004 fcfe 	bl	1c844 <printk>
		return -EINVAL;
   17e48:	f06f 0015 	mvn.w	r0, #21
   17e4c:	e015      	b.n	17e7a <flash_nrf_erase+0x6a>
		if (!n_pages) {
   17e4e:	42a5      	cmp	r5, r4
   17e50:	d813      	bhi.n	17e7a <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   17e52:	f04f 32ff 	mov.w	r2, #4294967295
   17e56:	f04f 33ff 	mov.w	r3, #4294967295
   17e5a:	480c      	ldr	r0, [pc, #48]	; (17e8c <flash_nrf_erase+0x7c>)
   17e5c:	f003 fb6e 	bl	1b53c <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17e60:	f008 fdb9 	bl	209d6 <nrfx_nvmc_flash_page_size_get>
   17e64:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   17e66:	4638      	mov	r0, r7
   17e68:	f001 f94c 	bl	19104 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   17e6c:	1b64      	subs	r4, r4, r5
   17e6e:	442f      	add	r7, r5
   17e70:	d1f9      	bne.n	17e66 <flash_nrf_erase+0x56>
	z_impl_k_sem_give(sem);
   17e72:	4806      	ldr	r0, [pc, #24]	; (17e8c <flash_nrf_erase+0x7c>)
   17e74:	f003 fb26 	bl	1b4c4 <z_impl_k_sem_give>
	return ret;
   17e78:	4620      	mov	r0, r4
}
   17e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17e7c:	4623      	mov	r3, r4
   17e7e:	4632      	mov	r2, r6
   17e80:	2145      	movs	r1, #69	; 0x45
   17e82:	4803      	ldr	r0, [pc, #12]	; (17e90 <flash_nrf_erase+0x80>)
   17e84:	e7de      	b.n	17e44 <flash_nrf_erase+0x34>
   17e86:	bf00      	nop
   17e88:	00025bb4 	.word	0x00025bb4
   17e8c:	20009ea8 	.word	0x20009ea8
   17e90:	00025b92 	.word	0x00025b92

00017e94 <flash_nrf_write>:
{
   17e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e96:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   17e98:	4619      	mov	r1, r3
   17e9a:	4630      	mov	r0, r6
{
   17e9c:	4617      	mov	r7, r2
   17e9e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   17ea0:	f008 fbca 	bl	20638 <is_regular_addr_valid>
   17ea4:	b940      	cbnz	r0, 17eb8 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   17ea6:	4623      	mov	r3, r4
   17ea8:	4632      	mov	r2, r6
   17eaa:	2145      	movs	r1, #69	; 0x45
   17eac:	4817      	ldr	r0, [pc, #92]	; (17f0c <flash_nrf_write+0x78>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   17eae:	f004 fcc9 	bl	1c844 <printk>
		return -EINVAL;
   17eb2:	f06f 0015 	mvn.w	r0, #21
}
   17eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   17eb8:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   17ebc:	f015 0503 	ands.w	r5, r5, #3
   17ec0:	d004      	beq.n	17ecc <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   17ec2:	4623      	mov	r3, r4
   17ec4:	4632      	mov	r2, r6
   17ec6:	2145      	movs	r1, #69	; 0x45
   17ec8:	4811      	ldr	r0, [pc, #68]	; (17f10 <flash_nrf_write+0x7c>)
   17eca:	e7f0      	b.n	17eae <flash_nrf_write+0x1a>
	if (!len) {
   17ecc:	b1dc      	cbz	r4, 17f06 <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
   17ece:	f04f 32ff 	mov.w	r2, #4294967295
   17ed2:	f04f 33ff 	mov.w	r3, #4294967295
   17ed6:	480f      	ldr	r0, [pc, #60]	; (17f14 <flash_nrf_write+0x80>)
   17ed8:	f003 fb30 	bl	1b53c <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   17edc:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   17ee0:	42ac      	cmp	r4, r5
   17ee2:	eb05 0006 	add.w	r0, r5, r6
   17ee6:	d109      	bne.n	17efc <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   17ee8:	4a0b      	ldr	r2, [pc, #44]	; (17f18 <flash_nrf_write+0x84>)
   17eea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   17eee:	07db      	lsls	r3, r3, #31
   17ef0:	d5fb      	bpl.n	17eea <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
   17ef2:	4808      	ldr	r0, [pc, #32]	; (17f14 <flash_nrf_write+0x80>)
   17ef4:	f003 fae6 	bl	1b4c4 <z_impl_k_sem_give>
	return ret;
   17ef8:	2000      	movs	r0, #0
}
   17efa:	e7dc      	b.n	17eb6 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   17efc:	5979      	ldr	r1, [r7, r5]
   17efe:	f001 f931 	bl	19164 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   17f02:	3504      	adds	r5, #4
}
   17f04:	e7ec      	b.n	17ee0 <flash_nrf_write+0x4c>
		return 0;
   17f06:	4620      	mov	r0, r4
   17f08:	e7d5      	b.n	17eb6 <flash_nrf_write+0x22>
   17f0a:	bf00      	nop
   17f0c:	00025b92 	.word	0x00025b92
   17f10:	00025bd8 	.word	0x00025bd8
   17f14:	20009ea8 	.word	0x20009ea8
   17f18:	40039000 	.word	0x40039000

00017f1c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17f1c:	6802      	ldr	r2, [r0, #0]
{
   17f1e:	b510      	push	{r4, lr}
    switch (port)
   17f20:	0953      	lsrs	r3, r2, #5
{
   17f22:	4604      	mov	r4, r0
    switch (port)
   17f24:	d029      	beq.n	17f7a <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   17f26:	2b01      	cmp	r3, #1
   17f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17f2c:	bf18      	it	ne
   17f2e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   17f30:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   17f34:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17f36:	07db      	lsls	r3, r3, #31
   17f38:	d40a      	bmi.n	17f50 <nrf_gpio_pin_port_decode+0x34>
   17f3a:	4912      	ldr	r1, [pc, #72]	; (17f84 <nrf_gpio_pin_port_decode+0x68>)
   17f3c:	4812      	ldr	r0, [pc, #72]	; (17f88 <nrf_gpio_pin_port_decode+0x6c>)
   17f3e:	f240 221a 	movw	r2, #538	; 0x21a
   17f42:	f004 fc7f 	bl	1c844 <printk>
   17f46:	f240 211a 	movw	r1, #538	; 0x21a
   17f4a:	480e      	ldr	r0, [pc, #56]	; (17f84 <nrf_gpio_pin_port_decode+0x68>)
   17f4c:	f004 ff20 	bl	1cd90 <assert_post_action>
    uint32_t pin_number = *p_pin;
   17f50:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   17f52:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17f56:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   17f58:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17f5a:	d00c      	beq.n	17f76 <nrf_gpio_pin_port_decode+0x5a>
   17f5c:	2b01      	cmp	r3, #1
   17f5e:	d00f      	beq.n	17f80 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   17f60:	4908      	ldr	r1, [pc, #32]	; (17f84 <nrf_gpio_pin_port_decode+0x68>)
   17f62:	4809      	ldr	r0, [pc, #36]	; (17f88 <nrf_gpio_pin_port_decode+0x6c>)
   17f64:	f240 221f 	movw	r2, #543	; 0x21f
   17f68:	f004 fc6c 	bl	1c844 <printk>
   17f6c:	f240 211f 	movw	r1, #543	; 0x21f
   17f70:	4804      	ldr	r0, [pc, #16]	; (17f84 <nrf_gpio_pin_port_decode+0x68>)
   17f72:	f004 ff0d 	bl	1cd90 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17f76:	4805      	ldr	r0, [pc, #20]	; (17f8c <nrf_gpio_pin_port_decode+0x70>)
}
   17f78:	bd10      	pop	{r4, pc}
    switch (port)
   17f7a:	f04f 33ff 	mov.w	r3, #4294967295
   17f7e:	e7d7      	b.n	17f30 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   17f80:	4803      	ldr	r0, [pc, #12]	; (17f90 <nrf_gpio_pin_port_decode+0x74>)
   17f82:	e7f9      	b.n	17f78 <nrf_gpio_pin_port_decode+0x5c>
   17f84:	00025a2e 	.word	0x00025a2e
   17f88:	00022c66 	.word	0x00022c66
   17f8c:	40842500 	.word	0x40842500
   17f90:	40842800 	.word	0x40842800

00017f94 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   17f94:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   17f96:	794b      	ldrb	r3, [r1, #5]
   17f98:	2b01      	cmp	r3, #1
   17f9a:	d02b      	beq.n	17ff4 <uarte_nrfx_configure+0x60>
   17f9c:	2b03      	cmp	r3, #3
   17f9e:	d126      	bne.n	17fee <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   17fa0:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   17fa2:	798b      	ldrb	r3, [r1, #6]
   17fa4:	2b03      	cmp	r3, #3
   17fa6:	d122      	bne.n	17fee <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   17fa8:	79cd      	ldrb	r5, [r1, #7]
   17faa:	b125      	cbz	r5, 17fb6 <uarte_nrfx_configure+0x22>
   17fac:	2d01      	cmp	r5, #1
   17fae:	d11e      	bne.n	17fee <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   17fb0:	6843      	ldr	r3, [r0, #4]
   17fb2:	791b      	ldrb	r3, [r3, #4]
   17fb4:	b1db      	cbz	r3, 17fee <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   17fb6:	790a      	ldrb	r2, [r1, #4]
   17fb8:	2a01      	cmp	r2, #1
   17fba:	d01d      	beq.n	17ff8 <uarte_nrfx_configure+0x64>
   17fbc:	2a02      	cmp	r2, #2
   17fbe:	d01f      	beq.n	18000 <uarte_nrfx_configure+0x6c>
   17fc0:	b9aa      	cbnz	r2, 17fee <uarte_nrfx_configure+0x5a>
   17fc2:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   17fc4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   17fc6:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   17fc8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   17fcc:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   17fce:	d06e      	beq.n	180ae <uarte_nrfx_configure+0x11a>
   17fd0:	d833      	bhi.n	1803a <uarte_nrfx_configure+0xa6>
   17fd2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   17fd6:	d06d      	beq.n	180b4 <uarte_nrfx_configure+0x120>
   17fd8:	d81c      	bhi.n	18014 <uarte_nrfx_configure+0x80>
   17fda:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   17fde:	d06b      	beq.n	180b8 <uarte_nrfx_configure+0x124>
   17fe0:	d810      	bhi.n	18004 <uarte_nrfx_configure+0x70>
   17fe2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   17fe6:	d06a      	beq.n	180be <uarte_nrfx_configure+0x12a>
   17fe8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   17fec:	d06a      	beq.n	180c4 <uarte_nrfx_configure+0x130>
   17fee:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17ff2:	e05b      	b.n	180ac <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   17ff4:	2700      	movs	r7, #0
   17ff6:	e7d4      	b.n	17fa2 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   17ff8:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   17ffc:	220e      	movs	r2, #14
   17ffe:	e7e1      	b.n	17fc4 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   18000:	2400      	movs	r4, #0
   18002:	e7fb      	b.n	17ffc <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   18004:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   18008:	d05f      	beq.n	180ca <uarte_nrfx_configure+0x136>
   1800a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1800e:	d1ee      	bne.n	17fee <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   18010:	4b38      	ldr	r3, [pc, #224]	; (180f4 <uarte_nrfx_configure+0x160>)
   18012:	e03e      	b.n	18092 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18014:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   18018:	d05a      	beq.n	180d0 <uarte_nrfx_configure+0x13c>
   1801a:	d807      	bhi.n	1802c <uarte_nrfx_configure+0x98>
   1801c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   18020:	d058      	beq.n	180d4 <uarte_nrfx_configure+0x140>
   18022:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   18026:	d1e2      	bne.n	17fee <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   18028:	4b33      	ldr	r3, [pc, #204]	; (180f8 <uarte_nrfx_configure+0x164>)
   1802a:	e032      	b.n	18092 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1802c:	f647 2c12 	movw	ip, #31250	; 0x7a12
   18030:	4563      	cmp	r3, ip
   18032:	d1dc      	bne.n	17fee <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   18034:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   18038:	e02b      	b.n	18092 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1803a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1803e:	d04b      	beq.n	180d8 <uarte_nrfx_configure+0x144>
   18040:	d813      	bhi.n	1806a <uarte_nrfx_configure+0xd6>
   18042:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   18046:	d04a      	beq.n	180de <uarte_nrfx_configure+0x14a>
   18048:	d809      	bhi.n	1805e <uarte_nrfx_configure+0xca>
   1804a:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   1804e:	4563      	cmp	r3, ip
   18050:	d047      	beq.n	180e2 <uarte_nrfx_configure+0x14e>
   18052:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   18056:	d1ca      	bne.n	17fee <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   18058:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1805c:	e019      	b.n	18092 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1805e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   18062:	d1c4      	bne.n	17fee <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   18064:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   18068:	e013      	b.n	18092 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1806a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1806e:	d03b      	beq.n	180e8 <uarte_nrfx_configure+0x154>
   18070:	d809      	bhi.n	18086 <uarte_nrfx_configure+0xf2>
   18072:	f8df c088 	ldr.w	ip, [pc, #136]	; 180fc <uarte_nrfx_configure+0x168>
   18076:	4563      	cmp	r3, ip
   18078:	d039      	beq.n	180ee <uarte_nrfx_configure+0x15a>
   1807a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1807e:	d1b6      	bne.n	17fee <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   18080:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   18084:	e005      	b.n	18092 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   18086:	f8df c078 	ldr.w	ip, [pc, #120]	; 18100 <uarte_nrfx_configure+0x16c>
   1808a:	4563      	cmp	r3, ip
   1808c:	d1af      	bne.n	17fee <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1808e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   18092:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   18096:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   18098:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   1809a:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   1809c:	4322      	orrs	r2, r4
   1809e:	3304      	adds	r3, #4
   180a0:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   180a2:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   180a6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   180aa:	2000      	movs	r0, #0
}
   180ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   180ae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   180b2:	e7ee      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   180b4:	4b13      	ldr	r3, [pc, #76]	; (18104 <uarte_nrfx_configure+0x170>)
   180b6:	e7ec      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   180b8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   180bc:	e7e9      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   180be:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   180c2:	e7e6      	b.n	18092 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   180c4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   180c8:	e7e3      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   180ca:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   180ce:	e7e0      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   180d0:	4b0d      	ldr	r3, [pc, #52]	; (18108 <uarte_nrfx_configure+0x174>)
   180d2:	e7de      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   180d4:	4b0d      	ldr	r3, [pc, #52]	; (1810c <uarte_nrfx_configure+0x178>)
   180d6:	e7dc      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   180d8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   180dc:	e7d9      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   180de:	4b0c      	ldr	r3, [pc, #48]	; (18110 <uarte_nrfx_configure+0x17c>)
   180e0:	e7d7      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   180e2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   180e6:	e7d4      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   180e8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   180ec:	e7d1      	b.n	18092 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   180ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   180f2:	e7ce      	b.n	18092 <uarte_nrfx_configure+0xfe>
   180f4:	0013b000 	.word	0x0013b000
   180f8:	004ea000 	.word	0x004ea000
   180fc:	0003d090 	.word	0x0003d090
   18100:	000f4240 	.word	0x000f4240
   18104:	00275000 	.word	0x00275000
   18108:	0075c000 	.word	0x0075c000
   1810c:	003af000 	.word	0x003af000
   18110:	013a9000 	.word	0x013a9000

00018114 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   18114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18118:	4606      	mov	r6, r0
   1811a:	4688      	mov	r8, r1
	return dev->data;
   1811c:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1811e:	f009 f909 	bl	21334 <k_is_in_isr>
   18122:	b9b8      	cbnz	r0, 18154 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   18124:	4b28      	ldr	r3, [pc, #160]	; (181c8 <uarte_nrfx_poll_out+0xb4>)
   18126:	781b      	ldrb	r3, [r3, #0]
   18128:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1812c:	6872      	ldr	r2, [r6, #4]
   1812e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   18130:	b193      	cbz	r3, 18158 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   18132:	f04f 0320 	mov.w	r3, #32
   18136:	f3ef 8411 	mrs	r4, BASEPRI
   1813a:	f383 8811 	msr	BASEPRI, r3
   1813e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   18142:	6870      	ldr	r0, [r6, #4]
   18144:	f008 fba2 	bl	2088c <is_tx_ready.isra.0>
   18148:	bb38      	cbnz	r0, 1819a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1814a:	f384 8811 	msr	BASEPRI, r4
   1814e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   18152:	e7ee      	b.n	18132 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18154:	2301      	movs	r3, #1
   18156:	e7e9      	b.n	1812c <uarte_nrfx_poll_out+0x18>
   18158:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1815a:	6870      	ldr	r0, [r6, #4]
   1815c:	f008 fb96 	bl	2088c <is_tx_ready.isra.0>
   18160:	b970      	cbnz	r0, 18180 <uarte_nrfx_poll_out+0x6c>
   18162:	2001      	movs	r0, #1
   18164:	f008 fc32 	bl	209cc <nrfx_busy_wait>
   18168:	3c01      	subs	r4, #1
   1816a:	d1f6      	bne.n	1815a <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1816c:	2100      	movs	r1, #0
   1816e:	2021      	movs	r0, #33	; 0x21
   18170:	f003 f972 	bl	1b458 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18174:	e7f0      	b.n	18158 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   18176:	f384 8811 	msr	BASEPRI, r4
   1817a:	f3bf 8f6f 	isb	sy
}
   1817e:	e7f5      	b.n	1816c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   18180:	f04f 0320 	mov.w	r3, #32
   18184:	f3ef 8411 	mrs	r4, BASEPRI
   18188:	f383 8811 	msr	BASEPRI, r3
   1818c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   18190:	6870      	ldr	r0, [r6, #4]
   18192:	f008 fb7b 	bl	2088c <is_tx_ready.isra.0>
   18196:	2800      	cmp	r0, #0
   18198:	d0ed      	beq.n	18176 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1819a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1819c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1819e:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   181a2:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   181a6:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   181aa:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   181ae:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   181b2:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   181b6:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   181ba:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   181bc:	f384 8811 	msr	BASEPRI, r4
   181c0:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   181c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   181c8:	2000b76b 	.word	0x2000b76b

000181cc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   181cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181d0:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   181d2:	f04f 0800 	mov.w	r8, #0
   181d6:	f04f 0914 	mov.w	r9, #20
   181da:	2200      	movs	r2, #0
   181dc:	2101      	movs	r1, #1
   181de:	2008      	movs	r0, #8
   181e0:	f7f5 fa96 	bl	d710 <z_arm_irq_priority_set>
   181e4:	2008      	movs	r0, #8
   181e6:	f7f5 fa75 	bl	d6d4 <arch_irq_enable>
	return config->uarte_regs;
   181ea:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   181ec:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   181ee:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   181f0:	2701      	movs	r7, #1
   181f2:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   181f6:	a801      	add	r0, sp, #4
	data->dev = dev;
   181f8:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   181fa:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   181fe:	f7ff fe8d 	bl	17f1c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18202:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18204:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18208:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   1820c:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1820e:	a801      	add	r0, sp, #4
   18210:	f8cd 9004 	str.w	r9, [sp, #4]
   18214:	f7ff fe82 	bl	17f1c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18218:	f04f 0b16 	mov.w	fp, #22
   1821c:	9b01      	ldr	r3, [sp, #4]
   1821e:	3380      	adds	r3, #128	; 0x80
   18220:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18224:	a801      	add	r0, sp, #4
   18226:	f8cd b004 	str.w	fp, [sp, #4]
   1822a:	f7ff fe77 	bl	17f1c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1822e:	9b01      	ldr	r3, [sp, #4]
   18230:	3380      	adds	r3, #128	; 0x80
   18232:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   18236:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1823a:	f04f 0915 	mov.w	r9, #21
   1823e:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18242:	a801      	add	r0, sp, #4
   18244:	f8cd 9004 	str.w	r9, [sp, #4]
   18248:	f7ff fe68 	bl	17f1c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1824c:	9b01      	ldr	r3, [sp, #4]
   1824e:	3380      	adds	r3, #128	; 0x80
   18250:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   18254:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18258:	a801      	add	r0, sp, #4
   1825a:	f8cd 8004 	str.w	r8, [sp, #4]
   1825e:	f7ff fe5d 	bl	17f1c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18262:	9b01      	ldr	r3, [sp, #4]
   18264:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   18266:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18268:	a801      	add	r0, sp, #4
   1826a:	f8cd 8004 	str.w	r8, [sp, #4]
   1826e:	f7ff fe55 	bl	17f1c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18272:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   18274:	68e9      	ldr	r1, [r5, #12]
   18276:	3380      	adds	r3, #128	; 0x80
   18278:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   1827c:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   1827e:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   18282:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   18284:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   18288:	f7ff fe84 	bl	17f94 <uarte_nrfx_configure>
	if (err) {
   1828c:	4607      	mov	r7, r0
   1828e:	b980      	cbnz	r0, 182b2 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   18290:	686b      	ldr	r3, [r5, #4]
   18292:	799b      	ldrb	r3, [r3, #6]
   18294:	2b00      	cmp	r3, #0
   18296:	d03a      	beq.n	1830e <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   18298:	eb06 000b 	add.w	r0, r6, fp
   1829c:	f000 fddc 	bl	18e58 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   182a0:	4b2b      	ldr	r3, [pc, #172]	; (18350 <uarte_0_init+0x184>)
   182a2:	4298      	cmp	r0, r3
   182a4:	d009      	beq.n	182ba <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   182a6:	2145      	movs	r1, #69	; 0x45
   182a8:	482a      	ldr	r0, [pc, #168]	; (18354 <uarte_0_init+0x188>)
   182aa:	f004 facb 	bl	1c844 <printk>
		return -EIO;
   182ae:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   182b2:	4638      	mov	r0, r7
   182b4:	b003      	add	sp, #12
   182b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   182ba:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   182be:	f896 8016 	ldrb.w	r8, [r6, #22]
   182c2:	d10a      	bne.n	182da <uarte_0_init+0x10e>
   182c4:	4924      	ldr	r1, [pc, #144]	; (18358 <uarte_0_init+0x18c>)
   182c6:	4825      	ldr	r0, [pc, #148]	; (1835c <uarte_0_init+0x190>)
   182c8:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   182cc:	f004 faba 	bl	1c844 <printk>
   182d0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   182d4:	4820      	ldr	r0, [pc, #128]	; (18358 <uarte_0_init+0x18c>)
   182d6:	f004 fd5b 	bl	1cd90 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   182da:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   182de:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   182e2:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   182e6:	d10a      	bne.n	182fe <uarte_0_init+0x132>
   182e8:	491b      	ldr	r1, [pc, #108]	; (18358 <uarte_0_init+0x18c>)
   182ea:	481c      	ldr	r0, [pc, #112]	; (1835c <uarte_0_init+0x190>)
   182ec:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   182f0:	f004 faa8 	bl	1c844 <printk>
   182f4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   182f8:	4817      	ldr	r0, [pc, #92]	; (18358 <uarte_0_init+0x18c>)
   182fa:	f004 fd49 	bl	1cd90 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   182fe:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   18300:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   18304:	7db2      	ldrb	r2, [r6, #22]
   18306:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   18308:	4a15      	ldr	r2, [pc, #84]	; (18360 <uarte_0_init+0x194>)
   1830a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1830e:	2308      	movs	r3, #8
   18310:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18314:	2300      	movs	r3, #0
   18316:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1831a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1831e:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   18322:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   18326:	2301      	movs	r3, #1
   18328:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1832c:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1832e:	686b      	ldr	r3, [r5, #4]
   18330:	799b      	ldrb	r3, [r3, #6]
   18332:	b91b      	cbnz	r3, 1833c <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   18334:	f44f 7380 	mov.w	r3, #256	; 0x100
   18338:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1833c:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1833e:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18340:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18344:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18348:	2301      	movs	r3, #1
   1834a:	60a3      	str	r3, [r4, #8]
   1834c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1834e:	e7b0      	b.n	182b2 <uarte_0_init+0xe6>
   18350:	0bad0000 	.word	0x0bad0000
   18354:	00025c05 	.word	0x00025c05
   18358:	00025c29 	.word	0x00025c29
   1835c:	00022c66 	.word	0x00022c66
   18360:	40017000 	.word	0x40017000

00018364 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   18364:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   18368:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   1836c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   18370:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   18374:	4605      	mov	r5, r0
   18376:	460e      	mov	r6, r1
   18378:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   1837a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1837e:	d14f      	bne.n	18420 <z_impl_gpio_pin_interrupt_configure+0xbc>
   18380:	492d      	ldr	r1, [pc, #180]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   18382:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   18386:	482d      	ldr	r0, [pc, #180]	; (1843c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   18388:	f004 fa5c 	bl	1c844 <printk>
   1838c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   18390:	4829      	ldr	r0, [pc, #164]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   18392:	f004 fcfd 	bl	1cd90 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   18396:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1839a:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   1839e:	d10a      	bne.n	183b6 <z_impl_gpio_pin_interrupt_configure+0x52>
   183a0:	4925      	ldr	r1, [pc, #148]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   183a2:	4826      	ldr	r0, [pc, #152]	; (1843c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   183a4:	f240 12f1 	movw	r2, #497	; 0x1f1
   183a8:	f004 fa4c 	bl	1c844 <printk>
   183ac:	f240 11f1 	movw	r1, #497	; 0x1f1
   183b0:	4821      	ldr	r0, [pc, #132]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   183b2:	f004 fced 	bl	1cd90 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   183b6:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   183ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   183be:	d10a      	bne.n	183d6 <z_impl_gpio_pin_interrupt_configure+0x72>
   183c0:	491d      	ldr	r1, [pc, #116]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   183c2:	481e      	ldr	r0, [pc, #120]	; (1843c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   183c4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   183c8:	f004 fa3c 	bl	1c844 <printk>
   183cc:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   183d0:	4819      	ldr	r0, [pc, #100]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   183d2:	f004 fcdd 	bl	1cd90 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   183d6:	2701      	movs	r7, #1
   183d8:	f8da 3000 	ldr.w	r3, [sl]
   183dc:	40b7      	lsls	r7, r6
   183de:	421f      	tst	r7, r3
   183e0:	d10a      	bne.n	183f8 <z_impl_gpio_pin_interrupt_configure+0x94>
   183e2:	4915      	ldr	r1, [pc, #84]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   183e4:	4815      	ldr	r0, [pc, #84]	; (1843c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   183e6:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   183ea:	f004 fa2b 	bl	1c844 <printk>
   183ee:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   183f2:	4811      	ldr	r0, [pc, #68]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   183f4:	f004 fccc 	bl	1cd90 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   183f8:	0423      	lsls	r3, r4, #16
   183fa:	d505      	bpl.n	18408 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   183fc:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   18400:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   18402:	bf18      	it	ne
   18404:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   18408:	f8d8 7018 	ldr.w	r7, [r8, #24]
   1840c:	4631      	mov	r1, r6
   1840e:	4628      	mov	r0, r5
   18410:	46bc      	mov	ip, r7
   18412:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   18416:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   1841a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1841e:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   18420:	2b00      	cmp	r3, #0
   18422:	d1b8      	bne.n	18396 <z_impl_gpio_pin_interrupt_configure+0x32>
   18424:	4904      	ldr	r1, [pc, #16]	; (18438 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   18426:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   1842a:	4804      	ldr	r0, [pc, #16]	; (1843c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1842c:	f004 fa0a 	bl	1c844 <printk>
   18430:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   18434:	e7ac      	b.n	18390 <z_impl_gpio_pin_interrupt_configure+0x2c>
   18436:	bf00      	nop
   18438:	00025c78 	.word	0x00025c78
   1843c:	00022c66 	.word	0x00022c66

00018440 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   18440:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18442:	2501      	movs	r5, #1
   18444:	6843      	ldr	r3, [r0, #4]
   18446:	408d      	lsls	r5, r1
   18448:	681b      	ldr	r3, [r3, #0]
{
   1844a:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1844c:	421d      	tst	r5, r3
{
   1844e:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   18450:	d10a      	bne.n	18468 <gpio_pin_set_raw+0x28>
   18452:	490b      	ldr	r1, [pc, #44]	; (18480 <gpio_pin_set_raw+0x40>)
   18454:	480b      	ldr	r0, [pc, #44]	; (18484 <gpio_pin_set_raw+0x44>)
   18456:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   1845a:	f004 f9f3 	bl	1c844 <printk>
   1845e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   18462:	4807      	ldr	r0, [pc, #28]	; (18480 <gpio_pin_set_raw+0x40>)
   18464:	f004 fc94 	bl	1cd90 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   18468:	b136      	cbz	r6, 18478 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   1846a:	68a3      	ldr	r3, [r4, #8]
   1846c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1846e:	4629      	mov	r1, r5
   18470:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   18472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   18476:	4718      	bx	r3
   18478:	68a3      	ldr	r3, [r4, #8]
   1847a:	691b      	ldr	r3, [r3, #16]
   1847c:	e7f7      	b.n	1846e <gpio_pin_set_raw+0x2e>
   1847e:	bf00      	nop
   18480:	00025c78 	.word	0x00025c78
   18484:	00022c66 	.word	0x00022c66

00018488 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   18488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1848c:	4606      	mov	r6, r0
   1848e:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   18490:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   18492:	f8df 8044 	ldr.w	r8, [pc, #68]	; 184d8 <dk_set_leds_state.part.0+0x50>
   18496:	f8df 9044 	ldr.w	r9, [pc, #68]	; 184dc <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1849a:	fa26 f204 	lsr.w	r2, r6, r4
   1849e:	fa27 f304 	lsr.w	r3, r7, r4
   184a2:	4313      	orrs	r3, r2
   184a4:	07db      	lsls	r3, r3, #31
   184a6:	d512      	bpl.n	184ce <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   184a8:	43d2      	mvns	r2, r2
   184aa:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   184ae:	7919      	ldrb	r1, [r3, #4]
   184b0:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   184b4:	f002 0201 	and.w	r2, r2, #1
   184b8:	f7ff ffc2 	bl	18440 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   184bc:	4605      	mov	r5, r0
   184be:	b130      	cbz	r0, 184ce <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   184c0:	2145      	movs	r1, #69	; 0x45
   184c2:	4807      	ldr	r0, [pc, #28]	; (184e0 <dk_set_leds_state.part.0+0x58>)
   184c4:	f004 f9be 	bl	1c844 <printk>
			}
		}
	}

	return 0;
}
   184c8:	4628      	mov	r0, r5
   184ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   184ce:	3401      	adds	r4, #1
   184d0:	2c04      	cmp	r4, #4
   184d2:	d1e2      	bne.n	1849a <dk_set_leds_state.part.0+0x12>
	return 0;
   184d4:	2500      	movs	r5, #0
   184d6:	e7f7      	b.n	184c8 <dk_set_leds_state.part.0+0x40>
   184d8:	00022478 	.word	0x00022478
   184dc:	20009f04 	.word	0x20009f04
   184e0:	00025ca2 	.word	0x00025ca2

000184e4 <buttons_scan_fn>:
{
   184e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   184e8:	2400      	movs	r4, #0
   184ea:	4e6c      	ldr	r6, [pc, #432]	; (1869c <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   184ec:	4625      	mov	r5, r4
{
   184ee:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   184f0:	4f6b      	ldr	r7, [pc, #428]	; (186a0 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   184f2:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 186a4 <buttons_scan_fn+0x1c0>
   184f6:	f04f 0801 	mov.w	r8, #1
   184fa:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   184fe:	791b      	ldrb	r3, [r3, #4]
   18500:	f859 bb04 	ldr.w	fp, [r9], #4
   18504:	fa08 f803 	lsl.w	r8, r8, r3
   18508:	f8db 3004 	ldr.w	r3, [fp, #4]
   1850c:	681b      	ldr	r3, [r3, #0]
   1850e:	ea18 0f03 	tst.w	r8, r3
   18512:	d10a      	bne.n	1852a <buttons_scan_fn+0x46>
   18514:	4651      	mov	r1, sl
   18516:	4864      	ldr	r0, [pc, #400]	; (186a8 <buttons_scan_fn+0x1c4>)
   18518:	f44f 725e 	mov.w	r2, #888	; 0x378
   1851c:	f004 f992 	bl	1c844 <printk>
   18520:	f44f 715e 	mov.w	r1, #888	; 0x378
   18524:	4650      	mov	r0, sl
   18526:	f004 fc33 	bl	1cd90 <assert_post_action>
	return api->port_get_raw(port, value);
   1852a:	f8db 3008 	ldr.w	r3, [fp, #8]
   1852e:	4658      	mov	r0, fp
   18530:	685b      	ldr	r3, [r3, #4]
   18532:	a901      	add	r1, sp, #4
   18534:	4798      	blx	r3
	if (ret == 0) {
   18536:	2800      	cmp	r0, #0
   18538:	d16b      	bne.n	18612 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1853a:	9b01      	ldr	r3, [sp, #4]
   1853c:	ea18 0f03 	tst.w	r8, r3
   18540:	d003      	beq.n	1854a <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18542:	3501      	adds	r5, #1
   18544:	2d04      	cmp	r5, #4
   18546:	d1d6      	bne.n	184f6 <buttons_scan_fn+0x12>
   18548:	e069      	b.n	1861e <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   1854a:	2301      	movs	r3, #1
   1854c:	40ab      	lsls	r3, r5
   1854e:	431c      	orrs	r4, r3
   18550:	e7f7      	b.n	18542 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   18552:	3d04      	subs	r5, #4
   18554:	2d00      	cmp	r5, #0
   18556:	f000 8087 	beq.w	18668 <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   1855a:	46aa      	mov	sl, r5
   1855c:	f85a 3b04 	ldr.w	r3, [sl], #4
   18560:	4641      	mov	r1, r8
   18562:	4620      	mov	r0, r4
   18564:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   18566:	f1ba 0f00 	cmp.w	sl, #0
   1856a:	d07d      	beq.n	18668 <buttons_scan_fn+0x184>
	return node->next;
   1856c:	686d      	ldr	r5, [r5, #4]
   1856e:	e078      	b.n	18662 <buttons_scan_fn+0x17e>
		initial_run = false;
   18570:	2200      	movs	r2, #0
   18572:	701a      	strb	r2, [r3, #0]
   18574:	e07b      	b.n	1866e <buttons_scan_fn+0x18a>
	__asm__ volatile(
   18576:	f04f 0320 	mov.w	r3, #32
   1857a:	f3ef 8811 	mrs	r8, BASEPRI
   1857e:	f383 8811 	msr	BASEPRI, r3
   18582:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18586:	4849      	ldr	r0, [pc, #292]	; (186ac <buttons_scan_fn+0x1c8>)
   18588:	f003 f988 	bl	1b89c <z_spin_lock_valid>
   1858c:	b940      	cbnz	r0, 185a0 <buttons_scan_fn+0xbc>
   1858e:	4948      	ldr	r1, [pc, #288]	; (186b0 <buttons_scan_fn+0x1cc>)
   18590:	4845      	ldr	r0, [pc, #276]	; (186a8 <buttons_scan_fn+0x1c4>)
   18592:	227c      	movs	r2, #124	; 0x7c
   18594:	f004 f956 	bl	1c844 <printk>
   18598:	217c      	movs	r1, #124	; 0x7c
   1859a:	4845      	ldr	r0, [pc, #276]	; (186b0 <buttons_scan_fn+0x1cc>)
   1859c:	f004 fbf8 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   185a0:	4842      	ldr	r0, [pc, #264]	; (186ac <buttons_scan_fn+0x1c8>)
   185a2:	f003 f997 	bl	1b8d4 <z_spin_lock_set_owner>
		switch (state) {
   185a6:	4b43      	ldr	r3, [pc, #268]	; (186b4 <buttons_scan_fn+0x1d0>)
   185a8:	781a      	ldrb	r2, [r3, #0]
   185aa:	2a01      	cmp	r2, #1
   185ac:	d126      	bne.n	185fc <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   185ae:	2200      	movs	r2, #0
   185b0:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   185b2:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   185b6:	f856 0b04 	ldr.w	r0, [r6], #4
   185ba:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   185bc:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   185c0:	f7ff fed0 	bl	18364 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   185c4:	3401      	adds	r4, #1
   185c6:	2c04      	cmp	r4, #4
   185c8:	4605      	mov	r5, r0
   185ca:	d001      	beq.n	185d0 <buttons_scan_fn+0xec>
   185cc:	2800      	cmp	r0, #0
   185ce:	d0f0      	beq.n	185b2 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   185d0:	4836      	ldr	r0, [pc, #216]	; (186ac <buttons_scan_fn+0x1c8>)
   185d2:	f003 f971 	bl	1b8b8 <z_spin_unlock_valid>
   185d6:	b940      	cbnz	r0, 185ea <buttons_scan_fn+0x106>
   185d8:	4935      	ldr	r1, [pc, #212]	; (186b0 <buttons_scan_fn+0x1cc>)
   185da:	4833      	ldr	r0, [pc, #204]	; (186a8 <buttons_scan_fn+0x1c4>)
   185dc:	22a7      	movs	r2, #167	; 0xa7
   185de:	f004 f931 	bl	1c844 <printk>
   185e2:	21a7      	movs	r1, #167	; 0xa7
   185e4:	4832      	ldr	r0, [pc, #200]	; (186b0 <buttons_scan_fn+0x1cc>)
   185e6:	f004 fbd3 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   185ea:	f388 8811 	msr	BASEPRI, r8
   185ee:	f3bf 8f6f 	isb	sy
		if (err) {
   185f2:	2d00      	cmp	r5, #0
   185f4:	d04f      	beq.n	18696 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   185f6:	2145      	movs	r1, #69	; 0x45
   185f8:	482f      	ldr	r0, [pc, #188]	; (186b8 <buttons_scan_fn+0x1d4>)
   185fa:	e047      	b.n	1868c <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   185fc:	22b4      	movs	r2, #180	; 0xb4
   185fe:	492f      	ldr	r1, [pc, #188]	; (186bc <buttons_scan_fn+0x1d8>)
   18600:	4829      	ldr	r0, [pc, #164]	; (186a8 <buttons_scan_fn+0x1c4>)
   18602:	f004 f91f 	bl	1c844 <printk>
   18606:	21b4      	movs	r1, #180	; 0xb4
   18608:	482c      	ldr	r0, [pc, #176]	; (186bc <buttons_scan_fn+0x1d8>)
   1860a:	f004 fbc1 	bl	1cd90 <assert_post_action>
		int err = 0;
   1860e:	2500      	movs	r5, #0
			break;
   18610:	e7de      	b.n	185d0 <buttons_scan_fn+0xec>
		if (val < 0) {
   18612:	da96      	bge.n	18542 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   18614:	2145      	movs	r1, #69	; 0x45
   18616:	482a      	ldr	r0, [pc, #168]	; (186c0 <buttons_scan_fn+0x1dc>)
   18618:	f004 f914 	bl	1c844 <printk>
			return 0;
   1861c:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1861e:	4b29      	ldr	r3, [pc, #164]	; (186c4 <buttons_scan_fn+0x1e0>)
   18620:	e8d3 2fef 	ldaex	r2, [r3]
   18624:	e8c3 4fe1 	stlex	r1, r4, [r3]
   18628:	2900      	cmp	r1, #0
   1862a:	d1f9      	bne.n	18620 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   1862c:	4b26      	ldr	r3, [pc, #152]	; (186c8 <buttons_scan_fn+0x1e4>)
   1862e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 186cc <buttons_scan_fn+0x1e8>
   18632:	781a      	ldrb	r2, [r3, #0]
   18634:	2a00      	cmp	r2, #0
   18636:	d19b      	bne.n	18570 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   18638:	f8d9 3000 	ldr.w	r3, [r9]
   1863c:	42a3      	cmp	r3, r4
   1863e:	d016      	beq.n	1866e <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   18640:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   18644:	4b22      	ldr	r3, [pc, #136]	; (186d0 <buttons_scan_fn+0x1ec>)
   18646:	681b      	ldr	r3, [r3, #0]
   18648:	b113      	cbz	r3, 18650 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   1864a:	4641      	mov	r1, r8
   1864c:	4620      	mov	r0, r4
   1864e:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   18650:	f04f 33ff 	mov.w	r3, #4294967295
   18654:	f04f 32ff 	mov.w	r2, #4294967295
   18658:	481e      	ldr	r0, [pc, #120]	; (186d4 <buttons_scan_fn+0x1f0>)
   1865a:	f001 fc7f 	bl	19f5c <z_impl_k_mutex_lock>
	return list->head;
   1865e:	4b1e      	ldr	r3, [pc, #120]	; (186d8 <buttons_scan_fn+0x1f4>)
   18660:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   18662:	2d00      	cmp	r5, #0
   18664:	f47f af75 	bne.w	18552 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   18668:	481a      	ldr	r0, [pc, #104]	; (186d4 <buttons_scan_fn+0x1f0>)
   1866a:	f001 fd43 	bl	1a0f4 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1866e:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   18672:	2c00      	cmp	r4, #0
   18674:	f43f af7f 	beq.w	18576 <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18678:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1867c:	2300      	movs	r3, #0
   1867e:	4917      	ldr	r1, [pc, #92]	; (186dc <buttons_scan_fn+0x1f8>)
   18680:	4817      	ldr	r0, [pc, #92]	; (186e0 <buttons_scan_fn+0x1fc>)
   18682:	f003 f981 	bl	1b988 <k_delayed_work_submit_to_queue>
		if (err) {
   18686:	b130      	cbz	r0, 18696 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   18688:	2145      	movs	r1, #69	; 0x45
   1868a:	4816      	ldr	r0, [pc, #88]	; (186e4 <buttons_scan_fn+0x200>)
}
   1868c:	b003      	add	sp, #12
   1868e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   18692:	f004 b8d7 	b.w	1c844 <printk>
}
   18696:	b003      	add	sp, #12
   18698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1869c:	20009ec0 	.word	0x20009ec0
   186a0:	00022458 	.word	0x00022458
   186a4:	00025c78 	.word	0x00025c78
   186a8:	00022c66 	.word	0x00022c66
   186ac:	20009f14 	.word	0x20009f14
   186b0:	00022ca0 	.word	0x00022ca0
   186b4:	2000b76a 	.word	0x2000b76a
   186b8:	00025d37 	.word	0x00025d37
   186bc:	00025cf9 	.word	0x00025cf9
   186c0:	00025cbd 	.word	0x00025cbd
   186c4:	20009f18 	.word	0x20009f18
   186c8:	20008432 	.word	0x20008432
   186cc:	20009efc 	.word	0x20009efc
   186d0:	20009ed0 	.word	0x20009ed0
   186d4:	20009ed4 	.word	0x20009ed4
   186d8:	20009ee8 	.word	0x20009ee8
   186dc:	200094e0 	.word	0x200094e0
   186e0:	20009630 	.word	0x20009630
   186e4:	00025cd7 	.word	0x00025cd7

000186e8 <button_pressed>:
{
   186e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   186ea:	f04f 0320 	mov.w	r3, #32
   186ee:	f3ef 8611 	mrs	r6, BASEPRI
   186f2:	f383 8811 	msr	BASEPRI, r3
   186f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   186fa:	4827      	ldr	r0, [pc, #156]	; (18798 <button_pressed+0xb0>)
   186fc:	f003 f8ce 	bl	1b89c <z_spin_lock_valid>
   18700:	b940      	cbnz	r0, 18714 <button_pressed+0x2c>
   18702:	4926      	ldr	r1, [pc, #152]	; (1879c <button_pressed+0xb4>)
   18704:	4826      	ldr	r0, [pc, #152]	; (187a0 <button_pressed+0xb8>)
   18706:	227c      	movs	r2, #124	; 0x7c
   18708:	f004 f89c 	bl	1c844 <printk>
   1870c:	217c      	movs	r1, #124	; 0x7c
   1870e:	4823      	ldr	r0, [pc, #140]	; (1879c <button_pressed+0xb4>)
   18710:	f004 fb3e 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   18714:	4820      	ldr	r0, [pc, #128]	; (18798 <button_pressed+0xb0>)
   18716:	f003 f8dd 	bl	1b8d4 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1871a:	2400      	movs	r4, #0
   1871c:	4d21      	ldr	r5, [pc, #132]	; (187a4 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   1871e:	4f22      	ldr	r7, [pc, #136]	; (187a8 <button_pressed+0xc0>)
   18720:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   18724:	f855 0b04 	ldr.w	r0, [r5], #4
   18728:	7919      	ldrb	r1, [r3, #4]
   1872a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1872e:	3401      	adds	r4, #1
   18730:	f7ff fe18 	bl	18364 <z_impl_gpio_pin_interrupt_configure>
   18734:	2c04      	cmp	r4, #4
   18736:	d006      	beq.n	18746 <button_pressed+0x5e>
   18738:	2800      	cmp	r0, #0
   1873a:	d0f1      	beq.n	18720 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   1873c:	2145      	movs	r1, #69	; 0x45
   1873e:	481b      	ldr	r0, [pc, #108]	; (187ac <button_pressed+0xc4>)
   18740:	f004 f880 	bl	1c844 <printk>
   18744:	e001      	b.n	1874a <button_pressed+0x62>
	if (err) {
   18746:	2800      	cmp	r0, #0
   18748:	d1f8      	bne.n	1873c <button_pressed+0x54>
	switch (state) {
   1874a:	4b19      	ldr	r3, [pc, #100]	; (187b0 <button_pressed+0xc8>)
   1874c:	781a      	ldrb	r2, [r3, #0]
   1874e:	b9ca      	cbnz	r2, 18784 <button_pressed+0x9c>
		state = STATE_SCANNING;
   18750:	2201      	movs	r2, #1
   18752:	4918      	ldr	r1, [pc, #96]	; (187b4 <button_pressed+0xcc>)
   18754:	701a      	strb	r2, [r3, #0]
   18756:	4818      	ldr	r0, [pc, #96]	; (187b8 <button_pressed+0xd0>)
   18758:	2221      	movs	r2, #33	; 0x21
   1875a:	2300      	movs	r3, #0
   1875c:	f003 f914 	bl	1b988 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18760:	480d      	ldr	r0, [pc, #52]	; (18798 <button_pressed+0xb0>)
   18762:	f003 f8a9 	bl	1b8b8 <z_spin_unlock_valid>
   18766:	b940      	cbnz	r0, 1877a <button_pressed+0x92>
   18768:	490c      	ldr	r1, [pc, #48]	; (1879c <button_pressed+0xb4>)
   1876a:	480d      	ldr	r0, [pc, #52]	; (187a0 <button_pressed+0xb8>)
   1876c:	22a7      	movs	r2, #167	; 0xa7
   1876e:	f004 f869 	bl	1c844 <printk>
   18772:	21a7      	movs	r1, #167	; 0xa7
   18774:	4809      	ldr	r0, [pc, #36]	; (1879c <button_pressed+0xb4>)
   18776:	f004 fb0b 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1877a:	f386 8811 	msr	BASEPRI, r6
   1877e:	f3bf 8f6f 	isb	sy
}
   18782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   18784:	22eb      	movs	r2, #235	; 0xeb
   18786:	490d      	ldr	r1, [pc, #52]	; (187bc <button_pressed+0xd4>)
   18788:	4805      	ldr	r0, [pc, #20]	; (187a0 <button_pressed+0xb8>)
   1878a:	f004 f85b 	bl	1c844 <printk>
   1878e:	21eb      	movs	r1, #235	; 0xeb
   18790:	480a      	ldr	r0, [pc, #40]	; (187bc <button_pressed+0xd4>)
   18792:	f004 fafd 	bl	1cd90 <assert_post_action>
		break;
   18796:	e7e3      	b.n	18760 <button_pressed+0x78>
   18798:	20009f14 	.word	0x20009f14
   1879c:	00022ca0 	.word	0x00022ca0
   187a0:	00022c66 	.word	0x00022c66
   187a4:	20009ec0 	.word	0x20009ec0
   187a8:	00022458 	.word	0x00022458
   187ac:	00025d54 	.word	0x00025d54
   187b0:	2000b76a 	.word	0x2000b76a
   187b4:	200094e0 	.word	0x200094e0
   187b8:	20009630 	.word	0x20009630
   187bc:	00025cf9 	.word	0x00025cf9

000187c0 <dk_leds_init>:
{
   187c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   187c4:	2600      	movs	r6, #0
   187c6:	4d23      	ldr	r5, [pc, #140]	; (18854 <dk_leds_init+0x94>)
   187c8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 18858 <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   187cc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1885c <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   187d0:	6828      	ldr	r0, [r5, #0]
   187d2:	f001 f8a1 	bl	19918 <z_impl_device_get_binding>
   187d6:	4604      	mov	r4, r0
   187d8:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   187dc:	b940      	cbnz	r0, 187f0 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   187de:	2145      	movs	r1, #69	; 0x45
   187e0:	481f      	ldr	r0, [pc, #124]	; (18860 <dk_leds_init+0xa0>)
   187e2:	f004 f82f 	bl	1c844 <printk>
			return -ENODEV;
   187e6:	f06f 0412 	mvn.w	r4, #18
}
   187ea:	4620      	mov	r0, r4
   187ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187f0:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   187f2:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   187f6:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   187f8:	fa03 f80b 	lsl.w	r8, r3, fp
   187fc:	6843      	ldr	r3, [r0, #4]
   187fe:	681b      	ldr	r3, [r3, #0]
   18800:	ea18 0f03 	tst.w	r8, r3
   18804:	d10a      	bne.n	1881c <dk_leds_init+0x5c>
   18806:	4651      	mov	r1, sl
   18808:	4816      	ldr	r0, [pc, #88]	; (18864 <dk_leds_init+0xa4>)
   1880a:	f44f 7211 	mov.w	r2, #580	; 0x244
   1880e:	f004 f819 	bl	1c844 <printk>
   18812:	f44f 7111 	mov.w	r1, #580	; 0x244
   18816:	4650      	mov	r0, sl
   18818:	f004 faba 	bl	1cd90 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   1881c:	68a3      	ldr	r3, [r4, #8]
   1881e:	4620      	mov	r0, r4
   18820:	f44f 7200 	mov.w	r2, #512	; 0x200
   18824:	4659      	mov	r1, fp
   18826:	681b      	ldr	r3, [r3, #0]
   18828:	4798      	blx	r3
	if (ret != 0) {
   1882a:	4604      	mov	r4, r0
   1882c:	b968      	cbnz	r0, 1884a <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1882e:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   18830:	3601      	adds	r6, #1
   18832:	ea23 0308 	bic.w	r3, r3, r8
   18836:	2e04      	cmp	r6, #4
   18838:	603b      	str	r3, [r7, #0]
   1883a:	f105 0508 	add.w	r5, r5, #8
   1883e:	d1c7      	bne.n	187d0 <dk_leds_init+0x10>
}
   18840:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18844:	210f      	movs	r1, #15
   18846:	f7ff be1f 	b.w	18488 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1884a:	2145      	movs	r1, #69	; 0x45
   1884c:	4806      	ldr	r0, [pc, #24]	; (18868 <dk_leds_init+0xa8>)
   1884e:	f003 fff9 	bl	1c844 <printk>
			return err;
   18852:	e7ca      	b.n	187ea <dk_leds_init+0x2a>
   18854:	00022478 	.word	0x00022478
   18858:	20009f04 	.word	0x20009f04
   1885c:	00025c78 	.word	0x00025c78
   18860:	00025d72 	.word	0x00025d72
   18864:	00022c66 	.word	0x00022c66
   18868:	00025d8f 	.word	0x00025d8f

0001886c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1886c:	4b05      	ldr	r3, [pc, #20]	; (18884 <dk_read_buttons+0x18>)
   1886e:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   18872:	b100      	cbz	r0, 18876 <dk_read_buttons+0xa>
		*button_state = current_state;
   18874:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   18876:	4804      	ldr	r0, [pc, #16]	; (18888 <dk_read_buttons+0x1c>)
   18878:	b111      	cbz	r1, 18880 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1887a:	6802      	ldr	r2, [r0, #0]
   1887c:	405a      	eors	r2, r3
   1887e:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   18880:	6003      	str	r3, [r0, #0]
}
   18882:	4770      	bx	lr
   18884:	20009f18 	.word	0x20009f18
   18888:	20009f00 	.word	0x20009f00

0001888c <dk_buttons_init>:
	button_handler_cb = button_handler;
   1888c:	4b4f      	ldr	r3, [pc, #316]	; (189cc <dk_buttons_init+0x140>)
{
   1888e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   18892:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   18894:	4e4e      	ldr	r6, [pc, #312]	; (189d0 <dk_buttons_init+0x144>)
   18896:	484f      	ldr	r0, [pc, #316]	; (189d4 <dk_buttons_init+0x148>)
   18898:	f008 fcc4 	bl	21224 <z_impl_k_mutex_init>
   1889c:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1889e:	2700      	movs	r7, #0
   188a0:	4d4d      	ldr	r5, [pc, #308]	; (189d8 <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   188a2:	f8df a138 	ldr.w	sl, [pc, #312]	; 189dc <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   188a6:	6828      	ldr	r0, [r5, #0]
   188a8:	f001 f836 	bl	19918 <z_impl_device_get_binding>
   188ac:	4604      	mov	r4, r0
   188ae:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   188b2:	b948      	cbnz	r0, 188c8 <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   188b4:	2145      	movs	r1, #69	; 0x45
   188b6:	484a      	ldr	r0, [pc, #296]	; (189e0 <dk_buttons_init+0x154>)
   188b8:	f003 ffc4 	bl	1c844 <printk>
			return -ENODEV;
   188bc:	f06f 0412 	mvn.w	r4, #18
}
   188c0:	4620      	mov	r0, r4
   188c2:	b003      	add	sp, #12
   188c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188c8:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   188ca:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   188ce:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   188d2:	fa03 f30b 	lsl.w	r3, r3, fp
   188d6:	9301      	str	r3, [sp, #4]
   188d8:	6843      	ldr	r3, [r0, #4]
   188da:	9a01      	ldr	r2, [sp, #4]
   188dc:	681b      	ldr	r3, [r3, #0]
   188de:	421a      	tst	r2, r3
   188e0:	d10a      	bne.n	188f8 <dk_buttons_init+0x6c>
   188e2:	4651      	mov	r1, sl
   188e4:	483f      	ldr	r0, [pc, #252]	; (189e4 <dk_buttons_init+0x158>)
   188e6:	f44f 7211 	mov.w	r2, #580	; 0x244
   188ea:	f003 ffab 	bl	1c844 <printk>
   188ee:	f44f 7111 	mov.w	r1, #580	; 0x244
   188f2:	4650      	mov	r0, sl
   188f4:	f004 fa4c 	bl	1cd90 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   188f8:	68a3      	ldr	r3, [r4, #8]
   188fa:	4620      	mov	r0, r4
   188fc:	f44f 7288 	mov.w	r2, #272	; 0x110
   18900:	4659      	mov	r1, fp
   18902:	681b      	ldr	r3, [r3, #0]
   18904:	4798      	blx	r3
	if (ret != 0) {
   18906:	4604      	mov	r4, r0
   18908:	bb08      	cbnz	r0, 1894e <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1890a:	f8d8 3000 	ldr.w	r3, [r8]
   1890e:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18910:	3701      	adds	r7, #1
   18912:	ea23 0302 	bic.w	r3, r3, r2
   18916:	2f04      	cmp	r7, #4
   18918:	f8c8 3000 	str.w	r3, [r8]
   1891c:	f105 0508 	add.w	r5, r5, #8
   18920:	d1c1      	bne.n	188a6 <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18922:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   18924:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   18926:	f04f 0a01 	mov.w	sl, #1
   1892a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 189d0 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   1892e:	4b2a      	ldr	r3, [pc, #168]	; (189d8 <dk_buttons_init+0x14c>)
   18930:	f859 0b04 	ldr.w	r0, [r9], #4
   18934:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   18938:	791f      	ldrb	r7, [r3, #4]
   1893a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1893e:	4639      	mov	r1, r7
   18940:	f7ff fd10 	bl	18364 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   18944:	4604      	mov	r4, r0
   18946:	b138      	cbz	r0, 18958 <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   18948:	2145      	movs	r1, #69	; 0x45
   1894a:	4827      	ldr	r0, [pc, #156]	; (189e8 <dk_buttons_init+0x15c>)
   1894c:	e001      	b.n	18952 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   1894e:	2145      	movs	r1, #69	; 0x45
   18950:	4826      	ldr	r0, [pc, #152]	; (189ec <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   18952:	f003 ff77 	bl	1c844 <printk>
		return err;
   18956:	e7b3      	b.n	188c0 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18958:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   1895a:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1895e:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   18960:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18964:	d1e3      	bne.n	1892e <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18966:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   18968:	4f21      	ldr	r7, [pc, #132]	; (189f0 <dk_buttons_init+0x164>)
   1896a:	4b22      	ldr	r3, [pc, #136]	; (189f4 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   1896c:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   18970:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   18974:	6883      	ldr	r3, [r0, #8]
   18976:	69db      	ldr	r3, [r3, #28]
   18978:	b13b      	cbz	r3, 1898a <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1897a:	2201      	movs	r2, #1
   1897c:	4639      	mov	r1, r7
   1897e:	4798      	blx	r3
		if (err) {
   18980:	4604      	mov	r4, r0
   18982:	b128      	cbz	r0, 18990 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   18984:	2145      	movs	r1, #69	; 0x45
   18986:	481c      	ldr	r0, [pc, #112]	; (189f8 <dk_buttons_init+0x16c>)
   18988:	e7e3      	b.n	18952 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   1898a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1898e:	e7f9      	b.n	18984 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   18990:	3501      	adds	r5, #1
   18992:	2d04      	cmp	r5, #4
   18994:	d1ec      	bne.n	18970 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   18996:	4d19      	ldr	r5, [pc, #100]	; (189fc <dk_buttons_init+0x170>)
   18998:	4601      	mov	r1, r0
   1899a:	2230      	movs	r2, #48	; 0x30
   1899c:	4628      	mov	r0, r5
   1899e:	f005 fc34 	bl	1e20a <memset>
	state = STATE_SCANNING;
   189a2:	2201      	movs	r2, #1
   189a4:	4b16      	ldr	r3, [pc, #88]	; (18a00 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   189a6:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   189a8:	606b      	str	r3, [r5, #4]
   189aa:	4b16      	ldr	r3, [pc, #88]	; (18a04 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   189ac:	4816      	ldr	r0, [pc, #88]	; (18a08 <dk_buttons_init+0x17c>)
   189ae:	701a      	strb	r2, [r3, #0]
   189b0:	2200      	movs	r2, #0
   189b2:	2300      	movs	r3, #0
   189b4:	f002 ffe8 	bl	1b988 <k_delayed_work_submit_to_queue>
	if (err) {
   189b8:	4604      	mov	r4, r0
   189ba:	b110      	cbz	r0, 189c2 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   189bc:	2145      	movs	r1, #69	; 0x45
   189be:	4813      	ldr	r0, [pc, #76]	; (18a0c <dk_buttons_init+0x180>)
   189c0:	e7c7      	b.n	18952 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   189c2:	4601      	mov	r1, r0
   189c4:	f7ff ff52 	bl	1886c <dk_read_buttons>
	return 0;
   189c8:	e77a      	b.n	188c0 <dk_buttons_init+0x34>
   189ca:	bf00      	nop
   189cc:	20009ed0 	.word	0x20009ed0
   189d0:	20009ec0 	.word	0x20009ec0
   189d4:	20009ed4 	.word	0x20009ed4
   189d8:	00022458 	.word	0x00022458
   189dc:	00025c78 	.word	0x00025c78
   189e0:	00025d72 	.word	0x00025d72
   189e4:	00022c66 	.word	0x00022c66
   189e8:	00025dd0 	.word	0x00025dd0
   189ec:	00025dae 	.word	0x00025dae
   189f0:	20009ef0 	.word	0x20009ef0
   189f4:	000186e9 	.word	0x000186e9
   189f8:	00025df0 	.word	0x00025df0
   189fc:	200094e0 	.word	0x200094e0
   18a00:	000184e5 	.word	0x000184e5
   18a04:	2000b76a 	.word	0x2000b76a
   18a08:	20009630 	.word	0x20009630
   18a0c:	00025cd7 	.word	0x00025cd7

00018a10 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   18a10:	2804      	cmp	r0, #4
{
   18a12:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   18a14:	d907      	bls.n	18a26 <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   18a16:	2145      	movs	r1, #69	; 0x45
   18a18:	480d      	ldr	r0, [pc, #52]	; (18a50 <dk_set_led+0x40>)
   18a1a:	f003 ff13 	bl	1c844 <printk>
   18a1e:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   18a22:	4620      	mov	r0, r4
   18a24:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   18a26:	fab1 f281 	clz	r2, r1
   18a2a:	4b0a      	ldr	r3, [pc, #40]	; (18a54 <dk_set_led+0x44>)
   18a2c:	0952      	lsrs	r2, r2, #5
   18a2e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18a32:	7919      	ldrb	r1, [r3, #4]
   18a34:	4b08      	ldr	r3, [pc, #32]	; (18a58 <dk_set_led+0x48>)
   18a36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18a3a:	f7ff fd01 	bl	18440 <gpio_pin_set_raw>
	if (err) {
   18a3e:	4604      	mov	r4, r0
   18a40:	2800      	cmp	r0, #0
   18a42:	d0ee      	beq.n	18a22 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   18a44:	2145      	movs	r1, #69	; 0x45
   18a46:	4805      	ldr	r0, [pc, #20]	; (18a5c <dk_set_led+0x4c>)
   18a48:	f003 fefc 	bl	1c844 <printk>
   18a4c:	e7e9      	b.n	18a22 <dk_set_led+0x12>
   18a4e:	bf00      	nop
   18a50:	00025e09 	.word	0x00025e09
   18a54:	00022478 	.word	0x00022478
   18a58:	20009f04 	.word	0x20009f04
   18a5c:	00025ca2 	.word	0x00025ca2

00018a60 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   18a60:	4803      	ldr	r0, [pc, #12]	; (18a70 <k_sys_fatal_error_handler+0x10>)
   18a62:	2145      	movs	r1, #69	; 0x45
{
   18a64:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   18a66:	f003 feed 	bl	1c844 <printk>
	sys_arch_reboot(0);
   18a6a:	2000      	movs	r0, #0
   18a6c:	f7f5 f94e 	bl	dd0c <sys_arch_reboot>

	CODE_UNREACHABLE;
   18a70:	00025e3d 	.word	0x00025e3d

00018a74 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   18a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18a78:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   18a7a:	4c21      	ldr	r4, [pc, #132]	; (18b00 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   18a7c:	4e21      	ldr	r6, [pc, #132]	; (18b04 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18a7e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   18a82:	f8df 9084 	ldr.w	r9, [pc, #132]	; 18b08 <check_ext_api_requests+0x94>
{
   18a86:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18a88:	45a8      	cmp	r8, r5
   18a8a:	d803      	bhi.n	18a94 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   18a8c:	2000      	movs	r0, #0
   18a8e:	b005      	add	sp, #20
   18a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   18a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18a96:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   18a9a:	681f      	ldr	r7, [r3, #0]
   18a9c:	ab01      	add	r3, sp, #4
   18a9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   18aa2:	220c      	movs	r2, #12
   18aa4:	4619      	mov	r1, r3
   18aa6:	4638      	mov	r0, r7
   18aa8:	f005 fb73 	bl	1e192 <memcmp>
   18aac:	b990      	cbnz	r0, 18ad4 <check_ext_api_requests+0x60>
   18aae:	b18f      	cbz	r7, 18ad4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   18ab2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   18ab4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   18ab6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18ab8:	4291      	cmp	r1, r2
   18aba:	d10b      	bne.n	18ad4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   18abc:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   18abe:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   18ac0:	4291      	cmp	r1, r2
   18ac2:	d807      	bhi.n	18ad4 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   18ac4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   18ac6:	4291      	cmp	r1, r2
   18ac8:	d904      	bls.n	18ad4 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   18aca:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   18acc:	695b      	ldr	r3, [r3, #20]
   18ace:	ea32 0303 	bics.w	r3, r2, r3
   18ad2:	d00a      	beq.n	18aea <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   18ad4:	6a27      	ldr	r7, [r4, #32]
   18ad6:	b167      	cbz	r7, 18af2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   18ad8:	480c      	ldr	r0, [pc, #48]	; (18b0c <check_ext_api_requests+0x98>)
   18ada:	f003 feb3 	bl	1c844 <printk>
			k_panic();
   18ade:	4040      	eors	r0, r0
   18ae0:	f380 8811 	msr	BASEPRI, r0
   18ae4:	f04f 0004 	mov.w	r0, #4
   18ae8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   18aea:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18aec:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   18aee:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   18af0:	e7ca      	b.n	18a88 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   18af2:	4648      	mov	r0, r9
   18af4:	f003 fea6 	bl	1c844 <printk>
			*ext_api_req->ext_api = NULL;
   18af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18afa:	601f      	str	r7, [r3, #0]
   18afc:	e7f5      	b.n	18aea <check_ext_api_requests+0x76>
   18afe:	bf00      	nop
   18b00:	0000823c 	.word	0x0000823c
   18b04:	00021a84 	.word	0x00021a84
   18b08:	00025e88 	.word	0x00025e88
   18b0c:	00025e5f 	.word	0x00025e5f

00018b10 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   18b10:	4b04      	ldr	r3, [pc, #16]	; (18b24 <SystemCoreClockUpdate+0x14>)
   18b12:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   18b16:	4b04      	ldr	r3, [pc, #16]	; (18b28 <SystemCoreClockUpdate+0x18>)
   18b18:	f002 0203 	and.w	r2, r2, #3
   18b1c:	40d3      	lsrs	r3, r2
   18b1e:	4a03      	ldr	r2, [pc, #12]	; (18b2c <SystemCoreClockUpdate+0x1c>)
   18b20:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   18b22:	4770      	bx	lr
   18b24:	40005000 	.word	0x40005000
   18b28:	07a12000 	.word	0x07a12000
   18b2c:	200083e8 	.word	0x200083e8

00018b30 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   18b30:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   18b32:	4604      	mov	r4, r0
   18b34:	b940      	cbnz	r0, 18b48 <nrfx_clock_init+0x18>
   18b36:	4909      	ldr	r1, [pc, #36]	; (18b5c <nrfx_clock_init+0x2c>)
   18b38:	4809      	ldr	r0, [pc, #36]	; (18b60 <nrfx_clock_init+0x30>)
   18b3a:	22b3      	movs	r2, #179	; 0xb3
   18b3c:	f003 fe82 	bl	1c844 <printk>
   18b40:	21b3      	movs	r1, #179	; 0xb3
   18b42:	4806      	ldr	r0, [pc, #24]	; (18b5c <nrfx_clock_init+0x2c>)
   18b44:	f004 f924 	bl	1cd90 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   18b48:	4b06      	ldr	r3, [pc, #24]	; (18b64 <nrfx_clock_init+0x34>)
   18b4a:	791a      	ldrb	r2, [r3, #4]
   18b4c:	b922      	cbnz	r2, 18b58 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   18b4e:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   18b50:	4805      	ldr	r0, [pc, #20]	; (18b68 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   18b52:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   18b54:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18b56:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   18b58:	4804      	ldr	r0, [pc, #16]	; (18b6c <nrfx_clock_init+0x3c>)
    return err_code;
   18b5a:	e7fc      	b.n	18b56 <nrfx_clock_init+0x26>
   18b5c:	00025ebb 	.word	0x00025ebb
   18b60:	00022c66 	.word	0x00022c66
   18b64:	20009f1c 	.word	0x20009f1c
   18b68:	0bad0000 	.word	0x0bad0000
   18b6c:	0bad000c 	.word	0x0bad000c

00018b70 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   18b70:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18b72:	4b0d      	ldr	r3, [pc, #52]	; (18ba8 <nrfx_clock_enable+0x38>)
   18b74:	791b      	ldrb	r3, [r3, #4]
   18b76:	b943      	cbnz	r3, 18b8a <nrfx_clock_enable+0x1a>
   18b78:	490c      	ldr	r1, [pc, #48]	; (18bac <nrfx_clock_enable+0x3c>)
   18b7a:	480d      	ldr	r0, [pc, #52]	; (18bb0 <nrfx_clock_enable+0x40>)
   18b7c:	22cc      	movs	r2, #204	; 0xcc
   18b7e:	f003 fe61 	bl	1c844 <printk>
   18b82:	21cc      	movs	r1, #204	; 0xcc
   18b84:	4809      	ldr	r0, [pc, #36]	; (18bac <nrfx_clock_enable+0x3c>)
   18b86:	f004 f903 	bl	1cd90 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   18b8a:	2005      	movs	r0, #5
   18b8c:	f7f4 fdb2 	bl	d6f4 <arch_irq_is_enabled>
   18b90:	b910      	cbnz	r0, 18b98 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   18b92:	2005      	movs	r0, #5
   18b94:	f7f4 fd9e 	bl	d6d4 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   18b98:	2201      	movs	r2, #1
   18b9a:	4b06      	ldr	r3, [pc, #24]	; (18bb4 <nrfx_clock_enable+0x44>)
   18b9c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   18ba0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   18ba4:	bd08      	pop	{r3, pc}
   18ba6:	bf00      	nop
   18ba8:	20009f1c 	.word	0x20009f1c
   18bac:	00025ebb 	.word	0x00025ebb
   18bb0:	00022c66 	.word	0x00022c66
   18bb4:	40005000 	.word	0x40005000

00018bb8 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18bb8:	4b30      	ldr	r3, [pc, #192]	; (18c7c <nrfx_clock_start+0xc4>)
{
   18bba:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18bbc:	791b      	ldrb	r3, [r3, #4]
{
   18bbe:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18bc0:	b953      	cbnz	r3, 18bd8 <nrfx_clock_start+0x20>
   18bc2:	492f      	ldr	r1, [pc, #188]	; (18c80 <nrfx_clock_start+0xc8>)
   18bc4:	482f      	ldr	r0, [pc, #188]	; (18c84 <nrfx_clock_start+0xcc>)
   18bc6:	f44f 7284 	mov.w	r2, #264	; 0x108
   18bca:	f003 fe3b 	bl	1c844 <printk>
   18bce:	f44f 7184 	mov.w	r1, #264	; 0x108
   18bd2:	482b      	ldr	r0, [pc, #172]	; (18c80 <nrfx_clock_start+0xc8>)
   18bd4:	f004 f8dc 	bl	1cd90 <assert_post_action>
    switch (domain)
   18bd8:	2c03      	cmp	r4, #3
   18bda:	d842      	bhi.n	18c62 <nrfx_clock_start+0xaa>
   18bdc:	e8df f004 	tbb	[pc, r4]
   18be0:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18be4:	4b28      	ldr	r3, [pc, #160]	; (18c88 <nrfx_clock_start+0xd0>)
   18be6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18bea:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   18bee:	03c9      	lsls	r1, r1, #15
   18bf0:	d510      	bpl.n	18c14 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   18bf2:	f002 0203 	and.w	r2, r2, #3
   18bf6:	2a02      	cmp	r2, #2
   18bf8:	d10c      	bne.n	18c14 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18bfa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18bfe:	2200      	movs	r2, #0
   18c00:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18c04:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   18c08:	2202      	movs	r2, #2
   18c0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c0e:	2201      	movs	r2, #1
   18c10:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   18c12:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   18c14:	2201      	movs	r2, #1
   18c16:	e7f0      	b.n	18bfa <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c18:	2200      	movs	r2, #0
   18c1a:	4b1b      	ldr	r3, [pc, #108]	; (18c88 <nrfx_clock_start+0xd0>)
   18c1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18c20:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   18c24:	2201      	movs	r2, #1
   18c26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c2a:	601a      	str	r2, [r3, #0]
}
   18c2c:	e7f1      	b.n	18c12 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c2e:	2200      	movs	r2, #0
   18c30:	4b15      	ldr	r3, [pc, #84]	; (18c88 <nrfx_clock_start+0xd0>)
   18c32:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   18c36:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   18c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
   18c3e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c42:	2201      	movs	r2, #1
   18c44:	621a      	str	r2, [r3, #32]
}
   18c46:	e7e4      	b.n	18c12 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c48:	2200      	movs	r2, #0
   18c4a:	4b0f      	ldr	r3, [pc, #60]	; (18c88 <nrfx_clock_start+0xd0>)
   18c4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18c50:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   18c54:	f44f 7280 	mov.w	r2, #256	; 0x100
   18c58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c5c:	2201      	movs	r2, #1
   18c5e:	619a      	str	r2, [r3, #24]
}
   18c60:	e7d7      	b.n	18c12 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   18c62:	4907      	ldr	r1, [pc, #28]	; (18c80 <nrfx_clock_start+0xc8>)
   18c64:	4807      	ldr	r0, [pc, #28]	; (18c84 <nrfx_clock_start+0xcc>)
   18c66:	f44f 729d 	mov.w	r2, #314	; 0x13a
   18c6a:	f003 fdeb 	bl	1c844 <printk>
}
   18c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   18c72:	f44f 719d 	mov.w	r1, #314	; 0x13a
   18c76:	4802      	ldr	r0, [pc, #8]	; (18c80 <nrfx_clock_start+0xc8>)
   18c78:	f004 b88a 	b.w	1cd90 <assert_post_action>
   18c7c:	20009f1c 	.word	0x20009f1c
   18c80:	00025ebb 	.word	0x00025ebb
   18c84:	00022c66 	.word	0x00022c66
   18c88:	40005000 	.word	0x40005000

00018c8c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18c8c:	4b42      	ldr	r3, [pc, #264]	; (18d98 <nrfx_clock_stop+0x10c>)
{
   18c8e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18c90:	791b      	ldrb	r3, [r3, #4]
{
   18c92:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   18c94:	b953      	cbnz	r3, 18cac <nrfx_clock_stop+0x20>
   18c96:	4941      	ldr	r1, [pc, #260]	; (18d9c <nrfx_clock_stop+0x110>)
   18c98:	4841      	ldr	r0, [pc, #260]	; (18da0 <nrfx_clock_stop+0x114>)
   18c9a:	f240 1241 	movw	r2, #321	; 0x141
   18c9e:	f003 fdd1 	bl	1c844 <printk>
   18ca2:	f240 1141 	movw	r1, #321	; 0x141
   18ca6:	483d      	ldr	r0, [pc, #244]	; (18d9c <nrfx_clock_stop+0x110>)
   18ca8:	f004 f872 	bl	1cd90 <assert_post_action>
    switch (domain)
   18cac:	2c03      	cmp	r4, #3
   18cae:	d856      	bhi.n	18d5e <nrfx_clock_stop+0xd2>
   18cb0:	e8df f004 	tbb	[pc, r4]
   18cb4:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   18cb8:	2202      	movs	r2, #2
   18cba:	4b3a      	ldr	r3, [pc, #232]	; (18da4 <nrfx_clock_stop+0x118>)
   18cbc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18cc0:	2200      	movs	r2, #0
   18cc2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18cc6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18cca:	2201      	movs	r2, #1
   18ccc:	60da      	str	r2, [r3, #12]
   18cce:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   18cd2:	4e34      	ldr	r6, [pc, #208]	; (18da4 <nrfx_clock_stop+0x118>)
    switch (domain)
   18cd4:	2c02      	cmp	r4, #2
   18cd6:	d04f      	beq.n	18d78 <nrfx_clock_stop+0xec>
   18cd8:	2c03      	cmp	r4, #3
   18cda:	d050      	beq.n	18d7e <nrfx_clock_stop+0xf2>
   18cdc:	2c00      	cmp	r4, #0
   18cde:	d151      	bne.n	18d84 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18ce0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   18ce4:	03db      	lsls	r3, r3, #15
   18ce6:	d51f      	bpl.n	18d28 <nrfx_clock_stop+0x9c>
   18ce8:	2001      	movs	r0, #1
   18cea:	f007 fe6f 	bl	209cc <nrfx_busy_wait>
   18cee:	3d01      	subs	r5, #1
   18cf0:	d1f0      	bne.n	18cd4 <nrfx_clock_stop+0x48>
   18cf2:	e019      	b.n	18d28 <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   18cf4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18cf6:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18cf8:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   18cfc:	4c29      	ldr	r4, [pc, #164]	; (18da4 <nrfx_clock_stop+0x118>)
   18cfe:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d02:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d06:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d0a:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18d0c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18d10:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18d14:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18d18:	03d2      	lsls	r2, r2, #15
   18d1a:	d505      	bpl.n	18d28 <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   18d1c:	b123      	cbz	r3, 18d28 <nrfx_clock_stop+0x9c>
   18d1e:	2001      	movs	r0, #1
   18d20:	f007 fe54 	bl	209cc <nrfx_busy_wait>
   18d24:	3d01      	subs	r5, #1
   18d26:	d1f1      	bne.n	18d0c <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   18d28:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   18d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
   18d2e:	4b1d      	ldr	r3, [pc, #116]	; (18da4 <nrfx_clock_stop+0x118>)
   18d30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d34:	2200      	movs	r2, #0
   18d36:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   18d3a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d3e:	2201      	movs	r2, #1
   18d40:	625a      	str	r2, [r3, #36]	; 0x24
}
   18d42:	e7c4      	b.n	18cce <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   18d44:	f44f 7280 	mov.w	r2, #256	; 0x100
   18d48:	4b16      	ldr	r3, [pc, #88]	; (18da4 <nrfx_clock_stop+0x118>)
   18d4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d4e:	2200      	movs	r2, #0
   18d50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18d54:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d58:	2201      	movs	r2, #1
   18d5a:	61da      	str	r2, [r3, #28]
}
   18d5c:	e7b7      	b.n	18cce <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   18d5e:	490f      	ldr	r1, [pc, #60]	; (18d9c <nrfx_clock_stop+0x110>)
   18d60:	480f      	ldr	r0, [pc, #60]	; (18da0 <nrfx_clock_stop+0x114>)
   18d62:	f240 125d 	movw	r2, #349	; 0x15d
   18d66:	f003 fd6d 	bl	1c844 <printk>
   18d6a:	f240 115d 	movw	r1, #349	; 0x15d
   18d6e:	480b      	ldr	r0, [pc, #44]	; (18d9c <nrfx_clock_stop+0x110>)
}
   18d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   18d74:	f004 b80c 	b.w	1cd90 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   18d78:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   18d7c:	e7b2      	b.n	18ce4 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   18d7e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   18d82:	e7af      	b.n	18ce4 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   18d84:	4908      	ldr	r1, [pc, #32]	; (18da8 <nrfx_clock_stop+0x11c>)
   18d86:	4806      	ldr	r0, [pc, #24]	; (18da0 <nrfx_clock_stop+0x114>)
   18d88:	f240 3242 	movw	r2, #834	; 0x342
   18d8c:	f003 fd5a 	bl	1c844 <printk>
   18d90:	f240 3142 	movw	r1, #834	; 0x342
   18d94:	4804      	ldr	r0, [pc, #16]	; (18da8 <nrfx_clock_stop+0x11c>)
   18d96:	e7eb      	b.n	18d70 <nrfx_clock_stop+0xe4>
   18d98:	20009f1c 	.word	0x20009f1c
   18d9c:	00025ebb 	.word	0x00025ebb
   18da0:	00022c66 	.word	0x00022c66
   18da4:	40005000 	.word	0x40005000
   18da8:	00025ef8 	.word	0x00025ef8

00018dac <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18dac:	4b28      	ldr	r3, [pc, #160]	; (18e50 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   18dae:	b510      	push	{r4, lr}
   18db0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   18db4:	b152      	cbz	r2, 18dcc <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18db6:	2000      	movs	r0, #0
   18db8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   18dbc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   18dc0:	2201      	movs	r2, #1
   18dc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18dc6:	4b23      	ldr	r3, [pc, #140]	; (18e54 <nrfx_power_clock_irq_handler+0xa8>)
   18dc8:	681b      	ldr	r3, [r3, #0]
   18dca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18dcc:	4b20      	ldr	r3, [pc, #128]	; (18e50 <nrfx_power_clock_irq_handler+0xa4>)
   18dce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   18dd2:	b18a      	cbz	r2, 18df8 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18dd4:	2200      	movs	r2, #0
   18dd6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18dda:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18dde:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18de2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   18de6:	f002 0203 	and.w	r2, r2, #3
   18dea:	2a01      	cmp	r2, #1
   18dec:	f04f 0102 	mov.w	r1, #2
   18df0:	d126      	bne.n	18e40 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18df2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18df6:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18df8:	4b15      	ldr	r3, [pc, #84]	; (18e50 <nrfx_power_clock_irq_handler+0xa4>)
   18dfa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   18dfe:	b162      	cbz	r2, 18e1a <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18e00:	2200      	movs	r2, #0
   18e02:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18e06:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   18e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
   18e0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   18e12:	4b10      	ldr	r3, [pc, #64]	; (18e54 <nrfx_power_clock_irq_handler+0xa8>)
   18e14:	2004      	movs	r0, #4
   18e16:	681b      	ldr	r3, [r3, #0]
   18e18:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18e1a:	4b0d      	ldr	r3, [pc, #52]	; (18e50 <nrfx_power_clock_irq_handler+0xa4>)
   18e1c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   18e20:	b1aa      	cbz	r2, 18e4e <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   18e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18e26:	2200      	movs	r2, #0
   18e28:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   18e2c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   18e30:	f44f 7200 	mov.w	r2, #512	; 0x200
   18e34:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   18e38:	4b06      	ldr	r3, [pc, #24]	; (18e54 <nrfx_power_clock_irq_handler+0xa8>)
   18e3a:	2005      	movs	r0, #5
   18e3c:	681b      	ldr	r3, [r3, #0]
   18e3e:	4718      	bx	r3
   18e40:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18e44:	4b03      	ldr	r3, [pc, #12]	; (18e54 <nrfx_power_clock_irq_handler+0xa8>)
   18e46:	2001      	movs	r0, #1
   18e48:	681b      	ldr	r3, [r3, #0]
   18e4a:	4798      	blx	r3
   18e4c:	e7d4      	b.n	18df8 <nrfx_power_clock_irq_handler+0x4c>
}
   18e4e:	bd10      	pop	{r4, pc}
   18e50:	40005000 	.word	0x40005000
   18e54:	20009f1c 	.word	0x20009f1c

00018e58 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   18e58:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   18e5a:	4c0a      	ldr	r4, [pc, #40]	; (18e84 <nrfx_dppi_channel_alloc+0x2c>)
   18e5c:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   18e5e:	43ce      	mvns	r6, r1
   18e60:	d00e      	beq.n	18e80 <nrfx_dppi_channel_alloc+0x28>
   18e62:	2300      	movs	r3, #0
   18e64:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   18e66:	fa26 f502 	lsr.w	r5, r6, r2
   18e6a:	07ed      	lsls	r5, r5, #31
   18e6c:	f103 0301 	add.w	r3, r3, #1
   18e70:	d5f8      	bpl.n	18e64 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   18e72:	2301      	movs	r3, #1
   18e74:	4093      	lsls	r3, r2
   18e76:	430b      	orrs	r3, r1
    *p_channel = channel;
   18e78:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   18e7a:	4803      	ldr	r0, [pc, #12]	; (18e88 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   18e7c:	6023      	str	r3, [r4, #0]
}
   18e7e:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   18e80:	4802      	ldr	r0, [pc, #8]	; (18e8c <nrfx_dppi_channel_alloc+0x34>)
   18e82:	e7fc      	b.n	18e7e <nrfx_dppi_channel_alloc+0x26>
   18e84:	20009f24 	.word	0x20009f24
   18e88:	0bad0000 	.word	0x0bad0000
   18e8c:	0bad0002 	.word	0x0bad0002

00018e90 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   18e90:	2301      	movs	r3, #1
   18e92:	fa03 f000 	lsl.w	r0, r3, r0
   18e96:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   18e98:	b193      	cbz	r3, 18ec0 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   18e9a:	f04f 0320 	mov.w	r3, #32
   18e9e:	f3ef 8111 	mrs	r1, BASEPRI
   18ea2:	f383 8811 	msr	BASEPRI, r3
   18ea6:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   18eaa:	4a06      	ldr	r2, [pc, #24]	; (18ec4 <nrfx_gpiote_channel_free+0x34>)
   18eac:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   18eae:	ea23 0000 	bic.w	r0, r3, r0
   18eb2:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   18eb4:	f381 8811 	msr	BASEPRI, r1
   18eb8:	f3bf 8f6f 	isb	sy
   18ebc:	4802      	ldr	r0, [pc, #8]	; (18ec8 <nrfx_gpiote_channel_free+0x38>)
   18ebe:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   18ec0:	4802      	ldr	r0, [pc, #8]	; (18ecc <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18ec2:	4770      	bx	lr
   18ec4:	20009f28 	.word	0x20009f28
   18ec8:	0bad0000 	.word	0x0bad0000
   18ecc:	0bad0004 	.word	0x0bad0004

00018ed0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   18ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   18ed4:	22ff      	movs	r2, #255	; 0xff
{
   18ed6:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   18ed8:	2601      	movs	r6, #1
{
   18eda:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   18edc:	f8df e054 	ldr.w	lr, [pc, #84]	; 18f34 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   18ee0:	4815      	ldr	r0, [pc, #84]	; (18f38 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   18ee2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 18f3c <nrfx_gpiote_channel_alloc+0x6c>
   18ee6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   18ee8:	f04f 0120 	mov.w	r1, #32
   18eec:	f3ef 8c11 	mrs	ip, BASEPRI
   18ef0:	f381 8811 	msr	BASEPRI, r1
   18ef4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   18ef8:	fa22 f103 	lsr.w	r1, r2, r3
   18efc:	07c9      	lsls	r1, r1, #31
   18efe:	d50a      	bpl.n	18f16 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   18f00:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   18f04:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   18f08:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   18f0a:	bf01      	itttt	eq
   18f0c:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   18f0e:	4339      	orreq	r1, r7
   18f10:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   18f14:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   18f16:	f38c 8811 	msr	BASEPRI, ip
   18f1a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   18f1e:	4540      	cmp	r0, r8
   18f20:	d005      	beq.n	18f2e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   18f22:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   18f26:	439a      	bics	r2, r3
   18f28:	f104 0401 	add.w	r4, r4, #1
   18f2c:	d1db      	bne.n	18ee6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f32:	bf00      	nop
   18f34:	20009f28 	.word	0x20009f28
   18f38:	0bad0002 	.word	0x0bad0002
   18f3c:	0bad0000 	.word	0x0bad0000

00018f40 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   18f40:	b570      	push	{r4, r5, r6, lr}
   18f42:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   18f44:	460d      	mov	r5, r1
   18f46:	b941      	cbnz	r1, 18f5a <nrfx_ipc_init+0x1a>
   18f48:	490b      	ldr	r1, [pc, #44]	; (18f78 <nrfx_ipc_init+0x38>)
   18f4a:	480c      	ldr	r0, [pc, #48]	; (18f7c <nrfx_ipc_init+0x3c>)
   18f4c:	2232      	movs	r2, #50	; 0x32
   18f4e:	f003 fc79 	bl	1c844 <printk>
   18f52:	2132      	movs	r1, #50	; 0x32
   18f54:	4808      	ldr	r0, [pc, #32]	; (18f78 <nrfx_ipc_init+0x38>)
   18f56:	f003 ff1b 	bl	1cd90 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   18f5a:	4c09      	ldr	r4, [pc, #36]	; (18f80 <nrfx_ipc_init+0x40>)
   18f5c:	7923      	ldrb	r3, [r4, #4]
   18f5e:	b943      	cbnz	r3, 18f72 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   18f60:	202a      	movs	r0, #42	; 0x2a
   18f62:	f7f4 fbb7 	bl	d6d4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   18f66:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   18f68:	4806      	ldr	r0, [pc, #24]	; (18f84 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   18f6a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   18f6c:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   18f6e:	60a6      	str	r6, [r4, #8]
}
   18f70:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   18f72:	4805      	ldr	r0, [pc, #20]	; (18f88 <nrfx_ipc_init+0x48>)
   18f74:	e7fc      	b.n	18f70 <nrfx_ipc_init+0x30>
   18f76:	bf00      	nop
   18f78:	00025f2c 	.word	0x00025f2c
   18f7c:	00022c66 	.word	0x00022c66
   18f80:	20009f88 	.word	0x20009f88
   18f84:	0bad0000 	.word	0x0bad0000
   18f88:	0bad000c 	.word	0x0bad000c

00018f8c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   18f8c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   18f8e:	4604      	mov	r4, r0
   18f90:	b940      	cbnz	r0, 18fa4 <nrfx_ipc_config_load+0x18>
   18f92:	4919      	ldr	r1, [pc, #100]	; (18ff8 <nrfx_ipc_config_load+0x6c>)
   18f94:	4819      	ldr	r0, [pc, #100]	; (18ffc <nrfx_ipc_config_load+0x70>)
   18f96:	2244      	movs	r2, #68	; 0x44
   18f98:	f003 fc54 	bl	1c844 <printk>
   18f9c:	2144      	movs	r1, #68	; 0x44
   18f9e:	4816      	ldr	r0, [pc, #88]	; (18ff8 <nrfx_ipc_config_load+0x6c>)
   18fa0:	f003 fef6 	bl	1cd90 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   18fa4:	4b16      	ldr	r3, [pc, #88]	; (19000 <nrfx_ipc_config_load+0x74>)
   18fa6:	791b      	ldrb	r3, [r3, #4]
   18fa8:	2b01      	cmp	r3, #1
   18faa:	d008      	beq.n	18fbe <nrfx_ipc_config_load+0x32>
   18fac:	4912      	ldr	r1, [pc, #72]	; (18ff8 <nrfx_ipc_config_load+0x6c>)
   18fae:	4813      	ldr	r0, [pc, #76]	; (18ffc <nrfx_ipc_config_load+0x70>)
   18fb0:	2245      	movs	r2, #69	; 0x45
   18fb2:	f003 fc47 	bl	1c844 <printk>
   18fb6:	2145      	movs	r1, #69	; 0x45
   18fb8:	480f      	ldr	r0, [pc, #60]	; (18ff8 <nrfx_ipc_config_load+0x6c>)
   18fba:	f003 fee9 	bl	1cd90 <assert_post_action>
{
   18fbe:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   18fc0:	4a10      	ldr	r2, [pc, #64]	; (19004 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   18fc2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   18fc6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   18fca:	3301      	adds	r3, #1
   18fcc:	2b10      	cmp	r3, #16
   18fce:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   18fd2:	d1f6      	bne.n	18fc2 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   18fd4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   18fd6:	4a0b      	ldr	r2, [pc, #44]	; (19004 <nrfx_ipc_config_load+0x78>)
   18fd8:	f104 0140 	add.w	r1, r4, #64	; 0x40
   18fdc:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   18fe0:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   18fe4:	3301      	adds	r3, #1
   18fe6:	2b10      	cmp	r3, #16
   18fe8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   18fec:	d1f6      	bne.n	18fdc <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   18fee:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   18ff2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   18ff6:	bd38      	pop	{r3, r4, r5, pc}
   18ff8:	00025f2c 	.word	0x00025f2c
   18ffc:	00022c66 	.word	0x00022c66
   19000:	20009f88 	.word	0x20009f88
   19004:	4002a000 	.word	0x4002a000

00019008 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   19008:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1900a:	4b0a      	ldr	r3, [pc, #40]	; (19034 <nrfx_ipc_receive_event_enable+0x2c>)
{
   1900c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1900e:	791b      	ldrb	r3, [r3, #4]
   19010:	2b01      	cmp	r3, #1
   19012:	d008      	beq.n	19026 <nrfx_ipc_receive_event_enable+0x1e>
   19014:	4908      	ldr	r1, [pc, #32]	; (19038 <nrfx_ipc_receive_event_enable+0x30>)
   19016:	4809      	ldr	r0, [pc, #36]	; (1903c <nrfx_ipc_receive_event_enable+0x34>)
   19018:	226a      	movs	r2, #106	; 0x6a
   1901a:	f003 fc13 	bl	1c844 <printk>
   1901e:	216a      	movs	r1, #106	; 0x6a
   19020:	4805      	ldr	r0, [pc, #20]	; (19038 <nrfx_ipc_receive_event_enable+0x30>)
   19022:	f003 feb5 	bl	1cd90 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   19026:	2301      	movs	r3, #1
   19028:	fa03 f404 	lsl.w	r4, r3, r4
   1902c:	4b04      	ldr	r3, [pc, #16]	; (19040 <nrfx_ipc_receive_event_enable+0x38>)
   1902e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   19032:	bd10      	pop	{r4, pc}
   19034:	20009f88 	.word	0x20009f88
   19038:	00025f2c 	.word	0x00025f2c
   1903c:	00022c66 	.word	0x00022c66
   19040:	4002a000 	.word	0x4002a000

00019044 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   19044:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   19046:	4b0a      	ldr	r3, [pc, #40]	; (19070 <nrfx_ipc_receive_event_disable+0x2c>)
{
   19048:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1904a:	791b      	ldrb	r3, [r3, #4]
   1904c:	2b01      	cmp	r3, #1
   1904e:	d008      	beq.n	19062 <nrfx_ipc_receive_event_disable+0x1e>
   19050:	4908      	ldr	r1, [pc, #32]	; (19074 <nrfx_ipc_receive_event_disable+0x30>)
   19052:	4809      	ldr	r0, [pc, #36]	; (19078 <nrfx_ipc_receive_event_disable+0x34>)
   19054:	2270      	movs	r2, #112	; 0x70
   19056:	f003 fbf5 	bl	1c844 <printk>
   1905a:	2170      	movs	r1, #112	; 0x70
   1905c:	4805      	ldr	r0, [pc, #20]	; (19074 <nrfx_ipc_receive_event_disable+0x30>)
   1905e:	f003 fe97 	bl	1cd90 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   19062:	2301      	movs	r3, #1
   19064:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   19068:	4b04      	ldr	r3, [pc, #16]	; (1907c <nrfx_ipc_receive_event_disable+0x38>)
   1906a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   1906e:	bd10      	pop	{r4, pc}
   19070:	20009f88 	.word	0x20009f88
   19074:	00025f2c 	.word	0x00025f2c
   19078:	00022c66 	.word	0x00022c66
   1907c:	4002a000 	.word	0x4002a000

00019080 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   19080:	4b15      	ldr	r3, [pc, #84]	; (190d8 <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   19082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19086:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   1908a:	4f14      	ldr	r7, [pc, #80]	; (190dc <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   1908c:	4635      	mov	r5, r6
   1908e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 190e0 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   19092:	b935      	cbnz	r5, 190a2 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   19094:	4b13      	ldr	r3, [pc, #76]	; (190e4 <nrfx_ipc_irq_handler+0x64>)
   19096:	4630      	mov	r0, r6
}
   19098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   1909c:	681a      	ldr	r2, [r3, #0]
   1909e:	6899      	ldr	r1, [r3, #8]
   190a0:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   190a2:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   190a6:	2301      	movs	r3, #1
  return __builtin_clz(value);
   190a8:	fab4 f484 	clz	r4, r4
   190ac:	40a3      	lsls	r3, r4
   190ae:	2c0f      	cmp	r4, #15
   190b0:	ea25 0503 	bic.w	r5, r5, r3
   190b4:	d90a      	bls.n	190cc <nrfx_ipc_irq_handler+0x4c>
   190b6:	4639      	mov	r1, r7
   190b8:	4640      	mov	r0, r8
   190ba:	f240 12e5 	movw	r2, #485	; 0x1e5
   190be:	f003 fbc1 	bl	1c844 <printk>
   190c2:	f240 11e5 	movw	r1, #485	; 0x1e5
   190c6:	4638      	mov	r0, r7
   190c8:	f003 fe62 	bl	1cd90 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   190cc:	2200      	movs	r2, #0
   190ce:	4b06      	ldr	r3, [pc, #24]	; (190e8 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   190d0:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   190d2:	511a      	str	r2, [r3, r4]
}
   190d4:	e7dd      	b.n	19092 <nrfx_ipc_irq_handler+0x12>
   190d6:	bf00      	nop
   190d8:	4002a000 	.word	0x4002a000
   190dc:	00025f67 	.word	0x00025f67
   190e0:	00022c66 	.word	0x00022c66
   190e4:	20009f88 	.word	0x20009f88
   190e8:	4002a100 	.word	0x4002a100

000190ec <nvmc_word_write>:
   190ec:	4a04      	ldr	r2, [pc, #16]	; (19100 <nvmc_word_write+0x14>)
   190ee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   190f2:	07db      	lsls	r3, r3, #31
   190f4:	d5fb      	bpl.n	190ee <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   190f6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   190f8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   190fc:	4770      	bx	lr
   190fe:	bf00      	nop
   19100:	40039000 	.word	0x40039000

00019104 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   19104:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   19108:	b510      	push	{r4, lr}
   1910a:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1910c:	d30a      	bcc.n	19124 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1910e:	4910      	ldr	r1, [pc, #64]	; (19150 <nrfx_nvmc_page_erase+0x4c>)
   19110:	4810      	ldr	r0, [pc, #64]	; (19154 <nrfx_nvmc_page_erase+0x50>)
   19112:	f44f 7282 	mov.w	r2, #260	; 0x104
   19116:	f003 fb95 	bl	1c844 <printk>
   1911a:	f44f 7182 	mov.w	r1, #260	; 0x104
   1911e:	480c      	ldr	r0, [pc, #48]	; (19150 <nrfx_nvmc_page_erase+0x4c>)
   19120:	f003 fe36 	bl	1cd90 <assert_post_action>
    return !(addr % flash_page_size_get());
   19124:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   19128:	b97b      	cbnz	r3, 1914a <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1912a:	2202      	movs	r2, #2
   1912c:	4b0a      	ldr	r3, [pc, #40]	; (19158 <nrfx_nvmc_page_erase+0x54>)
   1912e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   19132:	f04f 32ff 	mov.w	r2, #4294967295
   19136:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   19138:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1913c:	07d2      	lsls	r2, r2, #31
   1913e:	d5fb      	bpl.n	19138 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   19140:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   19142:	4806      	ldr	r0, [pc, #24]	; (1915c <nrfx_nvmc_page_erase+0x58>)
   19144:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   19148:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1914a:	4805      	ldr	r0, [pc, #20]	; (19160 <nrfx_nvmc_page_erase+0x5c>)
   1914c:	e7fc      	b.n	19148 <nrfx_nvmc_page_erase+0x44>
   1914e:	bf00      	nop
   19150:	00025f99 	.word	0x00025f99
   19154:	00022c66 	.word	0x00022c66
   19158:	40039000 	.word	0x40039000
   1915c:	0bad0000 	.word	0x0bad0000
   19160:	0bad000a 	.word	0x0bad000a

00019164 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   19164:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   19168:	b570      	push	{r4, r5, r6, lr}
   1916a:	4604      	mov	r4, r0
   1916c:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1916e:	d30a      	bcc.n	19186 <nrfx_nvmc_word_write+0x22>
    NRFX_ASSERT(is_valid_address(addr, true));
   19170:	4911      	ldr	r1, [pc, #68]	; (191b8 <nrfx_nvmc_word_write+0x54>)
   19172:	4812      	ldr	r0, [pc, #72]	; (191bc <nrfx_nvmc_word_write+0x58>)
   19174:	f44f 72c9 	mov.w	r2, #402	; 0x192
   19178:	f003 fb64 	bl	1c844 <printk>
   1917c:	f44f 71c9 	mov.w	r1, #402	; 0x192
   19180:	480d      	ldr	r0, [pc, #52]	; (191b8 <nrfx_nvmc_word_write+0x54>)
   19182:	f003 fe05 	bl	1cd90 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   19186:	07a3      	lsls	r3, r4, #30
   19188:	d00a      	beq.n	191a0 <nrfx_nvmc_word_write+0x3c>
   1918a:	490b      	ldr	r1, [pc, #44]	; (191b8 <nrfx_nvmc_word_write+0x54>)
   1918c:	480b      	ldr	r0, [pc, #44]	; (191bc <nrfx_nvmc_word_write+0x58>)
   1918e:	f240 1293 	movw	r2, #403	; 0x193
   19192:	f003 fb57 	bl	1c844 <printk>
   19196:	f240 1193 	movw	r1, #403	; 0x193
   1919a:	4807      	ldr	r0, [pc, #28]	; (191b8 <nrfx_nvmc_word_write+0x54>)
   1919c:	f003 fdf8 	bl	1cd90 <assert_post_action>
   191a0:	2301      	movs	r3, #1
   191a2:	4e07      	ldr	r6, [pc, #28]	; (191c0 <nrfx_nvmc_word_write+0x5c>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   191a4:	4629      	mov	r1, r5
   191a6:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584
   191aa:	4620      	mov	r0, r4
   191ac:	f7ff ff9e 	bl	190ec <nvmc_word_write>
   191b0:	2300      	movs	r3, #0
   191b2:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   191b6:	bd70      	pop	{r4, r5, r6, pc}
   191b8:	00025f99 	.word	0x00025f99
   191bc:	00022c66 	.word	0x00022c66
   191c0:	40039000 	.word	0x40039000

000191c4 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   191c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191c8:	460e      	mov	r6, r1
   191ca:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   191cc:	4d0c      	ldr	r5, [pc, #48]	; (19200 <metal_generic_dev_open+0x3c>)
   191ce:	f855 4f18 	ldr.w	r4, [r5, #24]!
   191d2:	42ac      	cmp	r4, r5
   191d4:	d103      	bne.n	191de <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   191d6:	f06f 0012 	mvn.w	r0, #18
   191da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   191de:	4631      	mov	r1, r6
   191e0:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   191e4:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   191e8:	f004 ffb6 	bl	1e158 <strcmp>
   191ec:	b930      	cbnz	r0, 191fc <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   191ee:	4640      	mov	r0, r8
			*device = dev;
   191f0:	f8c7 8000 	str.w	r8, [r7]
}
   191f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   191f8:	f007 bcca 	b.w	20b90 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   191fc:	6824      	ldr	r4, [r4, #0]
   191fe:	e7e8      	b.n	191d2 <metal_generic_dev_open+0xe>
   19200:	20009f94 	.word	0x20009f94

00019204 <metal_bus_find>:
{
   19204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19208:	4607      	mov	r7, r0
   1920a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1920c:	4e0b      	ldr	r6, [pc, #44]	; (1923c <metal_bus_find+0x38>)
   1920e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   19212:	42b4      	cmp	r4, r6
   19214:	d102      	bne.n	1921c <metal_bus_find+0x18>
	return -ENOENT;
   19216:	f06f 0001 	mvn.w	r0, #1
   1921a:	e00a      	b.n	19232 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1921c:	4639      	mov	r1, r7
   1921e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   19222:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   19226:	f004 ff97 	bl	1e158 <strcmp>
   1922a:	b920      	cbnz	r0, 19236 <metal_bus_find+0x32>
   1922c:	b11d      	cbz	r5, 19236 <metal_bus_find+0x32>
			*result = bus;
   1922e:	f8c5 8000 	str.w	r8, [r5]
}
   19232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   19236:	6824      	ldr	r4, [r4, #0]
   19238:	e7eb      	b.n	19212 <metal_bus_find+0xe>
   1923a:	bf00      	nop
   1923c:	20009f94 	.word	0x20009f94

00019240 <metal_bus_register>:
{
   19240:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   19242:	4604      	mov	r4, r0
   19244:	b910      	cbnz	r0, 1924c <metal_bus_register+0xc>
		return -EINVAL;
   19246:	f06f 0015 	mvn.w	r0, #21
}
   1924a:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1924c:	6800      	ldr	r0, [r0, #0]
   1924e:	2800      	cmp	r0, #0
   19250:	d0f9      	beq.n	19246 <metal_bus_register+0x6>
   19252:	f004 ff71 	bl	1e138 <strlen>
   19256:	2800      	cmp	r0, #0
   19258:	d0f5      	beq.n	19246 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1925a:	2100      	movs	r1, #0
   1925c:	6820      	ldr	r0, [r4, #0]
   1925e:	f7ff ffd1 	bl	19204 <metal_bus_find>
   19262:	b1c0      	cbz	r0, 19296 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   19264:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   19268:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   1926c:	4b0c      	ldr	r3, [pc, #48]	; (192a0 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1926e:	f104 0224 	add.w	r2, r4, #36	; 0x24
   19272:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   19274:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   19278:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1927a:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1927c:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1927e:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   19280:	781a      	ldrb	r2, [r3, #0]
   19282:	2a06      	cmp	r2, #6
   19284:	d905      	bls.n	19292 <metal_bus_register+0x52>
   19286:	685b      	ldr	r3, [r3, #4]
   19288:	b143      	cbz	r3, 1929c <metal_bus_register+0x5c>
   1928a:	2007      	movs	r0, #7
   1928c:	6822      	ldr	r2, [r4, #0]
   1928e:	4905      	ldr	r1, [pc, #20]	; (192a4 <metal_bus_register+0x64>)
   19290:	4798      	blx	r3
	return 0;
   19292:	2000      	movs	r0, #0
   19294:	e7d9      	b.n	1924a <metal_bus_register+0xa>
		return -EEXIST;
   19296:	f06f 0010 	mvn.w	r0, #16
   1929a:	e7d6      	b.n	1924a <metal_bus_register+0xa>
	return 0;
   1929c:	4618      	mov	r0, r3
   1929e:	e7d4      	b.n	1924a <metal_bus_register+0xa>
   192a0:	20009f94 	.word	0x20009f94
   192a4:	00025fd5 	.word	0x00025fd5

000192a8 <metal_register_generic_device>:
{
   192a8:	b510      	push	{r4, lr}
   192aa:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   192ac:	6800      	ldr	r0, [r0, #0]
   192ae:	b910      	cbnz	r0, 192b6 <metal_register_generic_device+0xe>
		return -EINVAL;
   192b0:	f06f 0015 	mvn.w	r0, #21
}
   192b4:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   192b6:	f004 ff3f 	bl	1e138 <strlen>
   192ba:	2800      	cmp	r0, #0
   192bc:	d0f8      	beq.n	192b0 <metal_register_generic_device+0x8>
   192be:	68a3      	ldr	r3, [r4, #8]
   192c0:	2b01      	cmp	r3, #1
   192c2:	d8f5      	bhi.n	192b0 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   192c4:	4b06      	ldr	r3, [pc, #24]	; (192e0 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   192c6:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   192ca:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   192cc:	4b05      	ldr	r3, [pc, #20]	; (192e4 <metal_register_generic_device+0x3c>)
   192ce:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   192d0:	f103 0018 	add.w	r0, r3, #24
   192d4:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   192d6:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   192d8:	61d9      	str	r1, [r3, #28]
	return 0;
   192da:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   192dc:	6011      	str	r1, [r2, #0]
}
   192de:	e7e9      	b.n	192b4 <metal_register_generic_device+0xc>
   192e0:	200083ec 	.word	0x200083ec
   192e4:	20009f94 	.word	0x20009f94

000192e8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   192e8:	b538      	push	{r3, r4, r5, lr}
   192ea:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   192ec:	4c0d      	ldr	r4, [pc, #52]	; (19324 <metal_init+0x3c>)
   192ee:	2220      	movs	r2, #32
   192f0:	4620      	mov	r0, r4
   192f2:	2100      	movs	r1, #0
   192f4:	f004 ff89 	bl	1e20a <memset>

	_metal.common.log_handler   = params->log_handler;
   192f8:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   192fa:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   192fc:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   192fe:	4623      	mov	r3, r4
   19300:	792a      	ldrb	r2, [r5, #4]
   19302:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   19306:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   1930a:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   1930e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   19312:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   19316:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   1931a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   1931e:	f000 b803 	b.w	19328 <metal_sys_init>
   19322:	bf00      	nop
   19324:	20009f94 	.word	0x20009f94

00019328 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   19328:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1932a:	4802      	ldr	r0, [pc, #8]	; (19334 <metal_sys_init+0xc>)
   1932c:	f7ff ff88 	bl	19240 <metal_bus_register>
	return 0;
}
   19330:	2000      	movs	r0, #0
   19332:	bd08      	pop	{r3, pc}
   19334:	200083ec 	.word	0x200083ec

00019338 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   19338:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1933a:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   1933c:	2b06      	cmp	r3, #6
{
   1933e:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   19340:	bf88      	it	hi
   19342:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   19344:	4b09      	ldr	r3, [pc, #36]	; (1936c <metal_zephyr_log_handler+0x34>)
{
   19346:	ac05      	add	r4, sp, #20
   19348:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   1934c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   19350:	4807      	ldr	r0, [pc, #28]	; (19370 <metal_zephyr_log_handler+0x38>)
   19352:	f003 fa77 	bl	1c844 <printk>

	va_start(args, format);
	vprintk(format, args);
   19356:	4621      	mov	r1, r4
   19358:	4628      	mov	r0, r5
	va_start(args, format);
   1935a:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   1935c:	f7f0 fdb2 	bl	9ec4 <vprintk>
	va_end(args);
}
   19360:	b002      	add	sp, #8
   19362:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   19366:	b003      	add	sp, #12
   19368:	4770      	bx	lr
   1936a:	bf00      	nop
   1936c:	00022498 	.word	0x00022498
   19370:	00023ed7 	.word	0x00023ed7

00019374 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   19374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19378:	b087      	sub	sp, #28
   1937a:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1937c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1937e:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   19380:	4293      	cmp	r3, r2
{
   19382:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   19384:	d349      	bcc.n	1941a <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   19386:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   19388:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   1938c:	42b4      	cmp	r4, r6
   1938e:	d103      	bne.n	19398 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   19390:	2000      	movs	r0, #0
}
   19392:	b007      	add	sp, #28
   19394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   19398:	fb0b f704 	mul.w	r7, fp, r4
   1939c:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   193a0:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   193a2:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   193a6:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   193aa:	bb02      	cbnz	r2, 193ee <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   193ac:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   193b0:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   193b4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   193b8:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   193ba:	f8dc c008 	ldr.w	ip, [ip, #8]
   193be:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   193c0:	f10c 33ff 	add.w	r3, ip, #4294967295
   193c4:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   193c8:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   193cc:	f1cc 0c00 	rsb	ip, ip, #0
   193d0:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   193d4:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   193d8:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   193dc:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   193e0:	4561      	cmp	r1, ip
   193e2:	bf28      	it	cs
   193e4:	f04f 31ff 	movcs.w	r1, #4294967295
   193e8:	3306      	adds	r3, #6
   193ea:	f007 fb98 	bl	20b1e <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   193ee:	f858 3007 	ldr.w	r3, [r8, r7]
   193f2:	9a05      	ldr	r2, [sp, #20]
   193f4:	9302      	str	r3, [sp, #8]
   193f6:	6a2b      	ldr	r3, [r5, #32]
   193f8:	4628      	mov	r0, r5
   193fa:	6a1b      	ldr	r3, [r3, #32]
   193fc:	b2a1      	uxth	r1, r4
   193fe:	9301      	str	r3, [sp, #4]
   19400:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19402:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19406:	9300      	str	r3, [sp, #0]
   19408:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   1940c:	464b      	mov	r3, r9
   1940e:	f007 fbdc 	bl	20bca <virtqueue_create>
		if (ret)
   19412:	2800      	cmp	r0, #0
   19414:	d1bd      	bne.n	19392 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   19416:	3401      	adds	r4, #1
   19418:	e7b8      	b.n	1938c <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1941a:	4801      	ldr	r0, [pc, #4]	; (19420 <virtio_create_virtqueues+0xac>)
   1941c:	e7b9      	b.n	19392 <virtio_create_virtqueues+0x1e>
   1941e:	bf00      	nop
   19420:	fffff440 	.word	0xfffff440

00019424 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   19424:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   19426:	8944      	ldrh	r4, [r0, #10]
   19428:	428c      	cmp	r4, r1
   1942a:	d312      	bcc.n	19452 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1942c:	6a03      	ldr	r3, [r0, #32]
   1942e:	3c01      	subs	r4, #1
   19430:	885d      	ldrh	r5, [r3, #2]
   19432:	402c      	ands	r4, r5
   19434:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   19438:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   1943a:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1943c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   19440:	6a02      	ldr	r2, [r0, #32]
   19442:	8853      	ldrh	r3, [r2, #2]
   19444:	3301      	adds	r3, #1
   19446:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   19448:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1944a:	3301      	adds	r3, #1
   1944c:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1944e:	2000      	movs	r0, #0
}
   19450:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   19452:	4801      	ldr	r0, [pc, #4]	; (19458 <virtqueue_add_consumed_buffer+0x34>)
   19454:	e7fc      	b.n	19450 <virtqueue_add_consumed_buffer+0x2c>
   19456:	bf00      	nop
   19458:	fffff441 	.word	0xfffff441

0001945c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   1945c:	b4f0      	push	{r4, r5, r6, r7}
   1945e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   19460:	b148      	cbz	r0, 19476 <rpmsg_send_offchannel_raw+0x1a>
   19462:	6a00      	ldr	r0, [r0, #32]
   19464:	b138      	cbz	r0, 19476 <rpmsg_send_offchannel_raw+0x1a>
   19466:	b133      	cbz	r3, 19476 <rpmsg_send_offchannel_raw+0x1a>
   19468:	3401      	adds	r4, #1
   1946a:	d004      	beq.n	19476 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   1946c:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1946e:	b114      	cbz	r4, 19476 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   19470:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   19472:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   19474:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   19476:	4801      	ldr	r0, [pc, #4]	; (1947c <rpmsg_send_offchannel_raw+0x20>)
}
   19478:	bcf0      	pop	{r4, r5, r6, r7}
   1947a:	4770      	bx	lr
   1947c:	fffff82d 	.word	0xfffff82d

00019480 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   19480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19484:	460e      	mov	r6, r1
   19486:	4690      	mov	r8, r2
   19488:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   1948a:	4605      	mov	r5, r0
   1948c:	2800      	cmp	r0, #0
   1948e:	d06a      	beq.n	19566 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   19490:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   19494:	4638      	mov	r0, r7
   19496:	f007 fd2a 	bl	20eee <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1949a:	1c63      	adds	r3, r4, #1
   1949c:	d11a      	bne.n	194d4 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   1949e:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   194a0:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   194a4:	095a      	lsrs	r2, r3, #5
   194a6:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   194aa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   194ae:	f003 011f 	and.w	r1, r3, #31
   194b2:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   194b6:	07e4      	lsls	r4, r4, #31
   194b8:	d407      	bmi.n	194ca <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   194ba:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   194be:	2301      	movs	r3, #1
   194c0:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   194c2:	4313      	orrs	r3, r2
   194c4:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   194c8:	e01d      	b.n	19506 <rpmsg_create_ept+0x86>
	     bit++)
   194ca:	3301      	adds	r3, #1
	for (bit = start;
   194cc:	2b80      	cmp	r3, #128	; 0x80
   194ce:	d1e9      	bne.n	194a4 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   194d0:	4c27      	ldr	r4, [pc, #156]	; (19570 <rpmsg_create_ept+0xf0>)
   194d2:	e044      	b.n	1955e <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   194d4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   194d8:	d315      	bcc.n	19506 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   194da:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   194de:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   194e0:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   194e4:	d83a      	bhi.n	1955c <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   194e6:	0958      	lsrs	r0, r3, #5
   194e8:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   194ec:	f003 031f 	and.w	r3, r3, #31
   194f0:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   194f4:	07d2      	lsls	r2, r2, #31
   194f6:	d4eb      	bmi.n	194d0 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   194f8:	2201      	movs	r2, #1
   194fa:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   194fe:	ea43 030c 	orr.w	r3, r3, ip
   19502:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   19506:	491b      	ldr	r1, [pc, #108]	; (19574 <rpmsg_create_ept+0xf4>)
   19508:	2220      	movs	r2, #32
   1950a:	f1b8 0f00 	cmp.w	r8, #0
   1950e:	bf18      	it	ne
   19510:	4641      	movne	r1, r8
   19512:	4628      	mov	r0, r5
   19514:	f004 fdfe 	bl	1e114 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   19518:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   1951a:	4629      	mov	r1, r5
   1951c:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   1951e:	9b07      	ldr	r3, [sp, #28]
   19520:	4630      	mov	r0, r6
   19522:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   19524:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   19526:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   19528:	632b      	str	r3, [r5, #48]	; 0x30
   1952a:	f007 fd5a 	bl	20fe2 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1952e:	4638      	mov	r0, r7
   19530:	f001 ffc8 	bl	1b4c4 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   19534:	782c      	ldrb	r4, [r5, #0]
   19536:	b174      	cbz	r4, 19556 <rpmsg_create_ept+0xd6>
   19538:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   1953c:	b15c      	cbz	r4, 19556 <rpmsg_create_ept+0xd6>
   1953e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19540:	3301      	adds	r3, #1
   19542:	d112      	bne.n	1956a <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   19544:	2100      	movs	r1, #0
   19546:	4628      	mov	r0, r5
   19548:	f007 fd02 	bl	20f50 <rpmsg_send_ns_message>

	if (status)
   1954c:	4604      	mov	r4, r0
   1954e:	b110      	cbz	r0, 19556 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   19550:	4628      	mov	r0, r5
   19552:	f007 fcd2 	bl	20efa <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   19556:	4620      	mov	r0, r4
   19558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1955c:	4c06      	ldr	r4, [pc, #24]	; (19578 <rpmsg_create_ept+0xf8>)
   1955e:	4638      	mov	r0, r7
   19560:	f001 ffb0 	bl	1b4c4 <z_impl_k_sem_give>
}
   19564:	e7f7      	b.n	19556 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   19566:	4c04      	ldr	r4, [pc, #16]	; (19578 <rpmsg_create_ept+0xf8>)
   19568:	e7f5      	b.n	19556 <rpmsg_create_ept+0xd6>
   1956a:	2400      	movs	r4, #0
   1956c:	e7f3      	b.n	19556 <rpmsg_create_ept+0xd6>
   1956e:	bf00      	nop
   19570:	fffff829 	.word	0xfffff829
   19574:	000260f7 	.word	0x000260f7
   19578:	fffff82d 	.word	0xfffff82d

0001957c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   1957c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19580:	4605      	mov	r5, r0
   19582:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   19584:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   19586:	6a03      	ldr	r3, [r0, #32]
   19588:	b08d      	sub	sp, #52	; 0x34
   1958a:	681b      	ldr	r3, [r3, #0]
   1958c:	4692      	mov	sl, r2
   1958e:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   19592:	9103      	str	r1, [sp, #12]
   19594:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   19596:	0743      	lsls	r3, r0, #29
   19598:	d57b      	bpl.n	19692 <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1959a:	f643 2398 	movw	r3, #15000	; 0x3a98
   1959e:	2f00      	cmp	r7, #0
   195a0:	bf18      	it	ne
   195a2:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   195a4:	f105 0858 	add.w	r8, r5, #88	; 0x58
   195a8:	4640      	mov	r0, r8
   195aa:	f007 fd3e 	bl	2102a <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   195ae:	4628      	mov	r0, r5
   195b0:	f007 fe00 	bl	211b4 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   195b4:	4681      	mov	r9, r0
   195b6:	b130      	cbz	r0, 195c6 <rpmsg_virtio_send_offchannel_raw+0x4a>
   195b8:	42b0      	cmp	r0, r6
   195ba:	da04      	bge.n	195c6 <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   195bc:	4640      	mov	r0, r8
   195be:	f007 fd32 	bl	21026 <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   195c2:	4e42      	ldr	r6, [pc, #264]	; (196cc <rpmsg_virtio_send_offchannel_raw+0x150>)
   195c4:	e061      	b.n	1968a <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   195c6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   195c8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   195ca:	b9f3      	cbnz	r3, 1960a <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   195cc:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   195d0:	f10d 0212 	add.w	r2, sp, #18
   195d4:	a905      	add	r1, sp, #20
   195d6:	f007 fb88 	bl	20cea <virtqueue_get_buffer>
		if (!data) {
   195da:	4604      	mov	r4, r0
   195dc:	b948      	cbnz	r0, 195f2 <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   195de:	f44f 7100 	mov.w	r1, #512	; 0x200
   195e2:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   195e6:	f007 fdf8 	bl	211da <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   195ea:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   195ee:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   195f0:	9305      	str	r3, [sp, #20]
   195f2:	4640      	mov	r0, r8
   195f4:	f007 fd17 	bl	21026 <k_sem_give>
		if (buffer || !tick_count)
   195f8:	2c00      	cmp	r4, #0
   195fa:	d14e      	bne.n	1969a <rpmsg_virtio_send_offchannel_raw+0x11e>
   195fc:	2f00      	cmp	r7, #0
   195fe:	d04a      	beq.n	19696 <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   19600:	f1b9 0f00 	cmp.w	r9, #0
   19604:	d1dd      	bne.n	195c2 <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   19606:	3f01      	subs	r7, #1
	while (1) {
   19608:	e7ce      	b.n	195a8 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   1960a:	2b01      	cmp	r3, #1
   1960c:	d108      	bne.n	19620 <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1960e:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   19612:	aa05      	add	r2, sp, #20
   19614:	f10d 0112 	add.w	r1, sp, #18
   19618:	f007 fba1 	bl	20d5e <virtqueue_get_available_buffer>
   1961c:	4604      	mov	r4, r0
   1961e:	e7e8      	b.n	195f2 <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   19620:	2400      	movs	r4, #0
   19622:	e7e6      	b.n	195f2 <rpmsg_virtio_send_offchannel_raw+0x76>
   19624:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   19626:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   19628:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1962c:	1ac9      	subs	r1, r1, r3
   1962e:	4281      	cmp	r1, r0
   19630:	bf28      	it	cs
   19632:	f04f 31ff 	movcs.w	r1, #4294967295
   19636:	4633      	mov	r3, r6
   19638:	465a      	mov	r2, fp
   1963a:	4638      	mov	r0, r7
   1963c:	f007 fa34 	bl	20aa8 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   19640:	4286      	cmp	r6, r0
   19642:	d000      	beq.n	19646 <rpmsg_virtio_send_offchannel_raw+0xca>
   19644:	e7fe      	b.n	19644 <rpmsg_virtio_send_offchannel_raw+0xc8>
   19646:	4640      	mov	r0, r8
   19648:	f007 fcef 	bl	2102a <__metal_mutex_acquire>
   1964c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   1964e:	9a05      	ldr	r2, [sp, #20]
   19650:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   19652:	b953      	cbnz	r3, 1966a <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   19654:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   19658:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1965c:	2201      	movs	r2, #1
   1965e:	9400      	str	r4, [sp, #0]
   19660:	a906      	add	r1, sp, #24
   19662:	f007 fae2 	bl	20c2a <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   19666:	b148      	cbz	r0, 1967c <rpmsg_virtio_send_offchannel_raw+0x100>
   19668:	e7fe      	b.n	19668 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   1966a:	2b01      	cmp	r3, #1
   1966c:	d106      	bne.n	1967c <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1966e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   19672:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   19676:	f7ff fed5 	bl	19424 <virtqueue_add_consumed_buffer>
   1967a:	e7f4      	b.n	19666 <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   1967c:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   19680:	f007 fbe7 	bl	20e52 <virtqueue_kick>
   19684:	4640      	mov	r0, r8
   19686:	f007 fcce 	bl	21026 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   1968a:	4630      	mov	r0, r6
   1968c:	b00d      	add	sp, #52	; 0x34
   1968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   19692:	4e0f      	ldr	r6, [pc, #60]	; (196d0 <rpmsg_virtio_send_offchannel_raw+0x154>)
   19694:	e7f9      	b.n	1968a <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   19696:	4e0f      	ldr	r6, [pc, #60]	; (196d4 <rpmsg_virtio_send_offchannel_raw+0x158>)
   19698:	e7f7      	b.n	1968a <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   1969a:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1969c:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   196a0:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   196a2:	2300      	movs	r3, #0
   196a4:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   196a6:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   196a8:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   196aa:	4281      	cmp	r1, r0
   196ac:	bf28      	it	cs
   196ae:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   196b2:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   196b4:	4638      	mov	r0, r7
   196b6:	2310      	movs	r3, #16
   196b8:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   196ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   196be:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   196c2:	f007 f9f1 	bl	20aa8 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   196c6:	2810      	cmp	r0, #16
   196c8:	d0ac      	beq.n	19624 <rpmsg_virtio_send_offchannel_raw+0xa8>
   196ca:	e7fe      	b.n	196ca <rpmsg_virtio_send_offchannel_raw+0x14e>
   196cc:	fffff82b 	.word	0xfffff82b
   196d0:	fffff82c 	.word	0xfffff82c
   196d4:	fffff82e 	.word	0xfffff82e

000196d8 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   196d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   196dc:	460d      	mov	r5, r1
   196de:	b088      	sub	sp, #32
   196e0:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   196e2:	2100      	movs	r1, #0
   196e4:	227c      	movs	r2, #124	; 0x7c
{
   196e6:	4604      	mov	r4, r0
   196e8:	461e      	mov	r6, r3
   196ea:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   196ee:	f004 fd8c 	bl	1e20a <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   196f2:	2201      	movs	r2, #1
   196f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   196f8:	4611      	mov	r1, r2
   196fa:	f007 fe0b 	bl	21314 <z_impl_k_sem_init>
   196fe:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   19702:	4b5d      	ldr	r3, [pc, #372]	; (19878 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   19704:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   19708:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   1970a:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1970c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1970e:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   19710:	d020      	beq.n	19754 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   19712:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   19714:	6a03      	ldr	r3, [r0, #32]
   19716:	689b      	ldr	r3, [r3, #8]
   19718:	4798      	blx	r3
   1971a:	2300      	movs	r3, #0
   1971c:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1971e:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   19722:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   19724:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   19728:	f1b8 0f00 	cmp.w	r8, #0
   1972c:	d01e      	beq.n	1976c <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   1972e:	f1b8 0f01 	cmp.w	r8, #1
   19732:	d133      	bne.n	1979c <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   19734:	4b51      	ldr	r3, [pc, #324]	; (1987c <rpmsg_init_vdev+0x1a4>)
   19736:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   19738:	4b51      	ldr	r3, [pc, #324]	; (19880 <rpmsg_init_vdev+0x1a8>)
   1973a:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   1973c:	4b51      	ldr	r3, [pc, #324]	; (19884 <rpmsg_init_vdev+0x1ac>)
   1973e:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   19740:	4b51      	ldr	r3, [pc, #324]	; (19888 <rpmsg_init_vdev+0x1b0>)
   19742:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   19744:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19746:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   19748:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1974a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   1974e:	e023      	b.n	19798 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   19750:	0743      	lsls	r3, r0, #29
   19752:	d4de      	bmi.n	19712 <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   19754:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   19756:	6a03      	ldr	r3, [r0, #32]
   19758:	681b      	ldr	r3, [r3, #0]
   1975a:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1975c:	0642      	lsls	r2, r0, #25
   1975e:	d5f7      	bpl.n	19750 <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   19760:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   19762:	2100      	movs	r1, #0
   19764:	6a03      	ldr	r3, [r0, #32]
   19766:	685b      	ldr	r3, [r3, #4]
   19768:	4798      	blx	r3
}
   1976a:	e7f3      	b.n	19754 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   1976c:	f1b9 0f00 	cmp.w	r9, #0
   19770:	d07d      	beq.n	1986e <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   19772:	f8d9 3008 	ldr.w	r3, [r9, #8]
   19776:	2b00      	cmp	r3, #0
   19778:	d07b      	beq.n	19872 <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   1977a:	4b41      	ldr	r3, [pc, #260]	; (19880 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   1977c:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   19780:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   19782:	4b3e      	ldr	r3, [pc, #248]	; (1987c <rpmsg_init_vdev+0x1a4>)
   19784:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   19786:	4b40      	ldr	r3, [pc, #256]	; (19888 <rpmsg_init_vdev+0x1b0>)
   19788:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   1978a:	4b3e      	ldr	r3, [pc, #248]	; (19884 <rpmsg_init_vdev+0x1ac>)
   1978c:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1978e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19790:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   19792:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   19794:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   19798:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1979c:	ab04      	add	r3, sp, #16
   1979e:	9300      	str	r3, [sp, #0]
   197a0:	2202      	movs	r2, #2
   197a2:	2100      	movs	r1, #0
   197a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   197a6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   197aa:	ab02      	add	r3, sp, #8
   197ac:	f7ff fde2 	bl	19374 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   197b0:	4607      	mov	r7, r0
   197b2:	2800      	cmp	r0, #0
   197b4:	d157      	bne.n	19866 <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   197b6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   197ba:	f007 fb24 	bl	20e06 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   197be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   197c0:	681a      	ldr	r2, [r3, #0]
   197c2:	699b      	ldr	r3, [r3, #24]
   197c4:	6296      	str	r6, [r2, #40]	; 0x28
   197c6:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   197c8:	f1b8 0f00 	cmp.w	r8, #0
   197cc:	d108      	bne.n	197e0 <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   197ce:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   197d2:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   197d4:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   197d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   197da:	895b      	ldrh	r3, [r3, #10]
   197dc:	4553      	cmp	r3, sl
   197de:	d81f      	bhi.n	19820 <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   197e0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   197e4:	e9c4 4400 	strd	r4, r4, [r4]
   197e8:	b18b      	cbz	r3, 1980e <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   197ea:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   197ee:	4927      	ldr	r1, [pc, #156]	; (1988c <rpmsg_init_vdev+0x1b4>)
   197f0:	2220      	movs	r2, #32
   197f2:	4628      	mov	r0, r5
   197f4:	f004 fc8e 	bl	1e114 <strncpy>
	ept->addr = src;
   197f8:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   197fa:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   197fe:	4b24      	ldr	r3, [pc, #144]	; (19890 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   19800:	4629      	mov	r1, r5
   19802:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   19804:	2300      	movs	r3, #0
   19806:	4620      	mov	r0, r4
   19808:	63a3      	str	r3, [r4, #56]	; 0x38
   1980a:	f007 fbea 	bl	20fe2 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   1980e:	f1b8 0f00 	cmp.w	r8, #0
   19812:	d128      	bne.n	19866 <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   19814:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   19816:	2104      	movs	r1, #4
   19818:	6a03      	ldr	r3, [r0, #32]
   1981a:	685b      	ldr	r3, [r3, #4]
   1981c:	4798      	blx	r3
}
   1981e:	e022      	b.n	19866 <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   19820:	f44f 7100 	mov.w	r1, #512	; 0x200
   19824:	4648      	mov	r0, r9
   19826:	f007 fcd8 	bl	211da <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1982a:	4605      	mov	r5, r0
   1982c:	b1c8      	cbz	r0, 19862 <rpmsg_init_vdev+0x18a>
   1982e:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   19830:	9006      	str	r0, [sp, #24]
   19832:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   19834:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   19836:	f44f 7300 	mov.w	r3, #512	; 0x200
   1983a:	4281      	cmp	r1, r0
   1983c:	bf28      	it	cs
   1983e:	f04f 31ff 	movcs.w	r1, #4294967295
   19842:	2200      	movs	r2, #0
   19844:	4630      	mov	r0, r6
   19846:	f007 f96a 	bl	20b1e <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1984a:	2301      	movs	r3, #1
   1984c:	2200      	movs	r2, #0
   1984e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   19852:	9500      	str	r5, [sp, #0]
   19854:	a906      	add	r1, sp, #24
   19856:	f007 f9e8 	bl	20c2a <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1985a:	b918      	cbnz	r0, 19864 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1985c:	f10a 0a01 	add.w	sl, sl, #1
   19860:	e7b9      	b.n	197d6 <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   19862:	480c      	ldr	r0, [pc, #48]	; (19894 <rpmsg_init_vdev+0x1bc>)
   19864:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   19866:	4638      	mov	r0, r7
   19868:	b008      	add	sp, #32
   1986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   1986e:	4f0a      	ldr	r7, [pc, #40]	; (19898 <rpmsg_init_vdev+0x1c0>)
   19870:	e7f9      	b.n	19866 <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   19872:	4f08      	ldr	r7, [pc, #32]	; (19894 <rpmsg_init_vdev+0x1bc>)
   19874:	e7f7      	b.n	19866 <rpmsg_init_vdev+0x18e>
   19876:	bf00      	nop
   19878:	0001957d 	.word	0x0001957d
   1987c:	00026086 	.word	0x00026086
   19880:	00026080 	.word	0x00026080
   19884:	00021025 	.word	0x00021025
   19888:	000210f5 	.word	0x000210f5
   1988c:	0002608c 	.word	0x0002608c
   19890:	00021037 	.word	0x00021037
   19894:	fffff82e 	.word	0xfffff82e
   19898:	fffff82d 	.word	0xfffff82d

0001989c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1989e:	4b10      	ldr	r3, [pc, #64]	; (198e0 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   198a0:	4f10      	ldr	r7, [pc, #64]	; (198e4 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   198a2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   198a6:	3001      	adds	r0, #1
   198a8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   198ac:	42ae      	cmp	r6, r5
   198ae:	d800      	bhi.n	198b2 <z_sys_init_run_level+0x16>
		}
	}
}
   198b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   198b2:	e9d5 3400 	ldrd	r3, r4, [r5]
   198b6:	4620      	mov	r0, r4
   198b8:	4798      	blx	r3
   198ba:	b170      	cbz	r0, 198da <z_sys_init_run_level+0x3e>
   198bc:	b16c      	cbz	r4, 198da <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   198be:	2301      	movs	r3, #1
				(dev - __device_start));
   198c0:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   198c2:	4a09      	ldr	r2, [pc, #36]	; (198e8 <z_sys_init_run_level+0x4c>)
   198c4:	1124      	asrs	r4, r4, #4
   198c6:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   198c8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   198cc:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   198d0:	fa03 f404 	lsl.w	r4, r3, r4
   198d4:	4304      	orrs	r4, r0
   198d6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   198da:	3508      	adds	r5, #8
   198dc:	e7e6      	b.n	198ac <z_sys_init_run_level+0x10>
   198de:	bf00      	nop
   198e0:	000224b8 	.word	0x000224b8
   198e4:	20008434 	.word	0x20008434
   198e8:	200084b4 	.word	0x200084b4

000198ec <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   198ec:	4b08      	ldr	r3, [pc, #32]	; (19910 <z_device_ready+0x24>)
   198ee:	1ac0      	subs	r0, r0, r3
   198f0:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   198f2:	4b08      	ldr	r3, [pc, #32]	; (19914 <z_device_ready+0x28>)
   198f4:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   198f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   198fa:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   198fc:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   19900:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   19904:	4210      	tst	r0, r2
}
   19906:	bf0c      	ite	eq
   19908:	4618      	moveq	r0, r3
   1990a:	2000      	movne	r0, #0
   1990c:	4770      	bx	lr
   1990e:	bf00      	nop
   19910:	20008434 	.word	0x20008434
   19914:	200084b4 	.word	0x200084b4

00019918 <z_impl_device_get_binding>:
{
   19918:	b570      	push	{r4, r5, r6, lr}
   1991a:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   1991c:	4c0f      	ldr	r4, [pc, #60]	; (1995c <z_impl_device_get_binding+0x44>)
   1991e:	4e10      	ldr	r6, [pc, #64]	; (19960 <z_impl_device_get_binding+0x48>)
   19920:	42b4      	cmp	r4, r6
   19922:	d104      	bne.n	1992e <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   19924:	4c0d      	ldr	r4, [pc, #52]	; (1995c <z_impl_device_get_binding+0x44>)
   19926:	42b4      	cmp	r4, r6
   19928:	d10a      	bne.n	19940 <z_impl_device_get_binding+0x28>
	return NULL;
   1992a:	2400      	movs	r4, #0
   1992c:	e014      	b.n	19958 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   1992e:	4620      	mov	r0, r4
   19930:	f7ff ffdc 	bl	198ec <z_device_ready>
   19934:	b110      	cbz	r0, 1993c <z_impl_device_get_binding+0x24>
   19936:	6823      	ldr	r3, [r4, #0]
   19938:	42ab      	cmp	r3, r5
   1993a:	d00d      	beq.n	19958 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1993c:	3410      	adds	r4, #16
   1993e:	e7ef      	b.n	19920 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19940:	4620      	mov	r0, r4
   19942:	f7ff ffd3 	bl	198ec <z_device_ready>
   19946:	b908      	cbnz	r0, 1994c <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   19948:	3410      	adds	r4, #16
   1994a:	e7ec      	b.n	19926 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1994c:	4628      	mov	r0, r5
   1994e:	6821      	ldr	r1, [r4, #0]
   19950:	f004 fc02 	bl	1e158 <strcmp>
   19954:	2800      	cmp	r0, #0
   19956:	d1f7      	bne.n	19948 <z_impl_device_get_binding+0x30>
}
   19958:	4620      	mov	r0, r4
   1995a:	bd70      	pop	{r4, r5, r6, pc}
   1995c:	20008434 	.word	0x20008434
   19960:	200084b4 	.word	0x200084b4

00019964 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   19964:	4b01      	ldr	r3, [pc, #4]	; (1996c <z_impl_z_errno+0x8>)
   19966:	6898      	ldr	r0, [r3, #8]
}
   19968:	3070      	adds	r0, #112	; 0x70
   1996a:	4770      	bx	lr
   1996c:	20009fbc 	.word	0x20009fbc

00019970 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19972:	4604      	mov	r4, r0
   19974:	460e      	mov	r6, r1
	__asm__ volatile(
   19976:	f04f 0320 	mov.w	r3, #32
   1997a:	f3ef 8711 	mrs	r7, BASEPRI
   1997e:	f383 8811 	msr	BASEPRI, r3
   19982:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   19986:	f001 fd97 	bl	1b4b8 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1998a:	2200      	movs	r2, #0
   1998c:	2c04      	cmp	r4, #4
   1998e:	bf98      	it	ls
   19990:	4b1d      	ldrls	r3, [pc, #116]	; (19a08 <z_fatal_error+0x98>)
   19992:	4605      	mov	r5, r0
	switch (reason) {
   19994:	bf94      	ite	ls
   19996:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   1999a:	4b1c      	ldrhi	r3, [pc, #112]	; (19a0c <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1999c:	9200      	str	r2, [sp, #0]
   1999e:	2145      	movs	r1, #69	; 0x45
   199a0:	4622      	mov	r2, r4
   199a2:	481b      	ldr	r0, [pc, #108]	; (19a10 <z_fatal_error+0xa0>)
   199a4:	f002 ff4e 	bl	1c844 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   199a8:	b13e      	cbz	r6, 199ba <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   199aa:	69f3      	ldr	r3, [r6, #28]
   199ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
   199b0:	b11b      	cbz	r3, 199ba <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   199b2:	2145      	movs	r1, #69	; 0x45
   199b4:	4817      	ldr	r0, [pc, #92]	; (19a14 <z_fatal_error+0xa4>)
   199b6:	f002 ff45 	bl	1c844 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   199ba:	b135      	cbz	r5, 199ca <z_fatal_error+0x5a>
   199bc:	4628      	mov	r0, r5
   199be:	f007 fcc6 	bl	2134e <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   199c2:	4603      	mov	r3, r0
   199c4:	b108      	cbz	r0, 199ca <z_fatal_error+0x5a>
   199c6:	7802      	ldrb	r2, [r0, #0]
   199c8:	b902      	cbnz	r2, 199cc <z_fatal_error+0x5c>
		thread_name = "unknown";
   199ca:	4b13      	ldr	r3, [pc, #76]	; (19a18 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   199cc:	462a      	mov	r2, r5
   199ce:	2145      	movs	r1, #69	; 0x45
   199d0:	4812      	ldr	r0, [pc, #72]	; (19a1c <z_fatal_error+0xac>)
   199d2:	f002 ff37 	bl	1c844 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   199d6:	4631      	mov	r1, r6
   199d8:	4620      	mov	r0, r4
   199da:	f7ff f841 	bl	18a60 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   199de:	2c04      	cmp	r4, #4
   199e0:	d108      	bne.n	199f4 <z_fatal_error+0x84>
   199e2:	490f      	ldr	r1, [pc, #60]	; (19a20 <z_fatal_error+0xb0>)
   199e4:	480f      	ldr	r0, [pc, #60]	; (19a24 <z_fatal_error+0xb4>)
   199e6:	228e      	movs	r2, #142	; 0x8e
   199e8:	f002 ff2c 	bl	1c844 <printk>
   199ec:	218e      	movs	r1, #142	; 0x8e
   199ee:	480c      	ldr	r0, [pc, #48]	; (19a20 <z_fatal_error+0xb0>)
   199f0:	f003 f9ce 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   199f4:	f387 8811 	msr	BASEPRI, r7
   199f8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   199fc:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   199fe:	b003      	add	sp, #12
   19a00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19a04:	f7f4 b9a0 	b.w	dd48 <z_impl_k_thread_abort>
   19a08:	000224d0 	.word	0x000224d0
   19a0c:	0002608f 	.word	0x0002608f
   19a10:	000260a5 	.word	0x000260a5
   19a14:	000260d2 	.word	0x000260d2
   19a18:	0002609d 	.word	0x0002609d
   19a1c:	000260f8 	.word	0x000260f8
   19a20:	00026115 	.word	0x00026115
   19a24:	00022c66 	.word	0x00022c66

00019a28 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   19a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a2a:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   19a2c:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   19a2e:	4e15      	ldr	r6, [pc, #84]	; (19a84 <idle+0x5c>)
	__asm__ volatile(
   19a30:	f04f 0220 	mov.w	r2, #32
   19a34:	f3ef 8311 	mrs	r3, BASEPRI
   19a38:	f382 8811 	msr	BASEPRI, r2
   19a3c:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   19a40:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   19a42:	b188      	cbz	r0, 19a68 <idle+0x40>
			cpu->pending_abort = NULL;
   19a44:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   19a46:	f383 8811 	msr	BASEPRI, r3
   19a4a:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   19a4e:	f001 f93b 	bl	1acc8 <z_thread_single_abort>
	__asm__ volatile(
   19a52:	f04f 0320 	mov.w	r3, #32
   19a56:	f3ef 8011 	mrs	r0, BASEPRI
   19a5a:	f383 8811 	msr	BASEPRI, r3
   19a5e:	f3bf 8f6f 	isb	sy
   19a62:	f007 fc1d 	bl	212a0 <z_reschedule_irqlock>
			continue;
   19a66:	e7e3      	b.n	19a30 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   19a68:	f002 f998 	bl	1bd9c <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19a6c:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   19a6e:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19a70:	2802      	cmp	r0, #2
   19a72:	bfd8      	it	le
   19a74:	4608      	movle	r0, r1
   19a76:	f002 f9c7 	bl	1be08 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   19a7a:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   19a7c:	f7f3 feaa 	bl	d7d4 <arch_cpu_idle>
}
   19a80:	e7d6      	b.n	19a30 <idle+0x8>
   19a82:	bf00      	nop
   19a84:	20009fbc 	.word	0x20009fbc

00019a88 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   19a88:	4802      	ldr	r0, [pc, #8]	; (19a94 <z_bss_zero+0xc>)
   19a8a:	4a03      	ldr	r2, [pc, #12]	; (19a98 <z_bss_zero+0x10>)
   19a8c:	2100      	movs	r1, #0
   19a8e:	1a12      	subs	r2, r2, r0
   19a90:	f004 bbbb 	b.w	1e20a <memset>
   19a94:	200086c8 	.word	0x200086c8
   19a98:	2000b76c 	.word	0x2000b76c

00019a9c <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   19a9c:	2201      	movs	r2, #1
{
   19a9e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   19aa0:	4b09      	ldr	r3, [pc, #36]	; (19ac8 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19aa2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   19aa4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19aa6:	f7ff fef9 	bl	1989c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   19aaa:	f002 f819 	bl	1bae0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   19aae:	2003      	movs	r0, #3
   19ab0:	f7ff fef4 	bl	1989c <z_sys_init_run_level>

	z_init_static_threads();
   19ab4:	f001 fe76 	bl	1b7a4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   19ab8:	f7ef fc86 	bl	93c8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   19abc:	4a03      	ldr	r2, [pc, #12]	; (19acc <bg_thread_main+0x30>)
   19abe:	7b13      	ldrb	r3, [r2, #12]
   19ac0:	f023 0301 	bic.w	r3, r3, #1
   19ac4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19ac6:	bd08      	pop	{r3, pc}
   19ac8:	2000b76b 	.word	0x2000b76b
   19acc:	200095a0 	.word	0x200095a0

00019ad0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   19ad0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   19ad4:	4b34      	ldr	r3, [pc, #208]	; (19ba8 <z_cstart+0xd8>)
   19ad6:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   19ad8:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19adc:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   19ae0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19ae4:	2400      	movs	r4, #0
   19ae6:	23e0      	movs	r3, #224	; 0xe0
   19ae8:	4d30      	ldr	r5, [pc, #192]	; (19bac <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19aea:	f04f 0b01 	mov.w	fp, #1
   19aee:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19af2:	77ec      	strb	r4, [r5, #31]
   19af4:	762c      	strb	r4, [r5, #24]
   19af6:	766c      	strb	r4, [r5, #25]
   19af8:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19afa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   19afc:	4e2c      	ldr	r6, [pc, #176]	; (19bb0 <z_cstart+0xe0>)
   19afe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19b02:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19b04:	f7f4 f8e8 	bl	dcd8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19b08:	f7f3 fe5e 	bl	d7c8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19b0c:	f04f 33ff 	mov.w	r3, #4294967295
   19b10:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19b12:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   19b14:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   19b18:	4d26      	ldr	r5, [pc, #152]	; (19bb4 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   19b1a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   19b1e:	ab06      	add	r3, sp, #24
   19b20:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19b22:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   19b24:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   19b28:	f7ff feb8 	bl	1989c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19b2c:	2001      	movs	r0, #1
   19b2e:	f7ff feb5 	bl	1989c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19b32:	f8df a084 	ldr.w	sl, [pc, #132]	; 19bb8 <z_cstart+0xe8>
	z_sched_init();
   19b36:	f001 fb77 	bl	1b228 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19b3a:	4b20      	ldr	r3, [pc, #128]	; (19bbc <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   19b3c:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19b42:	491f      	ldr	r1, [pc, #124]	; (19bc0 <z_cstart+0xf0>)
   19b44:	9305      	str	r3, [sp, #20]
   19b46:	4630      	mov	r0, r6
   19b48:	4653      	mov	r3, sl
   19b4a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   19b4e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19b52:	9400      	str	r4, [sp, #0]
   19b54:	f001 fd74 	bl	1b640 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19b58:	7b73      	ldrb	r3, [r6, #13]
   19b5a:	4680      	mov	r8, r0
   19b5c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   19b60:	4630      	mov	r0, r6
   19b62:	7373      	strb	r3, [r6, #13]
   19b64:	f000 feec 	bl	1a940 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   19b68:	230f      	movs	r3, #15
   19b6a:	4f16      	ldr	r7, [pc, #88]	; (19bc4 <z_cstart+0xf4>)
   19b6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19b70:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19b74:	4914      	ldr	r1, [pc, #80]	; (19bc8 <z_cstart+0xf8>)
   19b76:	4b15      	ldr	r3, [pc, #84]	; (19bcc <z_cstart+0xfc>)
   19b78:	4638      	mov	r0, r7
   19b7a:	e9cd b404 	strd	fp, r4, [sp, #16]
   19b7e:	e9cd 5400 	strd	r5, r4, [sp]
   19b82:	f001 fd5d 	bl	1b640 <z_setup_new_thread>
   19b86:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19b88:	4652      	mov	r2, sl
   19b8a:	f023 0304 	bic.w	r3, r3, #4
   19b8e:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   19b90:	f105 031c 	add.w	r3, r5, #28
   19b94:	4641      	mov	r1, r8
   19b96:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   19b98:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   19b9c:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   19b9e:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   19ba0:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19ba4:	f7f3 fdf6 	bl	d794 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19ba8:	2000d508 	.word	0x2000d508
   19bac:	e000ed00 	.word	0xe000ed00
   19bb0:	200095a0 	.word	0x200095a0
   19bb4:	20009fbc 	.word	0x20009fbc
   19bb8:	00019a9d 	.word	0x00019a9d
   19bbc:	00026181 	.word	0x00026181
   19bc0:	2000cfc8 	.word	0x2000cfc8
   19bc4:	20009510 	.word	0x20009510
   19bc8:	2000d3c8 	.word	0x2000d3c8
   19bcc:	00019a29 	.word	0x00019a29

00019bd0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   19bd0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   19bd2:	4c0c      	ldr	r4, [pc, #48]	; (19c04 <statics_init+0x34>)
   19bd4:	4d0c      	ldr	r5, [pc, #48]	; (19c08 <statics_init+0x38>)
   19bd6:	4e0d      	ldr	r6, [pc, #52]	; (19c0c <statics_init+0x3c>)
   19bd8:	42ac      	cmp	r4, r5
   19bda:	d908      	bls.n	19bee <statics_init+0x1e>
   19bdc:	4631      	mov	r1, r6
   19bde:	480c      	ldr	r0, [pc, #48]	; (19c10 <statics_init+0x40>)
   19be0:	2215      	movs	r2, #21
   19be2:	f002 fe2f 	bl	1c844 <printk>
   19be6:	2115      	movs	r1, #21
   19be8:	4630      	mov	r0, r6
   19bea:	f003 f8d1 	bl	1cd90 <assert_post_action>
   19bee:	42ac      	cmp	r4, r5
   19bf0:	d301      	bcc.n	19bf6 <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   19bf2:	2000      	movs	r0, #0
   19bf4:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   19bf6:	4620      	mov	r0, r4
   19bf8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   19bfc:	f007 fb02 	bl	21204 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   19c00:	3418      	adds	r4, #24
   19c02:	e7e9      	b.n	19bd8 <statics_init+0x8>
   19c04:	2000850c 	.word	0x2000850c
   19c08:	20008524 	.word	0x20008524
   19c0c:	00026189 	.word	0x00026189
   19c10:	00022c66 	.word	0x00022c66

00019c14 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   19c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c18:	b085      	sub	sp, #20
   19c1a:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   19c1e:	4606      	mov	r6, r0
   19c20:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   19c22:	4648      	mov	r0, r9
   19c24:	4639      	mov	r1, r7
{
   19c26:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   19c28:	f007 fbf2 	bl	21410 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19c2c:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   19c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19c34:	f04f 0320 	mov.w	r3, #32
   19c38:	f3ef 8411 	mrs	r4, BASEPRI
   19c3c:	f383 8811 	msr	BASEPRI, r3
   19c40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c44:	4628      	mov	r0, r5
   19c46:	f001 fe29 	bl	1b89c <z_spin_lock_valid>
   19c4a:	b940      	cbnz	r0, 19c5e <k_heap_aligned_alloc+0x4a>
   19c4c:	4932      	ldr	r1, [pc, #200]	; (19d18 <k_heap_aligned_alloc+0x104>)
   19c4e:	4833      	ldr	r0, [pc, #204]	; (19d1c <k_heap_aligned_alloc+0x108>)
   19c50:	227c      	movs	r2, #124	; 0x7c
   19c52:	f002 fdf7 	bl	1c844 <printk>
   19c56:	217c      	movs	r1, #124	; 0x7c
   19c58:	482f      	ldr	r0, [pc, #188]	; (19d18 <k_heap_aligned_alloc+0x104>)
   19c5a:	f003 f899 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   19c5e:	4628      	mov	r0, r5
   19c60:	f001 fe38 	bl	1b8d4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19c64:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   19c68:	b15b      	cbz	r3, 19c82 <k_heap_aligned_alloc+0x6e>
   19c6a:	ea59 0307 	orrs.w	r3, r9, r7
   19c6e:	d008      	beq.n	19c82 <k_heap_aligned_alloc+0x6e>
   19c70:	492b      	ldr	r1, [pc, #172]	; (19d20 <k_heap_aligned_alloc+0x10c>)
   19c72:	482a      	ldr	r0, [pc, #168]	; (19d1c <k_heap_aligned_alloc+0x108>)
   19c74:	2224      	movs	r2, #36	; 0x24
   19c76:	f002 fde5 	bl	1c844 <printk>
   19c7a:	2124      	movs	r1, #36	; 0x24
   19c7c:	4828      	ldr	r0, [pc, #160]	; (19d20 <k_heap_aligned_alloc+0x10c>)
   19c7e:	f003 f887 	bl	1cd90 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c82:	f8df 9094 	ldr.w	r9, [pc, #148]	; 19d18 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19c86:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   19c8a:	4642      	mov	r2, r8
   19c8c:	4659      	mov	r1, fp
   19c8e:	4630      	mov	r0, r6
   19c90:	f7f0 fc10 	bl	a4b4 <sys_heap_aligned_alloc>
   19c94:	4607      	mov	r7, r0
		now = z_tick_get();
   19c96:	f002 f993 	bl	1bfc0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   19c9a:	b1a7      	cbz	r7, 19cc6 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c9c:	4628      	mov	r0, r5
   19c9e:	f001 fe0b 	bl	1b8b8 <z_spin_unlock_valid>
   19ca2:	b940      	cbnz	r0, 19cb6 <k_heap_aligned_alloc+0xa2>
   19ca4:	491c      	ldr	r1, [pc, #112]	; (19d18 <k_heap_aligned_alloc+0x104>)
   19ca6:	481d      	ldr	r0, [pc, #116]	; (19d1c <k_heap_aligned_alloc+0x108>)
   19ca8:	22a7      	movs	r2, #167	; 0xa7
   19caa:	f002 fdcb 	bl	1c844 <printk>
   19cae:	21a7      	movs	r1, #167	; 0xa7
   19cb0:	4819      	ldr	r0, [pc, #100]	; (19d18 <k_heap_aligned_alloc+0x104>)
   19cb2:	f003 f86d 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   19cb6:	f384 8811 	msr	BASEPRI, r4
   19cba:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   19cbe:	4638      	mov	r0, r7
   19cc0:	b005      	add	sp, #20
   19cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   19cc6:	9b02      	ldr	r3, [sp, #8]
   19cc8:	1a18      	subs	r0, r3, r0
   19cca:	9b03      	ldr	r3, [sp, #12]
   19ccc:	eb63 0101 	sbc.w	r1, r3, r1
   19cd0:	2801      	cmp	r0, #1
   19cd2:	f171 0300 	sbcs.w	r3, r1, #0
   19cd6:	dbe1      	blt.n	19c9c <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19cd8:	e9cd 0100 	strd	r0, r1, [sp]
   19cdc:	4652      	mov	r2, sl
   19cde:	4621      	mov	r1, r4
   19ce0:	4628      	mov	r0, r5
   19ce2:	f001 f997 	bl	1b014 <z_pend_curr>
	__asm__ volatile(
   19ce6:	f04f 0320 	mov.w	r3, #32
   19cea:	f3ef 8411 	mrs	r4, BASEPRI
   19cee:	f383 8811 	msr	BASEPRI, r3
   19cf2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19cf6:	4628      	mov	r0, r5
   19cf8:	f001 fdd0 	bl	1b89c <z_spin_lock_valid>
   19cfc:	b940      	cbnz	r0, 19d10 <k_heap_aligned_alloc+0xfc>
   19cfe:	4649      	mov	r1, r9
   19d00:	4806      	ldr	r0, [pc, #24]	; (19d1c <k_heap_aligned_alloc+0x108>)
   19d02:	227c      	movs	r2, #124	; 0x7c
   19d04:	f002 fd9e 	bl	1c844 <printk>
   19d08:	217c      	movs	r1, #124	; 0x7c
   19d0a:	4648      	mov	r0, r9
   19d0c:	f003 f840 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   19d10:	4628      	mov	r0, r5
   19d12:	f001 fddf 	bl	1b8d4 <z_spin_lock_set_owner>
	return k;
   19d16:	e7b8      	b.n	19c8a <k_heap_aligned_alloc+0x76>
   19d18:	00022ca0 	.word	0x00022ca0
   19d1c:	00022c66 	.word	0x00022c66
   19d20:	00026189 	.word	0x00026189

00019d24 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   19d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d26:	4604      	mov	r4, r0
   19d28:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19d2a:	f100 0514 	add.w	r5, r0, #20
   19d2e:	f04f 0320 	mov.w	r3, #32
   19d32:	f3ef 8711 	mrs	r7, BASEPRI
   19d36:	f383 8811 	msr	BASEPRI, r3
   19d3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d3e:	4628      	mov	r0, r5
   19d40:	f001 fdac 	bl	1b89c <z_spin_lock_valid>
   19d44:	b940      	cbnz	r0, 19d58 <k_heap_free+0x34>
   19d46:	4916      	ldr	r1, [pc, #88]	; (19da0 <k_heap_free+0x7c>)
   19d48:	4816      	ldr	r0, [pc, #88]	; (19da4 <k_heap_free+0x80>)
   19d4a:	227c      	movs	r2, #124	; 0x7c
   19d4c:	f002 fd7a 	bl	1c844 <printk>
   19d50:	217c      	movs	r1, #124	; 0x7c
   19d52:	4813      	ldr	r0, [pc, #76]	; (19da0 <k_heap_free+0x7c>)
   19d54:	f003 f81c 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   19d58:	4628      	mov	r0, r5
   19d5a:	f001 fdbb 	bl	1b8d4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   19d5e:	4620      	mov	r0, r4
   19d60:	4631      	mov	r1, r6
   19d62:	f7f0 fb65 	bl	a430 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   19d66:	f104 000c 	add.w	r0, r4, #12
   19d6a:	f007 fac3 	bl	212f4 <z_unpend_all>
   19d6e:	b128      	cbz	r0, 19d7c <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   19d70:	4639      	mov	r1, r7
   19d72:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   19d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   19d78:	f000 bc0e 	b.w	1a598 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d7c:	4628      	mov	r0, r5
   19d7e:	f001 fd9b 	bl	1b8b8 <z_spin_unlock_valid>
   19d82:	b940      	cbnz	r0, 19d96 <k_heap_free+0x72>
   19d84:	4906      	ldr	r1, [pc, #24]	; (19da0 <k_heap_free+0x7c>)
   19d86:	4807      	ldr	r0, [pc, #28]	; (19da4 <k_heap_free+0x80>)
   19d88:	22a7      	movs	r2, #167	; 0xa7
   19d8a:	f002 fd5b 	bl	1c844 <printk>
   19d8e:	21a7      	movs	r1, #167	; 0xa7
   19d90:	4803      	ldr	r0, [pc, #12]	; (19da0 <k_heap_free+0x7c>)
   19d92:	f002 fffd 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   19d96:	f387 8811 	msr	BASEPRI, r7
   19d9a:	f3bf 8f6f 	isb	sy
}
   19d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19da0:	00022ca0 	.word	0x00022ca0
   19da4:	00022c66 	.word	0x00022c66

00019da8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   19da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19daa:	4c14      	ldr	r4, [pc, #80]	; (19dfc <init_mem_slab_module+0x54>)
   19dac:	4d14      	ldr	r5, [pc, #80]	; (19e00 <init_mem_slab_module+0x58>)
   19dae:	4e15      	ldr	r6, [pc, #84]	; (19e04 <init_mem_slab_module+0x5c>)
   19db0:	42ac      	cmp	r4, r5
   19db2:	d908      	bls.n	19dc6 <init_mem_slab_module+0x1e>
   19db4:	4631      	mov	r1, r6
   19db6:	4814      	ldr	r0, [pc, #80]	; (19e08 <init_mem_slab_module+0x60>)
   19db8:	2242      	movs	r2, #66	; 0x42
   19dba:	f002 fd43 	bl	1c844 <printk>
   19dbe:	2142      	movs	r1, #66	; 0x42
   19dc0:	4630      	mov	r0, r6
   19dc2:	f002 ffe5 	bl	1cd90 <assert_post_action>
   19dc6:	42ac      	cmp	r4, r5
   19dc8:	d301      	bcc.n	19dce <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   19dca:	2000      	movs	r0, #0
	return rc;
}
   19dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   19dce:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   19dd2:	ea42 0301 	orr.w	r3, r2, r1
   19dd6:	f013 0303 	ands.w	r3, r3, #3
   19dda:	d10b      	bne.n	19df4 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   19ddc:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   19dde:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19de0:	4283      	cmp	r3, r0
   19de2:	d101      	bne.n	19de8 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19de4:	341c      	adds	r4, #28
   19de6:	e7e3      	b.n	19db0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   19de8:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19dea:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   19dec:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   19dee:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   19df0:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   19df2:	e7f5      	b.n	19de0 <init_mem_slab_module+0x38>
	return rc;
   19df4:	f06f 0015 	mvn.w	r0, #21
   19df8:	e7e8      	b.n	19dcc <init_mem_slab_module+0x24>
   19dfa:	bf00      	nop
   19dfc:	200084b8 	.word	0x200084b8
   19e00:	2000850c 	.word	0x2000850c
   19e04:	000261ab 	.word	0x000261ab
   19e08:	00022c66 	.word	0x00022c66

00019e0c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   19e0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19e10:	4604      	mov	r4, r0
   19e12:	460d      	mov	r5, r1
   19e14:	4617      	mov	r7, r2
   19e16:	461e      	mov	r6, r3
	__asm__ volatile(
   19e18:	f04f 0320 	mov.w	r3, #32
   19e1c:	f3ef 8811 	mrs	r8, BASEPRI
   19e20:	f383 8811 	msr	BASEPRI, r3
   19e24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e28:	4821      	ldr	r0, [pc, #132]	; (19eb0 <k_mem_slab_alloc+0xa4>)
   19e2a:	f001 fd37 	bl	1b89c <z_spin_lock_valid>
   19e2e:	b940      	cbnz	r0, 19e42 <k_mem_slab_alloc+0x36>
   19e30:	4920      	ldr	r1, [pc, #128]	; (19eb4 <k_mem_slab_alloc+0xa8>)
   19e32:	4821      	ldr	r0, [pc, #132]	; (19eb8 <k_mem_slab_alloc+0xac>)
   19e34:	227c      	movs	r2, #124	; 0x7c
   19e36:	f002 fd05 	bl	1c844 <printk>
   19e3a:	217c      	movs	r1, #124	; 0x7c
   19e3c:	481d      	ldr	r0, [pc, #116]	; (19eb4 <k_mem_slab_alloc+0xa8>)
   19e3e:	f002 ffa7 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   19e42:	481b      	ldr	r0, [pc, #108]	; (19eb0 <k_mem_slab_alloc+0xa4>)
   19e44:	f001 fd46 	bl	1b8d4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   19e48:	6963      	ldr	r3, [r4, #20]
   19e4a:	b1c3      	cbz	r3, 19e7e <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   19e4c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   19e4e:	681b      	ldr	r3, [r3, #0]
   19e50:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   19e52:	69a3      	ldr	r3, [r4, #24]
   19e54:	3301      	adds	r3, #1
   19e56:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   19e58:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19e5a:	4815      	ldr	r0, [pc, #84]	; (19eb0 <k_mem_slab_alloc+0xa4>)
   19e5c:	f001 fd2c 	bl	1b8b8 <z_spin_unlock_valid>
   19e60:	b940      	cbnz	r0, 19e74 <k_mem_slab_alloc+0x68>
   19e62:	4914      	ldr	r1, [pc, #80]	; (19eb4 <k_mem_slab_alloc+0xa8>)
   19e64:	4814      	ldr	r0, [pc, #80]	; (19eb8 <k_mem_slab_alloc+0xac>)
   19e66:	22a7      	movs	r2, #167	; 0xa7
   19e68:	f002 fcec 	bl	1c844 <printk>
   19e6c:	21a7      	movs	r1, #167	; 0xa7
   19e6e:	4811      	ldr	r0, [pc, #68]	; (19eb4 <k_mem_slab_alloc+0xa8>)
   19e70:	f002 ff8e 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   19e74:	f388 8811 	msr	BASEPRI, r8
   19e78:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   19e7c:	e013      	b.n	19ea6 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19e7e:	ea57 0206 	orrs.w	r2, r7, r6
   19e82:	d103      	bne.n	19e8c <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   19e84:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   19e88:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   19e8a:	e7e6      	b.n	19e5a <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   19e8c:	4622      	mov	r2, r4
   19e8e:	4641      	mov	r1, r8
   19e90:	e9cd 7600 	strd	r7, r6, [sp]
   19e94:	4806      	ldr	r0, [pc, #24]	; (19eb0 <k_mem_slab_alloc+0xa4>)
   19e96:	f001 f8bd 	bl	1b014 <z_pend_curr>
		if (result == 0) {
   19e9a:	4604      	mov	r4, r0
   19e9c:	b918      	cbnz	r0, 19ea6 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   19e9e:	4b07      	ldr	r3, [pc, #28]	; (19ebc <k_mem_slab_alloc+0xb0>)
   19ea0:	689b      	ldr	r3, [r3, #8]
   19ea2:	695b      	ldr	r3, [r3, #20]
   19ea4:	602b      	str	r3, [r5, #0]
}
   19ea6:	4620      	mov	r0, r4
   19ea8:	b002      	add	sp, #8
   19eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19eae:	bf00      	nop
   19eb0:	20009fb4 	.word	0x20009fb4
   19eb4:	00022ca0 	.word	0x00022ca0
   19eb8:	00022c66 	.word	0x00022c66
   19ebc:	20009fbc 	.word	0x20009fbc

00019ec0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   19ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ec2:	4604      	mov	r4, r0
   19ec4:	460d      	mov	r5, r1
	__asm__ volatile(
   19ec6:	f04f 0320 	mov.w	r3, #32
   19eca:	f3ef 8611 	mrs	r6, BASEPRI
   19ece:	f383 8811 	msr	BASEPRI, r3
   19ed2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ed6:	481e      	ldr	r0, [pc, #120]	; (19f50 <k_mem_slab_free+0x90>)
   19ed8:	f001 fce0 	bl	1b89c <z_spin_lock_valid>
   19edc:	b940      	cbnz	r0, 19ef0 <k_mem_slab_free+0x30>
   19ede:	491d      	ldr	r1, [pc, #116]	; (19f54 <k_mem_slab_free+0x94>)
   19ee0:	481d      	ldr	r0, [pc, #116]	; (19f58 <k_mem_slab_free+0x98>)
   19ee2:	227c      	movs	r2, #124	; 0x7c
   19ee4:	f002 fcae 	bl	1c844 <printk>
   19ee8:	217c      	movs	r1, #124	; 0x7c
   19eea:	481a      	ldr	r0, [pc, #104]	; (19f54 <k_mem_slab_free+0x94>)
   19eec:	f002 ff50 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   19ef0:	4817      	ldr	r0, [pc, #92]	; (19f50 <k_mem_slab_free+0x90>)
   19ef2:	f001 fcef 	bl	1b8d4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   19ef6:	6967      	ldr	r7, [r4, #20]
   19ef8:	b97f      	cbnz	r7, 19f1a <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   19efa:	4620      	mov	r0, r4
   19efc:	f001 f92c 	bl	1b158 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   19f00:	b158      	cbz	r0, 19f1a <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   19f02:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   19f04:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   19f08:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   19f0a:	f000 fd19 	bl	1a940 <z_ready_thread>
			z_reschedule(&lock, key);
   19f0e:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   19f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   19f14:	480e      	ldr	r0, [pc, #56]	; (19f50 <k_mem_slab_free+0x90>)
   19f16:	f000 bb3f 	b.w	1a598 <z_reschedule>
	**(char ***) mem = slab->free_list;
   19f1a:	682b      	ldr	r3, [r5, #0]
   19f1c:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f1e:	480c      	ldr	r0, [pc, #48]	; (19f50 <k_mem_slab_free+0x90>)
   19f20:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   19f22:	682b      	ldr	r3, [r5, #0]
   19f24:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   19f26:	69a3      	ldr	r3, [r4, #24]
   19f28:	3b01      	subs	r3, #1
   19f2a:	61a3      	str	r3, [r4, #24]
   19f2c:	f001 fcc4 	bl	1b8b8 <z_spin_unlock_valid>
   19f30:	b940      	cbnz	r0, 19f44 <k_mem_slab_free+0x84>
   19f32:	4908      	ldr	r1, [pc, #32]	; (19f54 <k_mem_slab_free+0x94>)
   19f34:	4808      	ldr	r0, [pc, #32]	; (19f58 <k_mem_slab_free+0x98>)
   19f36:	22a7      	movs	r2, #167	; 0xa7
   19f38:	f002 fc84 	bl	1c844 <printk>
   19f3c:	21a7      	movs	r1, #167	; 0xa7
   19f3e:	4805      	ldr	r0, [pc, #20]	; (19f54 <k_mem_slab_free+0x94>)
   19f40:	f002 ff26 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   19f44:	f386 8811 	msr	BASEPRI, r6
   19f48:	f3bf 8f6f 	isb	sy
}
   19f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f4e:	bf00      	nop
   19f50:	20009fb4 	.word	0x20009fb4
   19f54:	00022ca0 	.word	0x00022ca0
   19f58:	00022c66 	.word	0x00022c66

00019f5c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   19f5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19f60:	4604      	mov	r4, r0
   19f62:	4617      	mov	r7, r2
   19f64:	461e      	mov	r6, r3
   19f66:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   19f6a:	b143      	cbz	r3, 19f7e <z_impl_k_mutex_lock+0x22>
   19f6c:	495c      	ldr	r1, [pc, #368]	; (1a0e0 <z_impl_k_mutex_lock+0x184>)
   19f6e:	485d      	ldr	r0, [pc, #372]	; (1a0e4 <z_impl_k_mutex_lock+0x188>)
   19f70:	227d      	movs	r2, #125	; 0x7d
   19f72:	f002 fc67 	bl	1c844 <printk>
   19f76:	217d      	movs	r1, #125	; 0x7d
   19f78:	4859      	ldr	r0, [pc, #356]	; (1a0e0 <z_impl_k_mutex_lock+0x184>)
   19f7a:	f002 ff09 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   19f7e:	f04f 0320 	mov.w	r3, #32
   19f82:	f3ef 8811 	mrs	r8, BASEPRI
   19f86:	f383 8811 	msr	BASEPRI, r3
   19f8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f8e:	4856      	ldr	r0, [pc, #344]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
   19f90:	f001 fc84 	bl	1b89c <z_spin_lock_valid>
   19f94:	b940      	cbnz	r0, 19fa8 <z_impl_k_mutex_lock+0x4c>
   19f96:	4955      	ldr	r1, [pc, #340]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   19f98:	4852      	ldr	r0, [pc, #328]	; (1a0e4 <z_impl_k_mutex_lock+0x188>)
   19f9a:	227c      	movs	r2, #124	; 0x7c
   19f9c:	f002 fc52 	bl	1c844 <printk>
   19fa0:	217c      	movs	r1, #124	; 0x7c
   19fa2:	4852      	ldr	r0, [pc, #328]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   19fa4:	f002 fef4 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   19fa8:	484f      	ldr	r0, [pc, #316]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
   19faa:	f001 fc93 	bl	1b8d4 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   19fae:	68e3      	ldr	r3, [r4, #12]
   19fb0:	4a4f      	ldr	r2, [pc, #316]	; (1a0f0 <z_impl_k_mutex_lock+0x194>)
   19fb2:	b1d3      	cbz	r3, 19fea <z_impl_k_mutex_lock+0x8e>
   19fb4:	68a0      	ldr	r0, [r4, #8]
   19fb6:	6891      	ldr	r1, [r2, #8]
   19fb8:	4288      	cmp	r0, r1
   19fba:	d033      	beq.n	1a024 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   19fbc:	ea57 0306 	orrs.w	r3, r7, r6
   19fc0:	d132      	bne.n	1a028 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19fc2:	4849      	ldr	r0, [pc, #292]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
   19fc4:	f001 fc78 	bl	1b8b8 <z_spin_unlock_valid>
   19fc8:	b940      	cbnz	r0, 19fdc <z_impl_k_mutex_lock+0x80>
   19fca:	4948      	ldr	r1, [pc, #288]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   19fcc:	4845      	ldr	r0, [pc, #276]	; (1a0e4 <z_impl_k_mutex_lock+0x188>)
   19fce:	22a7      	movs	r2, #167	; 0xa7
   19fd0:	f002 fc38 	bl	1c844 <printk>
   19fd4:	21a7      	movs	r1, #167	; 0xa7
   19fd6:	4845      	ldr	r0, [pc, #276]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   19fd8:	f002 feda 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   19fdc:	f388 8811 	msr	BASEPRI, r8
   19fe0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   19fe4:	f06f 000f 	mvn.w	r0, #15
   19fe8:	e019      	b.n	1a01e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   19fea:	6891      	ldr	r1, [r2, #8]
   19fec:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   19ff0:	3301      	adds	r3, #1
   19ff2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   19ff4:	6893      	ldr	r3, [r2, #8]
   19ff6:	483c      	ldr	r0, [pc, #240]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19ff8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   19ffa:	60a3      	str	r3, [r4, #8]
   19ffc:	f001 fc5c 	bl	1b8b8 <z_spin_unlock_valid>
   1a000:	b940      	cbnz	r0, 1a014 <z_impl_k_mutex_lock+0xb8>
   1a002:	493a      	ldr	r1, [pc, #232]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   1a004:	4837      	ldr	r0, [pc, #220]	; (1a0e4 <z_impl_k_mutex_lock+0x188>)
   1a006:	22a7      	movs	r2, #167	; 0xa7
   1a008:	f002 fc1c 	bl	1c844 <printk>
   1a00c:	21a7      	movs	r1, #167	; 0xa7
   1a00e:	4837      	ldr	r0, [pc, #220]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   1a010:	f002 febe 	bl	1cd90 <assert_post_action>
   1a014:	f388 8811 	msr	BASEPRI, r8
   1a018:	f3bf 8f6f 	isb	sy
		return 0;
   1a01c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1a01e:	b002      	add	sp, #8
   1a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1a024:	6921      	ldr	r1, [r4, #16]
   1a026:	e7e3      	b.n	19ff0 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a028:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a02c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a030:	4299      	cmp	r1, r3
   1a032:	bfa8      	it	ge
   1a034:	4619      	movge	r1, r3
   1a036:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a03a:	4299      	cmp	r1, r3
   1a03c:	da3b      	bge.n	1a0b6 <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   1a03e:	f007 f8e9 	bl	21214 <adjust_owner_prio.isra.0>
   1a042:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a044:	4622      	mov	r2, r4
   1a046:	4641      	mov	r1, r8
   1a048:	e9cd 7600 	strd	r7, r6, [sp]
   1a04c:	4826      	ldr	r0, [pc, #152]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
   1a04e:	f000 ffe1 	bl	1b014 <z_pend_curr>
	if (got_mutex == 0) {
   1a052:	2800      	cmp	r0, #0
   1a054:	d0e3      	beq.n	1a01e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   1a056:	f04f 0320 	mov.w	r3, #32
   1a05a:	f3ef 8611 	mrs	r6, BASEPRI
   1a05e:	f383 8811 	msr	BASEPRI, r3
   1a062:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a066:	4820      	ldr	r0, [pc, #128]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
   1a068:	f001 fc18 	bl	1b89c <z_spin_lock_valid>
   1a06c:	b940      	cbnz	r0, 1a080 <z_impl_k_mutex_lock+0x124>
   1a06e:	491f      	ldr	r1, [pc, #124]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   1a070:	481c      	ldr	r0, [pc, #112]	; (1a0e4 <z_impl_k_mutex_lock+0x188>)
   1a072:	227c      	movs	r2, #124	; 0x7c
   1a074:	f002 fbe6 	bl	1c844 <printk>
   1a078:	217c      	movs	r1, #124	; 0x7c
   1a07a:	481c      	ldr	r0, [pc, #112]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   1a07c:	f002 fe88 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a080:	4819      	ldr	r0, [pc, #100]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
   1a082:	f001 fc27 	bl	1b8d4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a086:	6823      	ldr	r3, [r4, #0]
   1a088:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a08a:	42a3      	cmp	r3, r4
   1a08c:	d007      	beq.n	1a09e <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a08e:	b133      	cbz	r3, 1a09e <z_impl_k_mutex_lock+0x142>
   1a090:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a094:	4299      	cmp	r1, r3
   1a096:	bfa8      	it	ge
   1a098:	4619      	movge	r1, r3
   1a09a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a09e:	68a0      	ldr	r0, [r4, #8]
   1a0a0:	f007 f8b8 	bl	21214 <adjust_owner_prio.isra.0>
   1a0a4:	b900      	cbnz	r0, 1a0a8 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   1a0a6:	b145      	cbz	r5, 1a0ba <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   1a0a8:	4631      	mov	r1, r6
   1a0aa:	480f      	ldr	r0, [pc, #60]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
   1a0ac:	f000 fa74 	bl	1a598 <z_reschedule>
	return -EAGAIN;
   1a0b0:	f06f 000a 	mvn.w	r0, #10
   1a0b4:	e7b3      	b.n	1a01e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   1a0b6:	2500      	movs	r5, #0
   1a0b8:	e7c4      	b.n	1a044 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0ba:	480b      	ldr	r0, [pc, #44]	; (1a0e8 <z_impl_k_mutex_lock+0x18c>)
   1a0bc:	f001 fbfc 	bl	1b8b8 <z_spin_unlock_valid>
   1a0c0:	b940      	cbnz	r0, 1a0d4 <z_impl_k_mutex_lock+0x178>
   1a0c2:	490a      	ldr	r1, [pc, #40]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   1a0c4:	4807      	ldr	r0, [pc, #28]	; (1a0e4 <z_impl_k_mutex_lock+0x188>)
   1a0c6:	22a7      	movs	r2, #167	; 0xa7
   1a0c8:	f002 fbbc 	bl	1c844 <printk>
   1a0cc:	21a7      	movs	r1, #167	; 0xa7
   1a0ce:	4807      	ldr	r0, [pc, #28]	; (1a0ec <z_impl_k_mutex_lock+0x190>)
   1a0d0:	f002 fe5e 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a0d4:	f386 8811 	msr	BASEPRI, r6
   1a0d8:	f3bf 8f6f 	isb	sy
   1a0dc:	e7e8      	b.n	1a0b0 <z_impl_k_mutex_lock+0x154>
   1a0de:	bf00      	nop
   1a0e0:	000261d0 	.word	0x000261d0
   1a0e4:	00022c66 	.word	0x00022c66
   1a0e8:	20009fb8 	.word	0x20009fb8
   1a0ec:	00022ca0 	.word	0x00022ca0
   1a0f0:	20009fbc 	.word	0x20009fbc

0001a0f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a0f4:	b538      	push	{r3, r4, r5, lr}
   1a0f6:	4604      	mov	r4, r0
   1a0f8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1a0fc:	b143      	cbz	r3, 1a110 <z_impl_k_mutex_unlock+0x1c>
   1a0fe:	4946      	ldr	r1, [pc, #280]	; (1a218 <z_impl_k_mutex_unlock+0x124>)
   1a100:	4846      	ldr	r0, [pc, #280]	; (1a21c <z_impl_k_mutex_unlock+0x128>)
   1a102:	22d8      	movs	r2, #216	; 0xd8
   1a104:	f002 fb9e 	bl	1c844 <printk>
   1a108:	21d8      	movs	r1, #216	; 0xd8
   1a10a:	4843      	ldr	r0, [pc, #268]	; (1a218 <z_impl_k_mutex_unlock+0x124>)
   1a10c:	f002 fe40 	bl	1cd90 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   1a110:	68a3      	ldr	r3, [r4, #8]
   1a112:	2b00      	cmp	r3, #0
   1a114:	d079      	beq.n	1a20a <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a116:	4d42      	ldr	r5, [pc, #264]	; (1a220 <z_impl_k_mutex_unlock+0x12c>)
   1a118:	68aa      	ldr	r2, [r5, #8]
   1a11a:	4293      	cmp	r3, r2
   1a11c:	d178      	bne.n	1a210 <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1a11e:	68e3      	ldr	r3, [r4, #12]
   1a120:	b943      	cbnz	r3, 1a134 <z_impl_k_mutex_unlock+0x40>
   1a122:	493d      	ldr	r1, [pc, #244]	; (1a218 <z_impl_k_mutex_unlock+0x124>)
   1a124:	483d      	ldr	r0, [pc, #244]	; (1a21c <z_impl_k_mutex_unlock+0x128>)
   1a126:	22ea      	movs	r2, #234	; 0xea
   1a128:	f002 fb8c 	bl	1c844 <printk>
   1a12c:	21ea      	movs	r1, #234	; 0xea
   1a12e:	483a      	ldr	r0, [pc, #232]	; (1a218 <z_impl_k_mutex_unlock+0x124>)
   1a130:	f002 fe2e 	bl	1cd90 <assert_post_action>
   1a134:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   1a138:	b153      	cbz	r3, 1a150 <z_impl_k_mutex_unlock+0x5c>
   1a13a:	493a      	ldr	r1, [pc, #232]	; (1a224 <z_impl_k_mutex_unlock+0x130>)
   1a13c:	4837      	ldr	r0, [pc, #220]	; (1a21c <z_impl_k_mutex_unlock+0x128>)
   1a13e:	f44f 7289 	mov.w	r2, #274	; 0x112
   1a142:	f002 fb7f 	bl	1c844 <printk>
   1a146:	f44f 7189 	mov.w	r1, #274	; 0x112
   1a14a:	4836      	ldr	r0, [pc, #216]	; (1a224 <z_impl_k_mutex_unlock+0x130>)
   1a14c:	f002 fe20 	bl	1cd90 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1a150:	68ab      	ldr	r3, [r5, #8]
   1a152:	7bdb      	ldrb	r3, [r3, #15]
   1a154:	2b01      	cmp	r3, #1
   1a156:	d10a      	bne.n	1a16e <z_impl_k_mutex_unlock+0x7a>
   1a158:	4932      	ldr	r1, [pc, #200]	; (1a224 <z_impl_k_mutex_unlock+0x130>)
   1a15a:	4830      	ldr	r0, [pc, #192]	; (1a21c <z_impl_k_mutex_unlock+0x128>)
   1a15c:	f240 1213 	movw	r2, #275	; 0x113
   1a160:	f002 fb70 	bl	1c844 <printk>
   1a164:	f240 1113 	movw	r1, #275	; 0x113
   1a168:	482e      	ldr	r0, [pc, #184]	; (1a224 <z_impl_k_mutex_unlock+0x130>)
   1a16a:	f002 fe11 	bl	1cd90 <assert_post_action>

	--_current->base.sched_locked;
   1a16e:	68aa      	ldr	r2, [r5, #8]
   1a170:	7bd3      	ldrb	r3, [r2, #15]
   1a172:	3b01      	subs	r3, #1
   1a174:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1a176:	68e3      	ldr	r3, [r4, #12]
   1a178:	2b01      	cmp	r3, #1
   1a17a:	d005      	beq.n	1a188 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   1a17c:	3b01      	subs	r3, #1
   1a17e:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1a180:	f000 fb38 	bl	1a7f4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1a184:	2000      	movs	r0, #0
}
   1a186:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a188:	f04f 0320 	mov.w	r3, #32
   1a18c:	f3ef 8511 	mrs	r5, BASEPRI
   1a190:	f383 8811 	msr	BASEPRI, r3
   1a194:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a198:	4823      	ldr	r0, [pc, #140]	; (1a228 <z_impl_k_mutex_unlock+0x134>)
   1a19a:	f001 fb7f 	bl	1b89c <z_spin_lock_valid>
   1a19e:	b940      	cbnz	r0, 1a1b2 <z_impl_k_mutex_unlock+0xbe>
   1a1a0:	4922      	ldr	r1, [pc, #136]	; (1a22c <z_impl_k_mutex_unlock+0x138>)
   1a1a2:	481e      	ldr	r0, [pc, #120]	; (1a21c <z_impl_k_mutex_unlock+0x128>)
   1a1a4:	227c      	movs	r2, #124	; 0x7c
   1a1a6:	f002 fb4d 	bl	1c844 <printk>
   1a1aa:	217c      	movs	r1, #124	; 0x7c
   1a1ac:	481f      	ldr	r0, [pc, #124]	; (1a22c <z_impl_k_mutex_unlock+0x138>)
   1a1ae:	f002 fdef 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1b2:	481d      	ldr	r0, [pc, #116]	; (1a228 <z_impl_k_mutex_unlock+0x134>)
   1a1b4:	f001 fb8e 	bl	1b8d4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a1b8:	6921      	ldr	r1, [r4, #16]
   1a1ba:	68a0      	ldr	r0, [r4, #8]
   1a1bc:	f007 f82a 	bl	21214 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a1c0:	4620      	mov	r0, r4
   1a1c2:	f000 ffc9 	bl	1b158 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a1c6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a1c8:	b160      	cbz	r0, 1a1e4 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a1ca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a1ce:	6122      	str	r2, [r4, #16]
   1a1d0:	2200      	movs	r2, #0
   1a1d2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   1a1d6:	f000 fbb3 	bl	1a940 <z_ready_thread>
		z_reschedule(&lock, key);
   1a1da:	4629      	mov	r1, r5
   1a1dc:	4812      	ldr	r0, [pc, #72]	; (1a228 <z_impl_k_mutex_unlock+0x134>)
   1a1de:	f000 f9db 	bl	1a598 <z_reschedule>
   1a1e2:	e7cd      	b.n	1a180 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   1a1e4:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1e6:	4810      	ldr	r0, [pc, #64]	; (1a228 <z_impl_k_mutex_unlock+0x134>)
   1a1e8:	f001 fb66 	bl	1b8b8 <z_spin_unlock_valid>
   1a1ec:	b940      	cbnz	r0, 1a200 <z_impl_k_mutex_unlock+0x10c>
   1a1ee:	490f      	ldr	r1, [pc, #60]	; (1a22c <z_impl_k_mutex_unlock+0x138>)
   1a1f0:	480a      	ldr	r0, [pc, #40]	; (1a21c <z_impl_k_mutex_unlock+0x128>)
   1a1f2:	22a7      	movs	r2, #167	; 0xa7
   1a1f4:	f002 fb26 	bl	1c844 <printk>
   1a1f8:	21a7      	movs	r1, #167	; 0xa7
   1a1fa:	480c      	ldr	r0, [pc, #48]	; (1a22c <z_impl_k_mutex_unlock+0x138>)
   1a1fc:	f002 fdc8 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a200:	f385 8811 	msr	BASEPRI, r5
   1a204:	f3bf 8f6f 	isb	sy
   1a208:	e7ba      	b.n	1a180 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   1a20a:	f06f 0015 	mvn.w	r0, #21
   1a20e:	e7ba      	b.n	1a186 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   1a210:	f04f 30ff 	mov.w	r0, #4294967295
   1a214:	e7b7      	b.n	1a186 <z_impl_k_mutex_unlock+0x92>
   1a216:	bf00      	nop
   1a218:	000261d0 	.word	0x000261d0
   1a21c:	00022c66 	.word	0x00022c66
   1a220:	20009fbc 	.word	0x20009fbc
   1a224:	000261f2 	.word	0x000261f2
   1a228:	20009fb8 	.word	0x20009fb8
   1a22c:	00022ca0 	.word	0x00022ca0

0001a230 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1a230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a234:	4604      	mov	r4, r0
   1a236:	460d      	mov	r5, r1
   1a238:	4690      	mov	r8, r2
   1a23a:	4699      	mov	r9, r3
   1a23c:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a240:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1a244:	f04f 0320 	mov.w	r3, #32
   1a248:	f3ef 8711 	mrs	r7, BASEPRI
   1a24c:	f383 8811 	msr	BASEPRI, r3
   1a250:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a254:	4630      	mov	r0, r6
   1a256:	f001 fb21 	bl	1b89c <z_spin_lock_valid>
   1a25a:	b940      	cbnz	r0, 1a26e <queue_insert+0x3e>
   1a25c:	4937      	ldr	r1, [pc, #220]	; (1a33c <queue_insert+0x10c>)
   1a25e:	4838      	ldr	r0, [pc, #224]	; (1a340 <queue_insert+0x110>)
   1a260:	227c      	movs	r2, #124	; 0x7c
   1a262:	f002 faef 	bl	1c844 <printk>
   1a266:	217c      	movs	r1, #124	; 0x7c
   1a268:	4834      	ldr	r0, [pc, #208]	; (1a33c <queue_insert+0x10c>)
   1a26a:	f002 fd91 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a26e:	4630      	mov	r0, r6
   1a270:	f001 fb30 	bl	1b8d4 <z_spin_lock_set_owner>

	if (is_append) {
   1a274:	f1ba 0f00 	cmp.w	sl, #0
   1a278:	d000      	beq.n	1a27c <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1a27a:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a27c:	f104 000c 	add.w	r0, r4, #12
   1a280:	f000 ff6a 	bl	1b158 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1a284:	b160      	cbz	r0, 1a2a0 <queue_insert+0x70>
   1a286:	2400      	movs	r4, #0
   1a288:	f8c0 8014 	str.w	r8, [r0, #20]
   1a28c:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1a290:	f000 fb56 	bl	1a940 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1a294:	4630      	mov	r0, r6
   1a296:	4639      	mov	r1, r7
   1a298:	f000 f97e 	bl	1a598 <z_reschedule>
	return 0;
   1a29c:	2000      	movs	r0, #0
   1a29e:	e019      	b.n	1a2d4 <queue_insert+0xa4>
	if (alloc) {
   1a2a0:	f1b9 0f00 	cmp.w	r9, #0
   1a2a4:	d028      	beq.n	1a2f8 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   1a2a6:	2108      	movs	r1, #8
   1a2a8:	f002 fa12 	bl	1c6d0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1a2ac:	b9a0      	cbnz	r0, 1a2d8 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a2ae:	4630      	mov	r0, r6
   1a2b0:	f001 fb02 	bl	1b8b8 <z_spin_unlock_valid>
   1a2b4:	b940      	cbnz	r0, 1a2c8 <queue_insert+0x98>
   1a2b6:	4921      	ldr	r1, [pc, #132]	; (1a33c <queue_insert+0x10c>)
   1a2b8:	4821      	ldr	r0, [pc, #132]	; (1a340 <queue_insert+0x110>)
   1a2ba:	22a7      	movs	r2, #167	; 0xa7
   1a2bc:	f002 fac2 	bl	1c844 <printk>
   1a2c0:	21a7      	movs	r1, #167	; 0xa7
   1a2c2:	481e      	ldr	r0, [pc, #120]	; (1a33c <queue_insert+0x10c>)
   1a2c4:	f002 fd64 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a2c8:	f387 8811 	msr	BASEPRI, r7
   1a2cc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1a2d0:	f06f 000b 	mvn.w	r0, #11
}
   1a2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1a2d8:	2301      	movs	r3, #1
		anode->data = data;
   1a2da:	f8c0 8004 	str.w	r8, [r0, #4]
   1a2de:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a2e0:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a2e2:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1a2e6:	b95d      	cbnz	r5, 1a300 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a2e8:	6823      	ldr	r3, [r4, #0]
   1a2ea:	4313      	orrs	r3, r2
   1a2ec:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a2ee:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1a2f0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a2f2:	b973      	cbnz	r3, 1a312 <queue_insert+0xe2>
	list->tail = node;
   1a2f4:	6060      	str	r0, [r4, #4]
}
   1a2f6:	e00c      	b.n	1a312 <queue_insert+0xe2>
}
   1a2f8:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1a2fa:	f8c8 9000 	str.w	r9, [r8]
}
   1a2fe:	e7ef      	b.n	1a2e0 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a300:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a302:	f033 0303 	bics.w	r3, r3, #3
   1a306:	d110      	bne.n	1a32a <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a308:	6002      	str	r2, [r0, #0]
	return list->tail;
   1a30a:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1a30c:	b93a      	cbnz	r2, 1a31e <queue_insert+0xee>
	list->head = node;
   1a30e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a312:	2104      	movs	r1, #4
   1a314:	f104 0014 	add.w	r0, r4, #20
   1a318:	f007 f8eb 	bl	214f2 <z_handle_obj_poll_events>
   1a31c:	e7ba      	b.n	1a294 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a31e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a320:	f003 0303 	and.w	r3, r3, #3
   1a324:	4303      	orrs	r3, r0
   1a326:	6013      	str	r3, [r2, #0]
   1a328:	e7e4      	b.n	1a2f4 <queue_insert+0xc4>
   1a32a:	4313      	orrs	r3, r2
   1a32c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a32e:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a330:	f003 0303 	and.w	r3, r3, #3
   1a334:	4303      	orrs	r3, r0
   1a336:	602b      	str	r3, [r5, #0]
}
   1a338:	e7eb      	b.n	1a312 <queue_insert+0xe2>
   1a33a:	bf00      	nop
   1a33c:	00022ca0 	.word	0x00022ca0
   1a340:	00022c66 	.word	0x00022c66

0001a344 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a348:	4605      	mov	r5, r0
   1a34a:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   1a34c:	460c      	mov	r4, r1
   1a34e:	2900      	cmp	r1, #0
   1a350:	d045      	beq.n	1a3de <k_queue_append_list+0x9a>
   1a352:	2a00      	cmp	r2, #0
   1a354:	d043      	beq.n	1a3de <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a356:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1a35a:	f04f 0320 	mov.w	r3, #32
   1a35e:	f3ef 8911 	mrs	r9, BASEPRI
   1a362:	f383 8811 	msr	BASEPRI, r3
   1a366:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a36a:	4638      	mov	r0, r7
   1a36c:	f001 fa96 	bl	1b89c <z_spin_lock_valid>
   1a370:	b940      	cbnz	r0, 1a384 <k_queue_append_list+0x40>
   1a372:	491c      	ldr	r1, [pc, #112]	; (1a3e4 <k_queue_append_list+0xa0>)
   1a374:	481c      	ldr	r0, [pc, #112]	; (1a3e8 <k_queue_append_list+0xa4>)
   1a376:	227c      	movs	r2, #124	; 0x7c
   1a378:	f002 fa64 	bl	1c844 <printk>
   1a37c:	217c      	movs	r1, #124	; 0x7c
   1a37e:	4819      	ldr	r0, [pc, #100]	; (1a3e4 <k_queue_append_list+0xa0>)
   1a380:	f002 fd06 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a384:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1a386:	f105 080c 	add.w	r8, r5, #12
   1a38a:	f001 faa3 	bl	1b8d4 <z_spin_lock_set_owner>
   1a38e:	4640      	mov	r0, r8
   1a390:	f000 fee2 	bl	1b158 <z_unpend_first_thread>
   1a394:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   1a398:	b920      	cbnz	r0, 1a3a4 <k_queue_append_list+0x60>
	return list->tail;
   1a39a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a39c:	b9ca      	cbnz	r2, 1a3d2 <k_queue_append_list+0x8e>
	list->head = node;
   1a39e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a3a0:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a3a2:	e00a      	b.n	1a3ba <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   1a3a4:	6144      	str	r4, [r0, #20]
   1a3a6:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1a3aa:	f000 fac9 	bl	1a940 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1a3ae:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1a3b0:	4640      	mov	r0, r8
   1a3b2:	f000 fed1 	bl	1b158 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1a3b6:	2c00      	cmp	r4, #0
   1a3b8:	d1ee      	bne.n	1a398 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a3ba:	2104      	movs	r1, #4
   1a3bc:	f105 0014 	add.w	r0, r5, #20
   1a3c0:	f007 f897 	bl	214f2 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1a3c4:	4638      	mov	r0, r7
   1a3c6:	4649      	mov	r1, r9
   1a3c8:	f000 f8e6 	bl	1a598 <z_reschedule>
	return 0;
   1a3cc:	2000      	movs	r0, #0
}
   1a3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a3d2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a3d4:	f003 0303 	and.w	r3, r3, #3
   1a3d8:	431c      	orrs	r4, r3
   1a3da:	6014      	str	r4, [r2, #0]
}
   1a3dc:	e7e0      	b.n	1a3a0 <k_queue_append_list+0x5c>
		return -EINVAL;
   1a3de:	f06f 0015 	mvn.w	r0, #21
   1a3e2:	e7f4      	b.n	1a3ce <k_queue_append_list+0x8a>
   1a3e4:	00022ca0 	.word	0x00022ca0
   1a3e8:	00022c66 	.word	0x00022c66

0001a3ec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a3ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a3f0:	4605      	mov	r5, r0
   1a3f2:	4690      	mov	r8, r2
   1a3f4:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a3f6:	f100 0608 	add.w	r6, r0, #8
   1a3fa:	f04f 0320 	mov.w	r3, #32
   1a3fe:	f3ef 8911 	mrs	r9, BASEPRI
   1a402:	f383 8811 	msr	BASEPRI, r3
   1a406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a40a:	4630      	mov	r0, r6
   1a40c:	f001 fa46 	bl	1b89c <z_spin_lock_valid>
   1a410:	b940      	cbnz	r0, 1a424 <z_impl_k_queue_get+0x38>
   1a412:	4921      	ldr	r1, [pc, #132]	; (1a498 <z_impl_k_queue_get+0xac>)
   1a414:	4821      	ldr	r0, [pc, #132]	; (1a49c <z_impl_k_queue_get+0xb0>)
   1a416:	227c      	movs	r2, #124	; 0x7c
   1a418:	f002 fa14 	bl	1c844 <printk>
   1a41c:	217c      	movs	r1, #124	; 0x7c
   1a41e:	481e      	ldr	r0, [pc, #120]	; (1a498 <z_impl_k_queue_get+0xac>)
   1a420:	f002 fcb6 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a424:	4630      	mov	r0, r6
   1a426:	f001 fa55 	bl	1b8d4 <z_spin_lock_set_owner>
	return list->head;
   1a42a:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a42c:	b314      	cbz	r4, 1a474 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a42e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a430:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a432:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a436:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a438:	4620      	mov	r0, r4
   1a43a:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1a43e:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1a440:	bf08      	it	eq
   1a442:	606b      	streq	r3, [r5, #4]
   1a444:	f006 fef5 	bl	21232 <z_queue_node_peek>
   1a448:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a44a:	4630      	mov	r0, r6
   1a44c:	f001 fa34 	bl	1b8b8 <z_spin_unlock_valid>
   1a450:	b940      	cbnz	r0, 1a464 <z_impl_k_queue_get+0x78>
   1a452:	4911      	ldr	r1, [pc, #68]	; (1a498 <z_impl_k_queue_get+0xac>)
   1a454:	4811      	ldr	r0, [pc, #68]	; (1a49c <z_impl_k_queue_get+0xb0>)
   1a456:	22a7      	movs	r2, #167	; 0xa7
   1a458:	f002 f9f4 	bl	1c844 <printk>
   1a45c:	21a7      	movs	r1, #167	; 0xa7
   1a45e:	480e      	ldr	r0, [pc, #56]	; (1a498 <z_impl_k_queue_get+0xac>)
   1a460:	f002 fc96 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a464:	f389 8811 	msr	BASEPRI, r9
   1a468:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a46c:	4620      	mov	r0, r4
   1a46e:	b003      	add	sp, #12
   1a470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a474:	ea58 0307 	orrs.w	r3, r8, r7
   1a478:	d0e7      	beq.n	1a44a <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a47a:	4649      	mov	r1, r9
   1a47c:	4630      	mov	r0, r6
   1a47e:	e9cd 8700 	strd	r8, r7, [sp]
   1a482:	f105 020c 	add.w	r2, r5, #12
   1a486:	f000 fdc5 	bl	1b014 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a48a:	2800      	cmp	r0, #0
   1a48c:	d1ee      	bne.n	1a46c <z_impl_k_queue_get+0x80>
   1a48e:	4b04      	ldr	r3, [pc, #16]	; (1a4a0 <z_impl_k_queue_get+0xb4>)
   1a490:	689b      	ldr	r3, [r3, #8]
   1a492:	695c      	ldr	r4, [r3, #20]
   1a494:	e7ea      	b.n	1a46c <z_impl_k_queue_get+0x80>
   1a496:	bf00      	nop
   1a498:	00022ca0 	.word	0x00022ca0
   1a49c:	00022c66 	.word	0x00022c66
   1a4a0:	20009fbc 	.word	0x20009fbc

0001a4a4 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a4a4:	6883      	ldr	r3, [r0, #8]
{
   1a4a6:	b510      	push	{r4, lr}
   1a4a8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1a4aa:	b953      	cbnz	r3, 1a4c2 <pended_on+0x1e>
   1a4ac:	4906      	ldr	r1, [pc, #24]	; (1a4c8 <pended_on+0x24>)
   1a4ae:	4807      	ldr	r0, [pc, #28]	; (1a4cc <pended_on+0x28>)
   1a4b0:	f44f 7201 	mov.w	r2, #516	; 0x204
   1a4b4:	f002 f9c6 	bl	1c844 <printk>
   1a4b8:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a4bc:	4802      	ldr	r0, [pc, #8]	; (1a4c8 <pended_on+0x24>)
   1a4be:	f002 fc67 	bl	1cd90 <assert_post_action>

	return thread->base.pended_on;
}
   1a4c2:	68a0      	ldr	r0, [r4, #8]
   1a4c4:	bd10      	pop	{r4, pc}
   1a4c6:	bf00      	nop
   1a4c8:	0002621d 	.word	0x0002621d
   1a4cc:	00022c66 	.word	0x00022c66

0001a4d0 <z_reset_time_slice>:
{
   1a4d0:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1a4d2:	4c08      	ldr	r4, [pc, #32]	; (1a4f4 <z_reset_time_slice+0x24>)
   1a4d4:	6823      	ldr	r3, [r4, #0]
   1a4d6:	b15b      	cbz	r3, 1a4f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a4d8:	f7f2 f8a6 	bl	c628 <z_clock_elapsed>
   1a4dc:	4603      	mov	r3, r0
   1a4de:	6820      	ldr	r0, [r4, #0]
   1a4e0:	4a05      	ldr	r2, [pc, #20]	; (1a4f8 <z_reset_time_slice+0x28>)
   1a4e2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   1a4e4:	2100      	movs	r1, #0
}
   1a4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1a4ea:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1a4ec:	f001 bc8c 	b.w	1be08 <z_set_timeout_expiry>
}
   1a4f0:	bd10      	pop	{r4, pc}
   1a4f2:	bf00      	nop
   1a4f4:	20009ffc 	.word	0x20009ffc
   1a4f8:	20009fbc 	.word	0x20009fbc

0001a4fc <k_sched_time_slice_set>:
{
   1a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4fe:	4604      	mov	r4, r0
   1a500:	460d      	mov	r5, r1
	__asm__ volatile(
   1a502:	f04f 0320 	mov.w	r3, #32
   1a506:	f3ef 8711 	mrs	r7, BASEPRI
   1a50a:	f383 8811 	msr	BASEPRI, r3
   1a50e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a512:	481b      	ldr	r0, [pc, #108]	; (1a580 <k_sched_time_slice_set+0x84>)
   1a514:	f001 f9c2 	bl	1b89c <z_spin_lock_valid>
   1a518:	b940      	cbnz	r0, 1a52c <k_sched_time_slice_set+0x30>
   1a51a:	491a      	ldr	r1, [pc, #104]	; (1a584 <k_sched_time_slice_set+0x88>)
   1a51c:	481a      	ldr	r0, [pc, #104]	; (1a588 <k_sched_time_slice_set+0x8c>)
   1a51e:	227c      	movs	r2, #124	; 0x7c
   1a520:	f002 f990 	bl	1c844 <printk>
   1a524:	217c      	movs	r1, #124	; 0x7c
   1a526:	4817      	ldr	r0, [pc, #92]	; (1a584 <k_sched_time_slice_set+0x88>)
   1a528:	f002 fc32 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a52c:	4814      	ldr	r0, [pc, #80]	; (1a580 <k_sched_time_slice_set+0x84>)
   1a52e:	f001 f9d1 	bl	1b8d4 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a532:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   1a536:	2100      	movs	r1, #0
   1a538:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a53c:	4b13      	ldr	r3, [pc, #76]	; (1a58c <k_sched_time_slice_set+0x90>)
   1a53e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a542:	6159      	str	r1, [r3, #20]
   1a544:	2300      	movs	r3, #0
   1a546:	fbe4 0106 	umlal	r0, r1, r4, r6
   1a54a:	f7ee faef 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1a54e:	4b10      	ldr	r3, [pc, #64]	; (1a590 <k_sched_time_slice_set+0x94>)
   1a550:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1a552:	4b10      	ldr	r3, [pc, #64]	; (1a594 <k_sched_time_slice_set+0x98>)
   1a554:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1a556:	f7ff ffbb 	bl	1a4d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a55a:	4809      	ldr	r0, [pc, #36]	; (1a580 <k_sched_time_slice_set+0x84>)
   1a55c:	f001 f9ac 	bl	1b8b8 <z_spin_unlock_valid>
   1a560:	b940      	cbnz	r0, 1a574 <k_sched_time_slice_set+0x78>
   1a562:	4908      	ldr	r1, [pc, #32]	; (1a584 <k_sched_time_slice_set+0x88>)
   1a564:	4808      	ldr	r0, [pc, #32]	; (1a588 <k_sched_time_slice_set+0x8c>)
   1a566:	22a7      	movs	r2, #167	; 0xa7
   1a568:	f002 f96c 	bl	1c844 <printk>
   1a56c:	21a7      	movs	r1, #167	; 0xa7
   1a56e:	4805      	ldr	r0, [pc, #20]	; (1a584 <k_sched_time_slice_set+0x88>)
   1a570:	f002 fc0e 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a574:	f387 8811 	msr	BASEPRI, r7
   1a578:	f3bf 8f6f 	isb	sy
}
   1a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a57e:	bf00      	nop
   1a580:	20009ff4 	.word	0x20009ff4
   1a584:	00022ca0 	.word	0x00022ca0
   1a588:	00022c66 	.word	0x00022c66
   1a58c:	20009fbc 	.word	0x20009fbc
   1a590:	20009ffc 	.word	0x20009ffc
   1a594:	20009ff8 	.word	0x20009ff8

0001a598 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1a598:	b510      	push	{r4, lr}
   1a59a:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a59c:	460c      	mov	r4, r1
   1a59e:	b9c1      	cbnz	r1, 1a5d2 <z_reschedule+0x3a>
   1a5a0:	f3ef 8205 	mrs	r2, IPSR
   1a5a4:	b9aa      	cbnz	r2, 1a5d2 <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   1a5a6:	4a14      	ldr	r2, [pc, #80]	; (1a5f8 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   1a5a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a5aa:	6892      	ldr	r2, [r2, #8]
   1a5ac:	4291      	cmp	r1, r2
   1a5ae:	d010      	beq.n	1a5d2 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a5b0:	f001 f982 	bl	1b8b8 <z_spin_unlock_valid>
   1a5b4:	b940      	cbnz	r0, 1a5c8 <z_reschedule+0x30>
   1a5b6:	4911      	ldr	r1, [pc, #68]	; (1a5fc <z_reschedule+0x64>)
   1a5b8:	4811      	ldr	r0, [pc, #68]	; (1a600 <z_reschedule+0x68>)
   1a5ba:	22be      	movs	r2, #190	; 0xbe
   1a5bc:	f002 f942 	bl	1c844 <printk>
   1a5c0:	21be      	movs	r1, #190	; 0xbe
   1a5c2:	480e      	ldr	r0, [pc, #56]	; (1a5fc <z_reschedule+0x64>)
   1a5c4:	f002 fbe4 	bl	1cd90 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1a5cc:	2000      	movs	r0, #0
   1a5ce:	f7f3 b827 	b.w	d620 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a5d2:	4618      	mov	r0, r3
   1a5d4:	f001 f970 	bl	1b8b8 <z_spin_unlock_valid>
   1a5d8:	b940      	cbnz	r0, 1a5ec <z_reschedule+0x54>
   1a5da:	4908      	ldr	r1, [pc, #32]	; (1a5fc <z_reschedule+0x64>)
   1a5dc:	4808      	ldr	r0, [pc, #32]	; (1a600 <z_reschedule+0x68>)
   1a5de:	22a7      	movs	r2, #167	; 0xa7
   1a5e0:	f002 f930 	bl	1c844 <printk>
   1a5e4:	21a7      	movs	r1, #167	; 0xa7
   1a5e6:	4805      	ldr	r0, [pc, #20]	; (1a5fc <z_reschedule+0x64>)
   1a5e8:	f002 fbd2 	bl	1cd90 <assert_post_action>
   1a5ec:	f384 8811 	msr	BASEPRI, r4
   1a5f0:	f3bf 8f6f 	isb	sy
   1a5f4:	bd10      	pop	{r4, pc}
   1a5f6:	bf00      	nop
   1a5f8:	20009fbc 	.word	0x20009fbc
   1a5fc:	00022ca0 	.word	0x00022ca0
   1a600:	00022c66 	.word	0x00022c66

0001a604 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1a604:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a606:	f04f 0320 	mov.w	r3, #32
   1a60a:	f3ef 8511 	mrs	r5, BASEPRI
   1a60e:	f383 8811 	msr	BASEPRI, r3
   1a612:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a616:	4822      	ldr	r0, [pc, #136]	; (1a6a0 <k_sched_lock+0x9c>)
   1a618:	f001 f940 	bl	1b89c <z_spin_lock_valid>
   1a61c:	b940      	cbnz	r0, 1a630 <k_sched_lock+0x2c>
   1a61e:	4921      	ldr	r1, [pc, #132]	; (1a6a4 <k_sched_lock+0xa0>)
   1a620:	4821      	ldr	r0, [pc, #132]	; (1a6a8 <k_sched_lock+0xa4>)
   1a622:	227c      	movs	r2, #124	; 0x7c
   1a624:	f002 f90e 	bl	1c844 <printk>
   1a628:	217c      	movs	r1, #124	; 0x7c
   1a62a:	481e      	ldr	r0, [pc, #120]	; (1a6a4 <k_sched_lock+0xa0>)
   1a62c:	f002 fbb0 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a630:	481b      	ldr	r0, [pc, #108]	; (1a6a0 <k_sched_lock+0x9c>)
   1a632:	f001 f94f 	bl	1b8d4 <z_spin_lock_set_owner>
   1a636:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a63a:	b153      	cbz	r3, 1a652 <k_sched_lock+0x4e>
   1a63c:	491b      	ldr	r1, [pc, #108]	; (1a6ac <k_sched_lock+0xa8>)
   1a63e:	481a      	ldr	r0, [pc, #104]	; (1a6a8 <k_sched_lock+0xa4>)
   1a640:	f44f 7289 	mov.w	r2, #274	; 0x112
   1a644:	f002 f8fe 	bl	1c844 <printk>
   1a648:	f44f 7189 	mov.w	r1, #274	; 0x112
   1a64c:	4817      	ldr	r0, [pc, #92]	; (1a6ac <k_sched_lock+0xa8>)
   1a64e:	f002 fb9f 	bl	1cd90 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1a652:	4c17      	ldr	r4, [pc, #92]	; (1a6b0 <k_sched_lock+0xac>)
   1a654:	68a3      	ldr	r3, [r4, #8]
   1a656:	7bdb      	ldrb	r3, [r3, #15]
   1a658:	2b01      	cmp	r3, #1
   1a65a:	d10a      	bne.n	1a672 <k_sched_lock+0x6e>
   1a65c:	4913      	ldr	r1, [pc, #76]	; (1a6ac <k_sched_lock+0xa8>)
   1a65e:	4812      	ldr	r0, [pc, #72]	; (1a6a8 <k_sched_lock+0xa4>)
   1a660:	f240 1213 	movw	r2, #275	; 0x113
   1a664:	f002 f8ee 	bl	1c844 <printk>
   1a668:	f240 1113 	movw	r1, #275	; 0x113
   1a66c:	480f      	ldr	r0, [pc, #60]	; (1a6ac <k_sched_lock+0xa8>)
   1a66e:	f002 fb8f 	bl	1cd90 <assert_post_action>
	--_current->base.sched_locked;
   1a672:	68a2      	ldr	r2, [r4, #8]
   1a674:	7bd3      	ldrb	r3, [r2, #15]
   1a676:	3b01      	subs	r3, #1
   1a678:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a67a:	4809      	ldr	r0, [pc, #36]	; (1a6a0 <k_sched_lock+0x9c>)
   1a67c:	f001 f91c 	bl	1b8b8 <z_spin_unlock_valid>
   1a680:	b940      	cbnz	r0, 1a694 <k_sched_lock+0x90>
   1a682:	4908      	ldr	r1, [pc, #32]	; (1a6a4 <k_sched_lock+0xa0>)
   1a684:	4808      	ldr	r0, [pc, #32]	; (1a6a8 <k_sched_lock+0xa4>)
   1a686:	22a7      	movs	r2, #167	; 0xa7
   1a688:	f002 f8dc 	bl	1c844 <printk>
   1a68c:	21a7      	movs	r1, #167	; 0xa7
   1a68e:	4805      	ldr	r0, [pc, #20]	; (1a6a4 <k_sched_lock+0xa0>)
   1a690:	f002 fb7e 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a694:	f385 8811 	msr	BASEPRI, r5
   1a698:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1a69c:	bd38      	pop	{r3, r4, r5, pc}
   1a69e:	bf00      	nop
   1a6a0:	20009ff4 	.word	0x20009ff4
   1a6a4:	00022ca0 	.word	0x00022ca0
   1a6a8:	00022c66 	.word	0x00022c66
   1a6ac:	000261f2 	.word	0x000261f2
   1a6b0:	20009fbc 	.word	0x20009fbc

0001a6b4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a6b4:	4b11      	ldr	r3, [pc, #68]	; (1a6fc <z_priq_dumb_remove+0x48>)
{
   1a6b6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a6b8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1a6bc:	4282      	cmp	r2, r0
{
   1a6be:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1a6c0:	d105      	bne.n	1a6ce <z_priq_dumb_remove+0x1a>
   1a6c2:	689b      	ldr	r3, [r3, #8]
   1a6c4:	428b      	cmp	r3, r1
   1a6c6:	d102      	bne.n	1a6ce <z_priq_dumb_remove+0x1a>
   1a6c8:	7b4b      	ldrb	r3, [r1, #13]
   1a6ca:	06db      	lsls	r3, r3, #27
   1a6cc:	d114      	bne.n	1a6f8 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a6ce:	4b0c      	ldr	r3, [pc, #48]	; (1a700 <z_priq_dumb_remove+0x4c>)
   1a6d0:	429c      	cmp	r4, r3
   1a6d2:	d10a      	bne.n	1a6ea <z_priq_dumb_remove+0x36>
   1a6d4:	490b      	ldr	r1, [pc, #44]	; (1a704 <z_priq_dumb_remove+0x50>)
   1a6d6:	480c      	ldr	r0, [pc, #48]	; (1a708 <z_priq_dumb_remove+0x54>)
   1a6d8:	f240 32da 	movw	r2, #986	; 0x3da
   1a6dc:	f002 f8b2 	bl	1c844 <printk>
   1a6e0:	f240 31da 	movw	r1, #986	; 0x3da
   1a6e4:	4807      	ldr	r0, [pc, #28]	; (1a704 <z_priq_dumb_remove+0x50>)
   1a6e6:	f002 fb53 	bl	1cd90 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1a6ea:	e9d4 3200 	ldrd	r3, r2, [r4]
   1a6ee:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a6f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a6f2:	2300      	movs	r3, #0
	node->prev = NULL;
   1a6f4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1a6f8:	bd10      	pop	{r4, pc}
   1a6fa:	bf00      	nop
   1a6fc:	20009fbc 	.word	0x20009fbc
   1a700:	20009510 	.word	0x20009510
   1a704:	0002621d 	.word	0x0002621d
   1a708:	00022c66 	.word	0x00022c66

0001a70c <z_unpend_thread>:
{
   1a70c:	b538      	push	{r3, r4, r5, lr}
   1a70e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a710:	f04f 0320 	mov.w	r3, #32
   1a714:	f3ef 8511 	mrs	r5, BASEPRI
   1a718:	f383 8811 	msr	BASEPRI, r3
   1a71c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a720:	4814      	ldr	r0, [pc, #80]	; (1a774 <z_unpend_thread+0x68>)
   1a722:	f001 f8bb 	bl	1b89c <z_spin_lock_valid>
   1a726:	b940      	cbnz	r0, 1a73a <z_unpend_thread+0x2e>
   1a728:	4913      	ldr	r1, [pc, #76]	; (1a778 <z_unpend_thread+0x6c>)
   1a72a:	4814      	ldr	r0, [pc, #80]	; (1a77c <z_unpend_thread+0x70>)
   1a72c:	227c      	movs	r2, #124	; 0x7c
   1a72e:	f002 f889 	bl	1c844 <printk>
   1a732:	217c      	movs	r1, #124	; 0x7c
   1a734:	4810      	ldr	r0, [pc, #64]	; (1a778 <z_unpend_thread+0x6c>)
   1a736:	f002 fb2b 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a73a:	480e      	ldr	r0, [pc, #56]	; (1a774 <z_unpend_thread+0x68>)
   1a73c:	f001 f8ca 	bl	1b8d4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1a740:	4620      	mov	r0, r4
   1a742:	f006 fdc3 	bl	212cc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a746:	480b      	ldr	r0, [pc, #44]	; (1a774 <z_unpend_thread+0x68>)
   1a748:	f001 f8b6 	bl	1b8b8 <z_spin_unlock_valid>
   1a74c:	b940      	cbnz	r0, 1a760 <z_unpend_thread+0x54>
   1a74e:	490a      	ldr	r1, [pc, #40]	; (1a778 <z_unpend_thread+0x6c>)
   1a750:	480a      	ldr	r0, [pc, #40]	; (1a77c <z_unpend_thread+0x70>)
   1a752:	22a7      	movs	r2, #167	; 0xa7
   1a754:	f002 f876 	bl	1c844 <printk>
   1a758:	21a7      	movs	r1, #167	; 0xa7
   1a75a:	4807      	ldr	r0, [pc, #28]	; (1a778 <z_unpend_thread+0x6c>)
   1a75c:	f002 fb18 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a760:	f385 8811 	msr	BASEPRI, r5
   1a764:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a768:	f104 0018 	add.w	r0, r4, #24
}
   1a76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a770:	f001 bad8 	b.w	1bd24 <z_abort_timeout>
   1a774:	20009ff4 	.word	0x20009ff4
   1a778:	00022ca0 	.word	0x00022ca0
   1a77c:	00022c66 	.word	0x00022c66

0001a780 <update_cache>:
{
   1a780:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   1a782:	4c19      	ldr	r4, [pc, #100]	; (1a7e8 <update_cache+0x68>)
{
   1a784:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   1a786:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   1a788:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   1a78a:	b143      	cbz	r3, 1a79e <update_cache+0x1e>
		return _current_cpu->idle_thread;
   1a78c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1a78e:	b1a8      	cbz	r0, 1a7bc <update_cache+0x3c>
		if (thread != _current) {
   1a790:	68a3      	ldr	r3, [r4, #8]
   1a792:	42ab      	cmp	r3, r5
   1a794:	d001      	beq.n	1a79a <update_cache+0x1a>
			z_reset_time_slice();
   1a796:	f7ff fe9b 	bl	1a4d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1a79a:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1a79c:	e023      	b.n	1a7e6 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1a79e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a7a2:	f006 fda1 	bl	212e8 <z_priq_dumb_best>
   1a7a6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1a7a8:	7b4b      	ldrb	r3, [r1, #13]
   1a7aa:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1a7ac:	bf44      	itt	mi
   1a7ae:	f043 0308 	orrmi.w	r3, r3, #8
   1a7b2:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1a7b4:	b905      	cbnz	r5, 1a7b8 <update_cache+0x38>
   1a7b6:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1a7b8:	b152      	cbz	r2, 1a7d0 <update_cache+0x50>
   1a7ba:	e7e9      	b.n	1a790 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   1a7bc:	b941      	cbnz	r1, 1a7d0 <update_cache+0x50>
   1a7be:	490b      	ldr	r1, [pc, #44]	; (1a7ec <update_cache+0x6c>)
   1a7c0:	480b      	ldr	r0, [pc, #44]	; (1a7f0 <update_cache+0x70>)
   1a7c2:	2283      	movs	r2, #131	; 0x83
   1a7c4:	f002 f83e 	bl	1c844 <printk>
   1a7c8:	2183      	movs	r1, #131	; 0x83
   1a7ca:	4808      	ldr	r0, [pc, #32]	; (1a7ec <update_cache+0x6c>)
   1a7cc:	f002 fae0 	bl	1cd90 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1a7d0:	68a3      	ldr	r3, [r4, #8]
   1a7d2:	7b5a      	ldrb	r2, [r3, #13]
   1a7d4:	06d2      	lsls	r2, r2, #27
   1a7d6:	d1db      	bne.n	1a790 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1a7d8:	69aa      	ldr	r2, [r5, #24]
   1a7da:	2a00      	cmp	r2, #0
   1a7dc:	d1d8      	bne.n	1a790 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   1a7de:	89da      	ldrh	r2, [r3, #14]
   1a7e0:	2a7f      	cmp	r2, #127	; 0x7f
   1a7e2:	d9d5      	bls.n	1a790 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   1a7e4:	62a3      	str	r3, [r4, #40]	; 0x28
}
   1a7e6:	bd38      	pop	{r3, r4, r5, pc}
   1a7e8:	20009fbc 	.word	0x20009fbc
   1a7ec:	0002621d 	.word	0x0002621d
   1a7f0:	00022c66 	.word	0x00022c66

0001a7f4 <k_sched_unlock>:
{
   1a7f4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a7f6:	f04f 0320 	mov.w	r3, #32
   1a7fa:	f3ef 8511 	mrs	r5, BASEPRI
   1a7fe:	f383 8811 	msr	BASEPRI, r3
   1a802:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a806:	4824      	ldr	r0, [pc, #144]	; (1a898 <k_sched_unlock+0xa4>)
   1a808:	f001 f848 	bl	1b89c <z_spin_lock_valid>
   1a80c:	b940      	cbnz	r0, 1a820 <k_sched_unlock+0x2c>
   1a80e:	4923      	ldr	r1, [pc, #140]	; (1a89c <k_sched_unlock+0xa8>)
   1a810:	4823      	ldr	r0, [pc, #140]	; (1a8a0 <k_sched_unlock+0xac>)
   1a812:	227c      	movs	r2, #124	; 0x7c
   1a814:	f002 f816 	bl	1c844 <printk>
   1a818:	217c      	movs	r1, #124	; 0x7c
   1a81a:	4820      	ldr	r0, [pc, #128]	; (1a89c <k_sched_unlock+0xa8>)
   1a81c:	f002 fab8 	bl	1cd90 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   1a820:	4c20      	ldr	r4, [pc, #128]	; (1a8a4 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1a822:	481d      	ldr	r0, [pc, #116]	; (1a898 <k_sched_unlock+0xa4>)
   1a824:	f001 f856 	bl	1b8d4 <z_spin_lock_set_owner>
   1a828:	68a3      	ldr	r3, [r4, #8]
   1a82a:	7bdb      	ldrb	r3, [r3, #15]
   1a82c:	b953      	cbnz	r3, 1a844 <k_sched_unlock+0x50>
   1a82e:	491e      	ldr	r1, [pc, #120]	; (1a8a8 <k_sched_unlock+0xb4>)
   1a830:	481b      	ldr	r0, [pc, #108]	; (1a8a0 <k_sched_unlock+0xac>)
   1a832:	f44f 725d 	mov.w	r2, #884	; 0x374
   1a836:	f002 f805 	bl	1c844 <printk>
   1a83a:	f44f 715d 	mov.w	r1, #884	; 0x374
   1a83e:	481a      	ldr	r0, [pc, #104]	; (1a8a8 <k_sched_unlock+0xb4>)
   1a840:	f002 faa6 	bl	1cd90 <assert_post_action>
   1a844:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1a848:	b153      	cbz	r3, 1a860 <k_sched_unlock+0x6c>
   1a84a:	4917      	ldr	r1, [pc, #92]	; (1a8a8 <k_sched_unlock+0xb4>)
   1a84c:	4814      	ldr	r0, [pc, #80]	; (1a8a0 <k_sched_unlock+0xac>)
   1a84e:	f240 3275 	movw	r2, #885	; 0x375
   1a852:	f001 fff7 	bl	1c844 <printk>
   1a856:	f240 3175 	movw	r1, #885	; 0x375
   1a85a:	4813      	ldr	r0, [pc, #76]	; (1a8a8 <k_sched_unlock+0xb4>)
   1a85c:	f002 fa98 	bl	1cd90 <assert_post_action>
		++_current->base.sched_locked;
   1a860:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1a862:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1a864:	7bd3      	ldrb	r3, [r2, #15]
   1a866:	3301      	adds	r3, #1
   1a868:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a86a:	f7ff ff89 	bl	1a780 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a86e:	480a      	ldr	r0, [pc, #40]	; (1a898 <k_sched_unlock+0xa4>)
   1a870:	f001 f822 	bl	1b8b8 <z_spin_unlock_valid>
   1a874:	b940      	cbnz	r0, 1a888 <k_sched_unlock+0x94>
   1a876:	4909      	ldr	r1, [pc, #36]	; (1a89c <k_sched_unlock+0xa8>)
   1a878:	4809      	ldr	r0, [pc, #36]	; (1a8a0 <k_sched_unlock+0xac>)
   1a87a:	22a7      	movs	r2, #167	; 0xa7
   1a87c:	f001 ffe2 	bl	1c844 <printk>
   1a880:	21a7      	movs	r1, #167	; 0xa7
   1a882:	4806      	ldr	r0, [pc, #24]	; (1a89c <k_sched_unlock+0xa8>)
   1a884:	f002 fa84 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a888:	f385 8811 	msr	BASEPRI, r5
   1a88c:	f3bf 8f6f 	isb	sy
}
   1a890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1a894:	f006 bd10 	b.w	212b8 <z_reschedule_unlocked>
   1a898:	20009ff4 	.word	0x20009ff4
   1a89c:	00022ca0 	.word	0x00022ca0
   1a8a0:	00022c66 	.word	0x00022c66
   1a8a4:	20009fbc 	.word	0x20009fbc
   1a8a8:	0002621d 	.word	0x0002621d

0001a8ac <ready_thread>:
{
   1a8ac:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1a8ae:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1a8b2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1a8b4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1a8b6:	7b43      	ldrb	r3, [r0, #13]
   1a8b8:	db39      	blt.n	1a92e <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a8ba:	06db      	lsls	r3, r3, #27
   1a8bc:	d137      	bne.n	1a92e <ready_thread+0x82>
   1a8be:	6983      	ldr	r3, [r0, #24]
   1a8c0:	2b00      	cmp	r3, #0
   1a8c2:	d134      	bne.n	1a92e <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1a8c4:	4b1a      	ldr	r3, [pc, #104]	; (1a930 <ready_thread+0x84>)
   1a8c6:	4298      	cmp	r0, r3
   1a8c8:	d10a      	bne.n	1a8e0 <ready_thread+0x34>
   1a8ca:	491a      	ldr	r1, [pc, #104]	; (1a934 <ready_thread+0x88>)
   1a8cc:	481a      	ldr	r0, [pc, #104]	; (1a938 <ready_thread+0x8c>)
   1a8ce:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1a8d2:	f001 ffb7 	bl	1c844 <printk>
   1a8d6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1a8da:	4816      	ldr	r0, [pc, #88]	; (1a934 <ready_thread+0x88>)
   1a8dc:	f002 fa58 	bl	1cd90 <assert_post_action>
	return list->head == list;
   1a8e0:	4a16      	ldr	r2, [pc, #88]	; (1a93c <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8e2:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1a8e6:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8ea:	4283      	cmp	r3, r0
   1a8ec:	d019      	beq.n	1a922 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a8ee:	b1c3      	cbz	r3, 1a922 <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a8f0:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1a8f4:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1a8f8:	42ae      	cmp	r6, r5
   1a8fa:	dd0d      	ble.n	1a918 <ready_thread+0x6c>
	node->prev = successor->prev;
   1a8fc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a8fe:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1a902:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a904:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1a906:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   1a908:	2000      	movs	r0, #0
   1a90a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a90e:	7363      	strb	r3, [r4, #13]
}
   1a910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1a914:	f7ff bf34 	b.w	1a780 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1a918:	428b      	cmp	r3, r1
   1a91a:	d002      	beq.n	1a922 <ready_thread+0x76>
   1a91c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a91e:	2b00      	cmp	r3, #0
   1a920:	d1e8      	bne.n	1a8f4 <ready_thread+0x48>
	node->prev = list->tail;
   1a922:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1a926:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1a928:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a92a:	6314      	str	r4, [r2, #48]	; 0x30
}
   1a92c:	e7eb      	b.n	1a906 <ready_thread+0x5a>
}
   1a92e:	bd70      	pop	{r4, r5, r6, pc}
   1a930:	20009510 	.word	0x20009510
   1a934:	0002621d 	.word	0x0002621d
   1a938:	00022c66 	.word	0x00022c66
   1a93c:	20009fbc 	.word	0x20009fbc

0001a940 <z_ready_thread>:
{
   1a940:	b538      	push	{r3, r4, r5, lr}
   1a942:	4604      	mov	r4, r0
	__asm__ volatile(
   1a944:	f04f 0320 	mov.w	r3, #32
   1a948:	f3ef 8511 	mrs	r5, BASEPRI
   1a94c:	f383 8811 	msr	BASEPRI, r3
   1a950:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a954:	4812      	ldr	r0, [pc, #72]	; (1a9a0 <z_ready_thread+0x60>)
   1a956:	f000 ffa1 	bl	1b89c <z_spin_lock_valid>
   1a95a:	b940      	cbnz	r0, 1a96e <z_ready_thread+0x2e>
   1a95c:	4911      	ldr	r1, [pc, #68]	; (1a9a4 <z_ready_thread+0x64>)
   1a95e:	4812      	ldr	r0, [pc, #72]	; (1a9a8 <z_ready_thread+0x68>)
   1a960:	227c      	movs	r2, #124	; 0x7c
   1a962:	f001 ff6f 	bl	1c844 <printk>
   1a966:	217c      	movs	r1, #124	; 0x7c
   1a968:	480e      	ldr	r0, [pc, #56]	; (1a9a4 <z_ready_thread+0x64>)
   1a96a:	f002 fa11 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a96e:	480c      	ldr	r0, [pc, #48]	; (1a9a0 <z_ready_thread+0x60>)
   1a970:	f000 ffb0 	bl	1b8d4 <z_spin_lock_set_owner>
		ready_thread(thread);
   1a974:	4620      	mov	r0, r4
   1a976:	f7ff ff99 	bl	1a8ac <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a97a:	4809      	ldr	r0, [pc, #36]	; (1a9a0 <z_ready_thread+0x60>)
   1a97c:	f000 ff9c 	bl	1b8b8 <z_spin_unlock_valid>
   1a980:	b940      	cbnz	r0, 1a994 <z_ready_thread+0x54>
   1a982:	4908      	ldr	r1, [pc, #32]	; (1a9a4 <z_ready_thread+0x64>)
   1a984:	4808      	ldr	r0, [pc, #32]	; (1a9a8 <z_ready_thread+0x68>)
   1a986:	22a7      	movs	r2, #167	; 0xa7
   1a988:	f001 ff5c 	bl	1c844 <printk>
   1a98c:	21a7      	movs	r1, #167	; 0xa7
   1a98e:	4805      	ldr	r0, [pc, #20]	; (1a9a4 <z_ready_thread+0x64>)
   1a990:	f002 f9fe 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1a994:	f385 8811 	msr	BASEPRI, r5
   1a998:	f3bf 8f6f 	isb	sy
}
   1a99c:	bd38      	pop	{r3, r4, r5, pc}
   1a99e:	bf00      	nop
   1a9a0:	20009ff4 	.word	0x20009ff4
   1a9a4:	00022ca0 	.word	0x00022ca0
   1a9a8:	00022c66 	.word	0x00022c66

0001a9ac <z_sched_start>:
{
   1a9ac:	b538      	push	{r3, r4, r5, lr}
   1a9ae:	4604      	mov	r4, r0
	__asm__ volatile(
   1a9b0:	f04f 0320 	mov.w	r3, #32
   1a9b4:	f3ef 8511 	mrs	r5, BASEPRI
   1a9b8:	f383 8811 	msr	BASEPRI, r3
   1a9bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a9c0:	4818      	ldr	r0, [pc, #96]	; (1aa24 <z_sched_start+0x78>)
   1a9c2:	f000 ff6b 	bl	1b89c <z_spin_lock_valid>
   1a9c6:	b940      	cbnz	r0, 1a9da <z_sched_start+0x2e>
   1a9c8:	4917      	ldr	r1, [pc, #92]	; (1aa28 <z_sched_start+0x7c>)
   1a9ca:	4818      	ldr	r0, [pc, #96]	; (1aa2c <z_sched_start+0x80>)
   1a9cc:	227c      	movs	r2, #124	; 0x7c
   1a9ce:	f001 ff39 	bl	1c844 <printk>
   1a9d2:	217c      	movs	r1, #124	; 0x7c
   1a9d4:	4814      	ldr	r0, [pc, #80]	; (1aa28 <z_sched_start+0x7c>)
   1a9d6:	f002 f9db 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a9da:	4812      	ldr	r0, [pc, #72]	; (1aa24 <z_sched_start+0x78>)
   1a9dc:	f000 ff7a 	bl	1b8d4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1a9e0:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   1a9e2:	075a      	lsls	r2, r3, #29
   1a9e4:	d411      	bmi.n	1aa0a <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a9e6:	480f      	ldr	r0, [pc, #60]	; (1aa24 <z_sched_start+0x78>)
   1a9e8:	f000 ff66 	bl	1b8b8 <z_spin_unlock_valid>
   1a9ec:	b940      	cbnz	r0, 1aa00 <z_sched_start+0x54>
   1a9ee:	490e      	ldr	r1, [pc, #56]	; (1aa28 <z_sched_start+0x7c>)
   1a9f0:	480e      	ldr	r0, [pc, #56]	; (1aa2c <z_sched_start+0x80>)
   1a9f2:	22a7      	movs	r2, #167	; 0xa7
   1a9f4:	f001 ff26 	bl	1c844 <printk>
   1a9f8:	21a7      	movs	r1, #167	; 0xa7
   1a9fa:	480b      	ldr	r0, [pc, #44]	; (1aa28 <z_sched_start+0x7c>)
   1a9fc:	f002 f9c8 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1aa00:	f385 8811 	msr	BASEPRI, r5
   1aa04:	f3bf 8f6f 	isb	sy
}
   1aa08:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1aa0a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1aa0e:	4620      	mov	r0, r4
   1aa10:	7363      	strb	r3, [r4, #13]
   1aa12:	f7ff ff4b 	bl	1a8ac <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1aa16:	4629      	mov	r1, r5
}
   1aa18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1aa1c:	4801      	ldr	r0, [pc, #4]	; (1aa24 <z_sched_start+0x78>)
   1aa1e:	f7ff bdbb 	b.w	1a598 <z_reschedule>
   1aa22:	bf00      	nop
   1aa24:	20009ff4 	.word	0x20009ff4
   1aa28:	00022ca0 	.word	0x00022ca0
   1aa2c:	00022c66 	.word	0x00022c66

0001aa30 <z_thread_timeout>:
{
   1aa30:	b570      	push	{r4, r5, r6, lr}
   1aa32:	4604      	mov	r4, r0
	__asm__ volatile(
   1aa34:	f04f 0320 	mov.w	r3, #32
   1aa38:	f3ef 8611 	mrs	r6, BASEPRI
   1aa3c:	f383 8811 	msr	BASEPRI, r3
   1aa40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aa44:	4819      	ldr	r0, [pc, #100]	; (1aaac <z_thread_timeout+0x7c>)
   1aa46:	f000 ff29 	bl	1b89c <z_spin_lock_valid>
   1aa4a:	b940      	cbnz	r0, 1aa5e <z_thread_timeout+0x2e>
   1aa4c:	4918      	ldr	r1, [pc, #96]	; (1aab0 <z_thread_timeout+0x80>)
   1aa4e:	4819      	ldr	r0, [pc, #100]	; (1aab4 <z_thread_timeout+0x84>)
   1aa50:	227c      	movs	r2, #124	; 0x7c
   1aa52:	f001 fef7 	bl	1c844 <printk>
   1aa56:	217c      	movs	r1, #124	; 0x7c
   1aa58:	4815      	ldr	r0, [pc, #84]	; (1aab0 <z_thread_timeout+0x80>)
   1aa5a:	f002 f999 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1aa5e:	4813      	ldr	r0, [pc, #76]	; (1aaac <z_thread_timeout+0x7c>)
   1aa60:	f000 ff38 	bl	1b8d4 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   1aa64:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1aa68:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   1aa6c:	b113      	cbz	r3, 1aa74 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   1aa6e:	4628      	mov	r0, r5
   1aa70:	f006 fc2c 	bl	212cc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1aa74:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   1aa78:	4628      	mov	r0, r5
   1aa7a:	f023 0314 	bic.w	r3, r3, #20
   1aa7e:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1aa82:	f7ff ff13 	bl	1a8ac <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aa86:	4809      	ldr	r0, [pc, #36]	; (1aaac <z_thread_timeout+0x7c>)
   1aa88:	f000 ff16 	bl	1b8b8 <z_spin_unlock_valid>
   1aa8c:	b940      	cbnz	r0, 1aaa0 <z_thread_timeout+0x70>
   1aa8e:	4908      	ldr	r1, [pc, #32]	; (1aab0 <z_thread_timeout+0x80>)
   1aa90:	4808      	ldr	r0, [pc, #32]	; (1aab4 <z_thread_timeout+0x84>)
   1aa92:	22a7      	movs	r2, #167	; 0xa7
   1aa94:	f001 fed6 	bl	1c844 <printk>
   1aa98:	21a7      	movs	r1, #167	; 0xa7
   1aa9a:	4805      	ldr	r0, [pc, #20]	; (1aab0 <z_thread_timeout+0x80>)
   1aa9c:	f002 f978 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1aaa0:	f386 8811 	msr	BASEPRI, r6
   1aaa4:	f3bf 8f6f 	isb	sy
}
   1aaa8:	bd70      	pop	{r4, r5, r6, pc}
   1aaaa:	bf00      	nop
   1aaac:	20009ff4 	.word	0x20009ff4
   1aab0:	00022ca0 	.word	0x00022ca0
   1aab4:	00022c66 	.word	0x00022c66

0001aab8 <move_thread_to_end_of_prio_q>:
{
   1aab8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1aaba:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1aabe:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1aac0:	2b00      	cmp	r3, #0
   1aac2:	da03      	bge.n	1aacc <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1aac4:	4601      	mov	r1, r0
   1aac6:	481d      	ldr	r0, [pc, #116]	; (1ab3c <move_thread_to_end_of_prio_q+0x84>)
   1aac8:	f7ff fdf4 	bl	1a6b4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1aacc:	4b1c      	ldr	r3, [pc, #112]	; (1ab40 <move_thread_to_end_of_prio_q+0x88>)
   1aace:	429c      	cmp	r4, r3
   1aad0:	d10a      	bne.n	1aae8 <move_thread_to_end_of_prio_q+0x30>
   1aad2:	491c      	ldr	r1, [pc, #112]	; (1ab44 <move_thread_to_end_of_prio_q+0x8c>)
   1aad4:	481c      	ldr	r0, [pc, #112]	; (1ab48 <move_thread_to_end_of_prio_q+0x90>)
   1aad6:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1aada:	f001 feb3 	bl	1c844 <printk>
   1aade:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1aae2:	4818      	ldr	r0, [pc, #96]	; (1ab44 <move_thread_to_end_of_prio_q+0x8c>)
   1aae4:	f002 f954 	bl	1cd90 <assert_post_action>
	return list->head == list;
   1aae8:	4a18      	ldr	r2, [pc, #96]	; (1ab4c <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aaea:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1aaee:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aaf2:	4283      	cmp	r3, r0
   1aaf4:	d01c      	beq.n	1ab30 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1aaf6:	b1db      	cbz	r3, 1ab30 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   1aaf8:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1aafc:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1ab00:	42ae      	cmp	r6, r5
   1ab02:	dd10      	ble.n	1ab26 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   1ab04:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1ab06:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1ab0a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1ab0c:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1ab0e:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   1ab10:	6890      	ldr	r0, [r2, #8]
   1ab12:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ab16:	7363      	strb	r3, [r4, #13]
   1ab18:	1b03      	subs	r3, r0, r4
   1ab1a:	4258      	negs	r0, r3
   1ab1c:	4158      	adcs	r0, r3
}
   1ab1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ab22:	f7ff be2d 	b.w	1a780 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ab26:	428b      	cmp	r3, r1
   1ab28:	d002      	beq.n	1ab30 <move_thread_to_end_of_prio_q+0x78>
   1ab2a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ab2c:	2b00      	cmp	r3, #0
   1ab2e:	d1e5      	bne.n	1aafc <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   1ab30:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1ab34:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1ab36:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ab38:	6314      	str	r4, [r2, #48]	; 0x30
}
   1ab3a:	e7e8      	b.n	1ab0e <move_thread_to_end_of_prio_q+0x56>
   1ab3c:	20009fe8 	.word	0x20009fe8
   1ab40:	20009510 	.word	0x20009510
   1ab44:	0002621d 	.word	0x0002621d
   1ab48:	00022c66 	.word	0x00022c66
   1ab4c:	20009fbc 	.word	0x20009fbc

0001ab50 <z_time_slice>:
{
   1ab50:	b538      	push	{r3, r4, r5, lr}
   1ab52:	4604      	mov	r4, r0
	__asm__ volatile(
   1ab54:	f04f 0320 	mov.w	r3, #32
   1ab58:	f3ef 8511 	mrs	r5, BASEPRI
   1ab5c:	f383 8811 	msr	BASEPRI, r3
   1ab60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab64:	4824      	ldr	r0, [pc, #144]	; (1abf8 <z_time_slice+0xa8>)
   1ab66:	f000 fe99 	bl	1b89c <z_spin_lock_valid>
   1ab6a:	b940      	cbnz	r0, 1ab7e <z_time_slice+0x2e>
   1ab6c:	4923      	ldr	r1, [pc, #140]	; (1abfc <z_time_slice+0xac>)
   1ab6e:	4824      	ldr	r0, [pc, #144]	; (1ac00 <z_time_slice+0xb0>)
   1ab70:	227c      	movs	r2, #124	; 0x7c
   1ab72:	f001 fe67 	bl	1c844 <printk>
   1ab76:	217c      	movs	r1, #124	; 0x7c
   1ab78:	4820      	ldr	r0, [pc, #128]	; (1abfc <z_time_slice+0xac>)
   1ab7a:	f002 f909 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ab7e:	481e      	ldr	r0, [pc, #120]	; (1abf8 <z_time_slice+0xa8>)
   1ab80:	f000 fea8 	bl	1b8d4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1ab84:	4b1f      	ldr	r3, [pc, #124]	; (1ac04 <z_time_slice+0xb4>)
   1ab86:	4a20      	ldr	r2, [pc, #128]	; (1ac08 <z_time_slice+0xb8>)
   1ab88:	6898      	ldr	r0, [r3, #8]
   1ab8a:	6811      	ldr	r1, [r2, #0]
   1ab8c:	4288      	cmp	r0, r1
   1ab8e:	d113      	bne.n	1abb8 <z_time_slice+0x68>
			z_reset_time_slice();
   1ab90:	f7ff fc9e 	bl	1a4d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab94:	4818      	ldr	r0, [pc, #96]	; (1abf8 <z_time_slice+0xa8>)
   1ab96:	f000 fe8f 	bl	1b8b8 <z_spin_unlock_valid>
   1ab9a:	b940      	cbnz	r0, 1abae <z_time_slice+0x5e>
   1ab9c:	4917      	ldr	r1, [pc, #92]	; (1abfc <z_time_slice+0xac>)
   1ab9e:	4818      	ldr	r0, [pc, #96]	; (1ac00 <z_time_slice+0xb0>)
   1aba0:	22a7      	movs	r2, #167	; 0xa7
   1aba2:	f001 fe4f 	bl	1c844 <printk>
   1aba6:	21a7      	movs	r1, #167	; 0xa7
   1aba8:	4814      	ldr	r0, [pc, #80]	; (1abfc <z_time_slice+0xac>)
   1abaa:	f002 f8f1 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1abae:	f385 8811 	msr	BASEPRI, r5
   1abb2:	f3bf 8f6f 	isb	sy
}
   1abb6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1abb8:	2100      	movs	r1, #0
   1abba:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1abbc:	4a13      	ldr	r2, [pc, #76]	; (1ac0c <z_time_slice+0xbc>)
   1abbe:	6812      	ldr	r2, [r2, #0]
   1abc0:	b1ba      	cbz	r2, 1abf2 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   1abc2:	89c2      	ldrh	r2, [r0, #14]
   1abc4:	2a7f      	cmp	r2, #127	; 0x7f
   1abc6:	d814      	bhi.n	1abf2 <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   1abc8:	7b42      	ldrb	r2, [r0, #13]
   1abca:	06d2      	lsls	r2, r2, #27
   1abcc:	d111      	bne.n	1abf2 <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1abce:	4a10      	ldr	r2, [pc, #64]	; (1ac10 <z_time_slice+0xc0>)
   1abd0:	f990 100e 	ldrsb.w	r1, [r0, #14]
   1abd4:	6812      	ldr	r2, [r2, #0]
   1abd6:	4291      	cmp	r1, r2
   1abd8:	db0b      	blt.n	1abf2 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   1abda:	4a0e      	ldr	r2, [pc, #56]	; (1ac14 <z_time_slice+0xc4>)
   1abdc:	4290      	cmp	r0, r2
   1abde:	d008      	beq.n	1abf2 <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   1abe0:	695a      	ldr	r2, [r3, #20]
   1abe2:	42a2      	cmp	r2, r4
   1abe4:	dc02      	bgt.n	1abec <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   1abe6:	f7ff ff67 	bl	1aab8 <move_thread_to_end_of_prio_q>
   1abea:	e7d1      	b.n	1ab90 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   1abec:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   1abee:	615a      	str	r2, [r3, #20]
   1abf0:	e7d0      	b.n	1ab94 <z_time_slice+0x44>
   1abf2:	2200      	movs	r2, #0
   1abf4:	e7fb      	b.n	1abee <z_time_slice+0x9e>
   1abf6:	bf00      	nop
   1abf8:	20009ff4 	.word	0x20009ff4
   1abfc:	00022ca0 	.word	0x00022ca0
   1ac00:	00022c66 	.word	0x00022c66
   1ac04:	20009fbc 	.word	0x20009fbc
   1ac08:	20009ff0 	.word	0x20009ff0
   1ac0c:	20009ffc 	.word	0x20009ffc
   1ac10:	20009ff8 	.word	0x20009ff8
   1ac14:	20009510 	.word	0x20009510

0001ac18 <z_impl_k_thread_suspend>:
{
   1ac18:	b570      	push	{r4, r5, r6, lr}
   1ac1a:	4604      	mov	r4, r0
   1ac1c:	3018      	adds	r0, #24
   1ac1e:	f001 f881 	bl	1bd24 <z_abort_timeout>
	__asm__ volatile(
   1ac22:	f04f 0320 	mov.w	r3, #32
   1ac26:	f3ef 8611 	mrs	r6, BASEPRI
   1ac2a:	f383 8811 	msr	BASEPRI, r3
   1ac2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac32:	4820      	ldr	r0, [pc, #128]	; (1acb4 <z_impl_k_thread_suspend+0x9c>)
   1ac34:	f000 fe32 	bl	1b89c <z_spin_lock_valid>
   1ac38:	b940      	cbnz	r0, 1ac4c <z_impl_k_thread_suspend+0x34>
   1ac3a:	491f      	ldr	r1, [pc, #124]	; (1acb8 <z_impl_k_thread_suspend+0xa0>)
   1ac3c:	481f      	ldr	r0, [pc, #124]	; (1acbc <z_impl_k_thread_suspend+0xa4>)
   1ac3e:	227c      	movs	r2, #124	; 0x7c
   1ac40:	f001 fe00 	bl	1c844 <printk>
   1ac44:	217c      	movs	r1, #124	; 0x7c
   1ac46:	481c      	ldr	r0, [pc, #112]	; (1acb8 <z_impl_k_thread_suspend+0xa0>)
   1ac48:	f002 f8a2 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac4c:	4819      	ldr	r0, [pc, #100]	; (1acb4 <z_impl_k_thread_suspend+0x9c>)
   1ac4e:	f000 fe41 	bl	1b8d4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1ac52:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1ac56:	2b00      	cmp	r3, #0
   1ac58:	da07      	bge.n	1ac6a <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ac5a:	4621      	mov	r1, r4
   1ac5c:	4818      	ldr	r0, [pc, #96]	; (1acc0 <z_impl_k_thread_suspend+0xa8>)
   1ac5e:	f7ff fd29 	bl	1a6b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ac62:	7b63      	ldrb	r3, [r4, #13]
   1ac64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ac68:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1ac6a:	4d16      	ldr	r5, [pc, #88]	; (1acc4 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ac6c:	7b63      	ldrb	r3, [r4, #13]
   1ac6e:	68a8      	ldr	r0, [r5, #8]
   1ac70:	f043 0310 	orr.w	r3, r3, #16
   1ac74:	7363      	strb	r3, [r4, #13]
   1ac76:	1b03      	subs	r3, r0, r4
   1ac78:	4258      	negs	r0, r3
   1ac7a:	4158      	adcs	r0, r3
   1ac7c:	f7ff fd80 	bl	1a780 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac80:	480c      	ldr	r0, [pc, #48]	; (1acb4 <z_impl_k_thread_suspend+0x9c>)
   1ac82:	f000 fe19 	bl	1b8b8 <z_spin_unlock_valid>
   1ac86:	b940      	cbnz	r0, 1ac9a <z_impl_k_thread_suspend+0x82>
   1ac88:	490b      	ldr	r1, [pc, #44]	; (1acb8 <z_impl_k_thread_suspend+0xa0>)
   1ac8a:	480c      	ldr	r0, [pc, #48]	; (1acbc <z_impl_k_thread_suspend+0xa4>)
   1ac8c:	22a7      	movs	r2, #167	; 0xa7
   1ac8e:	f001 fdd9 	bl	1c844 <printk>
   1ac92:	21a7      	movs	r1, #167	; 0xa7
   1ac94:	4808      	ldr	r0, [pc, #32]	; (1acb8 <z_impl_k_thread_suspend+0xa0>)
   1ac96:	f002 f87b 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1ac9a:	f386 8811 	msr	BASEPRI, r6
   1ac9e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1aca2:	68ab      	ldr	r3, [r5, #8]
   1aca4:	42a3      	cmp	r3, r4
   1aca6:	d103      	bne.n	1acb0 <z_impl_k_thread_suspend+0x98>
}
   1aca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1acac:	f006 bb04 	b.w	212b8 <z_reschedule_unlocked>
}
   1acb0:	bd70      	pop	{r4, r5, r6, pc}
   1acb2:	bf00      	nop
   1acb4:	20009ff4 	.word	0x20009ff4
   1acb8:	00022ca0 	.word	0x00022ca0
   1acbc:	00022c66 	.word	0x00022c66
   1acc0:	20009fe8 	.word	0x20009fe8
   1acc4:	20009fbc 	.word	0x20009fbc

0001acc8 <z_thread_single_abort>:
{
   1acc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1accc:	7b03      	ldrb	r3, [r0, #12]
{
   1acce:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1acd0:	07dd      	lsls	r5, r3, #31
   1acd2:	d50a      	bpl.n	1acea <z_thread_single_abort+0x22>
   1acd4:	4976      	ldr	r1, [pc, #472]	; (1aeb0 <z_thread_single_abort+0x1e8>)
   1acd6:	4877      	ldr	r0, [pc, #476]	; (1aeb4 <z_thread_single_abort+0x1ec>)
   1acd8:	f240 220d 	movw	r2, #525	; 0x20d
   1acdc:	f001 fdb2 	bl	1c844 <printk>
   1ace0:	f240 210d 	movw	r1, #525	; 0x20d
   1ace4:	4872      	ldr	r0, [pc, #456]	; (1aeb0 <z_thread_single_abort+0x1e8>)
   1ace6:	f002 f853 	bl	1cd90 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   1acea:	4e73      	ldr	r6, [pc, #460]	; (1aeb8 <z_thread_single_abort+0x1f0>)
   1acec:	68b3      	ldr	r3, [r6, #8]
   1acee:	42a3      	cmp	r3, r4
   1acf0:	d10d      	bne.n	1ad0e <z_thread_single_abort+0x46>
   1acf2:	f3ef 8305 	mrs	r3, IPSR
   1acf6:	b953      	cbnz	r3, 1ad0e <z_thread_single_abort+0x46>
   1acf8:	496d      	ldr	r1, [pc, #436]	; (1aeb0 <z_thread_single_abort+0x1e8>)
   1acfa:	486e      	ldr	r0, [pc, #440]	; (1aeb4 <z_thread_single_abort+0x1ec>)
   1acfc:	f240 220f 	movw	r2, #527	; 0x20f
   1ad00:	f001 fda0 	bl	1c844 <printk>
   1ad04:	f240 210f 	movw	r1, #527	; 0x20f
   1ad08:	4869      	ldr	r0, [pc, #420]	; (1aeb0 <z_thread_single_abort+0x1e8>)
   1ad0a:	f002 f841 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1ad0e:	f04f 0320 	mov.w	r3, #32
   1ad12:	f3ef 8511 	mrs	r5, BASEPRI
   1ad16:	f383 8811 	msr	BASEPRI, r3
   1ad1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad1e:	4867      	ldr	r0, [pc, #412]	; (1aebc <z_thread_single_abort+0x1f4>)
   1ad20:	f000 fdbc 	bl	1b89c <z_spin_lock_valid>
   1ad24:	b940      	cbnz	r0, 1ad38 <z_thread_single_abort+0x70>
   1ad26:	4966      	ldr	r1, [pc, #408]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1ad28:	4862      	ldr	r0, [pc, #392]	; (1aeb4 <z_thread_single_abort+0x1ec>)
   1ad2a:	227c      	movs	r2, #124	; 0x7c
   1ad2c:	f001 fd8a 	bl	1c844 <printk>
   1ad30:	217c      	movs	r1, #124	; 0x7c
   1ad32:	4863      	ldr	r0, [pc, #396]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1ad34:	f002 f82c 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad38:	4860      	ldr	r0, [pc, #384]	; (1aebc <z_thread_single_abort+0x1f4>)
   1ad3a:	f000 fdcb 	bl	1b8d4 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   1ad3e:	7b63      	ldrb	r3, [r4, #13]
   1ad40:	f013 0f28 	tst.w	r3, #40	; 0x28
   1ad44:	d012      	beq.n	1ad6c <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ad46:	485d      	ldr	r0, [pc, #372]	; (1aebc <z_thread_single_abort+0x1f4>)
   1ad48:	f000 fdb6 	bl	1b8b8 <z_spin_unlock_valid>
   1ad4c:	b940      	cbnz	r0, 1ad60 <z_thread_single_abort+0x98>
   1ad4e:	495c      	ldr	r1, [pc, #368]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1ad50:	4858      	ldr	r0, [pc, #352]	; (1aeb4 <z_thread_single_abort+0x1ec>)
   1ad52:	22a7      	movs	r2, #167	; 0xa7
   1ad54:	f001 fd76 	bl	1c844 <printk>
   1ad58:	21a7      	movs	r1, #167	; 0xa7
   1ad5a:	4859      	ldr	r0, [pc, #356]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1ad5c:	f002 f818 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1ad60:	f385 8811 	msr	BASEPRI, r5
   1ad64:	f3bf 8f6f 	isb	sy
}
   1ad68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1ad6c:	f043 0320 	orr.w	r3, r3, #32
   1ad70:	4852      	ldr	r0, [pc, #328]	; (1aebc <z_thread_single_abort+0x1f4>)
   1ad72:	7363      	strb	r3, [r4, #13]
   1ad74:	f000 fda0 	bl	1b8b8 <z_spin_unlock_valid>
   1ad78:	b940      	cbnz	r0, 1ad8c <z_thread_single_abort+0xc4>
   1ad7a:	4951      	ldr	r1, [pc, #324]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1ad7c:	484d      	ldr	r0, [pc, #308]	; (1aeb4 <z_thread_single_abort+0x1ec>)
   1ad7e:	22a7      	movs	r2, #167	; 0xa7
   1ad80:	f001 fd60 	bl	1c844 <printk>
   1ad84:	21a7      	movs	r1, #167	; 0xa7
   1ad86:	484e      	ldr	r0, [pc, #312]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1ad88:	f002 f802 	bl	1cd90 <assert_post_action>
   1ad8c:	f385 8811 	msr	BASEPRI, r5
   1ad90:	f3bf 8f6f 	isb	sy
   1ad94:	f104 0018 	add.w	r0, r4, #24
   1ad98:	f000 ffc4 	bl	1bd24 <z_abort_timeout>
	__asm__ volatile(
   1ad9c:	f04f 0320 	mov.w	r3, #32
   1ada0:	f3ef 8711 	mrs	r7, BASEPRI
   1ada4:	f383 8811 	msr	BASEPRI, r3
   1ada8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1adac:	4843      	ldr	r0, [pc, #268]	; (1aebc <z_thread_single_abort+0x1f4>)
   1adae:	f000 fd75 	bl	1b89c <z_spin_lock_valid>
   1adb2:	b940      	cbnz	r0, 1adc6 <z_thread_single_abort+0xfe>
   1adb4:	4942      	ldr	r1, [pc, #264]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1adb6:	483f      	ldr	r0, [pc, #252]	; (1aeb4 <z_thread_single_abort+0x1ec>)
   1adb8:	227c      	movs	r2, #124	; 0x7c
   1adba:	f001 fd43 	bl	1c844 <printk>
   1adbe:	217c      	movs	r1, #124	; 0x7c
   1adc0:	483f      	ldr	r0, [pc, #252]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1adc2:	f001 ffe5 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1adc6:	483d      	ldr	r0, [pc, #244]	; (1aebc <z_thread_single_abort+0x1f4>)
   1adc8:	f000 fd84 	bl	1b8d4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   1adcc:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1adce:	06d8      	lsls	r0, r3, #27
   1add0:	d116      	bne.n	1ae00 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   1add2:	69a2      	ldr	r2, [r4, #24]
   1add4:	b9a2      	cbnz	r2, 1ae00 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   1add6:	0619      	lsls	r1, r3, #24
   1add8:	d507      	bpl.n	1adea <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   1adda:	4621      	mov	r1, r4
   1addc:	4839      	ldr	r0, [pc, #228]	; (1aec4 <z_thread_single_abort+0x1fc>)
   1adde:	f7ff fc69 	bl	1a6b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ade2:	7b63      	ldrb	r3, [r4, #13]
   1ade4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ade8:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1adea:	68b0      	ldr	r0, [r6, #8]
   1adec:	1b02      	subs	r2, r0, r4
   1adee:	4250      	negs	r0, r2
   1adf0:	4150      	adcs	r0, r2
   1adf2:	f7ff fcc5 	bl	1a780 <update_cache>
			waiter->base.pended_on = NULL;
   1adf6:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1adfa:	f104 0930 	add.w	r9, r4, #48	; 0x30
   1adfe:	e023      	b.n	1ae48 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   1ae00:	079b      	lsls	r3, r3, #30
   1ae02:	d5f8      	bpl.n	1adf6 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1ae04:	4620      	mov	r0, r4
   1ae06:	f7ff fb4d 	bl	1a4a4 <pended_on>
   1ae0a:	4621      	mov	r1, r4
   1ae0c:	f7ff fc52 	bl	1a6b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ae10:	7b63      	ldrb	r3, [r4, #13]
   1ae12:	f023 0302 	bic.w	r3, r3, #2
   1ae16:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1ae18:	2300      	movs	r3, #0
   1ae1a:	60a3      	str	r3, [r4, #8]
   1ae1c:	e7eb      	b.n	1adf6 <z_thread_single_abort+0x12e>
   1ae1e:	f105 0018 	add.w	r0, r5, #24
   1ae22:	f000 ff7f 	bl	1bd24 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1ae26:	4628      	mov	r0, r5
   1ae28:	f7ff fb3c 	bl	1a4a4 <pended_on>
   1ae2c:	4629      	mov	r1, r5
   1ae2e:	f7ff fc41 	bl	1a6b4 <z_priq_dumb_remove>
   1ae32:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1ae34:	4628      	mov	r0, r5
   1ae36:	f023 0302 	bic.w	r3, r3, #2
   1ae3a:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1ae3c:	f8c5 8008 	str.w	r8, [r5, #8]
   1ae40:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   1ae44:	f7ff fd32 	bl	1a8ac <ready_thread>
	return list->head == list;
   1ae48:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ae4a:	454d      	cmp	r5, r9
   1ae4c:	d001      	beq.n	1ae52 <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1ae4e:	2d00      	cmp	r5, #0
   1ae50:	d1e5      	bne.n	1ae1e <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   1ae52:	68b2      	ldr	r2, [r6, #8]
   1ae54:	4b1c      	ldr	r3, [pc, #112]	; (1aec8 <z_thread_single_abort+0x200>)
   1ae56:	429a      	cmp	r2, r3
   1ae58:	d102      	bne.n	1ae60 <z_thread_single_abort+0x198>
			update_cache(1);
   1ae5a:	2001      	movs	r0, #1
   1ae5c:	f7ff fc90 	bl	1a780 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ae60:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   1ae62:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1ae64:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   1ae66:	f043 0308 	orr.w	r3, r3, #8
   1ae6a:	7363      	strb	r3, [r4, #13]
   1ae6c:	f104 0338 	add.w	r3, r4, #56	; 0x38
   1ae70:	e8d3 1fef 	ldaex	r1, [r3]
   1ae74:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1ae78:	2800      	cmp	r0, #0
   1ae7a:	d1f9      	bne.n	1ae70 <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae7c:	480f      	ldr	r0, [pc, #60]	; (1aebc <z_thread_single_abort+0x1f4>)
   1ae7e:	f000 fd1b 	bl	1b8b8 <z_spin_unlock_valid>
   1ae82:	b940      	cbnz	r0, 1ae96 <z_thread_single_abort+0x1ce>
   1ae84:	490e      	ldr	r1, [pc, #56]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1ae86:	480b      	ldr	r0, [pc, #44]	; (1aeb4 <z_thread_single_abort+0x1ec>)
   1ae88:	22a7      	movs	r2, #167	; 0xa7
   1ae8a:	f001 fcdb 	bl	1c844 <printk>
   1ae8e:	21a7      	movs	r1, #167	; 0xa7
   1ae90:	480b      	ldr	r0, [pc, #44]	; (1aec0 <z_thread_single_abort+0x1f8>)
   1ae92:	f001 ff7d 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1ae96:	f387 8811 	msr	BASEPRI, r7
   1ae9a:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1ae9e:	2d00      	cmp	r5, #0
   1aea0:	f43f af62 	beq.w	1ad68 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   1aea4:	4620      	mov	r0, r4
   1aea6:	462b      	mov	r3, r5
}
   1aea8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   1aeac:	4718      	bx	r3
   1aeae:	bf00      	nop
   1aeb0:	0002621d 	.word	0x0002621d
   1aeb4:	00022c66 	.word	0x00022c66
   1aeb8:	20009fbc 	.word	0x20009fbc
   1aebc:	20009ff4 	.word	0x20009ff4
   1aec0:	00022ca0 	.word	0x00022ca0
   1aec4:	20009fe8 	.word	0x20009fe8
   1aec8:	20009510 	.word	0x20009510

0001aecc <unready_thread>:
{
   1aecc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1aece:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1aed2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1aed4:	2b00      	cmp	r3, #0
   1aed6:	da07      	bge.n	1aee8 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1aed8:	4601      	mov	r1, r0
   1aeda:	4808      	ldr	r0, [pc, #32]	; (1aefc <unready_thread+0x30>)
   1aedc:	f7ff fbea 	bl	1a6b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1aee0:	7b63      	ldrb	r3, [r4, #13]
   1aee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1aee6:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   1aee8:	4b05      	ldr	r3, [pc, #20]	; (1af00 <unready_thread+0x34>)
   1aeea:	6898      	ldr	r0, [r3, #8]
   1aeec:	1b03      	subs	r3, r0, r4
   1aeee:	4258      	negs	r0, r3
   1aef0:	4158      	adcs	r0, r3
}
   1aef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1aef6:	f7ff bc43 	b.w	1a780 <update_cache>
   1aefa:	bf00      	nop
   1aefc:	20009fe8 	.word	0x20009fe8
   1af00:	20009fbc 	.word	0x20009fbc

0001af04 <add_to_waitq_locked>:
{
   1af04:	b538      	push	{r3, r4, r5, lr}
   1af06:	4604      	mov	r4, r0
   1af08:	460d      	mov	r5, r1
	unready_thread(thread);
   1af0a:	f7ff ffdf 	bl	1aecc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1af0e:	7b63      	ldrb	r3, [r4, #13]
   1af10:	f043 0302 	orr.w	r3, r3, #2
   1af14:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1af16:	b1ed      	cbz	r5, 1af54 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1af18:	4b15      	ldr	r3, [pc, #84]	; (1af70 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1af1a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1af1c:	429c      	cmp	r4, r3
   1af1e:	d10a      	bne.n	1af36 <add_to_waitq_locked+0x32>
   1af20:	4914      	ldr	r1, [pc, #80]	; (1af74 <add_to_waitq_locked+0x70>)
   1af22:	4815      	ldr	r0, [pc, #84]	; (1af78 <add_to_waitq_locked+0x74>)
   1af24:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1af28:	f001 fc8c 	bl	1c844 <printk>
   1af2c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1af30:	4810      	ldr	r0, [pc, #64]	; (1af74 <add_to_waitq_locked+0x70>)
   1af32:	f001 ff2d 	bl	1cd90 <assert_post_action>
	return list->head == list;
   1af36:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af38:	429d      	cmp	r5, r3
   1af3a:	d012      	beq.n	1af62 <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1af3c:	b18b      	cbz	r3, 1af62 <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   1af3e:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1af42:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1af46:	4291      	cmp	r1, r2
   1af48:	dd05      	ble.n	1af56 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   1af4a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1af4c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1af50:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1af52:	605c      	str	r4, [r3, #4]
}
   1af54:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1af56:	6869      	ldr	r1, [r5, #4]
   1af58:	428b      	cmp	r3, r1
   1af5a:	d002      	beq.n	1af62 <add_to_waitq_locked+0x5e>
   1af5c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1af5e:	2b00      	cmp	r3, #0
   1af60:	d1ef      	bne.n	1af42 <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   1af62:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1af64:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1af66:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1af68:	686b      	ldr	r3, [r5, #4]
   1af6a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1af6c:	606c      	str	r4, [r5, #4]
}
   1af6e:	e7f1      	b.n	1af54 <add_to_waitq_locked+0x50>
   1af70:	20009510 	.word	0x20009510
   1af74:	0002621d 	.word	0x0002621d
   1af78:	00022c66 	.word	0x00022c66

0001af7c <pend>:
{
   1af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af80:	4604      	mov	r4, r0
   1af82:	4688      	mov	r8, r1
   1af84:	4616      	mov	r6, r2
   1af86:	461d      	mov	r5, r3
	__asm__ volatile(
   1af88:	f04f 0320 	mov.w	r3, #32
   1af8c:	f3ef 8711 	mrs	r7, BASEPRI
   1af90:	f383 8811 	msr	BASEPRI, r3
   1af94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1af98:	481a      	ldr	r0, [pc, #104]	; (1b004 <pend+0x88>)
   1af9a:	f000 fc7f 	bl	1b89c <z_spin_lock_valid>
   1af9e:	b940      	cbnz	r0, 1afb2 <pend+0x36>
   1afa0:	4919      	ldr	r1, [pc, #100]	; (1b008 <pend+0x8c>)
   1afa2:	481a      	ldr	r0, [pc, #104]	; (1b00c <pend+0x90>)
   1afa4:	227c      	movs	r2, #124	; 0x7c
   1afa6:	f001 fc4d 	bl	1c844 <printk>
   1afaa:	217c      	movs	r1, #124	; 0x7c
   1afac:	4816      	ldr	r0, [pc, #88]	; (1b008 <pend+0x8c>)
   1afae:	f001 feef 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1afb2:	4814      	ldr	r0, [pc, #80]	; (1b004 <pend+0x88>)
   1afb4:	f000 fc8e 	bl	1b8d4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1afb8:	4620      	mov	r0, r4
   1afba:	4641      	mov	r1, r8
   1afbc:	f7ff ffa2 	bl	1af04 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1afc0:	4810      	ldr	r0, [pc, #64]	; (1b004 <pend+0x88>)
   1afc2:	f000 fc79 	bl	1b8b8 <z_spin_unlock_valid>
   1afc6:	b940      	cbnz	r0, 1afda <pend+0x5e>
   1afc8:	490f      	ldr	r1, [pc, #60]	; (1b008 <pend+0x8c>)
   1afca:	4810      	ldr	r0, [pc, #64]	; (1b00c <pend+0x90>)
   1afcc:	22a7      	movs	r2, #167	; 0xa7
   1afce:	f001 fc39 	bl	1c844 <printk>
   1afd2:	21a7      	movs	r1, #167	; 0xa7
   1afd4:	480c      	ldr	r0, [pc, #48]	; (1b008 <pend+0x8c>)
   1afd6:	f001 fedb 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1afda:	f387 8811 	msr	BASEPRI, r7
   1afde:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1afe2:	f1b5 3fff 	cmp.w	r5, #4294967295
   1afe6:	bf08      	it	eq
   1afe8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1afec:	d008      	beq.n	1b000 <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1afee:	4632      	mov	r2, r6
   1aff0:	462b      	mov	r3, r5
   1aff2:	f104 0018 	add.w	r0, r4, #24
   1aff6:	4906      	ldr	r1, [pc, #24]	; (1b010 <pend+0x94>)
}
   1aff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1affc:	f000 bde2 	b.w	1bbc4 <z_add_timeout>
   1b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b004:	20009ff4 	.word	0x20009ff4
   1b008:	00022ca0 	.word	0x00022ca0
   1b00c:	00022c66 	.word	0x00022c66
   1b010:	0001aa31 	.word	0x0001aa31

0001b014 <z_pend_curr>:
{
   1b014:	b538      	push	{r3, r4, r5, lr}
   1b016:	4605      	mov	r5, r0
	pending_current = _current;
   1b018:	4b0d      	ldr	r3, [pc, #52]	; (1b050 <z_pend_curr+0x3c>)
{
   1b01a:	460c      	mov	r4, r1
	pending_current = _current;
   1b01c:	6898      	ldr	r0, [r3, #8]
   1b01e:	4b0d      	ldr	r3, [pc, #52]	; (1b054 <z_pend_curr+0x40>)
{
   1b020:	4611      	mov	r1, r2
	pending_current = _current;
   1b022:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1b024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b028:	f7ff ffa8 	bl	1af7c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b02c:	4628      	mov	r0, r5
   1b02e:	f000 fc43 	bl	1b8b8 <z_spin_unlock_valid>
   1b032:	b940      	cbnz	r0, 1b046 <z_pend_curr+0x32>
   1b034:	4908      	ldr	r1, [pc, #32]	; (1b058 <z_pend_curr+0x44>)
   1b036:	4809      	ldr	r0, [pc, #36]	; (1b05c <z_pend_curr+0x48>)
   1b038:	22be      	movs	r2, #190	; 0xbe
   1b03a:	f001 fc03 	bl	1c844 <printk>
   1b03e:	21be      	movs	r1, #190	; 0xbe
   1b040:	4805      	ldr	r0, [pc, #20]	; (1b058 <z_pend_curr+0x44>)
   1b042:	f001 fea5 	bl	1cd90 <assert_post_action>
   1b046:	4620      	mov	r0, r4
}
   1b048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b04c:	f7f2 bae8 	b.w	d620 <arch_swap>
   1b050:	20009fbc 	.word	0x20009fbc
   1b054:	20009ff0 	.word	0x20009ff0
   1b058:	00022ca0 	.word	0x00022ca0
   1b05c:	00022c66 	.word	0x00022c66

0001b060 <z_set_prio>:
{
   1b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b062:	4604      	mov	r4, r0
   1b064:	460d      	mov	r5, r1
	__asm__ volatile(
   1b066:	f04f 0320 	mov.w	r3, #32
   1b06a:	f3ef 8611 	mrs	r6, BASEPRI
   1b06e:	f383 8811 	msr	BASEPRI, r3
   1b072:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b076:	4831      	ldr	r0, [pc, #196]	; (1b13c <z_set_prio+0xdc>)
   1b078:	f000 fc10 	bl	1b89c <z_spin_lock_valid>
   1b07c:	b940      	cbnz	r0, 1b090 <z_set_prio+0x30>
   1b07e:	4930      	ldr	r1, [pc, #192]	; (1b140 <z_set_prio+0xe0>)
   1b080:	4830      	ldr	r0, [pc, #192]	; (1b144 <z_set_prio+0xe4>)
   1b082:	227c      	movs	r2, #124	; 0x7c
   1b084:	f001 fbde 	bl	1c844 <printk>
   1b088:	217c      	movs	r1, #124	; 0x7c
   1b08a:	482d      	ldr	r0, [pc, #180]	; (1b140 <z_set_prio+0xe0>)
   1b08c:	f001 fe80 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b090:	482a      	ldr	r0, [pc, #168]	; (1b13c <z_set_prio+0xdc>)
   1b092:	f000 fc1f 	bl	1b8d4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b096:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1b098:	b26d      	sxtb	r5, r5
   1b09a:	06db      	lsls	r3, r3, #27
   1b09c:	d14a      	bne.n	1b134 <z_set_prio+0xd4>
		if (need_sched) {
   1b09e:	69a3      	ldr	r3, [r4, #24]
   1b0a0:	2b00      	cmp	r3, #0
   1b0a2:	d147      	bne.n	1b134 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b0a4:	4621      	mov	r1, r4
   1b0a6:	4828      	ldr	r0, [pc, #160]	; (1b148 <z_set_prio+0xe8>)
   1b0a8:	f7ff fb04 	bl	1a6b4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b0ac:	4b27      	ldr	r3, [pc, #156]	; (1b14c <z_set_prio+0xec>)
				thread->base.prio = prio;
   1b0ae:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b0b0:	429c      	cmp	r4, r3
   1b0b2:	d10a      	bne.n	1b0ca <z_set_prio+0x6a>
   1b0b4:	4926      	ldr	r1, [pc, #152]	; (1b150 <z_set_prio+0xf0>)
   1b0b6:	4823      	ldr	r0, [pc, #140]	; (1b144 <z_set_prio+0xe4>)
   1b0b8:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1b0bc:	f001 fbc2 	bl	1c844 <printk>
   1b0c0:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1b0c4:	4822      	ldr	r0, [pc, #136]	; (1b150 <z_set_prio+0xf0>)
   1b0c6:	f001 fe63 	bl	1cd90 <assert_post_action>
	return list->head == list;
   1b0ca:	4a22      	ldr	r2, [pc, #136]	; (1b154 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b0cc:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1b0d0:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b0d4:	4283      	cmp	r3, r0
   1b0d6:	d027      	beq.n	1b128 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b0d8:	b333      	cbz	r3, 1b128 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b0da:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1b0de:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b0e2:	42af      	cmp	r7, r5
   1b0e4:	dd1b      	ble.n	1b11e <z_set_prio+0xbe>
	node->prev = successor->prev;
   1b0e6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b0e8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b0ec:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b0ee:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b0f0:	2001      	movs	r0, #1
   1b0f2:	f7ff fb45 	bl	1a780 <update_cache>
   1b0f6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b0f8:	4810      	ldr	r0, [pc, #64]	; (1b13c <z_set_prio+0xdc>)
   1b0fa:	f000 fbdd 	bl	1b8b8 <z_spin_unlock_valid>
   1b0fe:	b940      	cbnz	r0, 1b112 <z_set_prio+0xb2>
   1b100:	490f      	ldr	r1, [pc, #60]	; (1b140 <z_set_prio+0xe0>)
   1b102:	4810      	ldr	r0, [pc, #64]	; (1b144 <z_set_prio+0xe4>)
   1b104:	22a7      	movs	r2, #167	; 0xa7
   1b106:	f001 fb9d 	bl	1c844 <printk>
   1b10a:	21a7      	movs	r1, #167	; 0xa7
   1b10c:	480c      	ldr	r0, [pc, #48]	; (1b140 <z_set_prio+0xe0>)
   1b10e:	f001 fe3f 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1b112:	f386 8811 	msr	BASEPRI, r6
   1b116:	f3bf 8f6f 	isb	sy
}
   1b11a:	4620      	mov	r0, r4
   1b11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b11e:	4299      	cmp	r1, r3
   1b120:	d002      	beq.n	1b128 <z_set_prio+0xc8>
   1b122:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b124:	2b00      	cmp	r3, #0
   1b126:	d1da      	bne.n	1b0de <z_set_prio+0x7e>
	node->prev = list->tail;
   1b128:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1b12c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1b12e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b130:	6314      	str	r4, [r2, #48]	; 0x30
}
   1b132:	e7dd      	b.n	1b0f0 <z_set_prio+0x90>
			thread->base.prio = prio;
   1b134:	73a5      	strb	r5, [r4, #14]
   1b136:	2400      	movs	r4, #0
   1b138:	e7de      	b.n	1b0f8 <z_set_prio+0x98>
   1b13a:	bf00      	nop
   1b13c:	20009ff4 	.word	0x20009ff4
   1b140:	00022ca0 	.word	0x00022ca0
   1b144:	00022c66 	.word	0x00022c66
   1b148:	20009fe8 	.word	0x20009fe8
   1b14c:	20009510 	.word	0x20009510
   1b150:	0002621d 	.word	0x0002621d
   1b154:	20009fbc 	.word	0x20009fbc

0001b158 <z_unpend_first_thread>:
{
   1b158:	b538      	push	{r3, r4, r5, lr}
   1b15a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b15c:	f04f 0320 	mov.w	r3, #32
   1b160:	f3ef 8511 	mrs	r5, BASEPRI
   1b164:	f383 8811 	msr	BASEPRI, r3
   1b168:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b16c:	482b      	ldr	r0, [pc, #172]	; (1b21c <z_unpend_first_thread+0xc4>)
   1b16e:	f000 fb95 	bl	1b89c <z_spin_lock_valid>
   1b172:	b940      	cbnz	r0, 1b186 <z_unpend_first_thread+0x2e>
   1b174:	492a      	ldr	r1, [pc, #168]	; (1b220 <z_unpend_first_thread+0xc8>)
   1b176:	482b      	ldr	r0, [pc, #172]	; (1b224 <z_unpend_first_thread+0xcc>)
   1b178:	227c      	movs	r2, #124	; 0x7c
   1b17a:	f001 fb63 	bl	1c844 <printk>
   1b17e:	217c      	movs	r1, #124	; 0x7c
   1b180:	4827      	ldr	r0, [pc, #156]	; (1b220 <z_unpend_first_thread+0xc8>)
   1b182:	f001 fe05 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b186:	4825      	ldr	r0, [pc, #148]	; (1b21c <z_unpend_first_thread+0xc4>)
   1b188:	f000 fba4 	bl	1b8d4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   1b18c:	4620      	mov	r0, r4
   1b18e:	f006 f8ab 	bl	212e8 <z_priq_dumb_best>
   1b192:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b194:	4821      	ldr	r0, [pc, #132]	; (1b21c <z_unpend_first_thread+0xc4>)
   1b196:	f000 fb8f 	bl	1b8b8 <z_spin_unlock_valid>
   1b19a:	b940      	cbnz	r0, 1b1ae <z_unpend_first_thread+0x56>
   1b19c:	4920      	ldr	r1, [pc, #128]	; (1b220 <z_unpend_first_thread+0xc8>)
   1b19e:	4821      	ldr	r0, [pc, #132]	; (1b224 <z_unpend_first_thread+0xcc>)
   1b1a0:	22a7      	movs	r2, #167	; 0xa7
   1b1a2:	f001 fb4f 	bl	1c844 <printk>
   1b1a6:	21a7      	movs	r1, #167	; 0xa7
   1b1a8:	481d      	ldr	r0, [pc, #116]	; (1b220 <z_unpend_first_thread+0xc8>)
   1b1aa:	f001 fdf1 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1b1ae:	f385 8811 	msr	BASEPRI, r5
   1b1b2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1b1b6:	b37c      	cbz	r4, 1b218 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   1b1b8:	f04f 0320 	mov.w	r3, #32
   1b1bc:	f3ef 8511 	mrs	r5, BASEPRI
   1b1c0:	f383 8811 	msr	BASEPRI, r3
   1b1c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b1c8:	4814      	ldr	r0, [pc, #80]	; (1b21c <z_unpend_first_thread+0xc4>)
   1b1ca:	f000 fb67 	bl	1b89c <z_spin_lock_valid>
   1b1ce:	b940      	cbnz	r0, 1b1e2 <z_unpend_first_thread+0x8a>
   1b1d0:	4913      	ldr	r1, [pc, #76]	; (1b220 <z_unpend_first_thread+0xc8>)
   1b1d2:	4814      	ldr	r0, [pc, #80]	; (1b224 <z_unpend_first_thread+0xcc>)
   1b1d4:	227c      	movs	r2, #124	; 0x7c
   1b1d6:	f001 fb35 	bl	1c844 <printk>
   1b1da:	217c      	movs	r1, #124	; 0x7c
   1b1dc:	4810      	ldr	r0, [pc, #64]	; (1b220 <z_unpend_first_thread+0xc8>)
   1b1de:	f001 fdd7 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b1e2:	480e      	ldr	r0, [pc, #56]	; (1b21c <z_unpend_first_thread+0xc4>)
   1b1e4:	f000 fb76 	bl	1b8d4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1b1e8:	4620      	mov	r0, r4
   1b1ea:	f006 f86f 	bl	212cc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b1ee:	480b      	ldr	r0, [pc, #44]	; (1b21c <z_unpend_first_thread+0xc4>)
   1b1f0:	f000 fb62 	bl	1b8b8 <z_spin_unlock_valid>
   1b1f4:	b940      	cbnz	r0, 1b208 <z_unpend_first_thread+0xb0>
   1b1f6:	490a      	ldr	r1, [pc, #40]	; (1b220 <z_unpend_first_thread+0xc8>)
   1b1f8:	480a      	ldr	r0, [pc, #40]	; (1b224 <z_unpend_first_thread+0xcc>)
   1b1fa:	22a7      	movs	r2, #167	; 0xa7
   1b1fc:	f001 fb22 	bl	1c844 <printk>
   1b200:	21a7      	movs	r1, #167	; 0xa7
   1b202:	4807      	ldr	r0, [pc, #28]	; (1b220 <z_unpend_first_thread+0xc8>)
   1b204:	f001 fdc4 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1b208:	f385 8811 	msr	BASEPRI, r5
   1b20c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1b210:	f104 0018 	add.w	r0, r4, #24
   1b214:	f000 fd86 	bl	1bd24 <z_abort_timeout>
}
   1b218:	4620      	mov	r0, r4
   1b21a:	bd38      	pop	{r3, r4, r5, pc}
   1b21c:	20009ff4 	.word	0x20009ff4
   1b220:	00022ca0 	.word	0x00022ca0
   1b224:	00022c66 	.word	0x00022c66

0001b228 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b228:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1b22a:	4b04      	ldr	r3, [pc, #16]	; (1b23c <z_sched_init+0x14>)
   1b22c:	4608      	mov	r0, r1
   1b22e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1b232:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1b236:	f7ff b961 	b.w	1a4fc <k_sched_time_slice_set>
   1b23a:	bf00      	nop
   1b23c:	20009fbc 	.word	0x20009fbc

0001b240 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b242:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1b246:	b153      	cbz	r3, 1b25e <z_impl_k_yield+0x1e>
   1b248:	493d      	ldr	r1, [pc, #244]	; (1b340 <z_impl_k_yield+0x100>)
   1b24a:	483e      	ldr	r0, [pc, #248]	; (1b344 <z_impl_k_yield+0x104>)
   1b24c:	f240 42cf 	movw	r2, #1231	; 0x4cf
   1b250:	f001 faf8 	bl	1c844 <printk>
   1b254:	f240 41cf 	movw	r1, #1231	; 0x4cf
   1b258:	4839      	ldr	r0, [pc, #228]	; (1b340 <z_impl_k_yield+0x100>)
   1b25a:	f001 fd99 	bl	1cd90 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1b25e:	4d3a      	ldr	r5, [pc, #232]	; (1b348 <z_impl_k_yield+0x108>)
   1b260:	4f3a      	ldr	r7, [pc, #232]	; (1b34c <z_impl_k_yield+0x10c>)
   1b262:	68ab      	ldr	r3, [r5, #8]
   1b264:	42bb      	cmp	r3, r7
   1b266:	d054      	beq.n	1b312 <z_impl_k_yield+0xd2>
	__asm__ volatile(
   1b268:	f04f 0320 	mov.w	r3, #32
   1b26c:	f3ef 8611 	mrs	r6, BASEPRI
   1b270:	f383 8811 	msr	BASEPRI, r3
   1b274:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b278:	4835      	ldr	r0, [pc, #212]	; (1b350 <z_impl_k_yield+0x110>)
   1b27a:	f000 fb0f 	bl	1b89c <z_spin_lock_valid>
   1b27e:	b940      	cbnz	r0, 1b292 <z_impl_k_yield+0x52>
   1b280:	4934      	ldr	r1, [pc, #208]	; (1b354 <z_impl_k_yield+0x114>)
   1b282:	4830      	ldr	r0, [pc, #192]	; (1b344 <z_impl_k_yield+0x104>)
   1b284:	227c      	movs	r2, #124	; 0x7c
   1b286:	f001 fadd 	bl	1c844 <printk>
   1b28a:	217c      	movs	r1, #124	; 0x7c
   1b28c:	4831      	ldr	r0, [pc, #196]	; (1b354 <z_impl_k_yield+0x114>)
   1b28e:	f001 fd7f 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b292:	482f      	ldr	r0, [pc, #188]	; (1b350 <z_impl_k_yield+0x110>)
   1b294:	f000 fb1e 	bl	1b8d4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1b298:	68a9      	ldr	r1, [r5, #8]
   1b29a:	482f      	ldr	r0, [pc, #188]	; (1b358 <z_impl_k_yield+0x118>)
   1b29c:	f7ff fa0a 	bl	1a6b4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b2a0:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b2a2:	42bc      	cmp	r4, r7
   1b2a4:	d10a      	bne.n	1b2bc <z_impl_k_yield+0x7c>
   1b2a6:	4926      	ldr	r1, [pc, #152]	; (1b340 <z_impl_k_yield+0x100>)
   1b2a8:	4826      	ldr	r0, [pc, #152]	; (1b344 <z_impl_k_yield+0x104>)
   1b2aa:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1b2ae:	f001 fac9 	bl	1c844 <printk>
   1b2b2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1b2b6:	4822      	ldr	r0, [pc, #136]	; (1b340 <z_impl_k_yield+0x100>)
   1b2b8:	f001 fd6a 	bl	1cd90 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   1b2bc:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b2c0:	4925      	ldr	r1, [pc, #148]	; (1b358 <z_impl_k_yield+0x118>)
   1b2c2:	428b      	cmp	r3, r1
   1b2c4:	d036      	beq.n	1b334 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b2c6:	2b00      	cmp	r3, #0
   1b2c8:	d034      	beq.n	1b334 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b2ca:	f994 000e 	ldrsb.w	r0, [r4, #14]
   1b2ce:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b2d2:	4287      	cmp	r7, r0
   1b2d4:	dd29      	ble.n	1b32a <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   1b2d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b2d8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b2dc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b2de:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   1b2e0:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   1b2e2:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   1b2e4:	7b53      	ldrb	r3, [r2, #13]
   1b2e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b2ea:	7353      	strb	r3, [r2, #13]
   1b2ec:	f7ff fa48 	bl	1a780 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b2f0:	4817      	ldr	r0, [pc, #92]	; (1b350 <z_impl_k_yield+0x110>)
   1b2f2:	f000 fae1 	bl	1b8b8 <z_spin_unlock_valid>
   1b2f6:	b940      	cbnz	r0, 1b30a <z_impl_k_yield+0xca>
   1b2f8:	4916      	ldr	r1, [pc, #88]	; (1b354 <z_impl_k_yield+0x114>)
   1b2fa:	4812      	ldr	r0, [pc, #72]	; (1b344 <z_impl_k_yield+0x104>)
   1b2fc:	22a7      	movs	r2, #167	; 0xa7
   1b2fe:	f001 faa1 	bl	1c844 <printk>
   1b302:	21a7      	movs	r1, #167	; 0xa7
   1b304:	4813      	ldr	r0, [pc, #76]	; (1b354 <z_impl_k_yield+0x114>)
   1b306:	f001 fd43 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1b30a:	f386 8811 	msr	BASEPRI, r6
   1b30e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b312:	f04f 0320 	mov.w	r3, #32
   1b316:	f3ef 8011 	mrs	r0, BASEPRI
   1b31a:	f383 8811 	msr	BASEPRI, r3
   1b31e:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1b322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b326:	f7f2 b97b 	b.w	d620 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b32a:	4293      	cmp	r3, r2
   1b32c:	d002      	beq.n	1b334 <z_impl_k_yield+0xf4>
   1b32e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b330:	2b00      	cmp	r3, #0
   1b332:	d1cc      	bne.n	1b2ce <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   1b334:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   1b338:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1b33a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b33c:	632c      	str	r4, [r5, #48]	; 0x30
}
   1b33e:	e7cf      	b.n	1b2e0 <z_impl_k_yield+0xa0>
   1b340:	0002621d 	.word	0x0002621d
   1b344:	00022c66 	.word	0x00022c66
   1b348:	20009fbc 	.word	0x20009fbc
   1b34c:	20009510 	.word	0x20009510
   1b350:	20009ff4 	.word	0x20009ff4
   1b354:	00022ca0 	.word	0x00022ca0
   1b358:	20009fe8 	.word	0x20009fe8

0001b35c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b360:	4605      	mov	r5, r0
   1b362:	460f      	mov	r7, r1
   1b364:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b368:	b153      	cbz	r3, 1b380 <z_tick_sleep+0x24>
   1b36a:	4934      	ldr	r1, [pc, #208]	; (1b43c <z_tick_sleep+0xe0>)
   1b36c:	4834      	ldr	r0, [pc, #208]	; (1b440 <z_tick_sleep+0xe4>)
   1b36e:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1b372:	f001 fa67 	bl	1c844 <printk>
   1b376:	f240 41ed 	movw	r1, #1261	; 0x4ed
   1b37a:	4830      	ldr	r0, [pc, #192]	; (1b43c <z_tick_sleep+0xe0>)
   1b37c:	f001 fd08 	bl	1cd90 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b380:	ea55 0307 	orrs.w	r3, r5, r7
   1b384:	d104      	bne.n	1b390 <z_tick_sleep+0x34>
	z_impl_k_yield();
   1b386:	f7ff ff5b 	bl	1b240 <z_impl_k_yield>
		k_yield();
		return 0;
   1b38a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1b38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1b390:	f006 f838 	bl	21404 <z_tick_get_32>
   1b394:	1944      	adds	r4, r0, r5
   1b396:	f04f 0320 	mov.w	r3, #32
   1b39a:	f3ef 8811 	mrs	r8, BASEPRI
   1b39e:	f383 8811 	msr	BASEPRI, r3
   1b3a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3a6:	4827      	ldr	r0, [pc, #156]	; (1b444 <z_tick_sleep+0xe8>)
   1b3a8:	f000 fa78 	bl	1b89c <z_spin_lock_valid>
   1b3ac:	b940      	cbnz	r0, 1b3c0 <z_tick_sleep+0x64>
   1b3ae:	4926      	ldr	r1, [pc, #152]	; (1b448 <z_tick_sleep+0xec>)
   1b3b0:	4823      	ldr	r0, [pc, #140]	; (1b440 <z_tick_sleep+0xe4>)
   1b3b2:	227c      	movs	r2, #124	; 0x7c
   1b3b4:	f001 fa46 	bl	1c844 <printk>
   1b3b8:	217c      	movs	r1, #124	; 0x7c
   1b3ba:	4823      	ldr	r0, [pc, #140]	; (1b448 <z_tick_sleep+0xec>)
   1b3bc:	f001 fce8 	bl	1cd90 <assert_post_action>
	pending_current = _current;
   1b3c0:	4e22      	ldr	r6, [pc, #136]	; (1b44c <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   1b3c2:	4820      	ldr	r0, [pc, #128]	; (1b444 <z_tick_sleep+0xe8>)
   1b3c4:	f000 fa86 	bl	1b8d4 <z_spin_lock_set_owner>
   1b3c8:	68b0      	ldr	r0, [r6, #8]
   1b3ca:	4b21      	ldr	r3, [pc, #132]	; (1b450 <z_tick_sleep+0xf4>)
   1b3cc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b3ce:	f7ff fd7d 	bl	1aecc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b3d2:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b3d4:	462a      	mov	r2, r5
   1b3d6:	463b      	mov	r3, r7
   1b3d8:	3018      	adds	r0, #24
   1b3da:	491e      	ldr	r1, [pc, #120]	; (1b454 <z_tick_sleep+0xf8>)
   1b3dc:	f000 fbf2 	bl	1bbc4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b3e0:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b3e2:	4818      	ldr	r0, [pc, #96]	; (1b444 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b3e4:	7b53      	ldrb	r3, [r2, #13]
   1b3e6:	f043 0310 	orr.w	r3, r3, #16
   1b3ea:	7353      	strb	r3, [r2, #13]
   1b3ec:	f000 fa64 	bl	1b8b8 <z_spin_unlock_valid>
   1b3f0:	b940      	cbnz	r0, 1b404 <z_tick_sleep+0xa8>
   1b3f2:	4915      	ldr	r1, [pc, #84]	; (1b448 <z_tick_sleep+0xec>)
   1b3f4:	4812      	ldr	r0, [pc, #72]	; (1b440 <z_tick_sleep+0xe4>)
   1b3f6:	22be      	movs	r2, #190	; 0xbe
   1b3f8:	f001 fa24 	bl	1c844 <printk>
   1b3fc:	21be      	movs	r1, #190	; 0xbe
   1b3fe:	4812      	ldr	r0, [pc, #72]	; (1b448 <z_tick_sleep+0xec>)
   1b400:	f001 fcc6 	bl	1cd90 <assert_post_action>
   1b404:	4640      	mov	r0, r8
   1b406:	f7f2 f90b 	bl	d620 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1b40a:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1b40c:	7b5b      	ldrb	r3, [r3, #13]
   1b40e:	06db      	lsls	r3, r3, #27
   1b410:	d50a      	bpl.n	1b428 <z_tick_sleep+0xcc>
   1b412:	490a      	ldr	r1, [pc, #40]	; (1b43c <z_tick_sleep+0xe0>)
   1b414:	480a      	ldr	r0, [pc, #40]	; (1b440 <z_tick_sleep+0xe4>)
   1b416:	f240 520b 	movw	r2, #1291	; 0x50b
   1b41a:	f001 fa13 	bl	1c844 <printk>
   1b41e:	f240 510b 	movw	r1, #1291	; 0x50b
   1b422:	4806      	ldr	r0, [pc, #24]	; (1b43c <z_tick_sleep+0xe0>)
   1b424:	f001 fcb4 	bl	1cd90 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1b428:	f005 ffec 	bl	21404 <z_tick_get_32>
   1b42c:	1a20      	subs	r0, r4, r0
   1b42e:	eb63 0303 	sbc.w	r3, r3, r3
   1b432:	2b00      	cmp	r3, #0
   1b434:	bfb8      	it	lt
   1b436:	2000      	movlt	r0, #0
   1b438:	e7a8      	b.n	1b38c <z_tick_sleep+0x30>
   1b43a:	bf00      	nop
   1b43c:	0002621d 	.word	0x0002621d
   1b440:	00022c66 	.word	0x00022c66
   1b444:	20009ff4 	.word	0x20009ff4
   1b448:	00022ca0 	.word	0x00022ca0
   1b44c:	20009fbc 	.word	0x20009fbc
   1b450:	20009ff0 	.word	0x20009ff0
   1b454:	0001aa31 	.word	0x0001aa31

0001b458 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b458:	b538      	push	{r3, r4, r5, lr}
   1b45a:	4605      	mov	r5, r0
   1b45c:	460c      	mov	r4, r1
   1b45e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b462:	b153      	cbz	r3, 1b47a <z_impl_k_sleep+0x22>
   1b464:	4911      	ldr	r1, [pc, #68]	; (1b4ac <z_impl_k_sleep+0x54>)
   1b466:	4812      	ldr	r0, [pc, #72]	; (1b4b0 <z_impl_k_sleep+0x58>)
   1b468:	f240 521a 	movw	r2, #1306	; 0x51a
   1b46c:	f001 f9ea 	bl	1c844 <printk>
   1b470:	f240 511a 	movw	r1, #1306	; 0x51a
   1b474:	480d      	ldr	r0, [pc, #52]	; (1b4ac <z_impl_k_sleep+0x54>)
   1b476:	f001 fc8b 	bl	1cd90 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b47a:	f1b4 3fff 	cmp.w	r4, #4294967295
   1b47e:	bf08      	it	eq
   1b480:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1b484:	d106      	bne.n	1b494 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   1b486:	4b0b      	ldr	r3, [pc, #44]	; (1b4b4 <z_impl_k_sleep+0x5c>)
   1b488:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b48a:	f7ff fbc5 	bl	1ac18 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1b48e:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1b492:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1b494:	4628      	mov	r0, r5
   1b496:	4621      	mov	r1, r4
   1b498:	f7ff ff60 	bl	1b35c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1b49c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b4a0:	fb80 0303 	smull	r0, r3, r0, r3
   1b4a4:	0bc0      	lsrs	r0, r0, #15
   1b4a6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b4aa:	e7f2      	b.n	1b492 <z_impl_k_sleep+0x3a>
   1b4ac:	0002621d 	.word	0x0002621d
   1b4b0:	00022c66 	.word	0x00022c66
   1b4b4:	20009fbc 	.word	0x20009fbc

0001b4b8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b4b8:	4b01      	ldr	r3, [pc, #4]	; (1b4c0 <z_impl_k_current_get+0x8>)
   1b4ba:	6898      	ldr	r0, [r3, #8]
   1b4bc:	4770      	bx	lr
   1b4be:	bf00      	nop
   1b4c0:	20009fbc 	.word	0x20009fbc

0001b4c4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b4c4:	b538      	push	{r3, r4, r5, lr}
   1b4c6:	4604      	mov	r4, r0
   1b4c8:	f04f 0320 	mov.w	r3, #32
   1b4cc:	f3ef 8511 	mrs	r5, BASEPRI
   1b4d0:	f383 8811 	msr	BASEPRI, r3
   1b4d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b4d8:	4815      	ldr	r0, [pc, #84]	; (1b530 <z_impl_k_sem_give+0x6c>)
   1b4da:	f000 f9df 	bl	1b89c <z_spin_lock_valid>
   1b4de:	b940      	cbnz	r0, 1b4f2 <z_impl_k_sem_give+0x2e>
   1b4e0:	4914      	ldr	r1, [pc, #80]	; (1b534 <z_impl_k_sem_give+0x70>)
   1b4e2:	4815      	ldr	r0, [pc, #84]	; (1b538 <z_impl_k_sem_give+0x74>)
   1b4e4:	227c      	movs	r2, #124	; 0x7c
   1b4e6:	f001 f9ad 	bl	1c844 <printk>
   1b4ea:	217c      	movs	r1, #124	; 0x7c
   1b4ec:	4811      	ldr	r0, [pc, #68]	; (1b534 <z_impl_k_sem_give+0x70>)
   1b4ee:	f001 fc4f 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b4f2:	480f      	ldr	r0, [pc, #60]	; (1b530 <z_impl_k_sem_give+0x6c>)
   1b4f4:	f000 f9ee 	bl	1b8d4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1b4f8:	4620      	mov	r0, r4
   1b4fa:	f7ff fe2d 	bl	1b158 <z_unpend_first_thread>

	if (thread != NULL) {
   1b4fe:	b150      	cbz	r0, 1b516 <z_impl_k_sem_give+0x52>
   1b500:	2200      	movs	r2, #0
   1b502:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b506:	f7ff fa1b 	bl	1a940 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b50a:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1b50c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b510:	4807      	ldr	r0, [pc, #28]	; (1b530 <z_impl_k_sem_give+0x6c>)
   1b512:	f7ff b841 	b.w	1a598 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b516:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b51a:	429a      	cmp	r2, r3
   1b51c:	bf18      	it	ne
   1b51e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b520:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b522:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b524:	f104 0010 	add.w	r0, r4, #16
   1b528:	f005 ffe3 	bl	214f2 <z_handle_obj_poll_events>
}
   1b52c:	e7ed      	b.n	1b50a <z_impl_k_sem_give+0x46>
   1b52e:	bf00      	nop
   1b530:	2000a000 	.word	0x2000a000
   1b534:	00022ca0 	.word	0x00022ca0
   1b538:	00022c66 	.word	0x00022c66

0001b53c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b53c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b53e:	4604      	mov	r4, r0
   1b540:	4616      	mov	r6, r2
   1b542:	461d      	mov	r5, r3
   1b544:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1b548:	b15b      	cbz	r3, 1b562 <z_impl_k_sem_take+0x26>
   1b54a:	ea52 0305 	orrs.w	r3, r2, r5
   1b54e:	d008      	beq.n	1b562 <z_impl_k_sem_take+0x26>
   1b550:	492b      	ldr	r1, [pc, #172]	; (1b600 <z_impl_k_sem_take+0xc4>)
   1b552:	482c      	ldr	r0, [pc, #176]	; (1b604 <z_impl_k_sem_take+0xc8>)
   1b554:	228c      	movs	r2, #140	; 0x8c
   1b556:	f001 f975 	bl	1c844 <printk>
   1b55a:	218c      	movs	r1, #140	; 0x8c
   1b55c:	4828      	ldr	r0, [pc, #160]	; (1b600 <z_impl_k_sem_take+0xc4>)
   1b55e:	f001 fc17 	bl	1cd90 <assert_post_action>
   1b562:	f04f 0320 	mov.w	r3, #32
   1b566:	f3ef 8711 	mrs	r7, BASEPRI
   1b56a:	f383 8811 	msr	BASEPRI, r3
   1b56e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b572:	4825      	ldr	r0, [pc, #148]	; (1b608 <z_impl_k_sem_take+0xcc>)
   1b574:	f000 f992 	bl	1b89c <z_spin_lock_valid>
   1b578:	b940      	cbnz	r0, 1b58c <z_impl_k_sem_take+0x50>
   1b57a:	4924      	ldr	r1, [pc, #144]	; (1b60c <z_impl_k_sem_take+0xd0>)
   1b57c:	4821      	ldr	r0, [pc, #132]	; (1b604 <z_impl_k_sem_take+0xc8>)
   1b57e:	227c      	movs	r2, #124	; 0x7c
   1b580:	f001 f960 	bl	1c844 <printk>
   1b584:	217c      	movs	r1, #124	; 0x7c
   1b586:	4821      	ldr	r0, [pc, #132]	; (1b60c <z_impl_k_sem_take+0xd0>)
   1b588:	f001 fc02 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b58c:	481e      	ldr	r0, [pc, #120]	; (1b608 <z_impl_k_sem_take+0xcc>)
   1b58e:	f000 f9a1 	bl	1b8d4 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1b592:	68a3      	ldr	r3, [r4, #8]
   1b594:	b1ab      	cbz	r3, 1b5c2 <z_impl_k_sem_take+0x86>
		sem->count--;
   1b596:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b598:	481b      	ldr	r0, [pc, #108]	; (1b608 <z_impl_k_sem_take+0xcc>)
   1b59a:	60a3      	str	r3, [r4, #8]
   1b59c:	f000 f98c 	bl	1b8b8 <z_spin_unlock_valid>
   1b5a0:	b940      	cbnz	r0, 1b5b4 <z_impl_k_sem_take+0x78>
   1b5a2:	491a      	ldr	r1, [pc, #104]	; (1b60c <z_impl_k_sem_take+0xd0>)
   1b5a4:	4817      	ldr	r0, [pc, #92]	; (1b604 <z_impl_k_sem_take+0xc8>)
   1b5a6:	22a7      	movs	r2, #167	; 0xa7
   1b5a8:	f001 f94c 	bl	1c844 <printk>
   1b5ac:	21a7      	movs	r1, #167	; 0xa7
   1b5ae:	4817      	ldr	r0, [pc, #92]	; (1b60c <z_impl_k_sem_take+0xd0>)
   1b5b0:	f001 fbee 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1b5b4:	f387 8811 	msr	BASEPRI, r7
   1b5b8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b5bc:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1b5be:	b003      	add	sp, #12
   1b5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b5c2:	ea56 0305 	orrs.w	r3, r6, r5
   1b5c6:	d113      	bne.n	1b5f0 <z_impl_k_sem_take+0xb4>
   1b5c8:	480f      	ldr	r0, [pc, #60]	; (1b608 <z_impl_k_sem_take+0xcc>)
   1b5ca:	f000 f975 	bl	1b8b8 <z_spin_unlock_valid>
   1b5ce:	b940      	cbnz	r0, 1b5e2 <z_impl_k_sem_take+0xa6>
   1b5d0:	490e      	ldr	r1, [pc, #56]	; (1b60c <z_impl_k_sem_take+0xd0>)
   1b5d2:	480c      	ldr	r0, [pc, #48]	; (1b604 <z_impl_k_sem_take+0xc8>)
   1b5d4:	22a7      	movs	r2, #167	; 0xa7
   1b5d6:	f001 f935 	bl	1c844 <printk>
   1b5da:	21a7      	movs	r1, #167	; 0xa7
   1b5dc:	480b      	ldr	r0, [pc, #44]	; (1b60c <z_impl_k_sem_take+0xd0>)
   1b5de:	f001 fbd7 	bl	1cd90 <assert_post_action>
   1b5e2:	f387 8811 	msr	BASEPRI, r7
   1b5e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b5ea:	f06f 000f 	mvn.w	r0, #15
   1b5ee:	e7e6      	b.n	1b5be <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b5f0:	4622      	mov	r2, r4
   1b5f2:	4639      	mov	r1, r7
   1b5f4:	e9cd 6500 	strd	r6, r5, [sp]
   1b5f8:	4803      	ldr	r0, [pc, #12]	; (1b608 <z_impl_k_sem_take+0xcc>)
   1b5fa:	f7ff fd0b 	bl	1b014 <z_pend_curr>
	return ret;
   1b5fe:	e7de      	b.n	1b5be <z_impl_k_sem_take+0x82>
   1b600:	0002623f 	.word	0x0002623f
   1b604:	00022c66 	.word	0x00022c66
   1b608:	2000a000 	.word	0x2000a000
   1b60c:	00022ca0 	.word	0x00022ca0

0001b610 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b610:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b612:	4c08      	ldr	r4, [pc, #32]	; (1b634 <k_sys_work_q_init+0x24>)
   1b614:	f04f 33ff 	mov.w	r3, #4294967295
   1b618:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b61c:	4620      	mov	r0, r4
   1b61e:	4906      	ldr	r1, [pc, #24]	; (1b638 <k_sys_work_q_init+0x28>)
   1b620:	f000 f98c 	bl	1b93c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b624:	4905      	ldr	r1, [pc, #20]	; (1b63c <k_sys_work_q_init+0x2c>)
   1b626:	f104 0020 	add.w	r0, r4, #32
   1b62a:	f005 fe8d 	bl	21348 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b62e:	2000      	movs	r0, #0
   1b630:	bd10      	pop	{r4, pc}
   1b632:	bf00      	nop
   1b634:	20009630 	.word	0x20009630
   1b638:	2000dd08 	.word	0x2000dd08
   1b63c:	0002625f 	.word	0x0002625f

0001b640 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b640:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b644:	4604      	mov	r4, r0
   1b646:	460f      	mov	r7, r1
   1b648:	4698      	mov	r8, r3
   1b64a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b64c:	4b2c      	ldr	r3, [pc, #176]	; (1b700 <z_setup_new_thread+0xc0>)
   1b64e:	4616      	mov	r6, r2
   1b650:	f100 0238 	add.w	r2, r0, #56	; 0x38
   1b654:	e8d2 1fef 	ldaex	r1, [r2]
   1b658:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1b65c:	2800      	cmp	r0, #0
   1b65e:	d1f9      	bne.n	1b654 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   1b660:	4299      	cmp	r1, r3
   1b662:	d10a      	bne.n	1b67a <z_setup_new_thread+0x3a>
   1b664:	4927      	ldr	r1, [pc, #156]	; (1b704 <z_setup_new_thread+0xc4>)
   1b666:	4828      	ldr	r0, [pc, #160]	; (1b708 <z_setup_new_thread+0xc8>)
   1b668:	f240 2223 	movw	r2, #547	; 0x223
   1b66c:	f001 f8ea 	bl	1c844 <printk>
   1b670:	f240 2123 	movw	r1, #547	; 0x223
   1b674:	4823      	ldr	r0, [pc, #140]	; (1b704 <z_setup_new_thread+0xc4>)
   1b676:	f001 fb8b 	bl	1cd90 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   1b67a:	2d0f      	cmp	r5, #15
   1b67c:	d12f      	bne.n	1b6de <z_setup_new_thread+0x9e>
   1b67e:	4b23      	ldr	r3, [pc, #140]	; (1b70c <z_setup_new_thread+0xcc>)
   1b680:	4598      	cmp	r8, r3
   1b682:	d130      	bne.n	1b6e6 <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   1b684:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1b688:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1b68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1b68e:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   1b690:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1b692:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   1b694:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   1b696:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b69a:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b69c:	9302      	str	r3, [sp, #8]
   1b69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b6a0:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b6a4:	9301      	str	r3, [sp, #4]
   1b6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   1b6a8:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   1b6aa:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b6ae:	9300      	str	r3, [sp, #0]
   1b6b0:	4632      	mov	r2, r6
   1b6b2:	4643      	mov	r3, r8
   1b6b4:	4639      	mov	r1, r7
   1b6b6:	4620      	mov	r0, r4
	node->prev = NULL;
   1b6b8:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   1b6bc:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1b6be:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b6c0:	f7f2 f84c 	bl	d75c <arch_new_thread>
	if (!_current) {
   1b6c4:	4b12      	ldr	r3, [pc, #72]	; (1b710 <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   1b6c6:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   1b6ca:	689b      	ldr	r3, [r3, #8]
   1b6cc:	b10b      	cbz	r3, 1b6d2 <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   1b6ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1b6d2:	4630      	mov	r0, r6
   1b6d4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   1b6d8:	b004      	add	sp, #16
   1b6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1b6de:	f105 0310 	add.w	r3, r5, #16
   1b6e2:	2b1e      	cmp	r3, #30
   1b6e4:	d9ce      	bls.n	1b684 <z_setup_new_thread+0x44>
   1b6e6:	f240 2226 	movw	r2, #550	; 0x226
   1b6ea:	4906      	ldr	r1, [pc, #24]	; (1b704 <z_setup_new_thread+0xc4>)
   1b6ec:	4806      	ldr	r0, [pc, #24]	; (1b708 <z_setup_new_thread+0xc8>)
   1b6ee:	f001 f8a9 	bl	1c844 <printk>
   1b6f2:	f240 2126 	movw	r1, #550	; 0x226
   1b6f6:	4803      	ldr	r0, [pc, #12]	; (1b704 <z_setup_new_thread+0xc4>)
   1b6f8:	f001 fb4a 	bl	1cd90 <assert_post_action>
   1b6fc:	e7c2      	b.n	1b684 <z_setup_new_thread+0x44>
   1b6fe:	bf00      	nop
   1b700:	1337c0d3 	.word	0x1337c0d3
   1b704:	00026268 	.word	0x00026268
   1b708:	00022c66 	.word	0x00022c66
   1b70c:	00019a29 	.word	0x00019a29
   1b710:	20009fbc 	.word	0x20009fbc

0001b714 <z_impl_k_thread_create>:
{
   1b714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b718:	b087      	sub	sp, #28
   1b71a:	4604      	mov	r4, r0
   1b71c:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   1b720:	460f      	mov	r7, r1
   1b722:	4690      	mov	r8, r2
   1b724:	4699      	mov	r9, r3
   1b726:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1b72a:	b153      	cbz	r3, 1b742 <z_impl_k_thread_create+0x2e>
   1b72c:	491a      	ldr	r1, [pc, #104]	; (1b798 <z_impl_k_thread_create+0x84>)
   1b72e:	481b      	ldr	r0, [pc, #108]	; (1b79c <z_impl_k_thread_create+0x88>)
   1b730:	f240 228f 	movw	r2, #655	; 0x28f
   1b734:	f001 f886 	bl	1c844 <printk>
   1b738:	f240 218f 	movw	r1, #655	; 0x28f
   1b73c:	4816      	ldr	r0, [pc, #88]	; (1b798 <z_impl_k_thread_create+0x84>)
   1b73e:	f001 fb27 	bl	1cd90 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b742:	2300      	movs	r3, #0
   1b744:	9305      	str	r3, [sp, #20]
   1b746:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b748:	4642      	mov	r2, r8
   1b74a:	9304      	str	r3, [sp, #16]
   1b74c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b74e:	4639      	mov	r1, r7
   1b750:	9303      	str	r3, [sp, #12]
   1b752:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b754:	4620      	mov	r0, r4
   1b756:	9302      	str	r3, [sp, #8]
   1b758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b75a:	9301      	str	r3, [sp, #4]
   1b75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b75e:	9300      	str	r3, [sp, #0]
   1b760:	464b      	mov	r3, r9
   1b762:	f7ff ff6d 	bl	1b640 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1b766:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b76a:	bf08      	it	eq
   1b76c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b770:	d005      	beq.n	1b77e <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b772:	ea55 0306 	orrs.w	r3, r5, r6
   1b776:	d106      	bne.n	1b786 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   1b778:	4620      	mov	r0, r4
   1b77a:	f7ff f917 	bl	1a9ac <z_sched_start>
}
   1b77e:	4620      	mov	r0, r4
   1b780:	b007      	add	sp, #28
   1b782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b786:	4632      	mov	r2, r6
   1b788:	462b      	mov	r3, r5
   1b78a:	4905      	ldr	r1, [pc, #20]	; (1b7a0 <z_impl_k_thread_create+0x8c>)
   1b78c:	f104 0018 	add.w	r0, r4, #24
   1b790:	f000 fa18 	bl	1bbc4 <z_add_timeout>
   1b794:	e7f3      	b.n	1b77e <z_impl_k_thread_create+0x6a>
   1b796:	bf00      	nop
   1b798:	00026268 	.word	0x00026268
   1b79c:	00022c66 	.word	0x00022c66
   1b7a0:	0001aa31 	.word	0x0001aa31

0001b7a4 <z_init_static_threads>:
{
   1b7a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b7a8:	4c37      	ldr	r4, [pc, #220]	; (1b888 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1b7aa:	4d38      	ldr	r5, [pc, #224]	; (1b88c <z_init_static_threads+0xe8>)
   1b7ac:	4f38      	ldr	r7, [pc, #224]	; (1b890 <z_init_static_threads+0xec>)
{
   1b7ae:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1b7b0:	42ac      	cmp	r4, r5
   1b7b2:	4626      	mov	r6, r4
   1b7b4:	d90a      	bls.n	1b7cc <z_init_static_threads+0x28>
   1b7b6:	4639      	mov	r1, r7
   1b7b8:	4836      	ldr	r0, [pc, #216]	; (1b894 <z_init_static_threads+0xf0>)
   1b7ba:	f240 22fd 	movw	r2, #765	; 0x2fd
   1b7be:	f001 f841 	bl	1c844 <printk>
   1b7c2:	f240 21fd 	movw	r1, #765	; 0x2fd
   1b7c6:	4638      	mov	r0, r7
   1b7c8:	f001 fae2 	bl	1cd90 <assert_post_action>
   1b7cc:	42ae      	cmp	r6, r5
   1b7ce:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1b7d2:	d31b      	bcc.n	1b80c <z_init_static_threads+0x68>
	k_sched_lock();
   1b7d4:	f7fe ff16 	bl	1a604 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b7d8:	4c2b      	ldr	r4, [pc, #172]	; (1b888 <z_init_static_threads+0xe4>)
   1b7da:	4e2d      	ldr	r6, [pc, #180]	; (1b890 <z_init_static_threads+0xec>)
   1b7dc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1b894 <z_init_static_threads+0xf0>
   1b7e0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1b898 <z_init_static_threads+0xf4>
   1b7e4:	42ac      	cmp	r4, r5
   1b7e6:	d90a      	bls.n	1b7fe <z_init_static_threads+0x5a>
   1b7e8:	4631      	mov	r1, r6
   1b7ea:	4640      	mov	r0, r8
   1b7ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
   1b7f0:	f001 f828 	bl	1c844 <printk>
   1b7f4:	f44f 7147 	mov.w	r1, #796	; 0x31c
   1b7f8:	4630      	mov	r0, r6
   1b7fa:	f001 fac9 	bl	1cd90 <assert_post_action>
   1b7fe:	42ac      	cmp	r4, r5
   1b800:	d320      	bcc.n	1b844 <z_init_static_threads+0xa0>
}
   1b802:	b007      	add	sp, #28
   1b804:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1b808:	f7fe bff4 	b.w	1a7f4 <k_sched_unlock>
		z_setup_new_thread(
   1b80c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b810:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b814:	9305      	str	r3, [sp, #20]
   1b816:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b81a:	9304      	str	r3, [sp, #16]
   1b81c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b820:	9303      	str	r3, [sp, #12]
   1b822:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b826:	9302      	str	r3, [sp, #8]
   1b828:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b82c:	9301      	str	r3, [sp, #4]
   1b82e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b832:	9300      	str	r3, [sp, #0]
   1b834:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b838:	f7ff ff02 	bl	1b640 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b83c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b840:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   1b842:	e7b5      	b.n	1b7b0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b844:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b846:	1c5a      	adds	r2, r3, #1
   1b848:	d00f      	beq.n	1b86a <z_init_static_threads+0xc6>
   1b84a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1b84e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b852:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   1b854:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b858:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b85c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1b860:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b862:	d104      	bne.n	1b86e <z_init_static_threads+0xca>
	z_sched_start(thread);
   1b864:	4638      	mov	r0, r7
   1b866:	f7ff f8a1 	bl	1a9ac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b86a:	3430      	adds	r4, #48	; 0x30
   1b86c:	e7ba      	b.n	1b7e4 <z_init_static_threads+0x40>
   1b86e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b872:	2300      	movs	r3, #0
   1b874:	f7ed f95a 	bl	8b2c <__aeabi_uldivmod>
   1b878:	4602      	mov	r2, r0
   1b87a:	460b      	mov	r3, r1
   1b87c:	f107 0018 	add.w	r0, r7, #24
   1b880:	4649      	mov	r1, r9
   1b882:	f000 f99f 	bl	1bbc4 <z_add_timeout>
   1b886:	e7f0      	b.n	1b86a <z_init_static_threads+0xc6>
   1b888:	200084b8 	.word	0x200084b8
   1b88c:	200084b8 	.word	0x200084b8
   1b890:	00026268 	.word	0x00026268
   1b894:	00022c66 	.word	0x00022c66
   1b898:	0001aa31 	.word	0x0001aa31

0001b89c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1b89c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   1b89e:	b138      	cbz	r0, 1b8b0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1b8a0:	4b04      	ldr	r3, [pc, #16]	; (1b8b4 <z_spin_lock_valid+0x18>)
   1b8a2:	f000 0003 	and.w	r0, r0, #3
   1b8a6:	7e1b      	ldrb	r3, [r3, #24]
   1b8a8:	1ac0      	subs	r0, r0, r3
   1b8aa:	bf18      	it	ne
   1b8ac:	2001      	movne	r0, #1
   1b8ae:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1b8b0:	2001      	movs	r0, #1
}
   1b8b2:	4770      	bx	lr
   1b8b4:	20009fbc 	.word	0x20009fbc

0001b8b8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1b8b8:	4905      	ldr	r1, [pc, #20]	; (1b8d0 <z_spin_unlock_valid+0x18>)
{
   1b8ba:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1b8bc:	688a      	ldr	r2, [r1, #8]
   1b8be:	7e08      	ldrb	r0, [r1, #24]
   1b8c0:	6819      	ldr	r1, [r3, #0]
   1b8c2:	4302      	orrs	r2, r0
   1b8c4:	2000      	movs	r0, #0
   1b8c6:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   1b8c8:	bf04      	itt	eq
   1b8ca:	6018      	streq	r0, [r3, #0]
	return true;
   1b8cc:	2001      	moveq	r0, #1
}
   1b8ce:	4770      	bx	lr
   1b8d0:	20009fbc 	.word	0x20009fbc

0001b8d4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1b8d4:	4a02      	ldr	r2, [pc, #8]	; (1b8e0 <z_spin_lock_set_owner+0xc>)
   1b8d6:	7e11      	ldrb	r1, [r2, #24]
   1b8d8:	6893      	ldr	r3, [r2, #8]
   1b8da:	430b      	orrs	r3, r1
   1b8dc:	6003      	str	r3, [r0, #0]
}
   1b8de:	4770      	bx	lr
   1b8e0:	20009fbc 	.word	0x20009fbc

0001b8e4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1b8e4:	b508      	push	{r3, lr}
	__asm__ volatile(
   1b8e6:	f04f 0320 	mov.w	r3, #32
   1b8ea:	f3ef 8511 	mrs	r5, BASEPRI
   1b8ee:	f383 8811 	msr	BASEPRI, r3
   1b8f2:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   1b8f6:	4c0e      	ldr	r4, [pc, #56]	; (1b930 <z_self_abort+0x4c>)
   1b8f8:	6923      	ldr	r3, [r4, #16]
   1b8fa:	b143      	cbz	r3, 1b90e <z_self_abort+0x2a>
   1b8fc:	490d      	ldr	r1, [pc, #52]	; (1b934 <z_self_abort+0x50>)
   1b8fe:	480e      	ldr	r0, [pc, #56]	; (1b938 <z_self_abort+0x54>)
   1b900:	2228      	movs	r2, #40	; 0x28
   1b902:	f000 ff9f 	bl	1c844 <printk>
   1b906:	2128      	movs	r1, #40	; 0x28
   1b908:	480a      	ldr	r0, [pc, #40]	; (1b934 <z_self_abort+0x50>)
   1b90a:	f001 fa41 	bl	1cd90 <assert_post_action>
	cpu->pending_abort = _current;
   1b90e:	68a0      	ldr	r0, [r4, #8]
   1b910:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   1b912:	f7ff f981 	bl	1ac18 <z_impl_k_thread_suspend>
   1b916:	4628      	mov	r0, r5
   1b918:	f7f1 fe82 	bl	d620 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   1b91c:	4905      	ldr	r1, [pc, #20]	; (1b934 <z_self_abort+0x50>)
   1b91e:	4806      	ldr	r0, [pc, #24]	; (1b938 <z_self_abort+0x54>)
   1b920:	2230      	movs	r2, #48	; 0x30
   1b922:	f000 ff8f 	bl	1c844 <printk>
   1b926:	2130      	movs	r1, #48	; 0x30
   1b928:	4802      	ldr	r0, [pc, #8]	; (1b934 <z_self_abort+0x50>)
   1b92a:	f001 fa31 	bl	1cd90 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b92e:	bf00      	nop
   1b930:	20009fbc 	.word	0x20009fbc
   1b934:	0002628b 	.word	0x0002628b
   1b938:	00022c66 	.word	0x00022c66

0001b93c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b940:	4604      	mov	r4, r0
   1b942:	b088      	sub	sp, #32
   1b944:	460d      	mov	r5, r1
   1b946:	4616      	mov	r6, r2
   1b948:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1b94a:	f005 fc7e 	bl	2124a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1b94e:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b952:	2200      	movs	r2, #0
   1b954:	2300      	movs	r3, #0
   1b956:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1b95a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b95e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1b962:	4629      	mov	r1, r5
   1b964:	4632      	mov	r2, r6
   1b966:	4640      	mov	r0, r8
   1b968:	4b05      	ldr	r3, [pc, #20]	; (1b980 <k_work_q_start+0x44>)
   1b96a:	9400      	str	r4, [sp, #0]
   1b96c:	f7ff fed2 	bl	1b714 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1b970:	4640      	mov	r0, r8
   1b972:	4904      	ldr	r1, [pc, #16]	; (1b984 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1b974:	b008      	add	sp, #32
   1b976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b97a:	f005 bce5 	b.w	21348 <z_impl_k_thread_name_set>
   1b97e:	bf00      	nop
   1b980:	0000a3d1 	.word	0x0000a3d1
   1b984:	000262b4 	.word	0x000262b4

0001b988 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1b988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b98c:	4606      	mov	r6, r0
   1b98e:	460d      	mov	r5, r1
   1b990:	4690      	mov	r8, r2
   1b992:	461f      	mov	r7, r3
   1b994:	f04f 0320 	mov.w	r3, #32
   1b998:	f3ef 8911 	mrs	r9, BASEPRI
   1b99c:	f383 8811 	msr	BASEPRI, r3
   1b9a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b9a4:	482c      	ldr	r0, [pc, #176]	; (1ba58 <k_delayed_work_submit_to_queue+0xd0>)
   1b9a6:	f7ff ff79 	bl	1b89c <z_spin_lock_valid>
   1b9aa:	b940      	cbnz	r0, 1b9be <k_delayed_work_submit_to_queue+0x36>
   1b9ac:	492b      	ldr	r1, [pc, #172]	; (1ba5c <k_delayed_work_submit_to_queue+0xd4>)
   1b9ae:	482c      	ldr	r0, [pc, #176]	; (1ba60 <k_delayed_work_submit_to_queue+0xd8>)
   1b9b0:	227c      	movs	r2, #124	; 0x7c
   1b9b2:	f000 ff47 	bl	1c844 <printk>
   1b9b6:	217c      	movs	r1, #124	; 0x7c
   1b9b8:	4828      	ldr	r0, [pc, #160]	; (1ba5c <k_delayed_work_submit_to_queue+0xd4>)
   1b9ba:	f001 f9e9 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b9be:	4826      	ldr	r0, [pc, #152]	; (1ba58 <k_delayed_work_submit_to_queue+0xd0>)
   1b9c0:	f7ff ff88 	bl	1b8d4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1b9c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b9c6:	b1e3      	cbz	r3, 1ba02 <k_delayed_work_submit_to_queue+0x7a>
   1b9c8:	42b3      	cmp	r3, r6
   1b9ca:	d142      	bne.n	1ba52 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1b9cc:	4628      	mov	r0, r5
   1b9ce:	f005 fcd9 	bl	21384 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1b9d2:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1b9d6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1b9d8:	d015      	beq.n	1ba06 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   1b9da:	2800      	cmp	r0, #0
   1b9dc:	da14      	bge.n	1ba08 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b9de:	481e      	ldr	r0, [pc, #120]	; (1ba58 <k_delayed_work_submit_to_queue+0xd0>)
   1b9e0:	f7ff ff6a 	bl	1b8b8 <z_spin_unlock_valid>
   1b9e4:	b940      	cbnz	r0, 1b9f8 <k_delayed_work_submit_to_queue+0x70>
   1b9e6:	491d      	ldr	r1, [pc, #116]	; (1ba5c <k_delayed_work_submit_to_queue+0xd4>)
   1b9e8:	481d      	ldr	r0, [pc, #116]	; (1ba60 <k_delayed_work_submit_to_queue+0xd8>)
   1b9ea:	22a7      	movs	r2, #167	; 0xa7
   1b9ec:	f000 ff2a 	bl	1c844 <printk>
   1b9f0:	21a7      	movs	r1, #167	; 0xa7
   1b9f2:	481a      	ldr	r0, [pc, #104]	; (1ba5c <k_delayed_work_submit_to_queue+0xd4>)
   1b9f4:	f001 f9cc 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1b9f8:	f389 8811 	msr	BASEPRI, r9
   1b9fc:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1ba00:	e01c      	b.n	1ba3c <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   1ba02:	2e00      	cmp	r6, #0
   1ba04:	d0e2      	beq.n	1b9cc <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   1ba06:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ba08:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   1ba0c:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ba0e:	d118      	bne.n	1ba42 <k_delayed_work_submit_to_queue+0xba>
   1ba10:	4811      	ldr	r0, [pc, #68]	; (1ba58 <k_delayed_work_submit_to_queue+0xd0>)
   1ba12:	f7ff ff51 	bl	1b8b8 <z_spin_unlock_valid>
   1ba16:	b940      	cbnz	r0, 1ba2a <k_delayed_work_submit_to_queue+0xa2>
   1ba18:	4910      	ldr	r1, [pc, #64]	; (1ba5c <k_delayed_work_submit_to_queue+0xd4>)
   1ba1a:	4811      	ldr	r0, [pc, #68]	; (1ba60 <k_delayed_work_submit_to_queue+0xd8>)
   1ba1c:	22a7      	movs	r2, #167	; 0xa7
   1ba1e:	f000 ff11 	bl	1c844 <printk>
   1ba22:	21a7      	movs	r1, #167	; 0xa7
   1ba24:	480d      	ldr	r0, [pc, #52]	; (1ba5c <k_delayed_work_submit_to_queue+0xd4>)
   1ba26:	f001 f9b3 	bl	1cd90 <assert_post_action>
   1ba2a:	f389 8811 	msr	BASEPRI, r9
   1ba2e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1ba32:	4629      	mov	r1, r5
   1ba34:	4630      	mov	r0, r6
   1ba36:	f005 fc8c 	bl	21352 <k_work_submit_to_queue>
		return 0;
   1ba3a:	2400      	movs	r4, #0
}
   1ba3c:	4620      	mov	r0, r4
   1ba3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1ba42:	4642      	mov	r2, r8
   1ba44:	463b      	mov	r3, r7
   1ba46:	4907      	ldr	r1, [pc, #28]	; (1ba64 <k_delayed_work_submit_to_queue+0xdc>)
   1ba48:	f105 0010 	add.w	r0, r5, #16
   1ba4c:	f000 f8ba 	bl	1bbc4 <z_add_timeout>
   1ba50:	e7c5      	b.n	1b9de <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   1ba52:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1ba56:	e7c2      	b.n	1b9de <k_delayed_work_submit_to_queue+0x56>
   1ba58:	2000a004 	.word	0x2000a004
   1ba5c:	00022ca0 	.word	0x00022ca0
   1ba60:	00022c66 	.word	0x00022c66
   1ba64:	0002137b 	.word	0x0002137b

0001ba68 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1ba68:	b538      	push	{r3, r4, r5, lr}
   1ba6a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ba6c:	f04f 0320 	mov.w	r3, #32
   1ba70:	f3ef 8511 	mrs	r5, BASEPRI
   1ba74:	f383 8811 	msr	BASEPRI, r3
   1ba78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ba7c:	4815      	ldr	r0, [pc, #84]	; (1bad4 <k_delayed_work_cancel+0x6c>)
   1ba7e:	f7ff ff0d 	bl	1b89c <z_spin_lock_valid>
   1ba82:	b940      	cbnz	r0, 1ba96 <k_delayed_work_cancel+0x2e>
   1ba84:	4914      	ldr	r1, [pc, #80]	; (1bad8 <k_delayed_work_cancel+0x70>)
   1ba86:	4815      	ldr	r0, [pc, #84]	; (1badc <k_delayed_work_cancel+0x74>)
   1ba88:	227c      	movs	r2, #124	; 0x7c
   1ba8a:	f000 fedb 	bl	1c844 <printk>
   1ba8e:	217c      	movs	r1, #124	; 0x7c
   1ba90:	4811      	ldr	r0, [pc, #68]	; (1bad8 <k_delayed_work_cancel+0x70>)
   1ba92:	f001 f97d 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ba96:	480f      	ldr	r0, [pc, #60]	; (1bad4 <k_delayed_work_cancel+0x6c>)
   1ba98:	f7ff ff1c 	bl	1b8d4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   1ba9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ba9e:	b1b3      	cbz	r3, 1bace <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   1baa0:	4620      	mov	r0, r4
   1baa2:	f005 fc6f 	bl	21384 <work_cancel>
   1baa6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1baa8:	480a      	ldr	r0, [pc, #40]	; (1bad4 <k_delayed_work_cancel+0x6c>)
   1baaa:	f7ff ff05 	bl	1b8b8 <z_spin_unlock_valid>
   1baae:	b940      	cbnz	r0, 1bac2 <k_delayed_work_cancel+0x5a>
   1bab0:	4909      	ldr	r1, [pc, #36]	; (1bad8 <k_delayed_work_cancel+0x70>)
   1bab2:	480a      	ldr	r0, [pc, #40]	; (1badc <k_delayed_work_cancel+0x74>)
   1bab4:	22a7      	movs	r2, #167	; 0xa7
   1bab6:	f000 fec5 	bl	1c844 <printk>
   1baba:	21a7      	movs	r1, #167	; 0xa7
   1babc:	4806      	ldr	r0, [pc, #24]	; (1bad8 <k_delayed_work_cancel+0x70>)
   1babe:	f001 f967 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1bac2:	f385 8811 	msr	BASEPRI, r5
   1bac6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   1baca:	4620      	mov	r0, r4
   1bacc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1bace:	f06f 0415 	mvn.w	r4, #21
   1bad2:	e7e9      	b.n	1baa8 <k_delayed_work_cancel+0x40>
   1bad4:	2000a004 	.word	0x2000a004
   1bad8:	00022ca0 	.word	0x00022ca0
   1badc:	00022c66 	.word	0x00022c66

0001bae0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1bae0:	4a02      	ldr	r2, [pc, #8]	; (1baec <boot_banner+0xc>)
   1bae2:	4903      	ldr	r1, [pc, #12]	; (1baf0 <boot_banner+0x10>)
   1bae4:	4803      	ldr	r0, [pc, #12]	; (1baf4 <boot_banner+0x14>)
   1bae6:	f000 bead 	b.w	1c844 <printk>
   1baea:	bf00      	nop
   1baec:	000260f7 	.word	0x000260f7
   1baf0:	000262be 	.word	0x000262be
   1baf4:	000262cb 	.word	0x000262cb

0001baf8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1baf8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1bafa:	4806      	ldr	r0, [pc, #24]	; (1bb14 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1bafc:	4a06      	ldr	r2, [pc, #24]	; (1bb18 <z_data_copy+0x20>)
   1bafe:	4907      	ldr	r1, [pc, #28]	; (1bb1c <z_data_copy+0x24>)
   1bb00:	1a12      	subs	r2, r2, r0
   1bb02:	f002 fb57 	bl	1e1b4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bb06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1bb0a:	4a05      	ldr	r2, [pc, #20]	; (1bb20 <z_data_copy+0x28>)
   1bb0c:	4905      	ldr	r1, [pc, #20]	; (1bb24 <z_data_copy+0x2c>)
   1bb0e:	4806      	ldr	r0, [pc, #24]	; (1bb28 <z_data_copy+0x30>)
   1bb10:	f002 bb50 	b.w	1e1b4 <memcpy>
   1bb14:	20008000 	.word	0x20008000
   1bb18:	200086c8 	.word	0x200086c8
   1bb1c:	00026360 	.word	0x00026360
   1bb20:	00000000 	.word	0x00000000
   1bb24:	00026360 	.word	0x00026360
   1bb28:	20008000 	.word	0x20008000

0001bb2c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1bb2c:	4b03      	ldr	r3, [pc, #12]	; (1bb3c <elapsed+0x10>)
   1bb2e:	681b      	ldr	r3, [r3, #0]
   1bb30:	b90b      	cbnz	r3, 1bb36 <elapsed+0xa>
   1bb32:	f7f0 bd79 	b.w	c628 <z_clock_elapsed>
}
   1bb36:	2000      	movs	r0, #0
   1bb38:	4770      	bx	lr
   1bb3a:	bf00      	nop
   1bb3c:	2000a008 	.word	0x2000a008

0001bb40 <next_timeout>:
	return list->head == list;
   1bb40:	4b11      	ldr	r3, [pc, #68]	; (1bb88 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1bb42:	b510      	push	{r4, lr}
   1bb44:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb46:	429c      	cmp	r4, r3
   1bb48:	bf08      	it	eq
   1bb4a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1bb4c:	f7ff ffee 	bl	1bb2c <elapsed>
   1bb50:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1bb52:	b16c      	cbz	r4, 1bb70 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bb54:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   1bb58:	1ac0      	subs	r0, r0, r3
   1bb5a:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1bb5e:	2801      	cmp	r0, #1
   1bb60:	f173 0200 	sbcs.w	r2, r3, #0
   1bb64:	db0d      	blt.n	1bb82 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bb66:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1bb6a:	f173 0300 	sbcs.w	r3, r3, #0
   1bb6e:	db01      	blt.n	1bb74 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1bb70:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bb74:	4b05      	ldr	r3, [pc, #20]	; (1bb8c <next_timeout+0x4c>)
   1bb76:	695b      	ldr	r3, [r3, #20]
   1bb78:	b113      	cbz	r3, 1bb80 <next_timeout+0x40>
   1bb7a:	4298      	cmp	r0, r3
   1bb7c:	bfa8      	it	ge
   1bb7e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bb80:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bb82:	2000      	movs	r0, #0
   1bb84:	e7f6      	b.n	1bb74 <next_timeout+0x34>
   1bb86:	bf00      	nop
   1bb88:	20008418 	.word	0x20008418
   1bb8c:	20009fbc 	.word	0x20009fbc

0001bb90 <remove_timeout>:
{
   1bb90:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1bb92:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bb94:	b168      	cbz	r0, 1bbb2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1bb96:	4a0a      	ldr	r2, [pc, #40]	; (1bbc0 <remove_timeout+0x30>)
   1bb98:	6852      	ldr	r2, [r2, #4]
   1bb9a:	4290      	cmp	r0, r2
   1bb9c:	d009      	beq.n	1bbb2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1bb9e:	b143      	cbz	r3, 1bbb2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1bba0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bba4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bba8:	1912      	adds	r2, r2, r4
   1bbaa:	eb41 0105 	adc.w	r1, r1, r5
   1bbae:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1bbb2:	6842      	ldr	r2, [r0, #4]
   1bbb4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bbb6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bbb8:	2300      	movs	r3, #0
	node->prev = NULL;
   1bbba:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bbbe:	bd30      	pop	{r4, r5, pc}
   1bbc0:	20008418 	.word	0x20008418

0001bbc4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bbc8:	bf08      	it	eq
   1bbca:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1bbce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bbd2:	4604      	mov	r4, r0
   1bbd4:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bbd6:	f000 808c 	beq.w	1bcf2 <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1bbda:	f06f 0601 	mvn.w	r6, #1
   1bbde:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1bbe2:	1c55      	adds	r5, r2, #1
   1bbe4:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1bbe8:	1b73      	subs	r3, r6, r5
   1bbea:	eb69 0307 	sbc.w	r3, r9, r7
   1bbee:	2b00      	cmp	r3, #0
   1bbf0:	db0d      	blt.n	1bc0e <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1bbf2:	f7ff ff9b 	bl	1bb2c <elapsed>
   1bbf6:	4b44      	ldr	r3, [pc, #272]	; (1bd08 <z_add_timeout+0x144>)
   1bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bbfc:	1ab6      	subs	r6, r6, r2
   1bbfe:	eb69 0303 	sbc.w	r3, r9, r3
   1bc02:	1b75      	subs	r5, r6, r5
   1bc04:	eb63 0707 	sbc.w	r7, r3, r7
   1bc08:	1a2d      	subs	r5, r5, r0
   1bc0a:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1bc0e:	6823      	ldr	r3, [r4, #0]
   1bc10:	b143      	cbz	r3, 1bc24 <z_add_timeout+0x60>
   1bc12:	493e      	ldr	r1, [pc, #248]	; (1bd0c <z_add_timeout+0x148>)
   1bc14:	483e      	ldr	r0, [pc, #248]	; (1bd10 <z_add_timeout+0x14c>)
   1bc16:	2268      	movs	r2, #104	; 0x68
   1bc18:	f000 fe14 	bl	1c844 <printk>
   1bc1c:	2168      	movs	r1, #104	; 0x68
   1bc1e:	483b      	ldr	r0, [pc, #236]	; (1bd0c <z_add_timeout+0x148>)
   1bc20:	f001 f8b6 	bl	1cd90 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   1bc24:	2d01      	cmp	r5, #1
   1bc26:	f177 0300 	sbcs.w	r3, r7, #0
   1bc2a:	bfbc      	itt	lt
   1bc2c:	2501      	movlt	r5, #1
   1bc2e:	2700      	movlt	r7, #0
	to->fn = fn;
   1bc30:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   1bc34:	f04f 0320 	mov.w	r3, #32
   1bc38:	f3ef 8611 	mrs	r6, BASEPRI
   1bc3c:	f383 8811 	msr	BASEPRI, r3
   1bc40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bc44:	4833      	ldr	r0, [pc, #204]	; (1bd14 <z_add_timeout+0x150>)
   1bc46:	f7ff fe29 	bl	1b89c <z_spin_lock_valid>
   1bc4a:	b940      	cbnz	r0, 1bc5e <z_add_timeout+0x9a>
   1bc4c:	4932      	ldr	r1, [pc, #200]	; (1bd18 <z_add_timeout+0x154>)
   1bc4e:	4830      	ldr	r0, [pc, #192]	; (1bd10 <z_add_timeout+0x14c>)
   1bc50:	227c      	movs	r2, #124	; 0x7c
   1bc52:	f000 fdf7 	bl	1c844 <printk>
   1bc56:	217c      	movs	r1, #124	; 0x7c
   1bc58:	482f      	ldr	r0, [pc, #188]	; (1bd18 <z_add_timeout+0x154>)
   1bc5a:	f001 f899 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bc5e:	482d      	ldr	r0, [pc, #180]	; (1bd14 <z_add_timeout+0x150>)
   1bc60:	f7ff fe38 	bl	1b8d4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1bc64:	f7ff ff62 	bl	1bb2c <elapsed>
	return list->head == list;
   1bc68:	4a2c      	ldr	r2, [pc, #176]	; (1bd1c <z_add_timeout+0x158>)
   1bc6a:	1945      	adds	r5, r0, r5
   1bc6c:	6813      	ldr	r3, [r2, #0]
   1bc6e:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc72:	4293      	cmp	r3, r2
   1bc74:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1bc78:	d002      	beq.n	1bc80 <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   1bc7a:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1bc7e:	b933      	cbnz	r3, 1bc8e <z_add_timeout+0xca>
	node->prev = list->tail;
   1bc80:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1bc82:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   1bc84:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1bc86:	6853      	ldr	r3, [r2, #4]
   1bc88:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bc8a:	6054      	str	r4, [r2, #4]
}
   1bc8c:	e011      	b.n	1bcb2 <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   1bc8e:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   1bc92:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   1bc96:	4281      	cmp	r1, r0
   1bc98:	eb75 0e07 	sbcs.w	lr, r5, r7
   1bc9c:	da2b      	bge.n	1bcf6 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   1bc9e:	1a41      	subs	r1, r0, r1
   1bca0:	eb67 0505 	sbc.w	r5, r7, r5
   1bca4:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   1bca8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1bcaa:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1bcae:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1bcb0:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1bcb2:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcb4:	4293      	cmp	r3, r2
   1bcb6:	d00b      	beq.n	1bcd0 <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bcb8:	429c      	cmp	r4, r3
   1bcba:	d109      	bne.n	1bcd0 <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1bcbc:	f7ff ff40 	bl	1bb40 <next_timeout>

			if (next_time == 0 ||
   1bcc0:	b118      	cbz	r0, 1bcca <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   1bcc2:	4b17      	ldr	r3, [pc, #92]	; (1bd20 <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   1bcc4:	695b      	ldr	r3, [r3, #20]
   1bcc6:	4283      	cmp	r3, r0
   1bcc8:	d002      	beq.n	1bcd0 <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   1bcca:	2100      	movs	r1, #0
   1bccc:	f7f0 fc7a 	bl	c5c4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bcd0:	4810      	ldr	r0, [pc, #64]	; (1bd14 <z_add_timeout+0x150>)
   1bcd2:	f7ff fdf1 	bl	1b8b8 <z_spin_unlock_valid>
   1bcd6:	b940      	cbnz	r0, 1bcea <z_add_timeout+0x126>
   1bcd8:	490f      	ldr	r1, [pc, #60]	; (1bd18 <z_add_timeout+0x154>)
   1bcda:	480d      	ldr	r0, [pc, #52]	; (1bd10 <z_add_timeout+0x14c>)
   1bcdc:	22a7      	movs	r2, #167	; 0xa7
   1bcde:	f000 fdb1 	bl	1c844 <printk>
   1bce2:	21a7      	movs	r1, #167	; 0xa7
   1bce4:	480c      	ldr	r0, [pc, #48]	; (1bd18 <z_add_timeout+0x154>)
   1bce6:	f001 f853 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1bcea:	f386 8811 	msr	BASEPRI, r6
   1bcee:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   1bcf6:	1a09      	subs	r1, r1, r0
   1bcf8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1bcfc:	4563      	cmp	r3, ip
   1bcfe:	e9c4 1504 	strd	r1, r5, [r4, #16]
   1bd02:	d0bd      	beq.n	1bc80 <z_add_timeout+0xbc>
   1bd04:	681b      	ldr	r3, [r3, #0]
   1bd06:	e7ba      	b.n	1bc7e <z_add_timeout+0xba>
   1bd08:	200096e0 	.word	0x200096e0
   1bd0c:	000262f2 	.word	0x000262f2
   1bd10:	00022c66 	.word	0x00022c66
   1bd14:	2000a00c 	.word	0x2000a00c
   1bd18:	00022ca0 	.word	0x00022ca0
   1bd1c:	20008418 	.word	0x20008418
   1bd20:	20009fbc 	.word	0x20009fbc

0001bd24 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1bd24:	b538      	push	{r3, r4, r5, lr}
   1bd26:	4604      	mov	r4, r0
	__asm__ volatile(
   1bd28:	f04f 0320 	mov.w	r3, #32
   1bd2c:	f3ef 8511 	mrs	r5, BASEPRI
   1bd30:	f383 8811 	msr	BASEPRI, r3
   1bd34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bd38:	4815      	ldr	r0, [pc, #84]	; (1bd90 <z_abort_timeout+0x6c>)
   1bd3a:	f7ff fdaf 	bl	1b89c <z_spin_lock_valid>
   1bd3e:	b940      	cbnz	r0, 1bd52 <z_abort_timeout+0x2e>
   1bd40:	4914      	ldr	r1, [pc, #80]	; (1bd94 <z_abort_timeout+0x70>)
   1bd42:	4815      	ldr	r0, [pc, #84]	; (1bd98 <z_abort_timeout+0x74>)
   1bd44:	227c      	movs	r2, #124	; 0x7c
   1bd46:	f000 fd7d 	bl	1c844 <printk>
   1bd4a:	217c      	movs	r1, #124	; 0x7c
   1bd4c:	4811      	ldr	r0, [pc, #68]	; (1bd94 <z_abort_timeout+0x70>)
   1bd4e:	f001 f81f 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bd52:	480f      	ldr	r0, [pc, #60]	; (1bd90 <z_abort_timeout+0x6c>)
   1bd54:	f7ff fdbe 	bl	1b8d4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1bd58:	6823      	ldr	r3, [r4, #0]
   1bd5a:	b1b3      	cbz	r3, 1bd8a <z_abort_timeout+0x66>
			remove_timeout(to);
   1bd5c:	4620      	mov	r0, r4
   1bd5e:	f7ff ff17 	bl	1bb90 <remove_timeout>
			ret = 0;
   1bd62:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bd64:	480a      	ldr	r0, [pc, #40]	; (1bd90 <z_abort_timeout+0x6c>)
   1bd66:	f7ff fda7 	bl	1b8b8 <z_spin_unlock_valid>
   1bd6a:	b940      	cbnz	r0, 1bd7e <z_abort_timeout+0x5a>
   1bd6c:	4909      	ldr	r1, [pc, #36]	; (1bd94 <z_abort_timeout+0x70>)
   1bd6e:	480a      	ldr	r0, [pc, #40]	; (1bd98 <z_abort_timeout+0x74>)
   1bd70:	22a7      	movs	r2, #167	; 0xa7
   1bd72:	f000 fd67 	bl	1c844 <printk>
   1bd76:	21a7      	movs	r1, #167	; 0xa7
   1bd78:	4806      	ldr	r0, [pc, #24]	; (1bd94 <z_abort_timeout+0x70>)
   1bd7a:	f001 f809 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1bd7e:	f385 8811 	msr	BASEPRI, r5
   1bd82:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1bd86:	4620      	mov	r0, r4
   1bd88:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1bd8a:	f06f 0415 	mvn.w	r4, #21
   1bd8e:	e7e9      	b.n	1bd64 <z_abort_timeout+0x40>
   1bd90:	2000a00c 	.word	0x2000a00c
   1bd94:	00022ca0 	.word	0x00022ca0
   1bd98:	00022c66 	.word	0x00022c66

0001bd9c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1bd9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bd9e:	f04f 0320 	mov.w	r3, #32
   1bda2:	f3ef 8511 	mrs	r5, BASEPRI
   1bda6:	f383 8811 	msr	BASEPRI, r3
   1bdaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bdae:	4813      	ldr	r0, [pc, #76]	; (1bdfc <z_get_next_timeout_expiry+0x60>)
   1bdb0:	f7ff fd74 	bl	1b89c <z_spin_lock_valid>
   1bdb4:	b940      	cbnz	r0, 1bdc8 <z_get_next_timeout_expiry+0x2c>
   1bdb6:	4912      	ldr	r1, [pc, #72]	; (1be00 <z_get_next_timeout_expiry+0x64>)
   1bdb8:	4812      	ldr	r0, [pc, #72]	; (1be04 <z_get_next_timeout_expiry+0x68>)
   1bdba:	227c      	movs	r2, #124	; 0x7c
   1bdbc:	f000 fd42 	bl	1c844 <printk>
   1bdc0:	217c      	movs	r1, #124	; 0x7c
   1bdc2:	480f      	ldr	r0, [pc, #60]	; (1be00 <z_get_next_timeout_expiry+0x64>)
   1bdc4:	f000 ffe4 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bdc8:	480c      	ldr	r0, [pc, #48]	; (1bdfc <z_get_next_timeout_expiry+0x60>)
   1bdca:	f7ff fd83 	bl	1b8d4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1bdce:	f7ff feb7 	bl	1bb40 <next_timeout>
   1bdd2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bdd4:	4809      	ldr	r0, [pc, #36]	; (1bdfc <z_get_next_timeout_expiry+0x60>)
   1bdd6:	f7ff fd6f 	bl	1b8b8 <z_spin_unlock_valid>
   1bdda:	b940      	cbnz	r0, 1bdee <z_get_next_timeout_expiry+0x52>
   1bddc:	4908      	ldr	r1, [pc, #32]	; (1be00 <z_get_next_timeout_expiry+0x64>)
   1bdde:	4809      	ldr	r0, [pc, #36]	; (1be04 <z_get_next_timeout_expiry+0x68>)
   1bde0:	22a7      	movs	r2, #167	; 0xa7
   1bde2:	f000 fd2f 	bl	1c844 <printk>
   1bde6:	21a7      	movs	r1, #167	; 0xa7
   1bde8:	4805      	ldr	r0, [pc, #20]	; (1be00 <z_get_next_timeout_expiry+0x64>)
   1bdea:	f000 ffd1 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1bdee:	f385 8811 	msr	BASEPRI, r5
   1bdf2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1bdf6:	4620      	mov	r0, r4
   1bdf8:	bd38      	pop	{r3, r4, r5, pc}
   1bdfa:	bf00      	nop
   1bdfc:	2000a00c 	.word	0x2000a00c
   1be00:	00022ca0 	.word	0x00022ca0
   1be04:	00022c66 	.word	0x00022c66

0001be08 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1be08:	b570      	push	{r4, r5, r6, lr}
   1be0a:	4604      	mov	r4, r0
   1be0c:	460d      	mov	r5, r1
	__asm__ volatile(
   1be0e:	f04f 0320 	mov.w	r3, #32
   1be12:	f3ef 8611 	mrs	r6, BASEPRI
   1be16:	f383 8811 	msr	BASEPRI, r3
   1be1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be1e:	4816      	ldr	r0, [pc, #88]	; (1be78 <z_set_timeout_expiry+0x70>)
   1be20:	f7ff fd3c 	bl	1b89c <z_spin_lock_valid>
   1be24:	b940      	cbnz	r0, 1be38 <z_set_timeout_expiry+0x30>
   1be26:	4915      	ldr	r1, [pc, #84]	; (1be7c <z_set_timeout_expiry+0x74>)
   1be28:	4815      	ldr	r0, [pc, #84]	; (1be80 <z_set_timeout_expiry+0x78>)
   1be2a:	227c      	movs	r2, #124	; 0x7c
   1be2c:	f000 fd0a 	bl	1c844 <printk>
   1be30:	217c      	movs	r1, #124	; 0x7c
   1be32:	4812      	ldr	r0, [pc, #72]	; (1be7c <z_set_timeout_expiry+0x74>)
   1be34:	f000 ffac 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1be38:	480f      	ldr	r0, [pc, #60]	; (1be78 <z_set_timeout_expiry+0x70>)
   1be3a:	f7ff fd4b 	bl	1b8d4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1be3e:	f7ff fe7f 	bl	1bb40 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1be42:	2801      	cmp	r0, #1
   1be44:	dd05      	ble.n	1be52 <z_set_timeout_expiry+0x4a>
   1be46:	42a0      	cmp	r0, r4
   1be48:	dd03      	ble.n	1be52 <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   1be4a:	4629      	mov	r1, r5
   1be4c:	4620      	mov	r0, r4
   1be4e:	f7f0 fbb9 	bl	c5c4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be52:	4809      	ldr	r0, [pc, #36]	; (1be78 <z_set_timeout_expiry+0x70>)
   1be54:	f7ff fd30 	bl	1b8b8 <z_spin_unlock_valid>
   1be58:	b940      	cbnz	r0, 1be6c <z_set_timeout_expiry+0x64>
   1be5a:	4908      	ldr	r1, [pc, #32]	; (1be7c <z_set_timeout_expiry+0x74>)
   1be5c:	4808      	ldr	r0, [pc, #32]	; (1be80 <z_set_timeout_expiry+0x78>)
   1be5e:	22a7      	movs	r2, #167	; 0xa7
   1be60:	f000 fcf0 	bl	1c844 <printk>
   1be64:	21a7      	movs	r1, #167	; 0xa7
   1be66:	4805      	ldr	r0, [pc, #20]	; (1be7c <z_set_timeout_expiry+0x74>)
   1be68:	f000 ff92 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1be6c:	f386 8811 	msr	BASEPRI, r6
   1be70:	f3bf 8f6f 	isb	sy
		}
	}
}
   1be74:	bd70      	pop	{r4, r5, r6, pc}
   1be76:	bf00      	nop
   1be78:	2000a00c 	.word	0x2000a00c
   1be7c:	00022ca0 	.word	0x00022ca0
   1be80:	00022c66 	.word	0x00022c66

0001be84 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   1be84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1be88:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1be8a:	f7fe fe61 	bl	1ab50 <z_time_slice>
	__asm__ volatile(
   1be8e:	f04f 0320 	mov.w	r3, #32
   1be92:	f3ef 8511 	mrs	r5, BASEPRI
   1be96:	f383 8811 	msr	BASEPRI, r3
   1be9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be9e:	4842      	ldr	r0, [pc, #264]	; (1bfa8 <z_clock_announce+0x124>)
   1bea0:	f7ff fcfc 	bl	1b89c <z_spin_lock_valid>
   1bea4:	b940      	cbnz	r0, 1beb8 <z_clock_announce+0x34>
   1bea6:	4941      	ldr	r1, [pc, #260]	; (1bfac <z_clock_announce+0x128>)
   1bea8:	4841      	ldr	r0, [pc, #260]	; (1bfb0 <z_clock_announce+0x12c>)
   1beaa:	227c      	movs	r2, #124	; 0x7c
   1beac:	f000 fcca 	bl	1c844 <printk>
   1beb0:	217c      	movs	r1, #124	; 0x7c
   1beb2:	483e      	ldr	r0, [pc, #248]	; (1bfac <z_clock_announce+0x128>)
   1beb4:	f000 ff6c 	bl	1cd90 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1beb8:	4f3e      	ldr	r7, [pc, #248]	; (1bfb4 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   1beba:	483b      	ldr	r0, [pc, #236]	; (1bfa8 <z_clock_announce+0x124>)
	return list->head == list;
   1bebc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1bfb8 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1bec0:	4e3e      	ldr	r6, [pc, #248]	; (1bfbc <z_clock_announce+0x138>)
   1bec2:	f7ff fd07 	bl	1b8d4 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   1bec6:	603c      	str	r4, [r7, #0]
   1bec8:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1becc:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bece:	4544      	cmp	r4, r8
   1bed0:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   1bed4:	e9d6 1e00 	ldrd	r1, lr, [r6]
   1bed8:	d00b      	beq.n	1bef2 <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1beda:	b154      	cbz	r4, 1bef2 <z_clock_announce+0x6e>
   1bedc:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   1bee0:	429a      	cmp	r2, r3
   1bee2:	eb70 090c 	sbcs.w	r9, r0, ip
   1bee6:	da23      	bge.n	1bf30 <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bee8:	1a9b      	subs	r3, r3, r2
   1beea:	eb6c 0c00 	sbc.w	ip, ip, r0
   1beee:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1bef2:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1bef4:	1852      	adds	r2, r2, r1
   1bef6:	eb4e 0000 	adc.w	r0, lr, r0
   1befa:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   1befe:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   1bf00:	f7ff fe1e 	bl	1bb40 <next_timeout>
   1bf04:	4621      	mov	r1, r4
   1bf06:	f7f0 fb5d 	bl	c5c4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bf0a:	4827      	ldr	r0, [pc, #156]	; (1bfa8 <z_clock_announce+0x124>)
   1bf0c:	f7ff fcd4 	bl	1b8b8 <z_spin_unlock_valid>
   1bf10:	b940      	cbnz	r0, 1bf24 <z_clock_announce+0xa0>
   1bf12:	4926      	ldr	r1, [pc, #152]	; (1bfac <z_clock_announce+0x128>)
   1bf14:	4826      	ldr	r0, [pc, #152]	; (1bfb0 <z_clock_announce+0x12c>)
   1bf16:	22a7      	movs	r2, #167	; 0xa7
   1bf18:	f000 fc94 	bl	1c844 <printk>
   1bf1c:	21a7      	movs	r1, #167	; 0xa7
   1bf1e:	4823      	ldr	r0, [pc, #140]	; (1bfac <z_clock_announce+0x128>)
   1bf20:	f000 ff36 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1bf24:	f385 8811 	msr	BASEPRI, r5
   1bf28:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bf2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1bf30:	1859      	adds	r1, r3, r1
   1bf32:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   1bf36:	1ad3      	subs	r3, r2, r3
   1bf38:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   1bf3a:	2200      	movs	r2, #0
   1bf3c:	2300      	movs	r3, #0
		curr_tick += dt;
   1bf3e:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   1bf42:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1bf46:	4620      	mov	r0, r4
   1bf48:	f7ff fe22 	bl	1bb90 <remove_timeout>
   1bf4c:	4816      	ldr	r0, [pc, #88]	; (1bfa8 <z_clock_announce+0x124>)
   1bf4e:	f7ff fcb3 	bl	1b8b8 <z_spin_unlock_valid>
   1bf52:	b940      	cbnz	r0, 1bf66 <z_clock_announce+0xe2>
   1bf54:	4915      	ldr	r1, [pc, #84]	; (1bfac <z_clock_announce+0x128>)
   1bf56:	4816      	ldr	r0, [pc, #88]	; (1bfb0 <z_clock_announce+0x12c>)
   1bf58:	22a7      	movs	r2, #167	; 0xa7
   1bf5a:	f000 fc73 	bl	1c844 <printk>
   1bf5e:	21a7      	movs	r1, #167	; 0xa7
   1bf60:	4812      	ldr	r0, [pc, #72]	; (1bfac <z_clock_announce+0x128>)
   1bf62:	f000 ff15 	bl	1cd90 <assert_post_action>
   1bf66:	f385 8811 	msr	BASEPRI, r5
   1bf6a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bf6e:	4620      	mov	r0, r4
   1bf70:	68a3      	ldr	r3, [r4, #8]
   1bf72:	4798      	blx	r3
	__asm__ volatile(
   1bf74:	f04f 0320 	mov.w	r3, #32
   1bf78:	f3ef 8511 	mrs	r5, BASEPRI
   1bf7c:	f383 8811 	msr	BASEPRI, r3
   1bf80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bf84:	4808      	ldr	r0, [pc, #32]	; (1bfa8 <z_clock_announce+0x124>)
   1bf86:	f7ff fc89 	bl	1b89c <z_spin_lock_valid>
   1bf8a:	b940      	cbnz	r0, 1bf9e <z_clock_announce+0x11a>
   1bf8c:	4907      	ldr	r1, [pc, #28]	; (1bfac <z_clock_announce+0x128>)
   1bf8e:	4808      	ldr	r0, [pc, #32]	; (1bfb0 <z_clock_announce+0x12c>)
   1bf90:	227c      	movs	r2, #124	; 0x7c
   1bf92:	f000 fc57 	bl	1c844 <printk>
   1bf96:	217c      	movs	r1, #124	; 0x7c
   1bf98:	4804      	ldr	r0, [pc, #16]	; (1bfac <z_clock_announce+0x128>)
   1bf9a:	f000 fef9 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bf9e:	4802      	ldr	r0, [pc, #8]	; (1bfa8 <z_clock_announce+0x124>)
   1bfa0:	f7ff fc98 	bl	1b8d4 <z_spin_lock_set_owner>
	return k;
   1bfa4:	e790      	b.n	1bec8 <z_clock_announce+0x44>
   1bfa6:	bf00      	nop
   1bfa8:	2000a00c 	.word	0x2000a00c
   1bfac:	00022ca0 	.word	0x00022ca0
   1bfb0:	00022c66 	.word	0x00022c66
   1bfb4:	2000a008 	.word	0x2000a008
   1bfb8:	20008418 	.word	0x20008418
   1bfbc:	200096e0 	.word	0x200096e0

0001bfc0 <z_tick_get>:

int64_t z_tick_get(void)
{
   1bfc0:	b570      	push	{r4, r5, r6, lr}
   1bfc2:	f04f 0320 	mov.w	r3, #32
   1bfc6:	f3ef 8611 	mrs	r6, BASEPRI
   1bfca:	f383 8811 	msr	BASEPRI, r3
   1bfce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bfd2:	4816      	ldr	r0, [pc, #88]	; (1c02c <z_tick_get+0x6c>)
   1bfd4:	f7ff fc62 	bl	1b89c <z_spin_lock_valid>
   1bfd8:	b940      	cbnz	r0, 1bfec <z_tick_get+0x2c>
   1bfda:	4915      	ldr	r1, [pc, #84]	; (1c030 <z_tick_get+0x70>)
   1bfdc:	4815      	ldr	r0, [pc, #84]	; (1c034 <z_tick_get+0x74>)
   1bfde:	227c      	movs	r2, #124	; 0x7c
   1bfe0:	f000 fc30 	bl	1c844 <printk>
   1bfe4:	217c      	movs	r1, #124	; 0x7c
   1bfe6:	4812      	ldr	r0, [pc, #72]	; (1c030 <z_tick_get+0x70>)
   1bfe8:	f000 fed2 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bfec:	480f      	ldr	r0, [pc, #60]	; (1c02c <z_tick_get+0x6c>)
   1bfee:	f7ff fc71 	bl	1b8d4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1bff2:	f7f0 fb19 	bl	c628 <z_clock_elapsed>
   1bff6:	4b10      	ldr	r3, [pc, #64]	; (1c038 <z_tick_get+0x78>)
   1bff8:	e9d3 4500 	ldrd	r4, r5, [r3]
   1bffc:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bffe:	480b      	ldr	r0, [pc, #44]	; (1c02c <z_tick_get+0x6c>)
   1c000:	f145 0500 	adc.w	r5, r5, #0
   1c004:	f7ff fc58 	bl	1b8b8 <z_spin_unlock_valid>
   1c008:	b940      	cbnz	r0, 1c01c <z_tick_get+0x5c>
   1c00a:	4909      	ldr	r1, [pc, #36]	; (1c030 <z_tick_get+0x70>)
   1c00c:	4809      	ldr	r0, [pc, #36]	; (1c034 <z_tick_get+0x74>)
   1c00e:	22a7      	movs	r2, #167	; 0xa7
   1c010:	f000 fc18 	bl	1c844 <printk>
   1c014:	21a7      	movs	r1, #167	; 0xa7
   1c016:	4806      	ldr	r0, [pc, #24]	; (1c030 <z_tick_get+0x70>)
   1c018:	f000 feba 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1c01c:	f386 8811 	msr	BASEPRI, r6
   1c020:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c024:	4620      	mov	r0, r4
   1c026:	4629      	mov	r1, r5
   1c028:	bd70      	pop	{r4, r5, r6, pc}
   1c02a:	bf00      	nop
   1c02c:	2000a00c 	.word	0x2000a00c
   1c030:	00022ca0 	.word	0x00022ca0
   1c034:	00022c66 	.word	0x00022c66
   1c038:	200096e0 	.word	0x200096e0

0001c03c <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1c03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1c040:	6884      	ldr	r4, [r0, #8]
{
   1c042:	4605      	mov	r5, r0
   1c044:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1c046:	b1b4      	cbz	r4, 1c076 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   1c048:	7863      	ldrb	r3, [r4, #1]
   1c04a:	2b01      	cmp	r3, #1
   1c04c:	d145      	bne.n	1c0da <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1c04e:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   1c052:	d10a      	bne.n	1c06a <signal_poll_event+0x2e>
   1c054:	22e3      	movs	r2, #227	; 0xe3
   1c056:	492d      	ldr	r1, [pc, #180]	; (1c10c <signal_poll_event+0xd0>)
   1c058:	482d      	ldr	r0, [pc, #180]	; (1c110 <signal_poll_event+0xd4>)
   1c05a:	f000 fbf3 	bl	1c844 <printk>
   1c05e:	21e3      	movs	r1, #227	; 0xe3
   1c060:	482a      	ldr	r0, [pc, #168]	; (1c10c <signal_poll_event+0xd0>)
   1c062:	f000 fe95 	bl	1cd90 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1c066:	7b7b      	ldrb	r3, [r7, #13]
   1c068:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   1c06a:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1c06e:	f013 0302 	ands.w	r3, r3, #2
   1c072:	d10a      	bne.n	1c08a <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   1c074:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1c076:	2000      	movs	r0, #0
	event->state |= state;
   1c078:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1c07a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1c07c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1c080:	430e      	orrs	r6, r1
   1c082:	f366 3310 	bfi	r3, r6, #12, #5
   1c086:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1c088:	e00b      	b.n	1c0a2 <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   1c08a:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1c08e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c092:	bf08      	it	eq
   1c094:	f112 0f02 	cmneq.w	r2, #2
   1c098:	d105      	bne.n	1c0a6 <signal_poll_event+0x6a>
		poller->is_polling = false;
   1c09a:	2300      	movs	r3, #0
		return -EAGAIN;
   1c09c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1c0a0:	7023      	strb	r3, [r4, #0]
}
   1c0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1c0a6:	4638      	mov	r0, r7
   1c0a8:	f7fe fb30 	bl	1a70c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1c0ac:	2e08      	cmp	r6, #8
   1c0ae:	bf0c      	ite	eq
   1c0b0:	f06f 0303 	mvneq.w	r3, #3
   1c0b4:	2300      	movne	r3, #0
   1c0b6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c0b8:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1c0bc:	06db      	lsls	r3, r3, #27
   1c0be:	d104      	bne.n	1c0ca <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   1c0c0:	f854 8c54 	ldr.w	r8, [r4, #-84]
   1c0c4:	f1b8 0f00 	cmp.w	r8, #0
   1c0c8:	d001      	beq.n	1c0ce <signal_poll_event+0x92>
		poller->is_polling = false;
   1c0ca:	2300      	movs	r3, #0
   1c0cc:	e7d2      	b.n	1c074 <signal_poll_event+0x38>
	z_ready_thread(thread);
   1c0ce:	4638      	mov	r0, r7
   1c0d0:	f7fe fc36 	bl	1a940 <z_ready_thread>
		poller->is_polling = false;
   1c0d4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1c0d8:	e7cd      	b.n	1c076 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   1c0da:	2b02      	cmp	r3, #2
   1c0dc:	d1f5      	bne.n	1c0ca <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1c0de:	7823      	ldrb	r3, [r4, #0]
   1c0e0:	2b00      	cmp	r3, #0
   1c0e2:	d0c8      	beq.n	1c076 <signal_poll_event+0x3a>
   1c0e4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1c0e8:	b177      	cbz	r7, 1c108 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1c0ea:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1c0ee:	f1a4 0910 	sub.w	r9, r4, #16
   1c0f2:	f104 0010 	add.w	r0, r4, #16
   1c0f6:	f7ff fe15 	bl	1bd24 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1c0fa:	4649      	mov	r1, r9
   1c0fc:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1c0fe:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1c102:	f005 f9b0 	bl	21466 <k_work_submit_to_queue>
   1c106:	e7e5      	b.n	1c0d4 <signal_poll_event+0x98>
		poller->is_polling = false;
   1c108:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1c10a:	e7b4      	b.n	1c076 <signal_poll_event+0x3a>
   1c10c:	00026316 	.word	0x00026316
   1c110:	00022c66 	.word	0x00022c66

0001c114 <register_events>:
{
   1c114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1c118:	2600      	movs	r6, #0
{
   1c11a:	4614      	mov	r4, r2
   1c11c:	4681      	mov	r9, r0
	int events_registered = 0;
   1c11e:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c120:	f8df a188 	ldr.w	sl, [pc, #392]	; 1c2ac <register_events+0x198>
   1c124:	4f62      	ldr	r7, [pc, #392]	; (1c2b0 <register_events+0x19c>)
   1c126:	4d63      	ldr	r5, [pc, #396]	; (1c2b4 <register_events+0x1a0>)
{
   1c128:	9100      	str	r1, [sp, #0]
   1c12a:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1c12c:	9b00      	ldr	r3, [sp, #0]
   1c12e:	429e      	cmp	r6, r3
   1c130:	db03      	blt.n	1c13a <register_events+0x26>
}
   1c132:	4640      	mov	r0, r8
   1c134:	b003      	add	sp, #12
   1c136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1c13a:	f04f 0220 	mov.w	r2, #32
   1c13e:	f3ef 8b11 	mrs	fp, BASEPRI
   1c142:	f382 8811 	msr	BASEPRI, r2
   1c146:	f3bf 8f6f 	isb	sy
   1c14a:	4650      	mov	r0, sl
   1c14c:	f7ff fba6 	bl	1b89c <z_spin_lock_valid>
   1c150:	b940      	cbnz	r0, 1c164 <register_events+0x50>
   1c152:	4639      	mov	r1, r7
   1c154:	4628      	mov	r0, r5
   1c156:	227c      	movs	r2, #124	; 0x7c
   1c158:	f000 fb74 	bl	1c844 <printk>
   1c15c:	217c      	movs	r1, #124	; 0x7c
   1c15e:	4638      	mov	r0, r7
   1c160:	f000 fe16 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c164:	4650      	mov	r0, sl
   1c166:	f7ff fbb5 	bl	1b8d4 <z_spin_lock_set_owner>
	switch (event->type) {
   1c16a:	f899 200d 	ldrb.w	r2, [r9, #13]
   1c16e:	f002 020f 	and.w	r2, r2, #15
   1c172:	2a04      	cmp	r2, #4
   1c174:	d848      	bhi.n	1c208 <register_events+0xf4>
   1c176:	e8df f002 	tbb	[pc, r2]
   1c17a:	402f      	.short	0x402f
   1c17c:	4703      	.short	0x4703
   1c17e:	2b          	.byte	0x2b
   1c17f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1c180:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c184:	6892      	ldr	r2, [r2, #8]
   1c186:	b33a      	cbz	r2, 1c1d8 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c188:	2102      	movs	r1, #2
	event->poller = NULL;
   1c18a:	2000      	movs	r0, #0
	event->state |= state;
   1c18c:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1c190:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   1c194:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   1c198:	ea41 010c 	orr.w	r1, r1, ip
   1c19c:	f361 3210 	bfi	r2, r1, #12, #5
   1c1a0:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   1c1a4:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c1a6:	4650      	mov	r0, sl
   1c1a8:	f7ff fb86 	bl	1b8b8 <z_spin_unlock_valid>
   1c1ac:	b940      	cbnz	r0, 1c1c0 <register_events+0xac>
   1c1ae:	4639      	mov	r1, r7
   1c1b0:	4628      	mov	r0, r5
   1c1b2:	22a7      	movs	r2, #167	; 0xa7
   1c1b4:	f000 fb46 	bl	1c844 <printk>
   1c1b8:	21a7      	movs	r1, #167	; 0xa7
   1c1ba:	4638      	mov	r0, r7
   1c1bc:	f000 fde8 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1c1c0:	f38b 8811 	msr	BASEPRI, fp
   1c1c4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c1c8:	3601      	adds	r6, #1
   1c1ca:	f109 0914 	add.w	r9, r9, #20
   1c1ce:	e7ad      	b.n	1c12c <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   1c1d0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c1d4:	6812      	ldr	r2, [r2, #0]
   1c1d6:	bb0a      	cbnz	r2, 1c21c <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   1c1d8:	9b01      	ldr	r3, [sp, #4]
   1c1da:	2b00      	cmp	r3, #0
   1c1dc:	d1e3      	bne.n	1c1a6 <register_events+0x92>
   1c1de:	7822      	ldrb	r2, [r4, #0]
   1c1e0:	2a00      	cmp	r2, #0
   1c1e2:	d0e0      	beq.n	1c1a6 <register_events+0x92>
	switch (event->type) {
   1c1e4:	f899 200d 	ldrb.w	r2, [r9, #13]
   1c1e8:	f002 020f 	and.w	r2, r2, #15
   1c1ec:	2a04      	cmp	r2, #4
   1c1ee:	d852      	bhi.n	1c296 <register_events+0x182>
   1c1f0:	e8df f002 	tbb	[pc, r2]
   1c1f4:	51164029 	.word	0x51164029
   1c1f8:	2e          	.byte	0x2e
   1c1f9:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1c1fa:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c1fe:	6892      	ldr	r2, [r2, #8]
   1c200:	2a00      	cmp	r2, #0
   1c202:	d0e9      	beq.n	1c1d8 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1c204:	2101      	movs	r1, #1
   1c206:	e7c0      	b.n	1c18a <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1c208:	4628      	mov	r0, r5
   1c20a:	2254      	movs	r2, #84	; 0x54
   1c20c:	492a      	ldr	r1, [pc, #168]	; (1c2b8 <register_events+0x1a4>)
   1c20e:	f000 fb19 	bl	1c844 <printk>
   1c212:	2154      	movs	r1, #84	; 0x54
   1c214:	4828      	ldr	r0, [pc, #160]	; (1c2b8 <register_events+0x1a4>)
   1c216:	f000 fdbb 	bl	1cd90 <assert_post_action>
		break;
   1c21a:	e7dd      	b.n	1c1d8 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c21c:	2104      	movs	r1, #4
   1c21e:	e7b4      	b.n	1c18a <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c220:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c224:	b942      	cbnz	r2, 1c238 <register_events+0x124>
   1c226:	4628      	mov	r0, r5
   1c228:	4923      	ldr	r1, [pc, #140]	; (1c2b8 <register_events+0x1a4>)
   1c22a:	227e      	movs	r2, #126	; 0x7e
   1c22c:	f000 fb0a 	bl	1c844 <printk>
   1c230:	217e      	movs	r1, #126	; 0x7e
   1c232:	4821      	ldr	r0, [pc, #132]	; (1c2b8 <register_events+0x1a4>)
   1c234:	f000 fdac 	bl	1cd90 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1c238:	4622      	mov	r2, r4
   1c23a:	4649      	mov	r1, r9
   1c23c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c240:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1c242:	f005 f924 	bl	2148e <add_event>
	event->poller = poller;
   1c246:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1c24a:	f108 0801 	add.w	r8, r8, #1
   1c24e:	e7aa      	b.n	1c1a6 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c250:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c254:	b942      	cbnz	r2, 1c268 <register_events+0x154>
   1c256:	4628      	mov	r0, r5
   1c258:	4917      	ldr	r1, [pc, #92]	; (1c2b8 <register_events+0x1a4>)
   1c25a:	2282      	movs	r2, #130	; 0x82
   1c25c:	f000 faf2 	bl	1c844 <printk>
   1c260:	2182      	movs	r1, #130	; 0x82
   1c262:	4815      	ldr	r0, [pc, #84]	; (1c2b8 <register_events+0x1a4>)
   1c264:	f000 fd94 	bl	1cd90 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1c268:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c26c:	4622      	mov	r2, r4
   1c26e:	4649      	mov	r1, r9
   1c270:	3014      	adds	r0, #20
   1c272:	e7e6      	b.n	1c242 <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c274:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c278:	b942      	cbnz	r2, 1c28c <register_events+0x178>
   1c27a:	4628      	mov	r0, r5
   1c27c:	490e      	ldr	r1, [pc, #56]	; (1c2b8 <register_events+0x1a4>)
   1c27e:	2286      	movs	r2, #134	; 0x86
   1c280:	f000 fae0 	bl	1c844 <printk>
   1c284:	2186      	movs	r1, #134	; 0x86
   1c286:	480c      	ldr	r0, [pc, #48]	; (1c2b8 <register_events+0x1a4>)
   1c288:	f000 fd82 	bl	1cd90 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1c28c:	4622      	mov	r2, r4
   1c28e:	4649      	mov	r1, r9
   1c290:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c294:	e7d5      	b.n	1c242 <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1c296:	4628      	mov	r0, r5
   1c298:	228d      	movs	r2, #141	; 0x8d
   1c29a:	4907      	ldr	r1, [pc, #28]	; (1c2b8 <register_events+0x1a4>)
   1c29c:	f000 fad2 	bl	1c844 <printk>
   1c2a0:	218d      	movs	r1, #141	; 0x8d
   1c2a2:	4805      	ldr	r0, [pc, #20]	; (1c2b8 <register_events+0x1a4>)
   1c2a4:	f000 fd74 	bl	1cd90 <assert_post_action>
		break;
   1c2a8:	e7cd      	b.n	1c246 <register_events+0x132>
   1c2aa:	bf00      	nop
   1c2ac:	2000a010 	.word	0x2000a010
   1c2b0:	00022ca0 	.word	0x00022ca0
   1c2b4:	00022c66 	.word	0x00022c66
   1c2b8:	00026316 	.word	0x00026316

0001c2bc <clear_event_registrations>:
{
   1c2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c2c0:	2414      	movs	r4, #20
   1c2c2:	4617      	mov	r7, r2
	while (num_events--) {
   1c2c4:	460e      	mov	r6, r1
   1c2c6:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1c2ca:	4d3d      	ldr	r5, [pc, #244]	; (1c3c0 <clear_event_registrations+0x104>)
   1c2cc:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1c3c4 <clear_event_registrations+0x108>
   1c2d0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1c3c8 <clear_event_registrations+0x10c>
	while (num_events--) {
   1c2d4:	b90e      	cbnz	r6, 1c2da <clear_event_registrations+0x1e>
}
   1c2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1c2da:	2300      	movs	r3, #0
   1c2dc:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1c2e0:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1c2e4:	f1a4 0a14 	sub.w	sl, r4, #20
   1c2e8:	f003 030f 	and.w	r3, r3, #15
   1c2ec:	2b04      	cmp	r3, #4
   1c2ee:	d831      	bhi.n	1c354 <clear_event_registrations+0x98>
   1c2f0:	e8df f003 	tbb	[pc, r3]
   1c2f4:	30032539 	.word	0x30032539
   1c2f8:	1a          	.byte	0x1a
   1c2f9:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c2fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c2fe:	b943      	cbnz	r3, 1c312 <clear_event_registrations+0x56>
   1c300:	4629      	mov	r1, r5
   1c302:	229d      	movs	r2, #157	; 0x9d
   1c304:	4640      	mov	r0, r8
   1c306:	f000 fa9d 	bl	1c844 <printk>
   1c30a:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c30c:	4628      	mov	r0, r5
   1c30e:	f000 fd3f 	bl	1cd90 <assert_post_action>
	return node->next != NULL;
   1c312:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1c316:	b333      	cbz	r3, 1c366 <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   1c318:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1c31c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c31e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c320:	2300      	movs	r3, #0
	node->prev = NULL;
   1c322:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1c326:	e01e      	b.n	1c366 <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c328:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c32c:	2b00      	cmp	r3, #0
   1c32e:	d1f0      	bne.n	1c312 <clear_event_registrations+0x56>
   1c330:	4629      	mov	r1, r5
   1c332:	22a1      	movs	r2, #161	; 0xa1
   1c334:	4640      	mov	r0, r8
   1c336:	f000 fa85 	bl	1c844 <printk>
   1c33a:	21a1      	movs	r1, #161	; 0xa1
   1c33c:	e7e6      	b.n	1c30c <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c33e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c342:	2b00      	cmp	r3, #0
   1c344:	d1e5      	bne.n	1c312 <clear_event_registrations+0x56>
   1c346:	4629      	mov	r1, r5
   1c348:	22a5      	movs	r2, #165	; 0xa5
   1c34a:	4640      	mov	r0, r8
   1c34c:	f000 fa7a 	bl	1c844 <printk>
   1c350:	21a5      	movs	r1, #165	; 0xa5
   1c352:	e7db      	b.n	1c30c <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   1c354:	4629      	mov	r1, r5
   1c356:	4640      	mov	r0, r8
   1c358:	22ac      	movs	r2, #172	; 0xac
   1c35a:	f000 fa73 	bl	1c844 <printk>
   1c35e:	21ac      	movs	r1, #172	; 0xac
   1c360:	4628      	mov	r0, r5
   1c362:	f000 fd15 	bl	1cd90 <assert_post_action>
   1c366:	4648      	mov	r0, r9
   1c368:	f7ff faa6 	bl	1b8b8 <z_spin_unlock_valid>
   1c36c:	b940      	cbnz	r0, 1c380 <clear_event_registrations+0xc4>
   1c36e:	4640      	mov	r0, r8
   1c370:	4916      	ldr	r1, [pc, #88]	; (1c3cc <clear_event_registrations+0x110>)
   1c372:	22a7      	movs	r2, #167	; 0xa7
   1c374:	f000 fa66 	bl	1c844 <printk>
   1c378:	21a7      	movs	r1, #167	; 0xa7
   1c37a:	4814      	ldr	r0, [pc, #80]	; (1c3cc <clear_event_registrations+0x110>)
   1c37c:	f000 fd08 	bl	1cd90 <assert_post_action>
   1c380:	f387 8811 	msr	BASEPRI, r7
   1c384:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c388:	f04f 0320 	mov.w	r3, #32
   1c38c:	f3ef 8711 	mrs	r7, BASEPRI
   1c390:	f383 8811 	msr	BASEPRI, r3
   1c394:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c398:	4648      	mov	r0, r9
   1c39a:	f7ff fa7f 	bl	1b89c <z_spin_lock_valid>
   1c39e:	b940      	cbnz	r0, 1c3b2 <clear_event_registrations+0xf6>
   1c3a0:	4640      	mov	r0, r8
   1c3a2:	490a      	ldr	r1, [pc, #40]	; (1c3cc <clear_event_registrations+0x110>)
   1c3a4:	227c      	movs	r2, #124	; 0x7c
   1c3a6:	f000 fa4d 	bl	1c844 <printk>
   1c3aa:	217c      	movs	r1, #124	; 0x7c
   1c3ac:	4807      	ldr	r0, [pc, #28]	; (1c3cc <clear_event_registrations+0x110>)
   1c3ae:	f000 fcef 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c3b2:	4648      	mov	r0, r9
   1c3b4:	f7ff fa8e 	bl	1b8d4 <z_spin_lock_set_owner>
	return k;
   1c3b8:	4654      	mov	r4, sl
   1c3ba:	3e01      	subs	r6, #1
   1c3bc:	e78a      	b.n	1c2d4 <clear_event_registrations+0x18>
   1c3be:	bf00      	nop
   1c3c0:	00026316 	.word	0x00026316
   1c3c4:	00022c66 	.word	0x00022c66
   1c3c8:	2000a010 	.word	0x2000a010
   1c3cc:	00022ca0 	.word	0x00022ca0

0001c3d0 <k_poll_event_init>:
{
   1c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3d2:	4605      	mov	r5, r0
   1c3d4:	460f      	mov	r7, r1
   1c3d6:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1c3d8:	4614      	mov	r4, r2
   1c3da:	b142      	cbz	r2, 1c3ee <k_poll_event_init+0x1e>
   1c3dc:	4915      	ldr	r1, [pc, #84]	; (1c434 <k_poll_event_init+0x64>)
   1c3de:	4816      	ldr	r0, [pc, #88]	; (1c438 <k_poll_event_init+0x68>)
   1c3e0:	222d      	movs	r2, #45	; 0x2d
   1c3e2:	f000 fa2f 	bl	1c844 <printk>
   1c3e6:	212d      	movs	r1, #45	; 0x2d
   1c3e8:	4812      	ldr	r0, [pc, #72]	; (1c434 <k_poll_event_init+0x64>)
   1c3ea:	f000 fcd1 	bl	1cd90 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1c3ee:	2f0f      	cmp	r7, #15
   1c3f0:	d908      	bls.n	1c404 <k_poll_event_init+0x34>
   1c3f2:	4910      	ldr	r1, [pc, #64]	; (1c434 <k_poll_event_init+0x64>)
   1c3f4:	4810      	ldr	r0, [pc, #64]	; (1c438 <k_poll_event_init+0x68>)
   1c3f6:	222f      	movs	r2, #47	; 0x2f
   1c3f8:	f000 fa24 	bl	1c844 <printk>
   1c3fc:	212f      	movs	r1, #47	; 0x2f
   1c3fe:	480d      	ldr	r0, [pc, #52]	; (1c434 <k_poll_event_init+0x64>)
   1c400:	f000 fcc6 	bl	1cd90 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1c404:	b946      	cbnz	r6, 1c418 <k_poll_event_init+0x48>
   1c406:	490b      	ldr	r1, [pc, #44]	; (1c434 <k_poll_event_init+0x64>)
   1c408:	480b      	ldr	r0, [pc, #44]	; (1c438 <k_poll_event_init+0x68>)
   1c40a:	2230      	movs	r2, #48	; 0x30
   1c40c:	f000 fa1a 	bl	1c844 <printk>
   1c410:	2130      	movs	r1, #48	; 0x30
   1c412:	4808      	ldr	r0, [pc, #32]	; (1c434 <k_poll_event_init+0x64>)
   1c414:	f000 fcbc 	bl	1cd90 <assert_post_action>
	event->poller = NULL;
   1c418:	2300      	movs	r3, #0
	event->type = type;
   1c41a:	0464      	lsls	r4, r4, #17
   1c41c:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1c41e:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1c420:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   1c424:	7b2b      	ldrb	r3, [r5, #12]
   1c426:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1c42a:	433c      	orrs	r4, r7
   1c42c:	431c      	orrs	r4, r3
	event->obj = obj;
   1c42e:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1c432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c434:	00026316 	.word	0x00026316
   1c438:	00022c66 	.word	0x00022c66

0001c43c <z_impl_k_poll>:
{
   1c43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c440:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1c442:	4b64      	ldr	r3, [pc, #400]	; (1c5d4 <z_impl_k_poll+0x198>)
{
   1c444:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1c446:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1c448:	2301      	movs	r3, #1
{
   1c44a:	4688      	mov	r8, r1
   1c44c:	4616      	mov	r6, r2
   1c44e:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1c450:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1c454:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1c458:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1c45c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1c460:	b153      	cbz	r3, 1c478 <z_impl_k_poll+0x3c>
   1c462:	495d      	ldr	r1, [pc, #372]	; (1c5d8 <z_impl_k_poll+0x19c>)
   1c464:	485d      	ldr	r0, [pc, #372]	; (1c5dc <z_impl_k_poll+0x1a0>)
   1c466:	f44f 7282 	mov.w	r2, #260	; 0x104
   1c46a:	f000 f9eb 	bl	1c844 <printk>
   1c46e:	f44f 7182 	mov.w	r1, #260	; 0x104
   1c472:	4859      	ldr	r0, [pc, #356]	; (1c5d8 <z_impl_k_poll+0x19c>)
   1c474:	f000 fc8c 	bl	1cd90 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1c478:	b954      	cbnz	r4, 1c490 <z_impl_k_poll+0x54>
   1c47a:	4957      	ldr	r1, [pc, #348]	; (1c5d8 <z_impl_k_poll+0x19c>)
   1c47c:	4857      	ldr	r0, [pc, #348]	; (1c5dc <z_impl_k_poll+0x1a0>)
   1c47e:	f240 1205 	movw	r2, #261	; 0x105
   1c482:	f000 f9df 	bl	1c844 <printk>
   1c486:	f240 1105 	movw	r1, #261	; 0x105
   1c48a:	4853      	ldr	r0, [pc, #332]	; (1c5d8 <z_impl_k_poll+0x19c>)
   1c48c:	f000 fc80 	bl	1cd90 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1c490:	f1b8 0f00 	cmp.w	r8, #0
   1c494:	da0a      	bge.n	1c4ac <z_impl_k_poll+0x70>
   1c496:	4950      	ldr	r1, [pc, #320]	; (1c5d8 <z_impl_k_poll+0x19c>)
   1c498:	4850      	ldr	r0, [pc, #320]	; (1c5dc <z_impl_k_poll+0x1a0>)
   1c49a:	f44f 7283 	mov.w	r2, #262	; 0x106
   1c49e:	f000 f9d1 	bl	1c844 <printk>
   1c4a2:	f44f 7183 	mov.w	r1, #262	; 0x106
   1c4a6:	484c      	ldr	r0, [pc, #304]	; (1c5d8 <z_impl_k_poll+0x19c>)
   1c4a8:	f000 fc72 	bl	1cd90 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1c4ac:	ea56 0305 	orrs.w	r3, r6, r5
   1c4b0:	bf0c      	ite	eq
   1c4b2:	2301      	moveq	r3, #1
   1c4b4:	2300      	movne	r3, #0
   1c4b6:	4641      	mov	r1, r8
   1c4b8:	464a      	mov	r2, r9
   1c4ba:	4620      	mov	r0, r4
   1c4bc:	f7ff fe2a 	bl	1c114 <register_events>
   1c4c0:	4680      	mov	r8, r0
   1c4c2:	f04f 0320 	mov.w	r3, #32
   1c4c6:	f3ef 8911 	mrs	r9, BASEPRI
   1c4ca:	f383 8811 	msr	BASEPRI, r3
   1c4ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c4d2:	4843      	ldr	r0, [pc, #268]	; (1c5e0 <z_impl_k_poll+0x1a4>)
   1c4d4:	f7ff f9e2 	bl	1b89c <z_spin_lock_valid>
   1c4d8:	b940      	cbnz	r0, 1c4ec <z_impl_k_poll+0xb0>
   1c4da:	4942      	ldr	r1, [pc, #264]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c4dc:	483f      	ldr	r0, [pc, #252]	; (1c5dc <z_impl_k_poll+0x1a0>)
   1c4de:	227c      	movs	r2, #124	; 0x7c
   1c4e0:	f000 f9b0 	bl	1c844 <printk>
   1c4e4:	217c      	movs	r1, #124	; 0x7c
   1c4e6:	483f      	ldr	r0, [pc, #252]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c4e8:	f000 fc52 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c4ec:	483c      	ldr	r0, [pc, #240]	; (1c5e0 <z_impl_k_poll+0x1a4>)
   1c4ee:	f7ff f9f1 	bl	1b8d4 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1c4f2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1c4f6:	b9d3      	cbnz	r3, 1c52e <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1c4f8:	4620      	mov	r0, r4
   1c4fa:	464a      	mov	r2, r9
   1c4fc:	4641      	mov	r1, r8
   1c4fe:	f7ff fedd 	bl	1c2bc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c502:	4837      	ldr	r0, [pc, #220]	; (1c5e0 <z_impl_k_poll+0x1a4>)
   1c504:	f7ff f9d8 	bl	1b8b8 <z_spin_unlock_valid>
   1c508:	b940      	cbnz	r0, 1c51c <z_impl_k_poll+0xe0>
   1c50a:	4936      	ldr	r1, [pc, #216]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c50c:	4833      	ldr	r0, [pc, #204]	; (1c5dc <z_impl_k_poll+0x1a0>)
   1c50e:	22a7      	movs	r2, #167	; 0xa7
   1c510:	f000 f998 	bl	1c844 <printk>
   1c514:	21a7      	movs	r1, #167	; 0xa7
   1c516:	4833      	ldr	r0, [pc, #204]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c518:	f000 fc3a 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1c51c:	f389 8811 	msr	BASEPRI, r9
   1c520:	f3bf 8f6f 	isb	sy
		return 0;
   1c524:	2500      	movs	r5, #0
}
   1c526:	4628      	mov	r0, r5
   1c528:	b005      	add	sp, #20
   1c52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1c52e:	2300      	movs	r3, #0
   1c530:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c534:	ea56 0305 	orrs.w	r3, r6, r5
   1c538:	d113      	bne.n	1c562 <z_impl_k_poll+0x126>
   1c53a:	4829      	ldr	r0, [pc, #164]	; (1c5e0 <z_impl_k_poll+0x1a4>)
   1c53c:	f7ff f9bc 	bl	1b8b8 <z_spin_unlock_valid>
   1c540:	b940      	cbnz	r0, 1c554 <z_impl_k_poll+0x118>
   1c542:	4928      	ldr	r1, [pc, #160]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c544:	4825      	ldr	r0, [pc, #148]	; (1c5dc <z_impl_k_poll+0x1a0>)
   1c546:	22a7      	movs	r2, #167	; 0xa7
   1c548:	f000 f97c 	bl	1c844 <printk>
   1c54c:	21a7      	movs	r1, #167	; 0xa7
   1c54e:	4825      	ldr	r0, [pc, #148]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c550:	f000 fc1e 	bl	1cd90 <assert_post_action>
   1c554:	f389 8811 	msr	BASEPRI, r9
   1c558:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c55c:	f06f 050a 	mvn.w	r5, #10
   1c560:	e7e1      	b.n	1c526 <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c562:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c566:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c568:	4649      	mov	r1, r9
   1c56a:	481d      	ldr	r0, [pc, #116]	; (1c5e0 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c56c:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c570:	f7fe fd50 	bl	1b014 <z_pend_curr>
   1c574:	4605      	mov	r5, r0
	__asm__ volatile(
   1c576:	f04f 0320 	mov.w	r3, #32
   1c57a:	f3ef 8611 	mrs	r6, BASEPRI
   1c57e:	f383 8811 	msr	BASEPRI, r3
   1c582:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c586:	4816      	ldr	r0, [pc, #88]	; (1c5e0 <z_impl_k_poll+0x1a4>)
   1c588:	f7ff f988 	bl	1b89c <z_spin_lock_valid>
   1c58c:	b940      	cbnz	r0, 1c5a0 <z_impl_k_poll+0x164>
   1c58e:	4915      	ldr	r1, [pc, #84]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c590:	4812      	ldr	r0, [pc, #72]	; (1c5dc <z_impl_k_poll+0x1a0>)
   1c592:	227c      	movs	r2, #124	; 0x7c
   1c594:	f000 f956 	bl	1c844 <printk>
   1c598:	217c      	movs	r1, #124	; 0x7c
   1c59a:	4812      	ldr	r0, [pc, #72]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c59c:	f000 fbf8 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c5a0:	480f      	ldr	r0, [pc, #60]	; (1c5e0 <z_impl_k_poll+0x1a4>)
   1c5a2:	f7ff f997 	bl	1b8d4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1c5a6:	4620      	mov	r0, r4
   1c5a8:	4632      	mov	r2, r6
   1c5aa:	4641      	mov	r1, r8
   1c5ac:	f7ff fe86 	bl	1c2bc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c5b0:	480b      	ldr	r0, [pc, #44]	; (1c5e0 <z_impl_k_poll+0x1a4>)
   1c5b2:	f7ff f981 	bl	1b8b8 <z_spin_unlock_valid>
   1c5b6:	b940      	cbnz	r0, 1c5ca <z_impl_k_poll+0x18e>
   1c5b8:	490a      	ldr	r1, [pc, #40]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c5ba:	4808      	ldr	r0, [pc, #32]	; (1c5dc <z_impl_k_poll+0x1a0>)
   1c5bc:	22a7      	movs	r2, #167	; 0xa7
   1c5be:	f000 f941 	bl	1c844 <printk>
   1c5c2:	21a7      	movs	r1, #167	; 0xa7
   1c5c4:	4807      	ldr	r0, [pc, #28]	; (1c5e4 <z_impl_k_poll+0x1a8>)
   1c5c6:	f000 fbe3 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1c5ca:	f386 8811 	msr	BASEPRI, r6
   1c5ce:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c5d2:	e7a8      	b.n	1c526 <z_impl_k_poll+0xea>
   1c5d4:	20009fbc 	.word	0x20009fbc
   1c5d8:	00026316 	.word	0x00026316
   1c5dc:	00022c66 	.word	0x00022c66
   1c5e0:	2000a010 	.word	0x2000a010
   1c5e4:	00022ca0 	.word	0x00022ca0

0001c5e8 <z_impl_k_poll_signal_raise>:
{
   1c5e8:	b570      	push	{r4, r5, r6, lr}
   1c5ea:	4604      	mov	r4, r0
   1c5ec:	460d      	mov	r5, r1
	__asm__ volatile(
   1c5ee:	f04f 0320 	mov.w	r3, #32
   1c5f2:	f3ef 8611 	mrs	r6, BASEPRI
   1c5f6:	f383 8811 	msr	BASEPRI, r3
   1c5fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c5fe:	481c      	ldr	r0, [pc, #112]	; (1c670 <z_impl_k_poll_signal_raise+0x88>)
   1c600:	f7ff f94c 	bl	1b89c <z_spin_lock_valid>
   1c604:	b940      	cbnz	r0, 1c618 <z_impl_k_poll_signal_raise+0x30>
   1c606:	491b      	ldr	r1, [pc, #108]	; (1c674 <z_impl_k_poll_signal_raise+0x8c>)
   1c608:	481b      	ldr	r0, [pc, #108]	; (1c678 <z_impl_k_poll_signal_raise+0x90>)
   1c60a:	227c      	movs	r2, #124	; 0x7c
   1c60c:	f000 f91a 	bl	1c844 <printk>
   1c610:	217c      	movs	r1, #124	; 0x7c
   1c612:	4818      	ldr	r0, [pc, #96]	; (1c674 <z_impl_k_poll_signal_raise+0x8c>)
   1c614:	f000 fbbc 	bl	1cd90 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c618:	4815      	ldr	r0, [pc, #84]	; (1c670 <z_impl_k_poll_signal_raise+0x88>)
   1c61a:	f7ff f95b 	bl	1b8d4 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1c61e:	2101      	movs	r1, #1
	return list->head == list;
   1c620:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1c622:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c624:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1c626:	60a1      	str	r1, [r4, #8]
   1c628:	d112      	bne.n	1c650 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c62a:	4811      	ldr	r0, [pc, #68]	; (1c670 <z_impl_k_poll_signal_raise+0x88>)
   1c62c:	f7ff f944 	bl	1b8b8 <z_spin_unlock_valid>
   1c630:	b940      	cbnz	r0, 1c644 <z_impl_k_poll_signal_raise+0x5c>
   1c632:	4910      	ldr	r1, [pc, #64]	; (1c674 <z_impl_k_poll_signal_raise+0x8c>)
   1c634:	4810      	ldr	r0, [pc, #64]	; (1c678 <z_impl_k_poll_signal_raise+0x90>)
   1c636:	22a7      	movs	r2, #167	; 0xa7
   1c638:	f000 f904 	bl	1c844 <printk>
   1c63c:	21a7      	movs	r1, #167	; 0xa7
   1c63e:	480d      	ldr	r0, [pc, #52]	; (1c674 <z_impl_k_poll_signal_raise+0x8c>)
   1c640:	f000 fba6 	bl	1cd90 <assert_post_action>
	__asm__ volatile(
   1c644:	f386 8811 	msr	BASEPRI, r6
   1c648:	f3bf 8f6f 	isb	sy
		return 0;
   1c64c:	2400      	movs	r4, #0
   1c64e:	e00d      	b.n	1c66c <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1c650:	e9d0 3200 	ldrd	r3, r2, [r0]
   1c654:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c656:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c658:	2300      	movs	r3, #0
	node->prev = NULL;
   1c65a:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c65e:	f7ff fced 	bl	1c03c <signal_poll_event>
	z_reschedule(&lock, key);
   1c662:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c664:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c666:	4802      	ldr	r0, [pc, #8]	; (1c670 <z_impl_k_poll_signal_raise+0x88>)
   1c668:	f7fd ff96 	bl	1a598 <z_reschedule>
}
   1c66c:	4620      	mov	r0, r4
   1c66e:	bd70      	pop	{r4, r5, r6, pc}
   1c670:	2000a010 	.word	0x2000a010
   1c674:	00022ca0 	.word	0x00022ca0
   1c678:	00022c66 	.word	0x00022c66

0001c67c <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1c67c:	2803      	cmp	r0, #3
{
   1c67e:	b538      	push	{r3, r4, r5, lr}
   1c680:	4604      	mov	r4, r0
   1c682:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1c684:	d901      	bls.n	1c68a <k_aligned_alloc+0xe>
   1c686:	0783      	lsls	r3, r0, #30
   1c688:	d008      	beq.n	1c69c <k_aligned_alloc+0x20>
   1c68a:	490e      	ldr	r1, [pc, #56]	; (1c6c4 <k_aligned_alloc+0x48>)
   1c68c:	480e      	ldr	r0, [pc, #56]	; (1c6c8 <k_aligned_alloc+0x4c>)
   1c68e:	223e      	movs	r2, #62	; 0x3e
   1c690:	f000 f8d8 	bl	1c844 <printk>
   1c694:	213e      	movs	r1, #62	; 0x3e
   1c696:	480b      	ldr	r0, [pc, #44]	; (1c6c4 <k_aligned_alloc+0x48>)
   1c698:	f000 fb7a 	bl	1cd90 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1c69c:	1e63      	subs	r3, r4, #1
   1c69e:	4223      	tst	r3, r4
   1c6a0:	d008      	beq.n	1c6b4 <k_aligned_alloc+0x38>
   1c6a2:	4908      	ldr	r1, [pc, #32]	; (1c6c4 <k_aligned_alloc+0x48>)
   1c6a4:	4808      	ldr	r0, [pc, #32]	; (1c6c8 <k_aligned_alloc+0x4c>)
   1c6a6:	2242      	movs	r2, #66	; 0x42
   1c6a8:	f000 f8cc 	bl	1c844 <printk>
   1c6ac:	2142      	movs	r1, #66	; 0x42
   1c6ae:	4805      	ldr	r0, [pc, #20]	; (1c6c4 <k_aligned_alloc+0x48>)
   1c6b0:	f000 fb6e 	bl	1cd90 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c6b4:	462a      	mov	r2, r5
   1c6b6:	4621      	mov	r1, r4
}
   1c6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c6bc:	4803      	ldr	r0, [pc, #12]	; (1c6cc <k_aligned_alloc+0x50>)
   1c6be:	f004 bf26 	b.w	2150e <z_heap_aligned_alloc>
   1c6c2:	bf00      	nop
   1c6c4:	00026337 	.word	0x00026337
   1c6c8:	00022c66 	.word	0x00022c66
   1c6cc:	2000850c 	.word	0x2000850c

0001c6d0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c6d0:	b538      	push	{r3, r4, r5, lr}
   1c6d2:	4604      	mov	r4, r0
   1c6d4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c6d6:	f004 fe2d 	bl	21334 <k_is_in_isr>
   1c6da:	b958      	cbnz	r0, 1c6f4 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c6dc:	4b07      	ldr	r3, [pc, #28]	; (1c6fc <z_thread_aligned_alloc+0x2c>)
   1c6de:	689b      	ldr	r3, [r3, #8]
   1c6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1c6e4:	b143      	cbz	r3, 1c6f8 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1c6e6:	462a      	mov	r2, r5
   1c6e8:	4621      	mov	r1, r4
   1c6ea:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1c6ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1c6f0:	f004 bf0d 	b.w	2150e <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1c6f4:	4b02      	ldr	r3, [pc, #8]	; (1c700 <z_thread_aligned_alloc+0x30>)
   1c6f6:	e7f6      	b.n	1c6e6 <z_thread_aligned_alloc+0x16>
}
   1c6f8:	bd38      	pop	{r3, r4, r5, pc}
   1c6fa:	bf00      	nop
   1c6fc:	20009fbc 	.word	0x20009fbc
   1c700:	2000850c 	.word	0x2000850c

0001c704 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   1c704:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1c706:	2003      	movs	r0, #3
   1c708:	f7fc b982 	b.w	18a10 <dk_set_led>

0001c70c <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1c70c:	f002 b978 	b.w	1ea00 <bt_conn_get_dst>

0001c710 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1c710:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1c712:	2364      	movs	r3, #100	; 0x64
{
   1c714:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1c716:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1c718:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1c71a:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1c71e:	b111      	cbz	r1, 1c726 <u8_to_dec+0x16>
   1c720:	3d01      	subs	r5, #1
   1c722:	d101      	bne.n	1c728 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1c724:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1c726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1c728:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1c72c:	429a      	cmp	r2, r3
		digit = value / divisor;
   1c72e:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1c730:	d202      	bcs.n	1c738 <u8_to_dec+0x28>
   1c732:	2b01      	cmp	r3, #1
   1c734:	d000      	beq.n	1c738 <u8_to_dec+0x28>
   1c736:	b130      	cbz	r0, 1c746 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1c738:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1c73a:	3901      	subs	r1, #1
			num_digits++;
   1c73c:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1c73e:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1c742:	b2c9      	uxtb	r1, r1
			num_digits++;
   1c744:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1c746:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1c74a:	fbb3 f3fc 	udiv	r3, r3, ip
   1c74e:	b2d2      	uxtb	r2, r2
   1c750:	e7e5      	b.n	1c71e <u8_to_dec+0xe>

0001c752 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1c752:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c756:	b2db      	uxtb	r3, r3
   1c758:	2b09      	cmp	r3, #9
   1c75a:	d802      	bhi.n	1c762 <char2hex+0x10>
		*x = c - '0';
   1c75c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1c75e:	2000      	movs	r0, #0
   1c760:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1c762:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1c766:	2b05      	cmp	r3, #5
   1c768:	d802      	bhi.n	1c770 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1c76a:	3857      	subs	r0, #87	; 0x57
   1c76c:	7008      	strb	r0, [r1, #0]
   1c76e:	e7f6      	b.n	1c75e <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1c770:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1c774:	2b05      	cmp	r3, #5
   1c776:	d801      	bhi.n	1c77c <char2hex+0x2a>
		*x = c - 'A' + 10;
   1c778:	3837      	subs	r0, #55	; 0x37
   1c77a:	e7f7      	b.n	1c76c <char2hex+0x1a>
		return -EINVAL;
   1c77c:	f06f 0015 	mvn.w	r0, #21
}
   1c780:	4770      	bx	lr

0001c782 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1c782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c784:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1c786:	f001 0001 	and.w	r0, r1, #1
   1c78a:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1c78e:	429d      	cmp	r5, r3
   1c790:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1c794:	d903      	bls.n	1c79e <hex2bin+0x1c>
		return 0;
   1c796:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1c798:	4628      	mov	r0, r5
   1c79a:	b003      	add	sp, #12
   1c79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1c79e:	b158      	cbz	r0, 1c7b8 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1c7a0:	7820      	ldrb	r0, [r4, #0]
   1c7a2:	f10d 0107 	add.w	r1, sp, #7
   1c7a6:	f7ff ffd4 	bl	1c752 <char2hex>
   1c7aa:	2800      	cmp	r0, #0
   1c7ac:	dbf3      	blt.n	1c796 <hex2bin+0x14>
		buf[0] = dec;
   1c7ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1c7b2:	3401      	adds	r4, #1
		buf[0] = dec;
   1c7b4:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1c7b8:	3401      	adds	r4, #1
   1c7ba:	4416      	add	r6, r2
   1c7bc:	42b2      	cmp	r2, r6
   1c7be:	d0eb      	beq.n	1c798 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1c7c0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1c7c4:	f10d 0107 	add.w	r1, sp, #7
   1c7c8:	f7ff ffc3 	bl	1c752 <char2hex>
   1c7cc:	2800      	cmp	r0, #0
   1c7ce:	dbe2      	blt.n	1c796 <hex2bin+0x14>
		buf[i] = dec << 4;
   1c7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c7d4:	011b      	lsls	r3, r3, #4
   1c7d6:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1c7d8:	f814 0b02 	ldrb.w	r0, [r4], #2
   1c7dc:	f7ff ffb9 	bl	1c752 <char2hex>
   1c7e0:	2800      	cmp	r0, #0
   1c7e2:	dbd8      	blt.n	1c796 <hex2bin+0x14>
		buf[i] += dec;
   1c7e4:	7813      	ldrb	r3, [r2, #0]
   1c7e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1c7ea:	440b      	add	r3, r1
   1c7ec:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1c7f0:	e7e4      	b.n	1c7bc <hex2bin+0x3a>

0001c7f2 <sys_notify_validate>:
	if (notify == NULL) {
   1c7f2:	4603      	mov	r3, r0
   1c7f4:	b140      	cbz	r0, 1c808 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c7f6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c7f8:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1c7fc:	2a02      	cmp	r2, #2
   1c7fe:	d006      	beq.n	1c80e <sys_notify_validate+0x1c>
   1c800:	2a03      	cmp	r2, #3
   1c802:	d004      	beq.n	1c80e <sys_notify_validate+0x1c>
   1c804:	2a01      	cmp	r2, #1
   1c806:	d005      	beq.n	1c814 <sys_notify_validate+0x22>
		return -EINVAL;
   1c808:	f06f 0015 	mvn.w	r0, #21
}
   1c80c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c80e:	681a      	ldr	r2, [r3, #0]
   1c810:	2a00      	cmp	r2, #0
   1c812:	d0f9      	beq.n	1c808 <sys_notify_validate+0x16>
		notify->result = 0;
   1c814:	2000      	movs	r0, #0
   1c816:	6098      	str	r0, [r3, #8]
   1c818:	4770      	bx	lr

0001c81a <arch_printk_char_out>:
}
   1c81a:	2000      	movs	r0, #0
   1c81c:	4770      	bx	lr

0001c81e <str_out>:
{
   1c81e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c820:	688a      	ldr	r2, [r1, #8]
   1c822:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1c824:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c826:	b114      	cbz	r4, 1c82e <str_out+0x10>
   1c828:	684b      	ldr	r3, [r1, #4]
   1c82a:	4293      	cmp	r3, r2
   1c82c:	dc01      	bgt.n	1c832 <str_out+0x14>
		ctx->count++;
   1c82e:	608d      	str	r5, [r1, #8]
}
   1c830:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c832:	3b01      	subs	r3, #1
   1c834:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c836:	bf08      	it	eq
   1c838:	2200      	moveq	r2, #0
   1c83a:	608d      	str	r5, [r1, #8]
   1c83c:	bf0c      	ite	eq
   1c83e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c840:	54a0      	strbne	r0, [r4, r2]
   1c842:	e7f5      	b.n	1c830 <str_out+0x12>

0001c844 <printk>:
{
   1c844:	b40f      	push	{r0, r1, r2, r3}
   1c846:	b507      	push	{r0, r1, r2, lr}
   1c848:	a904      	add	r1, sp, #16
   1c84a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c84e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c850:	f7ed fb38 	bl	9ec4 <vprintk>
}
   1c854:	b003      	add	sp, #12
   1c856:	f85d eb04 	ldr.w	lr, [sp], #4
   1c85a:	b004      	add	sp, #16
   1c85c:	4770      	bx	lr

0001c85e <snprintk>:
{
   1c85e:	b40c      	push	{r2, r3}
   1c860:	b507      	push	{r0, r1, r2, lr}
   1c862:	ab04      	add	r3, sp, #16
   1c864:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c868:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c86a:	f7ed fb39 	bl	9ee0 <vsnprintk>
}
   1c86e:	b003      	add	sp, #12
   1c870:	f85d eb04 	ldr.w	lr, [sp], #4
   1c874:	b002      	add	sp, #8
   1c876:	4770      	bx	lr

0001c878 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c878:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1c87a:	f013 0307 	ands.w	r3, r3, #7
   1c87e:	d105      	bne.n	1c88c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c880:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1c882:	2b00      	cmp	r3, #0
   1c884:	bf0c      	ite	eq
   1c886:	2000      	moveq	r0, #0
   1c888:	2003      	movne	r0, #3
   1c88a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c88c:	2b02      	cmp	r3, #2
   1c88e:	d105      	bne.n	1c89c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c890:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1c892:	2b00      	cmp	r3, #0
   1c894:	bf14      	ite	ne
   1c896:	2000      	movne	r0, #0
   1c898:	2004      	moveq	r0, #4
   1c89a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c89c:	2b01      	cmp	r3, #1
   1c89e:	d105      	bne.n	1c8ac <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c8a0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1c8a2:	2b00      	cmp	r3, #0
   1c8a4:	bf0c      	ite	eq
   1c8a6:	2000      	moveq	r0, #0
   1c8a8:	2005      	movne	r0, #5
   1c8aa:	4770      	bx	lr
	int evt = EVT_NOP;
   1c8ac:	2000      	movs	r0, #0
}
   1c8ae:	4770      	bx	lr

0001c8b0 <notify_one>:
{
   1c8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c8b4:	460d      	mov	r5, r1
   1c8b6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c8b8:	4619      	mov	r1, r3
   1c8ba:	1d28      	adds	r0, r5, #4
{
   1c8bc:	4690      	mov	r8, r2
   1c8be:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c8c0:	f7ed fac6 	bl	9e50 <sys_notify_finalize>
	if (cb) {
   1c8c4:	4604      	mov	r4, r0
   1c8c6:	b138      	cbz	r0, 1c8d8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1c8c8:	4633      	mov	r3, r6
   1c8ca:	4642      	mov	r2, r8
   1c8cc:	4629      	mov	r1, r5
   1c8ce:	4638      	mov	r0, r7
   1c8d0:	46a4      	mov	ip, r4
}
   1c8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1c8d6:	4760      	bx	ip
}
   1c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c8dc <validate_args>:
{
   1c8dc:	b510      	push	{r4, lr}
   1c8de:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c8e0:	b140      	cbz	r0, 1c8f4 <validate_args+0x18>
   1c8e2:	b139      	cbz	r1, 1c8f4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1c8e4:	1d08      	adds	r0, r1, #4
   1c8e6:	f7ff ff84 	bl	1c7f2 <sys_notify_validate>
	if ((rv == 0)
   1c8ea:	b928      	cbnz	r0, 1c8f8 <validate_args+0x1c>
	    && ((cli->notify.flags
   1c8ec:	68a3      	ldr	r3, [r4, #8]
   1c8ee:	f033 0303 	bics.w	r3, r3, #3
   1c8f2:	d001      	beq.n	1c8f8 <validate_args+0x1c>
		rv = -EINVAL;
   1c8f4:	f06f 0015 	mvn.w	r0, #21
}
   1c8f8:	bd10      	pop	{r4, pc}

0001c8fa <onoff_manager_init>:
{
   1c8fa:	b538      	push	{r3, r4, r5, lr}
   1c8fc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c8fe:	4605      	mov	r5, r0
   1c900:	b158      	cbz	r0, 1c91a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c902:	b151      	cbz	r1, 1c91a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c904:	680b      	ldr	r3, [r1, #0]
   1c906:	b143      	cbz	r3, 1c91a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c908:	684b      	ldr	r3, [r1, #4]
   1c90a:	b133      	cbz	r3, 1c91a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c90c:	2220      	movs	r2, #32
   1c90e:	2100      	movs	r1, #0
   1c910:	f001 fc7b 	bl	1e20a <memset>
	return 0;
   1c914:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c916:	612c      	str	r4, [r5, #16]
}
   1c918:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c91a:	f06f 0015 	mvn.w	r0, #21
   1c91e:	e7fb      	b.n	1c918 <onoff_manager_init+0x1e>

0001c920 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c920:	4604      	mov	r4, r0
   1c922:	b508      	push	{r3, lr}
   1c924:	4608      	mov	r0, r1
   1c926:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c928:	461a      	mov	r2, r3
   1c92a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c92c:	f7fe fdc4 	bl	1b4b8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c930:	f7f1 fa0a 	bl	dd48 <z_impl_k_thread_abort>

0001c934 <chunk_field>:
	if (big_heap(h)) {
   1c934:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1c936:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c93a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1c93e:	bf2c      	ite	cs
   1c940:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1c944:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1c948:	4770      	bx	lr

0001c94a <chunk_set>:
	void *cmem = &buf[c];
   1c94a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c94e:	6880      	ldr	r0, [r0, #8]
   1c950:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1c954:	bf2c      	ite	cs
   1c956:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1c95a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1c95e:	4770      	bx	lr

0001c960 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1c960:	2201      	movs	r2, #1
{
   1c962:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1c964:	f7ff ffe6 	bl	1c934 <chunk_field>
}
   1c968:	40d0      	lsrs	r0, r2
   1c96a:	bd08      	pop	{r3, pc}

0001c96c <set_chunk_used>:
	if (big_heap(h)) {
   1c96c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1c96e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c976:	d308      	bcc.n	1c98a <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c978:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1c97a:	b11a      	cbz	r2, 1c984 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c97c:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c980:	604b      	str	r3, [r1, #4]
   1c982:	4770      	bx	lr
   1c984:	f023 0301 	bic.w	r3, r3, #1
   1c988:	e7fa      	b.n	1c980 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c98a:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1c98c:	b11a      	cbz	r2, 1c996 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c98e:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c992:	804b      	strh	r3, [r1, #2]
}
   1c994:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c996:	f023 0301 	bic.w	r3, r3, #1
   1c99a:	e7fa      	b.n	1c992 <set_chunk_used+0x26>

0001c99c <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c99c:	0053      	lsls	r3, r2, #1
   1c99e:	2201      	movs	r2, #1
   1c9a0:	f7ff bfd3 	b.w	1c94a <chunk_set>

0001c9a4 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1c9a4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c9a8:	bf2c      	ite	cs
   1c9aa:	2008      	movcs	r0, #8
   1c9ac:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c9ae:	3107      	adds	r1, #7
   1c9b0:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1c9b2:	08c0      	lsrs	r0, r0, #3
   1c9b4:	4770      	bx	lr

0001c9b6 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1c9b6:	b508      	push	{r3, lr}
   1c9b8:	460b      	mov	r3, r1
   1c9ba:	2101      	movs	r1, #1
   1c9bc:	f7ff fff2 	bl	1c9a4 <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1c9c0:	3301      	adds	r3, #1
   1c9c2:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1c9c4:	fab3 f083 	clz	r0, r3
}
   1c9c8:	f1c0 001f 	rsb	r0, r0, #31
   1c9cc:	bd08      	pop	{r3, pc}

0001c9ce <free_list_remove_bidx>:
{
   1c9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9d2:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1c9d4:	2203      	movs	r2, #3
   1c9d6:	460e      	mov	r6, r1
   1c9d8:	4604      	mov	r4, r0
   1c9da:	f7ff ffab 	bl	1c934 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1c9de:	4286      	cmp	r6, r0
   1c9e0:	4605      	mov	r5, r0
   1c9e2:	f107 0804 	add.w	r8, r7, #4
   1c9e6:	d10b      	bne.n	1ca00 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1c9e8:	2301      	movs	r3, #1
   1c9ea:	fa03 f707 	lsl.w	r7, r3, r7
   1c9ee:	68e3      	ldr	r3, [r4, #12]
   1c9f0:	ea23 0307 	bic.w	r3, r3, r7
   1c9f4:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1c9f6:	2300      	movs	r3, #0
   1c9f8:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1c9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1ca00:	4631      	mov	r1, r6
   1ca02:	2202      	movs	r2, #2
   1ca04:	4620      	mov	r0, r4
   1ca06:	f7ff ff95 	bl	1c934 <chunk_field>
   1ca0a:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1ca0c:	462b      	mov	r3, r5
   1ca0e:	4601      	mov	r1, r0
   1ca10:	2203      	movs	r2, #3
   1ca12:	4620      	mov	r0, r4
		b->next = second;
   1ca14:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1ca18:	f7ff ff97 	bl	1c94a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ca1c:	4633      	mov	r3, r6
   1ca1e:	4629      	mov	r1, r5
   1ca20:	4620      	mov	r0, r4
}
   1ca22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ca26:	2202      	movs	r2, #2
   1ca28:	f7ff bf8f 	b.w	1c94a <chunk_set>

0001ca2c <free_list_remove>:
{
   1ca2c:	b570      	push	{r4, r5, r6, lr}
   1ca2e:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1ca30:	6886      	ldr	r6, [r0, #8]
   1ca32:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ca34:	f7ff ff94 	bl	1c960 <chunk_size>
   1ca38:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ca3c:	4601      	mov	r1, r0
   1ca3e:	d301      	bcc.n	1ca44 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1ca40:	2801      	cmp	r0, #1
   1ca42:	d009      	beq.n	1ca58 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ca44:	4630      	mov	r0, r6
   1ca46:	f7ff ffb6 	bl	1c9b6 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1ca4a:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ca4c:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1ca4e:	4620      	mov	r0, r4
}
   1ca50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1ca54:	f7ff bfbb 	b.w	1c9ce <free_list_remove_bidx>
}
   1ca58:	bd70      	pop	{r4, r5, r6, pc}

0001ca5a <alloc_chunk>:
{
   1ca5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ca5e:	6886      	ldr	r6, [r0, #8]
   1ca60:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1ca62:	4630      	mov	r0, r6
{
   1ca64:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1ca66:	f7ff ffa6 	bl	1c9b6 <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1ca6a:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1ca6c:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1ca6e:	4630      	mov	r0, r6
   1ca70:	f7ff ffa1 	bl	1c9b6 <bucket_idx.isra.0>
   1ca74:	42a8      	cmp	r0, r5
   1ca76:	da03      	bge.n	1ca80 <alloc_chunk+0x26>
		return 0;
   1ca78:	2600      	movs	r6, #0
}
   1ca7a:	4630      	mov	r0, r6
   1ca7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1ca80:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1ca84:	f8da 9010 	ldr.w	r9, [sl, #16]
   1ca88:	f1b9 0f00 	cmp.w	r9, #0
   1ca8c:	d019      	beq.n	1cac2 <alloc_chunk+0x68>
   1ca8e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1ca90:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1ca94:	4620      	mov	r0, r4
   1ca96:	4631      	mov	r1, r6
   1ca98:	f7ff ff62 	bl	1c960 <chunk_size>
   1ca9c:	4540      	cmp	r0, r8
   1ca9e:	d305      	bcc.n	1caac <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1caa0:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1caa2:	4631      	mov	r1, r6
   1caa4:	4620      	mov	r0, r4
   1caa6:	f7ff ff92 	bl	1c9ce <free_list_remove_bidx>
		return c;
   1caaa:	e7e6      	b.n	1ca7a <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1caac:	2203      	movs	r2, #3
   1caae:	4631      	mov	r1, r6
   1cab0:	4620      	mov	r0, r4
   1cab2:	f7ff ff3f 	bl	1c934 <chunk_field>
		} while (--i && b->next != first);
   1cab6:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1cab8:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1cabc:	d001      	beq.n	1cac2 <alloc_chunk+0x68>
   1cabe:	4581      	cmp	r9, r0
   1cac0:	d1e6      	bne.n	1ca90 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1cac2:	f04f 32ff 	mov.w	r2, #4294967295
   1cac6:	68e3      	ldr	r3, [r4, #12]
   1cac8:	3501      	adds	r5, #1
   1caca:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1cacc:	401a      	ands	r2, r3
   1cace:	d0d3      	beq.n	1ca78 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1cad0:	fa92 f2a2 	rbit	r2, r2
   1cad4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1cad8:	1d13      	adds	r3, r2, #4
   1cada:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1cade:	e7e0      	b.n	1caa2 <alloc_chunk+0x48>

0001cae0 <split_chunks>:
{
   1cae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cae4:	4614      	mov	r4, r2
   1cae6:	460e      	mov	r6, r1
   1cae8:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1caea:	f7ff ff39 	bl	1c960 <chunk_size>
	size_t lsz = rc - lc;
   1caee:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1caf2:	1b37      	subs	r7, r6, r4
   1caf4:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1caf6:	4642      	mov	r2, r8
   1caf8:	4631      	mov	r1, r6
   1cafa:	4628      	mov	r0, r5
   1cafc:	f7ff ff4e 	bl	1c99c <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1cb00:	463a      	mov	r2, r7
   1cb02:	4621      	mov	r1, r4
   1cb04:	4628      	mov	r0, r5
   1cb06:	f7ff ff49 	bl	1c99c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cb0a:	4643      	mov	r3, r8
   1cb0c:	2200      	movs	r2, #0
   1cb0e:	4621      	mov	r1, r4
   1cb10:	4628      	mov	r0, r5
   1cb12:	f7ff ff1a 	bl	1c94a <chunk_set>
	return c + chunk_size(h, c);
   1cb16:	4621      	mov	r1, r4
   1cb18:	4628      	mov	r0, r5
   1cb1a:	f7ff ff21 	bl	1c960 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cb1e:	463b      	mov	r3, r7
   1cb20:	1821      	adds	r1, r4, r0
   1cb22:	2200      	movs	r2, #0
   1cb24:	4628      	mov	r0, r5
}
   1cb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cb2a:	f7ff bf0e 	b.w	1c94a <chunk_set>

0001cb2e <merge_chunks>:
{
   1cb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb32:	4616      	mov	r6, r2
   1cb34:	4604      	mov	r4, r0
   1cb36:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1cb38:	f7ff ff12 	bl	1c960 <chunk_size>
   1cb3c:	4631      	mov	r1, r6
   1cb3e:	4605      	mov	r5, r0
   1cb40:	4620      	mov	r0, r4
   1cb42:	f7ff ff0d 	bl	1c960 <chunk_size>
   1cb46:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1cb48:	462a      	mov	r2, r5
   1cb4a:	4639      	mov	r1, r7
   1cb4c:	4620      	mov	r0, r4
   1cb4e:	f7ff ff25 	bl	1c99c <set_chunk_size>
	return c + chunk_size(h, c);
   1cb52:	4631      	mov	r1, r6
   1cb54:	4620      	mov	r0, r4
   1cb56:	f7ff ff03 	bl	1c960 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cb5a:	462b      	mov	r3, r5
   1cb5c:	1831      	adds	r1, r6, r0
   1cb5e:	2200      	movs	r2, #0
   1cb60:	4620      	mov	r0, r4
}
   1cb62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cb66:	f7ff bef0 	b.w	1c94a <chunk_set>

0001cb6a <free_list_add>:
{
   1cb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb6e:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1cb70:	6886      	ldr	r6, [r0, #8]
   1cb72:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1cb74:	f7ff fef4 	bl	1c960 <chunk_size>
   1cb78:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1cb7c:	4601      	mov	r1, r0
   1cb7e:	d301      	bcc.n	1cb84 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1cb80:	2801      	cmp	r0, #1
   1cb82:	d033      	beq.n	1cbec <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cb84:	4630      	mov	r0, r6
   1cb86:	f7ff ff16 	bl	1c9b6 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1cb8a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1cb8e:	6916      	ldr	r6, [r2, #16]
   1cb90:	b99e      	cbnz	r6, 1cbba <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1cb92:	2301      	movs	r3, #1
   1cb94:	fa03 f000 	lsl.w	r0, r3, r0
   1cb98:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1cb9a:	4629      	mov	r1, r5
   1cb9c:	4303      	orrs	r3, r0
   1cb9e:	60e3      	str	r3, [r4, #12]
   1cba0:	4620      	mov	r0, r4
		b->next = c;
   1cba2:	6115      	str	r5, [r2, #16]
   1cba4:	462b      	mov	r3, r5
   1cba6:	2202      	movs	r2, #2
   1cba8:	f7ff fecf 	bl	1c94a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1cbac:	2203      	movs	r2, #3
   1cbae:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1cbb0:	4620      	mov	r0, r4
}
   1cbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cbb6:	f7ff bec8 	b.w	1c94a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1cbba:	2202      	movs	r2, #2
   1cbbc:	4631      	mov	r1, r6
   1cbbe:	4620      	mov	r0, r4
   1cbc0:	f7ff feb8 	bl	1c934 <chunk_field>
   1cbc4:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1cbc6:	4603      	mov	r3, r0
   1cbc8:	4629      	mov	r1, r5
   1cbca:	4620      	mov	r0, r4
   1cbcc:	f7ff febd 	bl	1c94a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1cbd0:	2203      	movs	r2, #3
   1cbd2:	4633      	mov	r3, r6
   1cbd4:	4629      	mov	r1, r5
   1cbd6:	4620      	mov	r0, r4
   1cbd8:	f7ff feb7 	bl	1c94a <chunk_set>
   1cbdc:	4639      	mov	r1, r7
   1cbde:	462b      	mov	r3, r5
   1cbe0:	4620      	mov	r0, r4
   1cbe2:	f7ff feb2 	bl	1c94a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cbe6:	2202      	movs	r2, #2
   1cbe8:	4631      	mov	r1, r6
   1cbea:	e7e1      	b.n	1cbb0 <free_list_add+0x46>
   1cbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cbf0 <free_chunk>:
{
   1cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cbf2:	460c      	mov	r4, r1
   1cbf4:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1cbf6:	f7ff feb3 	bl	1c960 <chunk_size>
   1cbfa:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1cbfc:	2201      	movs	r2, #1
   1cbfe:	4631      	mov	r1, r6
   1cc00:	4628      	mov	r0, r5
   1cc02:	f7ff fe97 	bl	1c934 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1cc06:	07c3      	lsls	r3, r0, #31
   1cc08:	d40c      	bmi.n	1cc24 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1cc0a:	4631      	mov	r1, r6
   1cc0c:	4628      	mov	r0, r5
   1cc0e:	f7ff ff0d 	bl	1ca2c <free_list_remove>
	return c + chunk_size(h, c);
   1cc12:	4621      	mov	r1, r4
   1cc14:	4628      	mov	r0, r5
   1cc16:	f7ff fea3 	bl	1c960 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1cc1a:	4621      	mov	r1, r4
   1cc1c:	1822      	adds	r2, r4, r0
   1cc1e:	4628      	mov	r0, r5
   1cc20:	f7ff ff85 	bl	1cb2e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cc24:	2200      	movs	r2, #0
   1cc26:	4621      	mov	r1, r4
   1cc28:	4628      	mov	r0, r5
   1cc2a:	f7ff fe83 	bl	1c934 <chunk_field>
   1cc2e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1cc30:	2201      	movs	r2, #1
   1cc32:	4639      	mov	r1, r7
   1cc34:	4628      	mov	r0, r5
   1cc36:	f7ff fe7d 	bl	1c934 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1cc3a:	ea10 0602 	ands.w	r6, r0, r2
   1cc3e:	d113      	bne.n	1cc68 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1cc40:	4639      	mov	r1, r7
   1cc42:	4628      	mov	r0, r5
   1cc44:	f7ff fef2 	bl	1ca2c <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cc48:	4621      	mov	r1, r4
   1cc4a:	4632      	mov	r2, r6
   1cc4c:	4628      	mov	r0, r5
   1cc4e:	f7ff fe71 	bl	1c934 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1cc52:	4622      	mov	r2, r4
   1cc54:	1a21      	subs	r1, r4, r0
   1cc56:	4628      	mov	r0, r5
   1cc58:	f7ff ff69 	bl	1cb2e <merge_chunks>
   1cc5c:	4621      	mov	r1, r4
   1cc5e:	4632      	mov	r2, r6
   1cc60:	4628      	mov	r0, r5
   1cc62:	f7ff fe67 	bl	1c934 <chunk_field>
   1cc66:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1cc68:	4621      	mov	r1, r4
   1cc6a:	4628      	mov	r0, r5
}
   1cc6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1cc70:	f7ff bf7b 	b.w	1cb6a <free_list_add>

0001cc74 <sys_heap_alloc>:
{
   1cc74:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1cc76:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1cc78:	b909      	cbnz	r1, 1cc7e <sys_heap_alloc+0xa>
		return NULL;
   1cc7a:	2000      	movs	r0, #0
}
   1cc7c:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1cc7e:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1cc80:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1cc84:	d9f9      	bls.n	1cc7a <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1cc86:	f7ff fe8d 	bl	1c9a4 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cc8a:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1cc8c:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cc8e:	4630      	mov	r0, r6
   1cc90:	f7ff fee3 	bl	1ca5a <alloc_chunk>
	if (c == 0U) {
   1cc94:	4604      	mov	r4, r0
   1cc96:	2800      	cmp	r0, #0
   1cc98:	d0ef      	beq.n	1cc7a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1cc9a:	4601      	mov	r1, r0
   1cc9c:	4630      	mov	r0, r6
   1cc9e:	f7ff fe5f 	bl	1c960 <chunk_size>
   1cca2:	42a8      	cmp	r0, r5
   1cca4:	d909      	bls.n	1ccba <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1cca6:	4425      	add	r5, r4
   1cca8:	4621      	mov	r1, r4
   1ccaa:	4630      	mov	r0, r6
   1ccac:	462a      	mov	r2, r5
   1ccae:	f7ff ff17 	bl	1cae0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1ccb2:	4629      	mov	r1, r5
   1ccb4:	4630      	mov	r0, r6
   1ccb6:	f7ff ff58 	bl	1cb6a <free_list_add>
	set_chunk_used(h, c, true);
   1ccba:	4621      	mov	r1, r4
   1ccbc:	4630      	mov	r0, r6
   1ccbe:	2201      	movs	r2, #1
   1ccc0:	f7ff fe54 	bl	1c96c <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1ccc4:	68b3      	ldr	r3, [r6, #8]
   1ccc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ccca:	bf2c      	ite	cs
   1cccc:	2308      	movcs	r3, #8
   1ccce:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ccd0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ccd4:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1ccd6:	e7d1      	b.n	1cc7c <sys_heap_alloc+0x8>

0001ccd8 <encode_uint>:
{
   1ccd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccdc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1ccde:	78d3      	ldrb	r3, [r2, #3]
{
   1cce0:	4680      	mov	r8, r0
	switch (specifier) {
   1cce2:	2b6f      	cmp	r3, #111	; 0x6f
{
   1cce4:	460f      	mov	r7, r1
   1cce6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1cce8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1ccec:	d029      	beq.n	1cd42 <encode_uint+0x6a>
   1ccee:	d824      	bhi.n	1cd3a <encode_uint+0x62>
		return 16;
   1ccf0:	2b58      	cmp	r3, #88	; 0x58
   1ccf2:	bf14      	ite	ne
   1ccf4:	260a      	movne	r6, #10
   1ccf6:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1ccf8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1ccfc:	4632      	mov	r2, r6
   1ccfe:	2300      	movs	r3, #0
   1cd00:	4640      	mov	r0, r8
   1cd02:	4639      	mov	r1, r7
   1cd04:	f7eb ff12 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1cd08:	2a09      	cmp	r2, #9
   1cd0a:	b2d4      	uxtb	r4, r2
   1cd0c:	d81e      	bhi.n	1cd4c <encode_uint+0x74>
   1cd0e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1cd10:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1cd12:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1cd14:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1cd18:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1cd1c:	d301      	bcc.n	1cd22 <encode_uint+0x4a>
   1cd1e:	45d1      	cmp	r9, sl
   1cd20:	d811      	bhi.n	1cd46 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1cd22:	782b      	ldrb	r3, [r5, #0]
   1cd24:	069b      	lsls	r3, r3, #26
   1cd26:	d505      	bpl.n	1cd34 <encode_uint+0x5c>
		if (radix == 8) {
   1cd28:	2e08      	cmp	r6, #8
   1cd2a:	d115      	bne.n	1cd58 <encode_uint+0x80>
			conv->altform_0 = true;
   1cd2c:	78ab      	ldrb	r3, [r5, #2]
   1cd2e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1cd32:	70ab      	strb	r3, [r5, #2]
}
   1cd34:	4648      	mov	r0, r9
   1cd36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1cd3a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1cd3e:	2b70      	cmp	r3, #112	; 0x70
   1cd40:	e7d7      	b.n	1ccf2 <encode_uint+0x1a>
	switch (specifier) {
   1cd42:	2608      	movs	r6, #8
   1cd44:	e7d8      	b.n	1ccf8 <encode_uint+0x20>
		value /= radix;
   1cd46:	4680      	mov	r8, r0
   1cd48:	460f      	mov	r7, r1
   1cd4a:	e7d7      	b.n	1ccfc <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1cd4c:	f1bb 0f19 	cmp.w	fp, #25
   1cd50:	bf94      	ite	ls
   1cd52:	3437      	addls	r4, #55	; 0x37
   1cd54:	3457      	addhi	r4, #87	; 0x57
   1cd56:	e7db      	b.n	1cd10 <encode_uint+0x38>
		} else if (radix == 16) {
   1cd58:	2e10      	cmp	r6, #16
   1cd5a:	d1eb      	bne.n	1cd34 <encode_uint+0x5c>
			conv->altform_0c = true;
   1cd5c:	78ab      	ldrb	r3, [r5, #2]
   1cd5e:	f043 0310 	orr.w	r3, r3, #16
   1cd62:	e7e6      	b.n	1cd32 <encode_uint+0x5a>

0001cd64 <outs>:
{
   1cd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd68:	4607      	mov	r7, r0
   1cd6a:	4688      	mov	r8, r1
   1cd6c:	4615      	mov	r5, r2
   1cd6e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1cd70:	4614      	mov	r4, r2
   1cd72:	42b4      	cmp	r4, r6
   1cd74:	eba4 0005 	sub.w	r0, r4, r5
   1cd78:	d302      	bcc.n	1cd80 <outs+0x1c>
   1cd7a:	b93e      	cbnz	r6, 1cd8c <outs+0x28>
   1cd7c:	7823      	ldrb	r3, [r4, #0]
   1cd7e:	b12b      	cbz	r3, 1cd8c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1cd80:	4641      	mov	r1, r8
   1cd82:	f814 0b01 	ldrb.w	r0, [r4], #1
   1cd86:	47b8      	blx	r7
		if (rc < 0) {
   1cd88:	2800      	cmp	r0, #0
   1cd8a:	daf2      	bge.n	1cd72 <outs+0xe>
}
   1cd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cd90 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1cd90:	4040      	eors	r0, r0
   1cd92:	f380 8811 	msr	BASEPRI, r0
   1cd96:	f04f 0004 	mov.w	r0, #4
   1cd9a:	df02      	svc	2
}
   1cd9c:	4770      	bx	lr

0001cd9e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   1cd9e:	4770      	bx	lr

0001cda0 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1cda0:	f04f 0320 	mov.w	r3, #32
   1cda4:	f3ef 8111 	mrs	r1, BASEPRI
   1cda8:	f383 8811 	msr	BASEPRI, r3
   1cdac:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1cdb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1cdb4:	2201      	movs	r2, #1
   1cdb6:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1cdba:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1cdbe:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1cdc2:	f381 8811 	msr	BASEPRI, r1
   1cdc6:	f3bf 8f6f 	isb	sy
}
   1cdca:	2000      	movs	r0, #0
   1cdcc:	4770      	bx	lr

0001cdce <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1cdce:	f003 bdfa 	b.w	209c6 <SystemInit>

0001cdd2 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1cdd2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1cdd6:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1cdda:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1cddc:	4640      	mov	r0, r8
{
   1cdde:	461f      	mov	r7, r3
   1cde0:	460c      	mov	r4, r1
   1cde2:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1cde4:	f001 f9a8 	bl	1e138 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1cde8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1cdec:	b280      	uxth	r0, r0
   1cdee:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1cdf2:	9300      	str	r3, [sp, #0]
   1cdf4:	4632      	mov	r2, r6
   1cdf6:	463b      	mov	r3, r7
   1cdf8:	4621      	mov	r1, r4
   1cdfa:	4628      	mov	r0, r5
   1cdfc:	f002 fce4 	bl	1f7c8 <bt_gatt_attr_read>
}
   1ce00:	b004      	add	sp, #16
   1ce02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce06 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   1ce06:	6883      	ldr	r3, [r0, #8]
   1ce08:	68db      	ldr	r3, [r3, #12]
   1ce0a:	4718      	bx	r3

0001ce0c <nvs_flash_rd>:
{
   1ce0c:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1ce0e:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ce10:	8984      	ldrh	r4, [r0, #12]
   1ce12:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1ce14:	fa16 f181 	uxtah	r1, r6, r1
   1ce18:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   1ce1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   1ce1e:	6884      	ldr	r4, [r0, #8]
   1ce20:	6824      	ldr	r4, [r4, #0]
   1ce22:	46a4      	mov	ip, r4
}
   1ce24:	bc70      	pop	{r4, r5, r6}
   1ce26:	4760      	bx	ip

0001ce28 <nvs_flash_block_cmp>:
{
   1ce28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ce2c:	4681      	mov	r9, r0
   1ce2e:	460e      	mov	r6, r1
   1ce30:	4617      	mov	r7, r2
   1ce32:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1ce34:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   1ce36:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1ce38:	681d      	ldr	r5, [r3, #0]
   1ce3a:	426d      	negs	r5, r5
	block_size =
   1ce3c:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1ce40:	b91c      	cbnz	r4, 1ce4a <nvs_flash_block_cmp+0x22>
	return 0;
   1ce42:	4620      	mov	r0, r4
}
   1ce44:	b009      	add	sp, #36	; 0x24
   1ce46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1ce4a:	42ac      	cmp	r4, r5
   1ce4c:	46a0      	mov	r8, r4
   1ce4e:	bf28      	it	cs
   1ce50:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1ce52:	466a      	mov	r2, sp
   1ce54:	4643      	mov	r3, r8
   1ce56:	4631      	mov	r1, r6
   1ce58:	4648      	mov	r0, r9
   1ce5a:	f7ff ffd7 	bl	1ce0c <nvs_flash_rd>
		if (rc) {
   1ce5e:	2800      	cmp	r0, #0
   1ce60:	d1f0      	bne.n	1ce44 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1ce62:	4642      	mov	r2, r8
   1ce64:	4669      	mov	r1, sp
   1ce66:	4638      	mov	r0, r7
   1ce68:	f001 f993 	bl	1e192 <memcmp>
		if (rc) {
   1ce6c:	b920      	cbnz	r0, 1ce78 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   1ce6e:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1ce72:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1ce74:	4447      	add	r7, r8
   1ce76:	e7e3      	b.n	1ce40 <nvs_flash_block_cmp+0x18>
			return 1;
   1ce78:	2001      	movs	r0, #1
   1ce7a:	e7e3      	b.n	1ce44 <nvs_flash_block_cmp+0x1c>

0001ce7c <nvs_flash_cmp_const>:
{
   1ce7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce80:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1ce82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   1ce84:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1ce86:	681d      	ldr	r5, [r3, #0]
{
   1ce88:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1ce8a:	426d      	negs	r5, r5
	block_size =
   1ce8c:	f005 0520 	and.w	r5, r5, #32
{
   1ce90:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1ce92:	4668      	mov	r0, sp
{
   1ce94:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   1ce96:	462a      	mov	r2, r5
   1ce98:	f001 f9b7 	bl	1e20a <memset>
	while (len) {
   1ce9c:	b91c      	cbnz	r4, 1cea6 <nvs_flash_cmp_const+0x2a>
	return 0;
   1ce9e:	4620      	mov	r0, r4
}
   1cea0:	b008      	add	sp, #32
   1cea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1cea6:	42ac      	cmp	r4, r5
   1cea8:	46a0      	mov	r8, r4
   1ceaa:	bf28      	it	cs
   1ceac:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1ceae:	466a      	mov	r2, sp
   1ceb0:	4643      	mov	r3, r8
   1ceb2:	4631      	mov	r1, r6
   1ceb4:	4638      	mov	r0, r7
   1ceb6:	f7ff ffb7 	bl	1ce28 <nvs_flash_block_cmp>
		if (rc) {
   1ceba:	2800      	cmp	r0, #0
   1cebc:	d1f0      	bne.n	1cea0 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   1cebe:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1cec2:	4446      	add	r6, r8
   1cec4:	e7ea      	b.n	1ce9c <nvs_flash_cmp_const+0x20>

0001cec6 <nvs_flash_erase_sector>:
{
   1cec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1ceca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	addr &= ADDR_SECT_MASK;
   1cecc:	0c0e      	lsrs	r6, r1, #16
   1cece:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1ced0:	4631      	mov	r1, r6
   1ced2:	8983      	ldrh	r3, [r0, #12]
   1ced4:	7912      	ldrb	r2, [r2, #4]
{
   1ced6:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1ced8:	f7ff ffd0 	bl	1ce7c <nvs_flash_cmp_const>
	if (rc <= 0) {
   1cedc:	1e04      	subs	r4, r0, #0
   1cede:	dd16      	ble.n	1cf0e <nvs_flash_erase_sector+0x48>
	rc = flash_write_protection_set(fs->flash_device, false);
   1cee0:	2100      	movs	r1, #0
   1cee2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   1cee4:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1cee6:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   1ceea:	f7ff ff8c 	bl	1ce06 <flash_write_protection_set>
	if (rc) {
   1ceee:	4604      	mov	r4, r0
   1cef0:	b968      	cbnz	r0, 1cf0e <nvs_flash_erase_sector+0x48>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1cef2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1cef4:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   1cef6:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1cef8:	0c31      	lsrs	r1, r6, #16
   1cefa:	fb08 7101 	mla	r1, r8, r1, r7
   1cefe:	689b      	ldr	r3, [r3, #8]
   1cf00:	4798      	blx	r3
	if (rc) {
   1cf02:	4604      	mov	r4, r0
   1cf04:	b918      	cbnz	r0, 1cf0e <nvs_flash_erase_sector+0x48>
	(void) flash_write_protection_set(fs->flash_device, true);
   1cf06:	2101      	movs	r1, #1
   1cf08:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1cf0a:	f7ff ff7c 	bl	1ce06 <flash_write_protection_set>
}
   1cf0e:	4620      	mov	r0, r4
   1cf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cf14 <nvs_ate_crc8_check>:
{
   1cf14:	b510      	push	{r4, lr}
   1cf16:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1cf18:	4601      	mov	r1, r0
   1cf1a:	2207      	movs	r2, #7
   1cf1c:	20ff      	movs	r0, #255	; 0xff
   1cf1e:	f7ec ff7f 	bl	9e20 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1cf22:	79e3      	ldrb	r3, [r4, #7]
}
   1cf24:	1a18      	subs	r0, r3, r0
   1cf26:	bf18      	it	ne
   1cf28:	2001      	movne	r0, #1
   1cf2a:	bd10      	pop	{r4, pc}

0001cf2c <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1cf2c:	4601      	mov	r1, r0
{
   1cf2e:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1cf30:	2207      	movs	r2, #7
{
   1cf32:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1cf34:	20ff      	movs	r0, #255	; 0xff
   1cf36:	f7ec ff73 	bl	9e20 <crc8_ccitt>
	entry->crc8 = crc8;
   1cf3a:	71e0      	strb	r0, [r4, #7]
}
   1cf3c:	bd10      	pop	{r4, pc}

0001cf3e <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1cf3e:	680b      	ldr	r3, [r1, #0]
   1cf40:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1cf44:	0c1a      	lsrs	r2, r3, #16
   1cf46:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1cf4a:	bf08      	it	eq
   1cf4c:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1cf50:	600b      	str	r3, [r1, #0]
}
   1cf52:	4770      	bx	lr

0001cf54 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1cf54:	7803      	ldrb	r3, [r0, #0]
   1cf56:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1cf58:	bf81      	itttt	hi
   1cf5a:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1cf5e:	18c9      	addhi	r1, r1, r3
   1cf60:	425b      	neghi	r3, r3
   1cf62:	4019      	andhi	r1, r3
}
   1cf64:	4608      	mov	r0, r1
   1cf66:	4770      	bx	lr

0001cf68 <nvs_prev_ate>:
{
   1cf68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cf6a:	4604      	mov	r4, r0
   1cf6c:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1cf6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1cf70:	2108      	movs	r1, #8
   1cf72:	f7ff ffef 	bl	1cf54 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1cf76:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1cf78:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1cf7a:	6829      	ldr	r1, [r5, #0]
   1cf7c:	4620      	mov	r0, r4
   1cf7e:	f7ff ff45 	bl	1ce0c <nvs_flash_rd>
	if (rc) {
   1cf82:	2800      	cmp	r0, #0
   1cf84:	d13e      	bne.n	1d004 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   1cf86:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1cf88:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   1cf8a:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1cf8c:	b299      	uxth	r1, r3
   1cf8e:	1b92      	subs	r2, r2, r6
   1cf90:	4291      	cmp	r1, r2
	*addr += ate_size;
   1cf92:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1cf94:	d136      	bne.n	1d004 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1cf96:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1cf98:	bf09      	itett	eq
   1cf9a:	89e1      	ldrheq	r1, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   1cf9c:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1cfa0:	f101 31ff 	addeq.w	r1, r1, #4294967295
   1cfa4:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1cfa8:	466a      	mov	r2, sp
   1cfaa:	2308      	movs	r3, #8
   1cfac:	4620      	mov	r0, r4
   1cfae:	6029      	str	r1, [r5, #0]
   1cfb0:	f7ff ff2c 	bl	1ce0c <nvs_flash_rd>
	if (rc) {
   1cfb4:	bb30      	cbnz	r0, 1d004 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1cfb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cfb8:	466a      	mov	r2, sp
   1cfba:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1cfbc:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1cfbe:	f812 7b01 	ldrb.w	r7, [r2], #1
   1cfc2:	42b9      	cmp	r1, r7
   1cfc4:	d115      	bne.n	1cff2 <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1cfc6:	3301      	adds	r3, #1
   1cfc8:	2b08      	cmp	r3, #8
   1cfca:	d1f8      	bne.n	1cfbe <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   1cfcc:	6863      	ldr	r3, [r4, #4]
   1cfce:	e00e      	b.n	1cfee <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1cfd0:	89a3      	ldrh	r3, [r4, #12]
   1cfd2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1cfd6:	1b9b      	subs	r3, r3, r6
   1cfd8:	429a      	cmp	r2, r3
   1cfda:	d20f      	bcs.n	1cffc <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   1cfdc:	fbb2 f3f6 	udiv	r3, r2, r6
   1cfe0:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1cfe4:	b956      	cbnz	r6, 1cffc <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   1cfe6:	682b      	ldr	r3, [r5, #0]
   1cfe8:	0c1b      	lsrs	r3, r3, #16
   1cfea:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   1cfec:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1cfee:	602b      	str	r3, [r5, #0]
		return 0;
   1cff0:	e008      	b.n	1d004 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   1cff2:	4668      	mov	r0, sp
   1cff4:	f7ff ff8e 	bl	1cf14 <nvs_ate_crc8_check>
   1cff8:	2800      	cmp	r0, #0
   1cffa:	d0e9      	beq.n	1cfd0 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   1cffc:	4629      	mov	r1, r5
   1cffe:	4620      	mov	r0, r4
   1d000:	f7ed ff26 	bl	ae50 <nvs_recover_last_ate>
}
   1d004:	b003      	add	sp, #12
   1d006:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d008 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d00c:	4605      	mov	r5, r0
   1d00e:	460c      	mov	r4, r1
	offset = fs->offset;
   1d010:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d014:	f8b0 900c 	ldrh.w	r9, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d018:	b088      	sub	sp, #32
	rc = flash_write_protection_set(fs->flash_device, false);
   1d01a:	2100      	movs	r1, #0
   1d01c:	6a80      	ldr	r0, [r0, #40]	; 0x28
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d01e:	4690      	mov	r8, r2
   1d020:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   1d022:	f7ff fef0 	bl	1ce06 <flash_write_protection_set>
	if (rc) {
   1d026:	2800      	cmp	r0, #0
   1d028:	d134      	bne.n	1d094 <nvs_flash_al_wrt.part.0+0x8c>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d02a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d02c:	0c27      	lsrs	r7, r4, #16
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d02e:	681b      	ldr	r3, [r3, #0]
	offset += addr & ADDR_OFFS_MASK;
   1d030:	fa1a f484 	uxtah	r4, sl, r4
   1d034:	fb09 4707 	mla	r7, r9, r7, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d038:	f1c3 0900 	rsb	r9, r3, #0
	if (blen > 0) {
   1d03c:	ea19 0906 	ands.w	r9, r9, r6
   1d040:	d00c      	beq.n	1d05c <nvs_flash_al_wrt.part.0+0x54>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1d042:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   1d044:	6883      	ldr	r3, [r0, #8]
   1d046:	4642      	mov	r2, r8
   1d048:	685c      	ldr	r4, [r3, #4]
   1d04a:	4639      	mov	r1, r7
   1d04c:	464b      	mov	r3, r9
   1d04e:	47a0      	blx	r4
		if (rc) {
   1d050:	4604      	mov	r4, r0
   1d052:	b9d0      	cbnz	r0, 1d08a <nvs_flash_al_wrt.part.0+0x82>
		len -= blen;
   1d054:	eba6 0609 	sub.w	r6, r6, r9
		offset += blen;
   1d058:	444f      	add	r7, r9
		data8 += blen;
   1d05a:	44c8      	add	r8, r9
	if (len) {
   1d05c:	b1ee      	cbz	r6, 1d09a <nvs_flash_al_wrt.part.0+0x92>
		memcpy(buf, data8, len);
   1d05e:	4632      	mov	r2, r6
   1d060:	4641      	mov	r1, r8
   1d062:	4668      	mov	r0, sp
   1d064:	f001 f8a6 	bl	1e1b4 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   1d068:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1d06a:	eb0d 0006 	add.w	r0, sp, r6
   1d06e:	681a      	ldr	r2, [r3, #0]
   1d070:	7919      	ldrb	r1, [r3, #4]
   1d072:	1b92      	subs	r2, r2, r6
   1d074:	f001 f8c9 	bl	1e20a <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1d078:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   1d07c:	681b      	ldr	r3, [r3, #0]
   1d07e:	6882      	ldr	r2, [r0, #8]
   1d080:	4639      	mov	r1, r7
   1d082:	6854      	ldr	r4, [r2, #4]
   1d084:	466a      	mov	r2, sp
   1d086:	47a0      	blx	r4
   1d088:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   1d08a:	2101      	movs	r1, #1
   1d08c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d08e:	f7ff feba 	bl	1ce06 <flash_write_protection_set>
	return rc;
   1d092:	4620      	mov	r0, r4
}
   1d094:	b008      	add	sp, #32
   1d096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   1d09a:	4634      	mov	r4, r6
   1d09c:	e7f5      	b.n	1d08a <nvs_flash_al_wrt.part.0+0x82>

0001d09e <nvs_flash_data_wrt>:
{
   1d09e:	b538      	push	{r3, r4, r5, lr}
   1d0a0:	4604      	mov	r4, r0
	if (!len) {
   1d0a2:	4615      	mov	r5, r2
   1d0a4:	b12a      	cbz	r2, 1d0b2 <nvs_flash_data_wrt+0x14>
   1d0a6:	4613      	mov	r3, r2
   1d0a8:	460a      	mov	r2, r1
   1d0aa:	6881      	ldr	r1, [r0, #8]
   1d0ac:	f7ff ffac 	bl	1d008 <nvs_flash_al_wrt.part.0>
   1d0b0:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   1d0b2:	4629      	mov	r1, r5
   1d0b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d0b6:	f7ff ff4d 	bl	1cf54 <nvs_al_size.isra.0>
   1d0ba:	68a3      	ldr	r3, [r4, #8]
   1d0bc:	4403      	add	r3, r0
   1d0be:	60a3      	str	r3, [r4, #8]
}
   1d0c0:	4610      	mov	r0, r2
   1d0c2:	bd38      	pop	{r3, r4, r5, pc}

0001d0c4 <nvs_flash_ate_wrt>:
{
   1d0c4:	b510      	push	{r4, lr}
   1d0c6:	460a      	mov	r2, r1
	if (!len) {
   1d0c8:	2308      	movs	r3, #8
   1d0ca:	6841      	ldr	r1, [r0, #4]
{
   1d0cc:	4604      	mov	r4, r0
   1d0ce:	f7ff ff9b 	bl	1d008 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1d0d2:	2108      	movs	r1, #8
   1d0d4:	4602      	mov	r2, r0
   1d0d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d0d8:	f7ff ff3c 	bl	1cf54 <nvs_al_size.isra.0>
   1d0dc:	6863      	ldr	r3, [r4, #4]
   1d0de:	1a1b      	subs	r3, r3, r0
   1d0e0:	6063      	str	r3, [r4, #4]
}
   1d0e2:	4610      	mov	r0, r2
   1d0e4:	bd10      	pop	{r4, pc}

0001d0e6 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1d0e6:	2300      	movs	r3, #0
   1d0e8:	461a      	mov	r2, r3
   1d0ea:	f7ee b8c5 	b.w	b278 <nvs_write>

0001d0ee <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1d0ee:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1d0f0:	2400      	movs	r4, #0
   1d0f2:	9400      	str	r4, [sp, #0]
   1d0f4:	f7ee f98a 	bl	b40c <nvs_read_hist>
	return rc;
}
   1d0f8:	b002      	add	sp, #8
   1d0fa:	bd10      	pop	{r4, pc}

0001d0fc <virtio_get_status>:
}
   1d0fc:	2004      	movs	r0, #4
   1d0fe:	4770      	bx	lr

0001d100 <virtio_get_features>:
}
   1d100:	2001      	movs	r0, #1
   1d102:	4770      	bx	lr

0001d104 <virtio_set_features>:
}
   1d104:	4770      	bx	lr

0001d106 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1d106:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1d108:	21b4      	movs	r1, #180	; 0xb4
   1d10a:	2004      	movs	r0, #4
   1d10c:	f7ff fab6 	bl	1c67c <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1d110:	4604      	mov	r4, r0
   1d112:	b118      	cbz	r0, 1d11c <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1d114:	22b4      	movs	r2, #180	; 0xb4
   1d116:	2100      	movs	r1, #0
   1d118:	f001 f877 	bl	1e20a <memset>
	}

	return vqs;
}
   1d11c:	4620      	mov	r0, r4
   1d11e:	bd10      	pop	{r4, pc}

0001d120 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1d120:	f003 bf69 	b.w	20ff6 <rpmsg_destroy_ept>

0001d124 <device_get_binding>:
   1d124:	f7fc bbf8 	b.w	19918 <z_impl_device_get_binding>

0001d128 <get_sectors_cb>:
{
   1d128:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1d12a:	6802      	ldr	r2, [r0, #0]
   1d12c:	684c      	ldr	r4, [r1, #4]
   1d12e:	42a2      	cmp	r2, r4
   1d130:	d316      	bcc.n	1d160 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1d132:	688b      	ldr	r3, [r1, #8]
   1d134:	4423      	add	r3, r4
   1d136:	429a      	cmp	r2, r3
   1d138:	d206      	bcs.n	1d148 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1d13a:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1d13e:	42ab      	cmp	r3, r5
   1d140:	d304      	bcc.n	1d14c <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1d142:	f06f 030b 	mvn.w	r3, #11
   1d146:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1d148:	2000      	movs	r0, #0
   1d14a:	e00a      	b.n	1d162 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1d14c:	68cd      	ldr	r5, [r1, #12]
   1d14e:	1b12      	subs	r2, r2, r4
   1d150:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1d154:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1d156:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   1d15a:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   1d15c:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1d15e:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1d160:	2001      	movs	r0, #1
}
   1d162:	bd70      	pop	{r4, r5, r6, pc}

0001d164 <settings_load>:
	return settings_load_subtree(NULL);
   1d164:	2000      	movs	r0, #0
   1d166:	f7ee bbfd 	b.w	b964 <settings_load_subtree>

0001d16a <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1d16a:	2200      	movs	r2, #0
   1d16c:	4611      	mov	r1, r2
   1d16e:	f7ee bbbf 	b.w	b8f0 <settings_save_one>

0001d172 <settings_name_steq>:
{
   1d172:	4603      	mov	r3, r0
   1d174:	b530      	push	{r4, r5, lr}
   1d176:	4608      	mov	r0, r1
	if (next) {
   1d178:	b10a      	cbz	r2, 1d17e <settings_name_steq+0xc>
		*next = NULL;
   1d17a:	2100      	movs	r1, #0
   1d17c:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1d17e:	b163      	cbz	r3, 1d19a <settings_name_steq+0x28>
   1d180:	b190      	cbz	r0, 1d1a8 <settings_name_steq+0x36>
   1d182:	1e41      	subs	r1, r0, #1
   1d184:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1d186:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1d18a:	4604      	mov	r4, r0
   1d18c:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d190:	b15d      	cbz	r5, 1d1aa <settings_name_steq+0x38>
   1d192:	429d      	cmp	r5, r3
   1d194:	d101      	bne.n	1d19a <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1d196:	2d3d      	cmp	r5, #61	; 0x3d
   1d198:	d1f5      	bne.n	1d186 <settings_name_steq+0x14>
	return 0;
   1d19a:	2000      	movs	r0, #0
   1d19c:	e004      	b.n	1d1a8 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1d19e:	2b3d      	cmp	r3, #61	; 0x3d
   1d1a0:	d008      	beq.n	1d1b4 <settings_name_steq+0x42>
   1d1a2:	fab3 f083 	clz	r0, r3
   1d1a6:	0940      	lsrs	r0, r0, #5
}
   1d1a8:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1d1aa:	2b2f      	cmp	r3, #47	; 0x2f
   1d1ac:	d1f7      	bne.n	1d19e <settings_name_steq+0x2c>
		if (next) {
   1d1ae:	b10a      	cbz	r2, 1d1b4 <settings_name_steq+0x42>
			*next = name + 1;
   1d1b0:	3401      	adds	r4, #1
   1d1b2:	6014      	str	r4, [r2, #0]
		return 1;
   1d1b4:	2001      	movs	r0, #1
   1d1b6:	e7f7      	b.n	1d1a8 <settings_name_steq+0x36>

0001d1b8 <settings_name_next>:
{
   1d1b8:	4603      	mov	r3, r0
   1d1ba:	b530      	push	{r4, r5, lr}
	if (next) {
   1d1bc:	b109      	cbz	r1, 1d1c2 <settings_name_next+0xa>
		*next = NULL;
   1d1be:	2200      	movs	r2, #0
   1d1c0:	600a      	str	r2, [r1, #0]
	if (!name) {
   1d1c2:	b16b      	cbz	r3, 1d1e0 <settings_name_next+0x28>
   1d1c4:	461a      	mov	r2, r3
   1d1c6:	4614      	mov	r4, r2
   1d1c8:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1d1ca:	f812 5b01 	ldrb.w	r5, [r2], #1
   1d1ce:	b135      	cbz	r5, 1d1de <settings_name_next+0x26>
   1d1d0:	2d3d      	cmp	r5, #61	; 0x3d
   1d1d2:	d004      	beq.n	1d1de <settings_name_next+0x26>
   1d1d4:	2d2f      	cmp	r5, #47	; 0x2f
   1d1d6:	d1f6      	bne.n	1d1c6 <settings_name_next+0xe>
		if (next) {
   1d1d8:	b109      	cbz	r1, 1d1de <settings_name_next+0x26>
			*next = name + 1;
   1d1da:	3401      	adds	r4, #1
   1d1dc:	600c      	str	r4, [r1, #0]
}
   1d1de:	bd30      	pop	{r4, r5, pc}
		return 0;
   1d1e0:	4618      	mov	r0, r3
   1d1e2:	e7fc      	b.n	1d1de <settings_name_next+0x26>

0001d1e4 <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1d1e4:	4613      	mov	r3, r2
{
   1d1e6:	b510      	push	{r4, lr}
   1d1e8:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1d1ea:	460a      	mov	r2, r1
   1d1ec:	8881      	ldrh	r1, [r0, #4]
   1d1ee:	6800      	ldr	r0, [r0, #0]
   1d1f0:	f7ff ff7d 	bl	1d0ee <nvs_read>
}
   1d1f4:	42a0      	cmp	r0, r4
   1d1f6:	bfa8      	it	ge
   1d1f8:	4620      	movge	r0, r4
   1d1fa:	bd10      	pop	{r4, pc}

0001d1fc <settings_nvs_save>:
{
   1d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d200:	b097      	sub	sp, #92	; 0x5c
   1d202:	4604      	mov	r4, r0
   1d204:	469b      	mov	fp, r3
	if (!name) {
   1d206:	4689      	mov	r9, r1
{
   1d208:	9201      	str	r2, [sp, #4]
	if (!name) {
   1d20a:	2900      	cmp	r1, #0
   1d20c:	d069      	beq.n	1d2e2 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   1d20e:	b1da      	cbz	r2, 1d248 <settings_nvs_save+0x4c>
   1d210:	fabb f78b 	clz	r7, fp
   1d214:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   1d216:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1d218:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   1d21c:	3501      	adds	r5, #1
   1d21e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1d220:	46a8      	mov	r8, r5
		name_id--;
   1d222:	1e6e      	subs	r6, r5, #1
   1d224:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   1d226:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1d22a:	d02e      	beq.n	1d28a <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1d22c:	234a      	movs	r3, #74	; 0x4a
   1d22e:	4631      	mov	r1, r6
   1d230:	4650      	mov	r0, sl
   1d232:	aa03      	add	r2, sp, #12
   1d234:	f7ff ff5b 	bl	1d0ee <nvs_read>
		if (rc < 0) {
   1d238:	2800      	cmp	r0, #0
   1d23a:	da07      	bge.n	1d24c <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1d23c:	f110 0f02 	cmn.w	r0, #2
   1d240:	bf08      	it	eq
   1d242:	46b0      	moveq	r8, r6
   1d244:	4635      	mov	r5, r6
   1d246:	e7ec      	b.n	1d222 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   1d248:	2701      	movs	r7, #1
   1d24a:	e7e4      	b.n	1d216 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1d24c:	ab16      	add	r3, sp, #88	; 0x58
   1d24e:	4418      	add	r0, r3
   1d250:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   1d252:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   1d254:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   1d258:	4648      	mov	r0, r9
   1d25a:	f000 ff7d 	bl	1e158 <strcmp>
   1d25e:	2800      	cmp	r0, #0
   1d260:	d1f0      	bne.n	1d244 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1d262:	2f00      	cmp	r7, #0
   1d264:	d03b      	beq.n	1d2de <settings_nvs_save+0xe2>
   1d266:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1d268:	42b3      	cmp	r3, r6
   1d26a:	d142      	bne.n	1d2f2 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   1d26c:	4622      	mov	r2, r4
   1d26e:	1e73      	subs	r3, r6, #1
   1d270:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1d274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d278:	2302      	movs	r3, #2
   1d27a:	4650      	mov	r0, sl
   1d27c:	f7ed fffc 	bl	b278 <nvs_write>
			if (rc < 0) {
   1d280:	2800      	cmp	r0, #0
   1d282:	da36      	bge.n	1d2f2 <settings_nvs_save+0xf6>
}
   1d284:	b017      	add	sp, #92	; 0x5c
   1d286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   1d28a:	bb6f      	cbnz	r7, 1d2e8 <settings_nvs_save+0xec>
	write_name = true;
   1d28c:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1d28e:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1d292:	d02b      	beq.n	1d2ec <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1d294:	f104 0508 	add.w	r5, r4, #8
   1d298:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1d29c:	465b      	mov	r3, fp
   1d29e:	4628      	mov	r0, r5
   1d2a0:	9a01      	ldr	r2, [sp, #4]
   1d2a2:	b289      	uxth	r1, r1
   1d2a4:	f7ed ffe8 	bl	b278 <nvs_write>
	if (rc < 0) {
   1d2a8:	2800      	cmp	r0, #0
   1d2aa:	dbeb      	blt.n	1d284 <settings_nvs_save+0x88>
	if (write_name) {
   1d2ac:	b157      	cbz	r7, 1d2c4 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1d2ae:	4648      	mov	r0, r9
   1d2b0:	f000 ff42 	bl	1e138 <strlen>
   1d2b4:	464a      	mov	r2, r9
   1d2b6:	4603      	mov	r3, r0
   1d2b8:	4641      	mov	r1, r8
   1d2ba:	4628      	mov	r0, r5
   1d2bc:	f7ed ffdc 	bl	b278 <nvs_write>
		if (rc < 0) {
   1d2c0:	2800      	cmp	r0, #0
   1d2c2:	dbdf      	blt.n	1d284 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   1d2c4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1d2c6:	4543      	cmp	r3, r8
   1d2c8:	d220      	bcs.n	1d30c <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   1d2ca:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1d2cc:	2302      	movs	r3, #2
   1d2ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d2d2:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   1d2d4:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1d2d8:	f7ed ffce 	bl	b278 <nvs_write>
   1d2dc:	e016      	b.n	1d30c <settings_nvs_save+0x110>
   1d2de:	46b0      	mov	r8, r6
   1d2e0:	e7d5      	b.n	1d28e <settings_nvs_save+0x92>
		return -EINVAL;
   1d2e2:	f06f 0015 	mvn.w	r0, #21
   1d2e6:	e7cd      	b.n	1d284 <settings_nvs_save+0x88>
		return 0;
   1d2e8:	2000      	movs	r0, #0
   1d2ea:	e7cb      	b.n	1d284 <settings_nvs_save+0x88>
		return -ENOMEM;
   1d2ec:	f06f 000b 	mvn.w	r0, #11
   1d2f0:	e7c8      	b.n	1d284 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   1d2f2:	4631      	mov	r1, r6
   1d2f4:	4650      	mov	r0, sl
   1d2f6:	f7ff fef6 	bl	1d0e6 <nvs_delete>
			if (rc >= 0) {
   1d2fa:	2800      	cmp	r0, #0
   1d2fc:	dbc2      	blt.n	1d284 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1d2fe:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1d302:	313f      	adds	r1, #63	; 0x3f
   1d304:	4650      	mov	r0, sl
   1d306:	b289      	uxth	r1, r1
   1d308:	f7ff feed 	bl	1d0e6 <nvs_delete>
	if (rc < 0) {
   1d30c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1d310:	e7b8      	b.n	1d284 <settings_nvs_save+0x88>

0001d312 <settings_nvs_backend_init>:
{
   1d312:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1d314:	f100 0608 	add.w	r6, r0, #8
   1d318:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   1d31a:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1d31c:	4630      	mov	r0, r6
   1d31e:	f7ed fe6f 	bl	b000 <nvs_init>
	if (rc) {
   1d322:	4605      	mov	r5, r0
   1d324:	b970      	cbnz	r0, 1d344 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1d326:	2302      	movs	r3, #2
   1d328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d32c:	4630      	mov	r0, r6
   1d32e:	f10d 0206 	add.w	r2, sp, #6
   1d332:	f7ff fedc 	bl	1d0ee <nvs_read>
	if (rc < 0) {
   1d336:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   1d338:	bfb4      	ite	lt
   1d33a:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   1d33e:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   1d342:	8723      	strh	r3, [r4, #56]	; 0x38
}
   1d344:	4628      	mov	r0, r5
   1d346:	b002      	add	sp, #8
   1d348:	bd70      	pop	{r4, r5, r6, pc}

0001d34a <set_on_state>:
	__asm__ volatile(
   1d34a:	f04f 0320 	mov.w	r3, #32
   1d34e:	f3ef 8211 	mrs	r2, BASEPRI
   1d352:	f383 8811 	msr	BASEPRI, r3
   1d356:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d35a:	6803      	ldr	r3, [r0, #0]
   1d35c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d360:	f043 0302 	orr.w	r3, r3, #2
   1d364:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d366:	f382 8811 	msr	BASEPRI, r2
   1d36a:	f3bf 8f6f 	isb	sy
}
   1d36e:	4770      	bx	lr

0001d370 <async_start>:
{
   1d370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d372:	9f06      	ldr	r7, [sp, #24]
   1d374:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1d376:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1d378:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d37a:	f04f 0020 	mov.w	r0, #32
   1d37e:	f3ef 8c11 	mrs	ip, BASEPRI
   1d382:	f380 8811 	msr	BASEPRI, r0
   1d386:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d38a:	260c      	movs	r6, #12
   1d38c:	fb06 4601 	mla	r6, r6, r1, r4
   1d390:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d394:	f000 0e07 	and.w	lr, r0, #7
   1d398:	f1be 0f01 	cmp.w	lr, #1
   1d39c:	d111      	bne.n	1d3c2 <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d39e:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1d3a2:	2600      	movs	r6, #0
	__asm__ volatile(
   1d3a4:	f38c 8811 	msr	BASEPRI, ip
   1d3a8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d3ac:	b93e      	cbnz	r6, 1d3be <async_start+0x4e>
	subdata->cb = cb;
   1d3ae:	200c      	movs	r0, #12
   1d3b0:	4341      	muls	r1, r0
   1d3b2:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1d3b4:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1d3b8:	686b      	ldr	r3, [r5, #4]
   1d3ba:	585b      	ldr	r3, [r3, r1]
   1d3bc:	4798      	blx	r3
}
   1d3be:	4630      	mov	r0, r6
   1d3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d3c2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1d3c6:	4287      	cmp	r7, r0
   1d3c8:	bf14      	ite	ne
   1d3ca:	f04f 36ff 	movne.w	r6, #4294967295
   1d3ce:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1d3d2:	e7e7      	b.n	1d3a4 <async_start+0x34>

0001d3d4 <api_start>:
{
   1d3d4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d3d6:	2480      	movs	r4, #128	; 0x80
   1d3d8:	9400      	str	r4, [sp, #0]
   1d3da:	f7ff ffc9 	bl	1d370 <async_start>
}
   1d3de:	b002      	add	sp, #8
   1d3e0:	bd10      	pop	{r4, pc}

0001d3e2 <onoff_started_callback>:
	return &data->mgr[type];
   1d3e2:	68c0      	ldr	r0, [r0, #12]
   1d3e4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d3e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1d3ea:	2100      	movs	r1, #0
   1d3ec:	4710      	bx	r2

0001d3ee <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d3ee:	2003      	movs	r0, #3
   1d3f0:	f7fb bbe2 	b.w	18bb8 <nrfx_clock_start>

0001d3f4 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d3f4:	2002      	movs	r0, #2
   1d3f6:	f7fb bbdf 	b.w	18bb8 <nrfx_clock_start>

0001d3fa <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d3fa:	2000      	movs	r0, #0
   1d3fc:	f7fb bbdc 	b.w	18bb8 <nrfx_clock_start>

0001d400 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d400:	2003      	movs	r0, #3
   1d402:	f7fb bc43 	b.w	18c8c <nrfx_clock_stop>

0001d406 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d406:	2002      	movs	r0, #2
   1d408:	f7fb bc40 	b.w	18c8c <nrfx_clock_stop>

0001d40c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d40c:	2000      	movs	r0, #0
   1d40e:	f7fb bc3d 	b.w	18c8c <nrfx_clock_stop>

0001d412 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1d412:	2280      	movs	r2, #128	; 0x80
   1d414:	f7ee bd16 	b.w	be44 <stop>

0001d418 <blocking_start_callback>:
{
   1d418:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d41a:	f7fe b853 	b.w	1b4c4 <z_impl_k_sem_give>

0001d41e <bt_rpmsg_open>:
{
   1d41e:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1d420:	f7ef f810 	bl	c444 <bt_rpmsg_platform_endpoint_is_bound>
   1d424:	b108      	cbz	r0, 1d42a <bt_rpmsg_open+0xc>
}
   1d426:	2000      	movs	r0, #0
   1d428:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1d42a:	2100      	movs	r1, #0
   1d42c:	2021      	movs	r0, #33	; 0x21
   1d42e:	f7fe f813 	bl	1b458 <z_impl_k_sleep>
   1d432:	e7f5      	b.n	1d420 <bt_rpmsg_open+0x2>

0001d434 <endpoint_cb>:
{
   1d434:	b508      	push	{r3, lr}
   1d436:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1d438:	4611      	mov	r1, r2
   1d43a:	f7ee ff19 	bl	c270 <bt_rpmsg_rx>
}
   1d43e:	2000      	movs	r0, #0
   1d440:	bd08      	pop	{r3, pc}

0001d442 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1d442:	4770      	bx	lr

0001d444 <attr_find_by_handle>:
{
   1d444:	b570      	push	{r4, r5, r6, lr}
   1d446:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1d448:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1d44c:	b1a8      	cbz	r0, 1d47a <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1d44e:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1d450:	3801      	subs	r0, #1
	while (upper >= lower) {
   1d452:	4286      	cmp	r6, r0
   1d454:	dd01      	ble.n	1d45a <attr_find_by_handle+0x16>
		return NULL;
   1d456:	2000      	movs	r0, #0
   1d458:	e00f      	b.n	1d47a <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1d45a:	1832      	adds	r2, r6, r0
   1d45c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1d460:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1d462:	1cd5      	adds	r5, r2, #3
   1d464:	00eb      	lsls	r3, r5, #3
   1d466:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1d46a:	892d      	ldrh	r5, [r5, #8]
   1d46c:	428d      	cmp	r5, r1
   1d46e:	d201      	bcs.n	1d474 <attr_find_by_handle+0x30>
			lower = m + 1;
   1d470:	1c56      	adds	r6, r2, #1
   1d472:	e7ee      	b.n	1d452 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1d474:	d802      	bhi.n	1d47c <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1d476:	3304      	adds	r3, #4
   1d478:	18e0      	adds	r0, r4, r3
}
   1d47a:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1d47c:	1e50      	subs	r0, r2, #1
   1d47e:	e7e8      	b.n	1d452 <attr_find_by_handle+0xe>

0001d480 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1d480:	2300      	movs	r3, #0
{
   1d482:	b510      	push	{r4, lr}
   1d484:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1d486:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1d48a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1d48e:	b910      	cbnz	r0, 1d496 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1d490:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1d494:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d496:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1d49a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d49c:	4290      	cmp	r0, r2
	list->head = node;
   1d49e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1d4a2:	bf08      	it	eq
   1d4a4:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1d4a8:	f004 f84f 	bl	2154a <k_free>
   1d4ac:	e7ed      	b.n	1d48a <svc_attr_memory_release+0xa>

0001d4ae <atomic_and>:
{
   1d4ae:	4603      	mov	r3, r0
}
   1d4b0:	e8d3 0fef 	ldaex	r0, [r3]
   1d4b4:	ea00 0201 	and.w	r2, r0, r1
   1d4b8:	e8c3 2fec 	stlex	ip, r2, [r3]
   1d4bc:	f1bc 0f00 	cmp.w	ip, #0
   1d4c0:	d1f6      	bne.n	1d4b0 <atomic_and+0x2>
   1d4c2:	4770      	bx	lr

0001d4c4 <discovery_complete_not_found>:
{
   1d4c4:	b510      	push	{r4, lr}
   1d4c6:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1d4c8:	f7ff ffda 	bl	1d480 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d4cc:	f06f 0101 	mvn.w	r1, #1
   1d4d0:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1d4d4:	f7ff ffeb 	bl	1d4ae <atomic_and>
	if (dm->callback->service_not_found) {
   1d4d8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1d4dc:	685b      	ldr	r3, [r3, #4]
   1d4de:	b123      	cbz	r3, 1d4ea <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1d4e0:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1d4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1d4e8:	4718      	bx	r3
}
   1d4ea:	bd10      	pop	{r4, pc}

0001d4ec <bt_gatt_dm_attr_service_val>:
{
   1d4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d4ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d4f2:	2400      	movs	r4, #0
{
   1d4f4:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d4f6:	6801      	ldr	r1, [r0, #0]
   1d4f8:	4668      	mov	r0, sp
   1d4fa:	f88d 4000 	strb.w	r4, [sp]
   1d4fe:	f8ad 3002 	strh.w	r3, [sp, #2]
   1d502:	f000 fef2 	bl	1e2ea <bt_uuid_cmp>
   1d506:	b918      	cbnz	r0, 1d510 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1d508:	6828      	ldr	r0, [r5, #0]
   1d50a:	3808      	subs	r0, #8
}
   1d50c:	b003      	add	sp, #12
   1d50e:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1d510:	f642 0301 	movw	r3, #10241	; 0x2801
   1d514:	6829      	ldr	r1, [r5, #0]
   1d516:	a801      	add	r0, sp, #4
   1d518:	f88d 4004 	strb.w	r4, [sp, #4]
   1d51c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d520:	f000 fee3 	bl	1e2ea <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1d524:	2800      	cmp	r0, #0
   1d526:	d0ef      	beq.n	1d508 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1d528:	4620      	mov	r0, r4
   1d52a:	e7ef      	b.n	1d50c <bt_gatt_dm_attr_service_val+0x20>

0001d52c <bt_gatt_dm_attr_chrc_val>:
{
   1d52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1d52e:	f642 0303 	movw	r3, #10243	; 0x2803
   1d532:	2400      	movs	r4, #0
{
   1d534:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1d536:	6801      	ldr	r1, [r0, #0]
   1d538:	a801      	add	r0, sp, #4
   1d53a:	f88d 4004 	strb.w	r4, [sp, #4]
   1d53e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d542:	f000 fed2 	bl	1e2ea <bt_uuid_cmp>
   1d546:	b918      	cbnz	r0, 1d550 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1d548:	6828      	ldr	r0, [r5, #0]
   1d54a:	3808      	subs	r0, #8
}
   1d54c:	b003      	add	sp, #12
   1d54e:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1d550:	4620      	mov	r0, r4
   1d552:	e7fb      	b.n	1d54c <bt_gatt_dm_attr_chrc_val+0x20>

0001d554 <bt_gatt_dm_conn_get>:
}
   1d554:	6800      	ldr	r0, [r0, #0]
   1d556:	4770      	bx	lr

0001d558 <bt_gatt_dm_char_next>:
{
   1d558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1d55a:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1d55e:	b131      	cbz	r1, 1d56e <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1d560:	42a9      	cmp	r1, r5
   1d562:	d203      	bcs.n	1d56c <bt_gatt_dm_char_next+0x14>
	return NULL;
   1d564:	2500      	movs	r5, #0
}
   1d566:	4628      	mov	r0, r5
   1d568:	b003      	add	sp, #12
   1d56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d56c:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1d56e:	2600      	movs	r6, #0
   1d570:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1d574:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1d578:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1d57c:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1d580:	3508      	adds	r5, #8
   1d582:	42ac      	cmp	r4, r5
   1d584:	d9ee      	bls.n	1d564 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1d586:	6829      	ldr	r1, [r5, #0]
   1d588:	a801      	add	r0, sp, #4
   1d58a:	f88d 6004 	strb.w	r6, [sp, #4]
   1d58e:	f8ad 7006 	strh.w	r7, [sp, #6]
   1d592:	f000 feaa 	bl	1e2ea <bt_uuid_cmp>
   1d596:	2800      	cmp	r0, #0
   1d598:	d1f2      	bne.n	1d580 <bt_gatt_dm_char_next+0x28>
   1d59a:	e7e4      	b.n	1d566 <bt_gatt_dm_char_next+0xe>

0001d59c <bt_gatt_dm_attr_next>:
{
   1d59c:	4602      	mov	r2, r0
		prev = dm->attrs;
   1d59e:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1d5a2:	b111      	cbz	r1, 1d5aa <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1d5a4:	4299      	cmp	r1, r3
   1d5a6:	d30b      	bcc.n	1d5c0 <bt_gatt_dm_attr_next+0x24>
   1d5a8:	460b      	mov	r3, r1
		if (++prev < end) {
   1d5aa:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1d5ae:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1d5b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d5b6:	321c      	adds	r2, #28
	return NULL;
   1d5b8:	4290      	cmp	r0, r2
   1d5ba:	bf28      	it	cs
   1d5bc:	2000      	movcs	r0, #0
   1d5be:	4770      	bx	lr
   1d5c0:	2000      	movs	r0, #0
}
   1d5c2:	4770      	bx	lr

0001d5c4 <bt_gatt_dm_desc_next>:
{
   1d5c4:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1d5c6:	f7ff ffe9 	bl	1d59c <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1d5ca:	4604      	mov	r4, r0
   1d5cc:	b158      	cbz	r0, 1d5e6 <bt_gatt_dm_desc_next+0x22>
   1d5ce:	2300      	movs	r3, #0
   1d5d0:	f88d 3004 	strb.w	r3, [sp, #4]
   1d5d4:	f642 0303 	movw	r3, #10243	; 0x2803
   1d5d8:	6801      	ldr	r1, [r0, #0]
   1d5da:	a801      	add	r0, sp, #4
   1d5dc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d5e0:	f000 fe83 	bl	1e2ea <bt_uuid_cmp>
   1d5e4:	b900      	cbnz	r0, 1d5e8 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1d5e6:	2400      	movs	r4, #0
}
   1d5e8:	4620      	mov	r0, r4
   1d5ea:	b002      	add	sp, #8
   1d5ec:	bd10      	pop	{r4, pc}

0001d5ee <bt_gatt_dm_desc_by_uuid>:
{
   1d5ee:	b570      	push	{r4, r5, r6, lr}
   1d5f0:	4605      	mov	r5, r0
   1d5f2:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1d5f4:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1d5f6:	4621      	mov	r1, r4
   1d5f8:	4628      	mov	r0, r5
   1d5fa:	f7ff ffe3 	bl	1d5c4 <bt_gatt_dm_desc_next>
   1d5fe:	4604      	mov	r4, r0
   1d600:	b128      	cbz	r0, 1d60e <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1d602:	4630      	mov	r0, r6
   1d604:	6821      	ldr	r1, [r4, #0]
   1d606:	f000 fe70 	bl	1e2ea <bt_uuid_cmp>
   1d60a:	2800      	cmp	r0, #0
   1d60c:	d1f3      	bne.n	1d5f6 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1d60e:	4620      	mov	r0, r4
   1d610:	bd70      	pop	{r4, r5, r6, pc}

0001d612 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1d612:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1d614:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1d618:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d61a:	f06f 0102 	mvn.w	r1, #2
   1d61e:	4628      	mov	r0, r5
   1d620:	f7ff ff45 	bl	1d4ae <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1d624:	0783      	lsls	r3, r0, #30
   1d626:	d509      	bpl.n	1d63c <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1d628:	4620      	mov	r0, r4
   1d62a:	f7ff ff29 	bl	1d480 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d62e:	f06f 0101 	mvn.w	r1, #1
   1d632:	4628      	mov	r0, r5
   1d634:	f7ff ff3b 	bl	1d4ae <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1d638:	2000      	movs	r0, #0
}
   1d63a:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1d63c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d640:	e7fb      	b.n	1d63a <bt_gatt_dm_data_release+0x28>

0001d642 <bt_scan_stop>:
	return bt_le_scan_stop();
   1d642:	f7f3 bac1 	b.w	10bc8 <bt_le_scan_stop>

0001d646 <spm_request_read>:
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   1d646:	b510      	push	{r4, lr}
   1d648:	b40f      	push	{r0, r1, r2, r3}
   1d64a:	f7fc ffdb 	bl	1a604 <k_sched_lock>
   1d64e:	bc0f      	pop	{r0, r1, r2, r3}
   1d650:	f7ea fcca 	bl	7fe8 <spm_request_read_nse>
   1d654:	b40f      	push	{r0, r1, r2, r3}
   1d656:	f7fd f8cd 	bl	1a7f4 <k_sched_unlock>
   1d65a:	bc0f      	pop	{r0, r1, r2, r3}
   1d65c:	bd10      	pop	{r4, pc}

0001d65e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1d65e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1d660:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1d662:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1d664:	bf9c      	itt	ls
   1d666:	6880      	ldrls	r0, [r0, #8]
   1d668:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1d66a:	3b01      	subs	r3, #1
   1d66c:	1a98      	subs	r0, r3, r2
}
   1d66e:	4770      	bx	lr

0001d670 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1d674:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d678:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1d67a:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1d67e:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1d680:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1d682:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d684:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1d686:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1d688:	d904      	bls.n	1d694 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1d68a:	f000 fd93 	bl	1e1b4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1d68e:	60ec      	str	r4, [r5, #12]
}
   1d690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1d694:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1d696:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1d69a:	f000 fd8b 	bl	1e1b4 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1d69e:	4622      	mov	r2, r4
   1d6a0:	6868      	ldr	r0, [r5, #4]
   1d6a2:	eb07 0108 	add.w	r1, r7, r8
   1d6a6:	e7f0      	b.n	1d68a <_WriteNoCheck+0x1a>

0001d6a8 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1d6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d6ac:	4606      	mov	r6, r0
   1d6ae:	4689      	mov	r9, r1
   1d6b0:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1d6b2:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1d6b6:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1d6b8:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1d6ba:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1d6bc:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1d6be:	bf28      	it	cs
   1d6c0:	18e4      	addcs	r4, r4, r3
   1d6c2:	3c01      	subs	r4, #1
   1d6c4:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1d6c6:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1d6c8:	42bc      	cmp	r4, r7
   1d6ca:	bf28      	it	cs
   1d6cc:	463c      	movcs	r4, r7
   1d6ce:	4294      	cmp	r4, r2
   1d6d0:	bf28      	it	cs
   1d6d2:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1d6d4:	6870      	ldr	r0, [r6, #4]
   1d6d6:	4649      	mov	r1, r9
   1d6d8:	4428      	add	r0, r5
   1d6da:	4622      	mov	r2, r4
   1d6dc:	f000 fd6a 	bl	1e1b4 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1d6e0:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1d6e2:	4425      	add	r5, r4
      WrOff = 0u;
   1d6e4:	42ab      	cmp	r3, r5
   1d6e6:	bf08      	it	eq
   1d6e8:	2500      	moveq	r5, #0
  } while (NumBytes);
   1d6ea:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1d6ec:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1d6ee:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1d6f0:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1d6f2:	d1e1      	bne.n	1d6b8 <_WriteBlocking+0x10>
}
   1d6f4:	4640      	mov	r0, r8
   1d6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d6fa <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1d6fa:	f7ef bdbd 	b.w	d278 <_DoInit>

0001d6fe <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1d6fe:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1d700:	f7ff fffb 	bl	1d6fa <SEGGER_RTT_Init>

	return 0;
}
   1d704:	2000      	movs	r0, #0
   1d706:	bd08      	pop	{r3, pc}

0001d708 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d708:	b538      	push	{r3, r4, r5, lr}
   1d70a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d70c:	42ab      	cmp	r3, r5
{
   1d70e:	4611      	mov	r1, r2
   1d710:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d712:	d804      	bhi.n	1d71e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1d714:	461a      	mov	r2, r3
   1d716:	f000 fd4d 	bl	1e1b4 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d71a:	4620      	mov	r0, r4
   1d71c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d71e:	2400      	movs	r4, #0
   1d720:	e7fb      	b.n	1d71a <_copy+0x12>

0001d722 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1d722:	f000 bd72 	b.w	1e20a <memset>

0001d726 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d726:	09c3      	lsrs	r3, r0, #7
   1d728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d72c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d730:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d734:	b2c0      	uxtb	r0, r0
   1d736:	4770      	bx	lr

0001d738 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d738:	78cb      	ldrb	r3, [r1, #3]
   1d73a:	7802      	ldrb	r2, [r0, #0]
   1d73c:	4053      	eors	r3, r2
   1d73e:	7003      	strb	r3, [r0, #0]
   1d740:	884b      	ldrh	r3, [r1, #2]
   1d742:	7842      	ldrb	r2, [r0, #1]
   1d744:	4053      	eors	r3, r2
   1d746:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d748:	680a      	ldr	r2, [r1, #0]
   1d74a:	7883      	ldrb	r3, [r0, #2]
   1d74c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d750:	7083      	strb	r3, [r0, #2]
   1d752:	680a      	ldr	r2, [r1, #0]
   1d754:	78c3      	ldrb	r3, [r0, #3]
   1d756:	4053      	eors	r3, r2
   1d758:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d75a:	79cb      	ldrb	r3, [r1, #7]
   1d75c:	7902      	ldrb	r2, [r0, #4]
   1d75e:	4053      	eors	r3, r2
   1d760:	7103      	strb	r3, [r0, #4]
   1d762:	88cb      	ldrh	r3, [r1, #6]
   1d764:	7942      	ldrb	r2, [r0, #5]
   1d766:	4053      	eors	r3, r2
   1d768:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d76a:	684a      	ldr	r2, [r1, #4]
   1d76c:	7983      	ldrb	r3, [r0, #6]
   1d76e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d772:	7183      	strb	r3, [r0, #6]
   1d774:	684a      	ldr	r2, [r1, #4]
   1d776:	79c3      	ldrb	r3, [r0, #7]
   1d778:	4053      	eors	r3, r2
   1d77a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d77c:	7acb      	ldrb	r3, [r1, #11]
   1d77e:	7a02      	ldrb	r2, [r0, #8]
   1d780:	4053      	eors	r3, r2
   1d782:	7203      	strb	r3, [r0, #8]
   1d784:	7a42      	ldrb	r2, [r0, #9]
   1d786:	894b      	ldrh	r3, [r1, #10]
   1d788:	4053      	eors	r3, r2
   1d78a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d78c:	688a      	ldr	r2, [r1, #8]
   1d78e:	7a83      	ldrb	r3, [r0, #10]
   1d790:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d794:	7283      	strb	r3, [r0, #10]
   1d796:	688a      	ldr	r2, [r1, #8]
   1d798:	7ac3      	ldrb	r3, [r0, #11]
   1d79a:	4053      	eors	r3, r2
   1d79c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d79e:	7bcb      	ldrb	r3, [r1, #15]
   1d7a0:	7b02      	ldrb	r2, [r0, #12]
   1d7a2:	4053      	eors	r3, r2
   1d7a4:	7303      	strb	r3, [r0, #12]
   1d7a6:	89cb      	ldrh	r3, [r1, #14]
   1d7a8:	7b42      	ldrb	r2, [r0, #13]
   1d7aa:	4053      	eors	r3, r2
   1d7ac:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d7ae:	68ca      	ldr	r2, [r1, #12]
   1d7b0:	7b83      	ldrb	r3, [r0, #14]
   1d7b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d7b6:	7383      	strb	r3, [r0, #14]
   1d7b8:	68ca      	ldr	r2, [r1, #12]
   1d7ba:	7bc3      	ldrb	r3, [r0, #15]
   1d7bc:	4053      	eors	r3, r2
   1d7be:	73c3      	strb	r3, [r0, #15]
}
   1d7c0:	4770      	bx	lr

0001d7c2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1d7c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d7c4:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d7c6:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d7c8:	f88d 2000 	strb.w	r2, [sp]
   1d7cc:	7942      	ldrb	r2, [r0, #5]
   1d7ce:	f88d 2001 	strb.w	r2, [sp, #1]
   1d7d2:	7a82      	ldrb	r2, [r0, #10]
   1d7d4:	f88d 2002 	strb.w	r2, [sp, #2]
   1d7d8:	7bc2      	ldrb	r2, [r0, #15]
   1d7da:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d7de:	7902      	ldrb	r2, [r0, #4]
   1d7e0:	f88d 2004 	strb.w	r2, [sp, #4]
   1d7e4:	7a42      	ldrb	r2, [r0, #9]
   1d7e6:	f88d 2005 	strb.w	r2, [sp, #5]
   1d7ea:	7b82      	ldrb	r2, [r0, #14]
   1d7ec:	f88d 2006 	strb.w	r2, [sp, #6]
   1d7f0:	78c2      	ldrb	r2, [r0, #3]
   1d7f2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d7f6:	7a02      	ldrb	r2, [r0, #8]
   1d7f8:	f88d 2008 	strb.w	r2, [sp, #8]
   1d7fc:	7b42      	ldrb	r2, [r0, #13]
   1d7fe:	f88d 2009 	strb.w	r2, [sp, #9]
   1d802:	7882      	ldrb	r2, [r0, #2]
   1d804:	f88d 200a 	strb.w	r2, [sp, #10]
   1d808:	79c2      	ldrb	r2, [r0, #7]
   1d80a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d80e:	7b02      	ldrb	r2, [r0, #12]
   1d810:	f88d 200c 	strb.w	r2, [sp, #12]
   1d814:	7842      	ldrb	r2, [r0, #1]
   1d816:	f88d 200d 	strb.w	r2, [sp, #13]
   1d81a:	7982      	ldrb	r2, [r0, #6]
   1d81c:	f88d 200e 	strb.w	r2, [sp, #14]
   1d820:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d824:	2310      	movs	r3, #16
   1d826:	466a      	mov	r2, sp
   1d828:	4619      	mov	r1, r3
   1d82a:	f7ff ff6d 	bl	1d708 <_copy>
}
   1d82e:	b005      	add	sp, #20
   1d830:	f85d fb04 	ldr.w	pc, [sp], #4

0001d834 <mult_row_column>:
{
   1d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d836:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d838:	7808      	ldrb	r0, [r1, #0]
{
   1d83a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d83c:	f7ff ff73 	bl	1d726 <_double_byte>
   1d840:	4605      	mov	r5, r0
   1d842:	7860      	ldrb	r0, [r4, #1]
   1d844:	f7ff ff6f 	bl	1d726 <_double_byte>
   1d848:	78a2      	ldrb	r2, [r4, #2]
   1d84a:	7863      	ldrb	r3, [r4, #1]
   1d84c:	4053      	eors	r3, r2
   1d84e:	78e2      	ldrb	r2, [r4, #3]
   1d850:	4053      	eors	r3, r2
   1d852:	405d      	eors	r5, r3
   1d854:	4045      	eors	r5, r0
   1d856:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d858:	7860      	ldrb	r0, [r4, #1]
   1d85a:	7827      	ldrb	r7, [r4, #0]
   1d85c:	f7ff ff63 	bl	1d726 <_double_byte>
   1d860:	4605      	mov	r5, r0
   1d862:	78a0      	ldrb	r0, [r4, #2]
   1d864:	f7ff ff5f 	bl	1d726 <_double_byte>
   1d868:	78a3      	ldrb	r3, [r4, #2]
   1d86a:	405f      	eors	r7, r3
   1d86c:	78e3      	ldrb	r3, [r4, #3]
   1d86e:	405f      	eors	r7, r3
   1d870:	407d      	eors	r5, r7
   1d872:	4045      	eors	r5, r0
   1d874:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d876:	78a0      	ldrb	r0, [r4, #2]
   1d878:	7865      	ldrb	r5, [r4, #1]
   1d87a:	7827      	ldrb	r7, [r4, #0]
   1d87c:	f7ff ff53 	bl	1d726 <_double_byte>
   1d880:	406f      	eors	r7, r5
   1d882:	4605      	mov	r5, r0
   1d884:	78e0      	ldrb	r0, [r4, #3]
   1d886:	f7ff ff4e 	bl	1d726 <_double_byte>
   1d88a:	78e3      	ldrb	r3, [r4, #3]
   1d88c:	405f      	eors	r7, r3
   1d88e:	407d      	eors	r5, r7
   1d890:	4045      	eors	r5, r0
   1d892:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d894:	7820      	ldrb	r0, [r4, #0]
   1d896:	f7ff ff46 	bl	1d726 <_double_byte>
   1d89a:	7863      	ldrb	r3, [r4, #1]
   1d89c:	7825      	ldrb	r5, [r4, #0]
   1d89e:	405d      	eors	r5, r3
   1d8a0:	78a3      	ldrb	r3, [r4, #2]
   1d8a2:	405d      	eors	r5, r3
   1d8a4:	4045      	eors	r5, r0
   1d8a6:	78e0      	ldrb	r0, [r4, #3]
   1d8a8:	f7ff ff3d 	bl	1d726 <_double_byte>
   1d8ac:	b2ed      	uxtb	r5, r5
   1d8ae:	4045      	eors	r5, r0
   1d8b0:	70f5      	strb	r5, [r6, #3]
}
   1d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d8b4 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1d8b4:	b570      	push	{r4, r5, r6, lr}
   1d8b6:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1d8b8:	4605      	mov	r5, r0
{
   1d8ba:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1d8bc:	2800      	cmp	r0, #0
   1d8be:	d049      	beq.n	1d954 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1d8c0:	2900      	cmp	r1, #0
   1d8c2:	d049      	beq.n	1d958 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1d8c4:	2a00      	cmp	r2, #0
   1d8c6:	d049      	beq.n	1d95c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1d8c8:	2310      	movs	r3, #16
   1d8ca:	460a      	mov	r2, r1
   1d8cc:	4668      	mov	r0, sp
   1d8ce:	4619      	mov	r1, r3
   1d8d0:	f7ff ff1a 	bl	1d708 <_copy>
	add_round_key(state, s->words);
   1d8d4:	4621      	mov	r1, r4
   1d8d6:	4668      	mov	r0, sp
   1d8d8:	f7ff ff2e 	bl	1d738 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1d8dc:	3410      	adds	r4, #16
   1d8de:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1d8e2:	4668      	mov	r0, sp
   1d8e4:	f7ef fd28 	bl	d338 <sub_bytes>
		shift_rows(state);
   1d8e8:	4668      	mov	r0, sp
   1d8ea:	f7ff ff6a 	bl	1d7c2 <shift_rows>
	mult_row_column(t, s);
   1d8ee:	4669      	mov	r1, sp
   1d8f0:	a804      	add	r0, sp, #16
   1d8f2:	f7ff ff9f 	bl	1d834 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1d8f6:	a901      	add	r1, sp, #4
   1d8f8:	a805      	add	r0, sp, #20
   1d8fa:	f7ff ff9b 	bl	1d834 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1d8fe:	a902      	add	r1, sp, #8
   1d900:	a806      	add	r0, sp, #24
   1d902:	f7ff ff97 	bl	1d834 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1d906:	a903      	add	r1, sp, #12
   1d908:	a807      	add	r0, sp, #28
   1d90a:	f7ff ff93 	bl	1d834 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d90e:	2310      	movs	r3, #16
   1d910:	4668      	mov	r0, sp
   1d912:	4619      	mov	r1, r3
   1d914:	eb0d 0203 	add.w	r2, sp, r3
   1d918:	f7ff fef6 	bl	1d708 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1d91c:	4621      	mov	r1, r4
   1d91e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1d920:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1d922:	f7ff ff09 	bl	1d738 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1d926:	42a6      	cmp	r6, r4
   1d928:	d1db      	bne.n	1d8e2 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1d92a:	f7ef fd05 	bl	d338 <sub_bytes>
	shift_rows(state);
   1d92e:	4668      	mov	r0, sp
   1d930:	f7ff ff47 	bl	1d7c2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1d934:	4631      	mov	r1, r6
   1d936:	4668      	mov	r0, sp
   1d938:	f7ff fefe 	bl	1d738 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1d93c:	2310      	movs	r3, #16
   1d93e:	466a      	mov	r2, sp
   1d940:	4619      	mov	r1, r3
   1d942:	4628      	mov	r0, r5
   1d944:	f7ff fee0 	bl	1d708 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1d948:	4668      	mov	r0, sp
   1d94a:	2210      	movs	r2, #16
   1d94c:	2100      	movs	r1, #0
   1d94e:	f7ff fee8 	bl	1d722 <_set>

	return TC_CRYPTO_SUCCESS;
   1d952:	2001      	movs	r0, #1
}
   1d954:	b008      	add	sp, #32
   1d956:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d958:	4608      	mov	r0, r1
   1d95a:	e7fb      	b.n	1d954 <tc_aes_encrypt+0xa0>
   1d95c:	4610      	mov	r0, r2
   1d95e:	e7f9      	b.n	1d954 <tc_aes_encrypt+0xa0>

0001d960 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d960:	460a      	mov	r2, r1
{
   1d962:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d964:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1d968:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d96a:	2b00      	cmp	r3, #0
   1d96c:	bfb4      	ite	lt
   1d96e:	2387      	movlt	r3, #135	; 0x87
   1d970:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d972:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d976:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d97a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d97c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d980:	d002      	beq.n	1d988 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d982:	7813      	ldrb	r3, [r2, #0]
   1d984:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d986:	e7f4      	b.n	1d972 <gf_double+0x12>
	}
}
   1d988:	bd10      	pop	{r4, pc}

0001d98a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d98a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d98c:	b120      	cbz	r0, 1d998 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d98e:	2258      	movs	r2, #88	; 0x58
   1d990:	2100      	movs	r1, #0
   1d992:	f7ff fec6 	bl	1d722 <_set>
   1d996:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d998:	bd08      	pop	{r3, pc}

0001d99a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d99a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d99c:	4604      	mov	r4, r0
   1d99e:	b188      	cbz	r0, 1d9c4 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d9a0:	2210      	movs	r2, #16
   1d9a2:	2100      	movs	r1, #0
   1d9a4:	f7ff febd 	bl	1d722 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d9a8:	2210      	movs	r2, #16
   1d9aa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d9ae:	2100      	movs	r1, #0
   1d9b0:	f7ff feb7 	bl	1d722 <_set>
	s->leftover_offset = 0;
   1d9b4:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d9b6:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1d9b8:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1d9ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d9be:	2001      	movs	r0, #1
   1d9c0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1d9c4:	bd10      	pop	{r4, pc}

0001d9c6 <tc_cmac_setup>:
{
   1d9c6:	b570      	push	{r4, r5, r6, lr}
   1d9c8:	460d      	mov	r5, r1
   1d9ca:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d9cc:	4604      	mov	r4, r0
   1d9ce:	b310      	cbz	r0, 1da16 <tc_cmac_setup+0x50>
   1d9d0:	b311      	cbz	r1, 1da18 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d9d2:	2258      	movs	r2, #88	; 0x58
   1d9d4:	2100      	movs	r1, #0
   1d9d6:	f7ff fea4 	bl	1d722 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d9da:	4629      	mov	r1, r5
   1d9dc:	4630      	mov	r0, r6
	s->sched = sched;
   1d9de:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d9e0:	f7ef fcb6 	bl	d350 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d9e4:	2210      	movs	r2, #16
   1d9e6:	2100      	movs	r1, #0
   1d9e8:	4620      	mov	r0, r4
   1d9ea:	f7ff fe9a 	bl	1d722 <_set>
	gf_double (s->K1, s->iv);
   1d9ee:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d9f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d9f4:	4621      	mov	r1, r4
   1d9f6:	4620      	mov	r0, r4
   1d9f8:	f7ff ff5c 	bl	1d8b4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d9fc:	4621      	mov	r1, r4
   1d9fe:	4628      	mov	r0, r5
   1da00:	f7ff ffae 	bl	1d960 <gf_double>
	gf_double (s->K2, s->K1);
   1da04:	4629      	mov	r1, r5
   1da06:	f104 0020 	add.w	r0, r4, #32
   1da0a:	f7ff ffa9 	bl	1d960 <gf_double>
	tc_cmac_init(s);
   1da0e:	4620      	mov	r0, r4
   1da10:	f7ff ffc3 	bl	1d99a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1da14:	2001      	movs	r0, #1
}
   1da16:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1da18:	4608      	mov	r0, r1
   1da1a:	e7fc      	b.n	1da16 <tc_cmac_setup+0x50>

0001da1c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1da1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da20:	460d      	mov	r5, r1
   1da22:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1da24:	4604      	mov	r4, r0
   1da26:	2800      	cmp	r0, #0
   1da28:	d061      	beq.n	1daee <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1da2a:	b912      	cbnz	r2, 1da32 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1da2c:	2001      	movs	r0, #1
}
   1da2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1da32:	2900      	cmp	r1, #0
   1da34:	d05b      	beq.n	1daee <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1da36:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1da3a:	ea53 0102 	orrs.w	r1, r3, r2
   1da3e:	d056      	beq.n	1daee <tc_cmac_update+0xd2>
	s->countdown--;
   1da40:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1da42:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1da46:	f142 32ff 	adc.w	r2, r2, #4294967295
   1da4a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1da4e:	f1b8 0f00 	cmp.w	r8, #0
   1da52:	d02a      	beq.n	1daaa <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1da54:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1da58:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1da5c:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1da5e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1da60:	d208      	bcs.n	1da74 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1da62:	462a      	mov	r2, r5
   1da64:	4633      	mov	r3, r6
   1da66:	4631      	mov	r1, r6
   1da68:	f7ff fe4e 	bl	1d708 <_copy>
			s->leftover_offset += data_length;
   1da6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1da6e:	4432      	add	r2, r6
   1da70:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1da72:	e7db      	b.n	1da2c <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1da74:	463b      	mov	r3, r7
   1da76:	462a      	mov	r2, r5
   1da78:	4639      	mov	r1, r7
   1da7a:	f7ff fe45 	bl	1d708 <_copy>
		s->leftover_offset = 0;
   1da7e:	2300      	movs	r3, #0
   1da80:	3e10      	subs	r6, #16
   1da82:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1da84:	4446      	add	r6, r8
		data += remaining_space;
   1da86:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da88:	1e63      	subs	r3, r4, #1
   1da8a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1da8e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1da92:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da96:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1da98:	ea82 0200 	eor.w	r2, r2, r0
   1da9c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da9e:	d1f6      	bne.n	1da8e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1daa0:	4621      	mov	r1, r4
   1daa2:	4620      	mov	r0, r4
   1daa4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1daa6:	f7ff ff05 	bl	1d8b4 <tc_aes_encrypt>
   1daaa:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1daae:	2e10      	cmp	r6, #16
   1dab0:	d80a      	bhi.n	1dac8 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1dab2:	2e00      	cmp	r6, #0
   1dab4:	d0ba      	beq.n	1da2c <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1dab6:	4633      	mov	r3, r6
   1dab8:	462a      	mov	r2, r5
   1daba:	4631      	mov	r1, r6
   1dabc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1dac0:	f7ff fe22 	bl	1d708 <_copy>
		s->leftover_offset = data_length;
   1dac4:	6466      	str	r6, [r4, #68]	; 0x44
   1dac6:	e7b1      	b.n	1da2c <tc_cmac_update+0x10>
   1dac8:	1e63      	subs	r3, r4, #1
   1daca:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1dacc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dad0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dad4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1dad6:	ea82 0200 	eor.w	r2, r2, r0
   1dada:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dadc:	d1f6      	bne.n	1dacc <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dade:	4621      	mov	r1, r4
   1dae0:	4620      	mov	r0, r4
   1dae2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dae4:	f7ff fee6 	bl	1d8b4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1dae8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1daea:	3e10      	subs	r6, #16
   1daec:	e7df      	b.n	1daae <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1daee:	2000      	movs	r0, #0
   1daf0:	e79d      	b.n	1da2e <tc_cmac_update+0x12>

0001daf2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1daf2:	b570      	push	{r4, r5, r6, lr}
   1daf4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1daf6:	4605      	mov	r5, r0
   1daf8:	b1f0      	cbz	r0, 1db38 <tc_cmac_final+0x46>
   1dafa:	b371      	cbz	r1, 1db5a <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1dafc:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1dafe:	2a10      	cmp	r2, #16
   1db00:	d11b      	bne.n	1db3a <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1db02:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1db04:	1e63      	subs	r3, r4, #1
   1db06:	3901      	subs	r1, #1
   1db08:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1db0c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1db10:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1db14:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1db16:	ea82 0206 	eor.w	r2, r2, r6
   1db1a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1db1e:	ea82 0206 	eor.w	r2, r2, r6
   1db22:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1db24:	d1f2      	bne.n	1db0c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1db26:	4621      	mov	r1, r4
   1db28:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1db2a:	4628      	mov	r0, r5
   1db2c:	f7ff fec2 	bl	1d8b4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1db30:	4620      	mov	r0, r4
   1db32:	f7ff ff2a 	bl	1d98a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1db36:	2001      	movs	r0, #1
}
   1db38:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1db3a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1db3e:	2100      	movs	r1, #0
   1db40:	f1c2 0210 	rsb	r2, r2, #16
   1db44:	4420      	add	r0, r4
   1db46:	f7ff fdec 	bl	1d722 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1db4a:	2280      	movs	r2, #128	; 0x80
   1db4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1db4e:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1db52:	4423      	add	r3, r4
   1db54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1db58:	e7d4      	b.n	1db04 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1db5a:	4608      	mov	r0, r1
   1db5c:	e7ec      	b.n	1db38 <tc_cmac_final+0x46>

0001db5e <tc_sha256_update>:
{
   1db5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db60:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1db62:	b110      	cbz	r0, 1db6a <tc_sha256_update+0xc>
   1db64:	b1f9      	cbz	r1, 1dba6 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1db66:	b90a      	cbnz	r2, 1db6c <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1db68:	2001      	movs	r0, #1
}
   1db6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1db6c:	2600      	movs	r6, #0
   1db6e:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1db70:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1db74:	42a5      	cmp	r5, r4
   1db76:	d0f7      	beq.n	1db68 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1db78:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1db7a:	1c5a      	adds	r2, r3, #1
   1db7c:	6682      	str	r2, [r0, #104]	; 0x68
   1db7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   1db82:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1db84:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1db86:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1db8a:	d9f3      	bls.n	1db74 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1db8c:	4639      	mov	r1, r7
   1db8e:	f7ef fc33 	bl	d3f8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1db92:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1db96:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1db9a:	f142 0200 	adc.w	r2, r2, #0
   1db9e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1dba2:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1dba4:	e7e6      	b.n	1db74 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1dba6:	4608      	mov	r0, r1
   1dba8:	e7df      	b.n	1db6a <tc_sha256_update+0xc>

0001dbaa <tc_sha256_final>:
{
   1dbaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dbac:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1dbae:	4605      	mov	r5, r0
   1dbb0:	2800      	cmp	r0, #0
   1dbb2:	d055      	beq.n	1dc60 <tc_sha256_final+0xb6>
   1dbb4:	2900      	cmp	r1, #0
   1dbb6:	d054      	beq.n	1dc62 <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1dbb8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1dbba:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1dbbe:	00d8      	lsls	r0, r3, #3
   1dbc0:	1812      	adds	r2, r2, r0
   1dbc2:	f141 0100 	adc.w	r1, r1, #0
   1dbc6:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1dbca:	2280      	movs	r2, #128	; 0x80
   1dbcc:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1dbce:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1dbd0:	4423      	add	r3, r4
   1dbd2:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1dbd4:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1dbd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1dbdc:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1dbe0:	d90a      	bls.n	1dbf8 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1dbe2:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1dbe6:	4639      	mov	r1, r7
   1dbe8:	4430      	add	r0, r6
   1dbea:	f7ff fd9a 	bl	1d722 <_set>
		compress(s->iv, s->leftover);
   1dbee:	4631      	mov	r1, r6
   1dbf0:	4620      	mov	r0, r4
   1dbf2:	f7ef fc01 	bl	d3f8 <compress>
		s->leftover_offset = 0;
   1dbf6:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1dbf8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1dbfa:	2100      	movs	r1, #0
   1dbfc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1dc00:	4430      	add	r0, r6
   1dc02:	f7ff fd8e 	bl	1d722 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1dc06:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1dc08:	4631      	mov	r1, r6
   1dc0a:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1dc0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1dc0e:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1dc10:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1dc12:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1dc16:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1dc1a:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1dc1c:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1dc1e:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1dc20:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1dc24:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1dc28:	f7ef fbe6 	bl	d3f8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1dc2c:	1f26      	subs	r6, r4, #4
   1dc2e:	1d2b      	adds	r3, r5, #4
   1dc30:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1dc34:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1dc38:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1dc3a:	0e11      	lsrs	r1, r2, #24
   1dc3c:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1dc40:	0c11      	lsrs	r1, r2, #16
   1dc42:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1dc46:	0a11      	lsrs	r1, r2, #8
   1dc48:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1dc4c:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1dc50:	4283      	cmp	r3, r0
   1dc52:	d1ef      	bne.n	1dc34 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1dc54:	4620      	mov	r0, r4
   1dc56:	2270      	movs	r2, #112	; 0x70
   1dc58:	2100      	movs	r1, #0
   1dc5a:	f7ff fd62 	bl	1d722 <_set>
	return TC_CRYPTO_SUCCESS;
   1dc5e:	2001      	movs	r0, #1
}
   1dc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1dc62:	4608      	mov	r0, r1
   1dc64:	e7fc      	b.n	1dc60 <tc_sha256_final+0xb6>

0001dc66 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1dc66:	b530      	push	{r4, r5, lr}
   1dc68:	1e43      	subs	r3, r0, #1
   1dc6a:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1dc6c:	42a9      	cmp	r1, r5
   1dc6e:	d106      	bne.n	1dc7e <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1dc70:	2136      	movs	r1, #54	; 0x36
   1dc72:	245c      	movs	r4, #92	; 0x5c
   1dc74:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1dc76:	1a13      	subs	r3, r2, r0
   1dc78:	2b3f      	cmp	r3, #63	; 0x3f
   1dc7a:	d90c      	bls.n	1dc96 <rekey+0x30>
	}
}
   1dc7c:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1dc7e:	780c      	ldrb	r4, [r1, #0]
   1dc80:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1dc84:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1dc88:	f811 4b01 	ldrb.w	r4, [r1], #1
   1dc8c:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1dc90:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1dc94:	e7ea      	b.n	1dc6c <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1dc96:	f802 1b01 	strb.w	r1, [r2], #1
   1dc9a:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1dc9e:	e7ea      	b.n	1dc76 <rekey+0x10>

0001dca0 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1dca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dca2:	460e      	mov	r6, r1
   1dca4:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1dca6:	4605      	mov	r5, r0
{
   1dca8:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1dcaa:	b1b8      	cbz	r0, 1dcdc <tc_hmac_set_key+0x3c>
   1dcac:	b341      	cbz	r1, 1dd00 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1dcae:	b34a      	cbz	r2, 1dd04 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1dcb0:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1dcb2:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1dcb6:	d813      	bhi.n	1dce0 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1dcb8:	a810      	add	r0, sp, #64	; 0x40
   1dcba:	f7ef fc85 	bl	d5c8 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1dcbe:	4622      	mov	r2, r4
   1dcc0:	4669      	mov	r1, sp
   1dcc2:	a810      	add	r0, sp, #64	; 0x40
   1dcc4:	f7ff ff4b 	bl	1db5e <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1dcc8:	a910      	add	r1, sp, #64	; 0x40
   1dcca:	a834      	add	r0, sp, #208	; 0xd0
   1dccc:	f7ff ff6d 	bl	1dbaa <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1dcd0:	4622      	mov	r2, r4
   1dcd2:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1dcd4:	4638      	mov	r0, r7
   1dcd6:	f7ff ffc6 	bl	1dc66 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1dcda:	2001      	movs	r0, #1
}
   1dcdc:	b04d      	add	sp, #308	; 0x134
   1dcde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1dce0:	f7ef fc72 	bl	d5c8 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1dce4:	4622      	mov	r2, r4
   1dce6:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1dce8:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1dcec:	4628      	mov	r0, r5
   1dcee:	f7ff ff36 	bl	1db5e <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1dcf2:	4629      	mov	r1, r5
   1dcf4:	4620      	mov	r0, r4
   1dcf6:	f7ff ff58 	bl	1dbaa <tc_sha256_final>
		rekey(ctx->key,
   1dcfa:	2220      	movs	r2, #32
   1dcfc:	4621      	mov	r1, r4
   1dcfe:	e7e9      	b.n	1dcd4 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1dd00:	4608      	mov	r0, r1
   1dd02:	e7eb      	b.n	1dcdc <tc_hmac_set_key+0x3c>
   1dd04:	4610      	mov	r0, r2
   1dd06:	e7e9      	b.n	1dcdc <tc_hmac_set_key+0x3c>

0001dd08 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1dd08:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1dd0a:	4604      	mov	r4, r0
   1dd0c:	b140      	cbz	r0, 1dd20 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1dd0e:	f7ef fc5b 	bl	d5c8 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1dd12:	2240      	movs	r2, #64	; 0x40
   1dd14:	4620      	mov	r0, r4
   1dd16:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1dd1a:	f7ff ff20 	bl	1db5e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1dd1e:	2001      	movs	r0, #1
}
   1dd20:	bd10      	pop	{r4, pc}

0001dd22 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1dd22:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1dd24:	b110      	cbz	r0, 1dd2c <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1dd26:	f7ff ff1a 	bl	1db5e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1dd2a:	2001      	movs	r0, #1
}
   1dd2c:	bd08      	pop	{r3, pc}

0001dd2e <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1dd2e:	b570      	push	{r4, r5, r6, lr}
   1dd30:	460e      	mov	r6, r1
   1dd32:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1dd34:	4605      	mov	r5, r0
   1dd36:	b1f0      	cbz	r0, 1dd76 <tc_hmac_final+0x48>
   1dd38:	2920      	cmp	r1, #32
   1dd3a:	d11c      	bne.n	1dd76 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1dd3c:	b1ea      	cbz	r2, 1dd7a <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1dd3e:	4611      	mov	r1, r2
   1dd40:	f7ff ff33 	bl	1dbaa <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1dd44:	4620      	mov	r0, r4
   1dd46:	f7ef fc3f 	bl	d5c8 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1dd4a:	2240      	movs	r2, #64	; 0x40
   1dd4c:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1dd50:	4620      	mov	r0, r4
   1dd52:	f7ff ff04 	bl	1db5e <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1dd56:	4632      	mov	r2, r6
   1dd58:	4629      	mov	r1, r5
   1dd5a:	4620      	mov	r0, r4
   1dd5c:	f7ff feff 	bl	1db5e <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1dd60:	4621      	mov	r1, r4
   1dd62:	4628      	mov	r0, r5
   1dd64:	f7ff ff21 	bl	1dbaa <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1dd68:	4620      	mov	r0, r4
   1dd6a:	22f0      	movs	r2, #240	; 0xf0
   1dd6c:	2100      	movs	r1, #0
   1dd6e:	f7ff fcd8 	bl	1d722 <_set>

	return TC_CRYPTO_SUCCESS;
   1dd72:	2001      	movs	r0, #1
}
   1dd74:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1dd76:	2000      	movs	r0, #0
   1dd78:	e7fc      	b.n	1dd74 <tc_hmac_final+0x46>
   1dd7a:	4610      	mov	r0, r2
   1dd7c:	e7fa      	b.n	1dd74 <tc_hmac_final+0x46>

0001dd7e <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1dd7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd82:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1dd84:	f04f 0b01 	mov.w	fp, #1
{
   1dd88:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1dd8a:	2300      	movs	r3, #0
{
   1dd8c:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1dd8e:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1dd92:	4631      	mov	r1, r6
{
   1dd94:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1dd96:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1dd98:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1dd9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1dda0:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1dda4:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1dda8:	f7ff ff7a 	bl	1dca0 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1ddac:	4620      	mov	r0, r4
   1ddae:	f7ff ffab 	bl	1dd08 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ddb2:	2220      	movs	r2, #32
   1ddb4:	4629      	mov	r1, r5
   1ddb6:	4620      	mov	r0, r4
   1ddb8:	f7ff ffb3 	bl	1dd22 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1ddbc:	465a      	mov	r2, fp
   1ddbe:	4620      	mov	r0, r4
   1ddc0:	f10d 0106 	add.w	r1, sp, #6
   1ddc4:	f7ff ffad 	bl	1dd22 <tc_hmac_update>

	if (data && datalen)
   1ddc8:	f1b8 0f00 	cmp.w	r8, #0
   1ddcc:	d007      	beq.n	1ddde <update+0x60>
   1ddce:	f1b9 0f00 	cmp.w	r9, #0
   1ddd2:	d004      	beq.n	1ddde <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1ddd4:	464a      	mov	r2, r9
   1ddd6:	4641      	mov	r1, r8
   1ddd8:	4620      	mov	r0, r4
   1ddda:	f7ff ffa2 	bl	1dd22 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1ddde:	b13f      	cbz	r7, 1ddf0 <update+0x72>
   1dde0:	f1ba 0f00 	cmp.w	sl, #0
   1dde4:	d004      	beq.n	1ddf0 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1dde6:	4652      	mov	r2, sl
   1dde8:	4639      	mov	r1, r7
   1ddea:	4620      	mov	r0, r4
   1ddec:	f7ff ff99 	bl	1dd22 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1ddf0:	4622      	mov	r2, r4
   1ddf2:	2120      	movs	r1, #32
   1ddf4:	4630      	mov	r0, r6
   1ddf6:	f7ff ff9a 	bl	1dd2e <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ddfa:	2220      	movs	r2, #32
   1ddfc:	4631      	mov	r1, r6
   1ddfe:	4620      	mov	r0, r4
   1de00:	f7ff ff4e 	bl	1dca0 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1de04:	4620      	mov	r0, r4
   1de06:	f7ff ff7f 	bl	1dd08 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1de0a:	2220      	movs	r2, #32
   1de0c:	4629      	mov	r1, r5
   1de0e:	4620      	mov	r0, r4
   1de10:	f7ff ff87 	bl	1dd22 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1de14:	4622      	mov	r2, r4
   1de16:	2120      	movs	r1, #32
   1de18:	4628      	mov	r0, r5
   1de1a:	f7ff ff88 	bl	1dd2e <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1de1e:	f1b8 0f00 	cmp.w	r8, #0
   1de22:	d03a      	beq.n	1de9a <update+0x11c>
   1de24:	f1b9 0f00 	cmp.w	r9, #0
   1de28:	d037      	beq.n	1de9a <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1de2a:	2220      	movs	r2, #32
   1de2c:	4631      	mov	r1, r6
   1de2e:	4620      	mov	r0, r4
   1de30:	f7ff ff36 	bl	1dca0 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1de34:	4620      	mov	r0, r4
   1de36:	f7ff ff67 	bl	1dd08 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1de3a:	2220      	movs	r2, #32
   1de3c:	4629      	mov	r1, r5
   1de3e:	4620      	mov	r0, r4
   1de40:	f7ff ff6f 	bl	1dd22 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1de44:	2201      	movs	r2, #1
   1de46:	f10d 0107 	add.w	r1, sp, #7
   1de4a:	4620      	mov	r0, r4
   1de4c:	f7ff ff69 	bl	1dd22 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1de50:	464a      	mov	r2, r9
   1de52:	4641      	mov	r1, r8
   1de54:	4620      	mov	r0, r4
   1de56:	f7ff ff64 	bl	1dd22 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1de5a:	b13f      	cbz	r7, 1de6c <update+0xee>
   1de5c:	f1ba 0f00 	cmp.w	sl, #0
   1de60:	d004      	beq.n	1de6c <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1de62:	4652      	mov	r2, sl
   1de64:	4639      	mov	r1, r7
   1de66:	4620      	mov	r0, r4
   1de68:	f7ff ff5b 	bl	1dd22 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1de6c:	4622      	mov	r2, r4
   1de6e:	2120      	movs	r1, #32
   1de70:	4630      	mov	r0, r6
   1de72:	f7ff ff5c 	bl	1dd2e <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1de76:	2220      	movs	r2, #32
   1de78:	4631      	mov	r1, r6
   1de7a:	4620      	mov	r0, r4
   1de7c:	f7ff ff10 	bl	1dca0 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1de80:	4620      	mov	r0, r4
   1de82:	f7ff ff41 	bl	1dd08 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1de86:	2220      	movs	r2, #32
   1de88:	4629      	mov	r1, r5
   1de8a:	4620      	mov	r0, r4
   1de8c:	f7ff ff49 	bl	1dd22 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1de90:	4622      	mov	r2, r4
   1de92:	2120      	movs	r1, #32
   1de94:	4628      	mov	r0, r5
   1de96:	f7ff ff4a 	bl	1dd2e <tc_hmac_final>
}
   1de9a:	b003      	add	sp, #12
   1de9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dea0 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1dea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dea2:	460c      	mov	r4, r1
   1dea4:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1dea6:	4605      	mov	r5, r0
   1dea8:	b1b0      	cbz	r0, 1ded8 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1deaa:	b1b9      	cbz	r1, 1dedc <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1deac:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1deae:	2220      	movs	r2, #32
   1deb0:	2100      	movs	r1, #0
   1deb2:	30f0      	adds	r0, #240	; 0xf0
   1deb4:	f7ff fc35 	bl	1d722 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1deb8:	2220      	movs	r2, #32
   1deba:	2101      	movs	r1, #1
   1debc:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1dec0:	f7ff fc2f 	bl	1d722 <_set>
	update(prng, personalization, plen, 0, 0);
   1dec4:	4628      	mov	r0, r5
   1dec6:	4633      	mov	r3, r6
   1dec8:	463a      	mov	r2, r7
   1deca:	4621      	mov	r1, r4
   1decc:	9600      	str	r6, [sp, #0]
   1dece:	f7ff ff56 	bl	1dd7e <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1ded2:	2001      	movs	r0, #1
	prng->countdown = 0;
   1ded4:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1ded8:	b003      	add	sp, #12
   1deda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1dedc:	4608      	mov	r0, r1
   1dede:	e7fb      	b.n	1ded8 <tc_hmac_prng_init+0x38>

0001dee0 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1dee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dee2:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1dee4:	4605      	mov	r5, r0
   1dee6:	b180      	cbz	r0, 1df0a <tc_hmac_prng_reseed+0x2a>
   1dee8:	b179      	cbz	r1, 1df0a <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1deea:	2a1f      	cmp	r2, #31
   1deec:	d90d      	bls.n	1df0a <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1deee:	b153      	cbz	r3, 1df06 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1def0:	b16c      	cbz	r4, 1df0e <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1def2:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1def4:	f7ff ff43 	bl	1dd7e <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1def8:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1defc:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1defe:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1df02:	b003      	add	sp, #12
   1df04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1df06:	9300      	str	r3, [sp, #0]
   1df08:	e7f4      	b.n	1def4 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1df0a:	2000      	movs	r0, #0
   1df0c:	e7f9      	b.n	1df02 <tc_hmac_prng_reseed+0x22>
   1df0e:	4620      	mov	r0, r4
   1df10:	e7f7      	b.n	1df02 <tc_hmac_prng_reseed+0x22>

0001df12 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1df12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1df16:	460d      	mov	r5, r1
   1df18:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1df1a:	4680      	mov	r8, r0
   1df1c:	b3d8      	cbz	r0, 1df96 <tc_hmac_prng_generate+0x84>
   1df1e:	b3d2      	cbz	r2, 1df96 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1df20:	1e4b      	subs	r3, r1, #1
   1df22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1df26:	d236      	bcs.n	1df96 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1df28:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1df2c:	b3ab      	cbz	r3, 1df9a <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1df2e:	3b01      	subs	r3, #1
   1df30:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1df34:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1df38:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1df3c:	2220      	movs	r2, #32
   1df3e:	4649      	mov	r1, r9
   1df40:	4620      	mov	r0, r4
   1df42:	f7ff fead 	bl	1dca0 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1df46:	4620      	mov	r0, r4
   1df48:	f7ff fede 	bl	1dd08 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1df4c:	2220      	movs	r2, #32
   1df4e:	4639      	mov	r1, r7
   1df50:	4620      	mov	r0, r4
   1df52:	f7ff fee6 	bl	1dd22 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1df56:	4622      	mov	r2, r4
   1df58:	2120      	movs	r1, #32
   1df5a:	4638      	mov	r0, r7
   1df5c:	f7ff fee7 	bl	1dd2e <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1df60:	2d20      	cmp	r5, #32
   1df62:	462e      	mov	r6, r5
   1df64:	bf28      	it	cs
   1df66:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1df68:	4640      	mov	r0, r8
   1df6a:	4633      	mov	r3, r6
   1df6c:	463a      	mov	r2, r7
   1df6e:	4631      	mov	r1, r6
   1df70:	f7ff fbca 	bl	1d708 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1df74:	2d20      	cmp	r5, #32
   1df76:	bf38      	it	cc
   1df78:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1df7a:	3d20      	subs	r5, #32
		out += bufferlen;
   1df7c:	44b0      	add	r8, r6
	while (outlen != 0) {
   1df7e:	d1dd      	bne.n	1df3c <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1df80:	4620      	mov	r0, r4
   1df82:	462b      	mov	r3, r5
   1df84:	462a      	mov	r2, r5
   1df86:	4629      	mov	r1, r5
   1df88:	9500      	str	r5, [sp, #0]
   1df8a:	f7ff fef8 	bl	1dd7e <update>

	return TC_CRYPTO_SUCCESS;
   1df8e:	2001      	movs	r0, #1
}
   1df90:	b003      	add	sp, #12
   1df92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1df96:	2000      	movs	r0, #0
   1df98:	e7fa      	b.n	1df90 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1df9a:	f04f 30ff 	mov.w	r0, #4294967295
   1df9e:	e7f7      	b.n	1df90 <tc_hmac_prng_generate+0x7e>

0001dfa0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1dfa0:	2100      	movs	r1, #0
   1dfa2:	2001      	movs	r0, #1
   1dfa4:	f7ef bc2e 	b.w	d804 <z_arm_fatal_error>

0001dfa8 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1dfa8:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1dfaa:	f383 880b 	msr	PSPLIM, r3
}
   1dfae:	4770      	bx	lr

0001dfb0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1dfb0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1dfb2:	6800      	ldr	r0, [r0, #0]
   1dfb4:	f7ef bc26 	b.w	d804 <z_arm_fatal_error>

0001dfb8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1dfb8:	b508      	push	{r3, lr}
	handler();
   1dfba:	f7ef fc51 	bl	d860 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1dfbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1dfc2:	f7ef be95 	b.w	dcf0 <z_arm_exc_exit>

0001dfc6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1dfc6:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1dfca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1dfce:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1dfd0:	bf08      	it	eq
   1dfd2:	f06f 0015 	mvneq.w	r0, #21
   1dfd6:	4770      	bx	lr

0001dfd8 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1dfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dfdc:	4684      	mov	ip, r0
   1dfde:	4688      	mov	r8, r1
	register const char *s = nptr;
   1dfe0:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1dfe2:	4621      	mov	r1, r4
   1dfe4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1dfe8:	2b20      	cmp	r3, #32
   1dfea:	d0fa      	beq.n	1dfe2 <strtol+0xa>
   1dfec:	f1a3 0009 	sub.w	r0, r3, #9
   1dff0:	2804      	cmp	r0, #4
   1dff2:	d9f6      	bls.n	1dfe2 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1dff4:	2b2d      	cmp	r3, #45	; 0x2d
   1dff6:	d12d      	bne.n	1e054 <strtol+0x7c>
		neg = 1;
		c = *s++;
   1dff8:	784b      	ldrb	r3, [r1, #1]
   1dffa:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1dffc:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1dffe:	2a00      	cmp	r2, #0
   1e000:	d05a      	beq.n	1e0b8 <strtol+0xe0>
   1e002:	2a10      	cmp	r2, #16
   1e004:	d109      	bne.n	1e01a <strtol+0x42>
   1e006:	2b30      	cmp	r3, #48	; 0x30
   1e008:	d107      	bne.n	1e01a <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1e00a:	7823      	ldrb	r3, [r4, #0]
   1e00c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e010:	2b58      	cmp	r3, #88	; 0x58
   1e012:	d14c      	bne.n	1e0ae <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1e014:	2210      	movs	r2, #16
		c = s[1];
   1e016:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1e018:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1e01a:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1e01c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1e020:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1e022:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1e026:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1e028:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e02c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1e030:	2d09      	cmp	r5, #9
   1e032:	d815      	bhi.n	1e060 <strtol+0x88>
			c -= '0';
   1e034:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1e036:	429a      	cmp	r2, r3
   1e038:	dd22      	ble.n	1e080 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1e03a:	1c75      	adds	r5, r6, #1
   1e03c:	d007      	beq.n	1e04e <strtol+0x76>
   1e03e:	4570      	cmp	r0, lr
   1e040:	d81b      	bhi.n	1e07a <strtol+0xa2>
   1e042:	d101      	bne.n	1e048 <strtol+0x70>
   1e044:	454b      	cmp	r3, r9
   1e046:	dc18      	bgt.n	1e07a <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1e048:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1e04a:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1e04e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1e052:	e7eb      	b.n	1e02c <strtol+0x54>
	} else if (c == '+') {
   1e054:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1e056:	bf04      	itt	eq
   1e058:	784b      	ldrbeq	r3, [r1, #1]
   1e05a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1e05c:	2100      	movs	r1, #0
   1e05e:	e7ce      	b.n	1dffe <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e060:	f043 0520 	orr.w	r5, r3, #32
   1e064:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1e066:	2d19      	cmp	r5, #25
   1e068:	d80a      	bhi.n	1e080 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e06a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1e06e:	2d1a      	cmp	r5, #26
   1e070:	bf34      	ite	cc
   1e072:	2537      	movcc	r5, #55	; 0x37
   1e074:	2557      	movcs	r5, #87	; 0x57
   1e076:	1b5b      	subs	r3, r3, r5
   1e078:	e7dd      	b.n	1e036 <strtol+0x5e>
			any = -1;
   1e07a:	f04f 36ff 	mov.w	r6, #4294967295
   1e07e:	e7e6      	b.n	1e04e <strtol+0x76>
		}
	}

	if (any < 0) {
   1e080:	1c73      	adds	r3, r6, #1
   1e082:	d109      	bne.n	1e098 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1e084:	f7fb fc6e 	bl	19964 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1e088:	2326      	movs	r3, #38	; 0x26
   1e08a:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1e08c:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1e08e:	f1b8 0f00 	cmp.w	r8, #0
   1e092:	d107      	bne.n	1e0a4 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1e094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1e098:	b101      	cbz	r1, 1e09c <strtol+0xc4>
		acc = -acc;
   1e09a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1e09c:	f1b8 0f00 	cmp.w	r8, #0
   1e0a0:	d0f8      	beq.n	1e094 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1e0a2:	b10e      	cbz	r6, 1e0a8 <strtol+0xd0>
   1e0a4:	f104 3cff 	add.w	ip, r4, #4294967295
   1e0a8:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1e0ac:	e7f2      	b.n	1e094 <strtol+0xbc>
	if (base == 0) {
   1e0ae:	2330      	movs	r3, #48	; 0x30
   1e0b0:	2a00      	cmp	r2, #0
   1e0b2:	d1b2      	bne.n	1e01a <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1e0b4:	2208      	movs	r2, #8
   1e0b6:	e7b0      	b.n	1e01a <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1e0b8:	2b30      	cmp	r3, #48	; 0x30
   1e0ba:	d0a6      	beq.n	1e00a <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1e0bc:	220a      	movs	r2, #10
   1e0be:	e7ac      	b.n	1e01a <strtol+0x42>

0001e0c0 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1e0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1e0c4:	f891 8000 	ldrb.w	r8, [r1]
{
   1e0c8:	4605      	mov	r5, r0
	if (c != 0) {
   1e0ca:	f1b8 0f00 	cmp.w	r8, #0
   1e0ce:	d010      	beq.n	1e0f2 <strstr+0x32>
	c = *find++;
   1e0d0:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1e0d2:	4620      	mov	r0, r4
   1e0d4:	f000 f830 	bl	1e138 <strlen>
   1e0d8:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   1e0da:	462e      	mov	r6, r5
   1e0dc:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1e0e0:	b163      	cbz	r3, 1e0fc <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   1e0e2:	4598      	cmp	r8, r3
   1e0e4:	d108      	bne.n	1e0f8 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   1e0e6:	463a      	mov	r2, r7
   1e0e8:	4621      	mov	r1, r4
   1e0ea:	4630      	mov	r0, r6
   1e0ec:	f000 f840 	bl	1e170 <strncmp>
   1e0f0:	b910      	cbnz	r0, 1e0f8 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   1e0f2:	4628      	mov	r0, r5
   1e0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1e0f8:	4635      	mov	r5, r6
   1e0fa:	e7ee      	b.n	1e0da <strstr+0x1a>
					return NULL;
   1e0fc:	461d      	mov	r5, r3
   1e0fe:	e7f8      	b.n	1e0f2 <strstr+0x32>

0001e100 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1e100:	4603      	mov	r3, r0
   1e102:	3901      	subs	r1, #1
   1e104:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e108:	b90a      	cbnz	r2, 1e10e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1e10a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1e10c:	4770      	bx	lr
		*d = *s;
   1e10e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1e112:	e7f7      	b.n	1e104 <strcpy+0x4>

0001e114 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1e114:	b570      	push	{r4, r5, r6, lr}
   1e116:	4605      	mov	r5, r0
   1e118:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1e11a:	b142      	cbz	r2, 1e12e <strncpy+0x1a>
   1e11c:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1e120:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1e122:	b92c      	cbnz	r4, 1e130 <strncpy+0x1c>
   1e124:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1e126:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1e12a:	429a      	cmp	r2, r3
   1e12c:	d1fb      	bne.n	1e126 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1e12e:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1e130:	4632      	mov	r2, r6
		*d = *s;
   1e132:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1e136:	e7ef      	b.n	1e118 <strncpy+0x4>

0001e138 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1e138:	4603      	mov	r3, r0
	size_t n = 0;
   1e13a:	2000      	movs	r0, #0

	while (*s != '\0') {
   1e13c:	5c1a      	ldrb	r2, [r3, r0]
   1e13e:	b902      	cbnz	r2, 1e142 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1e140:	4770      	bx	lr
		n++;
   1e142:	3001      	adds	r0, #1
   1e144:	e7fa      	b.n	1e13c <strlen+0x4>

0001e146 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1e146:	4603      	mov	r3, r0
	size_t n = 0;
   1e148:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1e14a:	5c1a      	ldrb	r2, [r3, r0]
   1e14c:	b10a      	cbz	r2, 1e152 <strnlen+0xc>
   1e14e:	4288      	cmp	r0, r1
   1e150:	d100      	bne.n	1e154 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1e152:	4770      	bx	lr
		n++;
   1e154:	3001      	adds	r0, #1
   1e156:	e7f8      	b.n	1e14a <strnlen+0x4>

0001e158 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1e158:	1e43      	subs	r3, r0, #1
   1e15a:	3901      	subs	r1, #1
   1e15c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e160:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1e164:	4282      	cmp	r2, r0
   1e166:	d101      	bne.n	1e16c <strcmp+0x14>
   1e168:	2a00      	cmp	r2, #0
   1e16a:	d1f7      	bne.n	1e15c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1e16c:	1a10      	subs	r0, r2, r0
   1e16e:	4770      	bx	lr

0001e170 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1e170:	b510      	push	{r4, lr}
   1e172:	3901      	subs	r1, #1
   1e174:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1e176:	4282      	cmp	r2, r0
   1e178:	d009      	beq.n	1e18e <strncmp+0x1e>
   1e17a:	7803      	ldrb	r3, [r0, #0]
   1e17c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1e180:	42a3      	cmp	r3, r4
   1e182:	d100      	bne.n	1e186 <strncmp+0x16>
   1e184:	b90b      	cbnz	r3, 1e18a <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1e186:	1b18      	subs	r0, r3, r4
   1e188:	e002      	b.n	1e190 <strncmp+0x20>
		s1++;
   1e18a:	3001      	adds	r0, #1
		n--;
   1e18c:	e7f3      	b.n	1e176 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1e18e:	2000      	movs	r0, #0
}
   1e190:	bd10      	pop	{r4, pc}

0001e192 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1e192:	4603      	mov	r3, r0
   1e194:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1e196:	b15a      	cbz	r2, 1e1b0 <memcmp+0x1e>
   1e198:	3901      	subs	r1, #1
   1e19a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e19c:	f813 0b01 	ldrb.w	r0, [r3], #1
   1e1a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e1a4:	42a3      	cmp	r3, r4
   1e1a6:	d001      	beq.n	1e1ac <memcmp+0x1a>
   1e1a8:	4290      	cmp	r0, r2
   1e1aa:	d0f7      	beq.n	1e19c <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e1ac:	1a80      	subs	r0, r0, r2
}
   1e1ae:	bd10      	pop	{r4, pc}
		return 0;
   1e1b0:	4610      	mov	r0, r2
   1e1b2:	e7fc      	b.n	1e1ae <memcmp+0x1c>

0001e1b4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1e1b4:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1e1b6:	ea81 0400 	eor.w	r4, r1, r0
   1e1ba:	07a5      	lsls	r5, r4, #30
   1e1bc:	4603      	mov	r3, r0
   1e1be:	d00b      	beq.n	1e1d8 <memcpy+0x24>
   1e1c0:	3b01      	subs	r3, #1
   1e1c2:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e1c4:	4291      	cmp	r1, r2
   1e1c6:	d11b      	bne.n	1e200 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1e1ca:	2a00      	cmp	r2, #0
   1e1cc:	d0fc      	beq.n	1e1c8 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1e1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1e1d2:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1e1d4:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1e1d8:	079c      	lsls	r4, r3, #30
   1e1da:	d1f6      	bne.n	1e1ca <memcpy+0x16>
   1e1dc:	f022 0403 	bic.w	r4, r2, #3
   1e1e0:	1f1d      	subs	r5, r3, #4
   1e1e2:	0896      	lsrs	r6, r2, #2
   1e1e4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1e1e6:	42b9      	cmp	r1, r7
   1e1e8:	d105      	bne.n	1e1f6 <memcpy+0x42>
   1e1ea:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1e1ee:	4423      	add	r3, r4
   1e1f0:	fb05 2206 	mla	r2, r5, r6, r2
   1e1f4:	e7e4      	b.n	1e1c0 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1e1f6:	f851 cb04 	ldr.w	ip, [r1], #4
   1e1fa:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1e1fe:	e7f2      	b.n	1e1e6 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1e200:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e204:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e208:	e7dc      	b.n	1e1c4 <memcpy+0x10>

0001e20a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1e20a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1e20c:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1e20e:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1e210:	07a3      	lsls	r3, r4, #30
   1e212:	d111      	bne.n	1e238 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1e214:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1e218:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1e21c:	f022 0303 	bic.w	r3, r2, #3
   1e220:	0896      	lsrs	r6, r2, #2
   1e222:	4423      	add	r3, r4
   1e224:	429c      	cmp	r4, r3
   1e226:	d10d      	bne.n	1e244 <memset+0x3a>
   1e228:	f06f 0403 	mvn.w	r4, #3
   1e22c:	fb04 2206 	mla	r2, r4, r6, r2
   1e230:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1e232:	4293      	cmp	r3, r2
   1e234:	d109      	bne.n	1e24a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e236:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1e238:	2a00      	cmp	r2, #0
   1e23a:	d0fc      	beq.n	1e236 <memset+0x2c>
		*(d_byte++) = c_byte;
   1e23c:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1e240:	3a01      	subs	r2, #1
   1e242:	e7e5      	b.n	1e210 <memset+0x6>
		*(d_word++) = c_word;
   1e244:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1e248:	e7ec      	b.n	1e224 <memset+0x1a>
		*(d_byte++) = c_byte;
   1e24a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e24e:	e7f0      	b.n	1e232 <memset+0x28>

0001e250 <_stdout_hook_default>:
}
   1e250:	f04f 30ff 	mov.w	r0, #4294967295
   1e254:	4770      	bx	lr

0001e256 <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1e256:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1e258:	b530      	push	{r4, r5, lr}
   1e25a:	4605      	mov	r5, r0
   1e25c:	b087      	sub	sp, #28
   1e25e:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   1e260:	a802      	add	r0, sp, #8
   1e262:	4411      	add	r1, r2
   1e264:	f7ff ffa6 	bl	1e1b4 <memcpy>
	(void)memset(res + 3, 0, 13);
   1e268:	220d      	movs	r2, #13
   1e26a:	2100      	movs	r1, #0
   1e26c:	f10d 000b 	add.w	r0, sp, #11
   1e270:	f7ff ffcb 	bl	1e20a <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1e274:	aa02      	add	r2, sp, #8
   1e276:	4611      	mov	r1, r2
   1e278:	4628      	mov	r0, r5
   1e27a:	f000 fa70 	bl	1e75e <bt_encrypt_le>
	if (err) {
   1e27e:	b970      	cbnz	r0, 1e29e <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   1e280:	2203      	movs	r2, #3
   1e282:	a902      	add	r1, sp, #8
   1e284:	a801      	add	r0, sp, #4
   1e286:	f7ff ff95 	bl	1e1b4 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1e28a:	2203      	movs	r2, #3
   1e28c:	4620      	mov	r0, r4
   1e28e:	a901      	add	r1, sp, #4
   1e290:	f7ff ff7f 	bl	1e192 <memcmp>
   1e294:	fab0 f080 	clz	r0, r0
   1e298:	0940      	lsrs	r0, r0, #5
}
   1e29a:	b007      	add	sp, #28
   1e29c:	bd30      	pop	{r4, r5, pc}
		return false;
   1e29e:	2000      	movs	r0, #0
   1e2a0:	e7fb      	b.n	1e29a <bt_rpa_irk_matches+0x44>

0001e2a2 <bt_settings_decode_key>:
{
   1e2a2:	b570      	push	{r4, r5, r6, lr}
   1e2a4:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1e2a6:	2100      	movs	r1, #0
{
   1e2a8:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1e2aa:	f7fe ff85 	bl	1d1b8 <settings_name_next>
   1e2ae:	280d      	cmp	r0, #13
   1e2b0:	d118      	bne.n	1e2e4 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1e2b2:	7b23      	ldrb	r3, [r4, #12]
   1e2b4:	2b30      	cmp	r3, #48	; 0x30
   1e2b6:	d111      	bne.n	1e2dc <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1e2b8:	2300      	movs	r3, #0
   1e2ba:	702b      	strb	r3, [r5, #0]
   1e2bc:	f104 060c 	add.w	r6, r4, #12
   1e2c0:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1e2c2:	462a      	mov	r2, r5
   1e2c4:	4620      	mov	r0, r4
   1e2c6:	2301      	movs	r3, #1
   1e2c8:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1e2ca:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1e2cc:	f7fe fa59 	bl	1c782 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1e2d0:	42b4      	cmp	r4, r6
   1e2d2:	f105 35ff 	add.w	r5, r5, #4294967295
   1e2d6:	d1f4      	bne.n	1e2c2 <bt_settings_decode_key+0x20>
	return 0;
   1e2d8:	2000      	movs	r0, #0
}
   1e2da:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1e2dc:	2b31      	cmp	r3, #49	; 0x31
   1e2de:	d101      	bne.n	1e2e4 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1e2e0:	2301      	movs	r3, #1
   1e2e2:	e7ea      	b.n	1e2ba <bt_settings_decode_key+0x18>
		return -EINVAL;
   1e2e4:	f06f 0015 	mvn.w	r0, #21
   1e2e8:	e7f7      	b.n	1e2da <bt_settings_decode_key+0x38>

0001e2ea <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1e2ea:	b510      	push	{r4, lr}
   1e2ec:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1e2ee:	7801      	ldrb	r1, [r0, #0]
   1e2f0:	7822      	ldrb	r2, [r4, #0]
{
   1e2f2:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1e2f4:	428a      	cmp	r2, r1
   1e2f6:	d00f      	beq.n	1e318 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1e2f8:	4669      	mov	r1, sp
   1e2fa:	f7f0 f89f 	bl	e43c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1e2fe:	4620      	mov	r0, r4
   1e300:	a905      	add	r1, sp, #20
   1e302:	f7f0 f89b 	bl	e43c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1e306:	2210      	movs	r2, #16
   1e308:	f10d 0115 	add.w	r1, sp, #21
   1e30c:	f10d 0001 	add.w	r0, sp, #1
   1e310:	f7ff ff3f 	bl	1e192 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1e314:	b00a      	add	sp, #40	; 0x28
   1e316:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1e318:	2a01      	cmp	r2, #1
   1e31a:	d006      	beq.n	1e32a <bt_uuid_cmp+0x40>
   1e31c:	2a02      	cmp	r2, #2
   1e31e:	d007      	beq.n	1e330 <bt_uuid_cmp+0x46>
   1e320:	b972      	cbnz	r2, 1e340 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1e322:	8840      	ldrh	r0, [r0, #2]
   1e324:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e326:	1ac0      	subs	r0, r0, r3
   1e328:	e7f4      	b.n	1e314 <bt_uuid_cmp+0x2a>
   1e32a:	6840      	ldr	r0, [r0, #4]
   1e32c:	6863      	ldr	r3, [r4, #4]
   1e32e:	e7fa      	b.n	1e326 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e330:	2210      	movs	r2, #16
   1e332:	1c61      	adds	r1, r4, #1
   1e334:	3001      	adds	r0, #1
}
   1e336:	b00a      	add	sp, #40	; 0x28
   1e338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e33c:	f7ff bf29 	b.w	1e192 <memcmp>
	switch (u1->type) {
   1e340:	f06f 0015 	mvn.w	r0, #21
   1e344:	e7e6      	b.n	1e314 <bt_uuid_cmp+0x2a>

0001e346 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1e346:	2a04      	cmp	r2, #4
{
   1e348:	b510      	push	{r4, lr}
	switch (data_len) {
   1e34a:	d00a      	beq.n	1e362 <bt_uuid_create+0x1c>
   1e34c:	2a10      	cmp	r2, #16
   1e34e:	d00d      	beq.n	1e36c <bt_uuid_create+0x26>
   1e350:	2a02      	cmp	r2, #2
   1e352:	f04f 0300 	mov.w	r3, #0
   1e356:	d10f      	bne.n	1e378 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1e358:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1e35a:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1e35c:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1e35e:	2001      	movs	r0, #1
}
   1e360:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1e362:	2301      	movs	r3, #1
   1e364:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e366:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1e368:	6042      	str	r2, [r0, #4]
		break;
   1e36a:	e7f8      	b.n	1e35e <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1e36c:	2302      	movs	r3, #2
   1e36e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1e372:	f7ff ff1f 	bl	1e1b4 <memcpy>
		break;
   1e376:	e7f2      	b.n	1e35e <bt_uuid_create+0x18>
	switch (data_len) {
   1e378:	4618      	mov	r0, r3
   1e37a:	e7f1      	b.n	1e360 <bt_uuid_create+0x1a>

0001e37c <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1e37c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1e37e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1e380:	2106      	movs	r1, #6
{
   1e382:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1e384:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1e388:	f7f2 fd64 	bl	10e54 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1e38c:	b918      	cbnz	r0, 1e396 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1e38e:	79a3      	ldrb	r3, [r4, #6]
   1e390:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e394:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1e396:	bd10      	pop	{r4, pc}

0001e398 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1e398:	280f      	cmp	r0, #15
   1e39a:	d806      	bhi.n	1e3aa <bt_hci_evt_get_flags+0x12>
   1e39c:	280d      	cmp	r0, #13
   1e39e:	d80b      	bhi.n	1e3b8 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1e3a0:	2805      	cmp	r0, #5
   1e3a2:	bf14      	ite	ne
   1e3a4:	2002      	movne	r0, #2
   1e3a6:	2003      	moveq	r0, #3
   1e3a8:	4770      	bx	lr
	switch (evt) {
   1e3aa:	2813      	cmp	r0, #19
   1e3ac:	d004      	beq.n	1e3b8 <bt_hci_evt_get_flags+0x20>
   1e3ae:	281a      	cmp	r0, #26
   1e3b0:	bf14      	ite	ne
   1e3b2:	2002      	movne	r0, #2
   1e3b4:	2001      	moveq	r0, #1
   1e3b6:	4770      	bx	lr
   1e3b8:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1e3ba:	4770      	bx	lr

0001e3bc <get_adv_channel_map>:
{
   1e3bc:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1e3be:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1e3c2:	bf0c      	ite	eq
   1e3c4:	2007      	moveq	r0, #7
   1e3c6:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1e3c8:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1e3ca:	bf48      	it	mi
   1e3cc:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e3d0:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1e3d2:	bf48      	it	mi
   1e3d4:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1e3d8:	4770      	bx	lr

0001e3da <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e3da:	e8d0 0faf 	lda	r0, [r0]
}
   1e3de:	4770      	bx	lr

0001e3e0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1e3e0:	2207      	movs	r2, #7
   1e3e2:	f7ff bee7 	b.w	1e1b4 <memcpy>

0001e3e6 <atomic_or>:
{
   1e3e6:	4603      	mov	r3, r0
}
   1e3e8:	e8d3 0fef 	ldaex	r0, [r3]
   1e3ec:	ea40 0201 	orr.w	r2, r0, r1
   1e3f0:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e3f4:	f1bc 0f00 	cmp.w	ip, #0
   1e3f8:	d1f6      	bne.n	1e3e8 <atomic_or+0x2>
   1e3fa:	4770      	bx	lr

0001e3fc <atomic_test_and_set_bit>:
{
   1e3fc:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e3fe:	2301      	movs	r3, #1
   1e400:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e404:	f7ff ffef 	bl	1e3e6 <atomic_or>
	return (old & mask) != 0;
   1e408:	4201      	tst	r1, r0
}
   1e40a:	bf14      	ite	ne
   1e40c:	2001      	movne	r0, #1
   1e40e:	2000      	moveq	r0, #0
   1e410:	bd08      	pop	{r3, pc}

0001e412 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1e412:	2207      	movs	r2, #7
   1e414:	f7ff bebd 	b.w	1e192 <memcmp>

0001e418 <atomic_and>:
{
   1e418:	4603      	mov	r3, r0
}
   1e41a:	e8d3 0fef 	ldaex	r0, [r3]
   1e41e:	ea00 0201 	and.w	r2, r0, r1
   1e422:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e426:	f1bc 0f00 	cmp.w	ip, #0
   1e42a:	d1f6      	bne.n	1e41a <atomic_and+0x2>
   1e42c:	4770      	bx	lr

0001e42e <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1e42e:	460b      	mov	r3, r1
   1e430:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e432:	f001 041f 	and.w	r4, r1, #31
   1e436:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e438:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e43a:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e43c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1e440:	b112      	cbz	r2, 1e448 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1e442:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e444:	f7ff bfcf 	b.w	1e3e6 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e448:	43c9      	mvns	r1, r1
}
   1e44a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e44c:	f7ff bfe4 	b.w	1e418 <atomic_and>

0001e450 <net_buf_add_u8.isra.0>:
	return net_buf_simple_add_u8(&buf->b, val);
   1e450:	3008      	adds	r0, #8
   1e452:	f002 b84b 	b.w	204ec <net_buf_simple_add_u8>

0001e456 <sys_put_le64>:
	dst[1] = val >> 8;
   1e456:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1e45a:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   1e45c:	2300      	movs	r3, #0
   1e45e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1e460:	0e00      	lsrs	r0, r0, #24
   1e462:	70d0      	strb	r0, [r2, #3]
   1e464:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1e468:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1e46a:	7093      	strb	r3, [r2, #2]
   1e46c:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1e46e:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1e470:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1e472:	71d1      	strb	r1, [r2, #7]
}
   1e474:	4770      	bx	lr

0001e476 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1e476:	f100 0210 	add.w	r2, r0, #16
{
   1e47a:	b508      	push	{r3, lr}
   1e47c:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e47e:	4610      	mov	r0, r2
   1e480:	f7ff ffab 	bl	1e3da <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1e484:	0640      	lsls	r0, r0, #25
   1e486:	d50a      	bpl.n	1e49e <adv_id_check_connectable_func+0x28>
   1e488:	4610      	mov	r0, r2
   1e48a:	f7ff ffa6 	bl	1e3da <atomic_get>
   1e48e:	05c2      	lsls	r2, r0, #23
   1e490:	d505      	bpl.n	1e49e <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1e492:	781a      	ldrb	r2, [r3, #0]
   1e494:	780b      	ldrb	r3, [r1, #0]
   1e496:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1e498:	bf1c      	itt	ne
   1e49a:	2301      	movne	r3, #1
   1e49c:	704b      	strbne	r3, [r1, #1]
}
   1e49e:	bd08      	pop	{r3, pc}

0001e4a0 <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1e4a0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e4a2:	2106      	movs	r1, #6
   1e4a4:	4668      	mov	r0, sp
   1e4a6:	f7f2 fcd5 	bl	10e54 <bt_rand>
	if (err) {
   1e4aa:	b940      	cbnz	r0, 1e4be <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1e4ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1e4b0:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1e4b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e4b6:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1e4ba:	f7f0 fd27 	bl	ef0c <set_random_address>
}
   1e4be:	b003      	add	sp, #12
   1e4c0:	f85d fb04 	ldr.w	pc, [sp], #4

0001e4c4 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e4c4:	f100 0310 	add.w	r3, r0, #16
{
   1e4c8:	b510      	push	{r4, lr}
   1e4ca:	4604      	mov	r4, r0
   1e4cc:	4618      	mov	r0, r3
   1e4ce:	f7ff ff84 	bl	1e3da <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e4d2:	0642      	lsls	r2, r0, #25
   1e4d4:	d50a      	bpl.n	1e4ec <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e4d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1e4da:	4618      	mov	r0, r3
   1e4dc:	f7ff ff83 	bl	1e3e6 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1e4e0:	4620      	mov	r0, r4
}
   1e4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1e4e6:	2100      	movs	r1, #0
   1e4e8:	f7f0 bd3e 	b.w	ef68 <set_le_adv_enable_legacy>
}
   1e4ec:	bd10      	pop	{r4, pc}

0001e4ee <adv_unpause_enabled>:
{
   1e4ee:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e4f0:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1e4f4:	4604      	mov	r4, r0
   1e4f6:	3010      	adds	r0, #16
   1e4f8:	f7ff ff8e 	bl	1e418 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1e4fc:	0483      	lsls	r3, r0, #18
   1e4fe:	d505      	bpl.n	1e50c <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1e500:	4620      	mov	r0, r4
}
   1e502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1e506:	2101      	movs	r1, #1
   1e508:	f7f0 bd2e 	b.w	ef68 <set_le_adv_enable_legacy>
}
   1e50c:	bd10      	pop	{r4, pc}

0001e50e <addr_res_enable>:
{
   1e50e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e510:	2101      	movs	r1, #1
{
   1e512:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e514:	f242 002d 	movw	r0, #8237	; 0x202d
   1e518:	f7f0 fc2c 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   1e51c:	4604      	mov	r4, r0
   1e51e:	b150      	cbz	r0, 1e536 <addr_res_enable+0x28>
	net_buf_add_u8(buf, enable);
   1e520:	4629      	mov	r1, r5
   1e522:	f7ff ff95 	bl	1e450 <net_buf_add_u8.isra.0>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e526:	4621      	mov	r1, r4
}
   1e528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e52c:	2200      	movs	r2, #0
   1e52e:	f242 002d 	movw	r0, #8237	; 0x202d
   1e532:	f7f0 bc69 	b.w	ee08 <bt_hci_cmd_send_sync>
}
   1e536:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e53a:	bd38      	pop	{r3, r4, r5, pc}

0001e53c <set_le_scan_enable.isra.0>:
	return set_le_scan_enable_legacy(enable);
   1e53c:	f7f0 bd40 	b.w	efc0 <set_le_scan_enable_legacy>

0001e540 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1e540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e542:	4607      	mov	r7, r0
   1e544:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1e546:	f242 0027 	movw	r0, #8231	; 0x2027
   1e54a:	2127      	movs	r1, #39	; 0x27
   1e54c:	f7f0 fc12 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   1e550:	4604      	mov	r4, r0
   1e552:	b1d0      	cbz	r0, 1e58a <hci_id_add.constprop.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e554:	2127      	movs	r1, #39	; 0x27
   1e556:	3008      	adds	r0, #8
   1e558:	f7f9 f8f4 	bl	17744 <net_buf_simple_add>
   1e55c:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1e55e:	4639      	mov	r1, r7
   1e560:	f7ff ff3e 	bl	1e3e0 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1e564:	4631      	mov	r1, r6
   1e566:	2210      	movs	r2, #16
   1e568:	1de8      	adds	r0, r5, #7
   1e56a:	f7ff fe23 	bl	1e1b4 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1e56e:	2210      	movs	r2, #16
   1e570:	2100      	movs	r1, #0
   1e572:	f105 0017 	add.w	r0, r5, #23
   1e576:	f7ff fe48 	bl	1e20a <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1e57a:	4621      	mov	r1, r4
}
   1e57c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1e580:	2200      	movs	r2, #0
   1e582:	f242 0027 	movw	r0, #8231	; 0x2027
   1e586:	f7f0 bc3f 	b.w	ee08 <bt_hci_cmd_send_sync>
}
   1e58a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e590 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1e590:	7a03      	ldrb	r3, [r0, #8]
   1e592:	075b      	lsls	r3, r3, #29
   1e594:	d504      	bpl.n	1e5a0 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1e596:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1e59a:	3001      	adds	r0, #1
   1e59c:	f7ff bfd0 	b.w	1e540 <hci_id_add.constprop.0>
}
   1e5a0:	4770      	bx	lr

0001e5a2 <bt_lookup_id_addr>:
{
   1e5a2:	b510      	push	{r4, lr}
   1e5a4:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1e5a6:	f7f8 fd29 	bl	16ffc <bt_keys_find_irk>
		if (keys) {
   1e5aa:	b100      	cbz	r0, 1e5ae <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1e5ac:	1c44      	adds	r4, r0, #1
}
   1e5ae:	4620      	mov	r0, r4
   1e5b0:	bd10      	pop	{r4, pc}

0001e5b2 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1e5b2:	f7f0 bf01 	b.w	f3b8 <bt_le_create_conn_legacy>

0001e5b6 <bt_hci_disconnect>:
{
   1e5b6:	b570      	push	{r4, r5, r6, lr}
   1e5b8:	4606      	mov	r6, r0
   1e5ba:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e5bc:	f240 4006 	movw	r0, #1030	; 0x406
   1e5c0:	2103      	movs	r1, #3
   1e5c2:	f7f0 fbd7 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   1e5c6:	4604      	mov	r4, r0
   1e5c8:	b168      	cbz	r0, 1e5e6 <bt_hci_disconnect+0x30>
   1e5ca:	2103      	movs	r1, #3
   1e5cc:	3008      	adds	r0, #8
   1e5ce:	f7f9 f8b9 	bl	17744 <net_buf_simple_add>
	disconn->reason = reason;
   1e5d2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e5d4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e5d6:	4621      	mov	r1, r4
}
   1e5d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e5dc:	2200      	movs	r2, #0
   1e5de:	f240 4006 	movw	r0, #1030	; 0x406
   1e5e2:	f7f0 bc11 	b.w	ee08 <bt_hci_cmd_send_sync>
}
   1e5e6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e5ea:	bd70      	pop	{r4, r5, r6, pc}

0001e5ec <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e5ec:	8803      	ldrh	r3, [r0, #0]
   1e5ee:	8842      	ldrh	r2, [r0, #2]
{
   1e5f0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e5f2:	4293      	cmp	r3, r2
   1e5f4:	d819      	bhi.n	1e62a <bt_le_conn_params_valid+0x3e>
   1e5f6:	2b05      	cmp	r3, #5
   1e5f8:	d917      	bls.n	1e62a <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e5fa:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1e5fe:	d814      	bhi.n	1e62a <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1e600:	8883      	ldrh	r3, [r0, #4]
   1e602:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1e606:	d210      	bcs.n	1e62a <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e608:	f640 4476 	movw	r4, #3190	; 0xc76
   1e60c:	88c0      	ldrh	r0, [r0, #6]
   1e60e:	f1a0 010a 	sub.w	r1, r0, #10
   1e612:	b289      	uxth	r1, r1
   1e614:	42a1      	cmp	r1, r4
   1e616:	d808      	bhi.n	1e62a <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1e618:	3301      	adds	r3, #1
   1e61a:	b29b      	uxth	r3, r3
   1e61c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e61e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1e622:	bf34      	ite	cc
   1e624:	2001      	movcc	r0, #1
   1e626:	2000      	movcs	r0, #0
}
   1e628:	bd10      	pop	{r4, pc}
		return false;
   1e62a:	2000      	movs	r0, #0
   1e62c:	e7fc      	b.n	1e628 <bt_le_conn_params_valid+0x3c>

0001e62e <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1e62e:	7a03      	ldrb	r3, [r0, #8]
   1e630:	07d9      	lsls	r1, r3, #31
   1e632:	d504      	bpl.n	1e63e <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1e634:	f023 0301 	bic.w	r3, r3, #1
   1e638:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1e63a:	f7f0 bfb7 	b.w	f5ac <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1e63e:	0799      	lsls	r1, r3, #30
   1e640:	d504      	bpl.n	1e64c <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1e642:	f023 0302 	bic.w	r3, r3, #2
   1e646:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1e648:	f7f1 b86e 	b.w	f728 <bt_id_del>
}
   1e64c:	4770      	bx	lr

0001e64e <bt_le_set_data_len>:
{
   1e64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e650:	4607      	mov	r7, r0
   1e652:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e654:	f242 0022 	movw	r0, #8226	; 0x2022
   1e658:	2106      	movs	r1, #6
{
   1e65a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e65c:	f7f0 fb8a 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   1e660:	4604      	mov	r4, r0
   1e662:	b170      	cbz	r0, 1e682 <bt_le_set_data_len+0x34>
   1e664:	2106      	movs	r1, #6
   1e666:	3008      	adds	r0, #8
   1e668:	f7f9 f86c 	bl	17744 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e66c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e66e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e670:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e672:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e674:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e676:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1e67a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e67e:	f7f1 ba93 	b.w	fba8 <bt_hci_cmd_send>
}
   1e682:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e688 <bt_le_set_phy>:
{
   1e688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e68c:	4680      	mov	r8, r0
   1e68e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e690:	f242 0032 	movw	r0, #8242	; 0x2032
   1e694:	2107      	movs	r1, #7
{
   1e696:	4616      	mov	r6, r2
   1e698:	461d      	mov	r5, r3
   1e69a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e69e:	f7f0 fb69 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   1e6a2:	4604      	mov	r4, r0
   1e6a4:	b190      	cbz	r0, 1e6cc <bt_le_set_phy+0x44>
   1e6a6:	2107      	movs	r1, #7
   1e6a8:	3008      	adds	r0, #8
   1e6aa:	f7f9 f84b 	bl	17744 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e6ae:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1e6b2:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e6b4:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e6b6:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e6b8:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1e6ba:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e6be:	4621      	mov	r1, r4
}
   1e6c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e6c4:	f242 0032 	movw	r0, #8242	; 0x2032
   1e6c8:	f7f1 ba6e 	b.w	fba8 <bt_hci_cmd_send>
}
   1e6cc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e6d4 <bt_addr_le_is_bonded>:
{
   1e6d4:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1e6d6:	f7f8 fcc9 	bl	1706c <bt_keys_find_addr>
		return keys && keys->keys;
   1e6da:	b118      	cbz	r0, 1e6e4 <bt_addr_le_is_bonded+0x10>
   1e6dc:	89c0      	ldrh	r0, [r0, #14]
   1e6de:	3800      	subs	r0, #0
   1e6e0:	bf18      	it	ne
   1e6e2:	2001      	movne	r0, #1
}
   1e6e4:	bd08      	pop	{r3, pc}

0001e6e6 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1e6e6:	6880      	ldr	r0, [r0, #8]
   1e6e8:	f7f2 b8f2 	b.w	108d0 <enh_conn_complete>

0001e6ec <le_legacy_conn_complete>:
{
   1e6ec:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e6ee:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e6f0:	6881      	ldr	r1, [r0, #8]
{
   1e6f2:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1e6f4:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e6f6:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1e6f8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e6fc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e700:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1e702:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e706:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1e70a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e70e:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1e712:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e716:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1e71a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e71e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1e722:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e726:	7b4b      	ldrb	r3, [r1, #13]
   1e728:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e72c:	f7ff fe58 	bl	1e3e0 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1e730:	4669      	mov	r1, sp
   1e732:	2206      	movs	r2, #6
   1e734:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e738:	9400      	str	r4, [sp, #0]
   1e73a:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e73e:	f7ff fd39 	bl	1e1b4 <memcpy>
   1e742:	2206      	movs	r2, #6
   1e744:	4669      	mov	r1, sp
   1e746:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e74a:	9400      	str	r4, [sp, #0]
   1e74c:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e750:	f7ff fd30 	bl	1e1b4 <memcpy>
	enh_conn_complete(&enh);
   1e754:	a802      	add	r0, sp, #8
   1e756:	f7f2 f8bb 	bl	108d0 <enh_conn_complete>
}
   1e75a:	b00a      	add	sp, #40	; 0x28
   1e75c:	bd10      	pop	{r4, pc}

0001e75e <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1e75e:	b530      	push	{r4, r5, lr}
   1e760:	b0b1      	sub	sp, #196	; 0xc4
   1e762:	460d      	mov	r5, r1
	uint8_t tmp[16];

	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   1e764:	4601      	mov	r1, r0
   1e766:	4668      	mov	r0, sp
{
   1e768:	4614      	mov	r4, r2
	sys_memcpy_swap(tmp, key, 16);
   1e76a:	f7f2 fb1f 	bl	10dac <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   1e76e:	4669      	mov	r1, sp
   1e770:	a804      	add	r0, sp, #16
   1e772:	f7ee fded 	bl	d350 <tc_aes128_set_encrypt_key>
   1e776:	b1c0      	cbz	r0, 1e7aa <bt_encrypt_le+0x4c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   1e778:	4629      	mov	r1, r5
   1e77a:	4668      	mov	r0, sp
   1e77c:	f7f2 fb16 	bl	10dac <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   1e780:	4669      	mov	r1, sp
   1e782:	4620      	mov	r0, r4
   1e784:	aa04      	add	r2, sp, #16
   1e786:	f7ff f895 	bl	1d8b4 <tc_aes_encrypt>
   1e78a:	b170      	cbz	r0, 1e7aa <bt_encrypt_le+0x4c>
   1e78c:	1e63      	subs	r3, r4, #1
   1e78e:	f104 0210 	add.w	r2, r4, #16
   1e792:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1e794:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e798:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1e79c:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e79e:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1e7a0:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1e7a2:	d1f7      	bne.n	1e794 <bt_encrypt_le+0x36>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   1e7a4:	2000      	movs	r0, #0
}
   1e7a6:	b031      	add	sp, #196	; 0xc4
   1e7a8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e7aa:	f06f 0015 	mvn.w	r0, #21
   1e7ae:	e7fa      	b.n	1e7a6 <bt_encrypt_le+0x48>

0001e7b0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e7b0:	e8d0 0faf 	lda	r0, [r0]
}
   1e7b4:	4770      	bx	lr

0001e7b6 <atomic_and>:
{
   1e7b6:	4603      	mov	r3, r0
}
   1e7b8:	e8d3 0fef 	ldaex	r0, [r3]
   1e7bc:	ea00 0201 	and.w	r2, r0, r1
   1e7c0:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e7c4:	f1bc 0f00 	cmp.w	ip, #0
   1e7c8:	d1f6      	bne.n	1e7b8 <atomic_and+0x2>
   1e7ca:	4770      	bx	lr

0001e7cc <atomic_or>:
{
   1e7cc:	4603      	mov	r3, r0
}
   1e7ce:	e8d3 0fef 	ldaex	r0, [r3]
   1e7d2:	ea40 0201 	orr.w	r2, r0, r1
   1e7d6:	e8c3 2fec 	stlex	ip, r2, [r3]
   1e7da:	f1bc 0f00 	cmp.w	ip, #0
   1e7de:	d1f6      	bne.n	1e7ce <atomic_or+0x2>
   1e7e0:	4770      	bx	lr

0001e7e2 <tx_notify>:
{
   1e7e2:	b570      	push	{r4, r5, r6, lr}
   1e7e4:	4604      	mov	r4, r0
	__asm__ volatile(
   1e7e6:	f04f 0220 	mov.w	r2, #32
   1e7ea:	f3ef 8311 	mrs	r3, BASEPRI
   1e7ee:	f382 8811 	msr	BASEPRI, r2
   1e7f2:	f3bf 8f6f 	isb	sy
	return list->head;
   1e7f6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e7f8:	b920      	cbnz	r0, 1e804 <tx_notify+0x22>
	__asm__ volatile(
   1e7fa:	f383 8811 	msr	BASEPRI, r3
   1e7fe:	f3bf 8f6f 	isb	sy
}
   1e802:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e804:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1e806:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e808:	4288      	cmp	r0, r1
	list->tail = node;
   1e80a:	bf08      	it	eq
   1e80c:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1e80e:	6222      	str	r2, [r4, #32]
   1e810:	f383 8811 	msr	BASEPRI, r3
   1e814:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1e818:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1e81c:	f7f2 fb32 	bl	10e84 <tx_free>
		cb(conn, user_data);
   1e820:	4631      	mov	r1, r6
   1e822:	4620      	mov	r0, r4
   1e824:	47a8      	blx	r5
	while (1) {
   1e826:	e7de      	b.n	1e7e6 <tx_notify+0x4>

0001e828 <tx_complete_work>:
	tx_notify(conn);
   1e828:	3828      	subs	r0, #40	; 0x28
   1e82a:	f7ff bfda 	b.w	1e7e2 <tx_notify>

0001e82e <bt_conn_new>:
{
   1e82e:	b538      	push	{r3, r4, r5, lr}
   1e830:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1e832:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e834:	2501      	movs	r5, #1
   1e836:	428b      	cmp	r3, r1
   1e838:	d102      	bne.n	1e840 <bt_conn_new+0x12>
		return NULL;
   1e83a:	2400      	movs	r4, #0
}
   1e83c:	4620      	mov	r0, r4
   1e83e:	bd38      	pop	{r3, r4, r5, pc}
   1e840:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1e844:	e8d2 0fef 	ldaex	r0, [r2]
   1e848:	2800      	cmp	r0, #0
   1e84a:	d104      	bne.n	1e856 <bt_conn_new+0x28>
   1e84c:	e8c2 5fec 	stlex	ip, r5, [r2]
   1e850:	f1bc 0f00 	cmp.w	ip, #0
   1e854:	d1f6      	bne.n	1e844 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1e856:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1e85a:	d002      	beq.n	1e862 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1e85c:	4604      	mov	r4, r0
   1e85e:	3301      	adds	r3, #1
   1e860:	e7e9      	b.n	1e836 <bt_conn_new+0x8>
	if (!conn) {
   1e862:	2c00      	cmp	r4, #0
   1e864:	d0ea      	beq.n	1e83c <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1e866:	22b8      	movs	r2, #184	; 0xb8
   1e868:	2100      	movs	r1, #0
   1e86a:	4620      	mov	r0, r4
   1e86c:	f7ff fccd 	bl	1e20a <memset>
	return conn;
   1e870:	e7e4      	b.n	1e83c <bt_conn_new+0xe>

0001e872 <bt_conn_le_start_encryption>:
{
   1e872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e876:	4682      	mov	sl, r0
   1e878:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   1e87a:	f242 0019 	movw	r0, #8217	; 0x2019
   1e87e:	211c      	movs	r1, #28
{
   1e880:	4690      	mov	r8, r2
   1e882:	461f      	mov	r7, r3
   1e884:	9e08      	ldr	r6, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   1e886:	f7f0 fa75 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   1e88a:	4605      	mov	r5, r0
   1e88c:	b340      	cbz	r0, 1e8e0 <bt_conn_le_start_encryption+0x6e>
   1e88e:	211c      	movs	r1, #28
   1e890:	3008      	adds	r0, #8
   1e892:	f7f8 ff57 	bl	17744 <net_buf_simple_add>
   1e896:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e898:	f8ba 3000 	ldrh.w	r3, [sl]
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   1e89c:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e89e:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   1e8a2:	4649      	mov	r1, r9
   1e8a4:	f7ff fc86 	bl	1e1b4 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   1e8a8:	2202      	movs	r2, #2
   1e8aa:	4641      	mov	r1, r8
   1e8ac:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   1e8b0:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   1e8b2:	f7ff fc7f 	bl	1e1b4 <memcpy>
	memcpy(cp->ltk, ltk, len);
   1e8b6:	4632      	mov	r2, r6
   1e8b8:	4639      	mov	r1, r7
   1e8ba:	4620      	mov	r0, r4
   1e8bc:	f7ff fc7a 	bl	1e1b4 <memcpy>
	if (len < sizeof(cp->ltk)) {
   1e8c0:	2e0f      	cmp	r6, #15
   1e8c2:	d805      	bhi.n	1e8d0 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   1e8c4:	2100      	movs	r1, #0
   1e8c6:	f1c6 0210 	rsb	r2, r6, #16
   1e8ca:	19a0      	adds	r0, r4, r6
   1e8cc:	f7ff fc9d 	bl	1e20a <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   1e8d0:	4629      	mov	r1, r5
}
   1e8d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   1e8d6:	2200      	movs	r2, #0
   1e8d8:	f242 0019 	movw	r0, #8217	; 0x2019
   1e8dc:	f7f0 ba94 	b.w	ee08 <bt_hci_cmd_send_sync>
}
   1e8e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e8e8 <bt_conn_set_security>:
{
   1e8e8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1e8ea:	7b43      	ldrb	r3, [r0, #13]
{
   1e8ec:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1e8ee:	2b07      	cmp	r3, #7
{
   1e8f0:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1e8f2:	d11c      	bne.n	1e92e <bt_conn_set_security+0x46>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1e8f4:	7a43      	ldrb	r3, [r0, #9]
   1e8f6:	428b      	cmp	r3, r1
   1e8f8:	d21c      	bcs.n	1e934 <bt_conn_set_security+0x4c>
   1e8fa:	7a83      	ldrb	r3, [r0, #10]
   1e8fc:	428b      	cmp	r3, r1
   1e8fe:	d219      	bcs.n	1e934 <bt_conn_set_security+0x4c>
	if (val) {
   1e900:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1e902:	f100 0004 	add.w	r0, r0, #4
   1e906:	d50d      	bpl.n	1e924 <bt_conn_set_security+0x3c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e908:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1e90c:	f7ff ff5e 	bl	1e7cc <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1e910:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   1e914:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1e916:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1e918:	f001 fcf4 	bl	20304 <bt_smp_start_security>
	if (err) {
   1e91c:	b108      	cbz	r0, 1e922 <bt_conn_set_security+0x3a>
		conn->required_sec_level = conn->sec_level;
   1e91e:	7a63      	ldrb	r3, [r4, #9]
   1e920:	72a3      	strb	r3, [r4, #10]
}
   1e922:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e924:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   1e928:	f7ff ff45 	bl	1e7b6 <atomic_and>
   1e92c:	e7f0      	b.n	1e910 <bt_conn_set_security+0x28>
		return -ENOTCONN;
   1e92e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1e932:	e7f6      	b.n	1e922 <bt_conn_set_security+0x3a>
		return 0;
   1e934:	2000      	movs	r0, #0
   1e936:	e7f4      	b.n	1e922 <bt_conn_set_security+0x3a>

0001e938 <bt_conn_get_security>:
}
   1e938:	7a40      	ldrb	r0, [r0, #9]
   1e93a:	4770      	bx	lr

0001e93c <bt_conn_reset_rx_state>:
{
   1e93c:	b510      	push	{r4, lr}
   1e93e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e940:	6900      	ldr	r0, [r0, #16]
   1e942:	b118      	cbz	r0, 1e94c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e944:	f7f8 fde8 	bl	17518 <net_buf_unref>
	conn->rx = NULL;
   1e948:	2300      	movs	r3, #0
   1e94a:	6123      	str	r3, [r4, #16]
}
   1e94c:	bd10      	pop	{r4, pc}

0001e94e <bt_conn_is_peer_addr_le>:
{
   1e94e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e950:	7a03      	ldrb	r3, [r0, #8]
{
   1e952:	4604      	mov	r4, r0
	if (id != conn->id) {
   1e954:	428b      	cmp	r3, r1
{
   1e956:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e958:	d115      	bne.n	1e986 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e95a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e95e:	2207      	movs	r2, #7
   1e960:	4628      	mov	r0, r5
   1e962:	f7ff fc16 	bl	1e192 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e966:	b180      	cbz	r0, 1e98a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1e968:	78e3      	ldrb	r3, [r4, #3]
   1e96a:	2207      	movs	r2, #7
   1e96c:	b943      	cbnz	r3, 1e980 <bt_conn_is_peer_addr_le+0x32>
   1e96e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e972:	4628      	mov	r0, r5
   1e974:	f7ff fc0d 	bl	1e192 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e978:	fab0 f080 	clz	r0, r0
   1e97c:	0940      	lsrs	r0, r0, #5
}
   1e97e:	bd38      	pop	{r3, r4, r5, pc}
   1e980:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e984:	e7f5      	b.n	1e972 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e986:	2000      	movs	r0, #0
   1e988:	e7f9      	b.n	1e97e <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e98a:	2001      	movs	r0, #1
   1e98c:	e7f7      	b.n	1e97e <bt_conn_is_peer_addr_le+0x30>

0001e98e <bt_conn_ref>:
{
   1e98e:	4603      	mov	r3, r0
   1e990:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1e992:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1e996:	4610      	mov	r0, r2
   1e998:	f7ff ff0a 	bl	1e7b0 <atomic_get>
		if (!old) {
   1e99c:	b160      	cbz	r0, 1e9b8 <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e99e:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e9a0:	e8d2 4fef 	ldaex	r4, [r2]
   1e9a4:	4284      	cmp	r4, r0
   1e9a6:	d104      	bne.n	1e9b2 <bt_conn_ref+0x24>
   1e9a8:	e8c2 1fec 	stlex	ip, r1, [r2]
   1e9ac:	f1bc 0f00 	cmp.w	ip, #0
   1e9b0:	d1f6      	bne.n	1e9a0 <bt_conn_ref+0x12>
   1e9b2:	d1f0      	bne.n	1e996 <bt_conn_ref+0x8>
}
   1e9b4:	4618      	mov	r0, r3
   1e9b6:	bd10      	pop	{r4, pc}
			return NULL;
   1e9b8:	4603      	mov	r3, r0
   1e9ba:	e7fb      	b.n	1e9b4 <bt_conn_ref+0x26>

0001e9bc <conn_lookup_handle>:
{
   1e9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e9c0:	4607      	mov	r7, r0
   1e9c2:	460e      	mov	r6, r1
   1e9c4:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e9c6:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e9c8:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1e9cc:	42b4      	cmp	r4, r6
   1e9ce:	d103      	bne.n	1e9d8 <conn_lookup_handle+0x1c>
	return NULL;
   1e9d0:	2300      	movs	r3, #0
}
   1e9d2:	4618      	mov	r0, r3
   1e9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e9d8:	fb09 7004 	mla	r0, r9, r4, r7
   1e9dc:	f7ff ffd7 	bl	1e98e <bt_conn_ref>
   1e9e0:	4603      	mov	r3, r0
		if (!conn) {
   1e9e2:	b158      	cbz	r0, 1e9fc <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e9e4:	7b45      	ldrb	r5, [r0, #13]
   1e9e6:	2d01      	cmp	r5, #1
   1e9e8:	d002      	beq.n	1e9f0 <conn_lookup_handle+0x34>
   1e9ea:	3d07      	subs	r5, #7
   1e9ec:	2d01      	cmp	r5, #1
   1e9ee:	d803      	bhi.n	1e9f8 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e9f0:	881a      	ldrh	r2, [r3, #0]
   1e9f2:	4542      	cmp	r2, r8
   1e9f4:	d0ed      	beq.n	1e9d2 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e9f6:	4618      	mov	r0, r3
   1e9f8:	f7f2 fcf4 	bl	113e4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e9fc:	3401      	adds	r4, #1
   1e9fe:	e7e5      	b.n	1e9cc <conn_lookup_handle+0x10>

0001ea00 <bt_conn_get_dst>:
}
   1ea00:	3088      	adds	r0, #136	; 0x88
   1ea02:	4770      	bx	lr

0001ea04 <bt_conn_le_conn_update>:
{
   1ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea06:	4607      	mov	r7, r0
   1ea08:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ea0a:	f242 0013 	movw	r0, #8211	; 0x2013
   1ea0e:	210e      	movs	r1, #14
   1ea10:	f7f0 f9b0 	bl	ed74 <bt_hci_cmd_create>
	if (!buf) {
   1ea14:	4606      	mov	r6, r0
   1ea16:	b1d0      	cbz	r0, 1ea4e <_flash_used+0x26>
   1ea18:	210e      	movs	r1, #14
   1ea1a:	3008      	adds	r0, #8
   1ea1c:	f7f8 fe92 	bl	17744 <net_buf_simple_add>
   1ea20:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ea22:	220e      	movs	r2, #14
   1ea24:	2100      	movs	r1, #0
   1ea26:	f7ff fbf0 	bl	1e20a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ea2a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ea2c:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ea2e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ea30:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ea32:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ea34:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ea36:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ea38:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ea3c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ea3e:	88ab      	ldrh	r3, [r5, #4]
   1ea40:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ea42:	88eb      	ldrh	r3, [r5, #6]
   1ea44:	8123      	strh	r3, [r4, #8]
}
   1ea46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ea4a:	f7f0 b9dd 	b.w	ee08 <bt_hci_cmd_send_sync>
}
   1ea4e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ea52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ea54 <l2cap_connected>:
}
   1ea54:	4770      	bx	lr

0001ea56 <l2cap_disconnected>:
   1ea56:	4770      	bx	lr

0001ea58 <bt_l2cap_chan_remove>:
	return list->head;
   1ea58:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ea5a:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ea5c:	b17b      	cbz	r3, 1ea7e <bt_l2cap_chan_remove+0x26>
   1ea5e:	2200      	movs	r2, #0
   1ea60:	3b08      	subs	r3, #8
   1ea62:	b163      	cbz	r3, 1ea7e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1ea64:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1ea66:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1ea6a:	d10e      	bne.n	1ea8a <bt_l2cap_chan_remove+0x32>
	return node->next;
   1ea6c:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1ea6e:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1ea70:	b932      	cbnz	r2, 1ea80 <bt_l2cap_chan_remove+0x28>
   1ea72:	42ac      	cmp	r4, r5
	list->head = node;
   1ea74:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1ea76:	d100      	bne.n	1ea7a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1ea78:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1ea7a:	2200      	movs	r2, #0
   1ea7c:	609a      	str	r2, [r3, #8]
}
   1ea7e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1ea80:	42ac      	cmp	r4, r5
	parent->next = child;
   1ea82:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1ea84:	bf08      	it	eq
   1ea86:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1ea88:	e7f7      	b.n	1ea7a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea8a:	2c00      	cmp	r4, #0
   1ea8c:	d0f7      	beq.n	1ea7e <bt_l2cap_chan_remove+0x26>
	return node->next;
   1ea8e:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ea90:	2b00      	cmp	r3, #0
   1ea92:	d0f4      	beq.n	1ea7e <bt_l2cap_chan_remove+0x26>
   1ea94:	4622      	mov	r2, r4
   1ea96:	3b08      	subs	r3, #8
   1ea98:	e7e3      	b.n	1ea62 <bt_l2cap_chan_remove+0xa>

0001ea9a <bt_l2cap_chan_del>:
{
   1ea9a:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1ea9c:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1eaa0:	4604      	mov	r4, r0
	if (!chan->conn) {
   1eaa2:	b123      	cbz	r3, 1eaae <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1eaa4:	686b      	ldr	r3, [r5, #4]
   1eaa6:	b103      	cbz	r3, 1eaaa <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1eaa8:	4798      	blx	r3
	chan->conn = NULL;
   1eaaa:	2300      	movs	r3, #0
   1eaac:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1eaae:	68e3      	ldr	r3, [r4, #12]
   1eab0:	b10b      	cbz	r3, 1eab6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1eab2:	4620      	mov	r0, r4
   1eab4:	4798      	blx	r3
	if (ops->released) {
   1eab6:	69eb      	ldr	r3, [r5, #28]
   1eab8:	b11b      	cbz	r3, 1eac2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1eaba:	4620      	mov	r0, r4
}
   1eabc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1eac0:	4718      	bx	r3
}
   1eac2:	bd70      	pop	{r4, r5, r6, pc}

0001eac4 <bt_l2cap_disconnected>:
	return list->head;
   1eac4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1eac6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1eac8:	b18b      	cbz	r3, 1eaee <bt_l2cap_disconnected+0x2a>
   1eaca:	f1b3 0008 	subs.w	r0, r3, #8
   1eace:	d00e      	beq.n	1eaee <bt_l2cap_disconnected+0x2a>
	return node->next;
   1ead0:	681c      	ldr	r4, [r3, #0]
   1ead2:	b104      	cbz	r4, 1ead6 <bt_l2cap_disconnected+0x12>
   1ead4:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1ead6:	f7ff ffe0 	bl	1ea9a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1eada:	b144      	cbz	r4, 1eaee <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eadc:	f114 0308 	adds.w	r3, r4, #8
   1eae0:	d002      	beq.n	1eae8 <bt_l2cap_disconnected+0x24>
	return node->next;
   1eae2:	68a3      	ldr	r3, [r4, #8]
   1eae4:	b103      	cbz	r3, 1eae8 <bt_l2cap_disconnected+0x24>
   1eae6:	3b08      	subs	r3, #8
{
   1eae8:	4620      	mov	r0, r4
   1eaea:	461c      	mov	r4, r3
   1eaec:	e7f3      	b.n	1ead6 <bt_l2cap_disconnected+0x12>
}
   1eaee:	bd10      	pop	{r4, pc}

0001eaf0 <bt_l2cap_security_changed>:
{
   1eaf0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1eaf2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1eaf4:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1eaf6:	b1a3      	cbz	r3, 1eb22 <bt_l2cap_security_changed+0x32>
   1eaf8:	f1b3 0008 	subs.w	r0, r3, #8
   1eafc:	d011      	beq.n	1eb22 <bt_l2cap_security_changed+0x32>
	return node->next;
   1eafe:	681c      	ldr	r4, [r3, #0]
   1eb00:	b104      	cbz	r4, 1eb04 <bt_l2cap_security_changed+0x14>
   1eb02:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1eb04:	6843      	ldr	r3, [r0, #4]
   1eb06:	689b      	ldr	r3, [r3, #8]
   1eb08:	b10b      	cbz	r3, 1eb0e <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1eb0a:	4629      	mov	r1, r5
   1eb0c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1eb0e:	b144      	cbz	r4, 1eb22 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eb10:	f114 0308 	adds.w	r3, r4, #8
   1eb14:	d002      	beq.n	1eb1c <bt_l2cap_security_changed+0x2c>
	return node->next;
   1eb16:	68a3      	ldr	r3, [r4, #8]
   1eb18:	b103      	cbz	r3, 1eb1c <bt_l2cap_security_changed+0x2c>
   1eb1a:	3b08      	subs	r3, #8
{
   1eb1c:	4620      	mov	r0, r4
   1eb1e:	461c      	mov	r4, r3
   1eb20:	e7f0      	b.n	1eb04 <bt_l2cap_security_changed+0x14>
}
   1eb22:	bd38      	pop	{r3, r4, r5, pc}

0001eb24 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1eb24:	3104      	adds	r1, #4
   1eb26:	f7f2 bfef 	b.w	11b08 <bt_conn_create_pdu_timeout>

0001eb2a <bt_l2cap_send_cb>:
{
   1eb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb2e:	4614      	mov	r4, r2
   1eb30:	4605      	mov	r5, r0
   1eb32:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1eb34:	f102 0008 	add.w	r0, r2, #8
   1eb38:	2104      	movs	r1, #4
   1eb3a:	461e      	mov	r6, r3
   1eb3c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1eb40:	f7f8 fda8 	bl	17694 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1eb44:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1eb46:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1eb48:	3a04      	subs	r2, #4
   1eb4a:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1eb4c:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1eb4e:	4632      	mov	r2, r6
   1eb50:	4621      	mov	r1, r4
   1eb52:	4628      	mov	r0, r5
}
   1eb54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1eb58:	f7f2 bb84 	b.w	11264 <bt_conn_send_cb>

0001eb5c <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1eb5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1eb5e:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1eb60:	2202      	movs	r2, #2
   1eb62:	2001      	movs	r0, #1
   1eb64:	f7f3 f926 	bl	11db4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1eb68:	4604      	mov	r4, r0
   1eb6a:	b160      	cbz	r0, 1eb86 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1eb6c:	2102      	movs	r1, #2
   1eb6e:	3008      	adds	r0, #8
   1eb70:	f7f8 fde8 	bl	17744 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1eb74:	2300      	movs	r3, #0
   1eb76:	4622      	mov	r2, r4
   1eb78:	7003      	strb	r3, [r0, #0]
   1eb7a:	7043      	strb	r3, [r0, #1]
   1eb7c:	2105      	movs	r1, #5
   1eb7e:	4628      	mov	r0, r5
   1eb80:	9300      	str	r3, [sp, #0]
   1eb82:	f7ff ffd2 	bl	1eb2a <bt_l2cap_send_cb>
}
   1eb86:	b003      	add	sp, #12
   1eb88:	bd30      	pop	{r4, r5, pc}

0001eb8a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1eb8a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eb8c:	b160      	cbz	r0, 1eba8 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1eb8e:	3808      	subs	r0, #8
   1eb90:	b900      	cbnz	r0, 1eb94 <bt_l2cap_le_lookup_tx_cid+0xa>
   1eb92:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1eb94:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1eb98:	428b      	cmp	r3, r1
   1eb9a:	d005      	beq.n	1eba8 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eb9c:	f110 0308 	adds.w	r3, r0, #8
   1eba0:	d001      	beq.n	1eba6 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1eba2:	6880      	ldr	r0, [r0, #8]
   1eba4:	e7f2      	b.n	1eb8c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1eba6:	4618      	mov	r0, r3
}
   1eba8:	4770      	bx	lr

0001ebaa <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1ebaa:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ebac:	b160      	cbz	r0, 1ebc8 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1ebae:	3808      	subs	r0, #8
   1ebb0:	b900      	cbnz	r0, 1ebb4 <bt_l2cap_le_lookup_rx_cid+0xa>
   1ebb2:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ebb4:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1ebb8:	428b      	cmp	r3, r1
   1ebba:	d005      	beq.n	1ebc8 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ebbc:	f110 0308 	adds.w	r3, r0, #8
   1ebc0:	d001      	beq.n	1ebc6 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1ebc2:	6880      	ldr	r0, [r0, #8]
   1ebc4:	e7f2      	b.n	1ebac <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1ebc6:	4618      	mov	r0, r3
}
   1ebc8:	4770      	bx	lr

0001ebca <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1ebca:	4770      	bx	lr

0001ebcc <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ebcc:	4603      	mov	r3, r0
	return list->head;
   1ebce:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ebd0:	b128      	cbz	r0, 1ebde <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ebd2:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1ebd4:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ebd6:	4288      	cmp	r0, r1
	list->head = node;
   1ebd8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1ebda:	bf08      	it	eq
   1ebdc:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1ebde:	4770      	bx	lr

0001ebe0 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1ebe0:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ebe2:	2000      	movs	r0, #0

	while (buf) {
   1ebe4:	b903      	cbnz	r3, 1ebe8 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1ebe6:	4770      	bx	lr
		bytes += buf->len;
   1ebe8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ebea:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ebec:	4410      	add	r0, r2
		buf = buf->frags;
   1ebee:	e7f9      	b.n	1ebe4 <net_buf_frags_len+0x4>

0001ebf0 <att_sent>:
	if (chan->ops->sent) {
   1ebf0:	684b      	ldr	r3, [r1, #4]
{
   1ebf2:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1ebf4:	695b      	ldr	r3, [r3, #20]
   1ebf6:	b103      	cbz	r3, 1ebfa <att_sent+0xa>
		chan->ops->sent(chan);
   1ebf8:	4718      	bx	r3
}
   1ebfa:	4770      	bx	lr

0001ebfc <attr_read_type_cb>:
{
   1ebfc:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ebfe:	68d4      	ldr	r4, [r2, #12]
   1ec00:	3102      	adds	r1, #2
   1ec02:	7823      	ldrb	r3, [r4, #0]
   1ec04:	b913      	cbnz	r3, 1ec0c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1ec06:	7021      	strb	r1, [r4, #0]
	return true;
   1ec08:	2001      	movs	r0, #1
   1ec0a:	e006      	b.n	1ec1a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ec0c:	428b      	cmp	r3, r1
   1ec0e:	d0fb      	beq.n	1ec08 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1ec10:	8983      	ldrh	r3, [r0, #12]
   1ec12:	3b02      	subs	r3, #2
   1ec14:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ec16:	2000      	movs	r0, #0
   1ec18:	6110      	str	r0, [r2, #16]
}
   1ec1a:	bd10      	pop	{r4, pc}

0001ec1c <att_prepare_write_req>:
}
   1ec1c:	2006      	movs	r0, #6
   1ec1e:	4770      	bx	lr

0001ec20 <att_op_get_type>:
	switch (op) {
   1ec20:	281e      	cmp	r0, #30
   1ec22:	d816      	bhi.n	1ec52 <att_op_get_type+0x32>
   1ec24:	b308      	cbz	r0, 1ec6a <att_op_get_type+0x4a>
   1ec26:	1e43      	subs	r3, r0, #1
   1ec28:	2b1d      	cmp	r3, #29
   1ec2a:	d81e      	bhi.n	1ec6a <att_op_get_type+0x4a>
   1ec2c:	e8df f003 	tbb	[pc, r3]
   1ec30:	23172317 	.word	0x23172317
   1ec34:	23172317 	.word	0x23172317
   1ec38:	23172317 	.word	0x23172317
   1ec3c:	23172317 	.word	0x23172317
   1ec40:	1d172317 	.word	0x1d172317
   1ec44:	2317231d 	.word	0x2317231d
   1ec48:	1d191d17 	.word	0x1d191d17
   1ec4c:	0f1b      	.short	0x0f1b
   1ec4e:	2004      	movs	r0, #4
   1ec50:	4770      	bx	lr
   1ec52:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ec56:	2b52      	cmp	r3, #82	; 0x52
   1ec58:	d107      	bne.n	1ec6a <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ec5a:	2000      	movs	r0, #0
}
   1ec5c:	4770      	bx	lr
		return ATT_RESPONSE;
   1ec5e:	2002      	movs	r0, #2
   1ec60:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ec62:	2003      	movs	r0, #3
   1ec64:	4770      	bx	lr
		return ATT_INDICATION;
   1ec66:	2005      	movs	r0, #5
   1ec68:	4770      	bx	lr
		return ATT_COMMAND;
   1ec6a:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ec6e:	bf0c      	ite	eq
   1ec70:	2006      	moveq	r0, #6
   1ec72:	2000      	movne	r0, #0
   1ec74:	4770      	bx	lr
		return ATT_REQUEST;
   1ec76:	2001      	movs	r0, #1
   1ec78:	4770      	bx	lr

0001ec7a <att_notify_mult>:
{
   1ec7a:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1ec7c:	6803      	ldr	r3, [r0, #0]
   1ec7e:	898a      	ldrh	r2, [r1, #12]
   1ec80:	6818      	ldr	r0, [r3, #0]
   1ec82:	6889      	ldr	r1, [r1, #8]
   1ec84:	f7f6 f91c 	bl	14ec0 <bt_gatt_mult_notification>
}
   1ec88:	2000      	movs	r0, #0
   1ec8a:	bd08      	pop	{r3, pc}

0001ec8c <att_notify>:
{
   1ec8c:	b538      	push	{r3, r4, r5, lr}
   1ec8e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1ec90:	f101 0008 	add.w	r0, r1, #8
   1ec94:	460c      	mov	r4, r1
   1ec96:	f001 fc09 	bl	204ac <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1ec9a:	682d      	ldr	r5, [r5, #0]
   1ec9c:	4601      	mov	r1, r0
   1ec9e:	89a3      	ldrh	r3, [r4, #12]
   1eca0:	6828      	ldr	r0, [r5, #0]
   1eca2:	68a2      	ldr	r2, [r4, #8]
   1eca4:	f000 fe9a 	bl	1f9dc <bt_gatt_notification>
}
   1eca8:	2000      	movs	r0, #0
   1ecaa:	bd38      	pop	{r3, r4, r5, pc}

0001ecac <bt_gatt_foreach_attr>:
{
   1ecac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ecae:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ecb2:	2300      	movs	r3, #0
   1ecb4:	461a      	mov	r2, r3
   1ecb6:	9300      	str	r3, [sp, #0]
   1ecb8:	f7f5 f854 	bl	13d64 <bt_gatt_foreach_attr_type>
}
   1ecbc:	b005      	add	sp, #20
   1ecbe:	f85d fb04 	ldr.w	pc, [sp], #4

0001ecc2 <find_info_cb>:
{
   1ecc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ecc4:	6893      	ldr	r3, [r2, #8]
{
   1ecc6:	4605      	mov	r5, r0
   1ecc8:	460e      	mov	r6, r1
   1ecca:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1eccc:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1ecce:	b963      	cbnz	r3, 1ecea <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ecd0:	6850      	ldr	r0, [r2, #4]
   1ecd2:	2101      	movs	r1, #1
   1ecd4:	3008      	adds	r0, #8
   1ecd6:	f7f8 fd35 	bl	17744 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ecda:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ecdc:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ecde:	781b      	ldrb	r3, [r3, #0]
   1ece0:	2b00      	cmp	r3, #0
   1ece2:	bf0c      	ite	eq
   1ece4:	2301      	moveq	r3, #1
   1ece6:	2302      	movne	r3, #2
   1ece8:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ecea:	68a3      	ldr	r3, [r4, #8]
   1ecec:	781b      	ldrb	r3, [r3, #0]
   1ecee:	2b01      	cmp	r3, #1
   1ecf0:	d003      	beq.n	1ecfa <find_info_cb+0x38>
   1ecf2:	2b02      	cmp	r3, #2
   1ecf4:	d019      	beq.n	1ed2a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1ecf6:	2000      	movs	r0, #0
   1ecf8:	e016      	b.n	1ed28 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ecfa:	682b      	ldr	r3, [r5, #0]
   1ecfc:	781b      	ldrb	r3, [r3, #0]
   1ecfe:	2b00      	cmp	r3, #0
   1ed00:	d1f9      	bne.n	1ecf6 <find_info_cb+0x34>
   1ed02:	6860      	ldr	r0, [r4, #4]
   1ed04:	2104      	movs	r1, #4
   1ed06:	3008      	adds	r0, #8
   1ed08:	f7f8 fd1c 	bl	17744 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ed0c:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ed0e:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ed10:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1ed12:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ed14:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1ed16:	6863      	ldr	r3, [r4, #4]
   1ed18:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1ed1c:	899b      	ldrh	r3, [r3, #12]
   1ed1e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ed20:	2804      	cmp	r0, #4
   1ed22:	bf94      	ite	ls
   1ed24:	2000      	movls	r0, #0
   1ed26:	2001      	movhi	r0, #1
}
   1ed28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1ed2a:	682b      	ldr	r3, [r5, #0]
   1ed2c:	781b      	ldrb	r3, [r3, #0]
   1ed2e:	2b02      	cmp	r3, #2
   1ed30:	d1e1      	bne.n	1ecf6 <find_info_cb+0x34>
   1ed32:	6860      	ldr	r0, [r4, #4]
   1ed34:	2112      	movs	r1, #18
   1ed36:	3008      	adds	r0, #8
   1ed38:	f7f8 fd04 	bl	17744 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ed3c:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ed3e:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ed40:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1ed42:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ed46:	3101      	adds	r1, #1
   1ed48:	f7ff fa34 	bl	1e1b4 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1ed4c:	6863      	ldr	r3, [r4, #4]
   1ed4e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1ed52:	899b      	ldrh	r3, [r3, #12]
   1ed54:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ed56:	2812      	cmp	r0, #18
   1ed58:	e7e3      	b.n	1ed22 <find_info_cb+0x60>

0001ed5a <attr_read_group_cb>:
	if (!data->rsp->len) {
   1ed5a:	68d0      	ldr	r0, [r2, #12]
   1ed5c:	3104      	adds	r1, #4
   1ed5e:	7803      	ldrb	r3, [r0, #0]
   1ed60:	b913      	cbnz	r3, 1ed68 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1ed62:	7001      	strb	r1, [r0, #0]
	return true;
   1ed64:	2001      	movs	r0, #1
}
   1ed66:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1ed68:	428b      	cmp	r3, r1
   1ed6a:	d0fb      	beq.n	1ed64 <attr_read_group_cb+0xa>
		data->group = NULL;
   1ed6c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1ed6e:	6891      	ldr	r1, [r2, #8]
   1ed70:	898b      	ldrh	r3, [r1, #12]
   1ed72:	3b04      	subs	r3, #4
   1ed74:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1ed76:	6110      	str	r0, [r2, #16]
		return false;
   1ed78:	4770      	bx	lr

0001ed7a <write_cb>:
{
   1ed7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ed7c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1ed7e:	4601      	mov	r1, r0
{
   1ed80:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1ed82:	222a      	movs	r2, #42	; 0x2a
   1ed84:	6820      	ldr	r0, [r4, #0]
   1ed86:	f000 fd92 	bl	1f8ae <bt_gatt_check_perm>
   1ed8a:	4605      	mov	r5, r0
   1ed8c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1ed8e:	bb00      	cbnz	r0, 1edd2 <write_cb+0x58>
	if (!data->req) {
   1ed90:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1ed92:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1ed94:	2b00      	cmp	r3, #0
   1ed96:	bf14      	ite	ne
   1ed98:	2300      	movne	r3, #0
   1ed9a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1ed9c:	9301      	str	r3, [sp, #4]
   1ed9e:	8a63      	ldrh	r3, [r4, #18]
   1eda0:	68b7      	ldr	r7, [r6, #8]
   1eda2:	9300      	str	r3, [sp, #0]
   1eda4:	68e2      	ldr	r2, [r4, #12]
   1eda6:	8a23      	ldrh	r3, [r4, #16]
   1eda8:	6820      	ldr	r0, [r4, #0]
   1edaa:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1edac:	1e03      	subs	r3, r0, #0
   1edae:	db05      	blt.n	1edbc <write_cb+0x42>
   1edb0:	8a22      	ldrh	r2, [r4, #16]
   1edb2:	4293      	cmp	r3, r2
   1edb4:	d10b      	bne.n	1edce <write_cb+0x54>
	data->err = 0U;
   1edb6:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1edb8:	2501      	movs	r5, #1
   1edba:	e005      	b.n	1edc8 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1edbc:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1edc0:	d305      	bcc.n	1edce <write_cb+0x54>
		return -err;
   1edc2:	425b      	negs	r3, r3
   1edc4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1edc6:	7523      	strb	r3, [r4, #20]
}
   1edc8:	4628      	mov	r0, r5
   1edca:	b003      	add	sp, #12
   1edcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1edce:	230e      	movs	r3, #14
   1edd0:	e7f9      	b.n	1edc6 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1edd2:	2500      	movs	r5, #0
   1edd4:	e7f8      	b.n	1edc8 <write_cb+0x4e>

0001edd6 <att_chan_read>:
{
   1edd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edda:	4680      	mov	r8, r0
   1eddc:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1edde:	4610      	mov	r0, r2
{
   1ede0:	4699      	mov	r9, r3
   1ede2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1ede4:	f7ff fefc 	bl	1ebe0 <net_buf_frags_len>
   1ede8:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1edec:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1edee:	4283      	cmp	r3, r0
   1edf0:	d97a      	bls.n	1eee8 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1edf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1edf6:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1edf8:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1edfa:	f7f8 fbe9 	bl	175d0 <net_buf_frag_last>
	size_t len, total = 0;
   1edfe:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1ee02:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ee04:	4630      	mov	r0, r6
   1ee06:	f7ff feeb 	bl	1ebe0 <net_buf_frags_len>
   1ee0a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1ee0e:	f105 0708 	add.w	r7, r5, #8
   1ee12:	1a24      	subs	r4, r4, r0
   1ee14:	4638      	mov	r0, r7
   1ee16:	f001 fb55 	bl	204c4 <net_buf_simple_tailroom>
   1ee1a:	4284      	cmp	r4, r0
   1ee1c:	d211      	bcs.n	1ee42 <att_chan_read+0x6c>
   1ee1e:	4630      	mov	r0, r6
   1ee20:	f7ff fede 	bl	1ebe0 <net_buf_frags_len>
   1ee24:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1ee28:	1a24      	subs	r4, r4, r0
		if (!len) {
   1ee2a:	bb34      	cbnz	r4, 1ee7a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1ee2c:	79b0      	ldrb	r0, [r6, #6]
   1ee2e:	f7f8 f9f3 	bl	17218 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ee32:	2200      	movs	r2, #0
   1ee34:	2300      	movs	r3, #0
   1ee36:	f001 fb1f 	bl	20478 <net_buf_alloc_fixed>
			if (!frag) {
   1ee3a:	4605      	mov	r5, r0
   1ee3c:	b930      	cbnz	r0, 1ee4c <att_chan_read+0x76>
	return total;
   1ee3e:	4657      	mov	r7, sl
   1ee40:	e02c      	b.n	1ee9c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1ee42:	4638      	mov	r0, r7
   1ee44:	f001 fb3e 	bl	204c4 <net_buf_simple_tailroom>
   1ee48:	4604      	mov	r4, r0
   1ee4a:	e7ee      	b.n	1ee2a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1ee4c:	4601      	mov	r1, r0
   1ee4e:	4630      	mov	r0, r6
   1ee50:	f7f8 fbfe 	bl	17650 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ee54:	4630      	mov	r0, r6
   1ee56:	f7ff fec3 	bl	1ebe0 <net_buf_frags_len>
   1ee5a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1ee5e:	f105 0708 	add.w	r7, r5, #8
   1ee62:	1a24      	subs	r4, r4, r0
   1ee64:	4638      	mov	r0, r7
   1ee66:	f001 fb2d 	bl	204c4 <net_buf_simple_tailroom>
   1ee6a:	4284      	cmp	r4, r0
   1ee6c:	d21a      	bcs.n	1eea4 <att_chan_read+0xce>
   1ee6e:	4630      	mov	r0, r6
   1ee70:	f7ff feb6 	bl	1ebe0 <net_buf_frags_len>
   1ee74:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1ee78:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1ee7a:	68a9      	ldr	r1, [r5, #8]
   1ee7c:	89aa      	ldrh	r2, [r5, #12]
   1ee7e:	f8db 7004 	ldr.w	r7, [fp, #4]
   1ee82:	440a      	add	r2, r1
   1ee84:	9803      	ldr	r0, [sp, #12]
   1ee86:	4659      	mov	r1, fp
   1ee88:	f8cd 9000 	str.w	r9, [sp]
   1ee8c:	b2a3      	uxth	r3, r4
   1ee8e:	47b8      	blx	r7
		if (read < 0) {
   1ee90:	1e07      	subs	r7, r0, #0
   1ee92:	da0c      	bge.n	1eeae <att_chan_read+0xd8>
				return total;
   1ee94:	f1ba 0f00 	cmp.w	sl, #0
   1ee98:	bf18      	it	ne
   1ee9a:	4657      	movne	r7, sl
}
   1ee9c:	4638      	mov	r0, r7
   1ee9e:	b005      	add	sp, #20
   1eea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eea4:	4638      	mov	r0, r7
   1eea6:	f001 fb0d 	bl	204c4 <net_buf_simple_tailroom>
   1eeaa:	4604      	mov	r4, r0
   1eeac:	e7e5      	b.n	1ee7a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1eeae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1eeb0:	b993      	cbnz	r3, 1eed8 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1eeb2:	4639      	mov	r1, r7
   1eeb4:	f105 0008 	add.w	r0, r5, #8
   1eeb8:	f7f8 fc44 	bl	17744 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1eebc:	4630      	mov	r0, r6
   1eebe:	f7ff fe8f 	bl	1ebe0 <net_buf_frags_len>
   1eec2:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1eec6:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1eec8:	4283      	cmp	r3, r0
		total += read;
   1eeca:	44ba      	add	sl, r7
		offset += read;
   1eecc:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1eed0:	d9b5      	bls.n	1ee3e <att_chan_read+0x68>
   1eed2:	42a7      	cmp	r7, r4
   1eed4:	d096      	beq.n	1ee04 <att_chan_read+0x2e>
   1eed6:	e7b2      	b.n	1ee3e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1eed8:	4639      	mov	r1, r7
   1eeda:	4628      	mov	r0, r5
   1eedc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1eede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1eee0:	4798      	blx	r3
   1eee2:	2800      	cmp	r0, #0
   1eee4:	d1e5      	bne.n	1eeb2 <att_chan_read+0xdc>
   1eee6:	e7aa      	b.n	1ee3e <att_chan_read+0x68>
		return 0;
   1eee8:	2700      	movs	r7, #0
   1eeea:	e7d7      	b.n	1ee9c <att_chan_read+0xc6>

0001eeec <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eeec:	2200      	movs	r2, #0
   1eeee:	b510      	push	{r4, lr}
	return list->head;
   1eef0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eef2:	b153      	cbz	r3, 1ef0a <sys_slist_find_and_remove.isra.0+0x1e>
   1eef4:	428b      	cmp	r3, r1
   1eef6:	d10e      	bne.n	1ef16 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1eef8:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1eefa:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1eefc:	b932      	cbnz	r2, 1ef0c <sys_slist_find_and_remove.isra.0+0x20>
   1eefe:	42a1      	cmp	r1, r4
	list->head = node;
   1ef00:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ef02:	d100      	bne.n	1ef06 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1ef04:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1ef06:	2300      	movs	r3, #0
   1ef08:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ef0a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1ef0c:	42a1      	cmp	r1, r4
	parent->next = child;
   1ef0e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1ef10:	bf08      	it	eq
   1ef12:	6042      	streq	r2, [r0, #4]
}
   1ef14:	e7f7      	b.n	1ef06 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1ef16:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ef18:	681b      	ldr	r3, [r3, #0]
   1ef1a:	e7ea      	b.n	1eef2 <sys_slist_find_and_remove.isra.0+0x6>

0001ef1c <att_exec_write_req>:
   1ef1c:	2006      	movs	r0, #6
   1ef1e:	4770      	bx	lr

0001ef20 <chan_req_send>:
{
   1ef20:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ef22:	690e      	ldr	r6, [r1, #16]
{
   1ef24:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ef26:	4630      	mov	r0, r6
   1ef28:	f7ff fe5a 	bl	1ebe0 <net_buf_frags_len>
   1ef2c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1ef30:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ef32:	4283      	cmp	r3, r0
   1ef34:	d317      	bcc.n	1ef66 <chan_req_send+0x46>
	chan->req = req;
   1ef36:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1ef3a:	f106 0008 	add.w	r0, r6, #8
   1ef3e:	f001 fabd 	bl	204bc <net_buf_simple_headroom>
	state->len = buf->len;
   1ef42:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1ef44:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1ef46:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1ef48:	6920      	ldr	r0, [r4, #16]
   1ef4a:	f7f8 fb29 	bl	175a0 <net_buf_ref>
   1ef4e:	2200      	movs	r2, #0
   1ef50:	4601      	mov	r1, r0
   1ef52:	4628      	mov	r0, r5
   1ef54:	f7f3 fa62 	bl	1241c <chan_send>
	if (err) {
   1ef58:	4605      	mov	r5, r0
   1ef5a:	b110      	cbz	r0, 1ef62 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1ef5c:	6920      	ldr	r0, [r4, #16]
   1ef5e:	f7f8 fadb 	bl	17518 <net_buf_unref>
}
   1ef62:	4628      	mov	r0, r5
   1ef64:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1ef66:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1ef6a:	e7fa      	b.n	1ef62 <chan_req_send+0x42>

0001ef6c <bt_att_chan_send>:
{
   1ef6c:	b570      	push	{r4, r5, r6, lr}
   1ef6e:	4604      	mov	r4, r0
   1ef70:	460e      	mov	r6, r1
	if (!cb) {
   1ef72:	4615      	mov	r5, r2
   1ef74:	b132      	cbz	r2, 1ef84 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1ef76:	462a      	mov	r2, r5
   1ef78:	4631      	mov	r1, r6
   1ef7a:	4620      	mov	r0, r4
}
   1ef7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1ef80:	f7f3 ba4c 	b.w	1241c <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1ef84:	2200      	movs	r2, #0
   1ef86:	2300      	movs	r3, #0
   1ef88:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1ef8c:	f7fc fad6 	bl	1b53c <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1ef90:	2800      	cmp	r0, #0
   1ef92:	daf0      	bge.n	1ef76 <bt_att_chan_send+0xa>
}
   1ef94:	f06f 000a 	mvn.w	r0, #10
   1ef98:	bd70      	pop	{r4, r5, r6, pc}

0001ef9a <bt_att_chan_send_rsp>:
{
   1ef9a:	b538      	push	{r3, r4, r5, lr}
   1ef9c:	4604      	mov	r4, r0
   1ef9e:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1efa0:	f7ff ffe4 	bl	1ef6c <bt_att_chan_send>
	if (err) {
   1efa4:	b130      	cbz	r0, 1efb4 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1efa6:	4629      	mov	r1, r5
   1efa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1efac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1efb0:	f7f8 ba84 	b.w	174bc <net_buf_put>
}
   1efb4:	bd38      	pop	{r3, r4, r5, pc}

0001efb6 <process_queue>:
{
   1efb6:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1efb8:	2200      	movs	r2, #0
{
   1efba:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1efbc:	2300      	movs	r3, #0
   1efbe:	4608      	mov	r0, r1
{
   1efc0:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1efc2:	f7f8 fa27 	bl	17414 <net_buf_get>
	if (buf) {
   1efc6:	4605      	mov	r5, r0
   1efc8:	b160      	cbz	r0, 1efe4 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1efca:	4601      	mov	r1, r0
   1efcc:	2200      	movs	r2, #0
   1efce:	4620      	mov	r0, r4
   1efd0:	f7f3 fa24 	bl	1241c <chan_send>
		if (err) {
   1efd4:	4604      	mov	r4, r0
   1efd6:	b118      	cbz	r0, 1efe0 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1efd8:	4629      	mov	r1, r5
   1efda:	4630      	mov	r0, r6
   1efdc:	f002 f94d 	bl	2127a <k_queue_prepend>
}
   1efe0:	4620      	mov	r0, r4
   1efe2:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1efe4:	f06f 0401 	mvn.w	r4, #1
   1efe8:	e7fa      	b.n	1efe0 <process_queue+0x2a>

0001efea <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1efea:	30c8      	adds	r0, #200	; 0xc8
   1efec:	e8d0 3fef 	ldaex	r3, [r0]
   1eff0:	f023 0301 	bic.w	r3, r3, #1
   1eff4:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1eff8:	2a00      	cmp	r2, #0
   1effa:	d1f7      	bne.n	1efec <chan_rsp_sent+0x2>
}
   1effc:	4770      	bx	lr

0001effe <chan_cfm_sent>:
   1effe:	30c8      	adds	r0, #200	; 0xc8
   1f000:	e8d0 3fef 	ldaex	r3, [r0]
   1f004:	f023 0302 	bic.w	r3, r3, #2
   1f008:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1f00c:	2a00      	cmp	r2, #0
   1f00e:	d1f7      	bne.n	1f000 <chan_cfm_sent+0x2>
}
   1f010:	4770      	bx	lr

0001f012 <read_cb>:
{
   1f012:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f016:	4606      	mov	r6, r0
	data->err = 0x00;
   1f018:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1f01a:	f8d2 8000 	ldr.w	r8, [r2]
{
   1f01e:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1f020:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f024:	4631      	mov	r1, r6
	data->err = 0x00;
   1f026:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f028:	2215      	movs	r2, #21
   1f02a:	f000 fc40 	bl	1f8ae <bt_gatt_check_perm>
   1f02e:	4604      	mov	r4, r0
   1f030:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1f032:	b9a0      	cbnz	r0, 1f05e <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f034:	e9cd 0000 	strd	r0, r0, [sp]
   1f038:	88ab      	ldrh	r3, [r5, #4]
   1f03a:	4631      	mov	r1, r6
   1f03c:	4640      	mov	r0, r8
   1f03e:	68aa      	ldr	r2, [r5, #8]
   1f040:	f7ff fec9 	bl	1edd6 <att_chan_read>
	if (ret < 0) {
   1f044:	1e03      	subs	r3, r0, #0
   1f046:	da0c      	bge.n	1f062 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1f048:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1f04c:	bf32      	itee	cc
   1f04e:	230e      	movcc	r3, #14
		return -err;
   1f050:	425b      	negcs	r3, r3
   1f052:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1f054:	732b      	strb	r3, [r5, #12]
}
   1f056:	4620      	mov	r0, r4
   1f058:	b002      	add	sp, #8
   1f05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1f05e:	463c      	mov	r4, r7
   1f060:	e7f9      	b.n	1f056 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1f062:	2401      	movs	r4, #1
   1f064:	e7f7      	b.n	1f056 <read_cb+0x44>

0001f066 <bt_att_sent>:
{
   1f066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1f068:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1f06c:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1f06e:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f072:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1f076:	b10b      	cbz	r3, 1f07c <bt_att_sent+0x16>
		chan->sent(chan);
   1f078:	4638      	mov	r0, r7
   1f07a:	4798      	blx	r3
   1f07c:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1f080:	e8d3 2fef 	ldaex	r2, [r3]
   1f084:	f022 0210 	bic.w	r2, r2, #16
   1f088:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1f08c:	2900      	cmp	r1, #0
   1f08e:	d1f7      	bne.n	1f080 <bt_att_sent+0x1a>
	if (!att) {
   1f090:	b335      	cbz	r5, 1f0e0 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f092:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f096:	b98b      	cbnz	r3, 1f0bc <bt_att_sent+0x56>
   1f098:	686b      	ldr	r3, [r5, #4]
   1f09a:	b17b      	cbz	r3, 1f0bc <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f09c:	1d28      	adds	r0, r5, #4
   1f09e:	f7ff fd95 	bl	1ebcc <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f0a2:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f0a4:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f0a6:	4638      	mov	r0, r7
   1f0a8:	f7ff ff3a 	bl	1ef20 <chan_req_send>
   1f0ac:	2800      	cmp	r0, #0
   1f0ae:	da17      	bge.n	1f0e0 <bt_att_sent+0x7a>
	parent->next = child;
   1f0b0:	686b      	ldr	r3, [r5, #4]
   1f0b2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f0b4:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f0b6:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f0b8:	b903      	cbnz	r3, 1f0bc <bt_att_sent+0x56>
	list->tail = node;
   1f0ba:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f0bc:	4638      	mov	r0, r7
   1f0be:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1f0c2:	f7ff ff78 	bl	1efb6 <process_queue>
	if (!err) {
   1f0c6:	b158      	cbz	r0, 1f0e0 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1f0c8:	4638      	mov	r0, r7
   1f0ca:	f105 010c 	add.w	r1, r5, #12
   1f0ce:	f7ff ff72 	bl	1efb6 <process_queue>
	if (!err) {
   1f0d2:	b128      	cbz	r0, 1f0e0 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1f0d4:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1f0d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f0dc:	f7fc b9f2 	b.w	1b4c4 <z_impl_k_sem_give>
   1f0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f0e2 <att_req_send_process>:
{
   1f0e2:	b570      	push	{r4, r5, r6, lr}
   1f0e4:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1f0e6:	3004      	adds	r0, #4
   1f0e8:	f7ff fd70 	bl	1ebcc <sys_slist_get>
	if (!node) {
   1f0ec:	4606      	mov	r6, r0
   1f0ee:	b1c0      	cbz	r0, 1f122 <att_req_send_process+0x40>
	return list->head;
   1f0f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f0f2:	b153      	cbz	r3, 1f10a <att_req_send_process+0x28>
   1f0f4:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1f0f8:	d007      	beq.n	1f10a <att_req_send_process+0x28>
	return node->next;
   1f0fa:	681c      	ldr	r4, [r3, #0]
   1f0fc:	b10c      	cbz	r4, 1f102 <att_req_send_process+0x20>
   1f0fe:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1f102:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1f106:	b13b      	cbz	r3, 1f118 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f108:	b964      	cbnz	r4, 1f124 <att_req_send_process+0x42>
	parent->next = child;
   1f10a:	686b      	ldr	r3, [r5, #4]
   1f10c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f10e:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f110:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f112:	b933      	cbnz	r3, 1f122 <att_req_send_process+0x40>
	list->tail = node;
   1f114:	60ae      	str	r6, [r5, #8]
}
   1f116:	e004      	b.n	1f122 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f118:	4631      	mov	r1, r6
   1f11a:	f7f3 f9df 	bl	124dc <bt_att_chan_req_send>
   1f11e:	2800      	cmp	r0, #0
   1f120:	dbf2      	blt.n	1f108 <att_req_send_process+0x26>
}
   1f122:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f124:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1f128:	d004      	beq.n	1f134 <att_req_send_process+0x52>
	return node->next;
   1f12a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f12e:	b10b      	cbz	r3, 1f134 <att_req_send_process+0x52>
   1f130:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1f134:	4620      	mov	r0, r4
   1f136:	461c      	mov	r4, r3
   1f138:	e7e3      	b.n	1f102 <att_req_send_process+0x20>

0001f13a <bt_att_status>:
{
   1f13a:	b538      	push	{r3, r4, r5, lr}
   1f13c:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f13e:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f142:	07db      	lsls	r3, r3, #31
   1f144:	d519      	bpl.n	1f17a <bt_att_status+0x40>
	if (!chan->att) {
   1f146:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f14a:	b1b0      	cbz	r0, 1f17a <bt_att_status+0x40>
	if (chan->req) {
   1f14c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1f150:	b99b      	cbnz	r3, 1f17a <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1f152:	3004      	adds	r0, #4
   1f154:	f7ff fd3a 	bl	1ebcc <sys_slist_get>
	if (!node) {
   1f158:	4604      	mov	r4, r0
   1f15a:	b170      	cbz	r0, 1f17a <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f15c:	4601      	mov	r1, r0
   1f15e:	f1a5 0008 	sub.w	r0, r5, #8
   1f162:	f7f3 f9bb 	bl	124dc <bt_att_chan_req_send>
   1f166:	2800      	cmp	r0, #0
   1f168:	da07      	bge.n	1f17a <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1f16a:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1f16e:	685a      	ldr	r2, [r3, #4]
   1f170:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f172:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f174:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f176:	b902      	cbnz	r2, 1f17a <bt_att_status+0x40>
	list->tail = node;
   1f178:	609c      	str	r4, [r3, #8]
}
   1f17a:	bd38      	pop	{r3, r4, r5, pc}

0001f17c <att_write_req>:
{
   1f17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f17e:	460c      	mov	r4, r1
   1f180:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1f182:	f101 0008 	add.w	r0, r1, #8
   1f186:	f001 f991 	bl	204ac <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1f18a:	89a2      	ldrh	r2, [r4, #12]
   1f18c:	4603      	mov	r3, r0
   1f18e:	9201      	str	r2, [sp, #4]
   1f190:	68a2      	ldr	r2, [r4, #8]
   1f192:	2112      	movs	r1, #18
   1f194:	9200      	str	r2, [sp, #0]
   1f196:	4628      	mov	r0, r5
   1f198:	2213      	movs	r2, #19
   1f19a:	f7f3 fb7d 	bl	12898 <att_write_rsp.constprop.0>
}
   1f19e:	b003      	add	sp, #12
   1f1a0:	bd30      	pop	{r4, r5, pc}

0001f1a2 <att_write_cmd>:
{
   1f1a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f1a4:	460c      	mov	r4, r1
   1f1a6:	4605      	mov	r5, r0
   1f1a8:	f101 0008 	add.w	r0, r1, #8
   1f1ac:	f001 f97e 	bl	204ac <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1f1b0:	89a2      	ldrh	r2, [r4, #12]
   1f1b2:	4603      	mov	r3, r0
   1f1b4:	9201      	str	r2, [sp, #4]
   1f1b6:	68a2      	ldr	r2, [r4, #8]
   1f1b8:	4628      	mov	r0, r5
   1f1ba:	9200      	str	r2, [sp, #0]
   1f1bc:	2200      	movs	r2, #0
   1f1be:	4611      	mov	r1, r2
   1f1c0:	f7f3 fb6a 	bl	12898 <att_write_rsp.constprop.0>
}
   1f1c4:	b003      	add	sp, #12
   1f1c6:	bd30      	pop	{r4, r5, pc}

0001f1c8 <att_read_blob_req>:
{
   1f1c8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f1ca:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f1cc:	210c      	movs	r1, #12
   1f1ce:	8813      	ldrh	r3, [r2, #0]
   1f1d0:	8852      	ldrh	r2, [r2, #2]
   1f1d2:	9200      	str	r2, [sp, #0]
   1f1d4:	220d      	movs	r2, #13
   1f1d6:	f7f3 fcbb 	bl	12b50 <att_read_rsp>
}
   1f1da:	b003      	add	sp, #12
   1f1dc:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1e0 <att_read_req>:
{
   1f1e0:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f1e2:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1f1e4:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f1e6:	210a      	movs	r1, #10
   1f1e8:	881b      	ldrh	r3, [r3, #0]
   1f1ea:	9200      	str	r2, [sp, #0]
   1f1ec:	220b      	movs	r2, #11
   1f1ee:	f7f3 fcaf 	bl	12b50 <att_read_rsp>
}
   1f1f2:	b003      	add	sp, #12
   1f1f4:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1f8 <bt_att_init>:
	bt_gatt_init();
   1f1f8:	f7f4 bd08 	b.w	13c0c <bt_gatt_init>

0001f1fc <att_req_destroy>:
{
   1f1fc:	b510      	push	{r4, lr}
   1f1fe:	4604      	mov	r4, r0
	if (req->buf) {
   1f200:	6900      	ldr	r0, [r0, #16]
   1f202:	b108      	cbz	r0, 1f208 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1f204:	f7f8 f988 	bl	17518 <net_buf_unref>
	if (req->destroy) {
   1f208:	68a3      	ldr	r3, [r4, #8]
   1f20a:	b10b      	cbz	r3, 1f210 <att_req_destroy+0x14>
		req->destroy(req);
   1f20c:	4620      	mov	r0, r4
   1f20e:	4798      	blx	r3
	bt_att_req_free(req);
   1f210:	4620      	mov	r0, r4
}
   1f212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1f216:	f7f3 be3d 	b.w	12e94 <bt_att_req_free>

0001f21a <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f21a:	898a      	ldrh	r2, [r1, #12]
   1f21c:	2300      	movs	r3, #0
   1f21e:	6889      	ldr	r1, [r1, #8]
   1f220:	f7f3 be44 	b.w	12eac <att_handle_rsp>

0001f224 <att_handle_find_type_rsp>:
   1f224:	f7ff bff9 	b.w	1f21a <att_handle_find_info_rsp>

0001f228 <att_handle_read_type_rsp>:
   1f228:	f7ff bff7 	b.w	1f21a <att_handle_find_info_rsp>

0001f22c <att_handle_read_rsp>:
   1f22c:	f7ff bff5 	b.w	1f21a <att_handle_find_info_rsp>

0001f230 <att_handle_read_blob_rsp>:
   1f230:	f7ff bff3 	b.w	1f21a <att_handle_find_info_rsp>

0001f234 <att_handle_read_mult_rsp>:
   1f234:	f7ff bff1 	b.w	1f21a <att_handle_find_info_rsp>

0001f238 <att_handle_read_group_rsp>:
   1f238:	f7ff bfef 	b.w	1f21a <att_handle_find_info_rsp>

0001f23c <att_handle_write_rsp>:
   1f23c:	f7ff bfed 	b.w	1f21a <att_handle_find_info_rsp>

0001f240 <att_handle_prepare_write_rsp>:
   1f240:	f7ff bfeb 	b.w	1f21a <att_handle_find_info_rsp>

0001f244 <att_handle_exec_write_rsp>:
   1f244:	f7ff bfe9 	b.w	1f21a <att_handle_find_info_rsp>

0001f248 <att_confirm>:
   1f248:	f7ff bfe7 	b.w	1f21a <att_handle_find_info_rsp>

0001f24c <att_mtu_rsp>:
{
   1f24c:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1f24e:	6889      	ldr	r1, [r1, #8]
{
   1f250:	b410      	push	{r4}
	mtu = sys_le16_to_cpu(rsp->mtu);
   1f252:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1f254:	2b16      	cmp	r3, #22
   1f256:	d805      	bhi.n	1f264 <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1f258:	2200      	movs	r2, #0
   1f25a:	2304      	movs	r3, #4
   1f25c:	4611      	mov	r1, r2
}
   1f25e:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f260:	f7f3 be24 	b.w	12eac <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1f264:	2b41      	cmp	r3, #65	; 0x41
   1f266:	bf28      	it	cs
   1f268:	2341      	movcs	r3, #65	; 0x41
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f26a:	8992      	ldrh	r2, [r2, #12]
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1f26c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1f270:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1f274:	2300      	movs	r3, #0
   1f276:	e7f2      	b.n	1f25e <att_mtu_rsp+0x12>

0001f278 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   1f278:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   1f27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f280:	4604      	mov	r4, r0
   1f282:	460d      	mov	r5, r1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1f284:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   1f288:	b323      	cbz	r3, 1f2d4 <bt_att_encrypt_change+0x5c>
	if (hci_status) {
   1f28a:	b161      	cbz	r1, 1f2a6 <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   1f28c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1f290:	b303      	cbz	r3, 1f2d4 <bt_att_encrypt_change+0x5c>
   1f292:	7d1b      	ldrb	r3, [r3, #20]
   1f294:	b1f3      	cbz	r3, 1f2d4 <bt_att_encrypt_change+0x5c>
			att_handle_rsp(att_chan, NULL, 0,
   1f296:	2200      	movs	r2, #0
   1f298:	4630      	mov	r0, r6
}
   1f29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
   1f29e:	2305      	movs	r3, #5
   1f2a0:	4611      	mov	r1, r2
   1f2a2:	f7f3 be03 	b.w	12eac <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   1f2a6:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1f2a8:	4638      	mov	r0, r7
   1f2aa:	f7f5 feb5 	bl	15018 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1f2ae:	7a7b      	ldrb	r3, [r7, #9]
   1f2b0:	2b01      	cmp	r3, #1
   1f2b2:	d00f      	beq.n	1f2d4 <bt_att_encrypt_change+0x5c>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1f2b4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f2b8:	b163      	cbz	r3, 1f2d4 <bt_att_encrypt_change+0x5c>
   1f2ba:	7d1a      	ldrb	r2, [r3, #20]
   1f2bc:	b152      	cbz	r2, 1f2d4 <bt_att_encrypt_change+0x5c>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   1f2be:	6919      	ldr	r1, [r3, #16]
   1f2c0:	6888      	ldr	r0, [r1, #8]
   1f2c2:	f7f3 f845 	bl	12350 <chan_cb.isra.0>
   1f2c6:	4602      	mov	r2, r0
   1f2c8:	4630      	mov	r0, r6
   1f2ca:	f7ff fe66 	bl	1ef9a <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
   1f2ce:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f2d2:	611d      	str	r5, [r3, #16]
}
   1f2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f2d8 <att_chan_detach>:
{
   1f2d8:	b538      	push	{r3, r4, r5, lr}
   1f2da:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1f2dc:	6800      	ldr	r0, [r0, #0]
   1f2de:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1f2e2:	3028      	adds	r0, #40	; 0x28
   1f2e4:	f7ff fe02 	bl	1eeec <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1f2e8:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1f2ec:	4628      	mov	r0, r5
   1f2ee:	f7fc f8e9 	bl	1b4c4 <z_impl_k_sem_give>
   1f2f2:	4628      	mov	r0, r5
   1f2f4:	f7fc f8e6 	bl	1b4c4 <z_impl_k_sem_give>
   1f2f8:	4628      	mov	r0, r5
   1f2fa:	f7fc f8e3 	bl	1b4c4 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1f2fe:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1f302:	2200      	movs	r2, #0
   1f304:	2300      	movs	r3, #0
   1f306:	4628      	mov	r0, r5
   1f308:	f7f8 f884 	bl	17414 <net_buf_get>
   1f30c:	4602      	mov	r2, r0
   1f30e:	b950      	cbnz	r0, 1f326 <att_chan_detach+0x4e>
	if (chan->req) {
   1f310:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1f314:	b123      	cbz	r3, 1f320 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1f316:	4601      	mov	r1, r0
   1f318:	230e      	movs	r3, #14
   1f31a:	4620      	mov	r0, r4
   1f31c:	f7f3 fdc6 	bl	12eac <att_handle_rsp>
	chan->att = NULL;
   1f320:	2300      	movs	r3, #0
   1f322:	6023      	str	r3, [r4, #0]
}
   1f324:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1f326:	f7f8 f8f7 	bl	17518 <net_buf_unref>
   1f32a:	e7ea      	b.n	1f302 <att_chan_detach+0x2a>

0001f32c <bt_att_disconnected>:
{
   1f32c:	b538      	push	{r3, r4, r5, lr}
   1f32e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1f330:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1f334:	f7ff ffd0 	bl	1f2d8 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1f338:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f33a:	b93b      	cbnz	r3, 1f34c <bt_att_disconnected+0x20>
	att_reset(att);
   1f33c:	4628      	mov	r0, r5
   1f33e:	f7f3 fe35 	bl	12fac <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1f342:	6820      	ldr	r0, [r4, #0]
}
   1f344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1f348:	f7f5 bed8 	b.w	150fc <bt_gatt_disconnected>
}
   1f34c:	bd38      	pop	{r3, r4, r5, pc}

0001f34e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1f34e:	6010      	str	r0, [r2, #0]
}
   1f350:	2000      	movs	r0, #0
   1f352:	4770      	bx	lr

0001f354 <gatt_ccc_changed>:
{
   1f354:	460b      	mov	r3, r1
   1f356:	8909      	ldrh	r1, [r1, #8]
   1f358:	8a5a      	ldrh	r2, [r3, #18]
   1f35a:	428a      	cmp	r2, r1
   1f35c:	bf38      	it	cc
   1f35e:	460a      	movcc	r2, r1
		if (ccc->cfg[i].value > value) {
   1f360:	8b99      	ldrh	r1, [r3, #28]
   1f362:	4291      	cmp	r1, r2
   1f364:	bf38      	it	cc
   1f366:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1f368:	8bda      	ldrh	r2, [r3, #30]
   1f36a:	428a      	cmp	r2, r1
   1f36c:	d003      	beq.n	1f376 <gatt_ccc_changed+0x22>
		ccc->value = value;
   1f36e:	83d9      	strh	r1, [r3, #30]
		if (ccc->cfg_changed) {
   1f370:	6a1b      	ldr	r3, [r3, #32]
   1f372:	b103      	cbz	r3, 1f376 <gatt_ccc_changed+0x22>
			ccc->cfg_changed(attr, value);
   1f374:	4718      	bx	r3
}
   1f376:	4770      	bx	lr

0001f378 <gatt_indicate_rsp>:
{
   1f378:	b510      	push	{r4, lr}
   1f37a:	9c02      	ldr	r4, [sp, #8]
   1f37c:	460a      	mov	r2, r1
	params->_ref--;
   1f37e:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1f380:	4621      	mov	r1, r4
	params->_ref--;
   1f382:	3b01      	subs	r3, #1
   1f384:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1f386:	68a3      	ldr	r3, [r4, #8]
   1f388:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1f38a:	68e3      	ldr	r3, [r4, #12]
   1f38c:	b12b      	cbz	r3, 1f39a <gatt_indicate_rsp+0x22>
   1f38e:	7da2      	ldrb	r2, [r4, #22]
   1f390:	b91a      	cbnz	r2, 1f39a <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1f392:	4620      	mov	r0, r4
}
   1f394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f398:	4718      	bx	r3
}
   1f39a:	bd10      	pop	{r4, pc}

0001f39c <match_uuid>:
	data->attr = attr;
   1f39c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f39e:	8091      	strh	r1, [r2, #4]
}
   1f3a0:	2000      	movs	r0, #0
   1f3a2:	4770      	bx	lr

0001f3a4 <ccc_set_cb>:
}
   1f3a4:	2000      	movs	r0, #0
   1f3a6:	4770      	bx	lr

0001f3a8 <gen_hash_m>:
{
   1f3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f3aa:	6807      	ldr	r7, [r0, #0]
{
   1f3ac:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f3ae:	783d      	ldrb	r5, [r7, #0]
{
   1f3b0:	4614      	mov	r4, r2
   1f3b2:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f3b4:	b10d      	cbz	r5, 1f3ba <gen_hash_m+0x12>
	switch (u16->val) {
   1f3b6:	2501      	movs	r5, #1
   1f3b8:	e014      	b.n	1f3e4 <gen_hash_m+0x3c>
   1f3ba:	887b      	ldrh	r3, [r7, #2]
   1f3bc:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f3c0:	d004      	beq.n	1f3cc <gen_hash_m+0x24>
   1f3c2:	d812      	bhi.n	1f3ea <gen_hash_m+0x42>
   1f3c4:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f3c8:	2b03      	cmp	r3, #3
   1f3ca:	d8f4      	bhi.n	1f3b6 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f3cc:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f3d0:	2202      	movs	r2, #2
   1f3d2:	4620      	mov	r0, r4
   1f3d4:	f10d 010e 	add.w	r1, sp, #14
   1f3d8:	f7fe fb20 	bl	1da1c <tc_cmac_update>
   1f3dc:	b9e0      	cbnz	r0, 1f418 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1f3de:	f06f 0315 	mvn.w	r3, #21
   1f3e2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1f3e4:	4628      	mov	r0, r5
   1f3e6:	b009      	add	sp, #36	; 0x24
   1f3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f3ea:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f3ee:	33ff      	adds	r3, #255	; 0xff
   1f3f0:	b29b      	uxth	r3, r3
   1f3f2:	2b04      	cmp	r3, #4
   1f3f4:	d8df      	bhi.n	1f3b6 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f3f6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f3fa:	2202      	movs	r2, #2
   1f3fc:	4620      	mov	r0, r4
   1f3fe:	f10d 010e 	add.w	r1, sp, #14
   1f402:	f7fe fb0b 	bl	1da1c <tc_cmac_update>
   1f406:	2800      	cmp	r0, #0
   1f408:	d0e9      	beq.n	1f3de <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1f40a:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f40c:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1f40e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f412:	f10d 010e 	add.w	r1, sp, #14
   1f416:	e017      	b.n	1f448 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1f418:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f41a:	2202      	movs	r2, #2
   1f41c:	4620      	mov	r0, r4
   1f41e:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1f422:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f426:	f7fe faf9 	bl	1da1c <tc_cmac_update>
   1f42a:	2800      	cmp	r0, #0
   1f42c:	d0d7      	beq.n	1f3de <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f42e:	2000      	movs	r0, #0
   1f430:	2310      	movs	r3, #16
   1f432:	4631      	mov	r1, r6
   1f434:	eb0d 0203 	add.w	r2, sp, r3
   1f438:	6877      	ldr	r7, [r6, #4]
   1f43a:	9000      	str	r0, [sp, #0]
   1f43c:	47b8      	blx	r7
		if (len < 0) {
   1f43e:	1e02      	subs	r2, r0, #0
   1f440:	da01      	bge.n	1f446 <gen_hash_m+0x9e>
			state->err = len;
   1f442:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f444:	e7ce      	b.n	1f3e4 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1f446:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f448:	4620      	mov	r0, r4
   1f44a:	f7fe fae7 	bl	1da1c <tc_cmac_update>
   1f44e:	2800      	cmp	r0, #0
   1f450:	d1b1      	bne.n	1f3b6 <gen_hash_m+0xe>
   1f452:	e7c4      	b.n	1f3de <gen_hash_m+0x36>

0001f454 <bt_addr_le_cmp>:
   1f454:	2207      	movs	r2, #7
   1f456:	f7fe be9c 	b.w	1e192 <memcmp>

0001f45a <find_ccc_cfg>:
{
   1f45a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f45c:	4606      	mov	r6, r0
   1f45e:	1c4c      	adds	r4, r1, #1
   1f460:	f101 051f 	add.w	r5, r1, #31
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1f464:	1e67      	subs	r7, r4, #1
		if (conn) {
   1f466:	b14e      	cbz	r6, 1f47c <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f468:	4622      	mov	r2, r4
   1f46a:	4630      	mov	r0, r6
   1f46c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1f470:	f7ff fa6d 	bl	1e94e <bt_conn_is_peer_addr_le>
   1f474:	b158      	cbz	r0, 1f48e <find_ccc_cfg+0x34>
}
   1f476:	4638      	mov	r0, r7
   1f478:	b003      	add	sp, #12
   1f47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f47c:	4669      	mov	r1, sp
   1f47e:	4620      	mov	r0, r4
   1f480:	9600      	str	r6, [sp, #0]
   1f482:	f8cd 6003 	str.w	r6, [sp, #3]
   1f486:	f7ff ffe5 	bl	1f454 <bt_addr_le_cmp>
   1f48a:	2800      	cmp	r0, #0
   1f48c:	d0f3      	beq.n	1f476 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f48e:	340a      	adds	r4, #10
   1f490:	42ac      	cmp	r4, r5
   1f492:	d1e7      	bne.n	1f464 <find_ccc_cfg+0xa>
	return NULL;
   1f494:	2700      	movs	r7, #0
   1f496:	e7ee      	b.n	1f476 <find_ccc_cfg+0x1c>

0001f498 <ccc_find_cfg>:
{
   1f498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f49c:	4604      	mov	r4, r0
   1f49e:	460f      	mov	r7, r1
   1f4a0:	4690      	mov	r8, r2
   1f4a2:	2500      	movs	r5, #0
   1f4a4:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1f4a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1f4aa:	4543      	cmp	r3, r8
   1f4ac:	d107      	bne.n	1f4be <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1f4ae:	4639      	mov	r1, r7
   1f4b0:	4630      	mov	r0, r6
   1f4b2:	f7ff ffcf 	bl	1f454 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1f4b6:	b910      	cbnz	r0, 1f4be <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1f4b8:	1960      	adds	r0, r4, r5
}
   1f4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f4be:	350a      	adds	r5, #10
   1f4c0:	2d1e      	cmp	r5, #30
   1f4c2:	f106 060a 	add.w	r6, r6, #10
   1f4c6:	d1ee      	bne.n	1f4a6 <ccc_find_cfg+0xe>
	return NULL;
   1f4c8:	2000      	movs	r0, #0
   1f4ca:	e7f6      	b.n	1f4ba <ccc_find_cfg+0x22>

0001f4cc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1f4cc:	2207      	movs	r2, #7
   1f4ce:	f7fe be71 	b.w	1e1b4 <memcpy>

0001f4d2 <clear_ccc_cfg>:
{
   1f4d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f4d4:	2500      	movs	r5, #0
{
   1f4d6:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f4d8:	4669      	mov	r1, sp
   1f4da:	3001      	adds	r0, #1
   1f4dc:	9500      	str	r5, [sp, #0]
   1f4de:	f8cd 5003 	str.w	r5, [sp, #3]
   1f4e2:	f7ff fff3 	bl	1f4cc <bt_addr_le_copy>
	cfg->id = 0U;
   1f4e6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f4e8:	8125      	strh	r5, [r4, #8]
}
   1f4ea:	b003      	add	sp, #12
   1f4ec:	bd30      	pop	{r4, r5, pc}

0001f4ee <atomic_or>:
{
   1f4ee:	4603      	mov	r3, r0
}
   1f4f0:	e8d3 0fef 	ldaex	r0, [r3]
   1f4f4:	ea40 0201 	orr.w	r2, r0, r1
   1f4f8:	e8c3 2fec 	stlex	ip, r2, [r3]
   1f4fc:	f1bc 0f00 	cmp.w	ip, #0
   1f500:	d1f6      	bne.n	1f4f0 <atomic_or+0x2>
   1f502:	4770      	bx	lr

0001f504 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f504:	e8d0 0faf 	lda	r0, [r0]
}
   1f508:	4770      	bx	lr

0001f50a <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1f50a:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1f50c:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1f50e:	3001      	adds	r0, #1
   1f510:	4669      	mov	r1, sp
   1f512:	9300      	str	r3, [sp, #0]
   1f514:	f8cd 3003 	str.w	r3, [sp, #3]
   1f518:	f7ff ffd8 	bl	1f4cc <bt_addr_le_copy>
}
   1f51c:	b003      	add	sp, #12
   1f51e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f522 <clear_cf_cfg>:
{
   1f522:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f524:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f526:	2500      	movs	r5, #0
   1f528:	4669      	mov	r1, sp
   1f52a:	3001      	adds	r0, #1
   1f52c:	9500      	str	r5, [sp, #0]
   1f52e:	f8cd 5003 	str.w	r5, [sp, #3]
   1f532:	f7ff ffcb 	bl	1f4cc <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1f536:	f104 0008 	add.w	r0, r4, #8
   1f53a:	2201      	movs	r2, #1
   1f53c:	4629      	mov	r1, r5
   1f53e:	f7fe fe64 	bl	1e20a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f542:	340c      	adds	r4, #12
   1f544:	e8d4 3fef 	ldaex	r3, [r4]
   1f548:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1f54c:	2a00      	cmp	r2, #0
   1f54e:	d1f9      	bne.n	1f544 <clear_cf_cfg+0x22>
}
   1f550:	b003      	add	sp, #12
   1f552:	bd30      	pop	{r4, r5, pc}

0001f554 <gatt_sub_remove>:
{
   1f554:	b570      	push	{r4, r5, r6, lr}
   1f556:	460c      	mov	r4, r1
	if (params) {
   1f558:	4619      	mov	r1, r3
   1f55a:	b16b      	cbz	r3, 1f578 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1f55c:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1f560:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1f562:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1f564:	b97a      	cbnz	r2, 1f586 <gatt_sub_remove+0x32>
   1f566:	42ae      	cmp	r6, r5
	list->head = node;
   1f568:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1f56a:	d100      	bne.n	1f56e <gatt_sub_remove+0x1a>
	list->tail = node;
   1f56c:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1f56e:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1f570:	680d      	ldr	r5, [r1, #0]
   1f572:	461a      	mov	r2, r3
   1f574:	614b      	str	r3, [r1, #20]
   1f576:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1f578:	68a3      	ldr	r3, [r4, #8]
   1f57a:	b94b      	cbnz	r3, 1f590 <gatt_sub_remove+0x3c>
   1f57c:	4620      	mov	r0, r4
}
   1f57e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f582:	f7ff bfc2 	b.w	1f50a <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1f586:	42ae      	cmp	r6, r5
	parent->next = child;
   1f588:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f58a:	bf08      	it	eq
   1f58c:	60e2      	streq	r2, [r4, #12]
}
   1f58e:	e7ee      	b.n	1f56e <gatt_sub_remove+0x1a>
   1f590:	bd70      	pop	{r4, r5, r6, pc}

0001f592 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f592:	2a02      	cmp	r2, #2
{
   1f594:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f596:	d108      	bne.n	1f5aa <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f598:	2300      	movs	r3, #0
   1f59a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f59e:	461a      	mov	r2, r3
   1f5a0:	7a00      	ldrb	r0, [r0, #8]
   1f5a2:	f7f3 ff9b 	bl	134dc <sc_save>
}
   1f5a6:	2002      	movs	r0, #2
   1f5a8:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f5aa:	f7f4 fa4b 	bl	13a44 <sc_clear>
   1f5ae:	e7fa      	b.n	1f5a6 <sc_ccc_cfg_write+0x14>

0001f5b0 <gatt_write_ccc_rsp>:
{
   1f5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f5b4:	4606      	mov	r6, r0
   1f5b6:	460d      	mov	r5, r1
   1f5b8:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f5ba:	f104 0310 	add.w	r3, r4, #16
   1f5be:	e8d3 2fef 	ldaex	r2, [r3]
   1f5c2:	f022 0204 	bic.w	r2, r2, #4
   1f5c6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1f5ca:	2900      	cmp	r1, #0
   1f5cc:	d1f7      	bne.n	1f5be <gatt_write_ccc_rsp+0xe>
	if (err) {
   1f5ce:	b1dd      	cbz	r5, 1f608 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1f5d0:	f7f3 fe6e 	bl	132b0 <gatt_sub_find>
		if (!sub) {
   1f5d4:	4601      	mov	r1, r0
   1f5d6:	b300      	cbz	r0, 1f61a <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1f5d8:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f5da:	b143      	cbz	r3, 1f5ee <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1f5dc:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1f5de:	f104 0014 	add.w	r0, r4, #20
   1f5e2:	4283      	cmp	r3, r0
   1f5e4:	d10b      	bne.n	1f5fe <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1f5e6:	4623      	mov	r3, r4
   1f5e8:	4630      	mov	r0, r6
   1f5ea:	f7ff ffb3 	bl	1f554 <gatt_sub_remove>
	if (params->write) {
   1f5ee:	6863      	ldr	r3, [r4, #4]
   1f5f0:	b19b      	cbz	r3, 1f61a <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1f5f2:	4629      	mov	r1, r5
   1f5f4:	4630      	mov	r0, r6
}
   1f5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1f5fa:	2200      	movs	r2, #0
   1f5fc:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f5fe:	2a00      	cmp	r2, #0
   1f600:	d0f5      	beq.n	1f5ee <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1f602:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f604:	6812      	ldr	r2, [r2, #0]
   1f606:	e7ec      	b.n	1f5e2 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1f608:	89a3      	ldrh	r3, [r4, #12]
   1f60a:	2b00      	cmp	r3, #0
   1f60c:	d1ef      	bne.n	1f5ee <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1f60e:	462b      	mov	r3, r5
   1f610:	462a      	mov	r2, r5
   1f612:	4621      	mov	r1, r4
   1f614:	6827      	ldr	r7, [r4, #0]
   1f616:	47b8      	blx	r7
   1f618:	e7e9      	b.n	1f5ee <gatt_write_ccc_rsp+0x3e>
}
   1f61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f61e <read_ppcp>:
{
   1f61e:	b513      	push	{r0, r1, r4, lr}
   1f620:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1f622:	2218      	movs	r2, #24
   1f624:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1f628:	2228      	movs	r2, #40	; 0x28
   1f62a:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1f62e:	2200      	movs	r2, #0
   1f630:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1f634:	222a      	movs	r2, #42	; 0x2a
{
   1f636:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1f63a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f63e:	2908      	cmp	r1, #8
   1f640:	d80b      	bhi.n	1f65a <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1f642:	f1c1 0408 	rsb	r4, r1, #8
   1f646:	429c      	cmp	r4, r3
   1f648:	bfa8      	it	ge
   1f64a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f64c:	4469      	add	r1, sp
   1f64e:	4622      	mov	r2, r4
   1f650:	f7fe fdb0 	bl	1e1b4 <memcpy>
}
   1f654:	4620      	mov	r0, r4
   1f656:	b002      	add	sp, #8
   1f658:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f65a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1f65e:	e7f9      	b.n	1f654 <read_ppcp+0x36>

0001f660 <read_appearance>:
{
   1f660:	b513      	push	{r0, r1, r4, lr}
   1f662:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f664:	2200      	movs	r2, #0
{
   1f666:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f66a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f66e:	2902      	cmp	r1, #2
   1f670:	d80d      	bhi.n	1f68e <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1f672:	f1c1 0402 	rsb	r4, r1, #2
   1f676:	429c      	cmp	r4, r3
   1f678:	bfa8      	it	ge
   1f67a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f67c:	f10d 0306 	add.w	r3, sp, #6
   1f680:	4622      	mov	r2, r4
   1f682:	4419      	add	r1, r3
   1f684:	f7fe fd96 	bl	1e1b4 <memcpy>
}
   1f688:	4620      	mov	r0, r4
   1f68a:	b002      	add	sp, #8
   1f68c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f68e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f692:	e7f9      	b.n	1f688 <read_appearance+0x28>

0001f694 <read_name>:
{
   1f694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f698:	4698      	mov	r8, r3
   1f69a:	4615      	mov	r5, r2
   1f69c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1f6a0:	f7f0 fe64 	bl	1036c <bt_get_name>
   1f6a4:	4607      	mov	r7, r0
				 strlen(name));
   1f6a6:	f7fe fd47 	bl	1e138 <strlen>
	if (offset > value_len) {
   1f6aa:	b283      	uxth	r3, r0
   1f6ac:	42b3      	cmp	r3, r6
   1f6ae:	d30c      	bcc.n	1f6ca <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f6b0:	1b9c      	subs	r4, r3, r6
   1f6b2:	4544      	cmp	r4, r8
   1f6b4:	bfa8      	it	ge
   1f6b6:	4644      	movge	r4, r8
   1f6b8:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f6ba:	4622      	mov	r2, r4
   1f6bc:	4628      	mov	r0, r5
   1f6be:	19b9      	adds	r1, r7, r6
   1f6c0:	f7fe fd78 	bl	1e1b4 <memcpy>
}
   1f6c4:	4620      	mov	r0, r4
   1f6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f6ca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f6ce:	e7f9      	b.n	1f6c4 <read_name+0x30>

0001f6d0 <cf_read>:
{
   1f6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f6d2:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1f6d4:	2300      	movs	r3, #0
{
   1f6d6:	4615      	mov	r5, r2
   1f6d8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1f6dc:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1f6e0:	f7f3 fda8 	bl	13234 <find_cf_cfg>
	if (cfg) {
   1f6e4:	b128      	cbz	r0, 1f6f2 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f6e6:	f100 0108 	add.w	r1, r0, #8
   1f6ea:	2201      	movs	r2, #1
   1f6ec:	a801      	add	r0, sp, #4
   1f6ee:	f7fe fd61 	bl	1e1b4 <memcpy>
	if (offset > value_len) {
   1f6f2:	2e01      	cmp	r6, #1
   1f6f4:	d80d      	bhi.n	1f712 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f6f6:	f1c6 0401 	rsb	r4, r6, #1
   1f6fa:	42bc      	cmp	r4, r7
   1f6fc:	bfa8      	it	ge
   1f6fe:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f700:	ab01      	add	r3, sp, #4
   1f702:	4622      	mov	r2, r4
   1f704:	4628      	mov	r0, r5
   1f706:	1999      	adds	r1, r3, r6
   1f708:	f7fe fd54 	bl	1e1b4 <memcpy>
}
   1f70c:	4620      	mov	r0, r4
   1f70e:	b003      	add	sp, #12
   1f710:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f712:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f716:	e7f9      	b.n	1f70c <cf_read+0x3c>

0001f718 <bt_gatt_attr_read_service>:
{
   1f718:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f71a:	68c9      	ldr	r1, [r1, #12]
{
   1f71c:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1f71e:	780b      	ldrb	r3, [r1, #0]
{
   1f720:	4610      	mov	r0, r2
   1f722:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f726:	b993      	cbnz	r3, 1f74e <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f728:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1f72a:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f72c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1f730:	d819      	bhi.n	1f766 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f732:	f1c5 0202 	rsb	r2, r5, #2
   1f736:	4294      	cmp	r4, r2
   1f738:	bfa8      	it	ge
   1f73a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f73c:	4622      	mov	r2, r4
   1f73e:	f10d 0306 	add.w	r3, sp, #6
   1f742:	1959      	adds	r1, r3, r5
   1f744:	f7fe fd36 	bl	1e1b4 <memcpy>
}
   1f748:	4620      	mov	r0, r4
   1f74a:	b003      	add	sp, #12
   1f74c:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1f74e:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1f750:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1f754:	d807      	bhi.n	1f766 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f756:	f1c5 0210 	rsb	r2, r5, #16
   1f75a:	4294      	cmp	r4, r2
   1f75c:	bfa8      	it	ge
   1f75e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f760:	4429      	add	r1, r5
   1f762:	4622      	mov	r2, r4
   1f764:	e7ee      	b.n	1f744 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f766:	f06f 0406 	mvn.w	r4, #6
   1f76a:	e7ed      	b.n	1f748 <bt_gatt_attr_read_service+0x30>

0001f76c <bt_gatt_attr_read_ccc>:
{
   1f76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f76e:	68c9      	ldr	r1, [r1, #12]
{
   1f770:	4615      	mov	r5, r2
   1f772:	461f      	mov	r7, r3
   1f774:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1f778:	f7ff fe6f 	bl	1f45a <find_ccc_cfg>
	if (cfg) {
   1f77c:	b100      	cbz	r0, 1f780 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1f77e:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1f780:	2e02      	cmp	r6, #2
   1f782:	f8ad 0006 	strh.w	r0, [sp, #6]
   1f786:	d80e      	bhi.n	1f7a6 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1f788:	f1c6 0402 	rsb	r4, r6, #2
   1f78c:	42bc      	cmp	r4, r7
   1f78e:	bfa8      	it	ge
   1f790:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f792:	f10d 0306 	add.w	r3, sp, #6
   1f796:	4622      	mov	r2, r4
   1f798:	4628      	mov	r0, r5
   1f79a:	1999      	adds	r1, r3, r6
   1f79c:	f7fe fd0a 	bl	1e1b4 <memcpy>
}
   1f7a0:	4620      	mov	r0, r4
   1f7a2:	b003      	add	sp, #12
   1f7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f7a6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f7aa:	e7f9      	b.n	1f7a0 <bt_gatt_attr_read_ccc+0x34>

0001f7ac <sc_restore_rsp>:
{
   1f7ac:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f7ae:	f7f3 fd41 	bl	13234 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f7b2:	b140      	cbz	r0, 1f7c6 <sc_restore_rsp+0x1a>
   1f7b4:	7a03      	ldrb	r3, [r0, #8]
   1f7b6:	07db      	lsls	r3, r3, #31
   1f7b8:	d505      	bpl.n	1f7c6 <sc_restore_rsp+0x1a>
}
   1f7ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1f7be:	2101      	movs	r1, #1
   1f7c0:	300c      	adds	r0, #12
   1f7c2:	f7ff be94 	b.w	1f4ee <atomic_or>
   1f7c6:	bd08      	pop	{r3, pc}

0001f7c8 <bt_gatt_attr_read>:
{
   1f7c8:	b538      	push	{r3, r4, r5, lr}
   1f7ca:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f7ce:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1f7d2:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f7d4:	42a9      	cmp	r1, r5
   1f7d6:	d80b      	bhi.n	1f7f0 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f7d8:	1a6d      	subs	r5, r5, r1
   1f7da:	429d      	cmp	r5, r3
   1f7dc:	bfa8      	it	ge
   1f7de:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f7e0:	9b05      	ldr	r3, [sp, #20]
   1f7e2:	b2ad      	uxth	r5, r5
   1f7e4:	462a      	mov	r2, r5
   1f7e6:	4419      	add	r1, r3
   1f7e8:	f7fe fce4 	bl	1e1b4 <memcpy>
}
   1f7ec:	4628      	mov	r0, r5
   1f7ee:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f7f0:	f06f 0506 	mvn.w	r5, #6
   1f7f4:	e7fa      	b.n	1f7ec <bt_gatt_attr_read+0x24>

0001f7f6 <bt_gatt_attr_value_handle>:
{
   1f7f6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f7f8:	4604      	mov	r4, r0
   1f7fa:	b910      	cbnz	r0, 1f802 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f7fc:	2000      	movs	r0, #0
}
   1f7fe:	b002      	add	sp, #8
   1f800:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f802:	2300      	movs	r3, #0
   1f804:	f88d 3004 	strb.w	r3, [sp, #4]
   1f808:	f642 0303 	movw	r3, #10243	; 0x2803
   1f80c:	6800      	ldr	r0, [r0, #0]
   1f80e:	a901      	add	r1, sp, #4
   1f810:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f814:	f7fe fd69 	bl	1e2ea <bt_uuid_cmp>
   1f818:	2800      	cmp	r0, #0
   1f81a:	d1ef      	bne.n	1f7fc <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f81c:	68e3      	ldr	r3, [r4, #12]
   1f81e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f820:	2800      	cmp	r0, #0
   1f822:	d1ec      	bne.n	1f7fe <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f824:	4620      	mov	r0, r4
   1f826:	f7f4 fa59 	bl	13cdc <bt_gatt_attr_get_handle>
   1f82a:	3001      	adds	r0, #1
   1f82c:	b280      	uxth	r0, r0
	return handle;
   1f82e:	e7e6      	b.n	1f7fe <bt_gatt_attr_value_handle+0x8>

0001f830 <bt_gatt_attr_read_chrc>:
{
   1f830:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f832:	68cf      	ldr	r7, [r1, #12]
{
   1f834:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1f836:	79bb      	ldrb	r3, [r7, #6]
{
   1f838:	b087      	sub	sp, #28
   1f83a:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1f83c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f840:	4615      	mov	r5, r2
   1f842:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f846:	f7ff ffd6 	bl	1f7f6 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f84a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f84c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f850:	780b      	ldrb	r3, [r1, #0]
   1f852:	b99b      	cbnz	r3, 1f87c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f854:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1f856:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f858:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1f85c:	42b1      	cmp	r1, r6
   1f85e:	d315      	bcc.n	1f88c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1f860:	1b89      	subs	r1, r1, r6
   1f862:	42a1      	cmp	r1, r4
   1f864:	bfa8      	it	ge
   1f866:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f868:	ab01      	add	r3, sp, #4
   1f86a:	b28c      	uxth	r4, r1
   1f86c:	4622      	mov	r2, r4
   1f86e:	4628      	mov	r0, r5
   1f870:	1999      	adds	r1, r3, r6
   1f872:	f7fe fc9f 	bl	1e1b4 <memcpy>
}
   1f876:	4620      	mov	r0, r4
   1f878:	b007      	add	sp, #28
   1f87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f87c:	3101      	adds	r1, #1
   1f87e:	2210      	movs	r2, #16
   1f880:	f10d 0007 	add.w	r0, sp, #7
   1f884:	f7fe fc96 	bl	1e1b4 <memcpy>
		value_len += 16U;
   1f888:	2113      	movs	r1, #19
   1f88a:	e7e7      	b.n	1f85c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f88c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f890:	e7f1      	b.n	1f876 <bt_gatt_attr_read_chrc+0x46>

0001f892 <bt_gatt_foreach_attr>:
{
   1f892:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f894:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f898:	2300      	movs	r3, #0
   1f89a:	461a      	mov	r2, r3
   1f89c:	9300      	str	r3, [sp, #0]
   1f89e:	f7f4 fa61 	bl	13d64 <bt_gatt_foreach_attr_type>
}
   1f8a2:	b005      	add	sp, #20
   1f8a4:	f85d fb04 	ldr.w	pc, [sp], #4

0001f8a8 <db_hash_process>:
	db_hash_gen(true);
   1f8a8:	2001      	movs	r0, #1
   1f8aa:	f7f4 bac7 	b.w	13e3c <db_hash_gen>

0001f8ae <bt_gatt_check_perm>:
{
   1f8ae:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1f8b0:	07d4      	lsls	r4, r2, #31
{
   1f8b2:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f8b4:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1f8b6:	d504      	bpl.n	1f8c2 <bt_gatt_check_perm+0x14>
   1f8b8:	f010 0f15 	tst.w	r0, #21
   1f8bc:	d01e      	beq.n	1f8fc <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f8be:	684b      	ldr	r3, [r1, #4]
   1f8c0:	b1e3      	cbz	r3, 1f8fc <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1f8c2:	0793      	lsls	r3, r2, #30
   1f8c4:	d504      	bpl.n	1f8d0 <bt_gatt_check_perm+0x22>
   1f8c6:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1f8ca:	d019      	beq.n	1f900 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1f8cc:	688b      	ldr	r3, [r1, #8]
   1f8ce:	b1bb      	cbz	r3, 1f900 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1f8d0:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1f8d4:	f014 0f30 	tst.w	r4, #48	; 0x30
   1f8d8:	d103      	bne.n	1f8e2 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1f8da:	f014 000c 	ands.w	r0, r4, #12
   1f8de:	d107      	bne.n	1f8f0 <bt_gatt_check_perm+0x42>
}
   1f8e0:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1f8e2:	4628      	mov	r0, r5
   1f8e4:	f7ff f828 	bl	1e938 <bt_conn_get_security>
   1f8e8:	2802      	cmp	r0, #2
   1f8ea:	d8f6      	bhi.n	1f8da <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1f8ec:	2005      	movs	r0, #5
   1f8ee:	e7f7      	b.n	1f8e0 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1f8f0:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1f8f2:	2b00      	cmp	r3, #0
   1f8f4:	bf14      	ite	ne
   1f8f6:	2000      	movne	r0, #0
   1f8f8:	200f      	moveq	r0, #15
   1f8fa:	e7f1      	b.n	1f8e0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1f8fc:	2002      	movs	r0, #2
   1f8fe:	e7ef      	b.n	1f8e0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1f900:	2003      	movs	r0, #3
   1f902:	e7ed      	b.n	1f8e0 <bt_gatt_check_perm+0x32>

0001f904 <gatt_discover_next>:
{
   1f904:	b570      	push	{r4, r5, r6, lr}
   1f906:	4605      	mov	r5, r0
   1f908:	4614      	mov	r4, r2
	if (!last_handle)
   1f90a:	b929      	cbnz	r1, 1f918 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1f90c:	4621      	mov	r1, r4
   1f90e:	4628      	mov	r0, r5
   1f910:	f7f4 fe02 	bl	14518 <bt_gatt_discover>
   1f914:	b928      	cbnz	r0, 1f922 <gatt_discover_next+0x1e>
}
   1f916:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1f918:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f91c:	4291      	cmp	r1, r2
   1f91e:	d107      	bne.n	1f930 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1f920:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1f922:	4622      	mov	r2, r4
   1f924:	4628      	mov	r0, r5
   1f926:	6863      	ldr	r3, [r4, #4]
   1f928:	2100      	movs	r1, #0
}
   1f92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1f92e:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1f930:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1f932:	1c4b      	adds	r3, r1, #1
   1f934:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1f936:	429a      	cmp	r2, r3
		params->start_handle++;
   1f938:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1f93a:	d2e7      	bcs.n	1f90c <gatt_discover_next+0x8>
   1f93c:	e7f1      	b.n	1f922 <gatt_discover_next+0x1e>

0001f93e <gatt_find_type_rsp>:
{
   1f93e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f942:	b088      	sub	sp, #32
   1f944:	4607      	mov	r7, r0
   1f946:	4614      	mov	r4, r2
   1f948:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1f94c:	b911      	cbnz	r1, 1f954 <gatt_find_type_rsp+0x16>
   1f94e:	f013 0803 	ands.w	r8, r3, #3
   1f952:	d008      	beq.n	1f966 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1f954:	464a      	mov	r2, r9
   1f956:	2100      	movs	r1, #0
   1f958:	4638      	mov	r0, r7
   1f95a:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1f95e:	b008      	add	sp, #32
   1f960:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1f964:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1f966:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1f968:	f642 0a01 	movw	sl, #10241	; 0x2801
   1f96c:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1f970:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1f974:	42ac      	cmp	r4, r5
   1f976:	d107      	bne.n	1f988 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1f978:	464a      	mov	r2, r9
   1f97a:	4641      	mov	r1, r8
   1f97c:	4638      	mov	r0, r7
}
   1f97e:	b008      	add	sp, #32
   1f980:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1f984:	f7ff bfbe 	b.w	1f904 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1f988:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1f98c:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1f98e:	2900      	cmp	r1, #0
   1f990:	bf0c      	ite	eq
   1f992:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1f996:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1f998:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1f99c:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1f9a0:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1f9a4:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1f9a6:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1f9a8:	ab01      	add	r3, sp, #4
   1f9aa:	f8ad 1002 	strh.w	r1, [sp, #2]
   1f9ae:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1f9b0:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1f9b4:	4638      	mov	r0, r7
   1f9b6:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1f9b8:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1f9bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1f9c0:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1f9c4:	f8cd d00c 	str.w	sp, [sp, #12]
   1f9c8:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1f9cc:	a903      	add	r1, sp, #12
   1f9ce:	4798      	blx	r3
   1f9d0:	3404      	adds	r4, #4
   1f9d2:	2800      	cmp	r0, #0
   1f9d4:	d1ce      	bne.n	1f974 <gatt_find_type_rsp+0x36>
}
   1f9d6:	b008      	add	sp, #32
   1f9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f9dc <bt_gatt_notification>:
{
   1f9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9e0:	4607      	mov	r7, r0
   1f9e2:	4688      	mov	r8, r1
   1f9e4:	4691      	mov	r9, r2
   1f9e6:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1f9e8:	f7f3 fc62 	bl	132b0 <gatt_sub_find>
	if (!sub) {
   1f9ec:	b1f8      	cbz	r0, 1fa2e <bt_gatt_notification+0x52>
	return list->head;
   1f9ee:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1f9f0:	b1eb      	cbz	r3, 1fa2e <bt_gatt_notification+0x52>
   1f9f2:	f1b3 0614 	subs.w	r6, r3, #20
   1f9f6:	d01a      	beq.n	1fa2e <bt_gatt_notification+0x52>
	return node->next;
   1f9f8:	681c      	ldr	r4, [r3, #0]
   1f9fa:	b104      	cbz	r4, 1f9fe <bt_gatt_notification+0x22>
   1f9fc:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1f9fe:	8933      	ldrh	r3, [r6, #8]
   1fa00:	4543      	cmp	r3, r8
   1fa02:	d10a      	bne.n	1fa1a <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1fa04:	4653      	mov	r3, sl
   1fa06:	464a      	mov	r2, r9
   1fa08:	4631      	mov	r1, r6
   1fa0a:	4638      	mov	r0, r7
   1fa0c:	6835      	ldr	r5, [r6, #0]
   1fa0e:	47a8      	blx	r5
   1fa10:	b918      	cbnz	r0, 1fa1a <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1fa12:	4631      	mov	r1, r6
   1fa14:	4638      	mov	r0, r7
   1fa16:	f7f5 f9bb 	bl	14d90 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1fa1a:	b144      	cbz	r4, 1fa2e <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fa1c:	f114 0514 	adds.w	r5, r4, #20
   1fa20:	d002      	beq.n	1fa28 <bt_gatt_notification+0x4c>
	return node->next;
   1fa22:	6965      	ldr	r5, [r4, #20]
   1fa24:	b105      	cbz	r5, 1fa28 <bt_gatt_notification+0x4c>
   1fa26:	3d14      	subs	r5, #20
{
   1fa28:	4626      	mov	r6, r4
   1fa2a:	462c      	mov	r4, r5
   1fa2c:	e7e7      	b.n	1f9fe <bt_gatt_notification+0x22>
}
   1fa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fa32 <bt_gatt_change_aware>:
{
   1fa32:	b510      	push	{r4, lr}
   1fa34:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1fa36:	f7f3 fbfd 	bl	13234 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fa3a:	b910      	cbnz	r0, 1fa42 <bt_gatt_change_aware+0x10>
		return true;
   1fa3c:	2401      	movs	r4, #1
}
   1fa3e:	4620      	mov	r0, r4
   1fa40:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fa42:	7a03      	ldrb	r3, [r0, #8]
   1fa44:	07db      	lsls	r3, r3, #31
   1fa46:	d5f9      	bpl.n	1fa3c <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1fa48:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1fa4c:	4618      	mov	r0, r3
   1fa4e:	f7ff fd59 	bl	1f504 <atomic_get>
   1fa52:	07c1      	lsls	r1, r0, #31
   1fa54:	d4f2      	bmi.n	1fa3c <bt_gatt_change_aware+0xa>
	if (!req) {
   1fa56:	2c00      	cmp	r4, #0
   1fa58:	d0f1      	beq.n	1fa3e <bt_gatt_change_aware+0xc>
   1fa5a:	4618      	mov	r0, r3
   1fa5c:	f7ff fd52 	bl	1f504 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1fa60:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fa62:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1fa66:	d50c      	bpl.n	1fa82 <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fa68:	e8d3 2fef 	ldaex	r2, [r3]
   1fa6c:	f022 0202 	bic.w	r2, r2, #2
   1fa70:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1fa74:	2900      	cmp	r1, #0
   1fa76:	d1f7      	bne.n	1fa68 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fa78:	2101      	movs	r1, #1
   1fa7a:	4618      	mov	r0, r3
   1fa7c:	f7ff fd37 	bl	1f4ee <atomic_or>
}
   1fa80:	e7dd      	b.n	1fa3e <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1fa82:	2102      	movs	r1, #2
   1fa84:	e7f9      	b.n	1fa7a <bt_gatt_change_aware+0x48>

0001fa86 <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fa86:	f890 20cb 	ldrb.w	r2, [r0, #203]	; 0xcb
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fa8a:	f890 30d2 	ldrb.w	r3, [r0, #210]	; 0xd2
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1fa8e:	6800      	ldr	r0, [r0, #0]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fa90:	f002 0201 	and.w	r2, r2, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fa94:	78c0      	ldrb	r0, [r0, #3]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1fa96:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fa9a:	b928      	cbnz	r0, 1faa8 <le_sc_oob_config_set+0x22>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1fa9c:	b952      	cbnz	r2, 1fab4 <le_sc_oob_config_set+0x2e>
				     BT_CONN_OOB_BOTH_PEERS :
   1fa9e:	2b00      	cmp	r3, #0
   1faa0:	bf0c      	ite	eq
   1faa2:	2303      	moveq	r3, #3
   1faa4:	2300      	movne	r3, #0
   1faa6:	e009      	b.n	1fabc <le_sc_oob_config_set+0x36>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1faa8:	b952      	cbnz	r2, 1fac0 <le_sc_oob_config_set+0x3a>
				     BT_CONN_OOB_BOTH_PEERS :
   1faaa:	2b00      	cmp	r3, #0
   1faac:	bf0c      	ite	eq
   1faae:	2303      	moveq	r3, #3
   1fab0:	2301      	movne	r3, #1
   1fab2:	e003      	b.n	1fabc <le_sc_oob_config_set+0x36>
				     BT_CONN_OOB_BOTH_PEERS :
   1fab4:	2b00      	cmp	r3, #0
   1fab6:	bf0c      	ite	eq
   1fab8:	2301      	moveq	r3, #1
   1faba:	2302      	movne	r3, #2
	info->lesc.oob_config = oob_config;
   1fabc:	704b      	strb	r3, [r1, #1]
}
   1fabe:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   1fac0:	005b      	lsls	r3, r3, #1
   1fac2:	e7fb      	b.n	1fabc <le_sc_oob_config_set+0x36>

0001fac4 <smp_signing_info>:
}
   1fac4:	2007      	movs	r0, #7
   1fac6:	4770      	bx	lr

0001fac8 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fac8:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1facc:	4108      	asrs	r0, r1
}
   1face:	f000 0001 	and.w	r0, r0, #1
   1fad2:	4770      	bx	lr

0001fad4 <update_keys_check>:
{
   1fad4:	4603      	mov	r3, r0
   1fad6:	b510      	push	{r4, lr}
	if (!keys ||
   1fad8:	b1f9      	cbz	r1, 1fb1a <update_keys_check+0x46>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1fada:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1fadc:	f010 0f24 	tst.w	r0, #36	; 0x24
   1fae0:	d01b      	beq.n	1fb1a <update_keys_check+0x46>
	return MIN(req->max_key_size, rsp->max_key_size);
   1fae2:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   1fae6:	f893 40cd 	ldrb.w	r4, [r3, #205]	; 0xcd
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1faea:	7b09      	ldrb	r1, [r1, #12]
   1faec:	42a2      	cmp	r2, r4
   1faee:	bf28      	it	cs
   1faf0:	4622      	movcs	r2, r4
   1faf2:	4291      	cmp	r1, r2
   1faf4:	d901      	bls.n	1fafa <update_keys_check+0x26>
		return false;
   1faf6:	2000      	movs	r0, #0
}
   1faf8:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1fafa:	0682      	lsls	r2, r0, #26
   1fafc:	d405      	bmi.n	1fb0a <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1fafe:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
   1fb02:	3800      	subs	r0, #0
   1fb04:	bf18      	it	ne
   1fb06:	2001      	movne	r0, #1
   1fb08:	e7f6      	b.n	1faf8 <update_keys_check+0x24>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fb0a:	2105      	movs	r1, #5
   1fb0c:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   1fb10:	f7ff ffda 	bl	1fac8 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1fb14:	2800      	cmp	r0, #0
   1fb16:	d1f2      	bne.n	1fafe <update_keys_check+0x2a>
   1fb18:	e7ed      	b.n	1faf6 <update_keys_check+0x22>
		return true;
   1fb1a:	2001      	movs	r0, #1
   1fb1c:	e7ec      	b.n	1faf8 <update_keys_check+0x24>

0001fb1e <remote_sec_level_reachable>:
{
   1fb1e:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1fb20:	6802      	ldr	r2, [r0, #0]
{
   1fb22:	4603      	mov	r3, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1fb24:	7a92      	ldrb	r2, [r2, #10]
	switch (sec) {
   1fb26:	2a03      	cmp	r2, #3
   1fb28:	d016      	beq.n	1fb58 <remote_sec_level_reachable+0x3a>
   1fb2a:	d805      	bhi.n	1fb38 <remote_sec_level_reachable+0x1a>
   1fb2c:	3a01      	subs	r2, #1
   1fb2e:	2a01      	cmp	r2, #1
   1fb30:	bf94      	ite	ls
   1fb32:	2000      	movls	r0, #0
   1fb34:	2008      	movhi	r0, #8
}
   1fb36:	bd08      	pop	{r3, pc}
	switch (sec) {
   1fb38:	2a04      	cmp	r2, #4
   1fb3a:	d112      	bne.n	1fb62 <remote_sec_level_reachable+0x44>
	return MIN(req->max_key_size, rsp->max_key_size);
   1fb3c:	f890 20d4 	ldrb.w	r2, [r0, #212]	; 0xd4
   1fb40:	f890 10cd 	ldrb.w	r1, [r0, #205]	; 0xcd
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1fb44:	428a      	cmp	r2, r1
   1fb46:	bf28      	it	cs
   1fb48:	460a      	movcs	r2, r1
   1fb4a:	2a10      	cmp	r2, #16
   1fb4c:	d10b      	bne.n	1fb66 <remote_sec_level_reachable+0x48>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fb4e:	2105      	movs	r1, #5
   1fb50:	30c4      	adds	r0, #196	; 0xc4
   1fb52:	f7ff ffb9 	bl	1fac8 <atomic_test_bit>
   1fb56:	b110      	cbz	r0, 1fb5e <remote_sec_level_reachable+0x40>
		if (smp->method == JUST_WORKS) {
   1fb58:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1fb5c:	b92b      	cbnz	r3, 1fb6a <remote_sec_level_reachable+0x4c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1fb5e:	2003      	movs	r0, #3
   1fb60:	e7e9      	b.n	1fb36 <remote_sec_level_reachable+0x18>
	switch (sec) {
   1fb62:	2008      	movs	r0, #8
   1fb64:	e7e7      	b.n	1fb36 <remote_sec_level_reachable+0x18>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   1fb66:	2006      	movs	r0, #6
   1fb68:	e7e5      	b.n	1fb36 <remote_sec_level_reachable+0x18>
		return 0;
   1fb6a:	2000      	movs	r0, #0
   1fb6c:	e7e3      	b.n	1fb36 <remote_sec_level_reachable+0x18>

0001fb6e <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fb6e:	2301      	movs	r3, #1
   1fb70:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fb72:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fb74:	e8d0 2fef 	ldaex	r2, [r0]
   1fb78:	401a      	ands	r2, r3
   1fb7a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1fb7e:	2900      	cmp	r1, #0
   1fb80:	d1f8      	bne.n	1fb74 <atomic_clear_bit+0x6>
}
   1fb82:	4770      	bx	lr

0001fb84 <bt_smp_aes_cmac>:
{
   1fb84:	b570      	push	{r4, r5, r6, lr}
   1fb86:	b0c2      	sub	sp, #264	; 0x108
   1fb88:	460d      	mov	r5, r1
   1fb8a:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1fb8c:	4601      	mov	r1, r0
   1fb8e:	aa16      	add	r2, sp, #88	; 0x58
   1fb90:	4668      	mov	r0, sp
{
   1fb92:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1fb94:	f7fd ff17 	bl	1d9c6 <tc_cmac_setup>
   1fb98:	b150      	cbz	r0, 1fbb0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1fb9a:	4632      	mov	r2, r6
   1fb9c:	4629      	mov	r1, r5
   1fb9e:	4668      	mov	r0, sp
   1fba0:	f7fd ff3c 	bl	1da1c <tc_cmac_update>
   1fba4:	b120      	cbz	r0, 1fbb0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1fba6:	4669      	mov	r1, sp
   1fba8:	4620      	mov	r0, r4
   1fbaa:	f7fd ffa2 	bl	1daf2 <tc_cmac_final>
   1fbae:	b918      	cbnz	r0, 1fbb8 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1fbb0:	f06f 0004 	mvn.w	r0, #4
}
   1fbb4:	b042      	add	sp, #264	; 0x108
   1fbb6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1fbb8:	2000      	movs	r0, #0
   1fbba:	e7fb      	b.n	1fbb4 <bt_smp_aes_cmac+0x30>

0001fbbc <bt_smp_disconnected>:
{
   1fbbc:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1fbbe:	6803      	ldr	r3, [r0, #0]
{
   1fbc0:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
   1fbc2:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   1fbc6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1fbca:	f7fb ff4d 	bl	1ba68 <k_delayed_work_cancel>
	if (keys) {
   1fbce:	b13d      	cbz	r5, 1fbe0 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1fbd0:	89eb      	ldrh	r3, [r5, #14]
   1fbd2:	b113      	cbz	r3, 1fbda <bt_smp_disconnected+0x1e>
   1fbd4:	7b6b      	ldrb	r3, [r5, #13]
   1fbd6:	079b      	lsls	r3, r3, #30
   1fbd8:	d502      	bpl.n	1fbe0 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   1fbda:	4628      	mov	r0, r5
   1fbdc:	f7f7 fa56 	bl	1708c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1fbe0:	4620      	mov	r0, r4
}
   1fbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1fbe6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1fbea:	2100      	movs	r1, #0
   1fbec:	f7fe bb0d 	b.w	1e20a <memset>

0001fbf0 <smp_keys_check>:
{
   1fbf0:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1fbf2:	210b      	movs	r1, #11
{
   1fbf4:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1fbf6:	3004      	adds	r0, #4
   1fbf8:	f7ff ff66 	bl	1fac8 <atomic_test_bit>
   1fbfc:	b108      	cbz	r0, 1fc02 <smp_keys_check+0x12>
		return false;
   1fbfe:	2000      	movs	r0, #0
}
   1fc00:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   1fc02:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1fc06:	b983      	cbnz	r3, 1fc2a <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   1fc08:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1fc0c:	462a      	mov	r2, r5
   1fc0e:	2020      	movs	r0, #32
   1fc10:	7a21      	ldrb	r1, [r4, #8]
   1fc12:	f7f7 f9dd 	bl	16fd0 <bt_keys_find>
   1fc16:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1fc1a:	b930      	cbnz	r0, 1fc2a <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1fc1c:	462a      	mov	r2, r5
   1fc1e:	2004      	movs	r0, #4
   1fc20:	7a21      	ldrb	r1, [r4, #8]
   1fc22:	f7f7 f9d5 	bl	16fd0 <bt_keys_find>
   1fc26:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   1fc2a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1fc2e:	2b00      	cmp	r3, #0
   1fc30:	d0e5      	beq.n	1fbfe <smp_keys_check+0xe>
   1fc32:	89da      	ldrh	r2, [r3, #14]
   1fc34:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1fc38:	2a00      	cmp	r2, #0
   1fc3a:	d0e0      	beq.n	1fbfe <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1fc3c:	7aa2      	ldrb	r2, [r4, #10]
   1fc3e:	2a02      	cmp	r2, #2
   1fc40:	d902      	bls.n	1fc48 <smp_keys_check+0x58>
   1fc42:	7b5b      	ldrb	r3, [r3, #13]
   1fc44:	07db      	lsls	r3, r3, #31
   1fc46:	d5da      	bpl.n	1fbfe <smp_keys_check+0xe>
	return true;
   1fc48:	2001      	movs	r0, #1
   1fc4a:	e7d9      	b.n	1fc00 <smp_keys_check+0x10>

0001fc4c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1fc4c:	b510      	push	{r4, lr}
   1fc4e:	1e43      	subs	r3, r0, #1
   1fc50:	f100 0210 	add.w	r2, r0, #16
   1fc54:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1fc56:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1fc5a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1fc5e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1fc60:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1fc62:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1fc64:	d1f7      	bne.n	1fc56 <sys_mem_swap.constprop.0+0xa>
	}
}
   1fc66:	bd10      	pop	{r4, pc}

0001fc68 <smp_f6>:
{
   1fc68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc6a:	4616      	mov	r6, r2
   1fc6c:	461c      	mov	r4, r3
   1fc6e:	4605      	mov	r5, r0
   1fc70:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   1fc72:	2210      	movs	r2, #16
   1fc74:	a805      	add	r0, sp, #20
{
   1fc76:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1fc78:	f7f5 fb30 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1fc7c:	2210      	movs	r2, #16
   1fc7e:	4631      	mov	r1, r6
   1fc80:	a809      	add	r0, sp, #36	; 0x24
   1fc82:	f7f5 fb2b 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1fc86:	4621      	mov	r1, r4
   1fc88:	2210      	movs	r2, #16
   1fc8a:	a80d      	add	r0, sp, #52	; 0x34
   1fc8c:	f7f5 fb26 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1fc90:	2203      	movs	r2, #3
   1fc92:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fc94:	a811      	add	r0, sp, #68	; 0x44
   1fc96:	f7f5 fb21 	bl	152dc <sys_memcpy_swap>
	m[51] = a1->type;
   1fc9a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1fc9c:	2206      	movs	r2, #6
	m[51] = a1->type;
   1fc9e:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   1fca2:	a812      	add	r0, sp, #72	; 0x48
   1fca4:	4621      	mov	r1, r4
	m[51] = a1->type;
   1fca6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1fcaa:	f7fe fa83 	bl	1e1b4 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1fcae:	4621      	mov	r1, r4
   1fcb0:	2206      	movs	r2, #6
   1fcb2:	a812      	add	r0, sp, #72	; 0x48
   1fcb4:	f7f5 fb12 	bl	152dc <sys_memcpy_swap>
	m[58] = a2->type;
   1fcb8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   1fcba:	2206      	movs	r2, #6
	m[58] = a2->type;
   1fcbc:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   1fcc0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1fcc4:	4621      	mov	r1, r4
	m[58] = a2->type;
   1fcc6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1fcca:	f7fe fa73 	bl	1e1b4 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1fcce:	4621      	mov	r1, r4
   1fcd0:	2206      	movs	r2, #6
   1fcd2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1fcd6:	f7f5 fb01 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1fcda:	2210      	movs	r2, #16
   1fcdc:	4629      	mov	r1, r5
   1fcde:	a801      	add	r0, sp, #4
   1fce0:	f7f5 fafc 	bl	152dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1fce4:	463b      	mov	r3, r7
   1fce6:	2241      	movs	r2, #65	; 0x41
   1fce8:	a905      	add	r1, sp, #20
   1fcea:	a801      	add	r0, sp, #4
   1fcec:	f7ff ff4a 	bl	1fb84 <bt_smp_aes_cmac>
	if (err) {
   1fcf0:	4604      	mov	r4, r0
   1fcf2:	b910      	cbnz	r0, 1fcfa <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1fcf4:	4638      	mov	r0, r7
   1fcf6:	f7ff ffa9 	bl	1fc4c <sys_mem_swap.constprop.0>
}
   1fcfa:	4620      	mov	r0, r4
   1fcfc:	b017      	add	sp, #92	; 0x5c
   1fcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fd00 <smp_f4>:
{
   1fd00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd02:	460e      	mov	r6, r1
   1fd04:	4614      	mov	r4, r2
   1fd06:	461d      	mov	r5, r3
   1fd08:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   1fd0a:	4601      	mov	r1, r0
   1fd0c:	2220      	movs	r2, #32
   1fd0e:	a805      	add	r0, sp, #20
{
   1fd10:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1fd12:	f7f5 fae3 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1fd16:	2220      	movs	r2, #32
   1fd18:	4631      	mov	r1, r6
   1fd1a:	a80d      	add	r0, sp, #52	; 0x34
   1fd1c:	f7f5 fade 	bl	152dc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1fd20:	4621      	mov	r1, r4
   1fd22:	2210      	movs	r2, #16
   1fd24:	a801      	add	r0, sp, #4
	m[64] = z;
   1fd26:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1fd2a:	f7f5 fad7 	bl	152dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1fd2e:	463b      	mov	r3, r7
   1fd30:	2241      	movs	r2, #65	; 0x41
   1fd32:	a905      	add	r1, sp, #20
   1fd34:	a801      	add	r0, sp, #4
   1fd36:	f7ff ff25 	bl	1fb84 <bt_smp_aes_cmac>
	if (err) {
   1fd3a:	4604      	mov	r4, r0
   1fd3c:	b910      	cbnz	r0, 1fd44 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1fd3e:	4638      	mov	r0, r7
   1fd40:	f7ff ff84 	bl	1fc4c <sys_mem_swap.constprop.0>
}
   1fd44:	4620      	mov	r0, r4
   1fd46:	b017      	add	sp, #92	; 0x5c
   1fd48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fd4a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fd4a:	2301      	movs	r3, #1
   1fd4c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fd4e:	e8d0 2fef 	ldaex	r2, [r0]
   1fd52:	431a      	orrs	r2, r3
   1fd54:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1fd58:	2900      	cmp	r1, #0
   1fd5a:	d1f8      	bne.n	1fd4e <atomic_set_bit+0x4>
}
   1fd5c:	4770      	bx	lr

0001fd5e <smp_keypress_notif>:
{
   1fd5e:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1fd60:	210e      	movs	r1, #14
   1fd62:	30c0      	adds	r0, #192	; 0xc0
   1fd64:	f7ff fff1 	bl	1fd4a <atomic_set_bit>
}
   1fd68:	2000      	movs	r0, #0
   1fd6a:	bd08      	pop	{r3, pc}

0001fd6c <generate_dhkey>:
{
   1fd6c:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1fd6e:	2107      	movs	r1, #7
{
   1fd70:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1fd72:	30c4      	adds	r0, #196	; 0xc4
   1fd74:	f7ff ffe9 	bl	1fd4a <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1fd78:	2008      	movs	r0, #8
   1fd7a:	f7f5 fa9b 	bl	152b4 <smp_find>
   1fd7e:	b920      	cbnz	r0, 1fd8a <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   1fd80:	4620      	mov	r0, r4
}
   1fd82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   1fd86:	f7f5 bce1 	b.w	1574c <smp_dhkey_generate>
}
   1fd8a:	2000      	movs	r0, #0
   1fd8c:	bd10      	pop	{r4, pc}

0001fd8e <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1fd8e:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fd90:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1fd94:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fd96:	4628      	mov	r0, r5
   1fd98:	2104      	movs	r1, #4
   1fd9a:	f7ff fe95 	bl	1fac8 <atomic_test_bit>
   1fd9e:	b168      	cbz	r0, 1fdbc <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   1fda0:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1fda2:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1fda4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1fda6:	4608      	mov	r0, r1
   1fda8:	f7fe febc 	bl	1eb24 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1fdac:	4604      	mov	r4, r0
   1fdae:	b940      	cbnz	r0, 1fdc2 <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1fdb0:	2104      	movs	r1, #4
   1fdb2:	4628      	mov	r0, r5
   1fdb4:	f7ff ffc9 	bl	1fd4a <atomic_set_bit>
}
   1fdb8:	4620      	mov	r0, r4
   1fdba:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1fdbc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1fdc0:	e7ef      	b.n	1fda2 <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   1fdc2:	2101      	movs	r1, #1
   1fdc4:	3008      	adds	r0, #8
   1fdc6:	f7f7 fcbd 	bl	17744 <net_buf_simple_add>
	hdr->code = op;
   1fdca:	7006      	strb	r6, [r0, #0]
	return buf;
   1fdcc:	e7f4      	b.n	1fdb8 <smp_create_pdu.constprop.0+0x2a>

0001fdce <send_pairing_rsp>:
{
   1fdce:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1fdd0:	2102      	movs	r1, #2
{
   1fdd2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1fdd4:	f7ff ffdb 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1fdd8:	4604      	mov	r4, r0
   1fdda:	b178      	cbz	r0, 1fdfc <send_pairing_rsp+0x2e>
   1fddc:	2106      	movs	r1, #6
   1fdde:	3008      	adds	r0, #8
   1fde0:	f7f7 fcb0 	bl	17744 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1fde4:	2206      	movs	r2, #6
   1fde6:	f105 01d1 	add.w	r1, r5, #209	; 0xd1
   1fdea:	f7fe f9e3 	bl	1e1b4 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1fdee:	4628      	mov	r0, r5
   1fdf0:	2200      	movs	r2, #0
   1fdf2:	4621      	mov	r1, r4
   1fdf4:	f7f5 fc18 	bl	15628 <smp_send.constprop.0>
	return 0;
   1fdf8:	2000      	movs	r0, #0
}
   1fdfa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1fdfc:	2008      	movs	r0, #8
   1fdfe:	e7fc      	b.n	1fdfa <send_pairing_rsp+0x2c>

0001fe00 <smp_send_pairing_random>:
{
   1fe00:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1fe02:	2104      	movs	r1, #4
{
   1fe04:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1fe06:	f7ff ffc2 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1fe0a:	4604      	mov	r4, r0
   1fe0c:	b178      	cbz	r0, 1fe2e <smp_send_pairing_random+0x2e>
   1fe0e:	2110      	movs	r1, #16
   1fe10:	3008      	adds	r0, #8
   1fe12:	f7f7 fc97 	bl	17744 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1fe16:	2210      	movs	r2, #16
   1fe18:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   1fe1c:	f7fe f9ca 	bl	1e1b4 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1fe20:	4628      	mov	r0, r5
   1fe22:	2200      	movs	r2, #0
   1fe24:	4621      	mov	r1, r4
   1fe26:	f7f5 fbff 	bl	15628 <smp_send.constprop.0>
	return 0;
   1fe2a:	2000      	movs	r0, #0
}
   1fe2c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1fe2e:	2008      	movs	r0, #8
   1fe30:	e7fc      	b.n	1fe2c <smp_send_pairing_random+0x2c>

0001fe32 <sc_smp_send_dhkey_check>:
{
   1fe32:	b570      	push	{r4, r5, r6, lr}
   1fe34:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1fe36:	210d      	movs	r1, #13
{
   1fe38:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1fe3a:	f7ff ffa8 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!buf) {
   1fe3e:	4604      	mov	r4, r0
   1fe40:	b170      	cbz	r0, 1fe60 <sc_smp_send_dhkey_check+0x2e>
   1fe42:	2110      	movs	r1, #16
   1fe44:	3008      	adds	r0, #8
   1fe46:	f7f7 fc7d 	bl	17744 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1fe4a:	2210      	movs	r2, #16
   1fe4c:	4631      	mov	r1, r6
   1fe4e:	f7fe f9b1 	bl	1e1b4 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1fe52:	4628      	mov	r0, r5
   1fe54:	2200      	movs	r2, #0
   1fe56:	4621      	mov	r1, r4
   1fe58:	f7f5 fbe6 	bl	15628 <smp_send.constprop.0>
	return 0;
   1fe5c:	2000      	movs	r0, #0
}
   1fe5e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1fe60:	2008      	movs	r0, #8
   1fe62:	e7fc      	b.n	1fe5e <sc_smp_send_dhkey_check+0x2c>

0001fe64 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fe64:	2301      	movs	r3, #1
   1fe66:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fe6a:	43ca      	mvns	r2, r1
{
   1fe6c:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fe6e:	e8d0 3fef 	ldaex	r3, [r0]
   1fe72:	ea03 0c02 	and.w	ip, r3, r2
   1fe76:	e8c0 cfee 	stlex	lr, ip, [r0]
   1fe7a:	f1be 0f00 	cmp.w	lr, #0
   1fe7e:	d1f6      	bne.n	1fe6e <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   1fe80:	420b      	tst	r3, r1
}
   1fe82:	bf14      	ite	ne
   1fe84:	2001      	movne	r0, #1
   1fe86:	2000      	moveq	r0, #0
   1fe88:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe8c <smp_reset>:
{
   1fe8c:	b538      	push	{r3, r4, r5, lr}
   1fe8e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fe90:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   1fe92:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1fe96:	f7fb fde7 	bl	1ba68 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1fe9a:	2300      	movs	r3, #0
	atomic_set(&smp->allowed_cmds, 0);
   1fe9c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	smp->method = JUST_WORKS;
   1fea0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fea4:	e8d0 2fef 	ldaex	r2, [r0]
   1fea8:	e8c0 3fe1 	stlex	r1, r3, [r0]
   1feac:	2900      	cmp	r1, #0
   1feae:	d1f9      	bne.n	1fea4 <smp_reset+0x18>
   1feb0:	34c4      	adds	r4, #196	; 0xc4
   1feb2:	e8d4 2fef 	ldaex	r2, [r4]
   1feb6:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1feba:	2900      	cmp	r1, #0
   1febc:	d1f9      	bne.n	1feb2 <smp_reset+0x26>
	if (conn->required_sec_level != conn->sec_level) {
   1febe:	7a6b      	ldrb	r3, [r5, #9]
   1fec0:	7aaa      	ldrb	r2, [r5, #10]
   1fec2:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   1fec4:	bf18      	it	ne
   1fec6:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fec8:	78eb      	ldrb	r3, [r5, #3]
   1feca:	b923      	cbnz	r3, 1fed6 <smp_reset+0x4a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1fecc:	210b      	movs	r1, #11
}
   1fece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1fed2:	f7ff bf3a 	b.w	1fd4a <atomic_set_bit>
   1fed6:	2101      	movs	r1, #1
   1fed8:	e7f9      	b.n	1fece <smp_reset+0x42>

0001feda <smp_error>:
{
   1feda:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fedc:	4606      	mov	r6, r0
   1fede:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   1fee0:	f7f6 fad6 	bl	16490 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1fee4:	2105      	movs	r1, #5
   1fee6:	4630      	mov	r0, r6
   1fee8:	f7ff ff51 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!buf) {
   1feec:	4605      	mov	r5, r0
   1feee:	b178      	cbz	r0, 1ff10 <smp_error+0x36>
   1fef0:	2101      	movs	r1, #1
   1fef2:	3008      	adds	r0, #8
   1fef4:	f7f7 fc26 	bl	17744 <net_buf_simple_add>
	rsp->reason = reason;
   1fef8:	7004      	strb	r4, [r0, #0]
   1fefa:	2400      	movs	r4, #0
   1fefc:	462a      	mov	r2, r5
   1fefe:	4623      	mov	r3, r4
   1ff00:	2106      	movs	r1, #6
   1ff02:	6830      	ldr	r0, [r6, #0]
   1ff04:	9400      	str	r4, [sp, #0]
   1ff06:	f7fe fe10 	bl	1eb2a <bt_l2cap_send_cb>
	return 0;
   1ff0a:	4620      	mov	r0, r4
}
   1ff0c:	b002      	add	sp, #8
   1ff0e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1ff10:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ff14:	e7fa      	b.n	1ff0c <smp_error+0x32>

0001ff16 <bt_smp_dhkey_ready>:
{
   1ff16:	b570      	push	{r4, r5, r6, lr}
   1ff18:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1ff1a:	2008      	movs	r0, #8
   1ff1c:	f7f5 f9ca 	bl	152b4 <smp_find>
	if (smp) {
   1ff20:	4604      	mov	r4, r0
   1ff22:	b1c0      	cbz	r0, 1ff56 <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ff24:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   1ff28:	2108      	movs	r1, #8
   1ff2a:	4628      	mov	r0, r5
   1ff2c:	f7ff fe1f 	bl	1fb6e <atomic_clear_bit>
	if (!dhkey) {
   1ff30:	b3be      	cbz	r6, 1ffa2 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1ff32:	2107      	movs	r1, #7
   1ff34:	f7ff fe1b 	bl	1fb6e <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   1ff38:	4631      	mov	r1, r6
   1ff3a:	2220      	movs	r2, #32
   1ff3c:	f204 1057 	addw	r0, r4, #343	; 0x157
   1ff40:	f7fe f938 	bl	1e1b4 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1ff44:	210a      	movs	r1, #10
   1ff46:	4628      	mov	r0, r5
   1ff48:	f7ff fdbe 	bl	1fac8 <atomic_test_bit>
   1ff4c:	b168      	cbz	r0, 1ff6a <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1ff4e:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1ff50:	4628      	mov	r0, r5
   1ff52:	f7ff fefa 	bl	1fd4a <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1ff56:	2007      	movs	r0, #7
   1ff58:	f7f5 f9ac 	bl	152b4 <smp_find>
		if (smp) {
   1ff5c:	4604      	mov	r4, r0
   1ff5e:	b118      	cbz	r0, 1ff68 <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   1ff60:	f7f5 fbf4 	bl	1574c <smp_dhkey_generate>
			if (err) {
   1ff64:	4601      	mov	r1, r0
   1ff66:	b9a8      	cbnz	r0, 1ff94 <bt_smp_dhkey_ready+0x7e>
}
   1ff68:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1ff6a:	2110      	movs	r1, #16
   1ff6c:	4628      	mov	r0, r5
   1ff6e:	f7ff fdab 	bl	1fac8 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1ff72:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1ff74:	2800      	cmp	r0, #0
   1ff76:	d1eb      	bne.n	1ff50 <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1ff78:	4628      	mov	r0, r5
   1ff7a:	f7ff fda5 	bl	1fac8 <atomic_test_bit>
   1ff7e:	2800      	cmp	r0, #0
   1ff80:	d0e9      	beq.n	1ff56 <bt_smp_dhkey_ready+0x40>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1ff82:	6823      	ldr	r3, [r4, #0]
			return compute_and_send_master_dhcheck(smp);
   1ff84:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1ff86:	78db      	ldrb	r3, [r3, #3]
   1ff88:	b943      	cbnz	r3, 1ff9c <bt_smp_dhkey_ready+0x86>
			return compute_and_send_master_dhcheck(smp);
   1ff8a:	f7f6 f8d3 	bl	16134 <compute_and_send_master_dhcheck>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   1ff8e:	4601      	mov	r1, r0
		if (err) {
   1ff90:	2800      	cmp	r0, #0
   1ff92:	d0e0      	beq.n	1ff56 <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   1ff94:	4620      	mov	r0, r4
   1ff96:	f7ff ffa0 	bl	1feda <smp_error>
   1ff9a:	e7dc      	b.n	1ff56 <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   1ff9c:	f7f6 f930 	bl	16200 <compute_and_check_and_send_slave_dhcheck>
   1ffa0:	e7f5      	b.n	1ff8e <bt_smp_dhkey_ready+0x78>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1ffa2:	210b      	movs	r1, #11
   1ffa4:	e7f6      	b.n	1ff94 <bt_smp_dhkey_ready+0x7e>

0001ffa6 <bt_smp_encrypt_change>:
{
   1ffa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   1ffa8:	4605      	mov	r5, r0
{
   1ffaa:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   1ffac:	f855 7bc4 	ldr.w	r7, [r5], #196
{
   1ffb0:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ffb2:	2101      	movs	r1, #1
   1ffb4:	4628      	mov	r0, r5
   1ffb6:	f7ff fdda 	bl	1fb6e <atomic_clear_bit>
	if (hci_status) {
   1ffba:	2e00      	cmp	r6, #0
   1ffbc:	d14a      	bne.n	20054 <bt_smp_encrypt_change+0xae>
	if (!conn->encrypt) {
   1ffbe:	7afb      	ldrb	r3, [r7, #11]
   1ffc0:	2b00      	cmp	r3, #0
   1ffc2:	d047      	beq.n	20054 <bt_smp_encrypt_change+0xae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ffc4:	2103      	movs	r1, #3
   1ffc6:	f7ff fd7f 	bl	1fac8 <atomic_test_bit>
   1ffca:	b920      	cbnz	r0, 1ffd6 <bt_smp_encrypt_change+0x30>
		smp_reset(smp);
   1ffcc:	4620      	mov	r0, r4
}
   1ffce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_reset(smp);
   1ffd2:	f7ff bf5b 	b.w	1fe8c <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ffd6:	2105      	movs	r1, #5
   1ffd8:	4628      	mov	r0, r5
   1ffda:	f7ff fd75 	bl	1fac8 <atomic_test_bit>
   1ffde:	b198      	cbz	r0, 20008 <bt_smp_encrypt_change+0x62>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1ffe0:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   1ffe4:	071e      	lsls	r6, r3, #28
   1ffe6:	d507      	bpl.n	1fff8 <bt_smp_encrypt_change+0x52>
   1ffe8:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1ffec:	0718      	lsls	r0, r3, #28
   1ffee:	d503      	bpl.n	1fff8 <bt_smp_encrypt_change+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1fff0:	2111      	movs	r1, #17
   1fff2:	4628      	mov	r0, r5
   1fff4:	f7ff fea9 	bl	1fd4a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1fff8:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   1fffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   20000:	f023 0308 	bic.w	r3, r3, #8
   20004:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   20008:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   2000c:	07d9      	lsls	r1, r3, #31
   2000e:	d519      	bpl.n	20044 <bt_smp_encrypt_change+0x9e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   20010:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   20012:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   20016:	f7ff fe98 	bl	1fd4a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2001a:	2102      	movs	r1, #2
   2001c:	4628      	mov	r0, r5
   2001e:	f7ff fe94 	bl	1fd4a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   20022:	78fb      	ldrb	r3, [r7, #3]
   20024:	b913      	cbnz	r3, 2002c <bt_smp_encrypt_change+0x86>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   20026:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   2002a:	b99b      	cbnz	r3, 20054 <bt_smp_encrypt_change+0xae>
	if (bt_smp_distribute_keys(smp)) {
   2002c:	4620      	mov	r0, r4
   2002e:	f7f5 fc77 	bl	15920 <bt_smp_distribute_keys>
   20032:	b978      	cbnz	r0, 20054 <bt_smp_encrypt_change+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
   20034:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   20038:	b961      	cbnz	r1, 20054 <bt_smp_encrypt_change+0xae>
		smp_pairing_complete(smp, 0);
   2003a:	4620      	mov	r0, r4
}
   2003c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_pairing_complete(smp, 0);
   20040:	f7f6 ba26 	b.w	16490 <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   20044:	079a      	lsls	r2, r3, #30
   20046:	d501      	bpl.n	2004c <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   20048:	2108      	movs	r1, #8
   2004a:	e7e2      	b.n	20012 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2004c:	075b      	lsls	r3, r3, #29
   2004e:	d5e4      	bpl.n	2001a <bt_smp_encrypt_change+0x74>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   20050:	210a      	movs	r1, #10
   20052:	e7de      	b.n	20012 <bt_smp_encrypt_change+0x6c>
}
   20054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020056 <smp_c1>:
{
   20056:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2005a:	4699      	mov	r9, r3
   2005c:	b089      	sub	sp, #36	; 0x24
   2005e:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   20062:	783b      	ldrb	r3, [r7, #0]
{
   20064:	460c      	mov	r4, r1
	p1[0] = ia->type;
   20066:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   2006a:	f898 3000 	ldrb.w	r3, [r8]
{
   2006e:	4611      	mov	r1, r2
   20070:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   20072:	2207      	movs	r2, #7
{
   20074:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   20076:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   2007a:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2007e:	f7fe f899 	bl	1e1b4 <memcpy>
	memcpy(p1 + 9, pres, 7);
   20082:	2207      	movs	r2, #7
   20084:	4649      	mov	r1, r9
   20086:	f10d 0009 	add.w	r0, sp, #9
   2008a:	f7fe f893 	bl	1e1b4 <memcpy>
	while (len--) {
   2008e:	4629      	mov	r1, r5
   20090:	466a      	mov	r2, sp
   20092:	f104 0010 	add.w	r0, r4, #16
   20096:	42a0      	cmp	r0, r4
   20098:	d127      	bne.n	200ea <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2009a:	462a      	mov	r2, r5
   2009c:	4629      	mov	r1, r5
   2009e:	4630      	mov	r0, r6
   200a0:	f7fe fb5d 	bl	1e75e <bt_encrypt_le>
	if (err) {
   200a4:	4604      	mov	r4, r0
   200a6:	b9e0      	cbnz	r0, 200e2 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   200a8:	2206      	movs	r2, #6
   200aa:	f108 0101 	add.w	r1, r8, #1
   200ae:	a804      	add	r0, sp, #16
   200b0:	f7fe f880 	bl	1e1b4 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   200b4:	2206      	movs	r2, #6
   200b6:	1c79      	adds	r1, r7, #1
   200b8:	f10d 0016 	add.w	r0, sp, #22
   200bc:	f7fe f87a 	bl	1e1b4 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   200c0:	2204      	movs	r2, #4
   200c2:	4621      	mov	r1, r4
   200c4:	a807      	add	r0, sp, #28
   200c6:	f7fe f8a0 	bl	1e20a <memset>
	while (len--) {
   200ca:	462a      	mov	r2, r5
   200cc:	f105 0010 	add.w	r0, r5, #16
   200d0:	ab04      	add	r3, sp, #16
   200d2:	4282      	cmp	r2, r0
   200d4:	d112      	bne.n	200fc <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   200d6:	462a      	mov	r2, r5
   200d8:	4629      	mov	r1, r5
   200da:	4630      	mov	r0, r6
   200dc:	f7fe fb3f 	bl	1e75e <bt_encrypt_le>
   200e0:	4604      	mov	r4, r0
}
   200e2:	4620      	mov	r0, r4
   200e4:	b009      	add	sp, #36	; 0x24
   200e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   200ea:	f814 3b01 	ldrb.w	r3, [r4], #1
   200ee:	f812 cb01 	ldrb.w	ip, [r2], #1
   200f2:	ea83 030c 	eor.w	r3, r3, ip
   200f6:	f801 3b01 	strb.w	r3, [r1], #1
   200fa:	e7cc      	b.n	20096 <smp_c1+0x40>
   200fc:	f812 1b01 	ldrb.w	r1, [r2], #1
   20100:	f813 4b01 	ldrb.w	r4, [r3], #1
   20104:	4061      	eors	r1, r4
   20106:	f802 1c01 	strb.w	r1, [r2, #-1]
   2010a:	e7e2      	b.n	200d2 <smp_c1+0x7c>

0002010c <legacy_send_pairing_confirm>:
{
   2010c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2010e:	2103      	movs	r1, #3
{
   20110:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   20112:	6804      	ldr	r4, [r0, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   20114:	f7ff fe3b 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!buf) {
   20118:	4606      	mov	r6, r0
   2011a:	b1c0      	cbz	r0, 2014e <legacy_send_pairing_confirm+0x42>
   2011c:	2110      	movs	r1, #16
   2011e:	3008      	adds	r0, #8
   20120:	f7f7 fb10 	bl	17744 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   20124:	f104 0396 	add.w	r3, r4, #150	; 0x96
   20128:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2012a:	9002      	str	r0, [sp, #8]
   2012c:	9301      	str	r3, [sp, #4]
   2012e:	9400      	str	r4, [sp, #0]
   20130:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   20134:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   20138:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   2013c:	f205 1007 	addw	r0, r5, #263	; 0x107
   20140:	f7ff ff89 	bl	20056 <smp_c1>
   20144:	4604      	mov	r4, r0
   20146:	b120      	cbz	r0, 20152 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   20148:	4630      	mov	r0, r6
   2014a:	f7f7 f9e5 	bl	17518 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2014e:	2008      	movs	r0, #8
   20150:	e00a      	b.n	20168 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   20152:	4602      	mov	r2, r0
   20154:	4631      	mov	r1, r6
   20156:	4628      	mov	r0, r5
   20158:	f7f5 fa66 	bl	15628 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2015c:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   20160:	4621      	mov	r1, r4
   20162:	f7ff fd04 	bl	1fb6e <atomic_clear_bit>
	return 0;
   20166:	4620      	mov	r0, r4
}
   20168:	b004      	add	sp, #16
   2016a:	bd70      	pop	{r4, r5, r6, pc}

0002016c <legacy_pairing_confirm>:
{
   2016c:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2016e:	6803      	ldr	r3, [r0, #0]
{
   20170:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   20172:	78db      	ldrb	r3, [r3, #3]
   20174:	b94b      	cbnz	r3, 2018a <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   20176:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
   20178:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   2017c:	f7ff fde5 	bl	1fd4a <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
   20180:	4620      	mov	r0, r4
}
   20182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
   20186:	f7ff bfc1 	b.w	2010c <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2018a:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
   2018e:	210a      	movs	r1, #10
   20190:	4618      	mov	r0, r3
   20192:	f7ff fc99 	bl	1fac8 <atomic_test_bit>
   20196:	b908      	cbnz	r0, 2019c <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
   20198:	2104      	movs	r1, #4
   2019a:	e7ed      	b.n	20178 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2019c:	4618      	mov	r0, r3
   2019e:	2100      	movs	r1, #0
   201a0:	f7ff fdd3 	bl	1fd4a <atomic_set_bit>
}
   201a4:	2000      	movs	r0, #0
   201a6:	bd10      	pop	{r4, pc}

000201a8 <bt_smp_request_ltk>:
{
   201a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   201ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   201ae:	4604      	mov	r4, r0
   201b0:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   201b4:	f7f5 f8ec 	bl	15390 <smp_chan_get>
	if (!smp) {
   201b8:	4605      	mov	r5, r0
   201ba:	2800      	cmp	r0, #0
   201bc:	f000 809d 	beq.w	202fa <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   201c0:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   201c4:	f1b9 0f00 	cmp.w	r9, #0
   201c8:	d12d      	bne.n	20226 <bt_smp_request_ltk+0x7e>
   201ca:	e9dd 2300 	ldrd	r2, r3, [sp]
   201ce:	4313      	orrs	r3, r2
   201d0:	d129      	bne.n	20226 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   201d2:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   201d6:	2103      	movs	r1, #3
   201d8:	4640      	mov	r0, r8
   201da:	f7ff fc75 	bl	1fac8 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   201de:	b310      	cbz	r0, 20226 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   201e0:	2101      	movs	r1, #1
   201e2:	4640      	mov	r0, r8
   201e4:	f7ff fc70 	bl	1fac8 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   201e8:	4606      	mov	r6, r0
   201ea:	b1e0      	cbz	r0, 20226 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   201ec:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   201f0:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
		memcpy(ltk, smp->tk, enc_size);
   201f4:	4638      	mov	r0, r7
	return MIN(req->max_key_size, rsp->max_key_size);
   201f6:	429c      	cmp	r4, r3
   201f8:	bf28      	it	cs
   201fa:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   201fc:	f205 1107 	addw	r1, r5, #263	; 0x107
   20200:	4622      	mov	r2, r4
   20202:	f7fd ffd7 	bl	1e1b4 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20206:	2c0f      	cmp	r4, #15
   20208:	d805      	bhi.n	20216 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   2020a:	4649      	mov	r1, r9
   2020c:	f1c4 0210 	rsb	r2, r4, #16
   20210:	1938      	adds	r0, r7, r4
   20212:	f7fd fffa 	bl	1e20a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20216:	2101      	movs	r1, #1
   20218:	4640      	mov	r0, r8
   2021a:	f7ff fd96 	bl	1fd4a <atomic_set_bit>
}
   2021e:	4630      	mov	r0, r6
   20220:	b003      	add	sp, #12
   20222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   20226:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2022a:	b983      	cbnz	r3, 2024e <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   2022c:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   20230:	4632      	mov	r2, r6
   20232:	2020      	movs	r0, #32
   20234:	7a21      	ldrb	r1, [r4, #8]
   20236:	f7f6 fecb 	bl	16fd0 <bt_keys_find>
   2023a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2023e:	b930      	cbnz	r0, 2024e <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   20240:	4632      	mov	r2, r6
   20242:	2001      	movs	r0, #1
   20244:	7a21      	ldrb	r1, [r4, #8]
   20246:	f7f6 fec3 	bl	16fd0 <bt_keys_find>
   2024a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2024e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   20252:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   20256:	b9ce      	cbnz	r6, 2028c <bt_smp_request_ltk+0xe4>
   20258:	e9dd 2300 	ldrd	r2, r3, [sp]
   2025c:	4313      	orrs	r3, r2
   2025e:	d115      	bne.n	2028c <bt_smp_request_ltk+0xe4>
   20260:	2800      	cmp	r0, #0
   20262:	d03c      	beq.n	202de <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   20264:	89c3      	ldrh	r3, [r0, #14]
   20266:	069a      	lsls	r2, r3, #26
   20268:	d511      	bpl.n	2028e <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   2026a:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2026c:	f100 011a 	add.w	r1, r0, #26
   20270:	4622      	mov	r2, r4
   20272:	4638      	mov	r0, r7
   20274:	f7fd ff9e 	bl	1e1b4 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20278:	2c0f      	cmp	r4, #15
   2027a:	d805      	bhi.n	20288 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   2027c:	4631      	mov	r1, r6
   2027e:	f1c4 0210 	rsb	r2, r4, #16
   20282:	1938      	adds	r0, r7, r4
   20284:	f7fd ffc1 	bl	1e20a <memset>
		return true;
   20288:	2601      	movs	r6, #1
   2028a:	e7c8      	b.n	2021e <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2028c:	b338      	cbz	r0, 202de <bt_smp_request_ltk+0x136>
   2028e:	89c3      	ldrh	r3, [r0, #14]
   20290:	07db      	lsls	r3, r3, #31
   20292:	d524      	bpl.n	202de <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   20294:	2208      	movs	r2, #8
   20296:	4669      	mov	r1, sp
   20298:	3040      	adds	r0, #64	; 0x40
   2029a:	f7fd ff7a 	bl	1e192 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2029e:	b9f0      	cbnz	r0, 202de <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   202a0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   202a4:	2202      	movs	r2, #2
   202a6:	a90a      	add	r1, sp, #40	; 0x28
   202a8:	3048      	adds	r0, #72	; 0x48
   202aa:	f7fd ff72 	bl	1e192 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   202ae:	4606      	mov	r6, r0
   202b0:	b9a8      	cbnz	r0, 202de <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   202b2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   202b6:	4638      	mov	r0, r7
		enc_size = conn->le.keys->enc_size;
   202b8:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   202ba:	314a      	adds	r1, #74	; 0x4a
   202bc:	4622      	mov	r2, r4
   202be:	f7fd ff79 	bl	1e1b4 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   202c2:	2c0f      	cmp	r4, #15
   202c4:	d805      	bhi.n	202d2 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   202c6:	4631      	mov	r1, r6
   202c8:	f1c4 0210 	rsb	r2, r4, #16
   202cc:	1938      	adds	r0, r7, r4
   202ce:	f7fd ff9c 	bl	1e20a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   202d2:	2101      	movs	r1, #1
   202d4:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   202d8:	f7ff fd37 	bl	1fd4a <atomic_set_bit>
		return true;
   202dc:	e7d4      	b.n	20288 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   202de:	210f      	movs	r1, #15
   202e0:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   202e4:	f7ff fbf0 	bl	1fac8 <atomic_test_bit>
   202e8:	b120      	cbz	r0, 202f4 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   202ea:	2202      	movs	r2, #2
   202ec:	2106      	movs	r1, #6
   202ee:	4620      	mov	r0, r4
   202f0:	f7f0 fef6 	bl	110e0 <bt_conn_security_changed>
	smp_reset(smp);
   202f4:	4628      	mov	r0, r5
   202f6:	f7ff fdc9 	bl	1fe8c <smp_reset>
	return false;
   202fa:	2600      	movs	r6, #0
   202fc:	e78f      	b.n	2021e <bt_smp_request_ltk+0x76>

000202fe <bt_smp_sign>:
   202fe:	f06f 0022 	mvn.w	r0, #34	; 0x22
   20302:	4770      	bx	lr

00020304 <bt_smp_start_security>:
{
   20304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   20308:	78c4      	ldrb	r4, [r0, #3]
{
   2030a:	4605      	mov	r5, r0
	switch (conn->role) {
   2030c:	b124      	cbz	r4, 20318 <bt_smp_start_security+0x14>
   2030e:	2c01      	cmp	r4, #1
   20310:	d03f      	beq.n	20392 <bt_smp_start_security+0x8e>
		return -EINVAL;
   20312:	f06f 0415 	mvn.w	r4, #21
   20316:	e005      	b.n	20324 <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   20318:	f7f5 f83a 	bl	15390 <smp_chan_get>
		if (!smp) {
   2031c:	4606      	mov	r6, r0
   2031e:	b928      	cbnz	r0, 2032c <bt_smp_start_security+0x28>
			return -ENOTCONN;
   20320:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   20324:	4620      	mov	r0, r4
   20326:	b003      	add	sp, #12
   20328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!smp_keys_check(conn)) {
   2032c:	4628      	mov	r0, r5
   2032e:	f7ff fc5f 	bl	1fbf0 <smp_keys_check>
   20332:	b928      	cbnz	r0, 20340 <bt_smp_start_security+0x3c>
			return smp_send_pairing_req(conn);
   20334:	4628      	mov	r0, r5
}
   20336:	b003      	add	sp, #12
   20338:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   2033c:	f7f5 bb84 	b.w	15a48 <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20340:	f106 07c4 	add.w	r7, r6, #196	; 0xc4
   20344:	2103      	movs	r1, #3
   20346:	4638      	mov	r0, r7
   20348:	f7ff fbbe 	bl	1fac8 <atomic_test_bit>
   2034c:	b110      	cbz	r0, 20354 <bt_smp_start_security+0x50>
			return -EBUSY;
   2034e:	f06f 040f 	mvn.w	r4, #15
   20352:	e7e7      	b.n	20324 <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   20354:	2101      	movs	r1, #1
   20356:	4638      	mov	r0, r7
   20358:	f7ff fbb6 	bl	1fac8 <atomic_test_bit>
   2035c:	2800      	cmp	r0, #0
   2035e:	d1f6      	bne.n	2034e <bt_smp_start_security+0x4a>
						  conn->le.keys->ltk.rand,
   20360:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   20364:	4628      	mov	r0, r5
   20366:	7b0b      	ldrb	r3, [r1, #12]
   20368:	f101 0218 	add.w	r2, r1, #24
   2036c:	9300      	str	r3, [sp, #0]
   2036e:	f101 031a 	add.w	r3, r1, #26
   20372:	3110      	adds	r1, #16
   20374:	f7fe fa7d 	bl	1e872 <bt_conn_le_start_encryption>
		if (err) {
   20378:	4604      	mov	r4, r0
   2037a:	2800      	cmp	r0, #0
   2037c:	d1d2      	bne.n	20324 <bt_smp_start_security+0x20>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2037e:	210b      	movs	r1, #11
   20380:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   20384:	f7ff fce1 	bl	1fd4a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20388:	2101      	movs	r1, #1
   2038a:	4638      	mov	r0, r7
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2038c:	f7ff fcdd 	bl	1fd4a <atomic_set_bit>
	return 0;
   20390:	e7c8      	b.n	20324 <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   20392:	f7f4 fffd 	bl	15390 <smp_chan_get>
	if (!smp) {
   20396:	4606      	mov	r6, r0
   20398:	2800      	cmp	r0, #0
   2039a:	d0c1      	beq.n	20320 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2039c:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   203a0:	2104      	movs	r1, #4
   203a2:	4640      	mov	r0, r8
   203a4:	f7ff fb90 	bl	1fac8 <atomic_test_bit>
   203a8:	2800      	cmp	r0, #0
   203aa:	d14b      	bne.n	20444 <bt_smp_start_security+0x140>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   203ac:	2103      	movs	r1, #3
   203ae:	4640      	mov	r0, r8
   203b0:	f7ff fb8a 	bl	1fac8 <atomic_test_bit>
   203b4:	2800      	cmp	r0, #0
   203b6:	d1ca      	bne.n	2034e <bt_smp_start_security+0x4a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   203b8:	4621      	mov	r1, r4
   203ba:	4640      	mov	r0, r8
   203bc:	f7ff fb84 	bl	1fac8 <atomic_test_bit>
   203c0:	2800      	cmp	r0, #0
   203c2:	d1c4      	bne.n	2034e <bt_smp_start_security+0x4a>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   203c4:	7aa8      	ldrb	r0, [r5, #10]
   203c6:	f7f5 f947 	bl	15658 <sec_level_reachable.isra.0>
   203ca:	b168      	cbz	r0, 203e8 <bt_smp_start_security+0xe4>
	if (!conn->le.keys) {
   203cc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   203d0:	b983      	cbnz	r3, 203f4 <bt_smp_start_security+0xf0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   203d2:	7a28      	ldrb	r0, [r5, #8]
   203d4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   203d8:	f7f6 fdba 	bl	16f50 <bt_keys_get_addr>
   203dc:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   203e0:	b940      	cbnz	r0, 203f4 <bt_smp_start_security+0xf0>
			return -ENOMEM;
   203e2:	f06f 040b 	mvn.w	r4, #11
   203e6:	e79d      	b.n	20324 <bt_smp_start_security+0x20>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   203e8:	4628      	mov	r0, r5
   203ea:	f7ff fc01 	bl	1fbf0 <smp_keys_check>
   203ee:	2800      	cmp	r0, #0
   203f0:	d1ec      	bne.n	203cc <bt_smp_start_security+0xc8>
   203f2:	e78e      	b.n	20312 <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   203f4:	4630      	mov	r0, r6
   203f6:	f7f5 f98b 	bl	15710 <smp_init>
   203fa:	4604      	mov	r4, r0
   203fc:	b110      	cbz	r0, 20404 <bt_smp_start_security+0x100>
		return -ENOBUFS;
   203fe:	f06f 0436 	mvn.w	r4, #54	; 0x36
   20402:	e78f      	b.n	20324 <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   20404:	210b      	movs	r1, #11
   20406:	4630      	mov	r0, r6
   20408:	f7ff fcc1 	bl	1fd8e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2040c:	4607      	mov	r7, r0
   2040e:	2800      	cmp	r0, #0
   20410:	d0f5      	beq.n	203fe <bt_smp_start_security+0xfa>
   20412:	2101      	movs	r1, #1
   20414:	3008      	adds	r0, #8
   20416:	f7f7 f995 	bl	17744 <net_buf_simple_add>
   2041a:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   2041c:	2009      	movs	r0, #9
   2041e:	f7f5 f83b 	bl	15498 <get_auth.constprop.0>
   20422:	4623      	mov	r3, r4
   20424:	f889 0000 	strb.w	r0, [r9]
   20428:	463a      	mov	r2, r7
   2042a:	2106      	movs	r1, #6
   2042c:	4628      	mov	r0, r5
   2042e:	9400      	str	r4, [sp, #0]
   20430:	f7fe fb7b 	bl	1eb2a <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   20434:	210f      	movs	r1, #15
   20436:	4640      	mov	r0, r8
   20438:	f7ff fc87 	bl	1fd4a <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2043c:	2101      	movs	r1, #1
   2043e:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   20442:	e7a3      	b.n	2038c <bt_smp_start_security+0x88>
		return -EIO;
   20444:	f06f 0404 	mvn.w	r4, #4
   20448:	e76c      	b.n	20324 <bt_smp_start_security+0x20>

0002044a <id_add>:
	bt_id_add(keys);
   2044a:	f7ef b8af 	b.w	f5ac <bt_id_add>

0002044e <bt_keys_get_type>:
{
   2044e:	b570      	push	{r4, r5, r6, lr}
   20450:	4604      	mov	r4, r0
   20452:	460d      	mov	r5, r1
   20454:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   20456:	f7f6 fdbb 	bl	16fd0 <bt_keys_find>
	if (keys) {
   2045a:	b938      	cbnz	r0, 2046c <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2045c:	4631      	mov	r1, r6
   2045e:	4628      	mov	r0, r5
   20460:	f7f6 fd76 	bl	16f50 <bt_keys_get_addr>
	if (!keys) {
   20464:	b110      	cbz	r0, 2046c <bt_keys_get_type+0x1e>
	keys->keys |= type;
   20466:	89c3      	ldrh	r3, [r0, #14]
   20468:	431c      	orrs	r4, r3
   2046a:	81c4      	strh	r4, [r0, #14]
}
   2046c:	bd70      	pop	{r4, r5, r6, pc}

0002046e <bt_keys_add_type>:
	keys->keys |= type;
   2046e:	89c3      	ldrh	r3, [r0, #14]
   20470:	4319      	orrs	r1, r3
   20472:	81c1      	strh	r1, [r0, #14]
}
   20474:	4770      	bx	lr

00020476 <fixed_data_unref>:
}
   20476:	4770      	bx	lr

00020478 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20478:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2047a:	6849      	ldr	r1, [r1, #4]
   2047c:	6809      	ldr	r1, [r1, #0]
   2047e:	f7f6 bf1d 	b.w	172bc <net_buf_alloc_len>

00020482 <net_buf_simple_init_with_data>:
	buf->size  = size;
   20482:	b292      	uxth	r2, r2
	buf->__buf = data;
   20484:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   20486:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   20488:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2048a:	8082      	strh	r2, [r0, #4]
}
   2048c:	4770      	bx	lr

0002048e <net_buf_simple_push_u8>:
{
   2048e:	b510      	push	{r4, lr}
   20490:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   20492:	2101      	movs	r1, #1
   20494:	f7f7 f8fe 	bl	17694 <net_buf_simple_push>
	*data = val;
   20498:	7004      	strb	r4, [r0, #0]
}
   2049a:	bd10      	pop	{r4, pc}

0002049c <net_buf_simple_pull_u8>:
{
   2049c:	b510      	push	{r4, lr}
	val = buf->data[0];
   2049e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   204a0:	2101      	movs	r1, #1
	val = buf->data[0];
   204a2:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   204a4:	f7f7 f914 	bl	176d0 <net_buf_simple_pull>
}
   204a8:	4620      	mov	r0, r4
   204aa:	bd10      	pop	{r4, pc}

000204ac <net_buf_simple_pull_le16>:
{
   204ac:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   204ae:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   204b0:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   204b2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   204b4:	f7f7 f90c 	bl	176d0 <net_buf_simple_pull>
}
   204b8:	4620      	mov	r0, r4
   204ba:	bd10      	pop	{r4, pc}

000204bc <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   204bc:	6802      	ldr	r2, [r0, #0]
   204be:	6880      	ldr	r0, [r0, #8]
}
   204c0:	1a10      	subs	r0, r2, r0
   204c2:	4770      	bx	lr

000204c4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   204c4:	8883      	ldrh	r3, [r0, #4]
   204c6:	88c2      	ldrh	r2, [r0, #6]
   204c8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   204ca:	6803      	ldr	r3, [r0, #0]
   204cc:	6880      	ldr	r0, [r0, #8]
   204ce:	1a18      	subs	r0, r3, r0
}
   204d0:	1a10      	subs	r0, r2, r0
   204d2:	4770      	bx	lr

000204d4 <net_buf_simple_add_mem>:
{
   204d4:	b538      	push	{r3, r4, r5, lr}
   204d6:	460d      	mov	r5, r1
   204d8:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   204da:	4611      	mov	r1, r2
   204dc:	f7f7 f932 	bl	17744 <net_buf_simple_add>
   204e0:	4622      	mov	r2, r4
   204e2:	4629      	mov	r1, r5
}
   204e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   204e8:	f7fd be64 	b.w	1e1b4 <memcpy>

000204ec <net_buf_simple_add_u8>:
{
   204ec:	b510      	push	{r4, lr}
   204ee:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   204f0:	2101      	movs	r1, #1
   204f2:	f7f7 f927 	bl	17744 <net_buf_simple_add>
	*u8 = val;
   204f6:	7004      	strb	r4, [r0, #0]
}
   204f8:	bd10      	pop	{r4, pc}

000204fa <net_buf_simple_add_le16>:
{
   204fa:	b510      	push	{r4, lr}
   204fc:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   204fe:	2102      	movs	r1, #2
   20500:	f7f7 f920 	bl	17744 <net_buf_simple_add>
	dst[0] = val;
   20504:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   20506:	0a24      	lsrs	r4, r4, #8
   20508:	7044      	strb	r4, [r0, #1]
}
   2050a:	bd10      	pop	{r4, pc}

0002050c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2050c:	6843      	ldr	r3, [r0, #4]
}
   2050e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20510:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   20512:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   20514:	600b      	str	r3, [r1, #0]
}
   20516:	4770      	bx	lr

00020518 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20518:	6843      	ldr	r3, [r0, #4]
   2051a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2051c:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2051e:	4042      	eors	r2, r0
   20520:	400a      	ands	r2, r1
   20522:	4042      	eors	r2, r0
    p_reg->OUT = value;
   20524:	605a      	str	r2, [r3, #4]
}
   20526:	2000      	movs	r0, #0
   20528:	4770      	bx	lr

0002052a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2052a:	6843      	ldr	r3, [r0, #4]
}
   2052c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2052e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   20530:	6099      	str	r1, [r3, #8]
}
   20532:	4770      	bx	lr

00020534 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20534:	6843      	ldr	r3, [r0, #4]
}
   20536:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20538:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2053a:	60d9      	str	r1, [r3, #12]
}
   2053c:	4770      	bx	lr

0002053e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2053e:	6843      	ldr	r3, [r0, #4]
}
   20540:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20542:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   20544:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   20546:	404b      	eors	r3, r1
    p_reg->OUT = value;
   20548:	6053      	str	r3, [r2, #4]
}
   2054a:	4770      	bx	lr

0002054c <nrf_gpio_cfg_sense_set>:
{
   2054c:	b513      	push	{r0, r1, r4, lr}
   2054e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20550:	a801      	add	r0, sp, #4
{
   20552:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20554:	f7f7 f95a 	bl	1780c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   20558:	9b01      	ldr	r3, [sp, #4]
   2055a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2055e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   20562:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   20566:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2056a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2056e:	b002      	add	sp, #8
   20570:	bd10      	pop	{r4, pc}

00020572 <cfg_level_pins>:
{
   20572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   20576:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   20578:	2500      	movs	r5, #0
	return port->data;
   2057a:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   2057c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   20580:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   20582:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   20586:	4313      	orrs	r3, r2
   20588:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   2058c:	b90c      	cbnz	r4, 20592 <cfg_level_pins+0x20>
}
   2058e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   20592:	4226      	tst	r6, r4
   20594:	d010      	beq.n	205b8 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   20596:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20598:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2059c:	40e9      	lsrs	r1, r5
   2059e:	f001 0101 	and.w	r1, r1, #1
   205a2:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   205a6:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   205aa:	b2c9      	uxtb	r1, r1
   205ac:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   205b0:	f7ff ffcc 	bl	2054c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   205b4:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   205b8:	3501      	adds	r5, #1
		bit <<= 1;
   205ba:	0076      	lsls	r6, r6, #1
   205bc:	e7e6      	b.n	2058c <cfg_level_pins+0x1a>

000205be <check_level_trigger_pins>:
{
   205be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   205c2:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   205c4:	2700      	movs	r7, #0
	return port->data;
   205c6:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   205c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   205cc:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   205ce:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   205d2:	430a      	orrs	r2, r1
   205d4:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   205d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   205dc:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   205de:	6915      	ldr	r5, [r2, #16]
   205e0:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   205e2:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   205e6:	b914      	cbnz	r4, 205ee <check_level_trigger_pins+0x30>
}
   205e8:	4628      	mov	r0, r5
   205ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   205ee:	4234      	tst	r4, r6
   205f0:	d00a      	beq.n	20608 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   205f2:	f898 0008 	ldrb.w	r0, [r8, #8]
   205f6:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   205fa:	2100      	movs	r1, #0
   205fc:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   20600:	f7ff ffa4 	bl	2054c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   20604:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   20608:	3701      	adds	r7, #1
		bit <<= 1;
   2060a:	0076      	lsls	r6, r6, #1
   2060c:	e7eb      	b.n	205e6 <check_level_trigger_pins+0x28>

0002060e <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   2060e:	6883      	ldr	r3, [r0, #8]
   20610:	689b      	ldr	r3, [r3, #8]
   20612:	4718      	bx	r3

00020614 <vipm_nrf_max_id_val_get>:
}
   20614:	2000      	movs	r0, #0
   20616:	4770      	bx	lr

00020618 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   20618:	b508      	push	{r3, lr}
   2061a:	b139      	cbz	r1, 2062c <vipm_nrf_1_set_enabled+0x14>
   2061c:	202a      	movs	r0, #42	; 0x2a
   2061e:	f7ed f859 	bl	d6d4 <arch_irq_enable>
   20622:	2001      	movs	r0, #1
   20624:	f7f8 fcf0 	bl	19008 <nrfx_ipc_receive_event_enable>
   20628:	2000      	movs	r0, #0
   2062a:	bd08      	pop	{r3, pc}
   2062c:	2001      	movs	r0, #1
   2062e:	f7f8 fd09 	bl	19044 <nrfx_ipc_receive_event_disable>
   20632:	e7f9      	b.n	20628 <vipm_nrf_1_set_enabled+0x10>

00020634 <flash_nrf_write_protection>:
}
   20634:	2000      	movs	r0, #0
   20636:	4770      	bx	lr

00020638 <is_regular_addr_valid>:
{
   20638:	b538      	push	{r3, r4, r5, lr}
   2063a:	4604      	mov	r4, r0
   2063c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2063e:	f000 f9c7 	bl	209d0 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   20642:	4284      	cmp	r4, r0
   20644:	d209      	bcs.n	2065a <is_regular_addr_valid+0x22>
   20646:	2c00      	cmp	r4, #0
   20648:	db07      	blt.n	2065a <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2064a:	42a8      	cmp	r0, r5
   2064c:	d305      	bcc.n	2065a <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2064e:	442c      	add	r4, r5
	    len > flash_size ||
   20650:	4284      	cmp	r4, r0
   20652:	bf8c      	ite	hi
   20654:	2000      	movhi	r0, #0
   20656:	2001      	movls	r0, #1
}
   20658:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2065a:	2000      	movs	r0, #0
   2065c:	e7fc      	b.n	20658 <is_regular_addr_valid+0x20>

0002065e <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   2065e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20662:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   20664:	6883      	ldr	r3, [r0, #8]
{
   20666:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   20668:	695b      	ldr	r3, [r3, #20]
   2066a:	4669      	mov	r1, sp
{
   2066c:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   2066e:	aa01      	add	r2, sp, #4
   20670:	4798      	blx	r3

	while (layout_size--) {
   20672:	e9dd 1000 	ldrd	r1, r0, [sp]
   20676:	2300      	movs	r3, #0
	off_t end = 0;
   20678:	461d      	mov	r5, r3
	off_t group_offs = 0;
   2067a:	469e      	mov	lr, r3
	size_t page_count = 0;
   2067c:	469c      	mov	ip, r3
   2067e:	3801      	subs	r0, #1
	while (layout_size--) {
   20680:	1c42      	adds	r2, r0, #1
   20682:	d102      	bne.n	2068a <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   20684:	f06f 0015 	mvn.w	r0, #21
   20688:	e019      	b.n	206be <flash_get_page_info+0x60>
			end += layout->pages_count * layout->pages_size;
   2068a:	680a      	ldr	r2, [r1, #0]
		if (use_addr) {
   2068c:	b1d7      	cbz	r7, 206c4 <flash_get_page_info+0x66>
			end += layout->pages_count * layout->pages_size;
   2068e:	f8d1 8004 	ldr.w	r8, [r1, #4]
   20692:	fb08 5502 	mla	r5, r8, r2, r5
		if (offs < end) {
   20696:	42a5      	cmp	r5, r4
   20698:	f100 30ff 	add.w	r0, r0, #4294967295
   2069c:	dd17      	ble.n	206ce <flash_get_page_info+0x70>
   2069e:	b103      	cbz	r3, 206a2 <flash_get_page_info+0x44>
   206a0:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   206a2:	9b00      	ldr	r3, [sp, #0]
   206a4:	685b      	ldr	r3, [r3, #4]
   206a6:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   206a8:	b177      	cbz	r7, 206c8 <flash_get_page_info+0x6a>
				num_in_group = (offs - group_offs) /
   206aa:	eba4 040e 	sub.w	r4, r4, lr
   206ae:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   206b2:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   206b4:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   206b8:	4464      	add	r4, ip
			info->start_offset = group_offs +
   206ba:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   206bc:	60b4      	str	r4, [r6, #8]
}
   206be:	b002      	add	sp, #8
   206c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   206c4:	4415      	add	r5, r2
   206c6:	e7e6      	b.n	20696 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   206c8:	eba4 040c 	sub.w	r4, r4, ip
   206cc:	e7f1      	b.n	206b2 <flash_get_page_info+0x54>
		group_offs += layout->pages_count * layout->pages_size;
   206ce:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   206d0:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   206d2:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   206d6:	3108      	adds	r1, #8
   206d8:	2301      	movs	r3, #1
   206da:	e7d1      	b.n	20680 <flash_get_page_info+0x22>

000206dc <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   206dc:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   206de:	2201      	movs	r2, #1
   206e0:	f7ff bfbd 	b.w	2065e <flash_get_page_info>

000206e4 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   206e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   206e8:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   206ea:	6883      	ldr	r3, [r0, #8]
{
   206ec:	b086      	sub	sp, #24
   206ee:	4688      	mov	r8, r1
   206f0:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   206f2:	695b      	ldr	r3, [r3, #20]
   206f4:	aa02      	add	r2, sp, #8
   206f6:	a901      	add	r1, sp, #4
   206f8:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   206fa:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   206fc:	4625      	mov	r5, r4
   206fe:	9b02      	ldr	r3, [sp, #8]
   20700:	42ab      	cmp	r3, r5
   20702:	d802      	bhi.n	2070a <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   20704:	b006      	add	sp, #24
   20706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2070a:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   2070c:	9f01      	ldr	r7, [sp, #4]
   2070e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   20712:	687b      	ldr	r3, [r7, #4]
   20714:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   20716:	683a      	ldr	r2, [r7, #0]
   20718:	eb0a 0306 	add.w	r3, sl, r6
   2071c:	42b2      	cmp	r2, r6
   2071e:	d802      	bhi.n	20726 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   20720:	469a      	mov	sl, r3
   20722:	3501      	adds	r5, #1
   20724:	e7eb      	b.n	206fe <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   20726:	4649      	mov	r1, r9
   20728:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2072a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2072c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2072e:	47c0      	blx	r8
   20730:	2800      	cmp	r0, #0
   20732:	d0e7      	beq.n	20704 <flash_page_foreach+0x20>
			off += page_info.size;
   20734:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   20736:	3601      	adds	r6, #1
			off += page_info.size;
   20738:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2073a:	e7ec      	b.n	20716 <flash_page_foreach+0x32>

0002073c <uarte_nrfx_config_get>:
{
   2073c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2073e:	68c2      	ldr	r2, [r0, #12]
   20740:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   20744:	e883 0003 	stmia.w	r3, {r0, r1}
}
   20748:	2000      	movs	r0, #0
   2074a:	4770      	bx	lr

0002074c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2074c:	6843      	ldr	r3, [r0, #4]
   2074e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   20750:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   20754:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   20758:	4770      	bx	lr

0002075a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2075a:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   2075c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2075e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20760:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20764:	b148      	cbz	r0, 2077a <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20766:	2000      	movs	r0, #0
	*c = data->rx_data;
   20768:	7d52      	ldrb	r2, [r2, #21]
   2076a:	700a      	strb	r2, [r1, #0]
   2076c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   20770:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20774:	2201      	movs	r2, #1
   20776:	601a      	str	r2, [r3, #0]
	return 0;
   20778:	4770      	bx	lr
		return -1;
   2077a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2077e:	4770      	bx	lr

00020780 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   20780:	6843      	ldr	r3, [r0, #4]
{
   20782:	4602      	mov	r2, r0
	return config->uarte_regs;
   20784:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20786:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2078a:	b148      	cbz	r0, 207a0 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2078c:	2000      	movs	r0, #0
	return dev->data;
   2078e:	68d2      	ldr	r2, [r2, #12]
   20790:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   20794:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20798:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2079a:	7d52      	ldrb	r2, [r2, #21]
   2079c:	700a      	strb	r2, [r1, #0]
   2079e:	6018      	str	r0, [r3, #0]
}
   207a0:	4770      	bx	lr

000207a2 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   207a2:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   207a4:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   207a6:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   207a8:	f04f 0020 	mov.w	r0, #32
   207ac:	f3ef 8311 	mrs	r3, BASEPRI
   207b0:	f380 8811 	msr	BASEPRI, r0
   207b4:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   207b8:	2000      	movs	r0, #0
   207ba:	68c9      	ldr	r1, [r1, #12]
   207bc:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   207be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   207c2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   207c6:	f383 8811 	msr	BASEPRI, r3
   207ca:	f3bf 8f6f 	isb	sy
}
   207ce:	4770      	bx	lr

000207d0 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   207d0:	2201      	movs	r2, #1
   207d2:	68c3      	ldr	r3, [r0, #12]
   207d4:	68db      	ldr	r3, [r3, #12]
   207d6:	739a      	strb	r2, [r3, #14]
}
   207d8:	4770      	bx	lr

000207da <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   207da:	68c3      	ldr	r3, [r0, #12]
   207dc:	68db      	ldr	r3, [r3, #12]
   207de:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   207e0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   207e4:	b962      	cbnz	r2, 20800 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   207e6:	6842      	ldr	r2, [r0, #4]
   207e8:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   207ea:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   207ee:	b140      	cbz	r0, 20802 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   207f0:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   207f4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   207f8:	d003      	beq.n	20802 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   207fa:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   207fc:	6119      	str	r1, [r3, #16]
   207fe:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   20800:	2000      	movs	r0, #0
}
   20802:	4770      	bx	lr

00020804 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   20804:	6843      	ldr	r3, [r0, #4]
   20806:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20808:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2080c:	3800      	subs	r0, #0
   2080e:	bf18      	it	ne
   20810:	2001      	movne	r0, #1
   20812:	4770      	bx	lr

00020814 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   20814:	2210      	movs	r2, #16
	return config->uarte_regs;
   20816:	6843      	ldr	r3, [r0, #4]
   20818:	681b      	ldr	r3, [r3, #0]
   2081a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2081e:	4770      	bx	lr

00020820 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   20820:	2210      	movs	r2, #16
	return config->uarte_regs;
   20822:	6843      	ldr	r3, [r0, #4]
   20824:	681b      	ldr	r3, [r3, #0]
   20826:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2082a:	4770      	bx	lr

0002082c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2082c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   20830:	6843      	ldr	r3, [r0, #4]
   20832:	681b      	ldr	r3, [r3, #0]
   20834:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20838:	4770      	bx	lr

0002083a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2083a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2083e:	6843      	ldr	r3, [r0, #4]
   20840:	681b      	ldr	r3, [r3, #0]
   20842:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20846:	4770      	bx	lr

00020848 <uarte_nrfx_irq_update>:
}
   20848:	2001      	movs	r0, #1
   2084a:	4770      	bx	lr

0002084c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2084c:	68c3      	ldr	r3, [r0, #12]
   2084e:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   20850:	e9c3 1200 	strd	r1, r2, [r3]
}
   20854:	4770      	bx	lr

00020856 <uarte_nrfx_irq_is_pending>:
{
   20856:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   20858:	6843      	ldr	r3, [r0, #4]
{
   2085a:	4604      	mov	r4, r0
	return config->uarte_regs;
   2085c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2085e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   20862:	025b      	lsls	r3, r3, #9
   20864:	d405      	bmi.n	20872 <uarte_nrfx_irq_is_pending+0x1c>
   20866:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2086a:	f010 0010 	ands.w	r0, r0, #16
   2086e:	d106      	bne.n	2087e <uarte_nrfx_irq_is_pending+0x28>
}
   20870:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   20872:	f7ff ffb2 	bl	207da <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   20876:	2800      	cmp	r0, #0
   20878:	d0f5      	beq.n	20866 <uarte_nrfx_irq_is_pending+0x10>
		||
   2087a:	2001      	movs	r0, #1
   2087c:	e7f8      	b.n	20870 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2087e:	4620      	mov	r0, r4
   20880:	f7ff ffc0 	bl	20804 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   20884:	3800      	subs	r0, #0
   20886:	bf18      	it	ne
   20888:	2001      	movne	r0, #1
   2088a:	e7f1      	b.n	20870 <uarte_nrfx_irq_is_pending+0x1a>

0002088c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2088c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2088e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20890:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   20894:	b938      	cbnz	r0, 208a6 <is_tx_ready.isra.0+0x1a>
   20896:	799b      	ldrb	r3, [r3, #6]
   20898:	b933      	cbnz	r3, 208a8 <is_tx_ready.isra.0+0x1c>
   2089a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2089e:	3800      	subs	r0, #0
   208a0:	bf18      	it	ne
   208a2:	2001      	movne	r0, #1
   208a4:	4770      	bx	lr
   208a6:	2001      	movs	r0, #1
}
   208a8:	4770      	bx	lr

000208aa <uarte_nrfx_fifo_fill>:
{
   208aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   208ac:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   208ae:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   208b0:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   208b2:	68f3      	ldr	r3, [r6, #12]
   208b4:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   208b6:	3310      	adds	r3, #16
   208b8:	4294      	cmp	r4, r2
   208ba:	bfa8      	it	ge
   208bc:	4614      	movge	r4, r2
   208be:	2201      	movs	r2, #1
   208c0:	e8d3 7fef 	ldaex	r7, [r3]
   208c4:	2f00      	cmp	r7, #0
   208c6:	d104      	bne.n	208d2 <uarte_nrfx_fifo_fill+0x28>
   208c8:	e8c3 2fec 	stlex	ip, r2, [r3]
   208cc:	f1bc 0f00 	cmp.w	ip, #0
   208d0:	d1f6      	bne.n	208c0 <uarte_nrfx_fifo_fill+0x16>
   208d2:	bf0c      	ite	eq
   208d4:	4613      	moveq	r3, r2
   208d6:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   208d8:	d01d      	beq.n	20916 <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   208da:	461c      	mov	r4, r3
}
   208dc:	4620      	mov	r0, r4
   208de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   208e0:	68f2      	ldr	r2, [r6, #12]
   208e2:	5ccf      	ldrb	r7, [r1, r3]
   208e4:	6892      	ldr	r2, [r2, #8]
   208e6:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   208e8:	3301      	adds	r3, #1
   208ea:	42a3      	cmp	r3, r4
   208ec:	dbf8      	blt.n	208e0 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   208ee:	f04f 0320 	mov.w	r3, #32
   208f2:	f3ef 8111 	mrs	r1, BASEPRI
   208f6:	f383 8811 	msr	BASEPRI, r3
   208fa:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   208fe:	6840      	ldr	r0, [r0, #4]
   20900:	f7ff ffc4 	bl	2088c <is_tx_ready.isra.0>
   20904:	68f3      	ldr	r3, [r6, #12]
   20906:	b940      	cbnz	r0, 2091a <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   20908:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   2090a:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   2090c:	f381 8811 	msr	BASEPRI, r1
   20910:	f3bf 8f6f 	isb	sy
	return len;
   20914:	e7e2      	b.n	208dc <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   20916:	2300      	movs	r3, #0
   20918:	e7e7      	b.n	208ea <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2091a:	689b      	ldr	r3, [r3, #8]
   2091c:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20920:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   20922:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20926:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   2092a:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   2092e:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   20932:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20936:	2301      	movs	r3, #1
   20938:	60ab      	str	r3, [r5, #8]
}
   2093a:	e7e7      	b.n	2090c <uarte_nrfx_fifo_fill+0x62>

0002093c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   2093c:	6843      	ldr	r3, [r0, #4]
{
   2093e:	b410      	push	{r4}
	return config->uarte_regs;
   20940:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   20942:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   20946:	05d2      	lsls	r2, r2, #23
   20948:	d518      	bpl.n	2097c <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2094a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2094e:	b1aa      	cbz	r2, 2097c <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   20950:	f04f 0120 	mov.w	r1, #32
   20954:	f3ef 8211 	mrs	r2, BASEPRI
   20958:	f381 8811 	msr	BASEPRI, r1
   2095c:	f3bf 8f6f 	isb	sy
   20960:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   20964:	b131      	cbz	r1, 20974 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20966:	2100      	movs	r1, #0
   20968:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2096c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20970:	2101      	movs	r1, #1
   20972:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   20974:	f382 8811 	msr	BASEPRI, r2
   20978:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   2097c:	68c2      	ldr	r2, [r0, #12]
   2097e:	68d2      	ldr	r2, [r2, #12]
   20980:	b15a      	cbz	r2, 2099a <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20982:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   20986:	b151      	cbz	r1, 2099e <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   20988:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   2098a:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   2098c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2098e:	b134      	cbz	r4, 2099e <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   20990:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   20994:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   20998:	7391      	strb	r1, [r2, #14]
}
   2099a:	bc10      	pop	{r4}
   2099c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2099e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   209a2:	b121      	cbz	r1, 209ae <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   209a4:	2100      	movs	r1, #0
   209a6:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   209aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   209ae:	6813      	ldr	r3, [r2, #0]
   209b0:	2b00      	cmp	r3, #0
   209b2:	d0f2      	beq.n	2099a <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   209b4:	6851      	ldr	r1, [r2, #4]
}
   209b6:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   209b8:	4718      	bx	r3

000209ba <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   209ba:	2101      	movs	r1, #1
   209bc:	f7f8 b828 	b.w	18a10 <dk_set_led>

000209c0 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   209c0:	2100      	movs	r1, #0
   209c2:	f7f8 b825 	b.w	18a10 <dk_set_led>

000209c6 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   209c6:	f7f8 b8a3 	b.w	18b10 <SystemCoreClockUpdate>

000209ca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   209ca:	4700      	bx	r0

000209cc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   209cc:	f000 bcb8 	b.w	21340 <z_impl_k_busy_wait>

000209d0 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   209d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   209d4:	4770      	bx	lr

000209d6 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   209d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   209da:	4770      	bx	lr

000209dc <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   209dc:	f44f 7080 	mov.w	r0, #256	; 0x100
   209e0:	4770      	bx	lr

000209e2 <metal_device_open>:
{
   209e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   209e4:	460c      	mov	r4, r1
   209e6:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   209e8:	4606      	mov	r6, r0
   209ea:	b918      	cbnz	r0, 209f4 <metal_device_open+0x12>
		return -EINVAL;
   209ec:	f06f 0015 	mvn.w	r0, #21
}
   209f0:	b002      	add	sp, #8
   209f2:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   209f4:	f7fd fba0 	bl	1e138 <strlen>
   209f8:	2800      	cmp	r0, #0
   209fa:	d0f7      	beq.n	209ec <metal_device_open+0xa>
   209fc:	2c00      	cmp	r4, #0
   209fe:	d0f5      	beq.n	209ec <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   20a00:	4620      	mov	r0, r4
   20a02:	f7fd fb99 	bl	1e138 <strlen>
   20a06:	2800      	cmp	r0, #0
   20a08:	d0f0      	beq.n	209ec <metal_device_open+0xa>
   20a0a:	2d00      	cmp	r5, #0
   20a0c:	d0ee      	beq.n	209ec <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   20a0e:	4630      	mov	r0, r6
   20a10:	a901      	add	r1, sp, #4
   20a12:	f7f8 fbf7 	bl	19204 <metal_bus_find>
	if (error)
   20a16:	2800      	cmp	r0, #0
   20a18:	d1ea      	bne.n	209f0 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   20a1a:	9801      	ldr	r0, [sp, #4]
   20a1c:	6883      	ldr	r3, [r0, #8]
   20a1e:	b11b      	cbz	r3, 20a28 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   20a20:	462a      	mov	r2, r5
   20a22:	4621      	mov	r1, r4
   20a24:	4798      	blx	r3
	if (error)
   20a26:	e7e3      	b.n	209f0 <metal_device_open+0xe>
		return -ENODEV;
   20a28:	f06f 0012 	mvn.w	r0, #18
   20a2c:	e7e0      	b.n	209f0 <metal_device_open+0xe>

00020a2e <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   20a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20a30:	6804      	ldr	r4, [r0, #0]
   20a32:	6885      	ldr	r5, [r0, #8]
		: NULL);
   20a34:	1c66      	adds	r6, r4, #1
   20a36:	d00f      	beq.n	20a58 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20a38:	42a9      	cmp	r1, r5
   20a3a:	d232      	bcs.n	20aa2 <metal_io_block_read+0x74>
		: NULL);
   20a3c:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20a3e:	185e      	adds	r6, r3, r1
   20a40:	42ae      	cmp	r6, r5
		len = io->size - offset;
   20a42:	bf88      	it	hi
   20a44:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   20a46:	6a05      	ldr	r5, [r0, #32]
   20a48:	b155      	cbz	r5, 20a60 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   20a4a:	9300      	str	r3, [sp, #0]
   20a4c:	2305      	movs	r3, #5
   20a4e:	47a8      	blx	r5
   20a50:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   20a52:	4618      	mov	r0, r3
   20a54:	b002      	add	sp, #8
   20a56:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   20a58:	42a9      	cmp	r1, r5
   20a5a:	d222      	bcs.n	20aa2 <metal_io_block_read+0x74>
   20a5c:	2400      	movs	r4, #0
   20a5e:	e7ee      	b.n	20a3e <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   20a60:	f3bf 8f5b 	dmb	ish
		while ( len && (
   20a64:	4621      	mov	r1, r4
   20a66:	4618      	mov	r0, r3
   20a68:	2800      	cmp	r0, #0
   20a6a:	d0f2      	beq.n	20a52 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   20a6c:	ea42 0401 	orr.w	r4, r2, r1
   20a70:	07a4      	lsls	r4, r4, #30
   20a72:	d10a      	bne.n	20a8a <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   20a74:	2803      	cmp	r0, #3
   20a76:	dc0e      	bgt.n	20a96 <metal_io_block_read+0x68>
   20a78:	3901      	subs	r1, #1
   20a7a:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   20a7c:	4282      	cmp	r2, r0
   20a7e:	d0e8      	beq.n	20a52 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   20a80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   20a84:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   20a88:	e7f8      	b.n	20a7c <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   20a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   20a8e:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   20a90:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   20a94:	e7e8      	b.n	20a68 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   20a96:	f851 4b04 	ldr.w	r4, [r1], #4
   20a9a:	3804      	subs	r0, #4
   20a9c:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   20aa0:	e7e8      	b.n	20a74 <metal_io_block_read+0x46>
		return -ERANGE;
   20aa2:	f06f 0325 	mvn.w	r3, #37	; 0x25
   20aa6:	e7d4      	b.n	20a52 <metal_io_block_read+0x24>

00020aa8 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   20aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20aaa:	6804      	ldr	r4, [r0, #0]
   20aac:	6885      	ldr	r5, [r0, #8]
		: NULL);
   20aae:	1c66      	adds	r6, r4, #1
   20ab0:	d00e      	beq.n	20ad0 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20ab2:	42a9      	cmp	r1, r5
   20ab4:	d230      	bcs.n	20b18 <metal_io_block_write+0x70>
		: NULL);
   20ab6:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20ab8:	185e      	adds	r6, r3, r1
   20aba:	42ae      	cmp	r6, r5
		len = io->size - offset;
   20abc:	bf88      	it	hi
   20abe:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   20ac0:	6a45      	ldr	r5, [r0, #36]	; 0x24
   20ac2:	b94d      	cbnz	r5, 20ad8 <metal_io_block_write+0x30>
   20ac4:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   20ac6:	b991      	cbnz	r1, 20aee <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   20ac8:	f3bf 8f5b 	dmb	ish
	retlen = len;
   20acc:	4618      	mov	r0, r3
   20ace:	e006      	b.n	20ade <metal_io_block_write+0x36>
	if (offset >= io->size)
   20ad0:	42a9      	cmp	r1, r5
   20ad2:	d221      	bcs.n	20b18 <metal_io_block_write+0x70>
   20ad4:	2400      	movs	r4, #0
   20ad6:	e7ef      	b.n	20ab8 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   20ad8:	9300      	str	r3, [sp, #0]
   20ada:	2305      	movs	r3, #5
   20adc:	47a8      	blx	r5
	}
	return retlen;
}
   20ade:	b002      	add	sp, #8
   20ae0:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   20ae2:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   20ae6:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   20ae8:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   20aec:	e7eb      	b.n	20ac6 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   20aee:	ea44 0002 	orr.w	r0, r4, r2
   20af2:	0780      	lsls	r0, r0, #30
   20af4:	d1f5      	bne.n	20ae2 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20af6:	2903      	cmp	r1, #3
   20af8:	dc08      	bgt.n	20b0c <metal_io_block_write+0x64>
   20afa:	3a01      	subs	r2, #1
   20afc:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   20afe:	428c      	cmp	r4, r1
   20b00:	d0e2      	beq.n	20ac8 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   20b02:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   20b06:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   20b0a:	e7f8      	b.n	20afe <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   20b0c:	f852 0b04 	ldr.w	r0, [r2], #4
   20b10:	3904      	subs	r1, #4
   20b12:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20b16:	e7ee      	b.n	20af6 <metal_io_block_write+0x4e>
		return -ERANGE;
   20b18:	f06f 0025 	mvn.w	r0, #37	; 0x25
   20b1c:	e7df      	b.n	20ade <metal_io_block_write+0x36>

00020b1e <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   20b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   20b20:	6804      	ldr	r4, [r0, #0]
   20b22:	461d      	mov	r5, r3
		: NULL);
   20b24:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   20b26:	6883      	ldr	r3, [r0, #8]
		: NULL);
   20b28:	d00e      	beq.n	20b48 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20b2a:	4299      	cmp	r1, r3
   20b2c:	d22d      	bcs.n	20b8a <metal_io_block_set+0x6c>
		: NULL);
   20b2e:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   20b30:	186e      	adds	r6, r5, r1
   20b32:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   20b34:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   20b36:	bf88      	it	hi
   20b38:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   20b3a:	b186      	cbz	r6, 20b5e <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   20b3c:	2305      	movs	r3, #5
   20b3e:	9500      	str	r5, [sp, #0]
   20b40:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   20b42:	4628      	mov	r0, r5
   20b44:	b002      	add	sp, #8
   20b46:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   20b48:	4299      	cmp	r1, r3
   20b4a:	d21e      	bcs.n	20b8a <metal_io_block_set+0x6c>
   20b4c:	2400      	movs	r4, #0
   20b4e:	e7ef      	b.n	20b30 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   20b50:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   20b54:	3b01      	subs	r3, #1
   20b56:	b923      	cbnz	r3, 20b62 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   20b58:	f3bf 8f5b 	dmb	ish
   20b5c:	e7f1      	b.n	20b42 <metal_io_block_set+0x24>
   20b5e:	462b      	mov	r3, r5
   20b60:	e7f9      	b.n	20b56 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   20b62:	07a1      	lsls	r1, r4, #30
   20b64:	d1f4      	bne.n	20b50 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   20b66:	0611      	lsls	r1, r2, #24
   20b68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   20b6c:	4311      	orrs	r1, r2
   20b6e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20b72:	2b03      	cmp	r3, #3
   20b74:	dc05      	bgt.n	20b82 <metal_io_block_set+0x64>
   20b76:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   20b78:	429c      	cmp	r4, r3
   20b7a:	d0ed      	beq.n	20b58 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   20b7c:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   20b80:	e7fa      	b.n	20b78 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   20b82:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   20b86:	3b04      	subs	r3, #4
   20b88:	e7f3      	b.n	20b72 <metal_io_block_set+0x54>
		return -ERANGE;
   20b8a:	f06f 0525 	mvn.w	r5, #37	; 0x25
   20b8e:	e7d8      	b.n	20b42 <metal_io_block_set+0x24>

00020b90 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   20b90:	2000      	movs	r0, #0
   20b92:	4770      	bx	lr

00020b94 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   20b94:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   20b96:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   20b98:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   20b9a:	b984      	cbnz	r4, 20bbe <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   20b9c:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   20b9e:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   20ba0:	291f      	cmp	r1, #31
   20ba2:	bf98      	it	ls
   20ba4:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   20ba8:	b165      	cbz	r5, 20bc4 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   20baa:	6881      	ldr	r1, [r0, #8]
   20bac:	428b      	cmp	r3, r1
   20bae:	d209      	bcs.n	20bc4 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   20bb0:	6900      	ldr	r0, [r0, #16]
   20bb2:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   20bb4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   20bb8:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   20bba:	bc30      	pop	{r4, r5}
   20bbc:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   20bbe:	4623      	mov	r3, r4
}
   20bc0:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   20bc2:	4718      	bx	r3
			: METAL_BAD_PHYS);
   20bc4:	f04f 30ff 	mov.w	r0, #4294967295
   20bc8:	e7f7      	b.n	20bba <metal_io_phys+0x26>

00020bca <virtqueue_create>:
{
   20bca:	b570      	push	{r4, r5, r6, lr}
   20bcc:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   20bce:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   20bd0:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   20bd2:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   20bd6:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   20bd8:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   20bda:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   20bdc:	1c96      	adds	r6, r2, #2
   20bde:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   20be0:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   20be4:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   20be8:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   20bea:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   20bee:	1c6e      	adds	r6, r5, #1
   20bf0:	4433      	add	r3, r6
   20bf2:	426d      	negs	r5, r5
   20bf4:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   20bf6:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20bf8:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   20bfa:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   20bfe:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   20c00:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20c02:	b96b      	cbnz	r3, 20c20 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   20c04:	3a01      	subs	r2, #1
   20c06:	4293      	cmp	r3, r2
   20c08:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   20c0c:	db0a      	blt.n	20c24 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   20c0e:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   20c10:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   20c14:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   20c18:	7393      	strb	r3, [r2, #14]
   20c1a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   20c1e:	73d3      	strb	r3, [r2, #15]
}
   20c20:	2000      	movs	r0, #0
   20c22:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   20c24:	3301      	adds	r3, #1
   20c26:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   20c28:	e7ed      	b.n	20c06 <virtqueue_create+0x3c>

00020c2a <virtqueue_add_buffer>:
{
   20c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20c2e:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   20c30:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   20c34:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20c36:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20c38:	46ba      	mov	sl, r7
{
   20c3a:	b085      	sub	sp, #20
	needed = readable + writable;
   20c3c:	18d6      	adds	r6, r2, r3
{
   20c3e:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   20c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20c42:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   20c46:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   20c48:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   20c4a:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   20c4c:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20c4e:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   20c52:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20c54:	42be      	cmp	r6, r7
   20c56:	dc19      	bgt.n	20c8c <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   20c58:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20c5a:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   20c5c:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20c5e:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   20c60:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   20c62:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   20c64:	1e51      	subs	r1, r2, #1
   20c66:	885a      	ldrh	r2, [r3, #2]
}
   20c68:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   20c6a:	400a      	ands	r2, r1
   20c6c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   20c70:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   20c74:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   20c78:	69e2      	ldr	r2, [r4, #28]
   20c7a:	8853      	ldrh	r3, [r2, #2]
   20c7c:	3301      	adds	r3, #1
   20c7e:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   20c80:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   20c82:	3301      	adds	r3, #1
   20c84:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   20c86:	b005      	add	sp, #20
   20c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   20c8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   20c8e:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   20c90:	f858 1c04 	ldr.w	r1, [r8, #-4]
   20c94:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   20c98:	9302      	str	r3, [sp, #8]
   20c9a:	6803      	ldr	r3, [r0, #0]
   20c9c:	9203      	str	r2, [sp, #12]
   20c9e:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   20ca0:	6883      	ldr	r3, [r0, #8]
   20ca2:	f108 0808 	add.w	r8, r8, #8
   20ca6:	4299      	cmp	r1, r3
   20ca8:	bf28      	it	cs
   20caa:	f04f 31ff 	movcs.w	r1, #4294967295
   20cae:	f7ff ff71 	bl	20b94 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20cb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   20cb6:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   20cb8:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   20cbc:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   20cc0:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   20cc2:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   20cc4:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   20cc8:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   20cca:	bfb6      	itet	lt
   20ccc:	2201      	movlt	r2, #1
		dp->flags = 0;
   20cce:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   20cd2:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   20cd4:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   20cd6:	bfd8      	it	le
   20cd8:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20cda:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   20cde:	bfdc      	itt	le
   20ce0:	f042 0202 	orrle.w	r2, r2, #2
   20ce4:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   20ce6:	89ed      	ldrh	r5, [r5, #14]
   20ce8:	e7b4      	b.n	20c54 <virtqueue_add_buffer+0x2a>

00020cea <virtqueue_get_buffer>:
{
   20cea:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   20cec:	b350      	cbz	r0, 20d44 <virtqueue_get_buffer+0x5a>
   20cee:	6a05      	ldr	r5, [r0, #32]
   20cf0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   20cf2:	886c      	ldrh	r4, [r5, #2]
   20cf4:	429c      	cmp	r4, r3
   20cf6:	d030      	beq.n	20d5a <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   20cf8:	1c5c      	adds	r4, r3, #1
   20cfa:	85c4      	strh	r4, [r0, #46]	; 0x2e
   20cfc:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   20cfe:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   20d02:	3c01      	subs	r4, #1
   20d04:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   20d06:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   20d0a:	686b      	ldr	r3, [r5, #4]
   20d0c:	b29e      	uxth	r6, r3
	if (len)
   20d0e:	b109      	cbz	r1, 20d14 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   20d10:	68ad      	ldr	r5, [r5, #8]
   20d12:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   20d14:	f8d0 c018 	ldr.w	ip, [r0, #24]
   20d18:	b29b      	uxth	r3, r3
   20d1a:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   20d1e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   20d22:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   20d24:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   20d26:	442f      	add	r7, r5
	dxp->ndescs--;
   20d28:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   20d2a:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   20d2c:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   20d2e:	898d      	ldrh	r5, [r1, #12]
   20d30:	076f      	lsls	r7, r5, #29
   20d32:	d50e      	bpl.n	20d52 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   20d34:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   20d36:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   20d38:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   20d3a:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   20d3c:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   20d3e:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   20d40:	b102      	cbz	r2, 20d44 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   20d42:	8014      	strh	r4, [r2, #0]
}
   20d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   20d46:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   20d48:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   20d4a:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   20d4c:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   20d50:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   20d52:	898d      	ldrh	r5, [r1, #12]
   20d54:	07ed      	lsls	r5, r5, #31
   20d56:	d4f6      	bmi.n	20d46 <virtqueue_get_buffer+0x5c>
   20d58:	e7ec      	b.n	20d34 <virtqueue_get_buffer+0x4a>
		return NULL;
   20d5a:	2000      	movs	r0, #0
   20d5c:	e7f2      	b.n	20d44 <virtqueue_get_buffer+0x5a>

00020d5e <virtqueue_get_available_buffer>:
{
   20d5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   20d62:	f3bf 8f5b 	dmb	ish
{
   20d66:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   20d68:	69c2      	ldr	r2, [r0, #28]
{
   20d6a:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   20d6c:	8853      	ldrh	r3, [r2, #2]
   20d6e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   20d70:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   20d72:	428b      	cmp	r3, r1
   20d74:	d045      	beq.n	20e02 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   20d76:	1c4b      	adds	r3, r1, #1
   20d78:	8603      	strh	r3, [r0, #48]	; 0x30
   20d7a:	8943      	ldrh	r3, [r0, #10]
   20d7c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   20d80:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   20d82:	400b      	ands	r3, r1
   20d84:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   20d88:	889a      	ldrh	r2, [r3, #4]
   20d8a:	b293      	uxth	r3, r2
   20d8c:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   20d8e:	6982      	ldr	r2, [r0, #24]
   20d90:	011b      	lsls	r3, r3, #4
   20d92:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   20d96:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   20d9a:	bb5b      	cbnz	r3, 20df4 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   20d9c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   20da0:	1c62      	adds	r2, r4, #1
   20da2:	bf09      	itett	eq
   20da4:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   20da8:	ea09 0404 	andne.w	r4, r9, r4
   20dac:	681c      	ldreq	r4, [r3, #0]
   20dae:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   20db2:	4621      	mov	r1, r4
   20db4:	4640      	mov	r0, r8
   20db6:	f7ff feed 	bl	20b94 <metal_io_phys>
   20dba:	4581      	cmp	r9, r0
   20dbc:	d009      	beq.n	20dd2 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   20dbe:	f8d8 3010 	ldr.w	r3, [r8, #16]
   20dc2:	3301      	adds	r3, #1
   20dc4:	441c      	add	r4, r3
		} while (offset < io->size);
   20dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20dca:	429c      	cmp	r4, r3
   20dcc:	d3f1      	bcc.n	20db2 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   20dce:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   20dd2:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   20dd6:	1c43      	adds	r3, r0, #1
   20dd8:	d011      	beq.n	20dfe <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   20dda:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20dde:	42a3      	cmp	r3, r4
   20de0:	d90d      	bls.n	20dfe <virtqueue_get_available_buffer+0xa0>
		: NULL);
   20de2:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   20de4:	8832      	ldrh	r2, [r6, #0]
   20de6:	69ab      	ldr	r3, [r5, #24]
   20de8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   20dec:	689b      	ldr	r3, [r3, #8]
   20dee:	603b      	str	r3, [r7, #0]
}
   20df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   20df4:	4649      	mov	r1, r9
   20df6:	4640      	mov	r0, r8
   20df8:	4798      	blx	r3
   20dfa:	4604      	mov	r4, r0
   20dfc:	e7e9      	b.n	20dd2 <virtqueue_get_available_buffer+0x74>
		: NULL);
   20dfe:	2000      	movs	r0, #0
   20e00:	e7f0      	b.n	20de4 <virtqueue_get_available_buffer+0x86>
		return NULL;
   20e02:	2000      	movs	r0, #0
   20e04:	e7f4      	b.n	20df0 <virtqueue_get_available_buffer+0x92>

00020e06 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20e06:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20e08:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20e0a:	6912      	ldr	r2, [r2, #16]
   20e0c:	0092      	lsls	r2, r2, #2
   20e0e:	d515      	bpl.n	20e3c <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20e10:	b94b      	cbnz	r3, 20e26 <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   20e12:	69c2      	ldr	r2, [r0, #28]
   20e14:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   20e16:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   20e18:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   20e1a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   20e1e:	1a1b      	subs	r3, r3, r0
   20e20:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   20e22:	8093      	strh	r3, [r2, #4]
   20e24:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   20e26:	2b01      	cmp	r3, #1
   20e28:	d10e      	bne.n	20e48 <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   20e2a:	6a02      	ldr	r2, [r0, #32]
   20e2c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   20e2e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   20e30:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   20e32:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   20e36:	1a1b      	subs	r3, r3, r0
   20e38:	3b01      	subs	r3, #1
   20e3a:	e7f2      	b.n	20e22 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   20e3c:	b92b      	cbnz	r3, 20e4a <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   20e3e:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   20e40:	8813      	ldrh	r3, [r2, #0]
   20e42:	f043 0301 	orr.w	r3, r3, #1
   20e46:	8013      	strh	r3, [r2, #0]
}
   20e48:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   20e4a:	2b01      	cmp	r3, #1
   20e4c:	d1fc      	bne.n	20e48 <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   20e4e:	6a02      	ldr	r2, [r0, #32]
   20e50:	e7f6      	b.n	20e40 <virtqueue_disable_cb+0x3a>

00020e52 <virtqueue_kick>:
{
   20e52:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   20e54:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20e58:	6803      	ldr	r3, [r0, #0]
{
   20e5a:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   20e5c:	691a      	ldr	r2, [r3, #16]
   20e5e:	699b      	ldr	r3, [r3, #24]
   20e60:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   20e64:	d019      	beq.n	20e9a <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   20e66:	b97b      	cbnz	r3, 20e88 <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   20e68:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   20e6a:	6a02      	ldr	r2, [r0, #32]
   20e6c:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   20e6e:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   20e70:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   20e74:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   20e76:	1a9b      	subs	r3, r3, r2
   20e78:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   20e7a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   20e7c:	b29b      	uxth	r3, r3
   20e7e:	429a      	cmp	r2, r3
   20e80:	d813      	bhi.n	20eaa <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   20e82:	2300      	movs	r3, #0
   20e84:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   20e86:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   20e88:	2b01      	cmp	r3, #1
   20e8a:	d1fa      	bne.n	20e82 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   20e8c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   20e8e:	69c2      	ldr	r2, [r0, #28]
   20e90:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   20e92:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   20e94:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   20e98:	e7ec      	b.n	20e74 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   20e9a:	b963      	cbnz	r3, 20eb6 <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   20e9c:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   20e9e:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   20ea0:	43db      	mvns	r3, r3
   20ea2:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   20ea6:	2b00      	cmp	r3, #0
   20ea8:	d0eb      	beq.n	20e82 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   20eaa:	6923      	ldr	r3, [r4, #16]
   20eac:	2b00      	cmp	r3, #0
   20eae:	d0e8      	beq.n	20e82 <virtqueue_kick+0x30>
		vq->notify(vq);
   20eb0:	4620      	mov	r0, r4
   20eb2:	4798      	blx	r3
   20eb4:	e7e5      	b.n	20e82 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   20eb6:	2b01      	cmp	r3, #1
   20eb8:	d1e3      	bne.n	20e82 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   20eba:	69c3      	ldr	r3, [r0, #28]
   20ebc:	e7ef      	b.n	20e9e <virtqueue_kick+0x4c>

00020ebe <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   20ebe:	69c2      	ldr	r2, [r0, #28]
   20ec0:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   20ec2:	8853      	ldrh	r3, [r2, #2]
   20ec4:	428b      	cmp	r3, r1
   20ec6:	d00a      	beq.n	20ede <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   20ec8:	8943      	ldrh	r3, [r0, #10]
   20eca:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   20ecc:	400b      	ands	r3, r1
   20ece:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   20ed2:	889a      	ldrh	r2, [r3, #4]
   20ed4:	6983      	ldr	r3, [r0, #24]
   20ed6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   20eda:	6898      	ldr	r0, [r3, #8]
	return len;
   20edc:	4770      	bx	lr
		return 0;
   20ede:	2000      	movs	r0, #0
}
   20ee0:	4770      	bx	lr

00020ee2 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   20ee2:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   20ee6:	68c3      	ldr	r3, [r0, #12]
   20ee8:	b103      	cbz	r3, 20eec <virtqueue_notification+0xa>
		vq->callback(vq);
   20eea:	4718      	bx	r3
}
   20eec:	4770      	bx	lr

00020eee <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   20eee:	f04f 32ff 	mov.w	r2, #4294967295
   20ef2:	f04f 33ff 	mov.w	r3, #4294967295
   20ef6:	f7fa bb21 	b.w	1b53c <z_impl_k_sem_take>

00020efa <rpmsg_unregister_endpoint>:
{
   20efa:	b570      	push	{r4, r5, r6, lr}
   20efc:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   20efe:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   20f00:	f105 0658 	add.w	r6, r5, #88	; 0x58
   20f04:	4630      	mov	r0, r6
   20f06:	f7ff fff2 	bl	20eee <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   20f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20f0c:	1c5a      	adds	r2, r3, #1
   20f0e:	d010      	beq.n	20f32 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   20f10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   20f14:	2b7f      	cmp	r3, #127	; 0x7f
   20f16:	d80c      	bhi.n	20f32 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   20f18:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   20f1a:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   20f1c:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   20f1e:	f003 031f 	and.w	r3, r3, #31
   20f22:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   20f26:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   20f2a:	ea22 0203 	bic.w	r2, r2, r3
   20f2e:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   20f32:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   20f36:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   20f3a:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   20f3c:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   20f3e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   20f42:	2300      	movs	r3, #0
   20f44:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   20f46:	4630      	mov	r0, r6
}
   20f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20f4c:	f7fa baba 	b.w	1b4c4 <z_impl_k_sem_give>

00020f50 <rpmsg_send_ns_message>:
{
   20f50:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   20f52:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   20f54:	b08c      	sub	sp, #48	; 0x30
   20f56:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   20f58:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   20f5a:	2220      	movs	r2, #32
   20f5c:	4601      	mov	r1, r0
   20f5e:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   20f60:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   20f62:	f7fd f8d7 	bl	1e114 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   20f66:	2328      	movs	r3, #40	; 0x28
   20f68:	2201      	movs	r2, #1
   20f6a:	4620      	mov	r0, r4
   20f6c:	e9cd 3200 	strd	r3, r2, [sp]
   20f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
   20f72:	2235      	movs	r2, #53	; 0x35
   20f74:	ab02      	add	r3, sp, #8
   20f76:	f7f8 fa71 	bl	1945c <rpmsg_send_offchannel_raw>
}
   20f7a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   20f7e:	b00c      	add	sp, #48	; 0x30
   20f80:	bd10      	pop	{r4, pc}

00020f82 <rpmsg_get_endpoint>:
{
   20f82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20f86:	4680      	mov	r8, r0
   20f88:	4689      	mov	r9, r1
   20f8a:	4615      	mov	r5, r2
   20f8c:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   20f8e:	6807      	ldr	r7, [r0, #0]
   20f90:	45b8      	cmp	r8, r7
   20f92:	d101      	bne.n	20f98 <rpmsg_get_endpoint+0x16>
	return NULL;
   20f94:	2400      	movs	r4, #0
   20f96:	e021      	b.n	20fdc <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   20f98:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   20f9a:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   20f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20fa0:	d006      	beq.n	20fb0 <rpmsg_get_endpoint+0x2e>
   20fa2:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   20fa4:	d01a      	beq.n	20fdc <rpmsg_get_endpoint+0x5a>
		if (name)
   20fa6:	f1b9 0f00 	cmp.w	r9, #0
   20faa:	d106      	bne.n	20fba <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   20fac:	683f      	ldr	r7, [r7, #0]
   20fae:	e7ef      	b.n	20f90 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   20fb0:	3301      	adds	r3, #1
   20fb2:	d1f8      	bne.n	20fa6 <rpmsg_get_endpoint+0x24>
   20fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20fb6:	42b3      	cmp	r3, r6
   20fb8:	e7f4      	b.n	20fa4 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   20fba:	2220      	movs	r2, #32
   20fbc:	4649      	mov	r1, r9
   20fbe:	4620      	mov	r0, r4
   20fc0:	f7fd f8d6 	bl	1e170 <strncmp>
		if (!name || !name_match)
   20fc4:	2800      	cmp	r0, #0
   20fc6:	d1f1      	bne.n	20fac <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   20fc8:	1c72      	adds	r2, r6, #1
   20fca:	d002      	beq.n	20fd2 <rpmsg_get_endpoint+0x50>
   20fcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20fce:	42b3      	cmp	r3, r6
   20fd0:	d004      	beq.n	20fdc <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   20fd2:	1c6b      	adds	r3, r5, #1
   20fd4:	d1ea      	bne.n	20fac <rpmsg_get_endpoint+0x2a>
   20fd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20fd8:	3301      	adds	r3, #1
   20fda:	d1e7      	bne.n	20fac <rpmsg_get_endpoint+0x2a>
}
   20fdc:	4620      	mov	r0, r4
   20fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020fe2 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   20fe2:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   20fe4:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   20fe8:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   20fec:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   20fee:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   20ff0:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   20ff2:	6013      	str	r3, [r2, #0]
}
   20ff4:	4770      	bx	lr

00020ff6 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   20ff6:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   20ff8:	4604      	mov	r4, r0
   20ffa:	b190      	cbz	r0, 21022 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   20ffc:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   20ffe:	b183      	cbz	r3, 21022 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   21000:	7802      	ldrb	r2, [r0, #0]
   21002:	b14a      	cbz	r2, 21018 <rpmsg_destroy_ept+0x22>
   21004:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   21008:	b133      	cbz	r3, 21018 <rpmsg_destroy_ept+0x22>
   2100a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2100c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   21010:	d302      	bcc.n	21018 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   21012:	2101      	movs	r1, #1
   21014:	f7ff ff9c 	bl	20f50 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   21018:	4620      	mov	r0, r4
}
   2101a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2101e:	f7ff bf6c 	b.w	20efa <rpmsg_unregister_endpoint>
}
   21022:	bd10      	pop	{r4, pc}

00021024 <rpmsg_virtio_tx_callback>:
}
   21024:	4770      	bx	lr

00021026 <k_sem_give>:
   21026:	f7fa ba4d 	b.w	1b4c4 <z_impl_k_sem_give>

0002102a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2102a:	f04f 32ff 	mov.w	r2, #4294967295
   2102e:	f04f 33ff 	mov.w	r3, #4294967295
   21032:	f7fa ba83 	b.w	1b53c <z_impl_k_sem_take>

00021036 <rpmsg_virtio_ns_callback>:
{
   21036:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   2103a:	2a28      	cmp	r2, #40	; 0x28
{
   2103c:	4680      	mov	r8, r0
   2103e:	460e      	mov	r6, r1
   21040:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   21042:	d12b      	bne.n	2109c <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   21044:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   21046:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   21048:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   2104c:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   2104e:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   21050:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   21052:	1a71      	subs	r1, r6, r1
   21054:	42a1      	cmp	r1, r4
   21056:	bf28      	it	cs
   21058:	f04f 31ff 	movcs.w	r1, #4294967295
   2105c:	f7ff fce7 	bl	20a2e <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   21060:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   21064:	f8d6 9020 	ldr.w	r9, [r6, #32]
   21068:	4638      	mov	r0, r7
   2106a:	f7ff ffde 	bl	2102a <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2106e:	464b      	mov	r3, r9
   21070:	f04f 32ff 	mov.w	r2, #4294967295
   21074:	4669      	mov	r1, sp
   21076:	4628      	mov	r0, r5
   21078:	f7ff ff83 	bl	20f82 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2107c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2107e:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   21080:	07db      	lsls	r3, r3, #31
   21082:	d50f      	bpl.n	210a4 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   21084:	b110      	cbz	r0, 2108c <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   21086:	f04f 33ff 	mov.w	r3, #4294967295
   2108a:	6283      	str	r3, [r0, #40]	; 0x28
   2108c:	4638      	mov	r0, r7
   2108e:	f7ff ffca 	bl	21026 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   21092:	b11c      	cbz	r4, 2109c <rpmsg_virtio_ns_callback+0x66>
   21094:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21096:	b10b      	cbz	r3, 2109c <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   21098:	4640      	mov	r0, r8
   2109a:	4798      	blx	r3
}
   2109c:	2000      	movs	r0, #0
   2109e:	b009      	add	sp, #36	; 0x24
   210a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   210a4:	b950      	cbnz	r0, 210bc <rpmsg_virtio_ns_callback+0x86>
   210a6:	4638      	mov	r0, r7
   210a8:	f7ff ffbd 	bl	21026 <k_sem_give>
			if (rdev->ns_bind_cb)
   210ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   210ae:	2b00      	cmp	r3, #0
   210b0:	d0f4      	beq.n	2109c <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   210b2:	464a      	mov	r2, r9
   210b4:	4669      	mov	r1, sp
   210b6:	4628      	mov	r0, r5
   210b8:	4798      	blx	r3
   210ba:	e7ef      	b.n	2109c <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   210bc:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   210c0:	4638      	mov	r0, r7
   210c2:	f7ff ffb0 	bl	21026 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   210c6:	e7e9      	b.n	2109c <rpmsg_virtio_ns_callback+0x66>

000210c8 <rpmsg_virtio_get_rx_buffer>:
{
   210c8:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   210ca:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   210cc:	4613      	mov	r3, r2
   210ce:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   210d0:	b925      	cbnz	r5, 210dc <rpmsg_virtio_get_rx_buffer+0x14>
}
   210d2:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   210d4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   210d8:	f7ff be07 	b.w	20cea <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   210dc:	2d01      	cmp	r5, #1
   210de:	d106      	bne.n	210ee <rpmsg_virtio_get_rx_buffer+0x26>
}
   210e0:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   210e2:	460a      	mov	r2, r1
   210e4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   210e8:	4619      	mov	r1, r3
   210ea:	f7ff be38 	b.w	20d5e <virtqueue_get_available_buffer>
}
   210ee:	2000      	movs	r0, #0
   210f0:	bc30      	pop	{r4, r5}
   210f2:	4770      	bx	lr

000210f4 <rpmsg_virtio_rx_callback>:
{
   210f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   210f8:	6803      	ldr	r3, [r0, #0]
{
   210fa:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   210fc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   210fe:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   21102:	4638      	mov	r0, r7
   21104:	f7ff ff91 	bl	2102a <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   21108:	4630      	mov	r0, r6
   2110a:	f10d 020a 	add.w	r2, sp, #10
   2110e:	a903      	add	r1, sp, #12
   21110:	f7ff ffda 	bl	210c8 <rpmsg_virtio_get_rx_buffer>
   21114:	4604      	mov	r4, r0
   21116:	4638      	mov	r0, r7
   21118:	f7ff ff85 	bl	21026 <k_sem_give>
	while (rp_hdr) {
   2111c:	b914      	cbnz	r4, 21124 <rpmsg_virtio_rx_callback+0x30>
}
   2111e:	b006      	add	sp, #24
   21120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21124:	4638      	mov	r0, r7
   21126:	f7ff ff80 	bl	2102a <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   2112a:	f04f 33ff 	mov.w	r3, #4294967295
   2112e:	2100      	movs	r1, #0
   21130:	4630      	mov	r0, r6
   21132:	6862      	ldr	r2, [r4, #4]
   21134:	f7ff ff25 	bl	20f82 <rpmsg_get_endpoint>
   21138:	4605      	mov	r5, r0
   2113a:	4638      	mov	r0, r7
   2113c:	f7ff ff73 	bl	21026 <k_sem_give>
		if (ept) {
   21140:	b185      	cbz	r5, 21164 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   21142:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   21144:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   21146:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   21148:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   2114a:	bf08      	it	eq
   2114c:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   2114e:	89a2      	ldrh	r2, [r4, #12]
   21150:	9100      	str	r1, [sp, #0]
   21152:	4628      	mov	r0, r5
   21154:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   21158:	f104 0110 	add.w	r1, r4, #16
   2115c:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   2115e:	2800      	cmp	r0, #0
   21160:	da00      	bge.n	21164 <rpmsg_virtio_rx_callback+0x70>
   21162:	e7fe      	b.n	21162 <rpmsg_virtio_rx_callback+0x6e>
   21164:	4638      	mov	r0, r7
   21166:	f7ff ff60 	bl	2102a <__metal_mutex_acquire>
   2116a:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2116c:	9b03      	ldr	r3, [sp, #12]
   2116e:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   21170:	b9b2      	cbnz	r2, 211a0 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   21172:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   21174:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   21178:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   2117c:	2301      	movs	r3, #1
   2117e:	a904      	add	r1, sp, #16
   21180:	f7ff fd53 	bl	20c2a <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   21184:	4630      	mov	r0, r6
   21186:	f10d 020a 	add.w	r2, sp, #10
   2118a:	a903      	add	r1, sp, #12
   2118c:	f7ff ff9c 	bl	210c8 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   21190:	4604      	mov	r4, r0
   21192:	2800      	cmp	r0, #0
   21194:	d1bf      	bne.n	21116 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   21196:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   2119a:	f7ff fe5a 	bl	20e52 <virtqueue_kick>
   2119e:	e7ba      	b.n	21116 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   211a0:	2a01      	cmp	r2, #1
   211a2:	d1ef      	bne.n	21184 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   211a4:	461a      	mov	r2, r3
   211a6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   211aa:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   211ae:	f7f8 f939 	bl	19424 <virtqueue_add_consumed_buffer>
   211b2:	e7e7      	b.n	21184 <rpmsg_virtio_rx_callback+0x90>

000211b4 <_rpmsg_virtio_get_buffer_size>:
{
   211b4:	b508      	push	{r3, lr}
   211b6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   211b8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   211ba:	b14b      	cbz	r3, 211d0 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   211bc:	2b01      	cmp	r3, #1
   211be:	d10a      	bne.n	211d6 <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   211c0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   211c4:	f7ff fe7b 	bl	20ebe <virtqueue_get_desc_size>
   211c8:	3810      	subs	r0, #16
   211ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   211ce:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   211d0:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   211d4:	e7fb      	b.n	211ce <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   211d6:	2000      	movs	r0, #0
	return length;
   211d8:	e7f9      	b.n	211ce <_rpmsg_virtio_get_buffer_size+0x1a>

000211da <rpmsg_virtio_shm_pool_get_buffer>:
{
   211da:	4603      	mov	r3, r0
	if (shpool->avail < size)
   211dc:	6842      	ldr	r2, [r0, #4]
{
   211de:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   211e0:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   211e2:	bf29      	itett	cs
   211e4:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   211e6:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   211e8:	1a84      	subcs	r4, r0, r2
   211ea:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   211ec:	bf22      	ittt	cs
   211ee:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   211f0:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   211f2:	605a      	strcs	r2, [r3, #4]
}
   211f4:	bd10      	pop	{r4, pc}

000211f6 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   211f6:	b110      	cbz	r0, 211fe <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   211f8:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   211fc:	6001      	str	r1, [r0, #0]
}
   211fe:	4770      	bx	lr

00021200 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   21200:	f7fc b91f 	b.w	1d442 <z_clock_idle_exit>

00021204 <k_heap_init>:
{
   21204:	b410      	push	{r4}
   21206:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2120a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2120e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   21210:	f7e9 b9c2 	b.w	a598 <sys_heap_init>

00021214 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   21214:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21218:	428b      	cmp	r3, r1
   2121a:	d001      	beq.n	21220 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2121c:	f7f9 bf20 	b.w	1b060 <z_set_prio>
}
   21220:	2000      	movs	r0, #0
   21222:	4770      	bx	lr

00021224 <z_impl_k_mutex_init>:
{
   21224:	4603      	mov	r3, r0
	mutex->owner = NULL;
   21226:	2000      	movs	r0, #0
   21228:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2122c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   21230:	4770      	bx	lr

00021232 <z_queue_node_peek>:
{
   21232:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   21234:	4604      	mov	r4, r0
   21236:	b130      	cbz	r0, 21246 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21238:	6802      	ldr	r2, [r0, #0]
   2123a:	0793      	lsls	r3, r2, #30
   2123c:	d003      	beq.n	21246 <z_queue_node_peek+0x14>
		ret = anode->data;
   2123e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   21240:	b109      	cbz	r1, 21246 <z_queue_node_peek+0x14>
			k_free(anode);
   21242:	f000 f982 	bl	2154a <k_free>
}
   21246:	4620      	mov	r0, r4
   21248:	bd10      	pop	{r4, pc}

0002124a <z_impl_k_queue_init>:
	list->head = NULL;
   2124a:	2300      	movs	r3, #0
	list->tail = NULL;
   2124c:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   21250:	6083      	str	r3, [r0, #8]
   21252:	f100 030c 	add.w	r3, r0, #12
   21256:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2125a:	f100 0314 	add.w	r3, r0, #20
   2125e:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   21262:	4770      	bx	lr

00021264 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   21264:	2301      	movs	r3, #1
{
   21266:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   21268:	9300      	str	r3, [sp, #0]
   2126a:	2300      	movs	r3, #0
{
   2126c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2126e:	4619      	mov	r1, r3
   21270:	f7f8 ffde 	bl	1a230 <queue_insert>
}
   21274:	b003      	add	sp, #12
   21276:	f85d fb04 	ldr.w	pc, [sp], #4

0002127a <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   2127a:	2300      	movs	r3, #0
{
   2127c:	b507      	push	{r0, r1, r2, lr}
   2127e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   21280:	9300      	str	r3, [sp, #0]
   21282:	4619      	mov	r1, r3
   21284:	f7f8 ffd4 	bl	1a230 <queue_insert>
}
   21288:	b003      	add	sp, #12
   2128a:	f85d fb04 	ldr.w	pc, [sp], #4

0002128e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2128e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   21292:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   21296:	4298      	cmp	r0, r3
   21298:	bfac      	ite	ge
   2129a:	2000      	movge	r0, #0
   2129c:	2001      	movlt	r0, #1
   2129e:	4770      	bx	lr

000212a0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   212a0:	4603      	mov	r3, r0
   212a2:	b920      	cbnz	r0, 212ae <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   212a4:	f3ef 8205 	mrs	r2, IPSR
   212a8:	b90a      	cbnz	r2, 212ae <z_reschedule_irqlock+0xe>
   212aa:	f7ec b9b9 	b.w	d620 <arch_swap>
   212ae:	f383 8811 	msr	BASEPRI, r3
   212b2:	f3bf 8f6f 	isb	sy
}
   212b6:	4770      	bx	lr

000212b8 <z_reschedule_unlocked>:
	__asm__ volatile(
   212b8:	f04f 0320 	mov.w	r3, #32
   212bc:	f3ef 8011 	mrs	r0, BASEPRI
   212c0:	f383 8811 	msr	BASEPRI, r3
   212c4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   212c8:	f7ff bfea 	b.w	212a0 <z_reschedule_irqlock>

000212cc <unpend_thread_no_timeout>:
{
   212cc:	b510      	push	{r4, lr}
   212ce:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   212d0:	f7f9 f8e8 	bl	1a4a4 <pended_on>
   212d4:	4621      	mov	r1, r4
   212d6:	f7f9 f9ed 	bl	1a6b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   212da:	7b63      	ldrb	r3, [r4, #13]
   212dc:	f023 0302 	bic.w	r3, r3, #2
   212e0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   212e2:	2300      	movs	r3, #0
   212e4:	60a3      	str	r3, [r4, #8]
}
   212e6:	bd10      	pop	{r4, pc}

000212e8 <z_priq_dumb_best>:
{
   212e8:	4603      	mov	r3, r0
	return list->head == list;
   212ea:	6800      	ldr	r0, [r0, #0]
}
   212ec:	4283      	cmp	r3, r0
   212ee:	bf08      	it	eq
   212f0:	2000      	moveq	r0, #0
   212f2:	4770      	bx	lr

000212f4 <z_unpend_all>:
{
   212f4:	b538      	push	{r3, r4, r5, lr}
   212f6:	4605      	mov	r5, r0
	int need_sched = 0;
   212f8:	2000      	movs	r0, #0
   212fa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   212fc:	42a5      	cmp	r5, r4
   212fe:	d000      	beq.n	21302 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21300:	b904      	cbnz	r4, 21304 <z_unpend_all+0x10>
}
   21302:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   21304:	4620      	mov	r0, r4
   21306:	f7f9 fa01 	bl	1a70c <z_unpend_thread>
		z_ready_thread(thread);
   2130a:	4620      	mov	r0, r4
   2130c:	f7f9 fb18 	bl	1a940 <z_ready_thread>
		need_sched = 1;
   21310:	2001      	movs	r0, #1
   21312:	e7f2      	b.n	212fa <z_unpend_all+0x6>

00021314 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   21314:	b15a      	cbz	r2, 2132e <z_impl_k_sem_init+0x1a>
   21316:	428a      	cmp	r2, r1
   21318:	d309      	bcc.n	2132e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2131a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2131e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   21322:	e9c0 0000 	strd	r0, r0, [r0]
   21326:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2132a:	2000      	movs	r0, #0
   2132c:	4770      	bx	lr
		return -EINVAL;
   2132e:	f06f 0015 	mvn.w	r0, #21
}
   21332:	4770      	bx	lr

00021334 <k_is_in_isr>:
   21334:	f3ef 8005 	mrs	r0, IPSR
}
   21338:	3800      	subs	r0, #0
   2133a:	bf18      	it	ne
   2133c:	2001      	movne	r0, #1
   2133e:	4770      	bx	lr

00021340 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   21340:	b108      	cbz	r0, 21346 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   21342:	f7e9 bd73 	b.w	ae2c <arch_busy_wait>
}
   21346:	4770      	bx	lr

00021348 <z_impl_k_thread_name_set>:
}
   21348:	f06f 0046 	mvn.w	r0, #70	; 0x46
   2134c:	4770      	bx	lr

0002134e <k_thread_name_get>:
}
   2134e:	2000      	movs	r0, #0
   21350:	4770      	bx	lr

00021352 <k_work_submit_to_queue>:
{
   21352:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21354:	f101 0308 	add.w	r3, r1, #8
   21358:	e8d3 2fef 	ldaex	r2, [r3]
   2135c:	f042 0c01 	orr.w	ip, r2, #1
   21360:	e8c3 cfee 	stlex	lr, ip, [r3]
   21364:	f1be 0f00 	cmp.w	lr, #0
   21368:	d1f6      	bne.n	21358 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2136a:	07d3      	lsls	r3, r2, #31
   2136c:	d403      	bmi.n	21376 <k_work_submit_to_queue+0x24>
}
   2136e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   21372:	f7ff bf77 	b.w	21264 <k_queue_append>
}
   21376:	f85d fb04 	ldr.w	pc, [sp], #4

0002137a <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2137a:	f1a0 0110 	sub.w	r1, r0, #16
   2137e:	6980      	ldr	r0, [r0, #24]
   21380:	f7ff bfe7 	b.w	21352 <k_work_submit_to_queue>

00021384 <work_cancel>:
{
   21384:	b570      	push	{r4, r5, r6, lr}
   21386:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   21388:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2138c:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   21390:	07db      	lsls	r3, r3, #31
   21392:	d52f      	bpl.n	213f4 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   21394:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   21396:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   21398:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2139a:	b913      	cbnz	r3, 213a2 <work_cancel+0x1e>
			return -EINVAL;
   2139c:	f06f 0015 	mvn.w	r0, #21
}
   213a0:	bd70      	pop	{r4, r5, r6, pc}
   213a2:	429c      	cmp	r4, r3
   213a4:	d121      	bne.n	213ea <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   213a6:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   213a8:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   213aa:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   213ae:	b991      	cbnz	r1, 213d6 <work_cancel+0x52>
   213b0:	42b4      	cmp	r4, r6
	list->head = node;
   213b2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   213b4:	d100      	bne.n	213b8 <work_cancel+0x34>
	list->tail = node;
   213b6:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   213b8:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   213ba:	f003 0303 	and.w	r3, r3, #3
   213be:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   213c0:	2000      	movs	r0, #0
   213c2:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   213c4:	e8d5 3fef 	ldaex	r3, [r5]
   213c8:	f023 0301 	bic.w	r3, r3, #1
   213cc:	e8c5 3fe2 	stlex	r2, r3, [r5]
   213d0:	2a00      	cmp	r2, #0
   213d2:	d0e5      	beq.n	213a0 <work_cancel+0x1c>
   213d4:	e7f6      	b.n	213c4 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   213d6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   213d8:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   213da:	f003 0303 	and.w	r3, r3, #3
   213de:	ea43 0300 	orr.w	r3, r3, r0
   213e2:	600b      	str	r3, [r1, #0]
	list->tail = node;
   213e4:	bf08      	it	eq
   213e6:	6051      	streq	r1, [r2, #4]
}
   213e8:	e7e6      	b.n	213b8 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   213ea:	6818      	ldr	r0, [r3, #0]
   213ec:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   213ee:	f020 0303 	bic.w	r3, r0, #3
   213f2:	e7d2      	b.n	2139a <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   213f4:	3010      	adds	r0, #16
   213f6:	f7fa fc95 	bl	1bd24 <z_abort_timeout>
		if (err) {
   213fa:	2800      	cmp	r0, #0
   213fc:	d0e0      	beq.n	213c0 <work_cancel+0x3c>
			return -EALREADY;
   213fe:	f06f 0044 	mvn.w	r0, #68	; 0x44
   21402:	e7cd      	b.n	213a0 <work_cancel+0x1c>

00021404 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   21404:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   21406:	f7fa fddb 	bl	1bfc0 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2140a:	bd08      	pop	{r3, pc}

0002140c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2140c:	f7fa bdd8 	b.w	1bfc0 <z_tick_get>

00021410 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21410:	f1b1 3fff 	cmp.w	r1, #4294967295
   21414:	bf08      	it	eq
   21416:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2141a:	b538      	push	{r3, r4, r5, lr}
   2141c:	4605      	mov	r5, r0
   2141e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21420:	d01d      	beq.n	2145e <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21422:	ea51 0300 	orrs.w	r3, r1, r0
   21426:	d103      	bne.n	21430 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   21428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2142c:	f7fa bdc8 	b.w	1bfc0 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   21430:	f06f 0301 	mvn.w	r3, #1
   21434:	1a18      	subs	r0, r3, r0
   21436:	f04f 33ff 	mov.w	r3, #4294967295
   2143a:	eb63 0101 	sbc.w	r1, r3, r1
   2143e:	2900      	cmp	r1, #0
   21440:	da0c      	bge.n	2145c <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   21442:	f7fa fdbd 	bl	1bfc0 <z_tick_get>
   21446:	2d01      	cmp	r5, #1
   21448:	4622      	mov	r2, r4
   2144a:	f174 0400 	sbcs.w	r4, r4, #0
   2144e:	462b      	mov	r3, r5
   21450:	bfbc      	itt	lt
   21452:	2301      	movlt	r3, #1
   21454:	2200      	movlt	r2, #0
   21456:	1818      	adds	r0, r3, r0
   21458:	eb41 0102 	adc.w	r1, r1, r2
}
   2145c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2145e:	f04f 30ff 	mov.w	r0, #4294967295
   21462:	4601      	mov	r1, r0
   21464:	e7fa      	b.n	2145c <z_timeout_end_calc+0x4c>

00021466 <k_work_submit_to_queue>:
{
   21466:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21468:	f101 0308 	add.w	r3, r1, #8
   2146c:	e8d3 2fef 	ldaex	r2, [r3]
   21470:	f042 0c01 	orr.w	ip, r2, #1
   21474:	e8c3 cfee 	stlex	lr, ip, [r3]
   21478:	f1be 0f00 	cmp.w	lr, #0
   2147c:	d1f6      	bne.n	2146c <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2147e:	07d3      	lsls	r3, r2, #31
   21480:	d403      	bmi.n	2148a <k_work_submit_to_queue+0x24>
}
   21482:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   21486:	f7ff beed 	b.w	21264 <k_queue_append>
}
   2148a:	f85d fb04 	ldr.w	pc, [sp], #4

0002148e <add_event>:
{
   2148e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21490:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   21492:	e9d0 2300 	ldrd	r2, r3, [r0]
   21496:	4290      	cmp	r0, r2
   21498:	4604      	mov	r4, r0
   2149a:	460d      	mov	r5, r1
   2149c:	d106      	bne.n	214ac <add_event+0x1e>
	node->prev = list->tail;
   2149e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   214a0:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   214a2:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   214a4:	6863      	ldr	r3, [r4, #4]
   214a6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   214a8:	6065      	str	r5, [r4, #4]
}
   214aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   214ac:	2b00      	cmp	r3, #0
   214ae:	d0f6      	beq.n	2149e <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   214b0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   214b2:	b100      	cbz	r0, 214b6 <add_event+0x28>
   214b4:	386c      	subs	r0, #108	; 0x6c
   214b6:	b107      	cbz	r7, 214ba <add_event+0x2c>
   214b8:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   214ba:	4639      	mov	r1, r7
   214bc:	f7ff fee7 	bl	2128e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   214c0:	2800      	cmp	r0, #0
   214c2:	d1ec      	bne.n	2149e <add_event+0x10>
	return list->head == list;
   214c4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   214c6:	42b4      	cmp	r4, r6
   214c8:	d0e9      	beq.n	2149e <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   214ca:	2e00      	cmp	r6, #0
   214cc:	d0e7      	beq.n	2149e <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   214ce:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   214d0:	b101      	cbz	r1, 214d4 <add_event+0x46>
   214d2:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   214d4:	4638      	mov	r0, r7
   214d6:	f7ff feda 	bl	2128e <z_is_t1_higher_prio_than_t2>
   214da:	b128      	cbz	r0, 214e8 <add_event+0x5a>
	node->prev = successor->prev;
   214dc:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   214de:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   214e2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   214e4:	6075      	str	r5, [r6, #4]
			return;
   214e6:	e7e0      	b.n	214aa <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   214e8:	6863      	ldr	r3, [r4, #4]
   214ea:	429e      	cmp	r6, r3
   214ec:	d0d7      	beq.n	2149e <add_event+0x10>
   214ee:	6836      	ldr	r6, [r6, #0]
   214f0:	e7eb      	b.n	214ca <add_event+0x3c>

000214f2 <z_handle_obj_poll_events>:
{
   214f2:	4603      	mov	r3, r0
	return list->head == list;
   214f4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   214f6:	4283      	cmp	r3, r0
   214f8:	d008      	beq.n	2150c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   214fa:	e9d0 3200 	ldrd	r3, r2, [r0]
   214fe:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   21500:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21502:	2300      	movs	r3, #0
	node->prev = NULL;
   21504:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   21508:	f7fa bd98 	b.w	1c03c <signal_poll_event>
}
   2150c:	4770      	bx	lr

0002150e <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   2150e:	2904      	cmp	r1, #4
{
   21510:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   21514:	460d      	mov	r5, r1
   21516:	bf38      	it	cc
   21518:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2151a:	1952      	adds	r2, r2, r5
{
   2151c:	4606      	mov	r6, r0
   2151e:	d209      	bcs.n	21534 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   21520:	f04f 0800 	mov.w	r8, #0
   21524:	f04f 0900 	mov.w	r9, #0
   21528:	e9cd 8900 	strd	r8, r9, [sp]
   2152c:	f7f8 fb72 	bl	19c14 <k_heap_aligned_alloc>
	if (mem == NULL) {
   21530:	4604      	mov	r4, r0
   21532:	b918      	cbnz	r0, 2153c <z_heap_aligned_alloc+0x2e>
		return NULL;
   21534:	2000      	movs	r0, #0
}
   21536:	b002      	add	sp, #8
   21538:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   2153c:	462a      	mov	r2, r5
   2153e:	21ff      	movs	r1, #255	; 0xff
   21540:	f7fc fe63 	bl	1e20a <memset>
	*heap_ref = heap;
   21544:	6026      	str	r6, [r4, #0]
	return mem + excess;
   21546:	1960      	adds	r0, r4, r5
   21548:	e7f5      	b.n	21536 <z_heap_aligned_alloc+0x28>

0002154a <k_free>:
	if (ptr != NULL) {
   2154a:	b138      	cbz	r0, 2155c <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2154c:	1f03      	subs	r3, r0, #4
   2154e:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   21550:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   21554:	1c42      	adds	r2, r0, #1
   21556:	d0fa      	beq.n	2154e <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   21558:	f7f8 bbe4 	b.w	19d24 <k_heap_free>
}
   2155c:	4770      	bx	lr

0002155e <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2155e:	4770      	bx	lr
