
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	38 25 01 20 65 dd 00 00 79 bc 01 00 95 dd 00 00     8%. e...y.......
    8010:	95 dd 00 00 95 dd 00 00 95 dd 00 00 95 dd 00 00     ................
	...
    802c:	2d db 00 00 95 dd 00 00 00 00 00 00 d1 da 00 00     -...............
    803c:	69 c5 00 00                                         i...

00008040 <_irq_vector_table>:
    8040:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8050:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8060:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8070:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8080:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8090:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    80a0:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    80b0:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    80c0:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    80d0:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    80e0:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    80f0:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8100:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8110:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8120:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8130:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8140:	25 dd 00 00 25 dd 00 00 25 dd 00 00 25 dd 00 00     %...%...%...%...
    8150:	25 dd 00 00                                         %...

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	68 b0 01 00 01 00 00 00 00 80 00 00 00 80 00 00     h...............
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN4Data9calcSpeedEv>:

    return retVal;
}

uint16_t Data::calcSpeed() 
{
    8e48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4604      	mov	r4, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	8963      	ldrh	r3, [r4, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d103      	bne.n	8e5e <_ZN4Data9calcSpeedEv+0x16>
            speed = (rpm_speed * wheelCircumference) * 60 / 1000; // km/h * 100 for the values after the comma
            retVal = (uint16_t) (speed);
            return retVal;
        }  
    }
    return 0;
    8e56:	2000      	movs	r0, #0
    8e58:	b002      	add	sp, #8
    8e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e5e:	8825      	ldrh	r5, [r4, #0]
    8e60:	8862      	ldrh	r2, [r4, #2]
    8e62:	1aad      	subs	r5, r5, r2
    8e64:	b2ad      	uxth	r5, r5
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e66:	2d00      	cmp	r5, #0
    8e68:	d0f5      	beq.n	8e56 <_ZN4Data9calcSpeedEv+0xe>
        wheelCircumference = wheelDiameter;
    8e6a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e6e:	1ac0      	subs	r0, r0, r3
        wheelCircumference = wheelDiameter;
    8e70:	e9cd 1200 	strd	r1, r2, [sp]
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e74:	f7ff fb36 	bl	84e4 <__aeabi_i2d>
    8e78:	2200      	movs	r2, #0
    8e7a:	4b35      	ldr	r3, [pc, #212]	; (8f50 <_ZN4Data9calcSpeedEv+0x108>)
    8e7c:	f7ff fb9c 	bl	85b8 <__aeabi_dmul>
    8e80:	4606      	mov	r6, r0
    8e82:	460f      	mov	r7, r1
        cntNbr++;
    8e84:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8f54 <_ZN4Data9calcSpeedEv+0x10c>
        totalTime += time;
    8e88:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8f58 <_ZN4Data9calcSpeedEv+0x110>
        cntNbr++;
    8e8c:	f89a 8000 	ldrb.w	r8, [sl]
        totalTime += time;
    8e90:	f8b9 0000 	ldrh.w	r0, [r9]
        cntNbr++;
    8e94:	f108 0801 	add.w	r8, r8, #1
    8e98:	fa5f f888 	uxtb.w	r8, r8
    8e9c:	f88a 8000 	strb.w	r8, [sl]
        totalTime += time;
    8ea0:	f7ff fb20 	bl	84e4 <__aeabi_i2d>
    8ea4:	4632      	mov	r2, r6
    8ea6:	463b      	mov	r3, r7
    8ea8:	f7ff f9d0 	bl	824c <__adddf3>
    8eac:	f7ff fe1e 	bl	8aec <__aeabi_d2uiz>
        if (cntNbr == 30)
    8eb0:	f1b8 0f1e 	cmp.w	r8, #30
        totalTime += time;
    8eb4:	b281      	uxth	r1, r0
    8eb6:	f8a9 1000 	strh.w	r1, [r9]
        if (cntNbr == 30)
    8eba:	d108      	bne.n	8ece <_ZN4Data9calcSpeedEv+0x86>
            cntNbr = 0;
    8ebc:	f04f 0800 	mov.w	r8, #0
            printk("Total time is: %d\n",totalTime);
    8ec0:	4826      	ldr	r0, [pc, #152]	; (8f5c <_ZN4Data9calcSpeedEv+0x114>)
            cntNbr = 0;
    8ec2:	f88a 8000 	strb.w	r8, [sl]
            printk("Total time is: %d\n",totalTime);
    8ec6:	f011 fd8b 	bl	1a9e0 <printk>
            totalTime = 0;
    8eca:	f8a9 8000 	strh.w	r8, [r9]
        if (time < 0)
    8ece:	2200      	movs	r2, #0
    8ed0:	2300      	movs	r3, #0
    8ed2:	4630      	mov	r0, r6
    8ed4:	4639      	mov	r1, r7
    8ed6:	f7ff fde1 	bl	8a9c <__aeabi_dcmplt>
    8eda:	b150      	cbz	r0, 8ef2 <_ZN4Data9calcSpeedEv+0xaa>
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8edc:	8920      	ldrh	r0, [r4, #8]
    8ede:	8963      	ldrh	r3, [r4, #10]
    8ee0:	f500 407f 	add.w	r0, r0, #65280	; 0xff00
    8ee4:	30ff      	adds	r0, #255	; 0xff
    8ee6:	1ac0      	subs	r0, r0, r3
    8ee8:	1280      	asrs	r0, r0, #10
    8eea:	f7ff fafb 	bl	84e4 <__aeabi_i2d>
    8eee:	4606      	mov	r6, r0
    8ef0:	460f      	mov	r7, r1
        if (sumRevSpeed == oldSumRevSpeed)
    8ef2:	8822      	ldrh	r2, [r4, #0]
    8ef4:	8863      	ldrh	r3, [r4, #2]
    8ef6:	429a      	cmp	r2, r3
    8ef8:	d0ad      	beq.n	8e56 <_ZN4Data9calcSpeedEv+0xe>
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8efa:	203c      	movs	r0, #60	; 0x3c
    8efc:	4368      	muls	r0, r5
    8efe:	f7ff faf1 	bl	84e4 <__aeabi_i2d>
    8f02:	4632      	mov	r2, r6
    8f04:	463b      	mov	r3, r7
    8f06:	f7ff fc81 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * PI;
    8f0a:	a30f      	add	r3, pc, #60	; (adr r3, 8f48 <_ZN4Data9calcSpeedEv+0x100>)
    8f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8f10:	4606      	mov	r6, r0
    8f12:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * PI;
    8f14:	e9dd 0100 	ldrd	r0, r1, [sp]
    8f18:	f7ff fb4e 	bl	85b8 <__aeabi_dmul>
    8f1c:	4602      	mov	r2, r0
    8f1e:	460b      	mov	r3, r1
            speed = (rpm_speed * wheelCircumference) * 60 / 1000; // km/h * 100 for the values after the comma
    8f20:	4630      	mov	r0, r6
    8f22:	4639      	mov	r1, r7
    8f24:	f7ff fb48 	bl	85b8 <__aeabi_dmul>
    8f28:	2200      	movs	r2, #0
    8f2a:	4b0d      	ldr	r3, [pc, #52]	; (8f60 <_ZN4Data9calcSpeedEv+0x118>)
    8f2c:	f7ff fb44 	bl	85b8 <__aeabi_dmul>
    8f30:	2200      	movs	r2, #0
    8f32:	4b0c      	ldr	r3, [pc, #48]	; (8f64 <_ZN4Data9calcSpeedEv+0x11c>)
    8f34:	f7ff fc6a 	bl	880c <__aeabi_ddiv>
    8f38:	4602      	mov	r2, r0
    8f3a:	460b      	mov	r3, r1
    8f3c:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
            retVal = (uint16_t) (speed);
    8f40:	f7ff fdd4 	bl	8aec <__aeabi_d2uiz>
    8f44:	b280      	uxth	r0, r0
            return retVal;
    8f46:	e787      	b.n	8e58 <_ZN4Data9calcSpeedEv+0x10>
    8f48:	4d12d84a 	.word	0x4d12d84a
    8f4c:	400921fb 	.word	0x400921fb
    8f50:	3f500000 	.word	0x3f500000
    8f54:	2000e362 	.word	0x2000e362
    8f58:	2000e2d8 	.word	0x2000e2d8
    8f5c:	0001f71f 	.word	0x0001f71f
    8f60:	404e0000 	.word	0x404e0000
    8f64:	408f4000 	.word	0x408f4000

00008f68 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
			  uint8_t flags)
{
    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f68:	2b01      	cmp	r3, #1
{
    8f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f6e:	4607      	mov	r7, r0
    8f70:	4688      	mov	r8, r1
    8f72:	4614      	mov	r4, r2
    8f74:	461e      	mov	r6, r3
    if (len == 1)
    8f76:	d125      	bne.n	8fc4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f78:	7815      	ldrb	r5, [r2, #0]
    8f7a:	4b4b      	ldr	r3, [pc, #300]	; (90a8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f7c:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f7e:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f80:	f7ff fab0 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f84:	062b      	lsls	r3, r5, #24
    8f86:	d503      	bpl.n	8f90 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f88:	2200      	movs	r2, #0
    8f8a:	4b48      	ldr	r3, [pc, #288]	; (90ac <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f8c:	f7ff f95e 	bl	824c <__adddf3>
        }
        else 
        {
            dia = diameter * 2.54;
    8f90:	a343      	add	r3, pc, #268	; (adr r3, 90a0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f92:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f96:	f7ff fb0f 	bl	85b8 <__aeabi_dmul>
    8f9a:	4b45      	ldr	r3, [pc, #276]	; (90b0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f9c:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8fa0:	463a      	mov	r2, r7
    8fa2:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8fa6:	4843      	ldr	r0, [pc, #268]	; (90b4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8fa8:	f011 fd1a 	bl	1a9e0 <printk>
    8fac:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++)
    {
        printk("%02X", buffer[i]);
    8fae:	4f42      	ldr	r7, [pc, #264]	; (90b8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++)
    8fb0:	1c5d      	adds	r5, r3, #1
    8fb2:	b2db      	uxtb	r3, r3
    8fb4:	42b3      	cmp	r3, r6
    8fb6:	da6c      	bge.n	9092 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8fb8:	5ce1      	ldrb	r1, [r4, r3]
    8fba:	4638      	mov	r0, r7
    8fbc:	f011 fd10 	bl	1a9e0 <printk>
    for(uint8_t i = 0; i < len; i++)
    8fc0:	462b      	mov	r3, r5
    8fc2:	e7f5      	b.n	8fb0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8fc4:	2b13      	cmp	r3, #19
    8fc6:	d1eb      	bne.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8fc8:	7c53      	ldrb	r3, [r2, #17]
    8fca:	4a3c      	ldr	r2, [pc, #240]	; (90bc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8fcc:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8fce:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8fd0:	4a3b      	ldr	r2, [pc, #236]	; (90c0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8fd2:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8fd4:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8fd6:	d00e      	beq.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8fd8:	2b03      	cmp	r3, #3
    8fda:	d02e      	beq.n	903a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8fdc:	2b01      	cmp	r3, #1
    8fde:	d1df      	bne.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fe0:	4a38      	ldr	r2, [pc, #224]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8fec:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8ff4:	e7d4      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8ff6:	4b34      	ldr	r3, [pc, #208]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8ff8:	781d      	ldrb	r5, [r3, #0]
    8ffa:	3501      	adds	r5, #1
    8ffc:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8ffe:	2d01      	cmp	r5, #1
            cntAddresses++;
    9000:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    9002:	d10a      	bne.n	901a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    9004:	4a2f      	ldr	r2, [pc, #188]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    9006:	1e63      	subs	r3, r4, #1
    9008:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    900c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9010:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    9012:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9016:	d1f9      	bne.n	900c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    9018:	e7c2      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    901a:	2d02      	cmp	r5, #2
    901c:	d1c0      	bne.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    901e:	4a2b      	ldr	r2, [pc, #172]	; (90cc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    9020:	1e63      	subs	r3, r4, #1
    9022:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9026:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    902a:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    902c:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9030:	d1f9      	bne.n	9026 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    9032:	2200      	movs	r2, #0
    9034:	4b24      	ldr	r3, [pc, #144]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    9036:	701a      	strb	r2, [r3, #0]
    9038:	e7b2      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    903a:	4b23      	ldr	r3, [pc, #140]	; (90c8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    903c:	781d      	ldrb	r5, [r3, #0]
    903e:	3501      	adds	r5, #1
    9040:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    9042:	2d01      	cmp	r5, #1
            cntAddresses++;
    9044:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    9046:	d10a      	bne.n	905e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    9048:	4a1e      	ldr	r2, [pc, #120]	; (90c4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    904a:	1e63      	subs	r3, r4, #1
    904c:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9050:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9054:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    9056:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    905a:	d1f9      	bne.n	9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    905c:	e7a0      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    905e:	2d02      	cmp	r5, #2
    9060:	d10a      	bne.n	9078 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    9062:	4a1a      	ldr	r2, [pc, #104]	; (90cc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    9064:	1e63      	subs	r3, r4, #1
    9066:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    906a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    906e:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9070:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9074:	d1f9      	bne.n	906a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    9076:	e793      	b.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9078:	2d03      	cmp	r5, #3
    907a:	d191      	bne.n	8fa0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    907c:	4a14      	ldr	r2, [pc, #80]	; (90d0 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    907e:	1e63      	subs	r3, r4, #1
    9080:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9084:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9088:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    908a:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    908e:	d1f9      	bne.n	9084 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9090:	e7cf      	b.n	9032 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    9092:	4810      	ldr	r0, [pc, #64]	; (90d4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    9094:	f011 fca4 	bl	1a9e0 <printk>
 	return len;
}
    9098:	4630      	mov	r0, r6
    909a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    909e:	bf00      	nop
    90a0:	851eb852 	.word	0x851eb852
    90a4:	400451eb 	.word	0x400451eb
    90a8:	2000e577 	.word	0x2000e577
    90ac:	3fe00000 	.word	0x3fe00000
    90b0:	200086f0 	.word	0x200086f0
    90b4:	0001f732 	.word	0x0001f732
    90b8:	0001f75e 	.word	0x0001f75e
    90bc:	2000e579 	.word	0x2000e579
    90c0:	2000e578 	.word	0x2000e578
    90c4:	2000e363 	.word	0x2000e363
    90c8:	2000e396 	.word	0x2000e396
    90cc:	2000e374 	.word	0x2000e374
    90d0:	2000e385 	.word	0x2000e385
    90d4:	00022749 	.word	0x00022749

000090d8 <main>:
 */

#include "DeviceManager.h"

void main(void)
{
    90d8:	b500      	push	{lr}

	printk("Application start\n");
    90da:	4807      	ldr	r0, [pc, #28]	; (90f8 <main+0x20>)
{
    90dc:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    90de:	f011 fc7f 	bl	1a9e0 <printk>

	// create a new device manager
	DeviceManager dManager;
    90e2:	4668      	mov	r0, sp
    90e4:	f000 fb4c 	bl	9780 <_ZN13DeviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    90e8:	2201      	movs	r2, #1
    90ea:	4668      	mov	r0, sp
    90ec:	4611      	mov	r1, r2
    90ee:	f000 fde3 	bl	9cb8 <_ZN13DeviceManager9setDeviceEbb>
    90f2:	b011      	add	sp, #68	; 0x44
    90f4:	f85d fb04 	ldr.w	pc, [sp], #4
    90f8:	0001f0a0 	.word	0x0001f0a0

000090fc <_ZN13DeviceManager13app_button_cbEv>:
}

bool DeviceManager::app_button_cb(void)
{
    return app_button_state;
}
    90fc:	4b01      	ldr	r3, [pc, #4]	; (9104 <_ZN13DeviceManager13app_button_cbEv+0x8>)
    90fe:	7818      	ldrb	r0, [r3, #0]
    9100:	4770      	bx	lr
    9102:	bf00      	nop
    9104:	2000e31e 	.word	0x2000e31e

00009108 <_ZN13DeviceManager21discovery_error_foundEP7bt_conniPv>:
	bt_conn_disconnect(conn,-5);
}

void DeviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    9108:	4801      	ldr	r0, [pc, #4]	; (9110 <_ZN13DeviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    910a:	f011 bc69 	b.w	1a9e0 <printk>
    910e:	bf00      	nop
    9110:	0001f0b3 	.word	0x0001f0b3

00009114 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
}


void DeviceManager::discoveryCompletedHR(struct bt_gatt_dm *dm, void *ctx) 
{
    9114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9118:	4604      	mov	r4, r0
	uint8_t err;

	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    911a:	f012 f883 	bl	1b224 <bt_gatt_dm_conn_get>
    911e:	4607      	mov	r7, r0

	printk("The discovery procedure succeeded\n");
    9120:	484c      	ldr	r0, [pc, #304]	; (9254 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x140>)
    9122:	f011 fc5d 	bl	1a9e0 <printk>

	bt_gatt_dm_data_print(dm);

	// Heart rate characteristic 
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    9126:	4620      	mov	r0, r4
    9128:	494b      	ldr	r1, [pc, #300]	; (9258 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x144>)
    912a:	f003 fd29 	bl	cb80 <bt_gatt_dm_char_by_uuid>

	if (!gatt_chrc) 
    912e:	4605      	mov	r5, r0
    9130:	b928      	cbnz	r0, 913e <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x2a>
	{
		printk("No heart rate measurement characteristic found\n");
    9132:	484a      	ldr	r0, [pc, #296]	; (925c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x148>)
		break;
	default:
		break;
	}
	dk_set_led_on(CON_STATUS_LED_CENTRAL);
}
    9134:	b003      	add	sp, #12
    9136:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		printk("No heart rate CCC descriptor found. "
    913a:	f011 bc51 	b.w	1a9e0 <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_HRS_MEASUREMENT);
    913e:	4601      	mov	r1, r0
    9140:	4a47      	ldr	r2, [pc, #284]	; (9260 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x14c>)
    9142:	4620      	mov	r0, r4
    9144:	f012 f8bd 	bl	1b2c2 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) 
    9148:	b908      	cbnz	r0, 914e <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x3a>
		printk("No heat rate measurement characteristic value found\n");
    914a:	4846      	ldr	r0, [pc, #280]	; (9264 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x150>)
    914c:	e7f2      	b.n	9134 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x20>
	subscribe_params[nbrConnectionsCentral-1].value_handle = gatt_desc->handle;
    914e:	f04f 0918 	mov.w	r9, #24
    9152:	4e45      	ldr	r6, [pc, #276]	; (9268 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x154>)
    9154:	f8df 8114 	ldr.w	r8, [pc, #276]	; 926c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x158>
    9158:	7832      	ldrb	r2, [r6, #0]
    915a:	8883      	ldrh	r3, [r0, #4]
    915c:	3a01      	subs	r2, #1
    915e:	fb09 8202 	mla	r2, r9, r2, r8
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9162:	4629      	mov	r1, r5
	subscribe_params[nbrConnectionsCentral-1].value_handle = gatt_desc->handle;
    9164:	8113      	strh	r3, [r2, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9166:	4620      	mov	r0, r4
    9168:	4a41      	ldr	r2, [pc, #260]	; (9270 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x15c>)
    916a:	f012 f8aa 	bl	1b2c2 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) 
    916e:	b908      	cbnz	r0, 9174 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x60>
		printk("No heart rate CCC descriptor found. "
    9170:	4840      	ldr	r0, [pc, #256]	; (9274 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x160>)
    9172:	e7df      	b.n	9134 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x20>
	subscribe_params[nbrConnectionsCentral-1].notify = notify_HR;
    9174:	7833      	ldrb	r3, [r6, #0]
    9176:	4a40      	ldr	r2, [pc, #256]	; (9278 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x164>)
    9178:	3b01      	subs	r3, #1
    917a:	fb09 f303 	mul.w	r3, r9, r3
    917e:	eb08 0103 	add.w	r1, r8, r3
    9182:	f848 2003 	str.w	r2, [r8, r3]
	subscribe_params[nbrConnectionsCentral-1].value = BT_GATT_CCC_NOTIFY;
    9186:	2301      	movs	r3, #1
    9188:	818b      	strh	r3, [r1, #12]
	subscribe_params[nbrConnectionsCentral-1].ccc_handle = gatt_desc->handle;
    918a:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &subscribe_params[nbrConnectionsCentral-1]);
    918c:	4638      	mov	r0, r7
	subscribe_params[nbrConnectionsCentral-1].ccc_handle = gatt_desc->handle;
    918e:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_subscribe(conn, &subscribe_params[nbrConnectionsCentral-1]);
    9190:	f00b ff2e 	bl	14ff0 <bt_gatt_subscribe>
	if (err && err != -EALREADY) 
    9194:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9198:	d021      	beq.n	91de <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xca>
		printk("Subscribe failed (err %d)\n", err);
    919a:	4838      	ldr	r0, [pc, #224]	; (927c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x168>)
    919c:	f011 fc20 	bl	1a9e0 <printk>
	err = bt_gatt_dm_data_release(dm);
    91a0:	4620      	mov	r0, r4
    91a2:	f012 f8a0 	bl	1b2e6 <bt_gatt_dm_data_release>
	if (err) 
    91a6:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    91aa:	d002      	beq.n	91b2 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x9e>
		printk("Could not release the discovery data (err %d)\n", err);
    91ac:	4834      	ldr	r0, [pc, #208]	; (9280 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x16c>)
    91ae:	f011 fc17 	bl	1a9e0 <printk>
	subscriptionDone = true;
    91b2:	2201      	movs	r2, #1
    91b4:	4b33      	ldr	r3, [pc, #204]	; (9284 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x170>)
    91b6:	701a      	strb	r2, [r3, #0]
	switch (nbrConnectionsCentral)
    91b8:	7832      	ldrb	r2, [r6, #0]
    91ba:	2a02      	cmp	r2, #2
    91bc:	d013      	beq.n	91e6 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xd2>
    91be:	2a03      	cmp	r2, #3
    91c0:	d036      	beq.n	9230 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x11c>
    91c2:	2a01      	cmp	r2, #1
    91c4:	d126      	bne.n	9214 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x100>
		connectedCode[0] = 16;
    91c6:	2310      	movs	r3, #16
    91c8:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    91cc:	4b2e      	ldr	r3, [pc, #184]	; (9288 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x174>)
    91ce:	a901      	add	r1, sp, #4
    91d0:	6818      	ldr	r0, [r3, #0]
    91d2:	f001 f8d7 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
		printk("Discovery completed\n");
    91d6:	482d      	ldr	r0, [pc, #180]	; (928c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x178>)
		printk("Third discovery completed\n");
    91d8:	f011 fc02 	bl	1a9e0 <printk>
		break;
    91dc:	e01a      	b.n	9214 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x100>
		printk("[SUBSCRIBED]\n");
    91de:	482c      	ldr	r0, [pc, #176]	; (9290 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x17c>)
    91e0:	f011 fbfe 	bl	1a9e0 <printk>
    91e4:	e7dc      	b.n	91a0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x8c>
		printk("Second discovery completed\n");
    91e6:	482b      	ldr	r0, [pc, #172]	; (9294 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x180>)
    91e8:	f011 fbfa 	bl	1a9e0 <printk>
		if (sensorInfos == 5)
    91ec:	4b2a      	ldr	r3, [pc, #168]	; (9298 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x184>)
    91ee:	781b      	ldrb	r3, [r3, #0]
    91f0:	2b05      	cmp	r3, #5
    91f2:	d115      	bne.n	9220 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x10c>
			if (reconnectedHeartRate)
    91f4:	4b29      	ldr	r3, [pc, #164]	; (929c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x188>)
    91f6:	781a      	ldrb	r2, [r3, #0]
    91f8:	b11a      	cbz	r2, 9202 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xee>
				reconnectedHeartRate = false;
    91fa:	2200      	movs	r2, #0
    91fc:	701a      	strb	r2, [r3, #0]
				connectedCode[0] = 24;
    91fe:	2318      	movs	r3, #24
    9200:	e000      	b.n	9204 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xf0>
				connectedCode[0] = 22;	
    9202:	2316      	movs	r3, #22
				connectedCode[0] = 20;
    9204:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9208:	4b1f      	ldr	r3, [pc, #124]	; (9288 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x174>)
    920a:	2201      	movs	r2, #1
    920c:	6818      	ldr	r0, [r3, #0]
    920e:	a901      	add	r1, sp, #4
    9210:	f001 f8b8 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
	dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9214:	2001      	movs	r0, #1
    9216:	f014 fa4d 	bl	1d6b4 <dk_set_led_on>
}
    921a:	b003      	add	sp, #12
    921c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else if (sensorInfos == 6)
    9220:	2b06      	cmp	r3, #6
    9222:	d1f7      	bne.n	9214 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x100>
			if (reconnectedHeartRate)
    9224:	4b1d      	ldr	r3, [pc, #116]	; (929c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x188>)
    9226:	781a      	ldrb	r2, [r3, #0]
    9228:	2a00      	cmp	r2, #0
    922a:	d1e6      	bne.n	91fa <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xe6>
				connectedCode[0] = 20;
    922c:	2314      	movs	r3, #20
    922e:	e7e9      	b.n	9204 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xf0>
		if (reconnectedHeartRate)
    9230:	4b1a      	ldr	r3, [pc, #104]	; (929c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x188>)
    9232:	781a      	ldrb	r2, [r3, #0]
    9234:	b162      	cbz	r2, 9250 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x13c>
			reconnectedHeartRate = false;
    9236:	2200      	movs	r2, #0
    9238:	701a      	strb	r2, [r3, #0]
			connectedCode[0] = 24;
    923a:	2318      	movs	r3, #24
			connectedCode[0] = 23;
    923c:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9240:	4b11      	ldr	r3, [pc, #68]	; (9288 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x174>)
    9242:	2201      	movs	r2, #1
    9244:	6818      	ldr	r0, [r3, #0]
    9246:	a901      	add	r1, sp, #4
    9248:	f001 f89c 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
		printk("Third discovery completed\n");
    924c:	4814      	ldr	r0, [pc, #80]	; (92a0 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x18c>)
    924e:	e7c3      	b.n	91d8 <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xc4>
			connectedCode[0] = 23;
    9250:	2317      	movs	r3, #23
    9252:	e7f3      	b.n	923c <_ZN13DeviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x128>
    9254:	0001f0db 	.word	0x0001f0db
    9258:	0001f018 	.word	0x0001f018
    925c:	0001f0fe 	.word	0x0001f0fe
    9260:	0001f01c 	.word	0x0001f01c
    9264:	0001f12e 	.word	0x0001f12e
    9268:	2000e322 	.word	0x2000e322
    926c:	2000999c 	.word	0x2000999c
    9270:	0001f020 	.word	0x0001f020
    9274:	0001f163 	.word	0x0001f163
    9278:	000092d5 	.word	0x000092d5
    927c:	0001f1bc 	.word	0x0001f1bc
    9280:	0001f1e5 	.word	0x0001f1e5
    9284:	2000e31f 	.word	0x2000e31f
    9288:	20009998 	.word	0x20009998
    928c:	0001f214 	.word	0x0001f214
    9290:	0001f1d7 	.word	0x0001f1d7
    9294:	0001f229 	.word	0x0001f229
    9298:	2000e319 	.word	0x2000e319
    929c:	2000e321 	.word	0x2000e321
    92a0:	0001f245 	.word	0x0001f245

000092a4 <_ZN13DeviceManager27discovery_service_not_foundEP7bt_connPv>:
{
    92a4:	b513      	push	{r0, r1, r4, lr}
    92a6:	4604      	mov	r4, r0
	printk("Service not found!\n");
    92a8:	4808      	ldr	r0, [pc, #32]	; (92cc <_ZN13DeviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    92aa:	f011 fb99 	bl	1a9e0 <printk>
	error[0] = 10;
    92ae:	230a      	movs	r3, #10
    92b0:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    92b4:	4b06      	ldr	r3, [pc, #24]	; (92d0 <_ZN13DeviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    92b6:	2201      	movs	r2, #1
    92b8:	6818      	ldr	r0, [r3, #0]
    92ba:	a901      	add	r1, sp, #4
    92bc:	f001 f862 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,-5);
    92c0:	21fb      	movs	r1, #251	; 0xfb
    92c2:	4620      	mov	r0, r4
    92c4:	f008 fc42 	bl	11b4c <bt_conn_disconnect>
}
    92c8:	b002      	add	sp, #8
    92ca:	bd10      	pop	{r4, pc}
    92cc:	0001f260 	.word	0x0001f260
    92d0:	20009998 	.word	0x20009998

000092d4 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
}

uint8_t DeviceManager::notify_HR(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) 
{
    92d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    92d8:	461e      	mov	r6, r3
	static bool onceHeartRate = true;
	static uint16_t cntNbrReceived = 0;		
	static uint16_t cntFirst = 0;	
	uint8_t dataToSend[2];
	uint8_t batteryLevelToSend[4];
	dataToSend[0] = TYPE_HEARTRATE;
    92da:	2303      	movs	r3, #3
{
    92dc:	4614      	mov	r4, r2
	batteryLevelToSend[0] = TYPE_BATTERY;
    92de:	2204      	movs	r2, #4
	dataToSend[0] = TYPE_HEARTRATE;
    92e0:	f88d 3000 	strb.w	r3, [sp]
	batteryLevelToSend[1] = TYPE_HEARTRATE;
    92e4:	f88d 3005 	strb.w	r3, [sp, #5]

	if (sensorInfos == 7)
    92e8:	4b41      	ldr	r3, [pc, #260]	; (93f0 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x11c>)
{
    92ea:	4688      	mov	r8, r1
	if (sensorInfos == 7)
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	4d41      	ldr	r5, [pc, #260]	; (93f4 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x120>)
    92f0:	2b07      	cmp	r3, #7
    92f2:	4f41      	ldr	r7, [pc, #260]	; (93f8 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x124>)
	batteryLevelToSend[0] = TYPE_BATTERY;
    92f4:	f88d 2004 	strb.w	r2, [sp, #4]
	if (sensorInfos == 7)
    92f8:	d119      	bne.n	932e <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5a>
	{
		if (onceHeartRate || (peripheralDisconnected && connectedPeripheral))
    92fa:	4a40      	ldr	r2, [pc, #256]	; (93fc <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x128>)
    92fc:	4940      	ldr	r1, [pc, #256]	; (9400 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x12c>)
    92fe:	7813      	ldrb	r3, [r2, #0]
    9300:	b923      	cbnz	r3, 930c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
    9302:	780b      	ldrb	r3, [r1, #0]
    9304:	b19b      	cbz	r3, 932e <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5a>
    9306:	4b3f      	ldr	r3, [pc, #252]	; (9404 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x130>)
    9308:	781b      	ldrb	r3, [r3, #0]
    930a:	b183      	cbz	r3, 932e <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5a>
		{
			cntFirst = 0;
    930c:	2300      	movs	r3, #0
			peripheralDisconnected = false;
			onceHeartRate = false;
			initBatteryManager(sensorInfos);
    930e:	2007      	movs	r0, #7
			onceHeartRate = false;
    9310:	7013      	strb	r3, [r2, #0]
			cntFirst = 0;
    9312:	802b      	strh	r3, [r5, #0]
			peripheralDisconnected = false;
    9314:	700b      	strb	r3, [r1, #0]
			initBatteryManager(sensorInfos);
    9316:	f001 f9b1 	bl	a67c <initBatteryManager>
			err = gatt_discover_battery_service(centralConnections[cntBatterySubscriptions]);	
    931a:	4b3b      	ldr	r3, [pc, #236]	; (9408 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x134>)
    931c:	781a      	ldrb	r2, [r3, #0]
    931e:	4b3b      	ldr	r3, [pc, #236]	; (940c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x138>)
    9320:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9324:	f001 f97c 	bl	a620 <gatt_discover_battery_service>
			if (err == 0)
    9328:	b908      	cbnz	r0, 932e <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5a>
			{
				batterySubscriptionDone = true;
    932a:	2301      	movs	r3, #1
    932c:	703b      	strb	r3, [r7, #0]
			}			
		}	
	}

	if (hrDisconnected)
    932e:	4a38      	ldr	r2, [pc, #224]	; (9410 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x13c>)
    9330:	7813      	ldrb	r3, [r2, #0]
    9332:	b113      	cbz	r3, 933a <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
	{
		hrDisconnected = false;
    9334:	2300      	movs	r3, #0
    9336:	7013      	strb	r3, [r2, #0]
		cntFirst = 0;
    9338:	802b      	strh	r3, [r5, #0]
	}
	
	if (batterySubscriptionDone)
    933a:	783b      	ldrb	r3, [r7, #0]
    933c:	2b00      	cmp	r3, #0
    933e:	d054      	beq.n	93ea <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x116>
	{
		// get battery level every few minutes
		if (cntFirst == 2 || cntNbrReceived == 300)
    9340:	882a      	ldrh	r2, [r5, #0]
    9342:	4f34      	ldr	r7, [pc, #208]	; (9414 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x140>)
    9344:	2a02      	cmp	r2, #2
    9346:	883b      	ldrh	r3, [r7, #0]
    9348:	d002      	beq.n	9350 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
    934a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    934e:	d110      	bne.n	9372 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9e>
		{
			cntFirst++;
    9350:	3201      	adds	r2, #1
			cntNbrReceived++;
    9352:	3301      	adds	r3, #1
			askForBatteryLevel(TYPE_HEARTRATE);
    9354:	2003      	movs	r0, #3
			cntFirst++;
    9356:	802a      	strh	r2, [r5, #0]
			cntNbrReceived++;
    9358:	803b      	strh	r3, [r7, #0]
			askForBatteryLevel(TYPE_HEARTRATE);
    935a:	f001 fa8f 	bl	a87c <askForBatteryLevel>
		{
			cntFirst++;
			cntNbrReceived++;
		}	

		if (!data) {
    935e:	bb5c      	cbnz	r4, 93b8 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe4>
			printk("[UNSUBSCRIBED]\n");
    9360:	482d      	ldr	r0, [pc, #180]	; (9418 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x144>)
    9362:	f011 fb3d 	bl	1a9e0 <printk>
			params->value_handle = 0U;
			return BT_GATT_ITER_STOP;
    9366:	4620      	mov	r0, r4
			params->value_handle = 0U;
    9368:	f8a8 4008 	strh.w	r4, [r8, #8]
	{
		cntFirst = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    936c:	b002      	add	sp, #8
    936e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (isValueReady(TYPE_HEARTRATE))
    9372:	2003      	movs	r0, #3
    9374:	f001 faaa 	bl	a8cc <isValueReady>
    9378:	b1b8      	cbz	r0, 93aa <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd6>
			resetReadyValue(TYPE_HEARTRATE);
    937a:	2003      	movs	r0, #3
    937c:	f001 faba 	bl	a8f4 <resetReadyValue>
			cntNbrReceived = 0;
    9380:	2300      	movs	r3, #0
    9382:	803b      	strh	r3, [r7, #0]
			cntFirst++;
    9384:	882b      	ldrh	r3, [r5, #0]
			DeviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    9386:	2003      	movs	r0, #3
			cntFirst++;
    9388:	3301      	adds	r3, #1
    938a:	802b      	strh	r3, [r5, #0]
			DeviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    938c:	f001 f9c0 	bl	a710 <getBatteryLevel>
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    9390:	2204      	movs	r2, #4
			DeviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    9392:	4b22      	ldr	r3, [pc, #136]	; (941c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x148>)
			batteryLevelToSend[2] = DeviceManager::data.battValue_heartRate;
    9394:	f88d 0006 	strb.w	r0, [sp, #6]
			DeviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    9398:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    939c:	4b20      	ldr	r3, [pc, #128]	; (9420 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x14c>)
    939e:	eb0d 0102 	add.w	r1, sp, r2
    93a2:	6818      	ldr	r0, [r3, #0]
    93a4:	f000 ffee 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
    93a8:	e7d9      	b.n	935e <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8a>
			cntFirst++;
    93aa:	882b      	ldrh	r3, [r5, #0]
    93ac:	3301      	adds	r3, #1
    93ae:	802b      	strh	r3, [r5, #0]
			cntNbrReceived++;
    93b0:	883b      	ldrh	r3, [r7, #0]
    93b2:	3301      	adds	r3, #1
    93b4:	803b      	strh	r3, [r7, #0]
    93b6:	e7d2      	b.n	935e <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8a>
		if (length == 2)
    93b8:	2e02      	cmp	r6, #2
    93ba:	d110      	bne.n	93de <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x10a>
				uint8_t hr_bpm = ((uint8_t *)data)[1];
    93bc:	7861      	ldrb	r1, [r4, #1]
				DeviceManager::data.heartRate = hr_bpm;
    93be:	4b17      	ldr	r3, [pc, #92]	; (941c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x148>)
				printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    93c0:	4818      	ldr	r0, [pc, #96]	; (9424 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x150>)
				DeviceManager::data.heartRate = hr_bpm;
    93c2:	f883 1020 	strb.w	r1, [r3, #32]
				dataToSend[1] = hr_bpm;
    93c6:	f88d 1001 	strb.w	r1, [sp, #1]
				printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    93ca:	f011 fb09 	bl	1a9e0 <printk>
				data_service_send(peripheralConn,dataToSend,sizeof(dataToSend));
    93ce:	4b14      	ldr	r3, [pc, #80]	; (9420 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x14c>)
    93d0:	4632      	mov	r2, r6
    93d2:	4669      	mov	r1, sp
    93d4:	6818      	ldr	r0, [r3, #0]
    93d6:	f000 ffd5 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
	return BT_GATT_ITER_CONTINUE;
    93da:	2001      	movs	r0, #1
    93dc:	e7c6      	b.n	936c <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x98>
			printk("[NOTIFICATION] data %p length %u\n", data, length);
    93de:	4632      	mov	r2, r6
    93e0:	4621      	mov	r1, r4
    93e2:	4811      	ldr	r0, [pc, #68]	; (9428 <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x154>)
    93e4:	f011 fafc 	bl	1a9e0 <printk>
    93e8:	e7f7      	b.n	93da <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x106>
		cntFirst = 0;
    93ea:	802b      	strh	r3, [r5, #0]
    93ec:	e7f5      	b.n	93da <_ZN13DeviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x106>
    93ee:	bf00      	nop
    93f0:	2000e319 	.word	0x2000e319
    93f4:	2000e2d6 	.word	0x2000e2d6
    93f8:	2000e324 	.word	0x2000e324
    93fc:	20008442 	.word	0x20008442
    9400:	2000e323 	.word	0x2000e323
    9404:	2000e320 	.word	0x2000e320
    9408:	2000e325 	.word	0x2000e325
    940c:	20009a14 	.word	0x20009a14
    9410:	2000e31c 	.word	0x2000e31c
    9414:	2000e2d4 	.word	0x2000e2d4
    9418:	0001f274 	.word	0x0001f274
    941c:	200086b8 	.word	0x200086b8
    9420:	20009998 	.word	0x20009998
    9424:	0001f284 	.word	0x0001f284
    9428:	0001f2a6 	.word	0x0001f2a6

0000942c <_ZN13DeviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    942c:	07cb      	lsls	r3, r1, #31
{
    942e:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    9430:	d507      	bpl.n	9442 <_ZN13DeviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    9432:	1e04      	subs	r4, r0, #0
    9434:	bf18      	it	ne
    9436:	2401      	movne	r4, #1
    9438:	4620      	mov	r0, r4
    943a:	f004 f937 	bl	d6ac <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    943e:	4b01      	ldr	r3, [pc, #4]	; (9444 <_ZN13DeviceManager13buttonChangedEjj+0x18>)
    9440:	701c      	strb	r4, [r3, #0]
}
    9442:	bd10      	pop	{r4, pc}
    9444:	2000e31e 	.word	0x2000e31e

00009448 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
{
    9448:	b573      	push	{r0, r1, r4, r5, r6, lr}
    944a:	461c      	mov	r4, r3
	if (subscriptionDone)
    944c:	4b97      	ldr	r3, [pc, #604]	; (96ac <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x264>)
{
    944e:	4615      	mov	r5, r2
	if (subscriptionDone)
    9450:	7818      	ldrb	r0, [r3, #0]
    9452:	2800      	cmp	r0, #0
    9454:	f000 8125 	beq.w	96a2 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x25a>
		if (!batterySubscriptionDone)
    9458:	4e95      	ldr	r6, [pc, #596]	; (96b0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x268>)
    945a:	7833      	ldrb	r3, [r6, #0]
    945c:	bb5b      	cbnz	r3, 94b6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6e>
			if (cntBatterySubscriptions == nbrConnectionsCentral)
    945e:	4c95      	ldr	r4, [pc, #596]	; (96b4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26c>)
    9460:	4b95      	ldr	r3, [pc, #596]	; (96b8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x270>)
    9462:	7822      	ldrb	r2, [r4, #0]
    9464:	781b      	ldrb	r3, [r3, #0]
    9466:	429a      	cmp	r2, r3
    9468:	d102      	bne.n	9470 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28>
				batterySubscriptionDone = true;
    946a:	2301      	movs	r3, #1
						cntNbrReceived2++;
    946c:	7033      	strb	r3, [r6, #0]
    946e:	e02a      	b.n	94c6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
				if (isFree())
    9470:	f001 f9fe 	bl	a870 <isFree>
    9474:	b338      	cbz	r0, 94c6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
					if (cntForDiscover == 0 || cntForDiscover == 7 || cntForDiscover == 14) 
    9476:	4d91      	ldr	r5, [pc, #580]	; (96bc <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x274>)
    9478:	782a      	ldrb	r2, [r5, #0]
    947a:	2a0e      	cmp	r2, #14
    947c:	d817      	bhi.n	94ae <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
    947e:	f244 0381 	movw	r3, #16513	; 0x4081
    9482:	40d3      	lsrs	r3, r2
    9484:	07db      	lsls	r3, r3, #31
    9486:	d512      	bpl.n	94ae <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
						initBatteryManager(sensorInfos);
    9488:	4b8d      	ldr	r3, [pc, #564]	; (96c0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x278>)
    948a:	7818      	ldrb	r0, [r3, #0]
    948c:	f001 f8f6 	bl	a67c <initBatteryManager>
						err = gatt_discover_battery_service(centralConnections[cntBatterySubscriptions]);	
    9490:	7822      	ldrb	r2, [r4, #0]
    9492:	4b8c      	ldr	r3, [pc, #560]	; (96c4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x27c>)
    9494:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9498:	f001 f8c2 	bl	a620 <gatt_discover_battery_service>
    949c:	4606      	mov	r6, r0
						printk("Nbr connections %d\n", cntBatterySubscriptions);
    949e:	7821      	ldrb	r1, [r4, #0]
    94a0:	4889      	ldr	r0, [pc, #548]	; (96c8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x280>)
    94a2:	f011 fa9d 	bl	1a9e0 <printk>
						if (err == 0)
    94a6:	b916      	cbnz	r6, 94ae <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
							cntBatterySubscriptions++;
    94a8:	7823      	ldrb	r3, [r4, #0]
    94aa:	3301      	adds	r3, #1
    94ac:	7023      	strb	r3, [r4, #0]
						cntFirstCadence++;
    94ae:	782b      	ldrb	r3, [r5, #0]
    94b0:	3301      	adds	r3, #1
    94b2:	702b      	strb	r3, [r5, #0]
    94b4:	e007      	b.n	94c6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
		else if (!serviceFound())
    94b6:	f001 fa31 	bl	a91c <serviceFound>
    94ba:	b938      	cbnz	r0, 94cc <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x84>
			cntBatterySubscriptions--;
    94bc:	4a7d      	ldr	r2, [pc, #500]	; (96b4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26c>)
			batterySubscriptionDone = false;
    94be:	7030      	strb	r0, [r6, #0]
			cntBatterySubscriptions--;
    94c0:	7813      	ldrb	r3, [r2, #0]
    94c2:	3b01      	subs	r3, #1
    94c4:	7013      	strb	r3, [r2, #0]
}
    94c6:	2001      	movs	r0, #1
    94c8:	b002      	add	sp, #8
    94ca:	bd70      	pop	{r4, r5, r6, pc}
			if (length > 0)
    94cc:	2c00      	cmp	r4, #0
    94ce:	d0fa      	beq.n	94c6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
				if (cscDisconnected)
    94d0:	4a7e      	ldr	r2, [pc, #504]	; (96cc <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x284>)
    94d2:	7813      	ldrb	r3, [r2, #0]
    94d4:	b12b      	cbz	r3, 94e2 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9a>
					cscDisconnected = false;
    94d6:	2300      	movs	r3, #0
    94d8:	7013      	strb	r3, [r2, #0]
					cntFirstSpeed = 0;
    94da:	4a7d      	ldr	r2, [pc, #500]	; (96d0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x288>)
    94dc:	7013      	strb	r3, [r2, #0]
					cntFirstCadence = 0;
    94de:	4a7d      	ldr	r2, [pc, #500]	; (96d4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28c>)
    94e0:	7013      	strb	r3, [r2, #0]
				if (peripheralDisconnected && connectedPeripheral)
    94e2:	4a7d      	ldr	r2, [pc, #500]	; (96d8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x290>)
    94e4:	7813      	ldrb	r3, [r2, #0]
    94e6:	b143      	cbz	r3, 94fa <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xb2>
    94e8:	4b7c      	ldr	r3, [pc, #496]	; (96dc <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x294>)
    94ea:	781b      	ldrb	r3, [r3, #0]
    94ec:	b12b      	cbz	r3, 94fa <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xb2>
					peripheralDisconnected = false;
    94ee:	2300      	movs	r3, #0
    94f0:	7013      	strb	r3, [r2, #0]
					cntFirstSpeed = 0;
    94f2:	4a77      	ldr	r2, [pc, #476]	; (96d0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x288>)
    94f4:	7013      	strb	r3, [r2, #0]
					cntFirstCadence = 0;
    94f6:	4a77      	ldr	r2, [pc, #476]	; (96d4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28c>)
    94f8:	7013      	strb	r3, [r2, #0]
				if (!areNotificationsOn() && disconnectOnce)
    94fa:	f000 ffb3 	bl	a464 <_Z18areNotificationsOnv>
    94fe:	b940      	cbnz	r0, 9512 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xca>
    9500:	4b77      	ldr	r3, [pc, #476]	; (96e0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x298>)
    9502:	781a      	ldrb	r2, [r3, #0]
    9504:	b12a      	cbz	r2, 9512 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xca>
					disconnectOnce = false;
    9506:	7018      	strb	r0, [r3, #0]
					bt_conn_disconnect(peripheralConn,1);
    9508:	4b76      	ldr	r3, [pc, #472]	; (96e4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x29c>)
    950a:	2101      	movs	r1, #1
    950c:	6818      	ldr	r0, [r3, #0]
    950e:	f008 fb1d 	bl	11b4c <bt_conn_disconnect>
				DeviceManager::data.saveData(data);
    9512:	4c75      	ldr	r4, [pc, #468]	; (96e8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a0>)
    9514:	4629      	mov	r1, r5
    9516:	4620      	mov	r0, r4
    9518:	f000 fe9e 	bl	a258 <_ZN4Data8saveDataEPKv>
				if (getDiameter() != 0 && diameterSet == false)
    951c:	f000 ff5c 	bl	a3d8 <_Z11getDiameterv>
    9520:	2200      	movs	r2, #0
    9522:	2300      	movs	r3, #0
    9524:	f7ff fab0 	bl	8a88 <__aeabi_dcmpeq>
    9528:	b910      	cbnz	r0, 9530 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe8>
    952a:	4b70      	ldr	r3, [pc, #448]	; (96ec <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a4>)
    952c:	781a      	ldrb	r2, [r3, #0]
    952e:	b32a      	cbz	r2, 957c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x134>
				else if (getDiameter() == 0 && diameterSet == true)
    9530:	f000 ff52 	bl	a3d8 <_Z11getDiameterv>
    9534:	2200      	movs	r2, #0
    9536:	2300      	movs	r3, #0
    9538:	f7ff faa6 	bl	8a88 <__aeabi_dcmpeq>
    953c:	bb28      	cbnz	r0, 958a <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x142>
				if (DeviceManager::data.type == TYPE_CSC_SPEED)
    953e:	7c23      	ldrb	r3, [r4, #16]
    9540:	2b01      	cmp	r3, #1
    9542:	d162      	bne.n	960a <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c2>
					if (diameterSet)
    9544:	4b69      	ldr	r3, [pc, #420]	; (96ec <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a4>)
    9546:	781b      	ldrb	r3, [r3, #0]
    9548:	b153      	cbz	r3, 9560 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x118>
						uint16_t speed = DeviceManager::data.calcSpeed();
    954a:	4867      	ldr	r0, [pc, #412]	; (96e8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a0>)
    954c:	f7ff fc7c 	bl	8e48 <_ZN4Data9calcSpeedEv>
						if (speed == 0)
    9550:	4a67      	ldr	r2, [pc, #412]	; (96f0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a8>)
    9552:	bb08      	cbnz	r0, 9598 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x150>
							cntZerosSpeed++;
    9554:	7813      	ldrb	r3, [r2, #0]
    9556:	3301      	adds	r3, #1
    9558:	b2db      	uxtb	r3, r3
						if (speed > 0 || cntZerosSpeed >= 3)
    955a:	2b02      	cmp	r3, #2
							cntZerosSpeed++;
    955c:	7013      	strb	r3, [r2, #0]
						if (speed > 0 || cntZerosSpeed >= 3)
    955e:	d81d      	bhi.n	959c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x154>
					if (cntFirstSpeed == 1 || cntNbrReceived1 == 50)
    9560:	4d5b      	ldr	r5, [pc, #364]	; (96d0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x288>)
    9562:	4e64      	ldr	r6, [pc, #400]	; (96f4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2ac>)
    9564:	782b      	ldrb	r3, [r5, #0]
    9566:	2b01      	cmp	r3, #1
    9568:	d002      	beq.n	9570 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x128>
    956a:	7833      	ldrb	r3, [r6, #0]
    956c:	2b32      	cmp	r3, #50	; 0x32
    956e:	d12d      	bne.n	95cc <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x184>
						cntNbrReceived1 = 0;
    9570:	2300      	movs	r3, #0
						askForBatteryLevel(TYPE_CSC_SPEED);
    9572:	2001      	movs	r0, #1
						cntNbrReceived1 = 0;
    9574:	7033      	strb	r3, [r6, #0]
						askForBatteryLevel(TYPE_CSC_SPEED);
    9576:	f001 f981 	bl	a87c <askForBatteryLevel>
						cntFirstSpeed++;
    957a:	e798      	b.n	94ae <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
					diameterSet = true;
    957c:	2201      	movs	r2, #1
    957e:	701a      	strb	r2, [r3, #0]
					DeviceManager::data.wheelDiameter = getDiameter();
    9580:	f000 ff2a 	bl	a3d8 <_Z11getDiameterv>
    9584:	e9c4 0106 	strd	r0, r1, [r4, #24]
    9588:	e7d9      	b.n	953e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf6>
				else if (getDiameter() == 0 && diameterSet == true)
    958a:	4b58      	ldr	r3, [pc, #352]	; (96ec <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a4>)
    958c:	781a      	ldrb	r2, [r3, #0]
    958e:	2a00      	cmp	r2, #0
    9590:	d0d5      	beq.n	953e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf6>
					diameterSet = false;
    9592:	2200      	movs	r2, #0
    9594:	701a      	strb	r2, [r3, #0]
    9596:	e7d2      	b.n	953e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf6>
							cntZerosSpeed = 0;
    9598:	2300      	movs	r3, #0
    959a:	7013      	strb	r3, [r2, #0]
							dataToSend[1] = (uint8_t) (speed/100);	
    959c:	2164      	movs	r1, #100	; 0x64
							dataToSend[0] = TYPE_CSC_SPEED;
    959e:	2301      	movs	r3, #1
							dataToSend[1] = (uint8_t) (speed/100);	
    95a0:	fbb0 f1f1 	udiv	r1, r0, r1
							if (peripheralConn != nullptr)
    95a4:	4d4f      	ldr	r5, [pc, #316]	; (96e4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x29c>)
							dataToSend[0] = TYPE_CSC_SPEED;
    95a6:	f88d 3000 	strb.w	r3, [sp]
							if (peripheralConn != nullptr)
    95aa:	682b      	ldr	r3, [r5, #0]
							dataToSend[1] = (uint8_t) (speed/100);	
    95ac:	b289      	uxth	r1, r1
    95ae:	f88d 1001 	strb.w	r1, [sp, #1]
							val_after_comma = (uint8_t) (speed);
    95b2:	f88d 0002 	strb.w	r0, [sp, #2]
							if (peripheralConn != nullptr)
    95b6:	2b00      	cmp	r3, #0
    95b8:	d0d2      	beq.n	9560 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x118>
								printk("Speed: %d\n",speed/100);
    95ba:	484f      	ldr	r0, [pc, #316]	; (96f8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2b0>)
    95bc:	f011 fa10 	bl	1a9e0 <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    95c0:	2203      	movs	r2, #3
    95c2:	4669      	mov	r1, sp
    95c4:	6828      	ldr	r0, [r5, #0]
    95c6:	f000 fedd 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
    95ca:	e7c9      	b.n	9560 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x118>
					else if (isValueReady(TYPE_CSC_SPEED))
    95cc:	2001      	movs	r0, #1
    95ce:	f001 f97d 	bl	a8cc <isValueReady>
    95d2:	b1b0      	cbz	r0, 9602 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1ba>
						resetReadyValue(TYPE_CSC_SPEED);
    95d4:	2001      	movs	r0, #1
    95d6:	f001 f98d 	bl	a8f4 <resetReadyValue>
						DeviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    95da:	2001      	movs	r0, #1
    95dc:	f001 f898 	bl	a710 <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    95e0:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_SPEED;
    95e2:	2301      	movs	r3, #1
						DeviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    95e4:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
						batteryLevelToSend[0] = TYPE_BATTERY;
    95e8:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    95ec:	f88d 3005 	strb.w	r3, [sp, #5]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));			
    95f0:	4b3c      	ldr	r3, [pc, #240]	; (96e4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x29c>)
						batteryLevelToSend[2] = DeviceManager::data.battValue_cadence;
    95f2:	f88d 0006 	strb.w	r0, [sp, #6]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));			
    95f6:	eb0d 0102 	add.w	r1, sp, r2
    95fa:	6818      	ldr	r0, [r3, #0]
    95fc:	f000 fec2 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
    9600:	e761      	b.n	94c6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
						cntNbrReceived1++;
    9602:	7833      	ldrb	r3, [r6, #0]
    9604:	3301      	adds	r3, #1
						cntNbrReceived2 = 0;
    9606:	7033      	strb	r3, [r6, #0]
    9608:	e751      	b.n	94ae <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
				else if (DeviceManager::data.type == TYPE_CSC_CADENCE)
    960a:	2b02      	cmp	r3, #2
    960c:	f47f af5b 	bne.w	94c6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
					uint16_t rpm = DeviceManager::data.calcRPM();
    9610:	4835      	ldr	r0, [pc, #212]	; (96e8 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2a0>)
    9612:	f000 fe43 	bl	a29c <_ZN4Data7calcRPMEv>
					if (rpm == 0)
    9616:	4a39      	ldr	r2, [pc, #228]	; (96fc <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2b4>)
    9618:	4601      	mov	r1, r0
    961a:	b9e8      	cbnz	r0, 9658 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x210>
						cntZerosCadence++;
    961c:	7813      	ldrb	r3, [r2, #0]
    961e:	3301      	adds	r3, #1
    9620:	b2db      	uxtb	r3, r3
					if (rpm > 0 || cntZerosCadence >= 3)
    9622:	2b02      	cmp	r3, #2
						cntZerosCadence++;
    9624:	7013      	strb	r3, [r2, #0]
					if (rpm > 0 || cntZerosCadence >= 3)
    9626:	d90a      	bls.n	963e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f6>
							dataToSend[0] = TYPE_CSC_CADENCE;	
    9628:	2302      	movs	r3, #2
							if (peripheralConn != nullptr)
    962a:	4d2e      	ldr	r5, [pc, #184]	; (96e4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x29c>)
							dataToSend[0] = TYPE_CSC_CADENCE;	
    962c:	f88d 3000 	strb.w	r3, [sp]
							dataToSend[2] = (uint8_t) (rpm >> 8);	
    9630:	0a0b      	lsrs	r3, r1, #8
    9632:	f88d 3002 	strb.w	r3, [sp, #2]
							if (peripheralConn != nullptr)
    9636:	682b      	ldr	r3, [r5, #0]
							dataToSend[1] = (uint8_t) rpm;
    9638:	f88d 1001 	strb.w	r1, [sp, #1]
							if (peripheralConn != nullptr)
    963c:	b993      	cbnz	r3, 9664 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x21c>
					if (cntFirstCadence == 5 || cntNbrReceived2 == 100)
    963e:	4d25      	ldr	r5, [pc, #148]	; (96d4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28c>)
						askForBatteryLevel(TYPE_CSC_CADENCE);
    9640:	2002      	movs	r0, #2
					if (cntFirstCadence == 5 || cntNbrReceived2 == 100)
    9642:	782b      	ldrb	r3, [r5, #0]
    9644:	4e2e      	ldr	r6, [pc, #184]	; (9700 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2b8>)
    9646:	2b05      	cmp	r3, #5
    9648:	d002      	beq.n	9650 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x208>
    964a:	7833      	ldrb	r3, [r6, #0]
    964c:	2b64      	cmp	r3, #100	; 0x64
    964e:	d112      	bne.n	9676 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x22e>
						askForBatteryLevel(TYPE_CSC_CADENCE);
    9650:	f001 f914 	bl	a87c <askForBatteryLevel>
						cntNbrReceived2 = 0;
    9654:	2300      	movs	r3, #0
    9656:	e7d6      	b.n	9606 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1be>
						cntZerosCadence = 0;
    9658:	2300      	movs	r3, #0
						if (rpm < 500)
    965a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
						cntZerosCadence = 0;
    965e:	7013      	strb	r3, [r2, #0]
						if (rpm < 500)
    9660:	d2ed      	bcs.n	963e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f6>
    9662:	e7e1      	b.n	9628 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e0>
								printk("Cadence rpm: %d\n",rpm);
    9664:	4827      	ldr	r0, [pc, #156]	; (9704 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2bc>)
    9666:	f011 f9bb 	bl	1a9e0 <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    966a:	2203      	movs	r2, #3
    966c:	4669      	mov	r1, sp
    966e:	6828      	ldr	r0, [r5, #0]
    9670:	f000 fe88 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
    9674:	e7e3      	b.n	963e <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f6>
					else if (isValueReady(TYPE_CSC_CADENCE))
    9676:	f001 f929 	bl	a8cc <isValueReady>
    967a:	b160      	cbz	r0, 9696 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x24e>
						resetReadyValue(TYPE_CSC_CADENCE);
    967c:	2002      	movs	r0, #2
    967e:	f001 f939 	bl	a8f4 <resetReadyValue>
						DeviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    9682:	2002      	movs	r0, #2
    9684:	f001 f844 	bl	a710 <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    9688:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    968a:	2302      	movs	r3, #2
						DeviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    968c:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
						batteryLevelToSend[0] = TYPE_BATTERY;
    9690:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    9694:	e7aa      	b.n	95ec <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a4>
						cntFirstCadence++;
    9696:	782b      	ldrb	r3, [r5, #0]
    9698:	3301      	adds	r3, #1
    969a:	702b      	strb	r3, [r5, #0]
						cntNbrReceived2++;
    969c:	7833      	ldrb	r3, [r6, #0]
    969e:	3301      	adds	r3, #1
    96a0:	e6e4      	b.n	946c <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x24>
		cntFirstSpeed = 0;
    96a2:	4b0b      	ldr	r3, [pc, #44]	; (96d0 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x288>)
    96a4:	7018      	strb	r0, [r3, #0]
		cntFirstCadence = 0;
    96a6:	4b0b      	ldr	r3, [pc, #44]	; (96d4 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x28c>)
    96a8:	7018      	strb	r0, [r3, #0]
    96aa:	e70c      	b.n	94c6 <_ZN13DeviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
    96ac:	2000e31f 	.word	0x2000e31f
    96b0:	2000e324 	.word	0x2000e324
    96b4:	2000e325 	.word	0x2000e325
    96b8:	2000e322 	.word	0x2000e322
    96bc:	2000e35c 	.word	0x2000e35c
    96c0:	2000e319 	.word	0x2000e319
    96c4:	20009a14 	.word	0x20009a14
    96c8:	0001f2c8 	.word	0x0001f2c8
    96cc:	2000e31d 	.word	0x2000e31d
    96d0:	2000e35a 	.word	0x2000e35a
    96d4:	2000e35d 	.word	0x2000e35d
    96d8:	2000e323 	.word	0x2000e323
    96dc:	2000e320 	.word	0x2000e320
    96e0:	20008440 	.word	0x20008440
    96e4:	20009998 	.word	0x20009998
    96e8:	200086b8 	.word	0x200086b8
    96ec:	2000e318 	.word	0x2000e318
    96f0:	2000e35b 	.word	0x2000e35b
    96f4:	2000e35e 	.word	0x2000e35e
    96f8:	0001f2dc 	.word	0x0001f2dc
    96fc:	2000e360 	.word	0x2000e360
    9700:	2000e35f 	.word	0x2000e35f
    9704:	0001f2e7 	.word	0x0001f2e7

00009708 <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9708:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    970a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    970c:	b08b      	sub	sp, #44	; 0x2c
    970e:	4604      	mov	r4, r0
    9710:	460e      	mov	r6, r1
    9712:	4617      	mov	r7, r2
    9714:	ad07      	add	r5, sp, #28
    9716:	2b03      	cmp	r3, #3
    9718:	d820      	bhi.n	975c <bt_addr_le_to_str.isra.0+0x54>
    971a:	e8df f003 	tbb	[pc, r3]
    971e:	1902      	.short	0x1902
    9720:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    9722:	4911      	ldr	r1, [pc, #68]	; (9768 <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    9724:	4628      	mov	r0, r5
    9726:	f012 fb2b 	bl	1bd80 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    972a:	7863      	ldrb	r3, [r4, #1]
    972c:	4639      	mov	r1, r7
    972e:	9304      	str	r3, [sp, #16]
    9730:	78a3      	ldrb	r3, [r4, #2]
    9732:	4630      	mov	r0, r6
    9734:	9303      	str	r3, [sp, #12]
    9736:	78e3      	ldrb	r3, [r4, #3]
    9738:	4a0c      	ldr	r2, [pc, #48]	; (976c <bt_addr_le_to_str.isra.0+0x64>)
    973a:	9302      	str	r3, [sp, #8]
    973c:	7923      	ldrb	r3, [r4, #4]
    973e:	9505      	str	r5, [sp, #20]
    9740:	9301      	str	r3, [sp, #4]
    9742:	7963      	ldrb	r3, [r4, #5]
    9744:	9300      	str	r3, [sp, #0]
    9746:	79a3      	ldrb	r3, [r4, #6]
    9748:	f011 f957 	bl	1a9fa <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    974c:	b00b      	add	sp, #44	; 0x2c
    974e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    9750:	4907      	ldr	r1, [pc, #28]	; (9770 <bt_addr_le_to_str.isra.0+0x68>)
    9752:	e7e7      	b.n	9724 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    9754:	4907      	ldr	r1, [pc, #28]	; (9774 <bt_addr_le_to_str.isra.0+0x6c>)
    9756:	e7e5      	b.n	9724 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    9758:	4907      	ldr	r1, [pc, #28]	; (9778 <bt_addr_le_to_str.isra.0+0x70>)
    975a:	e7e3      	b.n	9724 <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    975c:	210a      	movs	r1, #10
    975e:	4628      	mov	r0, r5
    9760:	4a06      	ldr	r2, [pc, #24]	; (977c <bt_addr_le_to_str.isra.0+0x74>)
    9762:	f011 f94a 	bl	1a9fa <snprintk>
		break;
    9766:	e7e0      	b.n	972a <bt_addr_le_to_str.isra.0+0x22>
    9768:	0001f2f8 	.word	0x0001f2f8
    976c:	0001f321 	.word	0x0001f321
    9770:	0001f2ff 	.word	0x0001f2ff
    9774:	0001f306 	.word	0x0001f306
    9778:	0001f310 	.word	0x0001f310
    977c:	0001f31a 	.word	0x0001f31a

00009780 <_ZN13DeviceManagerC1Ev>:
DeviceManager::DeviceManager()
    9780:	b510      	push	{r4, lr}
    9782:	4604      	mov	r4, r0
    9784:	2214      	movs	r2, #20
    9786:	2100      	movs	r1, #0
    9788:	f012 fb7f 	bl	1be8a <memset>
    978c:	4b0e      	ldr	r3, [pc, #56]	; (97c8 <_ZN13DeviceManagerC1Ev+0x48>)
    978e:	4a0f      	ldr	r2, [pc, #60]	; (97cc <_ZN13DeviceManagerC1Ev+0x4c>)
    9790:	6023      	str	r3, [r4, #0]
    9792:	4b0f      	ldr	r3, [pc, #60]	; (97d0 <_ZN13DeviceManagerC1Ev+0x50>)
    9794:	e892 0003 	ldmia.w	r2, {r0, r1}
    9798:	6063      	str	r3, [r4, #4]
    979a:	4b0e      	ldr	r3, [pc, #56]	; (97d4 <_ZN13DeviceManagerC1Ev+0x54>)
    979c:	2224      	movs	r2, #36	; 0x24
    979e:	60a3      	str	r3, [r4, #8]
    97a0:	4b0d      	ldr	r3, [pc, #52]	; (97d8 <_ZN13DeviceManagerC1Ev+0x58>)
    97a2:	60e3      	str	r3, [r4, #12]
    97a4:	f104 0314 	add.w	r3, r4, #20
    97a8:	e883 0003 	stmia.w	r3, {r0, r1}
    97ac:	2100      	movs	r1, #0
    97ae:	f104 001c 	add.w	r0, r4, #28
    97b2:	f012 fb6a 	bl	1be8a <memset>
		centralConnections[i] = nullptr;
    97b6:	2200      	movs	r2, #0
    97b8:	4b08      	ldr	r3, [pc, #32]	; (97dc <_ZN13DeviceManagerC1Ev+0x5c>)
}
    97ba:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    97bc:	e9c3 2200 	strd	r2, r2, [r3]
    97c0:	e9c3 2202 	strd	r2, r2, [r3, #8]
    97c4:	611a      	str	r2, [r3, #16]
}
    97c6:	bd10      	pop	{r4, pc}
    97c8:	00009de5 	.word	0x00009de5
    97cc:	0001e6b0 	.word	0x0001e6b0
    97d0:	0000a05d 	.word	0x0000a05d
    97d4:	0001a871 	.word	0x0001a871
    97d8:	0001a875 	.word	0x0001a875
    97dc:	20009a14 	.word	0x20009a14

000097e0 <_ZN13DeviceManager9getDeviceEv>:
    if (isCentral && isPeripheral)
    97e0:	4a07      	ldr	r2, [pc, #28]	; (9800 <_ZN13DeviceManager9getDeviceEv+0x20>)
    97e2:	4b08      	ldr	r3, [pc, #32]	; (9804 <_ZN13DeviceManager9getDeviceEv+0x24>)
    97e4:	7812      	ldrb	r2, [r2, #0]
    97e6:	781b      	ldrb	r3, [r3, #0]
    97e8:	b122      	cbz	r2, 97f4 <_ZN13DeviceManager9getDeviceEv+0x14>
        return 1;
    97ea:	2b00      	cmp	r3, #0
    97ec:	bf14      	ite	ne
    97ee:	2003      	movne	r0, #3
    97f0:	2001      	moveq	r0, #1
    97f2:	4770      	bx	lr
        return 0;
    97f4:	2b00      	cmp	r3, #0
    97f6:	bf14      	ite	ne
    97f8:	2002      	movne	r0, #2
    97fa:	2000      	moveq	r0, #0
}
    97fc:	4770      	bx	lr
    97fe:	bf00      	nop
    9800:	2000e359 	.word	0x2000e359
    9804:	2000e31a 	.word	0x2000e31a

00009808 <_ZN13DeviceManager10initButtonEv>:
{
    9808:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    980a:	4806      	ldr	r0, [pc, #24]	; (9824 <_ZN13DeviceManager10initButtonEv+0x1c>)
    980c:	f00d f960 	bl	16ad0 <dk_buttons_init>
	if (err) {
    9810:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    9814:	d003      	beq.n	981e <_ZN13DeviceManager10initButtonEv+0x16>
		printk("Cannot init buttons (err: %d)\n", err);
    9816:	4621      	mov	r1, r4
    9818:	4803      	ldr	r0, [pc, #12]	; (9828 <_ZN13DeviceManager10initButtonEv+0x20>)
    981a:	f011 f8e1 	bl	1a9e0 <printk>
}
    981e:	4620      	mov	r0, r4
    9820:	bd10      	pop	{r4, pc}
    9822:	bf00      	nop
    9824:	0000942d 	.word	0x0000942d
    9828:	0001f344 	.word	0x0001f344

0000982c <_ZN13DeviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    982c:	2301      	movs	r3, #1
{
    982e:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9830:	490c      	ldr	r1, [pc, #48]	; (9864 <_ZN13DeviceManager16startAdvertisingEv+0x38>)
    9832:	9300      	str	r3, [sp, #0]
    9834:	2202      	movs	r2, #2
    9836:	4b0c      	ldr	r3, [pc, #48]	; (9868 <_ZN13DeviceManager16startAdvertisingEv+0x3c>)
    9838:	480c      	ldr	r0, [pc, #48]	; (986c <_ZN13DeviceManager16startAdvertisingEv+0x40>)
    983a:	f007 f999 	bl	10b70 <bt_le_adv_start>
	if (err) 
    983e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9842:	d005      	beq.n	9850 <_ZN13DeviceManager16startAdvertisingEv+0x24>
		printk("Advertising failed to start (err %d)\n", err);
    9844:	480a      	ldr	r0, [pc, #40]	; (9870 <_ZN13DeviceManager16startAdvertisingEv+0x44>)
}
    9846:	b003      	add	sp, #12
    9848:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    984c:	f011 b8c8 	b.w	1a9e0 <printk>
	printk("Advertising successfully started\n");
    9850:	4808      	ldr	r0, [pc, #32]	; (9874 <_ZN13DeviceManager16startAdvertisingEv+0x48>)
    9852:	f011 f8c5 	bl	1a9e0 <printk>
	printk("Waiting for connection...\n");
    9856:	4808      	ldr	r0, [pc, #32]	; (9878 <_ZN13DeviceManager16startAdvertisingEv+0x4c>)
}
    9858:	b003      	add	sp, #12
    985a:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    985e:	f011 b8bf 	b.w	1a9e0 <printk>
    9862:	bf00      	nop
    9864:	0001e7c8 	.word	0x0001e7c8
    9868:	0001e7d8 	.word	0x0001e7d8
    986c:	0001e748 	.word	0x0001e748
    9870:	0001f363 	.word	0x0001f363
    9874:	0001f389 	.word	0x0001f389
    9878:	0001f3ab 	.word	0x0001f3ab

0000987c <_ZN13DeviceManager14initPeripheralEv>:
{
    987c:	b510      	push	{r4, lr}
    987e:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2)
    9880:	f7ff ffae 	bl	97e0 <_ZN13DeviceManager9getDeviceEv>
    9884:	1e83      	subs	r3, r0, #2
    9886:	b2db      	uxtb	r3, r3
    9888:	2b01      	cmp	r3, #1
    988a:	d830      	bhi.n	98ee <_ZN13DeviceManager14initPeripheralEv+0x72>
        err = dk_leds_init();
    988c:	f00d f8ba 	bl	16a04 <dk_leds_init>
        if (err) 
    9890:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9894:	d004      	beq.n	98a0 <_ZN13DeviceManager14initPeripheralEv+0x24>
            printk("LEDs init failed (err %d)\n", err);
    9896:	4816      	ldr	r0, [pc, #88]	; (98f0 <_ZN13DeviceManager14initPeripheralEv+0x74>)
}
    9898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    989c:	f011 b8a0 	b.w	1a9e0 <printk>
        err = initButton();
    98a0:	f7ff ffb2 	bl	9808 <_ZN13DeviceManager10initButtonEv>
    98a4:	4601      	mov	r1, r0
        if (err) 
    98a6:	b108      	cbz	r0, 98ac <_ZN13DeviceManager14initPeripheralEv+0x30>
            printk("Button init failed (err %d)\n", err);
    98a8:	4812      	ldr	r0, [pc, #72]	; (98f4 <_ZN13DeviceManager14initPeripheralEv+0x78>)
    98aa:	e7f5      	b.n	9898 <_ZN13DeviceManager14initPeripheralEv+0x1c>
        err = bt_enable(NULL);
    98ac:	f006 fec6 	bl	1063c <bt_enable>
        if (err) 
    98b0:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    98b4:	d001      	beq.n	98ba <_ZN13DeviceManager14initPeripheralEv+0x3e>
            printk("Bluetooth init failed (err %d)\n", err);
    98b6:	4810      	ldr	r0, [pc, #64]	; (98f8 <_ZN13DeviceManager14initPeripheralEv+0x7c>)
    98b8:	e7ee      	b.n	9898 <_ZN13DeviceManager14initPeripheralEv+0x1c>
        printk("Bluetooth initialized\n");
    98ba:	4810      	ldr	r0, [pc, #64]	; (98fc <_ZN13DeviceManager14initPeripheralEv+0x80>)
    98bc:	f011 f890 	bl	1a9e0 <printk>
		bt_conn_cb_register(&conn_callbacks);
    98c0:	4620      	mov	r0, r4
    98c2:	f007 fd19 	bl	112f8 <bt_conn_cb_register>
            settings_load();
    98c6:	f011 fb66 	bl	1af96 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    98ca:	f104 0014 	add.w	r0, r4, #20
    98ce:	f003 fee3 	bl	d698 <bt_lbs_init>
        if (err) 
    98d2:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    98d6:	d001      	beq.n	98dc <_ZN13DeviceManager14initPeripheralEv+0x60>
			printk("Failed to init LBS (err:%d)\n", err);
    98d8:	4809      	ldr	r0, [pc, #36]	; (9900 <_ZN13DeviceManager14initPeripheralEv+0x84>)
    98da:	e7dd      	b.n	9898 <_ZN13DeviceManager14initPeripheralEv+0x1c>
		err = data_service_init();
    98dc:	f000 fd40 	bl	a360 <_Z17data_service_initv>
		if (err) 
    98e0:	4601      	mov	r1, r0
    98e2:	2800      	cmp	r0, #0
    98e4:	d1f8      	bne.n	98d8 <_ZN13DeviceManager14initPeripheralEv+0x5c>
}
    98e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    98ea:	f7ff bf9f 	b.w	982c <_ZN13DeviceManager16startAdvertisingEv>
}
    98ee:	bd10      	pop	{r4, pc}
    98f0:	0001f3c6 	.word	0x0001f3c6
    98f4:	0001f3e1 	.word	0x0001f3e1
    98f8:	0001f3fe 	.word	0x0001f3fe
    98fc:	0001f41e 	.word	0x0001f41e
    9900:	0001f435 	.word	0x0001f435

00009904 <_ZN13DeviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9904:	2001      	movs	r0, #1
{
    9906:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9908:	f003 fd06 	bl	d318 <bt_scan_start>
	if (err)
    990c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9910:	d002      	beq.n	9918 <_ZN13DeviceManager9startScanEv+0x14>
		printk("Scanning failed to start, err %d\n", err);
    9912:	4804      	ldr	r0, [pc, #16]	; (9924 <_ZN13DeviceManager9startScanEv+0x20>)
    9914:	f011 f864 	bl	1a9e0 <printk>
}
    9918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    991c:	4802      	ldr	r0, [pc, #8]	; (9928 <_ZN13DeviceManager9startScanEv+0x24>)
    991e:	f011 b85f 	b.w	1a9e0 <printk>
    9922:	bf00      	nop
    9924:	0001f452 	.word	0x0001f452
    9928:	0001f474 	.word	0x0001f474

0000992c <_ZN13DeviceManager8initScanEv>:
{
    992c:	b530      	push	{r4, r5, lr}
    992e:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    9930:	f000 fd92 	bl	a458 <_Z14getSensorInfosv>
    9934:	4d35      	ldr	r5, [pc, #212]	; (9a0c <_ZN13DeviceManager8initScanEv+0xe0>)
	struct bt_le_scan_param scanParam = {
    9936:	ab03      	add	r3, sp, #12
    9938:	2214      	movs	r2, #20
    993a:	2100      	movs	r1, #0
	sensorInfos = getSensorInfos();
    993c:	7028      	strb	r0, [r5, #0]
    993e:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    9940:	4618      	mov	r0, r3
    9942:	f012 faa2 	bl	1be8a <memset>
    9946:	2201      	movs	r2, #1
    9948:	f88d 200c 	strb.w	r2, [sp, #12]
    994c:	9204      	str	r2, [sp, #16]
    994e:	4a30      	ldr	r2, [pc, #192]	; (9a10 <_ZN13DeviceManager8initScanEv+0xe4>)
	struct bt_scan_init_param scanInit = {
    9950:	4930      	ldr	r1, [pc, #192]	; (9a14 <_ZN13DeviceManager8initScanEv+0xe8>)
	struct bt_le_scan_param scanParam = {
    9952:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    9954:	2200      	movs	r2, #0
    9956:	9102      	str	r1, [sp, #8]
    9958:	9201      	str	r2, [sp, #4]
	};
    995a:	9000      	str	r0, [sp, #0]
	if (sensorInfos != 0)
    995c:	2c00      	cmp	r4, #0
    995e:	d050      	beq.n	9a02 <_ZN13DeviceManager8initScanEv+0xd6>
		if (once)
    9960:	4b2d      	ldr	r3, [pc, #180]	; (9a18 <_ZN13DeviceManager8initScanEv+0xec>)
    9962:	7819      	ldrb	r1, [r3, #0]
    9964:	b141      	cbz	r1, 9978 <_ZN13DeviceManager8initScanEv+0x4c>
			once = false;
    9966:	701a      	strb	r2, [r3, #0]
			bt_le_scan_stop();
    9968:	f007 fb04 	bl	10f74 <bt_le_scan_stop>
			bt_scan_init(&scanInit);
    996c:	4668      	mov	r0, sp
    996e:	f003 fca1 	bl	d2b4 <bt_scan_init>
			bt_scan_cb_register(&scan_cb);			
    9972:	482a      	ldr	r0, [pc, #168]	; (9a1c <_ZN13DeviceManager8initScanEv+0xf0>)
    9974:	f003 face 	bl	cf14 <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    9978:	f003 fb4e 	bl	d018 <bt_scan_filter_remove_all>
		switch (sensorInfos)
    997c:	782b      	ldrb	r3, [r5, #0]
    997e:	3b01      	subs	r3, #1
    9980:	2b06      	cmp	r3, #6
    9982:	d832      	bhi.n	99ea <_ZN13DeviceManager8initScanEv+0xbe>
    9984:	e8df f003 	tbb	[pc, r3]
    9988:	13110f04 	.word	0x13110f04
    998c:	261d      	.short	0x261d
    998e:	2f          	.byte	0x2f
    998f:	00          	.byte	0x00
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9990:	4923      	ldr	r1, [pc, #140]	; (9a20 <_ZN13DeviceManager8initScanEv+0xf4>)
    9992:	2003      	movs	r0, #3
    9994:	f003 face 	bl	cf34 <bt_scan_filter_add>
				if (err) 
    9998:	b2c0      	uxtb	r0, r0
    999a:	b330      	cbz	r0, 99ea <_ZN13DeviceManager8initScanEv+0xbe>
					printk("Scanning filters cannot be set\n");
    999c:	4821      	ldr	r0, [pc, #132]	; (9a24 <_ZN13DeviceManager8initScanEv+0xf8>)
    999e:	f011 f81f 	bl	1a9e0 <printk>
}
    99a2:	b009      	add	sp, #36	; 0x24
    99a4:	bd30      	pop	{r4, r5, pc}
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    99a6:	4920      	ldr	r1, [pc, #128]	; (9a28 <_ZN13DeviceManager8initScanEv+0xfc>)
    99a8:	e7f3      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    99aa:	4920      	ldr	r1, [pc, #128]	; (9a2c <_ZN13DeviceManager8initScanEv+0x100>)
    99ac:	e7f1      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    99ae:	4b20      	ldr	r3, [pc, #128]	; (9a30 <_ZN13DeviceManager8initScanEv+0x104>)
    99b0:	781b      	ldrb	r3, [r3, #0]
    99b2:	2b01      	cmp	r3, #1
    99b4:	d801      	bhi.n	99ba <_ZN13DeviceManager8initScanEv+0x8e>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    99b6:	491f      	ldr	r1, [pc, #124]	; (9a34 <_ZN13DeviceManager8initScanEv+0x108>)
    99b8:	e7eb      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 2)
    99ba:	2b02      	cmp	r3, #2
    99bc:	d115      	bne.n	99ea <_ZN13DeviceManager8initScanEv+0xbe>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    99be:	491e      	ldr	r1, [pc, #120]	; (9a38 <_ZN13DeviceManager8initScanEv+0x10c>)
    99c0:	e7e7      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0)
    99c2:	4b1b      	ldr	r3, [pc, #108]	; (9a30 <_ZN13DeviceManager8initScanEv+0x104>)
    99c4:	781b      	ldrb	r3, [r3, #0]
    99c6:	b90b      	cbnz	r3, 99cc <_ZN13DeviceManager8initScanEv+0xa0>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    99c8:	491c      	ldr	r1, [pc, #112]	; (9a3c <_ZN13DeviceManager8initScanEv+0x110>)
    99ca:	e7e2      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 1)
    99cc:	2b01      	cmp	r3, #1
    99ce:	d10c      	bne.n	99ea <_ZN13DeviceManager8initScanEv+0xbe>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    99d0:	491b      	ldr	r1, [pc, #108]	; (9a40 <_ZN13DeviceManager8initScanEv+0x114>)
    99d2:	e7de      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0)
    99d4:	4b16      	ldr	r3, [pc, #88]	; (9a30 <_ZN13DeviceManager8initScanEv+0x104>)
    99d6:	781b      	ldrb	r3, [r3, #0]
    99d8:	b90b      	cbnz	r3, 99de <_ZN13DeviceManager8initScanEv+0xb2>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    99da:	491a      	ldr	r1, [pc, #104]	; (9a44 <_ZN13DeviceManager8initScanEv+0x118>)
    99dc:	e7d9      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 1)
    99de:	2b01      	cmp	r3, #1
    99e0:	d103      	bne.n	99ea <_ZN13DeviceManager8initScanEv+0xbe>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    99e2:	4919      	ldr	r1, [pc, #100]	; (9a48 <_ZN13DeviceManager8initScanEv+0x11c>)
    99e4:	e7d5      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    99e6:	4919      	ldr	r1, [pc, #100]	; (9a4c <_ZN13DeviceManager8initScanEv+0x120>)
    99e8:	e7d3      	b.n	9992 <_ZN13DeviceManager8initScanEv+0x66>
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    99ea:	2100      	movs	r1, #0
    99ec:	2004      	movs	r0, #4
    99ee:	f003 fb3f 	bl	d070 <bt_scan_filter_enable>
		if (err) 
    99f2:	b2c0      	uxtb	r0, r0
    99f4:	b110      	cbz	r0, 99fc <_ZN13DeviceManager8initScanEv+0xd0>
			printk("Filters cannot be turned on\n");
    99f6:	4816      	ldr	r0, [pc, #88]	; (9a50 <_ZN13DeviceManager8initScanEv+0x124>)
    99f8:	f010 fff2 	bl	1a9e0 <printk>
		startScan();
    99fc:	f7ff ff82 	bl	9904 <_ZN13DeviceManager9startScanEv>
    9a00:	e7cf      	b.n	99a2 <_ZN13DeviceManager8initScanEv+0x76>
		bt_le_scan_start(&scanParam, deviceFound);
    9a02:	4914      	ldr	r1, [pc, #80]	; (9a54 <_ZN13DeviceManager8initScanEv+0x128>)
    9a04:	f007 fa52 	bl	10eac <bt_le_scan_start>
    9a08:	e7cb      	b.n	99a2 <_ZN13DeviceManager8initScanEv+0x76>
    9a0a:	bf00      	nop
    9a0c:	2000e319 	.word	0x2000e319
    9a10:	00300060 	.word	0x00300060
    9a14:	0001efc8 	.word	0x0001efc8
    9a18:	20008441 	.word	0x20008441
    9a1c:	20008158 	.word	0x20008158
    9a20:	0001efd0 	.word	0x0001efd0
    9a24:	0001f481 	.word	0x0001f481
    9a28:	0001efd4 	.word	0x0001efd4
    9a2c:	0001efd8 	.word	0x0001efd8
    9a30:	2000e322 	.word	0x2000e322
    9a34:	0001efdc 	.word	0x0001efdc
    9a38:	0001efe0 	.word	0x0001efe0
    9a3c:	0001efe4 	.word	0x0001efe4
    9a40:	0001efe8 	.word	0x0001efe8
    9a44:	0001efec 	.word	0x0001efec
    9a48:	0001eff0 	.word	0x0001eff0
    9a4c:	0001eff4 	.word	0x0001eff4
    9a50:	0001f4a1 	.word	0x0001f4a1
    9a54:	0001a87f 	.word	0x0001a87f

00009a58 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
{
    9a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (!subscriptionDone)
    9a5c:	4f5e      	ldr	r7, [pc, #376]	; (9bd8 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
{
    9a5e:	4604      	mov	r4, r0
	if (!subscriptionDone)
    9a60:	783b      	ldrb	r3, [r7, #0]
    9a62:	4d5e      	ldr	r5, [pc, #376]	; (9bdc <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x184>)
    9a64:	2b00      	cmp	r3, #0
    9a66:	d14c      	bne.n	9b02 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		subscribe_params[nbrConnectionsCentral-1].value = BT_GATT_CCC_NOTIFY;
    9a68:	f04f 0818 	mov.w	r8, #24
    9a6c:	2101      	movs	r1, #1
    9a6e:	782b      	ldrb	r3, [r5, #0]
    9a70:	4e5b      	ldr	r6, [pc, #364]	; (9be0 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x188>)
    9a72:	3b01      	subs	r3, #1
    9a74:	fb08 f303 	mul.w	r3, r8, r3
    9a78:	18f2      	adds	r2, r6, r3
    9a7a:	8191      	strh	r1, [r2, #12]
		subscribe_params[nbrConnectionsCentral-1].notify = onReceived;
    9a7c:	4a59      	ldr	r2, [pc, #356]	; (9be4 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18c>)
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    9a7e:	495a      	ldr	r1, [pc, #360]	; (9be8 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x190>)
		subscribe_params[nbrConnectionsCentral-1].notify = onReceived;
    9a80:	50f2      	str	r2, [r6, r3]
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    9a82:	f003 f87d 	bl	cb80 <bt_gatt_dm_char_by_uuid>
		if (!chrc) 
    9a86:	4681      	mov	r9, r0
    9a88:	b970      	cbnz	r0, 9aa8 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x50>
			printk("Missing CSC measurement characteristic\n");
    9a8a:	4858      	ldr	r0, [pc, #352]	; (9bec <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
			printk("Missing CSC measurement char CCC descriptor\n");
    9a8c:	f010 ffa8 	bl	1a9e0 <printk>
			err = bt_gatt_dm_data_release(dm);
    9a90:	4620      	mov	r0, r4
    9a92:	f011 fc28 	bl	1b2e6 <bt_gatt_dm_data_release>
			if (err) 
    9a96:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9a9a:	d037      	beq.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
				printk("Could not release discovery data, err: %d\n", err);
    9a9c:	4854      	ldr	r0, [pc, #336]	; (9bf0 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x198>)
}
    9a9e:	b003      	add	sp, #12
    9aa0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				printk("Could not release discovery data, err: %d\n", err);
    9aa4:	f010 bf9c 	b.w	1a9e0 <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    9aa8:	4601      	mov	r1, r0
    9aaa:	4a52      	ldr	r2, [pc, #328]	; (9bf4 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x19c>)
    9aac:	4620      	mov	r0, r4
    9aae:	f011 fc08 	bl	1b2c2 <bt_gatt_dm_desc_by_uuid>
		if (!desc) 
    9ab2:	b908      	cbnz	r0, 9ab8 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x60>
			printk("Missing CSC measurement char CCC descriptor\n");
    9ab4:	4850      	ldr	r0, [pc, #320]	; (9bf8 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a0>)
    9ab6:	e7e9      	b.n	9a8c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x34>
		subscribe_params[nbrConnectionsCentral-1].value_handle = desc->handle;
    9ab8:	782b      	ldrb	r3, [r5, #0]
    9aba:	8882      	ldrh	r2, [r0, #4]
    9abc:	3b01      	subs	r3, #1
    9abe:	fb08 6303 	mla	r3, r8, r3, r6
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9ac2:	4649      	mov	r1, r9
		subscribe_params[nbrConnectionsCentral-1].value_handle = desc->handle;
    9ac4:	811a      	strh	r2, [r3, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9ac6:	4620      	mov	r0, r4
    9ac8:	4a4c      	ldr	r2, [pc, #304]	; (9bfc <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a4>)
    9aca:	f011 fbfa 	bl	1b2c2 <bt_gatt_dm_desc_by_uuid>
		if (!desc) 
    9ace:	2800      	cmp	r0, #0
    9ad0:	d0f0      	beq.n	9ab4 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x5c>
		subscribe_params[nbrConnectionsCentral-1].ccc_handle = desc->handle;
    9ad2:	782b      	ldrb	r3, [r5, #0]
    9ad4:	8882      	ldrh	r2, [r0, #4]
    9ad6:	3b01      	subs	r3, #1
    9ad8:	fb08 6303 	mla	r3, r8, r3, r6
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &subscribe_params[nbrConnectionsCentral-1]);
    9adc:	4620      	mov	r0, r4
		subscribe_params[nbrConnectionsCentral-1].ccc_handle = desc->handle;
    9ade:	815a      	strh	r2, [r3, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &subscribe_params[nbrConnectionsCentral-1]);
    9ae0:	f011 fba0 	bl	1b224 <bt_gatt_dm_conn_get>
    9ae4:	7829      	ldrb	r1, [r5, #0]
    9ae6:	3901      	subs	r1, #1
    9ae8:	fb08 6101 	mla	r1, r8, r1, r6
    9aec:	f00b fa80 	bl	14ff0 <bt_gatt_subscribe>
		if (err) 
    9af0:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9af4:	d002      	beq.n	9afc <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xa4>
			printk("Subscription failed (err %d)\n", err);
    9af6:	4842      	ldr	r0, [pc, #264]	; (9c00 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a8>)
    9af8:	f010 ff72 	bl	1a9e0 <printk>
		bt_gatt_dm_data_release(dm);
    9afc:	4620      	mov	r0, r4
    9afe:	f011 fbf2 	bl	1b2e6 <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    9b02:	782d      	ldrb	r5, [r5, #0]
    9b04:	2d01      	cmp	r5, #1
    9b06:	d004      	beq.n	9b12 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xba>
    9b08:	2d02      	cmp	r5, #2
    9b0a:	d044      	beq.n	9b96 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x13e>
}
    9b0c:	b003      	add	sp, #12
    9b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (nbrAddresses == 1 && sensorInfos == 1)
    9b12:	4b3c      	ldr	r3, [pc, #240]	; (9c04 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1ac>)
    9b14:	781c      	ldrb	r4, [r3, #0]
    9b16:	2c01      	cmp	r4, #1
    9b18:	d11c      	bne.n	9b54 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xfc>
    9b1a:	4b3b      	ldr	r3, [pc, #236]	; (9c08 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b0>)
    9b1c:	781d      	ldrb	r5, [r3, #0]
    9b1e:	2d01      	cmp	r5, #1
    9b20:	d10d      	bne.n	9b3e <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xe6>
			printk("Discovery completed\n");
    9b22:	483a      	ldr	r0, [pc, #232]	; (9c0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b4>)
    9b24:	f010 ff5c 	bl	1a9e0 <printk>
			connectedCode[0] = 14;
    9b28:	230e      	movs	r3, #14
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9b2a:	462a      	mov	r2, r5
			subscriptionDone = true;
    9b2c:	703d      	strb	r5, [r7, #0]
			connectedCode[0] = 14;
    9b2e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9b32:	4b37      	ldr	r3, [pc, #220]	; (9c10 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b8>)
    9b34:	a901      	add	r1, sp, #4
    9b36:	6818      	ldr	r0, [r3, #0]
    9b38:	f000 fc24 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
    9b3c:	e7e6      	b.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		else if (nbrAddresses == 1 && sensorInfos == 2)
    9b3e:	2d02      	cmp	r5, #2
    9b40:	d1e4      	bne.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("Discovery completed\n");
    9b42:	4832      	ldr	r0, [pc, #200]	; (9c0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b4>)
    9b44:	f010 ff4c 	bl	1a9e0 <printk>
			connectedCode[0] = 15;
    9b48:	230f      	movs	r3, #15
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9b4a:	4622      	mov	r2, r4
			subscriptionDone = true;
    9b4c:	703c      	strb	r4, [r7, #0]
			connectedCode[0] = 15;
    9b4e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9b52:	e7ee      	b.n	9b32 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xda>
		else if (nbrAddresses == 2 && (sensorInfos == 3 || sensorInfos == 5))	
    9b54:	2c02      	cmp	r4, #2
    9b56:	d11b      	bne.n	9b90 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x138>
    9b58:	4b2b      	ldr	r3, [pc, #172]	; (9c08 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b0>)
    9b5a:	781b      	ldrb	r3, [r3, #0]
    9b5c:	2b03      	cmp	r3, #3
    9b5e:	d001      	beq.n	9b64 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x10c>
    9b60:	2b05      	cmp	r3, #5
    9b62:	d10e      	bne.n	9b82 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x12a>
			printk("First discovery completed\n");
    9b64:	482b      	ldr	r0, [pc, #172]	; (9c14 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1bc>)
    9b66:	f010 ff3b 	bl	1a9e0 <printk>
			connectedCode[0] = 17;	// speed connected
    9b6a:	2311      	movs	r3, #17
			connectedCode[0] = 21;	// cadence sensor connected
    9b6c:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9b70:	4b27      	ldr	r3, [pc, #156]	; (9c10 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b8>)
    9b72:	2201      	movs	r2, #1
    9b74:	6818      	ldr	r0, [r3, #0]
    9b76:	a901      	add	r1, sp, #4
    9b78:	f000 fc04 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
			initScan();
    9b7c:	f7ff fed6 	bl	992c <_ZN13DeviceManager8initScanEv>
    9b80:	e7c4      	b.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		else if (nbrAddresses == 2 && sensorInfos == 6)
    9b82:	2b06      	cmp	r3, #6
    9b84:	d1c2      	bne.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("First discovery completed\n");
    9b86:	4823      	ldr	r0, [pc, #140]	; (9c14 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1bc>)
    9b88:	f010 ff2a 	bl	1a9e0 <printk>
			connectedCode[0] = 18;	// cadence connected
    9b8c:	2312      	movs	r3, #18
    9b8e:	e7ed      	b.n	9b6c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x114>
		else if (nbrAddresses == 3)
    9b90:	2c03      	cmp	r4, #3
    9b92:	d0e7      	beq.n	9b64 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x10c>
    9b94:	e7ba      	b.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		if (nbrAddresses == 2 && sensorInfos == 3)
    9b96:	4b1b      	ldr	r3, [pc, #108]	; (9c04 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1ac>)
    9b98:	781b      	ldrb	r3, [r3, #0]
    9b9a:	2b02      	cmp	r3, #2
    9b9c:	d115      	bne.n	9bca <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x172>
    9b9e:	4b1a      	ldr	r3, [pc, #104]	; (9c08 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b0>)
    9ba0:	781b      	ldrb	r3, [r3, #0]
    9ba2:	2b03      	cmp	r3, #3
    9ba4:	d1b2      	bne.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("Second discovery completed\n");
    9ba6:	481c      	ldr	r0, [pc, #112]	; (9c18 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c0>)
    9ba8:	f010 ff1a 	bl	1a9e0 <printk>
			connectedCode[0] = 19;	// cadence sensor connected
    9bac:	2313      	movs	r3, #19
    9bae:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn, connectedCode, sizeof(connectedCode));
    9bb2:	4b17      	ldr	r3, [pc, #92]	; (9c10 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b8>)
    9bb4:	2201      	movs	r2, #1
    9bb6:	6818      	ldr	r0, [r3, #0]
    9bb8:	a901      	add	r1, sp, #4
    9bba:	f000 fbe3 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9bbe:	2001      	movs	r0, #1
    9bc0:	f013 fd78 	bl	1d6b4 <dk_set_led_on>
			subscriptionDone = true;
    9bc4:	2301      	movs	r3, #1
    9bc6:	703b      	strb	r3, [r7, #0]
    9bc8:	e7a0      	b.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		else if (nbrAddresses == 3) 
    9bca:	2b03      	cmp	r3, #3
    9bcc:	d19e      	bne.n	9b0c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("Second discovery completed\n");	
    9bce:	4812      	ldr	r0, [pc, #72]	; (9c18 <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c0>)
    9bd0:	f010 ff06 	bl	1a9e0 <printk>
			connectedCode[0] = 21;	// cadence sensor connected
    9bd4:	2315      	movs	r3, #21
    9bd6:	e7c9      	b.n	9b6c <_ZN13DeviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x114>
    9bd8:	2000e31f 	.word	0x2000e31f
    9bdc:	2000e322 	.word	0x2000e322
    9be0:	2000999c 	.word	0x2000999c
    9be4:	00009449 	.word	0x00009449
    9be8:	0001f00c 	.word	0x0001f00c
    9bec:	0001f4be 	.word	0x0001f4be
    9bf0:	0001f4e6 	.word	0x0001f4e6
    9bf4:	0001f010 	.word	0x0001f010
    9bf8:	0001f511 	.word	0x0001f511
    9bfc:	0001f014 	.word	0x0001f014
    9c00:	0001f53e 	.word	0x0001f53e
    9c04:	2000e31b 	.word	0x2000e31b
    9c08:	2000e319 	.word	0x2000e319
    9c0c:	0001f214 	.word	0x0001f214
    9c10:	20009998 	.word	0x20009998
    9c14:	0001f55c 	.word	0x0001f55c
    9c18:	0001f229 	.word	0x0001f229

00009c1c <_ZN13DeviceManager11initCentralEv>:
{
    9c1c:	b510      	push	{r4, lr}
    9c1e:	4604      	mov	r4, r0
	printk("Init Central\n");
    9c20:	481e      	ldr	r0, [pc, #120]	; (9c9c <_ZN13DeviceManager11initCentralEv+0x80>)
    9c22:	f010 fedd 	bl	1a9e0 <printk>
	if (getDevice() == 1 || getDevice() == 3)
    9c26:	f7ff fddb 	bl	97e0 <_ZN13DeviceManager9getDeviceEv>
    9c2a:	2801      	cmp	r0, #1
    9c2c:	d007      	beq.n	9c3e <_ZN13DeviceManager11initCentralEv+0x22>
    9c2e:	2803      	cmp	r0, #3
    9c30:	d132      	bne.n	9c98 <_ZN13DeviceManager11initCentralEv+0x7c>
		initScan();
    9c32:	f7ff fe7b 	bl	992c <_ZN13DeviceManager8initScanEv>
}
    9c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9c3a:	f7ff be63 	b.w	9904 <_ZN13DeviceManager9startScanEv>
			err = bt_enable(nullptr);
    9c3e:	2000      	movs	r0, #0
    9c40:	f006 fcfc 	bl	1063c <bt_enable>
			if (err)
    9c44:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9c48:	d004      	beq.n	9c54 <_ZN13DeviceManager11initCentralEv+0x38>
				printk("Bluetooth init failed (err %d)\n", err);
    9c4a:	4815      	ldr	r0, [pc, #84]	; (9ca0 <_ZN13DeviceManager11initCentralEv+0x84>)
}
    9c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9c50:	f010 bec6 	b.w	1a9e0 <printk>
			printk("Bluetooth ready\n");
    9c54:	4813      	ldr	r0, [pc, #76]	; (9ca4 <_ZN13DeviceManager11initCentralEv+0x88>)
    9c56:	f010 fec3 	bl	1a9e0 <printk>
			err = dk_leds_init();
    9c5a:	f00c fed3 	bl	16a04 <dk_leds_init>
			if (err) 
    9c5e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9c62:	d001      	beq.n	9c68 <_ZN13DeviceManager11initCentralEv+0x4c>
				printk("LEDs init failed (err %d)\n", err);
    9c64:	4810      	ldr	r0, [pc, #64]	; (9ca8 <_ZN13DeviceManager11initCentralEv+0x8c>)
    9c66:	e7f1      	b.n	9c4c <_ZN13DeviceManager11initCentralEv+0x30>
			err = initButton();
    9c68:	f7ff fdce 	bl	9808 <_ZN13DeviceManager10initButtonEv>
			if (err) 
    9c6c:	4601      	mov	r1, r0
    9c6e:	b108      	cbz	r0, 9c74 <_ZN13DeviceManager11initCentralEv+0x58>
				printk("Button init failed (err %d)\n", err);
    9c70:	480e      	ldr	r0, [pc, #56]	; (9cac <_ZN13DeviceManager11initCentralEv+0x90>)
    9c72:	e7eb      	b.n	9c4c <_ZN13DeviceManager11initCentralEv+0x30>
			err = bt_lbs_init(&lbs_callbacs);
    9c74:	f104 0014 	add.w	r0, r4, #20
    9c78:	f003 fd0e 	bl	d698 <bt_lbs_init>
			if (err) 
    9c7c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9c80:	d001      	beq.n	9c86 <_ZN13DeviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    9c82:	480b      	ldr	r0, [pc, #44]	; (9cb0 <_ZN13DeviceManager11initCentralEv+0x94>)
    9c84:	e7e2      	b.n	9c4c <_ZN13DeviceManager11initCentralEv+0x30>
				settings_load();
    9c86:	f011 f986 	bl	1af96 <settings_load>
				printk("Settings loaded\n");
    9c8a:	480a      	ldr	r0, [pc, #40]	; (9cb4 <_ZN13DeviceManager11initCentralEv+0x98>)
    9c8c:	f010 fea8 	bl	1a9e0 <printk>
			bt_conn_cb_register(&conn_callbacks);
    9c90:	4620      	mov	r0, r4
    9c92:	f007 fb31 	bl	112f8 <bt_conn_cb_register>
    9c96:	e7cc      	b.n	9c32 <_ZN13DeviceManager11initCentralEv+0x16>
}
    9c98:	bd10      	pop	{r4, pc}
    9c9a:	bf00      	nop
    9c9c:	0001f577 	.word	0x0001f577
    9ca0:	0001f3fe 	.word	0x0001f3fe
    9ca4:	0001f585 	.word	0x0001f585
    9ca8:	0001f3c6 	.word	0x0001f3c6
    9cac:	0001f3e1 	.word	0x0001f3e1
    9cb0:	0001f435 	.word	0x0001f435
    9cb4:	0001f596 	.word	0x0001f596

00009cb8 <_ZN13DeviceManager9setDeviceEbb>:
{
    9cb8:	b410      	push	{r4}
    isPeripheral = p;
    9cba:	4c09      	ldr	r4, [pc, #36]	; (9ce0 <_ZN13DeviceManager9setDeviceEbb+0x28>)
{
    9cbc:	4603      	mov	r3, r0
    isPeripheral = p;
    9cbe:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    9cc0:	4c08      	ldr	r4, [pc, #32]	; (9ce4 <_ZN13DeviceManager9setDeviceEbb+0x2c>)
    9cc2:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9cc4:	b139      	cbz	r1, 9cd6 <_ZN13DeviceManager9setDeviceEbb+0x1e>
    9cc6:	b11a      	cbz	r2, 9cd0 <_ZN13DeviceManager9setDeviceEbb+0x18>
		initPeripheral();
    9cc8:	4618      	mov	r0, r3
}
    9cca:	bc10      	pop	{r4}
		initPeripheral();
    9ccc:	f7ff bdd6 	b.w	987c <_ZN13DeviceManager14initPeripheralEv>
}
    9cd0:	bc10      	pop	{r4}
		initCentral();
    9cd2:	f7ff bfa3 	b.w	9c1c <_ZN13DeviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9cd6:	2a00      	cmp	r2, #0
    9cd8:	d1f6      	bne.n	9cc8 <_ZN13DeviceManager9setDeviceEbb+0x10>
}
    9cda:	bc10      	pop	{r4}
    9cdc:	4770      	bx	lr
    9cde:	bf00      	nop
    9ce0:	2000e31a 	.word	0x2000e31a
    9ce4:	2000e359 	.word	0x2000e359

00009ce8 <_ZN13DeviceManager19scanConnectionErrorEP19bt_scan_device_info>:
{
    9ce8:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    9cea:	4803      	ldr	r0, [pc, #12]	; (9cf8 <_ZN13DeviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9cec:	f010 fe78 	bl	1a9e0 <printk>
}
    9cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9cf4:	f7ff be06 	b.w	9904 <_ZN13DeviceManager9startScanEv>
    9cf8:	0001f5a7 	.word	0x0001f5a7

00009cfc <_ZN13DeviceManager6reScanEh>:
{
    9cfc:	b510      	push	{r4, lr}
    9cfe:	4604      	mov	r4, r0
	bt_scan_filter_remove_all();	
    9d00:	f003 f98a 	bl	d018 <bt_scan_filter_remove_all>
	switch (type)
    9d04:	2c02      	cmp	r4, #2
    9d06:	d019      	beq.n	9d3c <_ZN13DeviceManager6reScanEh+0x40>
    9d08:	2c03      	cmp	r4, #3
    9d0a:	d019      	beq.n	9d40 <_ZN13DeviceManager6reScanEh+0x44>
    9d0c:	2c01      	cmp	r4, #1
    9d0e:	d108      	bne.n	9d22 <_ZN13DeviceManager6reScanEh+0x26>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9d10:	490c      	ldr	r1, [pc, #48]	; (9d44 <_ZN13DeviceManager6reScanEh+0x48>)
    9d12:	2003      	movs	r0, #3
    9d14:	f003 f90e 	bl	cf34 <bt_scan_filter_add>
		if (err) 
    9d18:	b2c0      	uxtb	r0, r0
    9d1a:	b110      	cbz	r0, 9d22 <_ZN13DeviceManager6reScanEh+0x26>
			printk("Scanning filters cannot be set\n");
    9d1c:	480a      	ldr	r0, [pc, #40]	; (9d48 <_ZN13DeviceManager6reScanEh+0x4c>)
    9d1e:	f010 fe5f 	bl	1a9e0 <printk>
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    9d22:	2100      	movs	r1, #0
    9d24:	2004      	movs	r0, #4
    9d26:	f003 f9a3 	bl	d070 <bt_scan_filter_enable>
	if (err) 
    9d2a:	b2c0      	uxtb	r0, r0
    9d2c:	b110      	cbz	r0, 9d34 <_ZN13DeviceManager6reScanEh+0x38>
		printk("Filters cannot be turned on\n");
    9d2e:	4807      	ldr	r0, [pc, #28]	; (9d4c <_ZN13DeviceManager6reScanEh+0x50>)
    9d30:	f010 fe56 	bl	1a9e0 <printk>
}
    9d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	startScan();
    9d38:	f7ff bde4 	b.w	9904 <_ZN13DeviceManager9startScanEv>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9d3c:	4904      	ldr	r1, [pc, #16]	; (9d50 <_ZN13DeviceManager6reScanEh+0x54>)
    9d3e:	e7e8      	b.n	9d12 <_ZN13DeviceManager6reScanEh+0x16>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9d40:	4904      	ldr	r1, [pc, #16]	; (9d54 <_ZN13DeviceManager6reScanEh+0x58>)
    9d42:	e7e6      	b.n	9d12 <_ZN13DeviceManager6reScanEh+0x16>
    9d44:	0001eff8 	.word	0x0001eff8
    9d48:	0001f481 	.word	0x0001f481
    9d4c:	0001f4a1 	.word	0x0001f4a1
    9d50:	0001effc 	.word	0x0001effc
    9d54:	0001f000 	.word	0x0001f000

00009d58 <_ZN13DeviceManager11discoverCSCEv>:
{
    9d58:	b510      	push	{r4, lr}
	printk("nbr conn: %d\n", nbrConnectionsCentral);
    9d5a:	4c0c      	ldr	r4, [pc, #48]	; (9d8c <_ZN13DeviceManager11discoverCSCEv+0x34>)
    9d5c:	480c      	ldr	r0, [pc, #48]	; (9d90 <_ZN13DeviceManager11discoverCSCEv+0x38>)
    9d5e:	7821      	ldrb	r1, [r4, #0]
    9d60:	f010 fe3e 	bl	1a9e0 <printk>
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb_CSC, NULL);
    9d64:	7820      	ldrb	r0, [r4, #0]
    9d66:	4c0b      	ldr	r4, [pc, #44]	; (9d94 <_ZN13DeviceManager11discoverCSCEv+0x3c>)
    9d68:	3801      	subs	r0, #1
    9d6a:	490b      	ldr	r1, [pc, #44]	; (9d98 <_ZN13DeviceManager11discoverCSCEv+0x40>)
    9d6c:	2300      	movs	r3, #0
    9d6e:	4a0b      	ldr	r2, [pc, #44]	; (9d9c <_ZN13DeviceManager11discoverCSCEv+0x44>)
    9d70:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9d74:	f002 ff30 	bl	cbd8 <bt_gatt_dm_start>
	if (err) 
    9d78:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9d7c:	d004      	beq.n	9d88 <_ZN13DeviceManager11discoverCSCEv+0x30>
}
    9d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9d82:	4807      	ldr	r0, [pc, #28]	; (9da0 <_ZN13DeviceManager11discoverCSCEv+0x48>)
    9d84:	f010 be2c 	b.w	1a9e0 <printk>
}
    9d88:	bd10      	pop	{r4, pc}
    9d8a:	bf00      	nop
    9d8c:	2000e322 	.word	0x2000e322
    9d90:	0001f5ba 	.word	0x0001f5ba
    9d94:	20009a14 	.word	0x20009a14
    9d98:	0001f004 	.word	0x0001f004
    9d9c:	2000814c 	.word	0x2000814c
    9da0:	0001f5c8 	.word	0x0001f5c8

00009da4 <_ZN13DeviceManager10discoverHREv>:
{
    9da4:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_HRS, &discovery_cb_HR, NULL);
    9da6:	4b0a      	ldr	r3, [pc, #40]	; (9dd0 <_ZN13DeviceManager10discoverHREv+0x2c>)
    9da8:	4c0a      	ldr	r4, [pc, #40]	; (9dd4 <_ZN13DeviceManager10discoverHREv+0x30>)
    9daa:	7818      	ldrb	r0, [r3, #0]
    9dac:	490a      	ldr	r1, [pc, #40]	; (9dd8 <_ZN13DeviceManager10discoverHREv+0x34>)
    9dae:	3801      	subs	r0, #1
    9db0:	2300      	movs	r3, #0
    9db2:	4a0a      	ldr	r2, [pc, #40]	; (9ddc <_ZN13DeviceManager10discoverHREv+0x38>)
    9db4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9db8:	f002 ff0e 	bl	cbd8 <bt_gatt_dm_start>
	if (err) 
    9dbc:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9dc0:	d004      	beq.n	9dcc <_ZN13DeviceManager10discoverHREv+0x28>
}
    9dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9dc6:	4806      	ldr	r0, [pc, #24]	; (9de0 <_ZN13DeviceManager10discoverHREv+0x3c>)
    9dc8:	f010 be0a 	b.w	1a9e0 <printk>
}
    9dcc:	bd10      	pop	{r4, pc}
    9dce:	bf00      	nop
    9dd0:	2000e322 	.word	0x2000e322
    9dd4:	20009a14 	.word	0x20009a14
    9dd8:	0001f008 	.word	0x0001f008
    9ddc:	20008140 	.word	0x20008140
    9de0:	0001f5c8 	.word	0x0001f5c8

00009de4 <_ZN13DeviceManager9connectedEP7bt_connh>:
{
    9de4:	b570      	push	{r4, r5, r6, lr}
    9de6:	b090      	sub	sp, #64	; 0x40
    9de8:	460c      	mov	r4, r1
	uint8_t error = bt_conn_get_info(conn,&info);
    9dea:	a901      	add	r1, sp, #4
{
    9dec:	4605      	mov	r5, r0
	uint8_t error = bt_conn_get_info(conn,&info);
    9dee:	f007 fd83 	bl	118f8 <bt_conn_get_info>
	if (error)
    9df2:	b2c0      	uxtb	r0, r0
    9df4:	b120      	cbz	r0, 9e00 <_ZN13DeviceManager9connectedEP7bt_connh+0x1c>
		printk("Cannot get info of connection object\n");
    9df6:	4838      	ldr	r0, [pc, #224]	; (9ed8 <_ZN13DeviceManager9connectedEP7bt_connh+0xf4>)
    9df8:	f010 fdf2 	bl	1a9e0 <printk>
}
    9dfc:	b010      	add	sp, #64	; 0x40
    9dfe:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9e00:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e04:	2b00      	cmp	r3, #0
    9e06:	d141      	bne.n	9e8c <_ZN13DeviceManager9connectedEP7bt_connh+0xa8>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9e08:	4628      	mov	r0, r5
    9e0a:	f012 fac7 	bl	1c39c <bt_conn_get_dst>
    9e0e:	221e      	movs	r2, #30
    9e10:	a908      	add	r1, sp, #32
    9e12:	f7ff fc79 	bl	9708 <bt_addr_le_to_str.isra.0>
		if (err) 
    9e16:	b13c      	cbz	r4, 9e28 <_ZN13DeviceManager9connectedEP7bt_connh+0x44>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9e18:	4622      	mov	r2, r4
    9e1a:	4830      	ldr	r0, [pc, #192]	; (9edc <_ZN13DeviceManager9connectedEP7bt_connh+0xf8>)
    9e1c:	a908      	add	r1, sp, #32
    9e1e:	f010 fddf 	bl	1a9e0 <printk>
			startScan();
    9e22:	f7ff fd6f 	bl	9904 <_ZN13DeviceManager9startScanEv>
			return;
    9e26:	e7e9      	b.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
		printk("Connected: %s\n", addr);
    9e28:	482d      	ldr	r0, [pc, #180]	; (9ee0 <_ZN13DeviceManager9connectedEP7bt_connh+0xfc>)
    9e2a:	a908      	add	r1, sp, #32
    9e2c:	f010 fdd8 	bl	1a9e0 <printk>
		for (uint8_t i=0; i <= MAX_CONNECTIONS_CENTRAL-1; i++)
    9e30:	4b2c      	ldr	r3, [pc, #176]	; (9ee4 <_ZN13DeviceManager9connectedEP7bt_connh+0x100>)
    9e32:	461e      	mov	r6, r3
			if (centralConnections[i] == nullptr)
    9e34:	f853 2b04 	ldr.w	r2, [r3], #4
    9e38:	b9c2      	cbnz	r2, 9e6c <_ZN13DeviceManager9connectedEP7bt_connh+0x88>
				centralConnections[i] = bt_conn_ref(conn);
    9e3a:	4628      	mov	r0, r5
    9e3c:	f012 fa75 	bl	1c32a <bt_conn_ref>
    9e40:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
		nbrConnectionsCentral++;
    9e44:	4c28      	ldr	r4, [pc, #160]	; (9ee8 <_ZN13DeviceManager9connectedEP7bt_connh+0x104>)
		bt_conn_unref(conn);
    9e46:	4628      	mov	r0, r5
    9e48:	f007 fbc4 	bl	115d4 <bt_conn_unref>
		nbrConnectionsCentral++;
    9e4c:	7823      	ldrb	r3, [r4, #0]
    9e4e:	3301      	adds	r3, #1
    9e50:	7023      	strb	r3, [r4, #0]
		bt_get_name();
    9e52:	f006 fc7b 	bl	1074c <bt_get_name>
		switch (sensorInfos)
    9e56:	4b25      	ldr	r3, [pc, #148]	; (9eec <_ZN13DeviceManager9connectedEP7bt_connh+0x108>)
    9e58:	781b      	ldrb	r3, [r3, #0]
    9e5a:	3b01      	subs	r3, #1
    9e5c:	2b06      	cmp	r3, #6
    9e5e:	d8cd      	bhi.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
    9e60:	e8df f003 	tbb	[pc, r3]
    9e64:	080b0b0b 	.word	0x080b0b0b
    9e68:	0e0e      	.short	0x0e0e
    9e6a:	11          	.byte	0x11
    9e6b:	00          	.byte	0x00
		for (uint8_t i=0; i <= MAX_CONNECTIONS_CENTRAL-1; i++)
    9e6c:	3401      	adds	r4, #1
    9e6e:	2c05      	cmp	r4, #5
    9e70:	d1e0      	bne.n	9e34 <_ZN13DeviceManager9connectedEP7bt_connh+0x50>
    9e72:	e7e7      	b.n	9e44 <_ZN13DeviceManager9connectedEP7bt_connh+0x60>
			if (nbrConnectionsCentral <= 2)
    9e74:	7823      	ldrb	r3, [r4, #0]
    9e76:	2b02      	cmp	r3, #2
    9e78:	d805      	bhi.n	9e86 <_ZN13DeviceManager9connectedEP7bt_connh+0xa2>
				discoverCSC();
    9e7a:	f7ff ff6d 	bl	9d58 <_ZN13DeviceManager11discoverCSCEv>
    9e7e:	e7bd      	b.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
			if (nbrConnectionsCentral == 1)
    9e80:	7823      	ldrb	r3, [r4, #0]
    9e82:	2b01      	cmp	r3, #1
    9e84:	d0f9      	beq.n	9e7a <_ZN13DeviceManager9connectedEP7bt_connh+0x96>
			discoverHR();
    9e86:	f7ff ff8d 	bl	9da4 <_ZN13DeviceManager10discoverHREv>
			break;
    9e8a:	e7b7      	b.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9e8c:	2b01      	cmp	r3, #1
    9e8e:	d1b5      	bne.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
		if (err) 
    9e90:	b124      	cbz	r4, 9e9c <_ZN13DeviceManager9connectedEP7bt_connh+0xb8>
			printk("Connection failed (err %u)\n", err);
    9e92:	4621      	mov	r1, r4
    9e94:	4816      	ldr	r0, [pc, #88]	; (9ef0 <_ZN13DeviceManager9connectedEP7bt_connh+0x10c>)
    9e96:	f010 fda3 	bl	1a9e0 <printk>
			return;
    9e9a:	e7af      	b.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
		disconnectOnce = true;
    9e9c:	4a15      	ldr	r2, [pc, #84]	; (9ef4 <_ZN13DeviceManager9connectedEP7bt_connh+0x110>)
		printk("Connected with application\n");
    9e9e:	4816      	ldr	r0, [pc, #88]	; (9ef8 <_ZN13DeviceManager9connectedEP7bt_connh+0x114>)
		disconnectOnce = true;
    9ea0:	7013      	strb	r3, [r2, #0]
		connectedPeripheral = true;
    9ea2:	4a16      	ldr	r2, [pc, #88]	; (9efc <_ZN13DeviceManager9connectedEP7bt_connh+0x118>)
    9ea4:	7013      	strb	r3, [r2, #0]
		printk("Connected with application\n");
    9ea6:	f010 fd9b 	bl	1a9e0 <printk>
		peripheralConn = bt_conn_ref(conn);
    9eaa:	4628      	mov	r0, r5
    9eac:	f012 fa3d 	bl	1c32a <bt_conn_ref>
    9eb0:	4b13      	ldr	r3, [pc, #76]	; (9f00 <_ZN13DeviceManager9connectedEP7bt_connh+0x11c>)
    9eb2:	6018      	str	r0, [r3, #0]
		bt_conn_unref(conn);
    9eb4:	4628      	mov	r0, r5
    9eb6:	f007 fb8d 	bl	115d4 <bt_conn_unref>
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);			
    9eba:	4620      	mov	r0, r4
    9ebc:	f013 fbfa 	bl	1d6b4 <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9ec0:	f7ff fc8e 	bl	97e0 <_ZN13DeviceManager9getDeviceEv>
    9ec4:	2803      	cmp	r0, #3
    9ec6:	d199      	bne.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
    9ec8:	4b07      	ldr	r3, [pc, #28]	; (9ee8 <_ZN13DeviceManager9connectedEP7bt_connh+0x104>)
    9eca:	781b      	ldrb	r3, [r3, #0]
    9ecc:	2b00      	cmp	r3, #0
    9ece:	d195      	bne.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
			initScan();
    9ed0:	f7ff fd2c 	bl	992c <_ZN13DeviceManager8initScanEv>
    9ed4:	e792      	b.n	9dfc <_ZN13DeviceManager9connectedEP7bt_connh+0x18>
    9ed6:	bf00      	nop
    9ed8:	0001f5f3 	.word	0x0001f5f3
    9edc:	0001f619 	.word	0x0001f619
    9ee0:	0001f637 	.word	0x0001f637
    9ee4:	20009a14 	.word	0x20009a14
    9ee8:	2000e322 	.word	0x2000e322
    9eec:	2000e319 	.word	0x2000e319
    9ef0:	0001f646 	.word	0x0001f646
    9ef4:	20008440 	.word	0x20008440
    9ef8:	0001f662 	.word	0x0001f662
    9efc:	2000e320 	.word	0x2000e320
    9f00:	20009998 	.word	0x20009998

00009f04 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    9f04:	b570      	push	{r4, r5, r6, lr}
    9f06:	b08e      	sub	sp, #56	; 0x38
    9f08:	4605      	mov	r5, r0
	nbrAddresses = getNbrOfAddresses();
    9f0a:	f000 fa75 	bl	a3f8 <_Z17getNbrOfAddressesv>
    9f0e:	4b44      	ldr	r3, [pc, #272]	; (a020 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    9f10:	4604      	mov	r4, r0
    9f12:	4e44      	ldr	r6, [pc, #272]	; (a024 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9f14:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    9f16:	2800      	cmp	r0, #0
    9f18:	d049      	beq.n	9fae <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
		ready = true;
    9f1a:	2101      	movs	r1, #1
		switch (nbrAddresses)
    9f1c:	2802      	cmp	r0, #2
		ready = true;
    9f1e:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    9f20:	d035      	beq.n	9f8e <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8a>
    9f22:	2803      	cmp	r0, #3
    9f24:	d039      	beq.n	9f9a <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x96>
    9f26:	4288      	cmp	r0, r1
    9f28:	d103      	bne.n	9f32 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
			getAddress(sensor1,1);
    9f2a:	4601      	mov	r1, r0
    9f2c:	483e      	ldr	r0, [pc, #248]	; (a028 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
			getAddress(sensor2,2);
    9f2e:	f000 fa69 	bl	a404 <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9f32:	682b      	ldr	r3, [r5, #0]
    9f34:	221e      	movs	r2, #30
    9f36:	6818      	ldr	r0, [r3, #0]
    9f38:	a906      	add	r1, sp, #24
    9f3a:	f7ff fbe5 	bl	9708 <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    9f3e:	682b      	ldr	r3, [r5, #0]
    9f40:	2212      	movs	r2, #18
    9f42:	6818      	ldr	r0, [r3, #0]
    9f44:	a901      	add	r1, sp, #4
    9f46:	f7ff fbdf 	bl	9708 <bt_addr_le_to_str.isra.0>
	if (ready)
    9f4a:	7833      	ldrb	r3, [r6, #0]
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d043      	beq.n	9fd8 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd4>
		printk("once sensor 1 %d\n", once_sensor1);
    9f50:	4c36      	ldr	r4, [pc, #216]	; (a02c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
		bt_scan_stop();
    9f52:	f011 f9e0 	bl	1b316 <bt_scan_stop>
		printk("once sensor 1 %d\n", once_sensor1);
    9f56:	7821      	ldrb	r1, [r4, #0]
    9f58:	4835      	ldr	r0, [pc, #212]	; (a030 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9f5a:	f010 fd41 	bl	1a9e0 <printk>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9f5e:	4932      	ldr	r1, [pc, #200]	; (a028 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9f60:	a801      	add	r0, sp, #4
    9f62:	f010 fc8e 	bl	1a882 <_ZN13DeviceManager14checkAddressesEPcS0_>
    9f66:	b330      	cbz	r0, 9fb6 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xb2>
    9f68:	7823      	ldrb	r3, [r4, #0]
    9f6a:	b323      	cbz	r3, 9fb6 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xb2>
			printk("Correct sensor found\n");
    9f6c:	4831      	ldr	r0, [pc, #196]	; (a034 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9f6e:	f010 fd37 	bl	1a9e0 <printk>
			once_sensor1 = false;
    9f72:	2300      	movs	r3, #0
    9f74:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9f76:	4b30      	ldr	r3, [pc, #192]	; (a038 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9f78:	6828      	ldr	r0, [r5, #0]
    9f7a:	781a      	ldrb	r2, [r3, #0]
    9f7c:	4b2f      	ldr	r3, [pc, #188]	; (a03c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9f7e:	4930      	ldr	r1, [pc, #192]	; (a040 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9f80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9f84:	686a      	ldr	r2, [r5, #4]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9f86:	6800      	ldr	r0, [r0, #0]
    9f88:	f007 fce2 	bl	11950 <bt_conn_le_create>
}
    9f8c:	e024      	b.n	9fd8 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd4>
			getAddress(sensor1,1);
    9f8e:	4826      	ldr	r0, [pc, #152]	; (a028 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9f90:	f000 fa38 	bl	a404 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9f94:	4621      	mov	r1, r4
    9f96:	482b      	ldr	r0, [pc, #172]	; (a044 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9f98:	e7c9      	b.n	9f2e <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
			getAddress(sensor1,1);
    9f9a:	4823      	ldr	r0, [pc, #140]	; (a028 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9f9c:	f000 fa32 	bl	a404 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9fa0:	2102      	movs	r1, #2
    9fa2:	4828      	ldr	r0, [pc, #160]	; (a044 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9fa4:	f000 fa2e 	bl	a404 <_Z10getAddressPch>
			getAddress(sensor3,3);
    9fa8:	4621      	mov	r1, r4
    9faa:	4827      	ldr	r0, [pc, #156]	; (a048 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9fac:	e7bf      	b.n	9f2e <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
		initScan();
    9fae:	f7ff fcbd 	bl	992c <_ZN13DeviceManager8initScanEv>
		ready = false;
    9fb2:	7034      	strb	r4, [r6, #0]
    9fb4:	e7bd      	b.n	9f32 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2 && !once_sensor1)
    9fb6:	4923      	ldr	r1, [pc, #140]	; (a044 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9fb8:	a801      	add	r0, sp, #4
    9fba:	f010 fc62 	bl	1a882 <_ZN13DeviceManager14checkAddressesEPcS0_>
    9fbe:	b120      	cbz	r0, 9fca <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc6>
    9fc0:	4e22      	ldr	r6, [pc, #136]	; (a04c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
    9fc2:	7833      	ldrb	r3, [r6, #0]
    9fc4:	b10b      	cbz	r3, 9fca <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc6>
    9fc6:	7824      	ldrb	r4, [r4, #0]
    9fc8:	b144      	cbz	r4, 9fdc <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd8>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9fca:	491f      	ldr	r1, [pc, #124]	; (a048 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9fcc:	a801      	add	r0, sp, #4
    9fce:	f010 fc58 	bl	1a882 <_ZN13DeviceManager14checkAddressesEPcS0_>
    9fd2:	b980      	cbnz	r0, 9ff6 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xf2>
			startScan();
    9fd4:	f7ff fc96 	bl	9904 <_ZN13DeviceManager9startScanEv>
}
    9fd8:	b00e      	add	sp, #56	; 0x38
    9fda:	bd70      	pop	{r4, r5, r6, pc}
			printk("Correct sensor found\n");
    9fdc:	4815      	ldr	r0, [pc, #84]	; (a034 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9fde:	f010 fcff 	bl	1a9e0 <printk>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9fe2:	4b15      	ldr	r3, [pc, #84]	; (a038 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9fe4:	6828      	ldr	r0, [r5, #0]
    9fe6:	781a      	ldrb	r2, [r3, #0]
    9fe8:	4b14      	ldr	r3, [pc, #80]	; (a03c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9fea:	4919      	ldr	r1, [pc, #100]	; (a050 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x14c>)
    9fec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			once_sensor2 = false;
    9ff0:	7034      	strb	r4, [r6, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9ff2:	686a      	ldr	r2, [r5, #4]
    9ff4:	e7c7      	b.n	9f86 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x82>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9ff6:	4c17      	ldr	r4, [pc, #92]	; (a054 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9ff8:	7823      	ldrb	r3, [r4, #0]
    9ffa:	2b00      	cmp	r3, #0
    9ffc:	d0ea      	beq.n	9fd4 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd0>
			printk("Correct sensor found\n");
    9ffe:	480d      	ldr	r0, [pc, #52]	; (a034 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    a000:	f010 fcee 	bl	1a9e0 <printk>
			once_sensor3 = false;
    a004:	2300      	movs	r3, #0
    a006:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    a008:	f011 f985 	bl	1b316 <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    a00c:	4b0a      	ldr	r3, [pc, #40]	; (a038 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    a00e:	6828      	ldr	r0, [r5, #0]
    a010:	781a      	ldrb	r2, [r3, #0]
    a012:	4b0a      	ldr	r3, [pc, #40]	; (a03c <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    a014:	4910      	ldr	r1, [pc, #64]	; (a058 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x154>)
    a016:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a01a:	686a      	ldr	r2, [r5, #4]
    a01c:	e7b3      	b.n	9f86 <_ZN13DeviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x82>
    a01e:	bf00      	nop
    a020:	2000e31b 	.word	0x2000e31b
    a024:	2000e361 	.word	0x2000e361
    a028:	2000e326 	.word	0x2000e326
    a02c:	2000843d 	.word	0x2000843d
    a030:	0001f67e 	.word	0x0001f67e
    a034:	0001f690 	.word	0x0001f690
    a038:	2000e322 	.word	0x2000e322
    a03c:	20009a14 	.word	0x20009a14
    a040:	0001e75c 	.word	0x0001e75c
    a044:	2000e337 	.word	0x2000e337
    a048:	2000e348 	.word	0x2000e348
    a04c:	2000843e 	.word	0x2000843e
    a050:	0001e76c 	.word	0x0001e76c
    a054:	2000843f 	.word	0x2000843f
    a058:	0001e77c 	.word	0x0001e77c

0000a05c <_ZN13DeviceManager12disconnectedEP7bt_connh>:
{
    a05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a060:	b096      	sub	sp, #88	; 0x58
    a062:	460e      	mov	r6, r1
	uint8_t err = bt_conn_get_info(conn,&info);
    a064:	a907      	add	r1, sp, #28
{
    a066:	4607      	mov	r7, r0
	uint8_t err = bt_conn_get_info(conn,&info);
    a068:	f007 fc46 	bl	118f8 <bt_conn_get_info>
	if (err)
    a06c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    a070:	d005      	beq.n	a07e <_ZN13DeviceManager12disconnectedEP7bt_connh+0x22>
		printk("Cannot get info of connection object\n");
    a072:	4866      	ldr	r0, [pc, #408]	; (a20c <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1b0>)
    a074:	f010 fcb4 	bl	1a9e0 <printk>
}
    a078:	b016      	add	sp, #88	; 0x58
    a07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    a07e:	f89d 401d 	ldrb.w	r4, [sp, #29]
    a082:	2c01      	cmp	r4, #1
    a084:	d110      	bne.n	a0a8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x4c>
		peripheralDisconnected = true;
    a086:	4b62      	ldr	r3, [pc, #392]	; (a210 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1b4>)
		setDiameter(0);
    a088:	4628      	mov	r0, r5
		peripheralDisconnected = true;
    a08a:	701c      	strb	r4, [r3, #0]
		connectedPeripheral = false;
    a08c:	4b61      	ldr	r3, [pc, #388]	; (a214 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1b8>)
    a08e:	701d      	strb	r5, [r3, #0]
		setDiameter(0);
    a090:	f000 f9a8 	bl	a3e4 <_Z11setDiameterh>
		printk("Disconnected from Application (reason %u)\n", reason);		
    a094:	4631      	mov	r1, r6
    a096:	4860      	ldr	r0, [pc, #384]	; (a218 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1bc>)
    a098:	f010 fca2 	bl	1a9e0 <printk>
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    a09c:	4628      	mov	r0, r5
    a09e:	f013 fb0c 	bl	1d6ba <dk_set_led_off>
		startAdvertising();
    a0a2:	f7ff fbc3 	bl	982c <_ZN13DeviceManager16startAdvertisingEv>
    a0a6:	e7e7      	b.n	a078 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    a0a8:	2c00      	cmp	r4, #0
    a0aa:	d1e5      	bne.n	a078 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c>
		subscriptionDone = false;
    a0ac:	4d5b      	ldr	r5, [pc, #364]	; (a21c <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c0>)
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a0ae:	4638      	mov	r0, r7
		subscriptionDone = false;
    a0b0:	702c      	strb	r4, [r5, #0]
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a0b2:	f012 f973 	bl	1c39c <bt_conn_get_dst>
    a0b6:	221e      	movs	r2, #30
    a0b8:	a90e      	add	r1, sp, #56	; 0x38
    a0ba:	f7ff fb25 	bl	9708 <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    a0be:	4632      	mov	r2, r6
		if (nbrConnectionsCentral == 0)
    a0c0:	4e57      	ldr	r6, [pc, #348]	; (a220 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c4>)
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    a0c2:	4858      	ldr	r0, [pc, #352]	; (a224 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c8>)
    a0c4:	a90e      	add	r1, sp, #56	; 0x38
    a0c6:	f010 fc8b 	bl	1a9e0 <printk>
		if (nbrConnectionsCentral == 0)
    a0ca:	7833      	ldrb	r3, [r6, #0]
    a0cc:	b94b      	cbnz	r3, a0e2 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x86>
			disconnectedCode[0] = 13;
    a0ce:	230d      	movs	r3, #13
    a0d0:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a0d4:	4b54      	ldr	r3, [pc, #336]	; (a228 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1cc>)
    a0d6:	2201      	movs	r2, #1
    a0d8:	6818      	ldr	r0, [r3, #0]
    a0da:	a901      	add	r1, sp, #4
    a0dc:	f000 f952 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
			subscriptionDone = false;
    a0e0:	702c      	strb	r4, [r5, #0]
		if (checkAddresses(addr,sensor1))
    a0e2:	4952      	ldr	r1, [pc, #328]	; (a22c <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1d0>)
    a0e4:	a80e      	add	r0, sp, #56	; 0x38
    a0e6:	f010 fbcc 	bl	1a882 <_ZN13DeviceManager14checkAddressesEPcS0_>
    a0ea:	b1c8      	cbz	r0, a120 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xc4>
			once_sensor1 = true;
    a0ec:	2401      	movs	r4, #1
    a0ee:	4b50      	ldr	r3, [pc, #320]	; (a230 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1d4>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a0f0:	4620      	mov	r0, r4
			once_sensor1 = true;
    a0f2:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    a0f4:	2300      	movs	r3, #0
    a0f6:	702b      	strb	r3, [r5, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a0f8:	f013 fadf 	bl	1d6ba <dk_set_led_off>
			if (sensorInfos == 7)
    a0fc:	4b4d      	ldr	r3, [pc, #308]	; (a234 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1d8>)
    a0fe:	781b      	ldrb	r3, [r3, #0]
    a100:	2b07      	cmp	r3, #7
    a102:	4b49      	ldr	r3, [pc, #292]	; (a228 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1cc>)
    a104:	d165      	bne.n	a1d2 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x176>
				hrDisconnected = true;
    a106:	4a4c      	ldr	r2, [pc, #304]	; (a238 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1dc>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a108:	6818      	ldr	r0, [r3, #0]
				hrDisconnected = true;
    a10a:	7014      	strb	r4, [r2, #0]
				reconnectedHeartRate = true;
    a10c:	4a4b      	ldr	r2, [pc, #300]	; (a23c <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1e0>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a10e:	a901      	add	r1, sp, #4
				reconnectedHeartRate = true;
    a110:	7014      	strb	r4, [r2, #0]
				disconnectedCode[0] = 12;
    a112:	220c      	movs	r2, #12
    a114:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a118:	4622      	mov	r2, r4
    a11a:	f000 f933 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
				typeToReconnect = TYPE_HEARTRATE;
    a11e:	2403      	movs	r4, #3
		if (checkAddresses(addr,sensor2))
    a120:	4947      	ldr	r1, [pc, #284]	; (a240 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1e4>)
    a122:	a80e      	add	r0, sp, #56	; 0x38
    a124:	f010 fbad 	bl	1a882 <_ZN13DeviceManager14checkAddressesEPcS0_>
    a128:	b1b8      	cbz	r0, a15a <_ZN13DeviceManager12disconnectedEP7bt_connh+0xfe>
			once_sensor2 = true;
    a12a:	2401      	movs	r4, #1
    a12c:	4b45      	ldr	r3, [pc, #276]	; (a244 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1e8>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a12e:	4620      	mov	r0, r4
			once_sensor2 = true;
    a130:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    a132:	2300      	movs	r3, #0
    a134:	702b      	strb	r3, [r5, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a136:	f013 fac0 	bl	1d6ba <dk_set_led_off>
			if (sensorInfos == 3 || sensorInfos == 4)
    a13a:	4b3e      	ldr	r3, [pc, #248]	; (a234 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1d8>)
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	3b03      	subs	r3, #3
    a140:	42a3      	cmp	r3, r4
    a142:	4b39      	ldr	r3, [pc, #228]	; (a228 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1cc>)
    a144:	d850      	bhi.n	a1e8 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x18c>
				cscDisconnected = true;
    a146:	4a40      	ldr	r2, [pc, #256]	; (a248 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1ec>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a148:	6818      	ldr	r0, [r3, #0]
				cscDisconnected = true;
    a14a:	7014      	strb	r4, [r2, #0]
				disconnectedCode[0] = 11;
    a14c:	220b      	movs	r2, #11
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a14e:	a901      	add	r1, sp, #4
				disconnectedCode[0] = 11;
    a150:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a154:	4622      	mov	r2, r4
    a156:	f000 f915 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor3))
    a15a:	493c      	ldr	r1, [pc, #240]	; (a24c <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1f0>)
    a15c:	a80e      	add	r0, sp, #56	; 0x38
    a15e:	f010 fb90 	bl	1a882 <_ZN13DeviceManager14checkAddressesEPcS0_>
    a162:	b1a8      	cbz	r0, a190 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x134>
			hrDisconnected = true;
    a164:	2401      	movs	r4, #1
    a166:	4b34      	ldr	r3, [pc, #208]	; (a238 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1dc>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a168:	4620      	mov	r0, r4
			hrDisconnected = true;
    a16a:	701c      	strb	r4, [r3, #0]
			reconnectedHeartRate = true;
    a16c:	4b33      	ldr	r3, [pc, #204]	; (a23c <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1e0>)
    a16e:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    a170:	2300      	movs	r3, #0
    a172:	702b      	strb	r3, [r5, #0]
			once_sensor3 = true;
    a174:	4b36      	ldr	r3, [pc, #216]	; (a250 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1f4>)
    a176:	701c      	strb	r4, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a178:	f013 fa9f 	bl	1d6ba <dk_set_led_off>
			disconnectedCode[0] = 12;
    a17c:	230c      	movs	r3, #12
    a17e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a182:	4b29      	ldr	r3, [pc, #164]	; (a228 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1cc>)
    a184:	4622      	mov	r2, r4
    a186:	6818      	ldr	r0, [r3, #0]
    a188:	a901      	add	r1, sp, #4
    a18a:	f000 f8fb 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
			typeToReconnect = TYPE_HEARTRATE;
    a18e:	2403      	movs	r4, #3
    a190:	2700      	movs	r7, #0
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    a192:	f8df 80c0 	ldr.w	r8, [pc, #192]	; a254 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1f8>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    a196:	7833      	ldrb	r3, [r6, #0]
    a198:	b2fd      	uxtb	r5, r7
    a19a:	3b01      	subs	r3, #1
    a19c:	429d      	cmp	r5, r3
    a19e:	dc31      	bgt.n	a204 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1a8>
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    a1a0:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    a1a4:	f012 f8fa 	bl	1c39c <bt_conn_get_dst>
    a1a8:	a902      	add	r1, sp, #8
    a1aa:	2212      	movs	r2, #18
    a1ac:	f7ff faac 	bl	9708 <bt_addr_le_to_str.isra.0>
			if (checkAddresses(addr,addrToFind))
    a1b0:	a902      	add	r1, sp, #8
    a1b2:	a80e      	add	r0, sp, #56	; 0x38
    a1b4:	f010 fb65 	bl	1a882 <_ZN13DeviceManager14checkAddressesEPcS0_>
    a1b8:	b148      	cbz	r0, a1ce <_ZN13DeviceManager12disconnectedEP7bt_connh+0x172>
				bt_conn_unref(centralConnections[i]);
    a1ba:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    a1be:	f007 fa09 	bl	115d4 <bt_conn_unref>
				centralConnections[i] = nullptr;
    a1c2:	2300      	movs	r3, #0
    a1c4:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
				nbrConnectionsCentral--;
    a1c8:	7833      	ldrb	r3, [r6, #0]
    a1ca:	3b01      	subs	r3, #1
    a1cc:	7033      	strb	r3, [r6, #0]
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    a1ce:	3701      	adds	r7, #1
    a1d0:	e7e1      	b.n	a196 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x13a>
				cscDisconnected = true;
    a1d2:	4a1d      	ldr	r2, [pc, #116]	; (a248 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1ec>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a1d4:	6818      	ldr	r0, [r3, #0]
				cscDisconnected = true;
    a1d6:	7014      	strb	r4, [r2, #0]
				disconnectedCode[0] = 11;
    a1d8:	220b      	movs	r2, #11
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a1da:	a901      	add	r1, sp, #4
				disconnectedCode[0] = 11;
    a1dc:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a1e0:	4622      	mov	r2, r4
    a1e2:	f000 f8cf 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
    a1e6:	e79b      	b.n	a120 <_ZN13DeviceManager12disconnectedEP7bt_connh+0xc4>
				hrDisconnected = true;
    a1e8:	4a13      	ldr	r2, [pc, #76]	; (a238 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1dc>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a1ea:	6818      	ldr	r0, [r3, #0]
				hrDisconnected = true;
    a1ec:	7014      	strb	r4, [r2, #0]
				reconnectedHeartRate = true;
    a1ee:	4a13      	ldr	r2, [pc, #76]	; (a23c <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1e0>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a1f0:	a901      	add	r1, sp, #4
				reconnectedHeartRate = true;
    a1f2:	7014      	strb	r4, [r2, #0]
				disconnectedCode[0] = 12;
    a1f4:	220c      	movs	r2, #12
    a1f6:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a1fa:	4622      	mov	r2, r4
    a1fc:	f000 f8c2 	bl	a384 <_Z17data_service_sendP7bt_connPKht>
				typeToReconnect = TYPE_HEARTRATE;
    a200:	2403      	movs	r4, #3
    a202:	e7aa      	b.n	a15a <_ZN13DeviceManager12disconnectedEP7bt_connh+0xfe>
		reScan(typeToReconnect);
    a204:	4620      	mov	r0, r4
    a206:	f7ff fd79 	bl	9cfc <_ZN13DeviceManager6reScanEh>
    a20a:	e735      	b.n	a078 <_ZN13DeviceManager12disconnectedEP7bt_connh+0x1c>
    a20c:	0001f5f3 	.word	0x0001f5f3
    a210:	2000e323 	.word	0x2000e323
    a214:	2000e320 	.word	0x2000e320
    a218:	0001f6a6 	.word	0x0001f6a6
    a21c:	2000e31f 	.word	0x2000e31f
    a220:	2000e322 	.word	0x2000e322
    a224:	0001f6d1 	.word	0x0001f6d1
    a228:	20009998 	.word	0x20009998
    a22c:	2000e326 	.word	0x2000e326
    a230:	2000843d 	.word	0x2000843d
    a234:	2000e319 	.word	0x2000e319
    a238:	2000e31c 	.word	0x2000e31c
    a23c:	2000e321 	.word	0x2000e321
    a240:	2000e337 	.word	0x2000e337
    a244:	2000843e 	.word	0x2000843e
    a248:	2000e31d 	.word	0x2000e31d
    a24c:	2000e348 	.word	0x2000e348
    a250:	2000843f 	.word	0x2000843f
    a254:	20009a14 	.word	0x20009a14

0000a258 <_ZN4Data8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    a258:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    a25a:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    a25c:	7403      	strb	r3, [r0, #16]
    switch (type)
    a25e:	d004      	beq.n	a26a <_ZN4Data8saveDataEPKv+0x12>
    a260:	2b02      	cmp	r3, #2
    a262:	d00d      	beq.n	a280 <_ZN4Data8saveDataEPKv+0x28>
        printk("Unknown type\n");
    a264:	480c      	ldr	r0, [pc, #48]	; (a298 <_ZN4Data8saveDataEPKv+0x40>)
    a266:	f010 bbbb 	b.w	1a9e0 <printk>
        oldSumRevSpeed = sumRevSpeed;
    a26a:	8803      	ldrh	r3, [r0, #0]
    a26c:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    a26e:	8903      	ldrh	r3, [r0, #8]
    a270:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    a272:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    a276:	8003      	strh	r3, [r0, #0]
    a278:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    a27c:	8103      	strh	r3, [r0, #8]
        break;
    a27e:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    a280:	8883      	ldrh	r3, [r0, #4]
    a282:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    a284:	8983      	ldrh	r3, [r0, #12]
    a286:	81c3      	strh	r3, [r0, #14]
    a288:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    a28c:	8083      	strh	r3, [r0, #4]
    a28e:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    a292:	8183      	strh	r3, [r0, #12]
}
    a294:	4770      	bx	lr
    a296:	bf00      	nop
    a298:	0001f711 	.word	0x0001f711

0000a29c <_ZN4Data7calcRPMEv>:
{
    a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a2a0:	8985      	ldrh	r5, [r0, #12]
    a2a2:	89c3      	ldrh	r3, [r0, #14]
{
    a2a4:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a2a6:	429d      	cmp	r5, r3
    a2a8:	d02f      	beq.n	a30a <_ZN4Data7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    a2aa:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    a2ae:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a2b2:	45c8      	cmp	r8, r9
    a2b4:	d029      	beq.n	a30a <_ZN4Data7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    a2b6:	1aed      	subs	r5, r5, r3
    a2b8:	4628      	mov	r0, r5
    a2ba:	f7fe f913 	bl	84e4 <__aeabi_i2d>
    a2be:	2200      	movs	r2, #0
    a2c0:	4b13      	ldr	r3, [pc, #76]	; (a310 <_ZN4Data7calcRPMEv+0x74>)
    a2c2:	f7fe f979 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    a2c6:	2200      	movs	r2, #0
    a2c8:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    a2ca:	4606      	mov	r6, r0
    a2cc:	460f      	mov	r7, r1
        if (time < 0)
    a2ce:	f7fe fbe5 	bl	8a9c <__aeabi_dcmplt>
    a2d2:	b130      	cbz	r0, a2e2 <_ZN4Data7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    a2d4:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    a2d8:	30ff      	adds	r0, #255	; 0xff
    a2da:	f7fe f903 	bl	84e4 <__aeabi_i2d>
    a2de:	4606      	mov	r6, r0
    a2e0:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    a2e2:	203c      	movs	r0, #60	; 0x3c
    a2e4:	eba8 0809 	sub.w	r8, r8, r9
    a2e8:	fb00 f008 	mul.w	r0, r0, r8
    a2ec:	f7fe f8fa 	bl	84e4 <__aeabi_i2d>
    a2f0:	4632      	mov	r2, r6
    a2f2:	463b      	mov	r3, r7
    a2f4:	f7fe fa8a 	bl	880c <__aeabi_ddiv>
    a2f8:	4602      	mov	r2, r0
    a2fa:	460b      	mov	r3, r1
    a2fc:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        retVal = (uint16_t) rpm;
    a300:	f7fe fbf4 	bl	8aec <__aeabi_d2uiz>
    a304:	b280      	uxth	r0, r0
}
    a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    a30a:	2000      	movs	r0, #0
    a30c:	e7fb      	b.n	a306 <_ZN4Data7calcRPMEv+0x6a>
    a30e:	bf00      	nop
    a310:	3f500000 	.word	0x3f500000

0000a314 <_Z15on_cccd_changedPK12bt_gatt_attrt>:
{
    ARG_UNUSED(attr);

    uint8_t notificationsCode[1];

    switch(value)
    a314:	2901      	cmp	r1, #1
{
    a316:	b510      	push	{r4, lr}
    a318:	460c      	mov	r4, r1
    switch(value)
    a31a:	d004      	beq.n	a326 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x12>
    a31c:	2902      	cmp	r1, #2
    a31e:	d008      	beq.n	a332 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1e>
    a320:	b971      	cbnz	r1, a340 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x2c>
            notificationsOn = true;
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    a322:	480a      	ldr	r0, [pc, #40]	; (a34c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x38>)
    a324:	e000      	b.n	a328 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
            printk("Notifications ON\n");
    a326:	480a      	ldr	r0, [pc, #40]	; (a350 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x3c>)
            printk("Notifications OFF\n");
    a328:	f010 fb5a 	bl	1a9e0 <printk>
            notificationsOn = false;
    a32c:	4b09      	ldr	r3, [pc, #36]	; (a354 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x40>)
    a32e:	701c      	strb	r4, [r3, #0]
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    }
}
    a330:	e005      	b.n	a33e <_Z15on_cccd_changedPK12bt_gatt_attrt+0x2a>
            printk("Notifications ON with Indications\n");
    a332:	4809      	ldr	r0, [pc, #36]	; (a358 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x44>)
    a334:	f010 fb54 	bl	1a9e0 <printk>
            notificationsOn = true;
    a338:	2201      	movs	r2, #1
    a33a:	4b06      	ldr	r3, [pc, #24]	; (a354 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x40>)
    a33c:	701a      	strb	r2, [r3, #0]
}
    a33e:	bd10      	pop	{r4, pc}
            printk("Error, CCCD has been set to an invalid value\n");     
    a340:	4806      	ldr	r0, [pc, #24]	; (a35c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x48>)
}
    a342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Error, CCCD has been set to an invalid value\n");     
    a346:	f010 bb4b 	b.w	1a9e0 <printk>
    a34a:	bf00      	nop
    a34c:	0001f798 	.word	0x0001f798
    a350:	0001f763 	.word	0x0001f763
    a354:	2000e57a 	.word	0x2000e57a
    a358:	0001f775 	.word	0x0001f775
    a35c:	0001f7ab 	.word	0x0001f7ab

0000a360 <_Z17data_service_initv>:
{
    a360:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    a362:	22f0      	movs	r2, #240	; 0xf0
    a364:	2100      	movs	r1, #0
    a366:	4805      	ldr	r0, [pc, #20]	; (a37c <_Z17data_service_initv+0x1c>)
    a368:	f011 fd8f 	bl	1be8a <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    a36c:	22f0      	movs	r2, #240	; 0xf0
    a36e:	2100      	movs	r1, #0
    a370:	4803      	ldr	r0, [pc, #12]	; (a380 <_Z17data_service_initv+0x20>)
    a372:	f011 fd8a 	bl	1be8a <memset>
}
    a376:	2000      	movs	r0, #0
    a378:	bd08      	pop	{r3, pc}
    a37a:	bf00      	nop
    a37c:	2000e397 	.word	0x2000e397
    a380:	2000e487 	.word	0x2000e487

0000a384 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    a384:	2300      	movs	r3, #0
{
    a386:	b510      	push	{r4, lr}
    a388:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    a38a:	9303      	str	r3, [sp, #12]
    a38c:	9305      	str	r3, [sp, #20]
    a38e:	4b0d      	ldr	r3, [pc, #52]	; (a3c4 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    a390:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    a394:	9300      	str	r3, [sp, #0]
    a396:	4b0c      	ldr	r3, [pc, #48]	; (a3c8 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a398:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    a39a:	9304      	str	r3, [sp, #16]
    };
    a39c:	4b0b      	ldr	r3, [pc, #44]	; (a3cc <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    a39e:	4604      	mov	r4, r0
    };
    a3a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a3a4:	4619      	mov	r1, r3
    a3a6:	f00a f8fb 	bl	145a0 <bt_gatt_is_subscribed>
    a3aa:	b148      	cbz	r0, a3c0 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    a3ac:	4669      	mov	r1, sp
    a3ae:	4620      	mov	r0, r4
    a3b0:	f009 ff14 	bl	141dc <bt_gatt_notify_cb>
    a3b4:	b110      	cbz	r0, a3bc <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    a3b6:	4806      	ldr	r0, [pc, #24]	; (a3d0 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    a3b8:	f010 fb12 	bl	1a9e0 <printk>
    }
}
    a3bc:	b006      	add	sp, #24
    a3be:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    a3c0:	4804      	ldr	r0, [pc, #16]	; (a3d4 <_Z17data_service_sendP7bt_connPKht+0x50>)
    a3c2:	e7f9      	b.n	a3b8 <_Z17data_service_sendP7bt_connPKht+0x34>
    a3c4:	0001f88f 	.word	0x0001f88f
    a3c8:	0001a8a9 	.word	0x0001a8a9
    a3cc:	0001e82c 	.word	0x0001e82c
    a3d0:	0001f7d9 	.word	0x0001f7d9
    a3d4:	0001f7fd 	.word	0x0001f7fd

0000a3d8 <_Z11getDiameterv>:

double getDiameter() 
{
    return dia;
}
    a3d8:	4b01      	ldr	r3, [pc, #4]	; (a3e0 <_Z11getDiameterv+0x8>)
    a3da:	e9d3 0100 	ldrd	r0, r1, [r3]
    a3de:	4770      	bx	lr
    a3e0:	200086f0 	.word	0x200086f0

0000a3e4 <_Z11setDiameterh>:

void setDiameter(uint8_t diameter) 
{
    a3e4:	b508      	push	{r3, lr}
    dia = diameter;
    a3e6:	f7fe f86d 	bl	84c4 <__aeabi_ui2d>
    a3ea:	4b02      	ldr	r3, [pc, #8]	; (a3f4 <_Z11setDiameterh+0x10>)
    a3ec:	e9c3 0100 	strd	r0, r1, [r3]
}
    a3f0:	bd08      	pop	{r3, pc}
    a3f2:	bf00      	nop
    a3f4:	200086f0 	.word	0x200086f0

0000a3f8 <_Z17getNbrOfAddressesv>:

uint8_t getNbrOfAddresses() 
{
    return nbrAddresses;
}
    a3f8:	4b01      	ldr	r3, [pc, #4]	; (a400 <_Z17getNbrOfAddressesv+0x8>)
    a3fa:	7818      	ldrb	r0, [r3, #0]
    a3fc:	4770      	bx	lr
    a3fe:	bf00      	nop
    a400:	2000e579 	.word	0x2000e579

0000a404 <_Z10getAddressPch>:

void getAddress(char* outArray, uint8_t nbr) 
{
    switch (nbr)
    a404:	2902      	cmp	r1, #2
    a406:	d00d      	beq.n	a424 <_Z10getAddressPch+0x20>
    a408:	2903      	cmp	r1, #3
    a40a:	d015      	beq.n	a438 <_Z10getAddressPch+0x34>
    a40c:	2901      	cmp	r1, #1
    a40e:	d11c      	bne.n	a44a <_Z10getAddressPch+0x46>
    a410:	4a0e      	ldr	r2, [pc, #56]	; (a44c <_Z10getAddressPch+0x48>)
    a412:	1e43      	subs	r3, r0, #1
    a414:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    a416:	f812 1b01 	ldrb.w	r1, [r2], #1
    a41a:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a41e:	4283      	cmp	r3, r0
    a420:	d1f9      	bne.n	a416 <_Z10getAddressPch+0x12>
    a422:	4770      	bx	lr
    a424:	4a0a      	ldr	r2, [pc, #40]	; (a450 <_Z10getAddressPch+0x4c>)
    a426:	1e43      	subs	r3, r0, #1
    a428:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    a42a:	f812 1b01 	ldrb.w	r1, [r2], #1
    a42e:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a432:	4283      	cmp	r3, r0
    a434:	d1f9      	bne.n	a42a <_Z10getAddressPch+0x26>
    a436:	4770      	bx	lr
    a438:	4a06      	ldr	r2, [pc, #24]	; (a454 <_Z10getAddressPch+0x50>)
    a43a:	1e43      	subs	r3, r0, #1
    a43c:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    a43e:	f812 1b01 	ldrb.w	r1, [r2], #1
    a442:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a446:	4283      	cmp	r3, r0
    a448:	d1f9      	bne.n	a43e <_Z10getAddressPch+0x3a>
        }    
        break;
    default:
        break;
    }
}
    a44a:	4770      	bx	lr
    a44c:	2000e363 	.word	0x2000e363
    a450:	2000e374 	.word	0x2000e374
    a454:	2000e385 	.word	0x2000e385

0000a458 <_Z14getSensorInfosv>:

uint8_t getSensorInfos() 
{
    return infoSensors;
}
    a458:	4b01      	ldr	r3, [pc, #4]	; (a460 <_Z14getSensorInfosv+0x8>)
    a45a:	7818      	ldrb	r0, [r3, #0]
    a45c:	4770      	bx	lr
    a45e:	bf00      	nop
    a460:	2000e578 	.word	0x2000e578

0000a464 <_Z18areNotificationsOnv>:

bool areNotificationsOn()
{
    return notificationsOn;
    a464:	4b01      	ldr	r3, [pc, #4]	; (a46c <_Z18areNotificationsOnv+0x8>)
    a466:	7818      	ldrb	r0, [r3, #0]
    a468:	4770      	bx	lr
    a46a:	bf00      	nop
    a46c:	2000e57a 	.word	0x2000e57a

0000a470 <discovery_service_not_found_cb>:
		break;
	}
}

void discovery_service_not_found_cb(struct bt_conn *conn, void *context)
{
    a470:	b508      	push	{r3, lr}
	printk("The service could not be found during the discovery\n");
    a472:	4807      	ldr	r0, [pc, #28]	; (a490 <discovery_service_not_found_cb+0x20>)
    a474:	f010 fab4 	bl	1a9e0 <printk>
	service_found = false;
    a478:	2200      	movs	r2, #0
    a47a:	4b06      	ldr	r3, [pc, #24]	; (a494 <discovery_service_not_found_cb+0x24>)
    a47c:	701a      	strb	r2, [r3, #0]
	cntDevices--;
    a47e:	4a06      	ldr	r2, [pc, #24]	; (a498 <discovery_service_not_found_cb+0x28>)
    a480:	7813      	ldrb	r3, [r2, #0]
    a482:	3b01      	subs	r3, #1
    a484:	7013      	strb	r3, [r2, #0]
	free = true;
    a486:	2201      	movs	r2, #1
    a488:	4b04      	ldr	r3, [pc, #16]	; (a49c <discovery_service_not_found_cb+0x2c>)
    a48a:	701a      	strb	r2, [r3, #0]
}
    a48c:	bd08      	pop	{r3, pc}
    a48e:	bf00      	nop
    a490:	0001f8a0 	.word	0x0001f8a0
    a494:	20008444 	.word	0x20008444
    a498:	2000e580 	.word	0x2000e580
    a49c:	20008443 	.word	0x20008443

0000a4a0 <discovery_error_found_cb>:

void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
    a4a0:	b508      	push	{r3, lr}
	printk("The discovery procedure failed with %d\n", err);
    a4a2:	4805      	ldr	r0, [pc, #20]	; (a4b8 <discovery_error_found_cb+0x18>)
    a4a4:	f010 fa9c 	bl	1a9e0 <printk>
	cntDevices--;
    a4a8:	4a04      	ldr	r2, [pc, #16]	; (a4bc <discovery_error_found_cb+0x1c>)
    a4aa:	7813      	ldrb	r3, [r2, #0]
    a4ac:	3b01      	subs	r3, #1
    a4ae:	7013      	strb	r3, [r2, #0]
	free = true;
    a4b0:	2201      	movs	r2, #1
    a4b2:	4b03      	ldr	r3, [pc, #12]	; (a4c0 <discovery_error_found_cb+0x20>)
    a4b4:	701a      	strb	r2, [r3, #0]
}
    a4b6:	bd08      	pop	{r3, pc}
    a4b8:	0001f8d5 	.word	0x0001f8d5
    a4bc:	2000e580 	.word	0x2000e580
    a4c0:	20008443 	.word	0x20008443

0000a4c4 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a4c4:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    a4c6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a4c8:	b08a      	sub	sp, #40	; 0x28
    a4ca:	4604      	mov	r4, r0
    a4cc:	460e      	mov	r6, r1
    a4ce:	ad07      	add	r5, sp, #28
    a4d0:	2b03      	cmp	r3, #3
    a4d2:	d820      	bhi.n	a516 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    a4d4:	e8df f003 	tbb	[pc, r3]
    a4d8:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    a4dc:	4911      	ldr	r1, [pc, #68]	; (a524 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
    a4de:	4628      	mov	r0, r5
    a4e0:	f011 fc4e 	bl	1bd80 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a4e4:	7863      	ldrb	r3, [r4, #1]
    a4e6:	211e      	movs	r1, #30
    a4e8:	9304      	str	r3, [sp, #16]
    a4ea:	78a3      	ldrb	r3, [r4, #2]
    a4ec:	4630      	mov	r0, r6
    a4ee:	9303      	str	r3, [sp, #12]
    a4f0:	78e3      	ldrb	r3, [r4, #3]
    a4f2:	4a0d      	ldr	r2, [pc, #52]	; (a528 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    a4f4:	9302      	str	r3, [sp, #8]
    a4f6:	7923      	ldrb	r3, [r4, #4]
    a4f8:	9505      	str	r5, [sp, #20]
    a4fa:	9301      	str	r3, [sp, #4]
    a4fc:	7963      	ldrb	r3, [r4, #5]
    a4fe:	9300      	str	r3, [sp, #0]
    a500:	79a3      	ldrb	r3, [r4, #6]
    a502:	f010 fa7a 	bl	1a9fa <snprintk>
}
    a506:	b00a      	add	sp, #40	; 0x28
    a508:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a50a:	4908      	ldr	r1, [pc, #32]	; (a52c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    a50c:	e7e7      	b.n	a4de <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    a50e:	4908      	ldr	r1, [pc, #32]	; (a530 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    a510:	e7e5      	b.n	a4de <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    a512:	4908      	ldr	r1, [pc, #32]	; (a534 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    a514:	e7e3      	b.n	a4de <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a516:	210a      	movs	r1, #10
    a518:	4628      	mov	r0, r5
    a51a:	4a07      	ldr	r2, [pc, #28]	; (a538 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    a51c:	f010 fa6d 	bl	1a9fa <snprintk>
		break;
    a520:	e7e0      	b.n	a4e4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    a522:	bf00      	nop
    a524:	0001f2f8 	.word	0x0001f2f8
    a528:	0001f321 	.word	0x0001f321
    a52c:	0001f2ff 	.word	0x0001f2ff
    a530:	0001f306 	.word	0x0001f306
    a534:	0001f310 	.word	0x0001f310
    a538:	0001f31a 	.word	0x0001f31a

0000a53c <read_battery_level_cb_speed>:
}

void read_battery_level_cb_speed(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a53c:	b530      	push	{r4, r5, lr}
    a53e:	4615      	mov	r5, r2
	readyValues[SPEED] = true;
    a540:	2201      	movs	r2, #1
    a542:	4b0d      	ldr	r3, [pc, #52]	; (a578 <read_battery_level_cb_speed+0x3c>)
{
    a544:	b089      	sub	sp, #36	; 0x24
	readyValues[SPEED] = true;
    a546:	701a      	strb	r2, [r3, #0]
{
    a548:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a54a:	f010 fee6 	bl	1b31a <bt_bas_conn>
    a54e:	f011 ff25 	bl	1c39c <bt_conn_get_dst>
    a552:	4669      	mov	r1, sp
    a554:	f7ff ffb6 	bl	a4c4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a558:	b135      	cbz	r5, a568 <read_battery_level_cb_speed+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a55a:	462a      	mov	r2, r5
    a55c:	4669      	mov	r1, sp
    a55e:	4807      	ldr	r0, [pc, #28]	; (a57c <read_battery_level_cb_speed+0x40>)
    a560:	f010 fa3e 	bl	1a9e0 <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
	batteryLevels[SPEED] = battery_level;
}
    a564:	b009      	add	sp, #36	; 0x24
    a566:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a568:	4622      	mov	r2, r4
    a56a:	4669      	mov	r1, sp
    a56c:	4804      	ldr	r0, [pc, #16]	; (a580 <read_battery_level_cb_speed+0x44>)
    a56e:	f010 fa37 	bl	1a9e0 <printk>
	batteryLevels[SPEED] = battery_level;
    a572:	4b04      	ldr	r3, [pc, #16]	; (a584 <read_battery_level_cb_speed+0x48>)
    a574:	701c      	strb	r4, [r3, #0]
    a576:	e7f5      	b.n	a564 <read_battery_level_cb_speed+0x28>
    a578:	2000e582 	.word	0x2000e582
    a57c:	0001f8fd 	.word	0x0001f8fd
    a580:	0001f91a 	.word	0x0001f91a
    a584:	2000e57b 	.word	0x2000e57b

0000a588 <read_battery_level_cb_cadence>:

void read_battery_level_cb_cadence(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a588:	b530      	push	{r4, r5, lr}
    a58a:	4615      	mov	r5, r2
	readyValues[CADENCE] = true;
    a58c:	2201      	movs	r2, #1
    a58e:	4b0d      	ldr	r3, [pc, #52]	; (a5c4 <read_battery_level_cb_cadence+0x3c>)
{
    a590:	b089      	sub	sp, #36	; 0x24
	readyValues[CADENCE] = true;
    a592:	705a      	strb	r2, [r3, #1]
{
    a594:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a596:	f010 fec0 	bl	1b31a <bt_bas_conn>
    a59a:	f011 feff 	bl	1c39c <bt_conn_get_dst>
    a59e:	4669      	mov	r1, sp
    a5a0:	f7ff ff90 	bl	a4c4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a5a4:	b135      	cbz	r5, a5b4 <read_battery_level_cb_cadence+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a5a6:	462a      	mov	r2, r5
    a5a8:	4669      	mov	r1, sp
    a5aa:	4807      	ldr	r0, [pc, #28]	; (a5c8 <read_battery_level_cb_cadence+0x40>)
    a5ac:	f010 fa18 	bl	1a9e0 <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
	batteryLevels[CADENCE] = battery_level;
}
    a5b0:	b009      	add	sp, #36	; 0x24
    a5b2:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a5b4:	4622      	mov	r2, r4
    a5b6:	4669      	mov	r1, sp
    a5b8:	4804      	ldr	r0, [pc, #16]	; (a5cc <read_battery_level_cb_cadence+0x44>)
    a5ba:	f010 fa11 	bl	1a9e0 <printk>
	batteryLevels[CADENCE] = battery_level;
    a5be:	4b04      	ldr	r3, [pc, #16]	; (a5d0 <read_battery_level_cb_cadence+0x48>)
    a5c0:	705c      	strb	r4, [r3, #1]
    a5c2:	e7f5      	b.n	a5b0 <read_battery_level_cb_cadence+0x28>
    a5c4:	2000e582 	.word	0x2000e582
    a5c8:	0001f8fd 	.word	0x0001f8fd
    a5cc:	0001f91a 	.word	0x0001f91a
    a5d0:	2000e57b 	.word	0x2000e57b

0000a5d4 <read_battery_level_cb_heartRate>:

void read_battery_level_cb_heartRate(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a5d4:	b530      	push	{r4, r5, lr}
    a5d6:	4615      	mov	r5, r2
	readyValues[HEARTRATE] = true;
    a5d8:	2201      	movs	r2, #1
    a5da:	4b0d      	ldr	r3, [pc, #52]	; (a610 <read_battery_level_cb_heartRate+0x3c>)
{
    a5dc:	b089      	sub	sp, #36	; 0x24
	readyValues[HEARTRATE] = true;
    a5de:	709a      	strb	r2, [r3, #2]
{
    a5e0:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a5e2:	f010 fe9a 	bl	1b31a <bt_bas_conn>
    a5e6:	f011 fed9 	bl	1c39c <bt_conn_get_dst>
    a5ea:	4669      	mov	r1, sp
    a5ec:	f7ff ff6a 	bl	a4c4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a5f0:	b135      	cbz	r5, a600 <read_battery_level_cb_heartRate+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a5f2:	462a      	mov	r2, r5
    a5f4:	4669      	mov	r1, sp
    a5f6:	4807      	ldr	r0, [pc, #28]	; (a614 <read_battery_level_cb_heartRate+0x40>)
    a5f8:	f010 f9f2 	bl	1a9e0 <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
	batteryLevels[HEARTRATE] = battery_level;
}
    a5fc:	b009      	add	sp, #36	; 0x24
    a5fe:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a600:	4622      	mov	r2, r4
    a602:	4669      	mov	r1, sp
    a604:	4804      	ldr	r0, [pc, #16]	; (a618 <read_battery_level_cb_heartRate+0x44>)
    a606:	f010 f9eb 	bl	1a9e0 <printk>
	batteryLevels[HEARTRATE] = battery_level;
    a60a:	4b04      	ldr	r3, [pc, #16]	; (a61c <read_battery_level_cb_heartRate+0x48>)
    a60c:	709c      	strb	r4, [r3, #2]
    a60e:	e7f5      	b.n	a5fc <read_battery_level_cb_heartRate+0x28>
    a610:	2000e582 	.word	0x2000e582
    a614:	0001f8fd 	.word	0x0001f8fd
    a618:	0001f91a 	.word	0x0001f91a
    a61c:	2000e57b 	.word	0x2000e57b

0000a620 <gatt_discover_battery_service>:
	free = false;
    a620:	2300      	movs	r3, #0
{
    a622:	b537      	push	{r0, r1, r2, r4, r5, lr}
	free = false;
    a624:	4a10      	ldr	r2, [pc, #64]	; (a668 <gatt_discover_battery_service+0x48>)
	cnt++;
    a626:	4d11      	ldr	r5, [pc, #68]	; (a66c <gatt_discover_battery_service+0x4c>)
	free = false;
    a628:	7013      	strb	r3, [r2, #0]
	cnt++;
    a62a:	782a      	ldrb	r2, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a62c:	a901      	add	r1, sp, #4
	cnt++;
    a62e:	3201      	adds	r2, #1
    a630:	702a      	strb	r2, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a632:	f641 020f 	movw	r2, #6159	; 0x180f
    a636:	f8ad 2006 	strh.w	r2, [sp, #6]
    a63a:	4a0d      	ldr	r2, [pc, #52]	; (a670 <gatt_discover_battery_service+0x50>)
    a63c:	f88d 3004 	strb.w	r3, [sp, #4]
    a640:	f002 faca 	bl	cbd8 <bt_gatt_dm_start>
	if (err) 
    a644:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    a648:	d00a      	beq.n	a660 <gatt_discover_battery_service+0x40>
		printk("Could not start the discovery procedure, error "
    a64a:	4621      	mov	r1, r4
    a64c:	4809      	ldr	r0, [pc, #36]	; (a674 <gatt_discover_battery_service+0x54>)
    a64e:	f010 f9c7 	bl	1a9e0 <printk>
		cnt--;
    a652:	782b      	ldrb	r3, [r5, #0]
		cntDevices--;
    a654:	4a08      	ldr	r2, [pc, #32]	; (a678 <gatt_discover_battery_service+0x58>)
		cnt--;
    a656:	3b01      	subs	r3, #1
    a658:	702b      	strb	r3, [r5, #0]
		cntDevices--;
    a65a:	7813      	ldrb	r3, [r2, #0]
    a65c:	3b01      	subs	r3, #1
    a65e:	7013      	strb	r3, [r2, #0]
}
    a660:	4620      	mov	r0, r4
    a662:	b003      	add	sp, #12
    a664:	bd30      	pop	{r4, r5, pc}
    a666:	bf00      	nop
    a668:	20008443 	.word	0x20008443
    a66c:	2000e57f 	.word	0x2000e57f
    a670:	200081b0 	.word	0x200081b0
    a674:	0001f933 	.word	0x0001f933
    a678:	2000e580 	.word	0x2000e580

0000a67c <initBatteryManager>:

void initBatteryManager(uint8_t sensorInfos)
{
    a67c:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i <= 2; i++)
	{
		readyValues[i] = false;
    a67e:	2300      	movs	r3, #0
{
    a680:	4604      	mov	r4, r0
		batteryLevels[i] = 0;
    a682:	4a1a      	ldr	r2, [pc, #104]	; (a6ec <initBatteryManager+0x70>)
		readyValues[i] = false;
    a684:	491a      	ldr	r1, [pc, #104]	; (a6f0 <initBatteryManager+0x74>)
	}
	
	free = false;
	infoSensors = sensorInfos;
	cntDevices++;
    a686:	4d1b      	ldr	r5, [pc, #108]	; (a6f4 <initBatteryManager+0x78>)
		batteryLevels[i] = 0;
    a688:	7013      	strb	r3, [r2, #0]
    a68a:	7053      	strb	r3, [r2, #1]
    a68c:	7093      	strb	r3, [r2, #2]
	free = false;
    a68e:	4a1a      	ldr	r2, [pc, #104]	; (a6f8 <initBatteryManager+0x7c>)
		readyValues[i] = false;
    a690:	700b      	strb	r3, [r1, #0]
    a692:	704b      	strb	r3, [r1, #1]
    a694:	708b      	strb	r3, [r1, #2]
	cntDevices++;
    a696:	7829      	ldrb	r1, [r5, #0]
	free = false;
    a698:	7013      	strb	r3, [r2, #0]
	infoSensors = sensorInfos;
    a69a:	4b18      	ldr	r3, [pc, #96]	; (a6fc <initBatteryManager+0x80>)
	cntDevices++;
    a69c:	3101      	adds	r1, #1
	infoSensors = sensorInfos;
    a69e:	7018      	strb	r0, [r3, #0]
	cntDevices++;
    a6a0:	b2c9      	uxtb	r1, r1
	printk("Initialize battery manager: # %d\n", cntDevices);
    a6a2:	4817      	ldr	r0, [pc, #92]	; (a700 <initBatteryManager+0x84>)
    a6a4:	3c01      	subs	r4, #1
	cntDevices++;
    a6a6:	7029      	strb	r1, [r5, #0]
	printk("Initialize battery manager: # %d\n", cntDevices);
    a6a8:	f010 f99a 	bl	1a9e0 <printk>

	switch (sensorInfos)
    a6ac:	2c06      	cmp	r4, #6
    a6ae:	d81c      	bhi.n	a6ea <initBatteryManager+0x6e>
    a6b0:	e8df f004 	tbb	[pc, r4]
    a6b4:	0c041107 	.word	0x0c041107
    a6b8:	1813      	.short	0x1813
    a6ba:	16          	.byte	0x16
    a6bb:	00          	.byte	0x00
		break;
	case 2:
		bt_bas_client_init(&clients[CADENCE]);
		break;
	case 3:
		if (cntDevices == 1)
    a6bc:	782b      	ldrb	r3, [r5, #0]
    a6be:	2b01      	cmp	r3, #1
    a6c0:	d109      	bne.n	a6d6 <initBatteryManager+0x5a>
		{
			bt_bas_client_init(&clients[SPEED]);
    a6c2:	4810      	ldr	r0, [pc, #64]	; (a704 <initBatteryManager+0x88>)
		bt_bas_client_init(&clients[HEARTRATE]);
		break;				
	default:
		break;
	}
}
    a6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_bas_client_init(&clients[HEARTRATE]);
    a6c8:	f002 bef2 	b.w	d4b0 <bt_bas_client_init>
		if (cntDevices == 1)
    a6cc:	782b      	ldrb	r3, [r5, #0]
    a6ce:	2b01      	cmp	r3, #1
    a6d0:	d0f7      	beq.n	a6c2 <initBatteryManager+0x46>
		else if (cntDevices == 2)
    a6d2:	2b02      	cmp	r3, #2
		if (cntDevices == 1)
    a6d4:	d104      	bne.n	a6e0 <initBatteryManager+0x64>
			bt_bas_client_init(&clients[CADENCE]);
    a6d6:	480c      	ldr	r0, [pc, #48]	; (a708 <initBatteryManager+0x8c>)
    a6d8:	e7f4      	b.n	a6c4 <initBatteryManager+0x48>
		if (cntDevices == 1)
    a6da:	782b      	ldrb	r3, [r5, #0]
    a6dc:	2b01      	cmp	r3, #1
    a6de:	d0f0      	beq.n	a6c2 <initBatteryManager+0x46>
		bt_bas_client_init(&clients[HEARTRATE]);
    a6e0:	480a      	ldr	r0, [pc, #40]	; (a70c <initBatteryManager+0x90>)
    a6e2:	e7ef      	b.n	a6c4 <initBatteryManager+0x48>
		if (cntDevices == 1)
    a6e4:	782b      	ldrb	r3, [r5, #0]
    a6e6:	2b01      	cmp	r3, #1
    a6e8:	e7f4      	b.n	a6d4 <initBatteryManager+0x58>
}
    a6ea:	bd38      	pop	{r3, r4, r5, pc}
    a6ec:	2000e57b 	.word	0x2000e57b
    a6f0:	2000e582 	.word	0x2000e582
    a6f4:	2000e580 	.word	0x2000e580
    a6f8:	20008443 	.word	0x20008443
    a6fc:	2000e581 	.word	0x2000e581
    a700:	0001f96c 	.word	0x0001f96c
    a704:	200086f8 	.word	0x200086f8
    a708:	20008780 	.word	0x20008780
    a70c:	20008808 	.word	0x20008808

0000a710 <getBatteryLevel>:

uint8_t getBatteryLevel(uint8_t nbrSensor) 
{
    uint8_t defaultValue = 0;
	switch (nbrSensor)
    a710:	2802      	cmp	r0, #2
    a712:	4b07      	ldr	r3, [pc, #28]	; (a730 <getBatteryLevel+0x20>)
    a714:	d005      	beq.n	a722 <getBatteryLevel+0x12>
    a716:	2803      	cmp	r0, #3
    a718:	d005      	beq.n	a726 <getBatteryLevel+0x16>
    a71a:	2801      	cmp	r0, #1
    a71c:	d105      	bne.n	a72a <getBatteryLevel+0x1a>
	{
	case 1:
		return batteryLevels[SPEED];	
    a71e:	7818      	ldrb	r0, [r3, #0]
    a720:	4770      	bx	lr
		break;
	case 2:
		return batteryLevels[CADENCE];
    a722:	7858      	ldrb	r0, [r3, #1]
    a724:	4770      	bx	lr
		break;
	case 3:
		return batteryLevels[HEARTRATE];
    a726:	7898      	ldrb	r0, [r3, #2]
    a728:	4770      	bx	lr
		break;
	default:
		batteryLevels[DEFAULT] = 0;
    a72a:	2000      	movs	r0, #0
    a72c:	70d8      	strb	r0, [r3, #3]
		return batteryLevels[DEFAULT];
		break;
	}

    return defaultValue;
}
    a72e:	4770      	bx	lr
    a730:	2000e57b 	.word	0x2000e57b

0000a734 <subscribeBatterySpeed>:

void subscribeBatterySpeed(struct bt_gatt_dm *dm) 
{
    a734:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &clients[SPEED]);
    a736:	490b      	ldr	r1, [pc, #44]	; (a764 <subscribeBatterySpeed+0x30>)
{
    a738:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &clients[SPEED]);
    a73a:	f002 fecd 	bl	d4d8 <bt_bas_handles_assign>
	if (err) 
    a73e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a742:	d002      	beq.n	a74a <subscribeBatterySpeed+0x16>
	{
		printk("Could not init BAS client object from speed sensor, error: %d\n", err);
    a744:	4808      	ldr	r0, [pc, #32]	; (a768 <subscribeBatterySpeed+0x34>)
    a746:	f010 f94b 	bl	1a9e0 <printk>
	}

	err = bt_gatt_dm_data_release(dm);
    a74a:	4620      	mov	r0, r4
    a74c:	f010 fdcb 	bl	1b2e6 <bt_gatt_dm_data_release>
	if (err) 
    a750:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a754:	d002      	beq.n	a75c <subscribeBatterySpeed+0x28>
	{
		printk("Could not release the discovery data, error "
    a756:	4805      	ldr	r0, [pc, #20]	; (a76c <subscribeBatterySpeed+0x38>)
    a758:	f010 f942 	bl	1a9e0 <printk>
		       "code: %d\n", err);
	}
	free = true;
    a75c:	2201      	movs	r2, #1
    a75e:	4b04      	ldr	r3, [pc, #16]	; (a770 <subscribeBatterySpeed+0x3c>)
    a760:	701a      	strb	r2, [r3, #0]
}
    a762:	bd10      	pop	{r4, pc}
    a764:	200086f8 	.word	0x200086f8
    a768:	0001f98e 	.word	0x0001f98e
    a76c:	0001f9cd 	.word	0x0001f9cd
    a770:	20008443 	.word	0x20008443

0000a774 <subscribeBatteryCadence>:

void subscribeBatteryCadence(struct bt_gatt_dm *dm) 
{
    a774:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &clients[CADENCE]);
    a776:	490b      	ldr	r1, [pc, #44]	; (a7a4 <subscribeBatteryCadence+0x30>)
{
    a778:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &clients[CADENCE]);
    a77a:	f002 fead 	bl	d4d8 <bt_bas_handles_assign>
	if (err) 
    a77e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a782:	d002      	beq.n	a78a <subscribeBatteryCadence+0x16>
	{
		printk("Could not init BAS client object from cadence sensor, error: %d\n", err);
    a784:	4808      	ldr	r0, [pc, #32]	; (a7a8 <subscribeBatteryCadence+0x34>)
    a786:	f010 f92b 	bl	1a9e0 <printk>
	}

	err = bt_gatt_dm_data_release(dm);
    a78a:	4620      	mov	r0, r4
    a78c:	f010 fdab 	bl	1b2e6 <bt_gatt_dm_data_release>
	if (err) 
    a790:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a794:	d002      	beq.n	a79c <subscribeBatteryCadence+0x28>
	{
		printk("Could not release the discovery data, error "
    a796:	4805      	ldr	r0, [pc, #20]	; (a7ac <subscribeBatteryCadence+0x38>)
    a798:	f010 f922 	bl	1a9e0 <printk>
		       "code: %d\n", err);
	}

	free = true;
    a79c:	2201      	movs	r2, #1
    a79e:	4b04      	ldr	r3, [pc, #16]	; (a7b0 <subscribeBatteryCadence+0x3c>)
    a7a0:	701a      	strb	r2, [r3, #0]
}
    a7a2:	bd10      	pop	{r4, pc}
    a7a4:	20008780 	.word	0x20008780
    a7a8:	0001fa03 	.word	0x0001fa03
    a7ac:	0001f9cd 	.word	0x0001f9cd
    a7b0:	20008443 	.word	0x20008443

0000a7b4 <subscribeBatteryHeartRate>:

void subscribeBatteryHeartRate(struct bt_gatt_dm *dm) 
{
    a7b4:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &clients[HEARTRATE]);
    a7b6:	490b      	ldr	r1, [pc, #44]	; (a7e4 <subscribeBatteryHeartRate+0x30>)
{
    a7b8:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &clients[HEARTRATE]);
    a7ba:	f002 fe8d 	bl	d4d8 <bt_bas_handles_assign>
	if (err) 
    a7be:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a7c2:	d002      	beq.n	a7ca <subscribeBatteryHeartRate+0x16>
	{
		printk("Could not init BAS client object from heart rate sensor, error: %d\n", err);
    a7c4:	4808      	ldr	r0, [pc, #32]	; (a7e8 <subscribeBatteryHeartRate+0x34>)
    a7c6:	f010 f90b 	bl	1a9e0 <printk>
	}

	err = bt_gatt_dm_data_release(dm);
    a7ca:	4620      	mov	r0, r4
    a7cc:	f010 fd8b 	bl	1b2e6 <bt_gatt_dm_data_release>
	if (err) 
    a7d0:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a7d4:	d002      	beq.n	a7dc <subscribeBatteryHeartRate+0x28>
	{
		printk("Could not release the discovery data, error "
    a7d6:	4805      	ldr	r0, [pc, #20]	; (a7ec <subscribeBatteryHeartRate+0x38>)
    a7d8:	f010 f902 	bl	1a9e0 <printk>
		       "code: %d\n", err);
	}	
	
	free = true;
    a7dc:	2201      	movs	r2, #1
    a7de:	4b04      	ldr	r3, [pc, #16]	; (a7f0 <subscribeBatteryHeartRate+0x3c>)
    a7e0:	701a      	strb	r2, [r3, #0]
}
    a7e2:	bd10      	pop	{r4, pc}
    a7e4:	20008808 	.word	0x20008808
    a7e8:	0001fa44 	.word	0x0001fa44
    a7ec:	0001f9cd 	.word	0x0001f9cd
    a7f0:	20008443 	.word	0x20008443

0000a7f4 <discovery_completed_cb>:
{
    a7f4:	b510      	push	{r4, lr}
    a7f6:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
    a7f8:	4819      	ldr	r0, [pc, #100]	; (a860 <discovery_completed_cb+0x6c>)
    a7fa:	f010 f8f1 	bl	1a9e0 <printk>
	service_found = true;
    a7fe:	2201      	movs	r2, #1
    a800:	4b18      	ldr	r3, [pc, #96]	; (a864 <discovery_completed_cb+0x70>)
    a802:	701a      	strb	r2, [r3, #0]
	switch (infoSensors)
    a804:	4b18      	ldr	r3, [pc, #96]	; (a868 <discovery_completed_cb+0x74>)
    a806:	781b      	ldrb	r3, [r3, #0]
    a808:	3b01      	subs	r3, #1
    a80a:	2b06      	cmp	r3, #6
    a80c:	d826      	bhi.n	a85c <discovery_completed_cb+0x68>
    a80e:	e8df f003 	tbb	[pc, r3]
    a812:	1308      	.short	0x1308
    a814:	21180d04 	.word	0x21180d04
    a818:	1c          	.byte	0x1c
    a819:	00          	.byte	0x00
		if (cntDevices == 1)
    a81a:	4b14      	ldr	r3, [pc, #80]	; (a86c <discovery_completed_cb+0x78>)
    a81c:	781b      	ldrb	r3, [r3, #0]
    a81e:	2b01      	cmp	r3, #1
    a820:	d10a      	bne.n	a838 <discovery_completed_cb+0x44>
			subscribeBatterySpeed(dm);
    a822:	4620      	mov	r0, r4
}
    a824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatterySpeed(dm);
    a828:	f7ff bf84 	b.w	a734 <subscribeBatterySpeed>
		if (cntDevices == 1)
    a82c:	4b0f      	ldr	r3, [pc, #60]	; (a86c <discovery_completed_cb+0x78>)
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	2b01      	cmp	r3, #1
    a832:	d0f6      	beq.n	a822 <discovery_completed_cb+0x2e>
		else if (cntDevices == 2)
    a834:	2b02      	cmp	r3, #2
		if (cntDevices == 1)
    a836:	d108      	bne.n	a84a <discovery_completed_cb+0x56>
			subscribeBatteryCadence(dm);
    a838:	4620      	mov	r0, r4
}
    a83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatteryCadence(dm);
    a83e:	f7ff bf99 	b.w	a774 <subscribeBatteryCadence>
		if (cntDevices == 1)
    a842:	4b0a      	ldr	r3, [pc, #40]	; (a86c <discovery_completed_cb+0x78>)
    a844:	781b      	ldrb	r3, [r3, #0]
    a846:	2b01      	cmp	r3, #1
    a848:	d0eb      	beq.n	a822 <discovery_completed_cb+0x2e>
			subscribeBatteryHeartRate(dm);
    a84a:	4620      	mov	r0, r4
}
    a84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatteryHeartRate(dm);
    a850:	f7ff bfb0 	b.w	a7b4 <subscribeBatteryHeartRate>
		if (cntDevices == 1)
    a854:	4b05      	ldr	r3, [pc, #20]	; (a86c <discovery_completed_cb+0x78>)
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	2b01      	cmp	r3, #1
    a85a:	e7ec      	b.n	a836 <discovery_completed_cb+0x42>
}
    a85c:	bd10      	pop	{r4, pc}
    a85e:	bf00      	nop
    a860:	0001f0db 	.word	0x0001f0db
    a864:	20008444 	.word	0x20008444
    a868:	2000e581 	.word	0x2000e581
    a86c:	2000e580 	.word	0x2000e580

0000a870 <isFree>:

bool isFree()
{
	return free;
}
    a870:	4b01      	ldr	r3, [pc, #4]	; (a878 <isFree+0x8>)
    a872:	7818      	ldrb	r0, [r3, #0]
    a874:	4770      	bx	lr
    a876:	bf00      	nop
    a878:	20008443 	.word	0x20008443

0000a87c <askForBatteryLevel>:

void askForBatteryLevel(uint8_t type)
{
	switch (type)
    a87c:	2802      	cmp	r0, #2
    a87e:	d00a      	beq.n	a896 <askForBatteryLevel+0x1a>
    a880:	2803      	cmp	r0, #3
    a882:	d00e      	beq.n	a8a2 <askForBatteryLevel+0x26>
    a884:	2801      	cmp	r0, #1
    a886:	d112      	bne.n	a8ae <askForBatteryLevel+0x32>
	{
	case 1:
		readyValues[SPEED] = false;
    a888:	2200      	movs	r2, #0
    a88a:	4b09      	ldr	r3, [pc, #36]	; (a8b0 <askForBatteryLevel+0x34>)
		bt_bas_read_battery_level(&clients[SPEED], read_battery_level_cb_speed);
    a88c:	4909      	ldr	r1, [pc, #36]	; (a8b4 <askForBatteryLevel+0x38>)
    a88e:	480a      	ldr	r0, [pc, #40]	; (a8b8 <askForBatteryLevel+0x3c>)
		readyValues[SPEED] = false;
    a890:	701a      	strb	r2, [r3, #0]
		readyValues[CADENCE] = false;
		bt_bas_read_battery_level(&clients[CADENCE], read_battery_level_cb_cadence);
		break;
	case 3:
		readyValues[HEARTRATE] = false;
		bt_bas_read_battery_level(&clients[HEARTRATE], read_battery_level_cb_heartRate);
    a892:	f002 beab 	b.w	d5ec <bt_bas_read_battery_level>
		readyValues[CADENCE] = false;
    a896:	2200      	movs	r2, #0
    a898:	4b05      	ldr	r3, [pc, #20]	; (a8b0 <askForBatteryLevel+0x34>)
		bt_bas_read_battery_level(&clients[CADENCE], read_battery_level_cb_cadence);
    a89a:	4908      	ldr	r1, [pc, #32]	; (a8bc <askForBatteryLevel+0x40>)
    a89c:	4808      	ldr	r0, [pc, #32]	; (a8c0 <askForBatteryLevel+0x44>)
		readyValues[CADENCE] = false;
    a89e:	705a      	strb	r2, [r3, #1]
		bt_bas_read_battery_level(&clients[CADENCE], read_battery_level_cb_cadence);
    a8a0:	e7f7      	b.n	a892 <askForBatteryLevel+0x16>
		readyValues[HEARTRATE] = false;
    a8a2:	2200      	movs	r2, #0
    a8a4:	4b02      	ldr	r3, [pc, #8]	; (a8b0 <askForBatteryLevel+0x34>)
		bt_bas_read_battery_level(&clients[HEARTRATE], read_battery_level_cb_heartRate);
    a8a6:	4907      	ldr	r1, [pc, #28]	; (a8c4 <askForBatteryLevel+0x48>)
    a8a8:	4807      	ldr	r0, [pc, #28]	; (a8c8 <askForBatteryLevel+0x4c>)
		readyValues[HEARTRATE] = false;
    a8aa:	709a      	strb	r2, [r3, #2]
		bt_bas_read_battery_level(&clients[HEARTRATE], read_battery_level_cb_heartRate);
    a8ac:	e7f1      	b.n	a892 <askForBatteryLevel+0x16>
		break;
	default:
		break;
	}
}
    a8ae:	4770      	bx	lr
    a8b0:	2000e582 	.word	0x2000e582
    a8b4:	0000a53d 	.word	0x0000a53d
    a8b8:	200086f8 	.word	0x200086f8
    a8bc:	0000a589 	.word	0x0000a589
    a8c0:	20008780 	.word	0x20008780
    a8c4:	0000a5d5 	.word	0x0000a5d5
    a8c8:	20008808 	.word	0x20008808

0000a8cc <isValueReady>:

bool isValueReady(uint8_t type)
{
	switch (type)
    a8cc:	2802      	cmp	r0, #2
    a8ce:	d006      	beq.n	a8de <isValueReady+0x12>
    a8d0:	2803      	cmp	r0, #3
    a8d2:	d007      	beq.n	a8e4 <isValueReady+0x18>
    a8d4:	2801      	cmp	r0, #1
    a8d6:	d108      	bne.n	a8ea <isValueReady+0x1e>
	{
	case 1:
		return readyValues[SPEED];
    a8d8:	4b05      	ldr	r3, [pc, #20]	; (a8f0 <isValueReady+0x24>)
    a8da:	7818      	ldrb	r0, [r3, #0]
    a8dc:	4770      	bx	lr
		break;
	case 2:
		return readyValues[CADENCE];
    a8de:	4b04      	ldr	r3, [pc, #16]	; (a8f0 <isValueReady+0x24>)
    a8e0:	7858      	ldrb	r0, [r3, #1]
    a8e2:	4770      	bx	lr
		break;
	case 3:
		return readyValues[HEARTRATE];
    a8e4:	4b02      	ldr	r3, [pc, #8]	; (a8f0 <isValueReady+0x24>)
    a8e6:	7898      	ldrb	r0, [r3, #2]
    a8e8:	4770      	bx	lr
	switch (type)
    a8ea:	2000      	movs	r0, #0
		break;			
	default:
		return false;
		break;
	}	
}
    a8ec:	4770      	bx	lr
    a8ee:	bf00      	nop
    a8f0:	2000e582 	.word	0x2000e582

0000a8f4 <resetReadyValue>:

void resetReadyValue(uint8_t type)
{
	switch (type)
    a8f4:	2802      	cmp	r0, #2
    a8f6:	d007      	beq.n	a908 <resetReadyValue+0x14>
    a8f8:	2803      	cmp	r0, #3
    a8fa:	d009      	beq.n	a910 <resetReadyValue+0x1c>
    a8fc:	2801      	cmp	r0, #1
    a8fe:	d10a      	bne.n	a916 <resetReadyValue+0x22>
	{
	case 1:
		readyValues[SPEED] = false;
    a900:	2200      	movs	r2, #0
    a902:	4b05      	ldr	r3, [pc, #20]	; (a918 <resetReadyValue+0x24>)
    a904:	701a      	strb	r2, [r3, #0]
		break;
    a906:	4770      	bx	lr
	case 2:
		readyValues[CADENCE] = false;
    a908:	2200      	movs	r2, #0
    a90a:	4b03      	ldr	r3, [pc, #12]	; (a918 <resetReadyValue+0x24>)
    a90c:	705a      	strb	r2, [r3, #1]
		break;
    a90e:	4770      	bx	lr
	case 3:
		readyValues[HEARTRATE] = false;
    a910:	2200      	movs	r2, #0
    a912:	4b01      	ldr	r3, [pc, #4]	; (a918 <resetReadyValue+0x24>)
    a914:	709a      	strb	r2, [r3, #2]
		break;			
	default:
		break;
	}		
}
    a916:	4770      	bx	lr
    a918:	2000e582 	.word	0x2000e582

0000a91c <serviceFound>:

bool serviceFound()
{
	return service_found;
    a91c:	4b01      	ldr	r3, [pc, #4]	; (a924 <serviceFound+0x8>)
    a91e:	7818      	ldrb	r0, [r3, #0]
    a920:	4770      	bx	lr
    a922:	bf00      	nop
    a924:	20008444 	.word	0x20008444

0000a928 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a928:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a92a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    a92c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a930:	2b02      	cmp	r3, #2
{
    a932:	4604      	mov	r4, r0
    a934:	460e      	mov	r6, r1
	notify->result = res;
    a936:	6081      	str	r1, [r0, #8]
	switch (method) {
    a938:	d010      	beq.n	a95c <sys_notify_finalize+0x34>
    a93a:	2b03      	cmp	r3, #3
    a93c:	d004      	beq.n	a948 <sys_notify_finalize+0x20>
    a93e:	2b01      	cmp	r3, #1
    a940:	d10f      	bne.n	a962 <sys_notify_finalize+0x3a>
    a942:	2500      	movs	r5, #0
    a944:	4628      	mov	r0, r5
    a946:	e001      	b.n	a94c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a948:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    a94a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a94c:	2300      	movs	r3, #0
    a94e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a950:	b110      	cbz	r0, a958 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a952:	4631      	mov	r1, r6
    a954:	f00f fefe 	bl	1a754 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a958:	4628      	mov	r0, r5
    a95a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    a95c:	2500      	movs	r5, #0
		sig = notify->method.signal;
    a95e:	6800      	ldr	r0, [r0, #0]
		break;
    a960:	e7f4      	b.n	a94c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    a962:	2245      	movs	r2, #69	; 0x45
    a964:	4904      	ldr	r1, [pc, #16]	; (a978 <sys_notify_finalize+0x50>)
    a966:	4805      	ldr	r0, [pc, #20]	; (a97c <sys_notify_finalize+0x54>)
    a968:	f010 f83a 	bl	1a9e0 <printk>
    a96c:	2145      	movs	r1, #69	; 0x45
    a96e:	4802      	ldr	r0, [pc, #8]	; (a978 <sys_notify_finalize+0x50>)
    a970:	f010 fadc 	bl	1af2c <assert_post_action>
	sys_notify_generic_callback rv = 0;
    a974:	2500      	movs	r5, #0
    a976:	e7e8      	b.n	a94a <sys_notify_finalize+0x22>
    a978:	0001fa88 	.word	0x0001fa88
    a97c:	0001faab 	.word	0x0001faab

0000a980 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    a980:	680b      	ldr	r3, [r1, #0]
    a982:	3301      	adds	r3, #1
    a984:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    a986:	4b01      	ldr	r3, [pc, #4]	; (a98c <char_out+0xc>)
    a988:	681b      	ldr	r3, [r3, #0]
    a98a:	4718      	bx	r3
    a98c:	200081bc 	.word	0x200081bc

0000a990 <__printk_hook_install>:
	_char_out = fn;
    a990:	4b01      	ldr	r3, [pc, #4]	; (a998 <__printk_hook_install+0x8>)
    a992:	6018      	str	r0, [r3, #0]
}
    a994:	4770      	bx	lr
    a996:	bf00      	nop
    a998:	200081bc 	.word	0x200081bc

0000a99c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    a99c:	b507      	push	{r0, r1, r2, lr}
    a99e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    a9a0:	2100      	movs	r1, #0
{
    a9a2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    a9a4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    a9a6:	4803      	ldr	r0, [pc, #12]	; (a9b4 <vprintk+0x18>)
    a9a8:	a901      	add	r1, sp, #4
    a9aa:	f000 fbe9 	bl	b180 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    a9ae:	b003      	add	sp, #12
    a9b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a9b4:	0000a981 	.word	0x0000a981

0000a9b8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a9b8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    a9ba:	2500      	movs	r5, #0
{
    a9bc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    a9be:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    a9c2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    a9c4:	a901      	add	r1, sp, #4
    a9c6:	4805      	ldr	r0, [pc, #20]	; (a9dc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    a9c8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    a9ca:	f000 fbd9 	bl	b180 <cbvprintf>

	if (ctx.count < ctx.max) {
    a9ce:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    a9d2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a9d4:	bfb8      	it	lt
    a9d6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a9d8:	b005      	add	sp, #20
    a9da:	bd30      	pop	{r4, r5, pc}
    a9dc:	0001a9bb 	.word	0x0001a9bb

0000a9e0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a9e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a9e4:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    a9e8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a9ea:	f01a 0f08 	tst.w	sl, #8
{
    a9ee:	4693      	mov	fp, r2
	if (processing) {
    a9f0:	d01c      	beq.n	aa2c <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    a9f2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a9f4:	bf0c      	ite	eq
    a9f6:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    a9fa:	f04a 0a20 	orrne.w	sl, sl, #32
    a9fe:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa02:	f104 0014 	add.w	r0, r4, #20
    aa06:	f00f f80d 	bl	19a24 <z_spin_unlock_valid>
    aa0a:	b940      	cbnz	r0, aa1e <process_event+0x3e>
    aa0c:	4992      	ldr	r1, [pc, #584]	; (ac58 <process_event+0x278>)
    aa0e:	4893      	ldr	r0, [pc, #588]	; (ac5c <process_event+0x27c>)
    aa10:	22a7      	movs	r2, #167	; 0xa7
    aa12:	f00f ffe5 	bl	1a9e0 <printk>
    aa16:	21a7      	movs	r1, #167	; 0xa7
    aa18:	488f      	ldr	r0, [pc, #572]	; (ac58 <process_event+0x278>)
    aa1a:	f010 fa87 	bl	1af2c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    aa1e:	f38b 8811 	msr	BASEPRI, fp
    aa22:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    aa26:	b003      	add	sp, #12
    aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    aa2c:	4f8c      	ldr	r7, [pc, #560]	; (ac60 <process_event+0x280>)
    aa2e:	f8df 822c 	ldr.w	r8, [pc, #556]	; ac5c <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aa32:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    aa36:	2902      	cmp	r1, #2
    aa38:	d106      	bne.n	aa48 <process_event+0x68>
			evt = process_recheck(mgr);
    aa3a:	4620      	mov	r0, r4
    aa3c:	f00f ffea 	bl	1aa14 <process_recheck>
		if (evt == EVT_NOP) {
    aa40:	2800      	cmp	r0, #0
    aa42:	d0de      	beq.n	aa02 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    aa44:	2801      	cmp	r0, #1
    aa46:	d163      	bne.n	ab10 <process_event+0x130>
			res = mgr->last_res;
    aa48:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aa4c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    aa4e:	f1b9 0f00 	cmp.w	r9, #0
    aa52:	da19      	bge.n	aa88 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    aa54:	2600      	movs	r6, #0
		*clients = mgr->clients;
    aa56:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa58:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    aa5c:	e9c4 6600 	strd	r6, r6, [r4]
    aa60:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    aa64:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    aa66:	8ba3      	ldrh	r3, [r4, #28]
    aa68:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    aa6c:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    aa6e:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    aa70:	d003      	beq.n	aa7a <process_event+0x9a>
		if (do_monitors
    aa72:	68a2      	ldr	r2, [r4, #8]
    aa74:	2a00      	cmp	r2, #0
    aa76:	f040 80f5 	bne.w	ac64 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    aa7a:	b915      	cbnz	r5, aa82 <process_event+0xa2>
		    || (transit != NULL)) {
    aa7c:	2e00      	cmp	r6, #0
    aa7e:	f000 812f 	beq.w	ace0 <process_event+0x300>
    aa82:	f04f 0a00 	mov.w	sl, #0
    aa86:	e0ef      	b.n	ac68 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aa88:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    aa8c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    aa8e:	2901      	cmp	r1, #1
    aa90:	d820      	bhi.n	aad4 <process_event+0xf4>
	list->head = NULL;
    aa92:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa94:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    aa98:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    aa9a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa9c:	b29b      	uxth	r3, r3
	list->tail = NULL;
    aa9e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    aaa2:	d10a      	bne.n	aaba <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    aaa4:	b13d      	cbz	r5, aab6 <process_event+0xd6>
    aaa6:	4629      	mov	r1, r5
    aaa8:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    aaaa:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    aaac:	3201      	adds	r2, #1
    aaae:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    aab0:	2900      	cmp	r1, #0
    aab2:	d1fa      	bne.n	aaaa <process_event+0xca>
    aab4:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aab6:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    aaba:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    aabc:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    aabe:	f00f ffa9 	bl	1aa14 <process_recheck>
    aac2:	4606      	mov	r6, r0
    aac4:	2800      	cmp	r0, #0
    aac6:	d0ce      	beq.n	aa66 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    aac8:	8ba3      	ldrh	r3, [r4, #28]
    aaca:	f043 0320 	orr.w	r3, r3, #32
    aace:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    aad0:	2600      	movs	r6, #0
    aad2:	e7c8      	b.n	aa66 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    aad4:	2a04      	cmp	r2, #4
    aad6:	d10d      	bne.n	aaf4 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aad8:	f023 0307 	bic.w	r3, r3, #7
    aadc:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    aade:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    aae0:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    aae2:	f00f ff97 	bl	1aa14 <process_recheck>
    aae6:	4605      	mov	r5, r0
    aae8:	b180      	cbz	r0, ab0c <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    aaea:	f042 0220 	orr.w	r2, r2, #32
    aaee:	2500      	movs	r5, #0
    aaf0:	83a2      	strh	r2, [r4, #28]
    aaf2:	e7ed      	b.n	aad0 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    aaf4:	f240 1219 	movw	r2, #281	; 0x119
    aaf8:	4639      	mov	r1, r7
    aafa:	4640      	mov	r0, r8
    aafc:	f00f ff70 	bl	1a9e0 <printk>
    ab00:	f240 1119 	movw	r1, #281	; 0x119
    ab04:	4638      	mov	r0, r7
    ab06:	f010 fa11 	bl	1af2c <assert_post_action>
    ab0a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    ab0c:	462e      	mov	r6, r5
    ab0e:	e7aa      	b.n	aa66 <process_event+0x86>
		} else if (evt == EVT_START) {
    ab10:	2803      	cmp	r0, #3
    ab12:	d131      	bne.n	ab78 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    ab14:	f1ba 0f00 	cmp.w	sl, #0
    ab18:	d00a      	beq.n	ab30 <process_event+0x150>
    ab1a:	4639      	mov	r1, r7
    ab1c:	4640      	mov	r0, r8
    ab1e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    ab22:	f00f ff5d 	bl	1a9e0 <printk>
    ab26:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ab2a:	4638      	mov	r0, r7
    ab2c:	f010 f9fe 	bl	1af2c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ab30:	6823      	ldr	r3, [r4, #0]
    ab32:	b953      	cbnz	r3, ab4a <process_event+0x16a>
    ab34:	4639      	mov	r1, r7
    ab36:	4640      	mov	r0, r8
    ab38:	f240 1255 	movw	r2, #341	; 0x155
    ab3c:	f00f ff50 	bl	1a9e0 <printk>
    ab40:	f240 1155 	movw	r1, #341	; 0x155
    ab44:	4638      	mov	r0, r7
    ab46:	f010 f9f1 	bl	1af2c <assert_post_action>
			transit = mgr->transitions->start;
    ab4a:	6923      	ldr	r3, [r4, #16]
    ab4c:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    ab4e:	b956      	cbnz	r6, ab66 <process_event+0x186>
    ab50:	4639      	mov	r1, r7
    ab52:	4640      	mov	r0, r8
    ab54:	f44f 72ac 	mov.w	r2, #344	; 0x158
    ab58:	f00f ff42 	bl	1a9e0 <printk>
    ab5c:	f44f 71ac 	mov.w	r1, #344	; 0x158
    ab60:	4638      	mov	r0, r7
    ab62:	f010 f9e3 	bl	1af2c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ab66:	8ba3      	ldrh	r3, [r4, #28]
    ab68:	f023 0307 	bic.w	r3, r3, #7
    ab6c:	f043 0306 	orr.w	r3, r3, #6
}
    ab70:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    ab72:	83a3      	strh	r3, [r4, #28]
		res = 0;
    ab74:	46a9      	mov	r9, r5
}
    ab76:	e776      	b.n	aa66 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    ab78:	2804      	cmp	r0, #4
    ab7a:	d12e      	bne.n	abda <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    ab7c:	f1ba 0f02 	cmp.w	sl, #2
    ab80:	d00a      	beq.n	ab98 <process_event+0x1b8>
    ab82:	4639      	mov	r1, r7
    ab84:	4640      	mov	r0, r8
    ab86:	f240 125b 	movw	r2, #347	; 0x15b
    ab8a:	f00f ff29 	bl	1a9e0 <printk>
    ab8e:	f240 115b 	movw	r1, #347	; 0x15b
    ab92:	4638      	mov	r0, r7
    ab94:	f010 f9ca 	bl	1af2c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    ab98:	8be3      	ldrh	r3, [r4, #30]
    ab9a:	b153      	cbz	r3, abb2 <process_event+0x1d2>
    ab9c:	4639      	mov	r1, r7
    ab9e:	4640      	mov	r0, r8
    aba0:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    aba4:	f00f ff1c 	bl	1a9e0 <printk>
    aba8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    abac:	4638      	mov	r0, r7
    abae:	f010 f9bd 	bl	1af2c <assert_post_action>
			transit = mgr->transitions->stop;
    abb2:	6923      	ldr	r3, [r4, #16]
    abb4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    abb6:	b956      	cbnz	r6, abce <process_event+0x1ee>
    abb8:	4639      	mov	r1, r7
    abba:	4640      	mov	r0, r8
    abbc:	f240 125f 	movw	r2, #351	; 0x15f
    abc0:	f00f ff0e 	bl	1a9e0 <printk>
    abc4:	f240 115f 	movw	r1, #351	; 0x15f
    abc8:	4638      	mov	r0, r7
    abca:	f010 f9af 	bl	1af2c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    abce:	8ba3      	ldrh	r3, [r4, #28]
    abd0:	f023 0307 	bic.w	r3, r3, #7
    abd4:	f043 0304 	orr.w	r3, r3, #4
    abd8:	e7ca      	b.n	ab70 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    abda:	2805      	cmp	r0, #5
    abdc:	d12e      	bne.n	ac3c <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    abde:	f1ba 0f01 	cmp.w	sl, #1
    abe2:	d00a      	beq.n	abfa <process_event+0x21a>
    abe4:	4639      	mov	r1, r7
    abe6:	4640      	mov	r0, r8
    abe8:	f44f 72b1 	mov.w	r2, #354	; 0x162
    abec:	f00f fef8 	bl	1a9e0 <printk>
    abf0:	f44f 71b1 	mov.w	r1, #354	; 0x162
    abf4:	4638      	mov	r0, r7
    abf6:	f010 f999 	bl	1af2c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    abfa:	6823      	ldr	r3, [r4, #0]
    abfc:	b953      	cbnz	r3, ac14 <process_event+0x234>
    abfe:	4639      	mov	r1, r7
    ac00:	4640      	mov	r0, r8
    ac02:	f240 1263 	movw	r2, #355	; 0x163
    ac06:	f00f feeb 	bl	1a9e0 <printk>
    ac0a:	f240 1163 	movw	r1, #355	; 0x163
    ac0e:	4638      	mov	r0, r7
    ac10:	f010 f98c 	bl	1af2c <assert_post_action>
			transit = mgr->transitions->reset;
    ac14:	6923      	ldr	r3, [r4, #16]
    ac16:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    ac18:	b956      	cbnz	r6, ac30 <process_event+0x250>
    ac1a:	4639      	mov	r1, r7
    ac1c:	4640      	mov	r0, r8
    ac1e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    ac22:	f00f fedd 	bl	1a9e0 <printk>
    ac26:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ac2a:	4638      	mov	r0, r7
    ac2c:	f010 f97e 	bl	1af2c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ac30:	8ba3      	ldrh	r3, [r4, #28]
    ac32:	f023 0307 	bic.w	r3, r3, #7
    ac36:	f043 0305 	orr.w	r3, r3, #5
    ac3a:	e799      	b.n	ab70 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    ac3c:	2500      	movs	r5, #0
    ac3e:	f240 1269 	movw	r2, #361	; 0x169
    ac42:	4639      	mov	r1, r7
    ac44:	4640      	mov	r0, r8
    ac46:	f00f fecb 	bl	1a9e0 <printk>
    ac4a:	f240 1169 	movw	r1, #361	; 0x169
    ac4e:	4638      	mov	r0, r7
    ac50:	f010 f96c 	bl	1af2c <assert_post_action>
		onoff_transition_fn transit = NULL;
    ac54:	462e      	mov	r6, r5
    ac56:	e78d      	b.n	ab74 <process_event+0x194>
    ac58:	0001fae5 	.word	0x0001fae5
    ac5c:	0001faab 	.word	0x0001faab
    ac60:	0001fac3 	.word	0x0001fac3
				   && !sys_slist_is_empty(&mgr->monitors);
    ac64:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    ac68:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    ac6c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    ac6e:	f104 0314 	add.w	r3, r4, #20
    ac72:	4618      	mov	r0, r3
    ac74:	9301      	str	r3, [sp, #4]
    ac76:	f00e fed5 	bl	19a24 <z_spin_unlock_valid>
    ac7a:	b940      	cbnz	r0, ac8e <process_event+0x2ae>
    ac7c:	4640      	mov	r0, r8
    ac7e:	4931      	ldr	r1, [pc, #196]	; (ad44 <process_event+0x364>)
    ac80:	22a7      	movs	r2, #167	; 0xa7
    ac82:	f00f fead 	bl	1a9e0 <printk>
    ac86:	21a7      	movs	r1, #167	; 0xa7
    ac88:	482e      	ldr	r0, [pc, #184]	; (ad44 <process_event+0x364>)
    ac8a:	f010 f94f 	bl	1af2c <assert_post_action>
    ac8e:	f38b 8811 	msr	BASEPRI, fp
    ac92:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    ac96:	f1ba 0f00 	cmp.w	sl, #0
    ac9a:	d130      	bne.n	acfe <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    ac9c:	2d00      	cmp	r5, #0
    ac9e:	d140      	bne.n	ad22 <process_event+0x342>
			if (transit != NULL) {
    aca0:	b116      	cbz	r6, aca8 <process_event+0x2c8>
				transit(mgr, transition_complete);
    aca2:	4620      	mov	r0, r4
    aca4:	4928      	ldr	r1, [pc, #160]	; (ad48 <process_event+0x368>)
    aca6:	47b0      	blx	r6
	__asm__ volatile(
    aca8:	f04f 0320 	mov.w	r3, #32
    acac:	f3ef 8b11 	mrs	fp, BASEPRI
    acb0:	f383 8811 	msr	BASEPRI, r3
    acb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    acb8:	9801      	ldr	r0, [sp, #4]
    acba:	f00e fea5 	bl	19a08 <z_spin_lock_valid>
    acbe:	b940      	cbnz	r0, acd2 <process_event+0x2f2>
    acc0:	4640      	mov	r0, r8
    acc2:	4920      	ldr	r1, [pc, #128]	; (ad44 <process_event+0x364>)
    acc4:	227c      	movs	r2, #124	; 0x7c
    acc6:	f00f fe8b 	bl	1a9e0 <printk>
    acca:	217c      	movs	r1, #124	; 0x7c
    accc:	481d      	ldr	r0, [pc, #116]	; (ad44 <process_event+0x364>)
    acce:	f010 f92d 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
    acd2:	9801      	ldr	r0, [sp, #4]
    acd4:	f00e feb4 	bl	19a40 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    acd8:	8ba3      	ldrh	r3, [r4, #28]
    acda:	f023 0308 	bic.w	r3, r3, #8
    acde:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ace0:	8ba3      	ldrh	r3, [r4, #28]
    ace2:	06da      	lsls	r2, r3, #27
    ace4:	d525      	bpl.n	ad32 <process_event+0x352>
			evt = EVT_COMPLETE;
    ace6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ace8:	f023 0310 	bic.w	r3, r3, #16
    acec:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    acee:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    acf2:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    acf6:	2900      	cmp	r1, #0
    acf8:	f47f ae9d 	bne.w	aa36 <process_event+0x56>
out:
    acfc:	e681      	b.n	aa02 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    acfe:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ad00:	2900      	cmp	r1, #0
    ad02:	d0cb      	beq.n	ac9c <process_event+0x2bc>
	return node->next;
    ad04:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    ad08:	464b      	mov	r3, r9
    ad0a:	4620      	mov	r0, r4
    ad0c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    ad10:	9a00      	ldr	r2, [sp, #0]
    ad12:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ad14:	f1ba 0f00 	cmp.w	sl, #0
    ad18:	d0c0      	beq.n	ac9c <process_event+0x2bc>
    ad1a:	4651      	mov	r1, sl
    ad1c:	f8da a000 	ldr.w	sl, [sl]
    ad20:	e7f2      	b.n	ad08 <process_event+0x328>
    ad22:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ad24:	464b      	mov	r3, r9
    ad26:	4620      	mov	r0, r4
    ad28:	9a00      	ldr	r2, [sp, #0]
    ad2a:	682d      	ldr	r5, [r5, #0]
    ad2c:	f00f fe8e 	bl	1aa4c <notify_one>
    ad30:	e7b4      	b.n	ac9c <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ad32:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ad36:	bf1e      	ittt	ne
    ad38:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    ad3c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ad3e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    ad40:	e7d5      	b.n	acee <process_event+0x30e>
    ad42:	bf00      	nop
    ad44:	0001fae5 	.word	0x0001fae5
    ad48:	0000ad4d 	.word	0x0000ad4d

0000ad4c <transition_complete>:
{
    ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad4e:	4604      	mov	r4, r0
    ad50:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    ad52:	f100 0614 	add.w	r6, r0, #20
    ad56:	f04f 0320 	mov.w	r3, #32
    ad5a:	f3ef 8711 	mrs	r7, BASEPRI
    ad5e:	f383 8811 	msr	BASEPRI, r3
    ad62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad66:	4630      	mov	r0, r6
    ad68:	f00e fe4e 	bl	19a08 <z_spin_lock_valid>
    ad6c:	b940      	cbnz	r0, ad80 <transition_complete+0x34>
    ad6e:	490a      	ldr	r1, [pc, #40]	; (ad98 <transition_complete+0x4c>)
    ad70:	480a      	ldr	r0, [pc, #40]	; (ad9c <transition_complete+0x50>)
    ad72:	227c      	movs	r2, #124	; 0x7c
    ad74:	f00f fe34 	bl	1a9e0 <printk>
    ad78:	217c      	movs	r1, #124	; 0x7c
    ad7a:	4807      	ldr	r0, [pc, #28]	; (ad98 <transition_complete+0x4c>)
    ad7c:	f010 f8d6 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
    ad80:	4630      	mov	r0, r6
    ad82:	f00e fe5d 	bl	19a40 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    ad86:	463a      	mov	r2, r7
    ad88:	4620      	mov	r0, r4
	mgr->last_res = res;
    ad8a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    ad8c:	2101      	movs	r1, #1
}
    ad8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    ad92:	f7ff be25 	b.w	a9e0 <process_event>
    ad96:	bf00      	nop
    ad98:	0001fae5 	.word	0x0001fae5
    ad9c:	0001faab 	.word	0x0001faab

0000ada0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    ada0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ada4:	4604      	mov	r4, r0
    ada6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    ada8:	f00f fe66 	bl	1aa78 <validate_args>

	if (rv < 0) {
    adac:	1e05      	subs	r5, r0, #0
    adae:	db54      	blt.n	ae5a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    adb0:	f104 0914 	add.w	r9, r4, #20
    adb4:	f04f 0320 	mov.w	r3, #32
    adb8:	f3ef 8a11 	mrs	sl, BASEPRI
    adbc:	f383 8811 	msr	BASEPRI, r3
    adc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    adc4:	4648      	mov	r0, r9
    adc6:	f00e fe1f 	bl	19a08 <z_spin_lock_valid>
    adca:	b940      	cbnz	r0, adde <onoff_request+0x3e>
    adcc:	4933      	ldr	r1, [pc, #204]	; (ae9c <onoff_request+0xfc>)
    adce:	4834      	ldr	r0, [pc, #208]	; (aea0 <onoff_request+0x100>)
    add0:	227c      	movs	r2, #124	; 0x7c
    add2:	f00f fe05 	bl	1a9e0 <printk>
    add6:	217c      	movs	r1, #124	; 0x7c
    add8:	4830      	ldr	r0, [pc, #192]	; (ae9c <onoff_request+0xfc>)
    adda:	f010 f8a7 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
    adde:	4648      	mov	r0, r9
    ade0:	f00e fe2e 	bl	19a40 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    ade4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ade8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    adea:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    adec:	428b      	cmp	r3, r1
    adee:	f002 0607 	and.w	r6, r2, #7
    adf2:	d04a      	beq.n	ae8a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    adf4:	2e02      	cmp	r6, #2
    adf6:	d11f      	bne.n	ae38 <onoff_request+0x98>
	rv = state;
    adf8:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    adfa:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    adfe:	3301      	adds	r3, #1
    ae00:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ae02:	4648      	mov	r0, r9
    ae04:	f00e fe0e 	bl	19a24 <z_spin_unlock_valid>
    ae08:	b940      	cbnz	r0, ae1c <onoff_request+0x7c>
    ae0a:	4924      	ldr	r1, [pc, #144]	; (ae9c <onoff_request+0xfc>)
    ae0c:	4824      	ldr	r0, [pc, #144]	; (aea0 <onoff_request+0x100>)
    ae0e:	22a7      	movs	r2, #167	; 0xa7
    ae10:	f00f fde6 	bl	1a9e0 <printk>
    ae14:	21a7      	movs	r1, #167	; 0xa7
    ae16:	4821      	ldr	r0, [pc, #132]	; (ae9c <onoff_request+0xfc>)
    ae18:	f010 f888 	bl	1af2c <assert_post_action>
	__asm__ volatile(
    ae1c:	f38a 8811 	msr	BASEPRI, sl
    ae20:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    ae24:	f1b8 0f00 	cmp.w	r8, #0
    ae28:	d017      	beq.n	ae5a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    ae2a:	2300      	movs	r3, #0
    ae2c:	4632      	mov	r2, r6
    ae2e:	4639      	mov	r1, r7
    ae30:	4620      	mov	r0, r4
    ae32:	f00f fe0b 	bl	1aa4c <notify_one>
    ae36:	e010      	b.n	ae5a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    ae38:	0793      	lsls	r3, r2, #30
    ae3a:	d001      	beq.n	ae40 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    ae3c:	2e06      	cmp	r6, #6
    ae3e:	d10f      	bne.n	ae60 <onoff_request+0xc0>
	parent->next = child;
    ae40:	2300      	movs	r3, #0
    ae42:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    ae44:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    ae46:	b9eb      	cbnz	r3, ae84 <onoff_request+0xe4>
	list->head = node;
    ae48:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    ae4c:	4635      	mov	r5, r6
    ae4e:	b9f6      	cbnz	r6, ae8e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    ae50:	4652      	mov	r2, sl
    ae52:	2102      	movs	r1, #2
    ae54:	4620      	mov	r0, r4
    ae56:	f7ff fdc3 	bl	a9e0 <process_event>
		}
	}

	return rv;
}
    ae5a:	4628      	mov	r0, r5
    ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    ae60:	2e05      	cmp	r6, #5
    ae62:	d017      	beq.n	ae94 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    ae64:	2e01      	cmp	r6, #1
    ae66:	d00a      	beq.n	ae7e <onoff_request+0xde>
    ae68:	490e      	ldr	r1, [pc, #56]	; (aea4 <onoff_request+0x104>)
    ae6a:	480d      	ldr	r0, [pc, #52]	; (aea0 <onoff_request+0x100>)
    ae6c:	f240 12c5 	movw	r2, #453	; 0x1c5
    ae70:	f00f fdb6 	bl	1a9e0 <printk>
    ae74:	f240 11c5 	movw	r1, #453	; 0x1c5
    ae78:	480a      	ldr	r0, [pc, #40]	; (aea4 <onoff_request+0x104>)
    ae7a:	f010 f857 	bl	1af2c <assert_post_action>
		rv = -EIO;
    ae7e:	f06f 0504 	mvn.w	r5, #4
    ae82:	e004      	b.n	ae8e <onoff_request+0xee>
	parent->next = child;
    ae84:	601f      	str	r7, [r3, #0]
	list->tail = node;
    ae86:	6067      	str	r7, [r4, #4]
}
    ae88:	e7e0      	b.n	ae4c <onoff_request+0xac>
		rv = -EAGAIN;
    ae8a:	f06f 050a 	mvn.w	r5, #10
    ae8e:	f04f 0800 	mov.w	r8, #0
    ae92:	e7b6      	b.n	ae02 <onoff_request+0x62>
		rv = -ENOTSUP;
    ae94:	f06f 0522 	mvn.w	r5, #34	; 0x22
    ae98:	e7f9      	b.n	ae8e <onoff_request+0xee>
    ae9a:	bf00      	nop
    ae9c:	0001fae5 	.word	0x0001fae5
    aea0:	0001faab 	.word	0x0001faab
    aea4:	0001fac3 	.word	0x0001fac3

0000aea8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    aea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aeac:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    aeae:	4e14      	ldr	r6, [pc, #80]	; (af00 <z_work_q_main+0x58>)
    aeb0:	f8df 8050 	ldr.w	r8, [pc, #80]	; af04 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    aeb4:	f04f 32ff 	mov.w	r2, #4294967295
    aeb8:	f04f 33ff 	mov.w	r3, #4294967295
    aebc:	4628      	mov	r0, r5
    aebe:	f00d fb4b 	bl	18558 <z_impl_k_queue_get>
		if (work == NULL) {
    aec2:	4604      	mov	r4, r0
    aec4:	2800      	cmp	r0, #0
    aec6:	d0f5      	beq.n	aeb4 <z_work_q_main+0xc>
		handler = work->handler;
    aec8:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    aeca:	b947      	cbnz	r7, aede <z_work_q_main+0x36>
    aecc:	4631      	mov	r1, r6
    aece:	4640      	mov	r0, r8
    aed0:	221c      	movs	r2, #28
    aed2:	f00f fd85 	bl	1a9e0 <printk>
    aed6:	211c      	movs	r1, #28
    aed8:	4630      	mov	r0, r6
    aeda:	f010 f827 	bl	1af2c <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aede:	f104 0308 	add.w	r3, r4, #8
    aee2:	e8d3 2fef 	ldaex	r2, [r3]
    aee6:	f022 0101 	bic.w	r1, r2, #1
    aeea:	e8c3 1fe0 	stlex	r0, r1, [r3]
    aeee:	2800      	cmp	r0, #0
    aef0:	d1f7      	bne.n	aee2 <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    aef2:	07d3      	lsls	r3, r2, #31
    aef4:	d501      	bpl.n	aefa <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    aef6:	4620      	mov	r0, r4
    aef8:	47b8      	blx	r7
	z_impl_k_yield();
    aefa:	f00e fa57 	bl	193ac <z_impl_k_yield>
    aefe:	e7d9      	b.n	aeb4 <z_work_q_main+0xc>
    af00:	0001fb0b 	.word	0x0001fb0b
    af04:	0001faab 	.word	0x0001faab

0000af08 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    af08:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    af0a:	2900      	cmp	r1, #0
    af0c:	d039      	beq.n	af82 <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    af0e:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    af10:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    af12:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    af14:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    af16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    af1a:	bf2c      	ite	cs
    af1c:	2408      	movcs	r4, #8
    af1e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    af20:	1b0c      	subs	r4, r1, r4
    af22:	1b64      	subs	r4, r4, r5
    af24:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    af26:	4621      	mov	r1, r4
    af28:	f00f fdd2 	bl	1aad0 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    af2c:	07c3      	lsls	r3, r0, #31
    af2e:	d408      	bmi.n	af42 <sys_heap_free+0x3a>
    af30:	4914      	ldr	r1, [pc, #80]	; (af84 <sys_heap_free+0x7c>)
    af32:	4815      	ldr	r0, [pc, #84]	; (af88 <sys_heap_free+0x80>)
    af34:	229a      	movs	r2, #154	; 0x9a
    af36:	f00f fd53 	bl	1a9e0 <printk>
    af3a:	219a      	movs	r1, #154	; 0x9a
    af3c:	4811      	ldr	r0, [pc, #68]	; (af84 <sys_heap_free+0x7c>)
    af3e:	f00f fff5 	bl	1af2c <assert_post_action>
	return c + chunk_size(h, c);
    af42:	4621      	mov	r1, r4
    af44:	4628      	mov	r0, r5
    af46:	f00f fdd9 	bl	1aafc <chunk_size>
    af4a:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    af4c:	4631      	mov	r1, r6
    af4e:	2200      	movs	r2, #0
    af50:	4628      	mov	r0, r5
    af52:	f00f fdbd 	bl	1aad0 <chunk_field>
    af56:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    af58:	42b4      	cmp	r4, r6
    af5a:	d008      	beq.n	af6e <sys_heap_free+0x66>
    af5c:	4909      	ldr	r1, [pc, #36]	; (af84 <sys_heap_free+0x7c>)
    af5e:	480a      	ldr	r0, [pc, #40]	; (af88 <sys_heap_free+0x80>)
    af60:	22a2      	movs	r2, #162	; 0xa2
    af62:	f00f fd3d 	bl	1a9e0 <printk>
    af66:	21a2      	movs	r1, #162	; 0xa2
    af68:	4806      	ldr	r0, [pc, #24]	; (af84 <sys_heap_free+0x7c>)
    af6a:	f00f ffdf 	bl	1af2c <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    af6e:	4621      	mov	r1, r4
    af70:	4628      	mov	r0, r5
    af72:	2200      	movs	r2, #0
    af74:	f00f fdc8 	bl	1ab08 <set_chunk_used>
	free_chunk(h, c);
    af78:	4621      	mov	r1, r4
}
    af7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    af7e:	f00f bf05 	b.w	1ad8c <free_chunk>
}
    af82:	bd70      	pop	{r4, r5, r6, pc}
    af84:	0001fb2e 	.word	0x0001fb2e
    af88:	0001faab 	.word	0x0001faab

0000af8c <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    af90:	f101 39ff 	add.w	r9, r1, #4294967295
    af94:	ea19 0f01 	tst.w	r9, r1
{
    af98:	4680      	mov	r8, r0
    af9a:	460f      	mov	r7, r1
    af9c:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    af9e:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    afa0:	d008      	beq.n	afb4 <sys_heap_aligned_alloc+0x28>
    afa2:	4931      	ldr	r1, [pc, #196]	; (b068 <sys_heap_aligned_alloc+0xdc>)
    afa4:	4831      	ldr	r0, [pc, #196]	; (b06c <sys_heap_aligned_alloc+0xe0>)
    afa6:	22fc      	movs	r2, #252	; 0xfc
    afa8:	f00f fd1a 	bl	1a9e0 <printk>
    afac:	21fc      	movs	r1, #252	; 0xfc
    afae:	482e      	ldr	r0, [pc, #184]	; (b068 <sys_heap_aligned_alloc+0xdc>)
    afb0:	f00f ffbc 	bl	1af2c <assert_post_action>
	return big_heap_chunks(h->len);
    afb4:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    afb6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    afba:	bf2c      	ite	cs
    afbc:	2308      	movcs	r3, #8
    afbe:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    afc0:	429f      	cmp	r7, r3
    afc2:	d805      	bhi.n	afd0 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    afc4:	4621      	mov	r1, r4
    afc6:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    afc8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    afcc:	f00f bf20 	b.w	1ae10 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    afd0:	b91c      	cbnz	r4, afda <sys_heap_aligned_alloc+0x4e>
		return NULL;
    afd2:	2600      	movs	r6, #0
}
    afd4:	4630      	mov	r0, r6
    afd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    afda:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    afde:	d9f8      	bls.n	afd2 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    afe0:	1939      	adds	r1, r7, r4
    afe2:	1ac9      	subs	r1, r1, r3
    afe4:	f00f fdac 	bl	1ab40 <bytes_to_chunksz.isra.0>
    afe8:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    afea:	4628      	mov	r0, r5
    afec:	f00f fe03 	bl	1abf6 <alloc_chunk>
	if (c0 == 0) {
    aff0:	4680      	mov	r8, r0
    aff2:	2800      	cmp	r0, #0
    aff4:	d0ed      	beq.n	afd2 <sys_heap_aligned_alloc+0x46>
    aff6:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    aff8:	427f      	negs	r7, r7
    affa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    affe:	bf2c      	ite	cs
    b000:	2308      	movcs	r3, #8
    b002:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    b004:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    b008:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    b00a:	444e      	add	r6, r9
    b00c:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b00e:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b010:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b012:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b014:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b016:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    b01a:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    b01c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b020:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    b024:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    b028:	d208      	bcs.n	b03c <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    b02a:	4601      	mov	r1, r0
    b02c:	463a      	mov	r2, r7
    b02e:	4628      	mov	r0, r5
    b030:	f00f fe24 	bl	1ac7c <split_chunks>
		free_list_add(h, c0);
    b034:	4641      	mov	r1, r8
    b036:	4628      	mov	r0, r5
    b038:	f00f fe65 	bl	1ad06 <free_list_add>
	return c + chunk_size(h, c);
    b03c:	4639      	mov	r1, r7
    b03e:	4628      	mov	r0, r5
    b040:	f00f fd5c 	bl	1aafc <chunk_size>
    b044:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    b046:	4284      	cmp	r4, r0
    b048:	d208      	bcs.n	b05c <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    b04a:	4639      	mov	r1, r7
    b04c:	4628      	mov	r0, r5
    b04e:	4622      	mov	r2, r4
    b050:	f00f fe14 	bl	1ac7c <split_chunks>
		free_list_add(h, c_end);
    b054:	4621      	mov	r1, r4
    b056:	4628      	mov	r0, r5
    b058:	f00f fe55 	bl	1ad06 <free_list_add>
	set_chunk_used(h, c, true);
    b05c:	2201      	movs	r2, #1
    b05e:	4639      	mov	r1, r7
    b060:	4628      	mov	r0, r5
    b062:	f00f fd51 	bl	1ab08 <set_chunk_used>
	return mem;
    b066:	e7b5      	b.n	afd4 <sys_heap_aligned_alloc+0x48>
    b068:	0001fb2e 	.word	0x0001fb2e
    b06c:	0001faab 	.word	0x0001faab

0000b070 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    b070:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b076:	4607      	mov	r7, r0
    b078:	460c      	mov	r4, r1
    b07a:	4616      	mov	r6, r2
    b07c:	d20e      	bcs.n	b09c <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    b07e:	2a04      	cmp	r2, #4
    b080:	d80a      	bhi.n	b098 <sys_heap_init+0x28>
    b082:	493d      	ldr	r1, [pc, #244]	; (b178 <sys_heap_init+0x108>)
    b084:	483d      	ldr	r0, [pc, #244]	; (b17c <sys_heap_init+0x10c>)
    b086:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    b08a:	f00f fca9 	bl	1a9e0 <printk>
    b08e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    b092:	4839      	ldr	r0, [pc, #228]	; (b178 <sys_heap_init+0x108>)
    b094:	f00f ff4a 	bl	1af2c <assert_post_action>
    b098:	2204      	movs	r2, #4
    b09a:	e000      	b.n	b09e <sys_heap_init+0x2e>
    b09c:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    b09e:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b0a0:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b0a2:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b0a4:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b0a8:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    b0ac:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    b0ae:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    b0b0:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    b0b4:	d80a      	bhi.n	b0cc <sys_heap_init+0x5c>
    b0b6:	4930      	ldr	r1, [pc, #192]	; (b178 <sys_heap_init+0x108>)
    b0b8:	4830      	ldr	r0, [pc, #192]	; (b17c <sys_heap_init+0x10c>)
    b0ba:	f240 1275 	movw	r2, #373	; 0x175
    b0be:	f00f fc8f 	bl	1a9e0 <printk>
    b0c2:	f240 1175 	movw	r1, #373	; 0x175
    b0c6:	482c      	ldr	r0, [pc, #176]	; (b178 <sys_heap_init+0x108>)
    b0c8:	f00f ff30 	bl	1af2c <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    b0cc:	2300      	movs	r3, #0
    b0ce:	2200      	movs	r2, #0
	heap->heap = h;
    b0d0:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    b0d2:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    b0d6:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b0d8:	4631      	mov	r1, r6
    b0da:	4630      	mov	r0, r6
	h->len = buf_sz;
    b0dc:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    b0de:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b0e0:	f00f fd37 	bl	1ab52 <bucket_idx.isra.0>
    b0e4:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b0e6:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b0e8:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b0ea:	4630      	mov	r0, r6
    b0ec:	f00f fd28 	bl	1ab40 <bytes_to_chunksz.isra.0>
    b0f0:	341b      	adds	r4, #27
    b0f2:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    b0f4:	4420      	add	r0, r4
    b0f6:	42b0      	cmp	r0, r6
    b0f8:	d30a      	bcc.n	b110 <sys_heap_init+0xa0>
    b0fa:	491f      	ldr	r1, [pc, #124]	; (b178 <sys_heap_init+0x108>)
    b0fc:	481f      	ldr	r0, [pc, #124]	; (b17c <sys_heap_init+0x10c>)
    b0fe:	f240 1281 	movw	r2, #385	; 0x181
    b102:	f00f fc6d 	bl	1a9e0 <printk>
    b106:	f240 1181 	movw	r1, #385	; 0x181
    b10a:	481b      	ldr	r0, [pc, #108]	; (b178 <sys_heap_init+0x108>)
    b10c:	f00f ff0e 	bl	1af2c <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    b110:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    b112:	4619      	mov	r1, r3
    b114:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    b118:	42bb      	cmp	r3, r7
    b11a:	db28      	blt.n	b16e <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    b11c:	4622      	mov	r2, r4
    b11e:	4628      	mov	r0, r5
    b120:	2100      	movs	r1, #0
    b122:	f00f fd09 	bl	1ab38 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    b126:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    b128:	4628      	mov	r0, r5
    b12a:	2201      	movs	r2, #1
    b12c:	2100      	movs	r1, #0
    b12e:	f00f fceb 	bl	1ab08 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    b132:	463a      	mov	r2, r7
    b134:	4621      	mov	r1, r4
    b136:	f00f fcff 	bl	1ab38 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    b13a:	4623      	mov	r3, r4
    b13c:	2200      	movs	r2, #0
    b13e:	4621      	mov	r1, r4
    b140:	4628      	mov	r0, r5
    b142:	f00f fcd0 	bl	1aae6 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    b146:	4631      	mov	r1, r6
    b148:	4628      	mov	r0, r5
    b14a:	f00f fcf5 	bl	1ab38 <set_chunk_size>
    b14e:	463b      	mov	r3, r7
    b150:	4631      	mov	r1, r6
    b152:	4628      	mov	r0, r5
    b154:	2200      	movs	r2, #0
    b156:	f00f fcc6 	bl	1aae6 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    b15a:	4631      	mov	r1, r6
    b15c:	4628      	mov	r0, r5
    b15e:	2201      	movs	r2, #1
    b160:	f00f fcd2 	bl	1ab08 <set_chunk_used>

	free_list_add(h, chunk0_size);
    b164:	4621      	mov	r1, r4
}
    b166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    b16a:	f00f bdcc 	b.w	1ad06 <free_list_add>
		h->buckets[i].next = 0;
    b16e:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    b172:	3301      	adds	r3, #1
    b174:	e7d0      	b.n	b118 <sys_heap_init+0xa8>
    b176:	bf00      	nop
    b178:	0001fb2e 	.word	0x0001fb2e
    b17c:	0001faab 	.word	0x0001faab

0000b180 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b184:	468b      	mov	fp, r1
    b186:	4692      	mov	sl, r2
    b188:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b18a:	2500      	movs	r5, #0
{
    b18c:	b091      	sub	sp, #68	; 0x44
    b18e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b190:	f89a 0000 	ldrb.w	r0, [sl]
    b194:	b908      	cbnz	r0, b19a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    b196:	4628      	mov	r0, r5
    b198:	e35f      	b.n	b85a <cbvprintf+0x6da>
		if (*fp != '%') {
    b19a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    b19c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    b1a0:	d007      	beq.n	b1b2 <cbvprintf+0x32>
			OUTC('%');
    b1a2:	4659      	mov	r1, fp
    b1a4:	9b02      	ldr	r3, [sp, #8]
    b1a6:	4798      	blx	r3
    b1a8:	2800      	cmp	r0, #0
    b1aa:	f2c0 8356 	blt.w	b85a <cbvprintf+0x6da>
    b1ae:	3501      	adds	r5, #1
			break;
    b1b0:	e212      	b.n	b5d8 <cbvprintf+0x458>
		} state = {
    b1b2:	2218      	movs	r2, #24
    b1b4:	2100      	movs	r1, #0
    b1b6:	a80a      	add	r0, sp, #40	; 0x28
    b1b8:	f010 fe67 	bl	1be8a <memset>
	if (*sp == '%') {
    b1bc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    b1c0:	2b25      	cmp	r3, #37	; 0x25
    b1c2:	d078      	beq.n	b2b6 <cbvprintf+0x136>
    b1c4:	2200      	movs	r2, #0
    b1c6:	4694      	mov	ip, r2
    b1c8:	4696      	mov	lr, r2
    b1ca:	4616      	mov	r6, r2
    b1cc:	4610      	mov	r0, r2
    b1ce:	4639      	mov	r1, r7
		switch (*sp) {
    b1d0:	f817 3b01 	ldrb.w	r3, [r7], #1
    b1d4:	2b2b      	cmp	r3, #43	; 0x2b
    b1d6:	f000 809d 	beq.w	b314 <cbvprintf+0x194>
    b1da:	f200 8094 	bhi.w	b306 <cbvprintf+0x186>
    b1de:	2b20      	cmp	r3, #32
    b1e0:	f000 809a 	beq.w	b318 <cbvprintf+0x198>
    b1e4:	2b23      	cmp	r3, #35	; 0x23
    b1e6:	f000 809a 	beq.w	b31e <cbvprintf+0x19e>
    b1ea:	b128      	cbz	r0, b1f8 <cbvprintf+0x78>
    b1ec:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b1f0:	f040 0004 	orr.w	r0, r0, #4
    b1f4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b1f8:	b12e      	cbz	r6, b206 <cbvprintf+0x86>
    b1fa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b1fe:	f040 0008 	orr.w	r0, r0, #8
    b202:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b206:	f1be 0f00 	cmp.w	lr, #0
    b20a:	d005      	beq.n	b218 <cbvprintf+0x98>
    b20c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b210:	f040 0010 	orr.w	r0, r0, #16
    b214:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b218:	f1bc 0f00 	cmp.w	ip, #0
    b21c:	d005      	beq.n	b22a <cbvprintf+0xaa>
    b21e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b222:	f040 0020 	orr.w	r0, r0, #32
    b226:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b22a:	b12a      	cbz	r2, b238 <cbvprintf+0xb8>
    b22c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    b234:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    b238:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b23c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    b240:	2844      	cmp	r0, #68	; 0x44
    b242:	d103      	bne.n	b24c <cbvprintf+0xcc>
		conv->flag_zero = false;
    b244:	f36f 1286 	bfc	r2, #6, #1
    b248:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    b24c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    b250:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    b252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b256:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    b25a:	d17b      	bne.n	b354 <cbvprintf+0x1d4>
		conv->width_star = true;
    b25c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    b260:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    b262:	f042 0201 	orr.w	r2, r2, #1
    b266:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    b26a:	781a      	ldrb	r2, [r3, #0]
    b26c:	2a2e      	cmp	r2, #46	; 0x2e
    b26e:	bf0c      	ite	eq
    b270:	2101      	moveq	r1, #1
    b272:	2100      	movne	r1, #0
    b274:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b278:	f361 0241 	bfi	r2, r1, #1, #1
    b27c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    b280:	d174      	bne.n	b36c <cbvprintf+0x1ec>
	if (*sp == '*') {
    b282:	785a      	ldrb	r2, [r3, #1]
    b284:	2a2a      	cmp	r2, #42	; 0x2a
    b286:	d06a      	beq.n	b35e <cbvprintf+0x1de>
	size_t val = 0;
    b288:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    b28a:	260a      	movs	r6, #10
	++sp;
    b28c:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    b28e:	4618      	mov	r0, r3
    b290:	f810 2b01 	ldrb.w	r2, [r0], #1
    b294:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b298:	2f09      	cmp	r7, #9
    b29a:	f240 808e 	bls.w	b3ba <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    b29e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    b2a2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    b2a4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    b2a8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    b2ac:	f361 0241 	bfi	r2, r1, #1, #1
    b2b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b2b4:	e05a      	b.n	b36c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    b2b6:	f10a 0702 	add.w	r7, sl, #2
    b2ba:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    b2be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b2c2:	07d9      	lsls	r1, r3, #31
    b2c4:	f140 8149 	bpl.w	b55a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    b2c8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    b2cc:	f1b9 0f00 	cmp.w	r9, #0
    b2d0:	da07      	bge.n	b2e2 <cbvprintf+0x162>
				conv->flag_dash = true;
    b2d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    b2d6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    b2da:	f042 0204 	orr.w	r2, r2, #4
    b2de:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    b2e2:	075a      	lsls	r2, r3, #29
    b2e4:	f140 8142 	bpl.w	b56c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    b2e8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    b2ec:	f1b8 0f00 	cmp.w	r8, #0
    b2f0:	f280 8141 	bge.w	b576 <cbvprintf+0x3f6>
				conv->prec_present = false;
    b2f4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b2f8:	f36f 0341 	bfc	r3, #1, #1
    b2fc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    b300:	f04f 38ff 	mov.w	r8, #4294967295
    b304:	e137      	b.n	b576 <cbvprintf+0x3f6>
		switch (*sp) {
    b306:	2b2d      	cmp	r3, #45	; 0x2d
    b308:	d00c      	beq.n	b324 <cbvprintf+0x1a4>
    b30a:	2b30      	cmp	r3, #48	; 0x30
    b30c:	f47f af6d 	bne.w	b1ea <cbvprintf+0x6a>
			conv->flag_zero = true;
    b310:	2201      	movs	r2, #1
	} while (loop);
    b312:	e75c      	b.n	b1ce <cbvprintf+0x4e>
			conv->flag_plus = true;
    b314:	2601      	movs	r6, #1
    b316:	e75a      	b.n	b1ce <cbvprintf+0x4e>
			conv->flag_space = true;
    b318:	f04f 0e01 	mov.w	lr, #1
    b31c:	e757      	b.n	b1ce <cbvprintf+0x4e>
			conv->flag_hash = true;
    b31e:	f04f 0c01 	mov.w	ip, #1
    b322:	e754      	b.n	b1ce <cbvprintf+0x4e>
		switch (*sp) {
    b324:	2001      	movs	r0, #1
    b326:	e752      	b.n	b1ce <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    b328:	4633      	mov	r3, r6
    b32a:	fb0c 0202 	mla	r2, ip, r2, r0
    b32e:	3a30      	subs	r2, #48	; 0x30
    b330:	461e      	mov	r6, r3
    b332:	f816 0b01 	ldrb.w	r0, [r6], #1
    b336:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b33a:	2f09      	cmp	r7, #9
    b33c:	d9f4      	bls.n	b328 <cbvprintf+0x1a8>
	if (sp != wp) {
    b33e:	4299      	cmp	r1, r3
    b340:	d093      	beq.n	b26a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    b342:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    b346:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    b348:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    b34a:	f362 0141 	bfi	r1, r2, #1, #1
    b34e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    b352:	e78a      	b.n	b26a <cbvprintf+0xea>
    b354:	460b      	mov	r3, r1
	size_t val = 0;
    b356:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    b358:	f04f 0c0a 	mov.w	ip, #10
    b35c:	e7e8      	b.n	b330 <cbvprintf+0x1b0>
		conv->prec_star = true;
    b35e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    b362:	3302      	adds	r3, #2
		conv->prec_star = true;
    b364:	f042 0204 	orr.w	r2, r2, #4
    b368:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    b36c:	461f      	mov	r7, r3
    b36e:	f817 2b01 	ldrb.w	r2, [r7], #1
    b372:	2a6c      	cmp	r2, #108	; 0x6c
    b374:	d041      	beq.n	b3fa <cbvprintf+0x27a>
    b376:	d825      	bhi.n	b3c4 <cbvprintf+0x244>
    b378:	2a68      	cmp	r2, #104	; 0x68
    b37a:	d02b      	beq.n	b3d4 <cbvprintf+0x254>
    b37c:	2a6a      	cmp	r2, #106	; 0x6a
    b37e:	d046      	beq.n	b40e <cbvprintf+0x28e>
    b380:	2a4c      	cmp	r2, #76	; 0x4c
    b382:	d04c      	beq.n	b41e <cbvprintf+0x29e>
    b384:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    b386:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    b38a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    b38e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    b390:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    b394:	f200 80d9 	bhi.w	b54a <cbvprintf+0x3ca>
    b398:	2a57      	cmp	r2, #87	; 0x57
    b39a:	d84d      	bhi.n	b438 <cbvprintf+0x2b8>
    b39c:	2a41      	cmp	r2, #65	; 0x41
    b39e:	d003      	beq.n	b3a8 <cbvprintf+0x228>
    b3a0:	3a45      	subs	r2, #69	; 0x45
    b3a2:	2a02      	cmp	r2, #2
    b3a4:	f200 80d1 	bhi.w	b54a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    b3a8:	2204      	movs	r2, #4
    b3aa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b3ae:	f362 0302 	bfi	r3, r2, #0, #3
    b3b2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    b3b6:	2301      	movs	r3, #1
			break;
    b3b8:	e09e      	b.n	b4f8 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    b3ba:	fb06 2101 	mla	r1, r6, r1, r2
    b3be:	4603      	mov	r3, r0
    b3c0:	3930      	subs	r1, #48	; 0x30
    b3c2:	e764      	b.n	b28e <cbvprintf+0x10e>
	switch (*sp) {
    b3c4:	2a74      	cmp	r2, #116	; 0x74
    b3c6:	d026      	beq.n	b416 <cbvprintf+0x296>
    b3c8:	2a7a      	cmp	r2, #122	; 0x7a
    b3ca:	d1db      	bne.n	b384 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    b3cc:	2206      	movs	r2, #6
    b3ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b3d2:	e00d      	b.n	b3f0 <cbvprintf+0x270>
		if (*++sp == 'h') {
    b3d4:	785a      	ldrb	r2, [r3, #1]
    b3d6:	2a68      	cmp	r2, #104	; 0x68
    b3d8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b3dc:	d106      	bne.n	b3ec <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    b3de:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    b3e0:	f361 02c6 	bfi	r2, r1, #3, #4
    b3e4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    b3e8:	1c9f      	adds	r7, r3, #2
    b3ea:	e7cc      	b.n	b386 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    b3ec:	4613      	mov	r3, r2
    b3ee:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    b3f0:	f362 03c6 	bfi	r3, r2, #3, #4
    b3f4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    b3f8:	e7c5      	b.n	b386 <cbvprintf+0x206>
		if (*++sp == 'l') {
    b3fa:	785a      	ldrb	r2, [r3, #1]
    b3fc:	2a6c      	cmp	r2, #108	; 0x6c
    b3fe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b402:	d101      	bne.n	b408 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    b404:	2104      	movs	r1, #4
    b406:	e7eb      	b.n	b3e0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    b408:	4613      	mov	r3, r2
    b40a:	2203      	movs	r2, #3
    b40c:	e7f0      	b.n	b3f0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    b40e:	2205      	movs	r2, #5
    b410:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b414:	e7ec      	b.n	b3f0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    b416:	2207      	movs	r2, #7
    b418:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b41c:	e7e8      	b.n	b3f0 <cbvprintf+0x270>
		conv->unsupported = true;
    b41e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    b422:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    b426:	f023 0302 	bic.w	r3, r3, #2
    b42a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    b42e:	f043 0302 	orr.w	r3, r3, #2
    b432:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    b436:	e7a6      	b.n	b386 <cbvprintf+0x206>
    b438:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    b43c:	2920      	cmp	r1, #32
    b43e:	f200 8084 	bhi.w	b54a <cbvprintf+0x3ca>
    b442:	a001      	add	r0, pc, #4	; (adr r0, b448 <cbvprintf+0x2c8>)
    b444:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    b448:	0000b50d 	.word	0x0000b50d
    b44c:	0000b54b 	.word	0x0000b54b
    b450:	0000b54b 	.word	0x0000b54b
    b454:	0000b54b 	.word	0x0000b54b
    b458:	0000b54b 	.word	0x0000b54b
    b45c:	0000b54b 	.word	0x0000b54b
    b460:	0000b54b 	.word	0x0000b54b
    b464:	0000b54b 	.word	0x0000b54b
    b468:	0000b54b 	.word	0x0000b54b
    b46c:	0000b3a9 	.word	0x0000b3a9
    b470:	0000b54b 	.word	0x0000b54b
    b474:	0000b50d 	.word	0x0000b50d
    b478:	0000b4cd 	.word	0x0000b4cd
    b47c:	0000b3a9 	.word	0x0000b3a9
    b480:	0000b3a9 	.word	0x0000b3a9
    b484:	0000b3a9 	.word	0x0000b3a9
    b488:	0000b54b 	.word	0x0000b54b
    b48c:	0000b4cd 	.word	0x0000b4cd
    b490:	0000b54b 	.word	0x0000b54b
    b494:	0000b54b 	.word	0x0000b54b
    b498:	0000b54b 	.word	0x0000b54b
    b49c:	0000b54b 	.word	0x0000b54b
    b4a0:	0000b515 	.word	0x0000b515
    b4a4:	0000b50d 	.word	0x0000b50d
    b4a8:	0000b531 	.word	0x0000b531
    b4ac:	0000b54b 	.word	0x0000b54b
    b4b0:	0000b54b 	.word	0x0000b54b
    b4b4:	0000b531 	.word	0x0000b531
    b4b8:	0000b54b 	.word	0x0000b54b
    b4bc:	0000b50d 	.word	0x0000b50d
    b4c0:	0000b54b 	.word	0x0000b54b
    b4c4:	0000b54b 	.word	0x0000b54b
    b4c8:	0000b50d 	.word	0x0000b50d
		conv->specifier_cat = SPECIFIER_SINT;
    b4cc:	2001      	movs	r0, #1
    b4ce:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b4d2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    b4d6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b4da:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    b4dc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    b4e0:	bf02      	ittt	eq
    b4e2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    b4e6:	f041 0101 	orreq.w	r1, r1, #1
    b4ea:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    b4ee:	2a63      	cmp	r2, #99	; 0x63
    b4f0:	d131      	bne.n	b556 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b4f2:	3b00      	subs	r3, #0
    b4f4:	bf18      	it	ne
    b4f6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    b4f8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b4fc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b500:	430b      	orrs	r3, r1
    b502:	f363 0241 	bfi	r2, r3, #1, #1
    b506:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b50a:	e6d8      	b.n	b2be <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    b50c:	2002      	movs	r0, #2
    b50e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    b512:	e7de      	b.n	b4d2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    b514:	2103      	movs	r1, #3
    b516:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b51a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b51e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    b522:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b526:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    b528:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b52c:	4143      	adcs	r3, r0
    b52e:	e7e3      	b.n	b4f8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    b530:	2103      	movs	r1, #3
    b532:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b536:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b53a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    b53e:	bf14      	ite	ne
    b540:	2301      	movne	r3, #1
    b542:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    b544:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b548:	e7d6      	b.n	b4f8 <cbvprintf+0x378>
		conv->invalid = true;
    b54a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b54e:	f043 0301 	orr.w	r3, r3, #1
    b552:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    b556:	2300      	movs	r3, #0
    b558:	e7ce      	b.n	b4f8 <cbvprintf+0x378>
		} else if (conv->width_present) {
    b55a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    b55e:	2a00      	cmp	r2, #0
		int width = -1;
    b560:	bfac      	ite	ge
    b562:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    b566:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    b56a:	e6ba      	b.n	b2e2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    b56c:	079b      	lsls	r3, r3, #30
    b56e:	f57f aec7 	bpl.w	b300 <cbvprintf+0x180>
			precision = conv->prec_value;
    b572:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    b576:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b578:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    b57c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    b580:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    b584:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b588:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b58a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b58e:	d138      	bne.n	b602 <cbvprintf+0x482>
			switch (length_mod) {
    b590:	1ecb      	subs	r3, r1, #3
    b592:	2b04      	cmp	r3, #4
    b594:	d822      	bhi.n	b5dc <cbvprintf+0x45c>
    b596:	e8df f003 	tbb	[pc, r3]
    b59a:	0903      	.short	0x0903
    b59c:	2109      	.short	0x2109
    b59e:	21          	.byte	0x21
    b59f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    b5a0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    b5a4:	17da      	asrs	r2, r3, #31
    b5a6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    b5aa:	e006      	b.n	b5ba <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    b5ac:	3407      	adds	r4, #7
    b5ae:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    b5b2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b5b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    b5ba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b5be:	f013 0603 	ands.w	r6, r3, #3
    b5c2:	d056      	beq.n	b672 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    b5c4:	463b      	mov	r3, r7
    b5c6:	4652      	mov	r2, sl
    b5c8:	4659      	mov	r1, fp
    b5ca:	9802      	ldr	r0, [sp, #8]
    b5cc:	f00f fc98 	bl	1af00 <outs>
    b5d0:	2800      	cmp	r0, #0
    b5d2:	f2c0 8142 	blt.w	b85a <cbvprintf+0x6da>
    b5d6:	4405      	add	r5, r0
			continue;
    b5d8:	46ba      	mov	sl, r7
    b5da:	e5d9      	b.n	b190 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b5dc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b5e0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b5e2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b5e6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    b5ea:	d105      	bne.n	b5f8 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    b5ec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    b5f0:	930a      	str	r3, [sp, #40]	; 0x28
    b5f2:	2300      	movs	r3, #0
    b5f4:	930b      	str	r3, [sp, #44]	; 0x2c
    b5f6:	e7e0      	b.n	b5ba <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    b5f8:	2902      	cmp	r1, #2
    b5fa:	d1de      	bne.n	b5ba <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    b5fc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    b600:	e7d0      	b.n	b5a4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b602:	2b02      	cmp	r3, #2
    b604:	d123      	bne.n	b64e <cbvprintf+0x4ce>
			switch (length_mod) {
    b606:	1ecb      	subs	r3, r1, #3
    b608:	2b04      	cmp	r3, #4
    b60a:	d813      	bhi.n	b634 <cbvprintf+0x4b4>
    b60c:	e8df f003 	tbb	[pc, r3]
    b610:	120a0a03 	.word	0x120a0a03
    b614:	12          	.byte	0x12
    b615:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    b616:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    b618:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    b61a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    b61c:	920a      	str	r2, [sp, #40]	; 0x28
    b61e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    b620:	4604      	mov	r4, r0
    b622:	e7ca      	b.n	b5ba <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    b624:	1de0      	adds	r0, r4, #7
    b626:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    b62a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    b62e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    b632:	e7f5      	b.n	b620 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    b634:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b638:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    b63a:	930a      	str	r3, [sp, #40]	; 0x28
    b63c:	f04f 0300 	mov.w	r3, #0
    b640:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    b642:	d0d3      	beq.n	b5ec <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    b644:	2902      	cmp	r1, #2
    b646:	d1b8      	bne.n	b5ba <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    b648:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b64c:	e7d0      	b.n	b5f0 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    b64e:	2b04      	cmp	r3, #4
    b650:	d109      	bne.n	b666 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    b652:	1de3      	adds	r3, r4, #7
    b654:	f023 0307 	bic.w	r3, r3, #7
    b658:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b660:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b664:	e7a9      	b.n	b5ba <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b666:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    b668:	bf04      	itt	eq
    b66a:	f854 3b04 	ldreq.w	r3, [r4], #4
    b66e:	930a      	streq	r3, [sp, #40]	; 0x28
    b670:	e7a3      	b.n	b5ba <cbvprintf+0x43a>
		switch (conv->specifier) {
    b672:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b676:	2878      	cmp	r0, #120	; 0x78
    b678:	d8ae      	bhi.n	b5d8 <cbvprintf+0x458>
    b67a:	2862      	cmp	r0, #98	; 0x62
    b67c:	d822      	bhi.n	b6c4 <cbvprintf+0x544>
    b67e:	2825      	cmp	r0, #37	; 0x25
    b680:	f43f ad8f 	beq.w	b1a2 <cbvprintf+0x22>
    b684:	2858      	cmp	r0, #88	; 0x58
    b686:	d1a7      	bne.n	b5d8 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b688:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b68c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b690:	9300      	str	r3, [sp, #0]
    b692:	aa0c      	add	r2, sp, #48	; 0x30
    b694:	ab04      	add	r3, sp, #16
    b696:	f00f fbed 	bl	1ae74 <encode_uint>
    b69a:	4682      	mov	sl, r0
			if (precision >= 0) {
    b69c:	f1b8 0f00 	cmp.w	r8, #0
    b6a0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    b6a4:	db0c      	blt.n	b6c0 <cbvprintf+0x540>
				conv->flag_zero = false;
    b6a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    b6aa:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    b6ae:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b6b2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    b6b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    b6b8:	d902      	bls.n	b6c0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    b6ba:	eba8 0303 	sub.w	r3, r8, r3
    b6be:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    b6c0:	4680      	mov	r8, r0
    b6c2:	e03d      	b.n	b740 <cbvprintf+0x5c0>
    b6c4:	3863      	subs	r0, #99	; 0x63
    b6c6:	2815      	cmp	r0, #21
    b6c8:	d886      	bhi.n	b5d8 <cbvprintf+0x458>
    b6ca:	a201      	add	r2, pc, #4	; (adr r2, b6d0 <cbvprintf+0x550>)
    b6cc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b6d0:	0000b751 	.word	0x0000b751
    b6d4:	0000b7b5 	.word	0x0000b7b5
    b6d8:	0000b5d9 	.word	0x0000b5d9
    b6dc:	0000b5d9 	.word	0x0000b5d9
    b6e0:	0000b5d9 	.word	0x0000b5d9
    b6e4:	0000b5d9 	.word	0x0000b5d9
    b6e8:	0000b7b5 	.word	0x0000b7b5
    b6ec:	0000b5d9 	.word	0x0000b5d9
    b6f0:	0000b5d9 	.word	0x0000b5d9
    b6f4:	0000b5d9 	.word	0x0000b5d9
    b6f8:	0000b5d9 	.word	0x0000b5d9
    b6fc:	0000b80f 	.word	0x0000b80f
    b700:	0000b7dd 	.word	0x0000b7dd
    b704:	0000b7e1 	.word	0x0000b7e1
    b708:	0000b5d9 	.word	0x0000b5d9
    b70c:	0000b5d9 	.word	0x0000b5d9
    b710:	0000b729 	.word	0x0000b729
    b714:	0000b5d9 	.word	0x0000b5d9
    b718:	0000b7dd 	.word	0x0000b7dd
    b71c:	0000b5d9 	.word	0x0000b5d9
    b720:	0000b5d9 	.word	0x0000b5d9
    b724:	0000b7dd 	.word	0x0000b7dd
			if (precision >= 0) {
    b728:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    b72c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    b730:	db0a      	blt.n	b748 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    b732:	4641      	mov	r1, r8
    b734:	4650      	mov	r0, sl
    b736:	f010 fb46 	bl	1bdc6 <strnlen>
		char sign = 0;
    b73a:	2600      	movs	r6, #0
			bpe = bps + len;
    b73c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    b740:	f1ba 0f00 	cmp.w	sl, #0
    b744:	d10c      	bne.n	b760 <cbvprintf+0x5e0>
    b746:	e747      	b.n	b5d8 <cbvprintf+0x458>
				len = strlen(bps);
    b748:	4650      	mov	r0, sl
    b74a:	f010 fb35 	bl	1bdb8 <strlen>
    b74e:	e7f4      	b.n	b73a <cbvprintf+0x5ba>
			break;
    b750:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    b754:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b758:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    b75c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    b760:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    b764:	b106      	cbz	r6, b768 <cbvprintf+0x5e8>
			nj_len += 1U;
    b766:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    b768:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    b76c:	06d0      	lsls	r0, r2, #27
    b76e:	d568      	bpl.n	b842 <cbvprintf+0x6c2>
			nj_len += 2U;
    b770:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    b772:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    b774:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    b776:	bf48      	it	mi
    b778:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    b77a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    b77c:	bf48      	it	mi
    b77e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    b780:	f1b9 0f00 	cmp.w	r9, #0
    b784:	dd76      	ble.n	b874 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    b786:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    b78a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    b78e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b792:	9303      	str	r3, [sp, #12]
    b794:	0753      	lsls	r3, r2, #29
    b796:	d46d      	bmi.n	b874 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    b798:	0650      	lsls	r0, r2, #25
    b79a:	d561      	bpl.n	b860 <cbvprintf+0x6e0>
					if (sign != 0) {
    b79c:	b146      	cbz	r6, b7b0 <cbvprintf+0x630>
						OUTC(sign);
    b79e:	4659      	mov	r1, fp
    b7a0:	4630      	mov	r0, r6
    b7a2:	9b02      	ldr	r3, [sp, #8]
    b7a4:	4798      	blx	r3
    b7a6:	2800      	cmp	r0, #0
    b7a8:	db57      	blt.n	b85a <cbvprintf+0x6da>
						sign = 0;
    b7aa:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    b7ac:	3501      	adds	r5, #1
						sign = 0;
    b7ae:	461e      	mov	r6, r3
					pad = '0';
    b7b0:	2330      	movs	r3, #48	; 0x30
    b7b2:	e056      	b.n	b862 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    b7b4:	071e      	lsls	r6, r3, #28
    b7b6:	d40f      	bmi.n	b7d8 <cbvprintf+0x658>
				sign = ' ';
    b7b8:	f013 0610 	ands.w	r6, r3, #16
    b7bc:	bf18      	it	ne
    b7be:	2620      	movne	r6, #32
			if (value->sint < 0) {
    b7c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	f6bf af5f 	bge.w	b688 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    b7ca:	4252      	negs	r2, r2
    b7cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    b7d0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    b7d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b7d6:	e757      	b.n	b688 <cbvprintf+0x508>
				sign = '+';
    b7d8:	262b      	movs	r6, #43	; 0x2b
    b7da:	e7f1      	b.n	b7c0 <cbvprintf+0x640>
		switch (conv->specifier) {
    b7dc:	2600      	movs	r6, #0
    b7de:	e753      	b.n	b688 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    b7e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    b7e2:	b340      	cbz	r0, b836 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b7e4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b7e8:	9300      	str	r3, [sp, #0]
    b7ea:	2100      	movs	r1, #0
    b7ec:	ab04      	add	r3, sp, #16
    b7ee:	aa0c      	add	r2, sp, #48	; 0x30
    b7f0:	f00f fb40 	bl	1ae74 <encode_uint>
				conv->altform_0c = true;
    b7f4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b7f8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    b7fa:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b7fe:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b802:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    b806:	2600      	movs	r6, #0
				conv->altform_0c = true;
    b808:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    b80c:	e746      	b.n	b69c <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    b80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    b810:	2907      	cmp	r1, #7
    b812:	f63f aee1 	bhi.w	b5d8 <cbvprintf+0x458>
    b816:	e8df f001 	tbb	[pc, r1]
    b81a:	040c      	.short	0x040c
    b81c:	08080c06 	.word	0x08080c06
    b820:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    b822:	701d      	strb	r5, [r3, #0]
		break;
    b824:	e6d8      	b.n	b5d8 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    b826:	801d      	strh	r5, [r3, #0]
		break;
    b828:	e6d6      	b.n	b5d8 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    b82a:	17ea      	asrs	r2, r5, #31
    b82c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    b830:	e6d2      	b.n	b5d8 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b832:	601d      	str	r5, [r3, #0]
		break;
    b834:	e6d0      	b.n	b5d8 <cbvprintf+0x458>
			bps = "(nil)";
    b836:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b900 <cbvprintf+0x780>
    b83a:	4606      	mov	r6, r0
			bpe = bps + 5;
    b83c:	f10a 0805 	add.w	r8, sl, #5
    b840:	e78e      	b.n	b760 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    b842:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    b844:	bf48      	it	mi
    b846:	3301      	addmi	r3, #1
    b848:	e793      	b.n	b772 <cbvprintf+0x5f2>
					OUTC(pad);
    b84a:	4618      	mov	r0, r3
    b84c:	9303      	str	r3, [sp, #12]
    b84e:	4659      	mov	r1, fp
    b850:	9b02      	ldr	r3, [sp, #8]
    b852:	4798      	blx	r3
    b854:	2800      	cmp	r0, #0
    b856:	9b03      	ldr	r3, [sp, #12]
    b858:	da04      	bge.n	b864 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    b85a:	b011      	add	sp, #68	; 0x44
    b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b860:	2320      	movs	r3, #32
    b862:	444d      	add	r5, r9
    b864:	464a      	mov	r2, r9
				while (width-- > 0) {
    b866:	2a00      	cmp	r2, #0
    b868:	eba5 0109 	sub.w	r1, r5, r9
    b86c:	f109 39ff 	add.w	r9, r9, #4294967295
    b870:	dceb      	bgt.n	b84a <cbvprintf+0x6ca>
    b872:	460d      	mov	r5, r1
		if (sign != 0) {
    b874:	b136      	cbz	r6, b884 <cbvprintf+0x704>
			OUTC(sign);
    b876:	4659      	mov	r1, fp
    b878:	4630      	mov	r0, r6
    b87a:	9b02      	ldr	r3, [sp, #8]
    b87c:	4798      	blx	r3
    b87e:	2800      	cmp	r0, #0
    b880:	dbeb      	blt.n	b85a <cbvprintf+0x6da>
    b882:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b884:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b888:	06d9      	lsls	r1, r3, #27
    b88a:	d401      	bmi.n	b890 <cbvprintf+0x710>
    b88c:	071a      	lsls	r2, r3, #28
    b88e:	d506      	bpl.n	b89e <cbvprintf+0x71e>
				OUTC('0');
    b890:	4659      	mov	r1, fp
    b892:	2030      	movs	r0, #48	; 0x30
    b894:	9b02      	ldr	r3, [sp, #8]
    b896:	4798      	blx	r3
    b898:	2800      	cmp	r0, #0
    b89a:	dbde      	blt.n	b85a <cbvprintf+0x6da>
    b89c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b89e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b8a2:	06db      	lsls	r3, r3, #27
    b8a4:	d507      	bpl.n	b8b6 <cbvprintf+0x736>
				OUTC(conv->specifier);
    b8a6:	4659      	mov	r1, fp
    b8a8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b8ac:	9b02      	ldr	r3, [sp, #8]
    b8ae:	4798      	blx	r3
    b8b0:	2800      	cmp	r0, #0
    b8b2:	dbd2      	blt.n	b85a <cbvprintf+0x6da>
    b8b4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b8b6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b8b8:	442e      	add	r6, r5
    b8ba:	1b73      	subs	r3, r6, r5
    b8bc:	2b00      	cmp	r3, #0
    b8be:	dc16      	bgt.n	b8ee <cbvprintf+0x76e>
			OUTS(bps, bpe);
    b8c0:	4643      	mov	r3, r8
    b8c2:	4652      	mov	r2, sl
    b8c4:	4659      	mov	r1, fp
    b8c6:	9802      	ldr	r0, [sp, #8]
    b8c8:	f00f fb1a 	bl	1af00 <outs>
    b8cc:	2800      	cmp	r0, #0
    b8ce:	dbc4      	blt.n	b85a <cbvprintf+0x6da>
    b8d0:	4405      	add	r5, r0
		while (width > 0) {
    b8d2:	44a9      	add	r9, r5
    b8d4:	eba9 0305 	sub.w	r3, r9, r5
    b8d8:	2b00      	cmp	r3, #0
    b8da:	f77f ae7d 	ble.w	b5d8 <cbvprintf+0x458>
			OUTC(' ');
    b8de:	4659      	mov	r1, fp
    b8e0:	2020      	movs	r0, #32
    b8e2:	9b02      	ldr	r3, [sp, #8]
    b8e4:	4798      	blx	r3
    b8e6:	2800      	cmp	r0, #0
    b8e8:	dbb7      	blt.n	b85a <cbvprintf+0x6da>
    b8ea:	3501      	adds	r5, #1
			--width;
    b8ec:	e7f2      	b.n	b8d4 <cbvprintf+0x754>
				OUTC('0');
    b8ee:	4659      	mov	r1, fp
    b8f0:	2030      	movs	r0, #48	; 0x30
    b8f2:	9b02      	ldr	r3, [sp, #8]
    b8f4:	4798      	blx	r3
    b8f6:	2800      	cmp	r0, #0
    b8f8:	dbaf      	blt.n	b85a <cbvprintf+0x6da>
    b8fa:	3501      	adds	r5, #1
    b8fc:	e7dd      	b.n	b8ba <cbvprintf+0x73a>
    b8fe:	bf00      	nop
    b900:	0001fb4f 	.word	0x0001fb4f

0000b904 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b904:	b148      	cbz	r0, b91a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    b906:	4b05      	ldr	r3, [pc, #20]	; (b91c <arch_busy_wait+0x18>)
    b908:	681a      	ldr	r2, [r3, #0]
    b90a:	4b05      	ldr	r3, [pc, #20]	; (b920 <arch_busy_wait+0x1c>)
    b90c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    b910:	4b04      	ldr	r3, [pc, #16]	; (b924 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    b912:	4350      	muls	r0, r2
    b914:	f043 0301 	orr.w	r3, r3, #1
    b918:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b91a:	4770      	bx	lr
    b91c:	200083f4 	.word	0x200083f4
    b920:	000f4240 	.word	0x000f4240
    b924:	0001e740 	.word	0x0001e740

0000b928 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b928:	4b01      	ldr	r3, [pc, #4]	; (b930 <virtio_set_status+0x8>)
    b92a:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b92c:	4770      	bx	lr
    b92e:	bf00      	nop
    b930:	20070000 	.word	0x20070000

0000b934 <init_status_flag>:
    b934:	2000      	movs	r0, #0
    b936:	4b01      	ldr	r3, [pc, #4]	; (b93c <init_status_flag+0x8>)
    b938:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b93a:	4770      	bx	lr
    b93c:	20070000 	.word	0x20070000

0000b940 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b940:	4b01      	ldr	r3, [pc, #4]	; (b948 <ipm_callback_process+0x8>)
    b942:	6818      	ldr	r0, [r3, #0]
    b944:	f012 b941 	b.w	1dbca <virtqueue_notification>
    b948:	20009a38 	.word	0x20009a38

0000b94c <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b94c:	4b0a      	ldr	r3, [pc, #40]	; (b978 <virtio_notify+0x2c>)
{
    b94e:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b950:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b952:	2300      	movs	r3, #0
    b954:	6882      	ldr	r2, [r0, #8]
    b956:	9300      	str	r3, [sp, #0]
    b958:	6814      	ldr	r4, [r2, #0]
    b95a:	4619      	mov	r1, r3
    b95c:	461a      	mov	r2, r3
    b95e:	47a0      	blx	r4
	if (status != 0) {
    b960:	4602      	mov	r2, r0
    b962:	b130      	cbz	r0, b972 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    b964:	2145      	movs	r1, #69	; 0x45
    b966:	4805      	ldr	r0, [pc, #20]	; (b97c <virtio_notify+0x30>)
}
    b968:	b002      	add	sp, #8
    b96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    b96e:	f00f b837 	b.w	1a9e0 <printk>
}
    b972:	b002      	add	sp, #8
    b974:	bd10      	pop	{r4, pc}
    b976:	bf00      	nop
    b978:	20009a28 	.word	0x20009a28
    b97c:	0001fb59 	.word	0x0001fb59

0000b980 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b980:	4907      	ldr	r1, [pc, #28]	; (b9a0 <ipm_callback+0x20>)
    b982:	e8d1 3fef 	ldaex	r3, [r1]
    b986:	f043 0201 	orr.w	r2, r3, #1
    b98a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b98e:	2800      	cmp	r0, #0
    b990:	d1f7      	bne.n	b982 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b992:	07db      	lsls	r3, r3, #31
    b994:	d403      	bmi.n	b99e <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    b996:	4803      	ldr	r0, [pc, #12]	; (b9a4 <ipm_callback+0x24>)
    b998:	3908      	subs	r1, #8
    b99a:	f012 bad7 	b.w	1df4c <k_queue_append>
}
    b99e:	4770      	bx	lr
    b9a0:	20009a34 	.word	0x20009a34
    b9a4:	20008890 	.word	0x20008890

0000b9a8 <rpmsg_backend_init>:
{
    b9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b9aa:	4b47      	ldr	r3, [pc, #284]	; (bac8 <rpmsg_backend_init+0x120>)
{
    b9ac:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b9ae:	ac02      	add	r4, sp, #8
{
    b9b0:	4606      	mov	r6, r0
    b9b2:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b9b4:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b9b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b9bc:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b9c0:	f04f 33ff 	mov.w	r3, #4294967295
    b9c4:	4941      	ldr	r1, [pc, #260]	; (bacc <rpmsg_backend_init+0x124>)
    b9c6:	4842      	ldr	r0, [pc, #264]	; (bad0 <rpmsg_backend_init+0x128>)
    b9c8:	f00e f86e 	bl	19aa8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b9cc:	4941      	ldr	r1, [pc, #260]	; (bad4 <rpmsg_backend_init+0x12c>)
    b9ce:	4842      	ldr	r0, [pc, #264]	; (bad8 <rpmsg_backend_init+0x130>)
    b9d0:	f012 fb2e 	bl	1e030 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b9d4:	2200      	movs	r2, #0
    b9d6:	4b41      	ldr	r3, [pc, #260]	; (badc <rpmsg_backend_init+0x134>)
    b9d8:	4941      	ldr	r1, [pc, #260]	; (bae0 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b9da:	4620      	mov	r0, r4
    b9dc:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b9e0:	601a      	str	r2, [r3, #0]
    b9e2:	f00b fd37 	bl	17454 <metal_init>
	if (err) {
    b9e6:	4604      	mov	r4, r0
    b9e8:	b138      	cbz	r0, b9fa <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b9ea:	2145      	movs	r1, #69	; 0x45
    b9ec:	4602      	mov	r2, r0
    b9ee:	483d      	ldr	r0, [pc, #244]	; (bae4 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b9f0:	f00e fff6 	bl	1a9e0 <printk>
}
    b9f4:	4620      	mov	r0, r4
    b9f6:	b005      	add	sp, #20
    b9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b9fa:	483b      	ldr	r0, [pc, #236]	; (bae8 <rpmsg_backend_init+0x140>)
    b9fc:	f00b fd0a 	bl	17414 <metal_register_generic_device>
	if (err) {
    ba00:	4604      	mov	r4, r0
    ba02:	b118      	cbz	r0, ba0c <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    ba04:	4602      	mov	r2, r0
    ba06:	2145      	movs	r1, #69	; 0x45
    ba08:	4838      	ldr	r0, [pc, #224]	; (baec <rpmsg_backend_init+0x144>)
    ba0a:	e7f1      	b.n	b9f0 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    ba0c:	4938      	ldr	r1, [pc, #224]	; (baf0 <rpmsg_backend_init+0x148>)
    ba0e:	4839      	ldr	r0, [pc, #228]	; (baf4 <rpmsg_backend_init+0x14c>)
    ba10:	aa01      	add	r2, sp, #4
    ba12:	f011 fe5a 	bl	1d6ca <metal_device_open>
	if (err) {
    ba16:	4604      	mov	r4, r0
    ba18:	b118      	cbz	r0, ba22 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    ba1a:	4602      	mov	r2, r0
    ba1c:	2145      	movs	r1, #69	; 0x45
    ba1e:	4836      	ldr	r0, [pc, #216]	; (baf8 <rpmsg_backend_init+0x150>)
    ba20:	e7e6      	b.n	b9f0 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    ba22:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    ba24:	689a      	ldr	r2, [r3, #8]
    ba26:	b92a      	cbnz	r2, ba34 <rpmsg_backend_init+0x8c>
    ba28:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    ba2a:	2145      	movs	r1, #69	; 0x45
    ba2c:	4833      	ldr	r0, [pc, #204]	; (bafc <rpmsg_backend_init+0x154>)
    ba2e:	f00e ffd7 	bl	1a9e0 <printk>
		return err;
    ba32:	e7df      	b.n	b9f4 <rpmsg_backend_init+0x4c>
    ba34:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    ba36:	6033      	str	r3, [r6, #0]
	if (!*io) {
    ba38:	2b00      	cmp	r3, #0
    ba3a:	d0f6      	beq.n	ba2a <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    ba3c:	4830      	ldr	r0, [pc, #192]	; (bb00 <rpmsg_backend_init+0x158>)
    ba3e:	f00c f821 	bl	17a84 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    ba42:	4f30      	ldr	r7, [pc, #192]	; (bb04 <rpmsg_backend_init+0x15c>)
    ba44:	6038      	str	r0, [r7, #0]
    ba46:	4830      	ldr	r0, [pc, #192]	; (bb08 <rpmsg_backend_init+0x160>)
    ba48:	f00c f81c 	bl	17a84 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    ba4c:	683a      	ldr	r2, [r7, #0]
    ba4e:	b932      	cbnz	r2, ba5e <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    ba50:	2145      	movs	r1, #69	; 0x45
    ba52:	482e      	ldr	r0, [pc, #184]	; (bb0c <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    ba54:	f00e ffc4 	bl	1a9e0 <printk>
		return -ENODEV;
    ba58:	f06f 0412 	mvn.w	r4, #18
    ba5c:	e7ca      	b.n	b9f4 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    ba5e:	b910      	cbnz	r0, ba66 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    ba60:	2145      	movs	r1, #69	; 0x45
    ba62:	482b      	ldr	r0, [pc, #172]	; (bb10 <rpmsg_backend_init+0x168>)
    ba64:	e7f6      	b.n	ba54 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    ba66:	6883      	ldr	r3, [r0, #8]
    ba68:	4622      	mov	r2, r4
    ba6a:	685b      	ldr	r3, [r3, #4]
    ba6c:	4929      	ldr	r1, [pc, #164]	; (bb14 <rpmsg_backend_init+0x16c>)
    ba6e:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    ba70:	f00f fa82 	bl	1af78 <virtqueue_allocate.constprop.0>
    ba74:	4f28      	ldr	r7, [pc, #160]	; (bb18 <rpmsg_backend_init+0x170>)
    ba76:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    ba78:	b930      	cbnz	r0, ba88 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    ba7a:	2145      	movs	r1, #69	; 0x45
    ba7c:	4827      	ldr	r0, [pc, #156]	; (bb1c <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    ba7e:	f00e ffaf 	bl	1a9e0 <printk>
		return -ENOMEM;
    ba82:	f06f 040b 	mvn.w	r4, #11
    ba86:	e7b5      	b.n	b9f4 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    ba88:	f00f fa76 	bl	1af78 <virtqueue_allocate.constprop.0>
    ba8c:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    ba8e:	b910      	cbnz	r0, ba96 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    ba90:	2145      	movs	r1, #69	; 0x45
    ba92:	4823      	ldr	r0, [pc, #140]	; (bb20 <rpmsg_backend_init+0x178>)
    ba94:	e7f3      	b.n	ba7e <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    ba96:	6832      	ldr	r2, [r6, #0]
    ba98:	4b22      	ldr	r3, [pc, #136]	; (bb24 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    ba9a:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    ba9c:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    ba9e:	4a22      	ldr	r2, [pc, #136]	; (bb28 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    baa0:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    baa2:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    baa4:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    baa6:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    baa8:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    baaa:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    baac:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    baae:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    bab0:	4e1e      	ldr	r6, [pc, #120]	; (bb2c <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    bab2:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    bab4:	4a1e      	ldr	r2, [pc, #120]	; (bb30 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    bab6:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    bab8:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    baba:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    babc:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    babe:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    bac0:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    bac2:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    bac4:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    bac6:	e795      	b.n	b9f4 <rpmsg_backend_init+0x4c>
    bac8:	0001e6b8 	.word	0x0001e6b8
    bacc:	2000ea60 	.word	0x2000ea60
    bad0:	20008890 	.word	0x20008890
    bad4:	0001fb7c 	.word	0x0001fb7c
    bad8:	200088b0 	.word	0x200088b0
    badc:	20009a2c 	.word	0x20009a2c
    bae0:	0000b941 	.word	0x0000b941
    bae4:	0001fb87 	.word	0x0001fb87
    bae8:	200081f0 	.word	0x200081f0
    baec:	0001fbaf 	.word	0x0001fbaf
    baf0:	0001fbdf 	.word	0x0001fbdf
    baf4:	0001fbe9 	.word	0x0001fbe9
    baf8:	0001fbf1 	.word	0x0001fbf1
    bafc:	0001fc13 	.word	0x0001fc13
    bb00:	0001fc44 	.word	0x0001fc44
    bb04:	20009a28 	.word	0x20009a28
    bb08:	0001fc4a 	.word	0x0001fc4a
    bb0c:	0001fc50 	.word	0x0001fc50
    bb10:	0001fc78 	.word	0x0001fc78
    bb14:	0000b981 	.word	0x0000b981
    bb18:	20009a38 	.word	0x20009a38
    bb1c:	0001fca0 	.word	0x0001fca0
    bb20:	0001fcce 	.word	0x0001fcce
    bb24:	200081c0 	.word	0x200081c0
    bb28:	2007fc00 	.word	0x2007fc00
    bb2c:	2007f800 	.word	0x2007f800
    bb30:	0001e868 	.word	0x0001e868

0000bb34 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    bb34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bb38:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    bb3a:	4e1b      	ldr	r6, [pc, #108]	; (bba8 <ns_bind_cb+0x74>)
{
    bb3c:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    bb3e:	6831      	ldr	r1, [r6, #0]
    bb40:	4628      	mov	r0, r5
{
    bb42:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    bb44:	f010 f948 	bl	1bdd8 <strcmp>
    bb48:	b168      	cbz	r0, bb66 <ns_bind_cb+0x32>
    bb4a:	4628      	mov	r0, r5
    bb4c:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    bb4e:	f010 f943 	bl	1bdd8 <strcmp>
    bb52:	b138      	cbz	r0, bb64 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    bb54:	462a      	mov	r2, r5
    bb56:	2145      	movs	r1, #69	; 0x45
    bb58:	4814      	ldr	r0, [pc, #80]	; (bbac <ns_bind_cb+0x78>)
}
    bb5a:	b004      	add	sp, #16
    bb5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    bb60:	f00e bf3e 	b.w	1a9e0 <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    bb64:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    bb66:	244c      	movs	r4, #76	; 0x4c
    bb68:	4344      	muls	r4, r0
    bb6a:	4b11      	ldr	r3, [pc, #68]	; (bbb0 <ns_bind_cb+0x7c>)
    bb6c:	f104 0008 	add.w	r0, r4, #8
    bb70:	9302      	str	r3, [sp, #8]
    bb72:	4434      	add	r4, r6
    bb74:	6863      	ldr	r3, [r4, #4]
    bb76:	462a      	mov	r2, r5
    bb78:	e9cd 8300 	strd	r8, r3, [sp]
    bb7c:	4639      	mov	r1, r7
    bb7e:	f04f 33ff 	mov.w	r3, #4294967295
    bb82:	4430      	add	r0, r6
    bb84:	f00b fd32 	bl	175ec <rpmsg_create_ept>
			if (err != 0) {
    bb88:	4603      	mov	r3, r0
    bb8a:	b138      	cbz	r0, bb9c <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    bb8c:	462a      	mov	r2, r5
    bb8e:	2145      	movs	r1, #69	; 0x45
    bb90:	4808      	ldr	r0, [pc, #32]	; (bbb4 <ns_bind_cb+0x80>)
}
    bb92:	b004      	add	sp, #16
    bb94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    bb98:	f00e bf22 	b.w	1a9e0 <printk>
				endpoints[i].bound = true;
    bb9c:	2301      	movs	r3, #1
    bb9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    bba2:	b004      	add	sp, #16
    bba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bba8:	20009a40 	.word	0x20009a40
    bbac:	0001fd0a 	.word	0x0001fd0a
    bbb0:	0001af93 	.word	0x0001af93
    bbb4:	0001fd39 	.word	0x0001fd39

0000bbb8 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    bbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    bbba:	4d13      	ldr	r5, [pc, #76]	; (bc08 <rpmsg_service_init+0x50>)
    bbbc:	4913      	ldr	r1, [pc, #76]	; (bc0c <rpmsg_service_init+0x54>)
    bbbe:	4628      	mov	r0, r5
    bbc0:	f7ff fef2 	bl	b9a8 <rpmsg_backend_init>
	if (err) {
    bbc4:	4604      	mov	r4, r0
    bbc6:	b138      	cbz	r0, bbd8 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    bbc8:	2145      	movs	r1, #69	; 0x45
    bbca:	4602      	mov	r2, r0
    bbcc:	4810      	ldr	r0, [pc, #64]	; (bc10 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    bbce:	f00e ff07 	bl	1a9e0 <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    bbd2:	4620      	mov	r0, r4
    bbd4:	b003      	add	sp, #12
    bbd6:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    bbd8:	4c0e      	ldr	r4, [pc, #56]	; (bc14 <rpmsg_service_init+0x5c>)
    bbda:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    bbde:	4620      	mov	r0, r4
    bbe0:	490d      	ldr	r1, [pc, #52]	; (bc18 <rpmsg_service_init+0x60>)
    bbe2:	f012 f97c 	bl	1dede <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    bbe6:	9400      	str	r4, [sp, #0]
    bbe8:	682b      	ldr	r3, [r5, #0]
    bbea:	4a0c      	ldr	r2, [pc, #48]	; (bc1c <rpmsg_service_init+0x64>)
    bbec:	4907      	ldr	r1, [pc, #28]	; (bc0c <rpmsg_service_init+0x54>)
    bbee:	480c      	ldr	r0, [pc, #48]	; (bc20 <rpmsg_service_init+0x68>)
    bbf0:	f00b fe28 	bl	17844 <rpmsg_init_vdev>
	if (err) {
    bbf4:	4604      	mov	r4, r0
    bbf6:	b118      	cbz	r0, bc00 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    bbf8:	4602      	mov	r2, r0
    bbfa:	2145      	movs	r1, #69	; 0x45
    bbfc:	4809      	ldr	r0, [pc, #36]	; (bc24 <rpmsg_service_init+0x6c>)
    bbfe:	e7e6      	b.n	bbce <rpmsg_service_init+0x16>
	ep_crt_started = true;
    bc00:	2201      	movs	r2, #1
    bc02:	4b09      	ldr	r3, [pc, #36]	; (bc28 <rpmsg_service_init+0x70>)
    bc04:	701a      	strb	r2, [r3, #0]
	return 0;
    bc06:	e7e4      	b.n	bbd2 <rpmsg_service_init+0x1a>
    bc08:	20009ad8 	.word	0x20009ad8
    bc0c:	20008940 	.word	0x20008940
    bc10:	0001fd6f 	.word	0x0001fd6f
    bc14:	20009b6c 	.word	0x20009b6c
    bc18:	20070400 	.word	0x20070400
    bc1c:	0000bb35 	.word	0x0000bb35
    bc20:	20009adc 	.word	0x20009adc
    bc24:	0001fd9c 	.word	0x0001fd9c
    bc28:	2000e585 	.word	0x2000e585

0000bc2c <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    bc2c:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    bc2e:	4b0d      	ldr	r3, [pc, #52]	; (bc64 <rpmsg_service_register_endpoint+0x38>)
{
    bc30:	4602      	mov	r2, r0
	if (ep_crt_started) {
    bc32:	781b      	ldrb	r3, [r3, #0]
    bc34:	b993      	cbnz	r3, bc5c <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    bc36:	4c0c      	ldr	r4, [pc, #48]	; (bc68 <rpmsg_service_register_endpoint+0x3c>)
    bc38:	6820      	ldr	r0, [r4, #0]
    bc3a:	b148      	cbz	r0, bc50 <rpmsg_service_register_endpoint+0x24>
    bc3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    bc3e:	b133      	cbz	r3, bc4e <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    bc40:	480a      	ldr	r0, [pc, #40]	; (bc6c <rpmsg_service_register_endpoint+0x40>)
    bc42:	2145      	movs	r1, #69	; 0x45
    bc44:	f00e fecc 	bl	1a9e0 <printk>

	return -ENOMEM;
    bc48:	f06f 000b 	mvn.w	r0, #11
}
    bc4c:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    bc4e:	2001      	movs	r0, #1
			endpoints[i].name = name;
    bc50:	234c      	movs	r3, #76	; 0x4c
    bc52:	4343      	muls	r3, r0
    bc54:	18e5      	adds	r5, r4, r3
    bc56:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    bc58:	6069      	str	r1, [r5, #4]
			return i;
    bc5a:	e7f7      	b.n	bc4c <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    bc5c:	f06f 0043 	mvn.w	r0, #67	; 0x43
    bc60:	e7f4      	b.n	bc4c <rpmsg_service_register_endpoint+0x20>
    bc62:	bf00      	nop
    bc64:	2000e585 	.word	0x2000e585
    bc68:	20009a40 	.word	0x20009a40
    bc6c:	0001fdbb 	.word	0x0001fdbb

0000bc70 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    bc70:	224c      	movs	r2, #76	; 0x4c
    bc72:	4b03      	ldr	r3, [pc, #12]	; (bc80 <rpmsg_service_endpoint_is_bound+0x10>)
    bc74:	fb02 3300 	mla	r3, r2, r0, r3
    bc78:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    bc7c:	4770      	bx	lr
    bc7e:	bf00      	nop
    bc80:	20009a40 	.word	0x20009a40

0000bc84 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    bc84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    bc86:	244c      	movs	r4, #76	; 0x4c
    bc88:	460b      	mov	r3, r1
    bc8a:	2101      	movs	r1, #1
    bc8c:	4344      	muls	r4, r0
    bc8e:	e9cd 2100 	strd	r2, r1, [sp]
    bc92:	4d05      	ldr	r5, [pc, #20]	; (bca8 <rpmsg_service_send+0x24>)
    bc94:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    bc96:	3408      	adds	r4, #8
    bc98:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    bc9c:	1928      	adds	r0, r5, r4
    bc9e:	f00b fc93 	bl	175c8 <rpmsg_send_offchannel_raw>
}
    bca2:	b003      	add	sp, #12
    bca4:	bd30      	pop	{r4, r5, pc}
    bca6:	bf00      	nop
    bca8:	20009a40 	.word	0x20009a40

0000bcac <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    bcac:	4b10      	ldr	r3, [pc, #64]	; (bcf0 <settings_save_one+0x44>)
{
    bcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    bcb2:	681c      	ldr	r4, [r3, #0]
{
    bcb4:	4605      	mov	r5, r0
    bcb6:	460e      	mov	r6, r1
    bcb8:	4617      	mov	r7, r2
	if (!cs) {
    bcba:	b1ac      	cbz	r4, bce8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    bcbc:	f04f 32ff 	mov.w	r2, #4294967295
    bcc0:	f04f 33ff 	mov.w	r3, #4294967295
    bcc4:	480b      	ldr	r0, [pc, #44]	; (bcf4 <settings_save_one+0x48>)
    bcc6:	f00c f9ff 	bl	180c8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    bcca:	6863      	ldr	r3, [r4, #4]
    bccc:	4632      	mov	r2, r6
    bcce:	f8d3 8008 	ldr.w	r8, [r3, #8]
    bcd2:	4629      	mov	r1, r5
    bcd4:	463b      	mov	r3, r7
    bcd6:	4620      	mov	r0, r4
    bcd8:	47c0      	blx	r8
    bcda:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    bcdc:	4805      	ldr	r0, [pc, #20]	; (bcf4 <settings_save_one+0x48>)
    bcde:	f00c fabf 	bl	18260 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    bce2:	4620      	mov	r0, r4
    bce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    bce8:	f06f 0401 	mvn.w	r4, #1
    bcec:	e7f9      	b.n	bce2 <settings_save_one+0x36>
    bcee:	bf00      	nop
    bcf0:	20009b80 	.word	0x20009b80
    bcf4:	20008550 	.word	0x20008550

0000bcf8 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    bcf8:	2300      	movs	r3, #0
{
    bcfa:	b530      	push	{r4, r5, lr}
    bcfc:	b085      	sub	sp, #20
    bcfe:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    bd00:	e9cd 3302 	strd	r3, r3, [sp, #8]
    bd04:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    bd06:	f04f 33ff 	mov.w	r3, #4294967295
    bd0a:	f04f 32ff 	mov.w	r2, #4294967295
    bd0e:	480b      	ldr	r0, [pc, #44]	; (bd3c <settings_load_subtree+0x44>)
    bd10:	f00c f9da 	bl	180c8 <z_impl_k_mutex_lock>
	return list->head;
    bd14:	4b0a      	ldr	r3, [pc, #40]	; (bd40 <settings_load_subtree+0x48>)
    bd16:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bd18:	b134      	cbz	r4, bd28 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    bd1a:	6863      	ldr	r3, [r4, #4]
    bd1c:	4620      	mov	r0, r4
    bd1e:	681b      	ldr	r3, [r3, #0]
    bd20:	a901      	add	r1, sp, #4
    bd22:	4798      	blx	r3
	return node->next;
    bd24:	6824      	ldr	r4, [r4, #0]
    bd26:	e7f7      	b.n	bd18 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    bd28:	4628      	mov	r0, r5
    bd2a:	f000 f83b 	bl	bda4 <settings_commit_subtree>
    bd2e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    bd30:	4802      	ldr	r0, [pc, #8]	; (bd3c <settings_load_subtree+0x44>)
    bd32:	f00c fa95 	bl	18260 <z_impl_k_mutex_unlock>
}
    bd36:	4620      	mov	r0, r4
    bd38:	b005      	add	sp, #20
    bd3a:	bd30      	pop	{r4, r5, pc}
    bd3c:	20008550 	.word	0x20008550
    bd40:	20009b78 	.word	0x20009b78

0000bd44 <settings_load_subtree_direct>:
{
    bd44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    bd46:	e9cd 0101 	strd	r0, r1, [sp, #4]
    bd4a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    bd4c:	f04f 33ff 	mov.w	r3, #4294967295
    bd50:	f04f 32ff 	mov.w	r2, #4294967295
    bd54:	4809      	ldr	r0, [pc, #36]	; (bd7c <settings_load_subtree_direct+0x38>)
    bd56:	f00c f9b7 	bl	180c8 <z_impl_k_mutex_lock>
	return list->head;
    bd5a:	4b09      	ldr	r3, [pc, #36]	; (bd80 <settings_load_subtree_direct+0x3c>)
    bd5c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bd5e:	b134      	cbz	r4, bd6e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    bd60:	6863      	ldr	r3, [r4, #4]
    bd62:	4620      	mov	r0, r4
    bd64:	681b      	ldr	r3, [r3, #0]
    bd66:	a901      	add	r1, sp, #4
    bd68:	4798      	blx	r3
	return node->next;
    bd6a:	6824      	ldr	r4, [r4, #0]
    bd6c:	e7f7      	b.n	bd5e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    bd6e:	4803      	ldr	r0, [pc, #12]	; (bd7c <settings_load_subtree_direct+0x38>)
    bd70:	f00c fa76 	bl	18260 <z_impl_k_mutex_unlock>
}
    bd74:	2000      	movs	r0, #0
    bd76:	b004      	add	sp, #16
    bd78:	bd10      	pop	{r4, pc}
    bd7a:	bf00      	nop
    bd7c:	20008550 	.word	0x20008550
    bd80:	20009b78 	.word	0x20009b78

0000bd84 <settings_store_init>:
	list->head = NULL;
    bd84:	2200      	movs	r2, #0
    bd86:	4b02      	ldr	r3, [pc, #8]	; (bd90 <settings_store_init+0xc>)
	list->tail = NULL;
    bd88:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    bd8c:	4770      	bx	lr
    bd8e:	bf00      	nop
    bd90:	20009b78 	.word	0x20009b78

0000bd94 <settings_init>:
	list->head = NULL;
    bd94:	2200      	movs	r2, #0
    bd96:	4b02      	ldr	r3, [pc, #8]	; (bda0 <settings_init+0xc>)
	list->tail = NULL;
    bd98:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    bd9c:	f7ff bff2 	b.w	bd84 <settings_store_init>
    bda0:	20009b84 	.word	0x20009b84

0000bda4 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    bda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bda8:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    bdaa:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bdac:	4c1f      	ldr	r4, [pc, #124]	; (be2c <settings_commit_subtree+0x88>)
    bdae:	4f20      	ldr	r7, [pc, #128]	; (be30 <settings_commit_subtree+0x8c>)
    bdb0:	f8df 8080 	ldr.w	r8, [pc, #128]	; be34 <settings_commit_subtree+0x90>
    bdb4:	42bc      	cmp	r4, r7
    bdb6:	d908      	bls.n	bdca <settings_commit_subtree+0x26>
    bdb8:	4641      	mov	r1, r8
    bdba:	481f      	ldr	r0, [pc, #124]	; (be38 <settings_commit_subtree+0x94>)
    bdbc:	22f4      	movs	r2, #244	; 0xf4
    bdbe:	f00e fe0f 	bl	1a9e0 <printk>
    bdc2:	21f4      	movs	r1, #244	; 0xf4
    bdc4:	4640      	mov	r0, r8
    bdc6:	f00f f8b1 	bl	1af2c <assert_post_action>
    bdca:	42bc      	cmp	r4, r7
    bdcc:	d307      	bcc.n	bdde <settings_commit_subtree+0x3a>
	return list->head;
    bdce:	4b1b      	ldr	r3, [pc, #108]	; (be3c <settings_commit_subtree+0x98>)
    bdd0:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    bdd2:	b10c      	cbz	r4, bdd8 <settings_commit_subtree+0x34>
    bdd4:	3c14      	subs	r4, #20
    bdd6:	b9a4      	cbnz	r4, be02 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    bdd8:	4628      	mov	r0, r5
    bdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bdde:	b91e      	cbnz	r6, bde8 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    bde0:	68e3      	ldr	r3, [r4, #12]
    bde2:	b94b      	cbnz	r3, bdf8 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bde4:	3414      	adds	r4, #20
    bde6:	e7e5      	b.n	bdb4 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bde8:	2200      	movs	r2, #0
    bdea:	4631      	mov	r1, r6
    bdec:	6820      	ldr	r0, [r4, #0]
    bdee:	f00f f8d9 	bl	1afa4 <settings_name_steq>
    bdf2:	2800      	cmp	r0, #0
    bdf4:	d1f4      	bne.n	bde0 <settings_commit_subtree+0x3c>
    bdf6:	e7f5      	b.n	bde4 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    bdf8:	4798      	blx	r3
				rc = rc2;
    bdfa:	2d00      	cmp	r5, #0
    bdfc:	bf08      	it	eq
    bdfe:	4605      	moveq	r5, r0
    be00:	e7f0      	b.n	bde4 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    be02:	b936      	cbnz	r6, be12 <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    be04:	68e3      	ldr	r3, [r4, #12]
    be06:	b963      	cbnz	r3, be22 <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    be08:	f114 0f14 	cmn.w	r4, #20
    be0c:	d0e4      	beq.n	bdd8 <settings_commit_subtree+0x34>
	return node->next;
    be0e:	6964      	ldr	r4, [r4, #20]
    be10:	e7df      	b.n	bdd2 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    be12:	2200      	movs	r2, #0
    be14:	4631      	mov	r1, r6
    be16:	6820      	ldr	r0, [r4, #0]
    be18:	f00f f8c4 	bl	1afa4 <settings_name_steq>
    be1c:	2800      	cmp	r0, #0
    be1e:	d1f1      	bne.n	be04 <settings_commit_subtree+0x60>
    be20:	e7f2      	b.n	be08 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    be22:	4798      	blx	r3
				rc = rc2;
    be24:	2d00      	cmp	r5, #0
    be26:	bf08      	it	eq
    be28:	4605      	moveq	r5, r0
    be2a:	e7ed      	b.n	be08 <settings_commit_subtree+0x64>
    be2c:	0001e55c 	.word	0x0001e55c
    be30:	0001e5c0 	.word	0x0001e5c0
    be34:	0001fdf4 	.word	0x0001fdf4
    be38:	0001faab 	.word	0x0001faab
    be3c:	20009b84 	.word	0x20009b84

0000be40 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    be40:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    be42:	4c06      	ldr	r4, [pc, #24]	; (be5c <settings_subsys_init+0x1c>)
    be44:	7823      	ldrb	r3, [r4, #0]
    be46:	b93b      	cbnz	r3, be58 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    be48:	f7ff ffa4 	bl	bd94 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    be4c:	f00f f8e3 	bl	1b016 <settings_backend_init>

	if (!err) {
    be50:	b908      	cbnz	r0, be56 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    be52:	2301      	movs	r3, #1
    be54:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    be56:	bd10      	pop	{r4, pc}
		return 0;
    be58:	2000      	movs	r0, #0
    be5a:	e7fc      	b.n	be56 <settings_subsys_init+0x16>
    be5c:	2000e586 	.word	0x2000e586

0000be60 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    be60:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    be62:	4c04      	ldr	r4, [pc, #16]	; (be74 <rtt_console_init+0x14>)
    be64:	4620      	mov	r0, r4
    be66:	f7fe fd93 	bl	a990 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    be6a:	4620      	mov	r0, r4
    be6c:	f002 fbd2 	bl	e614 <__stdout_hook_install>

	return 0;
}
    be70:	2000      	movs	r0, #0
    be72:	bd10      	pop	{r4, pc}
    be74:	0000be79 	.word	0x0000be79

0000be78 <rtt_console_out>:
{
    be78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    be7c:	4604      	mov	r4, r0
	char c = (char)character;
    be7e:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    be80:	f8df 8058 	ldr.w	r8, [pc, #88]	; bedc <rtt_console_out+0x64>
    be84:	4e16      	ldr	r6, [pc, #88]	; (bee0 <rtt_console_out+0x68>)
    be86:	f88d 0007 	strb.w	r0, [sp, #7]
    be8a:	f04f 33ff 	mov.w	r3, #4294967295
    be8e:	f04f 32ff 	mov.w	r2, #4294967295
    be92:	4640      	mov	r0, r8
    be94:	f00c f918 	bl	180c8 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    be98:	2201      	movs	r2, #1
    be9a:	f10d 0107 	add.w	r1, sp, #7
    be9e:	2000      	movs	r0, #0
    bea0:	f001 fc56 	bl	d750 <SEGGER_RTT_WriteNoLock>
    bea4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    bea6:	4640      	mov	r0, r8
    bea8:	f00c f9da 	bl	18260 <z_impl_k_mutex_unlock>
		if (cnt) {
    beac:	b12f      	cbz	r7, beba <rtt_console_out+0x42>
			host_present = true;
    beae:	2301      	movs	r3, #1
    beb0:	7033      	strb	r3, [r6, #0]
}
    beb2:	4620      	mov	r0, r4
    beb4:	b002      	add	sp, #8
    beb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    beba:	7833      	ldrb	r3, [r6, #0]
    bebc:	2b00      	cmp	r3, #0
    bebe:	d0f8      	beq.n	beb2 <rtt_console_out+0x3a>
			if (max_cnt) {
    bec0:	3d01      	subs	r5, #1
    bec2:	d008      	beq.n	bed6 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    bec4:	f012 f8aa 	bl	1e01c <k_is_in_isr>
    bec8:	2800      	cmp	r0, #0
    beca:	d1de      	bne.n	be8a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    becc:	2100      	movs	r1, #0
    bece:	2042      	movs	r0, #66	; 0x42
    bed0:	f00d fb78 	bl	195c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bed4:	e7d9      	b.n	be8a <rtt_console_out+0x12>
				host_present = false;
    bed6:	7035      	strb	r5, [r6, #0]
    bed8:	e7eb      	b.n	beb2 <rtt_console_out+0x3a>
    beda:	bf00      	nop
    bedc:	20008528 	.word	0x20008528
    bee0:	2000e587 	.word	0x2000e587

0000bee4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    bee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bee6:	2340      	movs	r3, #64	; 0x40
{
    bee8:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    beea:	490a      	ldr	r1, [pc, #40]	; (bf14 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    beec:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    beee:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bef0:	1149      	asrs	r1, r1, #5
{
    bef2:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bef4:	4623      	mov	r3, r4
    bef6:	4a08      	ldr	r2, [pc, #32]	; (bf18 <onoff_start+0x34>)
    bef8:	4808      	ldr	r0, [pc, #32]	; (bf1c <onoff_start+0x38>)
    befa:	f00f f8a1 	bl	1b040 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    befe:	1e01      	subs	r1, r0, #0
    bf00:	da05      	bge.n	bf0e <onoff_start+0x2a>
		notify(mgr, err);
    bf02:	4628      	mov	r0, r5
    bf04:	4623      	mov	r3, r4
	}
}
    bf06:	b003      	add	sp, #12
    bf08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    bf0c:	4718      	bx	r3
}
    bf0e:	b003      	add	sp, #12
    bf10:	bd30      	pop	{r4, r5, pc}
    bf12:	bf00      	nop
    bf14:	20009b9c 	.word	0x20009b9c
    bf18:	0001b0b3 	.word	0x0001b0b3
    bf1c:	20008448 	.word	0x20008448

0000bf20 <get_status>:
{
    bf20:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bf22:	b2cc      	uxtb	r4, r1
    bf24:	2c03      	cmp	r4, #3
{
    bf26:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bf28:	d908      	bls.n	bf3c <get_status+0x1c>
    bf2a:	4909      	ldr	r1, [pc, #36]	; (bf50 <get_status+0x30>)
    bf2c:	4809      	ldr	r0, [pc, #36]	; (bf54 <get_status+0x34>)
    bf2e:	227e      	movs	r2, #126	; 0x7e
    bf30:	f00e fd56 	bl	1a9e0 <printk>
    bf34:	217e      	movs	r1, #126	; 0x7e
    bf36:	4806      	ldr	r0, [pc, #24]	; (bf50 <get_status+0x30>)
    bf38:	f00e fff8 	bl	1af2c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    bf3c:	230c      	movs	r3, #12
    bf3e:	68e9      	ldr	r1, [r5, #12]
    bf40:	fb04 1403 	mla	r4, r4, r3, r1
    bf44:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    bf48:	f000 0007 	and.w	r0, r0, #7
    bf4c:	bd38      	pop	{r3, r4, r5, pc}
    bf4e:	bf00      	nop
    bf50:	0001fe2c 	.word	0x0001fe2c
    bf54:	0001faab 	.word	0x0001faab

0000bf58 <stop>:
{
    bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf5a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bf5c:	2c03      	cmp	r4, #3
{
    bf5e:	4605      	mov	r5, r0
    bf60:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    bf62:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bf64:	d90a      	bls.n	bf7c <stop+0x24>
    bf66:	4919      	ldr	r1, [pc, #100]	; (bfcc <stop+0x74>)
    bf68:	4819      	ldr	r0, [pc, #100]	; (bfd0 <stop+0x78>)
    bf6a:	f240 1253 	movw	r2, #339	; 0x153
    bf6e:	f00e fd37 	bl	1a9e0 <printk>
    bf72:	f240 1153 	movw	r1, #339	; 0x153
    bf76:	4815      	ldr	r0, [pc, #84]	; (bfcc <stop+0x74>)
    bf78:	f00e ffd8 	bl	1af2c <assert_post_action>
	__asm__ volatile(
    bf7c:	f04f 0320 	mov.w	r3, #32
    bf80:	f3ef 8111 	mrs	r1, BASEPRI
    bf84:	f383 8811 	msr	BASEPRI, r3
    bf88:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    bf8c:	220c      	movs	r2, #12
    bf8e:	fb02 6304 	mla	r3, r2, r4, r6
    bf92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    bf96:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    bf9a:	d001      	beq.n	bfa0 <stop+0x48>
    bf9c:	429f      	cmp	r7, r3
    bf9e:	d112      	bne.n	bfc6 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bfa0:	2301      	movs	r3, #1
	int err = 0;
    bfa2:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bfa4:	fb02 6604 	mla	r6, r2, r4, r6
    bfa8:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    bfac:	f381 8811 	msr	BASEPRI, r1
    bfb0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bfb4:	b930      	cbnz	r0, bfc4 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    bfb6:	230c      	movs	r3, #12
    bfb8:	6869      	ldr	r1, [r5, #4]
    bfba:	fb03 1404 	mla	r4, r3, r4, r1
    bfbe:	6863      	ldr	r3, [r4, #4]
    bfc0:	4798      	blx	r3
	return 0;
    bfc2:	2000      	movs	r0, #0
}
    bfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    bfc6:	f04f 30ff 	mov.w	r0, #4294967295
    bfca:	e7ef      	b.n	bfac <stop+0x54>
    bfcc:	0001fe2c 	.word	0x0001fe2c
    bfd0:	0001faab 	.word	0x0001faab

0000bfd4 <onoff_stop>:
{
    bfd4:	b570      	push	{r4, r5, r6, lr}
    bfd6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bfd8:	4906      	ldr	r1, [pc, #24]	; (bff4 <onoff_stop+0x20>)
{
    bfda:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    bfdc:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bfde:	1149      	asrs	r1, r1, #5
    bfe0:	2240      	movs	r2, #64	; 0x40
    bfe2:	4805      	ldr	r0, [pc, #20]	; (bff8 <onoff_stop+0x24>)
    bfe4:	f7ff ffb8 	bl	bf58 <stop>
	notify(mgr, res);
    bfe8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bfea:	4601      	mov	r1, r0
	notify(mgr, res);
    bfec:	4620      	mov	r0, r4
}
    bfee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    bff2:	4718      	bx	r3
    bff4:	20009b9c 	.word	0x20009b9c
    bff8:	20008448 	.word	0x20008448

0000bffc <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    bffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c000:	2200      	movs	r2, #0
    c002:	2101      	movs	r1, #1
{
    c004:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c006:	2005      	movs	r0, #5
    c008:	f001 fdbe 	bl	db88 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    c00c:	2005      	movs	r0, #5
    c00e:	f001 fd9d 	bl	db4c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    c012:	4811      	ldr	r0, [pc, #68]	; (c058 <clk_init+0x5c>)
    c014:	f00a feae 	bl	16d74 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    c018:	4b10      	ldr	r3, [pc, #64]	; (c05c <clk_init+0x60>)
    c01a:	4298      	cmp	r0, r3
    c01c:	d119      	bne.n	c052 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    c01e:	f00a fec9 	bl	16db4 <nrfx_clock_enable>
    c022:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c024:	f04f 080c 	mov.w	r8, #12
    c028:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c02a:	f8df 9034 	ldr.w	r9, [pc, #52]	; c060 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    c02e:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c030:	4649      	mov	r1, r9
    c032:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    c036:	f00e fd2e 	bl	1aa96 <onoff_manager_init>
		if (err < 0) {
    c03a:	2800      	cmp	r0, #0
    c03c:	db07      	blt.n	c04e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c03e:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    c042:	3401      	adds	r4, #1
    c044:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c046:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    c04a:	d1f0      	bne.n	c02e <clk_init+0x32>
	}

	return 0;
    c04c:	2000      	movs	r0, #0
}
    c04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    c052:	f06f 0004 	mvn.w	r0, #4
    c056:	e7fa      	b.n	c04e <clk_init+0x52>
    c058:	0000c09d 	.word	0x0000c09d
    c05c:	0bad0000 	.word	0x0bad0000
    c060:	0001e8d0 	.word	0x0001e8d0

0000c064 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    c064:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    c066:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    c068:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    c06a:	434b      	muls	r3, r1
    c06c:	4809      	ldr	r0, [pc, #36]	; (c094 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    c06e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    c070:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    c072:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    c074:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    c078:	4418      	add	r0, r3
	sub_data->cb = NULL;
    c07a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    c07e:	f00e ffcc 	bl	1b01a <set_on_state>
	if (callback) {
    c082:	b12d      	cbz	r5, c090 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c084:	4632      	mov	r2, r6
    c086:	462b      	mov	r3, r5
}
    c088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    c08c:	4802      	ldr	r0, [pc, #8]	; (c098 <clkstarted_handle.constprop.0+0x34>)
    c08e:	4718      	bx	r3
}
    c090:	bd70      	pop	{r4, r5, r6, pc}
    c092:	bf00      	nop
    c094:	20009b9c 	.word	0x20009b9c
    c098:	20008448 	.word	0x20008448

0000c09c <clock_event_handler>:
{
    c09c:	b508      	push	{r3, lr}
    c09e:	2805      	cmp	r0, #5
    c0a0:	d821      	bhi.n	c0e6 <clock_event_handler+0x4a>
    c0a2:	e8df f000 	tbb	[pc, r0]
    c0a6:	1103      	.short	0x1103
    c0a8:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    c0ac:	4b13      	ldr	r3, [pc, #76]	; (c0fc <clock_event_handler+0x60>)
    c0ae:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    c0b2:	f010 0007 	ands.w	r0, r0, #7
    c0b6:	d11f      	bne.n	c0f8 <clock_event_handler+0x5c>
}
    c0b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    c0bc:	f7ff bfd2 	b.w	c064 <clkstarted_handle.constprop.0>
    c0c0:	2002      	movs	r0, #2
    c0c2:	e7f9      	b.n	c0b8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    c0c4:	2003      	movs	r0, #3
    c0c6:	e7f7      	b.n	c0b8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    c0c8:	2001      	movs	r0, #1
    c0ca:	e7f5      	b.n	c0b8 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    c0cc:	490c      	ldr	r1, [pc, #48]	; (c100 <clock_event_handler+0x64>)
    c0ce:	f240 2266 	movw	r2, #614	; 0x266
    c0d2:	480c      	ldr	r0, [pc, #48]	; (c104 <clock_event_handler+0x68>)
    c0d4:	f00e fc84 	bl	1a9e0 <printk>
    c0d8:	f240 2166 	movw	r1, #614	; 0x266
}
    c0dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    c0e0:	4807      	ldr	r0, [pc, #28]	; (c100 <clock_event_handler+0x64>)
    c0e2:	f00e bf23 	b.w	1af2c <assert_post_action>
    c0e6:	4906      	ldr	r1, [pc, #24]	; (c100 <clock_event_handler+0x64>)
    c0e8:	f240 226a 	movw	r2, #618	; 0x26a
    c0ec:	4805      	ldr	r0, [pc, #20]	; (c104 <clock_event_handler+0x68>)
    c0ee:	f00e fc77 	bl	1a9e0 <printk>
    c0f2:	f240 216a 	movw	r1, #618	; 0x26a
    c0f6:	e7f1      	b.n	c0dc <clock_event_handler+0x40>
}
    c0f8:	bd08      	pop	{r3, pc}
    c0fa:	bf00      	nop
    c0fc:	20009b9c 	.word	0x20009b9c
    c100:	0001fe2c 	.word	0x0001fe2c
    c104:	0001faab 	.word	0x0001faab

0000c108 <generic_hfclk_start>:
{
    c108:	b508      	push	{r3, lr}
	__asm__ volatile(
    c10a:	f04f 0320 	mov.w	r3, #32
    c10e:	f3ef 8111 	mrs	r1, BASEPRI
    c112:	f383 8811 	msr	BASEPRI, r3
    c116:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    c11a:	4a11      	ldr	r2, [pc, #68]	; (c160 <generic_hfclk_start+0x58>)
    c11c:	6813      	ldr	r3, [r2, #0]
    c11e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    c122:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    c126:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    c128:	d00b      	beq.n	c142 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c12a:	4a0e      	ldr	r2, [pc, #56]	; (c164 <generic_hfclk_start+0x5c>)
    c12c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c130:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    c134:	f013 0301 	ands.w	r3, r3, #1
    c138:	d003      	beq.n	c142 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    c13a:	480b      	ldr	r0, [pc, #44]	; (c168 <generic_hfclk_start+0x60>)
    c13c:	f00e ff6d 	bl	1b01a <set_on_state>
			already_started = true;
    c140:	2301      	movs	r3, #1
	__asm__ volatile(
    c142:	f381 8811 	msr	BASEPRI, r1
    c146:	f3bf 8f6f 	isb	sy
	if (already_started) {
    c14a:	b123      	cbz	r3, c156 <generic_hfclk_start+0x4e>
}
    c14c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    c150:	2000      	movs	r0, #0
    c152:	f7ff bf87 	b.w	c064 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c156:	2001      	movs	r0, #1
}
    c158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c15c:	f00a be4e 	b.w	16dfc <nrfx_clock_start>
    c160:	20009c4c 	.word	0x20009c4c
    c164:	40005000 	.word	0x40005000
    c168:	20009c24 	.word	0x20009c24

0000c16c <api_blocking_start>:
{
    c16c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c16e:	2200      	movs	r2, #0
    c170:	2301      	movs	r3, #1
    c172:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c176:	ab04      	add	r3, sp, #16
    c178:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c17c:	4a09      	ldr	r2, [pc, #36]	; (c1a4 <api_blocking_start+0x38>)
    c17e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c180:	f8cd d000 	str.w	sp, [sp]
    c184:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c188:	f00e ff8c 	bl	1b0a4 <api_start>
	if (err < 0) {
    c18c:	2800      	cmp	r0, #0
    c18e:	db05      	blt.n	c19c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    c190:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c194:	2300      	movs	r3, #0
    c196:	4668      	mov	r0, sp
    c198:	f00d fa86 	bl	196a8 <z_impl_k_sem_take>
}
    c19c:	b007      	add	sp, #28
    c19e:	f85d fb04 	ldr.w	pc, [sp], #4
    c1a2:	bf00      	nop
    c1a4:	0001b0e9 	.word	0x0001b0e9

0000c1a8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c1a8:	4b07      	ldr	r3, [pc, #28]	; (c1c8 <generic_hfclk_stop+0x20>)
    c1aa:	e8d3 2fef 	ldaex	r2, [r3]
    c1ae:	f022 0102 	bic.w	r1, r2, #2
    c1b2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    c1b6:	2800      	cmp	r0, #0
    c1b8:	d1f7      	bne.n	c1aa <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    c1ba:	07d3      	lsls	r3, r2, #31
    c1bc:	d402      	bmi.n	c1c4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c1be:	2001      	movs	r0, #1
    c1c0:	f00a be86 	b.w	16ed0 <nrfx_clock_stop>
}
    c1c4:	4770      	bx	lr
    c1c6:	bf00      	nop
    c1c8:	20009c4c 	.word	0x20009c4c

0000c1cc <z_nrf_clock_control_lf_on>:
{
    c1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c1d0:	2201      	movs	r2, #1
    c1d2:	4606      	mov	r6, r0
    c1d4:	4942      	ldr	r1, [pc, #264]	; (c2e0 <z_nrf_clock_control_lf_on+0x114>)
    c1d6:	e8d1 3fef 	ldaex	r3, [r1]
    c1da:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c1de:	2800      	cmp	r0, #0
    c1e0:	d1f9      	bne.n	c1d6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    c1e2:	b99b      	cbnz	r3, c20c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    c1e4:	493f      	ldr	r1, [pc, #252]	; (c2e4 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    c1e6:	4840      	ldr	r0, [pc, #256]	; (c2e8 <z_nrf_clock_control_lf_on+0x11c>)
    c1e8:	604b      	str	r3, [r1, #4]
    c1ea:	60cb      	str	r3, [r1, #12]
    c1ec:	608a      	str	r2, [r1, #8]
    c1ee:	f7fe fdd7 	bl	ada0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    c1f2:	2800      	cmp	r0, #0
    c1f4:	da0a      	bge.n	c20c <z_nrf_clock_control_lf_on+0x40>
    c1f6:	493d      	ldr	r1, [pc, #244]	; (c2ec <z_nrf_clock_control_lf_on+0x120>)
    c1f8:	483d      	ldr	r0, [pc, #244]	; (c2f0 <z_nrf_clock_control_lf_on+0x124>)
    c1fa:	f240 2226 	movw	r2, #550	; 0x226
    c1fe:	f00e fbef 	bl	1a9e0 <printk>
    c202:	f240 2126 	movw	r1, #550	; 0x226
    c206:	4839      	ldr	r0, [pc, #228]	; (c2ec <z_nrf_clock_control_lf_on+0x120>)
    c208:	f00e fe90 	bl	1af2c <assert_post_action>
	switch (start_mode) {
    c20c:	b386      	cbz	r6, c270 <z_nrf_clock_control_lf_on+0xa4>
    c20e:	1e73      	subs	r3, r6, #1
    c210:	2b01      	cmp	r3, #1
    c212:	d852      	bhi.n	c2ba <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c214:	2e01      	cmp	r6, #1
    c216:	d106      	bne.n	c226 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c218:	4b36      	ldr	r3, [pc, #216]	; (c2f4 <z_nrf_clock_control_lf_on+0x128>)
    c21a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    c21e:	f003 0303 	and.w	r3, r3, #3
    c222:	2b02      	cmp	r3, #2
    c224:	d024      	beq.n	c270 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    c226:	f011 fef9 	bl	1e01c <k_is_in_isr>
    c22a:	4604      	mov	r4, r0
    c22c:	b918      	cbnz	r0, c236 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    c22e:	4b32      	ldr	r3, [pc, #200]	; (c2f8 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    c230:	781b      	ldrb	r3, [r3, #0]
    c232:	2b00      	cmp	r3, #0
    c234:	d14e      	bne.n	c2d4 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    c236:	f04f 0320 	mov.w	r3, #32
    c23a:	f3ef 8711 	mrs	r7, BASEPRI
    c23e:	f383 8811 	msr	BASEPRI, r3
    c242:	f3bf 8f6f 	isb	sy
    c246:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c248:	4d2a      	ldr	r5, [pc, #168]	; (c2f4 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c24a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c2fc <z_nrf_clock_control_lf_on+0x130>
    c24e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c252:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    c256:	03d2      	lsls	r2, r2, #15
    c258:	d50c      	bpl.n	c274 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c25a:	f003 0303 	and.w	r3, r3, #3
    c25e:	2b02      	cmp	r3, #2
    c260:	d001      	beq.n	c266 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    c262:	2e01      	cmp	r6, #1
    c264:	d106      	bne.n	c274 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    c266:	b324      	cbz	r4, c2b2 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    c268:	f387 8811 	msr	BASEPRI, r7
    c26c:	f3bf 8f6f 	isb	sy
}
    c270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    c274:	b1c4      	cbz	r4, c2a8 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    c276:	4638      	mov	r0, r7
    c278:	f001 fcf6 	bl	dc68 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    c27c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    c280:	b2db      	uxtb	r3, r3
    c282:	2b01      	cmp	r3, #1
    c284:	d1e3      	bne.n	c24e <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c286:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    c28a:	2a00      	cmp	r2, #0
    c28c:	d0df      	beq.n	c24e <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c28e:	2200      	movs	r2, #0
    c290:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    c294:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    c298:	2202      	movs	r2, #2
    c29a:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    c29e:	2220      	movs	r2, #32
    c2a0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c2a4:	60ab      	str	r3, [r5, #8]
}
    c2a6:	e7d2      	b.n	c24e <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    c2a8:	2100      	movs	r1, #0
    c2aa:	2021      	movs	r0, #33	; 0x21
    c2ac:	f00d f98a 	bl	195c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    c2b0:	e7e4      	b.n	c27c <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    c2b2:	2302      	movs	r3, #2
    c2b4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    c2b8:	e7da      	b.n	c270 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    c2ba:	490c      	ldr	r1, [pc, #48]	; (c2ec <z_nrf_clock_control_lf_on+0x120>)
    c2bc:	480c      	ldr	r0, [pc, #48]	; (c2f0 <z_nrf_clock_control_lf_on+0x124>)
    c2be:	f44f 720e 	mov.w	r2, #568	; 0x238
    c2c2:	f00e fb8d 	bl	1a9e0 <printk>
}
    c2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    c2ca:	f44f 710e 	mov.w	r1, #568	; 0x238
    c2ce:	4807      	ldr	r0, [pc, #28]	; (c2ec <z_nrf_clock_control_lf_on+0x120>)
    c2d0:	f00e be2c 	b.w	1af2c <assert_post_action>
    p_reg->INTENCLR = mask;
    c2d4:	2202      	movs	r2, #2
    c2d6:	4b07      	ldr	r3, [pc, #28]	; (c2f4 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    c2d8:	4607      	mov	r7, r0
    c2da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c2de:	e7b3      	b.n	c248 <z_nrf_clock_control_lf_on+0x7c>
    c2e0:	20009c50 	.word	0x20009c50
    c2e4:	20009b8c 	.word	0x20009b8c
    c2e8:	20009bbc 	.word	0x20009bbc
    c2ec:	0001fe2c 	.word	0x0001fe2c
    c2f0:	0001faab 	.word	0x0001faab
    c2f4:	40005000 	.word	0x40005000
    c2f8:	2000ea5d 	.word	0x2000ea5d
    c2fc:	e000e100 	.word	0xe000e100

0000c300 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    c300:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    c302:	f000 f905 	bl	c510 <bt_rpmsg_platform_init>
	if (err < 0) {
    c306:	1e04      	subs	r4, r0, #0
    c308:	da06      	bge.n	c318 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    c30a:	4622      	mov	r2, r4
    c30c:	2145      	movs	r1, #69	; 0x45
    c30e:	4807      	ldr	r0, [pc, #28]	; (c32c <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c310:	f00e fb66 	bl	1a9e0 <printk>
	}

	return err;
}
    c314:	4620      	mov	r0, r4
    c316:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    c318:	4805      	ldr	r0, [pc, #20]	; (c330 <bt_rpmsg_init+0x30>)
    c31a:	f003 ff29 	bl	10170 <bt_hci_driver_register>
	if (err < 0) {
    c31e:	1e04      	subs	r4, r0, #0
    c320:	daf8      	bge.n	c314 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c322:	4622      	mov	r2, r4
    c324:	2145      	movs	r1, #69	; 0x45
    c326:	4803      	ldr	r0, [pc, #12]	; (c334 <bt_rpmsg_init+0x34>)
    c328:	e7f2      	b.n	c310 <bt_rpmsg_init+0x10>
    c32a:	bf00      	nop
    c32c:	0001fe9e 	.word	0x0001fe9e
    c330:	0001e8dc 	.word	0x0001e8dc
    c334:	0001feca 	.word	0x0001feca

0000c338 <bt_rpmsg_send>:
{
    c338:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c33a:	7d02      	ldrb	r2, [r0, #20]
    c33c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c33e:	2a02      	cmp	r2, #2
    c340:	d00c      	beq.n	c35c <bt_rpmsg_send+0x24>
    c342:	2a04      	cmp	r2, #4
    c344:	d009      	beq.n	c35a <bt_rpmsg_send+0x22>
    c346:	b1b2      	cbz	r2, c376 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    c348:	2145      	movs	r1, #69	; 0x45
    c34a:	480c      	ldr	r0, [pc, #48]	; (c37c <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    c34c:	f00e fb48 	bl	1a9e0 <printk>
	net_buf_unref(buf);
    c350:	4620      	mov	r0, r4
    c352:	f009 facf 	bl	158f4 <net_buf_unref>
}
    c356:	2000      	movs	r0, #0
    c358:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    c35a:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    c35c:	4611      	mov	r1, r2
    c35e:	f104 0008 	add.w	r0, r4, #8
    c362:	f011 f883 	bl	1d46c <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    c366:	4620      	mov	r0, r4
    c368:	f000 f8ee 	bl	c548 <bt_rpmsg_platform_send>
	if (err < 0) {
    c36c:	1e02      	subs	r2, r0, #0
    c36e:	daef      	bge.n	c350 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    c370:	2145      	movs	r1, #69	; 0x45
    c372:	4803      	ldr	r0, [pc, #12]	; (c380 <bt_rpmsg_send+0x48>)
    c374:	e7ea      	b.n	c34c <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    c376:	2201      	movs	r2, #1
    c378:	e7f0      	b.n	c35c <bt_rpmsg_send+0x24>
    c37a:	bf00      	nop
    c37c:	0001fef9 	.word	0x0001fef9
    c380:	0001ff0e 	.word	0x0001ff0e

0000c384 <bt_rpmsg_rx>:
{
    c384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    c388:	4680      	mov	r8, r0
{
    c38a:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    c38c:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    c390:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    c392:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    c394:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    c398:	d009      	beq.n	c3ae <bt_rpmsg_rx+0x2a>
    c39a:	2805      	cmp	r0, #5
    c39c:	d074      	beq.n	c488 <bt_rpmsg_rx+0x104>
    c39e:	2802      	cmp	r0, #2
    c3a0:	f040 8099 	bne.w	c4d6 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    c3a4:	2b03      	cmp	r3, #3
    c3a6:	d84a      	bhi.n	c43e <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    c3a8:	2145      	movs	r1, #69	; 0x45
    c3aa:	484f      	ldr	r0, [pc, #316]	; (c4e8 <bt_rpmsg_rx+0x164>)
    c3ac:	e003      	b.n	c3b6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c3ae:	2b01      	cmp	r3, #1
    c3b0:	d806      	bhi.n	c3c0 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    c3b2:	2145      	movs	r1, #69	; 0x45
    c3b4:	484d      	ldr	r0, [pc, #308]	; (c4ec <bt_rpmsg_rx+0x168>)
}
    c3b6:	b002      	add	sp, #8
    c3b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    c3bc:	f00e bb10 	b.w	1a9e0 <printk>
	switch (evt_type) {
    c3c0:	7873      	ldrb	r3, [r6, #1]
    c3c2:	2b3e      	cmp	r3, #62	; 0x3e
    c3c4:	d117      	bne.n	c3f6 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    c3c6:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    c3c8:	2f02      	cmp	r7, #2
    c3ca:	d016      	beq.n	c3fa <bt_rpmsg_rx+0x76>
    c3cc:	f1a7 030d 	sub.w	r3, r7, #13
    c3d0:	425f      	negs	r7, r3
    c3d2:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    c3d4:	2202      	movs	r2, #2
    c3d6:	4641      	mov	r1, r8
    c3d8:	a801      	add	r0, sp, #4
    c3da:	f00f fd2b 	bl	1be34 <memcpy>
	if (remaining != hdr.len) {
    c3de:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    c3e2:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    c3e4:	429d      	cmp	r5, r3
    c3e6:	d00a      	beq.n	c3fe <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    c3e8:	2145      	movs	r1, #69	; 0x45
    c3ea:	4841      	ldr	r0, [pc, #260]	; (c4f0 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    c3ec:	f00e faf8 	bl	1a9e0 <printk>
}
    c3f0:	b002      	add	sp, #8
    c3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c3f6:	2700      	movs	r7, #0
    c3f8:	e7ec      	b.n	c3d4 <bt_rpmsg_rx+0x50>
			return true;
    c3fa:	2701      	movs	r7, #1
    c3fc:	e7ea      	b.n	c3d4 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    c3fe:	2200      	movs	r2, #0
    c400:	2300      	movs	r3, #0
    c402:	4639      	mov	r1, r7
    c404:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c408:	f002 fadc 	bl	e9c4 <bt_buf_get_evt>
	if (!buf) {
    c40c:	4604      	mov	r4, r0
    c40e:	b920      	cbnz	r0, c41a <bt_rpmsg_rx+0x96>
		if (discardable) {
    c410:	2f00      	cmp	r7, #0
    c412:	d1ed      	bne.n	c3f0 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    c414:	2145      	movs	r1, #69	; 0x45
    c416:	4837      	ldr	r0, [pc, #220]	; (c4f4 <bt_rpmsg_rx+0x170>)
    c418:	e7e8      	b.n	c3ec <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c41a:	f100 0708 	add.w	r7, r0, #8
    c41e:	2202      	movs	r2, #2
    c420:	a901      	add	r1, sp, #4
    c422:	4638      	mov	r0, r7
    c424:	f011 f845 	bl	1d4b2 <net_buf_simple_add_mem>
    c428:	462a      	mov	r2, r5
    c42a:	1cf1      	adds	r1, r6, #3
    c42c:	4638      	mov	r0, r7
    c42e:	f011 f840 	bl	1d4b2 <net_buf_simple_add_mem>
		bt_recv(buf);
    c432:	4620      	mov	r0, r4
}
    c434:	b002      	add	sp, #8
    c436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    c43a:	f003 be6f 	b.w	1011c <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    c43e:	2200      	movs	r2, #0
    c440:	2300      	movs	r3, #0
    c442:	2003      	movs	r0, #3
    c444:	f002 fa6c 	bl	e920 <bt_buf_get_rx>
	if (buf) {
    c448:	4604      	mov	r4, r0
    c44a:	b1d0      	cbz	r0, c482 <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c44c:	2204      	movs	r2, #4
    c44e:	4641      	mov	r1, r8
    c450:	eb0d 0002 	add.w	r0, sp, r2
    c454:	f00f fcee 	bl	1be34 <memcpy>
    c458:	2204      	movs	r2, #4
    c45a:	f104 0708 	add.w	r7, r4, #8
    c45e:	4638      	mov	r0, r7
    c460:	eb0d 0102 	add.w	r1, sp, r2
    c464:	f011 f825 	bl	1d4b2 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c468:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c46c:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c46e:	429d      	cmp	r5, r3
    c470:	d02e      	beq.n	c4d0 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    c472:	2145      	movs	r1, #69	; 0x45
    c474:	4820      	ldr	r0, [pc, #128]	; (c4f8 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    c476:	f00e fab3 	bl	1a9e0 <printk>
		net_buf_unref(buf);
    c47a:	4620      	mov	r0, r4
    c47c:	f009 fa3a 	bl	158f4 <net_buf_unref>
	if (buf) {
    c480:	e7b6      	b.n	c3f0 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    c482:	2145      	movs	r1, #69	; 0x45
    c484:	481d      	ldr	r0, [pc, #116]	; (c4fc <bt_rpmsg_rx+0x178>)
    c486:	e796      	b.n	c3b6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c488:	2b03      	cmp	r3, #3
    c48a:	d802      	bhi.n	c492 <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    c48c:	2145      	movs	r1, #69	; 0x45
    c48e:	481c      	ldr	r0, [pc, #112]	; (c500 <bt_rpmsg_rx+0x17c>)
    c490:	e791      	b.n	c3b6 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    c492:	2200      	movs	r2, #0
    c494:	2300      	movs	r3, #0
    c496:	f002 fa43 	bl	e920 <bt_buf_get_rx>
	if (buf) {
    c49a:	4604      	mov	r4, r0
    c49c:	b1a8      	cbz	r0, c4ca <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c49e:	2204      	movs	r2, #4
    c4a0:	4641      	mov	r1, r8
    c4a2:	eb0d 0002 	add.w	r0, sp, r2
    c4a6:	f00f fcc5 	bl	1be34 <memcpy>
    c4aa:	2204      	movs	r2, #4
    c4ac:	f104 0708 	add.w	r7, r4, #8
    c4b0:	4638      	mov	r0, r7
    c4b2:	eb0d 0102 	add.w	r1, sp, r2
    c4b6:	f010 fffc 	bl	1d4b2 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c4ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c4be:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c4c0:	429d      	cmp	r5, r3
    c4c2:	d005      	beq.n	c4d0 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    c4c4:	2145      	movs	r1, #69	; 0x45
    c4c6:	480f      	ldr	r0, [pc, #60]	; (c504 <bt_rpmsg_rx+0x180>)
    c4c8:	e7d5      	b.n	c476 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    c4ca:	2145      	movs	r1, #69	; 0x45
    c4cc:	480e      	ldr	r0, [pc, #56]	; (c508 <bt_rpmsg_rx+0x184>)
    c4ce:	e772      	b.n	c3b6 <bt_rpmsg_rx+0x32>
    c4d0:	462a      	mov	r2, r5
    c4d2:	1d71      	adds	r1, r6, #5
    c4d4:	e7aa      	b.n	c42c <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c4d6:	4602      	mov	r2, r0
    c4d8:	2145      	movs	r1, #69	; 0x45
    c4da:	480c      	ldr	r0, [pc, #48]	; (c50c <bt_rpmsg_rx+0x188>)
}
    c4dc:	b002      	add	sp, #8
    c4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c4e2:	f00e ba7d 	b.w	1a9e0 <printk>
    c4e6:	bf00      	nop
    c4e8:	0001ff9b 	.word	0x0001ff9b
    c4ec:	0001ff2b 	.word	0x0001ff2b
    c4f0:	0001ff51 	.word	0x0001ff51
    c4f4:	0001ff7a 	.word	0x0001ff7a
    c4f8:	0001ffde 	.word	0x0001ffde
    c4fc:	0001ffbf 	.word	0x0001ffbf
    c500:	00020005 	.word	0x00020005
    c504:	00020048 	.word	0x00020048
    c508:	00020029 	.word	0x00020029
    c50c:	0002006f 	.word	0x0002006f

0000c510 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c510:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c512:	4908      	ldr	r1, [pc, #32]	; (c534 <bt_rpmsg_platform_init+0x24>)
    c514:	4808      	ldr	r0, [pc, #32]	; (c538 <bt_rpmsg_platform_init+0x28>)
    c516:	f7ff fb89 	bl	bc2c <rpmsg_service_register_endpoint>

	if (err < 0) {
    c51a:	1e02      	subs	r2, r0, #0
    c51c:	da05      	bge.n	c52a <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c51e:	4807      	ldr	r0, [pc, #28]	; (c53c <bt_rpmsg_platform_init+0x2c>)
    c520:	2145      	movs	r1, #69	; 0x45
    c522:	f00e fa5d 	bl	1a9e0 <printk>
		return RPMSG_ERR_INIT;
    c526:	4806      	ldr	r0, [pc, #24]	; (c540 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c528:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c52a:	4b06      	ldr	r3, [pc, #24]	; (c544 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c52c:	2000      	movs	r0, #0
	endpoint_id = err;
    c52e:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c530:	e7fa      	b.n	c528 <bt_rpmsg_platform_init+0x18>
    c532:	bf00      	nop
    c534:	0001b105 	.word	0x0001b105
    c538:	0002009c 	.word	0x0002009c
    c53c:	000200a7 	.word	0x000200a7
    c540:	fffff82a 	.word	0xfffff82a
    c544:	20009c54 	.word	0x20009c54

0000c548 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c548:	4b02      	ldr	r3, [pc, #8]	; (c554 <bt_rpmsg_platform_send+0xc>)
    c54a:	8982      	ldrh	r2, [r0, #12]
    c54c:	6881      	ldr	r1, [r0, #8]
    c54e:	6818      	ldr	r0, [r3, #0]
    c550:	f7ff bb98 	b.w	bc84 <rpmsg_service_send>
    c554:	20009c54 	.word	0x20009c54

0000c558 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c558:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c55a:	4b02      	ldr	r3, [pc, #8]	; (c564 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c55c:	6818      	ldr	r0, [r3, #0]
    c55e:	f7ff fb87 	bl	bc70 <rpmsg_service_endpoint_is_bound>
}
    c562:	bd08      	pop	{r3, pc}
    c564:	20009c54 	.word	0x20009c54

0000c568 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c568:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c56a:	4c06      	ldr	r4, [pc, #24]	; (c584 <z_clock_isr+0x1c>)
    c56c:	4806      	ldr	r0, [pc, #24]	; (c588 <z_clock_isr+0x20>)
    c56e:	4621      	mov	r1, r4
    c570:	2217      	movs	r2, #23
    c572:	f00e fa35 	bl	1a9e0 <printk>
    c576:	4620      	mov	r0, r4
}
    c578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c57c:	2117      	movs	r1, #23
    c57e:	f00e bcd5 	b.w	1af2c <assert_post_action>
    c582:	bf00      	nop
    c584:	000200e4 	.word	0x000200e4
    c588:	0001faab 	.word	0x0001faab

0000c58c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c58c:	4a04      	ldr	r2, [pc, #16]	; (c5a0 <sys_clock_timeout_handler+0x14>)
    c58e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c590:	1ac8      	subs	r0, r1, r3
    c592:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c596:	4403      	add	r3, r0
    c598:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c59a:	f00d bd29 	b.w	19ff0 <z_clock_announce>
    c59e:	bf00      	nop
    c5a0:	20009c64 	.word	0x20009c64

0000c5a4 <set_absolute_alarm>:
{
    c5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c5a8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c5ac:	f04f 0900 	mov.w	r9, #0
    c5b0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c5b2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c5b6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c5ba:	00a4      	lsls	r4, r4, #2
    c5bc:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c5c0:	b2a4      	uxth	r4, r4
    c5c2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c5c6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c5ca:	f8df 806c 	ldr.w	r8, [pc, #108]	; c638 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c5ce:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c5d2:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c5d6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c5d8:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c5dc:	eba3 030a 	sub.w	r3, r3, sl
    c5e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c5e4:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c5e8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c5ea:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c5ee:	d102      	bne.n	c5f6 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c5f0:	2013      	movs	r0, #19
    c5f2:	f011 fd19 	bl	1e028 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c5f6:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c5fa:	1aab      	subs	r3, r5, r2
    c5fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c604:	bf88      	it	hi
    c606:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c608:	f8c4 9000 	str.w	r9, [r4]
    c60c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c60e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c612:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c616:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c61a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c61e:	459a      	cmp	sl, r3
    c620:	d006      	beq.n	c630 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c622:	1aeb      	subs	r3, r5, r3
    c624:	3b02      	subs	r3, #2
    c626:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c62a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c62e:	d801      	bhi.n	c634 <set_absolute_alarm+0x90>
}
    c630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c634:	462b      	mov	r3, r5
    c636:	e7cf      	b.n	c5d8 <set_absolute_alarm+0x34>
    c638:	40015000 	.word	0x40015000

0000c63c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c63e:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c640:	462f      	mov	r7, r5
    c642:	4c10      	ldr	r4, [pc, #64]	; (c684 <rtc_nrf_isr+0x48>)
    c644:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c646:	4b10      	ldr	r3, [pc, #64]	; (c688 <rtc_nrf_isr+0x4c>)
    c648:	b105      	cbz	r5, c64c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c64c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c650:	03d2      	lsls	r2, r2, #15
    c652:	d5fa      	bpl.n	c64a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c654:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c658:	2a00      	cmp	r2, #0
    c65a:	d0f6      	beq.n	c64a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c65c:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c660:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c664:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c668:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c66c:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c66e:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c672:	b126      	cbz	r6, c67e <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c674:	2000      	movs	r0, #0
    c676:	6862      	ldr	r2, [r4, #4]
    c678:	6027      	str	r7, [r4, #0]
    c67a:	47b0      	blx	r6
    c67c:	e7e2      	b.n	c644 <rtc_nrf_isr+0x8>
    c67e:	6026      	str	r6, [r4, #0]
}
    c680:	e7e3      	b.n	c64a <rtc_nrf_isr+0xe>
    c682:	bf00      	nop
    c684:	20009c58 	.word	0x20009c58
    c688:	40015000 	.word	0x40015000

0000c68c <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c68c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c68e:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c694:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c698:	4c0c      	ldr	r4, [pc, #48]	; (c6cc <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c69a:	2101      	movs	r1, #1
    c69c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c6a0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c6a4:	4b0a      	ldr	r3, [pc, #40]	; (c6d0 <z_clock_driver_init+0x44>)
    c6a6:	2015      	movs	r0, #21
    c6a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c6ac:	462a      	mov	r2, r5
    c6ae:	f001 fa6b 	bl	db88 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c6b2:	2015      	movs	r0, #21
    c6b4:	f001 fa4a 	bl	db4c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c6b8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c6ba:	4a06      	ldr	r2, [pc, #24]	; (c6d4 <z_clock_driver_init+0x48>)
    c6bc:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c6be:	2002      	movs	r0, #2
    c6c0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c6c2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c6c4:	f7ff fd82 	bl	c1cc <z_nrf_clock_control_lf_on>

	return 0;
}
    c6c8:	4628      	mov	r0, r5
    c6ca:	bd38      	pop	{r3, r4, r5, pc}
    c6cc:	40015000 	.word	0x40015000
    c6d0:	e000e100 	.word	0xe000e100
    c6d4:	20009c60 	.word	0x20009c60

0000c6d8 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c6d8:	4a13      	ldr	r2, [pc, #76]	; (c728 <z_clock_set_timeout+0x50>)
    c6da:	f1b0 3fff 	cmp.w	r0, #4294967295
    c6de:	bf14      	ite	ne
    c6e0:	4603      	movne	r3, r0
    c6e2:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c6e4:	3b01      	subs	r3, #1
    c6e6:	2b00      	cmp	r3, #0
    c6e8:	dd1c      	ble.n	c724 <z_clock_set_timeout+0x4c>
    c6ea:	4293      	cmp	r3, r2
    c6ec:	bfa8      	it	ge
    c6ee:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c6f0:	4a0e      	ldr	r2, [pc, #56]	; (c72c <z_clock_set_timeout+0x54>)
    c6f2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c6f6:	4a0e      	ldr	r2, [pc, #56]	; (c730 <z_clock_set_timeout+0x58>)
    c6f8:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c6fa:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c6fc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c700:	bf18      	it	ne
    c702:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c704:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c708:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c70a:	480a      	ldr	r0, [pc, #40]	; (c734 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c70c:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c70e:	4a0a      	ldr	r2, [pc, #40]	; (c738 <z_clock_set_timeout+0x60>)
    c710:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c712:	2000      	movs	r0, #0
    c714:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c716:	4a04      	ldr	r2, [pc, #16]	; (c728 <z_clock_set_timeout+0x50>)
    c718:	4293      	cmp	r3, r2
    c71a:	bf94      	ite	ls
    c71c:	18c9      	addls	r1, r1, r3
    c71e:	1889      	addhi	r1, r1, r2
    c720:	f7ff bf40 	b.w	c5a4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c724:	2300      	movs	r3, #0
    c726:	e7e3      	b.n	c6f0 <z_clock_set_timeout+0x18>
    c728:	007fffff 	.word	0x007fffff
    c72c:	40015000 	.word	0x40015000
    c730:	20009c64 	.word	0x20009c64
    c734:	0000c58d 	.word	0x0000c58d
    c738:	20009c58 	.word	0x20009c58

0000c73c <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c73c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c73e:	f04f 0320 	mov.w	r3, #32
    c742:	f3ef 8511 	mrs	r5, BASEPRI
    c746:	f383 8811 	msr	BASEPRI, r3
    c74a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c74e:	4815      	ldr	r0, [pc, #84]	; (c7a4 <z_clock_elapsed+0x68>)
    c750:	f00d f95a 	bl	19a08 <z_spin_lock_valid>
    c754:	b940      	cbnz	r0, c768 <z_clock_elapsed+0x2c>
    c756:	4914      	ldr	r1, [pc, #80]	; (c7a8 <z_clock_elapsed+0x6c>)
    c758:	4814      	ldr	r0, [pc, #80]	; (c7ac <z_clock_elapsed+0x70>)
    c75a:	227c      	movs	r2, #124	; 0x7c
    c75c:	f00e f940 	bl	1a9e0 <printk>
    c760:	217c      	movs	r1, #124	; 0x7c
    c762:	4811      	ldr	r0, [pc, #68]	; (c7a8 <z_clock_elapsed+0x6c>)
    c764:	f00e fbe2 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
    c768:	480e      	ldr	r0, [pc, #56]	; (c7a4 <z_clock_elapsed+0x68>)
    c76a:	f00d f969 	bl	19a40 <z_spin_lock_set_owner>
    c76e:	4b10      	ldr	r3, [pc, #64]	; (c7b0 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c770:	480c      	ldr	r0, [pc, #48]	; (c7a4 <z_clock_elapsed+0x68>)
    c772:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c776:	4b0f      	ldr	r3, [pc, #60]	; (c7b4 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c778:	681b      	ldr	r3, [r3, #0]
    c77a:	1ae4      	subs	r4, r4, r3
    c77c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c780:	f00d f950 	bl	19a24 <z_spin_unlock_valid>
    c784:	b940      	cbnz	r0, c798 <z_clock_elapsed+0x5c>
    c786:	4908      	ldr	r1, [pc, #32]	; (c7a8 <z_clock_elapsed+0x6c>)
    c788:	4808      	ldr	r0, [pc, #32]	; (c7ac <z_clock_elapsed+0x70>)
    c78a:	22a7      	movs	r2, #167	; 0xa7
    c78c:	f00e f928 	bl	1a9e0 <printk>
    c790:	21a7      	movs	r1, #167	; 0xa7
    c792:	4805      	ldr	r0, [pc, #20]	; (c7a8 <z_clock_elapsed+0x6c>)
    c794:	f00e fbca 	bl	1af2c <assert_post_action>
	__asm__ volatile(
    c798:	f385 8811 	msr	BASEPRI, r5
    c79c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c7a0:	4620      	mov	r0, r4
    c7a2:	bd38      	pop	{r3, r4, r5, pc}
    c7a4:	20009c68 	.word	0x20009c68
    c7a8:	0001fae5 	.word	0x0001fae5
    c7ac:	0001faab 	.word	0x0001faab
    c7b0:	40015000 	.word	0x40015000
    c7b4:	20009c64 	.word	0x20009c64

0000c7b8 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c7b8:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c7ba:	1cc5      	adds	r5, r0, #3
    c7bc:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c7c0:	2d74      	cmp	r5, #116	; 0x74
    c7c2:	d908      	bls.n	c7d6 <user_data_alloc.constprop.0+0x1e>
    c7c4:	4917      	ldr	r1, [pc, #92]	; (c824 <user_data_alloc.constprop.0+0x6c>)
    c7c6:	4818      	ldr	r0, [pc, #96]	; (c828 <user_data_alloc.constprop.0+0x70>)
    c7c8:	2250      	movs	r2, #80	; 0x50
    c7ca:	f00e f909 	bl	1a9e0 <printk>
    c7ce:	2150      	movs	r1, #80	; 0x50
    c7d0:	4814      	ldr	r0, [pc, #80]	; (c824 <user_data_alloc.constprop.0+0x6c>)
    c7d2:	f00e fbab 	bl	1af2c <assert_post_action>
	return list->head;
    c7d6:	4c15      	ldr	r4, [pc, #84]	; (c82c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c7d8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c7dc:	b123      	cbz	r3, c7e8 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c7de:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c7e2:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c7e4:	2b74      	cmp	r3, #116	; 0x74
    c7e6:	d919      	bls.n	c81c <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c7e8:	2178      	movs	r1, #120	; 0x78
    c7ea:	2004      	movs	r0, #4
    c7ec:	f00d fffc 	bl	1a7e8 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c7f0:	b178      	cbz	r0, c812 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c7f2:	2300      	movs	r3, #0
	return list->tail;
    c7f4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c7f8:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c7fa:	b95a      	cbnz	r2, c814 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c7fc:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c800:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c804:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c808:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c80a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c80c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c80e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c812:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c814:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c816:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c81a:	e7f1      	b.n	c800 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c81c:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c820:	e7f0      	b.n	c804 <user_data_alloc.constprop.0+0x4c>
    c822:	bf00      	nop
    c824:	00020151 	.word	0x00020151
    c828:	0001faab 	.word	0x0001faab
    c82c:	20009c6c 	.word	0x20009c6c

0000c830 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c830:	4808      	ldr	r0, [pc, #32]	; (c854 <discovery_complete.constprop.0+0x24>)
    c832:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c836:	e8d3 2fef 	ldaex	r2, [r3]
    c83a:	f042 0202 	orr.w	r2, r2, #2
    c83e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c842:	2900      	cmp	r1, #0
    c844:	d1f7      	bne.n	c836 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c846:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    c84a:	681b      	ldr	r3, [r3, #0]
    c84c:	b10b      	cbz	r3, c852 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    c84e:	6841      	ldr	r1, [r0, #4]
    c850:	4718      	bx	r3
	}
}
    c852:	4770      	bx	lr
    c854:	20009c6c 	.word	0x20009c6c

0000c858 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c858:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    c85a:	4c0b      	ldr	r4, [pc, #44]	; (c888 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c85c:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    c85e:	4620      	mov	r0, r4
    c860:	f00e fc76 	bl	1b150 <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c864:	f06f 0101 	mvn.w	r1, #1
    c868:	f504 709c 	add.w	r0, r4, #312	; 0x138
    c86c:	f00e fc87 	bl	1b17e <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    c870:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c874:	689b      	ldr	r3, [r3, #8]
    c876:	b12b      	cbz	r3, c884 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    c878:	4629      	mov	r1, r5
    c87a:	6862      	ldr	r2, [r4, #4]
    c87c:	6820      	ldr	r0, [r4, #0]
	}
}
    c87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    c882:	4718      	bx	r3
}
    c884:	bd70      	pop	{r4, r5, r6, pc}
    c886:	bf00      	nop
    c888:	20009c6c 	.word	0x20009c6c

0000c88c <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c890:	4c1f      	ldr	r4, [pc, #124]	; (c910 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c892:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c894:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c898:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c89a:	2b22      	cmp	r3, #34	; 0x22
    c89c:	d907      	bls.n	c8ae <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    c89e:	2145      	movs	r1, #69	; 0x45
    c8a0:	481c      	ldr	r0, [pc, #112]	; (c914 <attr_store.constprop.0+0x88>)
    c8a2:	f00e f89d 	bl	1a9e0 <printk>
		return NULL;
    c8a6:	2500      	movs	r5, #0
}
    c8a8:	4628      	mov	r0, r5
    c8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    c8ae:	6803      	ldr	r3, [r0, #0]
    c8b0:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    c8b2:	2b02      	cmp	r3, #2
    c8b4:	d80d      	bhi.n	c8d2 <attr_store.constprop.0+0x46>
    c8b6:	4a18      	ldr	r2, [pc, #96]	; (c918 <attr_store.constprop.0+0x8c>)
    c8b8:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    c8bc:	eb06 0009 	add.w	r0, r6, r9
    c8c0:	f7ff ff7a 	bl	c7b8 <user_data_alloc.constprop.0>
	if (!attr_data) {
    c8c4:	4605      	mov	r5, r0
    c8c6:	b958      	cbnz	r0, c8e0 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    c8c8:	2145      	movs	r1, #69	; 0x45
    c8ca:	4814      	ldr	r0, [pc, #80]	; (c91c <attr_store.constprop.0+0x90>)
    c8cc:	f00e f888 	bl	1a9e0 <printk>
		return NULL;
    c8d0:	e7ea      	b.n	c8a8 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    c8d2:	2145      	movs	r1, #69	; 0x45
    c8d4:	4812      	ldr	r0, [pc, #72]	; (c920 <attr_store.constprop.0+0x94>)
    c8d6:	f00e f883 	bl	1a9e0 <printk>
    c8da:	f04f 0900 	mov.w	r9, #0
    c8de:	e7ed      	b.n	c8bc <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c8e0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c8e4:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c8e6:	1c5a      	adds	r2, r3, #1
    c8e8:	3303      	adds	r3, #3
    c8ea:	00db      	lsls	r3, r3, #3
    c8ec:	f103 0804 	add.w	r8, r3, #4
    c8f0:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    c8f4:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    c8f6:	441c      	add	r4, r3
    c8f8:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c8fa:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    c8fc:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    c8fe:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c900:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    c902:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c904:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c906:	f00f fa95 	bl	1be34 <memcpy>
	return cur_attr;
    c90a:	4645      	mov	r5, r8
    c90c:	e7cc      	b.n	c8a8 <attr_store.constprop.0+0x1c>
    c90e:	bf00      	nop
    c910:	20009c6c 	.word	0x20009c6c
    c914:	0002017c 	.word	0x0002017c
    c918:	00020347 	.word	0x00020347
    c91c:	000201b9 	.word	0x000201b9
    c920:	0002019d 	.word	0x0002019d

0000c924 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    c924:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    c926:	4604      	mov	r4, r0
    c928:	b930      	cbnz	r0, c938 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    c92a:	2145      	movs	r1, #69	; 0x45
    c92c:	480c      	ldr	r0, [pc, #48]	; (c960 <uuid_store.constprop.0+0x3c>)
    c92e:	f00e f857 	bl	1a9e0 <printk>
    c932:	4625      	mov	r5, r4
}
    c934:	4628      	mov	r0, r5
    c936:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    c938:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    c93a:	2b02      	cmp	r3, #2
    c93c:	d80a      	bhi.n	c954 <uuid_store.constprop.0+0x30>
    c93e:	4a09      	ldr	r2, [pc, #36]	; (c964 <uuid_store.constprop.0+0x40>)
    c940:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    c942:	4630      	mov	r0, r6
    c944:	f7ff ff38 	bl	c7b8 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    c948:	4632      	mov	r2, r6
    c94a:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    c94c:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    c94e:	f00f fa71 	bl	1be34 <memcpy>
	return (struct bt_uuid *)buffer;
    c952:	e7ef      	b.n	c934 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    c954:	2145      	movs	r1, #69	; 0x45
    c956:	4804      	ldr	r0, [pc, #16]	; (c968 <uuid_store.constprop.0+0x44>)
    c958:	f00e f842 	bl	1a9e0 <printk>
    c95c:	2600      	movs	r6, #0
    c95e:	e7f0      	b.n	c942 <uuid_store.constprop.0+0x1e>
    c960:	000201db 	.word	0x000201db
    c964:	00020347 	.word	0x00020347
    c968:	0002019d 	.word	0x0002019d

0000c96c <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    c96c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    c970:	4e79      	ldr	r6, [pc, #484]	; (cb58 <discovery_callback+0x1ec>)
{
    c972:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    c974:	6833      	ldr	r3, [r6, #0]
    c976:	4283      	cmp	r3, r0
    c978:	d008      	beq.n	c98c <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    c97a:	4878      	ldr	r0, [pc, #480]	; (cb5c <discovery_callback+0x1f0>)
    c97c:	2145      	movs	r1, #69	; 0x45
    c97e:	f00e f82f 	bl	1a9e0 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    c982:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    c986:	f7ff ff67 	bl	c858 <discovery_complete_error.constprop.0>
    c98a:	e031      	b.n	c9f0 <discovery_callback+0x84>
    c98c:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    c98e:	2b03      	cmp	r3, #3
    c990:	f000 80ae 	beq.w	caf0 <discovery_callback+0x184>
    c994:	d80d      	bhi.n	c9b2 <discovery_callback+0x46>
    c996:	2b02      	cmp	r3, #2
    c998:	d126      	bne.n	c9e8 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    c99a:	f240 12b3 	movw	r2, #435	; 0x1b3
    c99e:	4970      	ldr	r1, [pc, #448]	; (cb60 <discovery_callback+0x1f4>)
    c9a0:	4870      	ldr	r0, [pc, #448]	; (cb64 <discovery_callback+0x1f8>)
    c9a2:	f00e f81d 	bl	1a9e0 <printk>
    c9a6:	f240 11b3 	movw	r1, #435	; 0x1b3
    c9aa:	486d      	ldr	r0, [pc, #436]	; (cb60 <discovery_callback+0x1f4>)
    c9ac:	f00e fabe 	bl	1af2c <assert_post_action>
    c9b0:	e01e      	b.n	c9f0 <discovery_callback+0x84>
	switch (params->type) {
    c9b2:	2b05      	cmp	r3, #5
    c9b4:	d1f1      	bne.n	c99a <discovery_callback+0x2e>
	if (!attr) {
    c9b6:	2900      	cmp	r1, #0
    c9b8:	f040 8081 	bne.w	cabe <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    c9bc:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    c9c0:	2b01      	cmp	r3, #1
    c9c2:	d979      	bls.n	cab8 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    c9c4:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    c9c6:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    c9ca:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    c9cc:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    c9ce:	2303      	movs	r3, #3
    c9d0:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    c9d2:	f007 fe4f 	bl	14674 <bt_gatt_discover>
			if (err) {
    c9d6:	4604      	mov	r4, r0
    c9d8:	b150      	cbz	r0, c9f0 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    c9da:	4602      	mov	r2, r0
    c9dc:	2145      	movs	r1, #69	; 0x45
    c9de:	4862      	ldr	r0, [pc, #392]	; (cb68 <discovery_callback+0x1fc>)
    c9e0:	f00d fffe 	bl	1a9e0 <printk>
				discovery_complete_error(dm, err);
    c9e4:	4620      	mov	r0, r4
    c9e6:	e7ce      	b.n	c986 <discovery_callback+0x1a>
	if (!attr) {
    c9e8:	b921      	cbnz	r1, c9f4 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    c9ea:	4630      	mov	r0, r6
    c9ec:	f00e fbd2 	bl	1b194 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    c9f0:	2400      	movs	r4, #0
    c9f2:	e04a      	b.n	ca8a <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    c9f4:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    c9f8:	4628      	mov	r0, r5
    c9fa:	2108      	movs	r1, #8
    c9fc:	f7ff ff46 	bl	c88c <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    ca00:	2400      	movs	r4, #0
    ca02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    ca06:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    ca08:	4669      	mov	r1, sp
    ca0a:	6828      	ldr	r0, [r5, #0]
    ca0c:	f88d 4000 	strb.w	r4, [sp]
    ca10:	f8ad 3002 	strh.w	r3, [sp, #2]
    ca14:	f00f fa83 	bl	1bf1e <bt_uuid_cmp>
    ca18:	b1a8      	cbz	r0, ca46 <discovery_callback+0xda>
    ca1a:	f642 0301 	movw	r3, #10241	; 0x2801
    ca1e:	6828      	ldr	r0, [r5, #0]
    ca20:	a901      	add	r1, sp, #4
    ca22:	f88d 4004 	strb.w	r4, [sp, #4]
    ca26:	f8ad 3006 	strh.w	r3, [sp, #6]
    ca2a:	f00f fa78 	bl	1bf1e <bt_uuid_cmp>
    ca2e:	b150      	cbz	r0, ca46 <discovery_callback+0xda>
    ca30:	494b      	ldr	r1, [pc, #300]	; (cb60 <discovery_callback+0x1f4>)
    ca32:	484c      	ldr	r0, [pc, #304]	; (cb64 <discovery_callback+0x1f8>)
    ca34:	f240 1217 	movw	r2, #279	; 0x117
    ca38:	f00d ffd2 	bl	1a9e0 <printk>
    ca3c:	f240 1117 	movw	r1, #279	; 0x117
    ca40:	4847      	ldr	r0, [pc, #284]	; (cb60 <discovery_callback+0x1f4>)
    ca42:	f00e fa73 	bl	1af2c <assert_post_action>
	if (!cur_attr) {
    ca46:	b937      	cbnz	r7, ca56 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    ca48:	4848      	ldr	r0, [pc, #288]	; (cb6c <discovery_callback+0x200>)
    ca4a:	2145      	movs	r1, #69	; 0x45
    ca4c:	f00d ffc8 	bl	1a9e0 <printk>
		discovery_complete_error(dm, -ENOMEM);
    ca50:	f06f 000b 	mvn.w	r0, #11
    ca54:	e797      	b.n	c986 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    ca56:	4638      	mov	r0, r7
    ca58:	f00e fbb0 	bl	1b1bc <bt_gatt_dm_attr_service_val>
    ca5c:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    ca5e:	2208      	movs	r2, #8
    ca60:	4641      	mov	r1, r8
    ca62:	f00f f9e7 	bl	1be34 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    ca66:	6828      	ldr	r0, [r5, #0]
    ca68:	f7ff ff5c 	bl	c924 <uuid_store.constprop.0>
    ca6c:	4604      	mov	r4, r0
    ca6e:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    ca70:	b930      	cbnz	r0, ca80 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    ca72:	2145      	movs	r1, #69	; 0x45
    ca74:	483e      	ldr	r0, [pc, #248]	; (cb70 <discovery_callback+0x204>)
    ca76:	f00d ffb3 	bl	1a9e0 <printk>
		discovery_complete_error(dm, -ENOMEM);
    ca7a:	f06f 000b 	mvn.w	r0, #11
    ca7e:	e058      	b.n	cb32 <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    ca80:	88bb      	ldrh	r3, [r7, #4]
    ca82:	88aa      	ldrh	r2, [r5, #4]
    ca84:	4293      	cmp	r3, r2
    ca86:	d104      	bne.n	ca92 <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    ca88:	2401      	movs	r4, #1
}
    ca8a:	4620      	mov	r0, r4
    ca8c:	b002      	add	sp, #8
    ca8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    ca92:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    ca94:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    ca96:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    ca98:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    ca9a:	4936      	ldr	r1, [pc, #216]	; (cb74 <discovery_callback+0x208>)
    ca9c:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    ca9e:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    caa0:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    caa2:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    caa4:	f007 fde6 	bl	14674 <bt_gatt_discover>
	if (err) {
    caa8:	4602      	mov	r2, r0
    caaa:	2800      	cmp	r0, #0
    caac:	d0a0      	beq.n	c9f0 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    caae:	2145      	movs	r1, #69	; 0x45
    cab0:	4831      	ldr	r0, [pc, #196]	; (cb78 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    cab2:	f00d ff95 	bl	1a9e0 <printk>
		discovery_complete_error(dm, -ENOMEM);
    cab6:	e7e0      	b.n	ca7a <discovery_callback+0x10e>
			discovery_complete(dm);
    cab8:	f7ff feba 	bl	c830 <discovery_complete.constprop.0>
    cabc:	e798      	b.n	c9f0 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    cabe:	2400      	movs	r4, #0
    cac0:	f642 0303 	movw	r3, #10243	; 0x2803
    cac4:	6828      	ldr	r0, [r5, #0]
    cac6:	a901      	add	r1, sp, #4
    cac8:	f88d 4004 	strb.w	r4, [sp, #4]
    cacc:	f8ad 3006 	strh.w	r3, [sp, #6]
    cad0:	f00f fa25 	bl	1bf1e <bt_uuid_cmp>
    cad4:	b950      	cbnz	r0, caec <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    cad6:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    cad8:	4628      	mov	r0, r5
    cada:	f7ff fed7 	bl	c88c <attr_store.constprop.0>
    cade:	4604      	mov	r4, r0
	if (!cur_attr) {
    cae0:	2800      	cmp	r0, #0
    cae2:	d1d1      	bne.n	ca88 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    cae4:	2145      	movs	r1, #69	; 0x45
    cae6:	8a2a      	ldrh	r2, [r5, #16]
    cae8:	4824      	ldr	r0, [pc, #144]	; (cb7c <discovery_callback+0x210>)
    caea:	e7e2      	b.n	cab2 <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    caec:	4621      	mov	r1, r4
    caee:	e7f3      	b.n	cad8 <discovery_callback+0x16c>
	if (!attr) {
    caf0:	2900      	cmp	r1, #0
    caf2:	d0e1      	beq.n	cab8 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    caf4:	2300      	movs	r3, #0
    caf6:	f88d 3004 	strb.w	r3, [sp, #4]
    cafa:	f642 0303 	movw	r3, #10243	; 0x2803
    cafe:	6828      	ldr	r0, [r5, #0]
    cb00:	a901      	add	r1, sp, #4
    cb02:	f8ad 3006 	strh.w	r3, [sp, #6]
    cb06:	f00f fa0a 	bl	1bf1e <bt_uuid_cmp>
    cb0a:	b150      	cbz	r0, cb22 <discovery_callback+0x1b6>
    cb0c:	4914      	ldr	r1, [pc, #80]	; (cb60 <discovery_callback+0x1f4>)
    cb0e:	4815      	ldr	r0, [pc, #84]	; (cb64 <discovery_callback+0x1f8>)
    cb10:	f44f 72c0 	mov.w	r2, #384	; 0x180
    cb14:	f00d ff64 	bl	1a9e0 <printk>
    cb18:	f44f 71c0 	mov.w	r1, #384	; 0x180
    cb1c:	4810      	ldr	r0, [pc, #64]	; (cb60 <discovery_callback+0x1f4>)
    cb1e:	f00e fa05 	bl	1af2c <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    cb22:	8a29      	ldrh	r1, [r5, #16]
    cb24:	480c      	ldr	r0, [pc, #48]	; (cb58 <discovery_callback+0x1ec>)
    cb26:	f00e faf5 	bl	1b114 <attr_find_by_handle>
	if (!cur_attr) {
    cb2a:	4604      	mov	r4, r0
    cb2c:	b920      	cbnz	r0, cb38 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    cb2e:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    cb32:	f7ff fe91 	bl	c858 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    cb36:	e7a8      	b.n	ca8a <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    cb38:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    cb3a:	f00e fb5f 	bl	1b1fc <bt_gatt_dm_attr_chrc_val>
    cb3e:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    cb40:	4621      	mov	r1, r4
    cb42:	2208      	movs	r2, #8
    cb44:	f00f f976 	bl	1be34 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    cb48:	6828      	ldr	r0, [r5, #0]
    cb4a:	f7ff feeb 	bl	c924 <uuid_store.constprop.0>
    cb4e:	4604      	mov	r4, r0
    cb50:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    cb52:	2800      	cmp	r0, #0
    cb54:	d198      	bne.n	ca88 <discovery_callback+0x11c>
    cb56:	e790      	b.n	ca7a <discovery_callback+0x10e>
    cb58:	20009c6c 	.word	0x20009c6c
    cb5c:	000201f4 	.word	0x000201f4
    cb60:	00020151 	.word	0x00020151
    cb64:	0001faab 	.word	0x0001faab
    cb68:	000202a8 	.word	0x000202a8
    cb6c:	0002021b 	.word	0x0002021b
    cb70:	00020249 	.word	0x00020249
    cb74:	20009c74 	.word	0x20009c74
    cb78:	0002027c 	.word	0x0002027c
    cb7c:	000202d8 	.word	0x000202d8

0000cb80 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    cb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb84:	4606      	mov	r6, r0
    cb86:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    cb88:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    cb8a:	f8df 8044 	ldr.w	r8, [pc, #68]	; cbd0 <bt_gatt_dm_char_by_uuid+0x50>
    cb8e:	f8df 9044 	ldr.w	r9, [pc, #68]	; cbd4 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    cb92:	4621      	mov	r1, r4
    cb94:	4630      	mov	r0, r6
    cb96:	f00e fb49 	bl	1b22c <bt_gatt_dm_char_next>
    cb9a:	4604      	mov	r4, r0
    cb9c:	b1a0      	cbz	r0, cbc8 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    cb9e:	f00e fb2d 	bl	1b1fc <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    cba2:	4605      	mov	r5, r0
    cba4:	b950      	cbnz	r0, cbbc <bt_gatt_dm_char_by_uuid+0x3c>
    cba6:	4641      	mov	r1, r8
    cba8:	4648      	mov	r0, r9
    cbaa:	f240 12fb 	movw	r2, #507	; 0x1fb
    cbae:	f00d ff17 	bl	1a9e0 <printk>
    cbb2:	f240 11fb 	movw	r1, #507	; 0x1fb
    cbb6:	4640      	mov	r0, r8
    cbb8:	f00e f9b8 	bl	1af2c <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    cbbc:	4638      	mov	r0, r7
    cbbe:	6829      	ldr	r1, [r5, #0]
    cbc0:	f00f f9ad 	bl	1bf1e <bt_uuid_cmp>
    cbc4:	2800      	cmp	r0, #0
    cbc6:	d1e4      	bne.n	cb92 <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    cbc8:	4620      	mov	r0, r4
    cbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cbce:	bf00      	nop
    cbd0:	00020151 	.word	0x00020151
    cbd4:	0001faab 	.word	0x0001faab

0000cbd8 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    cbd8:	b570      	push	{r4, r5, r6, lr}
    cbda:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    cbdc:	4608      	mov	r0, r1
    cbde:	b119      	cbz	r1, cbe8 <bt_gatt_dm_start+0x10>
    cbe0:	7809      	ldrb	r1, [r1, #0]
    cbe2:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    cbe6:	d139      	bne.n	cc5c <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    cbe8:	2a00      	cmp	r2, #0
    cbea:	d037      	beq.n	cc5c <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cbec:	4c1e      	ldr	r4, [pc, #120]	; (cc68 <bt_gatt_dm_start+0x90>)
    cbee:	f504 769c 	add.w	r6, r4, #312	; 0x138
    cbf2:	e8d6 1fef 	ldaex	r1, [r6]
    cbf6:	f041 0c01 	orr.w	ip, r1, #1
    cbfa:	e8c6 cfee 	stlex	lr, ip, [r6]
    cbfe:	f1be 0f00 	cmp.w	lr, #0
    cc02:	d1f6      	bne.n	cbf2 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    cc04:	f011 0101 	ands.w	r1, r1, #1
    cc08:	d12b      	bne.n	cc62 <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    cc0a:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    cc0e:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    cc12:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    cc16:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    cc1a:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cc1e:	b108      	cbz	r0, cc24 <bt_gatt_dm_start+0x4c>
    cc20:	f7ff fe80 	bl	c924 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    cc24:	4b11      	ldr	r3, [pc, #68]	; (cc6c <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cc26:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    cc28:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    cc2a:	2301      	movs	r3, #1
    cc2c:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    cc2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cc32:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cc34:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    cc36:	4628      	mov	r0, r5
    cc38:	490d      	ldr	r1, [pc, #52]	; (cc70 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cc3a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    cc3c:	f007 fd1a 	bl	14674 <bt_gatt_discover>
	if (err) {
    cc40:	4604      	mov	r4, r0
    cc42:	b148      	cbz	r0, cc58 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    cc44:	4602      	mov	r2, r0
    cc46:	2145      	movs	r1, #69	; 0x45
    cc48:	480a      	ldr	r0, [pc, #40]	; (cc74 <bt_gatt_dm_start+0x9c>)
    cc4a:	f00d fec9 	bl	1a9e0 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cc4e:	f06f 0101 	mvn.w	r1, #1
    cc52:	4809      	ldr	r0, [pc, #36]	; (cc78 <bt_gatt_dm_start+0xa0>)
    cc54:	f00e fa93 	bl	1b17e <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    cc58:	4620      	mov	r0, r4
    cc5a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    cc5c:	f06f 0415 	mvn.w	r4, #21
    cc60:	e7fa      	b.n	cc58 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    cc62:	f06f 0444 	mvn.w	r4, #68	; 0x44
    cc66:	e7f7      	b.n	cc58 <bt_gatt_dm_start+0x80>
    cc68:	20009c6c 	.word	0x20009c6c
    cc6c:	0000c96d 	.word	0x0000c96d
    cc70:	20009c74 	.word	0x20009c74
    cc74:	0002031b 	.word	0x0002031b
    cc78:	20009da4 	.word	0x20009da4

0000cc7c <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    cc7c:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    cc7e:	4c06      	ldr	r4, [pc, #24]	; (cc98 <scan_default_param_set+0x1c>)
{
    cc80:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    cc82:	ad01      	add	r5, sp, #4
    cc84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cc86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cc88:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    cc8a:	4c04      	ldr	r4, [pc, #16]	; (cc9c <scan_default_param_set+0x20>)
    cc8c:	ad01      	add	r5, sp, #4
    cc8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cc90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cc92:	6026      	str	r6, [r4, #0]
}
    cc94:	b006      	add	sp, #24
    cc96:	bd70      	pop	{r4, r5, r6, pc}
    cc98:	0001e6c0 	.word	0x0001e6c0
    cc9c:	20009e00 	.word	0x20009e00

0000cca0 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    cca0:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    cca4:	4b02      	ldr	r3, [pc, #8]	; (ccb0 <scan_default_conn_param_set+0x10>)
    cca6:	4903      	ldr	r1, [pc, #12]	; (ccb4 <scan_default_conn_param_set+0x14>)
    cca8:	e9c3 1217 	strd	r1, r2, [r3, #92]	; 0x5c
}
    ccac:	4770      	bx	lr
    ccae:	bf00      	nop
    ccb0:	20009db8 	.word	0x20009db8
    ccb4:	00280018 	.word	0x00280018

0000ccb8 <uuid_check>:
{
    ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    ccbc:	4c29      	ldr	r4, [pc, #164]	; (cd64 <uuid_check+0xac>)
{
    ccbe:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    ccc0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
{
    ccc4:	4606      	mov	r6, r0
    ccc6:	9100      	str	r1, [sp, #0]
    ccc8:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    ccca:	2b00      	cmp	r3, #0
    cccc:	d03c      	beq.n	cd48 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    ccce:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    ccd0:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    ccd2:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    ccd4:	f894 b040 	ldrb.w	fp, [r4, #64]	; 0x40
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    ccd8:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
	uint8_t data_len = data->data_len;
    ccdc:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    ccde:	4557      	cmp	r7, sl
    cce0:	d30e      	bcc.n	cd00 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    cce2:	f886 5040 	strb.w	r5, [r6, #64]	; 0x40
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    cce6:	f1bb 0f00 	cmp.w	fp, #0
    ccea:	d02b      	beq.n	cd44 <uuid_check+0x8c>
    ccec:	45aa      	cmp	sl, r5
    ccee:	d12b      	bne.n	cd48 <uuid_check+0x90>
			control->filter_match_cnt++;
    ccf0:	7873      	ldrb	r3, [r6, #1]
    ccf2:	3301      	adds	r3, #1
    ccf4:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    ccf6:	2301      	movs	r3, #1
    ccf8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    ccfc:	70b3      	strb	r3, [r6, #2]
}
    ccfe:	e023      	b.n	cd48 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cd00:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    cd04:	9b00      	ldr	r3, [sp, #0]
    cd06:	9a03      	ldr	r2, [sp, #12]
    cd08:	685b      	ldr	r3, [r3, #4]
    cd0a:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    cd0c:	4b16      	ldr	r3, [pc, #88]	; (cd68 <uuid_check+0xb0>)
    cd0e:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cd12:	9b01      	ldr	r3, [sp, #4]
    cd14:	4599      	cmp	r9, r3
    cd16:	d305      	bcc.n	cd24 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    cd18:	f1bb 0f00 	cmp.w	fp, #0
    cd1c:	d1e1      	bne.n	cce2 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    cd1e:	3701      	adds	r7, #1
    cd20:	3418      	adds	r4, #24
    cd22:	e7dc      	b.n	ccde <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    cd24:	9b02      	ldr	r3, [sp, #8]
    cd26:	4642      	mov	r2, r8
    cd28:	eb03 0109 	add.w	r1, r3, r9
    cd2c:	a805      	add	r0, sp, #20
    cd2e:	f00f f924 	bl	1bf7a <bt_uuid_create>
    cd32:	2800      	cmp	r0, #0
    cd34:	d0f0      	beq.n	cd18 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    cd36:	68a1      	ldr	r1, [r4, #8]
    cd38:	a805      	add	r0, sp, #20
    cd3a:	f00f f8f0 	bl	1bf1e <bt_uuid_cmp>
    cd3e:	b130      	cbz	r0, cd4e <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cd40:	44c1      	add	r9, r8
    cd42:	e7e6      	b.n	cd12 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    cd44:	2d00      	cmp	r5, #0
    cd46:	d1d3      	bne.n	ccf0 <uuid_check+0x38>
}
    cd48:	b00b      	add	sp, #44	; 0x2c
    cd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    cd4e:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cd50:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    cd54:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    cd56:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    cd58:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    cd5a:	f1bb 0f00 	cmp.w	fp, #0
    cd5e:	d1de      	bne.n	cd1e <uuid_check+0x66>
    cd60:	e7bf      	b.n	cce2 <uuid_check+0x2a>
    cd62:	bf00      	nop
    cd64:	20009db8 	.word	0x20009db8
    cd68:	00020356 	.word	0x00020356

0000cd6c <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    cd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    cd70:	7803      	ldrb	r3, [r0, #0]
{
    cd72:	4605      	mov	r5, r0
	switch (data->type) {
    cd74:	2b19      	cmp	r3, #25
{
    cd76:	460c      	mov	r4, r1
	switch (data->type) {
    cd78:	d812      	bhi.n	cda0 <adv_data_found+0x34>
    cd7a:	2b01      	cmp	r3, #1
    cd7c:	d912      	bls.n	cda4 <adv_data_found+0x38>
    cd7e:	3b02      	subs	r3, #2
    cd80:	2b17      	cmp	r3, #23
    cd82:	d80f      	bhi.n	cda4 <adv_data_found+0x38>
    cd84:	e8df f003 	tbb	[pc, r3]
    cd88:	7f7f7979 	.word	0x7f7f7979
    cd8c:	11318181 	.word	0x11318181
    cd90:	0e0e0e0e 	.word	0x0e0e0e0e
    cd94:	0e0e0e0e 	.word	0x0e0e0e0e
    cd98:	0e0e0e0e 	.word	0x0e0e0e0e
    cd9c:	560e0e0e 	.word	0x560e0e0e
    cda0:	2bff      	cmp	r3, #255	; 0xff
    cda2:	d074      	beq.n	ce8e <adv_data_found+0x122>
	default:
		break;
	}

	return true;
}
    cda4:	2001      	movs	r0, #1
    cda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    cdaa:	4f4d      	ldr	r7, [pc, #308]	; (cee0 <adv_data_found+0x174>)
	if (is_name_filter_enabled()) {
    cdac:	787b      	ldrb	r3, [r7, #1]
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d0f8      	beq.n	cda4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cdb2:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    cdb4:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    cdb8:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cdbc:	4556      	cmp	r6, sl
    cdbe:	d2f1      	bcs.n	cda4 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    cdc0:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    cdc4:	4642      	mov	r2, r8
    cdc6:	4648      	mov	r0, r9
    cdc8:	6869      	ldr	r1, [r5, #4]
    cdca:	f00f f811 	bl	1bdf0 <strncmp>
		if (adv_name_cmp(data->data,
    cdce:	b950      	cbnz	r0, cde6 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    cdd0:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    cdd2:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    cdd6:	3301      	adds	r3, #1
    cdd8:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    cdda:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    cddc:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    cde0:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    cde2:	70a3      	strb	r3, [r4, #2]
    cde4:	e7de      	b.n	cda4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cde6:	3601      	adds	r6, #1
    cde8:	e7e8      	b.n	cdbc <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    cdea:	4e3d      	ldr	r6, [pc, #244]	; (cee0 <adv_data_found+0x174>)
	if (is_short_name_filter_enabled()) {
    cdec:	78f3      	ldrb	r3, [r6, #3]
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d0d8      	beq.n	cda4 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    cdf2:	78b3      	ldrb	r3, [r6, #2]
    cdf4:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cdf8:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    cdfc:	18f7      	adds	r7, r6, r3
    cdfe:	42be      	cmp	r6, r7
    ce00:	d0d0      	beq.n	cda4 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    ce02:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    ce06:	4543      	cmp	r3, r8
    ce08:	d812      	bhi.n	ce30 <adv_data_found+0xc4>
    ce0a:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    ce0e:	4642      	mov	r2, r8
    ce10:	4648      	mov	r0, r9
    ce12:	6869      	ldr	r1, [r5, #4]
    ce14:	f00e ffec 	bl	1bdf0 <strncmp>
	if ((data_len >= short_name_min_len) &&
    ce18:	b950      	cbnz	r0, ce30 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    ce1a:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    ce1c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    ce20:	3301      	adds	r3, #1
    ce22:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    ce24:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    ce26:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    ce2a:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    ce2e:	e7d8      	b.n	cde2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    ce30:	3621      	adds	r6, #33	; 0x21
    ce32:	e7e4      	b.n	cdfe <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    ce34:	482a      	ldr	r0, [pc, #168]	; (cee0 <adv_data_found+0x174>)
	if (is_appearance_filter_enabled()) {
    ce36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    ce3a:	2b00      	cmp	r3, #0
    ce3c:	d0b2      	beq.n	cda4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    ce3e:	2300      	movs	r3, #0
	const uint8_t counter =
    ce40:	f890 603c 	ldrb.w	r6, [r0, #60]	; 0x3c
	uint8_t data_len = data->data_len;
    ce44:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    ce46:	42b3      	cmp	r3, r6
    ce48:	d2ac      	bcs.n	cda4 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    ce4a:	2f02      	cmp	r7, #2
    ce4c:	d113      	bne.n	ce76 <adv_data_found+0x10a>
	if (decoded_appearance == *appearance) {
    ce4e:	686a      	ldr	r2, [r5, #4]
    ce50:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    ce54:	8812      	ldrh	r2, [r2, #0]
    ce56:	8f89      	ldrh	r1, [r1, #60]	; 0x3c
    ce58:	ba52      	rev16	r2, r2
    ce5a:	b292      	uxth	r2, r2
    ce5c:	4291      	cmp	r1, r2
    ce5e:	d10a      	bne.n	ce76 <adv_data_found+0x10a>
		if (find_appearance(data->data,
    ce60:	331e      	adds	r3, #30
    ce62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    ce66:	64a3      	str	r3, [r4, #72]	; 0x48
			control->filter_match_cnt++;
    ce68:	7863      	ldrb	r3, [r4, #1]
    ce6a:	3301      	adds	r3, #1
    ce6c:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    ce6e:	2301      	movs	r3, #1
    ce70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			control->filter_match = true;
    ce74:	e7b5      	b.n	cde2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    ce76:	3301      	adds	r3, #1
    ce78:	e7e5      	b.n	ce46 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    ce7a:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    ce7c:	4629      	mov	r1, r5
    ce7e:	4620      	mov	r0, r4
    ce80:	f7ff ff1a 	bl	ccb8 <uuid_check>
		break;
    ce84:	e78e      	b.n	cda4 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    ce86:	2201      	movs	r2, #1
    ce88:	e7f8      	b.n	ce7c <adv_data_found+0x110>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    ce8a:	2202      	movs	r2, #2
    ce8c:	e7f6      	b.n	ce7c <adv_data_found+0x110>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    ce8e:	f8df 8050 	ldr.w	r8, [pc, #80]	; cee0 <adv_data_found+0x174>
	if (is_manufacturer_data_filter_enabled()) {
    ce92:	f898 303f 	ldrb.w	r3, [r8, #63]	; 0x3f
    ce96:	2b00      	cmp	r3, #0
    ce98:	d084      	beq.n	cda4 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    ce9a:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    ce9c:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    ce9e:	f817 9f3e 	ldrb.w	r9, [r7, #62]!
	for (size_t i = 0; i < counter; i++) {
    cea2:	454e      	cmp	r6, r9
    cea4:	f4bf af7e 	bcs.w	cda4 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    cea8:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    ceac:	786b      	ldrb	r3, [r5, #1]
    ceae:	4293      	cmp	r3, r2
    ceb0:	d313      	bcc.n	ceda <adv_data_found+0x16e>
	if (memcmp(target_data, data, target_data_len) != 0) {
    ceb2:	4638      	mov	r0, r7
    ceb4:	6869      	ldr	r1, [r5, #4]
    ceb6:	f00e ffac 	bl	1be12 <memcmp>
    ceba:	b970      	cbnz	r0, ceda <adv_data_found+0x16e>
				md_filter->manufacturer_data[i].data_len;
    cebc:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    cec0:	6527      	str	r7, [r4, #80]	; 0x50
				md_filter->manufacturer_data[i].data_len;
    cec2:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    cec4:	f896 305e 	ldrb.w	r3, [r6, #94]	; 0x5e
    cec8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
			control->filter_match_cnt++;
    cecc:	7863      	ldrb	r3, [r4, #1]
    cece:	3301      	adds	r3, #1
    ced0:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    ced2:	2301      	movs	r3, #1
    ced4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    ced8:	e783      	b.n	cde2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    ceda:	3601      	adds	r6, #1
    cedc:	3721      	adds	r7, #33	; 0x21
    cede:	e7e0      	b.n	cea2 <adv_data_found+0x136>
    cee0:	20009db8 	.word	0x20009db8

0000cee4 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cee6:	4605      	mov	r5, r0
    cee8:	460e      	mov	r6, r1
    ceea:	4617      	mov	r7, r2
	return list->head;
    ceec:	4b08      	ldr	r3, [pc, #32]	; (cf10 <notify_filter_matched.constprop.0+0x2c>)
    ceee:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cef0:	b10c      	cbz	r4, cef6 <notify_filter_matched.constprop.0+0x12>
    cef2:	3c04      	subs	r4, #4
    cef4:	b904      	cbnz	r4, cef8 <notify_filter_matched.constprop.0+0x14>
}
    cef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    cef8:	6823      	ldr	r3, [r4, #0]
    cefa:	681b      	ldr	r3, [r3, #0]
    cefc:	b11b      	cbz	r3, cf06 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    cefe:	463a      	mov	r2, r7
    cf00:	4631      	mov	r1, r6
    cf02:	4628      	mov	r0, r5
    cf04:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cf06:	1d23      	adds	r3, r4, #4
    cf08:	d0f5      	beq.n	cef6 <notify_filter_matched.constprop.0+0x12>
	return node->next;
    cf0a:	6864      	ldr	r4, [r4, #4]
    cf0c:	e7f0      	b.n	cef0 <notify_filter_matched.constprop.0+0xc>
    cf0e:	bf00      	nop
    cf10:	20009e1c 	.word	0x20009e1c

0000cf14 <bt_scan_cb_register>:
	if (!cb) {
    cf14:	b150      	cbz	r0, cf2c <bt_scan_cb_register+0x18>
	parent->next = child;
    cf16:	2300      	movs	r3, #0
    cf18:	6043      	str	r3, [r0, #4]
	return list->tail;
    cf1a:	4b05      	ldr	r3, [pc, #20]	; (cf30 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    cf1c:	1d02      	adds	r2, r0, #4
    cf1e:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    cf20:	b911      	cbnz	r1, cf28 <bt_scan_cb_register+0x14>
	list->head = node;
    cf22:	e9c3 2200 	strd	r2, r2, [r3]
}
    cf26:	4770      	bx	lr
	parent->next = child;
    cf28:	600a      	str	r2, [r1, #0]
	list->tail = node;
    cf2a:	605a      	str	r2, [r3, #4]
}
    cf2c:	4770      	bx	lr
    cf2e:	bf00      	nop
    cf30:	20009e1c 	.word	0x20009e1c

0000cf34 <bt_scan_filter_add>:
{
    cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf36:	4604      	mov	r4, r0
	if (!data) {
    cf38:	460d      	mov	r5, r1
    cf3a:	2900      	cmp	r1, #0
    cf3c:	d063      	beq.n	d006 <bt_scan_filter_add+0xd2>
	return z_impl_k_mutex_lock(mutex, timeout);
    cf3e:	f04f 32ff 	mov.w	r2, #4294967295
    cf42:	f04f 33ff 	mov.w	r3, #4294967295
    cf46:	4831      	ldr	r0, [pc, #196]	; (d00c <bt_scan_filter_add+0xd8>)
    cf48:	f00b f8be 	bl	180c8 <z_impl_k_mutex_lock>
	switch (type) {
    cf4c:	2c03      	cmp	r4, #3
    cf4e:	d006      	beq.n	cf5e <bt_scan_filter_add+0x2a>
    cf50:	d902      	bls.n	cf58 <bt_scan_filter_add+0x24>
    cf52:	3c04      	subs	r4, #4
    cf54:	2c01      	cmp	r4, #1
    cf56:	d853      	bhi.n	d000 <bt_scan_filter_add+0xcc>
		return -ENOMEM;
    cf58:	f06f 060b 	mvn.w	r6, #11
    cf5c:	e027      	b.n	cfae <bt_scan_filter_add+0x7a>
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    cf5e:	4f2c      	ldr	r7, [pc, #176]	; (d010 <bt_scan_filter_add+0xdc>)
    cf60:	f897 4038 	ldrb.w	r4, [r7, #56]	; 0x38
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    cf64:	2c01      	cmp	r4, #1
    cf66:	d8f7      	bhi.n	cf58 <bt_scan_filter_add+0x24>
	for (size_t i = 0; i < counter; i++) {
    cf68:	2300      	movs	r3, #0
    cf6a:	429c      	cmp	r4, r3
    cf6c:	d817      	bhi.n	cf9e <bt_scan_filter_add+0x6a>
	switch (uuid->type) {
    cf6e:	782b      	ldrb	r3, [r5, #0]
    cf70:	2b01      	cmp	r3, #1
    cf72:	d021      	beq.n	cfb8 <bt_scan_filter_add+0x84>
    cf74:	2b02      	cmp	r3, #2
    cf76:	d02c      	beq.n	cfd2 <bt_scan_filter_add+0x9e>
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d141      	bne.n	d000 <bt_scan_filter_add+0xcc>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    cf7c:	4b25      	ldr	r3, [pc, #148]	; (d014 <bt_scan_filter_add+0xe0>)
    cf7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cf82:	6828      	ldr	r0, [r5, #0]
    cf84:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    cf88:	1d11      	adds	r1, r2, #4
    cf8a:	6050      	str	r0, [r2, #4]
		uuid_filter[counter].uuid =
    cf8c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	bt_scan.scan_filters.uuid.cnt++;
    cf90:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
	return 0;
    cf94:	2600      	movs	r6, #0
	bt_scan.scan_filters.uuid.cnt++;
    cf96:	3301      	adds	r3, #1
    cf98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	return 0;
    cf9c:	e007      	b.n	cfae <bt_scan_filter_add+0x7a>
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    cf9e:	4629      	mov	r1, r5
    cfa0:	68b8      	ldr	r0, [r7, #8]
    cfa2:	f00e ffbc 	bl	1bf1e <bt_uuid_cmp>
	for (size_t i = 0; i < counter; i++) {
    cfa6:	2301      	movs	r3, #1
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    cfa8:	4606      	mov	r6, r0
    cfaa:	2800      	cmp	r0, #0
    cfac:	d1dd      	bne.n	cf6a <bt_scan_filter_add+0x36>
	return z_impl_k_mutex_unlock(mutex);
    cfae:	4817      	ldr	r0, [pc, #92]	; (d00c <bt_scan_filter_add+0xd8>)
    cfb0:	f00b f956 	bl	18260 <z_impl_k_mutex_unlock>
}
    cfb4:	4630      	mov	r0, r6
    cfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    cfb8:	4a16      	ldr	r2, [pc, #88]	; (d014 <bt_scan_filter_add+0xe0>)
    cfba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cfbe:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    cfc2:	3304      	adds	r3, #4
    cfc4:	e895 0003 	ldmia.w	r5, {r0, r1}
    cfc8:	e883 0003 	stmia.w	r3, {r0, r1}
		uuid_filter[counter].uuid =
    cfcc:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
		break;
    cfd0:	e7de      	b.n	cf90 <bt_scan_filter_add+0x5c>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    cfd2:	4a10      	ldr	r2, [pc, #64]	; (d014 <bt_scan_filter_add+0xe0>)
    cfd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cfd8:	00e6      	lsls	r6, r4, #3
    cfda:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    cfde:	3404      	adds	r4, #4
    cfe0:	46a4      	mov	ip, r4
    cfe2:	f105 0e10 	add.w	lr, r5, #16
    cfe6:	4623      	mov	r3, r4
    cfe8:	6828      	ldr	r0, [r5, #0]
    cfea:	6869      	ldr	r1, [r5, #4]
    cfec:	3508      	adds	r5, #8
    cfee:	c303      	stmia	r3!, {r0, r1}
    cff0:	4575      	cmp	r5, lr
    cff2:	461c      	mov	r4, r3
    cff4:	d1f7      	bne.n	cfe6 <bt_scan_filter_add+0xb2>
    cff6:	782b      	ldrb	r3, [r5, #0]
    cff8:	7023      	strb	r3, [r4, #0]
		uuid_filter[counter].uuid =
    cffa:	f842 c006 	str.w	ip, [r2, r6]
		break;
    cffe:	e7c7      	b.n	cf90 <bt_scan_filter_add+0x5c>
		err = -EINVAL;
    d000:	f06f 0615 	mvn.w	r6, #21
		break;
    d004:	e7d3      	b.n	cfae <bt_scan_filter_add+0x7a>
		return -EINVAL;
    d006:	f06f 0615 	mvn.w	r6, #21
    d00a:	e7d3      	b.n	cfb4 <bt_scan_filter_add+0x80>
    d00c:	2000853c 	.word	0x2000853c
    d010:	20009db8 	.word	0x20009db8
    d014:	20009dc0 	.word	0x20009dc0

0000d018 <bt_scan_filter_remove_all>:
{
    d018:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    d01a:	4c0c      	ldr	r4, [pc, #48]	; (d04c <bt_scan_filter_remove_all+0x34>)
    d01c:	f04f 32ff 	mov.w	r2, #4294967295
    d020:	f04f 33ff 	mov.w	r3, #4294967295
    d024:	4620      	mov	r0, r4
    d026:	f00b f84f 	bl	180c8 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    d02a:	2200      	movs	r2, #0
    d02c:	4b08      	ldr	r3, [pc, #32]	; (d050 <bt_scan_filter_remove_all+0x38>)
    d02e:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    d030:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    d032:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    d034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	appearance_filter->cnt = 0;
    d038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	manufacturer_data_filter->cnt = 0;
    d03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	return z_impl_k_mutex_unlock(mutex);
    d040:	4620      	mov	r0, r4
}
    d042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d046:	f00b b90b 	b.w	18260 <z_impl_k_mutex_unlock>
    d04a:	bf00      	nop
    d04c:	2000853c 	.word	0x2000853c
    d050:	20009db8 	.word	0x20009db8

0000d054 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    d054:	2200      	movs	r2, #0
    d056:	4b05      	ldr	r3, [pc, #20]	; (d06c <bt_scan_filter_disable+0x18>)
    d058:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    d05a:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    d05c:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    d05e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	bt_scan.scan_filters.appearance.enabled = false;
    d062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    d066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
    d06a:	4770      	bx	lr
    d06c:	20009db8 	.word	0x20009db8

0000d070 <bt_scan_filter_enable>:
{
    d070:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    d072:	0683      	lsls	r3, r0, #26
    d074:	d025      	beq.n	d0c2 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    d076:	f7ff ffed 	bl	d054 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    d07a:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    d07e:	bf18      	it	ne
    d080:	2201      	movne	r2, #1
    d082:	4b11      	ldr	r3, [pc, #68]	; (d0c8 <bt_scan_filter_enable+0x58>)
    d084:	bf18      	it	ne
    d086:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    d088:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    d08a:	bf44      	itt	mi
    d08c:	2201      	movmi	r2, #1
    d08e:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    d090:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    d092:	bf44      	itt	mi
    d094:	2201      	movmi	r2, #1
    d096:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    d098:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    d09a:	bf44      	itt	mi
    d09c:	2201      	movmi	r2, #1
    d09e:	f883 2039 	strbmi.w	r2, [r3, #57]	; 0x39
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    d0a2:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    d0a4:	bf44      	itt	mi
    d0a6:	2201      	movmi	r2, #1
    d0a8:	f883 203d 	strbmi.w	r2, [r3, #61]	; 0x3d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    d0ac:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    d0ae:	bf48      	it	mi
    d0b0:	2201      	movmi	r2, #1
	return 0;
    d0b2:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    d0b6:	bf48      	it	mi
    d0b8:	f883 203f 	strbmi.w	r2, [r3, #63]	; 0x3f
	filters->all_mode = match_all;
    d0bc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
}
    d0c0:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d0c2:	f06f 0015 	mvn.w	r0, #21
    d0c6:	e7fb      	b.n	d0c0 <bt_scan_filter_enable+0x50>
    d0c8:	20009db8 	.word	0x20009db8

0000d0cc <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    d0cc:	b570      	push	{r4, r5, r6, lr}
    d0ce:	460e      	mov	r6, r1
    d0d0:	b086      	sub	sp, #24
    d0d2:	4605      	mov	r5, r0
	bt_scan_stop();
    d0d4:	f00e f91f 	bl	1b316 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    d0d8:	4b18      	ldr	r3, [pc, #96]	; (d13c <scan_connect_with_target.part.0+0x70>)
    d0da:	ac02      	add	r4, sp, #8
    d0dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d0de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    d0e2:	4621      	mov	r1, r4
    d0e4:	ab01      	add	r3, sp, #4
    d0e6:	4630      	mov	r0, r6
    d0e8:	4a15      	ldr	r2, [pc, #84]	; (d140 <scan_connect_with_target.part.0+0x74>)
    d0ea:	f004 fc31 	bl	11950 <bt_conn_le_create>
	if (err) {
    d0ee:	4b15      	ldr	r3, [pc, #84]	; (d144 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    d0f0:	3508      	adds	r5, #8
	return list->head;
    d0f2:	681c      	ldr	r4, [r3, #0]
	if (err) {
    d0f4:	b168      	cbz	r0, d112 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0f6:	b10c      	cbz	r4, d0fc <scan_connect_with_target.part.0+0x30>
    d0f8:	3c04      	subs	r4, #4
    d0fa:	b90c      	cbnz	r4, d100 <scan_connect_with_target.part.0+0x34>
}
    d0fc:	b006      	add	sp, #24
    d0fe:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    d100:	6823      	ldr	r3, [r4, #0]
    d102:	689b      	ldr	r3, [r3, #8]
    d104:	b10b      	cbz	r3, d10a <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    d106:	4628      	mov	r0, r5
    d108:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d10a:	1d22      	adds	r2, r4, #4
    d10c:	d0f6      	beq.n	d0fc <scan_connect_with_target.part.0+0x30>
	return node->next;
    d10e:	6864      	ldr	r4, [r4, #4]
    d110:	e7f1      	b.n	d0f6 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d112:	b91c      	cbnz	r4, d11c <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    d114:	9801      	ldr	r0, [sp, #4]
    d116:	f004 fa5d 	bl	115d4 <bt_conn_unref>
    d11a:	e7ef      	b.n	d0fc <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    d11c:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d11e:	3c04      	subs	r4, #4
    d120:	2c00      	cmp	r4, #0
    d122:	d0f7      	beq.n	d114 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    d124:	6823      	ldr	r3, [r4, #0]
    d126:	68db      	ldr	r3, [r3, #12]
    d128:	b113      	cbz	r3, d130 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    d12a:	4631      	mov	r1, r6
    d12c:	4628      	mov	r0, r5
    d12e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d130:	1d23      	adds	r3, r4, #4
    d132:	d0ef      	beq.n	d114 <scan_connect_with_target.part.0+0x48>
	return node->next;
    d134:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d136:	2c00      	cmp	r4, #0
    d138:	d1f1      	bne.n	d11e <scan_connect_with_target.part.0+0x52>
    d13a:	e7eb      	b.n	d114 <scan_connect_with_target.part.0+0x48>
    d13c:	0001e6d4 	.word	0x0001e6d4
    d140:	20009e14 	.word	0x20009e14
    d144:	20009e1c 	.word	0x20009e1c

0000d148 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d14c:	4c54      	ldr	r4, [pc, #336]	; (d2a0 <scan_recv+0x158>)
{
    d14e:	b097      	sub	sp, #92	; 0x5c
	memset(&scan_control, 0, sizeof(scan_control));
    d150:	2258      	movs	r2, #88	; 0x58
{
    d152:	4606      	mov	r6, r0
    d154:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    d156:	4668      	mov	r0, sp
    d158:	2100      	movs	r1, #0
    d15a:	f00e fe96 	bl	1be8a <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d15e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	return bt_scan.scan_filters.addr.enabled;
    d162:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d164:	f88d 3003 	strb.w	r3, [sp, #3]
	control->filter_cnt = 0;
    d168:	2300      	movs	r3, #0
    d16a:	f88d 3000 	strb.w	r3, [sp]
	if (is_addr_filter_enabled()) {
    d16e:	b112      	cbz	r2, d176 <scan_recv+0x2e>
		control->filter_cnt++;
    d170:	2301      	movs	r3, #1
    d172:	f88d 3000 	strb.w	r3, [sp]
	if (is_name_filter_enabled()) {
    d176:	7863      	ldrb	r3, [r4, #1]
    d178:	b123      	cbz	r3, d184 <scan_recv+0x3c>
		control->filter_cnt++;
    d17a:	f89d 3000 	ldrb.w	r3, [sp]
    d17e:	3301      	adds	r3, #1
    d180:	f88d 3000 	strb.w	r3, [sp]
	if (is_short_name_filter_enabled()) {
    d184:	78e3      	ldrb	r3, [r4, #3]
    d186:	b123      	cbz	r3, d192 <scan_recv+0x4a>
		control->filter_cnt++;
    d188:	f89d 3000 	ldrb.w	r3, [sp]
    d18c:	3301      	adds	r3, #1
    d18e:	f88d 3000 	strb.w	r3, [sp]
	if (is_uuid_filter_enabled()) {
    d192:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d196:	b123      	cbz	r3, d1a2 <scan_recv+0x5a>
		control->filter_cnt++;
    d198:	f89d 3000 	ldrb.w	r3, [sp]
    d19c:	3301      	adds	r3, #1
    d19e:	f88d 3000 	strb.w	r3, [sp]
	if (is_appearance_filter_enabled()) {
    d1a2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    d1a6:	b123      	cbz	r3, d1b2 <scan_recv+0x6a>
		control->filter_cnt++;
    d1a8:	f89d 3000 	ldrb.w	r3, [sp]
    d1ac:	3301      	adds	r3, #1
    d1ae:	f88d 3000 	strb.w	r3, [sp]
	if (is_manufacturer_data_filter_enabled()) {
    d1b2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    d1b6:	b123      	cbz	r3, d1c2 <scan_recv+0x7a>
		control->filter_cnt++;
    d1b8:	f89d 3000 	ldrb.w	r3, [sp]
    d1bc:	3301      	adds	r3, #1
    d1be:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    d1c2:	7a33      	ldrb	r3, [r6, #8]
    d1c4:	f003 0301 	and.w	r3, r3, #1
    d1c8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    d1cc:	b1ea      	cbz	r2, d20a <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    d1ce:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    d1d2:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    d1d6:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    d1da:	4f32      	ldr	r7, [pc, #200]	; (d2a4 <scan_recv+0x15c>)
    d1dc:	45c8      	cmp	r8, r9
    d1de:	d214      	bcs.n	d20a <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    d1e0:	4639      	mov	r1, r7
    d1e2:	2207      	movs	r2, #7
    d1e4:	4650      	mov	r0, sl
    d1e6:	f00e fe14 	bl	1be12 <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    d1ea:	46bb      	mov	fp, r7
    d1ec:	3707      	adds	r7, #7
    d1ee:	2800      	cmp	r0, #0
    d1f0:	d13a      	bne.n	d268 <scan_recv+0x120>
			control->filter_match_cnt++;
    d1f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
			control->filter_status.addr.addr = &addr[i];
    d1f6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
			control->filter_match_cnt++;
    d1fa:	3301      	adds	r3, #1
    d1fc:	f88d 3001 	strb.w	r3, [sp, #1]
			control->filter_status.addr.match = true;
    d200:	2301      	movs	r3, #1
    d202:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
			control->filter_match = true;
    d206:	f88d 3002 	strb.w	r3, [sp, #2]
	state->offset = net_buf_simple_headroom(buf);
    d20a:	4628      	mov	r0, r5
    d20c:	f010 f945 	bl	1d49a <net_buf_simple_headroom>
    d210:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    d212:	466a      	mov	r2, sp
    d214:	4628      	mov	r0, r5
    d216:	4924      	ldr	r1, [pc, #144]	; (d2a8 <scan_recv+0x160>)
	state->len = buf->len;
    d218:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    d21c:	f002 fc94 	bl	fb48 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    d220:	4b22      	ldr	r3, [pc, #136]	; (d2ac <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    d222:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    d224:	e9cd 3503 	strd	r3, r5, [sp, #12]
	if (control->all_mode &&
    d228:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d22c:	fa10 f787 	uxtah	r7, r0, r7
    d230:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    d232:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    d236:	9602      	str	r6, [sp, #8]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    d238:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    d23a:	b1c3      	cbz	r3, d26e <scan_recv+0x126>
    d23c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    d240:	f89d 3000 	ldrb.w	r3, [sp]
    d244:	429a      	cmp	r2, r3
    d246:	d116      	bne.n	d276 <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    d248:	f89d 2004 	ldrb.w	r2, [sp, #4]
    d24c:	a905      	add	r1, sp, #20
    d24e:	a802      	add	r0, sp, #8
    d250:	f7ff fe48 	bl	cee4 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    d254:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    d258:	b11b      	cbz	r3, d262 <scan_recv+0x11a>
    d25a:	4629      	mov	r1, r5
    d25c:	4668      	mov	r0, sp
    d25e:	f7ff ff35 	bl	d0cc <scan_connect_with_target.part.0>
}
    d262:	b017      	add	sp, #92	; 0x5c
    d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    d268:	f108 0801 	add.w	r8, r8, #1
    d26c:	e7b6      	b.n	d1dc <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    d26e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d272:	2b00      	cmp	r3, #0
    d274:	d1e8      	bne.n	d248 <scan_recv+0x100>
	return list->head;
    d276:	4b0e      	ldr	r3, [pc, #56]	; (d2b0 <scan_recv+0x168>)
    d278:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d27a:	2c00      	cmp	r4, #0
    d27c:	d0f1      	beq.n	d262 <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    d27e:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d282:	3c04      	subs	r4, #4
    d284:	2c00      	cmp	r4, #0
    d286:	d0ec      	beq.n	d262 <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    d288:	6823      	ldr	r3, [r4, #0]
    d28a:	685b      	ldr	r3, [r3, #4]
    d28c:	b113      	cbz	r3, d294 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    d28e:	4629      	mov	r1, r5
    d290:	a802      	add	r0, sp, #8
    d292:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d294:	1d23      	adds	r3, r4, #4
    d296:	d0e4      	beq.n	d262 <scan_recv+0x11a>
	return node->next;
    d298:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d29a:	2c00      	cmp	r4, #0
    d29c:	d1f1      	bne.n	d282 <scan_recv+0x13a>
    d29e:	e7e0      	b.n	d262 <scan_recv+0x11a>
    d2a0:	20009db8 	.word	0x20009db8
    d2a4:	20009dbc 	.word	0x20009dbc
    d2a8:	0000cd6d 	.word	0x0000cd6d
    d2ac:	20009e14 	.word	0x20009e14
    d2b0:	20009e1c 	.word	0x20009e1c

0000d2b4 <bt_scan_init>:
{
    d2b4:	b570      	push	{r4, r5, r6, lr}
    d2b6:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d2b8:	4c14      	ldr	r4, [pc, #80]	; (d30c <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    d2ba:	4815      	ldr	r0, [pc, #84]	; (d310 <bt_scan_init+0x5c>)
    d2bc:	f003 fe70 	bl	10fa0 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d2c0:	2244      	movs	r2, #68	; 0x44
    d2c2:	2100      	movs	r1, #0
    d2c4:	4620      	mov	r0, r4
    d2c6:	f00e fde0 	bl	1be8a <memset>
	if (init) {
    d2ca:	b1be      	cbz	r6, d2fc <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    d2cc:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    d2ce:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    d2d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (init->scan_param) {
    d2d4:	b15d      	cbz	r5, d2ee <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    d2d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d2d8:	3448      	adds	r4, #72	; 0x48
    d2da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d2dc:	682b      	ldr	r3, [r5, #0]
    d2de:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    d2e0:	68b2      	ldr	r2, [r6, #8]
    d2e2:	b13a      	cbz	r2, d2f4 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    d2e4:	4b0b      	ldr	r3, [pc, #44]	; (d314 <bt_scan_init+0x60>)
    d2e6:	6810      	ldr	r0, [r2, #0]
    d2e8:	6851      	ldr	r1, [r2, #4]
    d2ea:	c303      	stmia	r3!, {r0, r1}
}
    d2ec:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    d2ee:	f7ff fcc5 	bl	cc7c <scan_default_param_set>
    d2f2:	e7f5      	b.n	d2e0 <bt_scan_init+0x2c>
}
    d2f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    d2f8:	f7ff bcd2 	b.w	cca0 <scan_default_conn_param_set>
		scan_default_param_set();
    d2fc:	f7ff fcbe 	bl	cc7c <scan_default_param_set>
		scan_default_conn_param_set();
    d300:	f7ff fcce 	bl	cca0 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    d304:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
}
    d308:	e7f0      	b.n	d2ec <bt_scan_init+0x38>
    d30a:	bf00      	nop
    d30c:	20009db8 	.word	0x20009db8
    d310:	20008248 	.word	0x20008248
    d314:	20009e14 	.word	0x20009e14

0000d318 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    d318:	b108      	cbz	r0, d31e <bt_scan_start+0x6>
    d31a:	2801      	cmp	r0, #1
    d31c:	d106      	bne.n	d32c <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d31e:	4b05      	ldr	r3, [pc, #20]	; (d334 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d320:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d322:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d326:	4804      	ldr	r0, [pc, #16]	; (d338 <bt_scan_start+0x20>)
    d328:	f003 bdc0 	b.w	10eac <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    d32c:	f06f 0015 	mvn.w	r0, #21
    d330:	4770      	bx	lr
    d332:	bf00      	nop
    d334:	20009db8 	.word	0x20009db8
    d338:	20009e00 	.word	0x20009e00

0000d33c <read_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t read_process(struct bt_conn *conn, uint8_t err,
			     struct bt_gatt_read_params *params,
			     const void *data, uint16_t length)
{
    d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t battery_level = BT_BAS_VAL_INVALID;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);

	if (!bas->read_cb) {
    d33e:	6e17      	ldr	r7, [r2, #96]	; 0x60
{
    d340:	460d      	mov	r5, r1
    d342:	4614      	mov	r4, r2
	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);
    d344:	f1a2 061c 	sub.w	r6, r2, #28
	if (!bas->read_cb) {
    d348:	b937      	cbnz	r7, d358 <read_process+0x1c>
		LOG_ERR("No read callback present");
    d34a:	2145      	movs	r1, #69	; 0x45
    d34c:	4814      	ldr	r0, [pc, #80]	; (d3a0 <read_process+0x64>)
    d34e:	f00d fb47 	bl	1a9e0 <printk>
			bas->battery_level = battery_level;
			bas->read_cb(bas, battery_level, err);
		}
	}

	bas->read_cb = NULL;
    d352:	2000      	movs	r0, #0
    d354:	6620      	str	r0, [r4, #96]	; 0x60

	return BT_GATT_ITER_STOP;
}
    d356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else  if (err) {
    d358:	b151      	cbz	r1, d370 <read_process+0x34>
		LOG_ERR("Read value error: %d", err);
    d35a:	460a      	mov	r2, r1
    d35c:	4811      	ldr	r0, [pc, #68]	; (d3a4 <read_process+0x68>)
    d35e:	2145      	movs	r1, #69	; 0x45
    d360:	f00d fb3e 	bl	1a9e0 <printk>
			bas->read_cb(bas, BT_BAS_VAL_INVALID, err);
    d364:	462a      	mov	r2, r5
    d366:	21ff      	movs	r1, #255	; 0xff
    d368:	4630      	mov	r0, r6
    d36a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d36c:	4798      	blx	r3
    d36e:	e7f0      	b.n	d352 <read_process+0x16>
	} else if (!data || length != 1) {
    d370:	b11b      	cbz	r3, d37a <read_process+0x3e>
    d372:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    d376:	2a01      	cmp	r2, #1
    d378:	d005      	beq.n	d386 <read_process+0x4a>
		bas->read_cb(bas,  battery_level, -EMSGSIZE);
    d37a:	f06f 0223 	mvn.w	r2, #35	; 0x23
    d37e:	21ff      	movs	r1, #255	; 0xff
			bas->read_cb(bas, battery_level, err);
    d380:	4630      	mov	r0, r6
    d382:	47b8      	blx	r7
    d384:	e7e5      	b.n	d352 <read_process+0x16>
		battery_level = bdata[0];
    d386:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    d388:	2964      	cmp	r1, #100	; 0x64
    d38a:	d904      	bls.n	d396 <read_process+0x5a>
			LOG_ERR("Unexpected read value.");
    d38c:	2145      	movs	r1, #69	; 0x45
    d38e:	4806      	ldr	r0, [pc, #24]	; (d3a8 <read_process+0x6c>)
    d390:	f00d fb26 	bl	1a9e0 <printk>
    d394:	e7e6      	b.n	d364 <read_process+0x28>
			bas->read_cb(bas, battery_level, err);
    d396:	462a      	mov	r2, r5
			bas->battery_level = battery_level;
    d398:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
			bas->read_cb(bas, battery_level, err);
    d39c:	e7f0      	b.n	d380 <read_process+0x44>
    d39e:	bf00      	nop
    d3a0:	00020359 	.word	0x00020359
    d3a4:	00020377 	.word	0x00020377
    d3a8:	00020391 	.word	0x00020391

0000d3ac <bas_read_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void bas_read_value_handler(struct k_work *work)
{
    d3ac:	4601      	mov	r1, r0
	struct bt_bas_client *bas;

	bas = CONTAINER_OF(work, struct bt_bas_client,
			     periodic_read.read_work);

	if (!bas->conn) {
    d3ae:	f850 0c30 	ldr.w	r0, [r0, #-48]
{
    d3b2:	b508      	push	{r3, lr}
	if (!bas->conn) {
    d3b4:	b928      	cbnz	r0, d3c2 <bas_read_value_handler+0x16>
	 */
	if (err) {
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
			err);
	}
}
    d3b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("No connection object.");
    d3ba:	2145      	movs	r1, #69	; 0x45
    d3bc:	480b      	ldr	r0, [pc, #44]	; (d3ec <bas_read_value_handler+0x40>)
    d3be:	f00d bb0f 	b.w	1a9e0 <printk>
	bas->periodic_read.params.func = periodic_read_process;
    d3c2:	4b0b      	ldr	r3, [pc, #44]	; (d3f0 <bas_read_value_handler+0x44>)
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    d3c4:	3130      	adds	r1, #48	; 0x30
	bas->periodic_read.params.func = periodic_read_process;
    d3c6:	600b      	str	r3, [r1, #0]
	bas->periodic_read.params.handle_count  = 1;
    d3c8:	2301      	movs	r3, #1
    d3ca:	604b      	str	r3, [r1, #4]
	bas->periodic_read.params.single.handle = bas->val_handle;
    d3cc:	8c0b      	ldrh	r3, [r1, #32]
    d3ce:	810b      	strh	r3, [r1, #8]
	bas->periodic_read.params.single.offset = 0;
    d3d0:	2300      	movs	r3, #0
    d3d2:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    d3d4:	f007 fcf8 	bl	14dc8 <bt_gatt_read>
	if (err) {
    d3d8:	4602      	mov	r2, r0
    d3da:	b128      	cbz	r0, d3e8 <bas_read_value_handler+0x3c>
}
    d3dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
    d3e0:	2145      	movs	r1, #69	; 0x45
    d3e2:	4804      	ldr	r0, [pc, #16]	; (d3f4 <bas_read_value_handler+0x48>)
    d3e4:	f00d bafc 	b.w	1a9e0 <printk>
}
    d3e8:	bd08      	pop	{r3, pc}
    d3ea:	bf00      	nop
    d3ec:	000203ad 	.word	0x000203ad
    d3f0:	0000d3f9 	.word	0x0000d3f9
    d3f4:	000203c8 	.word	0x000203c8

0000d3f8 <periodic_read_process>:
{
    d3f8:	b538      	push	{r3, r4, r5, lr}
    d3fa:	4614      	mov	r4, r2
	if (!bas->notify_cb) {
    d3fc:	6992      	ldr	r2, [r2, #24]
    d3fe:	b922      	cbnz	r2, d40a <periodic_read_process+0x12>
		LOG_ERR("No notification callback present");
    d400:	2145      	movs	r1, #69	; 0x45
    d402:	4826      	ldr	r0, [pc, #152]	; (d49c <periodic_read_process+0xa4>)
		LOG_ERR("Unexpected read value size.");
    d404:	f00d faec 	bl	1a9e0 <printk>
    d408:	e005      	b.n	d416 <periodic_read_process+0x1e>
	} else  if (err) {
    d40a:	b359      	cbz	r1, d464 <periodic_read_process+0x6c>
		LOG_ERR("Read value error: %d", err);
    d40c:	460a      	mov	r2, r1
    d40e:	4824      	ldr	r0, [pc, #144]	; (d4a0 <periodic_read_process+0xa8>)
    d410:	2145      	movs	r1, #69	; 0x45
    d412:	f00d fae5 	bl	1a9e0 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d416:	f104 0314 	add.w	r3, r4, #20
    d41a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(&bas->periodic_read.process,
    d41e:	079b      	lsls	r3, r3, #30
    d420:	d51e      	bpl.n	d460 <periodic_read_process+0x68>
		k_delayed_work_submit(&bas->periodic_read.read_work,
    d422:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
				      K_MSEC(atomic_get(
    d426:	3410      	adds	r4, #16
    d428:	e8d4 3faf 	lda	r3, [r4]
    d42c:	2b00      	cmp	r3, #0
    d42e:	dd31      	ble.n	d494 <periodic_read_process+0x9c>
    d430:	e8d4 0faf 	lda	r0, [r4]
    d434:	17c1      	asrs	r1, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d436:	f240 33e7 	movw	r3, #999	; 0x3e7
    d43a:	03c9      	lsls	r1, r1, #15
    d43c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    d440:	03c0      	lsls	r0, r0, #15
    d442:	18c0      	adds	r0, r0, r3
    d444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d448:	f04f 0300 	mov.w	r3, #0
    d44c:	f141 0100 	adc.w	r1, r1, #0
    d450:	f7fb fb6c 	bl	8b2c <__aeabi_uldivmod>
    d454:	4602      	mov	r2, r0
    d456:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d458:	4812      	ldr	r0, [pc, #72]	; (d4a4 <periodic_read_process+0xac>)
    d45a:	4629      	mov	r1, r5
    d45c:	f00c fb4a 	bl	19af4 <k_delayed_work_submit_to_queue>
}
    d460:	2000      	movs	r0, #0
    d462:	bd38      	pop	{r3, r4, r5, pc}
	} else if (!data || length != 1) {
    d464:	b11b      	cbz	r3, d46e <periodic_read_process+0x76>
    d466:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    d46a:	2901      	cmp	r1, #1
    d46c:	d002      	beq.n	d474 <periodic_read_process+0x7c>
		LOG_ERR("Unexpected read value size.");
    d46e:	2145      	movs	r1, #69	; 0x45
    d470:	480d      	ldr	r0, [pc, #52]	; (d4a8 <periodic_read_process+0xb0>)
    d472:	e7c7      	b.n	d404 <periodic_read_process+0xc>
		battery_level = bdata[0];
    d474:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    d476:	2964      	cmp	r1, #100	; 0x64
    d478:	d902      	bls.n	d480 <periodic_read_process+0x88>
			LOG_ERR("Unexpected read value.");
    d47a:	2145      	movs	r1, #69	; 0x45
    d47c:	480b      	ldr	r0, [pc, #44]	; (d4ac <periodic_read_process+0xb4>)
    d47e:	e7c1      	b.n	d404 <periodic_read_process+0xc>
		} else if (bas->battery_level != battery_level) {
    d480:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    d484:	428b      	cmp	r3, r1
    d486:	d0c6      	beq.n	d416 <periodic_read_process+0x1e>
			bas->battery_level = battery_level;
    d488:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			bas->notify_cb(bas, battery_level);
    d48c:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
    d490:	4790      	blx	r2
    d492:	e7c0      	b.n	d416 <periodic_read_process+0x1e>
				      K_MSEC(atomic_get(
    d494:	2000      	movs	r0, #0
    d496:	4601      	mov	r1, r0
    d498:	e7cd      	b.n	d436 <periodic_read_process+0x3e>
    d49a:	bf00      	nop
    d49c:	00020402 	.word	0x00020402
    d4a0:	00020377 	.word	0x00020377
    d4a4:	200098e0 	.word	0x200098e0
    d4a8:	00020428 	.word	0x00020428
    d4ac:	00020391 	.word	0x00020391

0000d4b0 <bt_bas_client_init>:
	bas->notify = false;
}


void bt_bas_client_init(struct bt_bas_client *bas)
{
    d4b0:	b510      	push	{r4, lr}
	memset(bas, 0, sizeof(*bas));
    d4b2:	2288      	movs	r2, #136	; 0x88
    d4b4:	2100      	movs	r1, #0
{
    d4b6:	4604      	mov	r4, r0
	memset(bas, 0, sizeof(*bas));
    d4b8:	f00e fce7 	bl	1be8a <memset>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d4bc:	23ff      	movs	r3, #255	; 0xff
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d4be:	2230      	movs	r2, #48	; 0x30
    d4c0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    d4c4:	2100      	movs	r1, #0
    d4c6:	18a0      	adds	r0, r4, r2
    d4c8:	f00e fcdf 	bl	1be8a <memset>
    d4cc:	4b01      	ldr	r3, [pc, #4]	; (d4d4 <bt_bas_client_init+0x24>)
    d4ce:	6363      	str	r3, [r4, #52]	; 0x34

	k_delayed_work_init(&bas->periodic_read.read_work,
			    bas_read_value_handler);
}
    d4d0:	bd10      	pop	{r4, pc}
    d4d2:	bf00      	nop
    d4d4:	0000d3ad 	.word	0x0000d3ad

0000d4d8 <bt_bas_handles_assign>:


int bt_bas_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_bas_client *bas)
{
    d4d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d4dc:	460c      	mov	r4, r1
    d4de:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    d4e0:	f00d fea2 	bl	1b228 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    d4e4:	f00d fe6a 	bl	1b1bc <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_BAS)) {
    d4e8:	2300      	movs	r3, #0
    d4ea:	6800      	ldr	r0, [r0, #0]
    d4ec:	f88d 300c 	strb.w	r3, [sp, #12]
    d4f0:	f641 030f 	movw	r3, #6159	; 0x180f
    d4f4:	a903      	add	r1, sp, #12
    d4f6:	f8ad 300e 	strh.w	r3, [sp, #14]
    d4fa:	f00e fd10 	bl	1bf1e <bt_uuid_cmp>
    d4fe:	4605      	mov	r5, r0
    d500:	b128      	cbz	r0, d50e <bt_bas_handles_assign+0x36>
		return -ENOTSUP;
    d502:	f06f 0522 	mvn.w	r5, #34	; 0x22
	}

	/* Finally - save connection object */
	bas->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    d506:	4628      	mov	r0, r5
    d508:	b004      	add	sp, #16
    d50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_delayed_work_cancel(&bas->periodic_read.read_work);
    d50e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    d512:	f00c fb5f 	bl	19bd4 <k_delayed_work_cancel>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d516:	23ff      	movs	r3, #255	; 0xff
    d518:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d51c:	f642 2319 	movw	r3, #10777	; 0x2a19
    d520:	4630      	mov	r0, r6
	bas->read_cb = NULL;
    d522:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	bas->conn = NULL;
    d526:	6025      	str	r5, [r4, #0]
	bas->val_handle = 0;
    d528:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	bas->notify = false;
    d52c:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d530:	a901      	add	r1, sp, #4
    d532:	f88d 5004 	strb.w	r5, [sp, #4]
    d536:	f8ad 3006 	strh.w	r3, [sp, #6]
    d53a:	f7ff fb21 	bl	cb80 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    d53e:	4607      	mov	r7, r0
    d540:	b930      	cbnz	r0, d550 <bt_bas_handles_assign+0x78>
		LOG_ERR("No battery level characteristic found.");
    d542:	2145      	movs	r1, #69	; 0x45
    d544:	4824      	ldr	r0, [pc, #144]	; (d5d8 <bt_bas_handles_assign+0x100>)
		LOG_ERR("No battery level characteristic value found.");
    d546:	f00d fa4b 	bl	1a9e0 <printk>
		return -EINVAL;
    d54a:	f06f 0515 	mvn.w	r5, #21
    d54e:	e7da      	b.n	d506 <bt_bas_handles_assign+0x2e>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
    d550:	f00d fe54 	bl	1b1fc <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
    d554:	4680      	mov	r8, r0
    d556:	b950      	cbnz	r0, d56e <bt_bas_handles_assign+0x96>
    d558:	4920      	ldr	r1, [pc, #128]	; (d5dc <bt_bas_handles_assign+0x104>)
    d55a:	4821      	ldr	r0, [pc, #132]	; (d5e0 <bt_bas_handles_assign+0x108>)
    d55c:	f44f 7285 	mov.w	r2, #266	; 0x10a
    d560:	f00d fa3e 	bl	1a9e0 <printk>
    d564:	f44f 7185 	mov.w	r1, #266	; 0x10a
    d568:	481c      	ldr	r0, [pc, #112]	; (d5dc <bt_bas_handles_assign+0x104>)
    d56a:	f00d fcdf 	bl	1af2c <assert_post_action>
	bas->properties = chrc_val->properties;
    d56e:	f898 3006 	ldrb.w	r3, [r8, #6]
					    BT_UUID_BAS_BATTERY_LEVEL);
    d572:	f04f 0800 	mov.w	r8, #0
	bas->properties = chrc_val->properties;
    d576:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
					    BT_UUID_BAS_BATTERY_LEVEL);
    d57a:	f642 2319 	movw	r3, #10777	; 0x2a19
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d57e:	4639      	mov	r1, r7
    d580:	4630      	mov	r0, r6
    d582:	aa02      	add	r2, sp, #8
					    BT_UUID_BAS_BATTERY_LEVEL);
    d584:	f88d 8008 	strb.w	r8, [sp, #8]
    d588:	f8ad 300a 	strh.w	r3, [sp, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d58c:	f00d fe99 	bl	1b2c2 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d590:	b910      	cbnz	r0, d598 <bt_bas_handles_assign+0xc0>
		LOG_ERR("No battery level characteristic value found.");
    d592:	2145      	movs	r1, #69	; 0x45
    d594:	4813      	ldr	r0, [pc, #76]	; (d5e4 <bt_bas_handles_assign+0x10c>)
    d596:	e7d6      	b.n	d546 <bt_bas_handles_assign+0x6e>
	bas->val_handle = gatt_desc->handle;
    d598:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d59a:	4639      	mov	r1, r7
	bas->val_handle = gatt_desc->handle;
    d59c:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d5a0:	f642 1302 	movw	r3, #10498	; 0x2902
    d5a4:	4630      	mov	r0, r6
    d5a6:	aa03      	add	r2, sp, #12
    d5a8:	f88d 800c 	strb.w	r8, [sp, #12]
    d5ac:	f8ad 300e 	strh.w	r3, [sp, #14]
    d5b0:	f00d fe87 	bl	1b2c2 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d5b4:	b940      	cbnz	r0, d5c8 <bt_bas_handles_assign+0xf0>
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
    d5b6:	2149      	movs	r1, #73	; 0x49
    d5b8:	480b      	ldr	r0, [pc, #44]	; (d5e8 <bt_bas_handles_assign+0x110>)
    d5ba:	f00d fa11 	bl	1a9e0 <printk>
	bas->conn = bt_gatt_dm_conn_get(dm);
    d5be:	4630      	mov	r0, r6
    d5c0:	f00d fe30 	bl	1b224 <bt_gatt_dm_conn_get>
    d5c4:	6020      	str	r0, [r4, #0]
	return 0;
    d5c6:	e79e      	b.n	d506 <bt_bas_handles_assign+0x2e>
		bas->notify = true;
    d5c8:	2301      	movs	r3, #1
    d5ca:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
		bas->ccc_handle = gatt_desc->handle;
    d5ce:	8883      	ldrh	r3, [r0, #4]
    d5d0:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    d5d4:	e7f3      	b.n	d5be <bt_bas_handles_assign+0xe6>
    d5d6:	bf00      	nop
    d5d8:	00020449 	.word	0x00020449
    d5dc:	00020475 	.word	0x00020475
    d5e0:	0001faab 	.word	0x0001faab
    d5e4:	000204ac 	.word	0x000204ac
    d5e8:	000204de 	.word	0x000204de

0000d5ec <bt_bas_read_battery_level>:
	return bas->conn;
}


int bt_bas_read_battery_level(struct bt_bas_client *bas, bt_bas_read_cb func)
{
    d5ec:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!bas || !func) {
    d5ee:	4604      	mov	r4, r0
    d5f0:	b1a0      	cbz	r0, d61c <bt_bas_read_battery_level+0x30>
    d5f2:	b199      	cbz	r1, d61c <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (!bas->conn) {
    d5f4:	6800      	ldr	r0, [r0, #0]
    d5f6:	b188      	cbz	r0, d61c <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (bas->read_cb) {
    d5f8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    d5fa:	b995      	cbnz	r5, d622 <bt_bas_read_battery_level+0x36>
		return -EBUSY;
	}
	bas->read_cb = func;
	bas->read_params.func = read_process;
    d5fc:	4b0a      	ldr	r3, [pc, #40]	; (d628 <bt_bas_read_battery_level+0x3c>)
	bas->read_cb = func;
    d5fe:	67e1      	str	r1, [r4, #124]	; 0x7c
	bas->read_params.func = read_process;
    d600:	61e3      	str	r3, [r4, #28]
	bas->read_params.handle_count  = 1;
    d602:	2301      	movs	r3, #1
    d604:	6223      	str	r3, [r4, #32]
	bas->read_params.single.handle = bas->val_handle;
    d606:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
	bas->read_params.single.offset = 0;
    d60a:	84e5      	strh	r5, [r4, #38]	; 0x26
	bas->read_params.single.handle = bas->val_handle;
    d60c:	84a3      	strh	r3, [r4, #36]	; 0x24

	err = bt_gatt_read(bas->conn, &bas->read_params);
    d60e:	f104 011c 	add.w	r1, r4, #28
    d612:	f007 fbd9 	bl	14dc8 <bt_gatt_read>
	if (err) {
    d616:	b100      	cbz	r0, d61a <bt_bas_read_battery_level+0x2e>
		bas->read_cb = NULL;
    d618:	67e5      	str	r5, [r4, #124]	; 0x7c
		return err;
	}
	return 0;
}
    d61a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d61c:	f06f 0015 	mvn.w	r0, #21
    d620:	e7fb      	b.n	d61a <bt_bas_read_battery_level+0x2e>
		return -EBUSY;
    d622:	f06f 000f 	mvn.w	r0, #15
    d626:	e7f8      	b.n	d61a <bt_bas_read_battery_level+0x2e>
    d628:	0000d33d 	.word	0x0000d33d

0000d62c <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d62c:	1e4b      	subs	r3, r1, #1
    d62e:	4259      	negs	r1, r3
    d630:	4159      	adcs	r1, r3
    d632:	4b01      	ldr	r3, [pc, #4]	; (d638 <lbslc_ccc_cfg_changed+0xc>)
    d634:	7019      	strb	r1, [r3, #0]
}
    d636:	4770      	bx	lr
    d638:	2000e589 	.word	0x2000e589

0000d63c <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d63c:	b510      	push	{r4, lr}
    d63e:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d640:	4b03      	ldr	r3, [pc, #12]	; (d650 <write_led+0x14>)
    d642:	681b      	ldr	r3, [r3, #0]
    d644:	b10b      	cbz	r3, d64a <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d646:	7810      	ldrb	r0, [r2, #0]
    d648:	4798      	blx	r3
	}

	return len;
}
    d64a:	4620      	mov	r0, r4
    d64c:	bd10      	pop	{r4, pc}
    d64e:	bf00      	nop
    d650:	20009e24 	.word	0x20009e24

0000d654 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d654:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d658:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d65a:	4b0d      	ldr	r3, [pc, #52]	; (d690 <read_button+0x3c>)
{
    d65c:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d65e:	6858      	ldr	r0, [r3, #4]
{
    d660:	460c      	mov	r4, r1
    d662:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d664:	b180      	cbz	r0, d688 <read_button+0x34>
	const char *value = attr->user_data;
    d666:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d66a:	4780      	blx	r0
    d66c:	4b09      	ldr	r3, [pc, #36]	; (d694 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d66e:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d670:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d672:	2301      	movs	r3, #1
    d674:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d678:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d67c:	4621      	mov	r1, r4
    d67e:	9300      	str	r3, [sp, #0]
    d680:	4628      	mov	r0, r5
    d682:	463b      	mov	r3, r7
    d684:	f00f fd67 	bl	1d156 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d688:	b004      	add	sp, #16
    d68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d68e:	bf00      	nop
    d690:	20009e24 	.word	0x20009e24
    d694:	2000e588 	.word	0x2000e588

0000d698 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d698:	b120      	cbz	r0, d6a4 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d69a:	4b03      	ldr	r3, [pc, #12]	; (d6a8 <bt_lbs_init+0x10>)
    d69c:	6802      	ldr	r2, [r0, #0]
    d69e:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d6a0:	6842      	ldr	r2, [r0, #4]
    d6a2:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d6a4:	2000      	movs	r0, #0
    d6a6:	4770      	bx	lr
    d6a8:	20009e24 	.word	0x20009e24

0000d6ac <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d6ac:	b500      	push	{lr}
	if (!notify_enabled) {
    d6ae:	4b0e      	ldr	r3, [pc, #56]	; (d6e8 <bt_lbs_send_button_state+0x3c>)
{
    d6b0:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d6b2:	781b      	ldrb	r3, [r3, #0]
{
    d6b4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d6b8:	b19b      	cbz	r3, d6e2 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d6ba:	2100      	movs	r1, #0
    d6bc:	2218      	movs	r2, #24
    d6be:	a802      	add	r0, sp, #8
    d6c0:	f00e fbe3 	bl	1be8a <memset>

	params.attr = attr;
    d6c4:	4b09      	ldr	r3, [pc, #36]	; (d6ec <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d6c6:	2000      	movs	r0, #0
	params.attr = attr;
    d6c8:	9303      	str	r3, [sp, #12]
	params.data = data;
    d6ca:	f10d 0307 	add.w	r3, sp, #7
    d6ce:	9304      	str	r3, [sp, #16]
	params.len = len;
    d6d0:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d6d2:	a902      	add	r1, sp, #8
	params.len = len;
    d6d4:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d6d8:	f006 fd80 	bl	141dc <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d6dc:	b009      	add	sp, #36	; 0x24
    d6de:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d6e2:	f06f 000c 	mvn.w	r0, #12
    d6e6:	e7f9      	b.n	d6dc <bt_lbs_send_button_state+0x30>
    d6e8:	2000e589 	.word	0x2000e589
    d6ec:	0001e918 	.word	0x0001e918

0000d6f0 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d6f0:	2303      	movs	r3, #3
static void _DoInit(void) {
    d6f2:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d6f4:	4c10      	ldr	r4, [pc, #64]	; (d738 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d6f6:	4a11      	ldr	r2, [pc, #68]	; (d73c <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d6f8:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d6fc:	4b10      	ldr	r3, [pc, #64]	; (d740 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d6fe:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d700:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d702:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d706:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d708:	4a0e      	ldr	r2, [pc, #56]	; (d744 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d70a:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d70c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d70e:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d710:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d712:	490d      	ldr	r1, [pc, #52]	; (d748 <_DoInit+0x58>)
    d714:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d716:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d718:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d71a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d71c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d71e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d720:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d722:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d724:	f00e fb2c 	bl	1bd80 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d728:	4620      	mov	r0, r4
    d72a:	4908      	ldr	r1, [pc, #32]	; (d74c <_DoInit+0x5c>)
    d72c:	f00e fb28 	bl	1bd80 <strcpy>
  p->acID[6] = ' ';
    d730:	2320      	movs	r3, #32
    d732:	71a3      	strb	r3, [r4, #6]
}
    d734:	bd10      	pop	{r4, pc}
    d736:	bf00      	nop
    d738:	20009e2c 	.word	0x20009e2c
    d73c:	0002059a 	.word	0x0002059a
    d740:	2000e59a 	.word	0x2000e59a
    d744:	2000e58a 	.word	0x2000e58a
    d748:	000205a3 	.word	0x000205a3
    d74c:	000205a7 	.word	0x000205a7

0000d750 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d750:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d752:	2418      	movs	r4, #24
    d754:	fb00 4504 	mla	r5, r0, r4, r4
    d758:	4b14      	ldr	r3, [pc, #80]	; (d7ac <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d75a:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d75c:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d75e:	fb04 3300 	mla	r3, r4, r0, r3
    d762:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d764:	2c01      	cmp	r4, #1
    d766:	d00e      	beq.n	d786 <SEGGER_RTT_WriteNoLock+0x36>
    d768:	2c02      	cmp	r4, #2
    d76a:	d018      	beq.n	d79e <SEGGER_RTT_WriteNoLock+0x4e>
    d76c:	b9e4      	cbnz	r4, d7a8 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d76e:	4628      	mov	r0, r5
    d770:	f00d fdd5 	bl	1b31e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d774:	4286      	cmp	r6, r0
    d776:	d804      	bhi.n	d782 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d778:	4632      	mov	r2, r6
    d77a:	4628      	mov	r0, r5
    d77c:	f00d fdd8 	bl	1b330 <_WriteNoCheck>
    d780:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d782:	4620      	mov	r0, r4
    d784:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d786:	4628      	mov	r0, r5
    d788:	f00d fdc9 	bl	1b31e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d78c:	4286      	cmp	r6, r0
    d78e:	4634      	mov	r4, r6
    d790:	bf28      	it	cs
    d792:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d794:	4628      	mov	r0, r5
    d796:	4622      	mov	r2, r4
    d798:	f00d fdca 	bl	1b330 <_WriteNoCheck>
    break;
    d79c:	e7f1      	b.n	d782 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d79e:	4628      	mov	r0, r5
}
    d7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d7a4:	f00d bde0 	b.w	1b368 <_WriteBlocking>
  switch (pRing->Flags) {
    d7a8:	2400      	movs	r4, #0
  return Status;
    d7aa:	e7ea      	b.n	d782 <SEGGER_RTT_WriteNoLock+0x32>
    d7ac:	20009e2c 	.word	0x20009e2c

0000d7b0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d7b0:	4904      	ldr	r1, [pc, #16]	; (d7c4 <sub_bytes+0x14>)
    d7b2:	1e43      	subs	r3, r0, #1
    d7b4:	300f      	adds	r0, #15
    d7b6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d7ba:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d7bc:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d7be:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d7c0:	d1f9      	bne.n	d7b6 <sub_bytes+0x6>
	}
}
    d7c2:	4770      	bx	lr
    d7c4:	000205ae 	.word	0x000205ae

0000d7c8 <tc_aes128_set_encrypt_key>:
{
    d7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7ca:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d7cc:	4e26      	ldr	r6, [pc, #152]	; (d868 <tc_aes128_set_encrypt_key+0xa0>)
{
    d7ce:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d7d0:	ad01      	add	r5, sp, #4
{
    d7d2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d7d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d7d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d7d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d7da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d7dc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d7e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d7e4:	4638      	mov	r0, r7
    d7e6:	2f00      	cmp	r7, #0
    d7e8:	d039      	beq.n	d85e <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d7ea:	2c00      	cmp	r4, #0
    d7ec:	d039      	beq.n	d862 <tc_aes128_set_encrypt_key+0x9a>
    d7ee:	1f38      	subs	r0, r7, #4
    d7f0:	4602      	mov	r2, r0
    d7f2:	4621      	mov	r1, r4
    d7f4:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d7f6:	784b      	ldrb	r3, [r1, #1]
    d7f8:	780d      	ldrb	r5, [r1, #0]
    d7fa:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d7fc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d800:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d802:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d804:	432b      	orrs	r3, r5
    d806:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d80a:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d80c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d810:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d814:	d1ef      	bne.n	d7f6 <tc_aes128_set_encrypt_key+0x2e>
    d816:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d818:	4c14      	ldr	r4, [pc, #80]	; (d86c <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d81a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d81c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d81e:	d116      	bne.n	d84e <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d820:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d824:	5ca5      	ldrb	r5, [r4, r2]
    d826:	0e1a      	lsrs	r2, r3, #24
    d828:	5ca2      	ldrb	r2, [r4, r2]
    d82a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d82e:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d832:	5d65      	ldrb	r5, [r4, r5]
    d834:	b2db      	uxtb	r3, r3
    d836:	5ce3      	ldrb	r3, [r4, r3]
    d838:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d83c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d840:	ad0c      	add	r5, sp, #48	; 0x30
    d842:	f021 0303 	bic.w	r3, r1, #3
    d846:	442b      	add	r3, r5
    d848:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d84c:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d84e:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d852:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d854:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d856:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d858:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d85a:	d1de      	bne.n	d81a <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d85c:	2001      	movs	r0, #1
}
    d85e:	b00d      	add	sp, #52	; 0x34
    d860:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d862:	4620      	mov	r0, r4
    d864:	e7fb      	b.n	d85e <tc_aes128_set_encrypt_key+0x96>
    d866:	bf00      	nop
    d868:	0001e6e4 	.word	0x0001e6e4
    d86c:	000205ae 	.word	0x000205ae

0000d870 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d874:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d876:	6803      	ldr	r3, [r0, #0]
{
    d878:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d87a:	9302      	str	r3, [sp, #8]
    d87c:	6843      	ldr	r3, [r0, #4]
    d87e:	f8df a1b8 	ldr.w	sl, [pc, #440]	; da38 <compress+0x1c8>
    d882:	9303      	str	r3, [sp, #12]
    d884:	6883      	ldr	r3, [r0, #8]
    d886:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d88a:	9304      	str	r3, [sp, #16]
    d88c:	68c3      	ldr	r3, [r0, #12]
    d88e:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d890:	6903      	ldr	r3, [r0, #16]
    d892:	9306      	str	r3, [sp, #24]
    d894:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d896:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d89a:	9307      	str	r3, [sp, #28]
    d89c:	6983      	ldr	r3, [r0, #24]
    d89e:	9308      	str	r3, [sp, #32]
    d8a0:	69c3      	ldr	r3, [r0, #28]
    d8a2:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d8a6:	4698      	mov	r8, r3
    d8a8:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d8aa:	9b04      	ldr	r3, [sp, #16]
    d8ac:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d8ae:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d8b0:	ab0c      	add	r3, sp, #48	; 0x30
    d8b2:	ba2d      	rev	r5, r5
    d8b4:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d8b6:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d8ba:	3704      	adds	r7, #4
    d8bc:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d8c0:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d8c4:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d8c8:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d8cc:	444d      	add	r5, r9
    d8ce:	ea2b 0302 	bic.w	r3, fp, r2
    d8d2:	ea02 090c 	and.w	r9, r2, ip
    d8d6:	ea83 0309 	eor.w	r3, r3, r9
    d8da:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d8dc:	9d00      	ldr	r5, [sp, #0]
    d8de:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d8e2:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d8e4:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d8e6:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d8ea:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d8ee:	4025      	ands	r5, r4
    d8f0:	ea06 0909 	and.w	r9, r6, r9
    d8f4:	ea85 0509 	eor.w	r5, r5, r9
    d8f8:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d8fc:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d8fe:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d900:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d904:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d906:	f8dd e000 	ldr.w	lr, [sp]
    d90a:	46d8      	mov	r8, fp
    d90c:	f040 8085 	bne.w	da1a <compress+0x1aa>
    d910:	f04f 0a10 	mov.w	sl, #16
    d914:	4949      	ldr	r1, [pc, #292]	; (da3c <compress+0x1cc>)
    d916:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d918:	4651      	mov	r1, sl
    d91a:	f10a 0a01 	add.w	sl, sl, #1
    d91e:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d922:	f00a 070f 	and.w	r7, sl, #15
    d926:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d92a:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d92e:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d932:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d936:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d938:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d93c:	f101 070e 	add.w	r7, r1, #14
    d940:	f007 070f 	and.w	r7, r7, #15
    d944:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d948:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d94c:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d94e:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d952:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    d956:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d95a:	f001 010f 	and.w	r1, r1, #15
    d95e:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d962:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    d966:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    d96a:	f851 1c40 	ldr.w	r1, [r1, #-64]
    d96e:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    d972:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d976:	4471      	add	r1, lr
		s0 = sigma0(s0);
    d978:	f8dd e004 	ldr.w	lr, [sp, #4]
    d97c:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    d980:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d984:	4441      	add	r1, r8
		s1 = sigma1(s1);
    d986:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d98a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d98c:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d98e:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d992:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    d996:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d99a:	ea05 0802 	and.w	r8, r5, r2
    d99e:	970a      	str	r7, [sp, #40]	; 0x28
    d9a0:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    d9a4:	ea2c 0705 	bic.w	r7, ip, r5
    d9a8:	ea87 0708 	eor.w	r7, r7, r8
    d9ac:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    d9b0:	444f      	add	r7, r9
    d9b2:	4477      	add	r7, lr
    d9b4:	4439      	add	r1, r7
    d9b6:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    d9b8:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d9bc:	ea84 0b06 	eor.w	fp, r4, r6
    d9c0:	ea0b 0b03 	and.w	fp, fp, r3
    d9c4:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    d9c8:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    d9cc:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    d9d0:	ea8b 0e0e 	eor.w	lr, fp, lr
    d9d4:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    d9d8:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    d9da:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    d9dc:	46e3      	mov	fp, ip
    d9de:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    d9e0:	9600      	str	r6, [sp, #0]
    d9e2:	d121      	bne.n	da28 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    d9e4:	9f02      	ldr	r7, [sp, #8]
    d9e6:	440f      	add	r7, r1
    d9e8:	9903      	ldr	r1, [sp, #12]
    d9ea:	6007      	str	r7, [r0, #0]
    d9ec:	4419      	add	r1, r3
    d9ee:	9b04      	ldr	r3, [sp, #16]
    d9f0:	6041      	str	r1, [r0, #4]
    d9f2:	4423      	add	r3, r4
    d9f4:	6083      	str	r3, [r0, #8]
    d9f6:	9b05      	ldr	r3, [sp, #20]
    d9f8:	4433      	add	r3, r6
    d9fa:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    d9fc:	9b06      	ldr	r3, [sp, #24]
    d9fe:	4443      	add	r3, r8
    da00:	6103      	str	r3, [r0, #16]
    da02:	9b07      	ldr	r3, [sp, #28]
    da04:	442b      	add	r3, r5
    da06:	6143      	str	r3, [r0, #20]
    da08:	9b08      	ldr	r3, [sp, #32]
    da0a:	4413      	add	r3, r2
    da0c:	6183      	str	r3, [r0, #24]
    da0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da10:	4463      	add	r3, ip
    da12:	61c3      	str	r3, [r0, #28]
}
    da14:	b01d      	add	sp, #116	; 0x74
    da16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da1a:	46e3      	mov	fp, ip
    da1c:	9600      	str	r6, [sp, #0]
    da1e:	4694      	mov	ip, r2
    da20:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    da22:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    da24:	461c      	mov	r4, r3
    da26:	e742      	b.n	d8ae <compress+0x3e>
    da28:	4694      	mov	ip, r2
    da2a:	4626      	mov	r6, r4
    da2c:	462a      	mov	r2, r5
    da2e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    da30:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    da32:	460b      	mov	r3, r1
    da34:	e770      	b.n	d918 <compress+0xa8>
    da36:	bf00      	nop
    da38:	0001e968 	.word	0x0001e968
    da3c:	0001e9a8 	.word	0x0001e9a8

0000da40 <tc_sha256_init>:
{
    da40:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    da42:	4604      	mov	r4, r0
    da44:	b1c8      	cbz	r0, da7a <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    da46:	2270      	movs	r2, #112	; 0x70
    da48:	2100      	movs	r1, #0
    da4a:	f00d fcca 	bl	1b3e2 <_set>
	s->iv[1] = 0xbb67ae85;
    da4e:	4b0b      	ldr	r3, [pc, #44]	; (da7c <tc_sha256_init+0x3c>)
    da50:	4a0b      	ldr	r2, [pc, #44]	; (da80 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    da52:	490c      	ldr	r1, [pc, #48]	; (da84 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    da54:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    da58:	4b0b      	ldr	r3, [pc, #44]	; (da88 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    da5a:	480c      	ldr	r0, [pc, #48]	; (da8c <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    da5c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    da60:	4b0b      	ldr	r3, [pc, #44]	; (da90 <tc_sha256_init+0x50>)
    da62:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    da66:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    da68:	4b0a      	ldr	r3, [pc, #40]	; (da94 <tc_sha256_init+0x54>)
    da6a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    da6c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    da70:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    da74:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    da78:	61e3      	str	r3, [r4, #28]
}
    da7a:	bd10      	pop	{r4, pc}
    da7c:	bb67ae85 	.word	0xbb67ae85
    da80:	6a09e667 	.word	0x6a09e667
    da84:	3c6ef372 	.word	0x3c6ef372
    da88:	a54ff53a 	.word	0xa54ff53a
    da8c:	510e527f 	.word	0x510e527f
    da90:	9b05688c 	.word	0x9b05688c
    da94:	1f83d9ab 	.word	0x1f83d9ab

0000da98 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    da98:	4a0a      	ldr	r2, [pc, #40]	; (dac4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    da9a:	490b      	ldr	r1, [pc, #44]	; (dac8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    da9c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    da9e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    daa0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    daa4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    daa8:	4908      	ldr	r1, [pc, #32]	; (dacc <arch_swap+0x34>)
    daaa:	684b      	ldr	r3, [r1, #4]
    daac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    dab0:	604b      	str	r3, [r1, #4]
    dab2:	2300      	movs	r3, #0
    dab4:	f383 8811 	msr	BASEPRI, r3
    dab8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    dabc:	6893      	ldr	r3, [r2, #8]
}
    dabe:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    dac2:	4770      	bx	lr
    dac4:	2000a27c 	.word	0x2000a27c
    dac8:	0001ef9c 	.word	0x0001ef9c
    dacc:	e000ed00 	.word	0xe000ed00

0000dad0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    dad0:	4914      	ldr	r1, [pc, #80]	; (db24 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    dad2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    dad4:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    dad8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    dada:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    dade:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dae2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dae4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    dae8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    daec:	4f0e      	ldr	r7, [pc, #56]	; (db28 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    daee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    daf2:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    daf4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    daf6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    daf8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    dafc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    dafe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    db02:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    db06:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    db0a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    db0e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    db12:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    db16:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    db18:	f00e f8a6 	bl	1bc68 <configure_builtin_stack_guard>
    pop {r2, lr}
    db1c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    db20:	4770      	bx	lr
    db22:	0000      	.short	0x0000
    ldr r1, =_kernel
    db24:	2000a27c 	.word	0x2000a27c
    ldr v4, =_SCS_ICSR
    db28:	e000ed04 	.word	0xe000ed04

0000db2c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    db2c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    db30:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    db32:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    db36:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    db3a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    db3c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    db40:	2902      	cmp	r1, #2
    beq _oops
    db42:	d0ff      	beq.n	db44 <_oops>

0000db44 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    db44:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    db46:	f00e f893 	bl	1bc70 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    db4a:	bd01      	pop	{r0, pc}

0000db4c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    db4c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    db4e:	2b00      	cmp	r3, #0
    db50:	db08      	blt.n	db64 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    db52:	2201      	movs	r2, #1
    db54:	f000 001f 	and.w	r0, r0, #31
    db58:	fa02 f000 	lsl.w	r0, r2, r0
    db5c:	4a02      	ldr	r2, [pc, #8]	; (db68 <arch_irq_enable+0x1c>)
    db5e:	095b      	lsrs	r3, r3, #5
    db60:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    db64:	4770      	bx	lr
    db66:	bf00      	nop
    db68:	e000e100 	.word	0xe000e100

0000db6c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    db6c:	4b05      	ldr	r3, [pc, #20]	; (db84 <arch_irq_is_enabled+0x18>)
    db6e:	0942      	lsrs	r2, r0, #5
    db70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    db74:	2301      	movs	r3, #1
    db76:	f000 001f 	and.w	r0, r0, #31
    db7a:	fa03 f000 	lsl.w	r0, r3, r0
}
    db7e:	4010      	ands	r0, r2
    db80:	4770      	bx	lr
    db82:	bf00      	nop
    db84:	e000e100 	.word	0xe000e100

0000db88 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    db88:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    db8a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    db8c:	2c07      	cmp	r4, #7
{
    db8e:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    db90:	d908      	bls.n	dba4 <z_arm_irq_priority_set+0x1c>
    db92:	490d      	ldr	r1, [pc, #52]	; (dbc8 <z_arm_irq_priority_set+0x40>)
    db94:	480d      	ldr	r0, [pc, #52]	; (dbcc <z_arm_irq_priority_set+0x44>)
    db96:	225c      	movs	r2, #92	; 0x5c
    db98:	f00c ff22 	bl	1a9e0 <printk>
    db9c:	215c      	movs	r1, #92	; 0x5c
    db9e:	480a      	ldr	r0, [pc, #40]	; (dbc8 <z_arm_irq_priority_set+0x40>)
    dba0:	f00d f9c4 	bl	1af2c <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    dba4:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    dba6:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dba8:	bfac      	ite	ge
    dbaa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dbae:	4b08      	ldrlt	r3, [pc, #32]	; (dbd0 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dbb0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    dbb4:	b2e4      	uxtb	r4, r4
    dbb6:	bfab      	itete	ge
    dbb8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dbbc:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dbc0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dbc4:	555c      	strblt	r4, [r3, r5]
}
    dbc6:	bd38      	pop	{r3, r4, r5, pc}
    dbc8:	000206ae 	.word	0x000206ae
    dbcc:	0001faab 	.word	0x0001faab
    dbd0:	e000ed14 	.word	0xe000ed14

0000dbd4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    dbd4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    dbd8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    dbda:	490b      	ldr	r1, [pc, #44]	; (dc08 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    dbdc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    dbe0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    dbe2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    dbe6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    dbea:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    dbec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    dbf0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    dbf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    dbf8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    dbfc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    dbfe:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    dc00:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    dc02:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dc06:	4770      	bx	lr
    dc08:	0001aabd 	.word	0x0001aabd

0000dc0c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    dc0c:	4604      	mov	r4, r0
    dc0e:	b508      	push	{r3, lr}
    dc10:	460e      	mov	r6, r1
    dc12:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    dc14:	f000 faf6 	bl	e204 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    dc18:	4b08      	ldr	r3, [pc, #32]	; (dc3c <arch_switch_to_main_thread+0x30>)
    dc1a:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dc1c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    dc1e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dc22:	4628      	mov	r0, r5
    dc24:	f386 8809 	msr	PSP, r6
    dc28:	2100      	movs	r1, #0
    dc2a:	b663      	cpsie	if
    dc2c:	f381 8811 	msr	BASEPRI, r1
    dc30:	f3bf 8f6f 	isb	sy
    dc34:	2200      	movs	r2, #0
    dc36:	2300      	movs	r3, #0
    dc38:	f00c ff40 	bl	1aabc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dc3c:	2000a27c 	.word	0x2000a27c

0000dc40 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    dc40:	4901      	ldr	r1, [pc, #4]	; (dc48 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    dc42:	2210      	movs	r2, #16
	str	r2, [r1]
    dc44:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    dc46:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    dc48:	e000ed10 	.word	0xe000ed10

0000dc4c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    dc4c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    dc4e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    dc50:	f380 8811 	msr	BASEPRI, r0
	isb
    dc54:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    dc58:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    dc5c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    dc5e:	b662      	cpsie	i
	isb
    dc60:	f3bf 8f6f 	isb	sy

	bx	lr
    dc64:	4770      	bx	lr
    dc66:	bf00      	nop

0000dc68 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    dc68:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    dc6a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    dc6c:	f381 8811 	msr	BASEPRI, r1

	wfe
    dc70:	bf20      	wfe

	msr	BASEPRI, r0
    dc72:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    dc76:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    dc78:	4770      	bx	lr
    dc7a:	bf00      	nop

0000dc7c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dc7e:	4605      	mov	r5, r0

	if (esf != NULL) {
    dc80:	460c      	mov	r4, r1
    dc82:	b1c9      	cbz	r1, dcb8 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    dc84:	688b      	ldr	r3, [r1, #8]
    dc86:	4810      	ldr	r0, [pc, #64]	; (dcc8 <z_arm_fatal_error+0x4c>)
    dc88:	9300      	str	r3, [sp, #0]
    dc8a:	e9d1 2300 	ldrd	r2, r3, [r1]
    dc8e:	2145      	movs	r1, #69	; 0x45
    dc90:	f00c fea6 	bl	1a9e0 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dc94:	6963      	ldr	r3, [r4, #20]
    dc96:	2145      	movs	r1, #69	; 0x45
    dc98:	9300      	str	r3, [sp, #0]
    dc9a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    dc9e:	480b      	ldr	r0, [pc, #44]	; (dccc <z_arm_fatal_error+0x50>)
    dca0:	f00c fe9e 	bl	1a9e0 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    dca4:	2145      	movs	r1, #69	; 0x45
    dca6:	69e2      	ldr	r2, [r4, #28]
    dca8:	4809      	ldr	r0, [pc, #36]	; (dcd0 <z_arm_fatal_error+0x54>)
    dcaa:	f00c fe99 	bl	1a9e0 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    dcae:	2145      	movs	r1, #69	; 0x45
    dcb0:	69a2      	ldr	r2, [r4, #24]
    dcb2:	4808      	ldr	r0, [pc, #32]	; (dcd4 <z_arm_fatal_error+0x58>)
    dcb4:	f00c fe94 	bl	1a9e0 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    dcb8:	4621      	mov	r1, r4
    dcba:	4628      	mov	r0, r5
}
    dcbc:	b003      	add	sp, #12
    dcbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    dcc2:	f009 bf0b 	b.w	17adc <z_fatal_error>
    dcc6:	bf00      	nop
    dcc8:	000206e4 	.word	0x000206e4
    dccc:	00020718 	.word	0x00020718
    dcd0:	0002074c 	.word	0x0002074c
    dcd4:	00020760 	.word	0x00020760

0000dcd8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dcd8:	bf30      	wfi
    b z_SysNmiOnReset
    dcda:	f7ff bffd 	b.w	dcd8 <z_SysNmiOnReset>
    dcde:	bf00      	nop

0000dce0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dce0:	4a0e      	ldr	r2, [pc, #56]	; (dd1c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    dce2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dce4:	4b0e      	ldr	r3, [pc, #56]	; (dd20 <z_arm_prep_c+0x40>)
    dce6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    dcea:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    dcec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dcf0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    dcf4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    dcf8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    dcfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    dd00:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    dd04:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    dd08:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    dd0c:	f009 ff72 	bl	17bf4 <z_bss_zero>
	z_data_copy();
    dd10:	f00b ffa8 	bl	19c64 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    dd14:	f000 fa48 	bl	e1a8 <z_arm_interrupt_init>
	z_cstart();
    dd18:	f009 ff90 	bl	17c3c <z_cstart>
    dd1c:	00008000 	.word	0x00008000
    dd20:	e000ed00 	.word	0xe000ed00

0000dd24 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dd24:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    dd26:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dd28:	4a0b      	ldr	r2, [pc, #44]	; (dd58 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dd2a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    dd2c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dd2e:	bf1e      	ittt	ne
	movne	r1, #0
    dd30:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dd32:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    dd34:	f010 f8d8 	blne	1dee8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dd38:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dd3a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dd3e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dd42:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    dd46:	4905      	ldr	r1, [pc, #20]	; (dd5c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dd48:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dd4a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    dd4c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dd4e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dd52:	4903      	ldr	r1, [pc, #12]	; (dd60 <_isr_wrapper+0x3c>)
	bx r1
    dd54:	4708      	bx	r1
    dd56:	0000      	.short	0x0000
	ldr r2, =_kernel
    dd58:	2000a27c 	.word	0x2000a27c
	ldr r1, =_sw_isr_table
    dd5c:	0001e2e8 	.word	0x0001e2e8
	ldr r1, =z_arm_int_exit
    dd60:	0000e169 	.word	0x0000e169

0000dd64 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    dd64:	f00d f901 	bl	1af6a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dd68:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dd6a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    dd6e:	4808      	ldr	r0, [pc, #32]	; (dd90 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    dd70:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    dd74:	1840      	adds	r0, r0, r1
    msr PSP, r0
    dd76:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    dd7a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    dd7e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    dd80:	4308      	orrs	r0, r1
    msr CONTROL, r0
    dd82:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    dd86:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dd8a:	f7ff ffa9 	bl	dce0 <z_arm_prep_c>
    dd8e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    dd90:	20012678 	.word	0x20012678

0000dd94 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    dd94:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    dd98:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    dd9c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    dd9e:	4672      	mov	r2, lr
	bl z_arm_fault
    dda0:	f000 f91a 	bl	dfd8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    dda4:	bd01      	pop	{r0, pc}
    dda6:	bf00      	nop

0000dda8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    dda8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ddaa:	4c21      	ldr	r4, [pc, #132]	; (de30 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    ddac:	2145      	movs	r1, #69	; 0x45
    ddae:	4821      	ldr	r0, [pc, #132]	; (de34 <usage_fault.constprop.0+0x8c>)
    ddb0:	f00c fe16 	bl	1a9e0 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ddb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddb6:	019d      	lsls	r5, r3, #6
    ddb8:	d503      	bpl.n	ddc2 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    ddba:	2145      	movs	r1, #69	; 0x45
    ddbc:	481e      	ldr	r0, [pc, #120]	; (de38 <usage_fault.constprop.0+0x90>)
    ddbe:	f00c fe0f 	bl	1a9e0 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    ddc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddc4:	01dc      	lsls	r4, r3, #7
    ddc6:	d503      	bpl.n	ddd0 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    ddc8:	2145      	movs	r1, #69	; 0x45
    ddca:	481c      	ldr	r0, [pc, #112]	; (de3c <usage_fault.constprop.0+0x94>)
    ddcc:	f00c fe08 	bl	1a9e0 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    ddd0:	4d17      	ldr	r5, [pc, #92]	; (de30 <usage_fault.constprop.0+0x88>)
    ddd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
    ddd4:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    ddd8:	d004      	beq.n	dde4 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    ddda:	2145      	movs	r1, #69	; 0x45
    dddc:	4818      	ldr	r0, [pc, #96]	; (de40 <usage_fault.constprop.0+0x98>)
    ddde:	f00c fdff 	bl	1a9e0 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    dde2:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dde4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dde6:	0318      	lsls	r0, r3, #12
    dde8:	d503      	bpl.n	ddf2 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    ddea:	2145      	movs	r1, #69	; 0x45
    ddec:	4815      	ldr	r0, [pc, #84]	; (de44 <usage_fault.constprop.0+0x9c>)
    ddee:	f00c fdf7 	bl	1a9e0 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    ddf2:	4d0f      	ldr	r5, [pc, #60]	; (de30 <usage_fault.constprop.0+0x88>)
    ddf4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddf6:	0359      	lsls	r1, r3, #13
    ddf8:	d503      	bpl.n	de02 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    ddfa:	2145      	movs	r1, #69	; 0x45
    ddfc:	4812      	ldr	r0, [pc, #72]	; (de48 <usage_fault.constprop.0+0xa0>)
    ddfe:	f00c fdef 	bl	1a9e0 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    de02:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de04:	039a      	lsls	r2, r3, #14
    de06:	d503      	bpl.n	de10 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    de08:	2145      	movs	r1, #69	; 0x45
    de0a:	4810      	ldr	r0, [pc, #64]	; (de4c <usage_fault.constprop.0+0xa4>)
    de0c:	f00c fde8 	bl	1a9e0 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    de10:	4d07      	ldr	r5, [pc, #28]	; (de30 <usage_fault.constprop.0+0x88>)
    de12:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de14:	03db      	lsls	r3, r3, #15
    de16:	d503      	bpl.n	de20 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    de18:	2145      	movs	r1, #69	; 0x45
    de1a:	480d      	ldr	r0, [pc, #52]	; (de50 <usage_fault.constprop.0+0xa8>)
    de1c:	f00c fde0 	bl	1a9e0 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    de20:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    de22:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    de24:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    de28:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    de2c:	62ab      	str	r3, [r5, #40]	; 0x28
}
    de2e:	bd38      	pop	{r3, r4, r5, pc}
    de30:	e000ed00 	.word	0xe000ed00
    de34:	00020793 	.word	0x00020793
    de38:	000207b0 	.word	0x000207b0
    de3c:	000207c8 	.word	0x000207c8
    de40:	000207e7 	.word	0x000207e7
    de44:	00020816 	.word	0x00020816
    de48:	00020839 	.word	0x00020839
    de4c:	00020863 	.word	0x00020863
    de50:	00020882 	.word	0x00020882

0000de54 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    de54:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    de56:	4c23      	ldr	r4, [pc, #140]	; (dee4 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    de58:	4606      	mov	r6, r0
    de5a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    de5c:	4822      	ldr	r0, [pc, #136]	; (dee8 <bus_fault.constprop.0+0x94>)
    de5e:	2145      	movs	r1, #69	; 0x45
    de60:	f00c fdbe 	bl	1a9e0 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    de64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de66:	04d9      	lsls	r1, r3, #19
    de68:	d503      	bpl.n	de72 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    de6a:	2145      	movs	r1, #69	; 0x45
    de6c:	481f      	ldr	r0, [pc, #124]	; (deec <bus_fault.constprop.0+0x98>)
    de6e:	f00c fdb7 	bl	1a9e0 <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    de72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de74:	051a      	lsls	r2, r3, #20
    de76:	d503      	bpl.n	de80 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    de78:	2145      	movs	r1, #69	; 0x45
    de7a:	481d      	ldr	r0, [pc, #116]	; (def0 <bus_fault.constprop.0+0x9c>)
    de7c:	f00c fdb0 	bl	1a9e0 <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    de80:	4c18      	ldr	r4, [pc, #96]	; (dee4 <bus_fault.constprop.0+0x90>)
    de82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de84:	059b      	lsls	r3, r3, #22
    de86:	d510      	bpl.n	deaa <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    de88:	481a      	ldr	r0, [pc, #104]	; (def4 <bus_fault.constprop.0+0xa0>)
    de8a:	2145      	movs	r1, #69	; 0x45
    de8c:	f00c fda8 	bl	1a9e0 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    de90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    de92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de94:	0418      	lsls	r0, r3, #16
    de96:	d508      	bpl.n	deaa <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    de98:	2145      	movs	r1, #69	; 0x45
    de9a:	4817      	ldr	r0, [pc, #92]	; (def8 <bus_fault.constprop.0+0xa4>)
    de9c:	f00c fda0 	bl	1a9e0 <printk>
			if (from_hard_fault) {
    dea0:	b11e      	cbz	r6, deaa <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dea4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    dea8:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    deaa:	4c0e      	ldr	r4, [pc, #56]	; (dee4 <bus_fault.constprop.0+0x90>)
    deac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    deae:	0559      	lsls	r1, r3, #21
    deb0:	d503      	bpl.n	deba <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    deb2:	2145      	movs	r1, #69	; 0x45
    deb4:	4811      	ldr	r0, [pc, #68]	; (defc <bus_fault.constprop.0+0xa8>)
    deb6:	f00c fd93 	bl	1a9e0 <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    deba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    debc:	05da      	lsls	r2, r3, #23
    debe:	d50b      	bpl.n	ded8 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    dec0:	2145      	movs	r1, #69	; 0x45
    dec2:	480f      	ldr	r0, [pc, #60]	; (df00 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dec4:	f00c fd8c 	bl	1a9e0 <printk>
	*recoverable = memory_fault_recoverable(esf);
    dec8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    deca:	4a06      	ldr	r2, [pc, #24]	; (dee4 <bus_fault.constprop.0+0x90>)
    decc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dece:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    ded2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    ded4:	7028      	strb	r0, [r5, #0]
}
    ded6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    ded8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    deda:	049b      	lsls	r3, r3, #18
    dedc:	d5f4      	bpl.n	dec8 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dede:	2145      	movs	r1, #69	; 0x45
    dee0:	4808      	ldr	r0, [pc, #32]	; (df04 <bus_fault.constprop.0+0xb0>)
    dee2:	e7ef      	b.n	dec4 <bus_fault.constprop.0+0x70>
    dee4:	e000ed00 	.word	0xe000ed00
    dee8:	000208b2 	.word	0x000208b2
    deec:	000208cd 	.word	0x000208cd
    def0:	000208e3 	.word	0x000208e3
    def4:	000208fb 	.word	0x000208fb
    def8:	00020919 	.word	0x00020919
    defc:	00020933 	.word	0x00020933
    df00:	00020953 	.word	0x00020953
    df04:	00020970 	.word	0x00020970

0000df08 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    df08:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    df0a:	4c29      	ldr	r4, [pc, #164]	; (dfb0 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    df0c:	4606      	mov	r6, r0
    df0e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    df10:	4828      	ldr	r0, [pc, #160]	; (dfb4 <mem_manage_fault.constprop.0+0xac>)
    df12:	2145      	movs	r1, #69	; 0x45
    df14:	f00c fd64 	bl	1a9e0 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    df18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df1a:	06d8      	lsls	r0, r3, #27
    df1c:	d503      	bpl.n	df26 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    df1e:	2145      	movs	r1, #69	; 0x45
    df20:	4825      	ldr	r0, [pc, #148]	; (dfb8 <mem_manage_fault.constprop.0+0xb0>)
    df22:	f00c fd5d 	bl	1a9e0 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    df26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df28:	0719      	lsls	r1, r3, #28
    df2a:	d503      	bpl.n	df34 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    df2c:	2145      	movs	r1, #69	; 0x45
    df2e:	4823      	ldr	r0, [pc, #140]	; (dfbc <mem_manage_fault.constprop.0+0xb4>)
    df30:	f00c fd56 	bl	1a9e0 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    df34:	4c1e      	ldr	r4, [pc, #120]	; (dfb0 <mem_manage_fault.constprop.0+0xa8>)
    df36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df38:	079a      	lsls	r2, r3, #30
    df3a:	d510      	bpl.n	df5e <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    df3c:	2145      	movs	r1, #69	; 0x45
    df3e:	4820      	ldr	r0, [pc, #128]	; (dfc0 <mem_manage_fault.constprop.0+0xb8>)
    df40:	f00c fd4e 	bl	1a9e0 <printk>
		uint32_t temp = SCB->MMFAR;
    df44:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    df46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df48:	061b      	lsls	r3, r3, #24
    df4a:	d508      	bpl.n	df5e <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    df4c:	2145      	movs	r1, #69	; 0x45
    df4e:	481d      	ldr	r0, [pc, #116]	; (dfc4 <mem_manage_fault.constprop.0+0xbc>)
    df50:	f00c fd46 	bl	1a9e0 <printk>
			if (from_hard_fault) {
    df54:	b11e      	cbz	r6, df5e <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    df56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    df5c:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    df5e:	4c14      	ldr	r4, [pc, #80]	; (dfb0 <mem_manage_fault.constprop.0+0xa8>)
    df60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df62:	07d8      	lsls	r0, r3, #31
    df64:	d503      	bpl.n	df6e <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    df66:	2145      	movs	r1, #69	; 0x45
    df68:	4817      	ldr	r0, [pc, #92]	; (dfc8 <mem_manage_fault.constprop.0+0xc0>)
    df6a:	f00c fd39 	bl	1a9e0 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    df6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df70:	0699      	lsls	r1, r3, #26
    df72:	d503      	bpl.n	df7c <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    df74:	2145      	movs	r1, #69	; 0x45
    df76:	4815      	ldr	r0, [pc, #84]	; (dfcc <mem_manage_fault.constprop.0+0xc4>)
    df78:	f00c fd32 	bl	1a9e0 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    df7c:	4b0c      	ldr	r3, [pc, #48]	; (dfb0 <mem_manage_fault.constprop.0+0xa8>)
    df7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df80:	06d2      	lsls	r2, r2, #27
    df82:	d402      	bmi.n	df8a <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    df84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    df86:	079b      	lsls	r3, r3, #30
    df88:	d50a      	bpl.n	dfa0 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    df8a:	4911      	ldr	r1, [pc, #68]	; (dfd0 <mem_manage_fault.constprop.0+0xc8>)
    df8c:	4811      	ldr	r0, [pc, #68]	; (dfd4 <mem_manage_fault.constprop.0+0xcc>)
    df8e:	f240 1247 	movw	r2, #327	; 0x147
    df92:	f00c fd25 	bl	1a9e0 <printk>
    df96:	f240 1147 	movw	r1, #327	; 0x147
    df9a:	480d      	ldr	r0, [pc, #52]	; (dfd0 <mem_manage_fault.constprop.0+0xc8>)
    df9c:	f00c ffc6 	bl	1af2c <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    dfa0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dfa2:	4a03      	ldr	r2, [pc, #12]	; (dfb0 <mem_manage_fault.constprop.0+0xa8>)
    dfa4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dfa6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    dfaa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dfac:	7028      	strb	r0, [r5, #0]
}
    dfae:	bd70      	pop	{r4, r5, r6, pc}
    dfb0:	e000ed00 	.word	0xe000ed00
    dfb4:	000209a4 	.word	0x000209a4
    dfb8:	000209bf 	.word	0x000209bf
    dfbc:	000208e3 	.word	0x000208e3
    dfc0:	000209f7 	.word	0x000209f7
    dfc4:	00020a14 	.word	0x00020a14
    dfc8:	00020a2f 	.word	0x00020a2f
    dfcc:	00020970 	.word	0x00020970
    dfd0:	00020a53 	.word	0x00020a53
    dfd4:	0001faab 	.word	0x0001faab

0000dfd8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    dfd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfdc:	4b51      	ldr	r3, [pc, #324]	; (e124 <z_arm_fault+0x14c>)
{
    dfde:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfe0:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    dfe4:	4689      	mov	r9, r1
    dfe6:	4614      	mov	r4, r2
    dfe8:	2600      	movs	r6, #0
    dfea:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dfec:	f3c8 0708 	ubfx	r7, r8, #0, #9
    dff0:	f386 8811 	msr	BASEPRI, r6
    dff4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dff8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    dffc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e000:	d111      	bne.n	e026 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e002:	07d0      	lsls	r0, r2, #31
    e004:	d40f      	bmi.n	e026 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e006:	0651      	lsls	r1, r2, #25
    e008:	d403      	bmi.n	e012 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e00a:	0722      	lsls	r2, r4, #28
    e00c:	d408      	bmi.n	e020 <z_arm_fault+0x48>
			*nested_exc = true;
    e00e:	2601      	movs	r6, #1
    e010:	e008      	b.n	e024 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    e012:	2145      	movs	r1, #69	; 0x45
    e014:	4844      	ldr	r0, [pc, #272]	; (e128 <z_arm_fault+0x150>)
    e016:	f00c fce3 	bl	1a9e0 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e01a:	f014 0404 	ands.w	r4, r4, #4
    e01e:	d000      	beq.n	e022 <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    e020:	464d      	mov	r5, r9
	*nested_exc = false;
    e022:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    e024:	b95d      	cbnz	r5, e03e <z_arm_fault+0x66>
    e026:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    e02a:	4940      	ldr	r1, [pc, #256]	; (e12c <z_arm_fault+0x154>)
    e02c:	4840      	ldr	r0, [pc, #256]	; (e130 <z_arm_fault+0x158>)
    e02e:	f00c fcd7 	bl	1a9e0 <printk>
    e032:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    e036:	483d      	ldr	r0, [pc, #244]	; (e12c <z_arm_fault+0x154>)
    e038:	f00c ff78 	bl	1af2c <assert_post_action>
    e03c:	2500      	movs	r5, #0
	*recoverable = false;
    e03e:	2400      	movs	r4, #0
    e040:	1efb      	subs	r3, r7, #3
    e042:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    e046:	2b09      	cmp	r3, #9
    e048:	d85a      	bhi.n	e100 <z_arm_fault+0x128>
    e04a:	e8df f003 	tbb	[pc, r3]
    e04e:	4e05      	.short	0x4e05
    e050:	59593252 	.word	0x59593252
    e054:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e058:	4f32      	ldr	r7, [pc, #200]	; (e124 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    e05a:	2145      	movs	r1, #69	; 0x45
    e05c:	4835      	ldr	r0, [pc, #212]	; (e134 <z_arm_fault+0x15c>)
    e05e:	f00c fcbf 	bl	1a9e0 <printk>
	*recoverable = false;
    e062:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e066:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    e068:	f014 0402 	ands.w	r4, r4, #2
    e06c:	d005      	beq.n	e07a <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    e06e:	2145      	movs	r1, #69	; 0x45
    e070:	4831      	ldr	r0, [pc, #196]	; (e138 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    e072:	f00c fcb5 	bl	1a9e0 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e076:	2400      	movs	r4, #0
}
    e078:	e01e      	b.n	e0b8 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e07c:	005b      	lsls	r3, r3, #1
    e07e:	d51b      	bpl.n	e0b8 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    e080:	2145      	movs	r1, #69	; 0x45
    e082:	482e      	ldr	r0, [pc, #184]	; (e13c <z_arm_fault+0x164>)
    e084:	f00c fcac 	bl	1a9e0 <printk>
		if (SCB_MMFSR != 0) {
    e088:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    e08c:	b12b      	cbz	r3, e09a <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    e08e:	2001      	movs	r0, #1
    e090:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e094:	f7ff ff38 	bl	df08 <mem_manage_fault.constprop.0>
    e098:	e00d      	b.n	e0b6 <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    e09a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e09e:	b12b      	cbz	r3, e0ac <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    e0a0:	2001      	movs	r0, #1
    e0a2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e0a6:	f7ff fed5 	bl	de54 <bus_fault.constprop.0>
    e0aa:	e004      	b.n	e0b6 <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    e0ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    e0ae:	b29b      	uxth	r3, r3
    e0b0:	b113      	cbz	r3, e0b8 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    e0b2:	f7ff fe79 	bl	dda8 <usage_fault.constprop.0>
    e0b6:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e0b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0bc:	b993      	cbnz	r3, e0e4 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e0be:	2220      	movs	r2, #32
    e0c0:	4629      	mov	r1, r5
    e0c2:	a802      	add	r0, sp, #8
    e0c4:	f00d feb6 	bl	1be34 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0ca:	b336      	cbz	r6, e11a <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e0cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e0d0:	b922      	cbnz	r2, e0dc <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e0d2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e0d6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e0da:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e0dc:	4620      	mov	r0, r4
    e0de:	a902      	add	r1, sp, #8
    e0e0:	f7ff fdcc 	bl	dc7c <z_arm_fatal_error>
}
    e0e4:	b00b      	add	sp, #44	; 0x2c
    e0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e0ea:	2000      	movs	r0, #0
    e0ec:	f10d 0107 	add.w	r1, sp, #7
    e0f0:	e7d0      	b.n	e094 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    e0f2:	2000      	movs	r0, #0
    e0f4:	f10d 0107 	add.w	r1, sp, #7
    e0f8:	e7d5      	b.n	e0a6 <z_arm_fault+0xce>
	PR_FAULT_INFO(
    e0fa:	2145      	movs	r1, #69	; 0x45
    e0fc:	4810      	ldr	r0, [pc, #64]	; (e140 <z_arm_fault+0x168>)
    e0fe:	e7b8      	b.n	e072 <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    e100:	4910      	ldr	r1, [pc, #64]	; (e144 <z_arm_fault+0x16c>)
    e102:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e106:	4a10      	ldr	r2, [pc, #64]	; (e148 <z_arm_fault+0x170>)
    e108:	4810      	ldr	r0, [pc, #64]	; (e14c <z_arm_fault+0x174>)
    e10a:	bf08      	it	eq
    e10c:	460a      	moveq	r2, r1
    e10e:	f1a7 0310 	sub.w	r3, r7, #16
    e112:	2145      	movs	r1, #69	; 0x45
    e114:	f00c fc64 	bl	1a9e0 <printk>
    e118:	e7ad      	b.n	e076 <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e11a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e11e:	f023 0301 	bic.w	r3, r3, #1
    e122:	e7da      	b.n	e0da <z_arm_fault+0x102>
    e124:	e000ed00 	.word	0xe000ed00
    e128:	00020abb 	.word	0x00020abb
    e12c:	00020a53 	.word	0x00020a53
    e130:	0001faab 	.word	0x0001faab
    e134:	00020ae3 	.word	0x00020ae3
    e138:	00020aff 	.word	0x00020aff
    e13c:	00020b25 	.word	0x00020b25
    e140:	00020b49 	.word	0x00020b49
    e144:	00020a8d 	.word	0x00020a8d
    e148:	00020aa2 	.word	0x00020aa2
    e14c:	00020b84 	.word	0x00020b84

0000e150 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e150:	4b04      	ldr	r3, [pc, #16]	; (e164 <z_arm_fault_init+0x14>)
    e152:	695a      	ldr	r2, [r3, #20]
    e154:	f042 0210 	orr.w	r2, r2, #16
    e158:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e15a:	695a      	ldr	r2, [r3, #20]
    e15c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e160:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e162:	4770      	bx	lr
    e164:	e000ed00 	.word	0xe000ed00

0000e168 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    e168:	4b04      	ldr	r3, [pc, #16]	; (e17c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    e16a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    e16c:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    e16e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    e170:	d003      	beq.n	e17a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    e172:	4903      	ldr	r1, [pc, #12]	; (e180 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    e174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    e178:	600a      	str	r2, [r1, #0]

0000e17a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    e17a:	4770      	bx	lr
	ldr r3, =_kernel
    e17c:	2000a27c 	.word	0x2000a27c
	ldr r1, =_SCS_ICSR
    e180:	e000ed04 	.word	0xe000ed04

0000e184 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e184:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e188:	4905      	ldr	r1, [pc, #20]	; (e1a0 <sys_arch_reboot+0x1c>)
    e18a:	4b06      	ldr	r3, [pc, #24]	; (e1a4 <sys_arch_reboot+0x20>)
    e18c:	68ca      	ldr	r2, [r1, #12]
    e18e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e192:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e194:	60cb      	str	r3, [r1, #12]
    e196:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e19a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e19c:	e7fd      	b.n	e19a <sys_arch_reboot+0x16>
    e19e:	bf00      	nop
    e1a0:	e000ed00 	.word	0xe000ed00
    e1a4:	05fa0004 	.word	0x05fa0004

0000e1a8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e1a8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e1aa:	2120      	movs	r1, #32
    e1ac:	4803      	ldr	r0, [pc, #12]	; (e1bc <z_arm_interrupt_init+0x14>)
    e1ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e1b0:	3301      	adds	r3, #1
    e1b2:	2b45      	cmp	r3, #69	; 0x45
    e1b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e1b8:	d1f9      	bne.n	e1ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e1ba:	4770      	bx	lr
    e1bc:	e000e100 	.word	0xe000e100

0000e1c0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e1c0:	b508      	push	{r3, lr}
	if (_current == thread) {
    e1c2:	4b0e      	ldr	r3, [pc, #56]	; (e1fc <z_impl_k_thread_abort+0x3c>)
    e1c4:	689b      	ldr	r3, [r3, #8]
    e1c6:	4283      	cmp	r3, r0
    e1c8:	d107      	bne.n	e1da <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e1ca:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e1ce:	b193      	cbz	r3, e1f6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e1d0:	4a0b      	ldr	r2, [pc, #44]	; (e200 <z_impl_k_thread_abort+0x40>)
    e1d2:	6853      	ldr	r3, [r2, #4]
    e1d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e1d8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    e1da:	f00a fe2b 	bl	18e34 <z_thread_single_abort>
	__asm__ volatile(
    e1de:	f04f 0320 	mov.w	r3, #32
    e1e2:	f3ef 8011 	mrs	r0, BASEPRI
    e1e6:	f383 8811 	msr	BASEPRI, r3
    e1ea:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    e1ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    e1f2:	f00f bec9 	b.w	1df88 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    e1f6:	f00b fc2b 	bl	19a50 <z_self_abort>
    e1fa:	bf00      	nop
    e1fc:	2000a27c 	.word	0x2000a27c
    e200:	e000ed00 	.word	0xe000ed00

0000e204 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e206:	4c09      	ldr	r4, [pc, #36]	; (e22c <z_arm_configure_static_mpu_regions+0x28>)
    e208:	4a09      	ldr	r2, [pc, #36]	; (e230 <z_arm_configure_static_mpu_regions+0x2c>)
    e20a:	4623      	mov	r3, r4
    e20c:	2101      	movs	r1, #1
    e20e:	4809      	ldr	r0, [pc, #36]	; (e234 <z_arm_configure_static_mpu_regions+0x30>)
    e210:	f000 f976 	bl	e500 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e214:	2300      	movs	r3, #0
    e216:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e218:	4b07      	ldr	r3, [pc, #28]	; (e238 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e21a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e21c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e21e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e220:	9301      	str	r3, [sp, #4]
    e222:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e224:	f000 f988 	bl	e538 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e228:	b004      	add	sp, #16
    e22a:	bd10      	pop	{r4, pc}
    e22c:	20070000 	.word	0x20070000
    e230:	20008000 	.word	0x20008000
    e234:	0001ea68 	.word	0x0001ea68
    e238:	200086b8 	.word	0x200086b8

0000e23c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e23c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e23e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e240:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e242:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e246:	f004 031f 	and.w	r3, r4, #31
    e24a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e24c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e24e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e250:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e254:	4905      	ldr	r1, [pc, #20]	; (e26c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e256:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e25a:	f043 0301 	orr.w	r3, r3, #1
    e25e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    e262:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    e266:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e26a:	bd10      	pop	{r4, pc}
    e26c:	e000ed00 	.word	0xe000ed00

0000e270 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    e270:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e272:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    e274:	680c      	ldr	r4, [r1, #0]
{
    e276:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    e278:	890a      	ldrh	r2, [r1, #8]
    e27a:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    e27c:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e27e:	3b01      	subs	r3, #1
    e280:	f024 041f 	bic.w	r4, r4, #31
    e284:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    e286:	f002 021f 	and.w	r2, r2, #31
    e28a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e28e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e292:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e294:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    e296:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e29a:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    e29c:	d909      	bls.n	e2b2 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e29e:	4602      	mov	r2, r0
    e2a0:	2145      	movs	r1, #69	; 0x45
    e2a2:	4806      	ldr	r0, [pc, #24]	; (e2bc <mpu_configure_region+0x4c>)
    e2a4:	f00c fb9c 	bl	1a9e0 <printk>
    e2a8:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    e2ac:	4620      	mov	r0, r4
    e2ae:	b005      	add	sp, #20
    e2b0:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    e2b2:	4669      	mov	r1, sp
    e2b4:	f7ff ffc2 	bl	e23c <region_init>
	return region_allocate_and_init(index,
    e2b8:	e7f8      	b.n	e2ac <mpu_configure_region+0x3c>
    e2ba:	bf00      	nop
    e2bc:	00020ba0 	.word	0x00020ba0

0000e2c0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2c4:	4689      	mov	r9, r1
    e2c6:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e2c8:	4606      	mov	r6, r0
    e2ca:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    e2ce:	4d59      	ldr	r5, [pc, #356]	; (e434 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e2d0:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e2d2:	45c8      	cmp	r8, r9
    e2d4:	da27      	bge.n	e326 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    e2d6:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e2da:	f1ba 0f00 	cmp.w	sl, #0
    e2de:	d045      	beq.n	e36c <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    e2e0:	f1ba 0f1f 	cmp.w	sl, #31
    e2e4:	d918      	bls.n	e318 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    e2e6:	f01a 0f1f 	tst.w	sl, #31
    e2ea:	d115      	bne.n	e318 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    e2ec:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e2f0:	f01b 0f1f 	tst.w	fp, #31
    e2f4:	d110      	bne.n	e318 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e2f6:	4658      	mov	r0, fp
    e2f8:	f00d fcc5 	bl	1bc86 <arm_cmse_mpu_region_get>
    e2fc:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e2fe:	eb0a 000b 	add.w	r0, sl, fp
    e302:	3801      	subs	r0, #1
    e304:	f00d fcbf 	bl	1bc86 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e308:	4287      	cmp	r7, r0
    e30a:	d010      	beq.n	e32e <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    e30c:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e310:	463a      	mov	r2, r7
    e312:	2145      	movs	r1, #69	; 0x45
    e314:	4848      	ldr	r0, [pc, #288]	; (e438 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    e316:	e002      	b.n	e31e <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e318:	4642      	mov	r2, r8
    e31a:	2145      	movs	r1, #69	; 0x45
    e31c:	4847      	ldr	r0, [pc, #284]	; (e43c <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e31e:	f00c fb5f 	bl	1a9e0 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e322:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e326:	4620      	mov	r0, r4
    e328:	b005      	add	sp, #20
    e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e32e:	f117 0f16 	cmn.w	r7, #22
    e332:	d0ed      	beq.n	e310 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    e334:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e336:	42bb      	cmp	r3, r7
    e338:	dbea      	blt.n	e310 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    e33a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e33e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    e342:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e346:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e34a:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e34e:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e352:	e9d6 3200 	ldrd	r3, r2, [r6]
    e356:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e358:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e35a:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e35e:	d11d      	bne.n	e39c <mpu_configure_regions_and_partition.constprop.0+0xdc>
    e360:	45d3      	cmp	fp, sl
    e362:	d107      	bne.n	e374 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    e364:	4631      	mov	r1, r6
    e366:	b2f8      	uxtb	r0, r7
    e368:	f7ff ff82 	bl	e270 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e36c:	f108 0801 	add.w	r8, r8, #1
    e370:	360c      	adds	r6, #12
    e372:	e7ae      	b.n	e2d2 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e374:	4631      	mov	r1, r6
	MPU->RNR = index;
    e376:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e37a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e37e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e382:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e386:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e388:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e38c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e38e:	f7ff ff6f 	bl	e270 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e392:	f110 0f16 	cmn.w	r0, #22
    e396:	d0c4      	beq.n	e322 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e398:	1c44      	adds	r4, r0, #1
    e39a:	e7e7      	b.n	e36c <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    e39c:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e39e:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e3a0:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e3a2:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e3a6:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e3aa:	d108      	bne.n	e3be <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e3ac:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e3b0:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e3b2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e3b6:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e3b8:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e3bc:	e7e7      	b.n	e38e <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e3be:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e3c2:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e3c6:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e3c8:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e3cc:	4631      	mov	r1, r6
    e3ce:	f7ff ff4f 	bl	e270 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e3d2:	f110 0f16 	cmn.w	r0, #22
    e3d6:	d0a4      	beq.n	e322 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e3d8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e3dc:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e3e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e3e4:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e3e8:	f362 0304 	bfi	r3, r2, #0, #5
    e3ec:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e3f0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e3f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e3f8:	085b      	lsrs	r3, r3, #1
    e3fa:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e3fe:	e9d6 3100 	ldrd	r3, r1, [r6]
    e402:	440b      	add	r3, r1
    e404:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e406:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e40a:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e40c:	445b      	add	r3, fp
    e40e:	eba3 030a 	sub.w	r3, r3, sl
    e412:	b2c0      	uxtb	r0, r0
    e414:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e418:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e41a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e41e:	9303      	str	r3, [sp, #12]
    e420:	d903      	bls.n	e42a <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e422:	4602      	mov	r2, r0
    e424:	2145      	movs	r1, #69	; 0x45
    e426:	4806      	ldr	r0, [pc, #24]	; (e440 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    e428:	e779      	b.n	e31e <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e42a:	4669      	mov	r1, sp
    e42c:	f7ff ff06 	bl	e23c <region_init>
    e430:	e7b2      	b.n	e398 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e432:	bf00      	nop
    e434:	e000ed00 	.word	0xe000ed00
    e438:	00020bf3 	.word	0x00020bf3
    e43c:	00020bcb 	.word	0x00020bcb
    e440:	00020ba0 	.word	0x00020ba0

0000e444 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e444:	2205      	movs	r2, #5
    e446:	4b04      	ldr	r3, [pc, #16]	; (e458 <arm_core_mpu_enable+0x14>)
    e448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e44c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e450:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e454:	4770      	bx	lr
    e456:	bf00      	nop
    e458:	e000ed00 	.word	0xe000ed00

0000e45c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e45c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e460:	2200      	movs	r2, #0
    e462:	4b02      	ldr	r3, [pc, #8]	; (e46c <arm_core_mpu_disable+0x10>)
    e464:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e468:	4770      	bx	lr
    e46a:	bf00      	nop
    e46c:	e000ed00 	.word	0xe000ed00

0000e470 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e470:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e472:	4d1d      	ldr	r5, [pc, #116]	; (e4e8 <arm_mpu_init+0x78>)
    e474:	682c      	ldr	r4, [r5, #0]
    e476:	2c08      	cmp	r4, #8
    e478:	d90d      	bls.n	e496 <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e47a:	f240 123b 	movw	r2, #315	; 0x13b
    e47e:	491b      	ldr	r1, [pc, #108]	; (e4ec <arm_mpu_init+0x7c>)
    e480:	481b      	ldr	r0, [pc, #108]	; (e4f0 <arm_mpu_init+0x80>)
    e482:	f00c faad 	bl	1a9e0 <printk>
    e486:	4819      	ldr	r0, [pc, #100]	; (e4ec <arm_mpu_init+0x7c>)
    e488:	f240 113b 	movw	r1, #315	; 0x13b
    e48c:	f00c fd4e 	bl	1af2c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e490:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e494:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e496:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e498:	f7ff ffe0 	bl	e45c <arm_core_mpu_disable>
	MPU->MAIR0 =
    e49c:	4b15      	ldr	r3, [pc, #84]	; (e4f4 <arm_mpu_init+0x84>)
    e49e:	4a16      	ldr	r2, [pc, #88]	; (e4f8 <arm_mpu_init+0x88>)
    e4a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e4a4:	4284      	cmp	r4, r0
    e4a6:	d117      	bne.n	e4d8 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e4a8:	4b14      	ldr	r3, [pc, #80]	; (e4fc <arm_mpu_init+0x8c>)
    e4aa:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e4ac:	f7ff ffca 	bl	e444 <arm_core_mpu_enable>
	__ASSERT(
    e4b0:	4b10      	ldr	r3, [pc, #64]	; (e4f4 <arm_mpu_init+0x84>)
    e4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e4b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e4ba:	2b08      	cmp	r3, #8
    e4bc:	d00a      	beq.n	e4d4 <arm_mpu_init+0x64>
    e4be:	490b      	ldr	r1, [pc, #44]	; (e4ec <arm_mpu_init+0x7c>)
    e4c0:	480b      	ldr	r0, [pc, #44]	; (e4f0 <arm_mpu_init+0x80>)
    e4c2:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e4c6:	f00c fa8b 	bl	1a9e0 <printk>
    e4ca:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e4ce:	4807      	ldr	r0, [pc, #28]	; (e4ec <arm_mpu_init+0x7c>)
    e4d0:	f00c fd2c 	bl	1af2c <assert_post_action>
	return 0;
    e4d4:	2000      	movs	r0, #0
    e4d6:	e7dd      	b.n	e494 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e4d8:	6869      	ldr	r1, [r5, #4]
    e4da:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e4de:	f7ff fead 	bl	e23c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e4e2:	3001      	adds	r0, #1
    e4e4:	e7de      	b.n	e4a4 <arm_mpu_init+0x34>
    e4e6:	bf00      	nop
    e4e8:	0001ea74 	.word	0x0001ea74
    e4ec:	00020c1b 	.word	0x00020c1b
    e4f0:	0001faab 	.word	0x0001faab
    e4f4:	e000ed00 	.word	0xe000ed00
    e4f8:	0044ffaa 	.word	0x0044ffaa
    e4fc:	2000e99a 	.word	0x2000e99a

0000e500 <arm_core_mpu_configure_static_mpu_regions>:
{
    e500:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e502:	4c0a      	ldr	r4, [pc, #40]	; (e52c <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e504:	7822      	ldrb	r2, [r4, #0]
    e506:	f7ff fedb 	bl	e2c0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e50a:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e50c:	3016      	adds	r0, #22
    e50e:	d10c      	bne.n	e52a <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e510:	4907      	ldr	r1, [pc, #28]	; (e530 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e512:	4808      	ldr	r0, [pc, #32]	; (e534 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e514:	f44f 7282 	mov.w	r2, #260	; 0x104
    e518:	f00c fa62 	bl	1a9e0 <printk>
}
    e51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e520:	f44f 7182 	mov.w	r1, #260	; 0x104
    e524:	4802      	ldr	r0, [pc, #8]	; (e530 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e526:	f00c bd01 	b.w	1af2c <assert_post_action>
}
    e52a:	bd10      	pop	{r4, pc}
    e52c:	2000e99a 	.word	0x2000e99a
    e530:	00020c1b 	.word	0x00020c1b
    e534:	0001faab 	.word	0x0001faab

0000e538 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e53c:	4d30      	ldr	r5, [pc, #192]	; (e600 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e53e:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e540:	4606      	mov	r6, r0
    e542:	f04f 0800 	mov.w	r8, #0
    e546:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e548:	4f2e      	ldr	r7, [pc, #184]	; (e604 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e54a:	45d0      	cmp	r8, sl
    e54c:	db02      	blt.n	e554 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e54e:	b003      	add	sp, #12
    e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e554:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e558:	f1b9 0f00 	cmp.w	r9, #0
    e55c:	d04a      	beq.n	e5f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e55e:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e560:	4608      	mov	r0, r1
    e562:	9101      	str	r1, [sp, #4]
    e564:	f00d fb8f 	bl	1bc86 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e568:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e56a:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e56c:	eb09 0001 	add.w	r0, r9, r1
    e570:	3801      	subs	r0, #1
    e572:	f00d fb88 	bl	1bc86 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e576:	4284      	cmp	r4, r0
    e578:	f04f 0214 	mov.w	r2, #20
    e57c:	4b22      	ldr	r3, [pc, #136]	; (e608 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e57e:	d013      	beq.n	e5a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e580:	f06f 0315 	mvn.w	r3, #21
    e584:	fb02 f808 	mul.w	r8, r2, r8
    e588:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e58c:	f44f 728a 	mov.w	r2, #276	; 0x114
    e590:	491e      	ldr	r1, [pc, #120]	; (e60c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e592:	481f      	ldr	r0, [pc, #124]	; (e610 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e594:	f00c fa24 	bl	1a9e0 <printk>
    e598:	f44f 718a 	mov.w	r1, #276	; 0x114
    e59c:	481b      	ldr	r0, [pc, #108]	; (e60c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e59e:	b003      	add	sp, #12
    e5a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e5a4:	f00c bcc2 	b.w	1af2c <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e5a8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e5ac:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e5ae:	d0ed      	beq.n	e58c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e5b0:	7819      	ldrb	r1, [r3, #0]
    e5b2:	42a1      	cmp	r1, r4
    e5b4:	ddea      	ble.n	e58c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e5b6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e5ba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e5be:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e5c2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e5c6:	f100 0108 	add.w	r1, r0, #8
    e5ca:	7b00      	ldrb	r0, [r0, #12]
    e5cc:	f364 0004 	bfi	r0, r4, #0, #5
    e5d0:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e5d2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e5d6:	790c      	ldrb	r4, [r1, #4]
    e5d8:	0840      	lsrs	r0, r0, #1
    e5da:	f360 1447 	bfi	r4, r0, #5, #3
    e5de:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e5e0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e5e4:	f021 011f 	bic.w	r1, r1, #31
    e5e8:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e5ea:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e5ee:	f021 011f 	bic.w	r1, r1, #31
    e5f2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5f4:	f108 0801 	add.w	r8, r8, #1
    e5f8:	3514      	adds	r5, #20
    e5fa:	360c      	adds	r6, #12
    e5fc:	e7a5      	b.n	e54a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e5fe:	bf00      	nop
    e600:	20009ed4 	.word	0x20009ed4
    e604:	e000ed00 	.word	0xe000ed00
    e608:	2000e99a 	.word	0x2000e99a
    e60c:	00020c1b 	.word	0x00020c1b
    e610:	0001faab 	.word	0x0001faab

0000e614 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e614:	4b01      	ldr	r3, [pc, #4]	; (e61c <__stdout_hook_install+0x8>)
    e616:	6018      	str	r0, [r3, #0]
}
    e618:	4770      	bx	lr
    e61a:	bf00      	nop
    e61c:	200082a4 	.word	0x200082a4

0000e620 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e620:	2000      	movs	r0, #0
    e622:	4b02      	ldr	r3, [pc, #8]	; (e62c <remoteproc_mgr_boot+0xc>)
    e624:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e628:	4770      	bx	lr
    e62a:	bf00      	nop
    e62c:	40005000 	.word	0x40005000

0000e630 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e630:	4b0e      	ldr	r3, [pc, #56]	; (e66c <bt_hex_real+0x3c>)
    e632:	2940      	cmp	r1, #64	; 0x40
    e634:	bf28      	it	cs
    e636:	2140      	movcs	r1, #64	; 0x40
{
    e638:	b570      	push	{r4, r5, r6, lr}
    e63a:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e63c:	4c0c      	ldr	r4, [pc, #48]	; (e670 <bt_hex_real+0x40>)
    e63e:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e640:	42b0      	cmp	r0, r6
    e642:	f103 0302 	add.w	r3, r3, #2
    e646:	d104      	bne.n	e652 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e648:	2300      	movs	r3, #0
    e64a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e64e:	4807      	ldr	r0, [pc, #28]	; (e66c <bt_hex_real+0x3c>)
    e650:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e652:	7802      	ldrb	r2, [r0, #0]
    e654:	0912      	lsrs	r2, r2, #4
    e656:	5ca2      	ldrb	r2, [r4, r2]
    e658:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e65c:	f810 2b01 	ldrb.w	r2, [r0], #1
    e660:	f002 020f 	and.w	r2, r2, #15
    e664:	5ca2      	ldrb	r2, [r4, r2]
    e666:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e66a:	e7e9      	b.n	e640 <bt_hex_real+0x10>
    e66c:	2000e9b9 	.word	0x2000e9b9
    e670:	00020c84 	.word	0x00020c84

0000e674 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e674:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e676:	7803      	ldrb	r3, [r0, #0]
    e678:	b08b      	sub	sp, #44	; 0x2c
    e67a:	4604      	mov	r4, r0
    e67c:	ad07      	add	r5, sp, #28
    e67e:	2b03      	cmp	r3, #3
    e680:	d821      	bhi.n	e6c6 <bt_addr_le_str_real+0x52>
    e682:	e8df f003 	tbb	[pc, r3]
    e686:	1a02      	.short	0x1a02
    e688:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e68a:	4912      	ldr	r1, [pc, #72]	; (e6d4 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e68c:	4628      	mov	r0, r5
    e68e:	f00d fb77 	bl	1bd80 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e692:	7863      	ldrb	r3, [r4, #1]
    e694:	211e      	movs	r1, #30
    e696:	9304      	str	r3, [sp, #16]
    e698:	78a3      	ldrb	r3, [r4, #2]
    e69a:	4a0f      	ldr	r2, [pc, #60]	; (e6d8 <bt_addr_le_str_real+0x64>)
    e69c:	9303      	str	r3, [sp, #12]
    e69e:	78e3      	ldrb	r3, [r4, #3]
    e6a0:	9505      	str	r5, [sp, #20]
    e6a2:	9302      	str	r3, [sp, #8]
    e6a4:	7923      	ldrb	r3, [r4, #4]
    e6a6:	480d      	ldr	r0, [pc, #52]	; (e6dc <bt_addr_le_str_real+0x68>)
    e6a8:	9301      	str	r3, [sp, #4]
    e6aa:	7963      	ldrb	r3, [r4, #5]
    e6ac:	9300      	str	r3, [sp, #0]
    e6ae:	79a3      	ldrb	r3, [r4, #6]
    e6b0:	f00c f9a3 	bl	1a9fa <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e6b4:	4809      	ldr	r0, [pc, #36]	; (e6dc <bt_addr_le_str_real+0x68>)
    e6b6:	b00b      	add	sp, #44	; 0x2c
    e6b8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e6ba:	4909      	ldr	r1, [pc, #36]	; (e6e0 <bt_addr_le_str_real+0x6c>)
    e6bc:	e7e6      	b.n	e68c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e6be:	4909      	ldr	r1, [pc, #36]	; (e6e4 <bt_addr_le_str_real+0x70>)
    e6c0:	e7e4      	b.n	e68c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e6c2:	4909      	ldr	r1, [pc, #36]	; (e6e8 <bt_addr_le_str_real+0x74>)
    e6c4:	e7e2      	b.n	e68c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e6c6:	210a      	movs	r1, #10
    e6c8:	4628      	mov	r0, r5
    e6ca:	4a08      	ldr	r2, [pc, #32]	; (e6ec <bt_addr_le_str_real+0x78>)
    e6cc:	f00c f995 	bl	1a9fa <snprintk>
		break;
    e6d0:	e7df      	b.n	e692 <bt_addr_le_str_real+0x1e>
    e6d2:	bf00      	nop
    e6d4:	0001f2f8 	.word	0x0001f2f8
    e6d8:	0001f321 	.word	0x0001f321
    e6dc:	2000e99b 	.word	0x2000e99b
    e6e0:	0001f2ff 	.word	0x0001f2ff
    e6e4:	0001f306 	.word	0x0001f306
    e6e8:	0001f310 	.word	0x0001f310
    e6ec:	0001f31a 	.word	0x0001f31a

0000e6f0 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e6f0:	2149      	movs	r1, #73	; 0x49
{
    e6f2:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e6f4:	4809      	ldr	r0, [pc, #36]	; (e71c <save_id+0x2c>)
    e6f6:	f00c f973 	bl	1a9e0 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e6fa:	4909      	ldr	r1, [pc, #36]	; (e720 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e6fc:	4809      	ldr	r0, [pc, #36]	; (e724 <save_id+0x34>)
    e6fe:	79ca      	ldrb	r2, [r1, #7]
    e700:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e704:	f7fd fad2 	bl	bcac <settings_save_one>
	if (err) {
    e708:	4602      	mov	r2, r0
    e70a:	b128      	cbz	r0, e718 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e70c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e710:	2145      	movs	r1, #69	; 0x45
    e712:	4805      	ldr	r0, [pc, #20]	; (e728 <save_id+0x38>)
    e714:	f00c b964 	b.w	1a9e0 <printk>
}
    e718:	bd08      	pop	{r3, pc}
    e71a:	bf00      	nop
    e71c:	00020c95 	.word	0x00020c95
    e720:	20008000 	.word	0x20008000
    e724:	00020ca4 	.word	0x00020ca4
    e728:	00020caa 	.word	0x00020caa

0000e72c <set>:
{
    e72c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e72e:	4616      	mov	r6, r2
    e730:	461f      	mov	r7, r3
	if (!name) {
    e732:	4604      	mov	r4, r0
    e734:	b930      	cbnz	r0, e744 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e736:	2145      	movs	r1, #69	; 0x45
    e738:	4819      	ldr	r0, [pc, #100]	; (e7a0 <set+0x74>)
    e73a:	f00c f951 	bl	1a9e0 <printk>
	return -ENOENT;
    e73e:	f06f 0401 	mvn.w	r4, #1
    e742:	e013      	b.n	e76c <set+0x40>
	len = settings_name_next(name, &next);
    e744:	a901      	add	r1, sp, #4
    e746:	f00c fc50 	bl	1afea <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e74a:	4916      	ldr	r1, [pc, #88]	; (e7a4 <set+0x78>)
	len = settings_name_next(name, &next);
    e74c:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e74e:	4620      	mov	r0, r4
    e750:	f00d fb4e 	bl	1bdf0 <strncmp>
    e754:	4604      	mov	r4, r0
    e756:	2800      	cmp	r0, #0
    e758:	d1f1      	bne.n	e73e <set+0x12>
    e75a:	4d13      	ldr	r5, [pc, #76]	; (e7a8 <set+0x7c>)
    e75c:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e760:	075b      	lsls	r3, r3, #29
    e762:	d506      	bpl.n	e772 <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e764:	2157      	movs	r1, #87	; 0x57
    e766:	4811      	ldr	r0, [pc, #68]	; (e7ac <set+0x80>)
    e768:	f00c f93a 	bl	1a9e0 <printk>
}
    e76c:	4620      	mov	r0, r4
    e76e:	b003      	add	sp, #12
    e770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e772:	3d94      	subs	r5, #148	; 0x94
    e774:	2207      	movs	r2, #7
    e776:	4629      	mov	r1, r5
    e778:	4638      	mov	r0, r7
    e77a:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e77c:	2806      	cmp	r0, #6
    e77e:	d80a      	bhi.n	e796 <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e780:	2145      	movs	r1, #69	; 0x45
    e782:	480b      	ldr	r0, [pc, #44]	; (e7b0 <set+0x84>)
    e784:	f00c f92c 	bl	1a9e0 <printk>
			(void)memset(bt_dev.id_addr, 0,
    e788:	2207      	movs	r2, #7
    e78a:	4621      	mov	r1, r4
    e78c:	4628      	mov	r0, r5
    e78e:	f00d fb7c 	bl	1be8a <memset>
			bt_dev.id_count = 0U;
    e792:	71ec      	strb	r4, [r5, #7]
    e794:	e7ea      	b.n	e76c <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e796:	2307      	movs	r3, #7
    e798:	fbb0 f0f3 	udiv	r0, r0, r3
    e79c:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e79e:	e7e5      	b.n	e76c <set+0x40>
    e7a0:	00020cca 	.word	0x00020cca
    e7a4:	0001f30d 	.word	0x0001f30d
    e7a8:	20008094 	.word	0x20008094
    e7ac:	00020cf0 	.word	0x00020cf0
    e7b0:	00020d19 	.word	0x00020d19

0000e7b4 <bt_settings_encode_key>:
{
    e7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7b8:	b088      	sub	sp, #32
    e7ba:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e7be:	799c      	ldrb	r4, [r3, #6]
    e7c0:	795d      	ldrb	r5, [r3, #5]
    e7c2:	791e      	ldrb	r6, [r3, #4]
    e7c4:	78df      	ldrb	r7, [r3, #3]
    e7c6:	f893 c002 	ldrb.w	ip, [r3, #2]
    e7ca:	f893 e001 	ldrb.w	lr, [r3, #1]
    e7ce:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e7d0:	f1b8 0f00 	cmp.w	r8, #0
    e7d4:	d00e      	beq.n	e7f4 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e7d6:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e7da:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e7de:	4613      	mov	r3, r2
    e7e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e7e4:	e9cd 4500 	strd	r4, r5, [sp]
    e7e8:	4a08      	ldr	r2, [pc, #32]	; (e80c <bt_settings_encode_key+0x58>)
    e7ea:	f00c f906 	bl	1a9fa <snprintk>
}
    e7ee:	b008      	add	sp, #32
    e7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e7f4:	e9cd e305 	strd	lr, r3, [sp, #20]
    e7f8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e7fc:	4613      	mov	r3, r2
    e7fe:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e802:	4a03      	ldr	r2, [pc, #12]	; (e810 <bt_settings_encode_key+0x5c>)
    e804:	9400      	str	r4, [sp, #0]
    e806:	f00c f8f8 	bl	1a9fa <snprintk>
}
    e80a:	e7f0      	b.n	e7ee <bt_settings_encode_key+0x3a>
    e80c:	00020d43 	.word	0x00020d43
    e810:	00020d67 	.word	0x00020d67

0000e814 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e814:	4907      	ldr	r1, [pc, #28]	; (e834 <bt_settings_save_id+0x20>)
    e816:	e8d1 3fef 	ldaex	r3, [r1]
    e81a:	f043 0201 	orr.w	r2, r3, #1
    e81e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e822:	2800      	cmp	r0, #0
    e824:	d1f7      	bne.n	e816 <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e826:	07db      	lsls	r3, r3, #31
    e828:	d403      	bmi.n	e832 <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e82a:	4803      	ldr	r0, [pc, #12]	; (e838 <bt_settings_save_id+0x24>)
    e82c:	3908      	subs	r1, #8
    e82e:	f00f bb8d 	b.w	1df4c <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e832:	4770      	bx	lr
    e834:	200082b0 	.word	0x200082b0
    e838:	200098e0 	.word	0x200098e0

0000e83c <commit>:

static int commit(void)
{
    e83c:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e83e:	4c13      	ldr	r4, [pc, #76]	; (e88c <commit+0x50>)
    e840:	79e3      	ldrb	r3, [r4, #7]
    e842:	b96b      	cbnz	r3, e860 <commit+0x24>
		bt_setup_public_id_addr();
    e844:	f001 ffc0 	bl	107c8 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e848:	79e3      	ldrb	r3, [r4, #7]
    e84a:	b94b      	cbnz	r3, e860 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e84c:	f002 f84a 	bl	108e4 <bt_setup_random_id_addr>
		if (err) {
    e850:	4604      	mov	r4, r0
    e852:	b128      	cbz	r0, e860 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e854:	2145      	movs	r1, #69	; 0x45
    e856:	480e      	ldr	r0, [pc, #56]	; (e890 <commit+0x54>)
    e858:	f00c f8c2 	bl	1a9e0 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e85c:	4620      	mov	r0, r4
    e85e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e860:	4d0c      	ldr	r5, [pc, #48]	; (e894 <commit+0x58>)
    e862:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e866:	079b      	lsls	r3, r3, #30
    e868:	d401      	bmi.n	e86e <commit+0x32>
		bt_finalize_init();
    e86a:	f001 fc95 	bl	10198 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e86e:	e8d5 4fef 	ldaex	r4, [r5]
    e872:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e876:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e87a:	2a00      	cmp	r2, #0
    e87c:	d1f7      	bne.n	e86e <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e87e:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e882:	d0eb      	beq.n	e85c <commit+0x20>
		bt_settings_save_id();
    e884:	f7ff ffc6 	bl	e814 <bt_settings_save_id>
	return 0;
    e888:	2400      	movs	r4, #0
    e88a:	e7e7      	b.n	e85c <commit+0x20>
    e88c:	20008000 	.word	0x20008000
    e890:	00020d88 	.word	0x00020d88
    e894:	20008094 	.word	0x20008094

0000e898 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e898:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e89a:	f7fd fad1 	bl	be40 <settings_subsys_init>
	if (err) {
    e89e:	4604      	mov	r4, r0
    e8a0:	b120      	cbz	r0, e8ac <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e8a2:	4602      	mov	r2, r0
    e8a4:	2145      	movs	r1, #69	; 0x45
    e8a6:	4802      	ldr	r0, [pc, #8]	; (e8b0 <bt_settings_init+0x18>)
    e8a8:	f00c f89a 	bl	1a9e0 <printk>
		return err;
	}

	return 0;
}
    e8ac:	4620      	mov	r0, r4
    e8ae:	bd10      	pop	{r4, pc}
    e8b0:	00020db1 	.word	0x00020db1

0000e8b4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e8b4:	4603      	mov	r3, r0
    e8b6:	b430      	push	{r4, r5}
	switch (src->type) {
    e8b8:	781a      	ldrb	r2, [r3, #0]
{
    e8ba:	4608      	mov	r0, r1
	switch (src->type) {
    e8bc:	2a01      	cmp	r2, #1
    e8be:	d013      	beq.n	e8e8 <uuid_to_uuid128+0x34>
    e8c0:	2a02      	cmp	r2, #2
    e8c2:	d026      	beq.n	e912 <uuid_to_uuid128+0x5e>
    e8c4:	b972      	cbnz	r2, e8e4 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e8c6:	4a15      	ldr	r2, [pc, #84]	; (e91c <uuid_to_uuid128+0x68>)
    e8c8:	f102 0410 	add.w	r4, r2, #16
    e8cc:	f852 5b04 	ldr.w	r5, [r2], #4
    e8d0:	42a2      	cmp	r2, r4
    e8d2:	f841 5b04 	str.w	r5, [r1], #4
    e8d6:	d1f9      	bne.n	e8cc <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e8d8:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e8da:	7812      	ldrb	r2, [r2, #0]
    e8dc:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e8de:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e8e0:	0a1b      	lsrs	r3, r3, #8
    e8e2:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e8e4:	bc30      	pop	{r4, r5}
    e8e6:	4770      	bx	lr
		*dst = uuid128_base;
    e8e8:	4a0c      	ldr	r2, [pc, #48]	; (e91c <uuid_to_uuid128+0x68>)
    e8ea:	f102 0410 	add.w	r4, r2, #16
    e8ee:	f852 5b04 	ldr.w	r5, [r2], #4
    e8f2:	42a2      	cmp	r2, r4
    e8f4:	f841 5b04 	str.w	r5, [r1], #4
    e8f8:	d1f9      	bne.n	e8ee <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e8fa:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e8fc:	7812      	ldrb	r2, [r2, #0]
    e8fe:	700a      	strb	r2, [r1, #0]
    e900:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e904:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e906:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e908:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e90a:	0a1b      	lsrs	r3, r3, #8
    e90c:	7382      	strb	r2, [r0, #14]
    e90e:	7403      	strb	r3, [r0, #16]
}
    e910:	e7e8      	b.n	e8e4 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e912:	2211      	movs	r2, #17
}
    e914:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e916:	4619      	mov	r1, r3
    e918:	f00d ba8c 	b.w	1be34 <memcpy>
    e91c:	00020dea 	.word	0x00020dea

0000e920 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e920:	2801      	cmp	r0, #1
{
    e922:	b570      	push	{r4, r5, r6, lr}
    e924:	4605      	mov	r5, r0
    e926:	4616      	mov	r6, r2
    e928:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e92a:	d010      	beq.n	e94e <bt_buf_get_rx+0x2e>
    e92c:	2803      	cmp	r0, #3
    e92e:	d00a      	beq.n	e946 <bt_buf_get_rx+0x26>
    e930:	2805      	cmp	r0, #5
    e932:	d008      	beq.n	e946 <bt_buf_get_rx+0x26>
    e934:	490c      	ldr	r1, [pc, #48]	; (e968 <bt_buf_get_rx+0x48>)
    e936:	480d      	ldr	r0, [pc, #52]	; (e96c <bt_buf_get_rx+0x4c>)
    e938:	2233      	movs	r2, #51	; 0x33
    e93a:	f00c f851 	bl	1a9e0 <printk>
    e93e:	2133      	movs	r1, #51	; 0x33
    e940:	4809      	ldr	r0, [pc, #36]	; (e968 <bt_buf_get_rx+0x48>)
    e942:	f00c faf3 	bl	1af2c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e946:	4632      	mov	r2, r6
    e948:	4623      	mov	r3, r4
    e94a:	4809      	ldr	r0, [pc, #36]	; (e970 <bt_buf_get_rx+0x50>)
    e94c:	e000      	b.n	e950 <bt_buf_get_rx+0x30>
    e94e:	4809      	ldr	r0, [pc, #36]	; (e974 <bt_buf_get_rx+0x54>)
    e950:	f00e fd81 	bl	1d456 <net_buf_alloc_fixed>
    e954:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e956:	b12c      	cbz	r4, e964 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    e958:	2101      	movs	r1, #1
    e95a:	f104 0008 	add.w	r0, r4, #8
    e95e:	f006 ff77 	bl	15850 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e962:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e964:	4620      	mov	r0, r4
    e966:	bd70      	pop	{r4, r5, r6, pc}
    e968:	00020dfb 	.word	0x00020dfb
    e96c:	0001faab 	.word	0x0001faab
    e970:	20008580 	.word	0x20008580
    e974:	2000865c 	.word	0x2000865c

0000e978 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e978:	4602      	mov	r2, r0
    e97a:	460b      	mov	r3, r1
    e97c:	b570      	push	{r4, r5, r6, lr}
    e97e:	f04f 0120 	mov.w	r1, #32
    e982:	f3ef 8511 	mrs	r5, BASEPRI
    e986:	f381 8811 	msr	BASEPRI, r1
    e98a:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    e98e:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    e990:	490b      	ldr	r1, [pc, #44]	; (e9c0 <bt_buf_get_cmd_complete+0x48>)
    e992:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    e996:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    e99a:	f385 8811 	msr	BASEPRI, r5
    e99e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    e9a2:	b924      	cbnz	r4, e9ae <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    e9a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e9a8:	2001      	movs	r0, #1
    e9aa:	f7ff bfb9 	b.w	e920 <bt_buf_get_rx>
    e9ae:	2101      	movs	r1, #1
		buf->len = 0U;
    e9b0:	81a0      	strh	r0, [r4, #12]
    e9b2:	7521      	strb	r1, [r4, #20]
    e9b4:	f104 0008 	add.w	r0, r4, #8
    e9b8:	f006 ff4a 	bl	15850 <net_buf_simple_reserve>
}
    e9bc:	4620      	mov	r0, r4
    e9be:	bd70      	pop	{r4, r5, r6, pc}
    e9c0:	20008000 	.word	0x20008000

0000e9c4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e9c4:	b570      	push	{r4, r5, r6, lr}
    e9c6:	4604      	mov	r4, r0
	switch (evt) {
    e9c8:	2c0f      	cmp	r4, #15
{
    e9ca:	460d      	mov	r5, r1
    e9cc:	4610      	mov	r0, r2
    e9ce:	4619      	mov	r1, r3
	switch (evt) {
    e9d0:	d805      	bhi.n	e9de <bt_buf_get_evt+0x1a>
    e9d2:	2c0d      	cmp	r4, #13
    e9d4:	d912      	bls.n	e9fc <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    e9d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    e9da:	f7ff bfcd 	b.w	e978 <bt_buf_get_cmd_complete>
	switch (evt) {
    e9de:	2c13      	cmp	r4, #19
    e9e0:	d10c      	bne.n	e9fc <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    e9e2:	480b      	ldr	r0, [pc, #44]	; (ea10 <bt_buf_get_evt+0x4c>)
    e9e4:	f00e fd37 	bl	1d456 <net_buf_alloc_fixed>
			if (buf) {
    e9e8:	4604      	mov	r4, r0
    e9ea:	b128      	cbz	r0, e9f8 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    e9ec:	2101      	movs	r1, #1
    e9ee:	3008      	adds	r0, #8
    e9f0:	f006 ff2e 	bl	15850 <net_buf_simple_reserve>
    e9f4:	2301      	movs	r3, #1
    e9f6:	7523      	strb	r3, [r4, #20]
}
    e9f8:	4620      	mov	r0, r4
    e9fa:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    e9fc:	4602      	mov	r2, r0
    e9fe:	460b      	mov	r3, r1
		if (discardable) {
    ea00:	b10d      	cbz	r5, ea06 <bt_buf_get_evt+0x42>
    ea02:	4804      	ldr	r0, [pc, #16]	; (ea14 <bt_buf_get_evt+0x50>)
    ea04:	e7ee      	b.n	e9e4 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ea06:	2001      	movs	r0, #1
}
    ea08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ea0c:	f7ff bf88 	b.w	e920 <bt_buf_get_rx>
    ea10:	20008688 	.word	0x20008688
    ea14:	200085d8 	.word	0x200085d8

0000ea18 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    ea18:	6883      	ldr	r3, [r0, #8]
    ea1a:	2157      	movs	r1, #87	; 0x57
    ea1c:	781a      	ldrb	r2, [r3, #0]
    ea1e:	4801      	ldr	r0, [pc, #4]	; (ea24 <hci_data_buf_overflow+0xc>)
    ea20:	f00b bfde 	b.w	1a9e0 <printk>
    ea24:	00020e31 	.word	0x00020e31

0000ea28 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    ea28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea2a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    ea2c:	2500      	movs	r5, #0
    ea2e:	4f09      	ldr	r7, [pc, #36]	; (ea54 <id_find+0x2c>)
    ea30:	79fb      	ldrb	r3, [r7, #7]
    ea32:	b2ec      	uxtb	r4, r5
    ea34:	42a3      	cmp	r3, r4
    ea36:	d802      	bhi.n	ea3e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    ea38:	f06f 0401 	mvn.w	r4, #1
    ea3c:	e008      	b.n	ea50 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    ea3e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ea42:	4630      	mov	r0, r6
    ea44:	4439      	add	r1, r7
    ea46:	f00d faf3 	bl	1c030 <bt_addr_le_cmp>
    ea4a:	3501      	adds	r5, #1
    ea4c:	2800      	cmp	r0, #0
    ea4e:	d1ef      	bne.n	ea30 <id_find+0x8>
}
    ea50:	4620      	mov	r0, r4
    ea52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea54:	20008000 	.word	0x20008000

0000ea58 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    ea58:	6843      	ldr	r3, [r0, #4]
{
    ea5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ea5c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    ea5e:	0558      	lsls	r0, r3, #21
    ea60:	d502      	bpl.n	ea68 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
		return false;
    ea62:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    ea64:	b003      	add	sp, #12
    ea66:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ea68:	6922      	ldr	r2, [r4, #16]
    ea6a:	b10a      	cbz	r2, ea70 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
    ea6c:	07d9      	lsls	r1, r3, #31
    ea6e:	d5f8      	bpl.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
	if (param->id >= bt_dev.id_count ||
    ea70:	4d1a      	ldr	r5, [pc, #104]	; (eadc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>)
    ea72:	7820      	ldrb	r0, [r4, #0]
    ea74:	79eb      	ldrb	r3, [r5, #7]
    ea76:	4283      	cmp	r3, r0
    ea78:	d9f3      	bls.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    ea7a:	2300      	movs	r3, #0
    ea7c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ea80:	4669      	mov	r1, sp
    ea82:	4428      	add	r0, r5
    ea84:	9300      	str	r3, [sp, #0]
    ea86:	f8cd 3003 	str.w	r3, [sp, #3]
    ea8a:	f00d fad1 	bl	1c030 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    ea8e:	2800      	cmp	r0, #0
    ea90:	d0e7      	beq.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ea92:	6860      	ldr	r0, [r4, #4]
    ea94:	07c2      	lsls	r2, r0, #31
    ea96:	d406      	bmi.n	eaa6 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    ea98:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    ea9c:	2b08      	cmp	r3, #8
    ea9e:	d802      	bhi.n	eaa6 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x46>
    eaa0:	68a3      	ldr	r3, [r4, #8]
    eaa2:	2b9f      	cmp	r3, #159	; 0x9f
    eaa4:	d9dd      	bls.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    eaa6:	f010 0f30 	tst.w	r0, #48	; 0x30
    eaaa:	d002      	beq.n	eab2 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    eaac:	6923      	ldr	r3, [r4, #16]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d0d7      	beq.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    eab2:	06c3      	lsls	r3, r0, #27
    eab4:	d401      	bmi.n	eaba <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5a>
    eab6:	6923      	ldr	r3, [r4, #16]
    eab8:	b943      	cbnz	r3, eacc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
		if (param->interval_min > param->interval_max ||
    eaba:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    eabe:	429a      	cmp	r2, r3
    eac0:	d8cf      	bhi.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    eac2:	2a1f      	cmp	r2, #31
    eac4:	d9cd      	bls.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
		    param->interval_min < 0x0020 ||
    eac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    eaca:	d8ca      	bhi.n	ea62 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    eacc:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    ead0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    ead4:	bf18      	it	ne
    ead6:	2001      	movne	r0, #1
    ead8:	e7c4      	b.n	ea64 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
    eada:	bf00      	nop
    eadc:	20008000 	.word	0x20008000

0000eae0 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eae0:	6883      	ldr	r3, [r0, #8]
{
    eae2:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eae4:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    eae6:	4620      	mov	r0, r4
    eae8:	f002 fd98 	bl	1161c <bt_conn_lookup_handle>
	if (!conn) {
    eaec:	b930      	cbnz	r0, eafc <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eaee:	4622      	mov	r2, r4
}
    eaf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eaf4:	2145      	movs	r1, #69	; 0x45
    eaf6:	4803      	ldr	r0, [pc, #12]	; (eb04 <le_data_len_change+0x24>)
    eaf8:	f00b bf72 	b.w	1a9e0 <printk>
}
    eafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    eb00:	f002 bd68 	b.w	115d4 <bt_conn_unref>
    eb04:	00020e5e 	.word	0x00020e5e

0000eb08 <hci_disconn_complete_prio>:
{
    eb08:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    eb0a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    eb0c:	781a      	ldrb	r2, [r3, #0]
    eb0e:	b9aa      	cbnz	r2, eb3c <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eb10:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    eb14:	4628      	mov	r0, r5
    eb16:	f002 fd81 	bl	1161c <bt_conn_lookup_handle>
	if (!conn) {
    eb1a:	4604      	mov	r4, r0
    eb1c:	b930      	cbnz	r0, eb2c <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    eb1e:	462a      	mov	r2, r5
}
    eb20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    eb24:	2145      	movs	r1, #69	; 0x45
    eb26:	4806      	ldr	r0, [pc, #24]	; (eb40 <hci_disconn_complete_prio+0x38>)
    eb28:	f00b bf5a 	b.w	1a9e0 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    eb2c:	2101      	movs	r1, #1
    eb2e:	f002 fd7d 	bl	1162c <bt_conn_set_state>
	bt_conn_unref(conn);
    eb32:	4620      	mov	r0, r4
}
    eb34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    eb38:	f002 bd4c 	b.w	115d4 <bt_conn_unref>
}
    eb3c:	bd38      	pop	{r3, r4, r5, pc}
    eb3e:	bf00      	nop
    eb40:	00020e87 	.word	0x00020e87

0000eb44 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    eb44:	2101      	movs	r1, #1
{
    eb46:	b508      	push	{r3, lr}
    eb48:	3008      	adds	r0, #8
    eb4a:	f006 ffcb 	bl	15ae4 <net_buf_simple_pull_mem>
}
    eb4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    eb52:	7802      	ldrb	r2, [r0, #0]
    eb54:	2145      	movs	r1, #69	; 0x45
    eb56:	4801      	ldr	r0, [pc, #4]	; (eb5c <hci_hardware_error+0x18>)
    eb58:	f00b bf42 	b.w	1a9e0 <printk>
    eb5c:	00020eb2 	.word	0x00020eb2

0000eb60 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    eb60:	8981      	ldrh	r1, [r0, #12]
{
    eb62:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    eb64:	6880      	ldr	r0, [r0, #8]
    eb66:	f7ff fd63 	bl	e630 <bt_hex_real>
}
    eb6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    eb6e:	4602      	mov	r2, r0
    eb70:	2157      	movs	r1, #87	; 0x57
    eb72:	4801      	ldr	r0, [pc, #4]	; (eb78 <hci_vendor_event+0x18>)
    eb74:	f00b bf34 	b.w	1a9e0 <printk>
    eb78:	00020ed9 	.word	0x00020ed9

0000eb7c <le_conn_update_complete>:
{
    eb7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    eb7e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    eb80:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    eb84:	4630      	mov	r0, r6
    eb86:	f002 fd49 	bl	1161c <bt_conn_lookup_handle>
	if (!conn) {
    eb8a:	4604      	mov	r4, r0
    eb8c:	b938      	cbnz	r0, eb9e <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eb8e:	4632      	mov	r2, r6
    eb90:	2145      	movs	r1, #69	; 0x45
    eb92:	4821      	ldr	r0, [pc, #132]	; (ec18 <le_conn_update_complete+0x9c>)
}
    eb94:	b002      	add	sp, #8
    eb96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    eb9a:	f00b bf21 	b.w	1a9e0 <printk>
	if (!evt->status) {
    eb9e:	782b      	ldrb	r3, [r5, #0]
    eba0:	b9cb      	cbnz	r3, ebd6 <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    eba2:	792a      	ldrb	r2, [r5, #4]
    eba4:	78eb      	ldrb	r3, [r5, #3]
    eba6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ebaa:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    ebae:	79aa      	ldrb	r2, [r5, #6]
    ebb0:	796b      	ldrb	r3, [r5, #5]
    ebb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ebb6:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ebba:	79eb      	ldrb	r3, [r5, #7]
    ebbc:	7a2a      	ldrb	r2, [r5, #8]
    ebbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ebc2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    ebc6:	f002 fb47 	bl	11258 <notify_le_param_updated>
	bt_conn_unref(conn);
    ebca:	4620      	mov	r0, r4
}
    ebcc:	b002      	add	sp, #8
    ebce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    ebd2:	f002 bcff 	b.w	115d4 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    ebd6:	2b1a      	cmp	r3, #26
    ebd8:	d1f7      	bne.n	ebca <le_conn_update_complete+0x4e>
    ebda:	78c3      	ldrb	r3, [r0, #3]
    ebdc:	2b01      	cmp	r3, #1
    ebde:	d1f4      	bne.n	ebca <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ebe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    ebe4:	3004      	adds	r0, #4
    ebe6:	f00d fa18 	bl	1c01a <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    ebea:	0543      	lsls	r3, r0, #21
    ebec:	d4ed      	bmi.n	ebca <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    ebee:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    ebf2:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    ebf4:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    ebf8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    ebfc:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    ebfe:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    ec02:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    ec06:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    ec0a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    ec0e:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    ec12:	f003 fb09 	bl	12228 <bt_l2cap_update_conn_param>
    ec16:	e7d8      	b.n	ebca <le_conn_update_complete+0x4e>
    ec18:	00020e5e 	.word	0x00020e5e

0000ec1c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ec1c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ec1e:	4c0c      	ldr	r4, [pc, #48]	; (ec50 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ec20:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ec22:	2205      	movs	r2, #5
    ec24:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ec28:	f002 fe36 	bl	11898 <bt_conn_lookup_state_le>
		if (!conn) {
    ec2c:	b970      	cbnz	r0, ec4c <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    ec2e:	4b09      	ldr	r3, [pc, #36]	; (ec54 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ec30:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    ec32:	6818      	ldr	r0, [r3, #0]
    ec34:	889a      	ldrh	r2, [r3, #4]
    ec36:	799b      	ldrb	r3, [r3, #6]
    ec38:	9000      	str	r0, [sp, #0]
    ec3a:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ec3e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ec42:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    ec44:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ec48:	f002 fe26 	bl	11898 <bt_conn_lookup_state_le>
}
    ec4c:	b002      	add	sp, #8
    ec4e:	bd10      	pop	{r4, pc}
    ec50:	20008000 	.word	0x20008000
    ec54:	0001e730 	.word	0x0001e730

0000ec58 <handle_event>:
{
    ec58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ec5a:	4605      	mov	r5, r0
    ec5c:	4614      	mov	r4, r2
    ec5e:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    ec60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    ec64:	7822      	ldrb	r2, [r4, #0]
    ec66:	42aa      	cmp	r2, r5
    ec68:	d010      	beq.n	ec8c <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    ec6a:	3408      	adds	r4, #8
    ec6c:	429c      	cmp	r4, r3
    ec6e:	d1f9      	bne.n	ec64 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    ec70:	8984      	ldrh	r4, [r0, #12]
    ec72:	6880      	ldr	r0, [r0, #8]
    ec74:	4621      	mov	r1, r4
    ec76:	f7ff fcdb 	bl	e630 <bt_hex_real>
    ec7a:	4623      	mov	r3, r4
    ec7c:	9000      	str	r0, [sp, #0]
    ec7e:	462a      	mov	r2, r5
    ec80:	2157      	movs	r1, #87	; 0x57
    ec82:	480b      	ldr	r0, [pc, #44]	; (ecb0 <handle_event+0x58>)
    ec84:	f00b feac 	bl	1a9e0 <printk>
}
    ec88:	b003      	add	sp, #12
    ec8a:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    ec8c:	8982      	ldrh	r2, [r0, #12]
    ec8e:	7863      	ldrb	r3, [r4, #1]
    ec90:	4293      	cmp	r3, r2
    ec92:	d907      	bls.n	eca4 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ec94:	462b      	mov	r3, r5
    ec96:	2145      	movs	r1, #69	; 0x45
    ec98:	4806      	ldr	r0, [pc, #24]	; (ecb4 <handle_event+0x5c>)
}
    ec9a:	b003      	add	sp, #12
    ec9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    eca0:	f00b be9e 	b.w	1a9e0 <printk>
		handler->handler(buf);
    eca4:	6863      	ldr	r3, [r4, #4]
}
    eca6:	b003      	add	sp, #12
    eca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    ecac:	4718      	bx	r3
    ecae:	bf00      	nop
    ecb0:	00020f29 	.word	0x00020f29
    ecb4:	00020f02 	.word	0x00020f02

0000ecb8 <hci_le_meta_event>:
{
    ecb8:	b510      	push	{r4, lr}
    ecba:	2101      	movs	r1, #1
    ecbc:	4604      	mov	r4, r0
    ecbe:	3008      	adds	r0, #8
    ecc0:	f006 ff10 	bl	15ae4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ecc4:	4621      	mov	r1, r4
}
    ecc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ecca:	2308      	movs	r3, #8
    eccc:	4a01      	ldr	r2, [pc, #4]	; (ecd4 <hci_le_meta_event+0x1c>)
    ecce:	7800      	ldrb	r0, [r0, #0]
    ecd0:	f7ff bfc2 	b.w	ec58 <handle_event>
    ecd4:	0001eadc 	.word	0x0001eadc

0000ecd8 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ecd8:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ecda:	4d18      	ldr	r5, [pc, #96]	; (ed3c <id_create.constprop.0+0x64>)
    ecdc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    ece0:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ece2:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ece4:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    ece6:	b1b1      	cbz	r1, ed16 <id_create.constprop.0+0x3e>
    ece8:	2300      	movs	r3, #0
    ecea:	4620      	mov	r0, r4
    ecec:	a902      	add	r1, sp, #8
    ecee:	9302      	str	r3, [sp, #8]
    ecf0:	f8cd 300b 	str.w	r3, [sp, #11]
    ecf4:	f00d f99c 	bl	1c030 <bt_addr_le_cmp>
    ecf8:	b168      	cbz	r0, ed16 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    ecfa:	4621      	mov	r1, r4
    ecfc:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ecfe:	f00d f989 	bl	1c014 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ed02:	480f      	ldr	r0, [pc, #60]	; (ed40 <id_create.constprop.0+0x68>)
    ed04:	f00d f983 	bl	1c00e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    ed08:	0783      	lsls	r3, r0, #30
    ed0a:	d515      	bpl.n	ed38 <id_create.constprop.0+0x60>
}
    ed0c:	b005      	add	sp, #20
    ed0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    ed12:	f7ff bd7f 	b.w	e814 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    ed16:	4668      	mov	r0, sp
    ed18:	f00d f94a 	bl	1bfb0 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    ed1c:	4668      	mov	r0, sp
    ed1e:	f7ff fe83 	bl	ea28 <id_find>
    ed22:	2800      	cmp	r0, #0
    ed24:	daf7      	bge.n	ed16 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ed26:	4669      	mov	r1, sp
    ed28:	4628      	mov	r0, r5
    ed2a:	f00d f973 	bl	1c014 <bt_addr_le_copy>
		if (addr) {
    ed2e:	2c00      	cmp	r4, #0
    ed30:	d0e7      	beq.n	ed02 <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ed32:	4629      	mov	r1, r5
    ed34:	4620      	mov	r0, r4
    ed36:	e7e2      	b.n	ecfe <id_create.constprop.0+0x26>
}
    ed38:	b005      	add	sp, #20
    ed3a:	bd30      	pop	{r4, r5, pc}
    ed3c:	20008000 	.word	0x20008000
    ed40:	20008094 	.word	0x20008094

0000ed44 <hci_rx_thread>:
{
    ed44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ed48:	4f40      	ldr	r7, [pc, #256]	; (ee4c <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ed4a:	f8df 8104 	ldr.w	r8, [pc, #260]	; ee50 <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ed4e:	4e41      	ldr	r6, [pc, #260]	; (ee54 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ed50:	f04f 32ff 	mov.w	r2, #4294967295
    ed54:	f04f 33ff 	mov.w	r3, #4294967295
    ed58:	4638      	mov	r0, r7
    ed5a:	f006 fd49 	bl	157f0 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ed5e:	7d02      	ldrb	r2, [r0, #20]
    ed60:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    ed62:	2a01      	cmp	r2, #1
    ed64:	d041      	beq.n	edea <hci_rx_thread+0xa6>
    ed66:	2a03      	cmp	r2, #3
    ed68:	d16c      	bne.n	ee44 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ed6a:	8983      	ldrh	r3, [r0, #12]
    ed6c:	2b03      	cmp	r3, #3
    ed6e:	d80b      	bhi.n	ed88 <hci_rx_thread+0x44>
    ed70:	f240 42ac 	movw	r2, #1196	; 0x4ac
    ed74:	4631      	mov	r1, r6
    ed76:	4838      	ldr	r0, [pc, #224]	; (ee58 <hci_rx_thread+0x114>)
    ed78:	f00b fe32 	bl	1a9e0 <printk>
    ed7c:	4040      	eors	r0, r0
    ed7e:	f380 8811 	msr	BASEPRI, r0
    ed82:	f04f 0003 	mov.w	r0, #3
    ed86:	df02      	svc	2
    ed88:	2104      	movs	r1, #4
    ed8a:	f104 0008 	add.w	r0, r4, #8
    ed8e:	f006 fea9 	bl	15ae4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ed92:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    ed94:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ed96:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ed9a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ed9c:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ed9e:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    eda2:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    eda4:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    eda6:	d007      	beq.n	edb8 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    eda8:	2145      	movs	r1, #69	; 0x45
    edaa:	482c      	ldr	r0, [pc, #176]	; (ee5c <hci_rx_thread+0x118>)
    edac:	f00b fe18 	bl	1a9e0 <printk>
			net_buf_unref(buf);
    edb0:	4620      	mov	r0, r4
    edb2:	f006 fd9f 	bl	158f4 <net_buf_unref>
			break;
    edb6:	e015      	b.n	ede4 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    edb8:	f002 fc30 	bl	1161c <bt_conn_lookup_handle>
	if (!conn) {
    edbc:	4605      	mov	r5, r0
    edbe:	b928      	cbnz	r0, edcc <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    edc0:	2145      	movs	r1, #69	; 0x45
    edc2:	8ae2      	ldrh	r2, [r4, #22]
    edc4:	4826      	ldr	r0, [pc, #152]	; (ee60 <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    edc6:	f00b fe0b 	bl	1a9e0 <printk>
    edca:	e7f1      	b.n	edb0 <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    edcc:	f003 f85a 	bl	11e84 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    edd0:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    edd2:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    edd4:	ea4f 3219 	mov.w	r2, r9, lsr #12
    edd8:	4628      	mov	r0, r5
    edda:	f002 fad5 	bl	11388 <bt_conn_recv>
	bt_conn_unref(conn);
    edde:	4628      	mov	r0, r5
    ede0:	f002 fbf8 	bl	115d4 <bt_conn_unref>
	z_impl_k_yield();
    ede4:	f00a fae2 	bl	193ac <z_impl_k_yield>
	while (1) {
    ede8:	e7b2      	b.n	ed50 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    edea:	8983      	ldrh	r3, [r0, #12]
    edec:	2b01      	cmp	r3, #1
    edee:	d80b      	bhi.n	ee08 <hci_rx_thread+0xc4>
    edf0:	f241 32fb 	movw	r2, #5115	; 0x13fb
    edf4:	4631      	mov	r1, r6
    edf6:	4818      	ldr	r0, [pc, #96]	; (ee58 <hci_rx_thread+0x114>)
    edf8:	f00b fdf2 	bl	1a9e0 <printk>
    edfc:	4040      	eors	r0, r0
    edfe:	f380 8811 	msr	BASEPRI, r0
    ee02:	f04f 0003 	mov.w	r0, #3
    ee06:	df02      	svc	2
    ee08:	2102      	movs	r1, #2
    ee0a:	f104 0008 	add.w	r0, r4, #8
    ee0e:	f006 fe69 	bl	15ae4 <net_buf_simple_pull_mem>
    ee12:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ee14:	7800      	ldrb	r0, [r0, #0]
    ee16:	f00d f8d9 	bl	1bfcc <bt_hci_evt_get_flags>
    ee1a:	0783      	lsls	r3, r0, #30
    ee1c:	d40b      	bmi.n	ee36 <hci_rx_thread+0xf2>
    ee1e:	f241 32ff 	movw	r2, #5119	; 0x13ff
    ee22:	4631      	mov	r1, r6
    ee24:	480c      	ldr	r0, [pc, #48]	; (ee58 <hci_rx_thread+0x114>)
    ee26:	f00b fddb 	bl	1a9e0 <printk>
    ee2a:	4040      	eors	r0, r0
    ee2c:	f380 8811 	msr	BASEPRI, r0
    ee30:	f04f 0003 	mov.w	r0, #3
    ee34:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ee36:	2304      	movs	r3, #4
    ee38:	4642      	mov	r2, r8
    ee3a:	4621      	mov	r1, r4
    ee3c:	7828      	ldrb	r0, [r5, #0]
    ee3e:	f7ff ff0b 	bl	ec58 <handle_event>
	net_buf_unref(buf);
    ee42:	e7b5      	b.n	edb0 <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ee44:	2145      	movs	r1, #69	; 0x45
    ee46:	4807      	ldr	r0, [pc, #28]	; (ee64 <hci_rx_thread+0x120>)
    ee48:	e7bd      	b.n	edc6 <hci_rx_thread+0x82>
    ee4a:	bf00      	nop
    ee4c:	200080fc 	.word	0x200080fc
    ee50:	0001eb2c 	.word	0x0001eb2c
    ee54:	00020f50 	.word	0x00020f50
    ee58:	0001faab 	.word	0x0001faab
    ee5c:	00020f84 	.word	0x00020f84
    ee60:	00020fad 	.word	0x00020fad
    ee64:	00020fd4 	.word	0x00020fd4

0000ee68 <hci_cmd_done>:
{
    ee68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ee6c:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ee6e:	7990      	ldrb	r0, [r2, #6]
{
    ee70:	460f      	mov	r7, r1
    ee72:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ee74:	f006 fbbe 	bl	155f4 <net_buf_pool_get>
    ee78:	4d2a      	ldr	r5, [pc, #168]	; (ef24 <hci_cmd_done+0xbc>)
    ee7a:	4285      	cmp	r5, r0
    ee7c:	d00e      	beq.n	ee9c <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    ee7e:	79a4      	ldrb	r4, [r4, #6]
    ee80:	4620      	mov	r0, r4
    ee82:	f006 fbb7 	bl	155f4 <net_buf_pool_get>
    ee86:	4623      	mov	r3, r4
    ee88:	e9cd 0500 	strd	r0, r5, [sp]
    ee8c:	4632      	mov	r2, r6
    ee8e:	2157      	movs	r1, #87	; 0x57
    ee90:	4825      	ldr	r0, [pc, #148]	; (ef28 <hci_cmd_done+0xc0>)
    ee92:	f00b fda5 	bl	1a9e0 <printk>
}
    ee96:	b002      	add	sp, #8
    ee98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    ee9c:	4620      	mov	r0, r4
    ee9e:	f006 fbb1 	bl	15604 <net_buf_id>
    eea2:	f04f 080c 	mov.w	r8, #12
    eea6:	4d21      	ldr	r5, [pc, #132]	; (ef2c <hci_cmd_done+0xc4>)
    eea8:	fb08 5000 	mla	r0, r8, r0, r5
    eeac:	8843      	ldrh	r3, [r0, #2]
    eeae:	42b3      	cmp	r3, r6
    eeb0:	d00a      	beq.n	eec8 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    eeb2:	4620      	mov	r0, r4
    eeb4:	f006 fba6 	bl	15604 <net_buf_id>
    eeb8:	fb08 5000 	mla	r0, r8, r0, r5
    eebc:	4632      	mov	r2, r6
    eebe:	8843      	ldrh	r3, [r0, #2]
    eec0:	2157      	movs	r1, #87	; 0x57
    eec2:	481b      	ldr	r0, [pc, #108]	; (ef30 <hci_cmd_done+0xc8>)
    eec4:	f00b fd8c 	bl	1a9e0 <printk>
	if (cmd(buf)->state && !status) {
    eec8:	4620      	mov	r0, r4
    eeca:	f006 fb9b 	bl	15604 <net_buf_id>
    eece:	260c      	movs	r6, #12
    eed0:	fb06 5000 	mla	r0, r6, r0, r5
    eed4:	6843      	ldr	r3, [r0, #4]
    eed6:	b15b      	cbz	r3, eef0 <hci_cmd_done+0x88>
    eed8:	b957      	cbnz	r7, eef0 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    eeda:	4620      	mov	r0, r4
    eedc:	f006 fb92 	bl	15604 <net_buf_id>
    eee0:	fb06 5000 	mla	r0, r6, r0, r5
    eee4:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    eee6:	7a1a      	ldrb	r2, [r3, #8]
    eee8:	e9d3 0100 	ldrd	r0, r1, [r3]
    eeec:	f00d f8ae 	bl	1c04c <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    eef0:	4620      	mov	r0, r4
    eef2:	f006 fb87 	bl	15604 <net_buf_id>
    eef6:	260c      	movs	r6, #12
    eef8:	fb06 5000 	mla	r0, r6, r0, r5
    eefc:	6883      	ldr	r3, [r0, #8]
    eefe:	2b00      	cmp	r3, #0
    ef00:	d0c9      	beq.n	ee96 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    ef02:	4620      	mov	r0, r4
    ef04:	f006 fb7e 	bl	15604 <net_buf_id>
    ef08:	4370      	muls	r0, r6
    ef0a:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    ef0c:	4620      	mov	r0, r4
    ef0e:	f006 fb79 	bl	15604 <net_buf_id>
    ef12:	fb06 5500 	mla	r5, r6, r0, r5
    ef16:	68a8      	ldr	r0, [r5, #8]
}
    ef18:	b002      	add	sp, #8
    ef1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    ef1e:	f00a bb87 	b.w	19630 <z_impl_k_sem_give>
    ef22:	bf00      	nop
    ef24:	20008630 	.word	0x20008630
    ef28:	00020fed 	.word	0x00020fed
    ef2c:	20009ee8 	.word	0x20009ee8
    ef30:	00021027 	.word	0x00021027

0000ef34 <hci_cmd_status>:
{
    ef34:	b538      	push	{r3, r4, r5, lr}
    ef36:	2104      	movs	r1, #4
    ef38:	4604      	mov	r4, r0
    ef3a:	3008      	adds	r0, #8
    ef3c:	f006 fdd2 	bl	15ae4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    ef40:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    ef42:	7801      	ldrb	r1, [r0, #0]
    ef44:	4622      	mov	r2, r4
    ef46:	8840      	ldrh	r0, [r0, #2]
    ef48:	f7ff ff8e 	bl	ee68 <hci_cmd_done>
	if (ncmd) {
    ef4c:	b125      	cbz	r5, ef58 <hci_cmd_status+0x24>
}
    ef4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ef52:	4802      	ldr	r0, [pc, #8]	; (ef5c <hci_cmd_status+0x28>)
    ef54:	f00a bb6c 	b.w	19630 <z_impl_k_sem_give>
    ef58:	bd38      	pop	{r3, r4, r5, pc}
    ef5a:	bf00      	nop
    ef5c:	200080e0 	.word	0x200080e0

0000ef60 <hci_cmd_complete>:
{
    ef60:	b538      	push	{r3, r4, r5, lr}
    ef62:	2103      	movs	r1, #3
    ef64:	4604      	mov	r4, r0
    ef66:	3008      	adds	r0, #8
    ef68:	f006 fdbc 	bl	15ae4 <net_buf_simple_pull_mem>
	status = buf->data[0];
    ef6c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    ef6e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    ef70:	4622      	mov	r2, r4
    ef72:	7819      	ldrb	r1, [r3, #0]
    ef74:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    ef78:	f7ff ff76 	bl	ee68 <hci_cmd_done>
	if (ncmd) {
    ef7c:	b125      	cbz	r5, ef88 <hci_cmd_complete+0x28>
}
    ef7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ef82:	4802      	ldr	r0, [pc, #8]	; (ef8c <hci_cmd_complete+0x2c>)
    ef84:	f00a bb54 	b.w	19630 <z_impl_k_sem_give>
    ef88:	bd38      	pop	{r3, r4, r5, pc}
    ef8a:	bf00      	nop
    ef8c:	200080e0 	.word	0x200080e0

0000ef90 <hci_num_completed_packets>:
{
    ef90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    ef94:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    ef96:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    ef98:	6887      	ldr	r7, [r0, #8]
    ef9a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; f078 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    ef9e:	783b      	ldrb	r3, [r7, #0]
    efa0:	429d      	cmp	r5, r3
    efa2:	db01      	blt.n	efa8 <hci_num_completed_packets+0x18>
}
    efa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    efa8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    efac:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    efb0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    efb4:	4650      	mov	r0, sl
    efb6:	f002 fb31 	bl	1161c <bt_conn_lookup_handle>
		if (!conn) {
    efba:	4604      	mov	r4, r0
    efbc:	b1d0      	cbz	r0, eff4 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    efbe:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    efc2:	b37e      	cbz	r6, f024 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    efc4:	f04f 0320 	mov.w	r3, #32
    efc8:	f3ef 8211 	mrs	r2, BASEPRI
    efcc:	f383 8811 	msr	BASEPRI, r3
    efd0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    efd4:	69e3      	ldr	r3, [r4, #28]
    efd6:	b1a3      	cbz	r3, f002 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    efd8:	3b01      	subs	r3, #1
    efda:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    efdc:	f382 8811 	msr	BASEPRI, r2
    efe0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    efe4:	4620      	mov	r0, r4
    efe6:	f002 f933 	bl	11250 <bt_conn_get_pkts>
    efea:	3e01      	subs	r6, #1
    efec:	f00a fb20 	bl	19630 <z_impl_k_sem_give>
    eff0:	b2b6      	uxth	r6, r6
    eff2:	e7e6      	b.n	efc2 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    eff4:	4652      	mov	r2, sl
    eff6:	2145      	movs	r1, #69	; 0x45
    eff8:	4820      	ldr	r0, [pc, #128]	; (f07c <hci_num_completed_packets+0xec>)
    effa:	f00b fcf1 	bl	1a9e0 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    effe:	3501      	adds	r5, #1
    f000:	e7cd      	b.n	ef9e <hci_num_completed_packets+0xe>
	return list->head;
    f002:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    f004:	b12b      	cbz	r3, f012 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f006:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    f008:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f00a:	428b      	cmp	r3, r1
	list->head = node;
    f00c:	6160      	str	r0, [r4, #20]
	list->tail = node;
    f00e:	bf08      	it	eq
    f010:	61a0      	streq	r0, [r4, #24]
    f012:	f382 8811 	msr	BASEPRI, r2
    f016:	f3bf 8f6f 	isb	sy
			if (!node) {
    f01a:	b93b      	cbnz	r3, f02c <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    f01c:	2145      	movs	r1, #69	; 0x45
    f01e:	4818      	ldr	r0, [pc, #96]	; (f080 <hci_num_completed_packets+0xf0>)
    f020:	f00b fcde 	bl	1a9e0 <printk>
		bt_conn_unref(conn);
    f024:	4620      	mov	r0, r4
    f026:	f002 fad5 	bl	115d4 <bt_conn_unref>
    f02a:	e7e8      	b.n	effe <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    f02c:	f04f 0220 	mov.w	r2, #32
    f030:	f3ef 8111 	mrs	r1, BASEPRI
    f034:	f382 8811 	msr	BASEPRI, r2
    f038:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    f03c:	68da      	ldr	r2, [r3, #12]
    f03e:	61e2      	str	r2, [r4, #28]
	return list->tail;
    f040:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    f042:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    f046:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    f04a:	b98a      	cbnz	r2, f070 <hci_num_completed_packets+0xe0>
	list->head = node;
    f04c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    f050:	f381 8811 	msr	BASEPRI, r1
    f054:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f058:	2101      	movs	r1, #1
    f05a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f05e:	f00c ffdc 	bl	1c01a <atomic_or>
    f062:	07c3      	lsls	r3, r0, #31
    f064:	d4be      	bmi.n	efe4 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    f066:	4651      	mov	r1, sl
    f068:	4648      	mov	r0, r9
    f06a:	f00e ff6f 	bl	1df4c <k_queue_append>
    f06e:	e7b9      	b.n	efe4 <hci_num_completed_packets+0x54>
	parent->next = child;
    f070:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f072:	6263      	str	r3, [r4, #36]	; 0x24
}
    f074:	e7ec      	b.n	f050 <hci_num_completed_packets+0xc0>
    f076:	bf00      	nop
    f078:	200098e0 	.word	0x200098e0
    f07c:	0002105f 	.word	0x0002105f
    f080:	00021080 	.word	0x00021080

0000f084 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    f084:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    f086:	7803      	ldrb	r3, [r0, #0]
{
    f088:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    f08a:	f88d 3004 	strb.w	r3, [sp, #4]
    f08e:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    f090:	4c24      	ldr	r4, [pc, #144]	; (f124 <le_adv_start_add_conn+0xa0>)
{
    f092:	4605      	mov	r5, r0
    f094:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    f096:	f104 0018 	add.w	r0, r4, #24
    f09a:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    f09c:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    f0a0:	f00c ffe5 	bl	1c06e <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    f0a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f0a8:	bb93      	cbnz	r3, f110 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    f0aa:	462e      	mov	r6, r5
    f0ac:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f0b0:	a902      	add	r1, sp, #8
    f0b2:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    f0b4:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f0b8:	9302      	str	r3, [sp, #8]
    f0ba:	f8cd 300b 	str.w	r3, [sp, #11]
    f0be:	f00c ffb7 	bl	1c030 <bt_addr_le_cmp>
    f0c2:	782a      	ldrb	r2, [r5, #0]
    f0c4:	4604      	mov	r4, r0
    f0c6:	b9a8      	cbnz	r0, f0f4 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    f0c8:	4b17      	ldr	r3, [pc, #92]	; (f128 <le_adv_start_add_conn+0xa4>)
    f0ca:	6818      	ldr	r0, [r3, #0]
    f0cc:	8899      	ldrh	r1, [r3, #4]
    f0ce:	799b      	ldrb	r3, [r3, #6]
    f0d0:	9004      	str	r0, [sp, #16]
    f0d2:	f8ad 1014 	strh.w	r1, [sp, #20]
    f0d6:	4610      	mov	r0, r2
    f0d8:	a904      	add	r1, sp, #16
    f0da:	f88d 3016 	strb.w	r3, [sp, #22]
    f0de:	f002 fa4d 	bl	1157c <bt_conn_add_le>
		if (!conn) {
    f0e2:	4605      	mov	r5, r0
    f0e4:	b1d0      	cbz	r0, f11c <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    f0e6:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    f0e8:	f002 faa0 	bl	1162c <bt_conn_set_state>
	*out_conn = conn;
    f0ec:	603d      	str	r5, [r7, #0]
	return 0;
}
    f0ee:	4620      	mov	r0, r4
    f0f0:	b007      	add	sp, #28
    f0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    f0f4:	4631      	mov	r1, r6
    f0f6:	4610      	mov	r0, r2
    f0f8:	f002 fbb2 	bl	11860 <bt_conn_exists_le>
    f0fc:	4604      	mov	r4, r0
    f0fe:	b950      	cbnz	r0, f116 <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    f100:	7828      	ldrb	r0, [r5, #0]
    f102:	4631      	mov	r1, r6
    f104:	f002 fa3a 	bl	1157c <bt_conn_add_le>
	if (!conn) {
    f108:	4605      	mov	r5, r0
    f10a:	b138      	cbz	r0, f11c <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    f10c:	2105      	movs	r1, #5
    f10e:	e7eb      	b.n	f0e8 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    f110:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f114:	e7eb      	b.n	f0ee <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    f116:	f06f 0415 	mvn.w	r4, #21
    f11a:	e7e8      	b.n	f0ee <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    f11c:	f06f 040b 	mvn.w	r4, #11
    f120:	e7e5      	b.n	f0ee <le_adv_start_add_conn+0x6a>
    f122:	bf00      	nop
    f124:	20008000 	.word	0x20008000
    f128:	0001e730 	.word	0x0001e730

0000f12c <bt_hci_cmd_create>:
{
    f12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    f130:	f04f 32ff 	mov.w	r2, #4294967295
    f134:	4606      	mov	r6, r0
    f136:	f04f 33ff 	mov.w	r3, #4294967295
    f13a:	481d      	ldr	r0, [pc, #116]	; (f1b0 <bt_hci_cmd_create+0x84>)
    f13c:	460f      	mov	r7, r1
    f13e:	f00e f98a 	bl	1d456 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    f142:	4604      	mov	r4, r0
    f144:	b950      	cbnz	r0, f15c <bt_hci_cmd_create+0x30>
    f146:	491b      	ldr	r1, [pc, #108]	; (f1b4 <bt_hci_cmd_create+0x88>)
    f148:	481b      	ldr	r0, [pc, #108]	; (f1b8 <bt_hci_cmd_create+0x8c>)
    f14a:	f44f 7281 	mov.w	r2, #258	; 0x102
    f14e:	f00b fc47 	bl	1a9e0 <printk>
    f152:	f44f 7181 	mov.w	r1, #258	; 0x102
    f156:	4817      	ldr	r0, [pc, #92]	; (f1b4 <bt_hci_cmd_create+0x88>)
    f158:	f00b fee8 	bl	1af2c <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f15c:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    f160:	f104 0a08 	add.w	sl, r4, #8
    f164:	2101      	movs	r1, #1
    f166:	4650      	mov	r0, sl
    f168:	f006 fb72 	bl	15850 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    f16c:	4620      	mov	r0, r4
    f16e:	f884 8014 	strb.w	r8, [r4, #20]
    f172:	f006 fa47 	bl	15604 <net_buf_id>
    f176:	f04f 090c 	mov.w	r9, #12
    f17a:	4d10      	ldr	r5, [pc, #64]	; (f1bc <bt_hci_cmd_create+0x90>)
    f17c:	fb09 5000 	mla	r0, r9, r0, r5
    f180:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    f182:	4620      	mov	r0, r4
    f184:	f006 fa3e 	bl	15604 <net_buf_id>
    f188:	fb09 5000 	mla	r0, r9, r0, r5
    f18c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    f190:	4620      	mov	r0, r4
    f192:	f006 fa37 	bl	15604 <net_buf_id>
    f196:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    f19a:	2103      	movs	r1, #3
    f19c:	4650      	mov	r0, sl
    f19e:	f8c5 8004 	str.w	r8, [r5, #4]
    f1a2:	f006 fcbd 	bl	15b20 <net_buf_simple_add>
	hdr->param_len = param_len;
    f1a6:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    f1a8:	8006      	strh	r6, [r0, #0]
}
    f1aa:	4620      	mov	r0, r4
    f1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1b0:	20008630 	.word	0x20008630
    f1b4:	00020f50 	.word	0x00020f50
    f1b8:	0001faab 	.word	0x0001faab
    f1bc:	20009ee8 	.word	0x20009ee8

0000f1c0 <bt_hci_cmd_send_sync>:
{
    f1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1c2:	4607      	mov	r7, r0
    f1c4:	4615      	mov	r5, r2
	if (!buf) {
    f1c6:	460c      	mov	r4, r1
{
    f1c8:	b087      	sub	sp, #28
	if (!buf) {
    f1ca:	b921      	cbnz	r1, f1d6 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    f1cc:	f7ff ffae 	bl	f12c <bt_hci_cmd_create>
		if (!buf) {
    f1d0:	4604      	mov	r4, r0
    f1d2:	2800      	cmp	r0, #0
    f1d4:	d048      	beq.n	f268 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f1d6:	2201      	movs	r2, #1
    f1d8:	2100      	movs	r1, #0
    f1da:	4668      	mov	r0, sp
    f1dc:	f00e ff0e 	bl	1dffc <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f1e0:	4620      	mov	r0, r4
    f1e2:	f006 fa0f 	bl	15604 <net_buf_id>
    f1e6:	230c      	movs	r3, #12
    f1e8:	4e21      	ldr	r6, [pc, #132]	; (f270 <bt_hci_cmd_send_sync+0xb0>)
    f1ea:	fb03 6000 	mla	r0, r3, r0, r6
    f1ee:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    f1f2:	4620      	mov	r0, r4
    f1f4:	f006 fbc2 	bl	1597c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    f1f8:	4621      	mov	r1, r4
    f1fa:	481e      	ldr	r0, [pc, #120]	; (f274 <bt_hci_cmd_send_sync+0xb4>)
    f1fc:	f006 fb4c 	bl	15898 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f200:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f204:	2300      	movs	r3, #0
    f206:	4668      	mov	r0, sp
    f208:	f00a fa4e 	bl	196a8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    f20c:	b158      	cbz	r0, f226 <bt_hci_cmd_send_sync+0x66>
    f20e:	f240 124d 	movw	r2, #333	; 0x14d
    f212:	4919      	ldr	r1, [pc, #100]	; (f278 <bt_hci_cmd_send_sync+0xb8>)
    f214:	4819      	ldr	r0, [pc, #100]	; (f27c <bt_hci_cmd_send_sync+0xbc>)
    f216:	f00b fbe3 	bl	1a9e0 <printk>
    f21a:	4040      	eors	r0, r0
    f21c:	f380 8811 	msr	BASEPRI, r0
    f220:	f04f 0003 	mov.w	r0, #3
    f224:	df02      	svc	2
	status = cmd(buf)->status;
    f226:	4620      	mov	r0, r4
    f228:	f006 f9ec 	bl	15604 <net_buf_id>
    f22c:	230c      	movs	r3, #12
    f22e:	4358      	muls	r0, r3
    f230:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    f232:	b186      	cbz	r6, f256 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    f234:	4633      	mov	r3, r6
    f236:	463a      	mov	r2, r7
    f238:	2157      	movs	r1, #87	; 0x57
    f23a:	4811      	ldr	r0, [pc, #68]	; (f280 <bt_hci_cmd_send_sync+0xc0>)
    f23c:	f00b fbd0 	bl	1a9e0 <printk>
		net_buf_unref(buf);
    f240:	4620      	mov	r0, r4
    f242:	f006 fb57 	bl	158f4 <net_buf_unref>
			return -EIO;
    f246:	2e09      	cmp	r6, #9
    f248:	bf0c      	ite	eq
    f24a:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    f24e:	f06f 0004 	mvnne.w	r0, #4
}
    f252:	b007      	add	sp, #28
    f254:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    f256:	b115      	cbz	r5, f25e <bt_hci_cmd_send_sync+0x9e>
	return 0;
    f258:	4630      	mov	r0, r6
		*rsp = buf;
    f25a:	602c      	str	r4, [r5, #0]
    f25c:	e7f9      	b.n	f252 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    f25e:	4620      	mov	r0, r4
    f260:	f006 fb48 	bl	158f4 <net_buf_unref>
	return 0;
    f264:	4628      	mov	r0, r5
    f266:	e7f4      	b.n	f252 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    f268:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f26c:	e7f1      	b.n	f252 <bt_hci_cmd_send_sync+0x92>
    f26e:	bf00      	nop
    f270:	20009ee8 	.word	0x20009ee8
    f274:	20008118 	.word	0x20008118
    f278:	00020f50 	.word	0x00020f50
    f27c:	0001faab 	.word	0x0001faab
    f280:	0002109c 	.word	0x0002109c

0000f284 <hci_le_read_max_data_len>:
{
    f284:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f286:	4606      	mov	r6, r0
    f288:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    f28a:	f242 002f 	movw	r0, #8239	; 0x202f
    f28e:	2100      	movs	r1, #0
    f290:	aa01      	add	r2, sp, #4
    f292:	f7ff ff95 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
    f296:	4604      	mov	r4, r0
    f298:	b130      	cbz	r0, f2a8 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    f29a:	2145      	movs	r1, #69	; 0x45
    f29c:	4808      	ldr	r0, [pc, #32]	; (f2c0 <hci_le_read_max_data_len+0x3c>)
    f29e:	f00b fb9f 	bl	1a9e0 <printk>
}
    f2a2:	4620      	mov	r0, r4
    f2a4:	b002      	add	sp, #8
    f2a6:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    f2a8:	9801      	ldr	r0, [sp, #4]
    f2aa:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    f2ac:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f2b0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    f2b2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    f2b6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    f2b8:	f006 fb1c 	bl	158f4 <net_buf_unref>
	return 0;
    f2bc:	e7f1      	b.n	f2a2 <hci_le_read_max_data_len+0x1e>
    f2be:	bf00      	nop
    f2c0:	000210bd 	.word	0x000210bd

0000f2c4 <set_random_address>:
{
    f2c4:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    f2c6:	4e15      	ldr	r6, [pc, #84]	; (f31c <set_random_address+0x58>)
    f2c8:	2206      	movs	r2, #6
    f2ca:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    f2ce:	4605      	mov	r5, r0
    f2d0:	f00c fd9f 	bl	1be12 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f2d4:	4604      	mov	r4, r0
    f2d6:	b1e0      	cbz	r0, f312 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f2d8:	2106      	movs	r1, #6
    f2da:	f242 0005 	movw	r0, #8197	; 0x2005
    f2de:	f7ff ff25 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    f2e2:	4604      	mov	r4, r0
    f2e4:	b1b8      	cbz	r0, f316 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f2e6:	2206      	movs	r2, #6
    f2e8:	4629      	mov	r1, r5
    f2ea:	3008      	adds	r0, #8
    f2ec:	f00e f8e1 	bl	1d4b2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f2f0:	4621      	mov	r1, r4
    f2f2:	2200      	movs	r2, #0
    f2f4:	f242 0005 	movw	r0, #8197	; 0x2005
    f2f8:	f7ff ff62 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
    f2fc:	4604      	mov	r4, r0
    f2fe:	b940      	cbnz	r0, f312 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    f300:	2206      	movs	r2, #6
    f302:	4629      	mov	r1, r5
    f304:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    f308:	f00c fd94 	bl	1be34 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f30c:	2301      	movs	r3, #1
    f30e:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    f312:	4620      	mov	r0, r4
    f314:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f316:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f31a:	e7fa      	b.n	f312 <set_random_address+0x4e>
    f31c:	20008000 	.word	0x20008000

0000f320 <set_le_scan_enable_legacy>:
{
    f320:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f322:	2102      	movs	r1, #2
{
    f324:	4604      	mov	r4, r0
    f326:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f328:	f242 000c 	movw	r0, #8204	; 0x200c
    f32c:	f7ff fefe 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    f330:	4605      	mov	r5, r0
    f332:	b348      	cbz	r0, f388 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    f334:	2102      	movs	r1, #2
    f336:	3008      	adds	r0, #8
    f338:	f006 fbf2 	bl	15b20 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    f33c:	2c01      	cmp	r4, #1
    f33e:	4603      	mov	r3, r0
    f340:	d11f      	bne.n	f382 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f342:	4813      	ldr	r0, [pc, #76]	; (f390 <set_le_scan_enable_legacy+0x70>)
    f344:	f00c fe63 	bl	1c00e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f348:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f34c:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    f34e:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    f350:	4b0f      	ldr	r3, [pc, #60]	; (f390 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    f352:	4628      	mov	r0, r5
    f354:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f356:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    f358:	f004 0401 	and.w	r4, r4, #1
    f35c:	9302      	str	r3, [sp, #8]
    f35e:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    f362:	f006 f94f 	bl	15604 <net_buf_id>
    f366:	220c      	movs	r2, #12
    f368:	4b0a      	ldr	r3, [pc, #40]	; (f394 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f36a:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    f36c:	fb02 3300 	mla	r3, r2, r0, r3
    f370:	aa01      	add	r2, sp, #4
    f372:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f374:	f242 000c 	movw	r0, #8204	; 0x200c
    f378:	2200      	movs	r2, #0
    f37a:	f7ff ff21 	bl	f1c0 <bt_hci_cmd_send_sync>
}
    f37e:	b005      	add	sp, #20
    f380:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f382:	2200      	movs	r2, #0
    f384:	7042      	strb	r2, [r0, #1]
    f386:	e7e2      	b.n	f34e <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    f388:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f38c:	e7f7      	b.n	f37e <set_le_scan_enable_legacy+0x5e>
    f38e:	bf00      	nop
    f390:	20008094 	.word	0x20008094
    f394:	20009ee8 	.word	0x20009ee8

0000f398 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f398:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f39c:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f39e:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f3a2:	460e      	mov	r6, r1
    f3a4:	4691      	mov	r9, r2
    f3a6:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f3a8:	d02c      	beq.n	f404 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f3aa:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f48c <le_adv_set_random_addr.isra.0+0xf4>
    f3ae:	b12a      	cbz	r2, f3bc <le_adv_set_random_addr.isra.0+0x24>
    f3b0:	068c      	lsls	r4, r1, #26
    f3b2:	d503      	bpl.n	f3bc <le_adv_set_random_addr.isra.0+0x24>
    f3b4:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f3b8:	0658      	lsls	r0, r3, #25
    f3ba:	d563      	bpl.n	f484 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f3bc:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f3c0:	f818 3003 	ldrb.w	r3, [r8, r3]
    f3c4:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f3c8:	2b01      	cmp	r3, #1
    f3ca:	d009      	beq.n	f3e0 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f3cc:	ebaa 0505 	sub.w	r5, sl, r5
    f3d0:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f3d4:	f1b9 0f00 	cmp.w	r9, #0
    f3d8:	d10f      	bne.n	f3fa <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f3da:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f3dc:	703b      	strb	r3, [r7, #0]
    f3de:	e008      	b.n	f3f2 <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f3e0:	2007      	movs	r0, #7
    f3e2:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f3e6:	4440      	add	r0, r8
    f3e8:	f7ff ff6c 	bl	f2c4 <set_random_address>
				if (err) {
    f3ec:	4604      	mov	r4, r0
    f3ee:	2800      	cmp	r0, #0
    f3f0:	d0ec      	beq.n	f3cc <le_adv_set_random_addr.isra.0+0x34>
}
    f3f2:	4620      	mov	r0, r4
    f3f4:	b002      	add	sp, #8
    f3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f3fa:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f3fc:	bf48      	it	mi
    f3fe:	f043 0302 	orrmi.w	r3, r3, #2
    f402:	e7ea      	b.n	f3da <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f404:	f011 0604 	ands.w	r6, r1, #4
    f408:	d014      	beq.n	f434 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f40a:	f8df 8080 	ldr.w	r8, [pc, #128]	; f48c <le_adv_set_random_addr.isra.0+0xf4>
    f40e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f412:	f818 3003 	ldrb.w	r3, [r8, r3]
    f416:	00ee      	lsls	r6, r5, #3
    f418:	2b01      	cmp	r3, #1
    f41a:	d105      	bne.n	f428 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f41c:	2007      	movs	r0, #7
    f41e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f422:	4440      	add	r0, r8
    f424:	f7ff ff4e 	bl	f2c4 <set_random_address>
			*own_addr_type = id_addr->type;
    f428:	1b75      	subs	r5, r6, r5
    f42a:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f42e:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f430:	703b      	strb	r3, [r7, #0]
    f432:	e7de      	b.n	f3f2 <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f434:	4816      	ldr	r0, [pc, #88]	; (f490 <le_adv_set_random_addr.isra.0+0xf8>)
    f436:	f00c fdea 	bl	1c00e <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f43a:	0682      	lsls	r2, r0, #26
    f43c:	d417      	bmi.n	f46e <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f43e:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f440:	2106      	movs	r1, #6
    f442:	4668      	mov	r0, sp
    f444:	f001 fe2a 	bl	1109c <bt_rand>
	if (err) {
    f448:	4604      	mov	r4, r0
    f44a:	b948      	cbnz	r0, f460 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f44c:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f450:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f456:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f45a:	f7ff ff33 	bl	f2c4 <set_random_address>
    f45e:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f460:	2001      	movs	r0, #1
    f462:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f464:	2d00      	cmp	r5, #0
    f466:	d0c4      	beq.n	f3f2 <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    f468:	f7ff ff5a 	bl	f320 <set_le_scan_enable_legacy>
		if (err) {
    f46c:	e7c1      	b.n	f3f2 <le_adv_set_random_addr.isra.0+0x5a>
    f46e:	4808      	ldr	r0, [pc, #32]	; (f490 <le_adv_set_random_addr.isra.0+0xf8>)
    f470:	f00c fdcd 	bl	1c00e <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f474:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f476:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f47a:	d5e0      	bpl.n	f43e <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    f47c:	4630      	mov	r0, r6
    f47e:	f7ff ff4f 	bl	f320 <set_le_scan_enable_legacy>
    f482:	e7dd      	b.n	f440 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f484:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f488:	e7b3      	b.n	f3f2 <le_adv_set_random_addr.isra.0+0x5a>
    f48a:	bf00      	nop
    f48c:	20008000 	.word	0x20008000
    f490:	20008094 	.word	0x20008094

0000f494 <hci_set_ad>:
{
    f494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f498:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f49a:	2120      	movs	r1, #32
{
    f49c:	4682      	mov	sl, r0
    f49e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f4a0:	f7ff fe44 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    f4a4:	4606      	mov	r6, r0
    f4a6:	2800      	cmp	r0, #0
    f4a8:	d056      	beq.n	f558 <hci_set_ad+0xc4>
    f4aa:	2120      	movs	r1, #32
    f4ac:	3008      	adds	r0, #8
    f4ae:	f006 fb37 	bl	15b20 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f4b2:	2220      	movs	r2, #32
    f4b4:	4681      	mov	r9, r0
    f4b6:	2100      	movs	r1, #0
    f4b8:	f00c fce7 	bl	1be8a <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f4bc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f4c0:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f4c2:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f4c6:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f4c8:	2300      	movs	r3, #0
    f4ca:	f8d4 8000 	ldr.w	r8, [r4]
    f4ce:	6862      	ldr	r2, [r4, #4]
    f4d0:	4293      	cmp	r3, r2
    f4d2:	d30d      	bcc.n	f4f0 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f4d4:	9b00      	ldr	r3, [sp, #0]
    f4d6:	3408      	adds	r4, #8
    f4d8:	429c      	cmp	r4, r3
    f4da:	d1f5      	bne.n	f4c8 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f4dc:	2200      	movs	r2, #0
    f4de:	4631      	mov	r1, r6
    f4e0:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f4e2:	f889 5000 	strb.w	r5, [r9]
}
    f4e6:	b003      	add	sp, #12
    f4e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f4ec:	f7ff be68 	b.w	f1c0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f4f0:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f4f4:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f4f6:	1881      	adds	r1, r0, r2
    f4f8:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f4fa:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f4fe:	d914      	bls.n	f52a <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f500:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f504:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f508:	d101      	bne.n	f50e <hci_set_ad+0x7a>
    f50a:	2a00      	cmp	r2, #0
    f50c:	dc0b      	bgt.n	f526 <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f50e:	2145      	movs	r1, #69	; 0x45
    f510:	4813      	ldr	r0, [pc, #76]	; (f560 <hci_set_ad+0xcc>)
    f512:	f00b fa65 	bl	1a9e0 <printk>
		net_buf_unref(buf);
    f516:	4630      	mov	r0, r6
    f518:	f006 f9ec 	bl	158f4 <net_buf_unref>
					return -EINVAL;
    f51c:	f06f 0015 	mvn.w	r0, #21
}
    f520:	b003      	add	sp, #12
    f522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f526:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f52a:	b2d7      	uxtb	r7, r2
    f52c:	1c79      	adds	r1, r7, #1
    f52e:	f80b 1005 	strb.w	r1, [fp, r5]
    f532:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f534:	b2c9      	uxtb	r1, r1
    f536:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f53a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f53e:	fa5b f080 	uxtab	r0, fp, r0
    f542:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f544:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f546:	f00c fc75 	bl	1be34 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f54a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f54c:	443d      	add	r5, r7
    f54e:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f550:	3301      	adds	r3, #1
    f552:	f108 0808 	add.w	r8, r8, #8
    f556:	e7ba      	b.n	f4ce <hci_set_ad+0x3a>
		return -ENOBUFS;
    f558:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f55c:	e7e0      	b.n	f520 <hci_set_ad+0x8c>
    f55e:	bf00      	nop
    f560:	000210e2 	.word	0x000210e2

0000f564 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f568:	b087      	sub	sp, #28
    f56a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f56e:	4606      	mov	r6, r0
    f570:	460c      	mov	r4, r1
    f572:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f574:	2100      	movs	r1, #0
    f576:	2210      	movs	r2, #16
    f578:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f57a:	461d      	mov	r5, r3
    f57c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f580:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f584:	f00c fc81 	bl	1be8a <memset>
	if (use_name) {
    f588:	f1b8 0f00 	cmp.w	r8, #0
    f58c:	d00e      	beq.n	f5ac <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f58e:	bbb4      	cbnz	r4, f5fe <le_adv_update.constprop.0+0x9a>
    f590:	2d00      	cmp	r5, #0
    f592:	d13f      	bne.n	f614 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f594:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f648 <le_adv_update.constprop.0+0xe4>
    f598:	4658      	mov	r0, fp
    f59a:	f00c fc0d 	bl	1bdb8 <strlen>
    f59e:	2309      	movs	r3, #9
    f5a0:	f88d 0001 	strb.w	r0, [sp, #1]
    f5a4:	f88d 3000 	strb.w	r3, [sp]
    f5a8:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f5ac:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f5b0:	f1b8 0f00 	cmp.w	r8, #0
    f5b4:	d030      	beq.n	f618 <le_adv_update.constprop.0+0xb4>
    f5b6:	f1ba 0f00 	cmp.w	sl, #0
    f5ba:	d12d      	bne.n	f618 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f5bc:	2301      	movs	r3, #1
			d_len = 2;
    f5be:	2202      	movs	r2, #2
			d[1].data = &data;
    f5c0:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f5c4:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f5c6:	f242 0008 	movw	r0, #8200	; 0x2008
    f5ca:	a902      	add	r1, sp, #8
    f5cc:	f7ff ff62 	bl	f494 <hci_set_ad>
		if (err) {
    f5d0:	4604      	mov	r4, r0
    f5d2:	b938      	cbnz	r0, f5e4 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f5d4:	f1ba 0f00 	cmp.w	sl, #0
    f5d8:	d120      	bne.n	f61c <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f5da:	2104      	movs	r1, #4
    f5dc:	f106 0010 	add.w	r0, r6, #16
    f5e0:	f00c fd1b 	bl	1c01a <atomic_or>
}
    f5e4:	4620      	mov	r0, r4
    f5e6:	b007      	add	sp, #28
    f5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f5ec:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f5f0:	3a08      	subs	r2, #8
    f5f2:	2a01      	cmp	r2, #1
    f5f4:	d925      	bls.n	f642 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f5f6:	3301      	adds	r3, #1
    f5f8:	429f      	cmp	r7, r3
    f5fa:	d1f7      	bne.n	f5ec <le_adv_update.constprop.0+0x88>
    f5fc:	e7c8      	b.n	f590 <le_adv_update.constprop.0+0x2c>
    f5fe:	2300      	movs	r3, #0
    f600:	e7fa      	b.n	f5f8 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f602:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f606:	3a08      	subs	r2, #8
    f608:	2a01      	cmp	r2, #1
    f60a:	d91a      	bls.n	f642 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f60c:	3301      	adds	r3, #1
    f60e:	4599      	cmp	r9, r3
    f610:	d1f7      	bne.n	f602 <le_adv_update.constprop.0+0x9e>
    f612:	e7bf      	b.n	f594 <le_adv_update.constprop.0+0x30>
    f614:	2300      	movs	r3, #0
    f616:	e7fa      	b.n	f60e <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f618:	2201      	movs	r2, #1
    f61a:	e7d4      	b.n	f5c6 <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f61c:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f61e:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f622:	f1b8 0f00 	cmp.w	r8, #0
    f626:	d003      	beq.n	f630 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f628:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f62a:	2202      	movs	r2, #2
			d[1].data = &data;
    f62c:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f630:	f242 0009 	movw	r0, #8201	; 0x2009
    f634:	a902      	add	r1, sp, #8
    f636:	f7ff ff2d 	bl	f494 <hci_set_ad>
		if (err) {
    f63a:	2800      	cmp	r0, #0
    f63c:	d0cd      	beq.n	f5da <le_adv_update.constprop.0+0x76>
    f63e:	4604      	mov	r4, r0
    f640:	e7d0      	b.n	f5e4 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f642:	f06f 0415 	mvn.w	r4, #21
    f646:	e7cd      	b.n	f5e4 <le_adv_update.constprop.0+0x80>
    f648:	0001f6ff 	.word	0x0001f6ff

0000f64c <set_le_adv_enable_legacy>:
{
    f64c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f64e:	4606      	mov	r6, r0
    f650:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    f652:	f242 000a 	movw	r0, #8202	; 0x200a
    f656:	2101      	movs	r1, #1
    f658:	f7ff fd68 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    f65c:	4604      	mov	r4, r0
    f65e:	b1e8      	cbz	r0, f69c <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    f660:	3008      	adds	r0, #8
	if (enable) {
    f662:	b1cd      	cbz	r5, f698 <set_le_adv_enable_legacy+0x4c>
    f664:	2101      	movs	r1, #1
    f666:	f00d ff30 	bl	1d4ca <net_buf_simple_add_u8>
    f66a:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    f66c:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    f66e:	3610      	adds	r6, #16
    f670:	9302      	str	r3, [sp, #8]
	state->target = target;
    f672:	9601      	str	r6, [sp, #4]
	state->val = val;
    f674:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f678:	f005 ffc4 	bl	15604 <net_buf_id>
    f67c:	220c      	movs	r2, #12
    f67e:	4b09      	ldr	r3, [pc, #36]	; (f6a4 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f680:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f682:	fb02 3300 	mla	r3, r2, r0, r3
    f686:	aa01      	add	r2, sp, #4
    f688:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f68a:	f242 000a 	movw	r0, #8202	; 0x200a
    f68e:	2200      	movs	r2, #0
    f690:	f7ff fd96 	bl	f1c0 <bt_hci_cmd_send_sync>
}
    f694:	b004      	add	sp, #16
    f696:	bd70      	pop	{r4, r5, r6, pc}
    f698:	4629      	mov	r1, r5
    f69a:	e7e4      	b.n	f666 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    f69c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f6a0:	e7f8      	b.n	f694 <set_le_adv_enable_legacy+0x48>
    f6a2:	bf00      	nop
    f6a4:	20009ee8 	.word	0x20009ee8

0000f6a8 <start_le_scan_legacy>:
{
    f6a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f6aa:	460e      	mov	r6, r1
    f6ac:	4605      	mov	r5, r0
    f6ae:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f6b0:	2100      	movs	r1, #0
    f6b2:	2207      	movs	r2, #7
    f6b4:	4668      	mov	r0, sp
    f6b6:	f00c fbe8 	bl	1be8a <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f6ba:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f6be:	4e26      	ldr	r6, [pc, #152]	; (f758 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f6c0:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f6c2:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f6c4:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f6c8:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f6cc:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f6d0:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f6d4:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f6d8:	f00c fc99 	bl	1c00e <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f6dc:	0641      	lsls	r1, r0, #25
    f6de:	d413      	bmi.n	f708 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f6e0:	f00c fcda 	bl	1c098 <le_set_private_addr.constprop.0>
			if (err) {
    f6e4:	4604      	mov	r4, r0
    f6e6:	b160      	cbz	r0, f702 <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f6e8:	2d01      	cmp	r5, #1
    f6ea:	d02e      	beq.n	f74a <start_le_scan_legacy+0xa2>
    f6ec:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f6f0:	f00c fc8d 	bl	1c00e <atomic_get>
    f6f4:	0642      	lsls	r2, r0, #25
    f6f6:	d528      	bpl.n	f74a <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f6f8:	4622      	mov	r2, r4
    f6fa:	2157      	movs	r1, #87	; 0x57
    f6fc:	4817      	ldr	r0, [pc, #92]	; (f75c <start_le_scan_legacy+0xb4>)
    f6fe:	f00b f96f 	bl	1a9e0 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f702:	2301      	movs	r3, #1
    f704:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f708:	2107      	movs	r1, #7
    f70a:	f242 000b 	movw	r0, #8203	; 0x200b
    f70e:	f7ff fd0d 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    f712:	4604      	mov	r4, r0
    f714:	b1e0      	cbz	r0, f750 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f716:	2207      	movs	r2, #7
    f718:	4669      	mov	r1, sp
    f71a:	3008      	adds	r0, #8
    f71c:	f00d fec9 	bl	1d4b2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f720:	4621      	mov	r1, r4
    f722:	2200      	movs	r2, #0
    f724:	f242 000b 	movw	r0, #8203	; 0x200b
    f728:	f7ff fd4a 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
    f72c:	4604      	mov	r4, r0
    f72e:	b960      	cbnz	r0, f74a <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f730:	2001      	movs	r0, #1
    f732:	f7ff fdf5 	bl	f320 <set_le_scan_enable_legacy>
	if (err) {
    f736:	4604      	mov	r4, r0
    f738:	b938      	cbnz	r0, f74a <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f73a:	1e6b      	subs	r3, r5, #1
    f73c:	425a      	negs	r2, r3
    f73e:	f04f 0107 	mov.w	r1, #7
    f742:	4807      	ldr	r0, [pc, #28]	; (f760 <start_le_scan_legacy+0xb8>)
    f744:	415a      	adcs	r2, r3
    f746:	f00c fc81 	bl	1c04c <atomic_set_bit_to>
}
    f74a:	4620      	mov	r0, r4
    f74c:	b002      	add	sp, #8
    f74e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f750:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f754:	e7f9      	b.n	f74a <start_le_scan_legacy+0xa2>
    f756:	bf00      	nop
    f758:	20008000 	.word	0x20008000
    f75c:	00021100 	.word	0x00021100
    f760:	20008094 	.word	0x20008094

0000f764 <bt_le_scan_random_addr_check>:
{
    f764:	b508      	push	{r3, lr}
    f766:	4802      	ldr	r0, [pc, #8]	; (f770 <bt_le_scan_random_addr_check+0xc>)
    f768:	f00c fc51 	bl	1c00e <atomic_get>
}
    f76c:	2001      	movs	r0, #1
    f76e:	bd08      	pop	{r3, pc}
    f770:	20008028 	.word	0x20008028

0000f774 <bt_le_create_conn_legacy>:
{
    f774:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f778:	4f2b      	ldr	r7, [pc, #172]	; (f828 <bt_le_create_conn_legacy+0xb4>)
{
    f77a:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f77c:	783b      	ldrb	r3, [r7, #0]
    f77e:	2b01      	cmp	r3, #1
    f780:	d00b      	beq.n	f79a <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f782:	2119      	movs	r1, #25
    f784:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f788:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f78c:	f7ff fcce 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    f790:	4606      	mov	r6, r0
    f792:	b950      	cbnz	r0, f7aa <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f794:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f798:	e004      	b.n	f7a4 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f79a:	1c78      	adds	r0, r7, #1
    f79c:	f7ff fd92 	bl	f2c4 <set_random_address>
			if (err) {
    f7a0:	2800      	cmp	r0, #0
    f7a2:	d0ee      	beq.n	f782 <bt_le_create_conn_legacy+0xe>
}
    f7a4:	b004      	add	sp, #16
    f7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f7aa:	2119      	movs	r1, #25
    f7ac:	3008      	adds	r0, #8
    f7ae:	f006 f9b7 	bl	15b20 <net_buf_simple_add>
    f7b2:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f7b4:	2219      	movs	r2, #25
    f7b6:	2100      	movs	r1, #0
    f7b8:	f00c fb67 	bl	1be8a <memset>
	cp->own_addr_type = own_addr_type;
    f7bc:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f7c0:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f7c4:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f7c8:	1d60      	adds	r0, r4, #5
    f7ca:	f00c fc23 	bl	1c014 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f7ce:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f7d2:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    f7d4:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f7d6:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f7d8:	89fb      	ldrh	r3, [r7, #14]
    f7da:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f7dc:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f7e0:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f7e4:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f7e8:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f7ec:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f7f0:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f7f4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f7f8:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f7fc:	4b0b      	ldr	r3, [pc, #44]	; (f82c <bt_le_create_conn_legacy+0xb8>)
    f7fe:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f800:	230b      	movs	r3, #11
    f802:	9302      	str	r3, [sp, #8]
	state->val = val;
    f804:	2301      	movs	r3, #1
    f806:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f80a:	f005 fefb 	bl	15604 <net_buf_id>
    f80e:	220c      	movs	r2, #12
    f810:	4b07      	ldr	r3, [pc, #28]	; (f830 <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f812:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    f814:	fb02 3300 	mla	r3, r2, r0, r3
    f818:	aa01      	add	r2, sp, #4
    f81a:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f81c:	f242 000d 	movw	r0, #8205	; 0x200d
    f820:	4642      	mov	r2, r8
    f822:	f7ff fccd 	bl	f1c0 <bt_hci_cmd_send_sync>
    f826:	e7bd      	b.n	f7a4 <bt_le_create_conn_legacy+0x30>
    f828:	20008000 	.word	0x20008000
    f82c:	20008094 	.word	0x20008094
    f830:	20009ee8 	.word	0x20009ee8

0000f834 <bt_le_create_conn_cancel>:
{
    f834:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f836:	2100      	movs	r1, #0
{
    f838:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f83a:	f242 000e 	movw	r0, #8206	; 0x200e
    f83e:	f7ff fc75 	bl	f12c <bt_hci_cmd_create>
	state->target = target;
    f842:	4b0c      	ldr	r3, [pc, #48]	; (f874 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f844:	2500      	movs	r5, #0
	state->target = target;
    f846:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f848:	230b      	movs	r3, #11
    f84a:	4604      	mov	r4, r0
    f84c:	9302      	str	r3, [sp, #8]
	state->val = val;
    f84e:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f852:	f005 fed7 	bl	15604 <net_buf_id>
    f856:	220c      	movs	r2, #12
    f858:	4b07      	ldr	r3, [pc, #28]	; (f878 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f85a:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f85c:	fb02 3300 	mla	r3, r2, r0, r3
    f860:	aa01      	add	r2, sp, #4
    f862:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f864:	f242 000e 	movw	r0, #8206	; 0x200e
    f868:	462a      	mov	r2, r5
    f86a:	f7ff fca9 	bl	f1c0 <bt_hci_cmd_send_sync>
}
    f86e:	b005      	add	sp, #20
    f870:	bd30      	pop	{r4, r5, pc}
    f872:	bf00      	nop
    f874:	20008094 	.word	0x20008094
    f878:	20009ee8 	.word	0x20009ee8

0000f87c <bt_le_scan_update>:
{
    f87c:	b570      	push	{r4, r5, r6, lr}
    f87e:	4606      	mov	r6, r0
    f880:	481c      	ldr	r0, [pc, #112]	; (f8f4 <bt_le_scan_update+0x78>)
    f882:	f00c fbc4 	bl	1c00e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f886:	0641      	lsls	r1, r0, #25
    f888:	f3c0 1380 	ubfx	r3, r0, #6, #1
    f88c:	d501      	bpl.n	f892 <bt_le_scan_update+0x16>
			return 0;
    f88e:	2000      	movs	r0, #0
    f890:	e02b      	b.n	f8ea <bt_le_scan_update+0x6e>
    f892:	4818      	ldr	r0, [pc, #96]	; (f8f4 <bt_le_scan_update+0x78>)
    f894:	f00c fbbb 	bl	1c00e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f898:	0682      	lsls	r2, r0, #26
    f89a:	d421      	bmi.n	f8e0 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f89c:	2100      	movs	r1, #0
    f89e:	2206      	movs	r2, #6
    f8a0:	4608      	mov	r0, r1
    f8a2:	f001 fff9 	bl	11898 <bt_conn_lookup_state_le>
		if (conn) {
    f8a6:	4604      	mov	r4, r0
    f8a8:	bb00      	cbnz	r0, f8ec <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f8aa:	2202      	movs	r2, #2
    f8ac:	4601      	mov	r1, r0
    f8ae:	f001 fff3 	bl	11898 <bt_conn_lookup_state_le>
		if (conn) {
    f8b2:	4605      	mov	r5, r0
    f8b4:	2800      	cmp	r0, #0
    f8b6:	d0ea      	beq.n	f88e <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f8b8:	f44f 7180 	mov.w	r1, #256	; 0x100
    f8bc:	480d      	ldr	r0, [pc, #52]	; (f8f4 <bt_le_scan_update+0x78>)
    f8be:	f00c fbac 	bl	1c01a <atomic_or>
			bt_conn_unref(conn);
    f8c2:	4628      	mov	r0, r5
    f8c4:	f001 fe86 	bl	115d4 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    f8c8:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f8ca:	4620      	mov	r0, r4
}
    f8cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f8d0:	bf15      	itete	ne
    f8d2:	2230      	movne	r2, #48	; 0x30
    f8d4:	2212      	moveq	r2, #18
    f8d6:	2160      	movne	r1, #96	; 0x60
    f8d8:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    f8dc:	f7ff bee4 	b.w	f6a8 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    f8e0:	4618      	mov	r0, r3
    f8e2:	f7ff fd1d 	bl	f320 <set_le_scan_enable_legacy>
		if (err) {
    f8e6:	2800      	cmp	r0, #0
    f8e8:	d0d8      	beq.n	f89c <bt_le_scan_update+0x20>
}
    f8ea:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    f8ec:	f001 fe72 	bl	115d4 <bt_conn_unref>
    f8f0:	e7cd      	b.n	f88e <bt_le_scan_update+0x12>
    f8f2:	bf00      	nop
    f8f4:	20008094 	.word	0x20008094

0000f8f8 <hci_disconn_complete>:
{
    f8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    f8fa:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    f8fc:	7835      	ldrb	r5, [r6, #0]
    f8fe:	bb45      	cbnz	r5, f952 <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f900:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    f904:	4638      	mov	r0, r7
    f906:	f001 fe89 	bl	1161c <bt_conn_lookup_handle>
	if (!conn) {
    f90a:	4604      	mov	r4, r0
    f90c:	b930      	cbnz	r0, f91c <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f90e:	463a      	mov	r2, r7
}
    f910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f914:	2145      	movs	r1, #69	; 0x45
    f916:	480f      	ldr	r0, [pc, #60]	; (f954 <hci_disconn_complete+0x5c>)
    f918:	f00b b862 	b.w	1a9e0 <printk>
	conn->err = evt->reason;
    f91c:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f91e:	4629      	mov	r1, r5
	conn->err = evt->reason;
    f920:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f922:	f001 fe83 	bl	1162c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    f926:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    f928:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    f92a:	2b01      	cmp	r3, #1
    f92c:	d004      	beq.n	f938 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    f92e:	4620      	mov	r0, r4
}
    f930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    f934:	f001 be4e 	b.w	115d4 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f938:	1d20      	adds	r0, r4, #4
    f93a:	f00c fb68 	bl	1c00e <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    f93e:	07c3      	lsls	r3, r0, #31
    f940:	d5f5      	bpl.n	f92e <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    f942:	4620      	mov	r0, r4
    f944:	2102      	movs	r1, #2
    f946:	f001 fe71 	bl	1162c <bt_conn_set_state>
		bt_le_scan_update(false);
    f94a:	4628      	mov	r0, r5
    f94c:	f7ff ff96 	bl	f87c <bt_le_scan_update>
    f950:	e7ed      	b.n	f92e <hci_disconn_complete+0x36>
}
    f952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f954:	00020e87 	.word	0x00020e87

0000f958 <le_adv_report>:
{
    f958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    f95c:	f100 0708 	add.w	r7, r0, #8
    f960:	b08d      	sub	sp, #52	; 0x34
    f962:	4604      	mov	r4, r0
    f964:	4638      	mov	r0, r7
    f966:	f00d fd88 	bl	1d47a <net_buf_simple_pull_u8>
    f96a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; fb34 <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    f96e:	f8df a1c8 	ldr.w	sl, [pc, #456]	; fb38 <le_adv_report+0x1e0>
    f972:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    f974:	9b01      	ldr	r3, [sp, #4]
    f976:	b913      	cbnz	r3, f97e <le_adv_report+0x26>
}
    f978:	b00d      	add	sp, #52	; 0x34
    f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    f97e:	89a3      	ldrh	r3, [r4, #12]
    f980:	2b08      	cmp	r3, #8
    f982:	d806      	bhi.n	f992 <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    f984:	2145      	movs	r1, #69	; 0x45
    f986:	486d      	ldr	r0, [pc, #436]	; (fb3c <le_adv_report+0x1e4>)
}
    f988:	b00d      	add	sp, #52	; 0x34
    f98a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    f98e:	f00b b827 	b.w	1a9e0 <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    f992:	2109      	movs	r1, #9
    f994:	4638      	mov	r0, r7
    f996:	f006 f8a5 	bl	15ae4 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    f99a:	237f      	movs	r3, #127	; 0x7f
    f99c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    f9a0:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f9a2:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    f9a4:	9300      	str	r3, [sp, #0]
    f9a6:	18c3      	adds	r3, r0, r3
    f9a8:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f9aa:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    f9ae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    f9b2:	23ff      	movs	r3, #255	; 0xff
    f9b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    f9b8:	2300      	movs	r3, #0
    f9ba:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    f9be:	7802      	ldrb	r2, [r0, #0]
    f9c0:	4606      	mov	r6, r0
    f9c2:	2a04      	cmp	r2, #4
    f9c4:	bf98      	it	ls
    f9c6:	4b5e      	ldrls	r3, [pc, #376]	; (fb40 <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    f9c8:	f100 0901 	add.w	r9, r0, #1
    f9cc:	bf98      	it	ls
    f9ce:	5c9b      	ldrbls	r3, [r3, r2]
    f9d0:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    f9d2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    f9d6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    f9da:	f00c fb18 	bl	1c00e <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f9de:	0645      	lsls	r5, r0, #25
    f9e0:	d50d      	bpl.n	f9fe <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    f9e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f9e6:	0758      	lsls	r0, r3, #29
    f9e8:	d509      	bpl.n	f9fe <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    f9ea:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    f9ec:	4638      	mov	r0, r7
    f9ee:	3101      	adds	r1, #1
    f9f0:	f006 f85c 	bl	15aac <net_buf_simple_pull>
    f9f4:	9b01      	ldr	r3, [sp, #4]
    f9f6:	1e58      	subs	r0, r3, #1
    f9f8:	b2c3      	uxtb	r3, r0
    f9fa:	9301      	str	r3, [sp, #4]
    f9fc:	e7ba      	b.n	f974 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    f9fe:	7873      	ldrb	r3, [r6, #1]
    fa00:	1e9a      	subs	r2, r3, #2
    fa02:	2a01      	cmp	r2, #1
    fa04:	d84c      	bhi.n	faa0 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    fa06:	4649      	mov	r1, r9
    fa08:	a804      	add	r0, sp, #16
    fa0a:	f00c fb03 	bl	1c014 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    fa0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    fa12:	3b02      	subs	r3, #2
    fa14:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    fa18:	ab04      	add	r3, sp, #16
    fa1a:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    fa1c:	f8da 3000 	ldr.w	r3, [sl]
    fa20:	b1a3      	cbz	r3, fa4c <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    fa22:	4638      	mov	r0, r7
    fa24:	f00d fd39 	bl	1d49a <net_buf_simple_headroom>
    fa28:	4683      	mov	fp, r0
		buf->len = len;
    fa2a:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    fa2c:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fa2e:	a804      	add	r0, sp, #16
		buf->len = len;
    fa30:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fa32:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    fa36:	463b      	mov	r3, r7
    fa38:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    fa3c:	f8da c000 	ldr.w	ip, [sl]
    fa40:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    fa42:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fa44:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    fa46:	fa10 f08b 	uxtah	r0, r0, fp
    fa4a:	60a0      	str	r0, [r4, #8]
	return list->head;
    fa4c:	4b3d      	ldr	r3, [pc, #244]	; (fb44 <le_adv_report+0x1ec>)
    fa4e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fa50:	2b00      	cmp	r3, #0
    fa52:	d032      	beq.n	faba <le_adv_report+0x162>
    fa54:	f1b3 0208 	subs.w	r2, r3, #8
    fa58:	d02f      	beq.n	faba <le_adv_report+0x162>
	return node->next;
    fa5a:	681d      	ldr	r5, [r3, #0]
    fa5c:	b105      	cbz	r5, fa60 <le_adv_report+0x108>
    fa5e:	3d08      	subs	r5, #8
		if (listener->recv) {
    fa60:	6813      	ldr	r3, [r2, #0]
    fa62:	9203      	str	r2, [sp, #12]
    fa64:	b193      	cbz	r3, fa8c <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    fa66:	4638      	mov	r0, r7
    fa68:	f00d fd17 	bl	1d49a <net_buf_simple_headroom>
    fa6c:	4683      	mov	fp, r0
	state->len = buf->len;
    fa6e:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fa70:	9a03      	ldr	r2, [sp, #12]
    fa72:	9302      	str	r3, [sp, #8]
			buf->len = len;
    fa74:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    fa76:	a808      	add	r0, sp, #32
			buf->len = len;
    fa78:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fa7a:	4639      	mov	r1, r7
    fa7c:	6812      	ldr	r2, [r2, #0]
    fa7e:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    fa80:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fa82:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    fa84:	fa10 f08b 	uxtah	r0, r0, fp
    fa88:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    fa8a:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fa8c:	b1ad      	cbz	r5, faba <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fa8e:	f115 0308 	adds.w	r3, r5, #8
    fa92:	d002      	beq.n	fa9a <le_adv_report+0x142>
	return node->next;
    fa94:	68ab      	ldr	r3, [r5, #8]
    fa96:	b103      	cbz	r3, fa9a <le_adv_report+0x142>
    fa98:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    fa9a:	462a      	mov	r2, r5
    fa9c:	461d      	mov	r5, r3
    fa9e:	e7df      	b.n	fa60 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    faa0:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    faa2:	bf0a      	itet	eq
    faa4:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    faa6:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    faa8:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    faaa:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    faac:	bf04      	itt	eq
    faae:	9306      	streq	r3, [sp, #24]
    fab0:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    fab4:	f00c faae 	bl	1c014 <bt_addr_le_copy>
    fab8:	e7ae      	b.n	fa18 <le_adv_report+0xc0>
    faba:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    fabc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fac0:	f00c faa5 	bl	1c00e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fac4:	0641      	lsls	r1, r0, #25
    fac6:	f3c0 1580 	ubfx	r5, r0, #6, #1
    faca:	d48e      	bmi.n	f9ea <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    facc:	07da      	lsls	r2, r3, #31
    face:	d58c      	bpl.n	f9ea <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    fad0:	2202      	movs	r2, #2
    fad2:	4628      	mov	r0, r5
    fad4:	a904      	add	r1, sp, #16
    fad6:	f001 fedf 	bl	11898 <bt_conn_lookup_state_le>
	if (!conn) {
    fada:	4683      	mov	fp, r0
    fadc:	2800      	cmp	r0, #0
    fade:	d084      	beq.n	f9ea <le_adv_report+0x92>
    fae0:	4640      	mov	r0, r8
    fae2:	f00c fa94 	bl	1c00e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fae6:	0683      	lsls	r3, r0, #26
    fae8:	d410      	bmi.n	fb0c <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    faea:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    faee:	4649      	mov	r1, r9
    faf0:	f00c fa90 	bl	1c014 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    faf4:	4658      	mov	r0, fp
    faf6:	f7ff fe3d 	bl	f774 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    fafa:	b960      	cbnz	r0, fb16 <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    fafc:	4658      	mov	r0, fp
    fafe:	2106      	movs	r1, #6
    fb00:	f001 fd94 	bl	1162c <bt_conn_set_state>
	bt_conn_unref(conn);
    fb04:	4658      	mov	r0, fp
    fb06:	f001 fd65 	bl	115d4 <bt_conn_unref>
	return;
    fb0a:	e76e      	b.n	f9ea <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    fb0c:	4628      	mov	r0, r5
    fb0e:	f7ff fc07 	bl	f320 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fb12:	2800      	cmp	r0, #0
    fb14:	d0e9      	beq.n	faea <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fb16:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fb18:	2100      	movs	r1, #0
    fb1a:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fb1c:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fb20:	f001 fd84 	bl	1162c <bt_conn_set_state>
	bt_conn_unref(conn);
    fb24:	4658      	mov	r0, fp
    fb26:	f001 fd55 	bl	115d4 <bt_conn_unref>
	bt_le_scan_update(false);
    fb2a:	2000      	movs	r0, #0
    fb2c:	f7ff fea6 	bl	f87c <bt_le_scan_update>
    fb30:	e75b      	b.n	f9ea <le_adv_report+0x92>
    fb32:	bf00      	nop
    fb34:	20008094 	.word	0x20008094
    fb38:	20009f0c 	.word	0x20009f0c
    fb3c:	0002113b 	.word	0x0002113b
    fb40:	000215bf 	.word	0x000215bf
    fb44:	20009f04 	.word	0x20009f04

0000fb48 <bt_data_parse>:
{
    fb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fb4a:	4604      	mov	r4, r0
    fb4c:	460e      	mov	r6, r1
    fb4e:	4617      	mov	r7, r2
	while (ad->len > 1) {
    fb50:	88a3      	ldrh	r3, [r4, #4]
    fb52:	2b01      	cmp	r3, #1
    fb54:	d801      	bhi.n	fb5a <bt_data_parse+0x12>
}
    fb56:	b003      	add	sp, #12
    fb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    fb5a:	4620      	mov	r0, r4
    fb5c:	f00d fc8d 	bl	1d47a <net_buf_simple_pull_u8>
		if (len == 0U) {
    fb60:	4605      	mov	r5, r0
    fb62:	2800      	cmp	r0, #0
    fb64:	d0f7      	beq.n	fb56 <bt_data_parse+0xe>
		if (len > ad->len) {
    fb66:	88a2      	ldrh	r2, [r4, #4]
    fb68:	b283      	uxth	r3, r0
    fb6a:	429a      	cmp	r2, r3
    fb6c:	d206      	bcs.n	fb7c <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    fb6e:	2157      	movs	r1, #87	; 0x57
    fb70:	480c      	ldr	r0, [pc, #48]	; (fba4 <bt_data_parse+0x5c>)
}
    fb72:	b003      	add	sp, #12
    fb74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    fb78:	f00a bf32 	b.w	1a9e0 <printk>
		data.type = net_buf_simple_pull_u8(ad);
    fb7c:	4620      	mov	r0, r4
    fb7e:	f00d fc7c 	bl	1d47a <net_buf_simple_pull_u8>
		data.data = ad->data;
    fb82:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    fb84:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    fb88:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    fb8a:	4639      	mov	r1, r7
    fb8c:	4668      	mov	r0, sp
		data.data_len = len - 1;
    fb8e:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    fb92:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    fb94:	47b0      	blx	r6
    fb96:	2800      	cmp	r0, #0
    fb98:	d0dd      	beq.n	fb56 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    fb9a:	4629      	mov	r1, r5
    fb9c:	4620      	mov	r0, r4
    fb9e:	f005 ff85 	bl	15aac <net_buf_simple_pull>
    fba2:	e7d5      	b.n	fb50 <bt_data_parse+0x8>
    fba4:	00021159 	.word	0x00021159

0000fba8 <bt_send>:
	return bt_dev.drv->send(buf);
    fba8:	4b02      	ldr	r3, [pc, #8]	; (fbb4 <bt_send+0xc>)
    fbaa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    fbae:	691b      	ldr	r3, [r3, #16]
    fbb0:	4718      	bx	r3
    fbb2:	bf00      	nop
    fbb4:	20008000 	.word	0x20008000

0000fbb8 <bt_hci_cmd_send>:
{
    fbb8:	b538      	push	{r3, r4, r5, lr}
    fbba:	4605      	mov	r5, r0
	if (!buf) {
    fbbc:	460c      	mov	r4, r1
    fbbe:	b919      	cbnz	r1, fbc8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    fbc0:	f7ff fab4 	bl	f12c <bt_hci_cmd_create>
		if (!buf) {
    fbc4:	4604      	mov	r4, r0
    fbc6:	b1c0      	cbz	r0, fbfa <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    fbc8:	f640 4335 	movw	r3, #3125	; 0xc35
    fbcc:	429d      	cmp	r5, r3
    fbce:	d10e      	bne.n	fbee <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    fbd0:	4620      	mov	r0, r4
    fbd2:	f7ff ffe9 	bl	fba8 <bt_send>
		if (err) {
    fbd6:	4605      	mov	r5, r0
    fbd8:	b138      	cbz	r0, fbea <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    fbda:	4602      	mov	r2, r0
    fbdc:	2145      	movs	r1, #69	; 0x45
    fbde:	4808      	ldr	r0, [pc, #32]	; (fc00 <bt_hci_cmd_send+0x48>)
    fbe0:	f00a fefe 	bl	1a9e0 <printk>
			net_buf_unref(buf);
    fbe4:	4620      	mov	r0, r4
    fbe6:	f005 fe85 	bl	158f4 <net_buf_unref>
}
    fbea:	4628      	mov	r0, r5
    fbec:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    fbee:	4621      	mov	r1, r4
    fbf0:	4804      	ldr	r0, [pc, #16]	; (fc04 <bt_hci_cmd_send+0x4c>)
    fbf2:	f005 fe51 	bl	15898 <net_buf_put>
	return 0;
    fbf6:	2500      	movs	r5, #0
    fbf8:	e7f7      	b.n	fbea <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    fbfa:	f06f 0536 	mvn.w	r5, #54	; 0x36
    fbfe:	e7f4      	b.n	fbea <bt_hci_cmd_send+0x32>
    fc00:	0002116d 	.word	0x0002116d
    fc04:	20008118 	.word	0x20008118

0000fc08 <bt_hci_host_num_completed_packets>:
{
    fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc0a:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    fc0c:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fc0e:	7980      	ldrb	r0, [r0, #6]
    fc10:	f005 fcf0 	bl	155f4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    fc14:	4621      	mov	r1, r4
    fc16:	f00e f9a4 	bl	1df62 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    fc1a:	4b24      	ldr	r3, [pc, #144]	; (fcac <bt_hci_host_num_completed_packets+0xa4>)
    fc1c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    fc20:	069b      	lsls	r3, r3, #26
    fc22:	d541      	bpl.n	fca8 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    fc24:	7d60      	ldrb	r0, [r4, #21]
    fc26:	f002 f94d 	bl	11ec4 <bt_conn_lookup_index>
	if (!conn) {
    fc2a:	4605      	mov	r5, r0
    fc2c:	b930      	cbnz	r0, fc3c <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    fc2e:	7d62      	ldrb	r2, [r4, #21]
    fc30:	2157      	movs	r1, #87	; 0x57
}
    fc32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    fc36:	481e      	ldr	r0, [pc, #120]	; (fcb0 <bt_hci_host_num_completed_packets+0xa8>)
    fc38:	f00a bed2 	b.w	1a9e0 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    fc3c:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    fc3e:	2b01      	cmp	r3, #1
    fc40:	d002      	beq.n	fc48 <bt_hci_host_num_completed_packets+0x40>
    fc42:	3b07      	subs	r3, #7
    fc44:	2b01      	cmp	r3, #1
    fc46:	d80f      	bhi.n	fc68 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    fc48:	4628      	mov	r0, r5
    fc4a:	f001 fcc3 	bl	115d4 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    fc4e:	2105      	movs	r1, #5
    fc50:	f640 4035 	movw	r0, #3125	; 0xc35
    fc54:	f7ff fa6a 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    fc58:	4604      	mov	r4, r0
    fc5a:	b970      	cbnz	r0, fc7a <bt_hci_host_num_completed_packets+0x72>
}
    fc5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    fc60:	2145      	movs	r1, #69	; 0x45
    fc62:	4814      	ldr	r0, [pc, #80]	; (fcb4 <bt_hci_host_num_completed_packets+0xac>)
    fc64:	f00a bebc 	b.w	1a9e0 <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    fc68:	4813      	ldr	r0, [pc, #76]	; (fcb8 <bt_hci_host_num_completed_packets+0xb0>)
    fc6a:	2157      	movs	r1, #87	; 0x57
    fc6c:	f00a feb8 	bl	1a9e0 <printk>
		bt_conn_unref(conn);
    fc70:	4628      	mov	r0, r5
}
    fc72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    fc76:	f001 bcad 	b.w	115d4 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    fc7a:	f100 0708 	add.w	r7, r0, #8
    fc7e:	2101      	movs	r1, #1
    fc80:	4638      	mov	r0, r7
    fc82:	f005 ff4d 	bl	15b20 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    fc86:	2501      	movs	r5, #1
    fc88:	2104      	movs	r1, #4
    fc8a:	7005      	strb	r5, [r0, #0]
    fc8c:	4638      	mov	r0, r7
    fc8e:	f005 ff47 	bl	15b20 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    fc92:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    fc94:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    fc96:	7085      	strb	r5, [r0, #2]
    fc98:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fc9a:	4621      	mov	r1, r4
}
    fc9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fca0:	f640 4035 	movw	r0, #3125	; 0xc35
    fca4:	f7ff bf88 	b.w	fbb8 <bt_hci_cmd_send>
}
    fca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fcaa:	bf00      	nop
    fcac:	20008000 	.word	0x20008000
    fcb0:	00021194 	.word	0x00021194
    fcb4:	000211f3 	.word	0x000211f3
    fcb8:	000211c2 	.word	0x000211c2

0000fcbc <conn_auto_initiate>:
{
    fcbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    fcbe:	7a83      	ldrb	r3, [r0, #10]
{
    fcc0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    fcc2:	2b07      	cmp	r3, #7
    fcc4:	d15d      	bne.n	fd82 <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    fcc6:	1d06      	adds	r6, r0, #4
    fcc8:	4630      	mov	r0, r6
    fcca:	f00c f9a0 	bl	1c00e <atomic_get>
    fcce:	0483      	lsls	r3, r0, #18
    fcd0:	d41b      	bmi.n	fd0a <conn_auto_initiate+0x4e>
    fcd2:	78e3      	ldrb	r3, [r4, #3]
    fcd4:	b123      	cbz	r3, fce0 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    fcd6:	4b2c      	ldr	r3, [pc, #176]	; (fd88 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    fcd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fcdc:	071d      	lsls	r5, r3, #28
    fcde:	d514      	bpl.n	fd0a <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    fce0:	2102      	movs	r1, #2
    fce2:	f242 0016 	movw	r0, #8214	; 0x2016
    fce6:	f7ff fa21 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    fcea:	4605      	mov	r5, r0
    fcec:	b168      	cbz	r0, fd0a <conn_auto_initiate+0x4e>
    fcee:	2102      	movs	r1, #2
    fcf0:	3008      	adds	r0, #8
    fcf2:	f005 ff15 	bl	15b20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    fcf6:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fcf8:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    fcfa:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fcfc:	f242 0016 	movw	r0, #8214	; 0x2016
}
    fd00:	b004      	add	sp, #16
    fd02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fd06:	f7ff bf57 	b.w	fbb8 <bt_hci_cmd_send>
    fd0a:	4630      	mov	r0, r6
    fd0c:	f00c f97f 	bl	1c00e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fd10:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    fd14:	4d1c      	ldr	r5, [pc, #112]	; (fd88 <conn_auto_initiate+0xcc>)
    fd16:	f3c0 3100 	ubfx	r1, r0, #12, #1
    fd1a:	d116      	bne.n	fd4a <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    fd1c:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    fd20:	07d8      	lsls	r0, r3, #31
    fd22:	d512      	bpl.n	fd4a <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    fd24:	2302      	movs	r3, #2
    fd26:	4620      	mov	r0, r4
    fd28:	461a      	mov	r2, r3
    fd2a:	9100      	str	r1, [sp, #0]
    fd2c:	f00c fa23 	bl	1c176 <bt_le_set_phy>
		if (!err) {
    fd30:	4602      	mov	r2, r0
    fd32:	b930      	cbnz	r0, fd42 <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fd34:	2180      	movs	r1, #128	; 0x80
    fd36:	4630      	mov	r0, r6
}
    fd38:	b004      	add	sp, #16
    fd3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd3e:	f00c b96c 	b.w	1c01a <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    fd42:	2145      	movs	r1, #69	; 0x45
    fd44:	4811      	ldr	r0, [pc, #68]	; (fd8c <conn_auto_initiate+0xd0>)
    fd46:	f00a fe4b 	bl	1a9e0 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    fd4a:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    fd4e:	069a      	lsls	r2, r3, #26
    fd50:	d517      	bpl.n	fd82 <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    fd52:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    fd56:	689b      	ldr	r3, [r3, #8]
    fd58:	079b      	lsls	r3, r3, #30
    fd5a:	d512      	bpl.n	fd82 <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    fd5c:	f10d 010e 	add.w	r1, sp, #14
    fd60:	a803      	add	r0, sp, #12
    fd62:	f7ff fa8f 	bl	f284 <hci_le_read_max_data_len>
			if (!err) {
    fd66:	b960      	cbnz	r0, fd82 <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    fd68:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fd6c:	4620      	mov	r0, r4
    fd6e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    fd72:	f00c f9e3 	bl	1c13c <bt_le_set_data_len>
				if (err) {
    fd76:	4602      	mov	r2, r0
    fd78:	b118      	cbz	r0, fd82 <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    fd7a:	2145      	movs	r1, #69	; 0x45
    fd7c:	4804      	ldr	r0, [pc, #16]	; (fd90 <conn_auto_initiate+0xd4>)
    fd7e:	f00a fe2f 	bl	1a9e0 <printk>
}
    fd82:	b004      	add	sp, #16
    fd84:	bd70      	pop	{r4, r5, r6, pc}
    fd86:	bf00      	nop
    fd88:	20008000 	.word	0x20008000
    fd8c:	0002121b 	.word	0x0002121b
    fd90:	0002123a 	.word	0x0002123a

0000fd94 <le_phy_update_complete>:
{
    fd94:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fd96:	6883      	ldr	r3, [r0, #8]
    fd98:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    fd9c:	4628      	mov	r0, r5
    fd9e:	f001 fc3d 	bl	1161c <bt_conn_lookup_handle>
	if (!conn) {
    fda2:	4604      	mov	r4, r0
    fda4:	b930      	cbnz	r0, fdb4 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fda6:	462a      	mov	r2, r5
}
    fda8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fdac:	2145      	movs	r1, #69	; 0x45
    fdae:	480c      	ldr	r0, [pc, #48]	; (fde0 <le_phy_update_complete+0x4c>)
    fdb0:	f00a be16 	b.w	1a9e0 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    fdb4:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fdb6:	f06f 0180 	mvn.w	r1, #128	; 0x80
    fdba:	4628      	mov	r0, r5
    fdbc:	f00c f93b 	bl	1c036 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fdc0:	0603      	lsls	r3, r0, #24
    fdc2:	d507      	bpl.n	fdd4 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fdc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fdc8:	4628      	mov	r0, r5
    fdca:	f00c f926 	bl	1c01a <atomic_or>
		conn_auto_initiate(conn);
    fdce:	4620      	mov	r0, r4
    fdd0:	f7ff ff74 	bl	fcbc <conn_auto_initiate>
	bt_conn_unref(conn);
    fdd4:	4620      	mov	r0, r4
}
    fdd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    fdda:	f001 bbfb 	b.w	115d4 <bt_conn_unref>
    fdde:	bf00      	nop
    fde0:	00020e5e 	.word	0x00020e5e

0000fde4 <le_remote_feat_complete>:
{
    fde4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    fde6:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fde8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    fdec:	4630      	mov	r0, r6
    fdee:	f001 fc15 	bl	1161c <bt_conn_lookup_handle>
	if (!conn) {
    fdf2:	4604      	mov	r4, r0
    fdf4:	b930      	cbnz	r0, fe04 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fdf6:	4632      	mov	r2, r6
}
    fdf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fdfc:	2145      	movs	r1, #69	; 0x45
    fdfe:	480b      	ldr	r0, [pc, #44]	; (fe2c <le_remote_feat_complete+0x48>)
    fe00:	f00a bdee 	b.w	1a9e0 <printk>
	if (!evt->status) {
    fe04:	782b      	ldrb	r3, [r5, #0]
    fe06:	b923      	cbnz	r3, fe12 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    fe08:	2208      	movs	r2, #8
    fe0a:	1ce9      	adds	r1, r5, #3
    fe0c:	30ac      	adds	r0, #172	; 0xac
    fe0e:	f00c f811 	bl	1be34 <memcpy>
    fe12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fe16:	1d20      	adds	r0, r4, #4
    fe18:	f00c f8ff 	bl	1c01a <atomic_or>
	conn_auto_initiate(conn);
    fe1c:	4620      	mov	r0, r4
    fe1e:	f7ff ff4d 	bl	fcbc <conn_auto_initiate>
	bt_conn_unref(conn);
    fe22:	4620      	mov	r0, r4
}
    fe24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    fe28:	f001 bbd4 	b.w	115d4 <bt_conn_unref>
    fe2c:	00020e5e 	.word	0x00020e5e

0000fe30 <le_conn_param_neg_reply>:
{
    fe30:	b570      	push	{r4, r5, r6, lr}
    fe32:	4606      	mov	r6, r0
    fe34:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    fe36:	f242 0021 	movw	r0, #8225	; 0x2021
    fe3a:	2103      	movs	r1, #3
    fe3c:	f7ff f976 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    fe40:	4604      	mov	r4, r0
    fe42:	b928      	cbnz	r0, fe50 <le_conn_param_neg_reply+0x20>
}
    fe44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    fe48:	2145      	movs	r1, #69	; 0x45
    fe4a:	4808      	ldr	r0, [pc, #32]	; (fe6c <le_conn_param_neg_reply+0x3c>)
    fe4c:	f00a bdc8 	b.w	1a9e0 <printk>
    fe50:	2103      	movs	r1, #3
    fe52:	3008      	adds	r0, #8
    fe54:	f005 fe64 	bl	15b20 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    fe58:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    fe5a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fe5c:	4621      	mov	r1, r4
}
    fe5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fe62:	f242 0021 	movw	r0, #8225	; 0x2021
    fe66:	f7ff bea7 	b.w	fbb8 <bt_hci_cmd_send>
    fe6a:	bf00      	nop
    fe6c:	0002125b 	.word	0x0002125b

0000fe70 <le_conn_param_req>:
{
    fe70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    fe72:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fe74:	78d9      	ldrb	r1, [r3, #3]
    fe76:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    fe78:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fe7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fe7e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    fe82:	7959      	ldrb	r1, [r3, #5]
    fe84:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    fe86:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    fe88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fe8c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    fe90:	799a      	ldrb	r2, [r3, #6]
    fe92:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    fe94:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    fe96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fe9a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    fe9e:	7a1a      	ldrb	r2, [r3, #8]
    fea0:	7a5b      	ldrb	r3, [r3, #9]
    fea2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fea6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    feaa:	f001 fbb7 	bl	1161c <bt_conn_lookup_handle>
	if (!conn) {
    feae:	4606      	mov	r6, r0
    feb0:	b950      	cbnz	r0, fec8 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    feb2:	2145      	movs	r1, #69	; 0x45
    feb4:	481c      	ldr	r0, [pc, #112]	; (ff28 <le_conn_param_req+0xb8>)
    feb6:	4622      	mov	r2, r4
    feb8:	f00a fd92 	bl	1a9e0 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    febc:	2102      	movs	r1, #2
    febe:	4620      	mov	r0, r4
    fec0:	f7ff ffb6 	bl	fe30 <le_conn_param_neg_reply>
}
    fec4:	b003      	add	sp, #12
    fec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    fec8:	4669      	mov	r1, sp
    feca:	f001 f9f5 	bl	112b8 <le_param_req>
    fece:	b938      	cbnz	r0, fee0 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    fed0:	211e      	movs	r1, #30
    fed2:	4620      	mov	r0, r4
    fed4:	f7ff ffac 	bl	fe30 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    fed8:	4630      	mov	r0, r6
    feda:	f001 fb7b 	bl	115d4 <bt_conn_unref>
    fede:	e7f1      	b.n	fec4 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    fee0:	210e      	movs	r1, #14
    fee2:	f242 0020 	movw	r0, #8224	; 0x2020
    fee6:	f7ff f921 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
    feea:	4605      	mov	r5, r0
    feec:	2800      	cmp	r0, #0
    feee:	d0f3      	beq.n	fed8 <le_conn_param_req+0x68>
    fef0:	210e      	movs	r1, #14
    fef2:	3008      	adds	r0, #8
    fef4:	f005 fe14 	bl	15b20 <net_buf_simple_add>
    fef8:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    fefa:	220e      	movs	r2, #14
    fefc:	2100      	movs	r1, #0
    fefe:	f00b ffc4 	bl	1be8a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ff02:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ff06:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ff08:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ff0a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    ff0e:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ff10:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    ff12:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ff16:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    ff1a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    ff1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ff20:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ff22:	f7ff fe49 	bl	fbb8 <bt_hci_cmd_send>
    ff26:	e7d7      	b.n	fed8 <le_conn_param_req+0x68>
    ff28:	00020e5e 	.word	0x00020e5e

0000ff2c <hci_tx_thread>:
{
    ff2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    ff30:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
		BT_ASSERT(err == 0);
    ff34:	f8df 9128 	ldr.w	r9, [pc, #296]	; 10060 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x60>
			ev_count += bt_conn_prepare_events(&events[1]);
    ff38:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    ff3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ff40:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    ff42:	f36f 3310 	bfc	r3, #12, #5
    ff46:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    ff4a:	f001 fad7 	bl	114fc <bt_conn_prepare_events>
    ff4e:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    ff50:	f04f 32ff 	mov.w	r2, #4294967295
    ff54:	f04f 33ff 	mov.w	r3, #4294967295
    ff58:	4631      	mov	r1, r6
    ff5a:	4840      	ldr	r0, [pc, #256]	; (1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>)
    ff5c:	f00a fb24 	bl	1a5a8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    ff60:	b158      	cbz	r0, ff7a <hci_tx_thread+0x4e>
    ff62:	f241 4271 	movw	r2, #5233	; 0x1471
    ff66:	4649      	mov	r1, r9
    ff68:	483e      	ldr	r0, [pc, #248]	; (10064 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x64>)
    ff6a:	f00a fd39 	bl	1a9e0 <printk>
    ff6e:	4040      	eors	r0, r0
    ff70:	f380 8811 	msr	BASEPRI, r0
    ff74:	f04f 0003 	mov.w	r0, #3
    ff78:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    ff7a:	4d3b      	ldr	r5, [pc, #236]	; (10068 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x68>)
{
    ff7c:	4f37      	ldr	r7, [pc, #220]	; (1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>)
    ff7e:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
    ff82:	b916      	cbnz	r6, ff8a <hci_tx_thread+0x5e>
	z_impl_k_yield();
    ff84:	f009 fa12 	bl	193ac <z_impl_k_yield>
	while (1) {
    ff88:	e7d8      	b.n	ff3c <hci_tx_thread+0x10>
		switch (ev->state) {
    ff8a:	68fa      	ldr	r2, [r7, #12]
    ff8c:	f3c2 3204 	ubfx	r2, r2, #12, #5
    ff90:	2a01      	cmp	r2, #1
    ff92:	d953      	bls.n	1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>
    ff94:	2a04      	cmp	r2, #4
    ff96:	d15b      	bne.n	10050 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x50>
			if (ev->tag == BT_EVENT_CMD_TX) {
    ff98:	7b3b      	ldrb	r3, [r7, #12]
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	d151      	bne.n	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    ff9e:	2200      	movs	r2, #0
    ffa0:	2300      	movs	r3, #0
    ffa2:	4832      	ldr	r0, [pc, #200]	; (1006c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6c>)
    ffa4:	f005 fc24 	bl	157f0 <net_buf_get>
	BT_ASSERT(buf);
    ffa8:	4604      	mov	r4, r0
    ffaa:	b958      	cbnz	r0, ffc4 <hci_tx_thread+0x98>
    ffac:	f241 420e 	movw	r2, #5134	; 0x140e
    ffb0:	4649      	mov	r1, r9
    ffb2:	482c      	ldr	r0, [pc, #176]	; (10064 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x64>)
    ffb4:	f00a fd14 	bl	1a9e0 <printk>
    ffb8:	4040      	eors	r0, r0
    ffba:	f380 8811 	msr	BASEPRI, r0
    ffbe:	f04f 0003 	mov.w	r0, #3
    ffc2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    ffc4:	f04f 33ff 	mov.w	r3, #4294967295
    ffc8:	f04f 32ff 	mov.w	r2, #4294967295
    ffcc:	4658      	mov	r0, fp
    ffce:	f009 fb6b 	bl	196a8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    ffd2:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    ffd6:	b153      	cbz	r3, ffee <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    ffd8:	2145      	movs	r1, #69	; 0x45
    ffda:	4825      	ldr	r0, [pc, #148]	; (10070 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x70>)
    ffdc:	f00a fd00 	bl	1a9e0 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    ffe0:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    ffe4:	f005 fc86 	bl	158f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ffe8:	2300      	movs	r3, #0
    ffea:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    ffee:	4620      	mov	r0, r4
    fff0:	f005 fcc4 	bl	1597c <net_buf_ref>
    fff4:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
    fff8:	4620      	mov	r0, r4
    fffa:	f7ff fdd5 	bl	fba8 <bt_send>
	if (err) {
    fffe:	4602      	mov	r2, r0
   10000:	b1e0      	cbz	r0, 1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>
		BT_ERR("Unable to send to driver (err %d)", err);
   10002:	2145      	movs	r1, #69	; 0x45
   10004:	481b      	ldr	r0, [pc, #108]	; (10074 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x74>)
   10006:	f00a fceb 	bl	1a9e0 <printk>
	z_impl_k_sem_give(sem);
   1000a:	481b      	ldr	r0, [pc, #108]	; (10078 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x78>)
   1000c:	f009 fb10 	bl	19630 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   10010:	4620      	mov	r0, r4
   10012:	f005 faf7 	bl	15604 <net_buf_id>
   10016:	220c      	movs	r2, #12
   10018:	4b18      	ldr	r3, [pc, #96]	; (1007c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x7c>)
   1001a:	211f      	movs	r1, #31
   1001c:	fb02 3000 	mla	r0, r2, r0, r3
   10020:	4622      	mov	r2, r4
   10022:	8840      	ldrh	r0, [r0, #2]
   10024:	f7fe ff20 	bl	ee68 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   10028:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
   1002c:	f005 fc62 	bl	158f4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   10030:	2300      	movs	r3, #0
		net_buf_unref(buf);
   10032:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   10034:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
   10038:	f005 fc5c 	bl	158f4 <net_buf_unref>
	for (; count; ev++, count--) {
   1003c:	3714      	adds	r7, #20
   1003e:	3e01      	subs	r6, #1
   10040:	e79f      	b.n	ff82 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   10042:	2b01      	cmp	r3, #1
   10044:	d1fa      	bne.n	1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>
					conn = CONTAINER_OF(ev->fifo,
   10046:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   10048:	3834      	subs	r0, #52	; 0x34
   1004a:	f001 febb 	bl	11dc4 <bt_conn_process_tx>
   1004e:	e7f5      	b.n	1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   10050:	2157      	movs	r1, #87	; 0x57
   10052:	480b      	ldr	r0, [pc, #44]	; (10080 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x80>)
   10054:	f00a fcc4 	bl	1a9e0 <printk>
   10058:	e7f0      	b.n	1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>
   1005a:	bf00      	nop
   1005c:	200082b4 	.word	0x200082b4
   10060:	00020f50 	.word	0x00020f50
   10064:	0001faab 	.word	0x0001faab
   10068:	20008000 	.word	0x20008000
   1006c:	20008118 	.word	0x20008118
   10070:	0002127a 	.word	0x0002127a
   10074:	0002116d 	.word	0x0002116d
   10078:	200080e0 	.word	0x200080e0
   1007c:	20009ee8 	.word	0x20009ee8
   10080:	0002129a 	.word	0x0002129a

00010084 <hci_event_prio>:
{
   10084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10088:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1008a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1008e:	4630      	mov	r0, r6
   10090:	f00d fa03 	bl	1d49a <net_buf_simple_headroom>
	state->len = buf->len;
   10094:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   10098:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1009a:	f1b8 0f01 	cmp.w	r8, #1
   1009e:	d80b      	bhi.n	100b8 <hci_event_prio+0x34>
   100a0:	f641 02ae 	movw	r2, #6318	; 0x18ae
   100a4:	491a      	ldr	r1, [pc, #104]	; (10110 <hci_event_prio+0x8c>)
   100a6:	481b      	ldr	r0, [pc, #108]	; (10114 <hci_event_prio+0x90>)
   100a8:	f00a fc9a 	bl	1a9e0 <printk>
   100ac:	4040      	eors	r0, r0
   100ae:	f380 8811 	msr	BASEPRI, r0
   100b2:	f04f 0003 	mov.w	r0, #3
   100b6:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   100b8:	4630      	mov	r0, r6
   100ba:	2102      	movs	r1, #2
   100bc:	f005 fd12 	bl	15ae4 <net_buf_simple_pull_mem>
   100c0:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   100c2:	7800      	ldrb	r0, [r0, #0]
   100c4:	f00b ff82 	bl	1bfcc <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   100c8:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   100ca:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   100cc:	d40b      	bmi.n	100e6 <hci_event_prio+0x62>
   100ce:	f641 02b2 	movw	r2, #6322	; 0x18b2
   100d2:	490f      	ldr	r1, [pc, #60]	; (10110 <hci_event_prio+0x8c>)
   100d4:	480f      	ldr	r0, [pc, #60]	; (10114 <hci_event_prio+0x90>)
   100d6:	f00a fc83 	bl	1a9e0 <printk>
   100da:	4040      	eors	r0, r0
   100dc:	f380 8811 	msr	BASEPRI, r0
   100e0:	f04f 0003 	mov.w	r0, #3
   100e4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   100e6:	2305      	movs	r3, #5
   100e8:	4621      	mov	r1, r4
   100ea:	4a0b      	ldr	r2, [pc, #44]	; (10118 <hci_event_prio+0x94>)
   100ec:	7838      	ldrb	r0, [r7, #0]
   100ee:	f7fe fdb3 	bl	ec58 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   100f2:	07b3      	lsls	r3, r6, #30
   100f4:	d507      	bpl.n	10106 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   100f6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   100f8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   100fc:	fa10 f585 	uxtah	r5, r0, r5
   10100:	60a5      	str	r5, [r4, #8]
}
   10102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   10106:	4620      	mov	r0, r4
}
   10108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1010c:	f005 bbf2 	b.w	158f4 <net_buf_unref>
   10110:	00020f50 	.word	0x00020f50
   10114:	0001faab 	.word	0x0001faab
   10118:	0001eb4c 	.word	0x0001eb4c

0001011c <bt_recv>:
{
   1011c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1011e:	7d02      	ldrb	r2, [r0, #20]
   10120:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   10122:	2a01      	cmp	r2, #1
   10124:	d007      	beq.n	10136 <bt_recv+0x1a>
   10126:	2a03      	cmp	r2, #3
   10128:	d113      	bne.n	10152 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1012a:	480f      	ldr	r0, [pc, #60]	; (10168 <bt_recv+0x4c>)
   1012c:	4629      	mov	r1, r5
   1012e:	f005 fbb3 	bl	15898 <net_buf_put>
		return 0;
   10132:	2000      	movs	r0, #0
   10134:	e00c      	b.n	10150 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10136:	6883      	ldr	r3, [r0, #8]
   10138:	7818      	ldrb	r0, [r3, #0]
   1013a:	f00b ff47 	bl	1bfcc <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1013e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10140:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   10142:	d502      	bpl.n	1014a <bt_recv+0x2e>
			hci_event_prio(buf);
   10144:	4628      	mov	r0, r5
   10146:	f7ff ff9d 	bl	10084 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1014a:	f014 0002 	ands.w	r0, r4, #2
   1014e:	d1ec      	bne.n	1012a <bt_recv+0xe>
}
   10150:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   10152:	2145      	movs	r1, #69	; 0x45
   10154:	4805      	ldr	r0, [pc, #20]	; (1016c <bt_recv+0x50>)
   10156:	f00a fc43 	bl	1a9e0 <printk>
		net_buf_unref(buf);
   1015a:	4628      	mov	r0, r5
   1015c:	f005 fbca 	bl	158f4 <net_buf_unref>
		return -EINVAL;
   10160:	f06f 0015 	mvn.w	r0, #21
   10164:	e7f4      	b.n	10150 <bt_recv+0x34>
   10166:	bf00      	nop
   10168:	200080fc 	.word	0x200080fc
   1016c:	000212c0 	.word	0x000212c0

00010170 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   10170:	4a08      	ldr	r2, [pc, #32]	; (10194 <bt_hci_driver_register+0x24>)
{
   10172:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   10174:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
   10178:	b930      	cbnz	r0, 10188 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1017a:	68d9      	ldr	r1, [r3, #12]
   1017c:	b139      	cbz	r1, 1018e <bt_hci_driver_register+0x1e>
   1017e:	6919      	ldr	r1, [r3, #16]
   10180:	b129      	cbz	r1, 1018e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   10182:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
   10186:	4770      	bx	lr
		return -EALREADY;
   10188:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1018c:	4770      	bx	lr
		return -EINVAL;
   1018e:	f06f 0015 	mvn.w	r0, #21
}
   10192:	4770      	bx	lr
   10194:	20008000 	.word	0x20008000

00010198 <bt_finalize_init>:
{
   10198:	b508      	push	{r3, lr}
   1019a:	2102      	movs	r1, #2
   1019c:	4803      	ldr	r0, [pc, #12]	; (101ac <bt_finalize_init+0x14>)
   1019e:	f00b ff3c 	bl	1c01a <atomic_or>
}
   101a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   101a6:	2000      	movs	r0, #0
   101a8:	f7ff bb68 	b.w	f87c <bt_le_scan_update>
   101ac:	20008094 	.word	0x20008094

000101b0 <bt_init>:
{
   101b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   101b2:	4d60      	ldr	r5, [pc, #384]	; (10334 <bt_init+0x184>)
   101b4:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   101b8:	6899      	ldr	r1, [r3, #8]
   101ba:	f011 0101 	ands.w	r1, r1, #1
   101be:	d11e      	bne.n	101fe <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   101c0:	f640 4003 	movw	r0, #3075	; 0xc03
   101c4:	aa01      	add	r2, sp, #4
   101c6:	f7fe fffb 	bl	f1c0 <bt_hci_cmd_send_sync>
		if (err) {
   101ca:	4604      	mov	r4, r0
   101cc:	2800      	cmp	r0, #0
   101ce:	f040 80ad 	bne.w	1032c <bt_init+0x17c>
	uint8_t status = buf->data[0];
   101d2:	9b01      	ldr	r3, [sp, #4]
   101d4:	689b      	ldr	r3, [r3, #8]
	if (status) {
   101d6:	781b      	ldrb	r3, [r3, #0]
   101d8:	b973      	cbnz	r3, 101f8 <bt_init+0x48>
	scan_dev_found_cb = NULL;
   101da:	4a57      	ldr	r2, [pc, #348]	; (10338 <bt_init+0x188>)
   101dc:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   101de:	f105 0394 	add.w	r3, r5, #148	; 0x94
   101e2:	4618      	mov	r0, r3
   101e4:	f00b ff13 	bl	1c00e <atomic_get>
   101e8:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   101ec:	e8d3 2fef 	ldaex	r2, [r3]
   101f0:	e8c3 0fe1 	stlex	r1, r0, [r3]
   101f4:	2900      	cmp	r1, #0
   101f6:	d1f9      	bne.n	101ec <bt_init+0x3c>
		net_buf_unref(rsp);
   101f8:	9801      	ldr	r0, [sp, #4]
   101fa:	f005 fb7b 	bl	158f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   101fe:	2100      	movs	r1, #0
   10200:	f241 0003 	movw	r0, #4099	; 0x1003
   10204:	aa01      	add	r2, sp, #4
   10206:	f7fe ffdb 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   1020a:	4604      	mov	r4, r0
   1020c:	2800      	cmp	r0, #0
   1020e:	f040 808d 	bne.w	1032c <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   10212:	9b01      	ldr	r3, [sp, #4]
   10214:	2208      	movs	r2, #8
   10216:	6899      	ldr	r1, [r3, #8]
   10218:	4848      	ldr	r0, [pc, #288]	; (1033c <bt_init+0x18c>)
   1021a:	3101      	adds	r1, #1
   1021c:	f00b fe0a 	bl	1be34 <memcpy>
	net_buf_unref(rsp);
   10220:	9801      	ldr	r0, [sp, #4]
   10222:	f005 fb67 	bl	158f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   10226:	4621      	mov	r1, r4
   10228:	f241 0001 	movw	r0, #4097	; 0x1001
   1022c:	aa01      	add	r2, sp, #4
   1022e:	f7fe ffc7 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   10232:	4604      	mov	r4, r0
   10234:	2800      	cmp	r0, #0
   10236:	d179      	bne.n	1032c <bt_init+0x17c>
	read_local_ver_complete(rsp);
   10238:	9801      	ldr	r0, [sp, #4]
   1023a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1023c:	785a      	ldrb	r2, [r3, #1]
   1023e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10242:	78d9      	ldrb	r1, [r3, #3]
   10244:	789a      	ldrb	r2, [r3, #2]
   10246:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1024a:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   1024c:	791a      	ldrb	r2, [r3, #4]
   1024e:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10252:	7a19      	ldrb	r1, [r3, #8]
   10254:	79da      	ldrb	r2, [r3, #7]
   10256:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1025a:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1025c:	795a      	ldrb	r2, [r3, #5]
   1025e:	799b      	ldrb	r3, [r3, #6]
   10260:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   10264:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   10266:	f005 fb45 	bl	158f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1026a:	4621      	mov	r1, r4
   1026c:	f241 0002 	movw	r0, #4098	; 0x1002
   10270:	aa01      	add	r2, sp, #4
   10272:	f7fe ffa5 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   10276:	4604      	mov	r4, r0
   10278:	2800      	cmp	r0, #0
   1027a:	d157      	bne.n	1032c <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
   1027c:	9b01      	ldr	r3, [sp, #4]
   1027e:	2240      	movs	r2, #64	; 0x40
   10280:	6899      	ldr	r1, [r3, #8]
   10282:	482f      	ldr	r0, [pc, #188]	; (10340 <bt_init+0x190>)
   10284:	3101      	adds	r1, #1
   10286:	f00b fdd5 	bl	1be34 <memcpy>
	net_buf_unref(rsp);
   1028a:	9801      	ldr	r0, [sp, #4]
   1028c:	f005 fb32 	bl	158f4 <net_buf_unref>
		err = prng_init();
   10290:	f000 fed6 	bl	11040 <prng_init>
		if (err) {
   10294:	4604      	mov	r4, r0
   10296:	2800      	cmp	r0, #0
   10298:	d148      	bne.n	1032c <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1029a:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   1029e:	069f      	lsls	r7, r3, #26
   102a0:	d40e      	bmi.n	102c0 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
   102a2:	2157      	movs	r1, #87	; 0x57
   102a4:	4827      	ldr	r0, [pc, #156]	; (10344 <bt_init+0x194>)
   102a6:	f00a fb9b 	bl	1a9e0 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
   102aa:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   102ae:	065e      	lsls	r6, r3, #25
   102b0:	d44c      	bmi.n	1034c <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
   102b2:	2145      	movs	r1, #69	; 0x45
   102b4:	4824      	ldr	r0, [pc, #144]	; (10348 <bt_init+0x198>)
   102b6:	f00a fb93 	bl	1a9e0 <printk>
		return -ENODEV;
   102ba:	f06f 0412 	mvn.w	r4, #18
   102be:	e035      	b.n	1032c <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   102c0:	2107      	movs	r1, #7
   102c2:	f640 4033 	movw	r0, #3123	; 0xc33
   102c6:	f7fe ff31 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   102ca:	4607      	mov	r7, r0
   102cc:	b910      	cbnz	r0, 102d4 <bt_init+0x124>
		return -ENOBUFS;
   102ce:	f06f 0436 	mvn.w	r4, #54	; 0x36
   102d2:	e02b      	b.n	1032c <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
   102d4:	2107      	movs	r1, #7
   102d6:	3008      	adds	r0, #8
   102d8:	f005 fc22 	bl	15b20 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
   102dc:	4621      	mov	r1, r4
   102de:	2207      	movs	r2, #7
   102e0:	4606      	mov	r6, r0
   102e2:	f00b fdd2 	bl	1be8a <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
   102e6:	231b      	movs	r3, #27
   102e8:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   102ea:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   102ec:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
   102ee:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   102f0:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   102f2:	4639      	mov	r1, r7
   102f4:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   102f8:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   102fa:	f7fe ff61 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   102fe:	4604      	mov	r4, r0
   10300:	b9a0      	cbnz	r0, 1032c <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   10302:	2101      	movs	r1, #1
   10304:	f640 4031 	movw	r0, #3121	; 0xc31
   10308:	f7fe ff10 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   1030c:	4606      	mov	r6, r0
   1030e:	2800      	cmp	r0, #0
   10310:	d0dd      	beq.n	102ce <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
   10312:	2101      	movs	r1, #1
   10314:	3008      	adds	r0, #8
   10316:	f00d f8d8 	bl	1d4ca <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   1031a:	4622      	mov	r2, r4
   1031c:	4631      	mov	r1, r6
   1031e:	f640 4031 	movw	r0, #3121	; 0xc31
   10322:	f7fe ff4d 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   10326:	4604      	mov	r4, r0
   10328:	2800      	cmp	r0, #0
   1032a:	d0be      	beq.n	102aa <bt_init+0xfa>
}
   1032c:	4620      	mov	r0, r4
   1032e:	b003      	add	sp, #12
   10330:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10332:	bf00      	nop
   10334:	20008000 	.word	0x20008000
   10338:	20009f0c 	.word	0x20009f0c
   1033c:	2000803c 	.word	0x2000803c
   10340:	20008044 	.word	0x20008044
   10344:	000212d9 	.word	0x000212d9
   10348:	0002130c 	.word	0x0002130c
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1034c:	2100      	movs	r1, #0
   1034e:	f242 0003 	movw	r0, #8195	; 0x2003
   10352:	aa01      	add	r2, sp, #4
   10354:	f7fe ff34 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   10358:	4604      	mov	r4, r0
   1035a:	2800      	cmp	r0, #0
   1035c:	d1e6      	bne.n	1032c <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1035e:	9b01      	ldr	r3, [sp, #4]
   10360:	2208      	movs	r2, #8
   10362:	6899      	ldr	r1, [r3, #8]
   10364:	48a6      	ldr	r0, [pc, #664]	; (10600 <bt_init+0x450>)
   10366:	3101      	adds	r1, #1
   10368:	f00b fd64 	bl	1be34 <memcpy>
	net_buf_unref(rsp);
   1036c:	9801      	ldr	r0, [sp, #4]
   1036e:	f005 fac1 	bl	158f4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   10372:	4621      	mov	r1, r4
   10374:	f242 0002 	movw	r0, #8194	; 0x2002
   10378:	aa01      	add	r2, sp, #4
   1037a:	f7fe ff21 	bl	f1c0 <bt_hci_cmd_send_sync>
		if (err) {
   1037e:	4604      	mov	r4, r0
   10380:	2800      	cmp	r0, #0
   10382:	d1d3      	bne.n	1032c <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
   10384:	9b01      	ldr	r3, [sp, #4]
   10386:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10388:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1038c:	b291      	uxth	r1, r2
   1038e:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
   10392:	b121      	cbz	r1, 1039e <bt_init+0x1ee>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10394:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   10396:	489b      	ldr	r0, [pc, #620]	; (10604 <bt_init+0x454>)
   10398:	4611      	mov	r1, r2
   1039a:	f00d fe2f 	bl	1dffc <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1039e:	9801      	ldr	r0, [sp, #4]
   103a0:	f005 faa8 	bl	158f4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   103a4:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   103a8:	f016 0620 	ands.w	r6, r6, #32
   103ac:	f000 80d4 	beq.w	10558 <bt_init+0x3a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   103b0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   103b4:	071c      	lsls	r4, r3, #28
   103b6:	d512      	bpl.n	103de <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   103b8:	2100      	movs	r1, #0
   103ba:	f242 001c 	movw	r0, #8220	; 0x201c
   103be:	aa01      	add	r2, sp, #4
   103c0:	f7fe fefe 	bl	f1c0 <bt_hci_cmd_send_sync>
		if (err) {
   103c4:	4604      	mov	r4, r0
   103c6:	2800      	cmp	r0, #0
   103c8:	d1b0      	bne.n	1032c <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
   103ca:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   103cc:	6883      	ldr	r3, [r0, #8]
   103ce:	f8d3 2001 	ldr.w	r2, [r3, #1]
   103d2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   103d6:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   103da:	f005 fa8b 	bl	158f4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   103de:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   103e2:	0698      	lsls	r0, r3, #26
   103e4:	d524      	bpl.n	10430 <bt_init+0x280>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   103e6:	4668      	mov	r0, sp
   103e8:	f10d 0102 	add.w	r1, sp, #2
   103ec:	f7fe ff4a 	bl	f284 <hci_le_read_max_data_len>
		if (err) {
   103f0:	4604      	mov	r4, r0
   103f2:	2800      	cmp	r0, #0
   103f4:	d19a      	bne.n	1032c <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   103f6:	2104      	movs	r1, #4
   103f8:	f242 0024 	movw	r0, #8228	; 0x2024
   103fc:	f7fe fe96 	bl	f12c <bt_hci_cmd_create>
		if (!buf) {
   10400:	4606      	mov	r6, r0
   10402:	2800      	cmp	r0, #0
   10404:	f43f af63 	beq.w	102ce <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
   10408:	2104      	movs	r1, #4
   1040a:	3008      	adds	r0, #8
   1040c:	f005 fb88 	bl	15b20 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10410:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10414:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10416:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10418:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1041c:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1041e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10420:	f242 0024 	movw	r0, #8228	; 0x2024
   10424:	f7fe fecc 	bl	f1c0 <bt_hci_cmd_send_sync>
		if (err) {
   10428:	4604      	mov	r4, r0
   1042a:	2800      	cmp	r0, #0
   1042c:	f47f af7e 	bne.w	1032c <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   10430:	2108      	movs	r1, #8
   10432:	f242 0001 	movw	r0, #8193	; 0x2001
   10436:	f7fe fe79 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   1043a:	4604      	mov	r4, r0
   1043c:	2800      	cmp	r0, #0
   1043e:	f43f af46 	beq.w	102ce <bt_init+0x11e>
   10442:	2108      	movs	r1, #8
   10444:	4408      	add	r0, r1
   10446:	f005 fb6b 	bl	15b20 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1044a:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1044e:	f012 0f02 	tst.w	r2, #2
   10452:	bf14      	ite	ne
   10454:	232f      	movne	r3, #47	; 0x2f
   10456:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10458:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1045a:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1045e:	bf48      	it	mi
   10460:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10464:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   10468:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1046c:	bf18      	it	ne
   1046e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   10472:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   10474:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10478:	4621      	mov	r1, r4
   1047a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1047c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1047e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   10480:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   10482:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   10484:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   10486:	71c2      	strb	r2, [r0, #7]
   10488:	f242 0001 	movw	r0, #8193	; 0x2001
   1048c:	f7fe fe98 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   10490:	4604      	mov	r4, r0
   10492:	2800      	cmp	r0, #0
   10494:	f47f af4a 	bne.w	1032c <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10498:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1049c:	069a      	lsls	r2, r3, #26
   1049e:	d41e      	bmi.n	104de <bt_init+0x32e>
	if (bt_dev.le.acl_mtu) {
   104a0:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
   104a4:	b9d9      	cbnz	r1, 104de <bt_init+0x32e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   104a6:	f241 0005 	movw	r0, #4101	; 0x1005
   104aa:	aa01      	add	r2, sp, #4
   104ac:	f7fe fe88 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   104b0:	4604      	mov	r4, r0
   104b2:	2800      	cmp	r0, #0
   104b4:	f47f af3a 	bne.w	1032c <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
   104b8:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
   104bc:	b963      	cbnz	r3, 104d8 <bt_init+0x328>
   104be:	9b01      	ldr	r3, [sp, #4]
   104c0:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   104c2:	785a      	ldrb	r2, [r3, #1]
   104c4:	7899      	ldrb	r1, [r3, #2]
   104c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   104ca:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   104ce:	889a      	ldrh	r2, [r3, #4]
   104d0:	484c      	ldr	r0, [pc, #304]	; (10604 <bt_init+0x454>)
   104d2:	4611      	mov	r1, r2
   104d4:	f00d fd92 	bl	1dffc <z_impl_k_sem_init>
	net_buf_unref(rsp);
   104d8:	9801      	ldr	r0, [sp, #4]
   104da:	f005 fa0b 	bl	158f4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   104de:	2108      	movs	r1, #8
   104e0:	f640 4001 	movw	r0, #3073	; 0xc01
   104e4:	f7fe fe22 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   104e8:	4604      	mov	r4, r0
   104ea:	2800      	cmp	r0, #0
   104ec:	f43f aeef 	beq.w	102ce <bt_init+0x11e>
   104f0:	2108      	movs	r1, #8
   104f2:	4408      	add	r0, r1
   104f4:	f005 fb14 	bl	15b20 <net_buf_simple_add>
	dst[0] = val;
   104f8:	2310      	movs	r3, #16
   104fa:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   104fc:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   104fe:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   10500:	7043      	strb	r3, [r0, #1]
   10502:	2602      	movs	r6, #2
   10504:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10506:	4621      	mov	r1, r4
	dst[0] = val;
   10508:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1050a:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   1050c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1050e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   10510:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   10512:	71c3      	strb	r3, [r0, #7]
   10514:	f640 4001 	movw	r0, #3073	; 0xc01
   10518:	f7fe fe52 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   1051c:	4604      	mov	r4, r0
   1051e:	2800      	cmp	r0, #0
   10520:	f47f af04 	bne.w	1032c <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10524:	4601      	mov	r1, r0
   10526:	aa01      	add	r2, sp, #4
   10528:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1052c:	f7fe fe48 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   10530:	4604      	mov	r4, r0
   10532:	b360      	cbz	r0, 1058e <bt_init+0x3de>
		BT_WARN("Vendor HCI extensions not available");
   10534:	2157      	movs	r1, #87	; 0x57
   10536:	4834      	ldr	r0, [pc, #208]	; (10608 <bt_init+0x458>)
			BT_WARN("Failed to read supported vendor features");
   10538:	f00a fa52 	bl	1a9e0 <printk>
		err = bt_conn_init();
   1053c:	f001 fcd0 	bl	11ee0 <bt_conn_init>
		if (err) {
   10540:	4604      	mov	r4, r0
   10542:	2800      	cmp	r0, #0
   10544:	f47f aef2 	bne.w	1032c <bt_init+0x17c>
		if (!bt_dev.id_count) {
   10548:	79eb      	ldrb	r3, [r5, #7]
   1054a:	2b00      	cmp	r3, #0
   1054c:	d150      	bne.n	105f0 <bt_init+0x440>
			BT_INFO("No ID address. App must call settings_load()");
   1054e:	2149      	movs	r1, #73	; 0x49
   10550:	482e      	ldr	r0, [pc, #184]	; (1060c <bt_init+0x45c>)
   10552:	f00a fa45 	bl	1a9e0 <printk>
			return 0;
   10556:	e6e9      	b.n	1032c <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10558:	2102      	movs	r1, #2
   1055a:	f640 406d 	movw	r0, #3181	; 0xc6d
   1055e:	f7fe fde5 	bl	f12c <bt_hci_cmd_create>
		if (!buf) {
   10562:	4604      	mov	r4, r0
   10564:	2800      	cmp	r0, #0
   10566:	f43f aeb2 	beq.w	102ce <bt_init+0x11e>
   1056a:	2102      	movs	r1, #2
   1056c:	3008      	adds	r0, #8
   1056e:	f005 fad7 	bl	15b20 <net_buf_simple_add>
		cp_le->le = 0x01;
   10572:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10574:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   10576:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10578:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1057a:	4632      	mov	r2, r6
   1057c:	f640 406d 	movw	r0, #3181	; 0xc6d
   10580:	f7fe fe1e 	bl	f1c0 <bt_hci_cmd_send_sync>
		if (err) {
   10584:	4604      	mov	r4, r0
   10586:	2800      	cmp	r0, #0
   10588:	f43f af12 	beq.w	103b0 <bt_init+0x200>
   1058c:	e6ce      	b.n	1032c <bt_init+0x17c>
	net_buf_unref(rsp);
   1058e:	9801      	ldr	r0, [sp, #4]
   10590:	f005 f9b0 	bl	158f4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10594:	4621      	mov	r1, r4
   10596:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1059a:	aa01      	add	r2, sp, #4
   1059c:	f7fe fe10 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   105a0:	4604      	mov	r4, r0
   105a2:	b110      	cbz	r0, 105aa <bt_init+0x3fa>
		BT_WARN("Failed to read supported vendor commands");
   105a4:	2157      	movs	r1, #87	; 0x57
   105a6:	481a      	ldr	r0, [pc, #104]	; (10610 <bt_init+0x460>)
   105a8:	e7c6      	b.n	10538 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
   105aa:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   105ac:	4632      	mov	r2, r6
   105ae:	6899      	ldr	r1, [r3, #8]
   105b0:	4818      	ldr	r0, [pc, #96]	; (10614 <bt_init+0x464>)
   105b2:	3101      	adds	r1, #1
   105b4:	f00b fc3e 	bl	1be34 <memcpy>
	net_buf_unref(rsp);
   105b8:	9801      	ldr	r0, [sp, #4]
   105ba:	f005 f99b 	bl	158f4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   105be:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   105c2:	075b      	lsls	r3, r3, #29
   105c4:	d5ba      	bpl.n	1053c <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   105c6:	4621      	mov	r1, r4
   105c8:	f64f 4003 	movw	r0, #64515	; 0xfc03
   105cc:	aa01      	add	r2, sp, #4
   105ce:	f7fe fdf7 	bl	f1c0 <bt_hci_cmd_send_sync>
		if (err) {
   105d2:	b110      	cbz	r0, 105da <bt_init+0x42a>
			BT_WARN("Failed to read supported vendor features");
   105d4:	2157      	movs	r1, #87	; 0x57
   105d6:	4810      	ldr	r0, [pc, #64]	; (10618 <bt_init+0x468>)
   105d8:	e7ae      	b.n	10538 <bt_init+0x388>
		memcpy(bt_dev.vs_features, rp.feat->features,
   105da:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
   105dc:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   105de:	480f      	ldr	r0, [pc, #60]	; (1061c <bt_init+0x46c>)
   105e0:	6899      	ldr	r1, [r3, #8]
   105e2:	4411      	add	r1, r2
   105e4:	f00b fc26 	bl	1be34 <memcpy>
		net_buf_unref(rsp);
   105e8:	9801      	ldr	r0, [sp, #4]
   105ea:	f005 f983 	bl	158f4 <net_buf_unref>
   105ee:	e7a5      	b.n	1053c <bt_init+0x38c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   105f0:	2104      	movs	r1, #4
   105f2:	480b      	ldr	r0, [pc, #44]	; (10620 <bt_init+0x470>)
   105f4:	f00b fd11 	bl	1c01a <atomic_or>
	bt_finalize_init();
   105f8:	f7ff fdce 	bl	10198 <bt_finalize_init>
	return 0;
   105fc:	e696      	b.n	1032c <bt_init+0x17c>
   105fe:	bf00      	nop
   10600:	20008098 	.word	0x20008098
   10604:	200080c8 	.word	0x200080c8
   10608:	00021335 	.word	0x00021335
   1060c:	000213ba 	.word	0x000213ba
   10610:	0002135e 	.word	0x0002135e
   10614:	20008085 	.word	0x20008085
   10618:	0002138c 	.word	0x0002138c
   1061c:	20008084 	.word	0x20008084
   10620:	20008094 	.word	0x20008094

00010624 <init_work>:
{
   10624:	b510      	push	{r4, lr}
	err = bt_init();
   10626:	f7ff fdc3 	bl	101b0 <bt_init>
	if (ready_cb) {
   1062a:	4b03      	ldr	r3, [pc, #12]	; (10638 <init_work+0x14>)
   1062c:	681b      	ldr	r3, [r3, #0]
   1062e:	b113      	cbz	r3, 10636 <init_work+0x12>
}
   10630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   10634:	4718      	bx	r3
}
   10636:	bd10      	pop	{r4, pc}
   10638:	20009f00 	.word	0x20009f00

0001063c <bt_enable>:
{
   1063c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   10640:	4d35      	ldr	r5, [pc, #212]	; (10718 <bt_enable+0xdc>)
{
   10642:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   10644:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
   10648:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   1064a:	b94b      	cbnz	r3, 10660 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   1064c:	2145      	movs	r1, #69	; 0x45
   1064e:	4833      	ldr	r0, [pc, #204]	; (1071c <bt_enable+0xe0>)
   10650:	f00a f9c6 	bl	1a9e0 <printk>
		return -ENODEV;
   10654:	f06f 0412 	mvn.w	r4, #18
}
   10658:	4620      	mov	r0, r4
   1065a:	b008      	add	sp, #32
   1065c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10660:	2101      	movs	r1, #1
   10662:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10666:	f00b fcd8 	bl	1c01a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1066a:	07c2      	lsls	r2, r0, #31
   1066c:	d451      	bmi.n	10712 <bt_enable+0xd6>
		err = bt_settings_init();
   1066e:	f7fe f913 	bl	e898 <bt_settings_init>
		if (err) {
   10672:	4604      	mov	r4, r0
   10674:	2800      	cmp	r0, #0
   10676:	d1ef      	bne.n	10658 <bt_enable+0x1c>
	ready_cb = cb;
   10678:	4b29      	ldr	r3, [pc, #164]	; (10720 <bt_enable+0xe4>)
   1067a:	f04f 0800 	mov.w	r8, #0
   1067e:	f04f 0900 	mov.w	r9, #0
   10682:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10684:	f06f 0308 	mvn.w	r3, #8
   10688:	e9cd 0000 	strd	r0, r0, [sp]
   1068c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   10690:	9004      	str	r0, [sp, #16]
   10692:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10696:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1069a:	4b22      	ldr	r3, [pc, #136]	; (10724 <bt_enable+0xe8>)
   1069c:	4922      	ldr	r1, [pc, #136]	; (10728 <bt_enable+0xec>)
   1069e:	4823      	ldr	r0, [pc, #140]	; (1072c <bt_enable+0xf0>)
   106a0:	f009 f8ee 	bl	19880 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   106a4:	4922      	ldr	r1, [pc, #136]	; (10730 <bt_enable+0xf4>)
   106a6:	4821      	ldr	r0, [pc, #132]	; (1072c <bt_enable+0xf0>)
   106a8:	f00d fcc2 	bl	1e030 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   106ac:	f06f 0307 	mvn.w	r3, #7
   106b0:	f640 0298 	movw	r2, #2200	; 0x898
   106b4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   106b8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   106bc:	e9cd 4400 	strd	r4, r4, [sp]
   106c0:	4b1c      	ldr	r3, [pc, #112]	; (10734 <bt_enable+0xf8>)
   106c2:	491d      	ldr	r1, [pc, #116]	; (10738 <bt_enable+0xfc>)
   106c4:	9404      	str	r4, [sp, #16]
   106c6:	481d      	ldr	r0, [pc, #116]	; (1073c <bt_enable+0x100>)
   106c8:	f009 f8da 	bl	19880 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   106cc:	491c      	ldr	r1, [pc, #112]	; (10740 <bt_enable+0x104>)
   106ce:	481b      	ldr	r0, [pc, #108]	; (1073c <bt_enable+0x100>)
   106d0:	f00d fcae 	bl	1e030 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   106d4:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   106d8:	68db      	ldr	r3, [r3, #12]
   106da:	4798      	blx	r3
	if (err) {
   106dc:	4604      	mov	r4, r0
   106de:	b128      	cbz	r0, 106ec <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   106e0:	4602      	mov	r2, r0
   106e2:	2145      	movs	r1, #69	; 0x45
   106e4:	4817      	ldr	r0, [pc, #92]	; (10744 <bt_enable+0x108>)
   106e6:	f00a f97b 	bl	1a9e0 <printk>
		return err;
   106ea:	e7b5      	b.n	10658 <bt_enable+0x1c>
	if (!cb) {
   106ec:	b926      	cbnz	r6, 106f8 <bt_enable+0xbc>
}
   106ee:	b008      	add	sp, #32
   106f0:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   106f4:	f7ff bd5c 	b.w	101b0 <bt_init>
   106f8:	2101      	movs	r1, #1
   106fa:	f105 0090 	add.w	r0, r5, #144	; 0x90
   106fe:	f00b fc8c 	bl	1c01a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   10702:	07c3      	lsls	r3, r0, #31
   10704:	d4a8      	bmi.n	10658 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   10706:	4810      	ldr	r0, [pc, #64]	; (10748 <bt_enable+0x10c>)
   10708:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1070c:	f00d fc1e 	bl	1df4c <k_queue_append>
   10710:	e7a2      	b.n	10658 <bt_enable+0x1c>
		return -EALREADY;
   10712:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10716:	e79f      	b.n	10658 <bt_enable+0x1c>
   10718:	20008000 	.word	0x20008000
   1071c:	000213ec 	.word	0x000213ec
   10720:	20009f00 	.word	0x20009f00
   10724:	0000ff2d 	.word	0x0000ff2d
   10728:	2000faf8 	.word	0x2000faf8
   1072c:	20008a00 	.word	0x20008a00
   10730:	0002140a 	.word	0x0002140a
   10734:	0000ed45 	.word	0x0000ed45
   10738:	2000f260 	.word	0x2000f260
   1073c:	20008970 	.word	0x20008970
   10740:	00021410 	.word	0x00021410
   10744:	00021416 	.word	0x00021416
   10748:	200098e0 	.word	0x200098e0

0001074c <bt_get_name>:
}
   1074c:	4800      	ldr	r0, [pc, #0]	; (10750 <bt_get_name+0x4>)
   1074e:	4770      	bx	lr
   10750:	0001f6ff 	.word	0x0001f6ff

00010754 <bt_id_create>:
{
   10754:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10756:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10758:	4605      	mov	r5, r0
   1075a:	b918      	cbnz	r0, 10764 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1075c:	b314      	cbz	r4, 107a4 <bt_id_create+0x50>
		return -EINVAL;
   1075e:	f06f 0415 	mvn.w	r4, #21
   10762:	e01c      	b.n	1079e <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10764:	2300      	movs	r3, #0
   10766:	4669      	mov	r1, sp
   10768:	9300      	str	r3, [sp, #0]
   1076a:	f8cd 3003 	str.w	r3, [sp, #3]
   1076e:	f00b fc5f 	bl	1c030 <bt_addr_le_cmp>
   10772:	2800      	cmp	r0, #0
   10774:	d0f2      	beq.n	1075c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10776:	782b      	ldrb	r3, [r5, #0]
   10778:	2b01      	cmp	r3, #1
   1077a:	d104      	bne.n	10786 <bt_id_create+0x32>
   1077c:	79ab      	ldrb	r3, [r5, #6]
   1077e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10782:	2bc0      	cmp	r3, #192	; 0xc0
   10784:	d004      	beq.n	10790 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   10786:	2145      	movs	r1, #69	; 0x45
   10788:	480d      	ldr	r0, [pc, #52]	; (107c0 <bt_id_create+0x6c>)
   1078a:	f00a f929 	bl	1a9e0 <printk>
			return -EINVAL;
   1078e:	e7e6      	b.n	1075e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   10790:	4628      	mov	r0, r5
   10792:	f7fe f949 	bl	ea28 <id_find>
   10796:	2800      	cmp	r0, #0
   10798:	dbe0      	blt.n	1075c <bt_id_create+0x8>
			return -EALREADY;
   1079a:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   1079e:	4620      	mov	r0, r4
   107a0:	b003      	add	sp, #12
   107a2:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   107a4:	4b07      	ldr	r3, [pc, #28]	; (107c4 <bt_id_create+0x70>)
   107a6:	79dc      	ldrb	r4, [r3, #7]
   107a8:	2c01      	cmp	r4, #1
   107aa:	d006      	beq.n	107ba <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   107ac:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   107ae:	4629      	mov	r1, r5
   107b0:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   107b2:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   107b4:	f7fe fa90 	bl	ecd8 <id_create.constprop.0>
	return new_id;
   107b8:	e7f1      	b.n	1079e <bt_id_create+0x4a>
		return -ENOMEM;
   107ba:	f06f 040b 	mvn.w	r4, #11
   107be:	e7ee      	b.n	1079e <bt_id_create+0x4a>
   107c0:	00021437 	.word	0x00021437
   107c4:	20008000 	.word	0x20008000

000107c8 <bt_setup_public_id_addr>:
{
   107c8:	b570      	push	{r4, r5, r6, lr}
   107ca:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   107cc:	2100      	movs	r1, #0
   107ce:	f241 0009 	movw	r0, #4105	; 0x1009
   107d2:	aa01      	add	r2, sp, #4
   107d4:	f7fe fcf4 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   107d8:	4e1d      	ldr	r6, [pc, #116]	; (10850 <bt_setup_public_id_addr+0x88>)
   107da:	4604      	mov	r4, r0
   107dc:	b138      	cbz	r0, 107ee <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   107de:	2157      	movs	r1, #87	; 0x57
   107e0:	481c      	ldr	r0, [pc, #112]	; (10854 <bt_setup_public_id_addr+0x8c>)
   107e2:	f00a f8fd 	bl	1a9e0 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   107e6:	2300      	movs	r3, #0
   107e8:	71f3      	strb	r3, [r6, #7]
}
   107ea:	b006      	add	sp, #24
   107ec:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   107ee:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   107f0:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   107f2:	689d      	ldr	r5, [r3, #8]
   107f4:	a904      	add	r1, sp, #16
   107f6:	3501      	adds	r5, #1
   107f8:	9004      	str	r0, [sp, #16]
   107fa:	f8ad 0014 	strh.w	r0, [sp, #20]
   107fe:	4628      	mov	r0, r5
   10800:	f00b fb07 	bl	1be12 <memcmp>
   10804:	b918      	cbnz	r0, 1080e <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   10806:	9801      	ldr	r0, [sp, #4]
   10808:	f005 f874 	bl	158f4 <net_buf_unref>
   1080c:	e7eb      	b.n	107e6 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1080e:	4b12      	ldr	r3, [pc, #72]	; (10858 <bt_setup_public_id_addr+0x90>)
   10810:	2206      	movs	r2, #6
   10812:	f8d3 0007 	ldr.w	r0, [r3, #7]
   10816:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   1081a:	9002      	str	r0, [sp, #8]
   1081c:	a902      	add	r1, sp, #8
   1081e:	4628      	mov	r0, r5
   10820:	f8ad 300c 	strh.w	r3, [sp, #12]
   10824:	f00b faf5 	bl	1be12 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10828:	2800      	cmp	r0, #0
   1082a:	d0ec      	beq.n	10806 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   1082c:	4629      	mov	r1, r5
   1082e:	2206      	movs	r2, #6
   10830:	f10d 0011 	add.w	r0, sp, #17
   10834:	f00b fafe 	bl	1be34 <memcpy>
	net_buf_unref(rsp);
   10838:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1083a:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   1083e:	f005 f859 	bl	158f4 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   10842:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   10844:	4620      	mov	r0, r4
   10846:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   10848:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   1084a:	f7fe fa45 	bl	ecd8 <id_create.constprop.0>
   1084e:	e7cc      	b.n	107ea <bt_setup_public_id_addr+0x22>
   10850:	20008000 	.word	0x20008000
   10854:	0002146a 	.word	0x0002146a
   10858:	0001e730 	.word	0x0001e730

0001085c <bt_read_static_addr>:
{
   1085c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   10860:	4b1c      	ldr	r3, [pc, #112]	; (108d4 <bt_read_static_addr+0x78>)
{
   10862:	4607      	mov	r7, r0
   10864:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   10868:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1086a:	f014 0401 	ands.w	r4, r4, #1
   1086e:	d104      	bne.n	1087a <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   10870:	2157      	movs	r1, #87	; 0x57
   10872:	4819      	ldr	r0, [pc, #100]	; (108d8 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   10874:	f00a f8b4 	bl	1a9e0 <printk>
   10878:	e00c      	b.n	10894 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1087a:	2100      	movs	r1, #0
   1087c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   10880:	aa01      	add	r2, sp, #4
   10882:	f7fe fc9d 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   10886:	4605      	mov	r5, r0
   10888:	b140      	cbz	r0, 1089c <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   1088a:	2157      	movs	r1, #87	; 0x57
   1088c:	4813      	ldr	r0, [pc, #76]	; (108dc <bt_read_static_addr+0x80>)
   1088e:	f00a f8a7 	bl	1a9e0 <printk>
		return 0;
   10892:	2400      	movs	r4, #0
}
   10894:	4620      	mov	r0, r4
   10896:	b002      	add	sp, #8
   10898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1089c:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   108a0:	9b01      	ldr	r3, [sp, #4]
   108a2:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   108a4:	785c      	ldrb	r4, [r3, #1]
   108a6:	42b4      	cmp	r4, r6
   108a8:	bf28      	it	cs
   108aa:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   108ac:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   108ae:	42a5      	cmp	r5, r4
   108b0:	db07      	blt.n	108c2 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   108b2:	9801      	ldr	r0, [sp, #4]
   108b4:	f005 f81e 	bl	158f4 <net_buf_unref>
	if (!cnt) {
   108b8:	2c00      	cmp	r4, #0
   108ba:	d1eb      	bne.n	10894 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   108bc:	2157      	movs	r1, #87	; 0x57
   108be:	4808      	ldr	r0, [pc, #32]	; (108e0 <bt_read_static_addr+0x84>)
   108c0:	e7d8      	b.n	10874 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   108c2:	fb08 7005 	mla	r0, r8, r5, r7
   108c6:	2216      	movs	r2, #22
   108c8:	4631      	mov	r1, r6
   108ca:	f00b fab3 	bl	1be34 <memcpy>
	for (i = 0; i < cnt; i++) {
   108ce:	3501      	adds	r5, #1
   108d0:	e7ed      	b.n	108ae <bt_read_static_addr+0x52>
   108d2:	bf00      	nop
   108d4:	20008000 	.word	0x20008000
   108d8:	0002148d 	.word	0x0002148d
   108dc:	000214be 	.word	0x000214be
   108e0:	000214e3 	.word	0x000214e3

000108e4 <bt_setup_random_id_addr>:
{
   108e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   108e6:	4d15      	ldr	r5, [pc, #84]	; (1093c <bt_setup_random_id_addr+0x58>)
{
   108e8:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   108ea:	79ec      	ldrb	r4, [r5, #7]
   108ec:	b9f4      	cbnz	r4, 1092c <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   108ee:	2101      	movs	r1, #1
   108f0:	a802      	add	r0, sp, #8
   108f2:	f7ff ffb3 	bl	1085c <bt_read_static_addr>
   108f6:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   108f8:	b1c0      	cbz	r0, 1092c <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   108fa:	2716      	movs	r7, #22
   108fc:	b2e6      	uxtb	r6, r4
   108fe:	ab02      	add	r3, sp, #8
   10900:	2206      	movs	r2, #6
   10902:	fb07 3106 	mla	r1, r7, r6, r3
   10906:	f10d 0001 	add.w	r0, sp, #1
   1090a:	f00b fa93 	bl	1be34 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1090e:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   10910:	4669      	mov	r1, sp
   10912:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   10914:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   10918:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   1091a:	f7fe f9dd 	bl	ecd8 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1091e:	79ea      	ldrb	r2, [r5, #7]
   10920:	b2e3      	uxtb	r3, r4
   10922:	429a      	cmp	r2, r3
   10924:	d8ea      	bhi.n	108fc <bt_setup_random_id_addr+0x18>
}
   10926:	2000      	movs	r0, #0
   10928:	b009      	add	sp, #36	; 0x24
   1092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   1092c:	2100      	movs	r1, #0
   1092e:	4608      	mov	r0, r1
}
   10930:	b009      	add	sp, #36	; 0x24
   10932:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   10936:	f7ff bf0d 	b.w	10754 <bt_id_create>
   1093a:	bf00      	nop
   1093c:	20008000 	.word	0x20008000

00010940 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   10940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10944:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   10946:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   10948:	690d      	ldr	r5, [r1, #16]
{
   1094a:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   1094c:	ebb5 0b03 	subs.w	fp, r5, r3
{
   10950:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10952:	4884      	ldr	r0, [pc, #528]	; (10b64 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   10954:	bf18      	it	ne
   10956:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   1095a:	9307      	str	r3, [sp, #28]
   1095c:	f00b fb57 	bl	1c00e <atomic_get>
{
   10960:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10962:	0782      	lsls	r2, r0, #30
{
   10964:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10966:	f140 80ef 	bpl.w	10b48 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1096a:	4608      	mov	r0, r1
   1096c:	f7fe f874 	bl	ea58 <valid_adv_param>
   10970:	4607      	mov	r7, r0
   10972:	2800      	cmp	r0, #0
   10974:	f000 80eb 	beq.w	10b4e <bt_le_adv_start_legacy+0x20e>
   10978:	487a      	ldr	r0, [pc, #488]	; (10b64 <bt_le_adv_start_legacy+0x224>)
   1097a:	f00b fb48 	bl	1c00e <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   1097e:	0503      	lsls	r3, r0, #20
   10980:	d402      	bmi.n	10988 <bt_le_adv_start_legacy+0x48>
   10982:	4878      	ldr	r0, [pc, #480]	; (10b64 <bt_le_adv_start_legacy+0x224>)
   10984:	f00b fb43 	bl	1c00e <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10988:	f106 0810 	add.w	r8, r6, #16
   1098c:	4640      	mov	r0, r8
   1098e:	f00b fb3e 	bl	1c00e <atomic_get>
   10992:	f3c0 1180 	ubfx	r1, r0, #6, #1
   10996:	0640      	lsls	r0, r0, #25
   10998:	f100 80dc 	bmi.w	10b54 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   1099c:	220f      	movs	r2, #15
   1099e:	a80a      	add	r0, sp, #40	; 0x28
   109a0:	9105      	str	r1, [sp, #20]
   109a2:	f00b fa72 	bl	1be8a <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   109a6:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   109a8:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   109aa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   109ae:	68e3      	ldr	r3, [r4, #12]
   109b0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   109b4:	f00b fb1c 	bl	1bff0 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   109b8:	7832      	ldrb	r2, [r6, #0]
   109ba:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   109bc:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   109be:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   109c0:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   109c4:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   109c8:	d004      	beq.n	109d4 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   109ca:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   109ce:	4865      	ldr	r0, [pc, #404]	; (10b64 <bt_le_adv_start_legacy+0x224>)
   109d0:	f00b fb31 	bl	1c036 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   109d4:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   109d6:	4b64      	ldr	r3, [pc, #400]	; (10b68 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   109d8:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   109da:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   109de:	465a      	mov	r2, fp
   109e0:	6861      	ldr	r1, [r4, #4]
   109e2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   109e6:	f7fe fcd7 	bl	f398 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   109ea:	4683      	mov	fp, r0
   109ec:	2800      	cmp	r0, #0
   109ee:	d169      	bne.n	10ac4 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   109f0:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   109f4:	2d00      	cmp	r5, #0
   109f6:	d042      	beq.n	10a7e <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   109f8:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   109fa:	f00b fb0b 	bl	1c014 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   109fe:	6860      	ldr	r0, [r4, #4]
   10a00:	07c1      	lsls	r1, r0, #31
   10a02:	d544      	bpl.n	10a8e <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   10a04:	2d00      	cmp	r5, #0
   10a06:	d03f      	beq.n	10a88 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   10a08:	f010 0f10 	tst.w	r0, #16
   10a0c:	bf14      	ite	ne
   10a0e:	2304      	movne	r3, #4
   10a10:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   10a12:	6921      	ldr	r1, [r4, #16]
   10a14:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   10a18:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10a1c:	f00b fafa 	bl	1c014 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   10a20:	210f      	movs	r1, #15
   10a22:	f242 0006 	movw	r0, #8198	; 0x2006
   10a26:	f7fe fb81 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   10a2a:	4683      	mov	fp, r0
   10a2c:	2800      	cmp	r0, #0
   10a2e:	f000 8094 	beq.w	10b5a <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10a32:	220f      	movs	r2, #15
   10a34:	a90a      	add	r1, sp, #40	; 0x28
   10a36:	3008      	adds	r0, #8
   10a38:	f00c fd3b 	bl	1d4b2 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   10a3c:	2200      	movs	r2, #0
   10a3e:	4659      	mov	r1, fp
   10a40:	f242 0006 	movw	r0, #8198	; 0x2006
   10a44:	f7fe fbbc 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (err) {
   10a48:	2800      	cmp	r0, #0
   10a4a:	f040 8089 	bne.w	10b60 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   10a4e:	b34d      	cbz	r5, 10aa4 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   10a50:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10a52:	07da      	lsls	r2, r3, #31
   10a54:	d43a      	bmi.n	10acc <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   10a56:	2101      	movs	r1, #1
   10a58:	4630      	mov	r0, r6
   10a5a:	f7fe fdf7 	bl	f64c <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   10a5e:	4683      	mov	fp, r0
   10a60:	2800      	cmp	r0, #0
   10a62:	d06a      	beq.n	10b3a <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   10a64:	4841      	ldr	r0, [pc, #260]	; (10b6c <bt_le_adv_start_legacy+0x22c>)
   10a66:	2145      	movs	r1, #69	; 0x45
   10a68:	f009 ffba 	bl	1a9e0 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10a6c:	9807      	ldr	r0, [sp, #28]
   10a6e:	b348      	cbz	r0, 10ac4 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10a70:	2100      	movs	r1, #0
   10a72:	f000 fddb 	bl	1162c <bt_conn_set_state>
			bt_conn_unref(conn);
   10a76:	9807      	ldr	r0, [sp, #28]
   10a78:	f000 fdac 	bl	115d4 <bt_conn_unref>
   10a7c:	e022      	b.n	10ac4 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10a7e:	9508      	str	r5, [sp, #32]
   10a80:	a908      	add	r1, sp, #32
   10a82:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   10a86:	e7b8      	b.n	109fa <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   10a88:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   10a8c:	e7c8      	b.n	10a20 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10a8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10a90:	b933      	cbnz	r3, 10aa0 <bt_le_adv_start_legacy+0x160>
   10a92:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   10a96:	f1c7 0303 	rsb	r3, r7, #3
   10a9a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10a9e:	e7bf      	b.n	10a20 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10aa0:	2701      	movs	r7, #1
   10aa2:	e7f8      	b.n	10a96 <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   10aa4:	6863      	ldr	r3, [r4, #4]
   10aa6:	4652      	mov	r2, sl
   10aa8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10aac:	e9cd 7301 	strd	r7, r3, [sp, #4]
   10ab0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10ab2:	4649      	mov	r1, r9
   10ab4:	9300      	str	r3, [sp, #0]
   10ab6:	4630      	mov	r0, r6
   10ab8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10aba:	f7fe fd53 	bl	f564 <le_adv_update.constprop.0>
		if (err) {
   10abe:	4683      	mov	fp, r0
   10ac0:	2800      	cmp	r0, #0
   10ac2:	d0c5      	beq.n	10a50 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   10ac4:	4658      	mov	r0, fp
   10ac6:	b00f      	add	sp, #60	; 0x3c
   10ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   10acc:	4630      	mov	r0, r6
   10ace:	a907      	add	r1, sp, #28
   10ad0:	f7fe fad8 	bl	f084 <le_adv_start_add_conn>
		if (err) {
   10ad4:	4683      	mov	fp, r0
   10ad6:	2800      	cmp	r0, #0
   10ad8:	d0bd      	beq.n	10a56 <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   10ada:	f110 0f0c 	cmn.w	r0, #12
   10ade:	d1f1      	bne.n	10ac4 <bt_le_adv_start_legacy+0x184>
   10ae0:	2d00      	cmp	r5, #0
   10ae2:	d1ef      	bne.n	10ac4 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   10ae4:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   10ae6:	079b      	lsls	r3, r3, #30
   10ae8:	d4ec      	bmi.n	10ac4 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10aea:	6860      	ldr	r0, [r4, #4]
   10aec:	f080 0002 	eor.w	r0, r0, #2
   10af0:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   10af4:	f00b 0201 	and.w	r2, fp, #1
   10af8:	210c      	movs	r1, #12
   10afa:	4640      	mov	r0, r8
   10afc:	f00b faa6 	bl	1c04c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   10b00:	6862      	ldr	r2, [r4, #4]
   10b02:	2107      	movs	r1, #7
   10b04:	4640      	mov	r0, r8
   10b06:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10b0a:	f00b fa9f 	bl	1c04c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10b0e:	6862      	ldr	r2, [r4, #4]
   10b10:	2108      	movs	r1, #8
   10b12:	4640      	mov	r0, r8
   10b14:	f002 0201 	and.w	r2, r2, #1
   10b18:	f00b fa98 	bl	1c04c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   10b1c:	463a      	mov	r2, r7
   10b1e:	2109      	movs	r1, #9
   10b20:	4640      	mov	r0, r8
   10b22:	f00b fa93 	bl	1c04c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   10b26:	6862      	ldr	r2, [r4, #4]
   10b28:	210b      	movs	r1, #11
   10b2a:	4640      	mov	r0, r8
   10b2c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10b30:	f00b fa8c 	bl	1c04c <atomic_set_bit_to>
	return 0;
   10b34:	f04f 0b00 	mov.w	fp, #0
   10b38:	e7c4      	b.n	10ac4 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10b3a:	9807      	ldr	r0, [sp, #28]
   10b3c:	b108      	cbz	r0, 10b42 <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   10b3e:	f000 fd49 	bl	115d4 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10b42:	2d00      	cmp	r5, #0
   10b44:	d1d6      	bne.n	10af4 <bt_le_adv_start_legacy+0x1b4>
   10b46:	e7d0      	b.n	10aea <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   10b48:	f06f 0b0a 	mvn.w	fp, #10
   10b4c:	e7ba      	b.n	10ac4 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   10b4e:	f06f 0b15 	mvn.w	fp, #21
   10b52:	e7b7      	b.n	10ac4 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   10b54:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   10b58:	e7b4      	b.n	10ac4 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   10b5a:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   10b5e:	e7b1      	b.n	10ac4 <bt_le_adv_start_legacy+0x184>
   10b60:	4683      	mov	fp, r0
   10b62:	e7af      	b.n	10ac4 <bt_le_adv_start_legacy+0x184>
   10b64:	20008094 	.word	0x20008094
   10b68:	20008000 	.word	0x20008000
   10b6c:	00021511 	.word	0x00021511

00010b70 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   10b70:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   10b72:	9c04      	ldr	r4, [sp, #16]
   10b74:	e9cd 3400 	strd	r3, r4, [sp]
   10b78:	4613      	mov	r3, r2
   10b7a:	460a      	mov	r2, r1
   10b7c:	4601      	mov	r1, r0
   10b7e:	4802      	ldr	r0, [pc, #8]	; (10b88 <bt_le_adv_start+0x18>)
   10b80:	f7ff fede 	bl	10940 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   10b84:	b002      	add	sp, #8
   10b86:	bd10      	pop	{r4, pc}
   10b88:	20008018 	.word	0x20008018

00010b8c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10b8c:	b530      	push	{r4, r5, lr}
   10b8e:	4c29      	ldr	r4, [pc, #164]	; (10c34 <bt_le_adv_stop+0xa8>)
   10b90:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10b94:	b085      	sub	sp, #20
   10b96:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10b9a:	f00b fa4c 	bl	1c036 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10b9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10ba2:	f00b fa34 	bl	1c00e <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10ba6:	0641      	lsls	r1, r0, #25
   10ba8:	d403      	bmi.n	10bb2 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
   10baa:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10bac:	4620      	mov	r0, r4
   10bae:	b005      	add	sp, #20
   10bb0:	bd30      	pop	{r4, r5, pc}
   10bb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10bb6:	f00b fa2a 	bl	1c00e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10bba:	05c2      	lsls	r2, r0, #23
   10bbc:	d521      	bpl.n	10c02 <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10bbe:	2300      	movs	r3, #0
   10bc0:	4669      	mov	r1, sp
   10bc2:	f104 0021 	add.w	r0, r4, #33	; 0x21
   10bc6:	9300      	str	r3, [sp, #0]
   10bc8:	f8cd 3003 	str.w	r3, [sp, #3]
   10bcc:	f00b fa30 	bl	1c030 <bt_addr_le_cmp>
   10bd0:	7e25      	ldrb	r5, [r4, #24]
   10bd2:	bb58      	cbnz	r0, 10c2c <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10bd4:	4b18      	ldr	r3, [pc, #96]	; (10c38 <bt_le_adv_stop+0xac>)
   10bd6:	a902      	add	r1, sp, #8
   10bd8:	889a      	ldrh	r2, [r3, #4]
   10bda:	6818      	ldr	r0, [r3, #0]
   10bdc:	f8ad 200c 	strh.w	r2, [sp, #12]
   10be0:	2204      	movs	r2, #4
   10be2:	799b      	ldrb	r3, [r3, #6]
   10be4:	9002      	str	r0, [sp, #8]
   10be6:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10bea:	4628      	mov	r0, r5
   10bec:	f000 fe54 	bl	11898 <bt_conn_lookup_state_le>
   10bf0:	4604      	mov	r4, r0
	if (conn) {
   10bf2:	b130      	cbz	r0, 10c02 <bt_le_adv_stop+0x76>
		conn->err = status;
   10bf4:	2100      	movs	r1, #0
   10bf6:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10bf8:	f000 fd18 	bl	1162c <bt_conn_set_state>
		bt_conn_unref(conn);
   10bfc:	4620      	mov	r0, r4
   10bfe:	f000 fce9 	bl	115d4 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
   10c02:	2100      	movs	r1, #0
   10c04:	480d      	ldr	r0, [pc, #52]	; (10c3c <bt_le_adv_stop+0xb0>)
   10c06:	f7fe fd21 	bl	f64c <set_le_adv_enable_legacy>
		if (err) {
   10c0a:	4604      	mov	r4, r0
   10c0c:	2800      	cmp	r0, #0
   10c0e:	d1cd      	bne.n	10bac <bt_le_adv_stop+0x20>
   10c10:	480b      	ldr	r0, [pc, #44]	; (10c40 <bt_le_adv_stop+0xb4>)
   10c12:	f00b f9fc 	bl	1c00e <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10c16:	0683      	lsls	r3, r0, #26
   10c18:	d5c7      	bpl.n	10baa <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
   10c1a:	4620      	mov	r0, r4
   10c1c:	f7fe fb80 	bl	f320 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
   10c20:	f00b fa3a 	bl	1c098 <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
   10c24:	2001      	movs	r0, #1
   10c26:	f7fe fb7b 	bl	f320 <set_le_scan_enable_legacy>
   10c2a:	e7bf      	b.n	10bac <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10c2c:	2205      	movs	r2, #5
   10c2e:	f104 0121 	add.w	r1, r4, #33	; 0x21
   10c32:	e7da      	b.n	10bea <bt_le_adv_stop+0x5e>
   10c34:	20008000 	.word	0x20008000
   10c38:	0001e730 	.word	0x0001e730
   10c3c:	20008018 	.word	0x20008018
   10c40:	20008094 	.word	0x20008094

00010c44 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   10c44:	b513      	push	{r0, r1, r4, lr}
   10c46:	4818      	ldr	r0, [pc, #96]	; (10ca8 <bt_le_adv_resume+0x64>)
   10c48:	f00b f9e1 	bl	1c00e <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   10c4c:	04c1      	lsls	r1, r0, #19
   10c4e:	d529      	bpl.n	10ca4 <bt_le_adv_resume+0x60>
   10c50:	4815      	ldr	r0, [pc, #84]	; (10ca8 <bt_le_adv_resume+0x64>)
   10c52:	f00b f9dc 	bl	1c00e <atomic_get>
   10c56:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10c58:	f3c0 1480 	ubfx	r4, r0, #6, #1
   10c5c:	d422      	bmi.n	10ca4 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10c5e:	4812      	ldr	r0, [pc, #72]	; (10ca8 <bt_le_adv_resume+0x64>)
   10c60:	f00b f9d5 	bl	1c00e <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10c64:	05c3      	lsls	r3, r0, #23
   10c66:	d51d      	bpl.n	10ca4 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   10c68:	4810      	ldr	r0, [pc, #64]	; (10cac <bt_le_adv_resume+0x68>)
   10c6a:	a901      	add	r1, sp, #4
   10c6c:	f7fe fa0a 	bl	f084 <le_adv_start_add_conn>
	if (err) {
   10c70:	b9c0      	cbnz	r0, 10ca4 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   10c72:	2101      	movs	r1, #1
   10c74:	480d      	ldr	r0, [pc, #52]	; (10cac <bt_le_adv_resume+0x68>)
   10c76:	f7fe fce9 	bl	f64c <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   10c7a:	b150      	cbz	r0, 10c92 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10c7c:	4621      	mov	r1, r4
   10c7e:	9801      	ldr	r0, [sp, #4]
   10c80:	f000 fcd4 	bl	1162c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10c84:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10c88:	4807      	ldr	r0, [pc, #28]	; (10ca8 <bt_le_adv_resume+0x64>)
   10c8a:	f00b f9d4 	bl	1c036 <atomic_and>
	return (old & mask) != 0;
   10c8e:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   10c92:	9801      	ldr	r0, [sp, #4]
   10c94:	f000 fc9e 	bl	115d4 <bt_conn_unref>
	if (persist_paused) {
   10c98:	b124      	cbz	r4, 10ca4 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10c9e:	4802      	ldr	r0, [pc, #8]	; (10ca8 <bt_le_adv_resume+0x64>)
   10ca0:	f00b f9bb 	bl	1c01a <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   10ca4:	b002      	add	sp, #8
   10ca6:	bd10      	pop	{r4, pc}
   10ca8:	20008028 	.word	0x20008028
   10cac:	20008018 	.word	0x20008018

00010cb0 <enh_conn_complete>:
{
   10cb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   10cb4:	7804      	ldrb	r4, [r0, #0]
{
   10cb6:	4605      	mov	r5, r0
	if (evt->status) {
   10cb8:	2c00      	cmp	r4, #0
   10cba:	d048      	beq.n	10d4e <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10cbc:	2c3c      	cmp	r4, #60	; 0x3c
   10cbe:	d11a      	bne.n	10cf6 <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10cc0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10cc4:	4872      	ldr	r0, [pc, #456]	; (10e90 <enh_conn_complete+0x1e0>)
   10cc6:	f00b f9b6 	bl	1c036 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10cca:	2000      	movs	r0, #0
   10ccc:	f7fd ffa6 	bl	ec1c <find_pending_connect.part.0>
		if (!conn) {
   10cd0:	4605      	mov	r5, r0
   10cd2:	b930      	cbnz	r0, 10ce2 <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
   10cd4:	2145      	movs	r1, #69	; 0x45
   10cd6:	486f      	ldr	r0, [pc, #444]	; (10e94 <enh_conn_complete+0x1e4>)
}
   10cd8:	b004      	add	sp, #16
   10cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   10cde:	f009 be7f 	b.w	1a9e0 <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10ce2:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ce4:	2100      	movs	r1, #0
   10ce6:	f000 fca1 	bl	1162c <bt_conn_set_state>
		bt_conn_unref(conn);
   10cea:	4628      	mov	r0, r5
}
   10cec:	b004      	add	sp, #16
   10cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10cf2:	f000 bc6f 	b.w	115d4 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10cf6:	2c02      	cmp	r4, #2
   10cf8:	d121      	bne.n	10d3e <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10cfa:	2100      	movs	r1, #0
   10cfc:	2206      	movs	r2, #6
   10cfe:	4608      	mov	r0, r1
   10d00:	f000 fdca 	bl	11898 <bt_conn_lookup_state_le>
	if (!conn) {
   10d04:	4605      	mov	r5, r0
   10d06:	b948      	cbnz	r0, 10d1c <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
   10d08:	2145      	movs	r1, #69	; 0x45
   10d0a:	4863      	ldr	r0, [pc, #396]	; (10e98 <enh_conn_complete+0x1e8>)
   10d0c:	f009 fe68 	bl	1a9e0 <printk>
			bt_le_scan_update(false);
   10d10:	2000      	movs	r0, #0
   10d12:	f7fe fdb3 	bl	f87c <bt_le_scan_update>
}
   10d16:	b004      	add	sp, #16
   10d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   10d1c:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d1e:	2100      	movs	r1, #0
   10d20:	f000 fc84 	bl	1162c <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10d24:	1d28      	adds	r0, r5, #4
   10d26:	f00b f972 	bl	1c00e <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   10d2a:	07c2      	lsls	r2, r0, #31
   10d2c:	d503      	bpl.n	10d36 <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10d2e:	4621      	mov	r1, r4
   10d30:	4628      	mov	r0, r5
   10d32:	f000 fc7b 	bl	1162c <bt_conn_set_state>
	bt_conn_unref(conn);
   10d36:	4628      	mov	r0, r5
   10d38:	f000 fc4c 	bl	115d4 <bt_conn_unref>
   10d3c:	e7e8      	b.n	10d10 <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10d3e:	4622      	mov	r2, r4
   10d40:	2157      	movs	r1, #87	; 0x57
   10d42:	4856      	ldr	r0, [pc, #344]	; (10e9c <enh_conn_complete+0x1ec>)
}
   10d44:	b004      	add	sp, #16
   10d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10d4a:	f009 be49 	b.w	1a9e0 <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10d4e:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10d50:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10d54:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10d56:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10d58:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10d5a:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10d5c:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10d60:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10d62:	d834      	bhi.n	10dce <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10d64:	f00b f956 	bl	1c014 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   10d68:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10d6c:	2206      	movs	r2, #6
   10d6e:	3b02      	subs	r3, #2
   10d70:	f105 0111 	add.w	r1, r5, #17
   10d74:	f10d 0001 	add.w	r0, sp, #1
   10d78:	f88d 3008 	strb.w	r3, [sp, #8]
   10d7c:	f00b f85a 	bl	1be34 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10d80:	2301      	movs	r3, #1
   10d82:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   10d86:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   10d88:	bb40      	cbnz	r0, 10ddc <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10d8a:	2206      	movs	r2, #6
   10d8c:	a902      	add	r1, sp, #8
   10d8e:	f000 fd83 	bl	11898 <bt_conn_lookup_state_le>
   10d92:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10d94:	78eb      	ldrb	r3, [r5, #3]
   10d96:	2b01      	cmp	r3, #1
   10d98:	d104      	bne.n	10da4 <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d9a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10d9e:	483c      	ldr	r0, [pc, #240]	; (10e90 <enh_conn_complete+0x1e0>)
   10da0:	f00b f949 	bl	1c036 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10da4:	78eb      	ldrb	r3, [r5, #3]
   10da6:	b923      	cbnz	r3, 10db2 <enh_conn_complete+0x102>
   10da8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10dac:	483c      	ldr	r0, [pc, #240]	; (10ea0 <enh_conn_complete+0x1f0>)
   10dae:	f00b f942 	bl	1c036 <atomic_and>
	if (!conn) {
   10db2:	b9dc      	cbnz	r4, 10dec <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
   10db4:	4630      	mov	r0, r6
   10db6:	f7fd fc5d 	bl	e674 <bt_addr_le_str_real>
   10dba:	2145      	movs	r1, #69	; 0x45
   10dbc:	4602      	mov	r2, r0
   10dbe:	4839      	ldr	r0, [pc, #228]	; (10ea4 <enh_conn_complete+0x1f4>)
   10dc0:	f009 fe0e 	bl	1a9e0 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10dc4:	211f      	movs	r1, #31
   10dc6:	4640      	mov	r0, r8
   10dc8:	f00b f97c 	bl	1c0c4 <bt_hci_disconnect>
		return;
   10dcc:	e7a3      	b.n	10d16 <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
   10dce:	f00b f921 	bl	1c014 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10dd2:	4631      	mov	r1, r6
   10dd4:	4668      	mov	r0, sp
   10dd6:	f00b f91d 	bl	1c014 <bt_addr_le_copy>
   10dda:	e7d4      	b.n	10d86 <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10ddc:	2801      	cmp	r0, #1
   10dde:	d103      	bne.n	10de8 <enh_conn_complete+0x138>
   10de0:	a802      	add	r0, sp, #8
   10de2:	f7fd ff1b 	bl	ec1c <find_pending_connect.part.0>
   10de6:	e7d4      	b.n	10d92 <enh_conn_complete+0xe2>
	return NULL;
   10de8:	2400      	movs	r4, #0
   10dea:	e7d3      	b.n	10d94 <enh_conn_complete+0xe4>
	conn->handle = handle;
   10dec:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10dee:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10df0:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10df4:	f00b f90e 	bl	1c014 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10df8:	7e2a      	ldrb	r2, [r5, #24]
   10dfa:	7deb      	ldrb	r3, [r5, #23]
   10dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10e00:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10e04:	7eaa      	ldrb	r2, [r5, #26]
   10e06:	7e6b      	ldrb	r3, [r5, #25]
   10e08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10e0c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10e10:	7f2a      	ldrb	r2, [r5, #28]
   10e12:	7eeb      	ldrb	r3, [r5, #27]
   10e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10e18:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10e1a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10e1e:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10e20:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10e22:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10e24:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10e26:	d113      	bne.n	10e50 <enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10e28:	4669      	mov	r1, sp
   10e2a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10e2e:	f00b f8f1 	bl	1c014 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10e32:	7a21      	ldrb	r1, [r4, #8]
   10e34:	4d1c      	ldr	r5, [pc, #112]	; (10ea8 <enh_conn_complete+0x1f8>)
   10e36:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10e3a:	4429      	add	r1, r5
   10e3c:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10e40:	f00b f8e8 	bl	1c014 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10e44:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10e48:	065b      	lsls	r3, r3, #25
   10e4a:	d501      	bpl.n	10e50 <enh_conn_complete+0x1a0>
			bt_le_adv_resume();
   10e4c:	f7ff fefa 	bl	10c44 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10e50:	78e3      	ldrb	r3, [r4, #3]
   10e52:	b96b      	cbnz	r3, 10e70 <enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10e54:	4669      	mov	r1, sp
   10e56:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10e5a:	f00b f8db 	bl	1c014 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10e5e:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10e60:	4b11      	ldr	r3, [pc, #68]	; (10ea8 <enh_conn_complete+0x1f8>)
					&bt_dev.id_addr[conn->id]);
   10e62:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10e66:	4419      	add	r1, r3
   10e68:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10e6c:	f00b f8d2 	bl	1c014 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10e70:	2107      	movs	r1, #7
   10e72:	4620      	mov	r0, r4
   10e74:	f000 fbda 	bl	1162c <bt_conn_set_state>
	conn_auto_initiate(conn);
   10e78:	4620      	mov	r0, r4
   10e7a:	f7fe ff1f 	bl	fcbc <conn_auto_initiate>
	bt_conn_unref(conn);
   10e7e:	4620      	mov	r0, r4
   10e80:	f000 fba8 	bl	115d4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10e84:	78e3      	ldrb	r3, [r4, #3]
   10e86:	2b00      	cmp	r3, #0
   10e88:	f47f af45 	bne.w	10d16 <enh_conn_complete+0x66>
   10e8c:	e740      	b.n	10d10 <enh_conn_complete+0x60>
   10e8e:	bf00      	nop
   10e90:	20008028 	.word	0x20008028
   10e94:	00021531 	.word	0x00021531
   10e98:	00021552 	.word	0x00021552
   10e9c:	00021574 	.word	0x00021574
   10ea0:	20008094 	.word	0x20008094
   10ea4:	00021592 	.word	0x00021592
   10ea8:	20008000 	.word	0x20008000

00010eac <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10eac:	b570      	push	{r4, r5, r6, lr}
   10eae:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10eb0:	482e      	ldr	r0, [pc, #184]	; (10f6c <bt_le_scan_start+0xc0>)
   10eb2:	f00b f8ac 	bl	1c00e <atomic_get>
   10eb6:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10eb8:	0781      	lsls	r1, r0, #30
   10eba:	d554      	bpl.n	10f66 <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10ebc:	782a      	ldrb	r2, [r5, #0]
   10ebe:	2a01      	cmp	r2, #1
   10ec0:	d903      	bls.n	10eca <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10ec2:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10ec6:	4620      	mov	r0, r4
   10ec8:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10eca:	686b      	ldr	r3, [r5, #4]
   10ecc:	f033 030f 	bics.w	r3, r3, #15
   10ed0:	d1f7      	bne.n	10ec2 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10ed2:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10ed6:	8928      	ldrh	r0, [r5, #8]
   10ed8:	1f03      	subs	r3, r0, #4
   10eda:	b29b      	uxth	r3, r3
   10edc:	42a3      	cmp	r3, r4
   10ede:	d8f0      	bhi.n	10ec2 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10ee0:	8969      	ldrh	r1, [r5, #10]
   10ee2:	1f0b      	subs	r3, r1, #4
   10ee4:	b29b      	uxth	r3, r3
   10ee6:	42a3      	cmp	r3, r4
   10ee8:	d8eb      	bhi.n	10ec2 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10eea:	4288      	cmp	r0, r1
   10eec:	d3e9      	bcc.n	10ec2 <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10eee:	b94a      	cbnz	r2, 10f04 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10ef0:	2140      	movs	r1, #64	; 0x40
   10ef2:	481e      	ldr	r0, [pc, #120]	; (10f6c <bt_le_scan_start+0xc0>)
   10ef4:	f00b f891 	bl	1c01a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10ef8:	ea10 0301 	ands.w	r3, r0, r1
   10efc:	d007      	beq.n	10f0e <bt_le_scan_start+0x62>
		return -EALREADY;
   10efe:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10f02:	e7e0      	b.n	10ec6 <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10f04:	f7fe fc2e 	bl	f764 <bt_le_scan_random_addr_check>
   10f08:	2800      	cmp	r0, #0
   10f0a:	d1f1      	bne.n	10ef0 <bt_le_scan_start+0x44>
   10f0c:	e7d9      	b.n	10ec2 <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10f0e:	4817      	ldr	r0, [pc, #92]	; (10f6c <bt_le_scan_start+0xc0>)
   10f10:	f00b f87d 	bl	1c00e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10f14:	0682      	lsls	r2, r0, #26
   10f16:	d50a      	bpl.n	10f2e <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   10f18:	4618      	mov	r0, r3
   10f1a:	f7fe fa01 	bl	f320 <set_le_scan_enable_legacy>
		if (err) {
   10f1e:	4604      	mov	r4, r0
   10f20:	b128      	cbz	r0, 10f2e <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10f22:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10f26:	4811      	ldr	r0, [pc, #68]	; (10f6c <bt_le_scan_start+0xc0>)
   10f28:	f00b f885 	bl	1c036 <atomic_and>
		return err;
   10f2c:	e7cb      	b.n	10ec6 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10f2e:	686a      	ldr	r2, [r5, #4]
   10f30:	2108      	movs	r1, #8
   10f32:	480e      	ldr	r0, [pc, #56]	; (10f6c <bt_le_scan_start+0xc0>)
   10f34:	f002 0201 	and.w	r2, r2, #1
   10f38:	f00b f888 	bl	1c04c <atomic_set_bit_to>
		if (param->timeout) {
   10f3c:	89ab      	ldrh	r3, [r5, #12]
   10f3e:	b13b      	cbz	r3, 10f50 <bt_le_scan_start+0xa4>
   10f40:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10f44:	4809      	ldr	r0, [pc, #36]	; (10f6c <bt_le_scan_start+0xc0>)
   10f46:	f00b f876 	bl	1c036 <atomic_and>
			return -ENOTSUP;
   10f4a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10f4e:	e7ba      	b.n	10ec6 <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10f50:	896a      	ldrh	r2, [r5, #10]
   10f52:	8929      	ldrh	r1, [r5, #8]
   10f54:	7828      	ldrb	r0, [r5, #0]
   10f56:	f7fe fba7 	bl	f6a8 <start_le_scan_legacy>
	if (err) {
   10f5a:	4604      	mov	r4, r0
   10f5c:	2800      	cmp	r0, #0
   10f5e:	d1e0      	bne.n	10f22 <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   10f60:	4b03      	ldr	r3, [pc, #12]	; (10f70 <bt_le_scan_start+0xc4>)
   10f62:	601e      	str	r6, [r3, #0]
	return 0;
   10f64:	e7af      	b.n	10ec6 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   10f66:	f06f 040a 	mvn.w	r4, #10
   10f6a:	e7ac      	b.n	10ec6 <bt_le_scan_start+0x1a>
   10f6c:	20008094 	.word	0x20008094
   10f70:	20009f0c 	.word	0x20009f0c

00010f74 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   10f74:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10f76:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10f7a:	4807      	ldr	r0, [pc, #28]	; (10f98 <bt_le_scan_stop+0x24>)
   10f7c:	f00b f85b 	bl	1c036 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10f80:	0643      	lsls	r3, r0, #25
   10f82:	d506      	bpl.n	10f92 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   10f84:	2000      	movs	r0, #0
   10f86:	4b05      	ldr	r3, [pc, #20]	; (10f9c <bt_le_scan_stop+0x28>)
   10f88:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   10f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10f8e:	f7fe bc75 	b.w	f87c <bt_le_scan_update>
}
   10f92:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10f96:	bd08      	pop	{r3, pc}
   10f98:	20008094 	.word	0x20008094
   10f9c:	20009f0c 	.word	0x20009f0c

00010fa0 <bt_le_scan_cb_register>:
	parent->next = child;
   10fa0:	2300      	movs	r3, #0
   10fa2:	6083      	str	r3, [r0, #8]
	return list->tail;
   10fa4:	4b05      	ldr	r3, [pc, #20]	; (10fbc <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   10fa6:	f100 0208 	add.w	r2, r0, #8
   10faa:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10fac:	b911      	cbnz	r1, 10fb4 <bt_le_scan_cb_register+0x14>
	list->head = node;
   10fae:	e9c3 2200 	strd	r2, r2, [r3]
}
   10fb2:	4770      	bx	lr
	parent->next = child;
   10fb4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10fb6:	605a      	str	r2, [r3, #4]
}
   10fb8:	4770      	bx	lr
   10fba:	bf00      	nop
   10fbc:	20009f04 	.word	0x20009f04

00010fc0 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fc2:	b08d      	sub	sp, #52	; 0x34
   10fc4:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10fc6:	2700      	movs	r7, #0
   10fc8:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10fca:	2100      	movs	r1, #0
   10fcc:	f242 0018 	movw	r0, #8216	; 0x2018
   10fd0:	aa02      	add	r2, sp, #8
   10fd2:	f7fe f8f5 	bl	f1c0 <bt_hci_cmd_send_sync>
		if (ret) {
   10fd6:	4604      	mov	r4, r0
   10fd8:	bb58      	cbnz	r0, 11032 <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   10fda:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10fdc:	2208      	movs	r2, #8
   10fde:	6899      	ldr	r1, [r3, #8]
   10fe0:	4630      	mov	r0, r6
   10fe2:	3101      	adds	r1, #1
   10fe4:	f00a ff26 	bl	1be34 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10fe8:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   10fea:	9802      	ldr	r0, [sp, #8]
   10fec:	f004 fc82 	bl	158f4 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10ff0:	2f04      	cmp	r7, #4
   10ff2:	f106 0608 	add.w	r6, r6, #8
   10ff6:	d1e8      	bne.n	10fca <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   10ff8:	f00d f87c 	bl	1e0f4 <z_impl_k_uptime_ticks>
   10ffc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   11000:	fba0 3206 	umull	r3, r2, r0, r6
   11004:	fb06 2101 	mla	r1, r6, r1, r2
   11008:	0bdb      	lsrs	r3, r3, #15
   1100a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1100e:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   11010:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   11014:	2308      	movs	r3, #8
   11016:	2220      	movs	r2, #32
   11018:	9300      	str	r3, [sp, #0]
   1101a:	4629      	mov	r1, r5
   1101c:	4806      	ldr	r0, [pc, #24]	; (11038 <prng_reseed.constprop.0+0x78>)
   1101e:	446b      	add	r3, sp
   11020:	f00a fdbe 	bl	1bba0 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   11024:	b928      	cbnz	r0, 11032 <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   11026:	2145      	movs	r1, #69	; 0x45
   11028:	4804      	ldr	r0, [pc, #16]	; (1103c <prng_reseed.constprop.0+0x7c>)
   1102a:	f009 fcd9 	bl	1a9e0 <printk>
		return -EIO;
   1102e:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   11032:	4620      	mov	r0, r4
   11034:	b00d      	add	sp, #52	; 0x34
   11036:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11038:	20008a90 	.word	0x20008a90
   1103c:	000215c4 	.word	0x000215c4

00011040 <prng_init>:

int prng_init(void)
{
   11040:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11042:	4b13      	ldr	r3, [pc, #76]	; (11090 <prng_init+0x50>)
   11044:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   11048:	2b00      	cmp	r3, #0
   1104a:	da1d      	bge.n	11088 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1104c:	2100      	movs	r1, #0
   1104e:	f242 0018 	movw	r0, #8216	; 0x2018
   11052:	aa01      	add	r2, sp, #4
   11054:	f7fe f8b4 	bl	f1c0 <bt_hci_cmd_send_sync>
	if (ret) {
   11058:	b988      	cbnz	r0, 1107e <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   1105a:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   1105c:	2208      	movs	r2, #8
   1105e:	6899      	ldr	r1, [r3, #8]
   11060:	480c      	ldr	r0, [pc, #48]	; (11094 <prng_init+0x54>)
   11062:	3101      	adds	r1, #1
   11064:	f00a fd7c 	bl	1bb60 <tc_hmac_prng_init>
   11068:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   1106a:	9801      	ldr	r0, [sp, #4]
   1106c:	f004 fc42 	bl	158f4 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   11070:	b93c      	cbnz	r4, 11082 <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   11072:	4809      	ldr	r0, [pc, #36]	; (11098 <prng_init+0x58>)
   11074:	2145      	movs	r1, #69	; 0x45
   11076:	f009 fcb3 	bl	1a9e0 <printk>
		return -EIO;
   1107a:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1107e:	b002      	add	sp, #8
   11080:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   11082:	f7ff ff9d 	bl	10fc0 <prng_reseed.constprop.0>
   11086:	e7fa      	b.n	1107e <prng_init+0x3e>
		return -ENOTSUP;
   11088:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1108c:	e7f7      	b.n	1107e <prng_init+0x3e>
   1108e:	bf00      	nop
   11090:	20008000 	.word	0x20008000
   11094:	20008a90 	.word	0x20008a90
   11098:	000215e0 	.word	0x000215e0

0001109c <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   1109c:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1109e:	4a0a      	ldr	r2, [pc, #40]	; (110c8 <bt_rand+0x2c>)
{
   110a0:	4604      	mov	r4, r0
   110a2:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   110a4:	f00a fd95 	bl	1bbd2 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   110a8:	1c43      	adds	r3, r0, #1
   110aa:	d107      	bne.n	110bc <bt_rand+0x20>
		ret = prng_reseed(&prng);
   110ac:	f7ff ff88 	bl	10fc0 <prng_reseed.constprop.0>
		if (ret) {
   110b0:	b948      	cbnz	r0, 110c6 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   110b2:	4629      	mov	r1, r5
   110b4:	4620      	mov	r0, r4
   110b6:	4a04      	ldr	r2, [pc, #16]	; (110c8 <bt_rand+0x2c>)
   110b8:	f00a fd8b 	bl	1bbd2 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   110bc:	2801      	cmp	r0, #1
   110be:	bf14      	ite	ne
   110c0:	f06f 0004 	mvnne.w	r0, #4
   110c4:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   110c6:	bd38      	pop	{r3, r4, r5, pc}
   110c8:	20008a90 	.word	0x20008a90

000110cc <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   110cc:	2300      	movs	r3, #0
{
   110ce:	4601      	mov	r1, r0
	tx->user_data = NULL;
   110d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   110d4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   110d6:	4801      	ldr	r0, [pc, #4]	; (110dc <tx_free+0x10>)
   110d8:	f00c bf38 	b.w	1df4c <k_queue_append>
   110dc:	20008564 	.word	0x20008564

000110e0 <notify_connected>:
{
   110e0:	b538      	push	{r3, r4, r5, lr}
   110e2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   110e4:	4b08      	ldr	r3, [pc, #32]	; (11108 <notify_connected+0x28>)
   110e6:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   110e8:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   110ea:	b92d      	cbnz	r5, 110f8 <notify_connected+0x18>
	if (!conn->err) {
   110ec:	b951      	cbnz	r1, 11104 <notify_connected+0x24>
		bt_gatt_connected(conn);
   110ee:	4620      	mov	r0, r4
}
   110f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   110f4:	f004 b8f8 	b.w	152e8 <bt_gatt_connected>
		if (cb->connected) {
   110f8:	682b      	ldr	r3, [r5, #0]
   110fa:	b10b      	cbz	r3, 11100 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   110fc:	4620      	mov	r0, r4
   110fe:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11100:	692d      	ldr	r5, [r5, #16]
   11102:	e7f1      	b.n	110e8 <notify_connected+0x8>
}
   11104:	bd38      	pop	{r3, r4, r5, pc}
   11106:	bf00      	nop
   11108:	20009f10 	.word	0x20009f10

0001110c <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   1110c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11110:	4604      	mov	r4, r0
   11112:	460e      	mov	r6, r1
   11114:	4691      	mov	r9, r2
   11116:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   11118:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   1111a:	f04f 33ff 	mov.w	r3, #4294967295
   1111e:	f04f 32ff 	mov.w	r2, #4294967295
   11122:	4847      	ldr	r0, [pc, #284]	; (11240 <send_frag+0x134>)
   11124:	f008 fac0 	bl	196a8 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   11128:	7aa3      	ldrb	r3, [r4, #10]
   1112a:	2b07      	cmp	r3, #7
   1112c:	d14b      	bne.n	111c6 <send_frag+0xba>
	__asm__ volatile(
   1112e:	f04f 0320 	mov.w	r3, #32
   11132:	f3ef 8211 	mrs	r2, BASEPRI
   11136:	f383 8811 	msr	BASEPRI, r3
   1113a:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   1113e:	69a3      	ldr	r3, [r4, #24]
   11140:	2d00      	cmp	r5, #0
   11142:	d052      	beq.n	111ea <send_frag+0xde>
	parent->next = child;
   11144:	2100      	movs	r1, #0
   11146:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   11148:	2b00      	cmp	r3, #0
   1114a:	d14b      	bne.n	111e4 <send_frag+0xd8>
	list->head = node;
   1114c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   11150:	f382 8811 	msr	BASEPRI, r2
   11154:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   11158:	2104      	movs	r1, #4
   1115a:	f106 0008 	add.w	r0, r6, #8
   1115e:	f004 fc87 	bl	15a70 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   11162:	8823      	ldrh	r3, [r4, #0]
   11164:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   11168:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1116c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1116e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   11172:	3b04      	subs	r3, #4
   11174:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11176:	2302      	movs	r3, #2
	return bt_send(buf);
   11178:	4630      	mov	r0, r6
   1117a:	7533      	strb	r3, [r6, #20]
   1117c:	f7fe fd14 	bl	fba8 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   11180:	4602      	mov	r2, r0
   11182:	2800      	cmp	r0, #0
   11184:	d059      	beq.n	1123a <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   11186:	2145      	movs	r1, #69	; 0x45
   11188:	482e      	ldr	r0, [pc, #184]	; (11244 <send_frag+0x138>)
   1118a:	f009 fc29 	bl	1a9e0 <printk>
	__asm__ volatile(
   1118e:	f04f 0320 	mov.w	r3, #32
   11192:	f3ef 8911 	mrs	r9, BASEPRI
   11196:	f383 8811 	msr	BASEPRI, r3
   1119a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   1119e:	2d00      	cmp	r5, #0
   111a0:	d037      	beq.n	11212 <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   111a2:	2200      	movs	r2, #0
	return list->head;
   111a4:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   111a6:	b153      	cbz	r3, 111be <send_frag+0xb2>
   111a8:	429d      	cmp	r5, r3
   111aa:	d12f      	bne.n	1120c <send_frag+0x100>
	return node->next;
   111ac:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   111ae:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   111b0:	bb3a      	cbnz	r2, 11202 <send_frag+0xf6>
   111b2:	42a9      	cmp	r1, r5
	list->head = node;
   111b4:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   111b6:	d100      	bne.n	111ba <send_frag+0xae>
	list->tail = node;
   111b8:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   111ba:	2300      	movs	r3, #0
   111bc:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   111be:	f389 8811 	msr	BASEPRI, r9
   111c2:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   111c6:	481e      	ldr	r0, [pc, #120]	; (11240 <send_frag+0x134>)
   111c8:	f008 fa32 	bl	19630 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   111cc:	b115      	cbz	r5, 111d4 <send_frag+0xc8>
		tx_free(tx);
   111ce:	4628      	mov	r0, r5
   111d0:	f7ff ff7c 	bl	110cc <tx_free>
	}

	if (always_consume) {
   111d4:	b11f      	cbz	r7, 111de <send_frag+0xd2>
		net_buf_unref(buf);
   111d6:	4630      	mov	r0, r6
   111d8:	f004 fb8c 	bl	158f4 <net_buf_unref>
	}
	return false;
   111dc:	2700      	movs	r7, #0
}
   111de:	4638      	mov	r0, r7
   111e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   111e4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   111e6:	61a5      	str	r5, [r4, #24]
}
   111e8:	e7b2      	b.n	11150 <send_frag+0x44>
		if (tail_tx) {
   111ea:	b133      	cbz	r3, 111fa <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   111ec:	f103 080c 	add.w	r8, r3, #12
   111f0:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   111f2:	3301      	adds	r3, #1
   111f4:	f8c8 3000 	str.w	r3, [r8]
   111f8:	e7aa      	b.n	11150 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   111fa:	69e3      	ldr	r3, [r4, #28]
   111fc:	f104 081c 	add.w	r8, r4, #28
   11200:	e7f7      	b.n	111f2 <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   11202:	42a9      	cmp	r1, r5
	parent->next = child;
   11204:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11206:	bf08      	it	eq
   11208:	61a2      	streq	r2, [r4, #24]
}
   1120a:	e7d6      	b.n	111ba <send_frag+0xae>
	return node->next;
   1120c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1120e:	681b      	ldr	r3, [r3, #0]
   11210:	e7c9      	b.n	111a6 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   11212:	f8d8 3000 	ldr.w	r3, [r8]
   11216:	b953      	cbnz	r3, 1122e <send_frag+0x122>
   11218:	490b      	ldr	r1, [pc, #44]	; (11248 <send_frag+0x13c>)
   1121a:	480c      	ldr	r0, [pc, #48]	; (1124c <send_frag+0x140>)
   1121c:	f240 4292 	movw	r2, #1170	; 0x492
   11220:	f009 fbde 	bl	1a9e0 <printk>
   11224:	f240 4192 	movw	r1, #1170	; 0x492
   11228:	4807      	ldr	r0, [pc, #28]	; (11248 <send_frag+0x13c>)
   1122a:	f009 fe7f 	bl	1af2c <assert_post_action>
			(*pending_no_cb)--;
   1122e:	f8d8 3000 	ldr.w	r3, [r8]
   11232:	3b01      	subs	r3, #1
   11234:	f8c8 3000 	str.w	r3, [r8]
   11238:	e7c1      	b.n	111be <send_frag+0xb2>
	return true;
   1123a:	2701      	movs	r7, #1
   1123c:	e7cf      	b.n	111de <send_frag+0xd2>
   1123e:	bf00      	nop
   11240:	200080c8 	.word	0x200080c8
   11244:	0002116d 	.word	0x0002116d
   11248:	00021609 	.word	0x00021609
   1124c:	0001faab 	.word	0x0001faab

00011250 <bt_conn_get_pkts>:
}
   11250:	4800      	ldr	r0, [pc, #0]	; (11254 <bt_conn_get_pkts+0x4>)
   11252:	4770      	bx	lr
   11254:	200080c8 	.word	0x200080c8

00011258 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11258:	1d03      	adds	r3, r0, #4
{
   1125a:	b570      	push	{r4, r5, r6, lr}
   1125c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1125e:	4618      	mov	r0, r3
   11260:	f00a ffed 	bl	1c23e <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11264:	0582      	lsls	r2, r0, #22
   11266:	d515      	bpl.n	11294 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   11268:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1126c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   11270:	4291      	cmp	r1, r2
   11272:	d80f      	bhi.n	11294 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   11274:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   11278:	4291      	cmp	r1, r2
   1127a:	d30b      	bcc.n	11294 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   1127c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   11280:	4291      	cmp	r1, r2
   11282:	d107      	bne.n	11294 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11284:	e8d3 2fef 	ldaex	r2, [r3]
   11288:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   1128c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11290:	2900      	cmp	r1, #0
   11292:	d1f7      	bne.n	11284 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   11294:	4b07      	ldr	r3, [pc, #28]	; (112b4 <notify_le_param_updated+0x5c>)
   11296:	681d      	ldr	r5, [r3, #0]
   11298:	b905      	cbnz	r5, 1129c <notify_le_param_updated+0x44>
}
   1129a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1129c:	68ee      	ldr	r6, [r5, #12]
   1129e:	b13e      	cbz	r6, 112b0 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   112a0:	4620      	mov	r0, r4
   112a2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   112a6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   112aa:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   112ae:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   112b0:	692d      	ldr	r5, [r5, #16]
   112b2:	e7f1      	b.n	11298 <notify_le_param_updated+0x40>
   112b4:	20009f10 	.word	0x20009f10

000112b8 <le_param_req>:
{
   112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112ba:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   112bc:	4608      	mov	r0, r1
{
   112be:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   112c0:	f00a ff1b 	bl	1c0fa <bt_le_conn_params_valid>
   112c4:	4604      	mov	r4, r0
   112c6:	b910      	cbnz	r0, 112ce <le_param_req+0x16>
		return false;
   112c8:	2400      	movs	r4, #0
}
   112ca:	4620      	mov	r0, r4
   112cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   112ce:	4b09      	ldr	r3, [pc, #36]	; (112f4 <le_param_req+0x3c>)
   112d0:	681e      	ldr	r6, [r3, #0]
   112d2:	2e00      	cmp	r6, #0
   112d4:	d0f9      	beq.n	112ca <le_param_req+0x12>
		if (!cb->le_param_req) {
   112d6:	68b3      	ldr	r3, [r6, #8]
   112d8:	b90b      	cbnz	r3, 112de <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   112da:	6936      	ldr	r6, [r6, #16]
   112dc:	e7f9      	b.n	112d2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   112de:	4629      	mov	r1, r5
   112e0:	4638      	mov	r0, r7
   112e2:	4798      	blx	r3
   112e4:	2800      	cmp	r0, #0
   112e6:	d0ef      	beq.n	112c8 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   112e8:	4628      	mov	r0, r5
   112ea:	f00a ff06 	bl	1c0fa <bt_le_conn_params_valid>
   112ee:	2800      	cmp	r0, #0
   112f0:	d1f3      	bne.n	112da <le_param_req+0x22>
   112f2:	e7e9      	b.n	112c8 <le_param_req+0x10>
   112f4:	20009f10 	.word	0x20009f10

000112f8 <bt_conn_cb_register>:
	cb->_next = callback_list;
   112f8:	4b02      	ldr	r3, [pc, #8]	; (11304 <bt_conn_cb_register+0xc>)
   112fa:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   112fc:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   112fe:	6102      	str	r2, [r0, #16]
}
   11300:	4770      	bx	lr
   11302:	bf00      	nop
   11304:	20009f10 	.word	0x20009f10

00011308 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   11308:	b570      	push	{r4, r5, r6, lr}
   1130a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1130c:	f100 0634 	add.w	r6, r0, #52	; 0x34
   11310:	2200      	movs	r2, #0
   11312:	2300      	movs	r3, #0
   11314:	4630      	mov	r0, r6
   11316:	f004 fa6b 	bl	157f0 <net_buf_get>
   1131a:	4605      	mov	r5, r0
   1131c:	bb28      	cbnz	r0, 1136a <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1131e:	6963      	ldr	r3, [r4, #20]
   11320:	b153      	cbz	r3, 11338 <conn_cleanup+0x30>
   11322:	4916      	ldr	r1, [pc, #88]	; (1137c <conn_cleanup+0x74>)
   11324:	4816      	ldr	r0, [pc, #88]	; (11380 <conn_cleanup+0x78>)
   11326:	f240 520c 	movw	r2, #1292	; 0x50c
   1132a:	f009 fb59 	bl	1a9e0 <printk>
   1132e:	f240 510c 	movw	r1, #1292	; 0x50c
   11332:	4812      	ldr	r0, [pc, #72]	; (1137c <conn_cleanup+0x74>)
   11334:	f009 fdfa 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   11338:	69e3      	ldr	r3, [r4, #28]
   1133a:	b153      	cbz	r3, 11352 <conn_cleanup+0x4a>
   1133c:	490f      	ldr	r1, [pc, #60]	; (1137c <conn_cleanup+0x74>)
   1133e:	4810      	ldr	r0, [pc, #64]	; (11380 <conn_cleanup+0x78>)
   11340:	f240 520d 	movw	r2, #1293	; 0x50d
   11344:	f009 fb4c 	bl	1a9e0 <printk>
   11348:	f240 510d 	movw	r1, #1293	; 0x50d
   1134c:	480b      	ldr	r0, [pc, #44]	; (1137c <conn_cleanup+0x74>)
   1134e:	f009 fded 	bl	1af2c <assert_post_action>

	bt_conn_reset_rx_state(conn);
   11352:	4620      	mov	r0, r4
   11354:	f00a ffc0 	bl	1c2d8 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11358:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1135c:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   1135e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11362:	2300      	movs	r3, #0
   11364:	4807      	ldr	r0, [pc, #28]	; (11384 <conn_cleanup+0x7c>)
   11366:	f008 bbc5 	b.w	19af4 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   1136a:	6968      	ldr	r0, [r5, #20]
   1136c:	b108      	cbz	r0, 11372 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   1136e:	f7ff fead 	bl	110cc <tx_free>
		net_buf_unref(buf);
   11372:	4628      	mov	r0, r5
   11374:	f004 fabe 	bl	158f4 <net_buf_unref>
   11378:	e7ca      	b.n	11310 <conn_cleanup+0x8>
   1137a:	bf00      	nop
   1137c:	00021609 	.word	0x00021609
   11380:	0001faab 	.word	0x0001faab
   11384:	200098e0 	.word	0x200098e0

00011388 <bt_conn_recv>:
{
   11388:	b570      	push	{r4, r5, r6, lr}
   1138a:	4616      	mov	r6, r2
   1138c:	4604      	mov	r4, r0
   1138e:	460d      	mov	r5, r1
	tx_notify(conn);
   11390:	f00a ff58 	bl	1c244 <tx_notify>
	switch (flags) {
   11394:	2e01      	cmp	r6, #1
   11396:	d01f      	beq.n	113d8 <bt_conn_recv+0x50>
   11398:	2e02      	cmp	r6, #2
   1139a:	d140      	bne.n	1141e <bt_conn_recv+0x96>
		if (conn->rx) {
   1139c:	6923      	ldr	r3, [r4, #16]
   1139e:	b133      	cbz	r3, 113ae <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   113a0:	4826      	ldr	r0, [pc, #152]	; (1143c <bt_conn_recv+0xb4>)
   113a2:	2145      	movs	r1, #69	; 0x45
   113a4:	f009 fb1c 	bl	1a9e0 <printk>
			bt_conn_reset_rx_state(conn);
   113a8:	4620      	mov	r0, r4
   113aa:	f00a ff95 	bl	1c2d8 <bt_conn_reset_rx_state>
		conn->rx = buf;
   113ae:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   113b0:	6921      	ldr	r1, [r4, #16]
   113b2:	898a      	ldrh	r2, [r1, #12]
   113b4:	2a01      	cmp	r2, #1
   113b6:	d93f      	bls.n	11438 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   113b8:	688b      	ldr	r3, [r1, #8]
   113ba:	881b      	ldrh	r3, [r3, #0]
   113bc:	3304      	adds	r3, #4
   113be:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   113c0:	429a      	cmp	r2, r3
   113c2:	d339      	bcc.n	11438 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   113c4:	d931      	bls.n	1142a <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   113c6:	481e      	ldr	r0, [pc, #120]	; (11440 <bt_conn_recv+0xb8>)
   113c8:	2145      	movs	r1, #69	; 0x45
   113ca:	f009 fb09 	bl	1a9e0 <printk>
		bt_conn_reset_rx_state(conn);
   113ce:	4620      	mov	r0, r4
}
   113d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   113d4:	f00a bf80 	b.w	1c2d8 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   113d8:	6920      	ldr	r0, [r4, #16]
   113da:	b938      	cbnz	r0, 113ec <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   113dc:	2145      	movs	r1, #69	; 0x45
   113de:	4819      	ldr	r0, [pc, #100]	; (11444 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   113e0:	f009 fafe 	bl	1a9e0 <printk>
			bt_conn_reset_rx_state(conn);
   113e4:	4620      	mov	r0, r4
   113e6:	f00a ff77 	bl	1c2d8 <bt_conn_reset_rx_state>
   113ea:	e001      	b.n	113f0 <bt_conn_recv+0x68>
		if (!buf->len) {
   113ec:	89ae      	ldrh	r6, [r5, #12]
   113ee:	b926      	cbnz	r6, 113fa <bt_conn_recv+0x72>
			net_buf_unref(buf);
   113f0:	4628      	mov	r0, r5
}
   113f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   113f6:	f004 ba7d 	b.w	158f4 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   113fa:	3008      	adds	r0, #8
   113fc:	f00c f851 	bl	1d4a2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   11400:	4286      	cmp	r6, r0
   11402:	d902      	bls.n	1140a <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   11404:	2145      	movs	r1, #69	; 0x45
   11406:	4810      	ldr	r0, [pc, #64]	; (11448 <bt_conn_recv+0xc0>)
   11408:	e7ea      	b.n	113e0 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1140a:	6920      	ldr	r0, [r4, #16]
   1140c:	89aa      	ldrh	r2, [r5, #12]
   1140e:	68a9      	ldr	r1, [r5, #8]
   11410:	3008      	adds	r0, #8
   11412:	f00c f84e 	bl	1d4b2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   11416:	4628      	mov	r0, r5
   11418:	f004 fa6c 	bl	158f4 <net_buf_unref>
		break;
   1141c:	e7c8      	b.n	113b0 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1141e:	4632      	mov	r2, r6
   11420:	2145      	movs	r1, #69	; 0x45
   11422:	480a      	ldr	r0, [pc, #40]	; (1144c <bt_conn_recv+0xc4>)
   11424:	f009 fadc 	bl	1a9e0 <printk>
		bt_conn_reset_rx_state(conn);
   11428:	e7dc      	b.n	113e4 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   1142a:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   1142c:	4620      	mov	r0, r4
	conn->rx = NULL;
   1142e:	6123      	str	r3, [r4, #16]
}
   11430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   11434:	f000 bed0 	b.w	121d8 <bt_l2cap_recv>
}
   11438:	bd70      	pop	{r4, r5, r6, pc}
   1143a:	bf00      	nop
   1143c:	00021639 	.word	0x00021639
   11440:	000216cd 	.word	0x000216cd
   11444:	0002165b 	.word	0x0002165b
   11448:	0002167e 	.word	0x0002167e
   1144c:	000216aa 	.word	0x000216aa

00011450 <bt_conn_send_cb>:
{
   11450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11454:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   11456:	7a83      	ldrb	r3, [r0, #10]
{
   11458:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1145a:	2b07      	cmp	r3, #7
{
   1145c:	460d      	mov	r5, r1
   1145e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   11460:	d009      	beq.n	11476 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   11462:	4821      	ldr	r0, [pc, #132]	; (114e8 <bt_conn_send_cb+0x98>)
   11464:	2145      	movs	r1, #69	; 0x45
   11466:	f009 fabb 	bl	1a9e0 <printk>
		net_buf_unref(buf);
   1146a:	4628      	mov	r0, r5
   1146c:	f004 fa42 	bl	158f4 <net_buf_unref>
			return -ENOTCONN;
   11470:	f06f 0038 	mvn.w	r0, #56	; 0x38
   11474:	e01a      	b.n	114ac <bt_conn_send_cb+0x5c>
	if (cb) {
   11476:	2a00      	cmp	r2, #0
   11478:	d034      	beq.n	114e4 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   1147a:	f008 f8d3 	bl	19624 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1147e:	4b1b      	ldr	r3, [pc, #108]	; (114ec <bt_conn_send_cb+0x9c>)
   11480:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   11482:	481b      	ldr	r0, [pc, #108]	; (114f0 <bt_conn_send_cb+0xa0>)
   11484:	bf07      	ittee	eq
   11486:	2200      	moveq	r2, #0
   11488:	2300      	moveq	r3, #0
   1148a:	f04f 32ff 	movne.w	r2, #4294967295
   1148e:	f04f 33ff 	movne.w	r3, #4294967295
   11492:	f007 f861 	bl	18558 <z_impl_k_queue_get>
   11496:	4604      	mov	r4, r0
		if (!tx) {
   11498:	b950      	cbnz	r0, 114b0 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   1149a:	2145      	movs	r1, #69	; 0x45
   1149c:	4815      	ldr	r0, [pc, #84]	; (114f4 <bt_conn_send_cb+0xa4>)
   1149e:	f009 fa9f 	bl	1a9e0 <printk>
			net_buf_unref(buf);
   114a2:	4628      	mov	r0, r5
   114a4:	f004 fa26 	bl	158f4 <net_buf_unref>
			return -ENOBUFS;
   114a8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   114ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   114b0:	7ab3      	ldrb	r3, [r6, #10]
   114b2:	2b07      	cmp	r3, #7
   114b4:	d00a      	beq.n	114cc <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   114b6:	2157      	movs	r1, #87	; 0x57
   114b8:	480f      	ldr	r0, [pc, #60]	; (114f8 <bt_conn_send_cb+0xa8>)
   114ba:	f009 fa91 	bl	1a9e0 <printk>
			net_buf_unref(buf);
   114be:	4628      	mov	r0, r5
   114c0:	f004 fa18 	bl	158f4 <net_buf_unref>
			tx_free(tx);
   114c4:	4620      	mov	r0, r4
   114c6:	f7ff fe01 	bl	110cc <tx_free>
   114ca:	e7d1      	b.n	11470 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   114cc:	2300      	movs	r3, #0
		tx->user_data = user_data;
   114ce:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   114d2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   114d4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   114d6:	f106 0034 	add.w	r0, r6, #52	; 0x34
   114da:	4629      	mov	r1, r5
   114dc:	f004 f9dc 	bl	15898 <net_buf_put>
	return 0;
   114e0:	2000      	movs	r0, #0
   114e2:	e7e3      	b.n	114ac <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   114e4:	614a      	str	r2, [r1, #20]
   114e6:	e7f6      	b.n	114d6 <bt_conn_send_cb+0x86>
   114e8:	000216ed 	.word	0x000216ed
   114ec:	20009900 	.word	0x20009900
   114f0:	20008564 	.word	0x20008564
   114f4:	00021701 	.word	0x00021701
   114f8:	00021724 	.word	0x00021724

000114fc <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   114fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   11500:	2500      	movs	r5, #0
   11502:	4b1c      	ldr	r3, [pc, #112]	; (11574 <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11504:	462a      	mov	r2, r5
   11506:	2101      	movs	r1, #1
{
   11508:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   1150a:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1150c:	2601      	movs	r6, #1
   1150e:	f009 f815 	bl	1a53c <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   11512:	f04f 0914 	mov.w	r9, #20
   11516:	4c18      	ldr	r4, [pc, #96]	; (11578 <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   11518:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1151c:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   11520:	f00a fe8d 	bl	1c23e <atomic_get>
   11524:	b178      	cbz	r0, 11546 <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11526:	7aa3      	ldrb	r3, [r4, #10]
   11528:	b9ab      	cbnz	r3, 11556 <bt_conn_prepare_events+0x5a>
   1152a:	1d23      	adds	r3, r4, #4
   1152c:	e8d3 2fef 	ldaex	r2, [r3]
   11530:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   11534:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11538:	2800      	cmp	r0, #0
   1153a:	d1f7      	bne.n	1152c <bt_conn_prepare_events+0x30>
   1153c:	0653      	lsls	r3, r2, #25
   1153e:	d50a      	bpl.n	11556 <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   11540:	4620      	mov	r0, r4
   11542:	f7ff fee1 	bl	11308 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11546:	3501      	adds	r5, #1
   11548:	2d05      	cmp	r5, #5
   1154a:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   1154e:	d1e3      	bne.n	11518 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   11550:	4630      	mov	r0, r6
   11552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   11556:	7aa3      	ldrb	r3, [r4, #10]
   11558:	2b07      	cmp	r3, #7
   1155a:	d1f4      	bne.n	11546 <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   1155c:	f104 0334 	add.w	r3, r4, #52	; 0x34
   11560:	2200      	movs	r2, #0
   11562:	2104      	movs	r1, #4
   11564:	4640      	mov	r0, r8
   11566:	f008 ffe9 	bl	1a53c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1156a:	2301      	movs	r3, #1
   1156c:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   11570:	441e      	add	r6, r3
   11572:	e7e8      	b.n	11546 <bt_conn_prepare_events+0x4a>
   11574:	20008340 	.word	0x20008340
   11578:	20008bc8 	.word	0x20008bc8

0001157c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1157c:	b570      	push	{r4, r5, r6, lr}
   1157e:	4606      	mov	r6, r0
   11580:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   11582:	4810      	ldr	r0, [pc, #64]	; (115c4 <bt_conn_add_le+0x48>)
   11584:	2105      	movs	r1, #5
   11586:	f00a fe83 	bl	1c290 <bt_conn_new>
	if (!conn) {
   1158a:	4604      	mov	r4, r0
   1158c:	b1b8      	cbz	r0, 115be <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1158e:	2230      	movs	r2, #48	; 0x30
   11590:	2100      	movs	r1, #0
   11592:	3058      	adds	r0, #88	; 0x58
   11594:	f00a fc79 	bl	1be8a <memset>
   11598:	4b0b      	ldr	r3, [pc, #44]	; (115c8 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1159a:	4a0c      	ldr	r2, [pc, #48]	; (115cc <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1159c:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1159e:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   115a0:	4629      	mov	r1, r5
   115a2:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   115a6:	62a3      	str	r3, [r4, #40]	; 0x28
   115a8:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   115aa:	7226      	strb	r6, [r4, #8]
   115ac:	f104 0088 	add.w	r0, r4, #136	; 0x88
   115b0:	f00a fc40 	bl	1be34 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   115b4:	2301      	movs	r3, #1
   115b6:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   115b8:	4b05      	ldr	r3, [pc, #20]	; (115d0 <bt_conn_add_le+0x54>)
   115ba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   115be:	4620      	mov	r0, r4
   115c0:	bd70      	pop	{r4, r5, r6, pc}
   115c2:	bf00      	nop
   115c4:	20008bc8 	.word	0x20008bc8
   115c8:	00011c35 	.word	0x00011c35
   115cc:	0001c28b 	.word	0x0001c28b
   115d0:	00280018 	.word	0x00280018

000115d4 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   115d4:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   115d6:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   115da:	e8d4 3fef 	ldaex	r3, [r4]
   115de:	1e5a      	subs	r2, r3, #1
   115e0:	e8c4 2fe1 	stlex	r1, r2, [r4]
   115e4:	2900      	cmp	r1, #0
   115e6:	d1f8      	bne.n	115da <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   115e8:	2b00      	cmp	r3, #0
   115ea:	dc0a      	bgt.n	11602 <bt_conn_unref+0x2e>
   115ec:	4909      	ldr	r1, [pc, #36]	; (11614 <bt_conn_unref+0x40>)
   115ee:	480a      	ldr	r0, [pc, #40]	; (11618 <bt_conn_unref+0x44>)
   115f0:	f240 7265 	movw	r2, #1893	; 0x765
   115f4:	f009 f9f4 	bl	1a9e0 <printk>
   115f8:	f240 7165 	movw	r1, #1893	; 0x765
   115fc:	4805      	ldr	r0, [pc, #20]	; (11614 <bt_conn_unref+0x40>)
   115fe:	f009 fc95 	bl	1af2c <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   11602:	4620      	mov	r0, r4
   11604:	f00a fe1b 	bl	1c23e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11608:	b918      	cbnz	r0, 11612 <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   1160a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1160e:	f7ff bb19 	b.w	10c44 <bt_le_adv_resume>
}
   11612:	bd10      	pop	{r4, pc}
   11614:	00021609 	.word	0x00021609
   11618:	0001faab 	.word	0x0001faab

0001161c <bt_conn_lookup_handle>:
{
   1161c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1161e:	2105      	movs	r1, #5
   11620:	4801      	ldr	r0, [pc, #4]	; (11628 <bt_conn_lookup_handle+0xc>)
   11622:	f00a be99 	b.w	1c358 <conn_lookup_handle>
   11626:	bf00      	nop
   11628:	20008bc8 	.word	0x20008bc8

0001162c <bt_conn_set_state>:
{
   1162c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1162e:	7a85      	ldrb	r5, [r0, #10]
{
   11630:	4604      	mov	r4, r0
	if (conn->state == state) {
   11632:	428d      	cmp	r5, r1
{
   11634:	460e      	mov	r6, r1
	if (conn->state == state) {
   11636:	d10b      	bne.n	11650 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   11638:	2157      	movs	r1, #87	; 0x57
   1163a:	2d08      	cmp	r5, #8
   1163c:	bf96      	itet	ls
   1163e:	4b6d      	ldrls	r3, [pc, #436]	; (117f4 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   11640:	4a6d      	ldrhi	r2, [pc, #436]	; (117f8 <bt_conn_set_state+0x1cc>)
   11642:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   11646:	486d      	ldr	r0, [pc, #436]	; (117fc <bt_conn_set_state+0x1d0>)
}
   11648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   1164c:	f009 b9c8 	b.w	1a9e0 <printk>
	conn->state = state;
   11650:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   11652:	b165      	cbz	r5, 1166e <bt_conn_set_state+0x42>
   11654:	2d06      	cmp	r5, #6
   11656:	d00d      	beq.n	11674 <bt_conn_set_state+0x48>
	switch (conn->state) {
   11658:	7aa3      	ldrb	r3, [r4, #10]
   1165a:	2b08      	cmp	r3, #8
   1165c:	f200 80c5 	bhi.w	117ea <bt_conn_set_state+0x1be>
   11660:	e8df f003 	tbb	[pc, r3]
   11664:	c7c70f4a 	.word	0xc7c70f4a
   11668:	278ec7c7 	.word	0x278ec7c7
   1166c:	c7          	.byte	0xc7
   1166d:	00          	.byte	0x00
		bt_conn_ref(conn);
   1166e:	f00a fe5c 	bl	1c32a <bt_conn_ref>
		break;
   11672:	e7f1      	b.n	11658 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11674:	7883      	ldrb	r3, [r0, #2]
   11676:	2b01      	cmp	r3, #1
   11678:	d1ee      	bne.n	11658 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   1167a:	3058      	adds	r0, #88	; 0x58
   1167c:	f008 faaa 	bl	19bd4 <k_delayed_work_cancel>
   11680:	e7ea      	b.n	11658 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   11682:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   11684:	4d5e      	ldr	r5, [pc, #376]	; (11800 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   11686:	f04f 0320 	mov.w	r3, #32
   1168a:	f3ef 8211 	mrs	r2, BASEPRI
   1168e:	f383 8811 	msr	BASEPRI, r3
   11692:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   11696:	69e3      	ldr	r3, [r4, #28]
   11698:	2b00      	cmp	r3, #0
   1169a:	f000 8087 	beq.w	117ac <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   1169e:	3b01      	subs	r3, #1
   116a0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   116a2:	f382 8811 	msr	BASEPRI, r2
   116a6:	f3bf 8f6f 	isb	sy
   116aa:	4628      	mov	r0, r5
   116ac:	f007 ffc0 	bl	19630 <z_impl_k_sem_give>
}
   116b0:	e7e9      	b.n	11686 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   116b2:	78a3      	ldrb	r3, [r4, #2]
   116b4:	2b04      	cmp	r3, #4
   116b6:	f000 809c 	beq.w	117f2 <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   116ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
   116be:	f00c fc38 	bl	1df32 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   116c2:	2100      	movs	r1, #0
   116c4:	484f      	ldr	r0, [pc, #316]	; (11804 <bt_conn_set_state+0x1d8>)
   116c6:	f009 f845 	bl	1a754 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   116ca:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   116cc:	4620      	mov	r0, r4
	list->tail = NULL;
   116ce:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   116d2:	f000 fc8f 	bl	11ff4 <bt_l2cap_connected>
		notify_connected(conn);
   116d6:	4620      	mov	r0, r4
   116d8:	f7ff fd02 	bl	110e0 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   116dc:	78e3      	ldrb	r3, [r4, #3]
   116de:	2b01      	cmp	r3, #1
   116e0:	f040 8087 	bne.w	117f2 <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   116e4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   116e8:	2300      	movs	r3, #0
   116ea:	f104 0158 	add.w	r1, r4, #88	; 0x58
   116ee:	4846      	ldr	r0, [pc, #280]	; (11808 <bt_conn_set_state+0x1dc>)
}
   116f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   116f4:	f008 b9fe 	b.w	19af4 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   116f8:	78a3      	ldrb	r3, [r4, #2]
   116fa:	2b04      	cmp	r3, #4
   116fc:	d104      	bne.n	11708 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   116fe:	4620      	mov	r0, r4
}
   11700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   11704:	f7ff bf66 	b.w	115d4 <bt_conn_unref>
		switch (old_state) {
   11708:	2d08      	cmp	r5, #8
   1170a:	d872      	bhi.n	117f2 <bt_conn_set_state+0x1c6>
   1170c:	a301      	add	r3, pc, #4	; (adr r3, 11714 <bt_conn_set_state+0xe8>)
   1170e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   11712:	bf00      	nop
   11714:	00011779 	.word	0x00011779
   11718:	00011739 	.word	0x00011739
   1171c:	0001176b 	.word	0x0001176b
   11720:	000116ff 	.word	0x000116ff
   11724:	000116ff 	.word	0x000116ff
   11728:	0001176b 	.word	0x0001176b
   1172c:	0001176b 	.word	0x0001176b
   11730:	00011779 	.word	0x00011779
   11734:	00011779 	.word	0x00011779
			tx_notify(conn);
   11738:	4620      	mov	r0, r4
   1173a:	f00a fd83 	bl	1c244 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1173e:	78a3      	ldrb	r3, [r4, #2]
   11740:	2b01      	cmp	r3, #1
   11742:	d103      	bne.n	1174c <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   11744:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11748:	f008 fa44 	bl	19bd4 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1174c:	3404      	adds	r4, #4
   1174e:	e8d4 3fef 	ldaex	r3, [r4]
   11752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11756:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1175a:	2a00      	cmp	r2, #0
   1175c:	d1f7      	bne.n	1174e <bt_conn_set_state+0x122>
}
   1175e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11762:	2100      	movs	r1, #0
   11764:	4827      	ldr	r0, [pc, #156]	; (11804 <bt_conn_set_state+0x1d8>)
   11766:	f008 bff5 	b.w	1a754 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1176a:	7a63      	ldrb	r3, [r4, #9]
   1176c:	2b00      	cmp	r3, #0
   1176e:	d0c6      	beq.n	116fe <bt_conn_set_state+0xd2>
				notify_connected(conn);
   11770:	4620      	mov	r0, r4
   11772:	f7ff fcb5 	bl	110e0 <notify_connected>
   11776:	e7c2      	b.n	116fe <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   11778:	4632      	mov	r2, r6
   1177a:	2157      	movs	r1, #87	; 0x57
   1177c:	4823      	ldr	r0, [pc, #140]	; (1180c <bt_conn_set_state+0x1e0>)
   1177e:	e763      	b.n	11648 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11780:	78a3      	ldrb	r3, [r4, #2]
   11782:	2b01      	cmp	r3, #1
   11784:	d135      	bne.n	117f2 <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   11786:	4b22      	ldr	r3, [pc, #136]	; (11810 <bt_conn_set_state+0x1e4>)
   11788:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1178c:	8a9d      	ldrh	r5, [r3, #20]
   1178e:	230a      	movs	r3, #10
   11790:	f240 30e7 	movw	r0, #999	; 0x3e7
   11794:	2100      	movs	r1, #0
   11796:	435d      	muls	r5, r3
   11798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1179c:	2300      	movs	r3, #0
   1179e:	fbc5 0106 	smlal	r0, r1, r5, r6
   117a2:	f7f7 f9c3 	bl	8b2c <__aeabi_uldivmod>
   117a6:	4602      	mov	r2, r0
   117a8:	460b      	mov	r3, r1
   117aa:	e79e      	b.n	116ea <bt_conn_set_state+0xbe>
	return list->head;
   117ac:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   117ae:	b128      	cbz	r0, 117bc <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   117b0:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   117b2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   117b4:	4288      	cmp	r0, r1
	list->head = node;
   117b6:	6163      	str	r3, [r4, #20]
	list->tail = node;
   117b8:	bf08      	it	eq
   117ba:	61a3      	streq	r3, [r4, #24]
   117bc:	f382 8811 	msr	BASEPRI, r2
   117c0:	f3bf 8f6f 	isb	sy
		if (!node) {
   117c4:	b1a8      	cbz	r0, 117f2 <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   117c6:	f04f 0220 	mov.w	r2, #32
   117ca:	f3ef 8311 	mrs	r3, BASEPRI
   117ce:	f382 8811 	msr	BASEPRI, r2
   117d2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   117d6:	68c2      	ldr	r2, [r0, #12]
   117d8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   117da:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   117dc:	f383 8811 	msr	BASEPRI, r3
   117e0:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   117e4:	f7ff fc72 	bl	110cc <tx_free>
   117e8:	e75f      	b.n	116aa <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   117ea:	4632      	mov	r2, r6
   117ec:	2157      	movs	r1, #87	; 0x57
   117ee:	4809      	ldr	r0, [pc, #36]	; (11814 <bt_conn_set_state+0x1e8>)
   117f0:	e72a      	b.n	11648 <bt_conn_set_state+0x1c>
}
   117f2:	bd70      	pop	{r4, r5, r6, pc}
   117f4:	0001eb74 	.word	0x0001eb74
   117f8:	0002174f 	.word	0x0002174f
   117fc:	00021759 	.word	0x00021759
   11800:	200080c8 	.word	0x200080c8
   11804:	20008340 	.word	0x20008340
   11808:	200098e0 	.word	0x200098e0
   1180c:	0002176f 	.word	0x0002176f
   11810:	20008000 	.word	0x20008000
   11814:	0002178b 	.word	0x0002178b

00011818 <bt_conn_lookup_addr_le>:
{
   11818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1181c:	4607      	mov	r7, r0
   1181e:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11820:	2500      	movs	r5, #0
   11822:	4e0e      	ldr	r6, [pc, #56]	; (1185c <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11824:	4630      	mov	r0, r6
   11826:	f00a fd80 	bl	1c32a <bt_conn_ref>
		if (!conn) {
   1182a:	4604      	mov	r4, r0
   1182c:	b120      	cbz	r0, 11838 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   1182e:	7883      	ldrb	r3, [r0, #2]
   11830:	2b01      	cmp	r3, #1
   11832:	d00a      	beq.n	1184a <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   11834:	f7ff fece 	bl	115d4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11838:	3501      	adds	r5, #1
   1183a:	2d05      	cmp	r5, #5
   1183c:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   11840:	d1f0      	bne.n	11824 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   11842:	2400      	movs	r4, #0
}
   11844:	4620      	mov	r0, r4
   11846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1184a:	4642      	mov	r2, r8
   1184c:	4639      	mov	r1, r7
   1184e:	f00a fd4c 	bl	1c2ea <bt_conn_is_peer_addr_le>
   11852:	2800      	cmp	r0, #0
   11854:	d1f6      	bne.n	11844 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   11856:	4620      	mov	r0, r4
   11858:	e7ec      	b.n	11834 <bt_conn_lookup_addr_le+0x1c>
   1185a:	bf00      	nop
   1185c:	20008bc8 	.word	0x20008bc8

00011860 <bt_conn_exists_le>:
{
   11860:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   11862:	f7ff ffd9 	bl	11818 <bt_conn_lookup_addr_le>
	if (conn) {
   11866:	4604      	mov	r4, r0
   11868:	b170      	cbz	r0, 11888 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   1186a:	7a83      	ldrb	r3, [r0, #10]
   1186c:	2157      	movs	r1, #87	; 0x57
   1186e:	2b08      	cmp	r3, #8
   11870:	bf96      	itet	ls
   11872:	4a06      	ldrls	r2, [pc, #24]	; (1188c <bt_conn_exists_le+0x2c>)
   11874:	4a06      	ldrhi	r2, [pc, #24]	; (11890 <bt_conn_exists_le+0x30>)
   11876:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1187a:	4806      	ldr	r0, [pc, #24]	; (11894 <bt_conn_exists_le+0x34>)
   1187c:	f009 f8b0 	bl	1a9e0 <printk>
		bt_conn_unref(conn);
   11880:	4620      	mov	r0, r4
   11882:	f7ff fea7 	bl	115d4 <bt_conn_unref>
		return true;
   11886:	2001      	movs	r0, #1
}
   11888:	bd10      	pop	{r4, pc}
   1188a:	bf00      	nop
   1188c:	0001eb74 	.word	0x0001eb74
   11890:	0002174f 	.word	0x0002174f
   11894:	000217ac 	.word	0x000217ac

00011898 <bt_conn_lookup_state_le>:
{
   11898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1189c:	4606      	mov	r6, r0
   1189e:	460f      	mov	r7, r1
   118a0:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   118a2:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   118a4:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   118a8:	f8df a048 	ldr.w	sl, [pc, #72]	; 118f4 <bt_conn_lookup_state_le+0x5c>
   118ac:	fb09 a005 	mla	r0, r9, r5, sl
   118b0:	f00a fd3b 	bl	1c32a <bt_conn_ref>
		if (!conn) {
   118b4:	4604      	mov	r4, r0
   118b6:	b120      	cbz	r0, 118c2 <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   118b8:	7883      	ldrb	r3, [r0, #2]
   118ba:	2b01      	cmp	r3, #1
   118bc:	d006      	beq.n	118cc <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   118be:	f00a fd34 	bl	1c32a <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   118c2:	3501      	adds	r5, #1
   118c4:	2d05      	cmp	r5, #5
   118c6:	d1f1      	bne.n	118ac <bt_conn_lookup_state_le+0x14>
	return NULL;
   118c8:	2400      	movs	r4, #0
   118ca:	e00f      	b.n	118ec <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   118cc:	b147      	cbz	r7, 118e0 <bt_conn_lookup_state_le+0x48>
   118ce:	463a      	mov	r2, r7
   118d0:	4631      	mov	r1, r6
   118d2:	f00a fd0a 	bl	1c2ea <bt_conn_is_peer_addr_le>
   118d6:	b918      	cbnz	r0, 118e0 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   118d8:	4620      	mov	r0, r4
   118da:	f7ff fe7b 	bl	115d4 <bt_conn_unref>
			continue;
   118de:	e7f0      	b.n	118c2 <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   118e0:	7aa3      	ldrb	r3, [r4, #10]
   118e2:	4543      	cmp	r3, r8
   118e4:	d1f8      	bne.n	118d8 <bt_conn_lookup_state_le+0x40>
   118e6:	7a23      	ldrb	r3, [r4, #8]
   118e8:	42b3      	cmp	r3, r6
   118ea:	d1f5      	bne.n	118d8 <bt_conn_lookup_state_le+0x40>
}
   118ec:	4620      	mov	r0, r4
   118ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   118f2:	bf00      	nop
   118f4:	20008bc8 	.word	0x20008bc8

000118f8 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   118f8:	b510      	push	{r4, lr}
	info->type = conn->type;
   118fa:	7882      	ldrb	r2, [r0, #2]
   118fc:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   118fe:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   11900:	2a01      	cmp	r2, #1
	info->role = conn->role;
   11902:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   11904:	7a03      	ldrb	r3, [r0, #8]
   11906:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   11908:	d11c      	bne.n	11944 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   1190a:	f100 0288 	add.w	r2, r0, #136	; 0x88
   1190e:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   11910:	4a0e      	ldr	r2, [pc, #56]	; (1194c <bt_conn_get_info+0x54>)
   11912:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   11916:	4413      	add	r3, r2
   11918:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   1191a:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   1191e:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   11922:	b964      	cbnz	r4, 1193e <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   11924:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   11928:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   1192c:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   1192e:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   11932:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   11934:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   11938:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   1193a:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   1193c:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   1193e:	e9c1 2303 	strd	r2, r3, [r1, #12]
   11942:	e7f1      	b.n	11928 <bt_conn_get_info+0x30>
	return -EINVAL;
   11944:	f06f 0015 	mvn.w	r0, #21
   11948:	e7f8      	b.n	1193c <bt_conn_get_info+0x44>
   1194a:	bf00      	nop
   1194c:	20008000 	.word	0x20008000

00011950 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   11950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11954:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11956:	4844      	ldr	r0, [pc, #272]	; (11a68 <bt_conn_le_create+0x118>)
   11958:	f00a fc71 	bl	1c23e <atomic_get>
   1195c:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1195e:	0781      	lsls	r1, r0, #30
{
   11960:	4615      	mov	r5, r2
   11962:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11964:	d576      	bpl.n	11a54 <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   11966:	4610      	mov	r0, r2
   11968:	f00a fbc7 	bl	1c0fa <bt_le_conn_params_valid>
   1196c:	b928      	cbnz	r0, 1197a <bt_conn_le_create+0x2a>
		return -EINVAL;
   1196e:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   11972:	4628      	mov	r0, r5
   11974:	b002      	add	sp, #8
   11976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1197a:	483b      	ldr	r0, [pc, #236]	; (11a68 <bt_conn_le_create+0x118>)
   1197c:	f00a fc5f 	bl	1c23e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   11980:	0642      	lsls	r2, r0, #25
   11982:	d4f4      	bmi.n	1196e <bt_conn_le_create+0x1e>
   11984:	4838      	ldr	r0, [pc, #224]	; (11a68 <bt_conn_le_create+0x118>)
   11986:	f00a fc5a 	bl	1c23e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1198a:	0503      	lsls	r3, r0, #20
   1198c:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   11990:	d463      	bmi.n	11a5a <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   11992:	f7fd fee7 	bl	f764 <bt_le_scan_random_addr_check>
   11996:	2800      	cmp	r0, #0
   11998:	d0e9      	beq.n	1196e <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   1199a:	4621      	mov	r1, r4
   1199c:	4640      	mov	r0, r8
   1199e:	f7ff ff5f 	bl	11860 <bt_conn_exists_le>
   119a2:	2800      	cmp	r0, #0
   119a4:	d1e3      	bne.n	1196e <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   119a6:	7823      	ldrb	r3, [r4, #0]
   119a8:	3b02      	subs	r3, #2
   119aa:	2b01      	cmp	r3, #1
   119ac:	d847      	bhi.n	11a3e <bt_conn_le_create+0xee>
   119ae:	2207      	movs	r2, #7
   119b0:	4621      	mov	r1, r4
   119b2:	4668      	mov	r0, sp
   119b4:	f00a fa3e 	bl	1be34 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   119b8:	f89d 3000 	ldrb.w	r3, [sp]
   119bc:	3b02      	subs	r3, #2
   119be:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   119c2:	4669      	mov	r1, sp
   119c4:	2000      	movs	r0, #0
   119c6:	f7ff fdd9 	bl	1157c <bt_conn_add_le>
	if (!conn) {
   119ca:	4604      	mov	r4, r0
   119cc:	2800      	cmp	r0, #0
   119ce:	d047      	beq.n	11a60 <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   119d0:	882b      	ldrh	r3, [r5, #0]
   119d2:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   119d6:	886b      	ldrh	r3, [r5, #2]
   119d8:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   119dc:	88ab      	ldrh	r3, [r5, #4]
   119de:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   119e2:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   119e4:	4d21      	ldr	r5, [pc, #132]	; (11a6c <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   119e6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   119ea:	f105 0c08 	add.w	ip, r5, #8
   119ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   119f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   119f6:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   119f8:	2b00      	cmp	r3, #0
   119fa:	bf08      	it	eq
   119fc:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   11a00:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   11a02:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   11a04:	b903      	cbnz	r3, 11a08 <bt_conn_le_create+0xb8>
   11a06:	89ab      	ldrh	r3, [r5, #12]
   11a08:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   11a0a:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   11a0c:	b903      	cbnz	r3, 11a10 <bt_conn_le_create+0xc0>
   11a0e:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11a10:	2106      	movs	r1, #6
   11a12:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   11a14:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11a16:	f7ff fe09 	bl	1162c <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   11a1a:	4620      	mov	r0, r4
   11a1c:	f00a fb50 	bl	1c0c0 <bt_le_create_conn>
	if (err) {
   11a20:	4605      	mov	r5, r0
   11a22:	b1a8      	cbz	r0, 11a50 <bt_conn_le_create+0x100>
		conn->err = 0;
   11a24:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11a26:	4620      	mov	r0, r4
   11a28:	4631      	mov	r1, r6
		conn->err = 0;
   11a2a:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11a2c:	f7ff fdfe 	bl	1162c <bt_conn_set_state>
		bt_conn_unref(conn);
   11a30:	4620      	mov	r0, r4
   11a32:	f7ff fdcf 	bl	115d4 <bt_conn_unref>
		bt_le_scan_update(false);
   11a36:	4630      	mov	r0, r6
   11a38:	f7fd ff20 	bl	f87c <bt_le_scan_update>
		return err;
   11a3c:	e799      	b.n	11972 <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   11a3e:	4621      	mov	r1, r4
   11a40:	f00a fb3c 	bl	1c0bc <bt_lookup_id_addr>
   11a44:	2207      	movs	r2, #7
   11a46:	4601      	mov	r1, r0
   11a48:	4668      	mov	r0, sp
   11a4a:	f00a f9f3 	bl	1be34 <memcpy>
}
   11a4e:	e7b8      	b.n	119c2 <bt_conn_le_create+0x72>
	*ret_conn = conn;
   11a50:	603c      	str	r4, [r7, #0]
	return 0;
   11a52:	e78e      	b.n	11972 <bt_conn_le_create+0x22>
		return -EAGAIN;
   11a54:	f06f 050a 	mvn.w	r5, #10
   11a58:	e78b      	b.n	11972 <bt_conn_le_create+0x22>
		return -EALREADY;
   11a5a:	f06f 0544 	mvn.w	r5, #68	; 0x44
   11a5e:	e788      	b.n	11972 <bt_conn_le_create+0x22>
		return -ENOMEM;
   11a60:	f06f 050b 	mvn.w	r5, #11
   11a64:	e785      	b.n	11972 <bt_conn_le_create+0x22>
   11a66:	bf00      	nop
   11a68:	20008094 	.word	0x20008094
   11a6c:	20008000 	.word	0x20008000

00011a70 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   11a70:	b570      	push	{r4, r5, r6, lr}
   11a72:	4606      	mov	r6, r0
   11a74:	4834      	ldr	r0, [pc, #208]	; (11b48 <bt_le_set_auto_conn+0xd8>)
   11a76:	f00a fbe2 	bl	1c23e <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a7a:	0780      	lsls	r0, r0, #30
{
   11a7c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a7e:	d55c      	bpl.n	11b3a <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   11a80:	b929      	cbnz	r1, 11a8e <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   11a82:	f7fd fe6f 	bl	f764 <bt_le_scan_random_addr_check>
   11a86:	b940      	cbnz	r0, 11a9a <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   11a88:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   11a8c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   11a8e:	4608      	mov	r0, r1
   11a90:	f00a fb33 	bl	1c0fa <bt_le_conn_params_valid>
   11a94:	2800      	cmp	r0, #0
   11a96:	d1f4      	bne.n	11a82 <bt_le_set_auto_conn+0x12>
   11a98:	e7f6      	b.n	11a88 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   11a9a:	4631      	mov	r1, r6
   11a9c:	2000      	movs	r0, #0
   11a9e:	f7ff febb 	bl	11818 <bt_conn_lookup_addr_le>
	if (!conn) {
   11aa2:	4604      	mov	r4, r0
   11aa4:	b928      	cbnz	r0, 11ab2 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   11aa6:	4631      	mov	r1, r6
   11aa8:	f7ff fd68 	bl	1157c <bt_conn_add_le>
		if (!conn) {
   11aac:	4604      	mov	r4, r0
   11aae:	2800      	cmp	r0, #0
   11ab0:	d046      	beq.n	11b40 <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   11ab2:	1d23      	adds	r3, r4, #4
	if (param) {
   11ab4:	b365      	cbz	r5, 11b10 <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   11ab6:	882a      	ldrh	r2, [r5, #0]
   11ab8:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11abc:	886a      	ldrh	r2, [r5, #2]
   11abe:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   11ac2:	88aa      	ldrh	r2, [r5, #4]
   11ac4:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11ac8:	88ea      	ldrh	r2, [r5, #6]
   11aca:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11ace:	e8d3 2fef 	ldaex	r2, [r3]
   11ad2:	f042 0101 	orr.w	r1, r2, #1
   11ad6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11ada:	2800      	cmp	r0, #0
   11adc:	d1f7      	bne.n	11ace <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   11ade:	07d1      	lsls	r1, r2, #31
   11ae0:	d402      	bmi.n	11ae8 <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   11ae2:	4620      	mov	r0, r4
   11ae4:	f00a fc21 	bl	1c32a <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11ae8:	7aa3      	ldrb	r3, [r4, #10]
   11aea:	b963      	cbnz	r3, 11b06 <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11aec:	4816      	ldr	r0, [pc, #88]	; (11b48 <bt_le_set_auto_conn+0xd8>)
   11aee:	f00a fba6 	bl	1c23e <atomic_get>
   11af2:	0783      	lsls	r3, r0, #30
   11af4:	d507      	bpl.n	11b06 <bt_le_set_auto_conn+0x96>
		if (param) {
   11af6:	b11d      	cbz	r5, 11b00 <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11af8:	2102      	movs	r1, #2
   11afa:	4620      	mov	r0, r4
   11afc:	f7ff fd96 	bl	1162c <bt_conn_set_state>
		bt_le_scan_update(false);
   11b00:	2000      	movs	r0, #0
   11b02:	f7fd febb 	bl	f87c <bt_le_scan_update>
	bt_conn_unref(conn);
   11b06:	4620      	mov	r0, r4
   11b08:	f7ff fd64 	bl	115d4 <bt_conn_unref>
	return 0;
   11b0c:	2000      	movs	r0, #0
   11b0e:	e7bd      	b.n	11a8c <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11b10:	e8d3 2fef 	ldaex	r2, [r3]
   11b14:	f022 0101 	bic.w	r1, r2, #1
   11b18:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11b1c:	2800      	cmp	r0, #0
   11b1e:	d1f7      	bne.n	11b10 <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   11b20:	07d2      	lsls	r2, r2, #31
   11b22:	d5e1      	bpl.n	11ae8 <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   11b24:	4620      	mov	r0, r4
   11b26:	f7ff fd55 	bl	115d4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   11b2a:	7aa3      	ldrb	r3, [r4, #10]
   11b2c:	2b02      	cmp	r3, #2
   11b2e:	d1db      	bne.n	11ae8 <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b30:	4629      	mov	r1, r5
   11b32:	4620      	mov	r0, r4
   11b34:	f7ff fd7a 	bl	1162c <bt_conn_set_state>
   11b38:	e7d6      	b.n	11ae8 <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   11b3a:	f06f 000a 	mvn.w	r0, #10
   11b3e:	e7a5      	b.n	11a8c <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   11b40:	f06f 000b 	mvn.w	r0, #11
   11b44:	e7a2      	b.n	11a8c <bt_le_set_auto_conn+0x1c>
   11b46:	bf00      	nop
   11b48:	20008094 	.word	0x20008094

00011b4c <bt_conn_disconnect>:
{
   11b4c:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11b4e:	7883      	ldrb	r3, [r0, #2]
{
   11b50:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11b52:	2b01      	cmp	r3, #1
{
   11b54:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11b56:	d103      	bne.n	11b60 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   11b58:	2100      	movs	r1, #0
   11b5a:	3088      	adds	r0, #136	; 0x88
   11b5c:	f7ff ff88 	bl	11a70 <bt_le_set_auto_conn>
	switch (conn->state) {
   11b60:	7aa3      	ldrb	r3, [r4, #10]
   11b62:	3b02      	subs	r3, #2
   11b64:	2b06      	cmp	r3, #6
   11b66:	d805      	bhi.n	11b74 <bt_conn_disconnect+0x28>
   11b68:	e8df f003 	tbb	[pc, r3]
   11b6c:	12040408 	.word	0x12040408
   11b70:	271f      	.short	0x271f
   11b72:	10          	.byte	0x10
   11b73:	00          	.byte	0x00
   11b74:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   11b78:	4628      	mov	r0, r5
   11b7a:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b7c:	4620      	mov	r0, r4
   11b7e:	2100      	movs	r1, #0
		conn->err = reason;
   11b80:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b82:	f7ff fd53 	bl	1162c <bt_conn_set_state>
			bt_le_scan_update(false);
   11b86:	2000      	movs	r0, #0
   11b88:	f7fd fe78 	bl	f87c <bt_le_scan_update>
		return 0;
   11b8c:	2500      	movs	r5, #0
   11b8e:	e7f3      	b.n	11b78 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   11b90:	2157      	movs	r1, #87	; 0x57
   11b92:	4810      	ldr	r0, [pc, #64]	; (11bd4 <bt_conn_disconnect+0x88>)
   11b94:	f008 ff24 	bl	1a9e0 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b98:	4620      	mov	r0, r4
		conn->err = reason;
   11b9a:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11b9c:	2100      	movs	r1, #0
   11b9e:	f7ff fd45 	bl	1162c <bt_conn_set_state>
}
   11ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   11ba6:	f7fe bff1 	b.w	10b8c <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   11baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11bae:	f008 f811 	bl	19bd4 <k_delayed_work_cancel>
}
   11bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   11bb6:	f7fd be3d 	b.w	f834 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   11bba:	4629      	mov	r1, r5
   11bbc:	8820      	ldrh	r0, [r4, #0]
   11bbe:	f00a fa81 	bl	1c0c4 <bt_hci_disconnect>
	if (err) {
   11bc2:	4605      	mov	r5, r0
   11bc4:	2800      	cmp	r0, #0
   11bc6:	d1d7      	bne.n	11b78 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   11bc8:	2108      	movs	r1, #8
   11bca:	4620      	mov	r0, r4
   11bcc:	f7ff fd2e 	bl	1162c <bt_conn_set_state>
	return 0;
   11bd0:	e7d2      	b.n	11b78 <bt_conn_disconnect+0x2c>
   11bd2:	bf00      	nop
   11bd4:	000217d4 	.word	0x000217d4

00011bd8 <send_conn_le_param_update>:
{
   11bd8:	b538      	push	{r3, r4, r5, lr}
   11bda:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11bdc:	4608      	mov	r0, r1
{
   11bde:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11be0:	f00a fa8b 	bl	1c0fa <bt_le_conn_params_valid>
   11be4:	b308      	cbz	r0, 11c2a <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11be6:	4b12      	ldr	r3, [pc, #72]	; (11c30 <send_conn_le_param_update+0x58>)
   11be8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11bec:	0799      	lsls	r1, r3, #30
   11bee:	d407      	bmi.n	11c00 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11bf0:	78e3      	ldrb	r3, [r4, #3]
   11bf2:	b173      	cbz	r3, 11c12 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11bf4:	4629      	mov	r1, r5
   11bf6:	4620      	mov	r0, r4
}
   11bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11bfc:	f000 bb14 	b.w	12228 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11c00:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11c04:	079a      	lsls	r2, r3, #30
   11c06:	d5f3      	bpl.n	11bf0 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11c08:	1d20      	adds	r0, r4, #4
   11c0a:	f00a fb18 	bl	1c23e <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11c0e:	0543      	lsls	r3, r0, #21
   11c10:	d4ee      	bmi.n	11bf0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11c12:	4629      	mov	r1, r5
   11c14:	4620      	mov	r0, r4
   11c16:	f00a fbc3 	bl	1c3a0 <bt_conn_le_conn_update>
		if (rc == 0) {
   11c1a:	b928      	cbnz	r0, 11c28 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   11c1c:	88ab      	ldrh	r3, [r5, #4]
   11c1e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11c22:	88eb      	ldrh	r3, [r5, #6]
   11c24:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11c28:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11c2a:	f06f 0015 	mvn.w	r0, #21
   11c2e:	e7fb      	b.n	11c28 <send_conn_le_param_update+0x50>
   11c30:	20008000 	.word	0x20008000

00011c34 <deferred_work>:
{
   11c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11c36:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   11c3a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   11c3c:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11c40:	b99b      	cbnz	r3, 11c6a <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   11c42:	4630      	mov	r0, r6
   11c44:	f00a fc0c 	bl	1c460 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11c48:	4b26      	ldr	r3, [pc, #152]	; (11ce4 <deferred_work+0xb0>)
   11c4a:	681d      	ldr	r5, [r3, #0]
   11c4c:	b92d      	cbnz	r5, 11c5a <deferred_work+0x26>
		bt_conn_unref(conn);
   11c4e:	4630      	mov	r0, r6
}
   11c50:	b002      	add	sp, #8
   11c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   11c56:	f7ff bcbd 	b.w	115d4 <bt_conn_unref>
		if (cb->disconnected) {
   11c5a:	686b      	ldr	r3, [r5, #4]
   11c5c:	b11b      	cbz	r3, 11c66 <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   11c5e:	4630      	mov	r0, r6
   11c60:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   11c64:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11c66:	692d      	ldr	r5, [r5, #16]
   11c68:	e7f0      	b.n	11c4c <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   11c6a:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11c6e:	2b01      	cmp	r3, #1
   11c70:	d12f      	bne.n	11cd2 <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11c72:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   11c76:	b923      	cbnz	r3, 11c82 <deferred_work+0x4e>
}
   11c78:	b002      	add	sp, #8
   11c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   11c7e:	f7fd bdd9 	b.w	f834 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   11c82:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11c86:	e8d5 3fef 	ldaex	r3, [r5]
   11c8a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   11c8e:	e8c5 2fe1 	stlex	r1, r2, [r5]
   11c92:	2900      	cmp	r1, #0
   11c94:	d1f7      	bne.n	11c86 <deferred_work+0x52>
   11c96:	059b      	lsls	r3, r3, #22
   11c98:	d51d      	bpl.n	11cd6 <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11c9a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   11c9e:	f8ad 3000 	strh.w	r3, [sp]
   11ca2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   11ca6:	f8ad 3002 	strh.w	r3, [sp, #2]
   11caa:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11cae:	f8ad 3004 	strh.w	r3, [sp, #4]
   11cb2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   11cb6:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   11cba:	4669      	mov	r1, sp
   11cbc:	4630      	mov	r0, r6
   11cbe:	f7ff ff8b 	bl	11bd8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11cc2:	e8d5 3fef 	ldaex	r3, [r5]
   11cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11cca:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11cce:	2a00      	cmp	r2, #0
   11cd0:	d1f7      	bne.n	11cc2 <deferred_work+0x8e>
}
   11cd2:	b002      	add	sp, #8
   11cd4:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   11cd6:	466b      	mov	r3, sp
   11cd8:	4a03      	ldr	r2, [pc, #12]	; (11ce8 <deferred_work+0xb4>)
   11cda:	6810      	ldr	r0, [r2, #0]
   11cdc:	6851      	ldr	r1, [r2, #4]
   11cde:	c303      	stmia	r3!, {r0, r1}
   11ce0:	e7eb      	b.n	11cba <deferred_work+0x86>
   11ce2:	bf00      	nop
   11ce4:	20009f10 	.word	0x20009f10
   11ce8:	0001e728 	.word	0x0001e728

00011cec <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cee:	4604      	mov	r4, r0
   11cf0:	460d      	mov	r5, r1
   11cf2:	4617      	mov	r7, r2
   11cf4:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   11cf6:	f00c f991 	bl	1e01c <k_is_in_isr>
   11cfa:	b150      	cbz	r0, 11d12 <bt_conn_create_pdu_timeout+0x26>
   11cfc:	490f      	ldr	r1, [pc, #60]	; (11d3c <bt_conn_create_pdu_timeout+0x50>)
   11cfe:	4810      	ldr	r0, [pc, #64]	; (11d40 <bt_conn_create_pdu_timeout+0x54>)
   11d00:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11d04:	f008 fe6c 	bl	1a9e0 <printk>
   11d08:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11d0c:	480b      	ldr	r0, [pc, #44]	; (11d3c <bt_conn_create_pdu_timeout+0x50>)
   11d0e:	f009 f90d 	bl	1af2c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11d12:	480c      	ldr	r0, [pc, #48]	; (11d44 <bt_conn_create_pdu_timeout+0x58>)
   11d14:	463a      	mov	r2, r7
   11d16:	2c00      	cmp	r4, #0
   11d18:	bf18      	it	ne
   11d1a:	4620      	movne	r0, r4
   11d1c:	4633      	mov	r3, r6
   11d1e:	f00b fb9a 	bl	1d456 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   11d22:	4604      	mov	r4, r0
   11d24:	b928      	cbnz	r0, 11d32 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   11d26:	2157      	movs	r1, #87	; 0x57
   11d28:	4807      	ldr	r0, [pc, #28]	; (11d48 <bt_conn_create_pdu_timeout+0x5c>)
   11d2a:	f008 fe59 	bl	1a9e0 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11d2e:	4620      	mov	r0, r4
   11d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   11d32:	1d69      	adds	r1, r5, #5
   11d34:	3008      	adds	r0, #8
   11d36:	f003 fd8b 	bl	15850 <net_buf_simple_reserve>
	return buf;
   11d3a:	e7f8      	b.n	11d2e <bt_conn_create_pdu_timeout+0x42>
   11d3c:	00021609 	.word	0x00021609
   11d40:	0001faab 	.word	0x0001faab
   11d44:	200085ac 	.word	0x200085ac
   11d48:	00021800 	.word	0x00021800

00011d4c <bt_conn_create_frag_timeout>:
{
   11d4c:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11d4e:	4801      	ldr	r0, [pc, #4]	; (11d54 <bt_conn_create_frag_timeout+0x8>)
   11d50:	f7ff bfcc 	b.w	11cec <bt_conn_create_pdu_timeout>
   11d54:	20008604 	.word	0x20008604

00011d58 <create_frag>:
{
   11d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d5c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   11d5e:	f04f 33ff 	mov.w	r3, #4294967295
   11d62:	f04f 32ff 	mov.w	r2, #4294967295
   11d66:	2000      	movs	r0, #0
{
   11d68:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   11d6a:	f7ff ffef 	bl	11d4c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   11d6e:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   11d70:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11d72:	2b07      	cmp	r3, #7
   11d74:	f04f 0600 	mov.w	r6, #0
   11d78:	d005      	beq.n	11d86 <create_frag+0x2e>
		net_buf_unref(frag);
   11d7a:	f003 fdbb 	bl	158f4 <net_buf_unref>
		return NULL;
   11d7e:	4635      	mov	r5, r6
}
   11d80:	4628      	mov	r0, r5
   11d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11d86:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11d88:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11d8c:	4e0c      	ldr	r6, [pc, #48]	; (11dc0 <create_frag+0x68>)
   11d8e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11d90:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   11d94:	f00b fb85 	bl	1d4a2 <net_buf_simple_tailroom>
   11d98:	4580      	cmp	r8, r0
   11d9a:	d20c      	bcs.n	11db6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11d9c:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11da0:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11da4:	4632      	mov	r2, r6
   11da6:	4638      	mov	r0, r7
   11da8:	f00b fb83 	bl	1d4b2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11dac:	4631      	mov	r1, r6
   11dae:	4620      	mov	r0, r4
   11db0:	f003 fe7c 	bl	15aac <net_buf_simple_pull>
   11db4:	e7e4      	b.n	11d80 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11db6:	4638      	mov	r0, r7
   11db8:	f00b fb73 	bl	1d4a2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11dbc:	b286      	uxth	r6, r0
   11dbe:	e7ef      	b.n	11da0 <create_frag+0x48>
   11dc0:	20008000 	.word	0x20008000

00011dc4 <bt_conn_process_tx>:
{
   11dc4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11dc6:	7a83      	ldrb	r3, [r0, #10]
{
   11dc8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11dca:	b973      	cbnz	r3, 11dea <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11dcc:	1d03      	adds	r3, r0, #4
   11dce:	e8d3 2fef 	ldaex	r2, [r3]
   11dd2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   11dd6:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11dda:	2d00      	cmp	r5, #0
   11ddc:	d1f7      	bne.n	11dce <bt_conn_process_tx+0xa>
   11dde:	0653      	lsls	r3, r2, #25
   11de0:	d503      	bpl.n	11dea <bt_conn_process_tx+0x26>
}
   11de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11de6:	f7ff ba8f 	b.w	11308 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11dea:	2200      	movs	r2, #0
   11dec:	2300      	movs	r3, #0
   11dee:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11df2:	f003 fcfd 	bl	157f0 <net_buf_get>
	BT_ASSERT(buf);
   11df6:	4605      	mov	r5, r0
   11df8:	b958      	cbnz	r0, 11e12 <bt_conn_process_tx+0x4e>
   11dfa:	f240 525f 	movw	r2, #1375	; 0x55f
   11dfe:	491e      	ldr	r1, [pc, #120]	; (11e78 <bt_conn_process_tx+0xb4>)
   11e00:	481e      	ldr	r0, [pc, #120]	; (11e7c <bt_conn_process_tx+0xb8>)
   11e02:	f008 fded 	bl	1a9e0 <printk>
   11e06:	4040      	eors	r0, r0
   11e08:	f380 8811 	msr	BASEPRI, r0
   11e0c:	f04f 0003 	mov.w	r0, #3
   11e10:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11e12:	4e1b      	ldr	r6, [pc, #108]	; (11e80 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   11e14:	89aa      	ldrh	r2, [r5, #12]
   11e16:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11e1a:	429a      	cmp	r2, r3
   11e1c:	d807      	bhi.n	11e2e <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11e1e:	2300      	movs	r3, #0
   11e20:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11e22:	4629      	mov	r1, r5
   11e24:	4620      	mov	r0, r4
   11e26:	f7ff f971 	bl	1110c <send_frag>
	if (!send_buf(conn, buf)) {
   11e2a:	b130      	cbz	r0, 11e3a <bt_conn_process_tx+0x76>
}
   11e2c:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11e2e:	4629      	mov	r1, r5
   11e30:	4620      	mov	r0, r4
   11e32:	f7ff ff91 	bl	11d58 <create_frag>
	if (!frag) {
   11e36:	4601      	mov	r1, r0
   11e38:	b920      	cbnz	r0, 11e44 <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   11e3a:	4628      	mov	r0, r5
}
   11e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11e40:	f003 bd58 	b.w	158f4 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11e44:	2301      	movs	r3, #1
   11e46:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11e48:	4620      	mov	r0, r4
   11e4a:	f7ff f95f 	bl	1110c <send_frag>
   11e4e:	2800      	cmp	r0, #0
   11e50:	d0f3      	beq.n	11e3a <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   11e52:	89aa      	ldrh	r2, [r5, #12]
   11e54:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11e58:	429a      	cmp	r2, r3
   11e5a:	d802      	bhi.n	11e62 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   11e5c:	2300      	movs	r3, #0
   11e5e:	2203      	movs	r2, #3
   11e60:	e7df      	b.n	11e22 <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   11e62:	4629      	mov	r1, r5
   11e64:	4620      	mov	r0, r4
   11e66:	f7ff ff77 	bl	11d58 <create_frag>
		if (!frag) {
   11e6a:	4601      	mov	r1, r0
   11e6c:	2800      	cmp	r0, #0
   11e6e:	d0e4      	beq.n	11e3a <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11e70:	2301      	movs	r3, #1
   11e72:	461a      	mov	r2, r3
   11e74:	e7e8      	b.n	11e48 <bt_conn_process_tx+0x84>
   11e76:	bf00      	nop
   11e78:	00021609 	.word	0x00021609
   11e7c:	0001faab 	.word	0x0001faab
   11e80:	20008000 	.word	0x20008000

00011e84 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11e84:	4b0b      	ldr	r3, [pc, #44]	; (11eb4 <bt_conn_index+0x30>)
{
   11e86:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   11e88:	1ac0      	subs	r0, r0, r3
   11e8a:	4b0b      	ldr	r3, [pc, #44]	; (11eb8 <bt_conn_index+0x34>)
   11e8c:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11e8e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
		index = conn - acl_conns;
   11e92:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11e96:	d90a      	bls.n	11eae <bt_conn_index+0x2a>
   11e98:	4908      	ldr	r1, [pc, #32]	; (11ebc <bt_conn_index+0x38>)
   11e9a:	4809      	ldr	r0, [pc, #36]	; (11ec0 <bt_conn_index+0x3c>)
   11e9c:	f640 2295 	movw	r2, #2709	; 0xa95
   11ea0:	f008 fd9e 	bl	1a9e0 <printk>
   11ea4:	f640 2195 	movw	r1, #2709	; 0xa95
   11ea8:	4804      	ldr	r0, [pc, #16]	; (11ebc <bt_conn_index+0x38>)
   11eaa:	f009 f83f 	bl	1af2c <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11eae:	b2e0      	uxtb	r0, r4
   11eb0:	bd10      	pop	{r4, pc}
   11eb2:	bf00      	nop
   11eb4:	20008bc8 	.word	0x20008bc8
   11eb8:	aaaaaaab 	.word	0xaaaaaaab
   11ebc:	00021609 	.word	0x00021609
   11ec0:	0001faab 	.word	0x0001faab

00011ec4 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11ec4:	2804      	cmp	r0, #4
   11ec6:	d806      	bhi.n	11ed6 <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11ec8:	4b04      	ldr	r3, [pc, #16]	; (11edc <bt_conn_lookup_index+0x18>)
   11eca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11ece:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11ed2:	f00a ba2a 	b.w	1c32a <bt_conn_ref>
}
   11ed6:	2000      	movs	r0, #0
   11ed8:	4770      	bx	lr
   11eda:	bf00      	nop
   11edc:	20008bc8 	.word	0x20008bc8

00011ee0 <bt_conn_init>:

int bt_conn_init(void)
{
   11ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11ee2:	4917      	ldr	r1, [pc, #92]	; (11f40 <bt_conn_init+0x60>)
   11ee4:	4817      	ldr	r0, [pc, #92]	; (11f44 <bt_conn_init+0x64>)
   11ee6:	f00c f831 	bl	1df4c <k_queue_append>
   11eea:	4917      	ldr	r1, [pc, #92]	; (11f48 <bt_conn_init+0x68>)
   11eec:	4815      	ldr	r0, [pc, #84]	; (11f44 <bt_conn_init+0x64>)
   11eee:	f00c f82d 	bl	1df4c <k_queue_append>
   11ef2:	4916      	ldr	r1, [pc, #88]	; (11f4c <bt_conn_init+0x6c>)
   11ef4:	4813      	ldr	r0, [pc, #76]	; (11f44 <bt_conn_init+0x64>)
   11ef6:	f00c f829 	bl	1df4c <k_queue_append>
	}

	bt_att_init();
   11efa:	f00a fe31 	bl	1cb60 <bt_att_init>

	err = bt_smp_init();
   11efe:	f00b faa7 	bl	1d450 <bt_smp_init>
	if (err) {
   11f02:	4605      	mov	r5, r0
   11f04:	b9d0      	cbnz	r0, 11f3c <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   11f06:	f00a fb14 	bl	1c532 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11f0a:	462e      	mov	r6, r5
   11f0c:	4f10      	ldr	r7, [pc, #64]	; (11f50 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11f0e:	4638      	mov	r0, r7
   11f10:	f00a fa0b 	bl	1c32a <bt_conn_ref>

			if (!conn) {
   11f14:	4604      	mov	r4, r0
   11f16:	b160      	cbz	r0, 11f32 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11f18:	3004      	adds	r0, #4
   11f1a:	f00a f990 	bl	1c23e <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11f1e:	07c3      	lsls	r3, r0, #31
   11f20:	d504      	bpl.n	11f2c <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11f22:	2102      	movs	r1, #2
   11f24:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   11f26:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11f28:	f7ff fb80 	bl	1162c <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11f2c:	4620      	mov	r0, r4
   11f2e:	f7ff fb51 	bl	115d4 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11f32:	3601      	adds	r6, #1
   11f34:	2e05      	cmp	r6, #5
   11f36:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   11f3a:	d1e8      	bne.n	11f0e <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11f3c:	4628      	mov	r0, r5
   11f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f40:	20009f14 	.word	0x20009f14
   11f44:	20008564 	.word	0x20008564
   11f48:	20009f24 	.word	0x20009f24
   11f4c:	20009f34 	.word	0x20009f34
   11f50:	20008bc8 	.word	0x20008bc8

00011f54 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   11f54:	b570      	push	{r4, r5, r6, lr}
   11f56:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11f58:	2400      	movs	r4, #0
   11f5a:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   11f5c:	4b09      	ldr	r3, [pc, #36]	; (11f84 <l2cap_accept+0x30>)
   11f5e:	fb06 f504 	mul.w	r5, r6, r4
   11f62:	58e8      	ldr	r0, [r5, r3]
   11f64:	b148      	cbz	r0, 11f7a <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11f66:	3401      	adds	r4, #1
   11f68:	2c05      	cmp	r4, #5
   11f6a:	d1f8      	bne.n	11f5e <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   11f6c:	4806      	ldr	r0, [pc, #24]	; (11f88 <l2cap_accept+0x34>)
   11f6e:	2145      	movs	r1, #69	; 0x45
   11f70:	f008 fd36 	bl	1a9e0 <printk>
   11f74:	f06f 000b 	mvn.w	r0, #11
   11f78:	e003      	b.n	11f82 <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   11f7a:	4a04      	ldr	r2, [pc, #16]	; (11f8c <l2cap_accept+0x38>)
   11f7c:	442b      	add	r3, r5
   11f7e:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   11f80:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   11f82:	bd70      	pop	{r4, r5, r6, pc}
   11f84:	20008f88 	.word	0x20008f88
   11f88:	00021898 	.word	0x00021898
   11f8c:	0001ebb8 	.word	0x0001ebb8

00011f90 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   11f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f92:	4605      	mov	r5, r0
   11f94:	460f      	mov	r7, r1
   11f96:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   11f98:	2300      	movs	r3, #0
   11f9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11f9e:	2104      	movs	r1, #4
   11fa0:	2000      	movs	r0, #0
   11fa2:	f7ff fea3 	bl	11cec <bt_conn_create_pdu_timeout>
	if (!buf) {
   11fa6:	4604      	mov	r4, r0
   11fa8:	b930      	cbnz	r0, 11fb8 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   11faa:	462a      	mov	r2, r5
   11fac:	2145      	movs	r1, #69	; 0x45
   11fae:	4806      	ldr	r0, [pc, #24]	; (11fc8 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   11fb0:	f008 fd16 	bl	1a9e0 <printk>
}
   11fb4:	4620      	mov	r0, r4
   11fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   11fb8:	2104      	movs	r1, #4
   11fba:	3008      	adds	r0, #8
   11fbc:	f003 fdb0 	bl	15b20 <net_buf_simple_add>
	hdr->code = code;
   11fc0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   11fc2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   11fc4:	8046      	strh	r6, [r0, #2]
	return buf;
   11fc6:	e7f5      	b.n	11fb4 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   11fc8:	000218c4 	.word	0x000218c4

00011fcc <l2cap_rtx_timeout>:
{
   11fcc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11fce:	4604      	mov	r4, r0
   11fd0:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   11fd4:	2145      	movs	r1, #69	; 0x45
   11fd6:	4622      	mov	r2, r4
   11fd8:	4805      	ldr	r0, [pc, #20]	; (11ff0 <l2cap_rtx_timeout+0x24>)
   11fda:	f008 fd01 	bl	1a9e0 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11fde:	4628      	mov	r0, r5
   11fe0:	4621      	mov	r1, r4
   11fe2:	f00a fa07 	bl	1c3f4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   11fe6:	4620      	mov	r0, r4
}
   11fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   11fec:	f00a ba23 	b.w	1c436 <bt_l2cap_chan_del>
   11ff0:	000218f1 	.word	0x000218f1

00011ff4 <bt_l2cap_connected>:
{
   11ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11ff8:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11ffa:	4e2d      	ldr	r6, [pc, #180]	; (120b0 <bt_l2cap_connected+0xbc>)
   11ffc:	4f2d      	ldr	r7, [pc, #180]	; (120b4 <bt_l2cap_connected+0xc0>)
   11ffe:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 120b8 <bt_l2cap_connected+0xc4>
   12002:	42be      	cmp	r6, r7
   12004:	d90a      	bls.n	1201c <bt_l2cap_connected+0x28>
   12006:	4641      	mov	r1, r8
   12008:	482c      	ldr	r0, [pc, #176]	; (120bc <bt_l2cap_connected+0xc8>)
   1200a:	f240 1267 	movw	r2, #359	; 0x167
   1200e:	f008 fce7 	bl	1a9e0 <printk>
   12012:	f240 1167 	movw	r1, #359	; 0x167
   12016:	4640      	mov	r0, r8
   12018:	f008 ff88 	bl	1af2c <assert_post_action>
   1201c:	42be      	cmp	r6, r7
   1201e:	d302      	bcc.n	12026 <bt_l2cap_connected+0x32>
}
   12020:	b003      	add	sp, #12
   12022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   12026:	4628      	mov	r0, r5
   12028:	6873      	ldr	r3, [r6, #4]
   1202a:	a901      	add	r1, sp, #4
   1202c:	4798      	blx	r3
   1202e:	2800      	cmp	r0, #0
   12030:	db38      	blt.n	120a4 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   12032:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   12034:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12036:	2230      	movs	r2, #48	; 0x30
   12038:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   1203c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   12040:	2100      	movs	r1, #0
   12042:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   12046:	f8d6 9008 	ldr.w	r9, [r6, #8]
   1204a:	f009 ff1e 	bl	1be8a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1204e:	2200      	movs	r2, #0
   12050:	4b1b      	ldr	r3, [pc, #108]	; (120c0 <bt_l2cap_connected+0xcc>)
   12052:	6163      	str	r3, [r4, #20]
   12054:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12058:	e8d3 1fef 	ldaex	r1, [r3]
   1205c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12060:	2800      	cmp	r0, #0
   12062:	d1f9      	bne.n	12058 <bt_l2cap_connected+0x64>
	parent->next = child;
   12064:	60a2      	str	r2, [r4, #8]
	return list->tail;
   12066:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   12068:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   1206c:	b9e2      	cbnz	r2, 120a8 <bt_l2cap_connected+0xb4>
	list->head = node;
   1206e:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   12072:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   12074:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   12076:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   12078:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   1207c:	681b      	ldr	r3, [r3, #0]
   1207e:	b103      	cbz	r3, 12082 <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   12080:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12082:	9b01      	ldr	r3, [sp, #4]
   12084:	3340      	adds	r3, #64	; 0x40
   12086:	e8d3 2fef 	ldaex	r2, [r3]
   1208a:	f042 0201 	orr.w	r2, r2, #1
   1208e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12092:	2900      	cmp	r1, #0
   12094:	d1f7      	bne.n	12086 <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   12096:	9801      	ldr	r0, [sp, #4]
   12098:	6843      	ldr	r3, [r0, #4]
   1209a:	699b      	ldr	r3, [r3, #24]
   1209c:	b113      	cbz	r3, 120a4 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   1209e:	f100 0140 	add.w	r1, r0, #64	; 0x40
   120a2:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   120a4:	360c      	adds	r6, #12
   120a6:	e7ac      	b.n	12002 <bt_l2cap_connected+0xe>
	parent->next = child;
   120a8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   120aa:	656b      	str	r3, [r5, #84]	; 0x54
}
   120ac:	e7e1      	b.n	12072 <bt_l2cap_connected+0x7e>
   120ae:	bf00      	nop
   120b0:	0001e510 	.word	0x0001e510
   120b4:	0001e534 	.word	0x0001e534
   120b8:	00021906 	.word	0x00021906
   120bc:	0001faab 	.word	0x0001faab
   120c0:	00011fcd 	.word	0x00011fcd

000120c4 <l2cap_recv>:
{
   120c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   120c6:	898b      	ldrh	r3, [r1, #12]
{
   120c8:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   120ca:	2b03      	cmp	r3, #3
{
   120cc:	460d      	mov	r5, r1
   120ce:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   120d0:	d804      	bhi.n	120dc <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   120d2:	2145      	movs	r1, #69	; 0x45
   120d4:	483a      	ldr	r0, [pc, #232]	; (121c0 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   120d6:	f008 fc83 	bl	1a9e0 <printk>
		return 0;
   120da:	e00d      	b.n	120f8 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   120dc:	2104      	movs	r1, #4
   120de:	f105 0008 	add.w	r0, r5, #8
   120e2:	f003 fcff 	bl	15ae4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   120e6:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   120e8:	8843      	ldrh	r3, [r0, #2]
   120ea:	4604      	mov	r4, r0
	if (buf->len != len) {
   120ec:	4293      	cmp	r3, r2
   120ee:	d006      	beq.n	120fe <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   120f0:	2145      	movs	r1, #69	; 0x45
   120f2:	4834      	ldr	r0, [pc, #208]	; (121c4 <l2cap_recv+0x100>)
   120f4:	f008 fc74 	bl	1a9e0 <printk>
}
   120f8:	2000      	movs	r0, #0
   120fa:	b005      	add	sp, #20
   120fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   120fe:	7841      	ldrb	r1, [r0, #1]
   12100:	b911      	cbnz	r1, 12108 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   12102:	2145      	movs	r1, #69	; 0x45
   12104:	4830      	ldr	r0, [pc, #192]	; (121c8 <l2cap_recv+0x104>)
   12106:	e7e6      	b.n	120d6 <l2cap_recv+0x12>
	switch (hdr->code) {
   12108:	7802      	ldrb	r2, [r0, #0]
   1210a:	2a12      	cmp	r2, #18
   1210c:	d00f      	beq.n	1212e <l2cap_recv+0x6a>
   1210e:	2a13      	cmp	r2, #19
   12110:	d008      	beq.n	12124 <l2cap_recv+0x60>
   12112:	2a01      	cmp	r2, #1
   12114:	d0f0      	beq.n	120f8 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   12116:	2157      	movs	r1, #87	; 0x57
   12118:	482c      	ldr	r0, [pc, #176]	; (121cc <l2cap_recv+0x108>)
   1211a:	f008 fc61 	bl	1a9e0 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   1211e:	7861      	ldrb	r1, [r4, #1]
   12120:	6830      	ldr	r0, [r6, #0]
   12122:	e00d      	b.n	12140 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   12124:	2b01      	cmp	r3, #1
   12126:	d8e7      	bhi.n	120f8 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   12128:	2145      	movs	r1, #69	; 0x45
   1212a:	4829      	ldr	r0, [pc, #164]	; (121d0 <l2cap_recv+0x10c>)
   1212c:	e7d3      	b.n	120d6 <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   1212e:	2b07      	cmp	r3, #7
   12130:	d802      	bhi.n	12138 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   12132:	2145      	movs	r1, #69	; 0x45
   12134:	4827      	ldr	r0, [pc, #156]	; (121d4 <l2cap_recv+0x110>)
   12136:	e7ce      	b.n	120d6 <l2cap_recv+0x12>
   12138:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   1213a:	78e7      	ldrb	r7, [r4, #3]
   1213c:	b11f      	cbz	r7, 12146 <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1213e:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   12140:	f00a f9c0 	bl	1c4c4 <l2cap_send_reject.constprop.0>
		break;
   12144:	e7d8      	b.n	120f8 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   12146:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   12148:	7850      	ldrb	r0, [r2, #1]
   1214a:	7813      	ldrb	r3, [r2, #0]
   1214c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   12150:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   12154:	78d0      	ldrb	r0, [r2, #3]
   12156:	7893      	ldrb	r3, [r2, #2]
   12158:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1215c:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   12160:	7950      	ldrb	r0, [r2, #5]
   12162:	7913      	ldrb	r3, [r2, #4]
   12164:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   12168:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1216c:	7993      	ldrb	r3, [r2, #6]
   1216e:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12170:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   12172:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12176:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   12178:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1217c:	f7ff ff08 	bl	11f90 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12180:	4605      	mov	r5, r0
   12182:	2800      	cmp	r0, #0
   12184:	d0b8      	beq.n	120f8 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   12186:	a902      	add	r1, sp, #8
   12188:	4620      	mov	r0, r4
   1218a:	f7ff f895 	bl	112b8 <le_param_req>
   1218e:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   12190:	2102      	movs	r1, #2
   12192:	f105 0008 	add.w	r0, r5, #8
   12196:	f003 fcc3 	bl	15b20 <net_buf_simple_add>
	if (accepted) {
   1219a:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1219e:	b2db      	uxtb	r3, r3
   121a0:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   121a2:	462a      	mov	r2, r5
   121a4:	463b      	mov	r3, r7
   121a6:	2105      	movs	r1, #5
   121a8:	4620      	mov	r0, r4
   121aa:	9700      	str	r7, [sp, #0]
   121ac:	f00a f971 	bl	1c492 <bt_l2cap_send_cb>
	if (accepted) {
   121b0:	2e00      	cmp	r6, #0
   121b2:	d0a1      	beq.n	120f8 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   121b4:	4620      	mov	r0, r4
   121b6:	a902      	add	r1, sp, #8
   121b8:	f00a f8f2 	bl	1c3a0 <bt_conn_le_conn_update>
   121bc:	e79c      	b.n	120f8 <l2cap_recv+0x34>
   121be:	bf00      	nop
   121c0:	00021937 	.word	0x00021937
   121c4:	0002195a 	.word	0x0002195a
   121c8:	00021980 	.word	0x00021980
   121cc:	000219ef 	.word	0x000219ef
   121d0:	000219a6 	.word	0x000219a6
   121d4:	000219c7 	.word	0x000219c7

000121d8 <bt_l2cap_recv>:
{
   121d8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   121da:	898b      	ldrh	r3, [r1, #12]
{
   121dc:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   121de:	2b03      	cmp	r3, #3
{
   121e0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   121e2:	d808      	bhi.n	121f6 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   121e4:	2145      	movs	r1, #69	; 0x45
   121e6:	480e      	ldr	r0, [pc, #56]	; (12220 <bt_l2cap_recv+0x48>)
   121e8:	f008 fbfa 	bl	1a9e0 <printk>
	net_buf_unref(buf);
   121ec:	4620      	mov	r0, r4
}
   121ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   121f2:	f003 bb7f 	b.w	158f4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   121f6:	2104      	movs	r1, #4
   121f8:	f104 0008 	add.w	r0, r4, #8
   121fc:	f003 fc72 	bl	15ae4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   12200:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   12202:	4628      	mov	r0, r5
   12204:	4611      	mov	r1, r2
   12206:	f00a f984 	bl	1c512 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1220a:	b920      	cbnz	r0, 12216 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   1220c:	2157      	movs	r1, #87	; 0x57
   1220e:	4805      	ldr	r0, [pc, #20]	; (12224 <bt_l2cap_recv+0x4c>)
   12210:	f008 fbe6 	bl	1a9e0 <printk>
		net_buf_unref(buf);
   12214:	e7ea      	b.n	121ec <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   12216:	6843      	ldr	r3, [r0, #4]
   12218:	4621      	mov	r1, r4
   1221a:	691b      	ldr	r3, [r3, #16]
   1221c:	4798      	blx	r3
   1221e:	e7e5      	b.n	121ec <bt_l2cap_recv+0x14>
   12220:	00021a12 	.word	0x00021a12
   12224:	00021a34 	.word	0x00021a34

00012228 <bt_l2cap_update_conn_param>:
{
   12228:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1222a:	460c      	mov	r4, r1
	ident++;
   1222c:	4914      	ldr	r1, [pc, #80]	; (12280 <bt_l2cap_update_conn_param+0x58>)
{
   1222e:	4605      	mov	r5, r0
	ident++;
   12230:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12232:	2208      	movs	r2, #8
	ident++;
   12234:	3301      	adds	r3, #1
	if (!ident) {
   12236:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1223a:	bf08      	it	eq
   1223c:	2301      	moveq	r3, #1
   1223e:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12240:	2012      	movs	r0, #18
   12242:	7809      	ldrb	r1, [r1, #0]
   12244:	f7ff fea4 	bl	11f90 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12248:	4606      	mov	r6, r0
   1224a:	b1b0      	cbz	r0, 1227a <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   1224c:	2108      	movs	r1, #8
   1224e:	4408      	add	r0, r1
   12250:	f003 fc66 	bl	15b20 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   12254:	8822      	ldrh	r2, [r4, #0]
   12256:	2105      	movs	r1, #5
   12258:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1225a:	8862      	ldrh	r2, [r4, #2]
   1225c:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1225e:	88a2      	ldrh	r2, [r4, #4]
   12260:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   12262:	88e2      	ldrh	r2, [r4, #6]
   12264:	2400      	movs	r4, #0
   12266:	80c2      	strh	r2, [r0, #6]
   12268:	4623      	mov	r3, r4
   1226a:	4632      	mov	r2, r6
   1226c:	4628      	mov	r0, r5
   1226e:	9400      	str	r4, [sp, #0]
   12270:	f00a f90f 	bl	1c492 <bt_l2cap_send_cb>
	return 0;
   12274:	4620      	mov	r0, r4
}
   12276:	b002      	add	sp, #8
   12278:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1227a:	f06f 000b 	mvn.w	r0, #11
   1227e:	e7fa      	b.n	12276 <bt_l2cap_update_conn_param+0x4e>
   12280:	2000ea3a 	.word	0x2000ea3a

00012284 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   12284:	4b02      	ldr	r3, [pc, #8]	; (12290 <att_cfm_sent+0xc>)
   12286:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   1228a:	f00a b965 	b.w	1c558 <att_sent>
   1228e:	bf00      	nop
   12290:	0001c967 	.word	0x0001c967

00012294 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   12294:	4b02      	ldr	r3, [pc, #8]	; (122a0 <att_rsp_sent+0xc>)
   12296:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   1229a:	f00a b95d 	b.w	1c558 <att_sent>
   1229e:	bf00      	nop
   122a0:	0001c953 	.word	0x0001c953

000122a4 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   122a4:	4b02      	ldr	r3, [pc, #8]	; (122b0 <att_req_sent+0xc>)
   122a6:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   122aa:	f00a b955 	b.w	1c558 <att_sent>
   122ae:	bf00      	nop
   122b0:	00012461 	.word	0x00012461

000122b4 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   122b4:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   122b6:	7a83      	ldrb	r3, [r0, #10]
   122b8:	2b07      	cmp	r3, #7
   122ba:	d005      	beq.n	122c8 <att_get+0x14>
		BT_WARN("Not connected");
   122bc:	2157      	movs	r1, #87	; 0x57
   122be:	480e      	ldr	r0, [pc, #56]	; (122f8 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   122c0:	f008 fb8e 	bl	1a9e0 <printk>
		return NULL;
   122c4:	2400      	movs	r4, #0
   122c6:	e008      	b.n	122da <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   122c8:	2104      	movs	r1, #4
   122ca:	f00a f922 	bl	1c512 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   122ce:	4604      	mov	r4, r0
   122d0:	b928      	cbnz	r0, 122de <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   122d2:	2145      	movs	r1, #69	; 0x45
   122d4:	4809      	ldr	r0, [pc, #36]	; (122fc <att_get+0x48>)
   122d6:	f008 fb83 	bl	1a9e0 <printk>
	}

	return att_chan->att;
}
   122da:	4620      	mov	r0, r4
   122dc:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   122de:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   122e2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   122e6:	075b      	lsls	r3, r3, #29
   122e8:	d502      	bpl.n	122f0 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   122ea:	2157      	movs	r1, #87	; 0x57
   122ec:	4804      	ldr	r0, [pc, #16]	; (12300 <att_get+0x4c>)
   122ee:	e7e7      	b.n	122c0 <att_get+0xc>
	return att_chan->att;
   122f0:	f850 4c08 	ldr.w	r4, [r0, #-8]
   122f4:	e7f1      	b.n	122da <att_get+0x26>
   122f6:	bf00      	nop
   122f8:	00021a6e 	.word	0x00021a6e
   122fc:	00021a81 	.word	0x00021a81
   12300:	00021aa1 	.word	0x00021aa1

00012304 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   12304:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   12306:	3808      	subs	r0, #8
   12308:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1230a:	a901      	add	r1, sp, #4
   1230c:	4802      	ldr	r0, [pc, #8]	; (12318 <bt_att_released+0x14>)
   1230e:	f005 fe8d 	bl	1802c <k_mem_slab_free>
}
   12312:	b003      	add	sp, #12
   12314:	f85d fb04 	ldr.w	pc, [sp], #4
   12318:	200084d8 	.word	0x200084d8

0001231c <find_type_cb>:
{
   1231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12320:	f642 0301 	movw	r3, #10241	; 0x2801
   12324:	2500      	movs	r5, #0
{
   12326:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   12328:	f8d2 9000 	ldr.w	r9, [r2]
{
   1232c:	4607      	mov	r7, r0
   1232e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12330:	6800      	ldr	r0, [r0, #0]
   12332:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   12334:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   12338:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1233a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1233e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   12342:	f009 fdec 	bl	1bf1e <bt_uuid_cmp>
   12346:	2800      	cmp	r0, #0
   12348:	d060      	beq.n	1240c <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1234a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1234e:	6838      	ldr	r0, [r7, #0]
   12350:	a90b      	add	r1, sp, #44	; 0x2c
   12352:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   12356:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1235a:	f009 fde0 	bl	1bf1e <bt_uuid_cmp>
   1235e:	b138      	cbz	r0, 12370 <find_type_cb+0x54>
		if (data->group &&
   12360:	68a3      	ldr	r3, [r4, #8]
   12362:	b11b      	cbz	r3, 1236c <find_type_cb+0x50>
   12364:	885a      	ldrh	r2, [r3, #2]
   12366:	42b2      	cmp	r2, r6
   12368:	d200      	bcs.n	1236c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1236a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1236c:	2001      	movs	r0, #1
   1236e:	e009      	b.n	12384 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   12370:	6861      	ldr	r1, [r4, #4]
   12372:	4608      	mov	r0, r1
   12374:	f00a f8e8 	bl	1c548 <net_buf_frags_len>
   12378:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1237c:	1a1b      	subs	r3, r3, r0
   1237e:	2b03      	cmp	r3, #3
   12380:	d803      	bhi.n	1238a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   12382:	2000      	movs	r0, #0
}
   12384:	b011      	add	sp, #68	; 0x44
   12386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1238a:	4608      	mov	r0, r1
   1238c:	f003 fb0e 	bl	159ac <net_buf_frag_last>
   12390:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   12392:	6860      	ldr	r0, [r4, #4]
   12394:	f00a f8d8 	bl	1c548 <net_buf_frags_len>
   12398:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1239c:	f105 0b08 	add.w	fp, r5, #8
   123a0:	ebaa 0a00 	sub.w	sl, sl, r0
   123a4:	4658      	mov	r0, fp
   123a6:	f00b f87c 	bl	1d4a2 <net_buf_simple_tailroom>
   123aa:	4582      	cmp	sl, r0
   123ac:	d231      	bcs.n	12412 <find_type_cb+0xf6>
   123ae:	6860      	ldr	r0, [r4, #4]
   123b0:	f00a f8ca 	bl	1c548 <net_buf_frags_len>
   123b4:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   123b8:	1a18      	subs	r0, r3, r0
	if (!len) {
   123ba:	b970      	cbnz	r0, 123da <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   123bc:	6863      	ldr	r3, [r4, #4]
   123be:	7998      	ldrb	r0, [r3, #6]
   123c0:	f003 f918 	bl	155f4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   123c4:	2200      	movs	r2, #0
   123c6:	2300      	movs	r3, #0
   123c8:	f00b f845 	bl	1d456 <net_buf_alloc_fixed>
		if (!frag) {
   123cc:	4605      	mov	r5, r0
   123ce:	2800      	cmp	r0, #0
   123d0:	d0d7      	beq.n	12382 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   123d2:	4601      	mov	r1, r0
   123d4:	6860      	ldr	r0, [r4, #4]
   123d6:	f003 fb29 	bl	15a2c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   123da:	2300      	movs	r3, #0
   123dc:	9300      	str	r3, [sp, #0]
   123de:	4639      	mov	r1, r7
   123e0:	f8d7 9004 	ldr.w	r9, [r7, #4]
   123e4:	2310      	movs	r3, #16
   123e6:	4640      	mov	r0, r8
   123e8:	aa02      	add	r2, sp, #8
   123ea:	47c8      	blx	r9
	if (read < 0) {
   123ec:	1e07      	subs	r7, r0, #0
   123ee:	db0d      	blt.n	1240c <find_type_cb+0xf0>
	if (read != data->value_len) {
   123f0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   123f2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   123f4:	42ba      	cmp	r2, r7
   123f6:	d02b      	beq.n	12450 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   123f8:	4601      	mov	r1, r0
   123fa:	a80b      	add	r0, sp, #44	; 0x2c
   123fc:	f009 fdbd 	bl	1bf7a <bt_uuid_create>
   12400:	b958      	cbnz	r0, 1241a <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   12402:	2157      	movs	r1, #87	; 0x57
   12404:	7c22      	ldrb	r2, [r4, #16]
   12406:	4814      	ldr	r0, [pc, #80]	; (12458 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   12408:	f008 faea 	bl	1a9e0 <printk>
	data->group = NULL;
   1240c:	2300      	movs	r3, #0
   1240e:	60a3      	str	r3, [r4, #8]
   12410:	e7ac      	b.n	1236c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   12412:	4658      	mov	r0, fp
   12414:	f00b f845 	bl	1d4a2 <net_buf_simple_tailroom>
   12418:	e7cf      	b.n	123ba <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1241a:	b2fa      	uxtb	r2, r7
   1241c:	a902      	add	r1, sp, #8
   1241e:	a806      	add	r0, sp, #24
   12420:	f009 fdab 	bl	1bf7a <bt_uuid_create>
   12424:	b918      	cbnz	r0, 1242e <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   12426:	463a      	mov	r2, r7
   12428:	2157      	movs	r1, #87	; 0x57
   1242a:	480c      	ldr	r0, [pc, #48]	; (1245c <find_type_cb+0x140>)
   1242c:	e7ec      	b.n	12408 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1242e:	a906      	add	r1, sp, #24
   12430:	a80b      	add	r0, sp, #44	; 0x2c
   12432:	f009 fd74 	bl	1bf1e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   12436:	2800      	cmp	r0, #0
   12438:	d1e8      	bne.n	1240c <find_type_cb+0xf0>
	data->err = 0x00;
   1243a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1243c:	2104      	movs	r1, #4
   1243e:	7463      	strb	r3, [r4, #17]
   12440:	f105 0008 	add.w	r0, r5, #8
   12444:	f003 fb6c 	bl	15b20 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   12448:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1244a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1244c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1244e:	e78d      	b.n	1236c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   12450:	a902      	add	r1, sp, #8
   12452:	f009 fcde 	bl	1be12 <memcmp>
   12456:	e7ee      	b.n	12436 <find_type_cb+0x11a>
   12458:	00021aca 	.word	0x00021aca
   1245c:	00021aee 	.word	0x00021aee

00012460 <chan_req_sent>:
	if (chan->req) {
   12460:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   12464:	b13b      	cbz	r3, 12476 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12466:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   1246a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1246e:	2300      	movs	r3, #0
   12470:	4801      	ldr	r0, [pc, #4]	; (12478 <chan_req_sent+0x18>)
   12472:	f007 bb3f 	b.w	19af4 <k_delayed_work_submit_to_queue>
}
   12476:	4770      	bx	lr
   12478:	200098e0 	.word	0x200098e0

0001247c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1247c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1247e:	2300      	movs	r3, #0
{
   12480:	4606      	mov	r6, r0
   12482:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12484:	2200      	movs	r2, #0
   12486:	4669      	mov	r1, sp
   12488:	4823      	ldr	r0, [pc, #140]	; (12518 <bt_att_accept+0x9c>)
   1248a:	f005 fd75 	bl	17f78 <k_mem_slab_alloc>
   1248e:	4604      	mov	r4, r0
   12490:	b148      	cbz	r0, 124a6 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   12492:	4632      	mov	r2, r6
   12494:	2145      	movs	r1, #69	; 0x45
   12496:	4821      	ldr	r0, [pc, #132]	; (1251c <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12498:	f008 faa2 	bl	1a9e0 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1249c:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   124a0:	4620      	mov	r0, r4
   124a2:	b003      	add	sp, #12
   124a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   124a6:	4601      	mov	r1, r0
   124a8:	2230      	movs	r2, #48	; 0x30
   124aa:	9800      	ldr	r0, [sp, #0]
   124ac:	f009 fced 	bl	1be8a <memset>
	att->conn = conn;
   124b0:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   124b2:	2200      	movs	r2, #0
	list->head = NULL;
   124b4:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   124b8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   124bc:	60ac      	str	r4, [r5, #8]
   124be:	2300      	movs	r3, #0
   124c0:	4817      	ldr	r0, [pc, #92]	; (12520 <bt_att_accept+0xa4>)
   124c2:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   124c4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   124c6:	f005 fd57 	bl	17f78 <k_mem_slab_alloc>
   124ca:	4604      	mov	r4, r0
   124cc:	b118      	cbz	r0, 124d6 <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   124ce:	2145      	movs	r1, #69	; 0x45
   124d0:	682a      	ldr	r2, [r5, #0]
   124d2:	4814      	ldr	r0, [pc, #80]	; (12524 <bt_att_accept+0xa8>)
   124d4:	e7e0      	b.n	12498 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   124d6:	4601      	mov	r1, r0
   124d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   124dc:	9801      	ldr	r0, [sp, #4]
   124de:	f009 fcd4 	bl	1be8a <memset>
	chan->chan.chan.ops = &ops;
   124e2:	9801      	ldr	r0, [sp, #4]
   124e4:	4b10      	ldr	r3, [pc, #64]	; (12528 <bt_att_accept+0xac>)
   124e6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   124e8:	30d0      	adds	r0, #208	; 0xd0
   124ea:	f00b fd22 	bl	1df32 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   124ee:	9801      	ldr	r0, [sp, #4]
   124f0:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   124f4:	2203      	movs	r2, #3
   124f6:	4611      	mov	r1, r2
   124f8:	f00b fd80 	bl	1dffc <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   124fc:	9b01      	ldr	r3, [sp, #4]
   124fe:	33c8      	adds	r3, #200	; 0xc8
   12500:	e8d3 2fef 	ldaex	r2, [r3]
   12504:	e8c3 4fe1 	stlex	r1, r4, [r3]
   12508:	2900      	cmp	r1, #0
   1250a:	d1f9      	bne.n	12500 <bt_att_accept+0x84>
	chan->att = att;
   1250c:	9b01      	ldr	r3, [sp, #4]
   1250e:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   12512:	603b      	str	r3, [r7, #0]
	return 0;
   12514:	e7c4      	b.n	124a0 <bt_att_accept+0x24>
   12516:	bf00      	nop
   12518:	200084bc 	.word	0x200084bc
   1251c:	00021b12 	.word	0x00021b12
   12520:	200084d8 	.word	0x200084d8
   12524:	00021b3c 	.word	0x00021b3c
   12528:	20008350 	.word	0x20008350

0001252c <read_group_cb>:
{
   1252c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12530:	f04f 0800 	mov.w	r8, #0
   12534:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   12538:	4605      	mov	r5, r0
   1253a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1253c:	6800      	ldr	r0, [r0, #0]
   1253e:	a902      	add	r1, sp, #8
{
   12540:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   12542:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12544:	f88d 8008 	strb.w	r8, [sp, #8]
   12548:	f8ad 300a 	strh.w	r3, [sp, #10]
   1254c:	f009 fce7 	bl	1bf1e <bt_uuid_cmp>
   12550:	b1a0      	cbz	r0, 1257c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12552:	f642 0301 	movw	r3, #10241	; 0x2801
   12556:	6828      	ldr	r0, [r5, #0]
   12558:	a903      	add	r1, sp, #12
   1255a:	f88d 800c 	strb.w	r8, [sp, #12]
   1255e:	f8ad 300e 	strh.w	r3, [sp, #14]
   12562:	f009 fcdc 	bl	1bf1e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12566:	b148      	cbz	r0, 1257c <read_group_cb+0x50>
		if (data->group &&
   12568:	6923      	ldr	r3, [r4, #16]
   1256a:	b11b      	cbz	r3, 12574 <read_group_cb+0x48>
   1256c:	885a      	ldrh	r2, [r3, #2]
   1256e:	42b2      	cmp	r2, r6
   12570:	d200      	bcs.n	12574 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   12572:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   12574:	2001      	movs	r0, #1
}
   12576:	b004      	add	sp, #16
   12578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1257c:	6861      	ldr	r1, [r4, #4]
   1257e:	6828      	ldr	r0, [r5, #0]
   12580:	f009 fccd 	bl	1bf1e <bt_uuid_cmp>
   12584:	b110      	cbz	r0, 1258c <read_group_cb+0x60>
		data->group = NULL;
   12586:	2300      	movs	r3, #0
   12588:	6123      	str	r3, [r4, #16]
   1258a:	e7f3      	b.n	12574 <read_group_cb+0x48>
	if (data->rsp->len &&
   1258c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1258e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   12590:	781a      	ldrb	r2, [r3, #0]
   12592:	b13a      	cbz	r2, 125a4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12594:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   12598:	8981      	ldrh	r1, [r0, #12]
   1259a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1259c:	4293      	cmp	r3, r2
   1259e:	da01      	bge.n	125a4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   125a0:	2000      	movs	r0, #0
   125a2:	e7e8      	b.n	12576 <read_group_cb+0x4a>
   125a4:	2104      	movs	r1, #4
   125a6:	3008      	adds	r0, #8
   125a8:	f003 faba 	bl	15b20 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   125ac:	4b09      	ldr	r3, [pc, #36]	; (125d4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   125ae:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   125b0:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   125b2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   125b4:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   125b6:	68a2      	ldr	r2, [r4, #8]
   125b8:	9300      	str	r3, [sp, #0]
   125ba:	4638      	mov	r0, r7
   125bc:	2300      	movs	r3, #0
   125be:	9401      	str	r4, [sp, #4]
   125c0:	f00a f8bd 	bl	1c73e <att_chan_read>
	if (read < 0) {
   125c4:	2800      	cmp	r0, #0
   125c6:	dbeb      	blt.n	125a0 <read_group_cb+0x74>
	if (!data->group) {
   125c8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   125ca:	3800      	subs	r0, #0
   125cc:	bf18      	it	ne
   125ce:	2001      	movne	r0, #1
   125d0:	e7d1      	b.n	12576 <read_group_cb+0x4a>
   125d2:	bf00      	nop
   125d4:	0001c6c3 	.word	0x0001c6c3

000125d8 <chan_send>:
{
   125d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   125dc:	688b      	ldr	r3, [r1, #8]
{
   125de:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   125e0:	781b      	ldrb	r3, [r3, #0]
{
   125e2:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   125e4:	2bd2      	cmp	r3, #210	; 0xd2
{
   125e6:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   125e8:	d110      	bne.n	1260c <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   125ea:	6803      	ldr	r3, [r0, #0]
   125ec:	6818      	ldr	r0, [r3, #0]
   125ee:	f00a ff2c 	bl	1d44a <bt_smp_sign>
		if (err) {
   125f2:	4606      	mov	r6, r0
   125f4:	b150      	cbz	r0, 1260c <chan_send+0x34>
			BT_ERR("Error signing data");
   125f6:	2145      	movs	r1, #69	; 0x45
   125f8:	4824      	ldr	r0, [pc, #144]	; (1268c <chan_send+0xb4>)
   125fa:	f008 f9f1 	bl	1a9e0 <printk>
		net_buf_unref(buf);
   125fe:	4620      	mov	r0, r4
   12600:	f003 f978 	bl	158f4 <net_buf_unref>
}
   12604:	4630      	mov	r0, r6
   12606:	b003      	add	sp, #12
   12608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1260c:	f104 0008 	add.w	r0, r4, #8
   12610:	f00a ff43 	bl	1d49a <net_buf_simple_headroom>
	state->len = buf->len;
   12614:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   12618:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1261a:	f1b9 0f00 	cmp.w	r9, #0
   1261e:	d10a      	bne.n	12636 <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   12620:	68a3      	ldr	r3, [r4, #8]
   12622:	7818      	ldrb	r0, [r3, #0]
   12624:	f009 ffb0 	bl	1c588 <att_op_get_type>
   12628:	1e43      	subs	r3, r0, #1
   1262a:	b2db      	uxtb	r3, r3
   1262c:	2b04      	cmp	r3, #4
   1262e:	bf9c      	itt	ls
   12630:	4a17      	ldrls	r2, [pc, #92]	; (12690 <chan_send+0xb8>)
   12632:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12636:	682b      	ldr	r3, [r5, #0]
   12638:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   1263a:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1263e:	681e      	ldr	r6, [r3, #0]
   12640:	f003 f99c 	bl	1597c <net_buf_ref>
   12644:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   12648:	4b12      	ldr	r3, [pc, #72]	; (12694 <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1264a:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   1264c:	4299      	cmp	r1, r3
   1264e:	d019      	beq.n	12684 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   12650:	4b11      	ldr	r3, [pc, #68]	; (12698 <chan_send+0xc0>)
   12652:	4299      	cmp	r1, r3
   12654:	d018      	beq.n	12688 <chan_send+0xb0>
		return att_sent;
   12656:	f8df c044 	ldr.w	ip, [pc, #68]	; 1269c <chan_send+0xc4>
   1265a:	4b11      	ldr	r3, [pc, #68]	; (126a0 <chan_send+0xc8>)
   1265c:	4811      	ldr	r0, [pc, #68]	; (126a4 <chan_send+0xcc>)
   1265e:	4561      	cmp	r1, ip
   12660:	bf18      	it	ne
   12662:	4603      	movne	r3, r0
				&chan->chan.chan);
   12664:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12666:	4630      	mov	r0, r6
   12668:	2104      	movs	r1, #4
   1266a:	9500      	str	r5, [sp, #0]
   1266c:	f009 ff11 	bl	1c492 <bt_l2cap_send_cb>
	if (!err) {
   12670:	4606      	mov	r6, r0
   12672:	2800      	cmp	r0, #0
   12674:	d0c3      	beq.n	125fe <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   12676:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12678:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1267c:	fa10 f787 	uxtah	r7, r0, r7
   12680:	60a7      	str	r7, [r4, #8]
}
   12682:	e7bf      	b.n	12604 <chan_send+0x2c>
		return att_rsp_sent;
   12684:	4b08      	ldr	r3, [pc, #32]	; (126a8 <chan_send+0xd0>)
   12686:	e7ed      	b.n	12664 <chan_send+0x8c>
		return att_cfm_sent;
   12688:	4b08      	ldr	r3, [pc, #32]	; (126ac <chan_send+0xd4>)
   1268a:	e7eb      	b.n	12664 <chan_send+0x8c>
   1268c:	00021b66 	.word	0x00021b66
   12690:	0001ebd8 	.word	0x0001ebd8
   12694:	0001c953 	.word	0x0001c953
   12698:	0001c967 	.word	0x0001c967
   1269c:	00012461 	.word	0x00012461
   126a0:	000122a5 	.word	0x000122a5
   126a4:	0001c559 	.word	0x0001c559
   126a8:	00012295 	.word	0x00012295
   126ac:	00012285 	.word	0x00012285

000126b0 <bt_att_chan_req_send>:
{
   126b0:	b570      	push	{r4, r5, r6, lr}
   126b2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   126b4:	4604      	mov	r4, r0
   126b6:	b950      	cbnz	r0, 126ce <bt_att_chan_req_send+0x1e>
   126b8:	4924      	ldr	r1, [pc, #144]	; (1274c <bt_att_chan_req_send+0x9c>)
   126ba:	4825      	ldr	r0, [pc, #148]	; (12750 <bt_att_chan_req_send+0xa0>)
   126bc:	f240 224f 	movw	r2, #591	; 0x24f
   126c0:	f008 f98e 	bl	1a9e0 <printk>
   126c4:	f240 214f 	movw	r1, #591	; 0x24f
   126c8:	4820      	ldr	r0, [pc, #128]	; (1274c <bt_att_chan_req_send+0x9c>)
   126ca:	f008 fc2f 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(req);
   126ce:	b955      	cbnz	r5, 126e6 <bt_att_chan_req_send+0x36>
   126d0:	491e      	ldr	r1, [pc, #120]	; (1274c <bt_att_chan_req_send+0x9c>)
   126d2:	481f      	ldr	r0, [pc, #124]	; (12750 <bt_att_chan_req_send+0xa0>)
   126d4:	f44f 7214 	mov.w	r2, #592	; 0x250
   126d8:	f008 f982 	bl	1a9e0 <printk>
   126dc:	f44f 7114 	mov.w	r1, #592	; 0x250
   126e0:	481a      	ldr	r0, [pc, #104]	; (1274c <bt_att_chan_req_send+0x9c>)
   126e2:	f008 fc23 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   126e6:	686b      	ldr	r3, [r5, #4]
   126e8:	b953      	cbnz	r3, 12700 <bt_att_chan_req_send+0x50>
   126ea:	4918      	ldr	r1, [pc, #96]	; (1274c <bt_att_chan_req_send+0x9c>)
   126ec:	4818      	ldr	r0, [pc, #96]	; (12750 <bt_att_chan_req_send+0xa0>)
   126ee:	f240 2251 	movw	r2, #593	; 0x251
   126f2:	f008 f975 	bl	1a9e0 <printk>
   126f6:	f240 2151 	movw	r1, #593	; 0x251
   126fa:	4814      	ldr	r0, [pc, #80]	; (1274c <bt_att_chan_req_send+0x9c>)
   126fc:	f008 fc16 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   12700:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12704:	b153      	cbz	r3, 1271c <bt_att_chan_req_send+0x6c>
   12706:	4911      	ldr	r1, [pc, #68]	; (1274c <bt_att_chan_req_send+0x9c>)
   12708:	4811      	ldr	r0, [pc, #68]	; (12750 <bt_att_chan_req_send+0xa0>)
   1270a:	f240 2252 	movw	r2, #594	; 0x252
   1270e:	f008 f967 	bl	1a9e0 <printk>
   12712:	f240 2152 	movw	r1, #594	; 0x252
   12716:	480d      	ldr	r0, [pc, #52]	; (1274c <bt_att_chan_req_send+0x9c>)
   12718:	f008 fc08 	bl	1af2c <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1271c:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   12720:	2200      	movs	r2, #0
   12722:	2300      	movs	r3, #0
   12724:	4630      	mov	r0, r6
   12726:	f006 ffbf 	bl	196a8 <z_impl_k_sem_take>
   1272a:	2800      	cmp	r0, #0
   1272c:	db0a      	blt.n	12744 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   1272e:	4620      	mov	r0, r4
   12730:	4629      	mov	r1, r5
   12732:	f00a f8e8 	bl	1c906 <chan_req_send>
	if (err < 0) {
   12736:	1e04      	subs	r4, r0, #0
   12738:	da02      	bge.n	12740 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   1273a:	4630      	mov	r0, r6
   1273c:	f006 ff78 	bl	19630 <z_impl_k_sem_give>
}
   12740:	4620      	mov	r0, r4
   12742:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   12744:	f06f 040a 	mvn.w	r4, #10
   12748:	e7fa      	b.n	12740 <bt_att_chan_req_send+0x90>
   1274a:	bf00      	nop
   1274c:	00021b7e 	.word	0x00021b7e
   12750:	0001faab 	.word	0x0001faab

00012754 <read_type_cb>:
{
   12754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   12758:	f8d2 8000 	ldr.w	r8, [r2]
{
   1275c:	4606      	mov	r6, r0
   1275e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12760:	6800      	ldr	r0, [r0, #0]
   12762:	6851      	ldr	r1, [r2, #4]
{
   12764:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   12766:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1276a:	f009 fbd8 	bl	1bf1e <bt_uuid_cmp>
   1276e:	4607      	mov	r7, r0
   12770:	2800      	cmp	r0, #0
   12772:	d13e      	bne.n	127f2 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   12774:	4628      	mov	r0, r5
   12776:	2215      	movs	r2, #21
   12778:	4631      	mov	r1, r6
   1277a:	f00a fd5f 	bl	1d23c <bt_gatt_check_perm>
   1277e:	4605      	mov	r5, r0
   12780:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   12782:	b148      	cbz	r0, 12798 <read_type_cb+0x44>
		if (data->rsp->len) {
   12784:	68e3      	ldr	r3, [r4, #12]
   12786:	781b      	ldrb	r3, [r3, #0]
   12788:	b923      	cbnz	r3, 12794 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1278a:	2500      	movs	r5, #0
}
   1278c:	4628      	mov	r0, r5
   1278e:	b003      	add	sp, #12
   12790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   12794:	7527      	strb	r7, [r4, #20]
   12796:	e7f8      	b.n	1278a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12798:	68a0      	ldr	r0, [r4, #8]
   1279a:	f003 f907 	bl	159ac <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1279e:	2102      	movs	r1, #2
   127a0:	3008      	adds	r0, #8
   127a2:	f003 f9bd 	bl	15b20 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   127a6:	4b14      	ldr	r3, [pc, #80]	; (127f8 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   127a8:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   127aa:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   127ac:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   127b0:	68a2      	ldr	r2, [r4, #8]
   127b2:	9300      	str	r3, [sp, #0]
   127b4:	4640      	mov	r0, r8
   127b6:	462b      	mov	r3, r5
   127b8:	9401      	str	r4, [sp, #4]
   127ba:	f009 ffc0 	bl	1c73e <att_chan_read>
	if (read < 0) {
   127be:	2800      	cmp	r0, #0
   127c0:	da07      	bge.n	127d2 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   127c2:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   127c6:	bf32      	itee	cc
   127c8:	200e      	movcc	r0, #14
		return -err;
   127ca:	4240      	negcs	r0, r0
   127cc:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   127ce:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   127d0:	e7dc      	b.n	1278c <read_type_cb+0x38>
	if (!data->item) {
   127d2:	6923      	ldr	r3, [r4, #16]
   127d4:	2b00      	cmp	r3, #0
   127d6:	d0d8      	beq.n	1278a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   127d8:	68a0      	ldr	r0, [r4, #8]
   127da:	f009 feb5 	bl	1c548 <net_buf_frags_len>
   127de:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   127e2:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   127e4:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   127e6:	7818      	ldrb	r0, [r3, #0]
   127e8:	4285      	cmp	r5, r0
   127ea:	bf94      	ite	ls
   127ec:	2500      	movls	r5, #0
   127ee:	2501      	movhi	r5, #1
   127f0:	e7cc      	b.n	1278c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   127f2:	2501      	movs	r5, #1
   127f4:	e7ca      	b.n	1278c <read_type_cb+0x38>
   127f6:	bf00      	nop
   127f8:	0001c565 	.word	0x0001c565

000127fc <bt_att_connected>:
{
   127fc:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   127fe:	2104      	movs	r1, #4
{
   12800:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   12802:	6800      	ldr	r0, [r0, #0]
   12804:	f009 fe75 	bl	1c4f2 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   12808:	4605      	mov	r5, r0
   1280a:	b950      	cbnz	r0, 12822 <bt_att_connected+0x26>
   1280c:	4919      	ldr	r1, [pc, #100]	; (12874 <bt_att_connected+0x78>)
   1280e:	481a      	ldr	r0, [pc, #104]	; (12878 <bt_att_connected+0x7c>)
   12810:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   12814:	f008 f8e4 	bl	1a9e0 <printk>
   12818:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   1281c:	4815      	ldr	r0, [pc, #84]	; (12874 <bt_att_connected+0x78>)
   1281e:	f008 fb85 	bl	1af2c <assert_post_action>
	struct bt_att *att = att_chan->att;
   12822:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   12826:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12828:	b91b      	cbnz	r3, 12832 <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   1282a:	f105 000c 	add.w	r0, r5, #12
   1282e:	f00b fb80 	bl	1df32 <z_impl_k_queue_init>
	parent->next = child;
   12832:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   12834:	f504 739a 	add.w	r3, r4, #308	; 0x134
   12838:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   1283c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   1283e:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   12840:	b902      	cbnz	r2, 12844 <bt_att_connected+0x48>
	list->tail = node;
   12842:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12844:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   12848:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1284c:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1284e:	bf58      	it	pl
   12850:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12852:	f04f 0230 	mov.w	r2, #48	; 0x30
   12856:	bf5c      	itt	pl
   12858:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1285c:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   12860:	2100      	movs	r1, #0
   12862:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   12866:	f009 fb10 	bl	1be8a <memset>
   1286a:	4b04      	ldr	r3, [pc, #16]	; (1287c <bt_att_connected+0x80>)
   1286c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   12870:	bd38      	pop	{r3, r4, r5, pc}
   12872:	bf00      	nop
   12874:	00021b7e 	.word	0x00021b7e
   12878:	0001faab 	.word	0x0001faab
   1287c:	00013189 	.word	0x00013189

00012880 <bt_att_chan_create_pdu>:
{
   12880:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12882:	1c53      	adds	r3, r2, #1
   12884:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   12888:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1288a:	4293      	cmp	r3, r2
   1288c:	d906      	bls.n	1289c <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1288e:	2157      	movs	r1, #87	; 0x57
   12890:	4813      	ldr	r0, [pc, #76]	; (128e0 <bt_att_chan_create_pdu+0x60>)
   12892:	f008 f8a5 	bl	1a9e0 <printk>
		return NULL;
   12896:	2400      	movs	r4, #0
}
   12898:	4620      	mov	r0, r4
   1289a:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   1289c:	4608      	mov	r0, r1
   1289e:	f009 fe73 	bl	1c588 <att_op_get_type>
   128a2:	2802      	cmp	r0, #2
   128a4:	d001      	beq.n	128aa <bt_att_chan_create_pdu+0x2a>
   128a6:	2804      	cmp	r0, #4
   128a8:	d10e      	bne.n	128c8 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   128aa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   128ae:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   128b0:	2100      	movs	r1, #0
   128b2:	4608      	mov	r0, r1
   128b4:	f009 fdea 	bl	1c48c <bt_l2cap_create_pdu_timeout>
   128b8:	4604      	mov	r4, r0
	if (!buf) {
   128ba:	b950      	cbnz	r0, 128d2 <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   128bc:	462a      	mov	r2, r5
   128be:	2145      	movs	r1, #69	; 0x45
   128c0:	4808      	ldr	r0, [pc, #32]	; (128e4 <bt_att_chan_create_pdu+0x64>)
   128c2:	f008 f88d 	bl	1a9e0 <printk>
		return NULL;
   128c6:	e7e7      	b.n	12898 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   128c8:	f04f 32ff 	mov.w	r2, #4294967295
   128cc:	f04f 33ff 	mov.w	r3, #4294967295
   128d0:	e7ee      	b.n	128b0 <bt_att_chan_create_pdu+0x30>
   128d2:	2101      	movs	r1, #1
   128d4:	3008      	adds	r0, #8
   128d6:	f003 f923 	bl	15b20 <net_buf_simple_add>
	hdr->code = op;
   128da:	7005      	strb	r5, [r0, #0]
	return buf;
   128dc:	e7dc      	b.n	12898 <bt_att_chan_create_pdu+0x18>
   128de:	bf00      	nop
   128e0:	00021bad 	.word	0x00021bad
   128e4:	000218c4 	.word	0x000218c4

000128e8 <att_indicate>:
{
   128e8:	b570      	push	{r4, r5, r6, lr}
   128ea:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   128ec:	f101 0008 	add.w	r0, r1, #8
   128f0:	460d      	mov	r5, r1
   128f2:	f00a fdca 	bl	1d48a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   128f6:	6826      	ldr	r6, [r4, #0]
   128f8:	4601      	mov	r1, r0
   128fa:	89ab      	ldrh	r3, [r5, #12]
   128fc:	68aa      	ldr	r2, [r5, #8]
   128fe:	6830      	ldr	r0, [r6, #0]
   12900:	f00a fd2b 	bl	1d35a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   12904:	211e      	movs	r1, #30
   12906:	2200      	movs	r2, #0
   12908:	4620      	mov	r0, r4
   1290a:	f7ff ffb9 	bl	12880 <bt_att_chan_create_pdu>
	if (!buf) {
   1290e:	4601      	mov	r1, r0
   12910:	b118      	cbz	r0, 1291a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   12912:	4620      	mov	r0, r4
   12914:	4a02      	ldr	r2, [pc, #8]	; (12920 <att_indicate+0x38>)
   12916:	f009 ffb4 	bl	1c882 <bt_att_chan_send_rsp>
}
   1291a:	2000      	movs	r0, #0
   1291c:	bd70      	pop	{r4, r5, r6, pc}
   1291e:	bf00      	nop
   12920:	0001c967 	.word	0x0001c967

00012924 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   12924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12928:	4688      	mov	r8, r1
   1292a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1292c:	2101      	movs	r1, #1
   1292e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   12930:	4605      	mov	r5, r0
   12932:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   12934:	f7ff ffa4 	bl	12880 <bt_att_chan_create_pdu>
	if (!buf) {
   12938:	4604      	mov	r4, r0
   1293a:	b178      	cbz	r0, 1295c <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1293c:	2104      	movs	r1, #4
   1293e:	3008      	adds	r0, #8
   12940:	f003 f8ee 	bl	15b20 <net_buf_simple_add>
	rsp->request = req;
   12944:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   12948:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1294a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1294e:	4621      	mov	r1, r4
   12950:	4628      	mov	r0, r5
}
   12952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   12956:	4a02      	ldr	r2, [pc, #8]	; (12960 <send_err_rsp.part.0+0x3c>)
   12958:	f009 bf93 	b.w	1c882 <bt_att_chan_send_rsp>
}
   1295c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12960:	0001c953 	.word	0x0001c953

00012964 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   12964:	898b      	ldrh	r3, [r1, #12]
{
   12966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1296a:	4604      	mov	r4, r0
   1296c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   1296e:	b933      	cbnz	r3, 1297e <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   12970:	2145      	movs	r1, #69	; 0x45
   12972:	4838      	ldr	r0, [pc, #224]	; (12a54 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   12974:	f008 f834 	bl	1a9e0 <printk>
}
   12978:	2000      	movs	r0, #0
   1297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1297e:	2101      	movs	r1, #1
   12980:	f108 0008 	add.w	r0, r8, #8
   12984:	f003 f8ae 	bl	15ae4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   12988:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1298c:	4605      	mov	r5, r0
   1298e:	2b00      	cmp	r3, #0
   12990:	d0f2      	beq.n	12978 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12992:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   12994:	7802      	ldrb	r2, [r0, #0]
   12996:	4930      	ldr	r1, [pc, #192]	; (12a58 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   12998:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   1299c:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   129a0:	4290      	cmp	r0, r2
   129a2:	d114      	bne.n	129ce <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   129a4:	00d8      	lsls	r0, r3, #3
   129a6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   129aa:	789f      	ldrb	r7, [r3, #2]
   129ac:	2f01      	cmp	r7, #1
   129ae:	d123      	bne.n	129f8 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   129b0:	34c0      	adds	r4, #192	; 0xc0
   129b2:	e8d4 3fef 	ldaex	r3, [r4]
   129b6:	f043 0201 	orr.w	r2, r3, #1
   129ba:	e8c4 2fec 	stlex	ip, r2, [r4]
   129be:	f1bc 0f00 	cmp.w	ip, #0
   129c2:	d1f6      	bne.n	129b2 <bt_att_recv+0x4e>
   129c4:	07da      	lsls	r2, r3, #31
   129c6:	d528      	bpl.n	12a1a <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   129c8:	2157      	movs	r1, #87	; 0x57
   129ca:	4824      	ldr	r0, [pc, #144]	; (12a5c <bt_att_recv+0xf8>)
   129cc:	e7d2      	b.n	12974 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   129ce:	3301      	adds	r3, #1
   129d0:	2b1c      	cmp	r3, #28
   129d2:	d1e3      	bne.n	1299c <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   129d4:	2157      	movs	r1, #87	; 0x57
   129d6:	4822      	ldr	r0, [pc, #136]	; (12a60 <bt_att_recv+0xfc>)
   129d8:	f008 f802 	bl	1a9e0 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   129dc:	7829      	ldrb	r1, [r5, #0]
   129de:	4608      	mov	r0, r1
   129e0:	f009 fdd2 	bl	1c588 <att_op_get_type>
   129e4:	2800      	cmp	r0, #0
   129e6:	d0c7      	beq.n	12978 <bt_att_recv+0x14>
	if (!req) {
   129e8:	2900      	cmp	r1, #0
   129ea:	d0c5      	beq.n	12978 <bt_att_recv+0x14>
   129ec:	2306      	movs	r3, #6
   129ee:	2200      	movs	r2, #0
   129f0:	4630      	mov	r0, r6
   129f2:	f7ff ff97 	bl	12924 <send_err_rsp.part.0>
   129f6:	e7bf      	b.n	12978 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   129f8:	2f05      	cmp	r7, #5
   129fa:	d10e      	bne.n	12a1a <bt_att_recv+0xb6>
   129fc:	34c0      	adds	r4, #192	; 0xc0
   129fe:	e8d4 3fef 	ldaex	r3, [r4]
   12a02:	f043 0202 	orr.w	r2, r3, #2
   12a06:	e8c4 2fec 	stlex	ip, r2, [r4]
   12a0a:	f1bc 0f00 	cmp.w	ip, #0
   12a0e:	d1f6      	bne.n	129fe <bt_att_recv+0x9a>
   12a10:	079b      	lsls	r3, r3, #30
   12a12:	d502      	bpl.n	12a1a <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   12a14:	2157      	movs	r1, #87	; 0x57
   12a16:	4813      	ldr	r0, [pc, #76]	; (12a64 <bt_att_recv+0x100>)
   12a18:	e7ac      	b.n	12974 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   12a1a:	180b      	adds	r3, r1, r0
   12a1c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   12a20:	7859      	ldrb	r1, [r3, #1]
   12a22:	4291      	cmp	r1, r2
   12a24:	d908      	bls.n	12a38 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   12a26:	2145      	movs	r1, #69	; 0x45
   12a28:	782b      	ldrb	r3, [r5, #0]
   12a2a:	480f      	ldr	r0, [pc, #60]	; (12a68 <bt_att_recv+0x104>)
   12a2c:	f007 ffd8 	bl	1a9e0 <printk>
	if (handler->type == ATT_REQUEST && err) {
   12a30:	2f01      	cmp	r7, #1
   12a32:	d1a1      	bne.n	12978 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   12a34:	2304      	movs	r3, #4
   12a36:	e008      	b.n	12a4a <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   12a38:	685b      	ldr	r3, [r3, #4]
   12a3a:	4641      	mov	r1, r8
   12a3c:	4630      	mov	r0, r6
   12a3e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   12a40:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   12a42:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   12a44:	d198      	bne.n	12978 <bt_att_recv+0x14>
   12a46:	2800      	cmp	r0, #0
   12a48:	d096      	beq.n	12978 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   12a4a:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   12a4c:	2900      	cmp	r1, #0
   12a4e:	d093      	beq.n	12978 <bt_att_recv+0x14>
   12a50:	e7cd      	b.n	129ee <bt_att_recv+0x8a>
   12a52:	bf00      	nop
   12a54:	00021bd7 	.word	0x00021bd7
   12a58:	0001ebec 	.word	0x0001ebec
   12a5c:	00021bf7 	.word	0x00021bf7
   12a60:	00021c60 	.word	0x00021c60
   12a64:	00021c18 	.word	0x00021c18
   12a68:	00021c3c 	.word	0x00021c3c

00012a6c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a70:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12a72:	6803      	ldr	r3, [r0, #0]
   12a74:	460e      	mov	r6, r1
   12a76:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12a78:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12a7a:	bf18      	it	ne
   12a7c:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12a7e:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12a80:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12a82:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12a84:	f00a fc94 	bl	1d3b0 <bt_gatt_change_aware>
   12a88:	2800      	cmp	r0, #0
   12a8a:	d04b      	beq.n	12b24 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   12a8c:	2f00      	cmp	r7, #0
   12a8e:	d04b      	beq.n	12b28 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   12a90:	2218      	movs	r2, #24
   12a92:	2100      	movs	r1, #0
   12a94:	4668      	mov	r0, sp
   12a96:	f009 f9f8 	bl	1be8a <memset>
	if (rsp) {
   12a9a:	f1b8 0f00 	cmp.w	r8, #0
   12a9e:	d122      	bne.n	12ae6 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   12aa0:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   12aa2:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   12aa6:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12aa8:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   12aaa:	9300      	str	r3, [sp, #0]
	data.value = value;
   12aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12aae:	4638      	mov	r0, r7
	data.value = value;
   12ab0:	9303      	str	r3, [sp, #12]
	data.len = len;
   12ab2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12ab6:	4a1d      	ldr	r2, [pc, #116]	; (12b2c <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   12ab8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12abc:	2301      	movs	r3, #1
   12abe:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12ac2:	466b      	mov	r3, sp
	data.req = req;
   12ac4:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   12ac8:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12acc:	f009 fda2 	bl	1c614 <bt_gatt_foreach_attr>
	if (data.err) {
   12ad0:	f89d 4014 	ldrb.w	r4, [sp, #20]
   12ad4:	b1f4      	cbz	r4, 12b14 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   12ad6:	f1b8 0f00 	cmp.w	r8, #0
   12ada:	d10e      	bne.n	12afa <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12adc:	2400      	movs	r4, #0
}
   12ade:	4620      	mov	r0, r4
   12ae0:	b007      	add	sp, #28
   12ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   12ae6:	2200      	movs	r2, #0
   12ae8:	4641      	mov	r1, r8
   12aea:	4628      	mov	r0, r5
   12aec:	f7ff fec8 	bl	12880 <bt_att_chan_create_pdu>
   12af0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   12af2:	2800      	cmp	r0, #0
   12af4:	d1d4      	bne.n	12aa0 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   12af6:	240e      	movs	r4, #14
   12af8:	e7f1      	b.n	12ade <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12afa:	9801      	ldr	r0, [sp, #4]
   12afc:	f002 fefa 	bl	158f4 <net_buf_unref>
	if (!req) {
   12b00:	2e00      	cmp	r6, #0
   12b02:	d0eb      	beq.n	12adc <att_write_rsp.constprop.0+0x70>
   12b04:	463a      	mov	r2, r7
   12b06:	4631      	mov	r1, r6
   12b08:	4628      	mov	r0, r5
   12b0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12b0e:	f7ff ff09 	bl	12924 <send_err_rsp.part.0>
   12b12:	e7e3      	b.n	12adc <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   12b14:	9901      	ldr	r1, [sp, #4]
   12b16:	2900      	cmp	r1, #0
   12b18:	d0e0      	beq.n	12adc <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12b1a:	4628      	mov	r0, r5
   12b1c:	4a04      	ldr	r2, [pc, #16]	; (12b30 <att_write_rsp.constprop.0+0xc4>)
   12b1e:	f009 feb0 	bl	1c882 <bt_att_chan_send_rsp>
   12b22:	e7dc      	b.n	12ade <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12b24:	2412      	movs	r4, #18
   12b26:	e7da      	b.n	12ade <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   12b28:	2401      	movs	r4, #1
   12b2a:	e7d8      	b.n	12ade <att_write_rsp.constprop.0+0x72>
   12b2c:	0001c6e3 	.word	0x0001c6e3
   12b30:	0001c953 	.word	0x0001c953

00012b34 <bt_att_create_pdu>:
{
   12b34:	b570      	push	{r4, r5, r6, lr}
   12b36:	460e      	mov	r6, r1
   12b38:	4615      	mov	r5, r2
	att = att_get(conn);
   12b3a:	f7ff fbbb 	bl	122b4 <att_get>
	if (!att) {
   12b3e:	b190      	cbz	r0, 12b66 <bt_att_create_pdu+0x32>
	return list->head;
   12b40:	6a83      	ldr	r3, [r0, #40]	; 0x28
   12b42:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12b44:	b15b      	cbz	r3, 12b5e <bt_att_create_pdu+0x2a>
   12b46:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12b4a:	d008      	beq.n	12b5e <bt_att_create_pdu+0x2a>
	return node->next;
   12b4c:	681b      	ldr	r3, [r3, #0]
   12b4e:	b10b      	cbz	r3, 12b54 <bt_att_create_pdu+0x20>
   12b50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12b54:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   12b58:	428a      	cmp	r2, r1
   12b5a:	d906      	bls.n	12b6a <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12b5c:	b95b      	cbnz	r3, 12b76 <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   12b5e:	2157      	movs	r1, #87	; 0x57
   12b60:	480a      	ldr	r0, [pc, #40]	; (12b8c <bt_att_create_pdu+0x58>)
   12b62:	f007 ff3d 	bl	1a9e0 <printk>
}
   12b66:	2000      	movs	r0, #0
   12b68:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   12b6a:	462a      	mov	r2, r5
   12b6c:	4631      	mov	r1, r6
}
   12b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   12b72:	f7ff be85 	b.w	12880 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12b76:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   12b7a:	d004      	beq.n	12b86 <bt_att_create_pdu+0x52>
	return node->next;
   12b7c:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12b80:	b10c      	cbz	r4, 12b86 <bt_att_create_pdu+0x52>
   12b82:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   12b86:	4618      	mov	r0, r3
   12b88:	4623      	mov	r3, r4
   12b8a:	e7e3      	b.n	12b54 <bt_att_create_pdu+0x20>
   12b8c:	00021c7f 	.word	0x00021c7f

00012b90 <att_read_group_req>:
{
   12b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12b94:	898c      	ldrh	r4, [r1, #12]
{
   12b96:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12b98:	3c04      	subs	r4, #4
   12b9a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12b9c:	2c02      	cmp	r4, #2
{
   12b9e:	4608      	mov	r0, r1
   12ba0:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12ba2:	d001      	beq.n	12ba8 <att_read_group_req+0x18>
   12ba4:	2c10      	cmp	r4, #16
   12ba6:	d16f      	bne.n	12c88 <att_read_group_req+0xf8>
   12ba8:	2104      	movs	r1, #4
   12baa:	3008      	adds	r0, #8
   12bac:	f002 ff9a 	bl	15ae4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12bb0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12bb4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12bb6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12bb8:	1d01      	adds	r1, r0, #4
   12bba:	4622      	mov	r2, r4
   12bbc:	4640      	mov	r0, r8
   12bbe:	f009 f9dc 	bl	1bf7a <bt_uuid_create>
   12bc2:	2800      	cmp	r0, #0
   12bc4:	d062      	beq.n	12c8c <att_read_group_req+0xfc>
	if (!start || !end) {
   12bc6:	2e00      	cmp	r6, #0
   12bc8:	d03a      	beq.n	12c40 <att_read_group_req+0xb0>
   12bca:	2400      	movs	r4, #0
   12bcc:	2f00      	cmp	r7, #0
   12bce:	d036      	beq.n	12c3e <att_read_group_req+0xae>
	if (start > end) {
   12bd0:	42be      	cmp	r6, r7
   12bd2:	d835      	bhi.n	12c40 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12bd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12bd8:	4640      	mov	r0, r8
   12bda:	a901      	add	r1, sp, #4
   12bdc:	f88d 4004 	strb.w	r4, [sp, #4]
   12be0:	f8ad 3006 	strh.w	r3, [sp, #6]
   12be4:	f009 f99b 	bl	1bf1e <bt_uuid_cmp>
   12be8:	2800      	cmp	r0, #0
   12bea:	d134      	bne.n	12c56 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12bec:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12bee:	2214      	movs	r2, #20
   12bf0:	2100      	movs	r1, #0
   12bf2:	a807      	add	r0, sp, #28
   12bf4:	f009 f949 	bl	1be8a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12bf8:	2201      	movs	r2, #1
   12bfa:	2111      	movs	r1, #17
   12bfc:	4620      	mov	r0, r4
   12bfe:	f7ff ff99 	bl	12b34 <bt_att_create_pdu>
   12c02:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12c04:	2800      	cmp	r0, #0
   12c06:	d041      	beq.n	12c8c <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   12c08:	2101      	movs	r1, #1
   12c0a:	3008      	adds	r0, #8
	data.uuid = uuid;
   12c0c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12c10:	f002 ff86 	bl	15b20 <net_buf_simple_add>
	data.rsp->len = 0U;
   12c14:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12c18:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12c1a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12c1c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12c20:	4639      	mov	r1, r7
   12c22:	4630      	mov	r0, r6
   12c24:	4a1a      	ldr	r2, [pc, #104]	; (12c90 <att_read_group_req+0x100>)
	data.group = NULL;
   12c26:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12c2a:	f009 fcf3 	bl	1c614 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12c30:	781c      	ldrb	r4, [r3, #0]
   12c32:	bb1c      	cbnz	r4, 12c7c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   12c34:	9809      	ldr	r0, [sp, #36]	; 0x24
   12c36:	f002 fe5d 	bl	158f4 <net_buf_unref>
	if (!req) {
   12c3a:	230a      	movs	r3, #10
   12c3c:	e018      	b.n	12c70 <att_read_group_req+0xe0>
			*err = 0U;
   12c3e:	463e      	mov	r6, r7
	if (!req) {
   12c40:	2301      	movs	r3, #1
   12c42:	4632      	mov	r2, r6
   12c44:	2110      	movs	r1, #16
   12c46:	4628      	mov	r0, r5
   12c48:	f7ff fe6c 	bl	12924 <send_err_rsp.part.0>
		return 0;
   12c4c:	2400      	movs	r4, #0
}
   12c4e:	4620      	mov	r0, r4
   12c50:	b00c      	add	sp, #48	; 0x30
   12c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12c56:	f642 0301 	movw	r3, #10241	; 0x2801
   12c5a:	4640      	mov	r0, r8
   12c5c:	a907      	add	r1, sp, #28
   12c5e:	f88d 401c 	strb.w	r4, [sp, #28]
   12c62:	f8ad 301e 	strh.w	r3, [sp, #30]
   12c66:	f009 f95a 	bl	1bf1e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12c6a:	2800      	cmp	r0, #0
   12c6c:	d0be      	beq.n	12bec <att_read_group_req+0x5c>
	if (!req) {
   12c6e:	2310      	movs	r3, #16
   12c70:	4632      	mov	r2, r6
   12c72:	2110      	movs	r1, #16
   12c74:	4628      	mov	r0, r5
   12c76:	f7ff fe55 	bl	12924 <send_err_rsp.part.0>
		return 0;
   12c7a:	e7e8      	b.n	12c4e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12c7c:	4628      	mov	r0, r5
   12c7e:	4a05      	ldr	r2, [pc, #20]	; (12c94 <att_read_group_req+0x104>)
   12c80:	9909      	ldr	r1, [sp, #36]	; 0x24
   12c82:	f009 fdfe 	bl	1c882 <bt_att_chan_send_rsp>
	return 0;
   12c86:	e7e1      	b.n	12c4c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   12c88:	2404      	movs	r4, #4
   12c8a:	e7e0      	b.n	12c4e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12c8c:	240e      	movs	r4, #14
   12c8e:	e7de      	b.n	12c4e <att_read_group_req+0xbe>
   12c90:	0001252d 	.word	0x0001252d
   12c94:	0001c953 	.word	0x0001c953

00012c98 <att_read_mult_req>:
{
   12c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12c9c:	6886      	ldr	r6, [r0, #8]
{
   12c9e:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   12ca0:	2210      	movs	r2, #16
{
   12ca2:	4604      	mov	r4, r0
   12ca4:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   12ca6:	4668      	mov	r0, sp
   12ca8:	2100      	movs	r1, #0
   12caa:	f009 f8ee 	bl	1be8a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12cae:	2200      	movs	r2, #0
   12cb0:	210f      	movs	r1, #15
   12cb2:	4630      	mov	r0, r6
   12cb4:	f7ff ff3e 	bl	12b34 <bt_att_create_pdu>
   12cb8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12cba:	b360      	cbz	r0, 12d16 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12cbc:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12cc0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12d1c <att_read_mult_req+0x84>
	data.chan = chan;
   12cc4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   12cc6:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12cca:	89ab      	ldrh	r3, [r5, #12]
   12ccc:	2b01      	cmp	r3, #1
   12cce:	d805      	bhi.n	12cdc <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12cd0:	4620      	mov	r0, r4
   12cd2:	4a13      	ldr	r2, [pc, #76]	; (12d20 <att_read_mult_req+0x88>)
   12cd4:	9902      	ldr	r1, [sp, #8]
   12cd6:	f009 fdd4 	bl	1c882 <bt_att_chan_send_rsp>
   12cda:	e018      	b.n	12d0e <att_read_mult_req+0x76>
   12cdc:	4638      	mov	r0, r7
   12cde:	f00a fbd4 	bl	1d48a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12ce2:	466b      	mov	r3, sp
   12ce4:	464a      	mov	r2, r9
   12ce6:	4601      	mov	r1, r0
   12ce8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12cea:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12cee:	f009 fc91 	bl	1c614 <bt_gatt_foreach_attr>
		if (data.err) {
   12cf2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12cf6:	2b00      	cmp	r3, #0
   12cf8:	d0e7      	beq.n	12cca <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   12cfa:	9802      	ldr	r0, [sp, #8]
   12cfc:	f002 fdfa 	bl	158f4 <net_buf_unref>
	if (!req) {
   12d00:	4632      	mov	r2, r6
   12d02:	210e      	movs	r1, #14
   12d04:	4620      	mov	r0, r4
   12d06:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12d0a:	f7ff fe0b 	bl	12924 <send_err_rsp.part.0>
	return 0;
   12d0e:	2000      	movs	r0, #0
}
   12d10:	b005      	add	sp, #20
   12d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   12d16:	200e      	movs	r0, #14
   12d18:	e7fa      	b.n	12d10 <att_read_mult_req+0x78>
   12d1a:	bf00      	nop
   12d1c:	0001c97b 	.word	0x0001c97b
   12d20:	0001c953 	.word	0x0001c953

00012d24 <att_read_rsp>:
{
   12d24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12d28:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12d2c:	4605      	mov	r5, r0
   12d2e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12d30:	4640      	mov	r0, r8
   12d32:	2101      	movs	r1, #1
{
   12d34:	4614      	mov	r4, r2
   12d36:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12d38:	f00a fb3a 	bl	1d3b0 <bt_gatt_change_aware>
   12d3c:	b390      	cbz	r0, 12da4 <att_read_rsp+0x80>
	if (!handle) {
   12d3e:	b39e      	cbz	r6, 12da8 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12d40:	2210      	movs	r2, #16
   12d42:	2100      	movs	r1, #0
   12d44:	4668      	mov	r0, sp
   12d46:	f009 f8a0 	bl	1be8a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12d4a:	2200      	movs	r2, #0
   12d4c:	4621      	mov	r1, r4
   12d4e:	4640      	mov	r0, r8
   12d50:	f7ff fef0 	bl	12b34 <bt_att_create_pdu>
   12d54:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12d56:	b348      	cbz	r0, 12dac <att_read_rsp+0x88>
	data.offset = offset;
   12d58:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12d5c:	4631      	mov	r1, r6
	data.offset = offset;
   12d5e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12d62:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12d64:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12d66:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12d6a:	4a11      	ldr	r2, [pc, #68]	; (12db0 <att_read_rsp+0x8c>)
   12d6c:	466b      	mov	r3, sp
	data.chan = chan;
   12d6e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12d70:	f009 fc50 	bl	1c614 <bt_gatt_foreach_attr>
	if (data.err) {
   12d74:	f89d 400c 	ldrb.w	r4, [sp, #12]
   12d78:	b174      	cbz	r4, 12d98 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   12d7a:	9802      	ldr	r0, [sp, #8]
   12d7c:	f002 fdba 	bl	158f4 <net_buf_unref>
	if (!req) {
   12d80:	4632      	mov	r2, r6
   12d82:	4639      	mov	r1, r7
   12d84:	4628      	mov	r0, r5
   12d86:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12d8a:	f7ff fdcb 	bl	12924 <send_err_rsp.part.0>
		return 0;
   12d8e:	2400      	movs	r4, #0
}
   12d90:	4620      	mov	r0, r4
   12d92:	b004      	add	sp, #16
   12d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12d98:	4628      	mov	r0, r5
   12d9a:	4a06      	ldr	r2, [pc, #24]	; (12db4 <att_read_rsp+0x90>)
   12d9c:	9902      	ldr	r1, [sp, #8]
   12d9e:	f009 fd70 	bl	1c882 <bt_att_chan_send_rsp>
	return 0;
   12da2:	e7f5      	b.n	12d90 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12da4:	2412      	movs	r4, #18
   12da6:	e7f3      	b.n	12d90 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12da8:	2401      	movs	r4, #1
   12daa:	e7f1      	b.n	12d90 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12dac:	240e      	movs	r4, #14
   12dae:	e7ef      	b.n	12d90 <att_read_rsp+0x6c>
   12db0:	0001c97b 	.word	0x0001c97b
   12db4:	0001c953 	.word	0x0001c953

00012db8 <att_read_type_req>:
{
   12db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12dbc:	898c      	ldrh	r4, [r1, #12]
{
   12dbe:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12dc0:	3c04      	subs	r4, #4
   12dc2:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12dc4:	2c02      	cmp	r4, #2
{
   12dc6:	4608      	mov	r0, r1
   12dc8:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12dca:	d001      	beq.n	12dd0 <att_read_type_req+0x18>
   12dcc:	2c10      	cmp	r4, #16
   12dce:	d150      	bne.n	12e72 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12dd0:	2104      	movs	r1, #4
   12dd2:	3008      	adds	r0, #8
   12dd4:	f002 fe86 	bl	15ae4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12dd8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12ddc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12dde:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12de0:	1d01      	adds	r1, r0, #4
   12de2:	4622      	mov	r2, r4
   12de4:	4640      	mov	r0, r8
   12de6:	f009 f8c8 	bl	1bf7a <bt_uuid_create>
   12dea:	b188      	cbz	r0, 12e10 <att_read_type_req+0x58>
	if (!start || !end) {
   12dec:	b19e      	cbz	r6, 12e16 <att_read_type_req+0x5e>
   12dee:	b18f      	cbz	r7, 12e14 <att_read_type_req+0x5c>
	if (start > end) {
   12df0:	42b7      	cmp	r7, r6
   12df2:	d310      	bcc.n	12e16 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12df4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12df6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12df8:	2100      	movs	r1, #0
   12dfa:	eb0d 0002 	add.w	r0, sp, r2
   12dfe:	f009 f844 	bl	1be8a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12e02:	2201      	movs	r2, #1
   12e04:	2109      	movs	r1, #9
   12e06:	4620      	mov	r0, r4
   12e08:	f7ff fe94 	bl	12b34 <bt_att_create_pdu>
   12e0c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12e0e:	b968      	cbnz	r0, 12e2c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12e10:	240e      	movs	r4, #14
   12e12:	e007      	b.n	12e24 <att_read_type_req+0x6c>
			*err = 0U;
   12e14:	463e      	mov	r6, r7
	if (!req) {
   12e16:	2301      	movs	r3, #1
   12e18:	4632      	mov	r2, r6
   12e1a:	2108      	movs	r1, #8
   12e1c:	4628      	mov	r0, r5
   12e1e:	f7ff fd81 	bl	12924 <send_err_rsp.part.0>
		return 0;
   12e22:	2400      	movs	r4, #0
}
   12e24:	4620      	mov	r0, r4
   12e26:	b00c      	add	sp, #48	; 0x30
   12e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12e2c:	2101      	movs	r1, #1
   12e2e:	3008      	adds	r0, #8
	data.uuid = uuid;
   12e30:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12e34:	f002 fe74 	bl	15b20 <net_buf_simple_add>
	data.rsp->len = 0U;
   12e38:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12e3c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12e3e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12e40:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12e42:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12e46:	4a0c      	ldr	r2, [pc, #48]	; (12e78 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12e48:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12e4c:	4630      	mov	r0, r6
   12e4e:	ab06      	add	r3, sp, #24
   12e50:	f009 fbe0 	bl	1c614 <bt_gatt_foreach_attr>
	if (data.err) {
   12e54:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12e58:	b12c      	cbz	r4, 12e66 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12e5a:	9808      	ldr	r0, [sp, #32]
   12e5c:	f002 fd4a 	bl	158f4 <net_buf_unref>
	if (!req) {
   12e60:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12e64:	e7d8      	b.n	12e18 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12e66:	4628      	mov	r0, r5
   12e68:	4a04      	ldr	r2, [pc, #16]	; (12e7c <att_read_type_req+0xc4>)
   12e6a:	9908      	ldr	r1, [sp, #32]
   12e6c:	f009 fd09 	bl	1c882 <bt_att_chan_send_rsp>
	return 0;
   12e70:	e7d8      	b.n	12e24 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12e72:	2404      	movs	r4, #4
   12e74:	e7d6      	b.n	12e24 <att_read_type_req+0x6c>
   12e76:	bf00      	nop
   12e78:	00012755 	.word	0x00012755
   12e7c:	0001c953 	.word	0x0001c953

00012e80 <att_find_type_req>:
{
   12e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12e84:	4688      	mov	r8, r1
   12e86:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12e88:	2106      	movs	r1, #6
   12e8a:	b086      	sub	sp, #24
   12e8c:	f108 0008 	add.w	r0, r8, #8
   12e90:	f002 fe28 	bl	15ae4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12e94:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12e96:	b317      	cbz	r7, 12ede <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12e98:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12e9c:	f1b9 0f00 	cmp.w	r9, #0
   12ea0:	d01c      	beq.n	12edc <att_find_type_req+0x5c>
	if (start > end) {
   12ea2:	454f      	cmp	r7, r9
   12ea4:	d81b      	bhi.n	12ede <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12ea6:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12ea8:	2400      	movs	r4, #0
   12eaa:	f8ad 3002 	strh.w	r3, [sp, #2]
   12eae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12eb2:	4668      	mov	r0, sp
   12eb4:	a901      	add	r1, sp, #4
	value = buf->data;
   12eb6:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12eba:	f88d 4000 	strb.w	r4, [sp]
   12ebe:	f88d 4004 	strb.w	r4, [sp, #4]
   12ec2:	f8ad 3006 	strh.w	r3, [sp, #6]
   12ec6:	f009 f82a 	bl	1bf1e <bt_uuid_cmp>
   12eca:	4606      	mov	r6, r0
   12ecc:	b190      	cbz	r0, 12ef4 <att_find_type_req+0x74>
	if (!req) {
   12ece:	230a      	movs	r3, #10
   12ed0:	463a      	mov	r2, r7
   12ed2:	2106      	movs	r1, #6
   12ed4:	4628      	mov	r0, r5
   12ed6:	f7ff fd25 	bl	12924 <send_err_rsp.part.0>
		return 0;
   12eda:	e007      	b.n	12eec <att_find_type_req+0x6c>
			*err = 0U;
   12edc:	464f      	mov	r7, r9
	if (!req) {
   12ede:	2301      	movs	r3, #1
   12ee0:	463a      	mov	r2, r7
   12ee2:	2106      	movs	r1, #6
   12ee4:	4628      	mov	r0, r5
   12ee6:	f7ff fd1d 	bl	12924 <send_err_rsp.part.0>
		return 0;
   12eea:	2400      	movs	r4, #0
}
   12eec:	4620      	mov	r0, r4
   12eee:	b006      	add	sp, #24
   12ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12ef4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12ef8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12efc:	4601      	mov	r1, r0
   12efe:	2214      	movs	r2, #20
   12f00:	a801      	add	r0, sp, #4
   12f02:	f008 ffc2 	bl	1be8a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12f06:	4632      	mov	r2, r6
   12f08:	2107      	movs	r1, #7
   12f0a:	4640      	mov	r0, r8
   12f0c:	f7ff fe12 	bl	12b34 <bt_att_create_pdu>
   12f10:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12f12:	b1e0      	cbz	r0, 12f4e <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12f14:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12f16:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12f18:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12f1c:	4638      	mov	r0, r7
   12f1e:	4a0d      	ldr	r2, [pc, #52]	; (12f54 <att_find_type_req+0xd4>)
   12f20:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   12f22:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   12f26:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12f2a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12f2c:	f009 fb72 	bl	1c614 <bt_gatt_foreach_attr>
	if (data.err) {
   12f30:	f89d 4015 	ldrb.w	r4, [sp, #21]
   12f34:	b12c      	cbz	r4, 12f42 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   12f36:	9802      	ldr	r0, [sp, #8]
   12f38:	f002 fcdc 	bl	158f4 <net_buf_unref>
	if (!req) {
   12f3c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12f40:	e7ce      	b.n	12ee0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12f42:	4628      	mov	r0, r5
   12f44:	4a04      	ldr	r2, [pc, #16]	; (12f58 <att_find_type_req+0xd8>)
   12f46:	9902      	ldr	r1, [sp, #8]
   12f48:	f009 fc9b 	bl	1c882 <bt_att_chan_send_rsp>
	return 0;
   12f4c:	e7ce      	b.n	12eec <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12f4e:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12f50:	e7cc      	b.n	12eec <att_find_type_req+0x6c>
   12f52:	bf00      	nop
   12f54:	0001231d 	.word	0x0001231d
   12f58:	0001c953 	.word	0x0001c953

00012f5c <att_find_info_req>:
{
   12f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12f5e:	688b      	ldr	r3, [r1, #8]
{
   12f60:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   12f62:	881e      	ldrh	r6, [r3, #0]
{
   12f64:	b085      	sub	sp, #20
	if (!start || !end) {
   12f66:	b19e      	cbz	r6, 12f90 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12f68:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   12f6a:	b184      	cbz	r4, 12f8e <att_find_info_req+0x32>
	if (start > end) {
   12f6c:	42b4      	cmp	r4, r6
   12f6e:	d30f      	bcc.n	12f90 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12f70:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   12f72:	2210      	movs	r2, #16
   12f74:	2100      	movs	r1, #0
   12f76:	4668      	mov	r0, sp
   12f78:	f008 ff87 	bl	1be8a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12f7c:	2200      	movs	r2, #0
   12f7e:	2105      	movs	r1, #5
   12f80:	4638      	mov	r0, r7
   12f82:	f7ff fdd7 	bl	12b34 <bt_att_create_pdu>
   12f86:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12f88:	b958      	cbnz	r0, 12fa2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12f8a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12f8c:	e007      	b.n	12f9e <att_find_info_req+0x42>
			*err = 0U;
   12f8e:	4626      	mov	r6, r4
	if (!req) {
   12f90:	2301      	movs	r3, #1
   12f92:	4632      	mov	r2, r6
   12f94:	2104      	movs	r1, #4
   12f96:	4628      	mov	r0, r5
   12f98:	f7ff fcc4 	bl	12924 <send_err_rsp.part.0>
	return 0;
   12f9c:	2000      	movs	r0, #0
}
   12f9e:	b005      	add	sp, #20
   12fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12fa2:	4621      	mov	r1, r4
   12fa4:	466b      	mov	r3, sp
   12fa6:	4630      	mov	r0, r6
   12fa8:	4a08      	ldr	r2, [pc, #32]	; (12fcc <att_find_info_req+0x70>)
	data.chan = chan;
   12faa:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12fac:	f009 fb32 	bl	1c614 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12fb0:	9c02      	ldr	r4, [sp, #8]
   12fb2:	b924      	cbnz	r4, 12fbe <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   12fb4:	9801      	ldr	r0, [sp, #4]
   12fb6:	f002 fc9d 	bl	158f4 <net_buf_unref>
	if (!req) {
   12fba:	230a      	movs	r3, #10
   12fbc:	e7e9      	b.n	12f92 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12fbe:	4628      	mov	r0, r5
   12fc0:	4a03      	ldr	r2, [pc, #12]	; (12fd0 <att_find_info_req+0x74>)
   12fc2:	9901      	ldr	r1, [sp, #4]
   12fc4:	f009 fc5d 	bl	1c882 <bt_att_chan_send_rsp>
   12fc8:	e7e8      	b.n	12f9c <att_find_info_req+0x40>
   12fca:	bf00      	nop
   12fcc:	0001c62b 	.word	0x0001c62b
   12fd0:	0001c953 	.word	0x0001c953

00012fd4 <att_mtu_req>:
{
   12fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   12fd6:	4603      	mov	r3, r0
   12fd8:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12fdc:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12fde:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12fe0:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   12fe4:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   12fe8:	071b      	lsls	r3, r3, #28
   12fea:	d41b      	bmi.n	13024 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   12fec:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   12fee:	881b      	ldrh	r3, [r3, #0]
   12ff0:	2b16      	cmp	r3, #22
   12ff2:	d919      	bls.n	13028 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   12ff4:	2202      	movs	r2, #2
   12ff6:	2103      	movs	r1, #3
   12ff8:	f7ff fd9c 	bl	12b34 <bt_att_create_pdu>
	if (!pdu) {
   12ffc:	4606      	mov	r6, r0
   12ffe:	b1a8      	cbz	r0, 1302c <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   13000:	2102      	movs	r1, #2
   13002:	3008      	adds	r0, #8
   13004:	f002 fd8c 	bl	15b20 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   13008:	2717      	movs	r7, #23
   1300a:	7044      	strb	r4, [r0, #1]
   1300c:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1300e:	4631      	mov	r1, r6
   13010:	4628      	mov	r0, r5
   13012:	4a07      	ldr	r2, [pc, #28]	; (13030 <att_mtu_req+0x5c>)
   13014:	f009 fc35 	bl	1c882 <bt_att_chan_send_rsp>
	return 0;
   13018:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1301a:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1301e:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   13022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   13024:	2006      	movs	r0, #6
   13026:	e7fc      	b.n	13022 <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   13028:	2004      	movs	r0, #4
   1302a:	e7fa      	b.n	13022 <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   1302c:	200e      	movs	r0, #14
   1302e:	e7f8      	b.n	13022 <att_mtu_req+0x4e>
   13030:	0001c953 	.word	0x0001c953

00013034 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   13034:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   13036:	2400      	movs	r4, #0
{
   13038:	4602      	mov	r2, r0
   1303a:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1303c:	4807      	ldr	r0, [pc, #28]	; (1305c <bt_att_req_alloc+0x28>)
   1303e:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   13040:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   13042:	f004 ff99 	bl	17f78 <k_mem_slab_alloc>
   13046:	4601      	mov	r1, r0
   13048:	b930      	cbnz	r0, 13058 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1304a:	2218      	movs	r2, #24
   1304c:	9801      	ldr	r0, [sp, #4]
   1304e:	f008 ff1c 	bl	1be8a <memset>

	return req;
   13052:	9801      	ldr	r0, [sp, #4]
}
   13054:	b002      	add	sp, #8
   13056:	bd10      	pop	{r4, pc}
		return NULL;
   13058:	4620      	mov	r0, r4
   1305a:	e7fb      	b.n	13054 <bt_att_req_alloc+0x20>
   1305c:	200084f4 	.word	0x200084f4

00013060 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   13060:	b507      	push	{r0, r1, r2, lr}
   13062:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   13064:	a901      	add	r1, sp, #4
   13066:	4803      	ldr	r0, [pc, #12]	; (13074 <bt_att_req_free+0x14>)
   13068:	f004 ffe0 	bl	1802c <k_mem_slab_free>
}
   1306c:	b003      	add	sp, #12
   1306e:	f85d fb04 	ldr.w	pc, [sp], #4
   13072:	bf00      	nop
   13074:	200084f4 	.word	0x200084f4

00013078 <att_handle_rsp>:
{
   13078:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1307c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   1307e:	30f0      	adds	r0, #240	; 0xf0
{
   13080:	460f      	mov	r7, r1
   13082:	4690      	mov	r8, r2
   13084:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   13086:	f006 fda5 	bl	19bd4 <k_delayed_work_cancel>
	if (!chan->req) {
   1308a:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   1308e:	f04f 0a00 	mov.w	sl, #0
   13092:	b99d      	cbnz	r5, 130bc <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   13094:	2157      	movs	r1, #87	; 0x57
   13096:	4818      	ldr	r0, [pc, #96]	; (130f8 <att_handle_rsp+0x80>)
   13098:	f007 fca2 	bl	1a9e0 <printk>
	att_req_send_process(chan->att);
   1309c:	6820      	ldr	r0, [r4, #0]
   1309e:	f009 fcd4 	bl	1ca4a <att_req_send_process>
	if (func) {
   130a2:	b13d      	cbz	r5, 130b4 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   130a4:	6820      	ldr	r0, [r4, #0]
   130a6:	f8cd 9000 	str.w	r9, [sp]
   130aa:	4643      	mov	r3, r8
   130ac:	463a      	mov	r2, r7
   130ae:	4631      	mov	r1, r6
   130b0:	6800      	ldr	r0, [r0, #0]
   130b2:	47a8      	blx	r5
}
   130b4:	2000      	movs	r0, #0
   130b6:	b002      	add	sp, #8
   130b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   130bc:	4b0f      	ldr	r3, [pc, #60]	; (130fc <att_handle_rsp+0x84>)
   130be:	429d      	cmp	r5, r3
   130c0:	d103      	bne.n	130ca <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   130c2:	4655      	mov	r5, sl
		chan->req = NULL;
   130c4:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   130c8:	e7e8      	b.n	1309c <att_handle_rsp+0x24>
	if (chan->req->buf) {
   130ca:	6928      	ldr	r0, [r5, #16]
   130cc:	b128      	cbz	r0, 130da <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   130ce:	f002 fc11 	bl	158f4 <net_buf_unref>
		chan->req->buf = NULL;
   130d2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   130d6:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   130da:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   130de:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   130e2:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   130e4:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   130e8:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   130ec:	f009 fd5b 	bl	1cba6 <att_req_destroy>
	chan->req = NULL;
   130f0:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   130f4:	e7d2      	b.n	1309c <att_handle_rsp+0x24>
   130f6:	bf00      	nop
   130f8:	00021c9f 	.word	0x00021c9f
   130fc:	20009f44 	.word	0x20009f44

00013100 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   13100:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   13104:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   13106:	b18b      	cbz	r3, 1312c <att_error_rsp+0x2c>
   13108:	4a09      	ldr	r2, [pc, #36]	; (13130 <att_error_rsp+0x30>)
   1310a:	4293      	cmp	r3, r2
   1310c:	d00e      	beq.n	1312c <att_error_rsp+0x2c>
	if (chan->req->buf) {
   1310e:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   13110:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   13112:	b12a      	cbz	r2, 13120 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   13114:	899d      	ldrh	r5, [r3, #12]
   13116:	89dc      	ldrh	r4, [r3, #14]
   13118:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   1311a:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   1311c:	442b      	add	r3, r5
   1311e:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   13120:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   13122:	2200      	movs	r2, #0
}
   13124:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   13126:	4611      	mov	r1, r2
   13128:	f7ff bfa6 	b.w	13078 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   1312c:	230e      	movs	r3, #14
   1312e:	e7f8      	b.n	13122 <att_error_rsp+0x22>
   13130:	20009f44 	.word	0x20009f44

00013134 <att_reset>:
{
   13134:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13136:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   13138:	9803      	ldr	r0, [sp, #12]
   1313a:	2200      	movs	r2, #0
   1313c:	2300      	movs	r3, #0
   1313e:	300c      	adds	r0, #12
   13140:	f002 fb56 	bl	157f0 <net_buf_get>
   13144:	b948      	cbnz	r0, 1315a <att_reset+0x26>
	att->conn = NULL;
   13146:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   13148:	6854      	ldr	r4, [r2, #4]
   1314a:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1314c:	b944      	cbnz	r4, 13160 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   1314e:	480d      	ldr	r0, [pc, #52]	; (13184 <att_reset+0x50>)
   13150:	a903      	add	r1, sp, #12
   13152:	f004 ff6b 	bl	1802c <k_mem_slab_free>
}
   13156:	b004      	add	sp, #16
   13158:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   1315a:	f002 fbcb 	bl	158f4 <net_buf_unref>
   1315e:	e7eb      	b.n	13138 <att_reset+0x4>
	return node->next;
   13160:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   13162:	6866      	ldr	r6, [r4, #4]
   13164:	b136      	cbz	r6, 13174 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   13166:	6963      	ldr	r3, [r4, #20]
   13168:	210e      	movs	r1, #14
   1316a:	9300      	str	r3, [sp, #0]
   1316c:	2300      	movs	r3, #0
   1316e:	461a      	mov	r2, r3
   13170:	4618      	mov	r0, r3
   13172:	47b0      	blx	r6
		att_req_destroy(req);
   13174:	4620      	mov	r0, r4
   13176:	f009 fd16 	bl	1cba6 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1317a:	2d00      	cmp	r5, #0
   1317c:	d0e7      	beq.n	1314e <att_reset+0x1a>
   1317e:	462c      	mov	r4, r5
   13180:	682d      	ldr	r5, [r5, #0]
   13182:	e7ee      	b.n	13162 <att_reset+0x2e>
   13184:	200084bc 	.word	0x200084bc

00013188 <att_timeout>:
{
   13188:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   1318a:	4605      	mov	r5, r0
   1318c:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   13190:	2145      	movs	r1, #69	; 0x45
{
   13192:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   13194:	4808      	ldr	r0, [pc, #32]	; (131b8 <att_timeout+0x30>)
   13196:	f007 fc23 	bl	1a9e0 <printk>
	att_chan_detach(chan);
   1319a:	4628      	mov	r0, r5
   1319c:	f009 fd40 	bl	1cc20 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   131a0:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   131a2:	b945      	cbnz	r5, 131b6 <att_timeout+0x2e>
	att_reset(att);
   131a4:	4630      	mov	r0, r6
   131a6:	f7ff ffc5 	bl	13134 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   131aa:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   131ae:	f002 f94d 	bl	1544c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   131b2:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   131b6:	bd70      	pop	{r4, r5, r6, pc}
   131b8:	00021cbb 	.word	0x00021cbb

000131bc <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   131bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   131c0:	460c      	mov	r4, r1
   131c2:	4617      	mov	r7, r2
   131c4:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   131c6:	4605      	mov	r5, r0
   131c8:	b950      	cbnz	r0, 131e0 <bt_att_send+0x24>
   131ca:	492e      	ldr	r1, [pc, #184]	; (13284 <bt_att_send+0xc8>)
   131cc:	482e      	ldr	r0, [pc, #184]	; (13288 <bt_att_send+0xcc>)
   131ce:	f640 32ce 	movw	r2, #3022	; 0xbce
   131d2:	f007 fc05 	bl	1a9e0 <printk>
   131d6:	f640 31ce 	movw	r1, #3022	; 0xbce
   131da:	482a      	ldr	r0, [pc, #168]	; (13284 <bt_att_send+0xc8>)
   131dc:	f007 fea6 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   131e0:	b954      	cbnz	r4, 131f8 <bt_att_send+0x3c>
   131e2:	4928      	ldr	r1, [pc, #160]	; (13284 <bt_att_send+0xc8>)
   131e4:	4828      	ldr	r0, [pc, #160]	; (13288 <bt_att_send+0xcc>)
   131e6:	f640 32cf 	movw	r2, #3023	; 0xbcf
   131ea:	f007 fbf9 	bl	1a9e0 <printk>
   131ee:	f640 31cf 	movw	r1, #3023	; 0xbcf
   131f2:	4824      	ldr	r0, [pc, #144]	; (13284 <bt_att_send+0xc8>)
   131f4:	f007 fe9a 	bl	1af2c <assert_post_action>

	att = att_get(conn);
   131f8:	4628      	mov	r0, r5
   131fa:	f7ff f85b 	bl	122b4 <att_get>
	if (!att) {
   131fe:	4606      	mov	r6, r0
   13200:	b938      	cbnz	r0, 13212 <bt_att_send+0x56>
		net_buf_unref(buf);
   13202:	4620      	mov	r0, r4
   13204:	f002 fb76 	bl	158f4 <net_buf_unref>
		return -ENOTCONN;
   13208:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1320c:	b002      	add	sp, #8
   1320e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   13212:	b147      	cbz	r7, 13226 <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   13214:	463b      	mov	r3, r7
   13216:	4622      	mov	r2, r4
   13218:	2104      	movs	r1, #4
   1321a:	4628      	mov	r0, r5
   1321c:	f8cd 8000 	str.w	r8, [sp]
   13220:	f009 f937 	bl	1c492 <bt_l2cap_send_cb>
   13224:	e7f2      	b.n	1320c <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   13226:	f100 070c 	add.w	r7, r0, #12
   1322a:	4621      	mov	r1, r4
   1322c:	4638      	mov	r0, r7
   1322e:	f002 fb33 	bl	15898 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   13232:	2200      	movs	r2, #0
   13234:	2300      	movs	r3, #0
   13236:	4638      	mov	r0, r7
   13238:	f002 fada 	bl	157f0 <net_buf_get>
	if (!buf) {
   1323c:	4605      	mov	r5, r0
   1323e:	b908      	cbnz	r0, 13244 <bt_att_send+0x88>
	return 0;
   13240:	2000      	movs	r0, #0
   13242:	e7e3      	b.n	1320c <bt_att_send+0x50>
	return list->head;
   13244:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13246:	b1c3      	cbz	r3, 1327a <bt_att_send+0xbe>
   13248:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1324c:	d015      	beq.n	1327a <bt_att_send+0xbe>
	return node->next;
   1324e:	681c      	ldr	r4, [r3, #0]
   13250:	b10c      	cbz	r4, 13256 <bt_att_send+0x9a>
   13252:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   13256:	2200      	movs	r2, #0
   13258:	4629      	mov	r1, r5
   1325a:	f009 fafb 	bl	1c854 <bt_att_chan_send>
		if (err >= 0) {
   1325e:	2800      	cmp	r0, #0
   13260:	daee      	bge.n	13240 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13262:	b154      	cbz	r4, 1327a <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13264:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   13268:	d004      	beq.n	13274 <bt_att_send+0xb8>
	return node->next;
   1326a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1326e:	b10b      	cbz	r3, 13274 <bt_att_send+0xb8>
   13270:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   13274:	4620      	mov	r0, r4
   13276:	461c      	mov	r4, r3
   13278:	e7ed      	b.n	13256 <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1327a:	4629      	mov	r1, r5
   1327c:	4638      	mov	r0, r7
   1327e:	f00a fe70 	bl	1df62 <k_queue_prepend>
   13282:	e7dd      	b.n	13240 <bt_att_send+0x84>
   13284:	00021b7e 	.word	0x00021b7e
   13288:	0001faab 	.word	0x0001faab

0001328c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1328c:	b538      	push	{r3, r4, r5, lr}
   1328e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   13290:	4605      	mov	r5, r0
   13292:	b950      	cbnz	r0, 132aa <bt_att_req_send+0x1e>
   13294:	4918      	ldr	r1, [pc, #96]	; (132f8 <bt_att_req_send+0x6c>)
   13296:	4819      	ldr	r0, [pc, #100]	; (132fc <bt_att_req_send+0x70>)
   13298:	f640 32eb 	movw	r2, #3051	; 0xbeb
   1329c:	f007 fba0 	bl	1a9e0 <printk>
   132a0:	f640 31eb 	movw	r1, #3051	; 0xbeb
   132a4:	4814      	ldr	r0, [pc, #80]	; (132f8 <bt_att_req_send+0x6c>)
   132a6:	f007 fe41 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(req);
   132aa:	b954      	cbnz	r4, 132c2 <bt_att_req_send+0x36>
   132ac:	4912      	ldr	r1, [pc, #72]	; (132f8 <bt_att_req_send+0x6c>)
   132ae:	4813      	ldr	r0, [pc, #76]	; (132fc <bt_att_req_send+0x70>)
   132b0:	f640 32ec 	movw	r2, #3052	; 0xbec
   132b4:	f007 fb94 	bl	1a9e0 <printk>
   132b8:	f640 31ec 	movw	r1, #3052	; 0xbec
   132bc:	480e      	ldr	r0, [pc, #56]	; (132f8 <bt_att_req_send+0x6c>)
   132be:	f007 fe35 	bl	1af2c <assert_post_action>

	att = att_get(conn);
   132c2:	4628      	mov	r0, r5
   132c4:	f7fe fff6 	bl	122b4 <att_get>
	if (!att) {
   132c8:	4605      	mov	r5, r0
   132ca:	b930      	cbnz	r0, 132da <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   132cc:	6920      	ldr	r0, [r4, #16]
   132ce:	f002 fb11 	bl	158f4 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   132d2:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   132d6:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   132d8:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   132da:	2300      	movs	r3, #0
   132dc:	6023      	str	r3, [r4, #0]
	return list->tail;
   132de:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   132e0:	b933      	cbnz	r3, 132f0 <bt_att_req_send+0x64>
	list->head = node;
   132e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   132e6:	4628      	mov	r0, r5
   132e8:	f009 fbaf 	bl	1ca4a <att_req_send_process>
	return 0;
   132ec:	2000      	movs	r0, #0
   132ee:	e7f3      	b.n	132d8 <bt_att_req_send+0x4c>
	parent->next = child;
   132f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   132f2:	6084      	str	r4, [r0, #8]
}
   132f4:	e7f7      	b.n	132e6 <bt_att_req_send+0x5a>
   132f6:	bf00      	nop
   132f8:	00021b7e 	.word	0x00021b7e
   132fc:	0001faab 	.word	0x0001faab

00013300 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   13300:	b510      	push	{r4, lr}
   13302:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   13304:	b350      	cbz	r0, 1335c <bt_att_req_cancel+0x5c>
   13306:	b349      	cbz	r1, 1335c <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   13308:	f7fe ffd4 	bl	122b4 <att_get>
	if (!att) {
   1330c:	b330      	cbz	r0, 1335c <bt_att_req_cancel+0x5c>
	return list->head;
   1330e:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13310:	b15b      	cbz	r3, 1332a <bt_att_req_cancel+0x2a>
   13312:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   13316:	d008      	beq.n	1332a <bt_att_req_cancel+0x2a>
	return node->next;
   13318:	681b      	ldr	r3, [r3, #0]
   1331a:	b10b      	cbz	r3, 13320 <bt_att_req_cancel+0x20>
   1331c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   13320:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   13324:	4294      	cmp	r4, r2
   13326:	d006      	beq.n	13336 <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13328:	b96b      	cbnz	r3, 13346 <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1332a:	3004      	adds	r0, #4
   1332c:	4621      	mov	r1, r4
   1332e:	f009 fad0 	bl	1c8d2 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   13332:	4620      	mov	r0, r4
   13334:	e003      	b.n	1333e <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   13336:	4620      	mov	r0, r4
	chan->req = &cancel;
   13338:	4b09      	ldr	r3, [pc, #36]	; (13360 <bt_att_req_cancel+0x60>)
   1333a:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   1333e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   13342:	f009 bc30 	b.w	1cba6 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13346:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1334a:	d004      	beq.n	13356 <bt_att_req_cancel+0x56>
	return node->next;
   1334c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13350:	b10a      	cbz	r2, 13356 <bt_att_req_cancel+0x56>
   13352:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   13356:	4619      	mov	r1, r3
   13358:	4613      	mov	r3, r2
   1335a:	e7e1      	b.n	13320 <bt_att_req_cancel+0x20>
}
   1335c:	bd10      	pop	{r4, pc}
   1335e:	bf00      	nop
   13360:	20009f44 	.word	0x20009f44

00013364 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   13364:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   13366:	4618      	mov	r0, r3
{
   13368:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   1336a:	4907      	ldr	r1, [pc, #28]	; (13388 <db_hash_set+0x24>)
   1336c:	2210      	movs	r2, #16
   1336e:	47a0      	blx	r4
	if (len < 0) {
   13370:	1e04      	subs	r4, r0, #0
   13372:	da06      	bge.n	13382 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   13374:	4622      	mov	r2, r4
   13376:	2145      	movs	r1, #69	; 0x45
   13378:	4804      	ldr	r0, [pc, #16]	; (1338c <db_hash_set+0x28>)
   1337a:	f007 fb31 	bl	1a9e0 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   1337e:	4620      	mov	r0, r4
   13380:	bd10      	pop	{r4, pc}
	return 0;
   13382:	2400      	movs	r4, #0
   13384:	e7fb      	b.n	1337e <db_hash_set+0x1a>
   13386:	bf00      	nop
   13388:	2000ea4b 	.word	0x2000ea4b
   1338c:	00021cd3 	.word	0x00021cd3

00013390 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13390:	2210      	movs	r2, #16
{
   13392:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13394:	4906      	ldr	r1, [pc, #24]	; (133b0 <db_hash_store+0x20>)
   13396:	4807      	ldr	r0, [pc, #28]	; (133b4 <db_hash_store+0x24>)
   13398:	f7f8 fc88 	bl	bcac <settings_save_one>
	if (err) {
   1339c:	4602      	mov	r2, r0
   1339e:	b128      	cbz	r0, 133ac <db_hash_store+0x1c>
}
   133a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   133a4:	2145      	movs	r1, #69	; 0x45
   133a6:	4804      	ldr	r0, [pc, #16]	; (133b8 <db_hash_store+0x28>)
   133a8:	f007 bb1a 	b.w	1a9e0 <printk>
}
   133ac:	bd08      	pop	{r3, pc}
   133ae:	bf00      	nop
   133b0:	2000ea3b 	.word	0x2000ea3b
   133b4:	00021cf9 	.word	0x00021cf9
   133b8:	00021d01 	.word	0x00021d01

000133bc <find_cf_cfg>:
{
   133bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   133be:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   133c0:	2600      	movs	r6, #0
   133c2:	4d0e      	ldr	r5, [pc, #56]	; (133fc <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   133c4:	462f      	mov	r7, r5
		if (!conn) {
   133c6:	1c6a      	adds	r2, r5, #1
   133c8:	b954      	cbnz	r4, 133e0 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   133ca:	4669      	mov	r1, sp
   133cc:	4610      	mov	r0, r2
   133ce:	9400      	str	r4, [sp, #0]
   133d0:	f8cd 4003 	str.w	r4, [sp, #3]
   133d4:	f009 fcea 	bl	1cdac <bt_addr_le_cmp>
   133d8:	b940      	cbnz	r0, 133ec <find_cf_cfg+0x30>
}
   133da:	4638      	mov	r0, r7
   133dc:	b003      	add	sp, #12
   133de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   133e0:	4620      	mov	r0, r4
   133e2:	7829      	ldrb	r1, [r5, #0]
   133e4:	f008 ff81 	bl	1c2ea <bt_conn_is_peer_addr_le>
   133e8:	2800      	cmp	r0, #0
   133ea:	d1f6      	bne.n	133da <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   133ec:	3601      	adds	r6, #1
   133ee:	2e05      	cmp	r6, #5
   133f0:	f105 0510 	add.w	r5, r5, #16
   133f4:	d1e6      	bne.n	133c4 <find_cf_cfg+0x8>
	return NULL;
   133f6:	2700      	movs	r7, #0
   133f8:	e7ef      	b.n	133da <find_cf_cfg+0x1e>
   133fa:	bf00      	nop
   133fc:	20009f5c 	.word	0x20009f5c

00013400 <find_sc_cfg>:
{
   13400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13402:	4606      	mov	r6, r0
   13404:	460f      	mov	r7, r1
   13406:	2400      	movs	r4, #0
   13408:	4d09      	ldr	r5, [pc, #36]	; (13430 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   1340a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1340e:	42b3      	cmp	r3, r6
   13410:	d107      	bne.n	13422 <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   13412:	4639      	mov	r1, r7
   13414:	4628      	mov	r0, r5
   13416:	f009 fcc9 	bl	1cdac <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1341a:	b910      	cbnz	r0, 13422 <find_sc_cfg+0x22>
			return &sc_cfg[i];
   1341c:	4805      	ldr	r0, [pc, #20]	; (13434 <find_sc_cfg+0x34>)
   1341e:	4420      	add	r0, r4
}
   13420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13422:	340c      	adds	r4, #12
   13424:	2c3c      	cmp	r4, #60	; 0x3c
   13426:	f105 050c 	add.w	r5, r5, #12
   1342a:	d1ee      	bne.n	1340a <find_sc_cfg+0xa>
	return NULL;
   1342c:	2000      	movs	r0, #0
   1342e:	e7f7      	b.n	13420 <find_sc_cfg+0x20>
   13430:	2000e2dd 	.word	0x2000e2dd
   13434:	2000e2dc 	.word	0x2000e2dc

00013438 <gatt_sub_find>:
{
   13438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1343a:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1343c:	2600      	movs	r6, #0
   1343e:	4d0e      	ldr	r5, [pc, #56]	; (13478 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   13440:	462f      	mov	r7, r5
		if (!conn) {
   13442:	1c6a      	adds	r2, r5, #1
   13444:	b954      	cbnz	r4, 1345c <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   13446:	4669      	mov	r1, sp
   13448:	4610      	mov	r0, r2
   1344a:	9400      	str	r4, [sp, #0]
   1344c:	f8cd 4003 	str.w	r4, [sp, #3]
   13450:	f009 fcac 	bl	1cdac <bt_addr_le_cmp>
   13454:	b940      	cbnz	r0, 13468 <gatt_sub_find+0x30>
}
   13456:	4638      	mov	r0, r7
   13458:	b003      	add	sp, #12
   1345a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1345c:	4620      	mov	r0, r4
   1345e:	7829      	ldrb	r1, [r5, #0]
   13460:	f008 ff43 	bl	1c2ea <bt_conn_is_peer_addr_le>
   13464:	2800      	cmp	r0, #0
   13466:	d1f6      	bne.n	13456 <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   13468:	3601      	adds	r6, #1
   1346a:	2e05      	cmp	r6, #5
   1346c:	f105 0510 	add.w	r5, r5, #16
   13470:	d1e6      	bne.n	13440 <gatt_sub_find+0x8>
	return NULL;
   13472:	2700      	movs	r7, #0
   13474:	e7ef      	b.n	13456 <gatt_sub_find+0x1e>
   13476:	bf00      	nop
   13478:	2000a02c 	.word	0x2000a02c

0001347c <find_cf_cfg_by_addr>:
{
   1347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1347e:	4606      	mov	r6, r0
   13480:	460f      	mov	r7, r1
   13482:	2400      	movs	r4, #0
   13484:	4d09      	ldr	r5, [pc, #36]	; (134ac <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   13486:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1348a:	42b3      	cmp	r3, r6
   1348c:	d107      	bne.n	1349e <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1348e:	4629      	mov	r1, r5
   13490:	4638      	mov	r0, r7
   13492:	f009 fc8b 	bl	1cdac <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   13496:	b910      	cbnz	r0, 1349e <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   13498:	4805      	ldr	r0, [pc, #20]	; (134b0 <find_cf_cfg_by_addr+0x34>)
   1349a:	4420      	add	r0, r4
}
   1349c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1349e:	3410      	adds	r4, #16
   134a0:	2c50      	cmp	r4, #80	; 0x50
   134a2:	f105 0510 	add.w	r5, r5, #16
   134a6:	d1ee      	bne.n	13486 <find_cf_cfg_by_addr+0xa>
	return NULL;
   134a8:	2000      	movs	r0, #0
   134aa:	e7f7      	b.n	1349c <find_cf_cfg_by_addr+0x20>
   134ac:	20009f5d 	.word	0x20009f5d
   134b0:	20009f5c 	.word	0x20009f5c

000134b4 <bt_gatt_attr_write_ccc>:
{
   134b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   134b8:	461f      	mov	r7, r3
   134ba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   134be:	4604      	mov	r4, r0
   134c0:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   134c2:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   134c6:	2b00      	cmp	r3, #0
   134c8:	d141      	bne.n	1354e <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   134ca:	1e7b      	subs	r3, r7, #1
   134cc:	2b01      	cmp	r3, #1
   134ce:	d841      	bhi.n	13554 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   134d0:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   134d2:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   134d4:	4649      	mov	r1, r9
   134d6:	bf14      	ite	ne
   134d8:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   134da:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   134dc:	f009 fc69 	bl	1cdb2 <find_ccc_cfg>
	if (!cfg) {
   134e0:	4605      	mov	r5, r0
   134e2:	b9b0      	cbnz	r0, 13512 <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   134e4:	b916      	cbnz	r6, 134ec <bt_gatt_attr_write_ccc+0x38>
			return len;
   134e6:	4638      	mov	r0, r7
}
   134e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   134ec:	4649      	mov	r1, r9
   134ee:	f009 fc60 	bl	1cdb2 <find_ccc_cfg>
		if (!cfg) {
   134f2:	4605      	mov	r5, r0
   134f4:	b930      	cbnz	r0, 13504 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   134f6:	4819      	ldr	r0, [pc, #100]	; (1355c <bt_gatt_attr_write_ccc+0xa8>)
   134f8:	2157      	movs	r1, #87	; 0x57
   134fa:	f007 fa71 	bl	1a9e0 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   134fe:	f06f 0010 	mvn.w	r0, #16
   13502:	e7f1      	b.n	134e8 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13504:	f104 0188 	add.w	r1, r4, #136	; 0x88
   13508:	3001      	adds	r0, #1
   1350a:	f009 fc8b 	bl	1ce24 <bt_addr_le_copy>
		cfg->id = conn->id;
   1350e:	7a23      	ldrb	r3, [r4, #8]
   13510:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   13512:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   13516:	b973      	cbnz	r3, 13536 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   13518:	f8b9 3032 	ldrh.w	r3, [r9, #50]	; 0x32
	cfg->value = value;
   1351c:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   1351e:	42b3      	cmp	r3, r6
   13520:	d003      	beq.n	1352a <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   13522:	4649      	mov	r1, r9
   13524:	4640      	mov	r0, r8
   13526:	f009 fbb9 	bl	1cc9c <gatt_ccc_changed>
	if (!value) {
   1352a:	2e00      	cmp	r6, #0
   1352c:	d1db      	bne.n	134e6 <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   1352e:	4628      	mov	r0, r5
   13530:	f009 fc7b 	bl	1ce2a <clear_ccc_cfg>
   13534:	e7d7      	b.n	134e6 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   13536:	4632      	mov	r2, r6
   13538:	4641      	mov	r1, r8
   1353a:	4620      	mov	r0, r4
   1353c:	4798      	blx	r3
		if (write < 0) {
   1353e:	2800      	cmp	r0, #0
   13540:	dbd2      	blt.n	134e8 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   13542:	1e44      	subs	r4, r0, #1
   13544:	2c01      	cmp	r4, #1
   13546:	d9e7      	bls.n	13518 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   13548:	f06f 000d 	mvn.w	r0, #13
   1354c:	e7cc      	b.n	134e8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1354e:	f06f 0006 	mvn.w	r0, #6
   13552:	e7c9      	b.n	134e8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13554:	f06f 000c 	mvn.w	r0, #12
   13558:	e7c6      	b.n	134e8 <bt_gatt_attr_write_ccc+0x34>
   1355a:	bf00      	nop
   1355c:	00021d2c 	.word	0x00021d2c

00013560 <cf_write>:
{
   13560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13564:	461f      	mov	r7, r3
   13566:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1356a:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   1356c:	2b01      	cmp	r3, #1
{
   1356e:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   13570:	d845      	bhi.n	135fe <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   13572:	443b      	add	r3, r7
   13574:	2b01      	cmp	r3, #1
   13576:	463d      	mov	r5, r7
   13578:	dc44      	bgt.n	13604 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   1357a:	f7ff ff1f 	bl	133bc <find_cf_cfg>
	if (!cfg) {
   1357e:	4604      	mov	r4, r0
   13580:	b918      	cbnz	r0, 1358a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   13582:	f7ff ff1b 	bl	133bc <find_cf_cfg>
	if (!cfg) {
   13586:	4604      	mov	r4, r0
   13588:	b1d8      	cbz	r0, 135c2 <cf_write+0x62>
   1358a:	4632      	mov	r2, r6
   1358c:	f104 0008 	add.w	r0, r4, #8
   13590:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   13594:	4596      	cmp	lr, r2
   13596:	d11d      	bne.n	135d4 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   13598:	b12f      	cbz	r7, 135a6 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   1359a:	7833      	ldrb	r3, [r6, #0]
   1359c:	7a22      	ldrb	r2, [r4, #8]
   1359e:	f003 0307 	and.w	r3, r3, #7
   135a2:	4313      	orrs	r3, r2
   135a4:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   135a6:	f108 0188 	add.w	r1, r8, #136	; 0x88
   135aa:	1c60      	adds	r0, r4, #1
   135ac:	f009 fc3a 	bl	1ce24 <bt_addr_le_copy>
	cfg->id = conn->id;
   135b0:	4620      	mov	r0, r4
   135b2:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   135b6:	2101      	movs	r1, #1
   135b8:	f800 3b0c 	strb.w	r3, [r0], #12
   135bc:	f009 fc43 	bl	1ce46 <atomic_or>
}
   135c0:	e005      	b.n	135ce <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   135c2:	2157      	movs	r1, #87	; 0x57
   135c4:	4812      	ldr	r0, [pc, #72]	; (13610 <cf_write+0xb0>)
   135c6:	f007 fa0b 	bl	1a9e0 <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   135ca:	f06f 0510 	mvn.w	r5, #16
}
   135ce:	4628      	mov	r0, r5
   135d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   135d4:	2300      	movs	r3, #0
   135d6:	f812 1b01 	ldrb.w	r1, [r2], #1
   135da:	f810 cb01 	ldrb.w	ip, [r0], #1
   135de:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   135e2:	fa21 f903 	lsr.w	r9, r1, r3
   135e6:	f019 0f01 	tst.w	r9, #1
   135ea:	d004      	beq.n	135f6 <cf_write+0x96>
   135ec:	fa2c f903 	lsr.w	r9, ip, r3
   135f0:	f019 0f01 	tst.w	r9, #1
   135f4:	d109      	bne.n	1360a <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   135f6:	3301      	adds	r3, #1
   135f8:	2b03      	cmp	r3, #3
   135fa:	d1f2      	bne.n	135e2 <cf_write+0x82>
   135fc:	e7ca      	b.n	13594 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   135fe:	f06f 0506 	mvn.w	r5, #6
   13602:	e7e4      	b.n	135ce <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13604:	f06f 050c 	mvn.w	r5, #12
   13608:	e7e1      	b.n	135ce <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1360a:	f06f 0512 	mvn.w	r5, #18
   1360e:	e7de      	b.n	135ce <cf_write+0x6e>
   13610:	00021d4b 	.word	0x00021d4b

00013614 <sc_store>:
{
   13614:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   13616:	4605      	mov	r5, r0
   13618:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1361c:	4604      	mov	r4, r0
   1361e:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   13620:	b1ca      	cbz	r2, 13656 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13622:	ae02      	add	r6, sp, #8
   13624:	2104      	movs	r1, #4
   13626:	4630      	mov	r0, r6
   13628:	f007 f940 	bl	1a8ac <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1362c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1362e:	462b      	mov	r3, r5
   13630:	2124      	movs	r1, #36	; 0x24
   13632:	4a0a      	ldr	r2, [pc, #40]	; (1365c <sc_store+0x48>)
   13634:	a803      	add	r0, sp, #12
   13636:	f7fb f8bd 	bl	e7b4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1363a:	2204      	movs	r2, #4
   1363c:	f104 0108 	add.w	r1, r4, #8
   13640:	a803      	add	r0, sp, #12
   13642:	f7f8 fb33 	bl	bcac <settings_save_one>
	if (err) {
   13646:	4602      	mov	r2, r0
   13648:	b118      	cbz	r0, 13652 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   1364a:	2145      	movs	r1, #69	; 0x45
   1364c:	4804      	ldr	r0, [pc, #16]	; (13660 <sc_store+0x4c>)
   1364e:	f007 f9c7 	bl	1a9e0 <printk>
}
   13652:	b00c      	add	sp, #48	; 0x30
   13654:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   13656:	9200      	str	r2, [sp, #0]
   13658:	e7e9      	b.n	1362e <sc_store+0x1a>
   1365a:	bf00      	nop
   1365c:	0002209b 	.word	0x0002209b
   13660:	00021d7c 	.word	0x00021d7c

00013664 <sc_save>:
{
   13664:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13668:	4680      	mov	r8, r0
   1366a:	460f      	mov	r7, r1
   1366c:	4616      	mov	r6, r2
   1366e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   13670:	f7ff fec6 	bl	13400 <find_sc_cfg>
	if (!cfg) {
   13674:	4604      	mov	r4, r0
   13676:	b998      	cbnz	r0, 136a0 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13678:	4669      	mov	r1, sp
   1367a:	9000      	str	r0, [sp, #0]
   1367c:	f8cd 0003 	str.w	r0, [sp, #3]
   13680:	f7ff febe 	bl	13400 <find_sc_cfg>
		if (!cfg) {
   13684:	4604      	mov	r4, r0
   13686:	b930      	cbnz	r0, 13696 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   13688:	2145      	movs	r1, #69	; 0x45
   1368a:	4813      	ldr	r0, [pc, #76]	; (136d8 <sc_save+0x74>)
   1368c:	f007 f9a8 	bl	1a9e0 <printk>
}
   13690:	b002      	add	sp, #8
   13692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   13696:	4639      	mov	r1, r7
		cfg->id = id;
   13698:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1369c:	f009 fbc2 	bl	1ce24 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   136a0:	8922      	ldrh	r2, [r4, #8]
   136a2:	8963      	ldrh	r3, [r4, #10]
   136a4:	b97a      	cbnz	r2, 136c6 <sc_save+0x62>
   136a6:	b983      	cbnz	r3, 136ca <sc_save+0x66>
		cfg->data.start = start;
   136a8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   136aa:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   136ac:	4621      	mov	r1, r4
   136ae:	f811 0b01 	ldrb.w	r0, [r1], #1
   136b2:	f008 fd86 	bl	1c1c2 <bt_addr_le_is_bonded>
   136b6:	2800      	cmp	r0, #0
   136b8:	d0ea      	beq.n	13690 <sc_save+0x2c>
		sc_store(cfg);
   136ba:	4620      	mov	r0, r4
}
   136bc:	b002      	add	sp, #8
   136be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   136c2:	f7ff bfa7 	b.w	13614 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   136c6:	4296      	cmp	r6, r2
   136c8:	d302      	bcc.n	136d0 <sc_save+0x6c>
   136ca:	429d      	cmp	r5, r3
   136cc:	d8ed      	bhi.n	136aa <sc_save+0x46>
   136ce:	e7df      	b.n	13690 <sc_save+0x2c>
	if (*end < new_end) {
   136d0:	429d      	cmp	r5, r3
		*start = new_start;
   136d2:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   136d4:	d9ea      	bls.n	136ac <sc_save+0x48>
   136d6:	e7e8      	b.n	136aa <sc_save+0x46>
   136d8:	00021d9d 	.word	0x00021d9d

000136dc <sc_set>:
{
   136dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   136e0:	460e      	mov	r6, r1
   136e2:	4690      	mov	r8, r2
   136e4:	4699      	mov	r9, r3
	if (!name) {
   136e6:	4604      	mov	r4, r0
{
   136e8:	b087      	sub	sp, #28
	if (!name) {
   136ea:	b948      	cbnz	r0, 13700 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   136ec:	2145      	movs	r1, #69	; 0x45
   136ee:	4829      	ldr	r0, [pc, #164]	; (13794 <sc_set+0xb8>)
   136f0:	f007 f976 	bl	1a9e0 <printk>
		return -EINVAL;
   136f4:	f06f 0515 	mvn.w	r5, #21
}
   136f8:	4628      	mov	r0, r5
   136fa:	b007      	add	sp, #28
   136fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   13700:	a902      	add	r1, sp, #8
   13702:	f008 fbe8 	bl	1bed6 <bt_settings_decode_key>
	if (err) {
   13706:	4605      	mov	r5, r0
   13708:	b128      	cbz	r0, 13716 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1370a:	4622      	mov	r2, r4
   1370c:	2145      	movs	r1, #69	; 0x45
   1370e:	4822      	ldr	r0, [pc, #136]	; (13798 <sc_set+0xbc>)
   13710:	f007 f966 	bl	1a9e0 <printk>
   13714:	e7ee      	b.n	136f4 <sc_set+0x18>
	settings_name_next(name, &next);
   13716:	4620      	mov	r0, r4
   13718:	a901      	add	r1, sp, #4
   1371a:	f007 fc66 	bl	1afea <settings_name_next>
	if (!next) {
   1371e:	9801      	ldr	r0, [sp, #4]
   13720:	b1d8      	cbz	r0, 1375a <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   13722:	220a      	movs	r2, #10
   13724:	4629      	mov	r1, r5
   13726:	f008 fab7 	bl	1bc98 <strtol>
   1372a:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   1372c:	4638      	mov	r0, r7
   1372e:	a902      	add	r1, sp, #8
   13730:	f7ff fe66 	bl	13400 <find_sc_cfg>
	if (!cfg && len_rd) {
   13734:	4604      	mov	r4, r0
   13736:	bb28      	cbnz	r0, 13784 <sc_set+0xa8>
   13738:	2e00      	cmp	r6, #0
   1373a:	d0dd      	beq.n	136f8 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1373c:	a904      	add	r1, sp, #16
   1373e:	9004      	str	r0, [sp, #16]
   13740:	f8cd 0013 	str.w	r0, [sp, #19]
   13744:	f7ff fe5c 	bl	13400 <find_sc_cfg>
		if (!cfg) {
   13748:	4604      	mov	r4, r0
   1374a:	b940      	cbnz	r0, 1375e <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   1374c:	2145      	movs	r1, #69	; 0x45
   1374e:	4813      	ldr	r0, [pc, #76]	; (1379c <sc_set+0xc0>)
   13750:	f007 f946 	bl	1a9e0 <printk>
			return -ENOMEM;
   13754:	f06f 050b 	mvn.w	r5, #11
   13758:	e7ce      	b.n	136f8 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   1375a:	462f      	mov	r7, r5
   1375c:	e7e6      	b.n	1372c <sc_set+0x50>
		cfg->id = id;
   1375e:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   13762:	a902      	add	r1, sp, #8
   13764:	f009 fb5e 	bl	1ce24 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   13768:	f104 0108 	add.w	r1, r4, #8
   1376c:	2204      	movs	r2, #4
   1376e:	4648      	mov	r0, r9
   13770:	47c0      	blx	r8
		if (len < 0) {
   13772:	1e04      	subs	r4, r0, #0
   13774:	dac0      	bge.n	136f8 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13776:	4622      	mov	r2, r4
   13778:	2145      	movs	r1, #69	; 0x45
   1377a:	4809      	ldr	r0, [pc, #36]	; (137a0 <sc_set+0xc4>)
   1377c:	f007 f930 	bl	1a9e0 <printk>
			return len;
   13780:	4625      	mov	r5, r4
   13782:	e7b9      	b.n	136f8 <sc_set+0x1c>
	if (len_rd) {
   13784:	2e00      	cmp	r6, #0
   13786:	d1ef      	bne.n	13768 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   13788:	220c      	movs	r2, #12
   1378a:	4631      	mov	r1, r6
   1378c:	f008 fb7d 	bl	1be8a <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   13790:	e7b2      	b.n	136f8 <sc_set+0x1c>
   13792:	bf00      	nop
   13794:	00020cca 	.word	0x00020cca
   13798:	00021dc1 	.word	0x00021dc1
   1379c:	00021de2 	.word	0x00021de2
   137a0:	00021cd3 	.word	0x00021cd3

000137a4 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   137a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137a8:	4606      	mov	r6, r0
   137aa:	4688      	mov	r8, r1
   137ac:	4617      	mov	r7, r2
	if (params) {
   137ae:	461c      	mov	r4, r3
   137b0:	b31b      	cbz	r3, 137fa <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   137b2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   137b6:	2100      	movs	r1, #0
   137b8:	f7ff fc3c 	bl	13034 <bt_att_req_alloc>
		if (!req) {
   137bc:	4605      	mov	r5, r0
   137be:	b920      	cbnz	r0, 137ca <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   137c0:	f06f 040b 	mvn.w	r4, #11
}
   137c4:	4620      	mov	r0, r4
   137c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   137ca:	2300      	movs	r3, #0
		req->user_data = params;
   137cc:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   137ce:	4601      	mov	r1, r0
		req->buf = buf;
   137d0:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   137d4:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   137d6:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   137d8:	4630      	mov	r0, r6
   137da:	f7ff fd57 	bl	1328c <bt_att_req_send>
		if (err) {
   137de:	4604      	mov	r4, r0
   137e0:	2800      	cmp	r0, #0
   137e2:	d0ef      	beq.n	137c4 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   137e4:	4628      	mov	r0, r5
   137e6:	f7ff fc3b 	bl	13060 <bt_att_req_free>
	if (err) {
   137ea:	2c00      	cmp	r4, #0
   137ec:	d0ea      	beq.n	137c4 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   137ee:	4622      	mov	r2, r4
   137f0:	2145      	movs	r1, #69	; 0x45
   137f2:	4804      	ldr	r0, [pc, #16]	; (13804 <gatt_send.constprop.0+0x60>)
   137f4:	f007 f8f4 	bl	1a9e0 <printk>
   137f8:	e7e4      	b.n	137c4 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   137fa:	461a      	mov	r2, r3
   137fc:	f7ff fcde 	bl	131bc <bt_att_send>
   13800:	4604      	mov	r4, r0
   13802:	e7f2      	b.n	137ea <gatt_send.constprop.0+0x46>
   13804:	00021e09 	.word	0x00021e09

00013808 <cf_set>:
{
   13808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1380c:	4689      	mov	r9, r1
   1380e:	4617      	mov	r7, r2
   13810:	4698      	mov	r8, r3
	if (!name) {
   13812:	4605      	mov	r5, r0
{
   13814:	b085      	sub	sp, #20
	if (!name) {
   13816:	b948      	cbnz	r0, 1382c <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13818:	2145      	movs	r1, #69	; 0x45
   1381a:	4826      	ldr	r0, [pc, #152]	; (138b4 <cf_set+0xac>)
   1381c:	f007 f8e0 	bl	1a9e0 <printk>
		return -EINVAL;
   13820:	f06f 0415 	mvn.w	r4, #21
}
   13824:	4620      	mov	r0, r4
   13826:	b005      	add	sp, #20
   13828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1382c:	a902      	add	r1, sp, #8
   1382e:	f008 fb52 	bl	1bed6 <bt_settings_decode_key>
	if (err) {
   13832:	4604      	mov	r4, r0
   13834:	b128      	cbz	r0, 13842 <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   13836:	462a      	mov	r2, r5
   13838:	2145      	movs	r1, #69	; 0x45
   1383a:	481f      	ldr	r0, [pc, #124]	; (138b8 <cf_set+0xb0>)
   1383c:	f007 f8d0 	bl	1a9e0 <printk>
   13840:	e7ee      	b.n	13820 <cf_set+0x18>
	settings_name_next(name, &next);
   13842:	4628      	mov	r0, r5
   13844:	a901      	add	r1, sp, #4
   13846:	f007 fbd0 	bl	1afea <settings_name_next>
	if (!next) {
   1384a:	9801      	ldr	r0, [sp, #4]
   1384c:	b1a8      	cbz	r0, 1387a <cf_set+0x72>
		id = strtol(next, NULL, 10);
   1384e:	220a      	movs	r2, #10
   13850:	4621      	mov	r1, r4
   13852:	f008 fa21 	bl	1bc98 <strtol>
   13856:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   13858:	4630      	mov	r0, r6
   1385a:	a902      	add	r1, sp, #8
   1385c:	f7ff fe0e 	bl	1347c <find_cf_cfg_by_addr>
	if (!cfg) {
   13860:	4605      	mov	r5, r0
   13862:	b988      	cbnz	r0, 13888 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   13864:	f7ff fdaa 	bl	133bc <find_cf_cfg>
		if (!cfg) {
   13868:	4605      	mov	r5, r0
   1386a:	b940      	cbnz	r0, 1387e <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   1386c:	2145      	movs	r1, #69	; 0x45
   1386e:	4813      	ldr	r0, [pc, #76]	; (138bc <cf_set+0xb4>)
   13870:	f007 f8b6 	bl	1a9e0 <printk>
			return -ENOMEM;
   13874:	f06f 040b 	mvn.w	r4, #11
   13878:	e7d4      	b.n	13824 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   1387a:	4626      	mov	r6, r4
   1387c:	e7ec      	b.n	13858 <cf_set+0x50>
		cfg->id = id;
   1387e:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   13882:	a902      	add	r1, sp, #8
   13884:	f009 face 	bl	1ce24 <bt_addr_le_copy>
	if (len_rd) {
   13888:	f1b9 0f00 	cmp.w	r9, #0
   1388c:	d00d      	beq.n	138aa <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1388e:	f105 0108 	add.w	r1, r5, #8
   13892:	2201      	movs	r2, #1
   13894:	4640      	mov	r0, r8
   13896:	47b8      	blx	r7
		if (len < 0) {
   13898:	1e05      	subs	r5, r0, #0
   1389a:	dac3      	bge.n	13824 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1389c:	462a      	mov	r2, r5
   1389e:	2145      	movs	r1, #69	; 0x45
   138a0:	4807      	ldr	r0, [pc, #28]	; (138c0 <cf_set+0xb8>)
   138a2:	f007 f89d 	bl	1a9e0 <printk>
			return len;
   138a6:	462c      	mov	r4, r5
   138a8:	e7bc      	b.n	13824 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   138aa:	4628      	mov	r0, r5
   138ac:	f009 fb00 	bl	1ceb0 <clear_cf_cfg>
   138b0:	e7b8      	b.n	13824 <cf_set+0x1c>
   138b2:	bf00      	nop
   138b4:	00020cca 	.word	0x00020cca
   138b8:	00021dc1 	.word	0x00021dc1
   138bc:	00021e28 	.word	0x00021e28
   138c0:	00021cd3 	.word	0x00021cd3

000138c4 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   138c4:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   138c6:	6881      	ldr	r1, [r0, #8]
{
   138c8:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   138ca:	4a07      	ldr	r2, [pc, #28]	; (138e8 <remove_peer_from_attr+0x24>)
   138cc:	4291      	cmp	r1, r2
   138ce:	d109      	bne.n	138e4 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   138d0:	791a      	ldrb	r2, [r3, #4]
   138d2:	6819      	ldr	r1, [r3, #0]
   138d4:	68c0      	ldr	r0, [r0, #12]
   138d6:	f009 fa8b 	bl	1cdf0 <ccc_find_cfg>
	if (cfg) {
   138da:	b118      	cbz	r0, 138e4 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   138dc:	220a      	movs	r2, #10
   138de:	2100      	movs	r1, #0
   138e0:	f008 fad3 	bl	1be8a <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   138e4:	2001      	movs	r0, #1
   138e6:	bd08      	pop	{r3, pc}
   138e8:	000134b5 	.word	0x000134b5

000138ec <ccc_load>:
{
   138ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   138ee:	4b21      	ldr	r3, [pc, #132]	; (13974 <ccc_load+0x88>)
{
   138f0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   138f2:	6882      	ldr	r2, [r0, #8]
   138f4:	429a      	cmp	r2, r3
   138f6:	d002      	beq.n	138fe <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   138f8:	2001      	movs	r0, #1
}
   138fa:	b002      	add	sp, #8
   138fc:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   138fe:	68a3      	ldr	r3, [r4, #8]
   13900:	68c6      	ldr	r6, [r0, #12]
   13902:	b94b      	cbnz	r3, 13918 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   13904:	4630      	mov	r0, r6
   13906:	7922      	ldrb	r2, [r4, #4]
   13908:	6821      	ldr	r1, [r4, #0]
   1390a:	f009 fa71 	bl	1cdf0 <ccc_find_cfg>
	if (!cfg) {
   1390e:	2800      	cmp	r0, #0
   13910:	d0f2      	beq.n	138f8 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   13912:	f009 fa8a 	bl	1ce2a <clear_ccc_cfg>
   13916:	e7ef      	b.n	138f8 <ccc_load+0xc>
	} else if (!load->count) {
   13918:	68e0      	ldr	r0, [r4, #12]
   1391a:	2800      	cmp	r0, #0
   1391c:	d0ed      	beq.n	138fa <ccc_load+0xe>
	if (load->entry->handle != handle) {
   1391e:	881b      	ldrh	r3, [r3, #0]
   13920:	4299      	cmp	r1, r3
   13922:	d00a      	beq.n	1393a <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   13924:	d9e8      	bls.n	138f8 <ccc_load+0xc>
	load->count--;
   13926:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   13928:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1392a:	3801      	subs	r0, #1
	load->entry++;
   1392c:	3304      	adds	r3, #4
	load->count--;
   1392e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13930:	3800      	subs	r0, #0
   13932:	bf18      	it	ne
   13934:	2001      	movne	r0, #1
	load->entry++;
   13936:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13938:	e7df      	b.n	138fa <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1393a:	4630      	mov	r0, r6
   1393c:	7922      	ldrb	r2, [r4, #4]
   1393e:	6821      	ldr	r1, [r4, #0]
   13940:	f009 fa56 	bl	1cdf0 <ccc_find_cfg>
	if (!cfg) {
   13944:	4605      	mov	r5, r0
   13946:	b980      	cbnz	r0, 1396a <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   13948:	9000      	str	r0, [sp, #0]
   1394a:	4602      	mov	r2, r0
   1394c:	f8cd 0003 	str.w	r0, [sp, #3]
   13950:	4669      	mov	r1, sp
   13952:	4630      	mov	r0, r6
   13954:	f009 fa4c 	bl	1cdf0 <ccc_find_cfg>
		if (!cfg) {
   13958:	4605      	mov	r5, r0
   1395a:	2800      	cmp	r0, #0
   1395c:	d0e3      	beq.n	13926 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1395e:	6821      	ldr	r1, [r4, #0]
   13960:	3001      	adds	r0, #1
   13962:	f009 fa5f 	bl	1ce24 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   13966:	7923      	ldrb	r3, [r4, #4]
   13968:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1396a:	68a3      	ldr	r3, [r4, #8]
   1396c:	885b      	ldrh	r3, [r3, #2]
   1396e:	812b      	strh	r3, [r5, #8]
   13970:	e7d9      	b.n	13926 <ccc_load+0x3a>
   13972:	bf00      	nop
   13974:	000134b5 	.word	0x000134b5

00013978 <ccc_save>:
{
   13978:	b538      	push	{r3, r4, r5, lr}
   1397a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1397c:	4b0b      	ldr	r3, [pc, #44]	; (139ac <ccc_save+0x34>)
   1397e:	6882      	ldr	r2, [r0, #8]
{
   13980:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   13982:	429a      	cmp	r2, r3
   13984:	d10f      	bne.n	139a6 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   13986:	7922      	ldrb	r2, [r4, #4]
   13988:	6821      	ldr	r1, [r4, #0]
   1398a:	68c0      	ldr	r0, [r0, #12]
   1398c:	f009 fa30 	bl	1cdf0 <ccc_find_cfg>
	if (!cfg) {
   13990:	b148      	cbz	r0, 139a6 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   13992:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   13996:	8901      	ldrh	r1, [r0, #8]
   13998:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1399c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1399e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   139a0:	8151      	strh	r1, [r2, #10]
	save->count++;
   139a2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   139a6:	2001      	movs	r0, #1
   139a8:	bd38      	pop	{r3, r4, r5, pc}
   139aa:	bf00      	nop
   139ac:	000134b5 	.word	0x000134b5

000139b0 <gatt_indicate>:
{
   139b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   139b4:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   139b6:	8a92      	ldrh	r2, [r2, #20]
{
   139b8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   139ba:	3202      	adds	r2, #2
   139bc:	211d      	movs	r1, #29
{
   139be:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   139c0:	f7ff f8b8 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   139c4:	4605      	mov	r5, r0
   139c6:	b1e8      	cbz	r0, 13a04 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   139c8:	f100 0808 	add.w	r8, r0, #8
   139cc:	2102      	movs	r1, #2
   139ce:	4640      	mov	r0, r8
   139d0:	f002 f8a6 	bl	15b20 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   139d4:	4606      	mov	r6, r0
   139d6:	8aa1      	ldrh	r1, [r4, #20]
   139d8:	f826 9b02 	strh.w	r9, [r6], #2
   139dc:	4640      	mov	r0, r8
   139de:	f002 f89f 	bl	15b20 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   139e2:	4630      	mov	r0, r6
   139e4:	8aa2      	ldrh	r2, [r4, #20]
   139e6:	6921      	ldr	r1, [r4, #16]
   139e8:	f008 fa24 	bl	1be34 <memcpy>
	if (!params->func) {
   139ec:	68a3      	ldr	r3, [r4, #8]
   139ee:	b933      	cbnz	r3, 139fe <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   139f0:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   139f2:	4629      	mov	r1, r5
   139f4:	4638      	mov	r0, r7
}
   139f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   139fa:	f7ff bed3 	b.w	137a4 <gatt_send.constprop.0>
   139fe:	4623      	mov	r3, r4
   13a00:	4a04      	ldr	r2, [pc, #16]	; (13a14 <gatt_indicate+0x64>)
   13a02:	e7f6      	b.n	139f2 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   13a04:	2157      	movs	r1, #87	; 0x57
   13a06:	4804      	ldr	r0, [pc, #16]	; (13a18 <gatt_indicate+0x68>)
   13a08:	f006 ffea 	bl	1a9e0 <printk>
}
   13a0c:	f06f 000b 	mvn.w	r0, #11
   13a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a14:	0001ccd1 	.word	0x0001ccd1
   13a18:	00021e4f 	.word	0x00021e4f

00013a1c <gatt_notify>:
{
   13a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a20:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   13a22:	8992      	ldrh	r2, [r2, #12]
{
   13a24:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13a26:	3202      	adds	r2, #2
   13a28:	211b      	movs	r1, #27
{
   13a2a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13a2c:	f7ff f882 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   13a30:	4605      	mov	r5, r0
   13a32:	b1c8      	cbz	r0, 13a68 <gatt_notify+0x4c>
   13a34:	f100 0908 	add.w	r9, r0, #8
   13a38:	2102      	movs	r1, #2
   13a3a:	4648      	mov	r0, r9
   13a3c:	f002 f870 	bl	15b20 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   13a40:	4606      	mov	r6, r0
   13a42:	89a1      	ldrh	r1, [r4, #12]
   13a44:	f826 8b02 	strh.w	r8, [r6], #2
   13a48:	4648      	mov	r0, r9
   13a4a:	f002 f869 	bl	15b20 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   13a4e:	89a2      	ldrh	r2, [r4, #12]
   13a50:	68a1      	ldr	r1, [r4, #8]
   13a52:	4630      	mov	r0, r6
   13a54:	f008 f9ee 	bl	1be34 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   13a58:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13a5c:	4629      	mov	r1, r5
   13a5e:	4638      	mov	r0, r7
}
   13a60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   13a64:	f7ff bbaa 	b.w	131bc <bt_att_send>
		BT_WARN("No buffer available to send notification");
   13a68:	2157      	movs	r1, #87	; 0x57
   13a6a:	4803      	ldr	r0, [pc, #12]	; (13a78 <gatt_notify+0x5c>)
   13a6c:	f006 ffb8 	bl	1a9e0 <printk>
}
   13a70:	f06f 000b 	mvn.w	r0, #11
   13a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a78:	00021e7b 	.word	0x00021e7b

00013a7c <notify_cb>:
{
   13a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a80:	4b38      	ldr	r3, [pc, #224]	; (13b64 <notify_cb+0xe8>)
{
   13a82:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a84:	6882      	ldr	r2, [r0, #8]
{
   13a86:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a88:	429a      	cmp	r2, r3
   13a8a:	d003      	beq.n	13a94 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13a8c:	2001      	movs	r0, #1
}
   13a8e:	b003      	add	sp, #12
   13a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   13a94:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13a98:	4b33      	ldr	r3, [pc, #204]	; (13b68 <notify_cb+0xec>)
   13a9a:	4599      	cmp	r9, r3
   13a9c:	d01a      	beq.n	13ad4 <notify_cb+0x58>
   13a9e:	f04f 0b00 	mov.w	fp, #0
   13aa2:	f109 0701 	add.w	r7, r9, #1
   13aa6:	f109 0a33 	add.w	sl, r9, #51	; 0x33
		if (cfg->value != data->type) {
   13aaa:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   13aae:	89a3      	ldrh	r3, [r4, #12]
   13ab0:	429a      	cmp	r2, r3
   13ab2:	d10b      	bne.n	13acc <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13ab4:	4639      	mov	r1, r7
   13ab6:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13aba:	f7fd fead 	bl	11818 <bt_conn_lookup_addr_le>
		if (!conn) {
   13abe:	4605      	mov	r5, r0
   13ac0:	b120      	cbz	r0, 13acc <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   13ac2:	7a83      	ldrb	r3, [r0, #10]
   13ac4:	2b07      	cmp	r3, #7
   13ac6:	d029      	beq.n	13b1c <notify_cb+0xa0>
			bt_conn_unref(conn);
   13ac8:	f7fd fd84 	bl	115d4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13acc:	370a      	adds	r7, #10
   13ace:	4557      	cmp	r7, sl
   13ad0:	d1eb      	bne.n	13aaa <notify_cb+0x2e>
   13ad2:	e7db      	b.n	13a8c <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13ad4:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13ad6:	4637      	mov	r7, r6
   13ad8:	4d24      	ldr	r5, [pc, #144]	; (13b6c <notify_cb+0xf0>)
   13ada:	4669      	mov	r1, sp
   13adc:	4628      	mov	r0, r5
   13ade:	9700      	str	r7, [sp, #0]
   13ae0:	f8cd 7003 	str.w	r7, [sp, #3]
   13ae4:	f009 f962 	bl	1cdac <bt_addr_le_cmp>
   13ae8:	b178      	cbz	r0, 13b0a <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13aea:	2207      	movs	r2, #7
   13aec:	4629      	mov	r1, r5
   13aee:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13af2:	f7fd fed1 	bl	11898 <bt_conn_lookup_state_le>
			if (!conn) {
   13af6:	b970      	cbnz	r0, 13b16 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13af8:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13afa:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13afc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13afe:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13b02:	8853      	ldrh	r3, [r2, #2]
   13b04:	8812      	ldrh	r2, [r2, #0]
   13b06:	f7ff fdad 	bl	13664 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13b0a:	3601      	adds	r6, #1
   13b0c:	2e05      	cmp	r6, #5
   13b0e:	f105 050c 	add.w	r5, r5, #12
   13b12:	d1e2      	bne.n	13ada <notify_cb+0x5e>
   13b14:	e7c3      	b.n	13a9e <notify_cb+0x22>
			bt_conn_unref(conn);
   13b16:	f7fd fd5d 	bl	115d4 <bt_conn_unref>
   13b1a:	e7f6      	b.n	13b0a <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13b1c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
   13b20:	b123      	cbz	r3, 13b2c <notify_cb+0xb0>
   13b22:	4641      	mov	r1, r8
   13b24:	4798      	blx	r3
   13b26:	b908      	cbnz	r0, 13b2c <notify_cb+0xb0>
			bt_conn_unref(conn);
   13b28:	4628      	mov	r0, r5
   13b2a:	e7cd      	b.n	13ac8 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   13b2c:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   13b2e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   13b30:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   13b32:	88a1      	ldrh	r1, [r4, #4]
   13b34:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   13b36:	d10f      	bne.n	13b58 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   13b38:	f7ff ff3a 	bl	139b0 <gatt_indicate>
			if (err == 0) {
   13b3c:	4606      	mov	r6, r0
   13b3e:	b918      	cbnz	r0, 13b48 <notify_cb+0xcc>
				data->ind_params->_ref++;
   13b40:	6922      	ldr	r2, [r4, #16]
   13b42:	7d93      	ldrb	r3, [r2, #22]
   13b44:	3301      	adds	r3, #1
   13b46:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   13b48:	4628      	mov	r0, r5
   13b4a:	f7fd fd43 	bl	115d4 <bt_conn_unref>
		if (err < 0) {
   13b4e:	2e00      	cmp	r6, #0
   13b50:	db06      	blt.n	13b60 <notify_cb+0xe4>
		data->err = 0;
   13b52:	f8c4 b008 	str.w	fp, [r4, #8]
   13b56:	e7b9      	b.n	13acc <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   13b58:	f7ff ff60 	bl	13a1c <gatt_notify>
   13b5c:	4606      	mov	r6, r0
   13b5e:	e7f3      	b.n	13b48 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   13b60:	2000      	movs	r0, #0
   13b62:	e794      	b.n	13a8e <notify_cb+0x12>
   13b64:	000134b5 	.word	0x000134b5
   13b68:	200083a0 	.word	0x200083a0
   13b6c:	2000e2dd 	.word	0x2000e2dd

00013b70 <bt_gatt_clear_sc>:
{
   13b70:	b570      	push	{r4, r5, r6, lr}
   13b72:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   13b74:	f7ff fc44 	bl	13400 <find_sc_cfg>
	if (!cfg) {
   13b78:	4604      	mov	r4, r0
   13b7a:	b1e8      	cbz	r0, 13bb8 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   13b7c:	4605      	mov	r5, r0
   13b7e:	f815 2b01 	ldrb.w	r2, [r5], #1
   13b82:	b1e2      	cbz	r2, 13bbe <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13b84:	ae02      	add	r6, sp, #8
   13b86:	2104      	movs	r1, #4
   13b88:	4630      	mov	r0, r6
   13b8a:	f006 fe8f 	bl	1a8ac <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13b8e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13b90:	4a0c      	ldr	r2, [pc, #48]	; (13bc4 <bt_gatt_clear_sc+0x54>)
   13b92:	462b      	mov	r3, r5
   13b94:	2124      	movs	r1, #36	; 0x24
   13b96:	a803      	add	r0, sp, #12
   13b98:	f7fa fe0c 	bl	e7b4 <bt_settings_encode_key>
		err = settings_delete(key);
   13b9c:	a803      	add	r0, sp, #12
   13b9e:	f007 f9fd 	bl	1af9c <settings_delete>
		if (err) {
   13ba2:	4602      	mov	r2, r0
   13ba4:	b118      	cbz	r0, 13bae <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   13ba6:	2145      	movs	r1, #69	; 0x45
   13ba8:	4807      	ldr	r0, [pc, #28]	; (13bc8 <bt_gatt_clear_sc+0x58>)
   13baa:	f006 ff19 	bl	1a9e0 <printk>
	memset(cfg, 0, sizeof(*cfg));
   13bae:	220c      	movs	r2, #12
   13bb0:	2100      	movs	r1, #0
   13bb2:	4620      	mov	r0, r4
   13bb4:	f008 f969 	bl	1be8a <memset>
}
   13bb8:	2000      	movs	r0, #0
   13bba:	b00c      	add	sp, #48	; 0x30
   13bbc:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13bbe:	9200      	str	r2, [sp, #0]
   13bc0:	e7e6      	b.n	13b90 <bt_gatt_clear_sc+0x20>
   13bc2:	bf00      	nop
   13bc4:	0002209b 	.word	0x0002209b
   13bc8:	00021ea9 	.word	0x00021ea9

00013bcc <sc_clear>:
{
   13bcc:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13bce:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   13bd2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13bd4:	4631      	mov	r1, r6
   13bd6:	7a00      	ldrb	r0, [r0, #8]
   13bd8:	f008 faf3 	bl	1c1c2 <bt_addr_le_is_bonded>
   13bdc:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13bde:	4631      	mov	r1, r6
   13be0:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13be2:	b14d      	cbz	r5, 13bf8 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13be4:	f7ff ffc4 	bl	13b70 <bt_gatt_clear_sc>
		if (err) {
   13be8:	4602      	mov	r2, r0
   13bea:	b170      	cbz	r0, 13c0a <sc_clear+0x3e>
}
   13bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13bf0:	2145      	movs	r1, #69	; 0x45
   13bf2:	4806      	ldr	r0, [pc, #24]	; (13c0c <sc_clear+0x40>)
   13bf4:	f006 bef4 	b.w	1a9e0 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13bf8:	f7ff fc02 	bl	13400 <find_sc_cfg>
		if (cfg) {
   13bfc:	b128      	cbz	r0, 13c0a <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13bfe:	4629      	mov	r1, r5
}
   13c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   13c04:	220c      	movs	r2, #12
   13c06:	f008 b940 	b.w	1be8a <memset>
}
   13c0a:	bd70      	pop	{r4, r5, r6, pc}
   13c0c:	00021ecb 	.word	0x00021ecb

00013c10 <disconnected_cb>:
{
   13c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c14:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13c16:	4b25      	ldr	r3, [pc, #148]	; (13cac <disconnected_cb+0x9c>)
   13c18:	6882      	ldr	r2, [r0, #8]
{
   13c1a:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13c1c:	429a      	cmp	r2, r3
   13c1e:	d12f      	bne.n	13c80 <disconnected_cb+0x70>
	ccc = attr->user_data;
   13c20:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   13c22:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
   13c24:	b363      	cbz	r3, 13c80 <disconnected_cb+0x70>
	value_used = false;
   13c26:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   13c2a:	f8df b084 	ldr.w	fp, [pc, #132]	; 13cb0 <disconnected_cb+0xa0>
   13c2e:	1c6c      	adds	r4, r5, #1
   13c30:	f105 0a33 	add.w	sl, r5, #51	; 0x33
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13c34:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   13c38:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13c3c:	b19b      	cbz	r3, 13c66 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13c3e:	4622      	mov	r2, r4
   13c40:	4630      	mov	r0, r6
   13c42:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13c46:	f008 fb50 	bl	1c2ea <bt_conn_is_peer_addr_le>
   13c4a:	b9e0      	cbnz	r0, 13c86 <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13c4c:	4621      	mov	r1, r4
   13c4e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13c52:	f7fd fde1 	bl	11818 <bt_conn_lookup_addr_le>
			if (tmp) {
   13c56:	b130      	cbz	r0, 13c66 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   13c58:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   13c5a:	2b07      	cmp	r3, #7
   13c5c:	bf08      	it	eq
   13c5e:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   13c62:	f7fd fcb7 	bl	115d4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13c66:	340a      	adds	r4, #10
   13c68:	45a2      	cmp	sl, r4
   13c6a:	d1e5      	bne.n	13c38 <disconnected_cb+0x28>
	if (!value_used) {
   13c6c:	f1b8 0f00 	cmp.w	r8, #0
   13c70:	d106      	bne.n	13c80 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   13c72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
		ccc->value = 0U;
   13c74:	f8a5 8032 	strh.w	r8, [r5, #50]	; 0x32
		if (ccc->cfg_changed) {
   13c78:	b113      	cbz	r3, 13c80 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   13c7a:	4641      	mov	r1, r8
   13c7c:	4638      	mov	r0, r7
   13c7e:	4798      	blx	r3
}
   13c80:	2001      	movs	r0, #1
   13c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13c86:	4649      	mov	r1, r9
   13c88:	7a30      	ldrb	r0, [r6, #8]
   13c8a:	f008 fa9a 	bl	1c1c2 <bt_addr_le_is_bonded>
   13c8e:	b940      	cbnz	r0, 13ca2 <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   13c90:	455d      	cmp	r5, fp
   13c92:	d102      	bne.n	13c9a <disconnected_cb+0x8a>
					sc_clear(conn);
   13c94:	4630      	mov	r0, r6
   13c96:	f7ff ff99 	bl	13bcc <sc_clear>
				clear_ccc_cfg(cfg);
   13c9a:	1e60      	subs	r0, r4, #1
   13c9c:	f009 f8c5 	bl	1ce2a <clear_ccc_cfg>
   13ca0:	e7e1      	b.n	13c66 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13ca2:	4649      	mov	r1, r9
   13ca4:	4620      	mov	r0, r4
   13ca6:	f009 f8bd 	bl	1ce24 <bt_addr_le_copy>
   13caa:	e7dc      	b.n	13c66 <disconnected_cb+0x56>
   13cac:	000134b5 	.word	0x000134b5
   13cb0:	200083a0 	.word	0x200083a0

00013cb4 <sc_commit>:
{
   13cb4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13cb6:	490b      	ldr	r1, [pc, #44]	; (13ce4 <sc_commit+0x30>)
   13cb8:	e8d1 3fef 	ldaex	r3, [r1]
   13cbc:	f023 0302 	bic.w	r3, r3, #2
   13cc0:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13cc4:	2a00      	cmp	r2, #0
   13cc6:	d1f7      	bne.n	13cb8 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13cc8:	4608      	mov	r0, r1
   13cca:	f009 f8c7 	bl	1ce5c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13cce:	07c3      	lsls	r3, r0, #31
   13cd0:	d506      	bpl.n	13ce0 <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13cd2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13cd6:	2300      	movs	r3, #0
   13cd8:	4803      	ldr	r0, [pc, #12]	; (13ce8 <sc_commit+0x34>)
   13cda:	3930      	subs	r1, #48	; 0x30
   13cdc:	f005 ff0a 	bl	19af4 <k_delayed_work_submit_to_queue>
}
   13ce0:	2000      	movs	r0, #0
   13ce2:	bd08      	pop	{r3, pc}
   13ce4:	200093c8 	.word	0x200093c8
   13ce8:	200098e0 	.word	0x200098e0

00013cec <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13cf0:	4688      	mov	r8, r1
   13cf2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13cf4:	2112      	movs	r1, #18
   13cf6:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13cf8:	4606      	mov	r6, r0
   13cfa:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13cfc:	f7fe ff1a 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   13d00:	4604      	mov	r4, r0
   13d02:	b1c0      	cbz	r0, 13d36 <gatt_write_ccc.constprop.0+0x4a>
   13d04:	f100 0908 	add.w	r9, r0, #8
   13d08:	2102      	movs	r1, #2
   13d0a:	4648      	mov	r0, r9
   13d0c:	f001 ff08 	bl	15b20 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   13d10:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   13d12:	f8a0 8000 	strh.w	r8, [r0]
   13d16:	4648      	mov	r0, r9
   13d18:	f009 fbde 	bl	1d4d8 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13d1c:	2104      	movs	r1, #4
   13d1e:	f105 0010 	add.w	r0, r5, #16
   13d22:	f009 f890 	bl	1ce46 <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   13d26:	462b      	mov	r3, r5
   13d28:	4621      	mov	r1, r4
   13d2a:	4630      	mov	r0, r6
}
   13d2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   13d30:	4a03      	ldr	r2, [pc, #12]	; (13d40 <gatt_write_ccc.constprop.0+0x54>)
   13d32:	f7ff bd37 	b.w	137a4 <gatt_send.constprop.0>
}
   13d36:	f06f 000b 	mvn.w	r0, #11
   13d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d3e:	bf00      	nop
   13d40:	0001cf3f 	.word	0x0001cf3f

00013d44 <sc_indicate_rsp>:
{
   13d44:	b510      	push	{r4, lr}
   13d46:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d48:	4910      	ldr	r1, [pc, #64]	; (13d8c <sc_indicate_rsp+0x48>)
   13d4a:	e8d1 3fef 	ldaex	r3, [r1]
   13d4e:	f023 0302 	bic.w	r3, r3, #2
   13d52:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13d56:	2a00      	cmp	r2, #0
   13d58:	d1f7      	bne.n	13d4a <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13d5a:	4608      	mov	r0, r1
   13d5c:	f009 f87e 	bl	1ce5c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13d60:	07c2      	lsls	r2, r0, #31
   13d62:	d505      	bpl.n	13d70 <sc_indicate_rsp+0x2c>
   13d64:	2200      	movs	r2, #0
   13d66:	2300      	movs	r3, #0
   13d68:	4809      	ldr	r0, [pc, #36]	; (13d90 <sc_indicate_rsp+0x4c>)
   13d6a:	3930      	subs	r1, #48	; 0x30
   13d6c:	f005 fec2 	bl	19af4 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   13d70:	4620      	mov	r0, r4
   13d72:	f7ff fb23 	bl	133bc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13d76:	b140      	cbz	r0, 13d8a <sc_indicate_rsp+0x46>
   13d78:	7a03      	ldrb	r3, [r0, #8]
   13d7a:	07db      	lsls	r3, r3, #31
   13d7c:	d505      	bpl.n	13d8a <sc_indicate_rsp+0x46>
}
   13d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13d82:	2101      	movs	r1, #1
   13d84:	300c      	adds	r0, #12
   13d86:	f009 b85e 	b.w	1ce46 <atomic_or>
   13d8a:	bd10      	pop	{r4, pc}
   13d8c:	200093c8 	.word	0x200093c8
   13d90:	200098e0 	.word	0x200098e0

00013d94 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13d94:	2201      	movs	r2, #1
{
   13d96:	b570      	push	{r4, r5, r6, lr}
   13d98:	4b26      	ldr	r3, [pc, #152]	; (13e34 <bt_gatt_init+0xa0>)
   13d9a:	e8d3 1fef 	ldaex	r1, [r3]
   13d9e:	2900      	cmp	r1, #0
   13da0:	d103      	bne.n	13daa <bt_gatt_init+0x16>
   13da2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13da6:	2800      	cmp	r0, #0
   13da8:	d1f7      	bne.n	13d9a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13daa:	d142      	bne.n	13e32 <bt_gatt_init+0x9e>
   13dac:	4b22      	ldr	r3, [pc, #136]	; (13e38 <bt_gatt_init+0xa4>)
   13dae:	e8d3 1fef 	ldaex	r1, [r3]
   13db2:	2900      	cmp	r1, #0
   13db4:	d103      	bne.n	13dbe <bt_gatt_init+0x2a>
   13db6:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13dba:	2800      	cmp	r0, #0
   13dbc:	d1f7      	bne.n	13dae <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13dbe:	d034      	beq.n	13e2a <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13dc0:	4c1e      	ldr	r4, [pc, #120]	; (13e3c <bt_gatt_init+0xa8>)
   13dc2:	2230      	movs	r2, #48	; 0x30
   13dc4:	2100      	movs	r1, #0
   13dc6:	4620      	mov	r0, r4
   13dc8:	f008 f85f 	bl	1be8a <memset>
   13dcc:	4b1c      	ldr	r3, [pc, #112]	; (13e40 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13dce:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13dd0:	6063      	str	r3, [r4, #4]
   13dd2:	4c1c      	ldr	r4, [pc, #112]	; (13e44 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13dd4:	2300      	movs	r3, #0
   13dd6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13dda:	481b      	ldr	r0, [pc, #108]	; (13e48 <bt_gatt_init+0xb4>)
   13ddc:	f005 fe8a 	bl	19af4 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13de0:	2100      	movs	r1, #0
   13de2:	f104 0020 	add.w	r0, r4, #32
   13de6:	2230      	movs	r2, #48	; 0x30
   13de8:	f008 f84f 	bl	1be8a <memset>
   13dec:	4b17      	ldr	r3, [pc, #92]	; (13e4c <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13dee:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13df2:	6263      	str	r3, [r4, #36]	; 0x24
   13df4:	2102      	movs	r1, #2
}
   13df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13dfa:	f009 b824 	b.w	1ce46 <atomic_or>
		last_static_handle += svc->attr_count;
   13dfe:	4a14      	ldr	r2, [pc, #80]	; (13e50 <bt_gatt_init+0xbc>)
   13e00:	6863      	ldr	r3, [r4, #4]
   13e02:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13e04:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13e06:	440b      	add	r3, r1
   13e08:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13e0a:	42ac      	cmp	r4, r5
   13e0c:	d90a      	bls.n	13e24 <bt_gatt_init+0x90>
   13e0e:	4631      	mov	r1, r6
   13e10:	4810      	ldr	r0, [pc, #64]	; (13e54 <bt_gatt_init+0xc0>)
   13e12:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13e16:	f006 fde3 	bl	1a9e0 <printk>
   13e1a:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13e1e:	4630      	mov	r0, r6
   13e20:	f007 f884 	bl	1af2c <assert_post_action>
   13e24:	42ac      	cmp	r4, r5
   13e26:	d3ea      	bcc.n	13dfe <bt_gatt_init+0x6a>
   13e28:	e7ca      	b.n	13dc0 <bt_gatt_init+0x2c>
   13e2a:	4c0b      	ldr	r4, [pc, #44]	; (13e58 <bt_gatt_init+0xc4>)
   13e2c:	4d0b      	ldr	r5, [pc, #44]	; (13e5c <bt_gatt_init+0xc8>)
   13e2e:	4e0c      	ldr	r6, [pc, #48]	; (13e60 <bt_gatt_init+0xcc>)
   13e30:	e7eb      	b.n	13e0a <bt_gatt_init+0x76>
}
   13e32:	bd70      	pop	{r4, r5, r6, pc}
   13e34:	20009fac 	.word	0x20009fac
   13e38:	2000a028 	.word	0x2000a028
   13e3c:	20009348 	.word	0x20009348
   13e40:	0001d237 	.word	0x0001d237
   13e44:	20009378 	.word	0x20009378
   13e48:	200098e0 	.word	0x200098e0
   13e4c:	00014425 	.word	0x00014425
   13e50:	2000e2da 	.word	0x2000e2da
   13e54:	0001faab 	.word	0x0001faab
   13e58:	0001e534 	.word	0x0001e534
   13e5c:	0001e55c 	.word	0x0001e55c
   13e60:	00021ee6 	.word	0x00021ee6

00013e64 <bt_gatt_attr_get_handle>:
{
   13e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13e68:	4604      	mov	r4, r0
   13e6a:	b910      	cbnz	r0, 13e72 <bt_gatt_attr_get_handle+0xe>
		return 0;
   13e6c:	2000      	movs	r0, #0
}
   13e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   13e72:	8a00      	ldrh	r0, [r0, #16]
   13e74:	2800      	cmp	r0, #0
   13e76:	d1fa      	bne.n	13e6e <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13e78:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13e7c:	4d17      	ldr	r5, [pc, #92]	; (13edc <bt_gatt_attr_get_handle+0x78>)
   13e7e:	4e18      	ldr	r6, [pc, #96]	; (13ee0 <bt_gatt_attr_get_handle+0x7c>)
   13e80:	4f18      	ldr	r7, [pc, #96]	; (13ee4 <bt_gatt_attr_get_handle+0x80>)
   13e82:	42b5      	cmp	r5, r6
   13e84:	d90a      	bls.n	13e9c <bt_gatt_attr_get_handle+0x38>
   13e86:	4639      	mov	r1, r7
   13e88:	4817      	ldr	r0, [pc, #92]	; (13ee8 <bt_gatt_attr_get_handle+0x84>)
   13e8a:	f240 522d 	movw	r2, #1325	; 0x52d
   13e8e:	f006 fda7 	bl	1a9e0 <printk>
   13e92:	f240 512d 	movw	r1, #1325	; 0x52d
   13e96:	4638      	mov	r0, r7
   13e98:	f007 f848 	bl	1af2c <assert_post_action>
   13e9c:	42b5      	cmp	r5, r6
   13e9e:	d2e5      	bcs.n	13e6c <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13ea0:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   13ea4:	4564      	cmp	r4, ip
   13ea6:	d306      	bcc.n	13eb6 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13ea8:	f04f 0e14 	mov.w	lr, #20
   13eac:	fb0e c301 	mla	r3, lr, r1, ip
   13eb0:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   13eb2:	429c      	cmp	r4, r3
   13eb4:	d910      	bls.n	13ed8 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13eb6:	eb08 0001 	add.w	r0, r8, r1
   13eba:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13ebc:	4680      	mov	r8, r0
   13ebe:	3508      	adds	r5, #8
   13ec0:	e7df      	b.n	13e82 <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   13ec2:	fb0e c302 	mla	r3, lr, r2, ip
   13ec6:	429c      	cmp	r4, r3
   13ec8:	d0d1      	beq.n	13e6e <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13eca:	3201      	adds	r2, #1
   13ecc:	eb08 0302 	add.w	r3, r8, r2
   13ed0:	4291      	cmp	r1, r2
   13ed2:	b298      	uxth	r0, r3
   13ed4:	d1f5      	bne.n	13ec2 <bt_gatt_attr_get_handle+0x5e>
   13ed6:	e7f1      	b.n	13ebc <bt_gatt_attr_get_handle+0x58>
   13ed8:	2200      	movs	r2, #0
   13eda:	e7f7      	b.n	13ecc <bt_gatt_attr_get_handle+0x68>
   13edc:	0001e534 	.word	0x0001e534
   13ee0:	0001e55c 	.word	0x0001e55c
   13ee4:	00021ee6 	.word	0x00021ee6
   13ee8:	0001faab 	.word	0x0001faab

00013eec <bt_gatt_foreach_attr_type>:
{
   13eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ef0:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   13ef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13ef6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13efa:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13efc:	2d00      	cmp	r5, #0
   13efe:	bf08      	it	eq
   13f00:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   13f02:	4b2b      	ldr	r3, [pc, #172]	; (13fb0 <bt_gatt_foreach_attr_type+0xc4>)
{
   13f04:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13f06:	881b      	ldrh	r3, [r3, #0]
{
   13f08:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13f0a:	4283      	cmp	r3, r0
   13f0c:	d24b      	bcs.n	13fa6 <bt_gatt_foreach_attr_type+0xba>
}
   13f0e:	b003      	add	sp, #12
   13f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13f14:	6873      	ldr	r3, [r6, #4]
   13f16:	4423      	add	r3, r4
   13f18:	42bb      	cmp	r3, r7
   13f1a:	d241      	bcs.n	13fa0 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13f1c:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13f1e:	3608      	adds	r6, #8
   13f20:	4b24      	ldr	r3, [pc, #144]	; (13fb4 <bt_gatt_foreach_attr_type+0xc8>)
   13f22:	429e      	cmp	r6, r3
   13f24:	d90a      	bls.n	13f3c <bt_gatt_foreach_attr_type+0x50>
   13f26:	4659      	mov	r1, fp
   13f28:	4823      	ldr	r0, [pc, #140]	; (13fb8 <bt_gatt_foreach_attr_type+0xcc>)
   13f2a:	f240 52f1 	movw	r2, #1521	; 0x5f1
   13f2e:	f006 fd57 	bl	1a9e0 <printk>
   13f32:	f240 51f1 	movw	r1, #1521	; 0x5f1
   13f36:	4658      	mov	r0, fp
   13f38:	f006 fff8 	bl	1af2c <assert_post_action>
   13f3c:	4b1d      	ldr	r3, [pc, #116]	; (13fb4 <bt_gatt_foreach_attr_type+0xc8>)
   13f3e:	429e      	cmp	r6, r3
   13f40:	d3e8      	bcc.n	13f14 <bt_gatt_foreach_attr_type+0x28>
   13f42:	e7e4      	b.n	13f0e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13f44:	4640      	mov	r0, r8
   13f46:	5889      	ldr	r1, [r1, r2]
   13f48:	9301      	str	r3, [sp, #4]
   13f4a:	f007 ffe8 	bl	1bf1e <bt_uuid_cmp>
   13f4e:	9b01      	ldr	r3, [sp, #4]
   13f50:	b198      	cbz	r0, 13f7a <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13f52:	3401      	adds	r4, #1
   13f54:	f10a 0a01 	add.w	sl, sl, #1
   13f58:	b2a4      	uxth	r4, r4
   13f5a:	6873      	ldr	r3, [r6, #4]
   13f5c:	4553      	cmp	r3, sl
   13f5e:	d9de      	bls.n	13f1e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   13f60:	9b00      	ldr	r3, [sp, #0]
   13f62:	429c      	cmp	r4, r3
   13f64:	d8d3      	bhi.n	13f0e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   13f66:	42bc      	cmp	r4, r7
   13f68:	d3f3      	bcc.n	13f52 <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13f6a:	2314      	movs	r3, #20
   13f6c:	fb03 f20a 	mul.w	r2, r3, sl
   13f70:	6831      	ldr	r1, [r6, #0]
   13f72:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13f74:	f1b8 0f00 	cmp.w	r8, #0
   13f78:	d1e4      	bne.n	13f44 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   13f7a:	f1b9 0f00 	cmp.w	r9, #0
   13f7e:	d10b      	bne.n	13f98 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   13f80:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   13f82:	4618      	mov	r0, r3
	*num_matches -= 1;
   13f84:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   13f86:	4621      	mov	r1, r4
   13f88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13f8c:	4798      	blx	r3
	if (!*num_matches) {
   13f8e:	2d00      	cmp	r5, #0
   13f90:	d0bd      	beq.n	13f0e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13f92:	2800      	cmp	r0, #0
   13f94:	d1dd      	bne.n	13f52 <bt_gatt_foreach_attr_type+0x66>
   13f96:	e7ba      	b.n	13f0e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   13f98:	68da      	ldr	r2, [r3, #12]
   13f9a:	4591      	cmp	r9, r2
   13f9c:	d1d9      	bne.n	13f52 <bt_gatt_foreach_attr_type+0x66>
   13f9e:	e7ef      	b.n	13f80 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13fa0:	f04f 0a00 	mov.w	sl, #0
   13fa4:	e7d9      	b.n	13f5a <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   13fa6:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13fa8:	4e04      	ldr	r6, [pc, #16]	; (13fbc <bt_gatt_foreach_attr_type+0xd0>)
   13faa:	f8df b014 	ldr.w	fp, [pc, #20]	; 13fc0 <bt_gatt_foreach_attr_type+0xd4>
   13fae:	e7b7      	b.n	13f20 <bt_gatt_foreach_attr_type+0x34>
   13fb0:	2000e2da 	.word	0x2000e2da
   13fb4:	0001e55c 	.word	0x0001e55c
   13fb8:	0001faab 	.word	0x0001faab
   13fbc:	0001e534 	.word	0x0001e534
   13fc0:	00021ee6 	.word	0x00021ee6

00013fc4 <db_hash_gen>:
	uint8_t key[16] = {};
   13fc4:	2300      	movs	r3, #0
{
   13fc6:	b530      	push	{r4, r5, lr}
   13fc8:	b0c9      	sub	sp, #292	; 0x124
   13fca:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13fcc:	4669      	mov	r1, sp
   13fce:	aa1c      	add	r2, sp, #112	; 0x70
   13fd0:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   13fd2:	e9cd 3300 	strd	r3, r3, [sp]
   13fd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13fda:	f007 fb54 	bl	1b686 <tc_cmac_setup>
   13fde:	b928      	cbnz	r0, 13fec <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   13fe0:	2145      	movs	r1, #69	; 0x45
   13fe2:	4812      	ldr	r0, [pc, #72]	; (1402c <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   13fe4:	f006 fcfc 	bl	1a9e0 <printk>
}
   13fe8:	b049      	add	sp, #292	; 0x124
   13fea:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13fec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13ff0:	2001      	movs	r0, #1
   13ff2:	4a0f      	ldr	r2, [pc, #60]	; (14030 <db_hash_gen+0x6c>)
   13ff4:	ab04      	add	r3, sp, #16
   13ff6:	f009 f913 	bl	1d220 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13ffa:	480e      	ldr	r0, [pc, #56]	; (14034 <db_hash_gen+0x70>)
   13ffc:	a904      	add	r1, sp, #16
   13ffe:	f007 fbd8 	bl	1b7b2 <tc_cmac_final>
   14002:	b910      	cbnz	r0, 1400a <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   14004:	2145      	movs	r1, #69	; 0x45
   14006:	480c      	ldr	r0, [pc, #48]	; (14038 <db_hash_gen+0x74>)
   14008:	e7ec      	b.n	13fe4 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   1400a:	2208      	movs	r2, #8
   1400c:	4b09      	ldr	r3, [pc, #36]	; (14034 <db_hash_gen+0x70>)
   1400e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   14012:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   14014:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   14018:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1401a:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1401e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   14020:	d1f7      	bne.n	14012 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   14022:	2c00      	cmp	r4, #0
   14024:	d0e0      	beq.n	13fe8 <db_hash_gen+0x24>
		db_hash_store();
   14026:	f7ff f9b3 	bl	13390 <db_hash_store>
   1402a:	e7dd      	b.n	13fe8 <db_hash_gen+0x24>
   1402c:	00021f16 	.word	0x00021f16
   14030:	0001cd01 	.word	0x0001cd01
   14034:	2000ea3b 	.word	0x2000ea3b
   14038:	00021f34 	.word	0x00021f34

0001403c <db_hash_commit>:
{
   1403c:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   1403e:	4821      	ldr	r0, [pc, #132]	; (140c4 <db_hash_commit+0x88>)
   14040:	f005 fdc8 	bl	19bd4 <k_delayed_work_cancel>
	if (!err) {
   14044:	b908      	cbnz	r0, 1404a <db_hash_commit+0xe>
		db_hash_gen(false);
   14046:	f7ff ffbd 	bl	13fc4 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   1404a:	2210      	movs	r2, #16
   1404c:	491e      	ldr	r1, [pc, #120]	; (140c8 <db_hash_commit+0x8c>)
   1404e:	481f      	ldr	r0, [pc, #124]	; (140cc <db_hash_commit+0x90>)
   14050:	f007 fedf 	bl	1be12 <memcmp>
   14054:	b968      	cbnz	r0, 14072 <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   14056:	481e      	ldr	r0, [pc, #120]	; (140d0 <db_hash_commit+0x94>)
   14058:	f005 fdbc 	bl	19bd4 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1405c:	4b1d      	ldr	r3, [pc, #116]	; (140d4 <db_hash_commit+0x98>)
   1405e:	e8d3 2fef 	ldaex	r2, [r3]
   14062:	f022 0201 	bic.w	r2, r2, #1
   14066:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1406a:	2900      	cmp	r1, #0
   1406c:	d1f7      	bne.n	1405e <db_hash_commit+0x22>
}
   1406e:	2000      	movs	r0, #0
   14070:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14072:	4c19      	ldr	r4, [pc, #100]	; (140d8 <db_hash_commit+0x9c>)
   14074:	2101      	movs	r1, #1
   14076:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1407a:	f008 fee4 	bl	1ce46 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1407e:	07c2      	lsls	r2, r0, #31
   14080:	d410      	bmi.n	140a4 <db_hash_commit+0x68>
		gatt_sc.start = start;
   14082:	4b16      	ldr	r3, [pc, #88]	; (140dc <db_hash_commit+0xa0>)
   14084:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14086:	4813      	ldr	r0, [pc, #76]	; (140d4 <db_hash_commit+0x98>)
   14088:	f008 fee8 	bl	1ce5c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1408c:	0783      	lsls	r3, r0, #30
   1408e:	d406      	bmi.n	1409e <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   14090:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14094:	2300      	movs	r3, #0
   14096:	490e      	ldr	r1, [pc, #56]	; (140d0 <db_hash_commit+0x94>)
   14098:	4811      	ldr	r0, [pc, #68]	; (140e0 <db_hash_commit+0xa4>)
   1409a:	f005 fd2b 	bl	19af4 <k_delayed_work_submit_to_queue>
	db_hash_store();
   1409e:	f7ff f977 	bl	13390 <db_hash_store>
	return 0;
   140a2:	e7e4      	b.n	1406e <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   140a4:	8b23      	ldrh	r3, [r4, #24]
   140a6:	8b62      	ldrh	r2, [r4, #26]
   140a8:	2b01      	cmp	r3, #1
   140aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   140ae:	d805      	bhi.n	140bc <db_hash_commit+0x80>
   140b0:	429a      	cmp	r2, r3
   140b2:	d0f4      	beq.n	1409e <db_hash_commit+0x62>
		*end = new_end;
   140b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   140b8:	8363      	strh	r3, [r4, #26]
   140ba:	e7e4      	b.n	14086 <db_hash_commit+0x4a>
	if (*end < new_end) {
   140bc:	429a      	cmp	r2, r3
		*start = new_start;
   140be:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   140c0:	d0e1      	beq.n	14086 <db_hash_commit+0x4a>
   140c2:	e7f7      	b.n	140b4 <db_hash_commit+0x78>
   140c4:	20009348 	.word	0x20009348
   140c8:	2000ea3b 	.word	0x2000ea3b
   140cc:	2000ea4b 	.word	0x2000ea4b
   140d0:	20009398 	.word	0x20009398
   140d4:	200093c8 	.word	0x200093c8
   140d8:	20009378 	.word	0x20009378
   140dc:	ffff0001 	.word	0xffff0001
   140e0:	200098e0 	.word	0x200098e0

000140e4 <ccc_set_direct>:
{
   140e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   140e8:	b0b9      	sub	sp, #228	; 0xe4
   140ea:	4688      	mov	r8, r1
   140ec:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   140ee:	492c      	ldr	r1, [pc, #176]	; (141a0 <ccc_set_direct+0xbc>)
   140f0:	466a      	mov	r2, sp
   140f2:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   140f4:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   140f6:	f006 ff55 	bl	1afa4 <settings_name_steq>
   140fa:	b948      	cbnz	r0, 14110 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   140fc:	2145      	movs	r1, #69	; 0x45
   140fe:	4829      	ldr	r0, [pc, #164]	; (141a4 <ccc_set_direct+0xc0>)
   14100:	f006 fc6e 	bl	1a9e0 <printk>
   14104:	f06f 0515 	mvn.w	r5, #21
}
   14108:	4628      	mov	r0, r5
   1410a:	b039      	add	sp, #228	; 0xe4
   1410c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   14110:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   14112:	a901      	add	r1, sp, #4
   14114:	4620      	mov	r0, r4
   14116:	f006 ff68 	bl	1afea <settings_name_next>
		if (!name) {
   1411a:	b93c      	cbnz	r4, 1412c <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   1411c:	2145      	movs	r1, #69	; 0x45
   1411e:	4822      	ldr	r0, [pc, #136]	; (141a8 <ccc_set_direct+0xc4>)
   14120:	f006 fc5e 	bl	1a9e0 <printk>
			return -EINVAL;
   14124:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   14128:	4625      	mov	r5, r4
   1412a:	e7ed      	b.n	14108 <ccc_set_direct+0x24>
		} else if (!next) {
   1412c:	9801      	ldr	r0, [sp, #4]
   1412e:	b978      	cbnz	r0, 14150 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   14130:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   14134:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   14138:	4649      	mov	r1, r9
   1413a:	4620      	mov	r0, r4
   1413c:	f007 fecb 	bl	1bed6 <bt_settings_decode_key>
		if (err) {
   14140:	4605      	mov	r5, r0
   14142:	b150      	cbz	r0, 1415a <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   14144:	4622      	mov	r2, r4
   14146:	2145      	movs	r1, #69	; 0x45
   14148:	4818      	ldr	r0, [pc, #96]	; (141ac <ccc_set_direct+0xc8>)
   1414a:	f006 fc49 	bl	1a9e0 <printk>
   1414e:	e7e9      	b.n	14124 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   14150:	220a      	movs	r2, #10
   14152:	2100      	movs	r1, #0
   14154:	f007 fda0 	bl	1bc98 <strtol>
   14158:	e7ea      	b.n	14130 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   1415a:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1415e:	f1b8 0f00 	cmp.w	r8, #0
   14162:	d019      	beq.n	14198 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   14164:	f10d 0820 	add.w	r8, sp, #32
   14168:	22c0      	movs	r2, #192	; 0xc0
   1416a:	4641      	mov	r1, r8
   1416c:	4638      	mov	r0, r7
   1416e:	47b0      	blx	r6
			if (len < 0) {
   14170:	1e04      	subs	r4, r0, #0
   14172:	da05      	bge.n	14180 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   14174:	4622      	mov	r2, r4
   14176:	2145      	movs	r1, #69	; 0x45
   14178:	480d      	ldr	r0, [pc, #52]	; (141b0 <ccc_set_direct+0xcc>)
   1417a:	f006 fc31 	bl	1a9e0 <printk>
				return len;
   1417e:	e7d3      	b.n	14128 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   14180:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   14182:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   14186:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   14188:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1418c:	2001      	movs	r0, #1
   1418e:	4a09      	ldr	r2, [pc, #36]	; (141b4 <ccc_set_direct+0xd0>)
   14190:	ab04      	add	r3, sp, #16
   14192:	f009 f845 	bl	1d220 <bt_gatt_foreach_attr>
	return 0;
   14196:	e7b7      	b.n	14108 <ccc_set_direct+0x24>
			load.count = 0;
   14198:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1419c:	e7f4      	b.n	14188 <ccc_set_direct+0xa4>
   1419e:	bf00      	nop
   141a0:	00021f52 	.word	0x00021f52
   141a4:	00021f59 	.word	0x00021f59
   141a8:	00020cca 	.word	0x00020cca
   141ac:	00021dc1 	.word	0x00021dc1
   141b0:	00021cd3 	.word	0x00021cd3
   141b4:	000138ed 	.word	0x000138ed

000141b8 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   141b8:	2300      	movs	r3, #0
{
   141ba:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   141bc:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   141be:	f7ff fe51 	bl	13e64 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   141c2:	1c41      	adds	r1, r0, #1
   141c4:	b289      	uxth	r1, r1
   141c6:	4608      	mov	r0, r1
   141c8:	4a03      	ldr	r2, [pc, #12]	; (141d8 <bt_gatt_attr_next+0x20>)
   141ca:	ab01      	add	r3, sp, #4
   141cc:	f009 f828 	bl	1d220 <bt_gatt_foreach_attr>
}
   141d0:	9801      	ldr	r0, [sp, #4]
   141d2:	b003      	add	sp, #12
   141d4:	f85d fb04 	ldr.w	pc, [sp], #4
   141d8:	0001cc97 	.word	0x0001cc97

000141dc <bt_gatt_notify_cb>:
{
   141dc:	b530      	push	{r4, r5, lr}
   141de:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   141e0:	460d      	mov	r5, r1
{
   141e2:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   141e4:	b951      	cbnz	r1, 141fc <bt_gatt_notify_cb+0x20>
   141e6:	4940      	ldr	r1, [pc, #256]	; (142e8 <bt_gatt_notify_cb+0x10c>)
   141e8:	4840      	ldr	r0, [pc, #256]	; (142ec <bt_gatt_notify_cb+0x110>)
   141ea:	f640 023d 	movw	r2, #2109	; 0x83d
   141ee:	f006 fbf7 	bl	1a9e0 <printk>
   141f2:	f640 013d 	movw	r1, #2109	; 0x83d
   141f6:	483c      	ldr	r0, [pc, #240]	; (142e8 <bt_gatt_notify_cb+0x10c>)
   141f8:	f006 fe98 	bl	1af2c <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   141fc:	686b      	ldr	r3, [r5, #4]
   141fe:	b953      	cbnz	r3, 14216 <bt_gatt_notify_cb+0x3a>
   14200:	4939      	ldr	r1, [pc, #228]	; (142e8 <bt_gatt_notify_cb+0x10c>)
   14202:	483a      	ldr	r0, [pc, #232]	; (142ec <bt_gatt_notify_cb+0x110>)
   14204:	f640 023e 	movw	r2, #2110	; 0x83e
   14208:	f006 fbea 	bl	1a9e0 <printk>
   1420c:	f640 013e 	movw	r1, #2110	; 0x83e
   14210:	4835      	ldr	r0, [pc, #212]	; (142e8 <bt_gatt_notify_cb+0x10c>)
   14212:	f006 fe8b 	bl	1af2c <assert_post_action>
   14216:	4836      	ldr	r0, [pc, #216]	; (142f0 <bt_gatt_notify_cb+0x114>)
   14218:	f008 fe20 	bl	1ce5c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1421c:	0782      	lsls	r2, r0, #30
   1421e:	d55d      	bpl.n	142dc <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   14220:	6868      	ldr	r0, [r5, #4]
   14222:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14224:	b114      	cbz	r4, 1422c <bt_gatt_notify_cb+0x50>
   14226:	7aa3      	ldrb	r3, [r4, #10]
   14228:	2b07      	cmp	r3, #7
   1422a:	d15a      	bne.n	142e2 <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1422c:	f7ff fe1a 	bl	13e64 <bt_gatt_attr_get_handle>
   14230:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14234:	b918      	cbnz	r0, 1423e <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   14236:	f06f 0001 	mvn.w	r0, #1
}
   1423a:	b00b      	add	sp, #44	; 0x2c
   1423c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1423e:	682a      	ldr	r2, [r5, #0]
   14240:	b9aa      	cbnz	r2, 1426e <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   14242:	9b05      	ldr	r3, [sp, #20]
   14244:	a904      	add	r1, sp, #16
   14246:	6818      	ldr	r0, [r3, #0]
   14248:	2300      	movs	r3, #0
   1424a:	f88d 3010 	strb.w	r3, [sp, #16]
   1424e:	f642 0303 	movw	r3, #10243	; 0x2803
   14252:	f8ad 3012 	strh.w	r3, [sp, #18]
   14256:	f007 fe62 	bl	1bf1e <bt_uuid_cmp>
   1425a:	b1c0      	cbz	r0, 1428e <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   1425c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   14260:	b314      	cbz	r4, 142a8 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   14262:	4601      	mov	r1, r0
   14264:	462a      	mov	r2, r5
   14266:	4620      	mov	r0, r4
   14268:	f7ff fbd8 	bl	13a1c <gatt_notify>
   1426c:	e7e5      	b.n	1423a <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1426e:	a905      	add	r1, sp, #20
   14270:	9102      	str	r1, [sp, #8]
   14272:	4920      	ldr	r1, [pc, #128]	; (142f4 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   14274:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14276:	9101      	str	r1, [sp, #4]
   14278:	2101      	movs	r1, #1
   1427a:	9100      	str	r1, [sp, #0]
   1427c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14280:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14282:	f7ff fe33 	bl	13eec <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14286:	9b05      	ldr	r3, [sp, #20]
   14288:	2b00      	cmp	r3, #0
   1428a:	d1da      	bne.n	14242 <bt_gatt_notify_cb+0x66>
   1428c:	e7d3      	b.n	14236 <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1428e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   14290:	68c3      	ldr	r3, [r0, #12]
   14292:	799b      	ldrb	r3, [r3, #6]
   14294:	06db      	lsls	r3, r3, #27
   14296:	d402      	bmi.n	1429e <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   14298:	f06f 0015 	mvn.w	r0, #21
   1429c:	e7cd      	b.n	1423a <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1429e:	f008 ff71 	bl	1d184 <bt_gatt_attr_value_handle>
   142a2:	f8ad 0018 	strh.w	r0, [sp, #24]
   142a6:	e7d9      	b.n	1425c <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   142a8:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   142ac:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   142b0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   142b2:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   142b4:	f8ad 2012 	strh.w	r2, [sp, #18]
   142b8:	aa05      	add	r2, sp, #20
   142ba:	9202      	str	r2, [sp, #8]
   142bc:	4a0e      	ldr	r2, [pc, #56]	; (142f8 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   142be:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   142c2:	e9cd 3200 	strd	r3, r2, [sp]
   142c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   142ca:	4623      	mov	r3, r4
   142cc:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   142ce:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   142d0:	f88d 4010 	strb.w	r4, [sp, #16]
   142d4:	f7ff fe0a 	bl	13eec <bt_gatt_foreach_attr_type>
	return data.err;
   142d8:	9807      	ldr	r0, [sp, #28]
   142da:	e7ae      	b.n	1423a <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   142dc:	f06f 000a 	mvn.w	r0, #10
   142e0:	e7ab      	b.n	1423a <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   142e2:	f06f 0038 	mvn.w	r0, #56	; 0x38
   142e6:	e7a8      	b.n	1423a <bt_gatt_notify_cb+0x5e>
   142e8:	00021ee6 	.word	0x00021ee6
   142ec:	0001faab 	.word	0x0001faab
   142f0:	20008094 	.word	0x20008094
   142f4:	0001ccf5 	.word	0x0001ccf5
   142f8:	00013a7d 	.word	0x00013a7d

000142fc <bt_gatt_indicate>:
{
   142fc:	b530      	push	{r4, r5, lr}
   142fe:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   14300:	460c      	mov	r4, r1
{
   14302:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   14304:	b951      	cbnz	r1, 1431c <bt_gatt_indicate+0x20>
   14306:	4942      	ldr	r1, [pc, #264]	; (14410 <bt_gatt_indicate+0x114>)
   14308:	4842      	ldr	r0, [pc, #264]	; (14414 <bt_gatt_indicate+0x118>)
   1430a:	f640 0289 	movw	r2, #2185	; 0x889
   1430e:	f006 fb67 	bl	1a9e0 <printk>
   14312:	f640 0189 	movw	r1, #2185	; 0x889
   14316:	483e      	ldr	r0, [pc, #248]	; (14410 <bt_gatt_indicate+0x114>)
   14318:	f006 fe08 	bl	1af2c <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   1431c:	6863      	ldr	r3, [r4, #4]
   1431e:	b953      	cbnz	r3, 14336 <bt_gatt_indicate+0x3a>
   14320:	493b      	ldr	r1, [pc, #236]	; (14410 <bt_gatt_indicate+0x114>)
   14322:	483c      	ldr	r0, [pc, #240]	; (14414 <bt_gatt_indicate+0x118>)
   14324:	f640 028a 	movw	r2, #2186	; 0x88a
   14328:	f006 fb5a 	bl	1a9e0 <printk>
   1432c:	f640 018a 	movw	r1, #2186	; 0x88a
   14330:	4837      	ldr	r0, [pc, #220]	; (14410 <bt_gatt_indicate+0x114>)
   14332:	f006 fdfb 	bl	1af2c <assert_post_action>
   14336:	4838      	ldr	r0, [pc, #224]	; (14418 <bt_gatt_indicate+0x11c>)
   14338:	f008 fd90 	bl	1ce5c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1433c:	0782      	lsls	r2, r0, #30
   1433e:	d561      	bpl.n	14404 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   14340:	6860      	ldr	r0, [r4, #4]
   14342:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14344:	b115      	cbz	r5, 1434c <bt_gatt_indicate+0x50>
   14346:	7aab      	ldrb	r3, [r5, #10]
   14348:	2b07      	cmp	r3, #7
   1434a:	d15e      	bne.n	1440a <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1434c:	f7ff fd8a 	bl	13e64 <bt_gatt_attr_get_handle>
   14350:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14354:	b918      	cbnz	r0, 1435e <bt_gatt_indicate+0x62>
		return -ENOENT;
   14356:	f06f 0001 	mvn.w	r0, #1
}
   1435a:	b00b      	add	sp, #44	; 0x2c
   1435c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1435e:	6822      	ldr	r2, [r4, #0]
   14360:	b9ba      	cbnz	r2, 14392 <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   14362:	9b05      	ldr	r3, [sp, #20]
   14364:	a904      	add	r1, sp, #16
   14366:	6818      	ldr	r0, [r3, #0]
   14368:	2300      	movs	r3, #0
   1436a:	f88d 3010 	strb.w	r3, [sp, #16]
   1436e:	f642 0303 	movw	r3, #10243	; 0x2803
   14372:	f8ad 3012 	strh.w	r3, [sp, #18]
   14376:	f007 fdd2 	bl	1bf1e <bt_uuid_cmp>
   1437a:	b1d0      	cbz	r0, 143b2 <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   1437c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   14380:	b325      	cbz	r5, 143cc <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   14382:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   14384:	4601      	mov	r1, r0
   14386:	4622      	mov	r2, r4
   14388:	4628      	mov	r0, r5
		params->_ref = 1;
   1438a:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1438c:	f7ff fb10 	bl	139b0 <gatt_indicate>
   14390:	e7e3      	b.n	1435a <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14392:	a905      	add	r1, sp, #20
   14394:	9102      	str	r1, [sp, #8]
   14396:	4921      	ldr	r1, [pc, #132]	; (1441c <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   14398:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1439a:	9101      	str	r1, [sp, #4]
   1439c:	2101      	movs	r1, #1
   1439e:	9100      	str	r1, [sp, #0]
   143a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   143a4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   143a6:	f7ff fda1 	bl	13eec <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   143aa:	9b05      	ldr	r3, [sp, #20]
   143ac:	2b00      	cmp	r3, #0
   143ae:	d1d8      	bne.n	14362 <bt_gatt_indicate+0x66>
   143b0:	e7d1      	b.n	14356 <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   143b2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   143b4:	68c3      	ldr	r3, [r0, #12]
   143b6:	799b      	ldrb	r3, [r3, #6]
   143b8:	069b      	lsls	r3, r3, #26
   143ba:	d402      	bmi.n	143c2 <bt_gatt_indicate+0xc6>
			return -EINVAL;
   143bc:	f06f 0015 	mvn.w	r0, #21
   143c0:	e7cb      	b.n	1435a <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   143c2:	f008 fedf 	bl	1d184 <bt_gatt_attr_value_handle>
   143c6:	f8ad 0018 	strh.w	r0, [sp, #24]
   143ca:	e7d7      	b.n	1437c <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   143cc:	f06f 0338 	mvn.w	r3, #56	; 0x38
   143d0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   143d2:	2302      	movs	r3, #2
   143d4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143d8:	f642 1302 	movw	r3, #10498	; 0x2902
   143dc:	f8ad 3012 	strh.w	r3, [sp, #18]
   143e0:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   143e2:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143e4:	9302      	str	r3, [sp, #8]
   143e6:	4b0e      	ldr	r3, [pc, #56]	; (14420 <bt_gatt_indicate+0x124>)
   143e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   143ec:	9301      	str	r3, [sp, #4]
   143ee:	2301      	movs	r3, #1
   143f0:	aa04      	add	r2, sp, #16
   143f2:	9300      	str	r3, [sp, #0]
   143f4:	462b      	mov	r3, r5
	data.ind_params = params;
   143f6:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143f8:	f88d 5010 	strb.w	r5, [sp, #16]
   143fc:	f7ff fd76 	bl	13eec <bt_gatt_foreach_attr_type>
	return data.err;
   14400:	9807      	ldr	r0, [sp, #28]
   14402:	e7aa      	b.n	1435a <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   14404:	f06f 000a 	mvn.w	r0, #10
   14408:	e7a7      	b.n	1435a <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   1440a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1440e:	e7a4      	b.n	1435a <bt_gatt_indicate+0x5e>
   14410:	00021ee6 	.word	0x00021ee6
   14414:	0001faab 	.word	0x0001faab
   14418:	20008094 	.word	0x20008094
   1441c:	0001ccf5 	.word	0x0001ccf5
   14420:	00013a7d 	.word	0x00013a7d

00014424 <sc_process>:
{
   14424:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   14426:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1442a:	4604      	mov	r4, r0
   1442c:	4628      	mov	r0, r5
   1442e:	f008 fd15 	bl	1ce5c <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   14432:	0783      	lsls	r3, r0, #30
   14434:	d50a      	bpl.n	1444c <sc_process+0x28>
   14436:	491b      	ldr	r1, [pc, #108]	; (144a4 <sc_process+0x80>)
   14438:	481b      	ldr	r0, [pc, #108]	; (144a8 <sc_process+0x84>)
   1443a:	f240 32ae 	movw	r2, #942	; 0x3ae
   1443e:	f006 facf 	bl	1a9e0 <printk>
   14442:	f240 31ae 	movw	r1, #942	; 0x3ae
   14446:	4817      	ldr	r0, [pc, #92]	; (144a4 <sc_process+0x80>)
   14448:	f006 fd70 	bl	1af2c <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1444c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   14450:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   14454:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   14458:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1445c:	e8d5 3fef 	ldaex	r3, [r5]
   14460:	f023 0301 	bic.w	r3, r3, #1
   14464:	e8c5 3fe2 	stlex	r2, r3, [r5]
   14468:	2a00      	cmp	r2, #0
   1446a:	d1f7      	bne.n	1445c <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1446c:	4b0f      	ldr	r3, [pc, #60]	; (144ac <sc_process+0x88>)
	sc->start = 0U;
   1446e:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14470:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   14474:	4b0e      	ldr	r3, [pc, #56]	; (144b0 <sc_process+0x8c>)
	sc->start = 0U;
   14476:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   1447a:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1447e:	ab01      	add	r3, sp, #4
   14480:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   14484:	2304      	movs	r3, #4
	sc->end = 0U;
   14486:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1448a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1448e:	f1a4 0120 	sub.w	r1, r4, #32
   14492:	f7ff ff33 	bl	142fc <bt_gatt_indicate>
   14496:	b918      	cbnz	r0, 144a0 <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14498:	2102      	movs	r1, #2
   1449a:	4628      	mov	r0, r5
   1449c:	f008 fcd3 	bl	1ce46 <atomic_or>
}
   144a0:	b003      	add	sp, #12
   144a2:	bd30      	pop	{r4, r5, pc}
   144a4:	00021ee6 	.word	0x00021ee6
   144a8:	0001faab 	.word	0x0001faab
   144ac:	0001ecf4 	.word	0x0001ecf4
   144b0:	00013d45 	.word	0x00013d45

000144b4 <update_ccc>:
{
   144b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   144b8:	4b32      	ldr	r3, [pc, #200]	; (14584 <update_ccc+0xd0>)
   144ba:	6881      	ldr	r1, [r0, #8]
{
   144bc:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   144be:	4299      	cmp	r1, r3
   144c0:	d15c      	bne.n	1457c <update_ccc+0xc8>
	ccc = attr->user_data;
   144c2:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   144c4:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   144c6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 14588 <update_ccc+0xd4>
   144ca:	1c7d      	adds	r5, r7, #1
   144cc:	f107 0833 	add.w	r8, r7, #51	; 0x33
		if (!cfg->value ||
   144d0:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   144d4:	b193      	cbz	r3, 144fc <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   144d6:	462a      	mov	r2, r5
   144d8:	4630      	mov	r0, r6
   144da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   144de:	f007 ff04 	bl	1c2ea <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   144e2:	b158      	cbz	r0, 144fc <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   144e4:	222a      	movs	r2, #42	; 0x2a
   144e6:	4621      	mov	r1, r4
   144e8:	4630      	mov	r0, r6
   144ea:	f008 fea7 	bl	1d23c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   144ee:	2803      	cmp	r0, #3
   144f0:	d108      	bne.n	14504 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   144f2:	4622      	mov	r2, r4
   144f4:	2157      	movs	r1, #87	; 0x57
   144f6:	4648      	mov	r0, r9
   144f8:	f006 fa72 	bl	1a9e0 <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   144fc:	350a      	adds	r5, #10
   144fe:	4545      	cmp	r5, r8
   14500:	d1e6      	bne.n	144d0 <update_ccc+0x1c>
   14502:	e03b      	b.n	1457c <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   14504:	4639      	mov	r1, r7
   14506:	4620      	mov	r0, r4
   14508:	f008 fbc8 	bl	1cc9c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1450c:	4b1f      	ldr	r3, [pc, #124]	; (1458c <update_ccc+0xd8>)
   1450e:	429f      	cmp	r7, r3
   14510:	d134      	bne.n	1457c <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   14512:	7a30      	ldrb	r0, [r6, #8]
   14514:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14518:	f7fe ff72 	bl	13400 <find_sc_cfg>
	if (!cfg) {
   1451c:	4604      	mov	r4, r0
   1451e:	b368      	cbz	r0, 1457c <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   14520:	8902      	ldrh	r2, [r0, #8]
   14522:	8943      	ldrh	r3, [r0, #10]
   14524:	ea52 0103 	orrs.w	r1, r2, r3
   14528:	d028      	beq.n	1457c <update_ccc+0xc8>
	index = bt_conn_index(conn);
   1452a:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1452c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   14530:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   14534:	f7fd fca6 	bl	11e84 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   14538:	2318      	movs	r3, #24
   1453a:	4915      	ldr	r1, [pc, #84]	; (14590 <update_ccc+0xdc>)
   1453c:	4a15      	ldr	r2, [pc, #84]	; (14594 <update_ccc+0xe0>)
   1453e:	fb03 1300 	mla	r3, r3, r0, r1
   14542:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   14544:	4a14      	ldr	r2, [pc, #80]	; (14598 <update_ccc+0xe4>)
   14546:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   14548:	aa01      	add	r2, sp, #4
   1454a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1454c:	2204      	movs	r2, #4
   1454e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14550:	b203      	sxth	r3, r0
   14552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14556:	4630      	mov	r0, r6
   14558:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1455c:	f7ff fece 	bl	142fc <bt_gatt_indicate>
   14560:	b118      	cbz	r0, 1456a <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   14562:	2145      	movs	r1, #69	; 0x45
   14564:	480d      	ldr	r0, [pc, #52]	; (1459c <update_ccc+0xe8>)
   14566:	f006 fa3b 	bl	1a9e0 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1456a:	2204      	movs	r2, #4
   1456c:	2100      	movs	r1, #0
   1456e:	f104 0008 	add.w	r0, r4, #8
   14572:	f007 fc8a 	bl	1be8a <memset>
		sc_store(cfg);
   14576:	4620      	mov	r0, r4
   14578:	f7ff f84c 	bl	13614 <sc_store>
}
   1457c:	2001      	movs	r0, #1
   1457e:	b003      	add	sp, #12
   14580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14584:	000134b5 	.word	0x000134b5
   14588:	00021f6a 	.word	0x00021f6a
   1458c:	200083a0 	.word	0x200083a0
   14590:	20009fb0 	.word	0x20009fb0
   14594:	0001ecf4 	.word	0x0001ecf4
   14598:	0001d13b 	.word	0x0001d13b
   1459c:	00021f83 	.word	0x00021f83

000145a0 <bt_gatt_is_subscribed>:
{
   145a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   145a2:	460c      	mov	r4, r1
   145a4:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   145a6:	4606      	mov	r6, r0
   145a8:	b950      	cbnz	r0, 145c0 <bt_gatt_is_subscribed+0x20>
   145aa:	4930      	ldr	r1, [pc, #192]	; (1466c <bt_gatt_is_subscribed+0xcc>)
   145ac:	4830      	ldr	r0, [pc, #192]	; (14670 <bt_gatt_is_subscribed+0xd0>)
   145ae:	f640 12b5 	movw	r2, #2485	; 0x9b5
   145b2:	f006 fa15 	bl	1a9e0 <printk>
   145b6:	f640 11b5 	movw	r1, #2485	; 0x9b5
   145ba:	482c      	ldr	r0, [pc, #176]	; (1466c <bt_gatt_is_subscribed+0xcc>)
   145bc:	f006 fcb6 	bl	1af2c <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   145c0:	b954      	cbnz	r4, 145d8 <bt_gatt_is_subscribed+0x38>
   145c2:	492a      	ldr	r1, [pc, #168]	; (1466c <bt_gatt_is_subscribed+0xcc>)
   145c4:	482a      	ldr	r0, [pc, #168]	; (14670 <bt_gatt_is_subscribed+0xd0>)
   145c6:	f640 12b6 	movw	r2, #2486	; 0x9b6
   145ca:	f006 fa09 	bl	1a9e0 <printk>
   145ce:	f640 11b6 	movw	r1, #2486	; 0x9b6
   145d2:	4826      	ldr	r0, [pc, #152]	; (1466c <bt_gatt_is_subscribed+0xcc>)
   145d4:	f006 fcaa 	bl	1af2c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   145d8:	7ab3      	ldrb	r3, [r6, #10]
   145da:	2b07      	cmp	r3, #7
   145dc:	d130      	bne.n	14640 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   145de:	2300      	movs	r3, #0
   145e0:	f88d 3004 	strb.w	r3, [sp, #4]
   145e4:	f642 0303 	movw	r3, #10243	; 0x2803
   145e8:	6820      	ldr	r0, [r4, #0]
   145ea:	a901      	add	r1, sp, #4
   145ec:	f8ad 3006 	strh.w	r3, [sp, #6]
   145f0:	f007 fc95 	bl	1bf1e <bt_uuid_cmp>
   145f4:	b940      	cbnz	r0, 14608 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   145f6:	68e3      	ldr	r3, [r4, #12]
   145f8:	799b      	ldrb	r3, [r3, #6]
   145fa:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   145fe:	d020      	beq.n	14642 <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   14600:	4620      	mov	r0, r4
   14602:	f7ff fdd9 	bl	141b8 <bt_gatt_attr_next>
   14606:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14608:	2300      	movs	r3, #0
   1460a:	6820      	ldr	r0, [r4, #0]
   1460c:	f88d 3004 	strb.w	r3, [sp, #4]
   14610:	f642 1302 	movw	r3, #10498	; 0x2902
   14614:	a901      	add	r1, sp, #4
   14616:	f8ad 3006 	strh.w	r3, [sp, #6]
   1461a:	f007 fc80 	bl	1bf1e <bt_uuid_cmp>
   1461e:	b118      	cbz	r0, 14628 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   14620:	4620      	mov	r0, r4
   14622:	f7ff fdc9 	bl	141b8 <bt_gatt_attr_next>
   14626:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14628:	2500      	movs	r5, #0
   1462a:	f642 1302 	movw	r3, #10498	; 0x2902
   1462e:	6820      	ldr	r0, [r4, #0]
   14630:	a901      	add	r1, sp, #4
   14632:	f88d 5004 	strb.w	r5, [sp, #4]
   14636:	f8ad 3006 	strh.w	r3, [sp, #6]
   1463a:	f007 fc70 	bl	1bf1e <bt_uuid_cmp>
   1463e:	b110      	cbz	r0, 14646 <bt_gatt_is_subscribed+0xa6>
		return false;
   14640:	2000      	movs	r0, #0
}
   14642:	b003      	add	sp, #12
   14644:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   14646:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   14648:	1c6c      	adds	r4, r5, #1
   1464a:	3533      	adds	r5, #51	; 0x33
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1464c:	4622      	mov	r2, r4
   1464e:	4630      	mov	r0, r6
   14650:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   14654:	f007 fe49 	bl	1c2ea <bt_conn_is_peer_addr_le>
   14658:	b118      	cbz	r0, 14662 <bt_gatt_is_subscribed+0xc2>
   1465a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1465e:	421f      	tst	r7, r3
   14660:	d1ef      	bne.n	14642 <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   14662:	340a      	adds	r4, #10
   14664:	42ac      	cmp	r4, r5
   14666:	d1f1      	bne.n	1464c <bt_gatt_is_subscribed+0xac>
   14668:	e7ea      	b.n	14640 <bt_gatt_is_subscribed+0xa0>
   1466a:	bf00      	nop
   1466c:	00021ee6 	.word	0x00021ee6
   14670:	0001faab 	.word	0x0001faab

00014674 <bt_gatt_discover>:
{
   14674:	b5f0      	push	{r4, r5, r6, r7, lr}
   14676:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14678:	4605      	mov	r5, r0
{
   1467a:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   1467c:	b950      	cbnz	r0, 14694 <bt_gatt_discover+0x20>
   1467e:	4989      	ldr	r1, [pc, #548]	; (148a4 <bt_gatt_discover+0x230>)
   14680:	4889      	ldr	r0, [pc, #548]	; (148a8 <bt_gatt_discover+0x234>)
   14682:	f640 5277 	movw	r2, #3447	; 0xd77
   14686:	f006 f9ab 	bl	1a9e0 <printk>
   1468a:	f640 5177 	movw	r1, #3447	; 0xd77
   1468e:	4885      	ldr	r0, [pc, #532]	; (148a4 <bt_gatt_discover+0x230>)
   14690:	f006 fc4c 	bl	1af2c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14694:	b10c      	cbz	r4, 1469a <bt_gatt_discover+0x26>
   14696:	6863      	ldr	r3, [r4, #4]
   14698:	b953      	cbnz	r3, 146b0 <bt_gatt_discover+0x3c>
   1469a:	4982      	ldr	r1, [pc, #520]	; (148a4 <bt_gatt_discover+0x230>)
   1469c:	4882      	ldr	r0, [pc, #520]	; (148a8 <bt_gatt_discover+0x234>)
   1469e:	f640 5278 	movw	r2, #3448	; 0xd78
   146a2:	f006 f99d 	bl	1a9e0 <printk>
   146a6:	f640 5178 	movw	r1, #3448	; 0xd78
   146aa:	487e      	ldr	r0, [pc, #504]	; (148a4 <bt_gatt_discover+0x230>)
   146ac:	f006 fc3e 	bl	1af2c <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   146b0:	8923      	ldrh	r3, [r4, #8]
   146b2:	b10b      	cbz	r3, 146b8 <bt_gatt_discover+0x44>
   146b4:	89e3      	ldrh	r3, [r4, #14]
   146b6:	b953      	cbnz	r3, 146ce <bt_gatt_discover+0x5a>
   146b8:	497a      	ldr	r1, [pc, #488]	; (148a4 <bt_gatt_discover+0x230>)
   146ba:	487b      	ldr	r0, [pc, #492]	; (148a8 <bt_gatt_discover+0x234>)
   146bc:	f640 5279 	movw	r2, #3449	; 0xd79
   146c0:	f006 f98e 	bl	1a9e0 <printk>
   146c4:	f640 5179 	movw	r1, #3449	; 0xd79
   146c8:	4876      	ldr	r0, [pc, #472]	; (148a4 <bt_gatt_discover+0x230>)
   146ca:	f006 fc2f 	bl	1af2c <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   146ce:	8922      	ldrh	r2, [r4, #8]
   146d0:	89e3      	ldrh	r3, [r4, #14]
   146d2:	429a      	cmp	r2, r3
   146d4:	d90a      	bls.n	146ec <bt_gatt_discover+0x78>
   146d6:	4973      	ldr	r1, [pc, #460]	; (148a4 <bt_gatt_discover+0x230>)
   146d8:	4873      	ldr	r0, [pc, #460]	; (148a8 <bt_gatt_discover+0x234>)
   146da:	f640 527b 	movw	r2, #3451	; 0xd7b
   146de:	f006 f97f 	bl	1a9e0 <printk>
   146e2:	f640 517b 	movw	r1, #3451	; 0xd7b
   146e6:	486f      	ldr	r0, [pc, #444]	; (148a4 <bt_gatt_discover+0x230>)
   146e8:	f006 fc20 	bl	1af2c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   146ec:	7aab      	ldrb	r3, [r5, #10]
   146ee:	2b07      	cmp	r3, #7
   146f0:	f040 80d5 	bne.w	1489e <bt_gatt_discover+0x22a>
	switch (params->type) {
   146f4:	7c22      	ldrb	r2, [r4, #16]
   146f6:	2a05      	cmp	r2, #5
   146f8:	f200 80cc 	bhi.w	14894 <bt_gatt_discover+0x220>
   146fc:	e8df f002 	tbb	[pc, r2]
   14700:	64640303 	.word	0x64640303
   14704:	b683      	.short	0xb683
		if (params->uuid) {
   14706:	6823      	ldr	r3, [r4, #0]
   14708:	2b00      	cmp	r3, #0
   1470a:	d03e      	beq.n	1478a <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   1470c:	2206      	movs	r2, #6
   1470e:	4628      	mov	r0, r5
   14710:	4611      	mov	r1, r2
   14712:	f7fe fa0f 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   14716:	4606      	mov	r6, r0
   14718:	b918      	cbnz	r0, 14722 <bt_gatt_discover+0xae>
		return -ENOMEM;
   1471a:	f06f 000b 	mvn.w	r0, #11
}
   1471e:	b005      	add	sp, #20
   14720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   14722:	f100 0708 	add.w	r7, r0, #8
   14726:	2106      	movs	r1, #6
   14728:	4638      	mov	r0, r7
   1472a:	f001 f9f9 	bl	15b20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1472e:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   14730:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14732:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14734:	89e3      	ldrh	r3, [r4, #14]
   14736:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14738:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   1473a:	2b00      	cmp	r3, #0
   1473c:	f642 0301 	movw	r3, #10241	; 0x2801
   14740:	bf08      	it	eq
   14742:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   14746:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   14748:	780a      	ldrb	r2, [r1, #0]
   1474a:	b15a      	cbz	r2, 14764 <bt_gatt_discover+0xf0>
   1474c:	2a02      	cmp	r2, #2
   1474e:	d016      	beq.n	1477e <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   14750:	4856      	ldr	r0, [pc, #344]	; (148ac <bt_gatt_discover+0x238>)
   14752:	2145      	movs	r1, #69	; 0x45
   14754:	f006 f944 	bl	1a9e0 <printk>
		net_buf_unref(buf);
   14758:	4630      	mov	r0, r6
   1475a:	f001 f8cb 	bl	158f4 <net_buf_unref>
	return -EINVAL;
   1475e:	f06f 0015 	mvn.w	r0, #21
   14762:	e7dc      	b.n	1471e <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   14764:	4638      	mov	r0, r7
   14766:	8849      	ldrh	r1, [r1, #2]
   14768:	f008 feb6 	bl	1d4d8 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   1476c:	4623      	mov	r3, r4
   1476e:	4a50      	ldr	r2, [pc, #320]	; (148b0 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14770:	4631      	mov	r1, r6
   14772:	4628      	mov	r0, r5
}
   14774:	b005      	add	sp, #20
   14776:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1477a:	f7ff b813 	b.w	137a4 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1477e:	2210      	movs	r2, #16
   14780:	4638      	mov	r0, r7
   14782:	3101      	adds	r1, #1
   14784:	f008 fe95 	bl	1d4b2 <net_buf_simple_add_mem>
   14788:	e7f0      	b.n	1476c <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   1478a:	2204      	movs	r2, #4
   1478c:	2110      	movs	r1, #16
   1478e:	4628      	mov	r0, r5
   14790:	f7fe f9d0 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   14794:	4606      	mov	r6, r0
   14796:	2800      	cmp	r0, #0
   14798:	d0bf      	beq.n	1471a <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1479a:	f100 0708 	add.w	r7, r0, #8
   1479e:	2104      	movs	r1, #4
   147a0:	4638      	mov	r0, r7
   147a2:	f001 f9bd 	bl	15b20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   147a6:	8923      	ldrh	r3, [r4, #8]
   147a8:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   147aa:	89e3      	ldrh	r3, [r4, #14]
   147ac:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   147ae:	7c23      	ldrb	r3, [r4, #16]
   147b0:	b93b      	cbnz	r3, 147c2 <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   147b2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   147b6:	4638      	mov	r0, r7
   147b8:	f008 fe8e 	bl	1d4d8 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   147bc:	4623      	mov	r3, r4
   147be:	4a3d      	ldr	r2, [pc, #244]	; (148b4 <bt_gatt_discover+0x240>)
   147c0:	e7d6      	b.n	14770 <bt_gatt_discover+0xfc>
   147c2:	f642 0101 	movw	r1, #10241	; 0x2801
   147c6:	e7f6      	b.n	147b6 <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   147c8:	2204      	movs	r2, #4
   147ca:	2108      	movs	r1, #8
   147cc:	4628      	mov	r0, r5
   147ce:	f7fe f9b1 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   147d2:	4606      	mov	r6, r0
   147d4:	2800      	cmp	r0, #0
   147d6:	d0a0      	beq.n	1471a <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   147d8:	f100 0708 	add.w	r7, r0, #8
   147dc:	2104      	movs	r1, #4
   147de:	4638      	mov	r0, r7
   147e0:	f001 f99e 	bl	15b20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   147e4:	8923      	ldrh	r3, [r4, #8]
   147e6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   147e8:	89e3      	ldrh	r3, [r4, #14]
   147ea:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   147ec:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   147ee:	4638      	mov	r0, r7
   147f0:	2b02      	cmp	r3, #2
   147f2:	bf0c      	ite	eq
   147f4:	f642 0102 	movweq	r1, #10242	; 0x2802
   147f8:	f642 0103 	movwne	r1, #10243	; 0x2803
   147fc:	f008 fe6c 	bl	1d4d8 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   14800:	4623      	mov	r3, r4
   14802:	4a2d      	ldr	r2, [pc, #180]	; (148b8 <bt_gatt_discover+0x244>)
   14804:	e7b4      	b.n	14770 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   14806:	6820      	ldr	r0, [r4, #0]
   14808:	b380      	cbz	r0, 1486c <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1480a:	2600      	movs	r6, #0
   1480c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14810:	4669      	mov	r1, sp
   14812:	f88d 6000 	strb.w	r6, [sp]
   14816:	f8ad 3002 	strh.w	r3, [sp, #2]
   1481a:	f007 fb80 	bl	1bf1e <bt_uuid_cmp>
		if (params->uuid &&
   1481e:	2800      	cmp	r0, #0
   14820:	d09d      	beq.n	1475e <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   14822:	f642 0301 	movw	r3, #10241	; 0x2801
   14826:	6820      	ldr	r0, [r4, #0]
   14828:	a901      	add	r1, sp, #4
   1482a:	f88d 6004 	strb.w	r6, [sp, #4]
   1482e:	f8ad 3006 	strh.w	r3, [sp, #6]
   14832:	f007 fb74 	bl	1bf1e <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   14836:	2800      	cmp	r0, #0
   14838:	d091      	beq.n	1475e <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1483a:	f642 0302 	movw	r3, #10242	; 0x2802
   1483e:	6820      	ldr	r0, [r4, #0]
   14840:	a902      	add	r1, sp, #8
   14842:	f88d 6008 	strb.w	r6, [sp, #8]
   14846:	f8ad 300a 	strh.w	r3, [sp, #10]
   1484a:	f007 fb68 	bl	1bf1e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1484e:	2800      	cmp	r0, #0
   14850:	d085      	beq.n	1475e <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   14852:	f642 0303 	movw	r3, #10243	; 0x2803
   14856:	6820      	ldr	r0, [r4, #0]
   14858:	a903      	add	r1, sp, #12
   1485a:	f88d 600c 	strb.w	r6, [sp, #12]
   1485e:	f8ad 300e 	strh.w	r3, [sp, #14]
   14862:	f007 fb5c 	bl	1bf1e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   14866:	2800      	cmp	r0, #0
   14868:	f43f af79 	beq.w	1475e <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   1486c:	2204      	movs	r2, #4
   1486e:	4628      	mov	r0, r5
   14870:	4611      	mov	r1, r2
   14872:	f7fe f95f 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   14876:	4606      	mov	r6, r0
   14878:	2800      	cmp	r0, #0
   1487a:	f43f af4e 	beq.w	1471a <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1487e:	2104      	movs	r1, #4
   14880:	3008      	adds	r0, #8
   14882:	f001 f94d 	bl	15b20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14886:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14888:	4a0c      	ldr	r2, [pc, #48]	; (148bc <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1488a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1488c:	89e3      	ldrh	r3, [r4, #14]
   1488e:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14890:	4623      	mov	r3, r4
   14892:	e76d      	b.n	14770 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   14894:	2145      	movs	r1, #69	; 0x45
   14896:	480a      	ldr	r0, [pc, #40]	; (148c0 <bt_gatt_discover+0x24c>)
   14898:	f006 f8a2 	bl	1a9e0 <printk>
   1489c:	e75f      	b.n	1475e <bt_gatt_discover+0xea>
		return -ENOTCONN;
   1489e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   148a2:	e73c      	b.n	1471e <bt_gatt_discover+0xaa>
   148a4:	00021ee6 	.word	0x00021ee6
   148a8:	0001faab 	.word	0x0001faab
   148ac:	00021fa5 	.word	0x00021fa5
   148b0:	0001d2bd 	.word	0x0001d2bd
   148b4:	000148c5 	.word	0x000148c5
   148b8:	000149cd 	.word	0x000149cd
   148bc:	00014c7d 	.word	0x00014c7d
   148c0:	00021fbf 	.word	0x00021fbf

000148c4 <gatt_read_group_rsp>:
{
   148c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148c8:	b08f      	sub	sp, #60	; 0x3c
   148ca:	4681      	mov	r9, r0
   148cc:	4617      	mov	r7, r2
   148ce:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   148d0:	b131      	cbz	r1, 148e0 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   148d2:	462a      	mov	r2, r5
   148d4:	2100      	movs	r1, #0
   148d6:	686b      	ldr	r3, [r5, #4]
}
   148d8:	b00f      	add	sp, #60	; 0x3c
   148da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   148de:	4718      	bx	r3
	switch (rsp->len) {
   148e0:	7812      	ldrb	r2, [r2, #0]
   148e2:	2a06      	cmp	r2, #6
   148e4:	d00d      	beq.n	14902 <gatt_read_group_rsp+0x3e>
   148e6:	2a14      	cmp	r2, #20
   148e8:	d021      	beq.n	1492e <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   148ea:	2145      	movs	r1, #69	; 0x45
   148ec:	4836      	ldr	r0, [pc, #216]	; (149c8 <gatt_read_group_rsp+0x104>)
   148ee:	f006 f877 	bl	1a9e0 <printk>
	params->func(conn, NULL, params);
   148f2:	462a      	mov	r2, r5
   148f4:	2100      	movs	r1, #0
   148f6:	4648      	mov	r0, r9
   148f8:	686b      	ldr	r3, [r5, #4]
   148fa:	4798      	blx	r3
}
   148fc:	b00f      	add	sp, #60	; 0x3c
   148fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   14902:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   14906:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14908:	3b01      	subs	r3, #1
   1490a:	b29c      	uxth	r4, r3
   1490c:	f107 0801 	add.w	r8, r7, #1
   14910:	783b      	ldrb	r3, [r7, #0]
   14912:	42a3      	cmp	r3, r4
   14914:	d90f      	bls.n	14936 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   14916:	2c00      	cmp	r4, #0
   14918:	d1eb      	bne.n	148f2 <gatt_read_group_rsp+0x2e>
   1491a:	2e00      	cmp	r6, #0
   1491c:	d0e9      	beq.n	148f2 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   1491e:	462a      	mov	r2, r5
   14920:	4631      	mov	r1, r6
   14922:	4648      	mov	r0, r9
}
   14924:	b00f      	add	sp, #60	; 0x3c
   14926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   1492a:	f008 bcaa 	b.w	1d282 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   1492e:	2202      	movs	r2, #2
   14930:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14934:	e7e7      	b.n	14906 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   14936:	2214      	movs	r2, #20
   14938:	2100      	movs	r1, #0
   1493a:	a809      	add	r0, sp, #36	; 0x24
   1493c:	f007 faa5 	bl	1be8a <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   14940:	f8b8 a000 	ldrh.w	sl, [r8]
   14944:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   14948:	2b00      	cmp	r3, #0
   1494a:	d0d2      	beq.n	148f2 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1494c:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   14950:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   14954:	2e00      	cmp	r6, #0
   14956:	d0cc      	beq.n	148f2 <gatt_read_group_rsp+0x2e>
   14958:	42b3      	cmp	r3, r6
   1495a:	d8ca      	bhi.n	148f2 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   1495c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14960:	b323      	cbz	r3, 149ac <gatt_read_group_rsp+0xe8>
   14962:	2b02      	cmp	r3, #2
   14964:	d02a      	beq.n	149bc <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   14966:	f04f 0300 	mov.w	r3, #0
   1496a:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1496e:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14970:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   14972:	2b00      	cmp	r3, #0
   14974:	f642 0301 	movw	r3, #10241	; 0x2801
   14978:	bf08      	it	eq
   1497a:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1497e:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   14982:	ab04      	add	r3, sp, #16
   14984:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   14986:	ab01      	add	r3, sp, #4
   14988:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1498a:	ab02      	add	r3, sp, #8
   1498c:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1498e:	4648      	mov	r0, r9
   14990:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   14992:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   14996:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1499a:	a909      	add	r1, sp, #36	; 0x24
   1499c:	4798      	blx	r3
   1499e:	2800      	cmp	r0, #0
   149a0:	d0ac      	beq.n	148fc <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   149a2:	783a      	ldrb	r2, [r7, #0]
   149a4:	1aa4      	subs	r4, r4, r2
   149a6:	b2a4      	uxth	r4, r4
   149a8:	4490      	add	r8, r2
   149aa:	e7b1      	b.n	14910 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   149ac:	2202      	movs	r2, #2
   149ae:	f108 0104 	add.w	r1, r8, #4
   149b2:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   149b6:	f007 fa3d 	bl	1be34 <memcpy>
			break;
   149ba:	e7d4      	b.n	14966 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   149bc:	2210      	movs	r2, #16
   149be:	f108 0104 	add.w	r1, r8, #4
   149c2:	f10d 0011 	add.w	r0, sp, #17
   149c6:	e7f6      	b.n	149b6 <gatt_read_group_rsp+0xf2>
   149c8:	00021fdf 	.word	0x00021fdf

000149cc <gatt_read_type_rsp>:
{
   149cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d0:	b091      	sub	sp, #68	; 0x44
   149d2:	4607      	mov	r7, r0
   149d4:	4690      	mov	r8, r2
   149d6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   149d8:	b131      	cbz	r1, 149e8 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   149da:	462a      	mov	r2, r5
   149dc:	2100      	movs	r1, #0
   149de:	686b      	ldr	r3, [r5, #4]
}
   149e0:	b011      	add	sp, #68	; 0x44
   149e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   149e6:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   149e8:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   149ea:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   149ec:	2802      	cmp	r0, #2
   149ee:	f040 8089 	bne.w	14b04 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   149f2:	2a06      	cmp	r2, #6
   149f4:	d01c      	beq.n	14a30 <gatt_read_type_rsp+0x64>
   149f6:	2a08      	cmp	r2, #8
   149f8:	f040 8088 	bne.w	14b0c <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   149fc:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14a00:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14a02:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   14a04:	1e5c      	subs	r4, r3, #1
   14a06:	b2a4      	uxth	r4, r4
   14a08:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   14a0c:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   14a10:	f898 3000 	ldrb.w	r3, [r8]
   14a14:	42a3      	cmp	r3, r4
   14a16:	d90e      	bls.n	14a36 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   14a18:	2c00      	cmp	r4, #0
   14a1a:	d17b      	bne.n	14b14 <gatt_read_type_rsp+0x148>
   14a1c:	2e00      	cmp	r6, #0
   14a1e:	d079      	beq.n	14b14 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   14a20:	462a      	mov	r2, r5
   14a22:	4631      	mov	r1, r6
   14a24:	4638      	mov	r0, r7
}
   14a26:	b011      	add	sp, #68	; 0x44
   14a28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14a2c:	f008 bc29 	b.w	1d282 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   14a30:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   14a34:	e7e4      	b.n	14a00 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   14a36:	f8b9 3000 	ldrh.w	r3, [r9]
   14a3a:	b29e      	uxth	r6, r3
		if (!handle) {
   14a3c:	2e00      	cmp	r6, #0
   14a3e:	d069      	beq.n	14b14 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   14a40:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   14a44:	f8ad 2014 	strh.w	r2, [sp, #20]
   14a48:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   14a4a:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   14a4e:	b291      	uxth	r1, r2
   14a50:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   14a54:	f89d 2018 	ldrb.w	r2, [sp, #24]
   14a58:	b182      	cbz	r2, 14a7c <gatt_read_type_rsp+0xb0>
   14a5a:	2a02      	cmp	r2, #2
   14a5c:	d019      	beq.n	14a92 <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14a5e:	6829      	ldr	r1, [r5, #0]
   14a60:	2900      	cmp	r1, #0
   14a62:	d036      	beq.n	14ad2 <gatt_read_type_rsp+0x106>
   14a64:	4650      	mov	r0, sl
   14a66:	9301      	str	r3, [sp, #4]
   14a68:	f007 fa59 	bl	1bf1e <bt_uuid_cmp>
   14a6c:	9b01      	ldr	r3, [sp, #4]
   14a6e:	b380      	cbz	r0, 14ad2 <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14a70:	f898 2000 	ldrb.w	r2, [r8]
   14a74:	1aa4      	subs	r4, r4, r2
   14a76:	b2a4      	uxth	r4, r4
   14a78:	4491      	add	r9, r2
   14a7a:	e7c9      	b.n	14a10 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   14a7c:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   14a80:	f899 2006 	ldrb.w	r2, [r9, #6]
   14a84:	f899 1007 	ldrb.w	r1, [r9, #7]
   14a88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14a8c:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   14a90:	e7e5      	b.n	14a5e <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   14a92:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   14a94:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14a96:	4638      	mov	r0, r7
   14a98:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   14a9a:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14a9c:	9201      	str	r2, [sp, #4]
   14a9e:	f7fe f849 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   14aa2:	4604      	mov	r4, r0
   14aa4:	b190      	cbz	r0, 14acc <gatt_read_type_rsp+0x100>
   14aa6:	9a01      	ldr	r2, [sp, #4]
   14aa8:	3008      	adds	r0, #8
   14aaa:	4611      	mov	r1, r2
   14aac:	f001 f838 	bl	15b20 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14ab0:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14ab2:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14ab4:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14ab6:	4a49      	ldr	r2, [pc, #292]	; (14bdc <gatt_read_type_rsp+0x210>)
   14ab8:	462b      	mov	r3, r5
   14aba:	4638      	mov	r0, r7
   14abc:	f7fe fe72 	bl	137a4 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   14ac0:	b286      	uxth	r6, r0
	if (!handle) {
   14ac2:	2e00      	cmp	r6, #0
   14ac4:	d1ac      	bne.n	14a20 <gatt_read_type_rsp+0x54>
}
   14ac6:	b011      	add	sp, #68	; 0x44
   14ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   14acc:	f06f 000b 	mvn.w	r0, #11
   14ad0:	e7f6      	b.n	14ac0 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ad2:	f642 0202 	movw	r2, #10242	; 0x2802
   14ad6:	f8ad 200e 	strh.w	r2, [sp, #14]
   14ada:	aa03      	add	r2, sp, #12
   14adc:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   14ae0:	aa04      	add	r2, sp, #16
   14ae2:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14ae4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14ae8:	462a      	mov	r2, r5
   14aea:	4638      	mov	r0, r7
   14aec:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14aee:	f88d b00c 	strb.w	fp, [sp, #12]
   14af2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   14af6:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14afa:	a90b      	add	r1, sp, #44	; 0x2c
   14afc:	4798      	blx	r3
   14afe:	2800      	cmp	r0, #0
   14b00:	d1b6      	bne.n	14a70 <gatt_read_type_rsp+0xa4>
   14b02:	e7e0      	b.n	14ac6 <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   14b04:	2a07      	cmp	r2, #7
   14b06:	d00b      	beq.n	14b20 <gatt_read_type_rsp+0x154>
   14b08:	2a15      	cmp	r2, #21
   14b0a:	d02e      	beq.n	14b6a <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   14b0c:	2145      	movs	r1, #69	; 0x45
   14b0e:	4834      	ldr	r0, [pc, #208]	; (14be0 <gatt_read_type_rsp+0x214>)
   14b10:	f005 ff66 	bl	1a9e0 <printk>
	params->func(conn, NULL, params);
   14b14:	462a      	mov	r2, r5
   14b16:	2100      	movs	r1, #0
   14b18:	4638      	mov	r0, r7
   14b1a:	686b      	ldr	r3, [r5, #4]
   14b1c:	4798      	blx	r3
	if (!handle) {
   14b1e:	e7d2      	b.n	14ac6 <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   14b20:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14b24:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14b26:	1e5c      	subs	r4, r3, #1
   14b28:	b2a4      	uxth	r4, r4
   14b2a:	f108 0901 	add.w	r9, r8, #1
   14b2e:	f10d 0a18 	add.w	sl, sp, #24
   14b32:	f898 3000 	ldrb.w	r3, [r8]
   14b36:	42a3      	cmp	r3, r4
   14b38:	f63f af6e 	bhi.w	14a18 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   14b3c:	f8b9 b000 	ldrh.w	fp, [r9]
   14b40:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   14b44:	2e00      	cmp	r6, #0
   14b46:	d0e5      	beq.n	14b14 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   14b48:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14b4c:	b18b      	cbz	r3, 14b72 <gatt_read_type_rsp+0x1a6>
   14b4e:	2b02      	cmp	r3, #2
   14b50:	d018      	beq.n	14b84 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14b52:	6829      	ldr	r1, [r5, #0]
   14b54:	b1f1      	cbz	r1, 14b94 <gatt_read_type_rsp+0x1c8>
   14b56:	4650      	mov	r0, sl
   14b58:	f007 f9e1 	bl	1bf1e <bt_uuid_cmp>
   14b5c:	b1d0      	cbz	r0, 14b94 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14b5e:	f898 2000 	ldrb.w	r2, [r8]
   14b62:	1aa4      	subs	r4, r4, r2
   14b64:	b2a4      	uxth	r4, r4
   14b66:	4491      	add	r9, r2
   14b68:	e7e3      	b.n	14b32 <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   14b6a:	2202      	movs	r2, #2
   14b6c:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   14b70:	e7d8      	b.n	14b24 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   14b72:	f899 3005 	ldrb.w	r3, [r9, #5]
   14b76:	f899 2006 	ldrb.w	r2, [r9, #6]
   14b7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14b7e:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   14b82:	e7e6      	b.n	14b52 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   14b84:	2210      	movs	r2, #16
   14b86:	f109 0105 	add.w	r1, r9, #5
   14b8a:	f10d 0019 	add.w	r0, sp, #25
   14b8e:	f007 f951 	bl	1be34 <memcpy>
			break;
   14b92:	e7de      	b.n	14b52 <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14b94:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   14b98:	f899 3002 	ldrb.w	r3, [r9, #2]
   14b9c:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ba0:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14ba4:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ba8:	2300      	movs	r3, #0
   14baa:	f8ad 200e 	strh.w	r2, [sp, #14]
   14bae:	aa03      	add	r2, sp, #12
   14bb0:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14bb4:	aa04      	add	r2, sp, #16
   14bb6:	f88d 300c 	strb.w	r3, [sp, #12]
   14bba:	930d      	str	r3, [sp, #52]	; 0x34
   14bbc:	920e      	str	r2, [sp, #56]	; 0x38
   14bbe:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14bc2:	462a      	mov	r2, r5
   14bc4:	4638      	mov	r0, r7
   14bc6:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14bc8:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14bcc:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14bd0:	a90b      	add	r1, sp, #44	; 0x2c
   14bd2:	4798      	blx	r3
   14bd4:	2800      	cmp	r0, #0
   14bd6:	d1c2      	bne.n	14b5e <gatt_read_type_rsp+0x192>
   14bd8:	e775      	b.n	14ac6 <gatt_read_type_rsp+0xfa>
   14bda:	bf00      	nop
   14bdc:	00014be5 	.word	0x00014be5
   14be0:	00021fdf 	.word	0x00021fdf

00014be4 <read_included_uuid_cb>:
{
   14be4:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14be6:	2b10      	cmp	r3, #16
{
   14be8:	b08e      	sub	sp, #56	; 0x38
   14bea:	4611      	mov	r1, r2
   14bec:	4605      	mov	r5, r0
   14bee:	461a      	mov	r2, r3
   14bf0:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   14bf2:	d00b      	beq.n	14c0c <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14bf4:	2145      	movs	r1, #69	; 0x45
   14bf6:	4820      	ldr	r0, [pc, #128]	; (14c78 <read_included_uuid_cb+0x94>)
   14bf8:	f005 fef2 	bl	1a9e0 <printk>
		params->func(conn, NULL, params);
   14bfc:	4622      	mov	r2, r4
   14bfe:	2100      	movs	r1, #0
   14c00:	4628      	mov	r0, r5
   14c02:	6863      	ldr	r3, [r4, #4]
}
   14c04:	b00e      	add	sp, #56	; 0x38
   14c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14c0a:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14c0c:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   14c0e:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   14c10:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   14c14:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   14c16:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   14c1a:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   14c1e:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   14c20:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   14c22:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   14c26:	f007 f905 	bl	1be34 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14c2a:	6821      	ldr	r1, [r4, #0]
   14c2c:	b9c9      	cbnz	r1, 14c62 <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c2e:	f642 0202 	movw	r2, #10242	; 0x2802
   14c32:	2300      	movs	r3, #0
   14c34:	f8ad 2006 	strh.w	r2, [sp, #6]
   14c38:	aa01      	add	r2, sp, #4
   14c3a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   14c3e:	f88d 3004 	strb.w	r3, [sp, #4]
   14c42:	930b      	str	r3, [sp, #44]	; 0x2c
   14c44:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   14c48:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c4a:	aa02      	add	r2, sp, #8
   14c4c:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   14c4e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c52:	4622      	mov	r2, r4
   14c54:	4628      	mov	r0, r5
   14c56:	6863      	ldr	r3, [r4, #4]
   14c58:	a909      	add	r1, sp, #36	; 0x24
   14c5a:	4798      	blx	r3
   14c5c:	b930      	cbnz	r0, 14c6c <read_included_uuid_cb+0x88>
}
   14c5e:	b00e      	add	sp, #56	; 0x38
   14c60:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14c62:	4630      	mov	r0, r6
   14c64:	f007 f95b 	bl	1bf1e <bt_uuid_cmp>
   14c68:	2800      	cmp	r0, #0
   14c6a:	d0e0      	beq.n	14c2e <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   14c6c:	4622      	mov	r2, r4
   14c6e:	4628      	mov	r0, r5
   14c70:	8921      	ldrh	r1, [r4, #8]
   14c72:	f008 fb06 	bl	1d282 <gatt_discover_next>
	return;
   14c76:	e7f2      	b.n	14c5e <read_included_uuid_cb+0x7a>
   14c78:	00021fdf 	.word	0x00021fdf

00014c7c <gatt_find_info_rsp>:
{
   14c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c80:	b08f      	sub	sp, #60	; 0x3c
   14c82:	4680      	mov	r8, r0
   14c84:	4614      	mov	r4, r2
   14c86:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   14c88:	b941      	cbnz	r1, 14c9c <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   14c8a:	7812      	ldrb	r2, [r2, #0]
   14c8c:	2a01      	cmp	r2, #1
   14c8e:	d00b      	beq.n	14ca8 <gatt_find_info_rsp+0x2c>
   14c90:	2a02      	cmp	r2, #2
   14c92:	d022      	beq.n	14cda <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   14c94:	2145      	movs	r1, #69	; 0x45
   14c96:	484b      	ldr	r0, [pc, #300]	; (14dc4 <gatt_find_info_rsp+0x148>)
   14c98:	f005 fea2 	bl	1a9e0 <printk>
	params->func(conn, NULL, params);
   14c9c:	4632      	mov	r2, r6
   14c9e:	2100      	movs	r1, #0
   14ca0:	4640      	mov	r0, r8
   14ca2:	6873      	ldr	r3, [r6, #4]
   14ca4:	4798      	blx	r3
   14ca6:	e08a      	b.n	14dbe <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14ca8:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14cac:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   14cb0:	3b01      	subs	r3, #1
   14cb2:	b29b      	uxth	r3, r3
	if (length < len) {
   14cb4:	4553      	cmp	r3, sl
   14cb6:	d3f1      	bcc.n	14c9c <gatt_find_info_rsp+0x20>
	bool skip = false;
   14cb8:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14cbc:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   14cc0:	46cb      	mov	fp, r9
			skip = false;
   14cc2:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14cc4:	9300      	str	r3, [sp, #0]
   14cc6:	3401      	adds	r4, #1
   14cc8:	af04      	add	r7, sp, #16
   14cca:	9b00      	ldr	r3, [sp, #0]
   14ccc:	b953      	cbnz	r3, 14ce4 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   14cce:	4632      	mov	r2, r6
   14cd0:	4659      	mov	r1, fp
   14cd2:	4640      	mov	r0, r8
   14cd4:	f008 fad5 	bl	1d282 <gatt_discover_next>
	return;
   14cd8:	e071      	b.n	14dbe <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14cda:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   14cde:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14ce2:	e7e5      	b.n	14cb0 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14ce4:	8823      	ldrh	r3, [r4, #0]
   14ce6:	9301      	str	r3, [sp, #4]
   14ce8:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14cec:	f1b9 0f00 	cmp.w	r9, #0
   14cf0:	d151      	bne.n	14d96 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   14cf2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14cf6:	2b00      	cmp	r3, #0
   14cf8:	d03a      	beq.n	14d70 <gatt_find_info_rsp+0xf4>
   14cfa:	2b02      	cmp	r3, #2
   14cfc:	d03f      	beq.n	14d7e <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14cfe:	6831      	ldr	r1, [r6, #0]
   14d00:	2900      	cmp	r1, #0
   14d02:	d143      	bne.n	14d8c <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14d04:	7c33      	ldrb	r3, [r6, #16]
   14d06:	2b04      	cmp	r3, #4
   14d08:	d148      	bne.n	14d9c <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14d0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14d0e:	4638      	mov	r0, r7
   14d10:	a902      	add	r1, sp, #8
   14d12:	f88d 5008 	strb.w	r5, [sp, #8]
   14d16:	f8ad 300a 	strh.w	r3, [sp, #10]
   14d1a:	f007 f900 	bl	1bf1e <bt_uuid_cmp>
   14d1e:	b310      	cbz	r0, 14d66 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14d20:	f642 0301 	movw	r3, #10241	; 0x2801
   14d24:	4638      	mov	r0, r7
   14d26:	a903      	add	r1, sp, #12
   14d28:	f88d 500c 	strb.w	r5, [sp, #12]
   14d2c:	f8ad 300e 	strh.w	r3, [sp, #14]
   14d30:	f007 f8f5 	bl	1bf1e <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14d34:	b1b8      	cbz	r0, 14d66 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   14d36:	f642 0302 	movw	r3, #10242	; 0x2802
   14d3a:	4638      	mov	r0, r7
   14d3c:	a909      	add	r1, sp, #36	; 0x24
   14d3e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14d42:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14d46:	f007 f8ea 	bl	1bf1e <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14d4a:	b160      	cbz	r0, 14d66 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   14d4c:	f642 0303 	movw	r3, #10243	; 0x2803
   14d50:	4638      	mov	r0, r7
   14d52:	a909      	add	r1, sp, #36	; 0x24
   14d54:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14d58:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14d5c:	f007 f8df 	bl	1bf1e <bt_uuid_cmp>
   14d60:	b9e0      	cbnz	r0, 14d9c <gatt_find_info_rsp+0x120>
				skip = true;
   14d62:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   14d66:	9b00      	ldr	r3, [sp, #0]
   14d68:	4454      	add	r4, sl
   14d6a:	3b01      	subs	r3, #1
   14d6c:	9300      	str	r3, [sp, #0]
   14d6e:	e7ac      	b.n	14cca <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   14d70:	78a3      	ldrb	r3, [r4, #2]
   14d72:	78e2      	ldrb	r2, [r4, #3]
   14d74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14d78:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   14d7c:	e7bf      	b.n	14cfe <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   14d7e:	2210      	movs	r2, #16
   14d80:	1ca1      	adds	r1, r4, #2
   14d82:	f10d 0011 	add.w	r0, sp, #17
   14d86:	f007 f855 	bl	1be34 <memcpy>
			break;
   14d8a:	e7b8      	b.n	14cfe <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14d8c:	4638      	mov	r0, r7
   14d8e:	f007 f8c6 	bl	1bf1e <bt_uuid_cmp>
   14d92:	2800      	cmp	r0, #0
   14d94:	d0b6      	beq.n	14d04 <gatt_find_info_rsp+0x88>
			skip = false;
   14d96:	f04f 0900 	mov.w	r9, #0
   14d9a:	e7e4      	b.n	14d66 <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   14d9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14da0:	4632      	mov	r2, r6
		attr.handle = handle;
   14da2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14da6:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14da8:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14dac:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14db0:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14db2:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14db6:	a909      	add	r1, sp, #36	; 0x24
   14db8:	4798      	blx	r3
   14dba:	2800      	cmp	r0, #0
   14dbc:	d1d3      	bne.n	14d66 <gatt_find_info_rsp+0xea>
}
   14dbe:	b00f      	add	sp, #60	; 0x3c
   14dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dc4:	00021ff8 	.word	0x00021ff8

00014dc8 <bt_gatt_read>:
{
   14dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dcc:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14dce:	4605      	mov	r5, r0
   14dd0:	b950      	cbnz	r0, 14de8 <bt_gatt_read+0x20>
   14dd2:	4945      	ldr	r1, [pc, #276]	; (14ee8 <bt_gatt_read+0x120>)
   14dd4:	4845      	ldr	r0, [pc, #276]	; (14eec <bt_gatt_read+0x124>)
   14dd6:	f640 62a6 	movw	r2, #3750	; 0xea6
   14dda:	f005 fe01 	bl	1a9e0 <printk>
   14dde:	f640 61a6 	movw	r1, #3750	; 0xea6
   14de2:	4841      	ldr	r0, [pc, #260]	; (14ee8 <bt_gatt_read+0x120>)
   14de4:	f006 f8a2 	bl	1af2c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14de8:	b10c      	cbz	r4, 14dee <bt_gatt_read+0x26>
   14dea:	6823      	ldr	r3, [r4, #0]
   14dec:	b953      	cbnz	r3, 14e04 <bt_gatt_read+0x3c>
   14dee:	493e      	ldr	r1, [pc, #248]	; (14ee8 <bt_gatt_read+0x120>)
   14df0:	483e      	ldr	r0, [pc, #248]	; (14eec <bt_gatt_read+0x124>)
   14df2:	f640 62a7 	movw	r2, #3751	; 0xea7
   14df6:	f005 fdf3 	bl	1a9e0 <printk>
   14dfa:	f640 61a7 	movw	r1, #3751	; 0xea7
   14dfe:	483a      	ldr	r0, [pc, #232]	; (14ee8 <bt_gatt_read+0x120>)
   14e00:	f006 f894 	bl	1af2c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14e04:	7aab      	ldrb	r3, [r5, #10]
   14e06:	2b07      	cmp	r3, #7
   14e08:	d16a      	bne.n	14ee0 <bt_gatt_read+0x118>
	if (params->handle_count == 0) {
   14e0a:	6862      	ldr	r2, [r4, #4]
   14e0c:	bb22      	cbnz	r2, 14e58 <bt_gatt_read+0x90>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14e0e:	2204      	movs	r2, #4
   14e10:	2108      	movs	r1, #8
   14e12:	4628      	mov	r0, r5
   14e14:	f7fd fe8e 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   14e18:	4606      	mov	r6, r0
   14e1a:	b918      	cbnz	r0, 14e24 <bt_gatt_read+0x5c>
		return -ENOMEM;
   14e1c:	f06f 000b 	mvn.w	r0, #11
}
   14e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e24:	f100 0708 	add.w	r7, r0, #8
   14e28:	2104      	movs	r1, #4
   14e2a:	4638      	mov	r0, r7
   14e2c:	f000 fe78 	bl	15b20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14e30:	8923      	ldrh	r3, [r4, #8]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14e32:	68e1      	ldr	r1, [r4, #12]
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14e34:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   14e36:	8963      	ldrh	r3, [r4, #10]
   14e38:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14e3a:	780b      	ldrb	r3, [r1, #0]
   14e3c:	b933      	cbnz	r3, 14e4c <bt_gatt_read+0x84>
	net_buf_simple_add_le16(&buf->b, val);
   14e3e:	4638      	mov	r0, r7
   14e40:	8849      	ldrh	r1, [r1, #2]
   14e42:	f008 fb49 	bl	1d4d8 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14e46:	4623      	mov	r3, r4
   14e48:	4a29      	ldr	r2, [pc, #164]	; (14ef0 <bt_gatt_read+0x128>)
   14e4a:	e01a      	b.n	14e82 <bt_gatt_read+0xba>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14e4c:	2210      	movs	r2, #16
   14e4e:	4638      	mov	r0, r7
   14e50:	3101      	adds	r1, #1
   14e52:	f008 fb2e 	bl	1d4b2 <net_buf_simple_add_mem>
   14e56:	e7f6      	b.n	14e46 <bt_gatt_read+0x7e>
	if (params->handle_count > 1) {
   14e58:	2a01      	cmp	r2, #1
   14e5a:	d01f      	beq.n	14e9c <bt_gatt_read+0xd4>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
   14e5c:	210e      	movs	r1, #14
   14e5e:	4628      	mov	r0, r5
   14e60:	0052      	lsls	r2, r2, #1
   14e62:	f7fd fe67 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   14e66:	4606      	mov	r6, r0
   14e68:	2800      	cmp	r0, #0
   14e6a:	d0d7      	beq.n	14e1c <bt_gatt_read+0x54>
   14e6c:	2700      	movs	r7, #0
	net_buf_simple_add_le16(&buf->b, val);
   14e6e:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
   14e72:	6862      	ldr	r2, [r4, #4]
   14e74:	b2fb      	uxtb	r3, r7
   14e76:	429a      	cmp	r2, r3
   14e78:	f107 0701 	add.w	r7, r7, #1
   14e7c:	d807      	bhi.n	14e8e <bt_gatt_read+0xc6>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
   14e7e:	4623      	mov	r3, r4
   14e80:	4a1c      	ldr	r2, [pc, #112]	; (14ef4 <bt_gatt_read+0x12c>)
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14e82:	4631      	mov	r1, r6
   14e84:	4628      	mov	r0, r5
}
   14e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14e8a:	f7fe bc8b 	b.w	137a4 <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
   14e8e:	68a2      	ldr	r2, [r4, #8]
   14e90:	4640      	mov	r0, r8
   14e92:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   14e96:	f008 fb1f 	bl	1d4d8 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   14e9a:	e7ea      	b.n	14e72 <bt_gatt_read+0xaa>
	if (params->single.offset) {
   14e9c:	8963      	ldrh	r3, [r4, #10]
   14e9e:	b183      	cbz	r3, 14ec2 <bt_gatt_read+0xfa>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
   14ea0:	2204      	movs	r2, #4
   14ea2:	210c      	movs	r1, #12
   14ea4:	4628      	mov	r0, r5
   14ea6:	f7fd fe45 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   14eaa:	4606      	mov	r6, r0
   14eac:	2800      	cmp	r0, #0
   14eae:	d0b5      	beq.n	14e1c <bt_gatt_read+0x54>
	return net_buf_simple_add(&buf->b, len);
   14eb0:	2104      	movs	r1, #4
   14eb2:	3008      	adds	r0, #8
   14eb4:	f000 fe34 	bl	15b20 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14eb8:	8923      	ldrh	r3, [r4, #8]
   14eba:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   14ebc:	8963      	ldrh	r3, [r4, #10]
   14ebe:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14ec0:	e7c1      	b.n	14e46 <bt_gatt_read+0x7e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14ec2:	2202      	movs	r2, #2
   14ec4:	210a      	movs	r1, #10
   14ec6:	4628      	mov	r0, r5
   14ec8:	f7fd fe34 	bl	12b34 <bt_att_create_pdu>
	if (!buf) {
   14ecc:	4606      	mov	r6, r0
   14ece:	2800      	cmp	r0, #0
   14ed0:	d0a4      	beq.n	14e1c <bt_gatt_read+0x54>
   14ed2:	2102      	movs	r1, #2
   14ed4:	3008      	adds	r0, #8
   14ed6:	f000 fe23 	bl	15b20 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14eda:	8923      	ldrh	r3, [r4, #8]
   14edc:	8003      	strh	r3, [r0, #0]
   14ede:	e7b2      	b.n	14e46 <bt_gatt_read+0x7e>
		return -ENOTCONN;
   14ee0:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14ee4:	e79c      	b.n	14e20 <bt_gatt_read+0x58>
   14ee6:	bf00      	nop
   14ee8:	00021ee6 	.word	0x00021ee6
   14eec:	0001faab 	.word	0x0001faab
   14ef0:	00014ef9 	.word	0x00014ef9
   14ef4:	0001ce63 	.word	0x0001ce63

00014ef8 <gatt_read_rsp>:
{
   14ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14efc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14efe:	4606      	mov	r6, r0
   14f00:	4690      	mov	r8, r2
   14f02:	461d      	mov	r5, r3
	if (err || !length) {
   14f04:	460f      	mov	r7, r1
   14f06:	b901      	cbnz	r1, 14f0a <gatt_read_rsp+0x12>
   14f08:	b953      	cbnz	r3, 14f20 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   14f0a:	2300      	movs	r3, #0
   14f0c:	4622      	mov	r2, r4
   14f0e:	4639      	mov	r1, r7
   14f10:	930a      	str	r3, [sp, #40]	; 0x28
   14f12:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14f14:	4630      	mov	r0, r6
   14f16:	46ac      	mov	ip, r5
}
   14f18:	b003      	add	sp, #12
   14f1a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14f1e:	4760      	bx	ip
	if (!params->handle_count) {
   14f20:	6863      	ldr	r3, [r4, #4]
   14f22:	2b00      	cmp	r3, #0
   14f24:	d141      	bne.n	14faa <gatt_read_rsp+0xb2>
	for (length--, pdu = rsp->data; length;
   14f26:	3d01      	subs	r5, #1
   14f28:	b2ad      	uxth	r5, r5
   14f2a:	f102 0901 	add.w	r9, r2, #1
   14f2e:	b305      	cbz	r5, 14f72 <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   14f30:	f8b9 2000 	ldrh.w	r2, [r9]
   14f34:	b293      	uxth	r3, r2
		if (!handle) {
   14f36:	b933      	cbnz	r3, 14f46 <gatt_read_rsp+0x4e>
			BT_ERR("Invalid handle");
   14f38:	2145      	movs	r1, #69	; 0x45
   14f3a:	482c      	ldr	r0, [pc, #176]	; (14fec <gatt_read_rsp+0xf4>)
}
   14f3c:	b003      	add	sp, #12
   14f3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   14f42:	f005 bd4d 	b.w	1a9e0 <printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14f46:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   14f4a:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14f4c:	42ab      	cmp	r3, r5
   14f4e:	bf8c      	ite	hi
   14f50:	1eab      	subhi	r3, r5, #2
   14f52:	3b02      	subls	r3, #2
   14f54:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   14f56:	9300      	str	r3, [sp, #0]
   14f58:	4622      	mov	r2, r4
   14f5a:	2100      	movs	r1, #0
   14f5c:	4630      	mov	r0, r6
   14f5e:	6827      	ldr	r7, [r4, #0]
   14f60:	f109 0302 	add.w	r3, r9, #2
   14f64:	47b8      	blx	r7
   14f66:	2800      	cmp	r0, #0
   14f68:	d03d      	beq.n	14fe6 <gatt_read_rsp+0xee>
		if (rsp->len > length) {
   14f6a:	f898 1000 	ldrb.w	r1, [r8]
   14f6e:	428d      	cmp	r5, r1
   14f70:	d20b      	bcs.n	14f8a <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   14f72:	4621      	mov	r1, r4
   14f74:	4630      	mov	r0, r6
   14f76:	f7ff ff27 	bl	14dc8 <bt_gatt_read>
   14f7a:	2800      	cmp	r0, #0
   14f7c:	da33      	bge.n	14fe6 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14f7e:	2300      	movs	r3, #0
   14f80:	930a      	str	r3, [sp, #40]	; 0x28
   14f82:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14f84:	4622      	mov	r2, r4
   14f86:	210e      	movs	r1, #14
   14f88:	e7c4      	b.n	14f14 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   14f8a:	8922      	ldrh	r2, [r4, #8]
   14f8c:	8960      	ldrh	r0, [r4, #10]
   14f8e:	4290      	cmp	r0, r2
   14f90:	d105      	bne.n	14f9e <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   14f92:	2300      	movs	r3, #0
   14f94:	930a      	str	r3, [sp, #40]	; 0x28
   14f96:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   14f98:	4622      	mov	r2, r4
   14f9a:	4619      	mov	r1, r3
   14f9c:	e7ba      	b.n	14f14 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   14f9e:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14fa0:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   14fa2:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14fa4:	b2ad      	uxth	r5, r5
   14fa6:	4489      	add	r9, r1
   14fa8:	e7c1      	b.n	14f2e <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   14faa:	9500      	str	r5, [sp, #0]
   14fac:	4613      	mov	r3, r2
   14fae:	f8d4 c000 	ldr.w	ip, [r4]
   14fb2:	4622      	mov	r2, r4
   14fb4:	47e0      	blx	ip
   14fb6:	b1b0      	cbz	r0, 14fe6 <gatt_read_rsp+0xee>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   14fb8:	4630      	mov	r0, r6
   14fba:	f007 fdd3 	bl	1cb64 <bt_att_get_mtu>
   14fbe:	3801      	subs	r0, #1
   14fc0:	4285      	cmp	r5, r0
   14fc2:	da03      	bge.n	14fcc <gatt_read_rsp+0xd4>
		params->func(conn, 0, params, NULL, 0);
   14fc4:	970a      	str	r7, [sp, #40]	; 0x28
   14fc6:	463b      	mov	r3, r7
   14fc8:	6825      	ldr	r5, [r4, #0]
   14fca:	e7e5      	b.n	14f98 <gatt_read_rsp+0xa0>
	params->single.offset += length;
   14fcc:	8963      	ldrh	r3, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   14fce:	4621      	mov	r1, r4
	params->single.offset += length;
   14fd0:	441d      	add	r5, r3
	if (bt_gatt_read(conn, params) < 0) {
   14fd2:	4630      	mov	r0, r6
	params->single.offset += length;
   14fd4:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   14fd6:	f7ff fef7 	bl	14dc8 <bt_gatt_read>
   14fda:	2800      	cmp	r0, #0
   14fdc:	da03      	bge.n	14fe6 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14fde:	970a      	str	r7, [sp, #40]	; 0x28
   14fe0:	463b      	mov	r3, r7
   14fe2:	6825      	ldr	r5, [r4, #0]
   14fe4:	e7ce      	b.n	14f84 <gatt_read_rsp+0x8c>
}
   14fe6:	b003      	add	sp, #12
   14fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14fec:	0002200f 	.word	0x0002200f

00014ff0 <bt_gatt_subscribe>:
{
   14ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ff2:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14ff4:	4606      	mov	r6, r0
   14ff6:	b950      	cbnz	r0, 1500e <bt_gatt_subscribe+0x1e>
   14ff8:	4944      	ldr	r1, [pc, #272]	; (1510c <bt_gatt_subscribe+0x11c>)
   14ffa:	4845      	ldr	r0, [pc, #276]	; (15110 <bt_gatt_subscribe+0x120>)
   14ffc:	f640 72fb 	movw	r2, #4091	; 0xffb
   15000:	f005 fcee 	bl	1a9e0 <printk>
   15004:	f640 71fb 	movw	r1, #4091	; 0xffb
   15008:	4840      	ldr	r0, [pc, #256]	; (1510c <bt_gatt_subscribe+0x11c>)
   1500a:	f005 ff8f 	bl	1af2c <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1500e:	b10d      	cbz	r5, 15014 <bt_gatt_subscribe+0x24>
   15010:	682b      	ldr	r3, [r5, #0]
   15012:	b953      	cbnz	r3, 1502a <bt_gatt_subscribe+0x3a>
   15014:	493d      	ldr	r1, [pc, #244]	; (1510c <bt_gatt_subscribe+0x11c>)
   15016:	483e      	ldr	r0, [pc, #248]	; (15110 <bt_gatt_subscribe+0x120>)
   15018:	f640 72fc 	movw	r2, #4092	; 0xffc
   1501c:	f005 fce0 	bl	1a9e0 <printk>
   15020:	f640 71fc 	movw	r1, #4092	; 0xffc
   15024:	4839      	ldr	r0, [pc, #228]	; (1510c <bt_gatt_subscribe+0x11c>)
   15026:	f005 ff81 	bl	1af2c <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1502a:	89ab      	ldrh	r3, [r5, #12]
   1502c:	b953      	cbnz	r3, 15044 <bt_gatt_subscribe+0x54>
   1502e:	4937      	ldr	r1, [pc, #220]	; (1510c <bt_gatt_subscribe+0x11c>)
   15030:	4837      	ldr	r0, [pc, #220]	; (15110 <bt_gatt_subscribe+0x120>)
   15032:	f640 72fd 	movw	r2, #4093	; 0xffd
   15036:	f005 fcd3 	bl	1a9e0 <printk>
   1503a:	f640 71fd 	movw	r1, #4093	; 0xffd
   1503e:	4833      	ldr	r0, [pc, #204]	; (1510c <bt_gatt_subscribe+0x11c>)
   15040:	f005 ff74 	bl	1af2c <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   15044:	896b      	ldrh	r3, [r5, #10]
   15046:	b953      	cbnz	r3, 1505e <bt_gatt_subscribe+0x6e>
   15048:	4930      	ldr	r1, [pc, #192]	; (1510c <bt_gatt_subscribe+0x11c>)
   1504a:	4831      	ldr	r0, [pc, #196]	; (15110 <bt_gatt_subscribe+0x120>)
   1504c:	f241 0203 	movw	r2, #4099	; 0x1003
   15050:	f005 fcc6 	bl	1a9e0 <printk>
   15054:	f241 0103 	movw	r1, #4099	; 0x1003
   15058:	482c      	ldr	r0, [pc, #176]	; (1510c <bt_gatt_subscribe+0x11c>)
   1505a:	f005 ff67 	bl	1af2c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1505e:	7ab3      	ldrb	r3, [r6, #10]
   15060:	2b07      	cmp	r3, #7
   15062:	d14b      	bne.n	150fc <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   15064:	4630      	mov	r0, r6
   15066:	f7fe f9e7 	bl	13438 <gatt_sub_find>
	if (!sub) {
   1506a:	4604      	mov	r4, r0
   1506c:	b958      	cbnz	r0, 15086 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   1506e:	f7fe f9e3 	bl	13438 <gatt_sub_find>
		if (sub) {
   15072:	4604      	mov	r4, r0
   15074:	2800      	cmp	r0, #0
   15076:	d044      	beq.n	15102 <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15078:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1507c:	3001      	adds	r0, #1
   1507e:	f007 fed1 	bl	1ce24 <bt_addr_le_copy>
			sub->id = conn->id;
   15082:	7a33      	ldrb	r3, [r6, #8]
   15084:	7023      	strb	r3, [r4, #0]
	return list->head;
   15086:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   15088:	b90a      	cbnz	r2, 1508e <bt_gatt_subscribe+0x9e>
   1508a:	4613      	mov	r3, r2
   1508c:	e001      	b.n	15092 <bt_gatt_subscribe+0xa2>
   1508e:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   15092:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   15094:	b97b      	cbnz	r3, 150b6 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   15096:	bb41      	cbnz	r1, 150ea <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   15098:	4630      	mov	r0, r6
   1509a:	462b      	mov	r3, r5
   1509c:	89aa      	ldrh	r2, [r5, #12]
   1509e:	8969      	ldrh	r1, [r5, #10]
   150a0:	f7fe fe24 	bl	13cec <gatt_write_ccc.constprop.0>
		if (err) {
   150a4:	4606      	mov	r6, r0
   150a6:	b300      	cbz	r0, 150ea <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   150a8:	68a3      	ldr	r3, [r4, #8]
   150aa:	b913      	cbnz	r3, 150b2 <bt_gatt_subscribe+0xc2>
   150ac:	4620      	mov	r0, r4
   150ae:	f007 fef3 	bl	1ce98 <gatt_sub_remove.part.0>
}
   150b2:	4630      	mov	r0, r6
   150b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   150b6:	42ab      	cmp	r3, r5
   150b8:	d106      	bne.n	150c8 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   150ba:	b912      	cbnz	r2, 150c2 <bt_gatt_subscribe+0xd2>
   150bc:	4620      	mov	r0, r4
   150be:	f007 feeb 	bl	1ce98 <gatt_sub_remove.part.0>
			return -EALREADY;
   150c2:	f06f 0644 	mvn.w	r6, #68	; 0x44
   150c6:	e7f4      	b.n	150b2 <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   150c8:	891f      	ldrh	r7, [r3, #8]
   150ca:	8928      	ldrh	r0, [r5, #8]
   150cc:	4287      	cmp	r7, r0
   150ce:	d104      	bne.n	150da <bt_gatt_subscribe+0xea>
   150d0:	899f      	ldrh	r7, [r3, #12]
   150d2:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   150d4:	4287      	cmp	r7, r0
   150d6:	bf28      	it	cs
   150d8:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   150da:	f113 0f14 	cmn.w	r3, #20
   150de:	d0da      	beq.n	15096 <bt_gatt_subscribe+0xa6>
	return node->next;
   150e0:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   150e2:	2b00      	cmp	r3, #0
   150e4:	d0d7      	beq.n	15096 <bt_gatt_subscribe+0xa6>
   150e6:	3b14      	subs	r3, #20
   150e8:	e7d4      	b.n	15094 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   150ea:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   150ec:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   150ee:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   150f2:	616a      	str	r2, [r5, #20]
	list->head = node;
   150f4:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   150f6:	b93e      	cbnz	r6, 15108 <bt_gatt_subscribe+0x118>
	list->tail = node;
   150f8:	60e3      	str	r3, [r4, #12]
}
   150fa:	e7da      	b.n	150b2 <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   150fc:	f06f 0638 	mvn.w	r6, #56	; 0x38
   15100:	e7d7      	b.n	150b2 <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   15102:	f06f 060b 	mvn.w	r6, #11
   15106:	e7d4      	b.n	150b2 <bt_gatt_subscribe+0xc2>
	return 0;
   15108:	2600      	movs	r6, #0
   1510a:	e7d2      	b.n	150b2 <bt_gatt_subscribe+0xc2>
   1510c:	00021ee6 	.word	0x00021ee6
   15110:	0001faab 	.word	0x0001faab

00015114 <bt_gatt_unsubscribe>:
{
   15114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15118:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   1511a:	4607      	mov	r7, r0
   1511c:	b950      	cbnz	r0, 15134 <bt_gatt_unsubscribe+0x20>
   1511e:	4947      	ldr	r1, [pc, #284]	; (1523c <bt_gatt_unsubscribe+0x128>)
   15120:	4847      	ldr	r0, [pc, #284]	; (15240 <bt_gatt_unsubscribe+0x12c>)
   15122:	f241 025c 	movw	r2, #4188	; 0x105c
   15126:	f005 fc5b 	bl	1a9e0 <printk>
   1512a:	f241 015c 	movw	r1, #4188	; 0x105c
   1512e:	4843      	ldr	r0, [pc, #268]	; (1523c <bt_gatt_unsubscribe+0x128>)
   15130:	f005 fefc 	bl	1af2c <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   15134:	b956      	cbnz	r6, 1514c <bt_gatt_unsubscribe+0x38>
   15136:	4941      	ldr	r1, [pc, #260]	; (1523c <bt_gatt_unsubscribe+0x128>)
   15138:	4841      	ldr	r0, [pc, #260]	; (15240 <bt_gatt_unsubscribe+0x12c>)
   1513a:	f241 025d 	movw	r2, #4189	; 0x105d
   1513e:	f005 fc4f 	bl	1a9e0 <printk>
   15142:	f241 015d 	movw	r1, #4189	; 0x105d
   15146:	483d      	ldr	r0, [pc, #244]	; (1523c <bt_gatt_unsubscribe+0x128>)
   15148:	f005 fef0 	bl	1af2c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1514c:	7abb      	ldrb	r3, [r7, #10]
   1514e:	2b07      	cmp	r3, #7
   15150:	d170      	bne.n	15234 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   15152:	4638      	mov	r0, r7
   15154:	f7fe f970 	bl	13438 <gatt_sub_find>
	if (!sub) {
   15158:	4680      	mov	r8, r0
   1515a:	b920      	cbnz	r0, 15166 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   1515c:	f06f 0015 	mvn.w	r0, #21
}
   15160:	b003      	add	sp, #12
   15162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   15166:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15168:	b1cc      	cbz	r4, 1519e <bt_gatt_unsubscribe+0x8a>
   1516a:	f1b4 0514 	subs.w	r5, r4, #20
   1516e:	d018      	beq.n	151a2 <bt_gatt_unsubscribe+0x8e>
	return node->next;
   15170:	6824      	ldr	r4, [r4, #0]
   15172:	b104      	cbz	r4, 15176 <bt_gatt_unsubscribe+0x62>
   15174:	3c14      	subs	r4, #20
   15176:	f04f 0900 	mov.w	r9, #0
   1517a:	464b      	mov	r3, r9
   1517c:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   1517e:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15182:	b985      	cbnz	r5, 151a6 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   15184:	2b00      	cmp	r3, #0
   15186:	d0e9      	beq.n	1515c <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   15188:	f1ba 0f00 	cmp.w	sl, #0
   1518c:	d047      	beq.n	1521e <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   1518e:	462b      	mov	r3, r5
   15190:	462a      	mov	r2, r5
   15192:	4631      	mov	r1, r6
   15194:	4638      	mov	r0, r7
   15196:	6834      	ldr	r4, [r6, #0]
   15198:	47a0      	blx	r4
		return 0;
   1519a:	4628      	mov	r0, r5
   1519c:	e7e0      	b.n	15160 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1519e:	4625      	mov	r5, r4
   151a0:	e7e9      	b.n	15176 <bt_gatt_unsubscribe+0x62>
   151a2:	462c      	mov	r4, r5
   151a4:	e7e7      	b.n	15176 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   151a6:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   151a8:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   151ac:	d12b      	bne.n	15206 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   151ae:	696b      	ldr	r3, [r5, #20]
   151b0:	f8d8 000c 	ldr.w	r0, [r8, #12]
   151b4:	f1b9 0f00 	cmp.w	r9, #0
   151b8:	d11e      	bne.n	151f8 <bt_gatt_unsubscribe+0xe4>
   151ba:	4281      	cmp	r1, r0
	list->head = node;
   151bc:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   151c0:	d101      	bne.n	151c6 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   151c2:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   151c6:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   151c8:	4658      	mov	r0, fp
   151ca:	616b      	str	r3, [r5, #20]
   151cc:	f007 fe46 	bl	1ce5c <atomic_get>
			if (atomic_test_bit(params->flags,
   151d0:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   151d2:	f3c0 0380 	ubfx	r3, r0, #2, #1
   151d6:	d51e      	bpl.n	15216 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   151d8:	4631      	mov	r1, r6
   151da:	4638      	mov	r0, r7
   151dc:	9301      	str	r3, [sp, #4]
   151de:	f7fe f88f 	bl	13300 <bt_att_req_cancel>
}
   151e2:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   151e4:	b1cc      	cbz	r4, 1521a <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   151e6:	f114 0114 	adds.w	r1, r4, #20
   151ea:	d002      	beq.n	151f2 <bt_gatt_unsubscribe+0xde>
	return node->next;
   151ec:	6961      	ldr	r1, [r4, #20]
   151ee:	b101      	cbz	r1, 151f2 <bt_gatt_unsubscribe+0xde>
   151f0:	3914      	subs	r1, #20
   151f2:	4625      	mov	r5, r4
   151f4:	460c      	mov	r4, r1
   151f6:	e7c4      	b.n	15182 <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   151f8:	4288      	cmp	r0, r1
	parent->next = child;
   151fa:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   151fe:	bf08      	it	eq
   15200:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   15204:	e7df      	b.n	151c6 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   15206:	892d      	ldrh	r5, [r5, #8]
   15208:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   1520a:	4689      	mov	r9, r1
   1520c:	4285      	cmp	r5, r0
   1520e:	bf08      	it	eq
   15210:	f04f 0a01 	moveq.w	sl, #1
   15214:	e7e6      	b.n	151e4 <bt_gatt_unsubscribe+0xd0>
			found = true;
   15216:	2301      	movs	r3, #1
   15218:	e7e4      	b.n	151e4 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1521a:	4621      	mov	r1, r4
   1521c:	e7e9      	b.n	151f2 <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   1521e:	4633      	mov	r3, r6
   15220:	4652      	mov	r2, sl
   15222:	4638      	mov	r0, r7
   15224:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   15226:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   1522a:	b003      	add	sp, #12
   1522c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   15230:	f7fe bd5c 	b.w	13cec <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   15234:	f06f 0038 	mvn.w	r0, #56	; 0x38
   15238:	e792      	b.n	15160 <bt_gatt_unsubscribe+0x4c>
   1523a:	bf00      	nop
   1523c:	00021ee6 	.word	0x00021ee6
   15240:	0001faab 	.word	0x0001faab

00015244 <bt_gatt_mult_notification>:
{
   15244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15248:	b085      	sub	sp, #20
   1524a:	4680      	mov	r8, r0
   1524c:	460c      	mov	r4, r1
   1524e:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   15250:	f7fe f8f2 	bl	13438 <gatt_sub_find>
	if (!sub) {
   15254:	4606      	mov	r6, r0
   15256:	b1d0      	cbz	r0, 1528e <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   15258:	464a      	mov	r2, r9
   1525a:	4621      	mov	r1, r4
   1525c:	a801      	add	r0, sp, #4
   1525e:	f008 f8ff 	bl	1d460 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   15262:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   15266:	2b04      	cmp	r3, #4
   15268:	d911      	bls.n	1528e <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1526a:	2104      	movs	r1, #4
   1526c:	eb0d 0001 	add.w	r0, sp, r1
   15270:	f000 fc38 	bl	15ae4 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   15274:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   15278:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1527c:	4605      	mov	r5, r0
		if (len > buf.len) {
   1527e:	4553      	cmp	r3, sl
   15280:	d208      	bcs.n	15294 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   15282:	464b      	mov	r3, r9
   15284:	4652      	mov	r2, sl
   15286:	2145      	movs	r1, #69	; 0x45
   15288:	4816      	ldr	r0, [pc, #88]	; (152e4 <bt_gatt_mult_notification+0xa0>)
   1528a:	f005 fba9 	bl	1a9e0 <printk>
}
   1528e:	b005      	add	sp, #20
   15290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   15294:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   15296:	b303      	cbz	r3, 152da <bt_gatt_mult_notification+0x96>
   15298:	f1b3 0714 	subs.w	r7, r3, #20
   1529c:	d01d      	beq.n	152da <bt_gatt_mult_notification+0x96>
	return node->next;
   1529e:	681c      	ldr	r4, [r3, #0]
   152a0:	b104      	cbz	r4, 152a4 <bt_gatt_mult_notification+0x60>
   152a2:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   152a4:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   152a8:	893b      	ldrh	r3, [r7, #8]
   152aa:	455b      	cmp	r3, fp
   152ac:	d10b      	bne.n	152c6 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   152ae:	4653      	mov	r3, sl
   152b0:	462a      	mov	r2, r5
   152b2:	4639      	mov	r1, r7
   152b4:	4640      	mov	r0, r8
   152b6:	f8d7 c000 	ldr.w	ip, [r7]
   152ba:	47e0      	blx	ip
   152bc:	b918      	cbnz	r0, 152c6 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   152be:	4639      	mov	r1, r7
   152c0:	4640      	mov	r0, r8
   152c2:	f7ff ff27 	bl	15114 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   152c6:	b144      	cbz	r4, 152da <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   152c8:	f114 0314 	adds.w	r3, r4, #20
   152cc:	d002      	beq.n	152d4 <bt_gatt_mult_notification+0x90>
	return node->next;
   152ce:	6963      	ldr	r3, [r4, #20]
   152d0:	b103      	cbz	r3, 152d4 <bt_gatt_mult_notification+0x90>
   152d2:	3b14      	subs	r3, #20
{
   152d4:	4627      	mov	r7, r4
   152d6:	461c      	mov	r4, r3
   152d8:	e7e6      	b.n	152a8 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   152da:	4651      	mov	r1, sl
   152dc:	a801      	add	r0, sp, #4
   152de:	f000 fc01 	bl	15ae4 <net_buf_simple_pull_mem>
   152e2:	e7be      	b.n	15262 <bt_gatt_mult_notification+0x1e>
   152e4:	00022023 	.word	0x00022023

000152e8 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   152e8:	2301      	movs	r3, #1
{
   152ea:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   152ec:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   152f0:	b08e      	sub	sp, #56	; 0x38
   152f2:	4605      	mov	r5, r0
	data.conn = conn;
   152f4:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   152f6:	4631      	mov	r1, r6
   152f8:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   152fa:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   152fe:	f006 ff60 	bl	1c1c2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   15302:	b190      	cbz	r0, 1532a <bt_gatt_connected+0x42>
		if (conn->id) {
   15304:	7a2a      	ldrb	r2, [r5, #8]
   15306:	b30a      	cbz	r2, 1534c <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   15308:	ac02      	add	r4, sp, #8
   1530a:	2104      	movs	r1, #4
   1530c:	4620      	mov	r0, r4
   1530e:	f005 facd 	bl	1a8ac <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   15312:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   15314:	2124      	movs	r1, #36	; 0x24
   15316:	4a19      	ldr	r2, [pc, #100]	; (1537c <bt_gatt_connected+0x94>)
   15318:	a805      	add	r0, sp, #20
   1531a:	4633      	mov	r3, r6
   1531c:	f7f9 fa4a 	bl	e7b4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   15320:	aa05      	add	r2, sp, #20
   15322:	4610      	mov	r0, r2
   15324:	4916      	ldr	r1, [pc, #88]	; (15380 <bt_gatt_connected+0x98>)
   15326:	f7f6 fd0d 	bl	bd44 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1532a:	2001      	movs	r0, #1
   1532c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15330:	4a14      	ldr	r2, [pc, #80]	; (15384 <bt_gatt_connected+0x9c>)
   15332:	ab03      	add	r3, sp, #12
   15334:	f007 ff74 	bl	1d220 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   15338:	4628      	mov	r0, r5
   1533a:	f7fe f87d 	bl	13438 <gatt_sub_find>
	if (!sub) {
   1533e:	b118      	cbz	r0, 15348 <bt_gatt_connected+0x60>
	return list->head;
   15340:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15342:	b10c      	cbz	r4, 15348 <bt_gatt_connected+0x60>
   15344:	3c14      	subs	r4, #20
   15346:	b91c      	cbnz	r4, 15350 <bt_gatt_connected+0x68>
}
   15348:	b00e      	add	sp, #56	; 0x38
   1534a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1534c:	9200      	str	r2, [sp, #0]
   1534e:	e7e1      	b.n	15314 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15350:	4631      	mov	r1, r6
   15352:	7a28      	ldrb	r0, [r5, #8]
   15354:	f006 ff35 	bl	1c1c2 <bt_addr_le_is_bonded>
   15358:	b158      	cbz	r0, 15372 <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1535a:	f104 0010 	add.w	r0, r4, #16
   1535e:	f007 fd7d 	bl	1ce5c <atomic_get>
   15362:	0783      	lsls	r3, r0, #30
   15364:	d405      	bmi.n	15372 <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   15366:	4623      	mov	r3, r4
   15368:	4628      	mov	r0, r5
   1536a:	89a2      	ldrh	r2, [r4, #12]
   1536c:	8961      	ldrh	r1, [r4, #10]
   1536e:	f7fe fcbd 	bl	13cec <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15372:	f114 0f14 	cmn.w	r4, #20
   15376:	d0e7      	beq.n	15348 <bt_gatt_connected+0x60>
	return node->next;
   15378:	6964      	ldr	r4, [r4, #20]
   1537a:	e7e2      	b.n	15342 <bt_gatt_connected+0x5a>
   1537c:	00021f55 	.word	0x00021f55
   15380:	000140e5 	.word	0x000140e5
   15384:	000144b5 	.word	0x000144b5

00015388 <db_hash_read>:
{
   15388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1538a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   1538c:	4810      	ldr	r0, [pc, #64]	; (153d0 <db_hash_read+0x48>)
{
   1538e:	4615      	mov	r5, r2
   15390:	461f      	mov	r7, r3
   15392:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   15396:	f004 fc1d 	bl	19bd4 <k_delayed_work_cancel>
	if (!err) {
   1539a:	b910      	cbnz	r0, 153a2 <db_hash_read+0x1a>
		db_hash_gen(true);
   1539c:	2001      	movs	r0, #1
   1539e:	f7fe fe11 	bl	13fc4 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   153a2:	2101      	movs	r1, #1
   153a4:	4620      	mov	r0, r4
   153a6:	f008 f803 	bl	1d3b0 <bt_gatt_change_aware>
	if (offset > value_len) {
   153aa:	2e10      	cmp	r6, #16
   153ac:	d80c      	bhi.n	153c8 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   153ae:	f1c6 0410 	rsb	r4, r6, #16
   153b2:	42bc      	cmp	r4, r7
   153b4:	bfa8      	it	ge
   153b6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   153b8:	4906      	ldr	r1, [pc, #24]	; (153d4 <db_hash_read+0x4c>)
   153ba:	4622      	mov	r2, r4
   153bc:	4628      	mov	r0, r5
   153be:	4431      	add	r1, r6
   153c0:	f006 fd38 	bl	1be34 <memcpy>
}
   153c4:	4620      	mov	r0, r4
   153c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   153c8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   153cc:	e7fa      	b.n	153c4 <db_hash_read+0x3c>
   153ce:	bf00      	nop
   153d0:	20009348 	.word	0x20009348
   153d4:	2000ea3b 	.word	0x2000ea3b

000153d8 <bt_gatt_store_ccc>:
	save.count = 0;
   153d8:	2300      	movs	r3, #0
{
   153da:	b570      	push	{r4, r5, r6, lr}
   153dc:	4604      	mov	r4, r0
   153de:	b0c0      	sub	sp, #256	; 0x100
   153e0:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   153e2:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   153e4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   153e8:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   153ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   153ee:	2001      	movs	r0, #1
   153f0:	4a13      	ldr	r2, [pc, #76]	; (15440 <bt_gatt_store_ccc+0x68>)
   153f2:	ab0d      	add	r3, sp, #52	; 0x34
   153f4:	f007 ff14 	bl	1d220 <bt_gatt_foreach_attr>
	if (id) {
   153f8:	b1ec      	cbz	r4, 15436 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   153fa:	ae03      	add	r6, sp, #12
   153fc:	4622      	mov	r2, r4
   153fe:	2104      	movs	r1, #4
   15400:	4630      	mov	r0, r6
   15402:	f005 fa53 	bl	1a8ac <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   15406:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   15408:	4a0e      	ldr	r2, [pc, #56]	; (15444 <bt_gatt_store_ccc+0x6c>)
   1540a:	462b      	mov	r3, r5
   1540c:	2124      	movs	r1, #36	; 0x24
   1540e:	a804      	add	r0, sp, #16
   15410:	f7f9 f9d0 	bl	e7b4 <bt_settings_encode_key>
	if (save.count) {
   15414:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   15416:	b182      	cbz	r2, 1543a <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   15418:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1541a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1541c:	a804      	add	r0, sp, #16
   1541e:	f7f6 fc45 	bl	bcac <settings_save_one>
	if (err) {
   15422:	4604      	mov	r4, r0
   15424:	b120      	cbz	r0, 15430 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   15426:	4602      	mov	r2, r0
   15428:	2145      	movs	r1, #69	; 0x45
   1542a:	4807      	ldr	r0, [pc, #28]	; (15448 <bt_gatt_store_ccc+0x70>)
   1542c:	f005 fad8 	bl	1a9e0 <printk>
}
   15430:	4620      	mov	r0, r4
   15432:	b040      	add	sp, #256	; 0x100
   15434:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   15436:	9400      	str	r4, [sp, #0]
   15438:	e7e6      	b.n	15408 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1543a:	4611      	mov	r1, r2
   1543c:	e7ee      	b.n	1541c <bt_gatt_store_ccc+0x44>
   1543e:	bf00      	nop
   15440:	00013979 	.word	0x00013979
   15444:	00021f55 	.word	0x00021f55
   15448:	00022041 	.word	0x00022041

0001544c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15450:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15452:	4603      	mov	r3, r0
   15454:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15458:	2001      	movs	r0, #1
{
   1545a:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1545c:	4a52      	ldr	r2, [pc, #328]	; (155a8 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1545e:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15462:	f007 fedd 	bl	1d220 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15466:	4629      	mov	r1, r5
   15468:	7a20      	ldrb	r0, [r4, #8]
   1546a:	f006 feaa 	bl	1c1c2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1546e:	b378      	cbz	r0, 154d0 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   15470:	4629      	mov	r1, r5
   15472:	7a20      	ldrb	r0, [r4, #8]
   15474:	f7ff ffb0 	bl	153d8 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   15478:	4620      	mov	r0, r4
   1547a:	f7fd ff9f 	bl	133bc <find_cf_cfg>
	if (!cfg) {
   1547e:	4606      	mov	r6, r0
   15480:	2800      	cmp	r0, #0
   15482:	d05e      	beq.n	15542 <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   15484:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   15486:	3608      	adds	r6, #8
		if (conn->id) {
   15488:	2a00      	cmp	r2, #0
   1548a:	d05c      	beq.n	15546 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1548c:	af02      	add	r7, sp, #8
   1548e:	2104      	movs	r1, #4
   15490:	4638      	mov	r0, r7
   15492:	f005 fa0b 	bl	1a8ac <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   15496:	462b      	mov	r3, r5
   15498:	9700      	str	r7, [sp, #0]
   1549a:	2124      	movs	r1, #36	; 0x24
   1549c:	4a43      	ldr	r2, [pc, #268]	; (155ac <bt_gatt_disconnected+0x160>)
   1549e:	a803      	add	r0, sp, #12
   154a0:	f7f9 f988 	bl	e7b4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   154a4:	7a23      	ldrb	r3, [r4, #8]
   154a6:	2701      	movs	r7, #1
   154a8:	b93b      	cbnz	r3, 154ba <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   154aa:	2300      	movs	r3, #0
   154ac:	2124      	movs	r1, #36	; 0x24
   154ae:	9300      	str	r3, [sp, #0]
   154b0:	4a3e      	ldr	r2, [pc, #248]	; (155ac <bt_gatt_disconnected+0x160>)
   154b2:	462b      	mov	r3, r5
   154b4:	a803      	add	r0, sp, #12
   154b6:	f7f9 f97d 	bl	e7b4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   154ba:	463a      	mov	r2, r7
   154bc:	4631      	mov	r1, r6
   154be:	a803      	add	r0, sp, #12
   154c0:	f7f6 fbf4 	bl	bcac <settings_save_one>
	if (err) {
   154c4:	4602      	mov	r2, r0
   154c6:	b118      	cbz	r0, 154d0 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   154c8:	2145      	movs	r1, #69	; 0x45
   154ca:	4839      	ldr	r0, [pc, #228]	; (155b0 <bt_gatt_disconnected+0x164>)
   154cc:	f005 fa88 	bl	1a9e0 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   154d0:	4629      	mov	r1, r5
   154d2:	7a20      	ldrb	r0, [r4, #8]
   154d4:	f006 fe75 	bl	1c1c2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   154d8:	b150      	cbz	r0, 154f0 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   154da:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   154dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   154e0:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   154e4:	2001      	movs	r0, #1
   154e6:	4a33      	ldr	r2, [pc, #204]	; (155b4 <bt_gatt_disconnected+0x168>)
   154e8:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   154ea:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   154ec:	f007 fe98 	bl	1d220 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   154f0:	4620      	mov	r0, r4
   154f2:	f7fd ffa1 	bl	13438 <gatt_sub_find>
	if (!sub) {
   154f6:	4607      	mov	r7, r0
   154f8:	b3b0      	cbz	r0, 15568 <bt_gatt_disconnected+0x11c>
	return list->head;
   154fa:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   154fc:	b3a3      	cbz	r3, 15568 <bt_gatt_disconnected+0x11c>
   154fe:	f1b3 0b14 	subs.w	fp, r3, #20
   15502:	d031      	beq.n	15568 <bt_gatt_disconnected+0x11c>
	return node->next;
   15504:	681e      	ldr	r6, [r3, #0]
   15506:	b106      	cbz	r6, 1550a <bt_gatt_disconnected+0xbe>
   15508:	3e14      	subs	r6, #20
   1550a:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   1550e:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15510:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15514:	4629      	mov	r1, r5
   15516:	7a20      	ldrb	r0, [r4, #8]
   15518:	f006 fe53 	bl	1c1c2 <bt_addr_le_is_bonded>
   1551c:	b9a8      	cbnz	r0, 1554a <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   1551e:	465b      	mov	r3, fp
   15520:	4642      	mov	r2, r8
   15522:	4639      	mov	r1, r7
   15524:	4620      	mov	r0, r4
			params->value = 0U;
   15526:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1552a:	f007 fcda 	bl	1cee2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1552e:	b1de      	cbz	r6, 15568 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15530:	f116 0214 	adds.w	r2, r6, #20
   15534:	d002      	beq.n	1553c <bt_gatt_disconnected+0xf0>
	return node->next;
   15536:	6972      	ldr	r2, [r6, #20]
   15538:	b102      	cbz	r2, 1553c <bt_gatt_disconnected+0xf0>
   1553a:	3a14      	subs	r2, #20
   1553c:	46b3      	mov	fp, r6
   1553e:	4616      	mov	r6, r2
   15540:	e7e8      	b.n	15514 <bt_gatt_disconnected+0xc8>
		len = 0;
   15542:	4607      	mov	r7, r0
   15544:	e7b1      	b.n	154aa <bt_gatt_disconnected+0x5e>
   15546:	2701      	movs	r7, #1
   15548:	e7af      	b.n	154aa <bt_gatt_disconnected+0x5e>
   1554a:	f10b 0010 	add.w	r0, fp, #16
   1554e:	f007 fc85 	bl	1ce5c <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15552:	07c3      	lsls	r3, r0, #31
   15554:	d4e3      	bmi.n	1551e <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   15556:	787b      	ldrb	r3, [r7, #1]
   15558:	b11b      	cbz	r3, 15562 <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1555a:	4629      	mov	r1, r5
   1555c:	4648      	mov	r0, r9
   1555e:	f007 fc61 	bl	1ce24 <bt_addr_le_copy>
			prev = &params->node;
   15562:	f10b 0814 	add.w	r8, fp, #20
   15566:	e7e2      	b.n	1552e <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   15568:	4620      	mov	r0, r4
   1556a:	f7fd ff27 	bl	133bc <find_cf_cfg>
	if (!cfg) {
   1556e:	4606      	mov	r6, r0
   15570:	b1b8      	cbz	r0, 155a2 <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15572:	4629      	mov	r1, r5
   15574:	7a20      	ldrb	r0, [r4, #8]
   15576:	f006 fe24 	bl	1c1c2 <bt_addr_le_is_bonded>
   1557a:	b928      	cbnz	r0, 15588 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   1557c:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1557e:	b00d      	add	sp, #52	; 0x34
   15580:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15584:	f007 bc94 	b.w	1ceb0 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15588:	1c70      	adds	r0, r6, #1
   1558a:	4629      	mov	r1, r5
   1558c:	f007 fc4a 	bl	1ce24 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15590:	360c      	adds	r6, #12
   15592:	e8d6 3fef 	ldaex	r3, [r6]
   15596:	f023 0302 	bic.w	r3, r3, #2
   1559a:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1559e:	2a00      	cmp	r2, #0
   155a0:	d1f7      	bne.n	15592 <bt_gatt_disconnected+0x146>
}
   155a2:	b00d      	add	sp, #52	; 0x34
   155a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155a8:	00013c11 	.word	0x00013c11
   155ac:	00022095 	.word	0x00022095
   155b0:	00022064 	.word	0x00022064
   155b4:	000138c5 	.word	0x000138c5

000155b8 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   155b8:	b570      	push	{r4, r5, r6, lr}
   155ba:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   155bc:	2400      	movs	r4, #0
   155be:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   155c0:	4b09      	ldr	r3, [pc, #36]	; (155e8 <bt_smp_accept+0x30>)
   155c2:	fb06 f504 	mul.w	r5, r6, r4
   155c6:	58e8      	ldr	r0, [r5, r3]
   155c8:	b148      	cbz	r0, 155de <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   155ca:	3401      	adds	r4, #1
   155cc:	2c05      	cmp	r4, #5
   155ce:	d1f8      	bne.n	155c2 <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   155d0:	4806      	ldr	r0, [pc, #24]	; (155ec <bt_smp_accept+0x34>)
   155d2:	2145      	movs	r1, #69	; 0x45
   155d4:	f005 fa04 	bl	1a9e0 <printk>
   155d8:	f06f 000b 	mvn.w	r0, #11
   155dc:	e003      	b.n	155e6 <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   155de:	4a04      	ldr	r2, [pc, #16]	; (155f0 <bt_smp_accept+0x38>)
   155e0:	442b      	add	r3, r5
   155e2:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   155e4:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   155e6:	bd70      	pop	{r4, r5, r6, pc}
   155e8:	200093d0 	.word	0x200093d0
   155ec:	000220a6 	.word	0x000220a6
   155f0:	0001edf8 	.word	0x0001edf8

000155f4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   155f4:	222c      	movs	r2, #44	; 0x2c
   155f6:	4b02      	ldr	r3, [pc, #8]	; (15600 <net_buf_pool_get+0xc>)
   155f8:	fb02 3000 	mla	r0, r2, r0, r3
   155fc:	4770      	bx	lr
   155fe:	bf00      	nop
   15600:	20008580 	.word	0x20008580

00015604 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   15604:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15606:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   15608:	4b04      	ldr	r3, [pc, #16]	; (1561c <net_buf_id+0x18>)
   1560a:	fb01 3302 	mla	r3, r1, r2, r3
   1560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15610:	1ac0      	subs	r0, r0, r3
}
   15612:	4b03      	ldr	r3, [pc, #12]	; (15620 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   15614:	10c0      	asrs	r0, r0, #3
}
   15616:	4358      	muls	r0, r3
   15618:	4770      	bx	lr
   1561a:	bf00      	nop
   1561c:	20008580 	.word	0x20008580
   15620:	aaaaaaab 	.word	0xaaaaaaab

00015624 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   15624:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15626:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15628:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1562a:	4b09      	ldr	r3, [pc, #36]	; (15650 <fixed_data_alloc+0x2c>)
   1562c:	fb04 3302 	mla	r3, r4, r2, r3
   15630:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   15632:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15634:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   15636:	6823      	ldr	r3, [r4, #0]
   15638:	429a      	cmp	r2, r3
   1563a:	bf94      	ite	ls
   1563c:	600a      	strls	r2, [r1, #0]
   1563e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15640:	f7ff ffe0 	bl	15604 <net_buf_id>
   15644:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   15648:	fb02 3000 	mla	r0, r2, r0, r3
   1564c:	bd10      	pop	{r4, pc}
   1564e:	bf00      	nop
   15650:	20008580 	.word	0x20008580

00015654 <net_buf_reset>:
{
   15654:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   15656:	7943      	ldrb	r3, [r0, #5]
{
   15658:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1565a:	b143      	cbz	r3, 1566e <net_buf_reset+0x1a>
   1565c:	490c      	ldr	r1, [pc, #48]	; (15690 <net_buf_reset+0x3c>)
   1565e:	480d      	ldr	r0, [pc, #52]	; (15694 <net_buf_reset+0x40>)
   15660:	224f      	movs	r2, #79	; 0x4f
   15662:	f005 f9bd 	bl	1a9e0 <printk>
   15666:	214f      	movs	r1, #79	; 0x4f
   15668:	4809      	ldr	r0, [pc, #36]	; (15690 <net_buf_reset+0x3c>)
   1566a:	f005 fc5f 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1566e:	6823      	ldr	r3, [r4, #0]
   15670:	b143      	cbz	r3, 15684 <net_buf_reset+0x30>
   15672:	4907      	ldr	r1, [pc, #28]	; (15690 <net_buf_reset+0x3c>)
   15674:	4807      	ldr	r0, [pc, #28]	; (15694 <net_buf_reset+0x40>)
   15676:	2250      	movs	r2, #80	; 0x50
   15678:	f005 f9b2 	bl	1a9e0 <printk>
   1567c:	2150      	movs	r1, #80	; 0x50
   1567e:	4804      	ldr	r0, [pc, #16]	; (15690 <net_buf_reset+0x3c>)
   15680:	f005 fc54 	bl	1af2c <assert_post_action>
	buf->len  = 0U;
   15684:	2300      	movs	r3, #0
   15686:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   15688:	6923      	ldr	r3, [r4, #16]
   1568a:	60a3      	str	r3, [r4, #8]
}
   1568c:	bd10      	pop	{r4, pc}
   1568e:	bf00      	nop
   15690:	000220d7 	.word	0x000220d7
   15694:	0001faab 	.word	0x0001faab

00015698 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1569c:	4605      	mov	r5, r0
   1569e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   156a0:	4610      	mov	r0, r2
   156a2:	4619      	mov	r1, r3
{
   156a4:	4691      	mov	r9, r2
   156a6:	4698      	mov	r8, r3
   156a8:	4617      	mov	r7, r2
   156aa:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   156ac:	f008 fd24 	bl	1e0f8 <z_timeout_end_calc>
   156b0:	4682      	mov	sl, r0
   156b2:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   156b4:	b945      	cbnz	r5, 156c8 <net_buf_alloc_len+0x30>
   156b6:	494a      	ldr	r1, [pc, #296]	; (157e0 <net_buf_alloc_len+0x148>)
   156b8:	484a      	ldr	r0, [pc, #296]	; (157e4 <net_buf_alloc_len+0x14c>)
   156ba:	22ed      	movs	r2, #237	; 0xed
   156bc:	f005 f990 	bl	1a9e0 <printk>
   156c0:	21ed      	movs	r1, #237	; 0xed
   156c2:	4847      	ldr	r0, [pc, #284]	; (157e0 <net_buf_alloc_len+0x148>)
   156c4:	f005 fc32 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   156c8:	f04f 0320 	mov.w	r3, #32
   156cc:	f3ef 8111 	mrs	r1, BASEPRI
   156d0:	f383 8811 	msr	BASEPRI, r3
   156d4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   156d8:	8beb      	ldrh	r3, [r5, #30]
   156da:	2b00      	cmp	r3, #0
   156dc:	d055      	beq.n	1578a <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   156de:	8baa      	ldrh	r2, [r5, #28]
   156e0:	429a      	cmp	r2, r3
   156e2:	d93e      	bls.n	15762 <net_buf_alloc_len+0xca>
   156e4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   156e6:	2200      	movs	r2, #0
   156e8:	2300      	movs	r3, #0
   156ea:	4628      	mov	r0, r5
   156ec:	f002 ff34 	bl	18558 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   156f0:	9900      	ldr	r1, [sp, #0]
   156f2:	4604      	mov	r4, r0
   156f4:	2800      	cmp	r0, #0
   156f6:	d034      	beq.n	15762 <net_buf_alloc_len+0xca>
	__asm__ volatile(
   156f8:	f381 8811 	msr	BASEPRI, r1
   156fc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   15700:	9d01      	ldr	r5, [sp, #4]
   15702:	2d00      	cmp	r5, #0
   15704:	d069      	beq.n	157da <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15706:	ea58 0309 	orrs.w	r3, r8, r9
   1570a:	d00f      	beq.n	1572c <net_buf_alloc_len+0x94>
   1570c:	f1b8 3fff 	cmp.w	r8, #4294967295
   15710:	bf08      	it	eq
   15712:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   15716:	d009      	beq.n	1572c <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   15718:	f004 fd08 	bl	1a12c <z_tick_get>
   1571c:	ebba 0700 	subs.w	r7, sl, r0
   15720:	eb6b 0601 	sbc.w	r6, fp, r1
   15724:	2e00      	cmp	r6, #0
   15726:	bfbc      	itt	lt
   15728:	2700      	movlt	r7, #0
   1572a:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   1572c:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15730:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   15732:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 157e8 <net_buf_alloc_len+0x150>
   15736:	463a      	mov	r2, r7
   15738:	fb09 8303 	mla	r3, r9, r3, r8
   1573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1573e:	4620      	mov	r0, r4
   15740:	681b      	ldr	r3, [r3, #0]
   15742:	a901      	add	r1, sp, #4
   15744:	f8d3 a000 	ldr.w	sl, [r3]
   15748:	4633      	mov	r3, r6
   1574a:	47d0      	blx	sl
   1574c:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1574e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   15750:	bb58      	cbnz	r0, 157aa <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   15752:	79a0      	ldrb	r0, [r4, #6]
   15754:	4621      	mov	r1, r4
   15756:	fb00 8009 	mla	r0, r0, r9, r8
   1575a:	f008 fc02 	bl	1df62 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1575e:	4634      	mov	r4, r6
}
   15760:	e01f      	b.n	157a2 <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   15762:	8beb      	ldrh	r3, [r5, #30]
   15764:	1e5a      	subs	r2, r3, #1
   15766:	83ea      	strh	r2, [r5, #30]
   15768:	f381 8811 	msr	BASEPRI, r1
   1576c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   15770:	2018      	movs	r0, #24
   15772:	8bac      	ldrh	r4, [r5, #28]
   15774:	1ae3      	subs	r3, r4, r3
   15776:	6aac      	ldr	r4, [r5, #40]	; 0x28
   15778:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1577c:	481a      	ldr	r0, [pc, #104]	; (157e8 <net_buf_alloc_len+0x150>)
   1577e:	4b1b      	ldr	r3, [pc, #108]	; (157ec <net_buf_alloc_len+0x154>)
   15780:	1a2d      	subs	r5, r5, r0
   15782:	10ad      	asrs	r5, r5, #2
   15784:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   15786:	71a5      	strb	r5, [r4, #6]
		goto success;
   15788:	e7ba      	b.n	15700 <net_buf_alloc_len+0x68>
   1578a:	f381 8811 	msr	BASEPRI, r1
   1578e:	f3bf 8f6f 	isb	sy
   15792:	464a      	mov	r2, r9
   15794:	4643      	mov	r3, r8
   15796:	4628      	mov	r0, r5
   15798:	f002 fede 	bl	18558 <z_impl_k_queue_get>
	if (!buf) {
   1579c:	4604      	mov	r4, r0
   1579e:	2800      	cmp	r0, #0
   157a0:	d1ae      	bne.n	15700 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   157a2:	4620      	mov	r0, r4
   157a4:	b003      	add	sp, #12
   157a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   157aa:	9b01      	ldr	r3, [sp, #4]
   157ac:	429d      	cmp	r5, r3
   157ae:	d90a      	bls.n	157c6 <net_buf_alloc_len+0x12e>
   157b0:	490b      	ldr	r1, [pc, #44]	; (157e0 <net_buf_alloc_len+0x148>)
   157b2:	480c      	ldr	r0, [pc, #48]	; (157e4 <net_buf_alloc_len+0x14c>)
   157b4:	f240 124d 	movw	r2, #333	; 0x14d
   157b8:	f005 f912 	bl	1a9e0 <printk>
   157bc:	f240 114d 	movw	r1, #333	; 0x14d
   157c0:	4807      	ldr	r0, [pc, #28]	; (157e0 <net_buf_alloc_len+0x148>)
   157c2:	f005 fbb3 	bl	1af2c <assert_post_action>
	buf->frags = NULL;
   157c6:	2300      	movs	r3, #0
   157c8:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   157ca:	2301      	movs	r3, #1
   157cc:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   157ce:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   157d0:	4620      	mov	r0, r4
	buf->size  = size;
   157d2:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   157d4:	f7ff ff3e 	bl	15654 <net_buf_reset>
	return buf;
   157d8:	e7e3      	b.n	157a2 <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   157da:	6125      	str	r5, [r4, #16]
   157dc:	e7f3      	b.n	157c6 <net_buf_alloc_len+0x12e>
   157de:	bf00      	nop
   157e0:	000220d7 	.word	0x000220d7
   157e4:	0001faab 	.word	0x0001faab
   157e8:	20008580 	.word	0x20008580
   157ec:	ba2e8ba3 	.word	0xba2e8ba3

000157f0 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   157f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157f4:	4606      	mov	r6, r0
   157f6:	f002 feaf 	bl	18558 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   157fa:	4605      	mov	r5, r0
   157fc:	b140      	cbz	r0, 15810 <net_buf_get+0x20>
   157fe:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   15800:	4f11      	ldr	r7, [pc, #68]	; (15848 <net_buf_get+0x58>)
   15802:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1584c <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   15806:	7963      	ldrb	r3, [r4, #5]
   15808:	f013 0301 	ands.w	r3, r3, #1
   1580c:	d103      	bne.n	15816 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1580e:	6023      	str	r3, [r4, #0]

	return buf;
}
   15810:	4628      	mov	r0, r5
   15812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15816:	2200      	movs	r2, #0
   15818:	2300      	movs	r3, #0
   1581a:	4630      	mov	r0, r6
   1581c:	f002 fe9c 	bl	18558 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   15820:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   15822:	b950      	cbnz	r0, 1583a <net_buf_get+0x4a>
   15824:	4639      	mov	r1, r7
   15826:	4640      	mov	r0, r8
   15828:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1582c:	f005 f8d8 	bl	1a9e0 <printk>
   15830:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   15834:	4638      	mov	r0, r7
   15836:	f005 fb79 	bl	1af2c <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1583a:	7963      	ldrb	r3, [r4, #5]
   1583c:	f023 0301 	bic.w	r3, r3, #1
   15840:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   15842:	6824      	ldr	r4, [r4, #0]
   15844:	e7df      	b.n	15806 <net_buf_get+0x16>
   15846:	bf00      	nop
   15848:	000220d7 	.word	0x000220d7
   1584c:	0001faab 	.word	0x0001faab

00015850 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   15850:	b538      	push	{r3, r4, r5, lr}
   15852:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   15854:	4604      	mov	r4, r0
   15856:	b950      	cbnz	r0, 1586e <net_buf_simple_reserve+0x1e>
   15858:	490d      	ldr	r1, [pc, #52]	; (15890 <net_buf_simple_reserve+0x40>)
   1585a:	480e      	ldr	r0, [pc, #56]	; (15894 <net_buf_simple_reserve+0x44>)
   1585c:	f240 12bb 	movw	r2, #443	; 0x1bb
   15860:	f005 f8be 	bl	1a9e0 <printk>
   15864:	f240 11bb 	movw	r1, #443	; 0x1bb
   15868:	4809      	ldr	r0, [pc, #36]	; (15890 <net_buf_simple_reserve+0x40>)
   1586a:	f005 fb5f 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1586e:	88a3      	ldrh	r3, [r4, #4]
   15870:	b153      	cbz	r3, 15888 <net_buf_simple_reserve+0x38>
   15872:	4907      	ldr	r1, [pc, #28]	; (15890 <net_buf_simple_reserve+0x40>)
   15874:	4807      	ldr	r0, [pc, #28]	; (15894 <net_buf_simple_reserve+0x44>)
   15876:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1587a:	f005 f8b1 	bl	1a9e0 <printk>
   1587e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   15882:	4803      	ldr	r0, [pc, #12]	; (15890 <net_buf_simple_reserve+0x40>)
   15884:	f005 fb52 	bl	1af2c <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   15888:	68a3      	ldr	r3, [r4, #8]
   1588a:	442b      	add	r3, r5
   1588c:	6023      	str	r3, [r4, #0]
}
   1588e:	bd38      	pop	{r3, r4, r5, pc}
   15890:	000220d7 	.word	0x000220d7
   15894:	0001faab 	.word	0x0001faab

00015898 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   15898:	b538      	push	{r3, r4, r5, lr}
   1589a:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1589c:	4605      	mov	r5, r0
   1589e:	b950      	cbnz	r0, 158b6 <net_buf_put+0x1e>
   158a0:	4912      	ldr	r1, [pc, #72]	; (158ec <net_buf_put+0x54>)
   158a2:	4813      	ldr	r0, [pc, #76]	; (158f0 <net_buf_put+0x58>)
   158a4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   158a8:	f005 f89a 	bl	1a9e0 <printk>
   158ac:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   158b0:	480e      	ldr	r0, [pc, #56]	; (158ec <net_buf_put+0x54>)
   158b2:	f005 fb3b 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   158b6:	b954      	cbnz	r4, 158ce <net_buf_put+0x36>
   158b8:	490c      	ldr	r1, [pc, #48]	; (158ec <net_buf_put+0x54>)
   158ba:	480d      	ldr	r0, [pc, #52]	; (158f0 <net_buf_put+0x58>)
   158bc:	f240 12f9 	movw	r2, #505	; 0x1f9
   158c0:	f005 f88e 	bl	1a9e0 <printk>
   158c4:	f240 11f9 	movw	r1, #505	; 0x1f9
   158c8:	4808      	ldr	r0, [pc, #32]	; (158ec <net_buf_put+0x54>)
   158ca:	f005 fb2f 	bl	1af2c <assert_post_action>
{
   158ce:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   158d0:	6811      	ldr	r1, [r2, #0]
   158d2:	b929      	cbnz	r1, 158e0 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   158d4:	4621      	mov	r1, r4
   158d6:	4628      	mov	r0, r5
}
   158d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   158dc:	f002 bde8 	b.w	184b0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   158e0:	7953      	ldrb	r3, [r2, #5]
   158e2:	f043 0301 	orr.w	r3, r3, #1
   158e6:	7153      	strb	r3, [r2, #5]
   158e8:	460a      	mov	r2, r1
   158ea:	e7f1      	b.n	158d0 <net_buf_put+0x38>
   158ec:	000220d7 	.word	0x000220d7
   158f0:	0001faab 	.word	0x0001faab

000158f4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   158f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   158f8:	4605      	mov	r5, r0
   158fa:	b328      	cbz	r0, 15948 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   158fc:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   158fe:	f04f 082c 	mov.w	r8, #44	; 0x2c
   15902:	4e1b      	ldr	r6, [pc, #108]	; (15970 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   15904:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   15906:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   15908:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1590a:	3b01      	subs	r3, #1
   1590c:	b2db      	uxtb	r3, r3
   1590e:	7123      	strb	r3, [r4, #4]
   15910:	b9c3      	cbnz	r3, 15944 <net_buf_unref+0x50>
		if (buf->__buf) {
   15912:	6921      	ldr	r1, [r4, #16]
   15914:	b159      	cbz	r1, 1592e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   15916:	7963      	ldrb	r3, [r4, #5]
   15918:	079b      	lsls	r3, r3, #30
   1591a:	d407      	bmi.n	1592c <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1591c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1591e:	4620      	mov	r0, r4
   15920:	fb08 6303 	mla	r3, r8, r3, r6
   15924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15926:	681b      	ldr	r3, [r3, #0]
   15928:	689b      	ldr	r3, [r3, #8]
   1592a:	4798      	blx	r3
			buf->__buf = NULL;
   1592c:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1592e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   15930:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   15932:	fb08 6300 	mla	r3, r8, r0, r6
   15936:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   15938:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1593a:	b193      	cbz	r3, 15962 <net_buf_unref+0x6e>
			pool->destroy(buf);
   1593c:	4620      	mov	r0, r4
   1593e:	4798      	blx	r3
	while (buf) {
   15940:	2d00      	cmp	r5, #0
   15942:	d1df      	bne.n	15904 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   15944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   15948:	490a      	ldr	r1, [pc, #40]	; (15974 <net_buf_unref+0x80>)
   1594a:	480b      	ldr	r0, [pc, #44]	; (15978 <net_buf_unref+0x84>)
   1594c:	f44f 7202 	mov.w	r2, #520	; 0x208
   15950:	f005 f846 	bl	1a9e0 <printk>
}
   15954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   15958:	f44f 7102 	mov.w	r1, #520	; 0x208
   1595c:	4805      	ldr	r0, [pc, #20]	; (15974 <net_buf_unref+0x80>)
   1595e:	f005 bae5 	b.w	1af2c <assert_post_action>
	k_lifo_put(&pool->free, buf);
   15962:	4621      	mov	r1, r4
   15964:	fb00 6008 	mla	r0, r0, r8, r6
   15968:	f008 fafb 	bl	1df62 <k_queue_prepend>
}
   1596c:	e7e8      	b.n	15940 <net_buf_unref+0x4c>
   1596e:	bf00      	nop
   15970:	20008580 	.word	0x20008580
   15974:	000220d7 	.word	0x000220d7
   15978:	0001faab 	.word	0x0001faab

0001597c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1597c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1597e:	4604      	mov	r4, r0
   15980:	b950      	cbnz	r0, 15998 <net_buf_ref+0x1c>
   15982:	4908      	ldr	r1, [pc, #32]	; (159a4 <net_buf_ref+0x28>)
   15984:	4808      	ldr	r0, [pc, #32]	; (159a8 <net_buf_ref+0x2c>)
   15986:	f240 2237 	movw	r2, #567	; 0x237
   1598a:	f005 f829 	bl	1a9e0 <printk>
   1598e:	f240 2137 	movw	r1, #567	; 0x237
   15992:	4804      	ldr	r0, [pc, #16]	; (159a4 <net_buf_ref+0x28>)
   15994:	f005 faca 	bl	1af2c <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   15998:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   1599a:	4620      	mov	r0, r4
	buf->ref++;
   1599c:	3301      	adds	r3, #1
   1599e:	7123      	strb	r3, [r4, #4]
}
   159a0:	bd10      	pop	{r4, pc}
   159a2:	bf00      	nop
   159a4:	000220d7 	.word	0x000220d7
   159a8:	0001faab 	.word	0x0001faab

000159ac <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   159ac:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   159ae:	4604      	mov	r4, r0
   159b0:	b950      	cbnz	r0, 159c8 <net_buf_frag_last+0x1c>
   159b2:	4908      	ldr	r1, [pc, #32]	; (159d4 <net_buf_frag_last+0x28>)
   159b4:	4808      	ldr	r0, [pc, #32]	; (159d8 <net_buf_frag_last+0x2c>)
   159b6:	f44f 721d 	mov.w	r2, #628	; 0x274
   159ba:	f005 f811 	bl	1a9e0 <printk>
   159be:	f44f 711d 	mov.w	r1, #628	; 0x274
   159c2:	4804      	ldr	r0, [pc, #16]	; (159d4 <net_buf_frag_last+0x28>)
   159c4:	f005 fab2 	bl	1af2c <assert_post_action>

	while (buf->frags) {
   159c8:	4620      	mov	r0, r4
   159ca:	6824      	ldr	r4, [r4, #0]
   159cc:	2c00      	cmp	r4, #0
   159ce:	d1fb      	bne.n	159c8 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   159d0:	bd10      	pop	{r4, pc}
   159d2:	bf00      	nop
   159d4:	000220d7 	.word	0x000220d7
   159d8:	0001faab 	.word	0x0001faab

000159dc <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   159dc:	b538      	push	{r3, r4, r5, lr}
   159de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   159e0:	4604      	mov	r4, r0
   159e2:	b950      	cbnz	r0, 159fa <net_buf_frag_insert+0x1e>
   159e4:	490f      	ldr	r1, [pc, #60]	; (15a24 <net_buf_frag_insert+0x48>)
   159e6:	4810      	ldr	r0, [pc, #64]	; (15a28 <net_buf_frag_insert+0x4c>)
   159e8:	f240 227f 	movw	r2, #639	; 0x27f
   159ec:	f004 fff8 	bl	1a9e0 <printk>
   159f0:	f240 217f 	movw	r1, #639	; 0x27f
   159f4:	480b      	ldr	r0, [pc, #44]	; (15a24 <net_buf_frag_insert+0x48>)
   159f6:	f005 fa99 	bl	1af2c <assert_post_action>
	__ASSERT_NO_MSG(frag);
   159fa:	b955      	cbnz	r5, 15a12 <net_buf_frag_insert+0x36>
   159fc:	4909      	ldr	r1, [pc, #36]	; (15a24 <net_buf_frag_insert+0x48>)
   159fe:	480a      	ldr	r0, [pc, #40]	; (15a28 <net_buf_frag_insert+0x4c>)
   15a00:	f44f 7220 	mov.w	r2, #640	; 0x280
   15a04:	f004 ffec 	bl	1a9e0 <printk>
   15a08:	f44f 7120 	mov.w	r1, #640	; 0x280
   15a0c:	4805      	ldr	r0, [pc, #20]	; (15a24 <net_buf_frag_insert+0x48>)
   15a0e:	f005 fa8d 	bl	1af2c <assert_post_action>

	if (parent->frags) {
   15a12:	6823      	ldr	r3, [r4, #0]
   15a14:	b123      	cbz	r3, 15a20 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   15a16:	4628      	mov	r0, r5
   15a18:	f7ff ffc8 	bl	159ac <net_buf_frag_last>
   15a1c:	6823      	ldr	r3, [r4, #0]
   15a1e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   15a20:	6025      	str	r5, [r4, #0]
}
   15a22:	bd38      	pop	{r3, r4, r5, pc}
   15a24:	000220d7 	.word	0x000220d7
   15a28:	0001faab 	.word	0x0001faab

00015a2c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   15a2c:	b538      	push	{r3, r4, r5, lr}
   15a2e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   15a30:	460d      	mov	r5, r1
   15a32:	b951      	cbnz	r1, 15a4a <net_buf_frag_add+0x1e>
   15a34:	490c      	ldr	r1, [pc, #48]	; (15a68 <net_buf_frag_add+0x3c>)
   15a36:	480d      	ldr	r0, [pc, #52]	; (15a6c <net_buf_frag_add+0x40>)
   15a38:	f240 228b 	movw	r2, #651	; 0x28b
   15a3c:	f004 ffd0 	bl	1a9e0 <printk>
   15a40:	f240 218b 	movw	r1, #651	; 0x28b
   15a44:	4808      	ldr	r0, [pc, #32]	; (15a68 <net_buf_frag_add+0x3c>)
   15a46:	f005 fa71 	bl	1af2c <assert_post_action>

	if (!head) {
   15a4a:	b924      	cbnz	r4, 15a56 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   15a4c:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   15a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   15a52:	f7ff bf93 	b.w	1597c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   15a56:	4620      	mov	r0, r4
   15a58:	f7ff ffa8 	bl	159ac <net_buf_frag_last>
   15a5c:	4629      	mov	r1, r5
   15a5e:	f7ff ffbd 	bl	159dc <net_buf_frag_insert>
}
   15a62:	4620      	mov	r0, r4
   15a64:	bd38      	pop	{r3, r4, r5, pc}
   15a66:	bf00      	nop
   15a68:	000220d7 	.word	0x000220d7
   15a6c:	0001faab 	.word	0x0001faab

00015a70 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   15a70:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   15a72:	6882      	ldr	r2, [r0, #8]
   15a74:	6803      	ldr	r3, [r0, #0]
{
   15a76:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   15a78:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   15a7a:	4299      	cmp	r1, r3
{
   15a7c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   15a7e:	d90a      	bls.n	15a96 <net_buf_simple_push+0x26>
   15a80:	4908      	ldr	r1, [pc, #32]	; (15aa4 <net_buf_simple_push+0x34>)
   15a82:	4809      	ldr	r0, [pc, #36]	; (15aa8 <net_buf_simple_push+0x38>)
   15a84:	f240 4204 	movw	r2, #1028	; 0x404
   15a88:	f004 ffaa 	bl	1a9e0 <printk>
   15a8c:	f240 4104 	movw	r1, #1028	; 0x404
   15a90:	4804      	ldr	r0, [pc, #16]	; (15aa4 <net_buf_simple_push+0x34>)
   15a92:	f005 fa4b 	bl	1af2c <assert_post_action>
	buf->data -= len;
   15a96:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   15a98:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   15a9a:	1b40      	subs	r0, r0, r5
	buf->len += len;
   15a9c:	440d      	add	r5, r1
	buf->data -= len;
   15a9e:	6020      	str	r0, [r4, #0]
	buf->len += len;
   15aa0:	80a5      	strh	r5, [r4, #4]
}
   15aa2:	bd38      	pop	{r3, r4, r5, pc}
   15aa4:	000220d7 	.word	0x000220d7
   15aa8:	0001faab 	.word	0x0001faab

00015aac <net_buf_simple_pull>:
{
   15aac:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15aae:	8883      	ldrh	r3, [r0, #4]
{
   15ab0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   15ab2:	428b      	cmp	r3, r1
{
   15ab4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   15ab6:	d20a      	bcs.n	15ace <net_buf_simple_pull+0x22>
   15ab8:	4908      	ldr	r1, [pc, #32]	; (15adc <net_buf_simple_pull+0x30>)
   15aba:	4809      	ldr	r0, [pc, #36]	; (15ae0 <net_buf_simple_pull+0x34>)
   15abc:	f240 4264 	movw	r2, #1124	; 0x464
   15ac0:	f004 ff8e 	bl	1a9e0 <printk>
   15ac4:	f240 4164 	movw	r1, #1124	; 0x464
   15ac8:	4804      	ldr	r0, [pc, #16]	; (15adc <net_buf_simple_pull+0x30>)
   15aca:	f005 fa2f 	bl	1af2c <assert_post_action>
	buf->len -= len;
   15ace:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   15ad0:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   15ad2:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   15ad4:	4428      	add	r0, r5
	buf->len -= len;
   15ad6:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   15ad8:	6020      	str	r0, [r4, #0]
}
   15ada:	bd38      	pop	{r3, r4, r5, pc}
   15adc:	000220d7 	.word	0x000220d7
   15ae0:	0001faab 	.word	0x0001faab

00015ae4 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   15ae4:	8883      	ldrh	r3, [r0, #4]
{
   15ae6:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15ae8:	428b      	cmp	r3, r1
{
   15aea:	4604      	mov	r4, r0
   15aec:	460d      	mov	r5, r1
	void *data = buf->data;
   15aee:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   15af0:	d20a      	bcs.n	15b08 <net_buf_simple_pull_mem+0x24>
   15af2:	4909      	ldr	r1, [pc, #36]	; (15b18 <net_buf_simple_pull_mem+0x34>)
   15af4:	4809      	ldr	r0, [pc, #36]	; (15b1c <net_buf_simple_pull_mem+0x38>)
   15af6:	f44f 628e 	mov.w	r2, #1136	; 0x470
   15afa:	f004 ff71 	bl	1a9e0 <printk>
   15afe:	f44f 618e 	mov.w	r1, #1136	; 0x470
   15b02:	4805      	ldr	r0, [pc, #20]	; (15b18 <net_buf_simple_pull_mem+0x34>)
   15b04:	f005 fa12 	bl	1af2c <assert_post_action>
	buf->len -= len;
   15b08:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   15b0a:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   15b0c:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   15b0e:	4429      	add	r1, r5
}
   15b10:	4630      	mov	r0, r6
	buf->len -= len;
   15b12:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   15b14:	6021      	str	r1, [r4, #0]
}
   15b16:	bd70      	pop	{r4, r5, r6, pc}
   15b18:	000220d7 	.word	0x000220d7
   15b1c:	0001faab 	.word	0x0001faab

00015b20 <net_buf_simple_add>:
{
   15b20:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   15b22:	6803      	ldr	r3, [r0, #0]
   15b24:	8886      	ldrh	r6, [r0, #4]
   15b26:	4604      	mov	r4, r0
   15b28:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   15b2a:	f007 fcba 	bl	1d4a2 <net_buf_simple_tailroom>
   15b2e:	4288      	cmp	r0, r1
{
   15b30:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   15b32:	d20a      	bcs.n	15b4a <net_buf_simple_add+0x2a>
   15b34:	4907      	ldr	r1, [pc, #28]	; (15b54 <net_buf_simple_add+0x34>)
   15b36:	4808      	ldr	r0, [pc, #32]	; (15b58 <net_buf_simple_add+0x38>)
   15b38:	f240 3215 	movw	r2, #789	; 0x315
   15b3c:	f004 ff50 	bl	1a9e0 <printk>
   15b40:	f240 3115 	movw	r1, #789	; 0x315
   15b44:	4803      	ldr	r0, [pc, #12]	; (15b54 <net_buf_simple_add+0x34>)
   15b46:	f005 f9f1 	bl	1af2c <assert_post_action>
	buf->len += len;
   15b4a:	88a1      	ldrh	r1, [r4, #4]
}
   15b4c:	4630      	mov	r0, r6
	buf->len += len;
   15b4e:	440d      	add	r5, r1
   15b50:	80a5      	strh	r5, [r4, #4]
}
   15b52:	bd70      	pop	{r4, r5, r6, pc}
   15b54:	000220d7 	.word	0x000220d7
   15b58:	0001faab 	.word	0x0001faab

00015b5c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   15b5c:	b570      	push	{r4, r5, r6, lr}
   15b5e:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   15b60:	460c      	mov	r4, r1
	return port->data;
   15b62:	68c5      	ldr	r5, [r0, #12]
   15b64:	b941      	cbnz	r1, 15b78 <gpio_nrfx_manage_callback+0x1c>
   15b66:	491e      	ldr	r1, [pc, #120]	; (15be0 <gpio_nrfx_manage_callback+0x84>)
   15b68:	481e      	ldr	r0, [pc, #120]	; (15be4 <gpio_nrfx_manage_callback+0x88>)
   15b6a:	2224      	movs	r2, #36	; 0x24
   15b6c:	f004 ff38 	bl	1a9e0 <printk>
   15b70:	2124      	movs	r1, #36	; 0x24
   15b72:	481b      	ldr	r0, [pc, #108]	; (15be0 <gpio_nrfx_manage_callback+0x84>)
   15b74:	f005 f9da 	bl	1af2c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   15b78:	6863      	ldr	r3, [r4, #4]
   15b7a:	b943      	cbnz	r3, 15b8e <gpio_nrfx_manage_callback+0x32>
   15b7c:	4918      	ldr	r1, [pc, #96]	; (15be0 <gpio_nrfx_manage_callback+0x84>)
   15b7e:	4819      	ldr	r0, [pc, #100]	; (15be4 <gpio_nrfx_manage_callback+0x88>)
   15b80:	2225      	movs	r2, #37	; 0x25
   15b82:	f004 ff2d 	bl	1a9e0 <printk>
   15b86:	2125      	movs	r1, #37	; 0x25
   15b88:	4815      	ldr	r0, [pc, #84]	; (15be0 <gpio_nrfx_manage_callback+0x84>)
   15b8a:	f005 f9cf 	bl	1af2c <assert_post_action>
	return list->head;
   15b8e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   15b90:	b15b      	cbz	r3, 15baa <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15b92:	2200      	movs	r2, #0
   15b94:	429c      	cmp	r4, r3
   15b96:	d112      	bne.n	15bbe <gpio_nrfx_manage_callback+0x62>
	return node->next;
   15b98:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   15b9a:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   15b9c:	b952      	cbnz	r2, 15bb4 <gpio_nrfx_manage_callback+0x58>
   15b9e:	42a1      	cmp	r1, r4
	list->head = node;
   15ba0:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   15ba2:	d100      	bne.n	15ba6 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   15ba4:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   15ba6:	2300      	movs	r3, #0
   15ba8:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   15baa:	b96e      	cbnz	r6, 15bc8 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15bac:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   15bae:	bd70      	pop	{r4, r5, r6, pc}
   15bb0:	460b      	mov	r3, r1
   15bb2:	e7ef      	b.n	15b94 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   15bb4:	42a1      	cmp	r1, r4
	parent->next = child;
   15bb6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15bb8:	bf08      	it	eq
   15bba:	60aa      	streq	r2, [r5, #8]
}
   15bbc:	e7f3      	b.n	15ba6 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   15bbe:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15bc0:	461a      	mov	r2, r3
   15bc2:	2900      	cmp	r1, #0
   15bc4:	d1f4      	bne.n	15bb0 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   15bc6:	b13e      	cbz	r6, 15bd8 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   15bc8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15bca:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   15bcc:	6023      	str	r3, [r4, #0]
	list->head = node;
   15bce:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15bd0:	2800      	cmp	r0, #0
   15bd2:	d1eb      	bne.n	15bac <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   15bd4:	60ac      	str	r4, [r5, #8]
}
   15bd6:	e7ea      	b.n	15bae <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   15bd8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15bdc:	e7e7      	b.n	15bae <gpio_nrfx_manage_callback+0x52>
   15bde:	bf00      	nop
   15be0:	00022103 	.word	0x00022103
   15be4:	0001faab 	.word	0x0001faab

00015be8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15be8:	6802      	ldr	r2, [r0, #0]
{
   15bea:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15bec:	0953      	lsrs	r3, r2, #5
{
   15bee:	4604      	mov	r4, r0
    switch (port)
   15bf0:	d029      	beq.n	15c46 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   15bf2:	2b01      	cmp	r3, #1
   15bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15bf8:	bf18      	it	ne
   15bfa:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15bfc:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   15c00:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15c02:	07db      	lsls	r3, r3, #31
   15c04:	d40a      	bmi.n	15c1c <nrf_gpio_pin_port_decode+0x34>
   15c06:	4912      	ldr	r1, [pc, #72]	; (15c50 <nrf_gpio_pin_port_decode+0x68>)
   15c08:	4812      	ldr	r0, [pc, #72]	; (15c54 <nrf_gpio_pin_port_decode+0x6c>)
   15c0a:	f240 221a 	movw	r2, #538	; 0x21a
   15c0e:	f004 fee7 	bl	1a9e0 <printk>
   15c12:	f240 211a 	movw	r1, #538	; 0x21a
   15c16:	480e      	ldr	r0, [pc, #56]	; (15c50 <nrf_gpio_pin_port_decode+0x68>)
   15c18:	f005 f988 	bl	1af2c <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15c1c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15c1e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15c22:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15c24:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15c26:	d00c      	beq.n	15c42 <nrf_gpio_pin_port_decode+0x5a>
   15c28:	2b01      	cmp	r3, #1
   15c2a:	d00f      	beq.n	15c4c <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   15c2c:	4908      	ldr	r1, [pc, #32]	; (15c50 <nrf_gpio_pin_port_decode+0x68>)
   15c2e:	4809      	ldr	r0, [pc, #36]	; (15c54 <nrf_gpio_pin_port_decode+0x6c>)
   15c30:	f240 221f 	movw	r2, #543	; 0x21f
   15c34:	f004 fed4 	bl	1a9e0 <printk>
   15c38:	f240 211f 	movw	r1, #543	; 0x21f
   15c3c:	4804      	ldr	r0, [pc, #16]	; (15c50 <nrf_gpio_pin_port_decode+0x68>)
   15c3e:	f005 f975 	bl	1af2c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15c42:	4805      	ldr	r0, [pc, #20]	; (15c58 <nrf_gpio_pin_port_decode+0x70>)
}
   15c44:	bd10      	pop	{r4, pc}
    switch (port)
   15c46:	f04f 33ff 	mov.w	r3, #4294967295
   15c4a:	e7d7      	b.n	15bfc <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   15c4c:	4803      	ldr	r0, [pc, #12]	; (15c5c <nrf_gpio_pin_port_decode+0x74>)
   15c4e:	e7f9      	b.n	15c44 <nrf_gpio_pin_port_decode+0x5c>
   15c50:	00022130 	.word	0x00022130
   15c54:	0001faab 	.word	0x0001faab
   15c58:	40842500 	.word	0x40842500
   15c5c:	40842800 	.word	0x40842800

00015c60 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15c60:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15c62:	4b09      	ldr	r3, [pc, #36]	; (15c88 <gpio_nrfx_init+0x28>)
   15c64:	781a      	ldrb	r2, [r3, #0]
   15c66:	b96a      	cbnz	r2, 15c84 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15c68:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15c6a:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   15c6c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15c6e:	2105      	movs	r1, #5
   15c70:	f7f7 ff8a 	bl	db88 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15c74:	202f      	movs	r0, #47	; 0x2f
   15c76:	f7f7 ff69 	bl	db4c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15c7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15c7e:	4b03      	ldr	r3, [pc, #12]	; (15c8c <gpio_nrfx_init+0x2c>)
   15c80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15c84:	2000      	movs	r0, #0
   15c86:	bd08      	pop	{r3, pc}
   15c88:	2000ea5b 	.word	0x2000ea5b
   15c8c:	4002f000 	.word	0x4002f000

00015c90 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15c90:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15c98:	4680      	mov	r8, r0
   15c9a:	460e      	mov	r6, r1
   15c9c:	4617      	mov	r7, r2
   15c9e:	4699      	mov	r9, r3
	return port->data;
   15ca0:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   15ca2:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15ca6:	f040 80ab 	bne.w	15e00 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15caa:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15cac:	a801      	add	r0, sp, #4
   15cae:	7a1b      	ldrb	r3, [r3, #8]
   15cb0:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   15cb4:	9301      	str	r3, [sp, #4]
   15cb6:	f7ff ff97 	bl	15be8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15cba:	9b01      	ldr	r3, [sp, #4]
   15cbc:	3380      	adds	r3, #128	; 0x80
   15cbe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15cc2:	07d8      	lsls	r0, r3, #31
   15cc4:	f100 80bb 	bmi.w	15e3e <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15cc8:	2101      	movs	r1, #1
   15cca:	68e3      	ldr	r3, [r4, #12]
   15ccc:	40b1      	lsls	r1, r6
   15cce:	4319      	orrs	r1, r3
   15cd0:	60e1      	str	r1, [r4, #12]
   15cd2:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15cd4:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15cd6:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15cd8:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15cda:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   15cde:	bf0c      	ite	eq
   15ce0:	430b      	orreq	r3, r1
   15ce2:	438b      	bicne	r3, r1
   15ce4:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15ce6:	69a3      	ldr	r3, [r4, #24]
   15ce8:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15cec:	bf0c      	ite	eq
   15cee:	430b      	orreq	r3, r1
   15cf0:	438b      	bicne	r3, r1
   15cf2:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15cf4:	6923      	ldr	r3, [r4, #16]
   15cf6:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15cfa:	bf0c      	ite	eq
   15cfc:	4319      	orreq	r1, r3
   15cfe:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15d02:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15d06:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15d08:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15d0a:	4a4e      	ldr	r2, [pc, #312]	; (15e44 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15d0c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   15d10:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   15d14:	f8d8 700c 	ldr.w	r7, [r8, #12]
   15d18:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15d1a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   15d1e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   15d22:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15d26:	428d      	cmp	r5, r1
   15d28:	d175      	bne.n	15e16 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   15d2a:	fa23 f100 	lsr.w	r1, r3, r0
   15d2e:	07c9      	lsls	r1, r1, #31
   15d30:	d571      	bpl.n	15e16 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15d32:	0083      	lsls	r3, r0, #2
   15d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15d38:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15d3c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15d40:	f021 0101 	bic.w	r1, r1, #1
   15d44:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   15d48:	2301      	movs	r3, #1
   15d4a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   15d4c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   15d50:	b2c0      	uxtb	r0, r0
   15d52:	f001 f9bf 	bl	170d4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15d56:	4628      	mov	r0, r5
   15d58:	2100      	movs	r1, #0
   15d5a:	f007 fbe6 	bl	1d52a <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15d5e:	68f8      	ldr	r0, [r7, #12]
   15d60:	40f0      	lsrs	r0, r6
   15d62:	f010 0001 	ands.w	r0, r0, #1
   15d66:	d048      	beq.n	15dfa <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   15d68:	6978      	ldr	r0, [r7, #20]
   15d6a:	40f0      	lsrs	r0, r6
   15d6c:	f010 0401 	ands.w	r4, r0, #1
   15d70:	d059      	beq.n	15e26 <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   15d72:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15d74:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   15d76:	40f3      	lsrs	r3, r6
   15d78:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15d7a:	bf57      	itett	pl
   15d7c:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15d7e:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15d80:	fa21 f606 	lsrpl.w	r6, r1, r6
   15d84:	f006 0601 	andpl.w	r6, r6, #1
   15d88:	bf5c      	itt	pl
   15d8a:	f1c6 0602 	rsbpl	r6, r6, #2
   15d8e:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15d90:	f001 f9c0 	bl	17114 <nrfx_gpiote_channel_alloc>
   15d94:	4b2c      	ldr	r3, [pc, #176]	; (15e48 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   15d96:	4298      	cmp	r0, r3
   15d98:	d142      	bne.n	15e20 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15d9a:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   15d9c:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15da0:	022d      	lsls	r5, r5, #8
   15da2:	008b      	lsls	r3, r1, #2
   15da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15da8:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15dac:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15db0:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15db4:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   15db8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   15dbc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15dc0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15dc4:	4315      	orrs	r5, r2
   15dc6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   15dca:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   15dce:	4b1f      	ldr	r3, [pc, #124]	; (15e4c <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   15dd0:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15dd2:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   15dd4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   15dd8:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15dda:	008b      	lsls	r3, r1, #2
   15ddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15de0:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15de4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15de8:	f042 0201 	orr.w	r2, r2, #1
   15dec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   15df0:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   15df2:	4a14      	ldr	r2, [pc, #80]	; (15e44 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15df4:	408b      	lsls	r3, r1
   15df6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15dfa:	b003      	add	sp, #12
   15dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15e00:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15e04:	f47f af60 	bne.w	15cc8 <gpio_nrfx_pin_interrupt_configure+0x38>
   15e08:	2101      	movs	r1, #1
   15e0a:	fa01 f306 	lsl.w	r3, r1, r6
   15e0e:	68e1      	ldr	r1, [r4, #12]
   15e10:	ea21 0103 	bic.w	r1, r1, r3
   15e14:	e75c      	b.n	15cd0 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15e16:	3001      	adds	r0, #1
   15e18:	2808      	cmp	r0, #8
   15e1a:	f47f af7e 	bne.w	15d1a <gpio_nrfx_pin_interrupt_configure+0x8a>
   15e1e:	e79a      	b.n	15d56 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   15e20:	f06f 0012 	mvn.w	r0, #18
   15e24:	e7e9      	b.n	15dfa <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15e26:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15e28:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15e2a:	40f1      	lsrs	r1, r6
   15e2c:	f001 0101 	and.w	r1, r1, #1
   15e30:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15e34:	b2c9      	uxtb	r1, r1
   15e36:	f007 fb78 	bl	1d52a <nrf_gpio_cfg_sense_set>
	int res = 0;
   15e3a:	4620      	mov	r0, r4
   15e3c:	e7dd      	b.n	15dfa <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   15e3e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15e42:	e7da      	b.n	15dfa <gpio_nrfx_pin_interrupt_configure+0x16a>
   15e44:	4002f000 	.word	0x4002f000
   15e48:	0bad0000 	.word	0x0bad0000
   15e4c:	4002f100 	.word	0x4002f100

00015e50 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15e50:	4b2e      	ldr	r3, [pc, #184]	; (15f0c <gpio_nrfx_config+0xbc>)
{
   15e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15e54:	4c2e      	ldr	r4, [pc, #184]	; (15f10 <gpio_nrfx_config+0xc0>)
   15e56:	4013      	ands	r3, r2
   15e58:	42a3      	cmp	r3, r4
	return port->config;
   15e5a:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15e5c:	d044      	beq.n	15ee8 <gpio_nrfx_config+0x98>
   15e5e:	d80e      	bhi.n	15e7e <gpio_nrfx_config+0x2e>
   15e60:	2b06      	cmp	r3, #6
   15e62:	d043      	beq.n	15eec <gpio_nrfx_config+0x9c>
   15e64:	d806      	bhi.n	15e74 <gpio_nrfx_config+0x24>
   15e66:	2b00      	cmp	r3, #0
   15e68:	d040      	beq.n	15eec <gpio_nrfx_config+0x9c>
   15e6a:	2b02      	cmp	r3, #2
   15e6c:	d040      	beq.n	15ef0 <gpio_nrfx_config+0xa0>
   15e6e:	f06f 0015 	mvn.w	r0, #21
   15e72:	e037      	b.n	15ee4 <gpio_nrfx_config+0x94>
   15e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15e78:	d1f9      	bne.n	15e6e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15e7a:	2401      	movs	r4, #1
   15e7c:	e009      	b.n	15e92 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15e7e:	4c25      	ldr	r4, [pc, #148]	; (15f14 <gpio_nrfx_config+0xc4>)
   15e80:	42a3      	cmp	r3, r4
   15e82:	d037      	beq.n	15ef4 <gpio_nrfx_config+0xa4>
   15e84:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15e88:	d036      	beq.n	15ef8 <gpio_nrfx_config+0xa8>
   15e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15e8e:	d1ee      	bne.n	15e6e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15e90:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15e92:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15e94:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15e98:	bf4c      	ite	mi
   15e9a:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15e9c:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15ea0:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15ea4:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15ea6:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15eaa:	d507      	bpl.n	15ebc <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15eac:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15eae:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15eb2:	d523      	bpl.n	15efc <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15eb4:	2301      	movs	r3, #1
   15eb6:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15eb8:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15ebc:	7a03      	ldrb	r3, [r0, #8]
   15ebe:	f001 011f 	and.w	r1, r1, #31
   15ec2:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ec6:	a801      	add	r0, sp, #4
   15ec8:	9101      	str	r1, [sp, #4]
   15eca:	f7ff fe8d 	bl	15be8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15ece:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15ed0:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15ed4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15ed8:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15edc:	3280      	adds	r2, #128	; 0x80
   15ede:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15ee2:	2000      	movs	r0, #0
}
   15ee4:	b003      	add	sp, #12
   15ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15ee8:	2407      	movs	r4, #7
   15eea:	e7d2      	b.n	15e92 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15eec:	461c      	mov	r4, r3
   15eee:	e7d0      	b.n	15e92 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15ef0:	2404      	movs	r4, #4
   15ef2:	e7ce      	b.n	15e92 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15ef4:	2405      	movs	r4, #5
   15ef6:	e7cc      	b.n	15e92 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15ef8:	2403      	movs	r4, #3
   15efa:	e7ca      	b.n	15e92 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15efc:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15efe:	bf42      	ittt	mi
   15f00:	2301      	movmi	r3, #1
   15f02:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15f04:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15f08:	e7d8      	b.n	15ebc <gpio_nrfx_config+0x6c>
   15f0a:	bf00      	nop
   15f0c:	00f00006 	.word	0x00f00006
   15f10:	00100006 	.word	0x00100006
   15f14:	00400002 	.word	0x00400002

00015f18 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   15f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f1c:	460f      	mov	r7, r1
   15f1e:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15f20:	4604      	mov	r4, r0
   15f22:	b1e0      	cbz	r0, 15f5e <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   15f24:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   15f26:	f8df 803c 	ldr.w	r8, [pc, #60]	; 15f64 <gpio_fire_callbacks.isra.0+0x4c>
   15f2a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 15f68 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   15f2e:	68a3      	ldr	r3, [r4, #8]
   15f30:	421e      	tst	r6, r3
   15f32:	d010      	beq.n	15f56 <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   15f34:	6863      	ldr	r3, [r4, #4]
   15f36:	b943      	cbnz	r3, 15f4a <gpio_fire_callbacks.isra.0+0x32>
   15f38:	4641      	mov	r1, r8
   15f3a:	4648      	mov	r0, r9
   15f3c:	2245      	movs	r2, #69	; 0x45
   15f3e:	f004 fd4f 	bl	1a9e0 <printk>
   15f42:	2145      	movs	r1, #69	; 0x45
   15f44:	4640      	mov	r0, r8
   15f46:	f004 fff1 	bl	1af2c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15f4a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   15f4e:	4621      	mov	r1, r4
   15f50:	4638      	mov	r0, r7
   15f52:	4032      	ands	r2, r6
   15f54:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15f56:	b115      	cbz	r5, 15f5e <gpio_fire_callbacks.isra.0+0x46>
   15f58:	462c      	mov	r4, r5
   15f5a:	682d      	ldr	r5, [r5, #0]
   15f5c:	e7e7      	b.n	15f2e <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   15f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15f62:	bf00      	nop
   15f64:	00022103 	.word	0x00022103
   15f68:	0001faab 	.word	0x0001faab

00015f6c <gpiote_event_handler>:
{
   15f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15f6e:	2600      	movs	r6, #0
   15f70:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15f74:	4d28      	ldr	r5, [pc, #160]	; (16018 <gpiote_event_handler+0xac>)
   15f76:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   15f7a:	b15c      	cbz	r4, 15f94 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   15f7c:	4827      	ldr	r0, [pc, #156]	; (1601c <gpiote_event_handler+0xb0>)
   15f7e:	f007 fb0d 	bl	1d59c <check_level_trigger_pins>
		fired_triggers[0] =
   15f82:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   15f84:	4826      	ldr	r0, [pc, #152]	; (16020 <gpiote_event_handler+0xb4>)
   15f86:	f007 fb09 	bl	1d59c <check_level_trigger_pins>
		fired_triggers[1] =
   15f8a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15f8c:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   15f90:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   15f94:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15f96:	2601      	movs	r6, #1
   15f98:	4694      	mov	ip, r2
{
   15f9a:	4922      	ldr	r1, [pc, #136]	; (16024 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   15f9c:	4d1e      	ldr	r5, [pc, #120]	; (16018 <gpiote_event_handler+0xac>)
   15f9e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15fa2:	fa06 f002 	lsl.w	r0, r6, r2
   15fa6:	4218      	tst	r0, r3
   15fa8:	d016      	beq.n	15fd8 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15faa:	680b      	ldr	r3, [r1, #0]
   15fac:	b1a3      	cbz	r3, 15fd8 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15fae:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   15fb2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15fb6:	af02      	add	r7, sp, #8
   15fb8:	f3c3 3040 	ubfx	r0, r3, #13, #1
   15fbc:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   15fc0:	f850 7c08 	ldr.w	r7, [r0, #-8]
   15fc4:	f3c3 2304 	ubfx	r3, r3, #8, #5
   15fc8:	fa06 f303 	lsl.w	r3, r6, r3
   15fcc:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15fce:	f8c1 c000 	str.w	ip, [r1]
   15fd2:	f840 3c08 	str.w	r3, [r0, #-8]
   15fd6:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15fd8:	3201      	adds	r2, #1
   15fda:	2a08      	cmp	r2, #8
   15fdc:	f101 0104 	add.w	r1, r1, #4
   15fe0:	d1dd      	bne.n	15f9e <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   15fe2:	9a00      	ldr	r2, [sp, #0]
   15fe4:	b122      	cbz	r2, 15ff0 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   15fe6:	4b10      	ldr	r3, [pc, #64]	; (16028 <gpiote_event_handler+0xbc>)
   15fe8:	490c      	ldr	r1, [pc, #48]	; (1601c <gpiote_event_handler+0xb0>)
   15fea:	6858      	ldr	r0, [r3, #4]
   15fec:	f7ff ff94 	bl	15f18 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   15ff0:	9a01      	ldr	r2, [sp, #4]
   15ff2:	b122      	cbz	r2, 15ffe <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   15ff4:	4b0d      	ldr	r3, [pc, #52]	; (1602c <gpiote_event_handler+0xc0>)
   15ff6:	490a      	ldr	r1, [pc, #40]	; (16020 <gpiote_event_handler+0xb4>)
   15ff8:	6858      	ldr	r0, [r3, #4]
   15ffa:	f7ff ff8d 	bl	15f18 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   15ffe:	b144      	cbz	r4, 16012 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   16000:	4806      	ldr	r0, [pc, #24]	; (1601c <gpiote_event_handler+0xb0>)
   16002:	f007 faa5 	bl	1d550 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   16006:	4806      	ldr	r0, [pc, #24]	; (16020 <gpiote_event_handler+0xb4>)
}
   16008:	b003      	add	sp, #12
   1600a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1600e:	f007 ba9f 	b.w	1d550 <cfg_level_pins>
}
   16012:	b003      	add	sp, #12
   16014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16016:	bf00      	nop
   16018:	4002f000 	.word	0x4002f000
   1601c:	20008498 	.word	0x20008498
   16020:	200084a8 	.word	0x200084a8
   16024:	4002f100 	.word	0x4002f100
   16028:	2000a07c 	.word	0x2000a07c
   1602c:	2000a098 	.word	0x2000a098

00016030 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   16030:	4b02      	ldr	r3, [pc, #8]	; (1603c <vipm_nrf_1_register_callback+0xc>)
   16032:	6059      	str	r1, [r3, #4]
   16034:	645a      	str	r2, [r3, #68]	; 0x44
   16036:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   1603a:	4770      	bx	lr
   1603c:	2000a0bc 	.word	0x2000a0bc

00016040 <vipm_nrf_0_set_enabled>:
   16040:	b508      	push	{r3, lr}
   16042:	2145      	movs	r1, #69	; 0x45
   16044:	4802      	ldr	r0, [pc, #8]	; (16050 <vipm_nrf_0_set_enabled+0x10>)
   16046:	f004 fccb 	bl	1a9e0 <printk>
   1604a:	f06f 0015 	mvn.w	r0, #21
   1604e:	bd08      	pop	{r3, pc}
   16050:	00022171 	.word	0x00022171

00016054 <vipm_nrf_0_register_callback>:
   16054:	2157      	movs	r1, #87	; 0x57
   16056:	4801      	ldr	r0, [pc, #4]	; (1605c <vipm_nrf_0_register_callback+0x8>)
   16058:	f004 bcc2 	b.w	1a9e0 <printk>
   1605c:	00022192 	.word	0x00022192

00016060 <vipm_nrf_1_send>:
   16060:	b508      	push	{r3, lr}
   16062:	2145      	movs	r1, #69	; 0x45
   16064:	4802      	ldr	r0, [pc, #8]	; (16070 <vipm_nrf_1_send+0x10>)
   16066:	f004 fcbb 	bl	1a9e0 <printk>
   1606a:	f06f 0015 	mvn.w	r0, #21
   1606e:	bd08      	pop	{r3, pc}
   16070:	000221c9 	.word	0x000221c9

00016074 <vipm_nrf_init>:
{
   16074:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   16076:	4d0b      	ldr	r5, [pc, #44]	; (160a4 <vipm_nrf_init+0x30>)
   16078:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   1607c:	b97c      	cbnz	r4, 1609e <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   1607e:	4a0a      	ldr	r2, [pc, #40]	; (160a8 <vipm_nrf_init+0x34>)
   16080:	490a      	ldr	r1, [pc, #40]	; (160ac <vipm_nrf_init+0x38>)
   16082:	4620      	mov	r0, r4
   16084:	f001 f87e 	bl	17184 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   16088:	4622      	mov	r2, r4
   1608a:	2101      	movs	r1, #1
   1608c:	202a      	movs	r0, #42	; 0x2a
   1608e:	f7f7 fd7b 	bl	db88 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   16092:	4807      	ldr	r0, [pc, #28]	; (160b0 <vipm_nrf_init+0x3c>)
   16094:	f001 f89c 	bl	171d0 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   16098:	2301      	movs	r3, #1
   1609a:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   1609e:	2000      	movs	r0, #0
   160a0:	bd38      	pop	{r3, r4, r5, pc}
   160a2:	bf00      	nop
   160a4:	2000a0bc 	.word	0x2000a0bc
   160a8:	2000a0b4 	.word	0x2000a0b4
   160ac:	000160b5 	.word	0x000160b5
   160b0:	0001ee60 	.word	0x0001ee60

000160b4 <vipm_dispatcher>:
{
   160b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   160b8:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   160ba:	4f17      	ldr	r7, [pc, #92]	; (16118 <vipm_dispatcher+0x64>)
   160bc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1611c <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   160c0:	4e17      	ldr	r6, [pc, #92]	; (16120 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   160c2:	b90d      	cbnz	r5, 160c8 <vipm_dispatcher+0x14>
}
   160c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   160c8:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   160cc:	b30c      	cbz	r4, 16112 <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   160ce:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   160d2:	2b0f      	cmp	r3, #15
   160d4:	461c      	mov	r4, r3
   160d6:	dd08      	ble.n	160ea <vipm_dispatcher+0x36>
   160d8:	4639      	mov	r1, r7
   160da:	4640      	mov	r0, r8
   160dc:	2283      	movs	r2, #131	; 0x83
   160de:	f004 fc7f 	bl	1a9e0 <printk>
   160e2:	2183      	movs	r1, #131	; 0x83
   160e4:	4638      	mov	r0, r7
   160e6:	f004 ff21 	bl	1af2c <assert_post_action>
		event_mask &= ~BIT(event_idx);
   160ea:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   160ec:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   160f0:	40a3      	lsls	r3, r4
   160f2:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   160f6:	f1b9 0f00 	cmp.w	r9, #0
   160fa:	d0e2      	beq.n	160c2 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   160fc:	2300      	movs	r3, #0
   160fe:	f104 0110 	add.w	r1, r4, #16
   16102:	3420      	adds	r4, #32
   16104:	461a      	mov	r2, r3
   16106:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1610a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1610e:	47c8      	blx	r9
   16110:	e7d7      	b.n	160c2 <vipm_dispatcher+0xe>
    return 32U;
   16112:	2420      	movs	r4, #32
   16114:	e7e0      	b.n	160d8 <vipm_dispatcher+0x24>
   16116:	bf00      	nop
   16118:	000221ea 	.word	0x000221ea
   1611c:	0001faab 	.word	0x0001faab
   16120:	2000a0bc 	.word	0x2000a0bc

00016124 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   16124:	2a10      	cmp	r2, #16
   16126:	b508      	push	{r3, lr}
   16128:	d810      	bhi.n	1614c <vipm_nrf_0_send+0x28>
   1612a:	b11a      	cbz	r2, 16134 <vipm_nrf_0_send+0x10>
   1612c:	2157      	movs	r1, #87	; 0x57
   1612e:	4809      	ldr	r0, [pc, #36]	; (16154 <vipm_nrf_0_send+0x30>)
   16130:	f004 fc56 	bl	1a9e0 <printk>
   16134:	9b02      	ldr	r3, [sp, #8]
   16136:	2b00      	cmp	r3, #0
   16138:	dd03      	ble.n	16142 <vipm_nrf_0_send+0x1e>
   1613a:	2157      	movs	r1, #87	; 0x57
   1613c:	4806      	ldr	r0, [pc, #24]	; (16158 <vipm_nrf_0_send+0x34>)
   1613e:	f004 fc4f 	bl	1a9e0 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16142:	2201      	movs	r2, #1
   16144:	2000      	movs	r0, #0
   16146:	4b05      	ldr	r3, [pc, #20]	; (1615c <vipm_nrf_0_send+0x38>)
   16148:	601a      	str	r2, [r3, #0]
   1614a:	bd08      	pop	{r3, pc}
   1614c:	f06f 0015 	mvn.w	r0, #21
   16150:	e7fb      	b.n	1614a <vipm_nrf_0_send+0x26>
   16152:	bf00      	nop
   16154:	00022218 	.word	0x00022218
   16158:	00022251 	.word	0x00022251
   1615c:	4002a000 	.word	0x4002a000

00016160 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16160:	6802      	ldr	r2, [r0, #0]
{
   16162:	b510      	push	{r4, lr}
    switch (port)
   16164:	0953      	lsrs	r3, r2, #5
{
   16166:	4604      	mov	r4, r0
    switch (port)
   16168:	d029      	beq.n	161be <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1616a:	2b01      	cmp	r3, #1
   1616c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16170:	bf18      	it	ne
   16172:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   16174:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   16178:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1617a:	07db      	lsls	r3, r3, #31
   1617c:	d40a      	bmi.n	16194 <nrf_gpio_pin_port_decode+0x34>
   1617e:	4912      	ldr	r1, [pc, #72]	; (161c8 <nrf_gpio_pin_port_decode+0x68>)
   16180:	4812      	ldr	r0, [pc, #72]	; (161cc <nrf_gpio_pin_port_decode+0x6c>)
   16182:	f240 221a 	movw	r2, #538	; 0x21a
   16186:	f004 fc2b 	bl	1a9e0 <printk>
   1618a:	f240 211a 	movw	r1, #538	; 0x21a
   1618e:	480e      	ldr	r0, [pc, #56]	; (161c8 <nrf_gpio_pin_port_decode+0x68>)
   16190:	f004 fecc 	bl	1af2c <assert_post_action>
    uint32_t pin_number = *p_pin;
   16194:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16196:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1619a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1619c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1619e:	d00c      	beq.n	161ba <nrf_gpio_pin_port_decode+0x5a>
   161a0:	2b01      	cmp	r3, #1
   161a2:	d00f      	beq.n	161c4 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   161a4:	4908      	ldr	r1, [pc, #32]	; (161c8 <nrf_gpio_pin_port_decode+0x68>)
   161a6:	4809      	ldr	r0, [pc, #36]	; (161cc <nrf_gpio_pin_port_decode+0x6c>)
   161a8:	f240 221f 	movw	r2, #543	; 0x21f
   161ac:	f004 fc18 	bl	1a9e0 <printk>
   161b0:	f240 211f 	movw	r1, #543	; 0x21f
   161b4:	4804      	ldr	r0, [pc, #16]	; (161c8 <nrf_gpio_pin_port_decode+0x68>)
   161b6:	f004 feb9 	bl	1af2c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   161ba:	4805      	ldr	r0, [pc, #20]	; (161d0 <nrf_gpio_pin_port_decode+0x70>)
}
   161bc:	bd10      	pop	{r4, pc}
    switch (port)
   161be:	f04f 33ff 	mov.w	r3, #4294967295
   161c2:	e7d7      	b.n	16174 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   161c4:	4803      	ldr	r0, [pc, #12]	; (161d4 <nrf_gpio_pin_port_decode+0x74>)
   161c6:	e7f9      	b.n	161bc <nrf_gpio_pin_port_decode+0x5c>
   161c8:	00022130 	.word	0x00022130
   161cc:	0001faab 	.word	0x0001faab
   161d0:	40842500 	.word	0x40842500
   161d4:	40842800 	.word	0x40842800

000161d8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   161d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   161da:	794b      	ldrb	r3, [r1, #5]
   161dc:	2b01      	cmp	r3, #1
   161de:	d02b      	beq.n	16238 <uarte_nrfx_configure+0x60>
   161e0:	2b03      	cmp	r3, #3
   161e2:	d126      	bne.n	16232 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   161e4:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   161e6:	798b      	ldrb	r3, [r1, #6]
   161e8:	2b03      	cmp	r3, #3
   161ea:	d122      	bne.n	16232 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   161ec:	79cd      	ldrb	r5, [r1, #7]
   161ee:	b125      	cbz	r5, 161fa <uarte_nrfx_configure+0x22>
   161f0:	2d01      	cmp	r5, #1
   161f2:	d11e      	bne.n	16232 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   161f4:	6843      	ldr	r3, [r0, #4]
   161f6:	791b      	ldrb	r3, [r3, #4]
   161f8:	b1db      	cbz	r3, 16232 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   161fa:	790a      	ldrb	r2, [r1, #4]
   161fc:	2a01      	cmp	r2, #1
   161fe:	d01d      	beq.n	1623c <uarte_nrfx_configure+0x64>
   16200:	2a02      	cmp	r2, #2
   16202:	d01f      	beq.n	16244 <uarte_nrfx_configure+0x6c>
   16204:	b9aa      	cbnz	r2, 16232 <uarte_nrfx_configure+0x5a>
   16206:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16208:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1620a:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   1620c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   16210:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   16212:	d06e      	beq.n	162f2 <uarte_nrfx_configure+0x11a>
   16214:	d833      	bhi.n	1627e <uarte_nrfx_configure+0xa6>
   16216:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1621a:	d06d      	beq.n	162f8 <uarte_nrfx_configure+0x120>
   1621c:	d81c      	bhi.n	16258 <uarte_nrfx_configure+0x80>
   1621e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16222:	d06b      	beq.n	162fc <uarte_nrfx_configure+0x124>
   16224:	d810      	bhi.n	16248 <uarte_nrfx_configure+0x70>
   16226:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1622a:	d06a      	beq.n	16302 <uarte_nrfx_configure+0x12a>
   1622c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16230:	d06a      	beq.n	16308 <uarte_nrfx_configure+0x130>
   16232:	f06f 0022 	mvn.w	r0, #34	; 0x22
   16236:	e05b      	b.n	162f0 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   16238:	2700      	movs	r7, #0
   1623a:	e7d4      	b.n	161e6 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1623c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   16240:	220e      	movs	r2, #14
   16242:	e7e1      	b.n	16208 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   16244:	2400      	movs	r4, #0
   16246:	e7fb      	b.n	16240 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   16248:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1624c:	d05f      	beq.n	1630e <uarte_nrfx_configure+0x136>
   1624e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16252:	d1ee      	bne.n	16232 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16254:	4b38      	ldr	r3, [pc, #224]	; (16338 <uarte_nrfx_configure+0x160>)
   16256:	e03e      	b.n	162d6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16258:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1625c:	d05a      	beq.n	16314 <uarte_nrfx_configure+0x13c>
   1625e:	d807      	bhi.n	16270 <uarte_nrfx_configure+0x98>
   16260:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16264:	d058      	beq.n	16318 <uarte_nrfx_configure+0x140>
   16266:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1626a:	d1e2      	bne.n	16232 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1626c:	4b33      	ldr	r3, [pc, #204]	; (1633c <uarte_nrfx_configure+0x164>)
   1626e:	e032      	b.n	162d6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16270:	f647 2c12 	movw	ip, #31250	; 0x7a12
   16274:	4563      	cmp	r3, ip
   16276:	d1dc      	bne.n	16232 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16278:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1627c:	e02b      	b.n	162d6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1627e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16282:	d04b      	beq.n	1631c <uarte_nrfx_configure+0x144>
   16284:	d813      	bhi.n	162ae <uarte_nrfx_configure+0xd6>
   16286:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1628a:	d04a      	beq.n	16322 <uarte_nrfx_configure+0x14a>
   1628c:	d809      	bhi.n	162a2 <uarte_nrfx_configure+0xca>
   1628e:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   16292:	4563      	cmp	r3, ip
   16294:	d047      	beq.n	16326 <uarte_nrfx_configure+0x14e>
   16296:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1629a:	d1ca      	bne.n	16232 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1629c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   162a0:	e019      	b.n	162d6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   162a2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   162a6:	d1c4      	bne.n	16232 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   162a8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   162ac:	e013      	b.n	162d6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   162ae:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   162b2:	d03b      	beq.n	1632c <uarte_nrfx_configure+0x154>
   162b4:	d809      	bhi.n	162ca <uarte_nrfx_configure+0xf2>
   162b6:	f8df c088 	ldr.w	ip, [pc, #136]	; 16340 <uarte_nrfx_configure+0x168>
   162ba:	4563      	cmp	r3, ip
   162bc:	d039      	beq.n	16332 <uarte_nrfx_configure+0x15a>
   162be:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   162c2:	d1b6      	bne.n	16232 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   162c4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   162c8:	e005      	b.n	162d6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   162ca:	f8df c078 	ldr.w	ip, [pc, #120]	; 16344 <uarte_nrfx_configure+0x16c>
   162ce:	4563      	cmp	r3, ip
   162d0:	d1af      	bne.n	16232 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   162d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   162d6:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   162da:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   162dc:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   162de:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   162e0:	4322      	orrs	r2, r4
   162e2:	3304      	adds	r3, #4
   162e4:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   162e6:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   162ea:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   162ee:	2000      	movs	r0, #0
}
   162f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   162f2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   162f6:	e7ee      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   162f8:	4b13      	ldr	r3, [pc, #76]	; (16348 <uarte_nrfx_configure+0x170>)
   162fa:	e7ec      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   162fc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16300:	e7e9      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   16302:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16306:	e7e6      	b.n	162d6 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16308:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1630c:	e7e3      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1630e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16312:	e7e0      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16314:	4b0d      	ldr	r3, [pc, #52]	; (1634c <uarte_nrfx_configure+0x174>)
   16316:	e7de      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16318:	4b0d      	ldr	r3, [pc, #52]	; (16350 <uarte_nrfx_configure+0x178>)
   1631a:	e7dc      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1631c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16320:	e7d9      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16322:	4b0c      	ldr	r3, [pc, #48]	; (16354 <uarte_nrfx_configure+0x17c>)
   16324:	e7d7      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16326:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1632a:	e7d4      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1632c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16330:	e7d1      	b.n	162d6 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16332:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16336:	e7ce      	b.n	162d6 <uarte_nrfx_configure+0xfe>
   16338:	0013b000 	.word	0x0013b000
   1633c:	004ea000 	.word	0x004ea000
   16340:	0003d090 	.word	0x0003d090
   16344:	000f4240 	.word	0x000f4240
   16348:	00275000 	.word	0x00275000
   1634c:	0075c000 	.word	0x0075c000
   16350:	003af000 	.word	0x003af000
   16354:	013a9000 	.word	0x013a9000

00016358 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   16358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1635c:	4606      	mov	r6, r0
   1635e:	4688      	mov	r8, r1
	return dev->data;
   16360:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16362:	f007 fe5b 	bl	1e01c <k_is_in_isr>
   16366:	b9b8      	cbnz	r0, 16398 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   16368:	4b28      	ldr	r3, [pc, #160]	; (1640c <uarte_nrfx_poll_out+0xb4>)
   1636a:	781b      	ldrb	r3, [r3, #0]
   1636c:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   16370:	6872      	ldr	r2, [r6, #4]
   16372:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   16374:	b193      	cbz	r3, 1639c <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   16376:	f04f 0320 	mov.w	r3, #32
   1637a:	f3ef 8411 	mrs	r4, BASEPRI
   1637e:	f383 8811 	msr	BASEPRI, r3
   16382:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   16386:	6870      	ldr	r0, [r6, #4]
   16388:	f007 f965 	bl	1d656 <is_tx_ready.isra.0>
   1638c:	bb38      	cbnz	r0, 163de <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1638e:	f384 8811 	msr	BASEPRI, r4
   16392:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   16396:	e7ee      	b.n	16376 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16398:	2301      	movs	r3, #1
   1639a:	e7e9      	b.n	16370 <uarte_nrfx_poll_out+0x18>
   1639c:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1639e:	6870      	ldr	r0, [r6, #4]
   163a0:	f007 f959 	bl	1d656 <is_tx_ready.isra.0>
   163a4:	b970      	cbnz	r0, 163c4 <uarte_nrfx_poll_out+0x6c>
   163a6:	2001      	movs	r0, #1
   163a8:	f007 f98d 	bl	1d6c6 <nrfx_busy_wait>
   163ac:	3c01      	subs	r4, #1
   163ae:	d1f6      	bne.n	1639e <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   163b0:	2100      	movs	r1, #0
   163b2:	2021      	movs	r0, #33	; 0x21
   163b4:	f003 f906 	bl	195c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   163b8:	e7f0      	b.n	1639c <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   163ba:	f384 8811 	msr	BASEPRI, r4
   163be:	f3bf 8f6f 	isb	sy
}
   163c2:	e7f5      	b.n	163b0 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   163c4:	f04f 0320 	mov.w	r3, #32
   163c8:	f3ef 8411 	mrs	r4, BASEPRI
   163cc:	f383 8811 	msr	BASEPRI, r3
   163d0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   163d4:	6870      	ldr	r0, [r6, #4]
   163d6:	f007 f93e 	bl	1d656 <is_tx_ready.isra.0>
   163da:	2800      	cmp	r0, #0
   163dc:	d0ed      	beq.n	163ba <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   163de:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   163e0:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   163e2:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   163e6:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   163ea:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   163ee:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   163f2:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   163f6:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   163fa:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   163fe:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   16400:	f384 8811 	msr	BASEPRI, r4
   16404:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   16408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1640c:	2000ea5d 	.word	0x2000ea5d

00016410 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   16410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16414:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   16416:	f04f 0800 	mov.w	r8, #0
   1641a:	f04f 0914 	mov.w	r9, #20
   1641e:	2200      	movs	r2, #0
   16420:	2101      	movs	r1, #1
   16422:	2008      	movs	r0, #8
   16424:	f7f7 fbb0 	bl	db88 <z_arm_irq_priority_set>
   16428:	2008      	movs	r0, #8
   1642a:	f7f7 fb8f 	bl	db4c <arch_irq_enable>
	return config->uarte_regs;
   1642e:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   16430:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   16432:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16434:	2701      	movs	r7, #1
   16436:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1643a:	a801      	add	r0, sp, #4
	data->dev = dev;
   1643c:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   1643e:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16442:	f7ff fe8d 	bl	16160 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16446:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16448:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1644c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   16450:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16452:	a801      	add	r0, sp, #4
   16454:	f8cd 9004 	str.w	r9, [sp, #4]
   16458:	f7ff fe82 	bl	16160 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1645c:	f04f 0b16 	mov.w	fp, #22
   16460:	9b01      	ldr	r3, [sp, #4]
   16462:	3380      	adds	r3, #128	; 0x80
   16464:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16468:	a801      	add	r0, sp, #4
   1646a:	f8cd b004 	str.w	fp, [sp, #4]
   1646e:	f7ff fe77 	bl	16160 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16472:	9b01      	ldr	r3, [sp, #4]
   16474:	3380      	adds	r3, #128	; 0x80
   16476:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1647a:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1647e:	f04f 0915 	mov.w	r9, #21
   16482:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16486:	a801      	add	r0, sp, #4
   16488:	f8cd 9004 	str.w	r9, [sp, #4]
   1648c:	f7ff fe68 	bl	16160 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16490:	9b01      	ldr	r3, [sp, #4]
   16492:	3380      	adds	r3, #128	; 0x80
   16494:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   16498:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1649c:	a801      	add	r0, sp, #4
   1649e:	f8cd 8004 	str.w	r8, [sp, #4]
   164a2:	f7ff fe5d 	bl	16160 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   164a6:	9b01      	ldr	r3, [sp, #4]
   164a8:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   164aa:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   164ac:	a801      	add	r0, sp, #4
   164ae:	f8cd 8004 	str.w	r8, [sp, #4]
   164b2:	f7ff fe55 	bl	16160 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   164b6:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   164b8:	68e9      	ldr	r1, [r5, #12]
   164ba:	3380      	adds	r3, #128	; 0x80
   164bc:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   164c0:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   164c2:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   164c6:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   164c8:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   164cc:	f7ff fe84 	bl	161d8 <uarte_nrfx_configure>
	if (err) {
   164d0:	4607      	mov	r7, r0
   164d2:	b980      	cbnz	r0, 164f6 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   164d4:	686b      	ldr	r3, [r5, #4]
   164d6:	799b      	ldrb	r3, [r3, #6]
   164d8:	2b00      	cmp	r3, #0
   164da:	d03a      	beq.n	16552 <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   164dc:	f106 0012 	add.w	r0, r6, #18
   164e0:	f000 fddc 	bl	1709c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   164e4:	4b2b      	ldr	r3, [pc, #172]	; (16594 <uarte_0_init+0x184>)
   164e6:	4298      	cmp	r0, r3
   164e8:	d009      	beq.n	164fe <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   164ea:	2145      	movs	r1, #69	; 0x45
   164ec:	482a      	ldr	r0, [pc, #168]	; (16598 <uarte_0_init+0x188>)
   164ee:	f004 fa77 	bl	1a9e0 <printk>
		return -EIO;
   164f2:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   164f6:	4638      	mov	r0, r7
   164f8:	b003      	add	sp, #12
   164fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   164fe:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   16502:	f896 8012 	ldrb.w	r8, [r6, #18]
   16506:	d10a      	bne.n	1651e <uarte_0_init+0x10e>
   16508:	4924      	ldr	r1, [pc, #144]	; (1659c <uarte_0_init+0x18c>)
   1650a:	4825      	ldr	r0, [pc, #148]	; (165a0 <uarte_0_init+0x190>)
   1650c:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   16510:	f004 fa66 	bl	1a9e0 <printk>
   16514:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   16518:	4820      	ldr	r0, [pc, #128]	; (1659c <uarte_0_init+0x18c>)
   1651a:	f004 fd07 	bl	1af2c <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1651e:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   16522:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   16526:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   1652a:	d10a      	bne.n	16542 <uarte_0_init+0x132>
   1652c:	491b      	ldr	r1, [pc, #108]	; (1659c <uarte_0_init+0x18c>)
   1652e:	481c      	ldr	r0, [pc, #112]	; (165a0 <uarte_0_init+0x190>)
   16530:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   16534:	f004 fa54 	bl	1a9e0 <printk>
   16538:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   1653c:	4817      	ldr	r0, [pc, #92]	; (1659c <uarte_0_init+0x18c>)
   1653e:	f004 fcf5 	bl	1af2c <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   16542:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   16544:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   16548:	7cb2      	ldrb	r2, [r6, #18]
   1654a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1654c:	4a15      	ldr	r2, [pc, #84]	; (165a4 <uarte_0_init+0x194>)
   1654e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16552:	2308      	movs	r3, #8
   16554:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16558:	2300      	movs	r3, #0
   1655a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1655e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   16562:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16566:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1656a:	2301      	movs	r3, #1
   1656c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16570:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   16572:	686b      	ldr	r3, [r5, #4]
   16574:	799b      	ldrb	r3, [r3, #6]
   16576:	b91b      	cbnz	r3, 16580 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   16578:	f44f 7380 	mov.w	r3, #256	; 0x100
   1657c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   16580:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   16582:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16584:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16588:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1658c:	2301      	movs	r3, #1
   1658e:	60a3      	str	r3, [r4, #8]
   16590:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   16592:	e7b0      	b.n	164f6 <uarte_0_init+0xe6>
   16594:	0bad0000 	.word	0x0bad0000
   16598:	00022294 	.word	0x00022294
   1659c:	000222b8 	.word	0x000222b8
   165a0:	0001faab 	.word	0x0001faab
   165a4:	40017000 	.word	0x40017000

000165a8 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   165a8:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   165ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   165b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   165b4:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   165b8:	4605      	mov	r5, r0
   165ba:	460e      	mov	r6, r1
   165bc:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   165be:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   165c2:	d14f      	bne.n	16664 <z_impl_gpio_pin_interrupt_configure+0xbc>
   165c4:	492d      	ldr	r1, [pc, #180]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   165c6:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   165ca:	482d      	ldr	r0, [pc, #180]	; (16680 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   165cc:	f004 fa08 	bl	1a9e0 <printk>
   165d0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   165d4:	4829      	ldr	r0, [pc, #164]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   165d6:	f004 fca9 	bl	1af2c <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   165da:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   165de:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   165e2:	d10a      	bne.n	165fa <z_impl_gpio_pin_interrupt_configure+0x52>
   165e4:	4925      	ldr	r1, [pc, #148]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   165e6:	4826      	ldr	r0, [pc, #152]	; (16680 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   165e8:	f240 12f1 	movw	r2, #497	; 0x1f1
   165ec:	f004 f9f8 	bl	1a9e0 <printk>
   165f0:	f240 11f1 	movw	r1, #497	; 0x1f1
   165f4:	4821      	ldr	r0, [pc, #132]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   165f6:	f004 fc99 	bl	1af2c <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   165fa:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   165fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   16602:	d10a      	bne.n	1661a <z_impl_gpio_pin_interrupt_configure+0x72>
   16604:	491d      	ldr	r1, [pc, #116]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16606:	481e      	ldr	r0, [pc, #120]	; (16680 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16608:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1660c:	f004 f9e8 	bl	1a9e0 <printk>
   16610:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   16614:	4819      	ldr	r0, [pc, #100]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16616:	f004 fc89 	bl	1af2c <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1661a:	2701      	movs	r7, #1
   1661c:	f8da 3000 	ldr.w	r3, [sl]
   16620:	40b7      	lsls	r7, r6
   16622:	421f      	tst	r7, r3
   16624:	d10a      	bne.n	1663c <z_impl_gpio_pin_interrupt_configure+0x94>
   16626:	4915      	ldr	r1, [pc, #84]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16628:	4815      	ldr	r0, [pc, #84]	; (16680 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1662a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   1662e:	f004 f9d7 	bl	1a9e0 <printk>
   16632:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   16636:	4811      	ldr	r0, [pc, #68]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16638:	f004 fc78 	bl	1af2c <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1663c:	0423      	lsls	r3, r4, #16
   1663e:	d505      	bpl.n	1664c <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   16640:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   16644:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   16646:	bf18      	it	ne
   16648:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   1664c:	f8d8 7018 	ldr.w	r7, [r8, #24]
   16650:	4631      	mov	r1, r6
   16652:	4628      	mov	r0, r5
   16654:	46bc      	mov	ip, r7
   16656:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1665a:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   1665e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   16662:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   16664:	2b00      	cmp	r3, #0
   16666:	d1b8      	bne.n	165da <z_impl_gpio_pin_interrupt_configure+0x32>
   16668:	4904      	ldr	r1, [pc, #16]	; (1667c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1666a:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   1666e:	4804      	ldr	r0, [pc, #16]	; (16680 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16670:	f004 f9b6 	bl	1a9e0 <printk>
   16674:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   16678:	e7ac      	b.n	165d4 <z_impl_gpio_pin_interrupt_configure+0x2c>
   1667a:	bf00      	nop
   1667c:	00022307 	.word	0x00022307
   16680:	0001faab 	.word	0x0001faab

00016684 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   16684:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16686:	2501      	movs	r5, #1
   16688:	6843      	ldr	r3, [r0, #4]
   1668a:	408d      	lsls	r5, r1
   1668c:	681b      	ldr	r3, [r3, #0]
{
   1668e:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16690:	421d      	tst	r5, r3
{
   16692:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16694:	d10a      	bne.n	166ac <gpio_pin_set_raw+0x28>
   16696:	490b      	ldr	r1, [pc, #44]	; (166c4 <gpio_pin_set_raw+0x40>)
   16698:	480b      	ldr	r0, [pc, #44]	; (166c8 <gpio_pin_set_raw+0x44>)
   1669a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   1669e:	f004 f99f 	bl	1a9e0 <printk>
   166a2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   166a6:	4807      	ldr	r0, [pc, #28]	; (166c4 <gpio_pin_set_raw+0x40>)
   166a8:	f004 fc40 	bl	1af2c <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   166ac:	b136      	cbz	r6, 166bc <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   166ae:	68a3      	ldr	r3, [r4, #8]
   166b0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   166b2:	4629      	mov	r1, r5
   166b4:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   166b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   166ba:	4718      	bx	r3
   166bc:	68a3      	ldr	r3, [r4, #8]
   166be:	691b      	ldr	r3, [r3, #16]
   166c0:	e7f7      	b.n	166b2 <gpio_pin_set_raw+0x2e>
   166c2:	bf00      	nop
   166c4:	00022307 	.word	0x00022307
   166c8:	0001faab 	.word	0x0001faab

000166cc <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   166cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   166d0:	4606      	mov	r6, r0
   166d2:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   166d4:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   166d6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1671c <dk_set_leds_state.part.0+0x50>
   166da:	f8df 9044 	ldr.w	r9, [pc, #68]	; 16720 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   166de:	fa26 f204 	lsr.w	r2, r6, r4
   166e2:	fa27 f304 	lsr.w	r3, r7, r4
   166e6:	4313      	orrs	r3, r2
   166e8:	07db      	lsls	r3, r3, #31
   166ea:	d512      	bpl.n	16712 <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   166ec:	43d2      	mvns	r2, r2
   166ee:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   166f2:	7919      	ldrb	r1, [r3, #4]
   166f4:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   166f8:	f002 0201 	and.w	r2, r2, #1
   166fc:	f7ff ffc2 	bl	16684 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   16700:	4605      	mov	r5, r0
   16702:	b130      	cbz	r0, 16712 <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   16704:	2145      	movs	r1, #69	; 0x45
   16706:	4807      	ldr	r0, [pc, #28]	; (16724 <dk_set_leds_state.part.0+0x58>)
   16708:	f004 f96a 	bl	1a9e0 <printk>
			}
		}
	}

	return 0;
}
   1670c:	4628      	mov	r0, r5
   1670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16712:	3401      	adds	r4, #1
   16714:	2c04      	cmp	r4, #4
   16716:	d1e2      	bne.n	166de <dk_set_leds_state.part.0+0x12>
	return 0;
   16718:	2500      	movs	r5, #0
   1671a:	e7f7      	b.n	1670c <dk_set_leds_state.part.0+0x40>
   1671c:	0001ef48 	.word	0x0001ef48
   16720:	2000a1c4 	.word	0x2000a1c4
   16724:	00022331 	.word	0x00022331

00016728 <buttons_scan_fn>:
{
   16728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   1672c:	2400      	movs	r4, #0
   1672e:	4e6c      	ldr	r6, [pc, #432]	; (168e0 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16730:	4625      	mov	r5, r4
{
   16732:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   16734:	4f6b      	ldr	r7, [pc, #428]	; (168e4 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16736:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 168e8 <buttons_scan_fn+0x1c0>
   1673a:	f04f 0801 	mov.w	r8, #1
   1673e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   16742:	791b      	ldrb	r3, [r3, #4]
   16744:	f859 bb04 	ldr.w	fp, [r9], #4
   16748:	fa08 f803 	lsl.w	r8, r8, r3
   1674c:	f8db 3004 	ldr.w	r3, [fp, #4]
   16750:	681b      	ldr	r3, [r3, #0]
   16752:	ea18 0f03 	tst.w	r8, r3
   16756:	d10a      	bne.n	1676e <buttons_scan_fn+0x46>
   16758:	4651      	mov	r1, sl
   1675a:	4864      	ldr	r0, [pc, #400]	; (168ec <buttons_scan_fn+0x1c4>)
   1675c:	f44f 725e 	mov.w	r2, #888	; 0x378
   16760:	f004 f93e 	bl	1a9e0 <printk>
   16764:	f44f 715e 	mov.w	r1, #888	; 0x378
   16768:	4650      	mov	r0, sl
   1676a:	f004 fbdf 	bl	1af2c <assert_post_action>
	return api->port_get_raw(port, value);
   1676e:	f8db 3008 	ldr.w	r3, [fp, #8]
   16772:	4658      	mov	r0, fp
   16774:	685b      	ldr	r3, [r3, #4]
   16776:	a901      	add	r1, sp, #4
   16778:	4798      	blx	r3
	if (ret == 0) {
   1677a:	2800      	cmp	r0, #0
   1677c:	d16b      	bne.n	16856 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1677e:	9b01      	ldr	r3, [sp, #4]
   16780:	ea18 0f03 	tst.w	r8, r3
   16784:	d003      	beq.n	1678e <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16786:	3501      	adds	r5, #1
   16788:	2d04      	cmp	r5, #4
   1678a:	d1d6      	bne.n	1673a <buttons_scan_fn+0x12>
   1678c:	e069      	b.n	16862 <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   1678e:	2301      	movs	r3, #1
   16790:	40ab      	lsls	r3, r5
   16792:	431c      	orrs	r4, r3
   16794:	e7f7      	b.n	16786 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16796:	3d04      	subs	r5, #4
   16798:	2d00      	cmp	r5, #0
   1679a:	f000 8087 	beq.w	168ac <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   1679e:	46aa      	mov	sl, r5
   167a0:	f85a 3b04 	ldr.w	r3, [sl], #4
   167a4:	4641      	mov	r1, r8
   167a6:	4620      	mov	r0, r4
   167a8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   167aa:	f1ba 0f00 	cmp.w	sl, #0
   167ae:	d07d      	beq.n	168ac <buttons_scan_fn+0x184>
	return node->next;
   167b0:	686d      	ldr	r5, [r5, #4]
   167b2:	e078      	b.n	168a6 <buttons_scan_fn+0x17e>
		initial_run = false;
   167b4:	2200      	movs	r2, #0
   167b6:	701a      	strb	r2, [r3, #0]
   167b8:	e07b      	b.n	168b2 <buttons_scan_fn+0x18a>
	__asm__ volatile(
   167ba:	f04f 0320 	mov.w	r3, #32
   167be:	f3ef 8811 	mrs	r8, BASEPRI
   167c2:	f383 8811 	msr	BASEPRI, r3
   167c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   167ca:	4849      	ldr	r0, [pc, #292]	; (168f0 <buttons_scan_fn+0x1c8>)
   167cc:	f003 f91c 	bl	19a08 <z_spin_lock_valid>
   167d0:	b940      	cbnz	r0, 167e4 <buttons_scan_fn+0xbc>
   167d2:	4948      	ldr	r1, [pc, #288]	; (168f4 <buttons_scan_fn+0x1cc>)
   167d4:	4845      	ldr	r0, [pc, #276]	; (168ec <buttons_scan_fn+0x1c4>)
   167d6:	227c      	movs	r2, #124	; 0x7c
   167d8:	f004 f902 	bl	1a9e0 <printk>
   167dc:	217c      	movs	r1, #124	; 0x7c
   167de:	4845      	ldr	r0, [pc, #276]	; (168f4 <buttons_scan_fn+0x1cc>)
   167e0:	f004 fba4 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   167e4:	4842      	ldr	r0, [pc, #264]	; (168f0 <buttons_scan_fn+0x1c8>)
   167e6:	f003 f92b 	bl	19a40 <z_spin_lock_set_owner>
		switch (state) {
   167ea:	4b43      	ldr	r3, [pc, #268]	; (168f8 <buttons_scan_fn+0x1d0>)
   167ec:	781a      	ldrb	r2, [r3, #0]
   167ee:	2a01      	cmp	r2, #1
   167f0:	d126      	bne.n	16840 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   167f2:	2200      	movs	r2, #0
   167f4:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   167f6:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   167fa:	f856 0b04 	ldr.w	r0, [r6], #4
   167fe:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   16800:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   16804:	f7ff fed0 	bl	165a8 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16808:	3401      	adds	r4, #1
   1680a:	2c04      	cmp	r4, #4
   1680c:	4605      	mov	r5, r0
   1680e:	d001      	beq.n	16814 <buttons_scan_fn+0xec>
   16810:	2800      	cmp	r0, #0
   16812:	d0f0      	beq.n	167f6 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16814:	4836      	ldr	r0, [pc, #216]	; (168f0 <buttons_scan_fn+0x1c8>)
   16816:	f003 f905 	bl	19a24 <z_spin_unlock_valid>
   1681a:	b940      	cbnz	r0, 1682e <buttons_scan_fn+0x106>
   1681c:	4935      	ldr	r1, [pc, #212]	; (168f4 <buttons_scan_fn+0x1cc>)
   1681e:	4833      	ldr	r0, [pc, #204]	; (168ec <buttons_scan_fn+0x1c4>)
   16820:	22a7      	movs	r2, #167	; 0xa7
   16822:	f004 f8dd 	bl	1a9e0 <printk>
   16826:	21a7      	movs	r1, #167	; 0xa7
   16828:	4832      	ldr	r0, [pc, #200]	; (168f4 <buttons_scan_fn+0x1cc>)
   1682a:	f004 fb7f 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1682e:	f388 8811 	msr	BASEPRI, r8
   16832:	f3bf 8f6f 	isb	sy
		if (err) {
   16836:	2d00      	cmp	r5, #0
   16838:	d04f      	beq.n	168da <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   1683a:	2145      	movs	r1, #69	; 0x45
   1683c:	482f      	ldr	r0, [pc, #188]	; (168fc <buttons_scan_fn+0x1d4>)
   1683e:	e047      	b.n	168d0 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   16840:	22b4      	movs	r2, #180	; 0xb4
   16842:	492f      	ldr	r1, [pc, #188]	; (16900 <buttons_scan_fn+0x1d8>)
   16844:	4829      	ldr	r0, [pc, #164]	; (168ec <buttons_scan_fn+0x1c4>)
   16846:	f004 f8cb 	bl	1a9e0 <printk>
   1684a:	21b4      	movs	r1, #180	; 0xb4
   1684c:	482c      	ldr	r0, [pc, #176]	; (16900 <buttons_scan_fn+0x1d8>)
   1684e:	f004 fb6d 	bl	1af2c <assert_post_action>
		int err = 0;
   16852:	2500      	movs	r5, #0
			break;
   16854:	e7de      	b.n	16814 <buttons_scan_fn+0xec>
		if (val < 0) {
   16856:	da96      	bge.n	16786 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   16858:	2145      	movs	r1, #69	; 0x45
   1685a:	482a      	ldr	r0, [pc, #168]	; (16904 <buttons_scan_fn+0x1dc>)
   1685c:	f004 f8c0 	bl	1a9e0 <printk>
			return 0;
   16860:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16862:	4b29      	ldr	r3, [pc, #164]	; (16908 <buttons_scan_fn+0x1e0>)
   16864:	e8d3 2fef 	ldaex	r2, [r3]
   16868:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1686c:	2900      	cmp	r1, #0
   1686e:	d1f9      	bne.n	16864 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   16870:	4b26      	ldr	r3, [pc, #152]	; (1690c <buttons_scan_fn+0x1e4>)
   16872:	f8df 909c 	ldr.w	r9, [pc, #156]	; 16910 <buttons_scan_fn+0x1e8>
   16876:	781a      	ldrb	r2, [r3, #0]
   16878:	2a00      	cmp	r2, #0
   1687a:	d19b      	bne.n	167b4 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   1687c:	f8d9 3000 	ldr.w	r3, [r9]
   16880:	42a3      	cmp	r3, r4
   16882:	d016      	beq.n	168b2 <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   16884:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   16888:	4b22      	ldr	r3, [pc, #136]	; (16914 <buttons_scan_fn+0x1ec>)
   1688a:	681b      	ldr	r3, [r3, #0]
   1688c:	b113      	cbz	r3, 16894 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   1688e:	4641      	mov	r1, r8
   16890:	4620      	mov	r0, r4
   16892:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   16894:	f04f 33ff 	mov.w	r3, #4294967295
   16898:	f04f 32ff 	mov.w	r2, #4294967295
   1689c:	481e      	ldr	r0, [pc, #120]	; (16918 <buttons_scan_fn+0x1f0>)
   1689e:	f001 fc13 	bl	180c8 <z_impl_k_mutex_lock>
	return list->head;
   168a2:	4b1e      	ldr	r3, [pc, #120]	; (1691c <buttons_scan_fn+0x1f4>)
   168a4:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   168a6:	2d00      	cmp	r5, #0
   168a8:	f47f af75 	bne.w	16796 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   168ac:	481a      	ldr	r0, [pc, #104]	; (16918 <buttons_scan_fn+0x1f0>)
   168ae:	f001 fcd7 	bl	18260 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   168b2:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   168b6:	2c00      	cmp	r4, #0
   168b8:	f43f af7f 	beq.w	167ba <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   168bc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   168c0:	2300      	movs	r3, #0
   168c2:	4917      	ldr	r1, [pc, #92]	; (16920 <buttons_scan_fn+0x1f8>)
   168c4:	4817      	ldr	r0, [pc, #92]	; (16924 <buttons_scan_fn+0x1fc>)
   168c6:	f003 f915 	bl	19af4 <k_delayed_work_submit_to_queue>
		if (err) {
   168ca:	b130      	cbz	r0, 168da <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   168cc:	2145      	movs	r1, #69	; 0x45
   168ce:	4816      	ldr	r0, [pc, #88]	; (16928 <buttons_scan_fn+0x200>)
}
   168d0:	b003      	add	sp, #12
   168d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   168d6:	f004 b883 	b.w	1a9e0 <printk>
}
   168da:	b003      	add	sp, #12
   168dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e0:	2000a180 	.word	0x2000a180
   168e4:	0001ef28 	.word	0x0001ef28
   168e8:	00022307 	.word	0x00022307
   168ec:	0001faab 	.word	0x0001faab
   168f0:	2000a1d4 	.word	0x2000a1d4
   168f4:	0001fae5 	.word	0x0001fae5
   168f8:	2000ea5c 	.word	0x2000ea5c
   168fc:	000223c6 	.word	0x000223c6
   16900:	00022388 	.word	0x00022388
   16904:	0002234c 	.word	0x0002234c
   16908:	2000a1d8 	.word	0x2000a1d8
   1690c:	20008445 	.word	0x20008445
   16910:	2000a1bc 	.word	0x2000a1bc
   16914:	2000a190 	.word	0x2000a190
   16918:	2000a194 	.word	0x2000a194
   1691c:	2000a1a8 	.word	0x2000a1a8
   16920:	20009790 	.word	0x20009790
   16924:	200098e0 	.word	0x200098e0
   16928:	00022366 	.word	0x00022366

0001692c <button_pressed>:
{
   1692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1692e:	f04f 0320 	mov.w	r3, #32
   16932:	f3ef 8611 	mrs	r6, BASEPRI
   16936:	f383 8811 	msr	BASEPRI, r3
   1693a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1693e:	4827      	ldr	r0, [pc, #156]	; (169dc <button_pressed+0xb0>)
   16940:	f003 f862 	bl	19a08 <z_spin_lock_valid>
   16944:	b940      	cbnz	r0, 16958 <button_pressed+0x2c>
   16946:	4926      	ldr	r1, [pc, #152]	; (169e0 <button_pressed+0xb4>)
   16948:	4826      	ldr	r0, [pc, #152]	; (169e4 <button_pressed+0xb8>)
   1694a:	227c      	movs	r2, #124	; 0x7c
   1694c:	f004 f848 	bl	1a9e0 <printk>
   16950:	217c      	movs	r1, #124	; 0x7c
   16952:	4823      	ldr	r0, [pc, #140]	; (169e0 <button_pressed+0xb4>)
   16954:	f004 faea 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   16958:	4820      	ldr	r0, [pc, #128]	; (169dc <button_pressed+0xb0>)
   1695a:	f003 f871 	bl	19a40 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1695e:	2400      	movs	r4, #0
   16960:	4d21      	ldr	r5, [pc, #132]	; (169e8 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   16962:	4f22      	ldr	r7, [pc, #136]	; (169ec <button_pressed+0xc0>)
   16964:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   16968:	f855 0b04 	ldr.w	r0, [r5], #4
   1696c:	7919      	ldrb	r1, [r3, #4]
   1696e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16972:	3401      	adds	r4, #1
   16974:	f7ff fe18 	bl	165a8 <z_impl_gpio_pin_interrupt_configure>
   16978:	2c04      	cmp	r4, #4
   1697a:	d006      	beq.n	1698a <button_pressed+0x5e>
   1697c:	2800      	cmp	r0, #0
   1697e:	d0f1      	beq.n	16964 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   16980:	2145      	movs	r1, #69	; 0x45
   16982:	481b      	ldr	r0, [pc, #108]	; (169f0 <button_pressed+0xc4>)
   16984:	f004 f82c 	bl	1a9e0 <printk>
   16988:	e001      	b.n	1698e <button_pressed+0x62>
	if (err) {
   1698a:	2800      	cmp	r0, #0
   1698c:	d1f8      	bne.n	16980 <button_pressed+0x54>
	switch (state) {
   1698e:	4b19      	ldr	r3, [pc, #100]	; (169f4 <button_pressed+0xc8>)
   16990:	781a      	ldrb	r2, [r3, #0]
   16992:	b9ca      	cbnz	r2, 169c8 <button_pressed+0x9c>
		state = STATE_SCANNING;
   16994:	2201      	movs	r2, #1
   16996:	4918      	ldr	r1, [pc, #96]	; (169f8 <button_pressed+0xcc>)
   16998:	701a      	strb	r2, [r3, #0]
   1699a:	4818      	ldr	r0, [pc, #96]	; (169fc <button_pressed+0xd0>)
   1699c:	2221      	movs	r2, #33	; 0x21
   1699e:	2300      	movs	r3, #0
   169a0:	f003 f8a8 	bl	19af4 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   169a4:	480d      	ldr	r0, [pc, #52]	; (169dc <button_pressed+0xb0>)
   169a6:	f003 f83d 	bl	19a24 <z_spin_unlock_valid>
   169aa:	b940      	cbnz	r0, 169be <button_pressed+0x92>
   169ac:	490c      	ldr	r1, [pc, #48]	; (169e0 <button_pressed+0xb4>)
   169ae:	480d      	ldr	r0, [pc, #52]	; (169e4 <button_pressed+0xb8>)
   169b0:	22a7      	movs	r2, #167	; 0xa7
   169b2:	f004 f815 	bl	1a9e0 <printk>
   169b6:	21a7      	movs	r1, #167	; 0xa7
   169b8:	4809      	ldr	r0, [pc, #36]	; (169e0 <button_pressed+0xb4>)
   169ba:	f004 fab7 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   169be:	f386 8811 	msr	BASEPRI, r6
   169c2:	f3bf 8f6f 	isb	sy
}
   169c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   169c8:	22eb      	movs	r2, #235	; 0xeb
   169ca:	490d      	ldr	r1, [pc, #52]	; (16a00 <button_pressed+0xd4>)
   169cc:	4805      	ldr	r0, [pc, #20]	; (169e4 <button_pressed+0xb8>)
   169ce:	f004 f807 	bl	1a9e0 <printk>
   169d2:	21eb      	movs	r1, #235	; 0xeb
   169d4:	480a      	ldr	r0, [pc, #40]	; (16a00 <button_pressed+0xd4>)
   169d6:	f004 faa9 	bl	1af2c <assert_post_action>
		break;
   169da:	e7e3      	b.n	169a4 <button_pressed+0x78>
   169dc:	2000a1d4 	.word	0x2000a1d4
   169e0:	0001fae5 	.word	0x0001fae5
   169e4:	0001faab 	.word	0x0001faab
   169e8:	2000a180 	.word	0x2000a180
   169ec:	0001ef28 	.word	0x0001ef28
   169f0:	000223e3 	.word	0x000223e3
   169f4:	2000ea5c 	.word	0x2000ea5c
   169f8:	20009790 	.word	0x20009790
   169fc:	200098e0 	.word	0x200098e0
   16a00:	00022388 	.word	0x00022388

00016a04 <dk_leds_init>:
{
   16a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16a08:	2600      	movs	r6, #0
   16a0a:	4d23      	ldr	r5, [pc, #140]	; (16a98 <dk_leds_init+0x94>)
   16a0c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 16a9c <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16a10:	f8df a08c 	ldr.w	sl, [pc, #140]	; 16aa0 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   16a14:	6828      	ldr	r0, [r5, #0]
   16a16:	f001 f835 	bl	17a84 <z_impl_device_get_binding>
   16a1a:	4604      	mov	r4, r0
   16a1c:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   16a20:	b940      	cbnz	r0, 16a34 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   16a22:	2145      	movs	r1, #69	; 0x45
   16a24:	481f      	ldr	r0, [pc, #124]	; (16aa4 <dk_leds_init+0xa0>)
   16a26:	f003 ffdb 	bl	1a9e0 <printk>
			return -ENODEV;
   16a2a:	f06f 0412 	mvn.w	r4, #18
}
   16a2e:	4620      	mov	r0, r4
   16a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a34:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   16a36:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   16a3a:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16a3c:	fa03 f80b 	lsl.w	r8, r3, fp
   16a40:	6843      	ldr	r3, [r0, #4]
   16a42:	681b      	ldr	r3, [r3, #0]
   16a44:	ea18 0f03 	tst.w	r8, r3
   16a48:	d10a      	bne.n	16a60 <dk_leds_init+0x5c>
   16a4a:	4651      	mov	r1, sl
   16a4c:	4816      	ldr	r0, [pc, #88]	; (16aa8 <dk_leds_init+0xa4>)
   16a4e:	f44f 7211 	mov.w	r2, #580	; 0x244
   16a52:	f003 ffc5 	bl	1a9e0 <printk>
   16a56:	f44f 7111 	mov.w	r1, #580	; 0x244
   16a5a:	4650      	mov	r0, sl
   16a5c:	f004 fa66 	bl	1af2c <assert_post_action>
	return api->pin_configure(port, pin, flags);
   16a60:	68a3      	ldr	r3, [r4, #8]
   16a62:	4620      	mov	r0, r4
   16a64:	f44f 7200 	mov.w	r2, #512	; 0x200
   16a68:	4659      	mov	r1, fp
   16a6a:	681b      	ldr	r3, [r3, #0]
   16a6c:	4798      	blx	r3
	if (ret != 0) {
   16a6e:	4604      	mov	r4, r0
   16a70:	b968      	cbnz	r0, 16a8e <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16a72:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16a74:	3601      	adds	r6, #1
   16a76:	ea23 0308 	bic.w	r3, r3, r8
   16a7a:	2e04      	cmp	r6, #4
   16a7c:	603b      	str	r3, [r7, #0]
   16a7e:	f105 0508 	add.w	r5, r5, #8
   16a82:	d1c7      	bne.n	16a14 <dk_leds_init+0x10>
}
   16a84:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a88:	210f      	movs	r1, #15
   16a8a:	f7ff be1f 	b.w	166cc <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   16a8e:	2145      	movs	r1, #69	; 0x45
   16a90:	4806      	ldr	r0, [pc, #24]	; (16aac <dk_leds_init+0xa8>)
   16a92:	f003 ffa5 	bl	1a9e0 <printk>
			return err;
   16a96:	e7ca      	b.n	16a2e <dk_leds_init+0x2a>
   16a98:	0001ef48 	.word	0x0001ef48
   16a9c:	2000a1c4 	.word	0x2000a1c4
   16aa0:	00022307 	.word	0x00022307
   16aa4:	00022401 	.word	0x00022401
   16aa8:	0001faab 	.word	0x0001faab
   16aac:	0002241e 	.word	0x0002241e

00016ab0 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16ab0:	4b05      	ldr	r3, [pc, #20]	; (16ac8 <dk_read_buttons+0x18>)
   16ab2:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   16ab6:	b100      	cbz	r0, 16aba <dk_read_buttons+0xa>
		*button_state = current_state;
   16ab8:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   16aba:	4804      	ldr	r0, [pc, #16]	; (16acc <dk_read_buttons+0x1c>)
   16abc:	b111      	cbz	r1, 16ac4 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   16abe:	6802      	ldr	r2, [r0, #0]
   16ac0:	405a      	eors	r2, r3
   16ac2:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   16ac4:	6003      	str	r3, [r0, #0]
}
   16ac6:	4770      	bx	lr
   16ac8:	2000a1d8 	.word	0x2000a1d8
   16acc:	2000a1c0 	.word	0x2000a1c0

00016ad0 <dk_buttons_init>:
	button_handler_cb = button_handler;
   16ad0:	4b4f      	ldr	r3, [pc, #316]	; (16c10 <dk_buttons_init+0x140>)
{
   16ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   16ad6:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   16ad8:	4e4e      	ldr	r6, [pc, #312]	; (16c14 <dk_buttons_init+0x144>)
   16ada:	484f      	ldr	r0, [pc, #316]	; (16c18 <dk_buttons_init+0x148>)
   16adc:	f007 fa16 	bl	1df0c <z_impl_k_mutex_init>
   16ae0:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16ae2:	2700      	movs	r7, #0
   16ae4:	4d4d      	ldr	r5, [pc, #308]	; (16c1c <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16ae6:	f8df a138 	ldr.w	sl, [pc, #312]	; 16c20 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   16aea:	6828      	ldr	r0, [r5, #0]
   16aec:	f000 ffca 	bl	17a84 <z_impl_device_get_binding>
   16af0:	4604      	mov	r4, r0
   16af2:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   16af6:	b948      	cbnz	r0, 16b0c <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   16af8:	2145      	movs	r1, #69	; 0x45
   16afa:	484a      	ldr	r0, [pc, #296]	; (16c24 <dk_buttons_init+0x154>)
   16afc:	f003 ff70 	bl	1a9e0 <printk>
			return -ENODEV;
   16b00:	f06f 0412 	mvn.w	r4, #18
}
   16b04:	4620      	mov	r0, r4
   16b06:	b003      	add	sp, #12
   16b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b0c:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   16b0e:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   16b12:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16b16:	fa03 f30b 	lsl.w	r3, r3, fp
   16b1a:	9301      	str	r3, [sp, #4]
   16b1c:	6843      	ldr	r3, [r0, #4]
   16b1e:	9a01      	ldr	r2, [sp, #4]
   16b20:	681b      	ldr	r3, [r3, #0]
   16b22:	421a      	tst	r2, r3
   16b24:	d10a      	bne.n	16b3c <dk_buttons_init+0x6c>
   16b26:	4651      	mov	r1, sl
   16b28:	483f      	ldr	r0, [pc, #252]	; (16c28 <dk_buttons_init+0x158>)
   16b2a:	f44f 7211 	mov.w	r2, #580	; 0x244
   16b2e:	f003 ff57 	bl	1a9e0 <printk>
   16b32:	f44f 7111 	mov.w	r1, #580	; 0x244
   16b36:	4650      	mov	r0, sl
   16b38:	f004 f9f8 	bl	1af2c <assert_post_action>
	return api->pin_configure(port, pin, flags);
   16b3c:	68a3      	ldr	r3, [r4, #8]
   16b3e:	4620      	mov	r0, r4
   16b40:	f44f 7288 	mov.w	r2, #272	; 0x110
   16b44:	4659      	mov	r1, fp
   16b46:	681b      	ldr	r3, [r3, #0]
   16b48:	4798      	blx	r3
	if (ret != 0) {
   16b4a:	4604      	mov	r4, r0
   16b4c:	bb08      	cbnz	r0, 16b92 <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16b4e:	f8d8 3000 	ldr.w	r3, [r8]
   16b52:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16b54:	3701      	adds	r7, #1
   16b56:	ea23 0302 	bic.w	r3, r3, r2
   16b5a:	2f04      	cmp	r7, #4
   16b5c:	f8c8 3000 	str.w	r3, [r8]
   16b60:	f105 0508 	add.w	r5, r5, #8
   16b64:	d1c1      	bne.n	16aea <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16b66:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   16b68:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   16b6a:	f04f 0a01 	mov.w	sl, #1
   16b6e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 16c14 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   16b72:	4b2a      	ldr	r3, [pc, #168]	; (16c1c <dk_buttons_init+0x14c>)
   16b74:	f859 0b04 	ldr.w	r0, [r9], #4
   16b78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   16b7c:	791f      	ldrb	r7, [r3, #4]
   16b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16b82:	4639      	mov	r1, r7
   16b84:	f7ff fd10 	bl	165a8 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   16b88:	4604      	mov	r4, r0
   16b8a:	b138      	cbz	r0, 16b9c <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   16b8c:	2145      	movs	r1, #69	; 0x45
   16b8e:	4827      	ldr	r0, [pc, #156]	; (16c2c <dk_buttons_init+0x15c>)
   16b90:	e001      	b.n	16b96 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   16b92:	2145      	movs	r1, #69	; 0x45
   16b94:	4826      	ldr	r0, [pc, #152]	; (16c30 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   16b96:	f003 ff23 	bl	1a9e0 <printk>
		return err;
   16b9a:	e7b3      	b.n	16b04 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16b9c:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   16b9e:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16ba2:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   16ba4:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16ba8:	d1e3      	bne.n	16b72 <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16baa:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   16bac:	4f21      	ldr	r7, [pc, #132]	; (16c34 <dk_buttons_init+0x164>)
   16bae:	4b22      	ldr	r3, [pc, #136]	; (16c38 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   16bb0:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   16bb4:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   16bb8:	6883      	ldr	r3, [r0, #8]
   16bba:	69db      	ldr	r3, [r3, #28]
   16bbc:	b13b      	cbz	r3, 16bce <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   16bbe:	2201      	movs	r2, #1
   16bc0:	4639      	mov	r1, r7
   16bc2:	4798      	blx	r3
		if (err) {
   16bc4:	4604      	mov	r4, r0
   16bc6:	b128      	cbz	r0, 16bd4 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   16bc8:	2145      	movs	r1, #69	; 0x45
   16bca:	481c      	ldr	r0, [pc, #112]	; (16c3c <dk_buttons_init+0x16c>)
   16bcc:	e7e3      	b.n	16b96 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   16bce:	f06f 0422 	mvn.w	r4, #34	; 0x22
   16bd2:	e7f9      	b.n	16bc8 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16bd4:	3501      	adds	r5, #1
   16bd6:	2d04      	cmp	r5, #4
   16bd8:	d1ec      	bne.n	16bb4 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16bda:	4d19      	ldr	r5, [pc, #100]	; (16c40 <dk_buttons_init+0x170>)
   16bdc:	4601      	mov	r1, r0
   16bde:	2230      	movs	r2, #48	; 0x30
   16be0:	4628      	mov	r0, r5
   16be2:	f005 f952 	bl	1be8a <memset>
	state = STATE_SCANNING;
   16be6:	2201      	movs	r2, #1
   16be8:	4b16      	ldr	r3, [pc, #88]	; (16c44 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16bea:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16bec:	606b      	str	r3, [r5, #4]
   16bee:	4b16      	ldr	r3, [pc, #88]	; (16c48 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16bf0:	4816      	ldr	r0, [pc, #88]	; (16c4c <dk_buttons_init+0x17c>)
   16bf2:	701a      	strb	r2, [r3, #0]
   16bf4:	2200      	movs	r2, #0
   16bf6:	2300      	movs	r3, #0
   16bf8:	f002 ff7c 	bl	19af4 <k_delayed_work_submit_to_queue>
	if (err) {
   16bfc:	4604      	mov	r4, r0
   16bfe:	b110      	cbz	r0, 16c06 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   16c00:	2145      	movs	r1, #69	; 0x45
   16c02:	4813      	ldr	r0, [pc, #76]	; (16c50 <dk_buttons_init+0x180>)
   16c04:	e7c7      	b.n	16b96 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   16c06:	4601      	mov	r1, r0
   16c08:	f7ff ff52 	bl	16ab0 <dk_read_buttons>
	return 0;
   16c0c:	e77a      	b.n	16b04 <dk_buttons_init+0x34>
   16c0e:	bf00      	nop
   16c10:	2000a190 	.word	0x2000a190
   16c14:	2000a180 	.word	0x2000a180
   16c18:	2000a194 	.word	0x2000a194
   16c1c:	0001ef28 	.word	0x0001ef28
   16c20:	00022307 	.word	0x00022307
   16c24:	00022401 	.word	0x00022401
   16c28:	0001faab 	.word	0x0001faab
   16c2c:	0002245f 	.word	0x0002245f
   16c30:	0002243d 	.word	0x0002243d
   16c34:	2000a1b0 	.word	0x2000a1b0
   16c38:	0001692d 	.word	0x0001692d
   16c3c:	0002247f 	.word	0x0002247f
   16c40:	20009790 	.word	0x20009790
   16c44:	00016729 	.word	0x00016729
   16c48:	2000ea5c 	.word	0x2000ea5c
   16c4c:	200098e0 	.word	0x200098e0
   16c50:	00022366 	.word	0x00022366

00016c54 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   16c54:	2804      	cmp	r0, #4
{
   16c56:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   16c58:	d907      	bls.n	16c6a <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   16c5a:	2145      	movs	r1, #69	; 0x45
   16c5c:	480d      	ldr	r0, [pc, #52]	; (16c94 <dk_set_led+0x40>)
   16c5e:	f003 febf 	bl	1a9e0 <printk>
   16c62:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   16c66:	4620      	mov	r0, r4
   16c68:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   16c6a:	fab1 f281 	clz	r2, r1
   16c6e:	4b0a      	ldr	r3, [pc, #40]	; (16c98 <dk_set_led+0x44>)
   16c70:	0952      	lsrs	r2, r2, #5
   16c72:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   16c76:	7919      	ldrb	r1, [r3, #4]
   16c78:	4b08      	ldr	r3, [pc, #32]	; (16c9c <dk_set_led+0x48>)
   16c7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16c7e:	f7ff fd01 	bl	16684 <gpio_pin_set_raw>
	if (err) {
   16c82:	4604      	mov	r4, r0
   16c84:	2800      	cmp	r0, #0
   16c86:	d0ee      	beq.n	16c66 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   16c88:	2145      	movs	r1, #69	; 0x45
   16c8a:	4805      	ldr	r0, [pc, #20]	; (16ca0 <dk_set_led+0x4c>)
   16c8c:	f003 fea8 	bl	1a9e0 <printk>
   16c90:	e7e9      	b.n	16c66 <dk_set_led+0x12>
   16c92:	bf00      	nop
   16c94:	00022498 	.word	0x00022498
   16c98:	0001ef48 	.word	0x0001ef48
   16c9c:	2000a1c4 	.word	0x2000a1c4
   16ca0:	00022331 	.word	0x00022331

00016ca4 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   16ca4:	4803      	ldr	r0, [pc, #12]	; (16cb4 <k_sys_fatal_error_handler+0x10>)
   16ca6:	2145      	movs	r1, #69	; 0x45
{
   16ca8:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   16caa:	f003 fe99 	bl	1a9e0 <printk>
	sys_arch_reboot(0);
   16cae:	2000      	movs	r0, #0
   16cb0:	f7f7 fa68 	bl	e184 <sys_arch_reboot>

	CODE_UNREACHABLE;
   16cb4:	000224cc 	.word	0x000224cc

00016cb8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   16cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16cbc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   16cbe:	4c21      	ldr	r4, [pc, #132]	; (16d44 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   16cc0:	4e21      	ldr	r6, [pc, #132]	; (16d48 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16cc2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   16cc6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 16d4c <check_ext_api_requests+0x94>
{
   16cca:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16ccc:	45a8      	cmp	r8, r5
   16cce:	d803      	bhi.n	16cd8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   16cd0:	2000      	movs	r0, #0
   16cd2:	b005      	add	sp, #20
   16cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   16cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16cda:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16cde:	681f      	ldr	r7, [r3, #0]
   16ce0:	ab01      	add	r3, sp, #4
   16ce2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   16ce6:	220c      	movs	r2, #12
   16ce8:	4619      	mov	r1, r3
   16cea:	4638      	mov	r0, r7
   16cec:	f005 f891 	bl	1be12 <memcmp>
   16cf0:	b990      	cbnz	r0, 16d18 <check_ext_api_requests+0x60>
   16cf2:	b18f      	cbz	r7, 16d18 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   16cf6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16cf8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   16cfa:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16cfc:	4291      	cmp	r1, r2
   16cfe:	d10b      	bne.n	16d18 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   16d00:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   16d02:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   16d04:	4291      	cmp	r1, r2
   16d06:	d807      	bhi.n	16d18 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   16d08:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   16d0a:	4291      	cmp	r1, r2
   16d0c:	d904      	bls.n	16d18 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   16d0e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16d10:	695b      	ldr	r3, [r3, #20]
   16d12:	ea32 0303 	bics.w	r3, r2, r3
   16d16:	d00a      	beq.n	16d2e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   16d18:	6a27      	ldr	r7, [r4, #32]
   16d1a:	b167      	cbz	r7, 16d36 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   16d1c:	480c      	ldr	r0, [pc, #48]	; (16d50 <check_ext_api_requests+0x98>)
   16d1e:	f003 fe5f 	bl	1a9e0 <printk>
			k_panic();
   16d22:	4040      	eors	r0, r0
   16d24:	f380 8811 	msr	BASEPRI, r0
   16d28:	f04f 0004 	mov.w	r0, #4
   16d2c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   16d2e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16d30:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   16d32:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16d34:	e7ca      	b.n	16ccc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   16d36:	4648      	mov	r0, r9
   16d38:	f003 fe52 	bl	1a9e0 <printk>
			*ext_api_req->ext_api = NULL;
   16d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16d3e:	601f      	str	r7, [r3, #0]
   16d40:	e7f5      	b.n	16d2e <check_ext_api_requests+0x76>
   16d42:	bf00      	nop
   16d44:	0000823c 	.word	0x0000823c
   16d48:	0001e710 	.word	0x0001e710
   16d4c:	00022517 	.word	0x00022517
   16d50:	000224ee 	.word	0x000224ee

00016d54 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   16d54:	4b04      	ldr	r3, [pc, #16]	; (16d68 <SystemCoreClockUpdate+0x14>)
   16d56:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   16d5a:	4b04      	ldr	r3, [pc, #16]	; (16d6c <SystemCoreClockUpdate+0x18>)
   16d5c:	f002 0203 	and.w	r2, r2, #3
   16d60:	40d3      	lsrs	r3, r2
   16d62:	4a03      	ldr	r2, [pc, #12]	; (16d70 <SystemCoreClockUpdate+0x1c>)
   16d64:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   16d66:	4770      	bx	lr
   16d68:	40005000 	.word	0x40005000
   16d6c:	07a12000 	.word	0x07a12000
   16d70:	200083f4 	.word	0x200083f4

00016d74 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   16d74:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   16d76:	4604      	mov	r4, r0
   16d78:	b940      	cbnz	r0, 16d8c <nrfx_clock_init+0x18>
   16d7a:	4909      	ldr	r1, [pc, #36]	; (16da0 <nrfx_clock_init+0x2c>)
   16d7c:	4809      	ldr	r0, [pc, #36]	; (16da4 <nrfx_clock_init+0x30>)
   16d7e:	22b3      	movs	r2, #179	; 0xb3
   16d80:	f003 fe2e 	bl	1a9e0 <printk>
   16d84:	21b3      	movs	r1, #179	; 0xb3
   16d86:	4806      	ldr	r0, [pc, #24]	; (16da0 <nrfx_clock_init+0x2c>)
   16d88:	f004 f8d0 	bl	1af2c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16d8c:	4b06      	ldr	r3, [pc, #24]	; (16da8 <nrfx_clock_init+0x34>)
   16d8e:	791a      	ldrb	r2, [r3, #4]
   16d90:	b922      	cbnz	r2, 16d9c <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   16d92:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   16d94:	4805      	ldr	r0, [pc, #20]	; (16dac <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   16d96:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   16d98:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16d9a:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16d9c:	4804      	ldr	r0, [pc, #16]	; (16db0 <nrfx_clock_init+0x3c>)
    return err_code;
   16d9e:	e7fc      	b.n	16d9a <nrfx_clock_init+0x26>
   16da0:	0002254a 	.word	0x0002254a
   16da4:	0001faab 	.word	0x0001faab
   16da8:	2000a1dc 	.word	0x2000a1dc
   16dac:	0bad0000 	.word	0x0bad0000
   16db0:	0bad000c 	.word	0x0bad000c

00016db4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   16db4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16db6:	4b0d      	ldr	r3, [pc, #52]	; (16dec <nrfx_clock_enable+0x38>)
   16db8:	791b      	ldrb	r3, [r3, #4]
   16dba:	b943      	cbnz	r3, 16dce <nrfx_clock_enable+0x1a>
   16dbc:	490c      	ldr	r1, [pc, #48]	; (16df0 <nrfx_clock_enable+0x3c>)
   16dbe:	480d      	ldr	r0, [pc, #52]	; (16df4 <nrfx_clock_enable+0x40>)
   16dc0:	22cc      	movs	r2, #204	; 0xcc
   16dc2:	f003 fe0d 	bl	1a9e0 <printk>
   16dc6:	21cc      	movs	r1, #204	; 0xcc
   16dc8:	4809      	ldr	r0, [pc, #36]	; (16df0 <nrfx_clock_enable+0x3c>)
   16dca:	f004 f8af 	bl	1af2c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   16dce:	2005      	movs	r0, #5
   16dd0:	f7f6 fecc 	bl	db6c <arch_irq_is_enabled>
   16dd4:	b910      	cbnz	r0, 16ddc <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   16dd6:	2005      	movs	r0, #5
   16dd8:	f7f6 feb8 	bl	db4c <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   16ddc:	2201      	movs	r2, #1
   16dde:	4b06      	ldr	r3, [pc, #24]	; (16df8 <nrfx_clock_enable+0x44>)
   16de0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   16de4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   16de8:	bd08      	pop	{r3, pc}
   16dea:	bf00      	nop
   16dec:	2000a1dc 	.word	0x2000a1dc
   16df0:	0002254a 	.word	0x0002254a
   16df4:	0001faab 	.word	0x0001faab
   16df8:	40005000 	.word	0x40005000

00016dfc <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16dfc:	4b30      	ldr	r3, [pc, #192]	; (16ec0 <nrfx_clock_start+0xc4>)
{
   16dfe:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16e00:	791b      	ldrb	r3, [r3, #4]
{
   16e02:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16e04:	b953      	cbnz	r3, 16e1c <nrfx_clock_start+0x20>
   16e06:	492f      	ldr	r1, [pc, #188]	; (16ec4 <nrfx_clock_start+0xc8>)
   16e08:	482f      	ldr	r0, [pc, #188]	; (16ec8 <nrfx_clock_start+0xcc>)
   16e0a:	f44f 7284 	mov.w	r2, #264	; 0x108
   16e0e:	f003 fde7 	bl	1a9e0 <printk>
   16e12:	f44f 7184 	mov.w	r1, #264	; 0x108
   16e16:	482b      	ldr	r0, [pc, #172]	; (16ec4 <nrfx_clock_start+0xc8>)
   16e18:	f004 f888 	bl	1af2c <assert_post_action>
    switch (domain)
   16e1c:	2c03      	cmp	r4, #3
   16e1e:	d842      	bhi.n	16ea6 <nrfx_clock_start+0xaa>
   16e20:	e8df f004 	tbb	[pc, r4]
   16e24:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16e28:	4b28      	ldr	r3, [pc, #160]	; (16ecc <nrfx_clock_start+0xd0>)
   16e2a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16e2e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   16e32:	03c9      	lsls	r1, r1, #15
   16e34:	d510      	bpl.n	16e58 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16e36:	f002 0203 	and.w	r2, r2, #3
   16e3a:	2a02      	cmp	r2, #2
   16e3c:	d10c      	bne.n	16e58 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16e3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16e42:	2200      	movs	r2, #0
   16e44:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16e48:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   16e4c:	2202      	movs	r2, #2
   16e4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e52:	2201      	movs	r2, #1
   16e54:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   16e56:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   16e58:	2201      	movs	r2, #1
   16e5a:	e7f0      	b.n	16e3e <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16e5c:	2200      	movs	r2, #0
   16e5e:	4b1b      	ldr	r3, [pc, #108]	; (16ecc <nrfx_clock_start+0xd0>)
   16e60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16e64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16e68:	2201      	movs	r2, #1
   16e6a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e6e:	601a      	str	r2, [r3, #0]
}
   16e70:	e7f1      	b.n	16e56 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16e72:	2200      	movs	r2, #0
   16e74:	4b15      	ldr	r3, [pc, #84]	; (16ecc <nrfx_clock_start+0xd0>)
   16e76:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16e7a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   16e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
   16e82:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e86:	2201      	movs	r2, #1
   16e88:	621a      	str	r2, [r3, #32]
}
   16e8a:	e7e4      	b.n	16e56 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16e8c:	2200      	movs	r2, #0
   16e8e:	4b0f      	ldr	r3, [pc, #60]	; (16ecc <nrfx_clock_start+0xd0>)
   16e90:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16e94:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   16e98:	f44f 7280 	mov.w	r2, #256	; 0x100
   16e9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ea0:	2201      	movs	r2, #1
   16ea2:	619a      	str	r2, [r3, #24]
}
   16ea4:	e7d7      	b.n	16e56 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   16ea6:	4907      	ldr	r1, [pc, #28]	; (16ec4 <nrfx_clock_start+0xc8>)
   16ea8:	4807      	ldr	r0, [pc, #28]	; (16ec8 <nrfx_clock_start+0xcc>)
   16eaa:	f44f 729d 	mov.w	r2, #314	; 0x13a
   16eae:	f003 fd97 	bl	1a9e0 <printk>
}
   16eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   16eb6:	f44f 719d 	mov.w	r1, #314	; 0x13a
   16eba:	4802      	ldr	r0, [pc, #8]	; (16ec4 <nrfx_clock_start+0xc8>)
   16ebc:	f004 b836 	b.w	1af2c <assert_post_action>
   16ec0:	2000a1dc 	.word	0x2000a1dc
   16ec4:	0002254a 	.word	0x0002254a
   16ec8:	0001faab 	.word	0x0001faab
   16ecc:	40005000 	.word	0x40005000

00016ed0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16ed0:	4b42      	ldr	r3, [pc, #264]	; (16fdc <nrfx_clock_stop+0x10c>)
{
   16ed2:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16ed4:	791b      	ldrb	r3, [r3, #4]
{
   16ed6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16ed8:	b953      	cbnz	r3, 16ef0 <nrfx_clock_stop+0x20>
   16eda:	4941      	ldr	r1, [pc, #260]	; (16fe0 <nrfx_clock_stop+0x110>)
   16edc:	4841      	ldr	r0, [pc, #260]	; (16fe4 <nrfx_clock_stop+0x114>)
   16ede:	f240 1241 	movw	r2, #321	; 0x141
   16ee2:	f003 fd7d 	bl	1a9e0 <printk>
   16ee6:	f240 1141 	movw	r1, #321	; 0x141
   16eea:	483d      	ldr	r0, [pc, #244]	; (16fe0 <nrfx_clock_stop+0x110>)
   16eec:	f004 f81e 	bl	1af2c <assert_post_action>
    switch (domain)
   16ef0:	2c03      	cmp	r4, #3
   16ef2:	d856      	bhi.n	16fa2 <nrfx_clock_stop+0xd2>
   16ef4:	e8df f004 	tbb	[pc, r4]
   16ef8:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   16efc:	2202      	movs	r2, #2
   16efe:	4b3a      	ldr	r3, [pc, #232]	; (16fe8 <nrfx_clock_stop+0x118>)
   16f00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f04:	2200      	movs	r2, #0
   16f06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16f0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f0e:	2201      	movs	r2, #1
   16f10:	60da      	str	r2, [r3, #12]
   16f12:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16f16:	4e34      	ldr	r6, [pc, #208]	; (16fe8 <nrfx_clock_stop+0x118>)
    switch (domain)
   16f18:	2c02      	cmp	r4, #2
   16f1a:	d04f      	beq.n	16fbc <nrfx_clock_stop+0xec>
   16f1c:	2c03      	cmp	r4, #3
   16f1e:	d050      	beq.n	16fc2 <nrfx_clock_stop+0xf2>
   16f20:	2c00      	cmp	r4, #0
   16f22:	d151      	bne.n	16fc8 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16f24:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16f28:	03db      	lsls	r3, r3, #15
   16f2a:	d51f      	bpl.n	16f6c <nrfx_clock_stop+0x9c>
   16f2c:	2001      	movs	r0, #1
   16f2e:	f006 fbca 	bl	1d6c6 <nrfx_busy_wait>
   16f32:	3d01      	subs	r5, #1
   16f34:	d1f0      	bne.n	16f18 <nrfx_clock_stop+0x48>
   16f36:	e019      	b.n	16f6c <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   16f38:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f3a:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f3c:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   16f40:	4c29      	ldr	r4, [pc, #164]	; (16fe8 <nrfx_clock_stop+0x118>)
   16f42:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f46:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16f4a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f4e:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16f50:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16f54:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16f58:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16f5c:	03d2      	lsls	r2, r2, #15
   16f5e:	d505      	bpl.n	16f6c <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   16f60:	b123      	cbz	r3, 16f6c <nrfx_clock_stop+0x9c>
   16f62:	2001      	movs	r0, #1
   16f64:	f006 fbaf 	bl	1d6c6 <nrfx_busy_wait>
   16f68:	3d01      	subs	r5, #1
   16f6a:	d1f1      	bne.n	16f50 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   16f6c:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   16f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
   16f72:	4b1d      	ldr	r3, [pc, #116]	; (16fe8 <nrfx_clock_stop+0x118>)
   16f74:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f78:	2200      	movs	r2, #0
   16f7a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16f7e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f82:	2201      	movs	r2, #1
   16f84:	625a      	str	r2, [r3, #36]	; 0x24
}
   16f86:	e7c4      	b.n	16f12 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   16f88:	f44f 7280 	mov.w	r2, #256	; 0x100
   16f8c:	4b16      	ldr	r3, [pc, #88]	; (16fe8 <nrfx_clock_stop+0x118>)
   16f8e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f92:	2200      	movs	r2, #0
   16f94:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16f98:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f9c:	2201      	movs	r2, #1
   16f9e:	61da      	str	r2, [r3, #28]
}
   16fa0:	e7b7      	b.n	16f12 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   16fa2:	490f      	ldr	r1, [pc, #60]	; (16fe0 <nrfx_clock_stop+0x110>)
   16fa4:	480f      	ldr	r0, [pc, #60]	; (16fe4 <nrfx_clock_stop+0x114>)
   16fa6:	f240 125d 	movw	r2, #349	; 0x15d
   16faa:	f003 fd19 	bl	1a9e0 <printk>
   16fae:	f240 115d 	movw	r1, #349	; 0x15d
   16fb2:	480b      	ldr	r0, [pc, #44]	; (16fe0 <nrfx_clock_stop+0x110>)
}
   16fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   16fb8:	f003 bfb8 	b.w	1af2c <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16fbc:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   16fc0:	e7b2      	b.n	16f28 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   16fc2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   16fc6:	e7af      	b.n	16f28 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   16fc8:	4908      	ldr	r1, [pc, #32]	; (16fec <nrfx_clock_stop+0x11c>)
   16fca:	4806      	ldr	r0, [pc, #24]	; (16fe4 <nrfx_clock_stop+0x114>)
   16fcc:	f240 3242 	movw	r2, #834	; 0x342
   16fd0:	f003 fd06 	bl	1a9e0 <printk>
   16fd4:	f240 3142 	movw	r1, #834	; 0x342
   16fd8:	4804      	ldr	r0, [pc, #16]	; (16fec <nrfx_clock_stop+0x11c>)
   16fda:	e7eb      	b.n	16fb4 <nrfx_clock_stop+0xe4>
   16fdc:	2000a1dc 	.word	0x2000a1dc
   16fe0:	0002254a 	.word	0x0002254a
   16fe4:	0001faab 	.word	0x0001faab
   16fe8:	40005000 	.word	0x40005000
   16fec:	00022587 	.word	0x00022587

00016ff0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16ff0:	4b28      	ldr	r3, [pc, #160]	; (17094 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16ff2:	b510      	push	{r4, lr}
   16ff4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   16ff8:	b152      	cbz	r2, 17010 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16ffa:	2000      	movs	r0, #0
   16ffc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   17000:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   17004:	2201      	movs	r2, #1
   17006:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1700a:	4b23      	ldr	r3, [pc, #140]	; (17098 <nrfx_power_clock_irq_handler+0xa8>)
   1700c:	681b      	ldr	r3, [r3, #0]
   1700e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17010:	4b20      	ldr	r3, [pc, #128]	; (17094 <nrfx_power_clock_irq_handler+0xa4>)
   17012:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   17016:	b18a      	cbz	r2, 1703c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17018:	2200      	movs	r2, #0
   1701a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1701e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17022:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17026:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1702a:	f002 0203 	and.w	r2, r2, #3
   1702e:	2a01      	cmp	r2, #1
   17030:	f04f 0102 	mov.w	r1, #2
   17034:	d126      	bne.n	17084 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   17036:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1703a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1703c:	4b15      	ldr	r3, [pc, #84]	; (17094 <nrfx_power_clock_irq_handler+0xa4>)
   1703e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   17042:	b162      	cbz	r2, 1705e <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17044:	2200      	movs	r2, #0
   17046:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1704a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1704e:	f44f 7280 	mov.w	r2, #256	; 0x100
   17052:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   17056:	4b10      	ldr	r3, [pc, #64]	; (17098 <nrfx_power_clock_irq_handler+0xa8>)
   17058:	2004      	movs	r0, #4
   1705a:	681b      	ldr	r3, [r3, #0]
   1705c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1705e:	4b0d      	ldr	r3, [pc, #52]	; (17094 <nrfx_power_clock_irq_handler+0xa4>)
   17060:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   17064:	b1aa      	cbz	r2, 17092 <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   17066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1706a:	2200      	movs	r2, #0
   1706c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   17070:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   17074:	f44f 7200 	mov.w	r2, #512	; 0x200
   17078:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1707c:	4b06      	ldr	r3, [pc, #24]	; (17098 <nrfx_power_clock_irq_handler+0xa8>)
   1707e:	2005      	movs	r0, #5
   17080:	681b      	ldr	r3, [r3, #0]
   17082:	4718      	bx	r3
   17084:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   17088:	4b03      	ldr	r3, [pc, #12]	; (17098 <nrfx_power_clock_irq_handler+0xa8>)
   1708a:	2001      	movs	r0, #1
   1708c:	681b      	ldr	r3, [r3, #0]
   1708e:	4798      	blx	r3
   17090:	e7d4      	b.n	1703c <nrfx_power_clock_irq_handler+0x4c>
}
   17092:	bd10      	pop	{r4, pc}
   17094:	40005000 	.word	0x40005000
   17098:	2000a1dc 	.word	0x2000a1dc

0001709c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1709c:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   1709e:	4c0a      	ldr	r4, [pc, #40]	; (170c8 <nrfx_dppi_channel_alloc+0x2c>)
   170a0:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   170a2:	43ce      	mvns	r6, r1
   170a4:	d00e      	beq.n	170c4 <nrfx_dppi_channel_alloc+0x28>
   170a6:	2300      	movs	r3, #0
   170a8:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   170aa:	fa26 f502 	lsr.w	r5, r6, r2
   170ae:	07ed      	lsls	r5, r5, #31
   170b0:	f103 0301 	add.w	r3, r3, #1
   170b4:	d5f8      	bpl.n	170a8 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   170b6:	2301      	movs	r3, #1
   170b8:	4093      	lsls	r3, r2
   170ba:	430b      	orrs	r3, r1
    *p_channel = channel;
   170bc:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   170be:	4803      	ldr	r0, [pc, #12]	; (170cc <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   170c0:	6023      	str	r3, [r4, #0]
}
   170c2:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   170c4:	4802      	ldr	r0, [pc, #8]	; (170d0 <nrfx_dppi_channel_alloc+0x34>)
   170c6:	e7fc      	b.n	170c2 <nrfx_dppi_channel_alloc+0x26>
   170c8:	2000a1e4 	.word	0x2000a1e4
   170cc:	0bad0000 	.word	0x0bad0000
   170d0:	0bad0002 	.word	0x0bad0002

000170d4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   170d4:	2301      	movs	r3, #1
   170d6:	fa03 f000 	lsl.w	r0, r3, r0
   170da:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   170dc:	b193      	cbz	r3, 17104 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   170de:	f04f 0320 	mov.w	r3, #32
   170e2:	f3ef 8111 	mrs	r1, BASEPRI
   170e6:	f383 8811 	msr	BASEPRI, r3
   170ea:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   170ee:	4a06      	ldr	r2, [pc, #24]	; (17108 <nrfx_gpiote_channel_free+0x34>)
   170f0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   170f2:	ea23 0000 	bic.w	r0, r3, r0
   170f6:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   170f8:	f381 8811 	msr	BASEPRI, r1
   170fc:	f3bf 8f6f 	isb	sy
   17100:	4802      	ldr	r0, [pc, #8]	; (1710c <nrfx_gpiote_channel_free+0x38>)
   17102:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   17104:	4802      	ldr	r0, [pc, #8]	; (17110 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17106:	4770      	bx	lr
   17108:	2000a1e8 	.word	0x2000a1e8
   1710c:	0bad0000 	.word	0x0bad0000
   17110:	0bad0004 	.word	0x0bad0004

00017114 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   17114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   17118:	22ff      	movs	r2, #255	; 0xff
{
   1711a:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   1711c:	2601      	movs	r6, #1
{
   1711e:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   17120:	f8df e054 	ldr.w	lr, [pc, #84]	; 17178 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   17124:	4815      	ldr	r0, [pc, #84]	; (1717c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   17126:	f8df 8058 	ldr.w	r8, [pc, #88]	; 17180 <nrfx_gpiote_channel_alloc+0x6c>
   1712a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1712c:	f04f 0120 	mov.w	r1, #32
   17130:	f3ef 8c11 	mrs	ip, BASEPRI
   17134:	f381 8811 	msr	BASEPRI, r1
   17138:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1713c:	fa22 f103 	lsr.w	r1, r2, r3
   17140:	07c9      	lsls	r1, r1, #31
   17142:	d50a      	bpl.n	1715a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   17144:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   17148:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1714c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   1714e:	bf01      	itttt	eq
   17150:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   17152:	4339      	orreq	r1, r7
   17154:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   17158:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1715a:	f38c 8811 	msr	BASEPRI, ip
   1715e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   17162:	4540      	cmp	r0, r8
   17164:	d005      	beq.n	17172 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   17166:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1716a:	439a      	bics	r2, r3
   1716c:	f104 0401 	add.w	r4, r4, #1
   17170:	d1db      	bne.n	1712a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17176:	bf00      	nop
   17178:	2000a1e8 	.word	0x2000a1e8
   1717c:	0bad0002 	.word	0x0bad0002
   17180:	0bad0000 	.word	0x0bad0000

00017184 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   17184:	b570      	push	{r4, r5, r6, lr}
   17186:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   17188:	460d      	mov	r5, r1
   1718a:	b941      	cbnz	r1, 1719e <nrfx_ipc_init+0x1a>
   1718c:	490b      	ldr	r1, [pc, #44]	; (171bc <nrfx_ipc_init+0x38>)
   1718e:	480c      	ldr	r0, [pc, #48]	; (171c0 <nrfx_ipc_init+0x3c>)
   17190:	2232      	movs	r2, #50	; 0x32
   17192:	f003 fc25 	bl	1a9e0 <printk>
   17196:	2132      	movs	r1, #50	; 0x32
   17198:	4808      	ldr	r0, [pc, #32]	; (171bc <nrfx_ipc_init+0x38>)
   1719a:	f003 fec7 	bl	1af2c <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1719e:	4c09      	ldr	r4, [pc, #36]	; (171c4 <nrfx_ipc_init+0x40>)
   171a0:	7923      	ldrb	r3, [r4, #4]
   171a2:	b943      	cbnz	r3, 171b6 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   171a4:	202a      	movs	r0, #42	; 0x2a
   171a6:	f7f6 fcd1 	bl	db4c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   171aa:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   171ac:	4806      	ldr	r0, [pc, #24]	; (171c8 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   171ae:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   171b0:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   171b2:	60a6      	str	r6, [r4, #8]
}
   171b4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   171b6:	4805      	ldr	r0, [pc, #20]	; (171cc <nrfx_ipc_init+0x48>)
   171b8:	e7fc      	b.n	171b4 <nrfx_ipc_init+0x30>
   171ba:	bf00      	nop
   171bc:	000225bb 	.word	0x000225bb
   171c0:	0001faab 	.word	0x0001faab
   171c4:	2000a248 	.word	0x2000a248
   171c8:	0bad0000 	.word	0x0bad0000
   171cc:	0bad000c 	.word	0x0bad000c

000171d0 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   171d0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   171d2:	4604      	mov	r4, r0
   171d4:	b940      	cbnz	r0, 171e8 <nrfx_ipc_config_load+0x18>
   171d6:	4919      	ldr	r1, [pc, #100]	; (1723c <nrfx_ipc_config_load+0x6c>)
   171d8:	4819      	ldr	r0, [pc, #100]	; (17240 <nrfx_ipc_config_load+0x70>)
   171da:	2244      	movs	r2, #68	; 0x44
   171dc:	f003 fc00 	bl	1a9e0 <printk>
   171e0:	2144      	movs	r1, #68	; 0x44
   171e2:	4816      	ldr	r0, [pc, #88]	; (1723c <nrfx_ipc_config_load+0x6c>)
   171e4:	f003 fea2 	bl	1af2c <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   171e8:	4b16      	ldr	r3, [pc, #88]	; (17244 <nrfx_ipc_config_load+0x74>)
   171ea:	791b      	ldrb	r3, [r3, #4]
   171ec:	2b01      	cmp	r3, #1
   171ee:	d008      	beq.n	17202 <nrfx_ipc_config_load+0x32>
   171f0:	4912      	ldr	r1, [pc, #72]	; (1723c <nrfx_ipc_config_load+0x6c>)
   171f2:	4813      	ldr	r0, [pc, #76]	; (17240 <nrfx_ipc_config_load+0x70>)
   171f4:	2245      	movs	r2, #69	; 0x45
   171f6:	f003 fbf3 	bl	1a9e0 <printk>
   171fa:	2145      	movs	r1, #69	; 0x45
   171fc:	480f      	ldr	r0, [pc, #60]	; (1723c <nrfx_ipc_config_load+0x6c>)
   171fe:	f003 fe95 	bl	1af2c <assert_post_action>
{
   17202:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   17204:	4a10      	ldr	r2, [pc, #64]	; (17248 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   17206:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1720a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1720e:	3301      	adds	r3, #1
   17210:	2b10      	cmp	r3, #16
   17212:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   17216:	d1f6      	bne.n	17206 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   17218:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1721a:	4a0b      	ldr	r2, [pc, #44]	; (17248 <nrfx_ipc_config_load+0x78>)
   1721c:	f104 0140 	add.w	r1, r4, #64	; 0x40
   17220:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   17224:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   17228:	3301      	adds	r3, #1
   1722a:	2b10      	cmp	r3, #16
   1722c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   17230:	d1f6      	bne.n	17220 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   17232:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   17236:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1723a:	bd38      	pop	{r3, r4, r5, pc}
   1723c:	000225bb 	.word	0x000225bb
   17240:	0001faab 	.word	0x0001faab
   17244:	2000a248 	.word	0x2000a248
   17248:	4002a000 	.word	0x4002a000

0001724c <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1724c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1724e:	4b0a      	ldr	r3, [pc, #40]	; (17278 <nrfx_ipc_receive_event_enable+0x2c>)
{
   17250:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17252:	791b      	ldrb	r3, [r3, #4]
   17254:	2b01      	cmp	r3, #1
   17256:	d008      	beq.n	1726a <nrfx_ipc_receive_event_enable+0x1e>
   17258:	4908      	ldr	r1, [pc, #32]	; (1727c <nrfx_ipc_receive_event_enable+0x30>)
   1725a:	4809      	ldr	r0, [pc, #36]	; (17280 <nrfx_ipc_receive_event_enable+0x34>)
   1725c:	226a      	movs	r2, #106	; 0x6a
   1725e:	f003 fbbf 	bl	1a9e0 <printk>
   17262:	216a      	movs	r1, #106	; 0x6a
   17264:	4805      	ldr	r0, [pc, #20]	; (1727c <nrfx_ipc_receive_event_enable+0x30>)
   17266:	f003 fe61 	bl	1af2c <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1726a:	2301      	movs	r3, #1
   1726c:	fa03 f404 	lsl.w	r4, r3, r4
   17270:	4b04      	ldr	r3, [pc, #16]	; (17284 <nrfx_ipc_receive_event_enable+0x38>)
   17272:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   17276:	bd10      	pop	{r4, pc}
   17278:	2000a248 	.word	0x2000a248
   1727c:	000225bb 	.word	0x000225bb
   17280:	0001faab 	.word	0x0001faab
   17284:	4002a000 	.word	0x4002a000

00017288 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   17288:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1728a:	4b0a      	ldr	r3, [pc, #40]	; (172b4 <nrfx_ipc_receive_event_disable+0x2c>)
{
   1728c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1728e:	791b      	ldrb	r3, [r3, #4]
   17290:	2b01      	cmp	r3, #1
   17292:	d008      	beq.n	172a6 <nrfx_ipc_receive_event_disable+0x1e>
   17294:	4908      	ldr	r1, [pc, #32]	; (172b8 <nrfx_ipc_receive_event_disable+0x30>)
   17296:	4809      	ldr	r0, [pc, #36]	; (172bc <nrfx_ipc_receive_event_disable+0x34>)
   17298:	2270      	movs	r2, #112	; 0x70
   1729a:	f003 fba1 	bl	1a9e0 <printk>
   1729e:	2170      	movs	r1, #112	; 0x70
   172a0:	4805      	ldr	r0, [pc, #20]	; (172b8 <nrfx_ipc_receive_event_disable+0x30>)
   172a2:	f003 fe43 	bl	1af2c <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   172a6:	2301      	movs	r3, #1
   172a8:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   172ac:	4b04      	ldr	r3, [pc, #16]	; (172c0 <nrfx_ipc_receive_event_disable+0x38>)
   172ae:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   172b2:	bd10      	pop	{r4, pc}
   172b4:	2000a248 	.word	0x2000a248
   172b8:	000225bb 	.word	0x000225bb
   172bc:	0001faab 	.word	0x0001faab
   172c0:	4002a000 	.word	0x4002a000

000172c4 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   172c4:	4b15      	ldr	r3, [pc, #84]	; (1731c <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   172c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172ca:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   172ce:	4f14      	ldr	r7, [pc, #80]	; (17320 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   172d0:	4635      	mov	r5, r6
   172d2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17324 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   172d6:	b935      	cbnz	r5, 172e6 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   172d8:	4b13      	ldr	r3, [pc, #76]	; (17328 <nrfx_ipc_irq_handler+0x64>)
   172da:	4630      	mov	r0, r6
}
   172dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   172e0:	681a      	ldr	r2, [r3, #0]
   172e2:	6899      	ldr	r1, [r3, #8]
   172e4:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   172e6:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   172ea:	2301      	movs	r3, #1
  return __builtin_clz(value);
   172ec:	fab4 f484 	clz	r4, r4
   172f0:	40a3      	lsls	r3, r4
   172f2:	2c0f      	cmp	r4, #15
   172f4:	ea25 0503 	bic.w	r5, r5, r3
   172f8:	d90a      	bls.n	17310 <nrfx_ipc_irq_handler+0x4c>
   172fa:	4639      	mov	r1, r7
   172fc:	4640      	mov	r0, r8
   172fe:	f240 12e5 	movw	r2, #485	; 0x1e5
   17302:	f003 fb6d 	bl	1a9e0 <printk>
   17306:	f240 11e5 	movw	r1, #485	; 0x1e5
   1730a:	4638      	mov	r0, r7
   1730c:	f003 fe0e 	bl	1af2c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17310:	2200      	movs	r2, #0
   17312:	4b06      	ldr	r3, [pc, #24]	; (1732c <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   17314:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17316:	511a      	str	r2, [r3, r4]
}
   17318:	e7dd      	b.n	172d6 <nrfx_ipc_irq_handler+0x12>
   1731a:	bf00      	nop
   1731c:	4002a000 	.word	0x4002a000
   17320:	000225f6 	.word	0x000225f6
   17324:	0001faab 	.word	0x0001faab
   17328:	2000a248 	.word	0x2000a248
   1732c:	4002a100 	.word	0x4002a100

00017330 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   17330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17334:	460e      	mov	r6, r1
   17336:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   17338:	4d0c      	ldr	r5, [pc, #48]	; (1736c <metal_generic_dev_open+0x3c>)
   1733a:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1733e:	42ac      	cmp	r4, r5
   17340:	d103      	bne.n	1734a <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   17342:	f06f 0012 	mvn.w	r0, #18
   17346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1734a:	4631      	mov	r1, r6
   1734c:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   17350:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   17354:	f004 fd40 	bl	1bdd8 <strcmp>
   17358:	b930      	cbnz	r0, 17368 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   1735a:	4640      	mov	r0, r8
			*device = dev;
   1735c:	f8c7 8000 	str.w	r8, [r7]
}
   17360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   17364:	f006 ba88 	b.w	1d878 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   17368:	6824      	ldr	r4, [r4, #0]
   1736a:	e7e8      	b.n	1733e <metal_generic_dev_open+0xe>
   1736c:	2000a254 	.word	0x2000a254

00017370 <metal_bus_find>:
{
   17370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17374:	4607      	mov	r7, r0
   17376:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   17378:	4e0b      	ldr	r6, [pc, #44]	; (173a8 <metal_bus_find+0x38>)
   1737a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1737e:	42b4      	cmp	r4, r6
   17380:	d102      	bne.n	17388 <metal_bus_find+0x18>
	return -ENOENT;
   17382:	f06f 0001 	mvn.w	r0, #1
   17386:	e00a      	b.n	1739e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   17388:	4639      	mov	r1, r7
   1738a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1738e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   17392:	f004 fd21 	bl	1bdd8 <strcmp>
   17396:	b920      	cbnz	r0, 173a2 <metal_bus_find+0x32>
   17398:	b11d      	cbz	r5, 173a2 <metal_bus_find+0x32>
			*result = bus;
   1739a:	f8c5 8000 	str.w	r8, [r5]
}
   1739e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   173a2:	6824      	ldr	r4, [r4, #0]
   173a4:	e7eb      	b.n	1737e <metal_bus_find+0xe>
   173a6:	bf00      	nop
   173a8:	2000a254 	.word	0x2000a254

000173ac <metal_bus_register>:
{
   173ac:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   173ae:	4604      	mov	r4, r0
   173b0:	b910      	cbnz	r0, 173b8 <metal_bus_register+0xc>
		return -EINVAL;
   173b2:	f06f 0015 	mvn.w	r0, #21
}
   173b6:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   173b8:	6800      	ldr	r0, [r0, #0]
   173ba:	2800      	cmp	r0, #0
   173bc:	d0f9      	beq.n	173b2 <metal_bus_register+0x6>
   173be:	f004 fcfb 	bl	1bdb8 <strlen>
   173c2:	2800      	cmp	r0, #0
   173c4:	d0f5      	beq.n	173b2 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   173c6:	2100      	movs	r1, #0
   173c8:	6820      	ldr	r0, [r4, #0]
   173ca:	f7ff ffd1 	bl	17370 <metal_bus_find>
   173ce:	b1c0      	cbz	r0, 17402 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   173d0:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   173d4:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   173d8:	4b0c      	ldr	r3, [pc, #48]	; (1740c <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   173da:	f104 0224 	add.w	r2, r4, #36	; 0x24
   173de:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   173e0:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   173e4:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   173e6:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   173e8:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   173ea:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   173ec:	781a      	ldrb	r2, [r3, #0]
   173ee:	2a06      	cmp	r2, #6
   173f0:	d905      	bls.n	173fe <metal_bus_register+0x52>
   173f2:	685b      	ldr	r3, [r3, #4]
   173f4:	b143      	cbz	r3, 17408 <metal_bus_register+0x5c>
   173f6:	2007      	movs	r0, #7
   173f8:	6822      	ldr	r2, [r4, #0]
   173fa:	4905      	ldr	r1, [pc, #20]	; (17410 <metal_bus_register+0x64>)
   173fc:	4798      	blx	r3
	return 0;
   173fe:	2000      	movs	r0, #0
   17400:	e7d9      	b.n	173b6 <metal_bus_register+0xa>
		return -EEXIST;
   17402:	f06f 0010 	mvn.w	r0, #16
   17406:	e7d6      	b.n	173b6 <metal_bus_register+0xa>
	return 0;
   17408:	4618      	mov	r0, r3
   1740a:	e7d4      	b.n	173b6 <metal_bus_register+0xa>
   1740c:	2000a254 	.word	0x2000a254
   17410:	00022628 	.word	0x00022628

00017414 <metal_register_generic_device>:
{
   17414:	b510      	push	{r4, lr}
   17416:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   17418:	6800      	ldr	r0, [r0, #0]
   1741a:	b910      	cbnz	r0, 17422 <metal_register_generic_device+0xe>
		return -EINVAL;
   1741c:	f06f 0015 	mvn.w	r0, #21
}
   17420:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   17422:	f004 fcc9 	bl	1bdb8 <strlen>
   17426:	2800      	cmp	r0, #0
   17428:	d0f8      	beq.n	1741c <metal_register_generic_device+0x8>
   1742a:	68a3      	ldr	r3, [r4, #8]
   1742c:	2b01      	cmp	r3, #1
   1742e:	d8f5      	bhi.n	1741c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   17430:	4b06      	ldr	r3, [pc, #24]	; (1744c <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   17432:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   17436:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   17438:	4b05      	ldr	r3, [pc, #20]	; (17450 <metal_register_generic_device+0x3c>)
   1743a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1743c:	f103 0018 	add.w	r0, r3, #24
   17440:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   17442:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   17444:	61d9      	str	r1, [r3, #28]
	return 0;
   17446:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   17448:	6011      	str	r1, [r2, #0]
}
   1744a:	e7e9      	b.n	17420 <metal_register_generic_device+0xc>
   1744c:	200083f8 	.word	0x200083f8
   17450:	2000a254 	.word	0x2000a254

00017454 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   17454:	b538      	push	{r3, r4, r5, lr}
   17456:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   17458:	4c0d      	ldr	r4, [pc, #52]	; (17490 <metal_init+0x3c>)
   1745a:	2220      	movs	r2, #32
   1745c:	4620      	mov	r0, r4
   1745e:	2100      	movs	r1, #0
   17460:	f004 fd13 	bl	1be8a <memset>

	_metal.common.log_handler   = params->log_handler;
   17464:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   17466:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   17468:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   1746a:	4623      	mov	r3, r4
   1746c:	792a      	ldrb	r2, [r5, #4]
   1746e:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   17472:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   17476:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   1747a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   1747e:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   17482:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   17486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   1748a:	f000 b803 	b.w	17494 <metal_sys_init>
   1748e:	bf00      	nop
   17490:	2000a254 	.word	0x2000a254

00017494 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   17494:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   17496:	4802      	ldr	r0, [pc, #8]	; (174a0 <metal_sys_init+0xc>)
   17498:	f7ff ff88 	bl	173ac <metal_bus_register>
	return 0;
}
   1749c:	2000      	movs	r0, #0
   1749e:	bd08      	pop	{r3, pc}
   174a0:	200083f8 	.word	0x200083f8

000174a4 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   174a4:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   174a6:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   174a8:	2b06      	cmp	r3, #6
{
   174aa:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   174ac:	bf88      	it	hi
   174ae:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   174b0:	4b09      	ldr	r3, [pc, #36]	; (174d8 <metal_zephyr_log_handler+0x34>)
{
   174b2:	ac05      	add	r4, sp, #20
   174b4:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   174b8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   174bc:	4807      	ldr	r0, [pc, #28]	; (174dc <metal_zephyr_log_handler+0x38>)
   174be:	f003 fa8f 	bl	1a9e0 <printk>

	va_start(args, format);
	vprintk(format, args);
   174c2:	4621      	mov	r1, r4
   174c4:	4628      	mov	r0, r5
	va_start(args, format);
   174c6:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   174c8:	f7f3 fa68 	bl	a99c <vprintk>
	va_end(args);
}
   174cc:	b002      	add	sp, #8
   174ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   174d2:	b003      	add	sp, #12
   174d4:	4770      	bx	lr
   174d6:	bf00      	nop
   174d8:	0001ef68 	.word	0x0001ef68
   174dc:	00020d64 	.word	0x00020d64

000174e0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   174e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174e4:	b087      	sub	sp, #28
   174e6:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   174e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   174ea:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   174ec:	4293      	cmp	r3, r2
{
   174ee:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   174f0:	d349      	bcc.n	17586 <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   174f2:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   174f4:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   174f8:	42b4      	cmp	r4, r6
   174fa:	d103      	bne.n	17504 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   174fc:	2000      	movs	r0, #0
}
   174fe:	b007      	add	sp, #28
   17500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   17504:	fb0b f704 	mul.w	r7, fp, r4
   17508:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   1750c:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   1750e:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   17512:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   17516:	bb02      	cbnz	r2, 1755a <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   17518:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   1751c:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   17520:	f8dc 3004 	ldr.w	r3, [ip, #4]
   17524:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   17526:	f8dc c008 	ldr.w	ip, [ip, #8]
   1752a:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   1752c:	f10c 33ff 	add.w	r3, ip, #4294967295
   17530:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   17534:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   17538:	f1cc 0c00 	rsb	ip, ip, #0
   1753c:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   17540:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   17544:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   17548:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   1754c:	4561      	cmp	r1, ip
   1754e:	bf28      	it	cs
   17550:	f04f 31ff 	movcs.w	r1, #4294967295
   17554:	3306      	adds	r3, #6
   17556:	f006 f956 	bl	1d806 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1755a:	f858 3007 	ldr.w	r3, [r8, r7]
   1755e:	9a05      	ldr	r2, [sp, #20]
   17560:	9302      	str	r3, [sp, #8]
   17562:	6a2b      	ldr	r3, [r5, #32]
   17564:	4628      	mov	r0, r5
   17566:	6a1b      	ldr	r3, [r3, #32]
   17568:	b2a1      	uxth	r1, r4
   1756a:	9301      	str	r3, [sp, #4]
   1756c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1756e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   17572:	9300      	str	r3, [sp, #0]
   17574:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   17578:	464b      	mov	r3, r9
   1757a:	f006 f99a 	bl	1d8b2 <virtqueue_create>
		if (ret)
   1757e:	2800      	cmp	r0, #0
   17580:	d1bd      	bne.n	174fe <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   17582:	3401      	adds	r4, #1
   17584:	e7b8      	b.n	174f8 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   17586:	4801      	ldr	r0, [pc, #4]	; (1758c <virtio_create_virtqueues+0xac>)
   17588:	e7b9      	b.n	174fe <virtio_create_virtqueues+0x1e>
   1758a:	bf00      	nop
   1758c:	fffff440 	.word	0xfffff440

00017590 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   17590:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   17592:	8944      	ldrh	r4, [r0, #10]
   17594:	428c      	cmp	r4, r1
   17596:	d312      	bcc.n	175be <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   17598:	6a03      	ldr	r3, [r0, #32]
   1759a:	3c01      	subs	r4, #1
   1759c:	885d      	ldrh	r5, [r3, #2]
   1759e:	402c      	ands	r4, r5
   175a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   175a4:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   175a6:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   175a8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   175ac:	6a02      	ldr	r2, [r0, #32]
   175ae:	8853      	ldrh	r3, [r2, #2]
   175b0:	3301      	adds	r3, #1
   175b2:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   175b4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   175b6:	3301      	adds	r3, #1
   175b8:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   175ba:	2000      	movs	r0, #0
}
   175bc:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   175be:	4801      	ldr	r0, [pc, #4]	; (175c4 <virtqueue_add_consumed_buffer+0x34>)
   175c0:	e7fc      	b.n	175bc <virtqueue_add_consumed_buffer+0x2c>
   175c2:	bf00      	nop
   175c4:	fffff441 	.word	0xfffff441

000175c8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   175c8:	b4f0      	push	{r4, r5, r6, r7}
   175ca:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   175cc:	b148      	cbz	r0, 175e2 <rpmsg_send_offchannel_raw+0x1a>
   175ce:	6a00      	ldr	r0, [r0, #32]
   175d0:	b138      	cbz	r0, 175e2 <rpmsg_send_offchannel_raw+0x1a>
   175d2:	b133      	cbz	r3, 175e2 <rpmsg_send_offchannel_raw+0x1a>
   175d4:	3401      	adds	r4, #1
   175d6:	d004      	beq.n	175e2 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   175d8:	6f44      	ldr	r4, [r0, #116]	; 0x74
   175da:	b114      	cbz	r4, 175e2 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   175dc:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   175de:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   175e0:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   175e2:	4801      	ldr	r0, [pc, #4]	; (175e8 <rpmsg_send_offchannel_raw+0x20>)
}
   175e4:	bcf0      	pop	{r4, r5, r6, r7}
   175e6:	4770      	bx	lr
   175e8:	fffff82d 	.word	0xfffff82d

000175ec <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   175ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175f0:	460e      	mov	r6, r1
   175f2:	4690      	mov	r8, r2
   175f4:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   175f6:	4605      	mov	r5, r0
   175f8:	2800      	cmp	r0, #0
   175fa:	d06a      	beq.n	176d2 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   175fc:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   17600:	4638      	mov	r0, r7
   17602:	f006 fae8 	bl	1dbd6 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   17606:	1c63      	adds	r3, r4, #1
   17608:	d11a      	bne.n	17640 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   1760a:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1760c:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   17610:	095a      	lsrs	r2, r3, #5
   17612:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   17616:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1761a:	f003 011f 	and.w	r1, r3, #31
   1761e:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   17622:	07e4      	lsls	r4, r4, #31
   17624:	d407      	bmi.n	17636 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   17626:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1762a:	2301      	movs	r3, #1
   1762c:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1762e:	4313      	orrs	r3, r2
   17630:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   17634:	e01d      	b.n	17672 <rpmsg_create_ept+0x86>
	     bit++)
   17636:	3301      	adds	r3, #1
	for (bit = start;
   17638:	2b80      	cmp	r3, #128	; 0x80
   1763a:	d1e9      	bne.n	17610 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   1763c:	4c27      	ldr	r4, [pc, #156]	; (176dc <rpmsg_create_ept+0xf0>)
   1763e:	e044      	b.n	176ca <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   17640:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   17644:	d315      	bcc.n	17672 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   17646:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1764a:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1764c:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   17650:	d83a      	bhi.n	176c8 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   17652:	0958      	lsrs	r0, r3, #5
   17654:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   17658:	f003 031f 	and.w	r3, r3, #31
   1765c:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   17660:	07d2      	lsls	r2, r2, #31
   17662:	d4eb      	bmi.n	1763c <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   17664:	2201      	movs	r2, #1
   17666:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1766a:	ea43 030c 	orr.w	r3, r3, ip
   1766e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   17672:	491b      	ldr	r1, [pc, #108]	; (176e0 <rpmsg_create_ept+0xf4>)
   17674:	2220      	movs	r2, #32
   17676:	f1b8 0f00 	cmp.w	r8, #0
   1767a:	bf18      	it	ne
   1767c:	4641      	movne	r1, r8
   1767e:	4628      	mov	r0, r5
   17680:	f004 fb88 	bl	1bd94 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   17684:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   17686:	4629      	mov	r1, r5
   17688:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   1768a:	9b07      	ldr	r3, [sp, #28]
   1768c:	4630      	mov	r0, r6
   1768e:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   17690:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   17692:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   17694:	632b      	str	r3, [r5, #48]	; 0x30
   17696:	f006 fb18 	bl	1dcca <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1769a:	4638      	mov	r0, r7
   1769c:	f001 ffc8 	bl	19630 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   176a0:	782c      	ldrb	r4, [r5, #0]
   176a2:	b174      	cbz	r4, 176c2 <rpmsg_create_ept+0xd6>
   176a4:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   176a8:	b15c      	cbz	r4, 176c2 <rpmsg_create_ept+0xd6>
   176aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   176ac:	3301      	adds	r3, #1
   176ae:	d112      	bne.n	176d6 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   176b0:	2100      	movs	r1, #0
   176b2:	4628      	mov	r0, r5
   176b4:	f006 fac0 	bl	1dc38 <rpmsg_send_ns_message>

	if (status)
   176b8:	4604      	mov	r4, r0
   176ba:	b110      	cbz	r0, 176c2 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   176bc:	4628      	mov	r0, r5
   176be:	f006 fa90 	bl	1dbe2 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   176c2:	4620      	mov	r0, r4
   176c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176c8:	4c06      	ldr	r4, [pc, #24]	; (176e4 <rpmsg_create_ept+0xf8>)
   176ca:	4638      	mov	r0, r7
   176cc:	f001 ffb0 	bl	19630 <z_impl_k_sem_give>
}
   176d0:	e7f7      	b.n	176c2 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   176d2:	4c04      	ldr	r4, [pc, #16]	; (176e4 <rpmsg_create_ept+0xf8>)
   176d4:	e7f5      	b.n	176c2 <rpmsg_create_ept+0xd6>
   176d6:	2400      	movs	r4, #0
   176d8:	e7f3      	b.n	176c2 <rpmsg_create_ept+0xd6>
   176da:	bf00      	nop
   176dc:	fffff829 	.word	0xfffff829
   176e0:	0002274a 	.word	0x0002274a
   176e4:	fffff82d 	.word	0xfffff82d

000176e8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   176e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176ec:	4605      	mov	r5, r0
   176ee:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   176f0:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   176f2:	6a03      	ldr	r3, [r0, #32]
   176f4:	b08d      	sub	sp, #52	; 0x34
   176f6:	681b      	ldr	r3, [r3, #0]
   176f8:	4692      	mov	sl, r2
   176fa:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   176fe:	9103      	str	r1, [sp, #12]
   17700:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   17702:	0743      	lsls	r3, r0, #29
   17704:	d57b      	bpl.n	177fe <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   17706:	f643 2398 	movw	r3, #15000	; 0x3a98
   1770a:	2f00      	cmp	r7, #0
   1770c:	bf18      	it	ne
   1770e:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   17710:	f105 0858 	add.w	r8, r5, #88	; 0x58
   17714:	4640      	mov	r0, r8
   17716:	f006 fafc 	bl	1dd12 <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   1771a:	4628      	mov	r0, r5
   1771c:	f006 fbbe 	bl	1de9c <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   17720:	4681      	mov	r9, r0
   17722:	b130      	cbz	r0, 17732 <rpmsg_virtio_send_offchannel_raw+0x4a>
   17724:	42b0      	cmp	r0, r6
   17726:	da04      	bge.n	17732 <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   17728:	4640      	mov	r0, r8
   1772a:	f006 faf0 	bl	1dd0e <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   1772e:	4e42      	ldr	r6, [pc, #264]	; (17838 <rpmsg_virtio_send_offchannel_raw+0x150>)
   17730:	e061      	b.n	177f6 <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   17732:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   17734:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   17736:	b9f3      	cbnz	r3, 17776 <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   17738:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1773c:	f10d 0212 	add.w	r2, sp, #18
   17740:	a905      	add	r1, sp, #20
   17742:	f006 f946 	bl	1d9d2 <virtqueue_get_buffer>
		if (!data) {
   17746:	4604      	mov	r4, r0
   17748:	b948      	cbnz	r0, 1775e <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1774a:	f44f 7100 	mov.w	r1, #512	; 0x200
   1774e:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   17752:	f006 fbb6 	bl	1dec2 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   17756:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1775a:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   1775c:	9305      	str	r3, [sp, #20]
   1775e:	4640      	mov	r0, r8
   17760:	f006 fad5 	bl	1dd0e <k_sem_give>
		if (buffer || !tick_count)
   17764:	2c00      	cmp	r4, #0
   17766:	d14e      	bne.n	17806 <rpmsg_virtio_send_offchannel_raw+0x11e>
   17768:	2f00      	cmp	r7, #0
   1776a:	d04a      	beq.n	17802 <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   1776c:	f1b9 0f00 	cmp.w	r9, #0
   17770:	d1dd      	bne.n	1772e <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   17772:	3f01      	subs	r7, #1
	while (1) {
   17774:	e7ce      	b.n	17714 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   17776:	2b01      	cmp	r3, #1
   17778:	d108      	bne.n	1778c <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1777a:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1777e:	aa05      	add	r2, sp, #20
   17780:	f10d 0112 	add.w	r1, sp, #18
   17784:	f006 f95f 	bl	1da46 <virtqueue_get_available_buffer>
   17788:	4604      	mov	r4, r0
   1778a:	e7e8      	b.n	1775e <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   1778c:	2400      	movs	r4, #0
   1778e:	e7e6      	b.n	1775e <rpmsg_virtio_send_offchannel_raw+0x76>
   17790:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   17792:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   17794:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   17798:	1ac9      	subs	r1, r1, r3
   1779a:	4281      	cmp	r1, r0
   1779c:	bf28      	it	cs
   1779e:	f04f 31ff 	movcs.w	r1, #4294967295
   177a2:	4633      	mov	r3, r6
   177a4:	465a      	mov	r2, fp
   177a6:	4638      	mov	r0, r7
   177a8:	f005 fff2 	bl	1d790 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   177ac:	4286      	cmp	r6, r0
   177ae:	d000      	beq.n	177b2 <rpmsg_virtio_send_offchannel_raw+0xca>
   177b0:	e7fe      	b.n	177b0 <rpmsg_virtio_send_offchannel_raw+0xc8>
   177b2:	4640      	mov	r0, r8
   177b4:	f006 faad 	bl	1dd12 <__metal_mutex_acquire>
   177b8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   177ba:	9a05      	ldr	r2, [sp, #20]
   177bc:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   177be:	b953      	cbnz	r3, 177d6 <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   177c0:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   177c4:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   177c8:	2201      	movs	r2, #1
   177ca:	9400      	str	r4, [sp, #0]
   177cc:	a906      	add	r1, sp, #24
   177ce:	f006 f8a0 	bl	1d912 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   177d2:	b148      	cbz	r0, 177e8 <rpmsg_virtio_send_offchannel_raw+0x100>
   177d4:	e7fe      	b.n	177d4 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   177d6:	2b01      	cmp	r3, #1
   177d8:	d106      	bne.n	177e8 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   177da:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   177de:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   177e2:	f7ff fed5 	bl	17590 <virtqueue_add_consumed_buffer>
   177e6:	e7f4      	b.n	177d2 <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   177e8:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   177ec:	f006 f9a5 	bl	1db3a <virtqueue_kick>
   177f0:	4640      	mov	r0, r8
   177f2:	f006 fa8c 	bl	1dd0e <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   177f6:	4630      	mov	r0, r6
   177f8:	b00d      	add	sp, #52	; 0x34
   177fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   177fe:	4e0f      	ldr	r6, [pc, #60]	; (1783c <rpmsg_virtio_send_offchannel_raw+0x154>)
   17800:	e7f9      	b.n	177f6 <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   17802:	4e0f      	ldr	r6, [pc, #60]	; (17840 <rpmsg_virtio_send_offchannel_raw+0x158>)
   17804:	e7f7      	b.n	177f6 <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   17806:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   17808:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   1780c:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   1780e:	2300      	movs	r3, #0
   17810:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   17812:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   17814:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   17816:	4281      	cmp	r1, r0
   17818:	bf28      	it	cs
   1781a:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   1781e:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   17820:	4638      	mov	r0, r7
   17822:	2310      	movs	r3, #16
   17824:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   17826:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   1782a:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1782e:	f005 ffaf 	bl	1d790 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   17832:	2810      	cmp	r0, #16
   17834:	d0ac      	beq.n	17790 <rpmsg_virtio_send_offchannel_raw+0xa8>
   17836:	e7fe      	b.n	17836 <rpmsg_virtio_send_offchannel_raw+0x14e>
   17838:	fffff82b 	.word	0xfffff82b
   1783c:	fffff82c 	.word	0xfffff82c
   17840:	fffff82e 	.word	0xfffff82e

00017844 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   17844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17848:	460d      	mov	r5, r1
   1784a:	b088      	sub	sp, #32
   1784c:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   1784e:	2100      	movs	r1, #0
   17850:	227c      	movs	r2, #124	; 0x7c
{
   17852:	4604      	mov	r4, r0
   17854:	461e      	mov	r6, r3
   17856:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   1785a:	f004 fb16 	bl	1be8a <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1785e:	2201      	movs	r2, #1
   17860:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17864:	4611      	mov	r1, r2
   17866:	f006 fbc9 	bl	1dffc <z_impl_k_sem_init>
   1786a:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1786e:	4b5d      	ldr	r3, [pc, #372]	; (179e4 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   17870:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   17874:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   17876:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   17878:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1787a:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   1787c:	d020      	beq.n	178c0 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1787e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   17880:	6a03      	ldr	r3, [r0, #32]
   17882:	689b      	ldr	r3, [r3, #8]
   17884:	4798      	blx	r3
   17886:	2300      	movs	r3, #0
   17888:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1788a:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1788e:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   17890:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   17894:	f1b8 0f00 	cmp.w	r8, #0
   17898:	d01e      	beq.n	178d8 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   1789a:	f1b8 0f01 	cmp.w	r8, #1
   1789e:	d133      	bne.n	17908 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   178a0:	4b51      	ldr	r3, [pc, #324]	; (179e8 <rpmsg_init_vdev+0x1a4>)
   178a2:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   178a4:	4b51      	ldr	r3, [pc, #324]	; (179ec <rpmsg_init_vdev+0x1a8>)
   178a6:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   178a8:	4b51      	ldr	r3, [pc, #324]	; (179f0 <rpmsg_init_vdev+0x1ac>)
   178aa:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   178ac:	4b51      	ldr	r3, [pc, #324]	; (179f4 <rpmsg_init_vdev+0x1b0>)
   178ae:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   178b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   178b2:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   178b4:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   178b6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   178ba:	e023      	b.n	17904 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   178bc:	0743      	lsls	r3, r0, #29
   178be:	d4de      	bmi.n	1787e <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   178c0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   178c2:	6a03      	ldr	r3, [r0, #32]
   178c4:	681b      	ldr	r3, [r3, #0]
   178c6:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   178c8:	0642      	lsls	r2, r0, #25
   178ca:	d5f7      	bpl.n	178bc <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   178cc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   178ce:	2100      	movs	r1, #0
   178d0:	6a03      	ldr	r3, [r0, #32]
   178d2:	685b      	ldr	r3, [r3, #4]
   178d4:	4798      	blx	r3
}
   178d6:	e7f3      	b.n	178c0 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   178d8:	f1b9 0f00 	cmp.w	r9, #0
   178dc:	d07d      	beq.n	179da <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   178de:	f8d9 3008 	ldr.w	r3, [r9, #8]
   178e2:	2b00      	cmp	r3, #0
   178e4:	d07b      	beq.n	179de <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   178e6:	4b41      	ldr	r3, [pc, #260]	; (179ec <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   178e8:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   178ec:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   178ee:	4b3e      	ldr	r3, [pc, #248]	; (179e8 <rpmsg_init_vdev+0x1a4>)
   178f0:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   178f2:	4b40      	ldr	r3, [pc, #256]	; (179f4 <rpmsg_init_vdev+0x1b0>)
   178f4:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   178f6:	4b3e      	ldr	r3, [pc, #248]	; (179f0 <rpmsg_init_vdev+0x1ac>)
   178f8:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   178fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   178fc:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   178fe:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   17900:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   17904:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   17908:	ab04      	add	r3, sp, #16
   1790a:	9300      	str	r3, [sp, #0]
   1790c:	2202      	movs	r2, #2
   1790e:	2100      	movs	r1, #0
   17910:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   17912:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   17916:	ab02      	add	r3, sp, #8
   17918:	f7ff fde2 	bl	174e0 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   1791c:	4607      	mov	r7, r0
   1791e:	2800      	cmp	r0, #0
   17920:	d157      	bne.n	179d2 <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   17922:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   17926:	f006 f8e2 	bl	1daee <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   1792a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   1792c:	681a      	ldr	r2, [r3, #0]
   1792e:	699b      	ldr	r3, [r3, #24]
   17930:	6296      	str	r6, [r2, #40]	; 0x28
   17932:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   17934:	f1b8 0f00 	cmp.w	r8, #0
   17938:	d108      	bne.n	1794c <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   1793a:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1793e:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   17940:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17942:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   17946:	895b      	ldrh	r3, [r3, #10]
   17948:	4553      	cmp	r3, sl
   1794a:	d81f      	bhi.n	1798c <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   1794c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17950:	e9c4 4400 	strd	r4, r4, [r4]
   17954:	b18b      	cbz	r3, 1797a <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   17956:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   1795a:	4927      	ldr	r1, [pc, #156]	; (179f8 <rpmsg_init_vdev+0x1b4>)
   1795c:	2220      	movs	r2, #32
   1795e:	4628      	mov	r0, r5
   17960:	f004 fa18 	bl	1bd94 <strncpy>
	ept->addr = src;
   17964:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   17966:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   1796a:	4b24      	ldr	r3, [pc, #144]	; (179fc <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   1796c:	4629      	mov	r1, r5
   1796e:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   17970:	2300      	movs	r3, #0
   17972:	4620      	mov	r0, r4
   17974:	63a3      	str	r3, [r4, #56]	; 0x38
   17976:	f006 f9a8 	bl	1dcca <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   1797a:	f1b8 0f00 	cmp.w	r8, #0
   1797e:	d128      	bne.n	179d2 <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   17980:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   17982:	2104      	movs	r1, #4
   17984:	6a03      	ldr	r3, [r0, #32]
   17986:	685b      	ldr	r3, [r3, #4]
   17988:	4798      	blx	r3
}
   1798a:	e022      	b.n	179d2 <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1798c:	f44f 7100 	mov.w	r1, #512	; 0x200
   17990:	4648      	mov	r0, r9
   17992:	f006 fa96 	bl	1dec2 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   17996:	4605      	mov	r5, r0
   17998:	b1c8      	cbz	r0, 179ce <rpmsg_init_vdev+0x18a>
   1799a:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1799c:	9006      	str	r0, [sp, #24]
   1799e:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   179a0:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   179a2:	f44f 7300 	mov.w	r3, #512	; 0x200
   179a6:	4281      	cmp	r1, r0
   179a8:	bf28      	it	cs
   179aa:	f04f 31ff 	movcs.w	r1, #4294967295
   179ae:	2200      	movs	r2, #0
   179b0:	4630      	mov	r0, r6
   179b2:	f005 ff28 	bl	1d806 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   179b6:	2301      	movs	r3, #1
   179b8:	2200      	movs	r2, #0
   179ba:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   179be:	9500      	str	r5, [sp, #0]
   179c0:	a906      	add	r1, sp, #24
   179c2:	f005 ffa6 	bl	1d912 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   179c6:	b918      	cbnz	r0, 179d0 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   179c8:	f10a 0a01 	add.w	sl, sl, #1
   179cc:	e7b9      	b.n	17942 <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   179ce:	480c      	ldr	r0, [pc, #48]	; (17a00 <rpmsg_init_vdev+0x1bc>)
   179d0:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   179d2:	4638      	mov	r0, r7
   179d4:	b008      	add	sp, #32
   179d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   179da:	4f0a      	ldr	r7, [pc, #40]	; (17a04 <rpmsg_init_vdev+0x1c0>)
   179dc:	e7f9      	b.n	179d2 <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   179de:	4f08      	ldr	r7, [pc, #32]	; (17a00 <rpmsg_init_vdev+0x1bc>)
   179e0:	e7f7      	b.n	179d2 <rpmsg_init_vdev+0x18e>
   179e2:	bf00      	nop
   179e4:	000176e9 	.word	0x000176e9
   179e8:	000226d9 	.word	0x000226d9
   179ec:	000226d3 	.word	0x000226d3
   179f0:	0001dd0d 	.word	0x0001dd0d
   179f4:	0001dddd 	.word	0x0001dddd
   179f8:	000226df 	.word	0x000226df
   179fc:	0001dd1f 	.word	0x0001dd1f
   17a00:	fffff82e 	.word	0xfffff82e
   17a04:	fffff82d 	.word	0xfffff82d

00017a08 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   17a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17a0a:	4b10      	ldr	r3, [pc, #64]	; (17a4c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   17a0c:	4f10      	ldr	r7, [pc, #64]	; (17a50 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17a0e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   17a12:	3001      	adds	r0, #1
   17a14:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17a18:	42ae      	cmp	r6, r5
   17a1a:	d800      	bhi.n	17a1e <z_sys_init_run_level+0x16>
		}
	}
}
   17a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   17a1e:	e9d5 3400 	ldrd	r3, r4, [r5]
   17a22:	4620      	mov	r0, r4
   17a24:	4798      	blx	r3
   17a26:	b170      	cbz	r0, 17a46 <z_sys_init_run_level+0x3e>
   17a28:	b16c      	cbz	r4, 17a46 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   17a2a:	2301      	movs	r3, #1
				(dev - __device_start));
   17a2c:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17a2e:	4a09      	ldr	r2, [pc, #36]	; (17a54 <z_sys_init_run_level+0x4c>)
   17a30:	1124      	asrs	r4, r4, #4
   17a32:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   17a34:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17a38:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   17a3c:	fa03 f404 	lsl.w	r4, r3, r4
   17a40:	4304      	orrs	r4, r0
   17a42:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17a46:	3508      	adds	r5, #8
   17a48:	e7e6      	b.n	17a18 <z_sys_init_run_level+0x10>
   17a4a:	bf00      	nop
   17a4c:	0001ef88 	.word	0x0001ef88
   17a50:	20008448 	.word	0x20008448
   17a54:	200084b8 	.word	0x200084b8

00017a58 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   17a58:	4b08      	ldr	r3, [pc, #32]	; (17a7c <z_device_ready+0x24>)
   17a5a:	1ac0      	subs	r0, r0, r3
   17a5c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17a5e:	4b08      	ldr	r3, [pc, #32]	; (17a80 <z_device_ready+0x28>)
   17a60:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   17a62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   17a66:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17a68:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   17a6c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   17a70:	4210      	tst	r0, r2
}
   17a72:	bf0c      	ite	eq
   17a74:	4618      	moveq	r0, r3
   17a76:	2000      	movne	r0, #0
   17a78:	4770      	bx	lr
   17a7a:	bf00      	nop
   17a7c:	20008448 	.word	0x20008448
   17a80:	200084b8 	.word	0x200084b8

00017a84 <z_impl_device_get_binding>:
{
   17a84:	b570      	push	{r4, r5, r6, lr}
   17a86:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   17a88:	4c0f      	ldr	r4, [pc, #60]	; (17ac8 <z_impl_device_get_binding+0x44>)
   17a8a:	4e10      	ldr	r6, [pc, #64]	; (17acc <z_impl_device_get_binding+0x48>)
   17a8c:	42b4      	cmp	r4, r6
   17a8e:	d104      	bne.n	17a9a <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   17a90:	4c0d      	ldr	r4, [pc, #52]	; (17ac8 <z_impl_device_get_binding+0x44>)
   17a92:	42b4      	cmp	r4, r6
   17a94:	d10a      	bne.n	17aac <z_impl_device_get_binding+0x28>
	return NULL;
   17a96:	2400      	movs	r4, #0
   17a98:	e014      	b.n	17ac4 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   17a9a:	4620      	mov	r0, r4
   17a9c:	f7ff ffdc 	bl	17a58 <z_device_ready>
   17aa0:	b110      	cbz	r0, 17aa8 <z_impl_device_get_binding+0x24>
   17aa2:	6823      	ldr	r3, [r4, #0]
   17aa4:	42ab      	cmp	r3, r5
   17aa6:	d00d      	beq.n	17ac4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   17aa8:	3410      	adds	r4, #16
   17aaa:	e7ef      	b.n	17a8c <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17aac:	4620      	mov	r0, r4
   17aae:	f7ff ffd3 	bl	17a58 <z_device_ready>
   17ab2:	b908      	cbnz	r0, 17ab8 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   17ab4:	3410      	adds	r4, #16
   17ab6:	e7ec      	b.n	17a92 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17ab8:	4628      	mov	r0, r5
   17aba:	6821      	ldr	r1, [r4, #0]
   17abc:	f004 f98c 	bl	1bdd8 <strcmp>
   17ac0:	2800      	cmp	r0, #0
   17ac2:	d1f7      	bne.n	17ab4 <z_impl_device_get_binding+0x30>
}
   17ac4:	4620      	mov	r0, r4
   17ac6:	bd70      	pop	{r4, r5, r6, pc}
   17ac8:	20008448 	.word	0x20008448
   17acc:	200084b8 	.word	0x200084b8

00017ad0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   17ad0:	4b01      	ldr	r3, [pc, #4]	; (17ad8 <z_impl_z_errno+0x8>)
   17ad2:	6898      	ldr	r0, [r3, #8]
}
   17ad4:	3070      	adds	r0, #112	; 0x70
   17ad6:	4770      	bx	lr
   17ad8:	2000a27c 	.word	0x2000a27c

00017adc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17ade:	4604      	mov	r4, r0
   17ae0:	460e      	mov	r6, r1
	__asm__ volatile(
   17ae2:	f04f 0320 	mov.w	r3, #32
   17ae6:	f3ef 8711 	mrs	r7, BASEPRI
   17aea:	f383 8811 	msr	BASEPRI, r3
   17aee:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   17af2:	f001 fd97 	bl	19624 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17af6:	2200      	movs	r2, #0
   17af8:	2c04      	cmp	r4, #4
   17afa:	bf98      	it	ls
   17afc:	4b1d      	ldrls	r3, [pc, #116]	; (17b74 <z_fatal_error+0x98>)
   17afe:	4605      	mov	r5, r0
	switch (reason) {
   17b00:	bf94      	ite	ls
   17b02:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   17b06:	4b1c      	ldrhi	r3, [pc, #112]	; (17b78 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17b08:	9200      	str	r2, [sp, #0]
   17b0a:	2145      	movs	r1, #69	; 0x45
   17b0c:	4622      	mov	r2, r4
   17b0e:	481b      	ldr	r0, [pc, #108]	; (17b7c <z_fatal_error+0xa0>)
   17b10:	f002 ff66 	bl	1a9e0 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   17b14:	b13e      	cbz	r6, 17b26 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   17b16:	69f3      	ldr	r3, [r6, #28]
   17b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
   17b1c:	b11b      	cbz	r3, 17b26 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   17b1e:	2145      	movs	r1, #69	; 0x45
   17b20:	4817      	ldr	r0, [pc, #92]	; (17b80 <z_fatal_error+0xa4>)
   17b22:	f002 ff5d 	bl	1a9e0 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   17b26:	b135      	cbz	r5, 17b36 <z_fatal_error+0x5a>
   17b28:	4628      	mov	r0, r5
   17b2a:	f006 fa84 	bl	1e036 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   17b2e:	4603      	mov	r3, r0
   17b30:	b108      	cbz	r0, 17b36 <z_fatal_error+0x5a>
   17b32:	7802      	ldrb	r2, [r0, #0]
   17b34:	b902      	cbnz	r2, 17b38 <z_fatal_error+0x5c>
		thread_name = "unknown";
   17b36:	4b13      	ldr	r3, [pc, #76]	; (17b84 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   17b38:	462a      	mov	r2, r5
   17b3a:	2145      	movs	r1, #69	; 0x45
   17b3c:	4812      	ldr	r0, [pc, #72]	; (17b88 <z_fatal_error+0xac>)
   17b3e:	f002 ff4f 	bl	1a9e0 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   17b42:	4631      	mov	r1, r6
   17b44:	4620      	mov	r0, r4
   17b46:	f7ff f8ad 	bl	16ca4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   17b4a:	2c04      	cmp	r4, #4
   17b4c:	d108      	bne.n	17b60 <z_fatal_error+0x84>
   17b4e:	490f      	ldr	r1, [pc, #60]	; (17b8c <z_fatal_error+0xb0>)
   17b50:	480f      	ldr	r0, [pc, #60]	; (17b90 <z_fatal_error+0xb4>)
   17b52:	228e      	movs	r2, #142	; 0x8e
   17b54:	f002 ff44 	bl	1a9e0 <printk>
   17b58:	218e      	movs	r1, #142	; 0x8e
   17b5a:	480c      	ldr	r0, [pc, #48]	; (17b8c <z_fatal_error+0xb0>)
   17b5c:	f003 f9e6 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   17b60:	f387 8811 	msr	BASEPRI, r7
   17b64:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   17b68:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   17b6a:	b003      	add	sp, #12
   17b6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17b70:	f7f6 bb26 	b.w	e1c0 <z_impl_k_thread_abort>
   17b74:	0001efa0 	.word	0x0001efa0
   17b78:	000226e2 	.word	0x000226e2
   17b7c:	000226f8 	.word	0x000226f8
   17b80:	00022725 	.word	0x00022725
   17b84:	000226f0 	.word	0x000226f0
   17b88:	0002274b 	.word	0x0002274b
   17b8c:	00022768 	.word	0x00022768
   17b90:	0001faab 	.word	0x0001faab

00017b94 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   17b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b96:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   17b98:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   17b9a:	4e15      	ldr	r6, [pc, #84]	; (17bf0 <idle+0x5c>)
	__asm__ volatile(
   17b9c:	f04f 0220 	mov.w	r2, #32
   17ba0:	f3ef 8311 	mrs	r3, BASEPRI
   17ba4:	f382 8811 	msr	BASEPRI, r2
   17ba8:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   17bac:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   17bae:	b188      	cbz	r0, 17bd4 <idle+0x40>
			cpu->pending_abort = NULL;
   17bb0:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   17bb2:	f383 8811 	msr	BASEPRI, r3
   17bb6:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   17bba:	f001 f93b 	bl	18e34 <z_thread_single_abort>
	__asm__ volatile(
   17bbe:	f04f 0320 	mov.w	r3, #32
   17bc2:	f3ef 8011 	mrs	r0, BASEPRI
   17bc6:	f383 8811 	msr	BASEPRI, r3
   17bca:	f3bf 8f6f 	isb	sy
   17bce:	f006 f9db 	bl	1df88 <z_reschedule_irqlock>
			continue;
   17bd2:	e7e3      	b.n	17b9c <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   17bd4:	f002 f998 	bl	19f08 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17bd8:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   17bda:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17bdc:	2802      	cmp	r0, #2
   17bde:	bfd8      	it	le
   17be0:	4608      	movle	r0, r1
   17be2:	f002 f9c7 	bl	19f74 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   17be6:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   17be8:	f7f6 f830 	bl	dc4c <arch_cpu_idle>
}
   17bec:	e7d6      	b.n	17b9c <idle+0x8>
   17bee:	bf00      	nop
   17bf0:	2000a27c 	.word	0x2000a27c

00017bf4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17bf4:	4802      	ldr	r0, [pc, #8]	; (17c00 <z_bss_zero+0xc>)
   17bf6:	4a03      	ldr	r2, [pc, #12]	; (17c04 <z_bss_zero+0x10>)
   17bf8:	2100      	movs	r1, #0
   17bfa:	1a12      	subs	r2, r2, r0
   17bfc:	f004 b945 	b.w	1be8a <memset>
   17c00:	200086b8 	.word	0x200086b8
   17c04:	2000ea60 	.word	0x2000ea60

00017c08 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   17c08:	2201      	movs	r2, #1
{
   17c0a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   17c0c:	4b09      	ldr	r3, [pc, #36]	; (17c34 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17c0e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   17c10:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17c12:	f7ff fef9 	bl	17a08 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17c16:	f002 f819 	bl	19c4c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   17c1a:	2003      	movs	r0, #3
   17c1c:	f7ff fef4 	bl	17a08 <z_sys_init_run_level>

	z_init_static_threads();
   17c20:	f001 fe76 	bl	19910 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17c24:	f7f1 fa58 	bl	90d8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17c28:	4a03      	ldr	r2, [pc, #12]	; (17c38 <bg_thread_main+0x30>)
   17c2a:	7b13      	ldrb	r3, [r2, #12]
   17c2c:	f023 0301 	bic.w	r3, r3, #1
   17c30:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17c32:	bd08      	pop	{r3, pc}
   17c34:	2000ea5d 	.word	0x2000ea5d
   17c38:	20009850 	.word	0x20009850

00017c3c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   17c3c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   17c40:	4b34      	ldr	r3, [pc, #208]	; (17d14 <z_cstart+0xd8>)
   17c42:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   17c44:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17c48:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   17c4c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17c50:	2400      	movs	r4, #0
   17c52:	23e0      	movs	r3, #224	; 0xe0
   17c54:	4d30      	ldr	r5, [pc, #192]	; (17d18 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17c56:	f04f 0b01 	mov.w	fp, #1
   17c5a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17c5e:	77ec      	strb	r4, [r5, #31]
   17c60:	762c      	strb	r4, [r5, #24]
   17c62:	766c      	strb	r4, [r5, #25]
   17c64:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   17c68:	4e2c      	ldr	r6, [pc, #176]	; (17d1c <z_cstart+0xe0>)
   17c6a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17c6e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17c70:	f7f6 fa6e 	bl	e150 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17c74:	f7f5 ffe4 	bl	dc40 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17c78:	f04f 33ff 	mov.w	r3, #4294967295
   17c7c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17c7e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   17c80:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   17c84:	4d26      	ldr	r5, [pc, #152]	; (17d20 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   17c86:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17c8a:	ab06      	add	r3, sp, #24
   17c8c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   17c8e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   17c90:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   17c94:	f7ff feb8 	bl	17a08 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17c98:	2001      	movs	r0, #1
   17c9a:	f7ff feb5 	bl	17a08 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17c9e:	f8df a084 	ldr.w	sl, [pc, #132]	; 17d24 <z_cstart+0xe8>
	z_sched_init();
   17ca2:	f001 fb77 	bl	19394 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17ca6:	4b20      	ldr	r3, [pc, #128]	; (17d28 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   17ca8:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17cae:	491f      	ldr	r1, [pc, #124]	; (17d2c <z_cstart+0xf0>)
   17cb0:	9305      	str	r3, [sp, #20]
   17cb2:	4630      	mov	r0, r6
   17cb4:	4653      	mov	r3, sl
   17cb6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   17cba:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17cbe:	9400      	str	r4, [sp, #0]
   17cc0:	f001 fd74 	bl	197ac <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17cc4:	7b73      	ldrb	r3, [r6, #13]
   17cc6:	4680      	mov	r8, r0
   17cc8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   17ccc:	4630      	mov	r0, r6
   17cce:	7373      	strb	r3, [r6, #13]
   17cd0:	f000 feec 	bl	18aac <z_ready_thread>
	z_setup_new_thread(thread, stack,
   17cd4:	230f      	movs	r3, #15
   17cd6:	4f16      	ldr	r7, [pc, #88]	; (17d30 <z_cstart+0xf4>)
   17cd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17cdc:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17ce0:	4914      	ldr	r1, [pc, #80]	; (17d34 <z_cstart+0xf8>)
   17ce2:	4b15      	ldr	r3, [pc, #84]	; (17d38 <z_cstart+0xfc>)
   17ce4:	4638      	mov	r0, r7
   17ce6:	e9cd b404 	strd	fp, r4, [sp, #16]
   17cea:	e9cd 5400 	strd	r5, r4, [sp]
   17cee:	f001 fd5d 	bl	197ac <z_setup_new_thread>
   17cf2:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17cf4:	4652      	mov	r2, sl
   17cf6:	f023 0304 	bic.w	r3, r3, #4
   17cfa:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   17cfc:	f105 031c 	add.w	r3, r5, #28
   17d00:	4641      	mov	r1, r8
   17d02:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   17d04:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   17d08:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   17d0a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   17d0c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17d10:	f7f5 ff7c 	bl	dc0c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17d14:	20012678 	.word	0x20012678
   17d18:	e000ed00 	.word	0xe000ed00
   17d1c:	20009850 	.word	0x20009850
   17d20:	2000a27c 	.word	0x2000a27c
   17d24:	00017c09 	.word	0x00017c09
   17d28:	000227d4 	.word	0x000227d4
   17d2c:	20010538 	.word	0x20010538
   17d30:	200097c0 	.word	0x200097c0
   17d34:	20012538 	.word	0x20012538
   17d38:	00017b95 	.word	0x00017b95

00017d3c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   17d3c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   17d3e:	4c0c      	ldr	r4, [pc, #48]	; (17d70 <statics_init+0x34>)
   17d40:	4d0c      	ldr	r5, [pc, #48]	; (17d74 <statics_init+0x38>)
   17d42:	4e0d      	ldr	r6, [pc, #52]	; (17d78 <statics_init+0x3c>)
   17d44:	42ac      	cmp	r4, r5
   17d46:	d908      	bls.n	17d5a <statics_init+0x1e>
   17d48:	4631      	mov	r1, r6
   17d4a:	480c      	ldr	r0, [pc, #48]	; (17d7c <statics_init+0x40>)
   17d4c:	2215      	movs	r2, #21
   17d4e:	f002 fe47 	bl	1a9e0 <printk>
   17d52:	2115      	movs	r1, #21
   17d54:	4630      	mov	r0, r6
   17d56:	f003 f8e9 	bl	1af2c <assert_post_action>
   17d5a:	42ac      	cmp	r4, r5
   17d5c:	d301      	bcc.n	17d62 <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   17d5e:	2000      	movs	r0, #0
   17d60:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17d62:	4620      	mov	r0, r4
   17d64:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   17d68:	f006 f8c0 	bl	1deec <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   17d6c:	3418      	adds	r4, #24
   17d6e:	e7e9      	b.n	17d44 <statics_init+0x8>
   17d70:	20008510 	.word	0x20008510
   17d74:	20008528 	.word	0x20008528
   17d78:	000227dc 	.word	0x000227dc
   17d7c:	0001faab 	.word	0x0001faab

00017d80 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   17d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d84:	b085      	sub	sp, #20
   17d86:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   17d8a:	4606      	mov	r6, r0
   17d8c:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   17d8e:	4648      	mov	r0, r9
   17d90:	4639      	mov	r1, r7
{
   17d92:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   17d94:	f006 f9b0 	bl	1e0f8 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17d98:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   17d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17da0:	f04f 0320 	mov.w	r3, #32
   17da4:	f3ef 8411 	mrs	r4, BASEPRI
   17da8:	f383 8811 	msr	BASEPRI, r3
   17dac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17db0:	4628      	mov	r0, r5
   17db2:	f001 fe29 	bl	19a08 <z_spin_lock_valid>
   17db6:	b940      	cbnz	r0, 17dca <k_heap_aligned_alloc+0x4a>
   17db8:	4932      	ldr	r1, [pc, #200]	; (17e84 <k_heap_aligned_alloc+0x104>)
   17dba:	4833      	ldr	r0, [pc, #204]	; (17e88 <k_heap_aligned_alloc+0x108>)
   17dbc:	227c      	movs	r2, #124	; 0x7c
   17dbe:	f002 fe0f 	bl	1a9e0 <printk>
   17dc2:	217c      	movs	r1, #124	; 0x7c
   17dc4:	482f      	ldr	r0, [pc, #188]	; (17e84 <k_heap_aligned_alloc+0x104>)
   17dc6:	f003 f8b1 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   17dca:	4628      	mov	r0, r5
   17dcc:	f001 fe38 	bl	19a40 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17dd0:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17dd4:	b15b      	cbz	r3, 17dee <k_heap_aligned_alloc+0x6e>
   17dd6:	ea59 0307 	orrs.w	r3, r9, r7
   17dda:	d008      	beq.n	17dee <k_heap_aligned_alloc+0x6e>
   17ddc:	492b      	ldr	r1, [pc, #172]	; (17e8c <k_heap_aligned_alloc+0x10c>)
   17dde:	482a      	ldr	r0, [pc, #168]	; (17e88 <k_heap_aligned_alloc+0x108>)
   17de0:	2224      	movs	r2, #36	; 0x24
   17de2:	f002 fdfd 	bl	1a9e0 <printk>
   17de6:	2124      	movs	r1, #36	; 0x24
   17de8:	4828      	ldr	r0, [pc, #160]	; (17e8c <k_heap_aligned_alloc+0x10c>)
   17dea:	f003 f89f 	bl	1af2c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17dee:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17e84 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17df2:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17df6:	4642      	mov	r2, r8
   17df8:	4659      	mov	r1, fp
   17dfa:	4630      	mov	r0, r6
   17dfc:	f7f3 f8c6 	bl	af8c <sys_heap_aligned_alloc>
   17e00:	4607      	mov	r7, r0
		now = z_tick_get();
   17e02:	f002 f993 	bl	1a12c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   17e06:	b1a7      	cbz	r7, 17e32 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e08:	4628      	mov	r0, r5
   17e0a:	f001 fe0b 	bl	19a24 <z_spin_unlock_valid>
   17e0e:	b940      	cbnz	r0, 17e22 <k_heap_aligned_alloc+0xa2>
   17e10:	491c      	ldr	r1, [pc, #112]	; (17e84 <k_heap_aligned_alloc+0x104>)
   17e12:	481d      	ldr	r0, [pc, #116]	; (17e88 <k_heap_aligned_alloc+0x108>)
   17e14:	22a7      	movs	r2, #167	; 0xa7
   17e16:	f002 fde3 	bl	1a9e0 <printk>
   17e1a:	21a7      	movs	r1, #167	; 0xa7
   17e1c:	4819      	ldr	r0, [pc, #100]	; (17e84 <k_heap_aligned_alloc+0x104>)
   17e1e:	f003 f885 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   17e22:	f384 8811 	msr	BASEPRI, r4
   17e26:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17e2a:	4638      	mov	r0, r7
   17e2c:	b005      	add	sp, #20
   17e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   17e32:	9b02      	ldr	r3, [sp, #8]
   17e34:	1a18      	subs	r0, r3, r0
   17e36:	9b03      	ldr	r3, [sp, #12]
   17e38:	eb63 0101 	sbc.w	r1, r3, r1
   17e3c:	2801      	cmp	r0, #1
   17e3e:	f171 0300 	sbcs.w	r3, r1, #0
   17e42:	dbe1      	blt.n	17e08 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17e44:	e9cd 0100 	strd	r0, r1, [sp]
   17e48:	4652      	mov	r2, sl
   17e4a:	4621      	mov	r1, r4
   17e4c:	4628      	mov	r0, r5
   17e4e:	f001 f997 	bl	19180 <z_pend_curr>
	__asm__ volatile(
   17e52:	f04f 0320 	mov.w	r3, #32
   17e56:	f3ef 8411 	mrs	r4, BASEPRI
   17e5a:	f383 8811 	msr	BASEPRI, r3
   17e5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e62:	4628      	mov	r0, r5
   17e64:	f001 fdd0 	bl	19a08 <z_spin_lock_valid>
   17e68:	b940      	cbnz	r0, 17e7c <k_heap_aligned_alloc+0xfc>
   17e6a:	4649      	mov	r1, r9
   17e6c:	4806      	ldr	r0, [pc, #24]	; (17e88 <k_heap_aligned_alloc+0x108>)
   17e6e:	227c      	movs	r2, #124	; 0x7c
   17e70:	f002 fdb6 	bl	1a9e0 <printk>
   17e74:	217c      	movs	r1, #124	; 0x7c
   17e76:	4648      	mov	r0, r9
   17e78:	f003 f858 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   17e7c:	4628      	mov	r0, r5
   17e7e:	f001 fddf 	bl	19a40 <z_spin_lock_set_owner>
	return k;
   17e82:	e7b8      	b.n	17df6 <k_heap_aligned_alloc+0x76>
   17e84:	0001fae5 	.word	0x0001fae5
   17e88:	0001faab 	.word	0x0001faab
   17e8c:	000227dc 	.word	0x000227dc

00017e90 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   17e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e92:	4604      	mov	r4, r0
   17e94:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17e96:	f100 0514 	add.w	r5, r0, #20
   17e9a:	f04f 0320 	mov.w	r3, #32
   17e9e:	f3ef 8711 	mrs	r7, BASEPRI
   17ea2:	f383 8811 	msr	BASEPRI, r3
   17ea6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17eaa:	4628      	mov	r0, r5
   17eac:	f001 fdac 	bl	19a08 <z_spin_lock_valid>
   17eb0:	b940      	cbnz	r0, 17ec4 <k_heap_free+0x34>
   17eb2:	4916      	ldr	r1, [pc, #88]	; (17f0c <k_heap_free+0x7c>)
   17eb4:	4816      	ldr	r0, [pc, #88]	; (17f10 <k_heap_free+0x80>)
   17eb6:	227c      	movs	r2, #124	; 0x7c
   17eb8:	f002 fd92 	bl	1a9e0 <printk>
   17ebc:	217c      	movs	r1, #124	; 0x7c
   17ebe:	4813      	ldr	r0, [pc, #76]	; (17f0c <k_heap_free+0x7c>)
   17ec0:	f003 f834 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   17ec4:	4628      	mov	r0, r5
   17ec6:	f001 fdbb 	bl	19a40 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   17eca:	4620      	mov	r0, r4
   17ecc:	4631      	mov	r1, r6
   17ece:	f7f3 f81b 	bl	af08 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   17ed2:	f104 000c 	add.w	r0, r4, #12
   17ed6:	f006 f881 	bl	1dfdc <z_unpend_all>
   17eda:	b128      	cbz	r0, 17ee8 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   17edc:	4639      	mov	r1, r7
   17ede:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   17ee4:	f000 bc0e 	b.w	18704 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ee8:	4628      	mov	r0, r5
   17eea:	f001 fd9b 	bl	19a24 <z_spin_unlock_valid>
   17eee:	b940      	cbnz	r0, 17f02 <k_heap_free+0x72>
   17ef0:	4906      	ldr	r1, [pc, #24]	; (17f0c <k_heap_free+0x7c>)
   17ef2:	4807      	ldr	r0, [pc, #28]	; (17f10 <k_heap_free+0x80>)
   17ef4:	22a7      	movs	r2, #167	; 0xa7
   17ef6:	f002 fd73 	bl	1a9e0 <printk>
   17efa:	21a7      	movs	r1, #167	; 0xa7
   17efc:	4803      	ldr	r0, [pc, #12]	; (17f0c <k_heap_free+0x7c>)
   17efe:	f003 f815 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   17f02:	f387 8811 	msr	BASEPRI, r7
   17f06:	f3bf 8f6f 	isb	sy
}
   17f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f0c:	0001fae5 	.word	0x0001fae5
   17f10:	0001faab 	.word	0x0001faab

00017f14 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   17f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17f16:	4c14      	ldr	r4, [pc, #80]	; (17f68 <init_mem_slab_module+0x54>)
   17f18:	4d14      	ldr	r5, [pc, #80]	; (17f6c <init_mem_slab_module+0x58>)
   17f1a:	4e15      	ldr	r6, [pc, #84]	; (17f70 <init_mem_slab_module+0x5c>)
   17f1c:	42ac      	cmp	r4, r5
   17f1e:	d908      	bls.n	17f32 <init_mem_slab_module+0x1e>
   17f20:	4631      	mov	r1, r6
   17f22:	4814      	ldr	r0, [pc, #80]	; (17f74 <init_mem_slab_module+0x60>)
   17f24:	2242      	movs	r2, #66	; 0x42
   17f26:	f002 fd5b 	bl	1a9e0 <printk>
   17f2a:	2142      	movs	r1, #66	; 0x42
   17f2c:	4630      	mov	r0, r6
   17f2e:	f002 fffd 	bl	1af2c <assert_post_action>
   17f32:	42ac      	cmp	r4, r5
   17f34:	d301      	bcc.n	17f3a <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   17f36:	2000      	movs	r0, #0
	return rc;
}
   17f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   17f3a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   17f3e:	ea42 0301 	orr.w	r3, r2, r1
   17f42:	f013 0303 	ands.w	r3, r3, #3
   17f46:	d10b      	bne.n	17f60 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   17f48:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   17f4a:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17f4c:	4283      	cmp	r3, r0
   17f4e:	d101      	bne.n	17f54 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17f50:	341c      	adds	r4, #28
   17f52:	e7e3      	b.n	17f1c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   17f54:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17f56:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   17f58:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   17f5a:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   17f5c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   17f5e:	e7f5      	b.n	17f4c <init_mem_slab_module+0x38>
	return rc;
   17f60:	f06f 0015 	mvn.w	r0, #21
   17f64:	e7e8      	b.n	17f38 <init_mem_slab_module+0x24>
   17f66:	bf00      	nop
   17f68:	200084bc 	.word	0x200084bc
   17f6c:	20008510 	.word	0x20008510
   17f70:	000227fe 	.word	0x000227fe
   17f74:	0001faab 	.word	0x0001faab

00017f78 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17f78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17f7c:	4604      	mov	r4, r0
   17f7e:	460d      	mov	r5, r1
   17f80:	4617      	mov	r7, r2
   17f82:	461e      	mov	r6, r3
	__asm__ volatile(
   17f84:	f04f 0320 	mov.w	r3, #32
   17f88:	f3ef 8811 	mrs	r8, BASEPRI
   17f8c:	f383 8811 	msr	BASEPRI, r3
   17f90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f94:	4821      	ldr	r0, [pc, #132]	; (1801c <k_mem_slab_alloc+0xa4>)
   17f96:	f001 fd37 	bl	19a08 <z_spin_lock_valid>
   17f9a:	b940      	cbnz	r0, 17fae <k_mem_slab_alloc+0x36>
   17f9c:	4920      	ldr	r1, [pc, #128]	; (18020 <k_mem_slab_alloc+0xa8>)
   17f9e:	4821      	ldr	r0, [pc, #132]	; (18024 <k_mem_slab_alloc+0xac>)
   17fa0:	227c      	movs	r2, #124	; 0x7c
   17fa2:	f002 fd1d 	bl	1a9e0 <printk>
   17fa6:	217c      	movs	r1, #124	; 0x7c
   17fa8:	481d      	ldr	r0, [pc, #116]	; (18020 <k_mem_slab_alloc+0xa8>)
   17faa:	f002 ffbf 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   17fae:	481b      	ldr	r0, [pc, #108]	; (1801c <k_mem_slab_alloc+0xa4>)
   17fb0:	f001 fd46 	bl	19a40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   17fb4:	6963      	ldr	r3, [r4, #20]
   17fb6:	b1c3      	cbz	r3, 17fea <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   17fb8:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   17fba:	681b      	ldr	r3, [r3, #0]
   17fbc:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   17fbe:	69a3      	ldr	r3, [r4, #24]
   17fc0:	3301      	adds	r3, #1
   17fc2:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17fc4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17fc6:	4815      	ldr	r0, [pc, #84]	; (1801c <k_mem_slab_alloc+0xa4>)
   17fc8:	f001 fd2c 	bl	19a24 <z_spin_unlock_valid>
   17fcc:	b940      	cbnz	r0, 17fe0 <k_mem_slab_alloc+0x68>
   17fce:	4914      	ldr	r1, [pc, #80]	; (18020 <k_mem_slab_alloc+0xa8>)
   17fd0:	4814      	ldr	r0, [pc, #80]	; (18024 <k_mem_slab_alloc+0xac>)
   17fd2:	22a7      	movs	r2, #167	; 0xa7
   17fd4:	f002 fd04 	bl	1a9e0 <printk>
   17fd8:	21a7      	movs	r1, #167	; 0xa7
   17fda:	4811      	ldr	r0, [pc, #68]	; (18020 <k_mem_slab_alloc+0xa8>)
   17fdc:	f002 ffa6 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   17fe0:	f388 8811 	msr	BASEPRI, r8
   17fe4:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   17fe8:	e013      	b.n	18012 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17fea:	ea57 0206 	orrs.w	r2, r7, r6
   17fee:	d103      	bne.n	17ff8 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   17ff0:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   17ff4:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   17ff6:	e7e6      	b.n	17fc6 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   17ff8:	4622      	mov	r2, r4
   17ffa:	4641      	mov	r1, r8
   17ffc:	e9cd 7600 	strd	r7, r6, [sp]
   18000:	4806      	ldr	r0, [pc, #24]	; (1801c <k_mem_slab_alloc+0xa4>)
   18002:	f001 f8bd 	bl	19180 <z_pend_curr>
		if (result == 0) {
   18006:	4604      	mov	r4, r0
   18008:	b918      	cbnz	r0, 18012 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   1800a:	4b07      	ldr	r3, [pc, #28]	; (18028 <k_mem_slab_alloc+0xb0>)
   1800c:	689b      	ldr	r3, [r3, #8]
   1800e:	695b      	ldr	r3, [r3, #20]
   18010:	602b      	str	r3, [r5, #0]
}
   18012:	4620      	mov	r0, r4
   18014:	b002      	add	sp, #8
   18016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1801a:	bf00      	nop
   1801c:	2000a274 	.word	0x2000a274
   18020:	0001fae5 	.word	0x0001fae5
   18024:	0001faab 	.word	0x0001faab
   18028:	2000a27c 	.word	0x2000a27c

0001802c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1802e:	4604      	mov	r4, r0
   18030:	460d      	mov	r5, r1
	__asm__ volatile(
   18032:	f04f 0320 	mov.w	r3, #32
   18036:	f3ef 8611 	mrs	r6, BASEPRI
   1803a:	f383 8811 	msr	BASEPRI, r3
   1803e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18042:	481e      	ldr	r0, [pc, #120]	; (180bc <k_mem_slab_free+0x90>)
   18044:	f001 fce0 	bl	19a08 <z_spin_lock_valid>
   18048:	b940      	cbnz	r0, 1805c <k_mem_slab_free+0x30>
   1804a:	491d      	ldr	r1, [pc, #116]	; (180c0 <k_mem_slab_free+0x94>)
   1804c:	481d      	ldr	r0, [pc, #116]	; (180c4 <k_mem_slab_free+0x98>)
   1804e:	227c      	movs	r2, #124	; 0x7c
   18050:	f002 fcc6 	bl	1a9e0 <printk>
   18054:	217c      	movs	r1, #124	; 0x7c
   18056:	481a      	ldr	r0, [pc, #104]	; (180c0 <k_mem_slab_free+0x94>)
   18058:	f002 ff68 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1805c:	4817      	ldr	r0, [pc, #92]	; (180bc <k_mem_slab_free+0x90>)
   1805e:	f001 fcef 	bl	19a40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   18062:	6967      	ldr	r7, [r4, #20]
   18064:	b97f      	cbnz	r7, 18086 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   18066:	4620      	mov	r0, r4
   18068:	f001 f92c 	bl	192c4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1806c:	b158      	cbz	r0, 18086 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1806e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18070:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18074:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   18076:	f000 fd19 	bl	18aac <z_ready_thread>
			z_reschedule(&lock, key);
   1807a:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1807c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   18080:	480e      	ldr	r0, [pc, #56]	; (180bc <k_mem_slab_free+0x90>)
   18082:	f000 bb3f 	b.w	18704 <z_reschedule>
	**(char ***) mem = slab->free_list;
   18086:	682b      	ldr	r3, [r5, #0]
   18088:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1808a:	480c      	ldr	r0, [pc, #48]	; (180bc <k_mem_slab_free+0x90>)
   1808c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1808e:	682b      	ldr	r3, [r5, #0]
   18090:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   18092:	69a3      	ldr	r3, [r4, #24]
   18094:	3b01      	subs	r3, #1
   18096:	61a3      	str	r3, [r4, #24]
   18098:	f001 fcc4 	bl	19a24 <z_spin_unlock_valid>
   1809c:	b940      	cbnz	r0, 180b0 <k_mem_slab_free+0x84>
   1809e:	4908      	ldr	r1, [pc, #32]	; (180c0 <k_mem_slab_free+0x94>)
   180a0:	4808      	ldr	r0, [pc, #32]	; (180c4 <k_mem_slab_free+0x98>)
   180a2:	22a7      	movs	r2, #167	; 0xa7
   180a4:	f002 fc9c 	bl	1a9e0 <printk>
   180a8:	21a7      	movs	r1, #167	; 0xa7
   180aa:	4805      	ldr	r0, [pc, #20]	; (180c0 <k_mem_slab_free+0x94>)
   180ac:	f002 ff3e 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   180b0:	f386 8811 	msr	BASEPRI, r6
   180b4:	f3bf 8f6f 	isb	sy
}
   180b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   180ba:	bf00      	nop
   180bc:	2000a274 	.word	0x2000a274
   180c0:	0001fae5 	.word	0x0001fae5
   180c4:	0001faab 	.word	0x0001faab

000180c8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   180c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   180cc:	4604      	mov	r4, r0
   180ce:	4617      	mov	r7, r2
   180d0:	461e      	mov	r6, r3
   180d2:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   180d6:	b143      	cbz	r3, 180ea <z_impl_k_mutex_lock+0x22>
   180d8:	495c      	ldr	r1, [pc, #368]	; (1824c <z_impl_k_mutex_lock+0x184>)
   180da:	485d      	ldr	r0, [pc, #372]	; (18250 <z_impl_k_mutex_lock+0x188>)
   180dc:	227d      	movs	r2, #125	; 0x7d
   180de:	f002 fc7f 	bl	1a9e0 <printk>
   180e2:	217d      	movs	r1, #125	; 0x7d
   180e4:	4859      	ldr	r0, [pc, #356]	; (1824c <z_impl_k_mutex_lock+0x184>)
   180e6:	f002 ff21 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   180ea:	f04f 0320 	mov.w	r3, #32
   180ee:	f3ef 8811 	mrs	r8, BASEPRI
   180f2:	f383 8811 	msr	BASEPRI, r3
   180f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   180fa:	4856      	ldr	r0, [pc, #344]	; (18254 <z_impl_k_mutex_lock+0x18c>)
   180fc:	f001 fc84 	bl	19a08 <z_spin_lock_valid>
   18100:	b940      	cbnz	r0, 18114 <z_impl_k_mutex_lock+0x4c>
   18102:	4955      	ldr	r1, [pc, #340]	; (18258 <z_impl_k_mutex_lock+0x190>)
   18104:	4852      	ldr	r0, [pc, #328]	; (18250 <z_impl_k_mutex_lock+0x188>)
   18106:	227c      	movs	r2, #124	; 0x7c
   18108:	f002 fc6a 	bl	1a9e0 <printk>
   1810c:	217c      	movs	r1, #124	; 0x7c
   1810e:	4852      	ldr	r0, [pc, #328]	; (18258 <z_impl_k_mutex_lock+0x190>)
   18110:	f002 ff0c 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18114:	484f      	ldr	r0, [pc, #316]	; (18254 <z_impl_k_mutex_lock+0x18c>)
   18116:	f001 fc93 	bl	19a40 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1811a:	68e3      	ldr	r3, [r4, #12]
   1811c:	4a4f      	ldr	r2, [pc, #316]	; (1825c <z_impl_k_mutex_lock+0x194>)
   1811e:	b1d3      	cbz	r3, 18156 <z_impl_k_mutex_lock+0x8e>
   18120:	68a0      	ldr	r0, [r4, #8]
   18122:	6891      	ldr	r1, [r2, #8]
   18124:	4288      	cmp	r0, r1
   18126:	d033      	beq.n	18190 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18128:	ea57 0306 	orrs.w	r3, r7, r6
   1812c:	d132      	bne.n	18194 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1812e:	4849      	ldr	r0, [pc, #292]	; (18254 <z_impl_k_mutex_lock+0x18c>)
   18130:	f001 fc78 	bl	19a24 <z_spin_unlock_valid>
   18134:	b940      	cbnz	r0, 18148 <z_impl_k_mutex_lock+0x80>
   18136:	4948      	ldr	r1, [pc, #288]	; (18258 <z_impl_k_mutex_lock+0x190>)
   18138:	4845      	ldr	r0, [pc, #276]	; (18250 <z_impl_k_mutex_lock+0x188>)
   1813a:	22a7      	movs	r2, #167	; 0xa7
   1813c:	f002 fc50 	bl	1a9e0 <printk>
   18140:	21a7      	movs	r1, #167	; 0xa7
   18142:	4845      	ldr	r0, [pc, #276]	; (18258 <z_impl_k_mutex_lock+0x190>)
   18144:	f002 fef2 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18148:	f388 8811 	msr	BASEPRI, r8
   1814c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   18150:	f06f 000f 	mvn.w	r0, #15
   18154:	e019      	b.n	1818a <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   18156:	6891      	ldr	r1, [r2, #8]
   18158:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1815c:	3301      	adds	r3, #1
   1815e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18160:	6893      	ldr	r3, [r2, #8]
   18162:	483c      	ldr	r0, [pc, #240]	; (18254 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18164:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   18166:	60a3      	str	r3, [r4, #8]
   18168:	f001 fc5c 	bl	19a24 <z_spin_unlock_valid>
   1816c:	b940      	cbnz	r0, 18180 <z_impl_k_mutex_lock+0xb8>
   1816e:	493a      	ldr	r1, [pc, #232]	; (18258 <z_impl_k_mutex_lock+0x190>)
   18170:	4837      	ldr	r0, [pc, #220]	; (18250 <z_impl_k_mutex_lock+0x188>)
   18172:	22a7      	movs	r2, #167	; 0xa7
   18174:	f002 fc34 	bl	1a9e0 <printk>
   18178:	21a7      	movs	r1, #167	; 0xa7
   1817a:	4837      	ldr	r0, [pc, #220]	; (18258 <z_impl_k_mutex_lock+0x190>)
   1817c:	f002 fed6 	bl	1af2c <assert_post_action>
   18180:	f388 8811 	msr	BASEPRI, r8
   18184:	f3bf 8f6f 	isb	sy
		return 0;
   18188:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1818a:	b002      	add	sp, #8
   1818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18190:	6921      	ldr	r1, [r4, #16]
   18192:	e7e3      	b.n	1815c <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18194:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18198:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1819c:	4299      	cmp	r1, r3
   1819e:	bfa8      	it	ge
   181a0:	4619      	movge	r1, r3
   181a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   181a6:	4299      	cmp	r1, r3
   181a8:	da3b      	bge.n	18222 <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   181aa:	f005 fea7 	bl	1defc <adjust_owner_prio.isra.0>
   181ae:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   181b0:	4622      	mov	r2, r4
   181b2:	4641      	mov	r1, r8
   181b4:	e9cd 7600 	strd	r7, r6, [sp]
   181b8:	4826      	ldr	r0, [pc, #152]	; (18254 <z_impl_k_mutex_lock+0x18c>)
   181ba:	f000 ffe1 	bl	19180 <z_pend_curr>
	if (got_mutex == 0) {
   181be:	2800      	cmp	r0, #0
   181c0:	d0e3      	beq.n	1818a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   181c2:	f04f 0320 	mov.w	r3, #32
   181c6:	f3ef 8611 	mrs	r6, BASEPRI
   181ca:	f383 8811 	msr	BASEPRI, r3
   181ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181d2:	4820      	ldr	r0, [pc, #128]	; (18254 <z_impl_k_mutex_lock+0x18c>)
   181d4:	f001 fc18 	bl	19a08 <z_spin_lock_valid>
   181d8:	b940      	cbnz	r0, 181ec <z_impl_k_mutex_lock+0x124>
   181da:	491f      	ldr	r1, [pc, #124]	; (18258 <z_impl_k_mutex_lock+0x190>)
   181dc:	481c      	ldr	r0, [pc, #112]	; (18250 <z_impl_k_mutex_lock+0x188>)
   181de:	227c      	movs	r2, #124	; 0x7c
   181e0:	f002 fbfe 	bl	1a9e0 <printk>
   181e4:	217c      	movs	r1, #124	; 0x7c
   181e6:	481c      	ldr	r0, [pc, #112]	; (18258 <z_impl_k_mutex_lock+0x190>)
   181e8:	f002 fea0 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   181ec:	4819      	ldr	r0, [pc, #100]	; (18254 <z_impl_k_mutex_lock+0x18c>)
   181ee:	f001 fc27 	bl	19a40 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   181f2:	6823      	ldr	r3, [r4, #0]
   181f4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   181f6:	42a3      	cmp	r3, r4
   181f8:	d007      	beq.n	1820a <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   181fa:	b133      	cbz	r3, 1820a <z_impl_k_mutex_lock+0x142>
   181fc:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18200:	4299      	cmp	r1, r3
   18202:	bfa8      	it	ge
   18204:	4619      	movge	r1, r3
   18206:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1820a:	68a0      	ldr	r0, [r4, #8]
   1820c:	f005 fe76 	bl	1defc <adjust_owner_prio.isra.0>
   18210:	b900      	cbnz	r0, 18214 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   18212:	b145      	cbz	r5, 18226 <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   18214:	4631      	mov	r1, r6
   18216:	480f      	ldr	r0, [pc, #60]	; (18254 <z_impl_k_mutex_lock+0x18c>)
   18218:	f000 fa74 	bl	18704 <z_reschedule>
	return -EAGAIN;
   1821c:	f06f 000a 	mvn.w	r0, #10
   18220:	e7b3      	b.n	1818a <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   18222:	2500      	movs	r5, #0
   18224:	e7c4      	b.n	181b0 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18226:	480b      	ldr	r0, [pc, #44]	; (18254 <z_impl_k_mutex_lock+0x18c>)
   18228:	f001 fbfc 	bl	19a24 <z_spin_unlock_valid>
   1822c:	b940      	cbnz	r0, 18240 <z_impl_k_mutex_lock+0x178>
   1822e:	490a      	ldr	r1, [pc, #40]	; (18258 <z_impl_k_mutex_lock+0x190>)
   18230:	4807      	ldr	r0, [pc, #28]	; (18250 <z_impl_k_mutex_lock+0x188>)
   18232:	22a7      	movs	r2, #167	; 0xa7
   18234:	f002 fbd4 	bl	1a9e0 <printk>
   18238:	21a7      	movs	r1, #167	; 0xa7
   1823a:	4807      	ldr	r0, [pc, #28]	; (18258 <z_impl_k_mutex_lock+0x190>)
   1823c:	f002 fe76 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18240:	f386 8811 	msr	BASEPRI, r6
   18244:	f3bf 8f6f 	isb	sy
   18248:	e7e8      	b.n	1821c <z_impl_k_mutex_lock+0x154>
   1824a:	bf00      	nop
   1824c:	00022823 	.word	0x00022823
   18250:	0001faab 	.word	0x0001faab
   18254:	2000a278 	.word	0x2000a278
   18258:	0001fae5 	.word	0x0001fae5
   1825c:	2000a27c 	.word	0x2000a27c

00018260 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18260:	b538      	push	{r3, r4, r5, lr}
   18262:	4604      	mov	r4, r0
   18264:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   18268:	b143      	cbz	r3, 1827c <z_impl_k_mutex_unlock+0x1c>
   1826a:	4946      	ldr	r1, [pc, #280]	; (18384 <z_impl_k_mutex_unlock+0x124>)
   1826c:	4846      	ldr	r0, [pc, #280]	; (18388 <z_impl_k_mutex_unlock+0x128>)
   1826e:	22d8      	movs	r2, #216	; 0xd8
   18270:	f002 fbb6 	bl	1a9e0 <printk>
   18274:	21d8      	movs	r1, #216	; 0xd8
   18276:	4843      	ldr	r0, [pc, #268]	; (18384 <z_impl_k_mutex_unlock+0x124>)
   18278:	f002 fe58 	bl	1af2c <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   1827c:	68a3      	ldr	r3, [r4, #8]
   1827e:	2b00      	cmp	r3, #0
   18280:	d079      	beq.n	18376 <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18282:	4d42      	ldr	r5, [pc, #264]	; (1838c <z_impl_k_mutex_unlock+0x12c>)
   18284:	68aa      	ldr	r2, [r5, #8]
   18286:	4293      	cmp	r3, r2
   18288:	d178      	bne.n	1837c <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1828a:	68e3      	ldr	r3, [r4, #12]
   1828c:	b943      	cbnz	r3, 182a0 <z_impl_k_mutex_unlock+0x40>
   1828e:	493d      	ldr	r1, [pc, #244]	; (18384 <z_impl_k_mutex_unlock+0x124>)
   18290:	483d      	ldr	r0, [pc, #244]	; (18388 <z_impl_k_mutex_unlock+0x128>)
   18292:	22ea      	movs	r2, #234	; 0xea
   18294:	f002 fba4 	bl	1a9e0 <printk>
   18298:	21ea      	movs	r1, #234	; 0xea
   1829a:	483a      	ldr	r0, [pc, #232]	; (18384 <z_impl_k_mutex_unlock+0x124>)
   1829c:	f002 fe46 	bl	1af2c <assert_post_action>
   182a0:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   182a4:	b153      	cbz	r3, 182bc <z_impl_k_mutex_unlock+0x5c>
   182a6:	493a      	ldr	r1, [pc, #232]	; (18390 <z_impl_k_mutex_unlock+0x130>)
   182a8:	4837      	ldr	r0, [pc, #220]	; (18388 <z_impl_k_mutex_unlock+0x128>)
   182aa:	f44f 7289 	mov.w	r2, #274	; 0x112
   182ae:	f002 fb97 	bl	1a9e0 <printk>
   182b2:	f44f 7189 	mov.w	r1, #274	; 0x112
   182b6:	4836      	ldr	r0, [pc, #216]	; (18390 <z_impl_k_mutex_unlock+0x130>)
   182b8:	f002 fe38 	bl	1af2c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   182bc:	68ab      	ldr	r3, [r5, #8]
   182be:	7bdb      	ldrb	r3, [r3, #15]
   182c0:	2b01      	cmp	r3, #1
   182c2:	d10a      	bne.n	182da <z_impl_k_mutex_unlock+0x7a>
   182c4:	4932      	ldr	r1, [pc, #200]	; (18390 <z_impl_k_mutex_unlock+0x130>)
   182c6:	4830      	ldr	r0, [pc, #192]	; (18388 <z_impl_k_mutex_unlock+0x128>)
   182c8:	f240 1213 	movw	r2, #275	; 0x113
   182cc:	f002 fb88 	bl	1a9e0 <printk>
   182d0:	f240 1113 	movw	r1, #275	; 0x113
   182d4:	482e      	ldr	r0, [pc, #184]	; (18390 <z_impl_k_mutex_unlock+0x130>)
   182d6:	f002 fe29 	bl	1af2c <assert_post_action>

	--_current->base.sched_locked;
   182da:	68aa      	ldr	r2, [r5, #8]
   182dc:	7bd3      	ldrb	r3, [r2, #15]
   182de:	3b01      	subs	r3, #1
   182e0:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   182e2:	68e3      	ldr	r3, [r4, #12]
   182e4:	2b01      	cmp	r3, #1
   182e6:	d005      	beq.n	182f4 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   182e8:	3b01      	subs	r3, #1
   182ea:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   182ec:	f000 fb38 	bl	18960 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   182f0:	2000      	movs	r0, #0
}
   182f2:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   182f4:	f04f 0320 	mov.w	r3, #32
   182f8:	f3ef 8511 	mrs	r5, BASEPRI
   182fc:	f383 8811 	msr	BASEPRI, r3
   18300:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18304:	4823      	ldr	r0, [pc, #140]	; (18394 <z_impl_k_mutex_unlock+0x134>)
   18306:	f001 fb7f 	bl	19a08 <z_spin_lock_valid>
   1830a:	b940      	cbnz	r0, 1831e <z_impl_k_mutex_unlock+0xbe>
   1830c:	4922      	ldr	r1, [pc, #136]	; (18398 <z_impl_k_mutex_unlock+0x138>)
   1830e:	481e      	ldr	r0, [pc, #120]	; (18388 <z_impl_k_mutex_unlock+0x128>)
   18310:	227c      	movs	r2, #124	; 0x7c
   18312:	f002 fb65 	bl	1a9e0 <printk>
   18316:	217c      	movs	r1, #124	; 0x7c
   18318:	481f      	ldr	r0, [pc, #124]	; (18398 <z_impl_k_mutex_unlock+0x138>)
   1831a:	f002 fe07 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1831e:	481d      	ldr	r0, [pc, #116]	; (18394 <z_impl_k_mutex_unlock+0x134>)
   18320:	f001 fb8e 	bl	19a40 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   18324:	6921      	ldr	r1, [r4, #16]
   18326:	68a0      	ldr	r0, [r4, #8]
   18328:	f005 fde8 	bl	1defc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1832c:	4620      	mov	r0, r4
   1832e:	f000 ffc9 	bl	192c4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   18332:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18334:	b160      	cbz	r0, 18350 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   18336:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1833a:	6122      	str	r2, [r4, #16]
   1833c:	2200      	movs	r2, #0
   1833e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   18342:	f000 fbb3 	bl	18aac <z_ready_thread>
		z_reschedule(&lock, key);
   18346:	4629      	mov	r1, r5
   18348:	4812      	ldr	r0, [pc, #72]	; (18394 <z_impl_k_mutex_unlock+0x134>)
   1834a:	f000 f9db 	bl	18704 <z_reschedule>
   1834e:	e7cd      	b.n	182ec <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   18350:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18352:	4810      	ldr	r0, [pc, #64]	; (18394 <z_impl_k_mutex_unlock+0x134>)
   18354:	f001 fb66 	bl	19a24 <z_spin_unlock_valid>
   18358:	b940      	cbnz	r0, 1836c <z_impl_k_mutex_unlock+0x10c>
   1835a:	490f      	ldr	r1, [pc, #60]	; (18398 <z_impl_k_mutex_unlock+0x138>)
   1835c:	480a      	ldr	r0, [pc, #40]	; (18388 <z_impl_k_mutex_unlock+0x128>)
   1835e:	22a7      	movs	r2, #167	; 0xa7
   18360:	f002 fb3e 	bl	1a9e0 <printk>
   18364:	21a7      	movs	r1, #167	; 0xa7
   18366:	480c      	ldr	r0, [pc, #48]	; (18398 <z_impl_k_mutex_unlock+0x138>)
   18368:	f002 fde0 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1836c:	f385 8811 	msr	BASEPRI, r5
   18370:	f3bf 8f6f 	isb	sy
   18374:	e7ba      	b.n	182ec <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   18376:	f06f 0015 	mvn.w	r0, #21
   1837a:	e7ba      	b.n	182f2 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   1837c:	f04f 30ff 	mov.w	r0, #4294967295
   18380:	e7b7      	b.n	182f2 <z_impl_k_mutex_unlock+0x92>
   18382:	bf00      	nop
   18384:	00022823 	.word	0x00022823
   18388:	0001faab 	.word	0x0001faab
   1838c:	2000a27c 	.word	0x2000a27c
   18390:	00022845 	.word	0x00022845
   18394:	2000a278 	.word	0x2000a278
   18398:	0001fae5 	.word	0x0001fae5

0001839c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   183a0:	4604      	mov	r4, r0
   183a2:	460d      	mov	r5, r1
   183a4:	4690      	mov	r8, r2
   183a6:	4699      	mov	r9, r3
   183a8:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   183ac:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   183b0:	f04f 0320 	mov.w	r3, #32
   183b4:	f3ef 8711 	mrs	r7, BASEPRI
   183b8:	f383 8811 	msr	BASEPRI, r3
   183bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   183c0:	4630      	mov	r0, r6
   183c2:	f001 fb21 	bl	19a08 <z_spin_lock_valid>
   183c6:	b940      	cbnz	r0, 183da <queue_insert+0x3e>
   183c8:	4937      	ldr	r1, [pc, #220]	; (184a8 <queue_insert+0x10c>)
   183ca:	4838      	ldr	r0, [pc, #224]	; (184ac <queue_insert+0x110>)
   183cc:	227c      	movs	r2, #124	; 0x7c
   183ce:	f002 fb07 	bl	1a9e0 <printk>
   183d2:	217c      	movs	r1, #124	; 0x7c
   183d4:	4834      	ldr	r0, [pc, #208]	; (184a8 <queue_insert+0x10c>)
   183d6:	f002 fda9 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   183da:	4630      	mov	r0, r6
   183dc:	f001 fb30 	bl	19a40 <z_spin_lock_set_owner>

	if (is_append) {
   183e0:	f1ba 0f00 	cmp.w	sl, #0
   183e4:	d000      	beq.n	183e8 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   183e6:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   183e8:	f104 000c 	add.w	r0, r4, #12
   183ec:	f000 ff6a 	bl	192c4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   183f0:	b160      	cbz	r0, 1840c <queue_insert+0x70>
   183f2:	2400      	movs	r4, #0
   183f4:	f8c0 8014 	str.w	r8, [r0, #20]
   183f8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   183fc:	f000 fb56 	bl	18aac <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   18400:	4630      	mov	r0, r6
   18402:	4639      	mov	r1, r7
   18404:	f000 f97e 	bl	18704 <z_reschedule>
	return 0;
   18408:	2000      	movs	r0, #0
   1840a:	e019      	b.n	18440 <queue_insert+0xa4>
	if (alloc) {
   1840c:	f1b9 0f00 	cmp.w	r9, #0
   18410:	d028      	beq.n	18464 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   18412:	2108      	movs	r1, #8
   18414:	f002 fa12 	bl	1a83c <z_thread_aligned_alloc>
		if (anode == NULL) {
   18418:	b9a0      	cbnz	r0, 18444 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1841a:	4630      	mov	r0, r6
   1841c:	f001 fb02 	bl	19a24 <z_spin_unlock_valid>
   18420:	b940      	cbnz	r0, 18434 <queue_insert+0x98>
   18422:	4921      	ldr	r1, [pc, #132]	; (184a8 <queue_insert+0x10c>)
   18424:	4821      	ldr	r0, [pc, #132]	; (184ac <queue_insert+0x110>)
   18426:	22a7      	movs	r2, #167	; 0xa7
   18428:	f002 fada 	bl	1a9e0 <printk>
   1842c:	21a7      	movs	r1, #167	; 0xa7
   1842e:	481e      	ldr	r0, [pc, #120]	; (184a8 <queue_insert+0x10c>)
   18430:	f002 fd7c 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18434:	f387 8811 	msr	BASEPRI, r7
   18438:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1843c:	f06f 000b 	mvn.w	r0, #11
}
   18440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   18444:	2301      	movs	r3, #1
		anode->data = data;
   18446:	f8c0 8004 	str.w	r8, [r0, #4]
   1844a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1844c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1844e:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   18452:	b95d      	cbnz	r5, 1846c <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18454:	6823      	ldr	r3, [r4, #0]
   18456:	4313      	orrs	r3, r2
   18458:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1845a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1845c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1845e:	b973      	cbnz	r3, 1847e <queue_insert+0xe2>
	list->tail = node;
   18460:	6060      	str	r0, [r4, #4]
}
   18462:	e00c      	b.n	1847e <queue_insert+0xe2>
}
   18464:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   18466:	f8c8 9000 	str.w	r9, [r8]
}
   1846a:	e7ef      	b.n	1844c <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1846c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1846e:	f033 0303 	bics.w	r3, r3, #3
   18472:	d110      	bne.n	18496 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18474:	6002      	str	r2, [r0, #0]
	return list->tail;
   18476:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   18478:	b93a      	cbnz	r2, 1848a <queue_insert+0xee>
	list->head = node;
   1847a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1847e:	2104      	movs	r1, #4
   18480:	f104 0014 	add.w	r0, r4, #20
   18484:	f005 fea9 	bl	1e1da <z_handle_obj_poll_events>
   18488:	e7ba      	b.n	18400 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1848a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1848c:	f003 0303 	and.w	r3, r3, #3
   18490:	4303      	orrs	r3, r0
   18492:	6013      	str	r3, [r2, #0]
   18494:	e7e4      	b.n	18460 <queue_insert+0xc4>
   18496:	4313      	orrs	r3, r2
   18498:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1849a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1849c:	f003 0303 	and.w	r3, r3, #3
   184a0:	4303      	orrs	r3, r0
   184a2:	602b      	str	r3, [r5, #0]
}
   184a4:	e7eb      	b.n	1847e <queue_insert+0xe2>
   184a6:	bf00      	nop
   184a8:	0001fae5 	.word	0x0001fae5
   184ac:	0001faab 	.word	0x0001faab

000184b0 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   184b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   184b4:	4605      	mov	r5, r0
   184b6:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   184b8:	460c      	mov	r4, r1
   184ba:	2900      	cmp	r1, #0
   184bc:	d045      	beq.n	1854a <k_queue_append_list+0x9a>
   184be:	2a00      	cmp	r2, #0
   184c0:	d043      	beq.n	1854a <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   184c2:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   184c6:	f04f 0320 	mov.w	r3, #32
   184ca:	f3ef 8911 	mrs	r9, BASEPRI
   184ce:	f383 8811 	msr	BASEPRI, r3
   184d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   184d6:	4638      	mov	r0, r7
   184d8:	f001 fa96 	bl	19a08 <z_spin_lock_valid>
   184dc:	b940      	cbnz	r0, 184f0 <k_queue_append_list+0x40>
   184de:	491c      	ldr	r1, [pc, #112]	; (18550 <k_queue_append_list+0xa0>)
   184e0:	481c      	ldr	r0, [pc, #112]	; (18554 <k_queue_append_list+0xa4>)
   184e2:	227c      	movs	r2, #124	; 0x7c
   184e4:	f002 fa7c 	bl	1a9e0 <printk>
   184e8:	217c      	movs	r1, #124	; 0x7c
   184ea:	4819      	ldr	r0, [pc, #100]	; (18550 <k_queue_append_list+0xa0>)
   184ec:	f002 fd1e 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   184f0:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   184f2:	f105 080c 	add.w	r8, r5, #12
   184f6:	f001 faa3 	bl	19a40 <z_spin_lock_set_owner>
   184fa:	4640      	mov	r0, r8
   184fc:	f000 fee2 	bl	192c4 <z_unpend_first_thread>
   18500:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   18504:	b920      	cbnz	r0, 18510 <k_queue_append_list+0x60>
	return list->tail;
   18506:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   18508:	b9ca      	cbnz	r2, 1853e <k_queue_append_list+0x8e>
	list->head = node;
   1850a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1850c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1850e:	e00a      	b.n	18526 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   18510:	6144      	str	r4, [r0, #20]
   18512:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   18516:	f000 fac9 	bl	18aac <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1851a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1851c:	4640      	mov	r0, r8
   1851e:	f000 fed1 	bl	192c4 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   18522:	2c00      	cmp	r4, #0
   18524:	d1ee      	bne.n	18504 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   18526:	2104      	movs	r1, #4
   18528:	f105 0014 	add.w	r0, r5, #20
   1852c:	f005 fe55 	bl	1e1da <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   18530:	4638      	mov	r0, r7
   18532:	4649      	mov	r1, r9
   18534:	f000 f8e6 	bl	18704 <z_reschedule>
	return 0;
   18538:	2000      	movs	r0, #0
}
   1853a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1853e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18540:	f003 0303 	and.w	r3, r3, #3
   18544:	431c      	orrs	r4, r3
   18546:	6014      	str	r4, [r2, #0]
}
   18548:	e7e0      	b.n	1850c <k_queue_append_list+0x5c>
		return -EINVAL;
   1854a:	f06f 0015 	mvn.w	r0, #21
   1854e:	e7f4      	b.n	1853a <k_queue_append_list+0x8a>
   18550:	0001fae5 	.word	0x0001fae5
   18554:	0001faab 	.word	0x0001faab

00018558 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1855c:	4605      	mov	r5, r0
   1855e:	4690      	mov	r8, r2
   18560:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18562:	f100 0608 	add.w	r6, r0, #8
   18566:	f04f 0320 	mov.w	r3, #32
   1856a:	f3ef 8911 	mrs	r9, BASEPRI
   1856e:	f383 8811 	msr	BASEPRI, r3
   18572:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18576:	4630      	mov	r0, r6
   18578:	f001 fa46 	bl	19a08 <z_spin_lock_valid>
   1857c:	b940      	cbnz	r0, 18590 <z_impl_k_queue_get+0x38>
   1857e:	4921      	ldr	r1, [pc, #132]	; (18604 <z_impl_k_queue_get+0xac>)
   18580:	4821      	ldr	r0, [pc, #132]	; (18608 <z_impl_k_queue_get+0xb0>)
   18582:	227c      	movs	r2, #124	; 0x7c
   18584:	f002 fa2c 	bl	1a9e0 <printk>
   18588:	217c      	movs	r1, #124	; 0x7c
   1858a:	481e      	ldr	r0, [pc, #120]	; (18604 <z_impl_k_queue_get+0xac>)
   1858c:	f002 fcce 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18590:	4630      	mov	r0, r6
   18592:	f001 fa55 	bl	19a40 <z_spin_lock_set_owner>
	return list->head;
   18596:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18598:	b314      	cbz	r4, 185e0 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1859a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1859c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1859e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   185a2:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   185a4:	4620      	mov	r0, r4
   185a6:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   185aa:	602b      	str	r3, [r5, #0]
	list->tail = node;
   185ac:	bf08      	it	eq
   185ae:	606b      	streq	r3, [r5, #4]
   185b0:	f005 fcb3 	bl	1df1a <z_queue_node_peek>
   185b4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   185b6:	4630      	mov	r0, r6
   185b8:	f001 fa34 	bl	19a24 <z_spin_unlock_valid>
   185bc:	b940      	cbnz	r0, 185d0 <z_impl_k_queue_get+0x78>
   185be:	4911      	ldr	r1, [pc, #68]	; (18604 <z_impl_k_queue_get+0xac>)
   185c0:	4811      	ldr	r0, [pc, #68]	; (18608 <z_impl_k_queue_get+0xb0>)
   185c2:	22a7      	movs	r2, #167	; 0xa7
   185c4:	f002 fa0c 	bl	1a9e0 <printk>
   185c8:	21a7      	movs	r1, #167	; 0xa7
   185ca:	480e      	ldr	r0, [pc, #56]	; (18604 <z_impl_k_queue_get+0xac>)
   185cc:	f002 fcae 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   185d0:	f389 8811 	msr	BASEPRI, r9
   185d4:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   185d8:	4620      	mov	r0, r4
   185da:	b003      	add	sp, #12
   185dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   185e0:	ea58 0307 	orrs.w	r3, r8, r7
   185e4:	d0e7      	beq.n	185b6 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   185e6:	4649      	mov	r1, r9
   185e8:	4630      	mov	r0, r6
   185ea:	e9cd 8700 	strd	r8, r7, [sp]
   185ee:	f105 020c 	add.w	r2, r5, #12
   185f2:	f000 fdc5 	bl	19180 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   185f6:	2800      	cmp	r0, #0
   185f8:	d1ee      	bne.n	185d8 <z_impl_k_queue_get+0x80>
   185fa:	4b04      	ldr	r3, [pc, #16]	; (1860c <z_impl_k_queue_get+0xb4>)
   185fc:	689b      	ldr	r3, [r3, #8]
   185fe:	695c      	ldr	r4, [r3, #20]
   18600:	e7ea      	b.n	185d8 <z_impl_k_queue_get+0x80>
   18602:	bf00      	nop
   18604:	0001fae5 	.word	0x0001fae5
   18608:	0001faab 	.word	0x0001faab
   1860c:	2000a27c 	.word	0x2000a27c

00018610 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   18610:	6883      	ldr	r3, [r0, #8]
{
   18612:	b510      	push	{r4, lr}
   18614:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   18616:	b953      	cbnz	r3, 1862e <pended_on+0x1e>
   18618:	4906      	ldr	r1, [pc, #24]	; (18634 <pended_on+0x24>)
   1861a:	4807      	ldr	r0, [pc, #28]	; (18638 <pended_on+0x28>)
   1861c:	f44f 7201 	mov.w	r2, #516	; 0x204
   18620:	f002 f9de 	bl	1a9e0 <printk>
   18624:	f44f 7101 	mov.w	r1, #516	; 0x204
   18628:	4802      	ldr	r0, [pc, #8]	; (18634 <pended_on+0x24>)
   1862a:	f002 fc7f 	bl	1af2c <assert_post_action>

	return thread->base.pended_on;
}
   1862e:	68a0      	ldr	r0, [r4, #8]
   18630:	bd10      	pop	{r4, pc}
   18632:	bf00      	nop
   18634:	00022870 	.word	0x00022870
   18638:	0001faab 	.word	0x0001faab

0001863c <z_reset_time_slice>:
{
   1863c:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1863e:	4c08      	ldr	r4, [pc, #32]	; (18660 <z_reset_time_slice+0x24>)
   18640:	6823      	ldr	r3, [r4, #0]
   18642:	b15b      	cbz	r3, 1865c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18644:	f7f4 f87a 	bl	c73c <z_clock_elapsed>
   18648:	4603      	mov	r3, r0
   1864a:	6820      	ldr	r0, [r4, #0]
   1864c:	4a05      	ldr	r2, [pc, #20]	; (18664 <z_reset_time_slice+0x28>)
   1864e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   18650:	2100      	movs	r1, #0
}
   18652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18656:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   18658:	f001 bc8c 	b.w	19f74 <z_set_timeout_expiry>
}
   1865c:	bd10      	pop	{r4, pc}
   1865e:	bf00      	nop
   18660:	2000a2bc 	.word	0x2000a2bc
   18664:	2000a27c 	.word	0x2000a27c

00018668 <k_sched_time_slice_set>:
{
   18668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1866a:	4604      	mov	r4, r0
   1866c:	460d      	mov	r5, r1
	__asm__ volatile(
   1866e:	f04f 0320 	mov.w	r3, #32
   18672:	f3ef 8711 	mrs	r7, BASEPRI
   18676:	f383 8811 	msr	BASEPRI, r3
   1867a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1867e:	481b      	ldr	r0, [pc, #108]	; (186ec <k_sched_time_slice_set+0x84>)
   18680:	f001 f9c2 	bl	19a08 <z_spin_lock_valid>
   18684:	b940      	cbnz	r0, 18698 <k_sched_time_slice_set+0x30>
   18686:	491a      	ldr	r1, [pc, #104]	; (186f0 <k_sched_time_slice_set+0x88>)
   18688:	481a      	ldr	r0, [pc, #104]	; (186f4 <k_sched_time_slice_set+0x8c>)
   1868a:	227c      	movs	r2, #124	; 0x7c
   1868c:	f002 f9a8 	bl	1a9e0 <printk>
   18690:	217c      	movs	r1, #124	; 0x7c
   18692:	4817      	ldr	r0, [pc, #92]	; (186f0 <k_sched_time_slice_set+0x88>)
   18694:	f002 fc4a 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18698:	4814      	ldr	r0, [pc, #80]	; (186ec <k_sched_time_slice_set+0x84>)
   1869a:	f001 f9d1 	bl	19a40 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1869e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   186a2:	2100      	movs	r1, #0
   186a4:	f240 30e7 	movw	r0, #999	; 0x3e7
   186a8:	4b13      	ldr	r3, [pc, #76]	; (186f8 <k_sched_time_slice_set+0x90>)
   186aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   186ae:	6159      	str	r1, [r3, #20]
   186b0:	2300      	movs	r3, #0
   186b2:	fbe4 0106 	umlal	r0, r1, r4, r6
   186b6:	f7f0 fa39 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   186ba:	4b10      	ldr	r3, [pc, #64]	; (186fc <k_sched_time_slice_set+0x94>)
   186bc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   186be:	4b10      	ldr	r3, [pc, #64]	; (18700 <k_sched_time_slice_set+0x98>)
   186c0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   186c2:	f7ff ffbb 	bl	1863c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   186c6:	4809      	ldr	r0, [pc, #36]	; (186ec <k_sched_time_slice_set+0x84>)
   186c8:	f001 f9ac 	bl	19a24 <z_spin_unlock_valid>
   186cc:	b940      	cbnz	r0, 186e0 <k_sched_time_slice_set+0x78>
   186ce:	4908      	ldr	r1, [pc, #32]	; (186f0 <k_sched_time_slice_set+0x88>)
   186d0:	4808      	ldr	r0, [pc, #32]	; (186f4 <k_sched_time_slice_set+0x8c>)
   186d2:	22a7      	movs	r2, #167	; 0xa7
   186d4:	f002 f984 	bl	1a9e0 <printk>
   186d8:	21a7      	movs	r1, #167	; 0xa7
   186da:	4805      	ldr	r0, [pc, #20]	; (186f0 <k_sched_time_slice_set+0x88>)
   186dc:	f002 fc26 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   186e0:	f387 8811 	msr	BASEPRI, r7
   186e4:	f3bf 8f6f 	isb	sy
}
   186e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   186ea:	bf00      	nop
   186ec:	2000a2b4 	.word	0x2000a2b4
   186f0:	0001fae5 	.word	0x0001fae5
   186f4:	0001faab 	.word	0x0001faab
   186f8:	2000a27c 	.word	0x2000a27c
   186fc:	2000a2bc 	.word	0x2000a2bc
   18700:	2000a2b8 	.word	0x2000a2b8

00018704 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   18704:	b510      	push	{r4, lr}
   18706:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18708:	460c      	mov	r4, r1
   1870a:	b9c1      	cbnz	r1, 1873e <z_reschedule+0x3a>
   1870c:	f3ef 8205 	mrs	r2, IPSR
   18710:	b9aa      	cbnz	r2, 1873e <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   18712:	4a14      	ldr	r2, [pc, #80]	; (18764 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   18714:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18716:	6892      	ldr	r2, [r2, #8]
   18718:	4291      	cmp	r1, r2
   1871a:	d010      	beq.n	1873e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1871c:	f001 f982 	bl	19a24 <z_spin_unlock_valid>
   18720:	b940      	cbnz	r0, 18734 <z_reschedule+0x30>
   18722:	4911      	ldr	r1, [pc, #68]	; (18768 <z_reschedule+0x64>)
   18724:	4811      	ldr	r0, [pc, #68]	; (1876c <z_reschedule+0x68>)
   18726:	22be      	movs	r2, #190	; 0xbe
   18728:	f002 f95a 	bl	1a9e0 <printk>
   1872c:	21be      	movs	r1, #190	; 0xbe
   1872e:	480e      	ldr	r0, [pc, #56]	; (18768 <z_reschedule+0x64>)
   18730:	f002 fbfc 	bl	1af2c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   18734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   18738:	2000      	movs	r0, #0
   1873a:	f7f5 b9ad 	b.w	da98 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1873e:	4618      	mov	r0, r3
   18740:	f001 f970 	bl	19a24 <z_spin_unlock_valid>
   18744:	b940      	cbnz	r0, 18758 <z_reschedule+0x54>
   18746:	4908      	ldr	r1, [pc, #32]	; (18768 <z_reschedule+0x64>)
   18748:	4808      	ldr	r0, [pc, #32]	; (1876c <z_reschedule+0x68>)
   1874a:	22a7      	movs	r2, #167	; 0xa7
   1874c:	f002 f948 	bl	1a9e0 <printk>
   18750:	21a7      	movs	r1, #167	; 0xa7
   18752:	4805      	ldr	r0, [pc, #20]	; (18768 <z_reschedule+0x64>)
   18754:	f002 fbea 	bl	1af2c <assert_post_action>
   18758:	f384 8811 	msr	BASEPRI, r4
   1875c:	f3bf 8f6f 	isb	sy
   18760:	bd10      	pop	{r4, pc}
   18762:	bf00      	nop
   18764:	2000a27c 	.word	0x2000a27c
   18768:	0001fae5 	.word	0x0001fae5
   1876c:	0001faab 	.word	0x0001faab

00018770 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   18770:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18772:	f04f 0320 	mov.w	r3, #32
   18776:	f3ef 8511 	mrs	r5, BASEPRI
   1877a:	f383 8811 	msr	BASEPRI, r3
   1877e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18782:	4822      	ldr	r0, [pc, #136]	; (1880c <k_sched_lock+0x9c>)
   18784:	f001 f940 	bl	19a08 <z_spin_lock_valid>
   18788:	b940      	cbnz	r0, 1879c <k_sched_lock+0x2c>
   1878a:	4921      	ldr	r1, [pc, #132]	; (18810 <k_sched_lock+0xa0>)
   1878c:	4821      	ldr	r0, [pc, #132]	; (18814 <k_sched_lock+0xa4>)
   1878e:	227c      	movs	r2, #124	; 0x7c
   18790:	f002 f926 	bl	1a9e0 <printk>
   18794:	217c      	movs	r1, #124	; 0x7c
   18796:	481e      	ldr	r0, [pc, #120]	; (18810 <k_sched_lock+0xa0>)
   18798:	f002 fbc8 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1879c:	481b      	ldr	r0, [pc, #108]	; (1880c <k_sched_lock+0x9c>)
   1879e:	f001 f94f 	bl	19a40 <z_spin_lock_set_owner>
   187a2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   187a6:	b153      	cbz	r3, 187be <k_sched_lock+0x4e>
   187a8:	491b      	ldr	r1, [pc, #108]	; (18818 <k_sched_lock+0xa8>)
   187aa:	481a      	ldr	r0, [pc, #104]	; (18814 <k_sched_lock+0xa4>)
   187ac:	f44f 7289 	mov.w	r2, #274	; 0x112
   187b0:	f002 f916 	bl	1a9e0 <printk>
   187b4:	f44f 7189 	mov.w	r1, #274	; 0x112
   187b8:	4817      	ldr	r0, [pc, #92]	; (18818 <k_sched_lock+0xa8>)
   187ba:	f002 fbb7 	bl	1af2c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   187be:	4c17      	ldr	r4, [pc, #92]	; (1881c <k_sched_lock+0xac>)
   187c0:	68a3      	ldr	r3, [r4, #8]
   187c2:	7bdb      	ldrb	r3, [r3, #15]
   187c4:	2b01      	cmp	r3, #1
   187c6:	d10a      	bne.n	187de <k_sched_lock+0x6e>
   187c8:	4913      	ldr	r1, [pc, #76]	; (18818 <k_sched_lock+0xa8>)
   187ca:	4812      	ldr	r0, [pc, #72]	; (18814 <k_sched_lock+0xa4>)
   187cc:	f240 1213 	movw	r2, #275	; 0x113
   187d0:	f002 f906 	bl	1a9e0 <printk>
   187d4:	f240 1113 	movw	r1, #275	; 0x113
   187d8:	480f      	ldr	r0, [pc, #60]	; (18818 <k_sched_lock+0xa8>)
   187da:	f002 fba7 	bl	1af2c <assert_post_action>
	--_current->base.sched_locked;
   187de:	68a2      	ldr	r2, [r4, #8]
   187e0:	7bd3      	ldrb	r3, [r2, #15]
   187e2:	3b01      	subs	r3, #1
   187e4:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   187e6:	4809      	ldr	r0, [pc, #36]	; (1880c <k_sched_lock+0x9c>)
   187e8:	f001 f91c 	bl	19a24 <z_spin_unlock_valid>
   187ec:	b940      	cbnz	r0, 18800 <k_sched_lock+0x90>
   187ee:	4908      	ldr	r1, [pc, #32]	; (18810 <k_sched_lock+0xa0>)
   187f0:	4808      	ldr	r0, [pc, #32]	; (18814 <k_sched_lock+0xa4>)
   187f2:	22a7      	movs	r2, #167	; 0xa7
   187f4:	f002 f8f4 	bl	1a9e0 <printk>
   187f8:	21a7      	movs	r1, #167	; 0xa7
   187fa:	4805      	ldr	r0, [pc, #20]	; (18810 <k_sched_lock+0xa0>)
   187fc:	f002 fb96 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18800:	f385 8811 	msr	BASEPRI, r5
   18804:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   18808:	bd38      	pop	{r3, r4, r5, pc}
   1880a:	bf00      	nop
   1880c:	2000a2b4 	.word	0x2000a2b4
   18810:	0001fae5 	.word	0x0001fae5
   18814:	0001faab 	.word	0x0001faab
   18818:	00022845 	.word	0x00022845
   1881c:	2000a27c 	.word	0x2000a27c

00018820 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18820:	4b11      	ldr	r3, [pc, #68]	; (18868 <z_priq_dumb_remove+0x48>)
{
   18822:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18824:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   18828:	4282      	cmp	r2, r0
{
   1882a:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1882c:	d105      	bne.n	1883a <z_priq_dumb_remove+0x1a>
   1882e:	689b      	ldr	r3, [r3, #8]
   18830:	428b      	cmp	r3, r1
   18832:	d102      	bne.n	1883a <z_priq_dumb_remove+0x1a>
   18834:	7b4b      	ldrb	r3, [r1, #13]
   18836:	06db      	lsls	r3, r3, #27
   18838:	d114      	bne.n	18864 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1883a:	4b0c      	ldr	r3, [pc, #48]	; (1886c <z_priq_dumb_remove+0x4c>)
   1883c:	429c      	cmp	r4, r3
   1883e:	d10a      	bne.n	18856 <z_priq_dumb_remove+0x36>
   18840:	490b      	ldr	r1, [pc, #44]	; (18870 <z_priq_dumb_remove+0x50>)
   18842:	480c      	ldr	r0, [pc, #48]	; (18874 <z_priq_dumb_remove+0x54>)
   18844:	f240 32da 	movw	r2, #986	; 0x3da
   18848:	f002 f8ca 	bl	1a9e0 <printk>
   1884c:	f240 31da 	movw	r1, #986	; 0x3da
   18850:	4807      	ldr	r0, [pc, #28]	; (18870 <z_priq_dumb_remove+0x50>)
   18852:	f002 fb6b 	bl	1af2c <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   18856:	e9d4 3200 	ldrd	r3, r2, [r4]
   1885a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1885c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1885e:	2300      	movs	r3, #0
	node->prev = NULL;
   18860:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   18864:	bd10      	pop	{r4, pc}
   18866:	bf00      	nop
   18868:	2000a27c 	.word	0x2000a27c
   1886c:	200097c0 	.word	0x200097c0
   18870:	00022870 	.word	0x00022870
   18874:	0001faab 	.word	0x0001faab

00018878 <z_unpend_thread>:
{
   18878:	b538      	push	{r3, r4, r5, lr}
   1887a:	4604      	mov	r4, r0
	__asm__ volatile(
   1887c:	f04f 0320 	mov.w	r3, #32
   18880:	f3ef 8511 	mrs	r5, BASEPRI
   18884:	f383 8811 	msr	BASEPRI, r3
   18888:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1888c:	4814      	ldr	r0, [pc, #80]	; (188e0 <z_unpend_thread+0x68>)
   1888e:	f001 f8bb 	bl	19a08 <z_spin_lock_valid>
   18892:	b940      	cbnz	r0, 188a6 <z_unpend_thread+0x2e>
   18894:	4913      	ldr	r1, [pc, #76]	; (188e4 <z_unpend_thread+0x6c>)
   18896:	4814      	ldr	r0, [pc, #80]	; (188e8 <z_unpend_thread+0x70>)
   18898:	227c      	movs	r2, #124	; 0x7c
   1889a:	f002 f8a1 	bl	1a9e0 <printk>
   1889e:	217c      	movs	r1, #124	; 0x7c
   188a0:	4810      	ldr	r0, [pc, #64]	; (188e4 <z_unpend_thread+0x6c>)
   188a2:	f002 fb43 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   188a6:	480e      	ldr	r0, [pc, #56]	; (188e0 <z_unpend_thread+0x68>)
   188a8:	f001 f8ca 	bl	19a40 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   188ac:	4620      	mov	r0, r4
   188ae:	f005 fb81 	bl	1dfb4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   188b2:	480b      	ldr	r0, [pc, #44]	; (188e0 <z_unpend_thread+0x68>)
   188b4:	f001 f8b6 	bl	19a24 <z_spin_unlock_valid>
   188b8:	b940      	cbnz	r0, 188cc <z_unpend_thread+0x54>
   188ba:	490a      	ldr	r1, [pc, #40]	; (188e4 <z_unpend_thread+0x6c>)
   188bc:	480a      	ldr	r0, [pc, #40]	; (188e8 <z_unpend_thread+0x70>)
   188be:	22a7      	movs	r2, #167	; 0xa7
   188c0:	f002 f88e 	bl	1a9e0 <printk>
   188c4:	21a7      	movs	r1, #167	; 0xa7
   188c6:	4807      	ldr	r0, [pc, #28]	; (188e4 <z_unpend_thread+0x6c>)
   188c8:	f002 fb30 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   188cc:	f385 8811 	msr	BASEPRI, r5
   188d0:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   188d4:	f104 0018 	add.w	r0, r4, #24
}
   188d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   188dc:	f001 bad8 	b.w	19e90 <z_abort_timeout>
   188e0:	2000a2b4 	.word	0x2000a2b4
   188e4:	0001fae5 	.word	0x0001fae5
   188e8:	0001faab 	.word	0x0001faab

000188ec <update_cache>:
{
   188ec:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   188ee:	4c19      	ldr	r4, [pc, #100]	; (18954 <update_cache+0x68>)
{
   188f0:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   188f2:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   188f4:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   188f6:	b143      	cbz	r3, 1890a <update_cache+0x1e>
		return _current_cpu->idle_thread;
   188f8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   188fa:	b1a8      	cbz	r0, 18928 <update_cache+0x3c>
		if (thread != _current) {
   188fc:	68a3      	ldr	r3, [r4, #8]
   188fe:	42ab      	cmp	r3, r5
   18900:	d001      	beq.n	18906 <update_cache+0x1a>
			z_reset_time_slice();
   18902:	f7ff fe9b 	bl	1863c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18906:	62a5      	str	r5, [r4, #40]	; 0x28
}
   18908:	e023      	b.n	18952 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1890a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1890e:	f005 fb5f 	bl	1dfd0 <z_priq_dumb_best>
   18912:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   18914:	7b4b      	ldrb	r3, [r1, #13]
   18916:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   18918:	bf44      	itt	mi
   1891a:	f043 0308 	orrmi.w	r3, r3, #8
   1891e:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   18920:	b905      	cbnz	r5, 18924 <update_cache+0x38>
   18922:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   18924:	b152      	cbz	r2, 1893c <update_cache+0x50>
   18926:	e7e9      	b.n	188fc <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   18928:	b941      	cbnz	r1, 1893c <update_cache+0x50>
   1892a:	490b      	ldr	r1, [pc, #44]	; (18958 <update_cache+0x6c>)
   1892c:	480b      	ldr	r0, [pc, #44]	; (1895c <update_cache+0x70>)
   1892e:	2283      	movs	r2, #131	; 0x83
   18930:	f002 f856 	bl	1a9e0 <printk>
   18934:	2183      	movs	r1, #131	; 0x83
   18936:	4808      	ldr	r0, [pc, #32]	; (18958 <update_cache+0x6c>)
   18938:	f002 faf8 	bl	1af2c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1893c:	68a3      	ldr	r3, [r4, #8]
   1893e:	7b5a      	ldrb	r2, [r3, #13]
   18940:	06d2      	lsls	r2, r2, #27
   18942:	d1db      	bne.n	188fc <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18944:	69aa      	ldr	r2, [r5, #24]
   18946:	2a00      	cmp	r2, #0
   18948:	d1d8      	bne.n	188fc <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   1894a:	89da      	ldrh	r2, [r3, #14]
   1894c:	2a7f      	cmp	r2, #127	; 0x7f
   1894e:	d9d5      	bls.n	188fc <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   18950:	62a3      	str	r3, [r4, #40]	; 0x28
}
   18952:	bd38      	pop	{r3, r4, r5, pc}
   18954:	2000a27c 	.word	0x2000a27c
   18958:	00022870 	.word	0x00022870
   1895c:	0001faab 	.word	0x0001faab

00018960 <k_sched_unlock>:
{
   18960:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18962:	f04f 0320 	mov.w	r3, #32
   18966:	f3ef 8511 	mrs	r5, BASEPRI
   1896a:	f383 8811 	msr	BASEPRI, r3
   1896e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18972:	4824      	ldr	r0, [pc, #144]	; (18a04 <k_sched_unlock+0xa4>)
   18974:	f001 f848 	bl	19a08 <z_spin_lock_valid>
   18978:	b940      	cbnz	r0, 1898c <k_sched_unlock+0x2c>
   1897a:	4923      	ldr	r1, [pc, #140]	; (18a08 <k_sched_unlock+0xa8>)
   1897c:	4823      	ldr	r0, [pc, #140]	; (18a0c <k_sched_unlock+0xac>)
   1897e:	227c      	movs	r2, #124	; 0x7c
   18980:	f002 f82e 	bl	1a9e0 <printk>
   18984:	217c      	movs	r1, #124	; 0x7c
   18986:	4820      	ldr	r0, [pc, #128]	; (18a08 <k_sched_unlock+0xa8>)
   18988:	f002 fad0 	bl	1af2c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   1898c:	4c20      	ldr	r4, [pc, #128]	; (18a10 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1898e:	481d      	ldr	r0, [pc, #116]	; (18a04 <k_sched_unlock+0xa4>)
   18990:	f001 f856 	bl	19a40 <z_spin_lock_set_owner>
   18994:	68a3      	ldr	r3, [r4, #8]
   18996:	7bdb      	ldrb	r3, [r3, #15]
   18998:	b953      	cbnz	r3, 189b0 <k_sched_unlock+0x50>
   1899a:	491e      	ldr	r1, [pc, #120]	; (18a14 <k_sched_unlock+0xb4>)
   1899c:	481b      	ldr	r0, [pc, #108]	; (18a0c <k_sched_unlock+0xac>)
   1899e:	f44f 725d 	mov.w	r2, #884	; 0x374
   189a2:	f002 f81d 	bl	1a9e0 <printk>
   189a6:	f44f 715d 	mov.w	r1, #884	; 0x374
   189aa:	481a      	ldr	r0, [pc, #104]	; (18a14 <k_sched_unlock+0xb4>)
   189ac:	f002 fabe 	bl	1af2c <assert_post_action>
   189b0:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   189b4:	b153      	cbz	r3, 189cc <k_sched_unlock+0x6c>
   189b6:	4917      	ldr	r1, [pc, #92]	; (18a14 <k_sched_unlock+0xb4>)
   189b8:	4814      	ldr	r0, [pc, #80]	; (18a0c <k_sched_unlock+0xac>)
   189ba:	f240 3275 	movw	r2, #885	; 0x375
   189be:	f002 f80f 	bl	1a9e0 <printk>
   189c2:	f240 3175 	movw	r1, #885	; 0x375
   189c6:	4813      	ldr	r0, [pc, #76]	; (18a14 <k_sched_unlock+0xb4>)
   189c8:	f002 fab0 	bl	1af2c <assert_post_action>
		++_current->base.sched_locked;
   189cc:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   189ce:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   189d0:	7bd3      	ldrb	r3, [r2, #15]
   189d2:	3301      	adds	r3, #1
   189d4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   189d6:	f7ff ff89 	bl	188ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   189da:	480a      	ldr	r0, [pc, #40]	; (18a04 <k_sched_unlock+0xa4>)
   189dc:	f001 f822 	bl	19a24 <z_spin_unlock_valid>
   189e0:	b940      	cbnz	r0, 189f4 <k_sched_unlock+0x94>
   189e2:	4909      	ldr	r1, [pc, #36]	; (18a08 <k_sched_unlock+0xa8>)
   189e4:	4809      	ldr	r0, [pc, #36]	; (18a0c <k_sched_unlock+0xac>)
   189e6:	22a7      	movs	r2, #167	; 0xa7
   189e8:	f001 fffa 	bl	1a9e0 <printk>
   189ec:	21a7      	movs	r1, #167	; 0xa7
   189ee:	4806      	ldr	r0, [pc, #24]	; (18a08 <k_sched_unlock+0xa8>)
   189f0:	f002 fa9c 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   189f4:	f385 8811 	msr	BASEPRI, r5
   189f8:	f3bf 8f6f 	isb	sy
}
   189fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   18a00:	f005 bace 	b.w	1dfa0 <z_reschedule_unlocked>
   18a04:	2000a2b4 	.word	0x2000a2b4
   18a08:	0001fae5 	.word	0x0001fae5
   18a0c:	0001faab 	.word	0x0001faab
   18a10:	2000a27c 	.word	0x2000a27c
   18a14:	00022870 	.word	0x00022870

00018a18 <ready_thread>:
{
   18a18:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18a1a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   18a1e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18a20:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   18a22:	7b43      	ldrb	r3, [r0, #13]
   18a24:	db39      	blt.n	18a9a <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18a26:	06db      	lsls	r3, r3, #27
   18a28:	d137      	bne.n	18a9a <ready_thread+0x82>
   18a2a:	6983      	ldr	r3, [r0, #24]
   18a2c:	2b00      	cmp	r3, #0
   18a2e:	d134      	bne.n	18a9a <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18a30:	4b1a      	ldr	r3, [pc, #104]	; (18a9c <ready_thread+0x84>)
   18a32:	4298      	cmp	r0, r3
   18a34:	d10a      	bne.n	18a4c <ready_thread+0x34>
   18a36:	491a      	ldr	r1, [pc, #104]	; (18aa0 <ready_thread+0x88>)
   18a38:	481a      	ldr	r0, [pc, #104]	; (18aa4 <ready_thread+0x8c>)
   18a3a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18a3e:	f001 ffcf 	bl	1a9e0 <printk>
   18a42:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18a46:	4816      	ldr	r0, [pc, #88]	; (18aa0 <ready_thread+0x88>)
   18a48:	f002 fa70 	bl	1af2c <assert_post_action>
	return list->head == list;
   18a4c:	4a16      	ldr	r2, [pc, #88]	; (18aa8 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a4e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18a52:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a56:	4283      	cmp	r3, r0
   18a58:	d019      	beq.n	18a8e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18a5a:	b1c3      	cbz	r3, 18a8e <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   18a5c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18a60:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18a64:	42ae      	cmp	r6, r5
   18a66:	dd0d      	ble.n	18a84 <ready_thread+0x6c>
	node->prev = successor->prev;
   18a68:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18a6a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18a6e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18a70:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18a72:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   18a74:	2000      	movs	r0, #0
   18a76:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18a7a:	7363      	strb	r3, [r4, #13]
}
   18a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   18a80:	f7ff bf34 	b.w	188ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18a84:	428b      	cmp	r3, r1
   18a86:	d002      	beq.n	18a8e <ready_thread+0x76>
   18a88:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18a8a:	2b00      	cmp	r3, #0
   18a8c:	d1e8      	bne.n	18a60 <ready_thread+0x48>
	node->prev = list->tail;
   18a8e:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18a92:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18a94:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18a96:	6314      	str	r4, [r2, #48]	; 0x30
}
   18a98:	e7eb      	b.n	18a72 <ready_thread+0x5a>
}
   18a9a:	bd70      	pop	{r4, r5, r6, pc}
   18a9c:	200097c0 	.word	0x200097c0
   18aa0:	00022870 	.word	0x00022870
   18aa4:	0001faab 	.word	0x0001faab
   18aa8:	2000a27c 	.word	0x2000a27c

00018aac <z_ready_thread>:
{
   18aac:	b538      	push	{r3, r4, r5, lr}
   18aae:	4604      	mov	r4, r0
	__asm__ volatile(
   18ab0:	f04f 0320 	mov.w	r3, #32
   18ab4:	f3ef 8511 	mrs	r5, BASEPRI
   18ab8:	f383 8811 	msr	BASEPRI, r3
   18abc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18ac0:	4812      	ldr	r0, [pc, #72]	; (18b0c <z_ready_thread+0x60>)
   18ac2:	f000 ffa1 	bl	19a08 <z_spin_lock_valid>
   18ac6:	b940      	cbnz	r0, 18ada <z_ready_thread+0x2e>
   18ac8:	4911      	ldr	r1, [pc, #68]	; (18b10 <z_ready_thread+0x64>)
   18aca:	4812      	ldr	r0, [pc, #72]	; (18b14 <z_ready_thread+0x68>)
   18acc:	227c      	movs	r2, #124	; 0x7c
   18ace:	f001 ff87 	bl	1a9e0 <printk>
   18ad2:	217c      	movs	r1, #124	; 0x7c
   18ad4:	480e      	ldr	r0, [pc, #56]	; (18b10 <z_ready_thread+0x64>)
   18ad6:	f002 fa29 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18ada:	480c      	ldr	r0, [pc, #48]	; (18b0c <z_ready_thread+0x60>)
   18adc:	f000 ffb0 	bl	19a40 <z_spin_lock_set_owner>
		ready_thread(thread);
   18ae0:	4620      	mov	r0, r4
   18ae2:	f7ff ff99 	bl	18a18 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ae6:	4809      	ldr	r0, [pc, #36]	; (18b0c <z_ready_thread+0x60>)
   18ae8:	f000 ff9c 	bl	19a24 <z_spin_unlock_valid>
   18aec:	b940      	cbnz	r0, 18b00 <z_ready_thread+0x54>
   18aee:	4908      	ldr	r1, [pc, #32]	; (18b10 <z_ready_thread+0x64>)
   18af0:	4808      	ldr	r0, [pc, #32]	; (18b14 <z_ready_thread+0x68>)
   18af2:	22a7      	movs	r2, #167	; 0xa7
   18af4:	f001 ff74 	bl	1a9e0 <printk>
   18af8:	21a7      	movs	r1, #167	; 0xa7
   18afa:	4805      	ldr	r0, [pc, #20]	; (18b10 <z_ready_thread+0x64>)
   18afc:	f002 fa16 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18b00:	f385 8811 	msr	BASEPRI, r5
   18b04:	f3bf 8f6f 	isb	sy
}
   18b08:	bd38      	pop	{r3, r4, r5, pc}
   18b0a:	bf00      	nop
   18b0c:	2000a2b4 	.word	0x2000a2b4
   18b10:	0001fae5 	.word	0x0001fae5
   18b14:	0001faab 	.word	0x0001faab

00018b18 <z_sched_start>:
{
   18b18:	b538      	push	{r3, r4, r5, lr}
   18b1a:	4604      	mov	r4, r0
	__asm__ volatile(
   18b1c:	f04f 0320 	mov.w	r3, #32
   18b20:	f3ef 8511 	mrs	r5, BASEPRI
   18b24:	f383 8811 	msr	BASEPRI, r3
   18b28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b2c:	4818      	ldr	r0, [pc, #96]	; (18b90 <z_sched_start+0x78>)
   18b2e:	f000 ff6b 	bl	19a08 <z_spin_lock_valid>
   18b32:	b940      	cbnz	r0, 18b46 <z_sched_start+0x2e>
   18b34:	4917      	ldr	r1, [pc, #92]	; (18b94 <z_sched_start+0x7c>)
   18b36:	4818      	ldr	r0, [pc, #96]	; (18b98 <z_sched_start+0x80>)
   18b38:	227c      	movs	r2, #124	; 0x7c
   18b3a:	f001 ff51 	bl	1a9e0 <printk>
   18b3e:	217c      	movs	r1, #124	; 0x7c
   18b40:	4814      	ldr	r0, [pc, #80]	; (18b94 <z_sched_start+0x7c>)
   18b42:	f002 f9f3 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18b46:	4812      	ldr	r0, [pc, #72]	; (18b90 <z_sched_start+0x78>)
   18b48:	f000 ff7a 	bl	19a40 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18b4c:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   18b4e:	075a      	lsls	r2, r3, #29
   18b50:	d411      	bmi.n	18b76 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b52:	480f      	ldr	r0, [pc, #60]	; (18b90 <z_sched_start+0x78>)
   18b54:	f000 ff66 	bl	19a24 <z_spin_unlock_valid>
   18b58:	b940      	cbnz	r0, 18b6c <z_sched_start+0x54>
   18b5a:	490e      	ldr	r1, [pc, #56]	; (18b94 <z_sched_start+0x7c>)
   18b5c:	480e      	ldr	r0, [pc, #56]	; (18b98 <z_sched_start+0x80>)
   18b5e:	22a7      	movs	r2, #167	; 0xa7
   18b60:	f001 ff3e 	bl	1a9e0 <printk>
   18b64:	21a7      	movs	r1, #167	; 0xa7
   18b66:	480b      	ldr	r0, [pc, #44]	; (18b94 <z_sched_start+0x7c>)
   18b68:	f002 f9e0 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18b6c:	f385 8811 	msr	BASEPRI, r5
   18b70:	f3bf 8f6f 	isb	sy
}
   18b74:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18b76:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   18b7a:	4620      	mov	r0, r4
   18b7c:	7363      	strb	r3, [r4, #13]
   18b7e:	f7ff ff4b 	bl	18a18 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18b82:	4629      	mov	r1, r5
}
   18b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   18b88:	4801      	ldr	r0, [pc, #4]	; (18b90 <z_sched_start+0x78>)
   18b8a:	f7ff bdbb 	b.w	18704 <z_reschedule>
   18b8e:	bf00      	nop
   18b90:	2000a2b4 	.word	0x2000a2b4
   18b94:	0001fae5 	.word	0x0001fae5
   18b98:	0001faab 	.word	0x0001faab

00018b9c <z_thread_timeout>:
{
   18b9c:	b570      	push	{r4, r5, r6, lr}
   18b9e:	4604      	mov	r4, r0
	__asm__ volatile(
   18ba0:	f04f 0320 	mov.w	r3, #32
   18ba4:	f3ef 8611 	mrs	r6, BASEPRI
   18ba8:	f383 8811 	msr	BASEPRI, r3
   18bac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18bb0:	4819      	ldr	r0, [pc, #100]	; (18c18 <z_thread_timeout+0x7c>)
   18bb2:	f000 ff29 	bl	19a08 <z_spin_lock_valid>
   18bb6:	b940      	cbnz	r0, 18bca <z_thread_timeout+0x2e>
   18bb8:	4918      	ldr	r1, [pc, #96]	; (18c1c <z_thread_timeout+0x80>)
   18bba:	4819      	ldr	r0, [pc, #100]	; (18c20 <z_thread_timeout+0x84>)
   18bbc:	227c      	movs	r2, #124	; 0x7c
   18bbe:	f001 ff0f 	bl	1a9e0 <printk>
   18bc2:	217c      	movs	r1, #124	; 0x7c
   18bc4:	4815      	ldr	r0, [pc, #84]	; (18c1c <z_thread_timeout+0x80>)
   18bc6:	f002 f9b1 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18bca:	4813      	ldr	r0, [pc, #76]	; (18c18 <z_thread_timeout+0x7c>)
   18bcc:	f000 ff38 	bl	19a40 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   18bd0:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   18bd4:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   18bd8:	b113      	cbz	r3, 18be0 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   18bda:	4628      	mov	r0, r5
   18bdc:	f005 f9ea 	bl	1dfb4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18be0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   18be4:	4628      	mov	r0, r5
   18be6:	f023 0314 	bic.w	r3, r3, #20
   18bea:	f804 3c0b 	strb.w	r3, [r4, #-11]
   18bee:	f7ff ff13 	bl	18a18 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18bf2:	4809      	ldr	r0, [pc, #36]	; (18c18 <z_thread_timeout+0x7c>)
   18bf4:	f000 ff16 	bl	19a24 <z_spin_unlock_valid>
   18bf8:	b940      	cbnz	r0, 18c0c <z_thread_timeout+0x70>
   18bfa:	4908      	ldr	r1, [pc, #32]	; (18c1c <z_thread_timeout+0x80>)
   18bfc:	4808      	ldr	r0, [pc, #32]	; (18c20 <z_thread_timeout+0x84>)
   18bfe:	22a7      	movs	r2, #167	; 0xa7
   18c00:	f001 feee 	bl	1a9e0 <printk>
   18c04:	21a7      	movs	r1, #167	; 0xa7
   18c06:	4805      	ldr	r0, [pc, #20]	; (18c1c <z_thread_timeout+0x80>)
   18c08:	f002 f990 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18c0c:	f386 8811 	msr	BASEPRI, r6
   18c10:	f3bf 8f6f 	isb	sy
}
   18c14:	bd70      	pop	{r4, r5, r6, pc}
   18c16:	bf00      	nop
   18c18:	2000a2b4 	.word	0x2000a2b4
   18c1c:	0001fae5 	.word	0x0001fae5
   18c20:	0001faab 	.word	0x0001faab

00018c24 <move_thread_to_end_of_prio_q>:
{
   18c24:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18c26:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18c2a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18c2c:	2b00      	cmp	r3, #0
   18c2e:	da03      	bge.n	18c38 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18c30:	4601      	mov	r1, r0
   18c32:	481d      	ldr	r0, [pc, #116]	; (18ca8 <move_thread_to_end_of_prio_q+0x84>)
   18c34:	f7ff fdf4 	bl	18820 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18c38:	4b1c      	ldr	r3, [pc, #112]	; (18cac <move_thread_to_end_of_prio_q+0x88>)
   18c3a:	429c      	cmp	r4, r3
   18c3c:	d10a      	bne.n	18c54 <move_thread_to_end_of_prio_q+0x30>
   18c3e:	491c      	ldr	r1, [pc, #112]	; (18cb0 <move_thread_to_end_of_prio_q+0x8c>)
   18c40:	481c      	ldr	r0, [pc, #112]	; (18cb4 <move_thread_to_end_of_prio_q+0x90>)
   18c42:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18c46:	f001 fecb 	bl	1a9e0 <printk>
   18c4a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18c4e:	4818      	ldr	r0, [pc, #96]	; (18cb0 <move_thread_to_end_of_prio_q+0x8c>)
   18c50:	f002 f96c 	bl	1af2c <assert_post_action>
	return list->head == list;
   18c54:	4a18      	ldr	r2, [pc, #96]	; (18cb8 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c56:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18c5a:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c5e:	4283      	cmp	r3, r0
   18c60:	d01c      	beq.n	18c9c <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18c62:	b1db      	cbz	r3, 18c9c <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   18c64:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18c68:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18c6c:	42ae      	cmp	r6, r5
   18c6e:	dd10      	ble.n	18c92 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   18c70:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18c72:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18c76:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18c78:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18c7a:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   18c7c:	6890      	ldr	r0, [r2, #8]
   18c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18c82:	7363      	strb	r3, [r4, #13]
   18c84:	1b03      	subs	r3, r0, r4
   18c86:	4258      	negs	r0, r3
   18c88:	4158      	adcs	r0, r3
}
   18c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   18c8e:	f7ff be2d 	b.w	188ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18c92:	428b      	cmp	r3, r1
   18c94:	d002      	beq.n	18c9c <move_thread_to_end_of_prio_q+0x78>
   18c96:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18c98:	2b00      	cmp	r3, #0
   18c9a:	d1e5      	bne.n	18c68 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   18c9c:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18ca0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18ca2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18ca4:	6314      	str	r4, [r2, #48]	; 0x30
}
   18ca6:	e7e8      	b.n	18c7a <move_thread_to_end_of_prio_q+0x56>
   18ca8:	2000a2a8 	.word	0x2000a2a8
   18cac:	200097c0 	.word	0x200097c0
   18cb0:	00022870 	.word	0x00022870
   18cb4:	0001faab 	.word	0x0001faab
   18cb8:	2000a27c 	.word	0x2000a27c

00018cbc <z_time_slice>:
{
   18cbc:	b538      	push	{r3, r4, r5, lr}
   18cbe:	4604      	mov	r4, r0
	__asm__ volatile(
   18cc0:	f04f 0320 	mov.w	r3, #32
   18cc4:	f3ef 8511 	mrs	r5, BASEPRI
   18cc8:	f383 8811 	msr	BASEPRI, r3
   18ccc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18cd0:	4824      	ldr	r0, [pc, #144]	; (18d64 <z_time_slice+0xa8>)
   18cd2:	f000 fe99 	bl	19a08 <z_spin_lock_valid>
   18cd6:	b940      	cbnz	r0, 18cea <z_time_slice+0x2e>
   18cd8:	4923      	ldr	r1, [pc, #140]	; (18d68 <z_time_slice+0xac>)
   18cda:	4824      	ldr	r0, [pc, #144]	; (18d6c <z_time_slice+0xb0>)
   18cdc:	227c      	movs	r2, #124	; 0x7c
   18cde:	f001 fe7f 	bl	1a9e0 <printk>
   18ce2:	217c      	movs	r1, #124	; 0x7c
   18ce4:	4820      	ldr	r0, [pc, #128]	; (18d68 <z_time_slice+0xac>)
   18ce6:	f002 f921 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18cea:	481e      	ldr	r0, [pc, #120]	; (18d64 <z_time_slice+0xa8>)
   18cec:	f000 fea8 	bl	19a40 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   18cf0:	4b1f      	ldr	r3, [pc, #124]	; (18d70 <z_time_slice+0xb4>)
   18cf2:	4a20      	ldr	r2, [pc, #128]	; (18d74 <z_time_slice+0xb8>)
   18cf4:	6898      	ldr	r0, [r3, #8]
   18cf6:	6811      	ldr	r1, [r2, #0]
   18cf8:	4288      	cmp	r0, r1
   18cfa:	d113      	bne.n	18d24 <z_time_slice+0x68>
			z_reset_time_slice();
   18cfc:	f7ff fc9e 	bl	1863c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18d00:	4818      	ldr	r0, [pc, #96]	; (18d64 <z_time_slice+0xa8>)
   18d02:	f000 fe8f 	bl	19a24 <z_spin_unlock_valid>
   18d06:	b940      	cbnz	r0, 18d1a <z_time_slice+0x5e>
   18d08:	4917      	ldr	r1, [pc, #92]	; (18d68 <z_time_slice+0xac>)
   18d0a:	4818      	ldr	r0, [pc, #96]	; (18d6c <z_time_slice+0xb0>)
   18d0c:	22a7      	movs	r2, #167	; 0xa7
   18d0e:	f001 fe67 	bl	1a9e0 <printk>
   18d12:	21a7      	movs	r1, #167	; 0xa7
   18d14:	4814      	ldr	r0, [pc, #80]	; (18d68 <z_time_slice+0xac>)
   18d16:	f002 f909 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18d1a:	f385 8811 	msr	BASEPRI, r5
   18d1e:	f3bf 8f6f 	isb	sy
}
   18d22:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   18d24:	2100      	movs	r1, #0
   18d26:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   18d28:	4a13      	ldr	r2, [pc, #76]	; (18d78 <z_time_slice+0xbc>)
   18d2a:	6812      	ldr	r2, [r2, #0]
   18d2c:	b1ba      	cbz	r2, 18d5e <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18d2e:	89c2      	ldrh	r2, [r0, #14]
   18d30:	2a7f      	cmp	r2, #127	; 0x7f
   18d32:	d814      	bhi.n	18d5e <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   18d34:	7b42      	ldrb	r2, [r0, #13]
   18d36:	06d2      	lsls	r2, r2, #27
   18d38:	d111      	bne.n	18d5e <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18d3a:	4a10      	ldr	r2, [pc, #64]	; (18d7c <z_time_slice+0xc0>)
   18d3c:	f990 100e 	ldrsb.w	r1, [r0, #14]
   18d40:	6812      	ldr	r2, [r2, #0]
   18d42:	4291      	cmp	r1, r2
   18d44:	db0b      	blt.n	18d5e <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18d46:	4a0e      	ldr	r2, [pc, #56]	; (18d80 <z_time_slice+0xc4>)
   18d48:	4290      	cmp	r0, r2
   18d4a:	d008      	beq.n	18d5e <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   18d4c:	695a      	ldr	r2, [r3, #20]
   18d4e:	42a2      	cmp	r2, r4
   18d50:	dc02      	bgt.n	18d58 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   18d52:	f7ff ff67 	bl	18c24 <move_thread_to_end_of_prio_q>
   18d56:	e7d1      	b.n	18cfc <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   18d58:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   18d5a:	615a      	str	r2, [r3, #20]
   18d5c:	e7d0      	b.n	18d00 <z_time_slice+0x44>
   18d5e:	2200      	movs	r2, #0
   18d60:	e7fb      	b.n	18d5a <z_time_slice+0x9e>
   18d62:	bf00      	nop
   18d64:	2000a2b4 	.word	0x2000a2b4
   18d68:	0001fae5 	.word	0x0001fae5
   18d6c:	0001faab 	.word	0x0001faab
   18d70:	2000a27c 	.word	0x2000a27c
   18d74:	2000a2b0 	.word	0x2000a2b0
   18d78:	2000a2bc 	.word	0x2000a2bc
   18d7c:	2000a2b8 	.word	0x2000a2b8
   18d80:	200097c0 	.word	0x200097c0

00018d84 <z_impl_k_thread_suspend>:
{
   18d84:	b570      	push	{r4, r5, r6, lr}
   18d86:	4604      	mov	r4, r0
   18d88:	3018      	adds	r0, #24
   18d8a:	f001 f881 	bl	19e90 <z_abort_timeout>
	__asm__ volatile(
   18d8e:	f04f 0320 	mov.w	r3, #32
   18d92:	f3ef 8611 	mrs	r6, BASEPRI
   18d96:	f383 8811 	msr	BASEPRI, r3
   18d9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d9e:	4820      	ldr	r0, [pc, #128]	; (18e20 <z_impl_k_thread_suspend+0x9c>)
   18da0:	f000 fe32 	bl	19a08 <z_spin_lock_valid>
   18da4:	b940      	cbnz	r0, 18db8 <z_impl_k_thread_suspend+0x34>
   18da6:	491f      	ldr	r1, [pc, #124]	; (18e24 <z_impl_k_thread_suspend+0xa0>)
   18da8:	481f      	ldr	r0, [pc, #124]	; (18e28 <z_impl_k_thread_suspend+0xa4>)
   18daa:	227c      	movs	r2, #124	; 0x7c
   18dac:	f001 fe18 	bl	1a9e0 <printk>
   18db0:	217c      	movs	r1, #124	; 0x7c
   18db2:	481c      	ldr	r0, [pc, #112]	; (18e24 <z_impl_k_thread_suspend+0xa0>)
   18db4:	f002 f8ba 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18db8:	4819      	ldr	r0, [pc, #100]	; (18e20 <z_impl_k_thread_suspend+0x9c>)
   18dba:	f000 fe41 	bl	19a40 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   18dbe:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18dc2:	2b00      	cmp	r3, #0
   18dc4:	da07      	bge.n	18dd6 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18dc6:	4621      	mov	r1, r4
   18dc8:	4818      	ldr	r0, [pc, #96]	; (18e2c <z_impl_k_thread_suspend+0xa8>)
   18dca:	f7ff fd29 	bl	18820 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18dce:	7b63      	ldrb	r3, [r4, #13]
   18dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18dd4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18dd6:	4d16      	ldr	r5, [pc, #88]	; (18e30 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18dd8:	7b63      	ldrb	r3, [r4, #13]
   18dda:	68a8      	ldr	r0, [r5, #8]
   18ddc:	f043 0310 	orr.w	r3, r3, #16
   18de0:	7363      	strb	r3, [r4, #13]
   18de2:	1b03      	subs	r3, r0, r4
   18de4:	4258      	negs	r0, r3
   18de6:	4158      	adcs	r0, r3
   18de8:	f7ff fd80 	bl	188ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dec:	480c      	ldr	r0, [pc, #48]	; (18e20 <z_impl_k_thread_suspend+0x9c>)
   18dee:	f000 fe19 	bl	19a24 <z_spin_unlock_valid>
   18df2:	b940      	cbnz	r0, 18e06 <z_impl_k_thread_suspend+0x82>
   18df4:	490b      	ldr	r1, [pc, #44]	; (18e24 <z_impl_k_thread_suspend+0xa0>)
   18df6:	480c      	ldr	r0, [pc, #48]	; (18e28 <z_impl_k_thread_suspend+0xa4>)
   18df8:	22a7      	movs	r2, #167	; 0xa7
   18dfa:	f001 fdf1 	bl	1a9e0 <printk>
   18dfe:	21a7      	movs	r1, #167	; 0xa7
   18e00:	4808      	ldr	r0, [pc, #32]	; (18e24 <z_impl_k_thread_suspend+0xa0>)
   18e02:	f002 f893 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18e06:	f386 8811 	msr	BASEPRI, r6
   18e0a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18e0e:	68ab      	ldr	r3, [r5, #8]
   18e10:	42a3      	cmp	r3, r4
   18e12:	d103      	bne.n	18e1c <z_impl_k_thread_suspend+0x98>
}
   18e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18e18:	f005 b8c2 	b.w	1dfa0 <z_reschedule_unlocked>
}
   18e1c:	bd70      	pop	{r4, r5, r6, pc}
   18e1e:	bf00      	nop
   18e20:	2000a2b4 	.word	0x2000a2b4
   18e24:	0001fae5 	.word	0x0001fae5
   18e28:	0001faab 	.word	0x0001faab
   18e2c:	2000a2a8 	.word	0x2000a2a8
   18e30:	2000a27c 	.word	0x2000a27c

00018e34 <z_thread_single_abort>:
{
   18e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18e38:	7b03      	ldrb	r3, [r0, #12]
{
   18e3a:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18e3c:	07dd      	lsls	r5, r3, #31
   18e3e:	d50a      	bpl.n	18e56 <z_thread_single_abort+0x22>
   18e40:	4976      	ldr	r1, [pc, #472]	; (1901c <z_thread_single_abort+0x1e8>)
   18e42:	4877      	ldr	r0, [pc, #476]	; (19020 <z_thread_single_abort+0x1ec>)
   18e44:	f240 220d 	movw	r2, #525	; 0x20d
   18e48:	f001 fdca 	bl	1a9e0 <printk>
   18e4c:	f240 210d 	movw	r1, #525	; 0x20d
   18e50:	4872      	ldr	r0, [pc, #456]	; (1901c <z_thread_single_abort+0x1e8>)
   18e52:	f002 f86b 	bl	1af2c <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   18e56:	4e73      	ldr	r6, [pc, #460]	; (19024 <z_thread_single_abort+0x1f0>)
   18e58:	68b3      	ldr	r3, [r6, #8]
   18e5a:	42a3      	cmp	r3, r4
   18e5c:	d10d      	bne.n	18e7a <z_thread_single_abort+0x46>
   18e5e:	f3ef 8305 	mrs	r3, IPSR
   18e62:	b953      	cbnz	r3, 18e7a <z_thread_single_abort+0x46>
   18e64:	496d      	ldr	r1, [pc, #436]	; (1901c <z_thread_single_abort+0x1e8>)
   18e66:	486e      	ldr	r0, [pc, #440]	; (19020 <z_thread_single_abort+0x1ec>)
   18e68:	f240 220f 	movw	r2, #527	; 0x20f
   18e6c:	f001 fdb8 	bl	1a9e0 <printk>
   18e70:	f240 210f 	movw	r1, #527	; 0x20f
   18e74:	4869      	ldr	r0, [pc, #420]	; (1901c <z_thread_single_abort+0x1e8>)
   18e76:	f002 f859 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18e7a:	f04f 0320 	mov.w	r3, #32
   18e7e:	f3ef 8511 	mrs	r5, BASEPRI
   18e82:	f383 8811 	msr	BASEPRI, r3
   18e86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e8a:	4867      	ldr	r0, [pc, #412]	; (19028 <z_thread_single_abort+0x1f4>)
   18e8c:	f000 fdbc 	bl	19a08 <z_spin_lock_valid>
   18e90:	b940      	cbnz	r0, 18ea4 <z_thread_single_abort+0x70>
   18e92:	4966      	ldr	r1, [pc, #408]	; (1902c <z_thread_single_abort+0x1f8>)
   18e94:	4862      	ldr	r0, [pc, #392]	; (19020 <z_thread_single_abort+0x1ec>)
   18e96:	227c      	movs	r2, #124	; 0x7c
   18e98:	f001 fda2 	bl	1a9e0 <printk>
   18e9c:	217c      	movs	r1, #124	; 0x7c
   18e9e:	4863      	ldr	r0, [pc, #396]	; (1902c <z_thread_single_abort+0x1f8>)
   18ea0:	f002 f844 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18ea4:	4860      	ldr	r0, [pc, #384]	; (19028 <z_thread_single_abort+0x1f4>)
   18ea6:	f000 fdcb 	bl	19a40 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   18eaa:	7b63      	ldrb	r3, [r4, #13]
   18eac:	f013 0f28 	tst.w	r3, #40	; 0x28
   18eb0:	d012      	beq.n	18ed8 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18eb2:	485d      	ldr	r0, [pc, #372]	; (19028 <z_thread_single_abort+0x1f4>)
   18eb4:	f000 fdb6 	bl	19a24 <z_spin_unlock_valid>
   18eb8:	b940      	cbnz	r0, 18ecc <z_thread_single_abort+0x98>
   18eba:	495c      	ldr	r1, [pc, #368]	; (1902c <z_thread_single_abort+0x1f8>)
   18ebc:	4858      	ldr	r0, [pc, #352]	; (19020 <z_thread_single_abort+0x1ec>)
   18ebe:	22a7      	movs	r2, #167	; 0xa7
   18ec0:	f001 fd8e 	bl	1a9e0 <printk>
   18ec4:	21a7      	movs	r1, #167	; 0xa7
   18ec6:	4859      	ldr	r0, [pc, #356]	; (1902c <z_thread_single_abort+0x1f8>)
   18ec8:	f002 f830 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   18ecc:	f385 8811 	msr	BASEPRI, r5
   18ed0:	f3bf 8f6f 	isb	sy
}
   18ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   18ed8:	f043 0320 	orr.w	r3, r3, #32
   18edc:	4852      	ldr	r0, [pc, #328]	; (19028 <z_thread_single_abort+0x1f4>)
   18ede:	7363      	strb	r3, [r4, #13]
   18ee0:	f000 fda0 	bl	19a24 <z_spin_unlock_valid>
   18ee4:	b940      	cbnz	r0, 18ef8 <z_thread_single_abort+0xc4>
   18ee6:	4951      	ldr	r1, [pc, #324]	; (1902c <z_thread_single_abort+0x1f8>)
   18ee8:	484d      	ldr	r0, [pc, #308]	; (19020 <z_thread_single_abort+0x1ec>)
   18eea:	22a7      	movs	r2, #167	; 0xa7
   18eec:	f001 fd78 	bl	1a9e0 <printk>
   18ef0:	21a7      	movs	r1, #167	; 0xa7
   18ef2:	484e      	ldr	r0, [pc, #312]	; (1902c <z_thread_single_abort+0x1f8>)
   18ef4:	f002 f81a 	bl	1af2c <assert_post_action>
   18ef8:	f385 8811 	msr	BASEPRI, r5
   18efc:	f3bf 8f6f 	isb	sy
   18f00:	f104 0018 	add.w	r0, r4, #24
   18f04:	f000 ffc4 	bl	19e90 <z_abort_timeout>
	__asm__ volatile(
   18f08:	f04f 0320 	mov.w	r3, #32
   18f0c:	f3ef 8711 	mrs	r7, BASEPRI
   18f10:	f383 8811 	msr	BASEPRI, r3
   18f14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f18:	4843      	ldr	r0, [pc, #268]	; (19028 <z_thread_single_abort+0x1f4>)
   18f1a:	f000 fd75 	bl	19a08 <z_spin_lock_valid>
   18f1e:	b940      	cbnz	r0, 18f32 <z_thread_single_abort+0xfe>
   18f20:	4942      	ldr	r1, [pc, #264]	; (1902c <z_thread_single_abort+0x1f8>)
   18f22:	483f      	ldr	r0, [pc, #252]	; (19020 <z_thread_single_abort+0x1ec>)
   18f24:	227c      	movs	r2, #124	; 0x7c
   18f26:	f001 fd5b 	bl	1a9e0 <printk>
   18f2a:	217c      	movs	r1, #124	; 0x7c
   18f2c:	483f      	ldr	r0, [pc, #252]	; (1902c <z_thread_single_abort+0x1f8>)
   18f2e:	f001 fffd 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   18f32:	483d      	ldr	r0, [pc, #244]	; (19028 <z_thread_single_abort+0x1f4>)
   18f34:	f000 fd84 	bl	19a40 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   18f38:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18f3a:	06d8      	lsls	r0, r3, #27
   18f3c:	d116      	bne.n	18f6c <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   18f3e:	69a2      	ldr	r2, [r4, #24]
   18f40:	b9a2      	cbnz	r2, 18f6c <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   18f42:	0619      	lsls	r1, r3, #24
   18f44:	d507      	bpl.n	18f56 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   18f46:	4621      	mov	r1, r4
   18f48:	4839      	ldr	r0, [pc, #228]	; (19030 <z_thread_single_abort+0x1fc>)
   18f4a:	f7ff fc69 	bl	18820 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18f4e:	7b63      	ldrb	r3, [r4, #13]
   18f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18f54:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   18f56:	68b0      	ldr	r0, [r6, #8]
   18f58:	1b02      	subs	r2, r0, r4
   18f5a:	4250      	negs	r0, r2
   18f5c:	4150      	adcs	r0, r2
   18f5e:	f7ff fcc5 	bl	188ec <update_cache>
			waiter->base.pended_on = NULL;
   18f62:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18f66:	f104 0930 	add.w	r9, r4, #48	; 0x30
   18f6a:	e023      	b.n	18fb4 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   18f6c:	079b      	lsls	r3, r3, #30
   18f6e:	d5f8      	bpl.n	18f62 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   18f70:	4620      	mov	r0, r4
   18f72:	f7ff fb4d 	bl	18610 <pended_on>
   18f76:	4621      	mov	r1, r4
   18f78:	f7ff fc52 	bl	18820 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18f7c:	7b63      	ldrb	r3, [r4, #13]
   18f7e:	f023 0302 	bic.w	r3, r3, #2
   18f82:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   18f84:	2300      	movs	r3, #0
   18f86:	60a3      	str	r3, [r4, #8]
   18f88:	e7eb      	b.n	18f62 <z_thread_single_abort+0x12e>
   18f8a:	f105 0018 	add.w	r0, r5, #24
   18f8e:	f000 ff7f 	bl	19e90 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   18f92:	4628      	mov	r0, r5
   18f94:	f7ff fb3c 	bl	18610 <pended_on>
   18f98:	4629      	mov	r1, r5
   18f9a:	f7ff fc41 	bl	18820 <z_priq_dumb_remove>
   18f9e:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   18fa0:	4628      	mov	r0, r5
   18fa2:	f023 0302 	bic.w	r3, r3, #2
   18fa6:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   18fa8:	f8c5 8008 	str.w	r8, [r5, #8]
   18fac:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   18fb0:	f7ff fd32 	bl	18a18 <ready_thread>
	return list->head == list;
   18fb4:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18fb6:	454d      	cmp	r5, r9
   18fb8:	d001      	beq.n	18fbe <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   18fba:	2d00      	cmp	r5, #0
   18fbc:	d1e5      	bne.n	18f8a <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   18fbe:	68b2      	ldr	r2, [r6, #8]
   18fc0:	4b1c      	ldr	r3, [pc, #112]	; (19034 <z_thread_single_abort+0x200>)
   18fc2:	429a      	cmp	r2, r3
   18fc4:	d102      	bne.n	18fcc <z_thread_single_abort+0x198>
			update_cache(1);
   18fc6:	2001      	movs	r0, #1
   18fc8:	f7ff fc90 	bl	188ec <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18fcc:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   18fce:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   18fd0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   18fd2:	f043 0308 	orr.w	r3, r3, #8
   18fd6:	7363      	strb	r3, [r4, #13]
   18fd8:	f104 0338 	add.w	r3, r4, #56	; 0x38
   18fdc:	e8d3 1fef 	ldaex	r1, [r3]
   18fe0:	e8c3 2fe0 	stlex	r0, r2, [r3]
   18fe4:	2800      	cmp	r0, #0
   18fe6:	d1f9      	bne.n	18fdc <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18fe8:	480f      	ldr	r0, [pc, #60]	; (19028 <z_thread_single_abort+0x1f4>)
   18fea:	f000 fd1b 	bl	19a24 <z_spin_unlock_valid>
   18fee:	b940      	cbnz	r0, 19002 <z_thread_single_abort+0x1ce>
   18ff0:	490e      	ldr	r1, [pc, #56]	; (1902c <z_thread_single_abort+0x1f8>)
   18ff2:	480b      	ldr	r0, [pc, #44]	; (19020 <z_thread_single_abort+0x1ec>)
   18ff4:	22a7      	movs	r2, #167	; 0xa7
   18ff6:	f001 fcf3 	bl	1a9e0 <printk>
   18ffa:	21a7      	movs	r1, #167	; 0xa7
   18ffc:	480b      	ldr	r0, [pc, #44]	; (1902c <z_thread_single_abort+0x1f8>)
   18ffe:	f001 ff95 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19002:	f387 8811 	msr	BASEPRI, r7
   19006:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1900a:	2d00      	cmp	r5, #0
   1900c:	f43f af62 	beq.w	18ed4 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   19010:	4620      	mov	r0, r4
   19012:	462b      	mov	r3, r5
}
   19014:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   19018:	4718      	bx	r3
   1901a:	bf00      	nop
   1901c:	00022870 	.word	0x00022870
   19020:	0001faab 	.word	0x0001faab
   19024:	2000a27c 	.word	0x2000a27c
   19028:	2000a2b4 	.word	0x2000a2b4
   1902c:	0001fae5 	.word	0x0001fae5
   19030:	2000a2a8 	.word	0x2000a2a8
   19034:	200097c0 	.word	0x200097c0

00019038 <unready_thread>:
{
   19038:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1903a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1903e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   19040:	2b00      	cmp	r3, #0
   19042:	da07      	bge.n	19054 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   19044:	4601      	mov	r1, r0
   19046:	4808      	ldr	r0, [pc, #32]	; (19068 <unready_thread+0x30>)
   19048:	f7ff fbea 	bl	18820 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1904c:	7b63      	ldrb	r3, [r4, #13]
   1904e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19052:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   19054:	4b05      	ldr	r3, [pc, #20]	; (1906c <unready_thread+0x34>)
   19056:	6898      	ldr	r0, [r3, #8]
   19058:	1b03      	subs	r3, r0, r4
   1905a:	4258      	negs	r0, r3
   1905c:	4158      	adcs	r0, r3
}
   1905e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   19062:	f7ff bc43 	b.w	188ec <update_cache>
   19066:	bf00      	nop
   19068:	2000a2a8 	.word	0x2000a2a8
   1906c:	2000a27c 	.word	0x2000a27c

00019070 <add_to_waitq_locked>:
{
   19070:	b538      	push	{r3, r4, r5, lr}
   19072:	4604      	mov	r4, r0
   19074:	460d      	mov	r5, r1
	unready_thread(thread);
   19076:	f7ff ffdf 	bl	19038 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1907a:	7b63      	ldrb	r3, [r4, #13]
   1907c:	f043 0302 	orr.w	r3, r3, #2
   19080:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   19082:	b1ed      	cbz	r5, 190c0 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19084:	4b15      	ldr	r3, [pc, #84]	; (190dc <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   19086:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19088:	429c      	cmp	r4, r3
   1908a:	d10a      	bne.n	190a2 <add_to_waitq_locked+0x32>
   1908c:	4914      	ldr	r1, [pc, #80]	; (190e0 <add_to_waitq_locked+0x70>)
   1908e:	4815      	ldr	r0, [pc, #84]	; (190e4 <add_to_waitq_locked+0x74>)
   19090:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   19094:	f001 fca4 	bl	1a9e0 <printk>
   19098:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1909c:	4810      	ldr	r0, [pc, #64]	; (190e0 <add_to_waitq_locked+0x70>)
   1909e:	f001 ff45 	bl	1af2c <assert_post_action>
	return list->head == list;
   190a2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   190a4:	429d      	cmp	r5, r3
   190a6:	d012      	beq.n	190ce <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   190a8:	b18b      	cbz	r3, 190ce <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   190aa:	f994 200e 	ldrsb.w	r2, [r4, #14]
   190ae:	f993 100e 	ldrsb.w	r1, [r3, #14]
   190b2:	4291      	cmp	r1, r2
   190b4:	dd05      	ble.n	190c2 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   190b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   190b8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   190bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   190be:	605c      	str	r4, [r3, #4]
}
   190c0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   190c2:	6869      	ldr	r1, [r5, #4]
   190c4:	428b      	cmp	r3, r1
   190c6:	d002      	beq.n	190ce <add_to_waitq_locked+0x5e>
   190c8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   190ca:	2b00      	cmp	r3, #0
   190cc:	d1ef      	bne.n	190ae <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   190ce:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   190d0:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   190d2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   190d4:	686b      	ldr	r3, [r5, #4]
   190d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   190d8:	606c      	str	r4, [r5, #4]
}
   190da:	e7f1      	b.n	190c0 <add_to_waitq_locked+0x50>
   190dc:	200097c0 	.word	0x200097c0
   190e0:	00022870 	.word	0x00022870
   190e4:	0001faab 	.word	0x0001faab

000190e8 <pend>:
{
   190e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190ec:	4604      	mov	r4, r0
   190ee:	4688      	mov	r8, r1
   190f0:	4616      	mov	r6, r2
   190f2:	461d      	mov	r5, r3
	__asm__ volatile(
   190f4:	f04f 0320 	mov.w	r3, #32
   190f8:	f3ef 8711 	mrs	r7, BASEPRI
   190fc:	f383 8811 	msr	BASEPRI, r3
   19100:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19104:	481a      	ldr	r0, [pc, #104]	; (19170 <pend+0x88>)
   19106:	f000 fc7f 	bl	19a08 <z_spin_lock_valid>
   1910a:	b940      	cbnz	r0, 1911e <pend+0x36>
   1910c:	4919      	ldr	r1, [pc, #100]	; (19174 <pend+0x8c>)
   1910e:	481a      	ldr	r0, [pc, #104]	; (19178 <pend+0x90>)
   19110:	227c      	movs	r2, #124	; 0x7c
   19112:	f001 fc65 	bl	1a9e0 <printk>
   19116:	217c      	movs	r1, #124	; 0x7c
   19118:	4816      	ldr	r0, [pc, #88]	; (19174 <pend+0x8c>)
   1911a:	f001 ff07 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1911e:	4814      	ldr	r0, [pc, #80]	; (19170 <pend+0x88>)
   19120:	f000 fc8e 	bl	19a40 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   19124:	4620      	mov	r0, r4
   19126:	4641      	mov	r1, r8
   19128:	f7ff ffa2 	bl	19070 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1912c:	4810      	ldr	r0, [pc, #64]	; (19170 <pend+0x88>)
   1912e:	f000 fc79 	bl	19a24 <z_spin_unlock_valid>
   19132:	b940      	cbnz	r0, 19146 <pend+0x5e>
   19134:	490f      	ldr	r1, [pc, #60]	; (19174 <pend+0x8c>)
   19136:	4810      	ldr	r0, [pc, #64]	; (19178 <pend+0x90>)
   19138:	22a7      	movs	r2, #167	; 0xa7
   1913a:	f001 fc51 	bl	1a9e0 <printk>
   1913e:	21a7      	movs	r1, #167	; 0xa7
   19140:	480c      	ldr	r0, [pc, #48]	; (19174 <pend+0x8c>)
   19142:	f001 fef3 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19146:	f387 8811 	msr	BASEPRI, r7
   1914a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1914e:	f1b5 3fff 	cmp.w	r5, #4294967295
   19152:	bf08      	it	eq
   19154:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19158:	d008      	beq.n	1916c <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1915a:	4632      	mov	r2, r6
   1915c:	462b      	mov	r3, r5
   1915e:	f104 0018 	add.w	r0, r4, #24
   19162:	4906      	ldr	r1, [pc, #24]	; (1917c <pend+0x94>)
}
   19164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19168:	f000 bde2 	b.w	19d30 <z_add_timeout>
   1916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19170:	2000a2b4 	.word	0x2000a2b4
   19174:	0001fae5 	.word	0x0001fae5
   19178:	0001faab 	.word	0x0001faab
   1917c:	00018b9d 	.word	0x00018b9d

00019180 <z_pend_curr>:
{
   19180:	b538      	push	{r3, r4, r5, lr}
   19182:	4605      	mov	r5, r0
	pending_current = _current;
   19184:	4b0d      	ldr	r3, [pc, #52]	; (191bc <z_pend_curr+0x3c>)
{
   19186:	460c      	mov	r4, r1
	pending_current = _current;
   19188:	6898      	ldr	r0, [r3, #8]
   1918a:	4b0d      	ldr	r3, [pc, #52]	; (191c0 <z_pend_curr+0x40>)
{
   1918c:	4611      	mov	r1, r2
	pending_current = _current;
   1918e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   19190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19194:	f7ff ffa8 	bl	190e8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19198:	4628      	mov	r0, r5
   1919a:	f000 fc43 	bl	19a24 <z_spin_unlock_valid>
   1919e:	b940      	cbnz	r0, 191b2 <z_pend_curr+0x32>
   191a0:	4908      	ldr	r1, [pc, #32]	; (191c4 <z_pend_curr+0x44>)
   191a2:	4809      	ldr	r0, [pc, #36]	; (191c8 <z_pend_curr+0x48>)
   191a4:	22be      	movs	r2, #190	; 0xbe
   191a6:	f001 fc1b 	bl	1a9e0 <printk>
   191aa:	21be      	movs	r1, #190	; 0xbe
   191ac:	4805      	ldr	r0, [pc, #20]	; (191c4 <z_pend_curr+0x44>)
   191ae:	f001 febd 	bl	1af2c <assert_post_action>
   191b2:	4620      	mov	r0, r4
}
   191b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   191b8:	f7f4 bc6e 	b.w	da98 <arch_swap>
   191bc:	2000a27c 	.word	0x2000a27c
   191c0:	2000a2b0 	.word	0x2000a2b0
   191c4:	0001fae5 	.word	0x0001fae5
   191c8:	0001faab 	.word	0x0001faab

000191cc <z_set_prio>:
{
   191cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191ce:	4604      	mov	r4, r0
   191d0:	460d      	mov	r5, r1
	__asm__ volatile(
   191d2:	f04f 0320 	mov.w	r3, #32
   191d6:	f3ef 8611 	mrs	r6, BASEPRI
   191da:	f383 8811 	msr	BASEPRI, r3
   191de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   191e2:	4831      	ldr	r0, [pc, #196]	; (192a8 <z_set_prio+0xdc>)
   191e4:	f000 fc10 	bl	19a08 <z_spin_lock_valid>
   191e8:	b940      	cbnz	r0, 191fc <z_set_prio+0x30>
   191ea:	4930      	ldr	r1, [pc, #192]	; (192ac <z_set_prio+0xe0>)
   191ec:	4830      	ldr	r0, [pc, #192]	; (192b0 <z_set_prio+0xe4>)
   191ee:	227c      	movs	r2, #124	; 0x7c
   191f0:	f001 fbf6 	bl	1a9e0 <printk>
   191f4:	217c      	movs	r1, #124	; 0x7c
   191f6:	482d      	ldr	r0, [pc, #180]	; (192ac <z_set_prio+0xe0>)
   191f8:	f001 fe98 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   191fc:	482a      	ldr	r0, [pc, #168]	; (192a8 <z_set_prio+0xdc>)
   191fe:	f000 fc1f 	bl	19a40 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19202:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   19204:	b26d      	sxtb	r5, r5
   19206:	06db      	lsls	r3, r3, #27
   19208:	d14a      	bne.n	192a0 <z_set_prio+0xd4>
		if (need_sched) {
   1920a:	69a3      	ldr	r3, [r4, #24]
   1920c:	2b00      	cmp	r3, #0
   1920e:	d147      	bne.n	192a0 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   19210:	4621      	mov	r1, r4
   19212:	4828      	ldr	r0, [pc, #160]	; (192b4 <z_set_prio+0xe8>)
   19214:	f7ff fb04 	bl	18820 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19218:	4b27      	ldr	r3, [pc, #156]	; (192b8 <z_set_prio+0xec>)
				thread->base.prio = prio;
   1921a:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1921c:	429c      	cmp	r4, r3
   1921e:	d10a      	bne.n	19236 <z_set_prio+0x6a>
   19220:	4926      	ldr	r1, [pc, #152]	; (192bc <z_set_prio+0xf0>)
   19222:	4823      	ldr	r0, [pc, #140]	; (192b0 <z_set_prio+0xe4>)
   19224:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   19228:	f001 fbda 	bl	1a9e0 <printk>
   1922c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   19230:	4822      	ldr	r0, [pc, #136]	; (192bc <z_set_prio+0xf0>)
   19232:	f001 fe7b 	bl	1af2c <assert_post_action>
	return list->head == list;
   19236:	4a22      	ldr	r2, [pc, #136]	; (192c0 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19238:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1923c:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19240:	4283      	cmp	r3, r0
   19242:	d027      	beq.n	19294 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19244:	b333      	cbz	r3, 19294 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   19246:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1924a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1924e:	42af      	cmp	r7, r5
   19250:	dd1b      	ble.n	1928a <z_set_prio+0xbe>
	node->prev = successor->prev;
   19252:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19254:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   19258:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1925a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1925c:	2001      	movs	r0, #1
   1925e:	f7ff fb45 	bl	188ec <update_cache>
   19262:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19264:	4810      	ldr	r0, [pc, #64]	; (192a8 <z_set_prio+0xdc>)
   19266:	f000 fbdd 	bl	19a24 <z_spin_unlock_valid>
   1926a:	b940      	cbnz	r0, 1927e <z_set_prio+0xb2>
   1926c:	490f      	ldr	r1, [pc, #60]	; (192ac <z_set_prio+0xe0>)
   1926e:	4810      	ldr	r0, [pc, #64]	; (192b0 <z_set_prio+0xe4>)
   19270:	22a7      	movs	r2, #167	; 0xa7
   19272:	f001 fbb5 	bl	1a9e0 <printk>
   19276:	21a7      	movs	r1, #167	; 0xa7
   19278:	480c      	ldr	r0, [pc, #48]	; (192ac <z_set_prio+0xe0>)
   1927a:	f001 fe57 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1927e:	f386 8811 	msr	BASEPRI, r6
   19282:	f3bf 8f6f 	isb	sy
}
   19286:	4620      	mov	r0, r4
   19288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1928a:	4299      	cmp	r1, r3
   1928c:	d002      	beq.n	19294 <z_set_prio+0xc8>
   1928e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19290:	2b00      	cmp	r3, #0
   19292:	d1da      	bne.n	1924a <z_set_prio+0x7e>
	node->prev = list->tail;
   19294:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   19298:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1929a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1929c:	6314      	str	r4, [r2, #48]	; 0x30
}
   1929e:	e7dd      	b.n	1925c <z_set_prio+0x90>
			thread->base.prio = prio;
   192a0:	73a5      	strb	r5, [r4, #14]
   192a2:	2400      	movs	r4, #0
   192a4:	e7de      	b.n	19264 <z_set_prio+0x98>
   192a6:	bf00      	nop
   192a8:	2000a2b4 	.word	0x2000a2b4
   192ac:	0001fae5 	.word	0x0001fae5
   192b0:	0001faab 	.word	0x0001faab
   192b4:	2000a2a8 	.word	0x2000a2a8
   192b8:	200097c0 	.word	0x200097c0
   192bc:	00022870 	.word	0x00022870
   192c0:	2000a27c 	.word	0x2000a27c

000192c4 <z_unpend_first_thread>:
{
   192c4:	b538      	push	{r3, r4, r5, lr}
   192c6:	4604      	mov	r4, r0
	__asm__ volatile(
   192c8:	f04f 0320 	mov.w	r3, #32
   192cc:	f3ef 8511 	mrs	r5, BASEPRI
   192d0:	f383 8811 	msr	BASEPRI, r3
   192d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   192d8:	482b      	ldr	r0, [pc, #172]	; (19388 <z_unpend_first_thread+0xc4>)
   192da:	f000 fb95 	bl	19a08 <z_spin_lock_valid>
   192de:	b940      	cbnz	r0, 192f2 <z_unpend_first_thread+0x2e>
   192e0:	492a      	ldr	r1, [pc, #168]	; (1938c <z_unpend_first_thread+0xc8>)
   192e2:	482b      	ldr	r0, [pc, #172]	; (19390 <z_unpend_first_thread+0xcc>)
   192e4:	227c      	movs	r2, #124	; 0x7c
   192e6:	f001 fb7b 	bl	1a9e0 <printk>
   192ea:	217c      	movs	r1, #124	; 0x7c
   192ec:	4827      	ldr	r0, [pc, #156]	; (1938c <z_unpend_first_thread+0xc8>)
   192ee:	f001 fe1d 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   192f2:	4825      	ldr	r0, [pc, #148]	; (19388 <z_unpend_first_thread+0xc4>)
   192f4:	f000 fba4 	bl	19a40 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   192f8:	4620      	mov	r0, r4
   192fa:	f004 fe69 	bl	1dfd0 <z_priq_dumb_best>
   192fe:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19300:	4821      	ldr	r0, [pc, #132]	; (19388 <z_unpend_first_thread+0xc4>)
   19302:	f000 fb8f 	bl	19a24 <z_spin_unlock_valid>
   19306:	b940      	cbnz	r0, 1931a <z_unpend_first_thread+0x56>
   19308:	4920      	ldr	r1, [pc, #128]	; (1938c <z_unpend_first_thread+0xc8>)
   1930a:	4821      	ldr	r0, [pc, #132]	; (19390 <z_unpend_first_thread+0xcc>)
   1930c:	22a7      	movs	r2, #167	; 0xa7
   1930e:	f001 fb67 	bl	1a9e0 <printk>
   19312:	21a7      	movs	r1, #167	; 0xa7
   19314:	481d      	ldr	r0, [pc, #116]	; (1938c <z_unpend_first_thread+0xc8>)
   19316:	f001 fe09 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1931a:	f385 8811 	msr	BASEPRI, r5
   1931e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   19322:	b37c      	cbz	r4, 19384 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   19324:	f04f 0320 	mov.w	r3, #32
   19328:	f3ef 8511 	mrs	r5, BASEPRI
   1932c:	f383 8811 	msr	BASEPRI, r3
   19330:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19334:	4814      	ldr	r0, [pc, #80]	; (19388 <z_unpend_first_thread+0xc4>)
   19336:	f000 fb67 	bl	19a08 <z_spin_lock_valid>
   1933a:	b940      	cbnz	r0, 1934e <z_unpend_first_thread+0x8a>
   1933c:	4913      	ldr	r1, [pc, #76]	; (1938c <z_unpend_first_thread+0xc8>)
   1933e:	4814      	ldr	r0, [pc, #80]	; (19390 <z_unpend_first_thread+0xcc>)
   19340:	227c      	movs	r2, #124	; 0x7c
   19342:	f001 fb4d 	bl	1a9e0 <printk>
   19346:	217c      	movs	r1, #124	; 0x7c
   19348:	4810      	ldr	r0, [pc, #64]	; (1938c <z_unpend_first_thread+0xc8>)
   1934a:	f001 fdef 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1934e:	480e      	ldr	r0, [pc, #56]	; (19388 <z_unpend_first_thread+0xc4>)
   19350:	f000 fb76 	bl	19a40 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   19354:	4620      	mov	r0, r4
   19356:	f004 fe2d 	bl	1dfb4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1935a:	480b      	ldr	r0, [pc, #44]	; (19388 <z_unpend_first_thread+0xc4>)
   1935c:	f000 fb62 	bl	19a24 <z_spin_unlock_valid>
   19360:	b940      	cbnz	r0, 19374 <z_unpend_first_thread+0xb0>
   19362:	490a      	ldr	r1, [pc, #40]	; (1938c <z_unpend_first_thread+0xc8>)
   19364:	480a      	ldr	r0, [pc, #40]	; (19390 <z_unpend_first_thread+0xcc>)
   19366:	22a7      	movs	r2, #167	; 0xa7
   19368:	f001 fb3a 	bl	1a9e0 <printk>
   1936c:	21a7      	movs	r1, #167	; 0xa7
   1936e:	4807      	ldr	r0, [pc, #28]	; (1938c <z_unpend_first_thread+0xc8>)
   19370:	f001 fddc 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19374:	f385 8811 	msr	BASEPRI, r5
   19378:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1937c:	f104 0018 	add.w	r0, r4, #24
   19380:	f000 fd86 	bl	19e90 <z_abort_timeout>
}
   19384:	4620      	mov	r0, r4
   19386:	bd38      	pop	{r3, r4, r5, pc}
   19388:	2000a2b4 	.word	0x2000a2b4
   1938c:	0001fae5 	.word	0x0001fae5
   19390:	0001faab 	.word	0x0001faab

00019394 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19394:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   19396:	4b04      	ldr	r3, [pc, #16]	; (193a8 <z_sched_init+0x14>)
   19398:	4608      	mov	r0, r1
   1939a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1939e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   193a2:	f7ff b961 	b.w	18668 <k_sched_time_slice_set>
   193a6:	bf00      	nop
   193a8:	2000a27c 	.word	0x2000a27c

000193ac <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   193ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193ae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   193b2:	b153      	cbz	r3, 193ca <z_impl_k_yield+0x1e>
   193b4:	493d      	ldr	r1, [pc, #244]	; (194ac <z_impl_k_yield+0x100>)
   193b6:	483e      	ldr	r0, [pc, #248]	; (194b0 <z_impl_k_yield+0x104>)
   193b8:	f240 42cf 	movw	r2, #1231	; 0x4cf
   193bc:	f001 fb10 	bl	1a9e0 <printk>
   193c0:	f240 41cf 	movw	r1, #1231	; 0x4cf
   193c4:	4839      	ldr	r0, [pc, #228]	; (194ac <z_impl_k_yield+0x100>)
   193c6:	f001 fdb1 	bl	1af2c <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   193ca:	4d3a      	ldr	r5, [pc, #232]	; (194b4 <z_impl_k_yield+0x108>)
   193cc:	4f3a      	ldr	r7, [pc, #232]	; (194b8 <z_impl_k_yield+0x10c>)
   193ce:	68ab      	ldr	r3, [r5, #8]
   193d0:	42bb      	cmp	r3, r7
   193d2:	d054      	beq.n	1947e <z_impl_k_yield+0xd2>
	__asm__ volatile(
   193d4:	f04f 0320 	mov.w	r3, #32
   193d8:	f3ef 8611 	mrs	r6, BASEPRI
   193dc:	f383 8811 	msr	BASEPRI, r3
   193e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   193e4:	4835      	ldr	r0, [pc, #212]	; (194bc <z_impl_k_yield+0x110>)
   193e6:	f000 fb0f 	bl	19a08 <z_spin_lock_valid>
   193ea:	b940      	cbnz	r0, 193fe <z_impl_k_yield+0x52>
   193ec:	4934      	ldr	r1, [pc, #208]	; (194c0 <z_impl_k_yield+0x114>)
   193ee:	4830      	ldr	r0, [pc, #192]	; (194b0 <z_impl_k_yield+0x104>)
   193f0:	227c      	movs	r2, #124	; 0x7c
   193f2:	f001 faf5 	bl	1a9e0 <printk>
   193f6:	217c      	movs	r1, #124	; 0x7c
   193f8:	4831      	ldr	r0, [pc, #196]	; (194c0 <z_impl_k_yield+0x114>)
   193fa:	f001 fd97 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   193fe:	482f      	ldr	r0, [pc, #188]	; (194bc <z_impl_k_yield+0x110>)
   19400:	f000 fb1e 	bl	19a40 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   19404:	68a9      	ldr	r1, [r5, #8]
   19406:	482f      	ldr	r0, [pc, #188]	; (194c4 <z_impl_k_yield+0x118>)
   19408:	f7ff fa0a 	bl	18820 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1940c:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1940e:	42bc      	cmp	r4, r7
   19410:	d10a      	bne.n	19428 <z_impl_k_yield+0x7c>
   19412:	4926      	ldr	r1, [pc, #152]	; (194ac <z_impl_k_yield+0x100>)
   19414:	4826      	ldr	r0, [pc, #152]	; (194b0 <z_impl_k_yield+0x104>)
   19416:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1941a:	f001 fae1 	bl	1a9e0 <printk>
   1941e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   19422:	4822      	ldr	r0, [pc, #136]	; (194ac <z_impl_k_yield+0x100>)
   19424:	f001 fd82 	bl	1af2c <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   19428:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1942c:	4925      	ldr	r1, [pc, #148]	; (194c4 <z_impl_k_yield+0x118>)
   1942e:	428b      	cmp	r3, r1
   19430:	d036      	beq.n	194a0 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19432:	2b00      	cmp	r3, #0
   19434:	d034      	beq.n	194a0 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   19436:	f994 000e 	ldrsb.w	r0, [r4, #14]
   1943a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1943e:	4287      	cmp	r7, r0
   19440:	dd29      	ble.n	19496 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   19442:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19444:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   19448:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1944a:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   1944c:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   1944e:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   19450:	7b53      	ldrb	r3, [r2, #13]
   19452:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19456:	7353      	strb	r3, [r2, #13]
   19458:	f7ff fa48 	bl	188ec <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1945c:	4817      	ldr	r0, [pc, #92]	; (194bc <z_impl_k_yield+0x110>)
   1945e:	f000 fae1 	bl	19a24 <z_spin_unlock_valid>
   19462:	b940      	cbnz	r0, 19476 <z_impl_k_yield+0xca>
   19464:	4916      	ldr	r1, [pc, #88]	; (194c0 <z_impl_k_yield+0x114>)
   19466:	4812      	ldr	r0, [pc, #72]	; (194b0 <z_impl_k_yield+0x104>)
   19468:	22a7      	movs	r2, #167	; 0xa7
   1946a:	f001 fab9 	bl	1a9e0 <printk>
   1946e:	21a7      	movs	r1, #167	; 0xa7
   19470:	4813      	ldr	r0, [pc, #76]	; (194c0 <z_impl_k_yield+0x114>)
   19472:	f001 fd5b 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19476:	f386 8811 	msr	BASEPRI, r6
   1947a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1947e:	f04f 0320 	mov.w	r3, #32
   19482:	f3ef 8011 	mrs	r0, BASEPRI
   19486:	f383 8811 	msr	BASEPRI, r3
   1948a:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1948e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19492:	f7f4 bb01 	b.w	da98 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   19496:	4293      	cmp	r3, r2
   19498:	d002      	beq.n	194a0 <z_impl_k_yield+0xf4>
   1949a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1949c:	2b00      	cmp	r3, #0
   1949e:	d1cc      	bne.n	1943a <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   194a0:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   194a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   194a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   194a8:	632c      	str	r4, [r5, #48]	; 0x30
}
   194aa:	e7cf      	b.n	1944c <z_impl_k_yield+0xa0>
   194ac:	00022870 	.word	0x00022870
   194b0:	0001faab 	.word	0x0001faab
   194b4:	2000a27c 	.word	0x2000a27c
   194b8:	200097c0 	.word	0x200097c0
   194bc:	2000a2b4 	.word	0x2000a2b4
   194c0:	0001fae5 	.word	0x0001fae5
   194c4:	2000a2a8 	.word	0x2000a2a8

000194c8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   194c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194cc:	4605      	mov	r5, r0
   194ce:	460f      	mov	r7, r1
   194d0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   194d4:	b153      	cbz	r3, 194ec <z_tick_sleep+0x24>
   194d6:	4934      	ldr	r1, [pc, #208]	; (195a8 <z_tick_sleep+0xe0>)
   194d8:	4834      	ldr	r0, [pc, #208]	; (195ac <z_tick_sleep+0xe4>)
   194da:	f240 42ed 	movw	r2, #1261	; 0x4ed
   194de:	f001 fa7f 	bl	1a9e0 <printk>
   194e2:	f240 41ed 	movw	r1, #1261	; 0x4ed
   194e6:	4830      	ldr	r0, [pc, #192]	; (195a8 <z_tick_sleep+0xe0>)
   194e8:	f001 fd20 	bl	1af2c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   194ec:	ea55 0307 	orrs.w	r3, r5, r7
   194f0:	d104      	bne.n	194fc <z_tick_sleep+0x34>
	z_impl_k_yield();
   194f2:	f7ff ff5b 	bl	193ac <z_impl_k_yield>
		k_yield();
		return 0;
   194f6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   194f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   194fc:	f004 fdf6 	bl	1e0ec <z_tick_get_32>
   19500:	1944      	adds	r4, r0, r5
   19502:	f04f 0320 	mov.w	r3, #32
   19506:	f3ef 8811 	mrs	r8, BASEPRI
   1950a:	f383 8811 	msr	BASEPRI, r3
   1950e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19512:	4827      	ldr	r0, [pc, #156]	; (195b0 <z_tick_sleep+0xe8>)
   19514:	f000 fa78 	bl	19a08 <z_spin_lock_valid>
   19518:	b940      	cbnz	r0, 1952c <z_tick_sleep+0x64>
   1951a:	4926      	ldr	r1, [pc, #152]	; (195b4 <z_tick_sleep+0xec>)
   1951c:	4823      	ldr	r0, [pc, #140]	; (195ac <z_tick_sleep+0xe4>)
   1951e:	227c      	movs	r2, #124	; 0x7c
   19520:	f001 fa5e 	bl	1a9e0 <printk>
   19524:	217c      	movs	r1, #124	; 0x7c
   19526:	4823      	ldr	r0, [pc, #140]	; (195b4 <z_tick_sleep+0xec>)
   19528:	f001 fd00 	bl	1af2c <assert_post_action>
	pending_current = _current;
   1952c:	4e22      	ldr	r6, [pc, #136]	; (195b8 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   1952e:	4820      	ldr	r0, [pc, #128]	; (195b0 <z_tick_sleep+0xe8>)
   19530:	f000 fa86 	bl	19a40 <z_spin_lock_set_owner>
   19534:	68b0      	ldr	r0, [r6, #8]
   19536:	4b21      	ldr	r3, [pc, #132]	; (195bc <z_tick_sleep+0xf4>)
   19538:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1953a:	f7ff fd7d 	bl	19038 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1953e:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   19540:	462a      	mov	r2, r5
   19542:	463b      	mov	r3, r7
   19544:	3018      	adds	r0, #24
   19546:	491e      	ldr	r1, [pc, #120]	; (195c0 <z_tick_sleep+0xf8>)
   19548:	f000 fbf2 	bl	19d30 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1954c:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1954e:	4818      	ldr	r0, [pc, #96]	; (195b0 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19550:	7b53      	ldrb	r3, [r2, #13]
   19552:	f043 0310 	orr.w	r3, r3, #16
   19556:	7353      	strb	r3, [r2, #13]
   19558:	f000 fa64 	bl	19a24 <z_spin_unlock_valid>
   1955c:	b940      	cbnz	r0, 19570 <z_tick_sleep+0xa8>
   1955e:	4915      	ldr	r1, [pc, #84]	; (195b4 <z_tick_sleep+0xec>)
   19560:	4812      	ldr	r0, [pc, #72]	; (195ac <z_tick_sleep+0xe4>)
   19562:	22be      	movs	r2, #190	; 0xbe
   19564:	f001 fa3c 	bl	1a9e0 <printk>
   19568:	21be      	movs	r1, #190	; 0xbe
   1956a:	4812      	ldr	r0, [pc, #72]	; (195b4 <z_tick_sleep+0xec>)
   1956c:	f001 fcde 	bl	1af2c <assert_post_action>
   19570:	4640      	mov	r0, r8
   19572:	f7f4 fa91 	bl	da98 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   19576:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   19578:	7b5b      	ldrb	r3, [r3, #13]
   1957a:	06db      	lsls	r3, r3, #27
   1957c:	d50a      	bpl.n	19594 <z_tick_sleep+0xcc>
   1957e:	490a      	ldr	r1, [pc, #40]	; (195a8 <z_tick_sleep+0xe0>)
   19580:	480a      	ldr	r0, [pc, #40]	; (195ac <z_tick_sleep+0xe4>)
   19582:	f240 520b 	movw	r2, #1291	; 0x50b
   19586:	f001 fa2b 	bl	1a9e0 <printk>
   1958a:	f240 510b 	movw	r1, #1291	; 0x50b
   1958e:	4806      	ldr	r0, [pc, #24]	; (195a8 <z_tick_sleep+0xe0>)
   19590:	f001 fccc 	bl	1af2c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   19594:	f004 fdaa 	bl	1e0ec <z_tick_get_32>
   19598:	1a20      	subs	r0, r4, r0
   1959a:	eb63 0303 	sbc.w	r3, r3, r3
   1959e:	2b00      	cmp	r3, #0
   195a0:	bfb8      	it	lt
   195a2:	2000      	movlt	r0, #0
   195a4:	e7a8      	b.n	194f8 <z_tick_sleep+0x30>
   195a6:	bf00      	nop
   195a8:	00022870 	.word	0x00022870
   195ac:	0001faab 	.word	0x0001faab
   195b0:	2000a2b4 	.word	0x2000a2b4
   195b4:	0001fae5 	.word	0x0001fae5
   195b8:	2000a27c 	.word	0x2000a27c
   195bc:	2000a2b0 	.word	0x2000a2b0
   195c0:	00018b9d 	.word	0x00018b9d

000195c4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   195c4:	b538      	push	{r3, r4, r5, lr}
   195c6:	4605      	mov	r5, r0
   195c8:	460c      	mov	r4, r1
   195ca:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   195ce:	b153      	cbz	r3, 195e6 <z_impl_k_sleep+0x22>
   195d0:	4911      	ldr	r1, [pc, #68]	; (19618 <z_impl_k_sleep+0x54>)
   195d2:	4812      	ldr	r0, [pc, #72]	; (1961c <z_impl_k_sleep+0x58>)
   195d4:	f240 521a 	movw	r2, #1306	; 0x51a
   195d8:	f001 fa02 	bl	1a9e0 <printk>
   195dc:	f240 511a 	movw	r1, #1306	; 0x51a
   195e0:	480d      	ldr	r0, [pc, #52]	; (19618 <z_impl_k_sleep+0x54>)
   195e2:	f001 fca3 	bl	1af2c <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   195e6:	f1b4 3fff 	cmp.w	r4, #4294967295
   195ea:	bf08      	it	eq
   195ec:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   195f0:	d106      	bne.n	19600 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   195f2:	4b0b      	ldr	r3, [pc, #44]	; (19620 <z_impl_k_sleep+0x5c>)
   195f4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   195f6:	f7ff fbc5 	bl	18d84 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   195fa:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   195fe:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   19600:	4628      	mov	r0, r5
   19602:	4621      	mov	r1, r4
   19604:	f7ff ff60 	bl	194c8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   19608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1960c:	fb80 0303 	smull	r0, r3, r0, r3
   19610:	0bc0      	lsrs	r0, r0, #15
   19612:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   19616:	e7f2      	b.n	195fe <z_impl_k_sleep+0x3a>
   19618:	00022870 	.word	0x00022870
   1961c:	0001faab 	.word	0x0001faab
   19620:	2000a27c 	.word	0x2000a27c

00019624 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   19624:	4b01      	ldr	r3, [pc, #4]	; (1962c <z_impl_k_current_get+0x8>)
   19626:	6898      	ldr	r0, [r3, #8]
   19628:	4770      	bx	lr
   1962a:	bf00      	nop
   1962c:	2000a27c 	.word	0x2000a27c

00019630 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19630:	b538      	push	{r3, r4, r5, lr}
   19632:	4604      	mov	r4, r0
   19634:	f04f 0320 	mov.w	r3, #32
   19638:	f3ef 8511 	mrs	r5, BASEPRI
   1963c:	f383 8811 	msr	BASEPRI, r3
   19640:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19644:	4815      	ldr	r0, [pc, #84]	; (1969c <z_impl_k_sem_give+0x6c>)
   19646:	f000 f9df 	bl	19a08 <z_spin_lock_valid>
   1964a:	b940      	cbnz	r0, 1965e <z_impl_k_sem_give+0x2e>
   1964c:	4914      	ldr	r1, [pc, #80]	; (196a0 <z_impl_k_sem_give+0x70>)
   1964e:	4815      	ldr	r0, [pc, #84]	; (196a4 <z_impl_k_sem_give+0x74>)
   19650:	227c      	movs	r2, #124	; 0x7c
   19652:	f001 f9c5 	bl	1a9e0 <printk>
   19656:	217c      	movs	r1, #124	; 0x7c
   19658:	4811      	ldr	r0, [pc, #68]	; (196a0 <z_impl_k_sem_give+0x70>)
   1965a:	f001 fc67 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1965e:	480f      	ldr	r0, [pc, #60]	; (1969c <z_impl_k_sem_give+0x6c>)
   19660:	f000 f9ee 	bl	19a40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   19664:	4620      	mov	r0, r4
   19666:	f7ff fe2d 	bl	192c4 <z_unpend_first_thread>

	if (thread != NULL) {
   1966a:	b150      	cbz	r0, 19682 <z_impl_k_sem_give+0x52>
   1966c:	2200      	movs	r2, #0
   1966e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   19672:	f7ff fa1b 	bl	18aac <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19676:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   19678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1967c:	4807      	ldr	r0, [pc, #28]	; (1969c <z_impl_k_sem_give+0x6c>)
   1967e:	f7ff b841 	b.w	18704 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19682:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   19686:	429a      	cmp	r2, r3
   19688:	bf18      	it	ne
   1968a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1968c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1968e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19690:	f104 0010 	add.w	r0, r4, #16
   19694:	f004 fda1 	bl	1e1da <z_handle_obj_poll_events>
}
   19698:	e7ed      	b.n	19676 <z_impl_k_sem_give+0x46>
   1969a:	bf00      	nop
   1969c:	2000a2c0 	.word	0x2000a2c0
   196a0:	0001fae5 	.word	0x0001fae5
   196a4:	0001faab 	.word	0x0001faab

000196a8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   196a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   196aa:	4604      	mov	r4, r0
   196ac:	4616      	mov	r6, r2
   196ae:	461d      	mov	r5, r3
   196b0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   196b4:	b15b      	cbz	r3, 196ce <z_impl_k_sem_take+0x26>
   196b6:	ea52 0305 	orrs.w	r3, r2, r5
   196ba:	d008      	beq.n	196ce <z_impl_k_sem_take+0x26>
   196bc:	492b      	ldr	r1, [pc, #172]	; (1976c <z_impl_k_sem_take+0xc4>)
   196be:	482c      	ldr	r0, [pc, #176]	; (19770 <z_impl_k_sem_take+0xc8>)
   196c0:	228c      	movs	r2, #140	; 0x8c
   196c2:	f001 f98d 	bl	1a9e0 <printk>
   196c6:	218c      	movs	r1, #140	; 0x8c
   196c8:	4828      	ldr	r0, [pc, #160]	; (1976c <z_impl_k_sem_take+0xc4>)
   196ca:	f001 fc2f 	bl	1af2c <assert_post_action>
   196ce:	f04f 0320 	mov.w	r3, #32
   196d2:	f3ef 8711 	mrs	r7, BASEPRI
   196d6:	f383 8811 	msr	BASEPRI, r3
   196da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   196de:	4825      	ldr	r0, [pc, #148]	; (19774 <z_impl_k_sem_take+0xcc>)
   196e0:	f000 f992 	bl	19a08 <z_spin_lock_valid>
   196e4:	b940      	cbnz	r0, 196f8 <z_impl_k_sem_take+0x50>
   196e6:	4924      	ldr	r1, [pc, #144]	; (19778 <z_impl_k_sem_take+0xd0>)
   196e8:	4821      	ldr	r0, [pc, #132]	; (19770 <z_impl_k_sem_take+0xc8>)
   196ea:	227c      	movs	r2, #124	; 0x7c
   196ec:	f001 f978 	bl	1a9e0 <printk>
   196f0:	217c      	movs	r1, #124	; 0x7c
   196f2:	4821      	ldr	r0, [pc, #132]	; (19778 <z_impl_k_sem_take+0xd0>)
   196f4:	f001 fc1a 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   196f8:	481e      	ldr	r0, [pc, #120]	; (19774 <z_impl_k_sem_take+0xcc>)
   196fa:	f000 f9a1 	bl	19a40 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   196fe:	68a3      	ldr	r3, [r4, #8]
   19700:	b1ab      	cbz	r3, 1972e <z_impl_k_sem_take+0x86>
		sem->count--;
   19702:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19704:	481b      	ldr	r0, [pc, #108]	; (19774 <z_impl_k_sem_take+0xcc>)
   19706:	60a3      	str	r3, [r4, #8]
   19708:	f000 f98c 	bl	19a24 <z_spin_unlock_valid>
   1970c:	b940      	cbnz	r0, 19720 <z_impl_k_sem_take+0x78>
   1970e:	491a      	ldr	r1, [pc, #104]	; (19778 <z_impl_k_sem_take+0xd0>)
   19710:	4817      	ldr	r0, [pc, #92]	; (19770 <z_impl_k_sem_take+0xc8>)
   19712:	22a7      	movs	r2, #167	; 0xa7
   19714:	f001 f964 	bl	1a9e0 <printk>
   19718:	21a7      	movs	r1, #167	; 0xa7
   1971a:	4817      	ldr	r0, [pc, #92]	; (19778 <z_impl_k_sem_take+0xd0>)
   1971c:	f001 fc06 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19720:	f387 8811 	msr	BASEPRI, r7
   19724:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   19728:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1972a:	b003      	add	sp, #12
   1972c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1972e:	ea56 0305 	orrs.w	r3, r6, r5
   19732:	d113      	bne.n	1975c <z_impl_k_sem_take+0xb4>
   19734:	480f      	ldr	r0, [pc, #60]	; (19774 <z_impl_k_sem_take+0xcc>)
   19736:	f000 f975 	bl	19a24 <z_spin_unlock_valid>
   1973a:	b940      	cbnz	r0, 1974e <z_impl_k_sem_take+0xa6>
   1973c:	490e      	ldr	r1, [pc, #56]	; (19778 <z_impl_k_sem_take+0xd0>)
   1973e:	480c      	ldr	r0, [pc, #48]	; (19770 <z_impl_k_sem_take+0xc8>)
   19740:	22a7      	movs	r2, #167	; 0xa7
   19742:	f001 f94d 	bl	1a9e0 <printk>
   19746:	21a7      	movs	r1, #167	; 0xa7
   19748:	480b      	ldr	r0, [pc, #44]	; (19778 <z_impl_k_sem_take+0xd0>)
   1974a:	f001 fbef 	bl	1af2c <assert_post_action>
   1974e:	f387 8811 	msr	BASEPRI, r7
   19752:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   19756:	f06f 000f 	mvn.w	r0, #15
   1975a:	e7e6      	b.n	1972a <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1975c:	4622      	mov	r2, r4
   1975e:	4639      	mov	r1, r7
   19760:	e9cd 6500 	strd	r6, r5, [sp]
   19764:	4803      	ldr	r0, [pc, #12]	; (19774 <z_impl_k_sem_take+0xcc>)
   19766:	f7ff fd0b 	bl	19180 <z_pend_curr>
	return ret;
   1976a:	e7de      	b.n	1972a <z_impl_k_sem_take+0x82>
   1976c:	00022892 	.word	0x00022892
   19770:	0001faab 	.word	0x0001faab
   19774:	2000a2c0 	.word	0x2000a2c0
   19778:	0001fae5 	.word	0x0001fae5

0001977c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1977c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1977e:	4c08      	ldr	r4, [pc, #32]	; (197a0 <k_sys_work_q_init+0x24>)
   19780:	f04f 33ff 	mov.w	r3, #4294967295
   19784:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19788:	4620      	mov	r0, r4
   1978a:	4906      	ldr	r1, [pc, #24]	; (197a4 <k_sys_work_q_init+0x28>)
   1978c:	f000 f98c 	bl	19aa8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   19790:	4905      	ldr	r1, [pc, #20]	; (197a8 <k_sys_work_q_init+0x2c>)
   19792:	f104 0020 	add.w	r0, r4, #32
   19796:	f004 fc4b 	bl	1e030 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1979a:	2000      	movs	r0, #0
   1979c:	bd10      	pop	{r4, pc}
   1979e:	bf00      	nop
   197a0:	200098e0 	.word	0x200098e0
   197a4:	20012e78 	.word	0x20012e78
   197a8:	000228b2 	.word	0x000228b2

000197ac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   197ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   197b0:	4604      	mov	r4, r0
   197b2:	460f      	mov	r7, r1
   197b4:	4698      	mov	r8, r3
   197b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   197b8:	4b2c      	ldr	r3, [pc, #176]	; (1986c <z_setup_new_thread+0xc0>)
   197ba:	4616      	mov	r6, r2
   197bc:	f100 0238 	add.w	r2, r0, #56	; 0x38
   197c0:	e8d2 1fef 	ldaex	r1, [r2]
   197c4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   197c8:	2800      	cmp	r0, #0
   197ca:	d1f9      	bne.n	197c0 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   197cc:	4299      	cmp	r1, r3
   197ce:	d10a      	bne.n	197e6 <z_setup_new_thread+0x3a>
   197d0:	4927      	ldr	r1, [pc, #156]	; (19870 <z_setup_new_thread+0xc4>)
   197d2:	4828      	ldr	r0, [pc, #160]	; (19874 <z_setup_new_thread+0xc8>)
   197d4:	f240 2223 	movw	r2, #547	; 0x223
   197d8:	f001 f902 	bl	1a9e0 <printk>
   197dc:	f240 2123 	movw	r1, #547	; 0x223
   197e0:	4823      	ldr	r0, [pc, #140]	; (19870 <z_setup_new_thread+0xc4>)
   197e2:	f001 fba3 	bl	1af2c <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   197e6:	2d0f      	cmp	r5, #15
   197e8:	d12f      	bne.n	1984a <z_setup_new_thread+0x9e>
   197ea:	4b23      	ldr	r3, [pc, #140]	; (19878 <z_setup_new_thread+0xcc>)
   197ec:	4598      	cmp	r8, r3
   197ee:	d130      	bne.n	19852 <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   197f0:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   197f4:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   197f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   197fa:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   197fc:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   197fe:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   19800:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   19802:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19806:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19808:	9302      	str	r3, [sp, #8]
   1980a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1980c:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19810:	9301      	str	r3, [sp, #4]
   19812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   19814:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   19816:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1981a:	9300      	str	r3, [sp, #0]
   1981c:	4632      	mov	r2, r6
   1981e:	4643      	mov	r3, r8
   19820:	4639      	mov	r1, r7
   19822:	4620      	mov	r0, r4
	node->prev = NULL;
   19824:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   19828:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1982a:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1982c:	f7f4 f9d2 	bl	dbd4 <arch_new_thread>
	if (!_current) {
   19830:	4b12      	ldr	r3, [pc, #72]	; (1987c <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   19832:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   19836:	689b      	ldr	r3, [r3, #8]
   19838:	b10b      	cbz	r3, 1983e <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   1983a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1983e:	4630      	mov	r0, r6
   19840:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   19844:	b004      	add	sp, #16
   19846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1984a:	f105 0310 	add.w	r3, r5, #16
   1984e:	2b1e      	cmp	r3, #30
   19850:	d9ce      	bls.n	197f0 <z_setup_new_thread+0x44>
   19852:	f240 2226 	movw	r2, #550	; 0x226
   19856:	4906      	ldr	r1, [pc, #24]	; (19870 <z_setup_new_thread+0xc4>)
   19858:	4806      	ldr	r0, [pc, #24]	; (19874 <z_setup_new_thread+0xc8>)
   1985a:	f001 f8c1 	bl	1a9e0 <printk>
   1985e:	f240 2126 	movw	r1, #550	; 0x226
   19862:	4803      	ldr	r0, [pc, #12]	; (19870 <z_setup_new_thread+0xc4>)
   19864:	f001 fb62 	bl	1af2c <assert_post_action>
   19868:	e7c2      	b.n	197f0 <z_setup_new_thread+0x44>
   1986a:	bf00      	nop
   1986c:	1337c0d3 	.word	0x1337c0d3
   19870:	000228bb 	.word	0x000228bb
   19874:	0001faab 	.word	0x0001faab
   19878:	00017b95 	.word	0x00017b95
   1987c:	2000a27c 	.word	0x2000a27c

00019880 <z_impl_k_thread_create>:
{
   19880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19884:	b087      	sub	sp, #28
   19886:	4604      	mov	r4, r0
   19888:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   1988c:	460f      	mov	r7, r1
   1988e:	4690      	mov	r8, r2
   19890:	4699      	mov	r9, r3
   19892:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   19896:	b153      	cbz	r3, 198ae <z_impl_k_thread_create+0x2e>
   19898:	491a      	ldr	r1, [pc, #104]	; (19904 <z_impl_k_thread_create+0x84>)
   1989a:	481b      	ldr	r0, [pc, #108]	; (19908 <z_impl_k_thread_create+0x88>)
   1989c:	f240 228f 	movw	r2, #655	; 0x28f
   198a0:	f001 f89e 	bl	1a9e0 <printk>
   198a4:	f240 218f 	movw	r1, #655	; 0x28f
   198a8:	4816      	ldr	r0, [pc, #88]	; (19904 <z_impl_k_thread_create+0x84>)
   198aa:	f001 fb3f 	bl	1af2c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   198ae:	2300      	movs	r3, #0
   198b0:	9305      	str	r3, [sp, #20]
   198b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   198b4:	4642      	mov	r2, r8
   198b6:	9304      	str	r3, [sp, #16]
   198b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   198ba:	4639      	mov	r1, r7
   198bc:	9303      	str	r3, [sp, #12]
   198be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   198c0:	4620      	mov	r0, r4
   198c2:	9302      	str	r3, [sp, #8]
   198c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   198c6:	9301      	str	r3, [sp, #4]
   198c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   198ca:	9300      	str	r3, [sp, #0]
   198cc:	464b      	mov	r3, r9
   198ce:	f7ff ff6d 	bl	197ac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   198d2:	f1b5 3fff 	cmp.w	r5, #4294967295
   198d6:	bf08      	it	eq
   198d8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   198dc:	d005      	beq.n	198ea <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   198de:	ea55 0306 	orrs.w	r3, r5, r6
   198e2:	d106      	bne.n	198f2 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   198e4:	4620      	mov	r0, r4
   198e6:	f7ff f917 	bl	18b18 <z_sched_start>
}
   198ea:	4620      	mov	r0, r4
   198ec:	b007      	add	sp, #28
   198ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   198f2:	4632      	mov	r2, r6
   198f4:	462b      	mov	r3, r5
   198f6:	4905      	ldr	r1, [pc, #20]	; (1990c <z_impl_k_thread_create+0x8c>)
   198f8:	f104 0018 	add.w	r0, r4, #24
   198fc:	f000 fa18 	bl	19d30 <z_add_timeout>
   19900:	e7f3      	b.n	198ea <z_impl_k_thread_create+0x6a>
   19902:	bf00      	nop
   19904:	000228bb 	.word	0x000228bb
   19908:	0001faab 	.word	0x0001faab
   1990c:	00018b9d 	.word	0x00018b9d

00019910 <z_init_static_threads>:
{
   19910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19914:	4c37      	ldr	r4, [pc, #220]	; (199f4 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   19916:	4d38      	ldr	r5, [pc, #224]	; (199f8 <z_init_static_threads+0xe8>)
   19918:	4f38      	ldr	r7, [pc, #224]	; (199fc <z_init_static_threads+0xec>)
{
   1991a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1991c:	42ac      	cmp	r4, r5
   1991e:	4626      	mov	r6, r4
   19920:	d90a      	bls.n	19938 <z_init_static_threads+0x28>
   19922:	4639      	mov	r1, r7
   19924:	4836      	ldr	r0, [pc, #216]	; (19a00 <z_init_static_threads+0xf0>)
   19926:	f240 22fd 	movw	r2, #765	; 0x2fd
   1992a:	f001 f859 	bl	1a9e0 <printk>
   1992e:	f240 21fd 	movw	r1, #765	; 0x2fd
   19932:	4638      	mov	r0, r7
   19934:	f001 fafa 	bl	1af2c <assert_post_action>
   19938:	42ae      	cmp	r6, r5
   1993a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1993e:	d31b      	bcc.n	19978 <z_init_static_threads+0x68>
	k_sched_lock();
   19940:	f7fe ff16 	bl	18770 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   19944:	4c2b      	ldr	r4, [pc, #172]	; (199f4 <z_init_static_threads+0xe4>)
   19946:	4e2d      	ldr	r6, [pc, #180]	; (199fc <z_init_static_threads+0xec>)
   19948:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19a00 <z_init_static_threads+0xf0>
   1994c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19a04 <z_init_static_threads+0xf4>
   19950:	42ac      	cmp	r4, r5
   19952:	d90a      	bls.n	1996a <z_init_static_threads+0x5a>
   19954:	4631      	mov	r1, r6
   19956:	4640      	mov	r0, r8
   19958:	f44f 7247 	mov.w	r2, #796	; 0x31c
   1995c:	f001 f840 	bl	1a9e0 <printk>
   19960:	f44f 7147 	mov.w	r1, #796	; 0x31c
   19964:	4630      	mov	r0, r6
   19966:	f001 fae1 	bl	1af2c <assert_post_action>
   1996a:	42ac      	cmp	r4, r5
   1996c:	d320      	bcc.n	199b0 <z_init_static_threads+0xa0>
}
   1996e:	b007      	add	sp, #28
   19970:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   19974:	f7fe bff4 	b.w	18960 <k_sched_unlock>
		z_setup_new_thread(
   19978:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1997c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   19980:	9305      	str	r3, [sp, #20]
   19982:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19986:	9304      	str	r3, [sp, #16]
   19988:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1998c:	9303      	str	r3, [sp, #12]
   1998e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19992:	9302      	str	r3, [sp, #8]
   19994:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   19998:	9301      	str	r3, [sp, #4]
   1999a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1999e:	9300      	str	r3, [sp, #0]
   199a0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   199a4:	f7ff ff02 	bl	197ac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   199a8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   199ac:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   199ae:	e7b5      	b.n	1991c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   199b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   199b2:	1c5a      	adds	r2, r3, #1
   199b4:	d00f      	beq.n	199d6 <z_init_static_threads+0xc6>
   199b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   199ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   199be:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   199c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   199c4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   199c8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   199cc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   199ce:	d104      	bne.n	199da <z_init_static_threads+0xca>
	z_sched_start(thread);
   199d0:	4638      	mov	r0, r7
   199d2:	f7ff f8a1 	bl	18b18 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   199d6:	3430      	adds	r4, #48	; 0x30
   199d8:	e7ba      	b.n	19950 <z_init_static_threads+0x40>
   199da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   199de:	2300      	movs	r3, #0
   199e0:	f7ef f8a4 	bl	8b2c <__aeabi_uldivmod>
   199e4:	4602      	mov	r2, r0
   199e6:	460b      	mov	r3, r1
   199e8:	f107 0018 	add.w	r0, r7, #24
   199ec:	4649      	mov	r1, r9
   199ee:	f000 f99f 	bl	19d30 <z_add_timeout>
   199f2:	e7f0      	b.n	199d6 <z_init_static_threads+0xc6>
   199f4:	200084bc 	.word	0x200084bc
   199f8:	200084bc 	.word	0x200084bc
   199fc:	000228bb 	.word	0x000228bb
   19a00:	0001faab 	.word	0x0001faab
   19a04:	00018b9d 	.word	0x00018b9d

00019a08 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   19a08:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   19a0a:	b138      	cbz	r0, 19a1c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   19a0c:	4b04      	ldr	r3, [pc, #16]	; (19a20 <z_spin_lock_valid+0x18>)
   19a0e:	f000 0003 	and.w	r0, r0, #3
   19a12:	7e1b      	ldrb	r3, [r3, #24]
   19a14:	1ac0      	subs	r0, r0, r3
   19a16:	bf18      	it	ne
   19a18:	2001      	movne	r0, #1
   19a1a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   19a1c:	2001      	movs	r0, #1
}
   19a1e:	4770      	bx	lr
   19a20:	2000a27c 	.word	0x2000a27c

00019a24 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19a24:	4905      	ldr	r1, [pc, #20]	; (19a3c <z_spin_unlock_valid+0x18>)
{
   19a26:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19a28:	688a      	ldr	r2, [r1, #8]
   19a2a:	7e08      	ldrb	r0, [r1, #24]
   19a2c:	6819      	ldr	r1, [r3, #0]
   19a2e:	4302      	orrs	r2, r0
   19a30:	2000      	movs	r0, #0
   19a32:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   19a34:	bf04      	itt	eq
   19a36:	6018      	streq	r0, [r3, #0]
	return true;
   19a38:	2001      	moveq	r0, #1
}
   19a3a:	4770      	bx	lr
   19a3c:	2000a27c 	.word	0x2000a27c

00019a40 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   19a40:	4a02      	ldr	r2, [pc, #8]	; (19a4c <z_spin_lock_set_owner+0xc>)
   19a42:	7e11      	ldrb	r1, [r2, #24]
   19a44:	6893      	ldr	r3, [r2, #8]
   19a46:	430b      	orrs	r3, r1
   19a48:	6003      	str	r3, [r0, #0]
}
   19a4a:	4770      	bx	lr
   19a4c:	2000a27c 	.word	0x2000a27c

00019a50 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   19a50:	b508      	push	{r3, lr}
	__asm__ volatile(
   19a52:	f04f 0320 	mov.w	r3, #32
   19a56:	f3ef 8511 	mrs	r5, BASEPRI
   19a5a:	f383 8811 	msr	BASEPRI, r3
   19a5e:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   19a62:	4c0e      	ldr	r4, [pc, #56]	; (19a9c <z_self_abort+0x4c>)
   19a64:	6923      	ldr	r3, [r4, #16]
   19a66:	b143      	cbz	r3, 19a7a <z_self_abort+0x2a>
   19a68:	490d      	ldr	r1, [pc, #52]	; (19aa0 <z_self_abort+0x50>)
   19a6a:	480e      	ldr	r0, [pc, #56]	; (19aa4 <z_self_abort+0x54>)
   19a6c:	2228      	movs	r2, #40	; 0x28
   19a6e:	f000 ffb7 	bl	1a9e0 <printk>
   19a72:	2128      	movs	r1, #40	; 0x28
   19a74:	480a      	ldr	r0, [pc, #40]	; (19aa0 <z_self_abort+0x50>)
   19a76:	f001 fa59 	bl	1af2c <assert_post_action>
	cpu->pending_abort = _current;
   19a7a:	68a0      	ldr	r0, [r4, #8]
   19a7c:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   19a7e:	f7ff f981 	bl	18d84 <z_impl_k_thread_suspend>
   19a82:	4628      	mov	r0, r5
   19a84:	f7f4 f808 	bl	da98 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   19a88:	4905      	ldr	r1, [pc, #20]	; (19aa0 <z_self_abort+0x50>)
   19a8a:	4806      	ldr	r0, [pc, #24]	; (19aa4 <z_self_abort+0x54>)
   19a8c:	2230      	movs	r2, #48	; 0x30
   19a8e:	f000 ffa7 	bl	1a9e0 <printk>
   19a92:	2130      	movs	r1, #48	; 0x30
   19a94:	4802      	ldr	r0, [pc, #8]	; (19aa0 <z_self_abort+0x50>)
   19a96:	f001 fa49 	bl	1af2c <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19a9a:	bf00      	nop
   19a9c:	2000a27c 	.word	0x2000a27c
   19aa0:	000228de 	.word	0x000228de
   19aa4:	0001faab 	.word	0x0001faab

00019aa8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   19aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19aac:	4604      	mov	r4, r0
   19aae:	b088      	sub	sp, #32
   19ab0:	460d      	mov	r5, r1
   19ab2:	4616      	mov	r6, r2
   19ab4:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   19ab6:	f004 fa3c 	bl	1df32 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   19aba:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19abe:	2200      	movs	r2, #0
   19ac0:	2300      	movs	r3, #0
   19ac2:	e9cd 7203 	strd	r7, r2, [sp, #12]
   19ac6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19aca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   19ace:	4629      	mov	r1, r5
   19ad0:	4632      	mov	r2, r6
   19ad2:	4640      	mov	r0, r8
   19ad4:	4b05      	ldr	r3, [pc, #20]	; (19aec <k_work_q_start+0x44>)
   19ad6:	9400      	str	r4, [sp, #0]
   19ad8:	f7ff fed2 	bl	19880 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19adc:	4640      	mov	r0, r8
   19ade:	4904      	ldr	r1, [pc, #16]	; (19af0 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   19ae0:	b008      	add	sp, #32
   19ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19ae6:	f004 baa3 	b.w	1e030 <z_impl_k_thread_name_set>
   19aea:	bf00      	nop
   19aec:	0000aea9 	.word	0x0000aea9
   19af0:	00022907 	.word	0x00022907

00019af4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   19af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19af8:	4606      	mov	r6, r0
   19afa:	460d      	mov	r5, r1
   19afc:	4690      	mov	r8, r2
   19afe:	461f      	mov	r7, r3
   19b00:	f04f 0320 	mov.w	r3, #32
   19b04:	f3ef 8911 	mrs	r9, BASEPRI
   19b08:	f383 8811 	msr	BASEPRI, r3
   19b0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b10:	482c      	ldr	r0, [pc, #176]	; (19bc4 <k_delayed_work_submit_to_queue+0xd0>)
   19b12:	f7ff ff79 	bl	19a08 <z_spin_lock_valid>
   19b16:	b940      	cbnz	r0, 19b2a <k_delayed_work_submit_to_queue+0x36>
   19b18:	492b      	ldr	r1, [pc, #172]	; (19bc8 <k_delayed_work_submit_to_queue+0xd4>)
   19b1a:	482c      	ldr	r0, [pc, #176]	; (19bcc <k_delayed_work_submit_to_queue+0xd8>)
   19b1c:	227c      	movs	r2, #124	; 0x7c
   19b1e:	f000 ff5f 	bl	1a9e0 <printk>
   19b22:	217c      	movs	r1, #124	; 0x7c
   19b24:	4828      	ldr	r0, [pc, #160]	; (19bc8 <k_delayed_work_submit_to_queue+0xd4>)
   19b26:	f001 fa01 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   19b2a:	4826      	ldr	r0, [pc, #152]	; (19bc4 <k_delayed_work_submit_to_queue+0xd0>)
   19b2c:	f7ff ff88 	bl	19a40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   19b30:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19b32:	b1e3      	cbz	r3, 19b6e <k_delayed_work_submit_to_queue+0x7a>
   19b34:	42b3      	cmp	r3, r6
   19b36:	d142      	bne.n	19bbe <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   19b38:	4628      	mov	r0, r5
   19b3a:	f004 fa97 	bl	1e06c <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   19b3e:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   19b42:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   19b44:	d015      	beq.n	19b72 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   19b46:	2800      	cmp	r0, #0
   19b48:	da14      	bge.n	19b74 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b4a:	481e      	ldr	r0, [pc, #120]	; (19bc4 <k_delayed_work_submit_to_queue+0xd0>)
   19b4c:	f7ff ff6a 	bl	19a24 <z_spin_unlock_valid>
   19b50:	b940      	cbnz	r0, 19b64 <k_delayed_work_submit_to_queue+0x70>
   19b52:	491d      	ldr	r1, [pc, #116]	; (19bc8 <k_delayed_work_submit_to_queue+0xd4>)
   19b54:	481d      	ldr	r0, [pc, #116]	; (19bcc <k_delayed_work_submit_to_queue+0xd8>)
   19b56:	22a7      	movs	r2, #167	; 0xa7
   19b58:	f000 ff42 	bl	1a9e0 <printk>
   19b5c:	21a7      	movs	r1, #167	; 0xa7
   19b5e:	481a      	ldr	r0, [pc, #104]	; (19bc8 <k_delayed_work_submit_to_queue+0xd4>)
   19b60:	f001 f9e4 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19b64:	f389 8811 	msr	BASEPRI, r9
   19b68:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   19b6c:	e01c      	b.n	19ba8 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   19b6e:	2e00      	cmp	r6, #0
   19b70:	d0e2      	beq.n	19b38 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   19b72:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19b74:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   19b78:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19b7a:	d118      	bne.n	19bae <k_delayed_work_submit_to_queue+0xba>
   19b7c:	4811      	ldr	r0, [pc, #68]	; (19bc4 <k_delayed_work_submit_to_queue+0xd0>)
   19b7e:	f7ff ff51 	bl	19a24 <z_spin_unlock_valid>
   19b82:	b940      	cbnz	r0, 19b96 <k_delayed_work_submit_to_queue+0xa2>
   19b84:	4910      	ldr	r1, [pc, #64]	; (19bc8 <k_delayed_work_submit_to_queue+0xd4>)
   19b86:	4811      	ldr	r0, [pc, #68]	; (19bcc <k_delayed_work_submit_to_queue+0xd8>)
   19b88:	22a7      	movs	r2, #167	; 0xa7
   19b8a:	f000 ff29 	bl	1a9e0 <printk>
   19b8e:	21a7      	movs	r1, #167	; 0xa7
   19b90:	480d      	ldr	r0, [pc, #52]	; (19bc8 <k_delayed_work_submit_to_queue+0xd4>)
   19b92:	f001 f9cb 	bl	1af2c <assert_post_action>
   19b96:	f389 8811 	msr	BASEPRI, r9
   19b9a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   19b9e:	4629      	mov	r1, r5
   19ba0:	4630      	mov	r0, r6
   19ba2:	f004 fa4a 	bl	1e03a <k_work_submit_to_queue>
		return 0;
   19ba6:	2400      	movs	r4, #0
}
   19ba8:	4620      	mov	r0, r4
   19baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   19bae:	4642      	mov	r2, r8
   19bb0:	463b      	mov	r3, r7
   19bb2:	4907      	ldr	r1, [pc, #28]	; (19bd0 <k_delayed_work_submit_to_queue+0xdc>)
   19bb4:	f105 0010 	add.w	r0, r5, #16
   19bb8:	f000 f8ba 	bl	19d30 <z_add_timeout>
   19bbc:	e7c5      	b.n	19b4a <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   19bbe:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   19bc2:	e7c2      	b.n	19b4a <k_delayed_work_submit_to_queue+0x56>
   19bc4:	2000a2c4 	.word	0x2000a2c4
   19bc8:	0001fae5 	.word	0x0001fae5
   19bcc:	0001faab 	.word	0x0001faab
   19bd0:	0001e063 	.word	0x0001e063

00019bd4 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   19bd4:	b538      	push	{r3, r4, r5, lr}
   19bd6:	4604      	mov	r4, r0
	__asm__ volatile(
   19bd8:	f04f 0320 	mov.w	r3, #32
   19bdc:	f3ef 8511 	mrs	r5, BASEPRI
   19be0:	f383 8811 	msr	BASEPRI, r3
   19be4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19be8:	4815      	ldr	r0, [pc, #84]	; (19c40 <k_delayed_work_cancel+0x6c>)
   19bea:	f7ff ff0d 	bl	19a08 <z_spin_lock_valid>
   19bee:	b940      	cbnz	r0, 19c02 <k_delayed_work_cancel+0x2e>
   19bf0:	4914      	ldr	r1, [pc, #80]	; (19c44 <k_delayed_work_cancel+0x70>)
   19bf2:	4815      	ldr	r0, [pc, #84]	; (19c48 <k_delayed_work_cancel+0x74>)
   19bf4:	227c      	movs	r2, #124	; 0x7c
   19bf6:	f000 fef3 	bl	1a9e0 <printk>
   19bfa:	217c      	movs	r1, #124	; 0x7c
   19bfc:	4811      	ldr	r0, [pc, #68]	; (19c44 <k_delayed_work_cancel+0x70>)
   19bfe:	f001 f995 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   19c02:	480f      	ldr	r0, [pc, #60]	; (19c40 <k_delayed_work_cancel+0x6c>)
   19c04:	f7ff ff1c 	bl	19a40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   19c08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19c0a:	b1b3      	cbz	r3, 19c3a <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   19c0c:	4620      	mov	r0, r4
   19c0e:	f004 fa2d 	bl	1e06c <work_cancel>
   19c12:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c14:	480a      	ldr	r0, [pc, #40]	; (19c40 <k_delayed_work_cancel+0x6c>)
   19c16:	f7ff ff05 	bl	19a24 <z_spin_unlock_valid>
   19c1a:	b940      	cbnz	r0, 19c2e <k_delayed_work_cancel+0x5a>
   19c1c:	4909      	ldr	r1, [pc, #36]	; (19c44 <k_delayed_work_cancel+0x70>)
   19c1e:	480a      	ldr	r0, [pc, #40]	; (19c48 <k_delayed_work_cancel+0x74>)
   19c20:	22a7      	movs	r2, #167	; 0xa7
   19c22:	f000 fedd 	bl	1a9e0 <printk>
   19c26:	21a7      	movs	r1, #167	; 0xa7
   19c28:	4806      	ldr	r0, [pc, #24]	; (19c44 <k_delayed_work_cancel+0x70>)
   19c2a:	f001 f97f 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19c2e:	f385 8811 	msr	BASEPRI, r5
   19c32:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   19c36:	4620      	mov	r0, r4
   19c38:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19c3a:	f06f 0415 	mvn.w	r4, #21
   19c3e:	e7e9      	b.n	19c14 <k_delayed_work_cancel+0x40>
   19c40:	2000a2c4 	.word	0x2000a2c4
   19c44:	0001fae5 	.word	0x0001fae5
   19c48:	0001faab 	.word	0x0001faab

00019c4c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19c4c:	4a02      	ldr	r2, [pc, #8]	; (19c58 <boot_banner+0xc>)
   19c4e:	4903      	ldr	r1, [pc, #12]	; (19c5c <boot_banner+0x10>)
   19c50:	4803      	ldr	r0, [pc, #12]	; (19c60 <boot_banner+0x14>)
   19c52:	f000 bec5 	b.w	1a9e0 <printk>
   19c56:	bf00      	nop
   19c58:	0002274a 	.word	0x0002274a
   19c5c:	00022911 	.word	0x00022911
   19c60:	0002291e 	.word	0x0002291e

00019c64 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19c64:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   19c66:	4806      	ldr	r0, [pc, #24]	; (19c80 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   19c68:	4a06      	ldr	r2, [pc, #24]	; (19c84 <z_data_copy+0x20>)
   19c6a:	4907      	ldr	r1, [pc, #28]	; (19c88 <z_data_copy+0x24>)
   19c6c:	1a12      	subs	r2, r2, r0
   19c6e:	f002 f8e1 	bl	1be34 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   19c76:	4a05      	ldr	r2, [pc, #20]	; (19c8c <z_data_copy+0x28>)
   19c78:	4905      	ldr	r1, [pc, #20]	; (19c90 <z_data_copy+0x2c>)
   19c7a:	4806      	ldr	r0, [pc, #24]	; (19c94 <z_data_copy+0x30>)
   19c7c:	f002 b8da 	b.w	1be34 <memcpy>
   19c80:	20008000 	.word	0x20008000
   19c84:	200086b4 	.word	0x200086b4
   19c88:	000229b4 	.word	0x000229b4
   19c8c:	00000000 	.word	0x00000000
   19c90:	000229b4 	.word	0x000229b4
   19c94:	20008000 	.word	0x20008000

00019c98 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   19c98:	4b03      	ldr	r3, [pc, #12]	; (19ca8 <elapsed+0x10>)
   19c9a:	681b      	ldr	r3, [r3, #0]
   19c9c:	b90b      	cbnz	r3, 19ca2 <elapsed+0xa>
   19c9e:	f7f2 bd4d 	b.w	c73c <z_clock_elapsed>
}
   19ca2:	2000      	movs	r0, #0
   19ca4:	4770      	bx	lr
   19ca6:	bf00      	nop
   19ca8:	2000a2c8 	.word	0x2000a2c8

00019cac <next_timeout>:
	return list->head == list;
   19cac:	4b11      	ldr	r3, [pc, #68]	; (19cf4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   19cae:	b510      	push	{r4, lr}
   19cb0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19cb2:	429c      	cmp	r4, r3
   19cb4:	bf08      	it	eq
   19cb6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19cb8:	f7ff ffee 	bl	19c98 <elapsed>
   19cbc:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   19cbe:	b16c      	cbz	r4, 19cdc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19cc0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   19cc4:	1ac0      	subs	r0, r0, r3
   19cc6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   19cca:	2801      	cmp	r0, #1
   19ccc:	f173 0200 	sbcs.w	r2, r3, #0
   19cd0:	db0d      	blt.n	19cee <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19cd2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   19cd6:	f173 0300 	sbcs.w	r3, r3, #0
   19cda:	db01      	blt.n	19ce0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   19cdc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19ce0:	4b05      	ldr	r3, [pc, #20]	; (19cf8 <next_timeout+0x4c>)
   19ce2:	695b      	ldr	r3, [r3, #20]
   19ce4:	b113      	cbz	r3, 19cec <next_timeout+0x40>
   19ce6:	4298      	cmp	r0, r3
   19ce8:	bfa8      	it	ge
   19cea:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19cec:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   19cee:	2000      	movs	r0, #0
   19cf0:	e7f6      	b.n	19ce0 <next_timeout+0x34>
   19cf2:	bf00      	nop
   19cf4:	20008424 	.word	0x20008424
   19cf8:	2000a27c 	.word	0x2000a27c

00019cfc <remove_timeout>:
{
   19cfc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   19cfe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19d00:	b168      	cbz	r0, 19d1e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   19d02:	4a0a      	ldr	r2, [pc, #40]	; (19d2c <remove_timeout+0x30>)
   19d04:	6852      	ldr	r2, [r2, #4]
   19d06:	4290      	cmp	r0, r2
   19d08:	d009      	beq.n	19d1e <remove_timeout+0x22>
	if (next(t) != NULL) {
   19d0a:	b143      	cbz	r3, 19d1e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19d0c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   19d10:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19d14:	1912      	adds	r2, r2, r4
   19d16:	eb41 0105 	adc.w	r1, r1, r5
   19d1a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   19d1e:	6842      	ldr	r2, [r0, #4]
   19d20:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19d22:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19d24:	2300      	movs	r3, #0
	node->prev = NULL;
   19d26:	e9c0 3300 	strd	r3, r3, [r0]
}
   19d2a:	bd30      	pop	{r4, r5, pc}
   19d2c:	20008424 	.word	0x20008424

00019d30 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19d30:	f1b3 3fff 	cmp.w	r3, #4294967295
   19d34:	bf08      	it	eq
   19d36:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19d3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d3e:	4604      	mov	r4, r0
   19d40:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19d42:	f000 808c 	beq.w	19e5e <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19d46:	f06f 0601 	mvn.w	r6, #1
   19d4a:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   19d4e:	1c55      	adds	r5, r2, #1
   19d50:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19d54:	1b73      	subs	r3, r6, r5
   19d56:	eb69 0307 	sbc.w	r3, r9, r7
   19d5a:	2b00      	cmp	r3, #0
   19d5c:	db0d      	blt.n	19d7a <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   19d5e:	f7ff ff9b 	bl	19c98 <elapsed>
   19d62:	4b44      	ldr	r3, [pc, #272]	; (19e74 <z_add_timeout+0x144>)
   19d64:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d68:	1ab6      	subs	r6, r6, r2
   19d6a:	eb69 0303 	sbc.w	r3, r9, r3
   19d6e:	1b75      	subs	r5, r6, r5
   19d70:	eb63 0707 	sbc.w	r7, r3, r7
   19d74:	1a2d      	subs	r5, r5, r0
   19d76:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   19d7a:	6823      	ldr	r3, [r4, #0]
   19d7c:	b143      	cbz	r3, 19d90 <z_add_timeout+0x60>
   19d7e:	493e      	ldr	r1, [pc, #248]	; (19e78 <z_add_timeout+0x148>)
   19d80:	483e      	ldr	r0, [pc, #248]	; (19e7c <z_add_timeout+0x14c>)
   19d82:	2268      	movs	r2, #104	; 0x68
   19d84:	f000 fe2c 	bl	1a9e0 <printk>
   19d88:	2168      	movs	r1, #104	; 0x68
   19d8a:	483b      	ldr	r0, [pc, #236]	; (19e78 <z_add_timeout+0x148>)
   19d8c:	f001 f8ce 	bl	1af2c <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   19d90:	2d01      	cmp	r5, #1
   19d92:	f177 0300 	sbcs.w	r3, r7, #0
   19d96:	bfbc      	itt	lt
   19d98:	2501      	movlt	r5, #1
   19d9a:	2700      	movlt	r7, #0
	to->fn = fn;
   19d9c:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   19da0:	f04f 0320 	mov.w	r3, #32
   19da4:	f3ef 8611 	mrs	r6, BASEPRI
   19da8:	f383 8811 	msr	BASEPRI, r3
   19dac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19db0:	4833      	ldr	r0, [pc, #204]	; (19e80 <z_add_timeout+0x150>)
   19db2:	f7ff fe29 	bl	19a08 <z_spin_lock_valid>
   19db6:	b940      	cbnz	r0, 19dca <z_add_timeout+0x9a>
   19db8:	4932      	ldr	r1, [pc, #200]	; (19e84 <z_add_timeout+0x154>)
   19dba:	4830      	ldr	r0, [pc, #192]	; (19e7c <z_add_timeout+0x14c>)
   19dbc:	227c      	movs	r2, #124	; 0x7c
   19dbe:	f000 fe0f 	bl	1a9e0 <printk>
   19dc2:	217c      	movs	r1, #124	; 0x7c
   19dc4:	482f      	ldr	r0, [pc, #188]	; (19e84 <z_add_timeout+0x154>)
   19dc6:	f001 f8b1 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   19dca:	482d      	ldr	r0, [pc, #180]	; (19e80 <z_add_timeout+0x150>)
   19dcc:	f7ff fe38 	bl	19a40 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   19dd0:	f7ff ff62 	bl	19c98 <elapsed>
	return list->head == list;
   19dd4:	4a2c      	ldr	r2, [pc, #176]	; (19e88 <z_add_timeout+0x158>)
   19dd6:	1945      	adds	r5, r0, r5
   19dd8:	6813      	ldr	r3, [r2, #0]
   19dda:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19dde:	4293      	cmp	r3, r2
   19de0:	e9c4 5704 	strd	r5, r7, [r4, #16]
   19de4:	d002      	beq.n	19dec <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   19de6:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   19dea:	b933      	cbnz	r3, 19dfa <z_add_timeout+0xca>
	node->prev = list->tail;
   19dec:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   19dee:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   19df0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   19df2:	6853      	ldr	r3, [r2, #4]
   19df4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19df6:	6054      	str	r4, [r2, #4]
}
   19df8:	e011      	b.n	19e1e <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   19dfa:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   19dfe:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   19e02:	4281      	cmp	r1, r0
   19e04:	eb75 0e07 	sbcs.w	lr, r5, r7
   19e08:	da2b      	bge.n	19e62 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   19e0a:	1a41      	subs	r1, r0, r1
   19e0c:	eb67 0505 	sbc.w	r5, r7, r5
   19e10:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   19e14:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19e16:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   19e1a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19e1c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   19e1e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19e20:	4293      	cmp	r3, r2
   19e22:	d00b      	beq.n	19e3c <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19e24:	429c      	cmp	r4, r3
   19e26:	d109      	bne.n	19e3c <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19e28:	f7ff ff40 	bl	19cac <next_timeout>

			if (next_time == 0 ||
   19e2c:	b118      	cbz	r0, 19e36 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   19e2e:	4b17      	ldr	r3, [pc, #92]	; (19e8c <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   19e30:	695b      	ldr	r3, [r3, #20]
   19e32:	4283      	cmp	r3, r0
   19e34:	d002      	beq.n	19e3c <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   19e36:	2100      	movs	r1, #0
   19e38:	f7f2 fc4e 	bl	c6d8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19e3c:	4810      	ldr	r0, [pc, #64]	; (19e80 <z_add_timeout+0x150>)
   19e3e:	f7ff fdf1 	bl	19a24 <z_spin_unlock_valid>
   19e42:	b940      	cbnz	r0, 19e56 <z_add_timeout+0x126>
   19e44:	490f      	ldr	r1, [pc, #60]	; (19e84 <z_add_timeout+0x154>)
   19e46:	480d      	ldr	r0, [pc, #52]	; (19e7c <z_add_timeout+0x14c>)
   19e48:	22a7      	movs	r2, #167	; 0xa7
   19e4a:	f000 fdc9 	bl	1a9e0 <printk>
   19e4e:	21a7      	movs	r1, #167	; 0xa7
   19e50:	480c      	ldr	r0, [pc, #48]	; (19e84 <z_add_timeout+0x154>)
   19e52:	f001 f86b 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19e56:	f386 8811 	msr	BASEPRI, r6
   19e5a:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   19e62:	1a09      	subs	r1, r1, r0
   19e64:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   19e68:	4563      	cmp	r3, ip
   19e6a:	e9c4 1504 	strd	r1, r5, [r4, #16]
   19e6e:	d0bd      	beq.n	19dec <z_add_timeout+0xbc>
   19e70:	681b      	ldr	r3, [r3, #0]
   19e72:	e7ba      	b.n	19dea <z_add_timeout+0xba>
   19e74:	20009990 	.word	0x20009990
   19e78:	00022945 	.word	0x00022945
   19e7c:	0001faab 	.word	0x0001faab
   19e80:	2000a2cc 	.word	0x2000a2cc
   19e84:	0001fae5 	.word	0x0001fae5
   19e88:	20008424 	.word	0x20008424
   19e8c:	2000a27c 	.word	0x2000a27c

00019e90 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   19e90:	b538      	push	{r3, r4, r5, lr}
   19e92:	4604      	mov	r4, r0
	__asm__ volatile(
   19e94:	f04f 0320 	mov.w	r3, #32
   19e98:	f3ef 8511 	mrs	r5, BASEPRI
   19e9c:	f383 8811 	msr	BASEPRI, r3
   19ea0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ea4:	4815      	ldr	r0, [pc, #84]	; (19efc <z_abort_timeout+0x6c>)
   19ea6:	f7ff fdaf 	bl	19a08 <z_spin_lock_valid>
   19eaa:	b940      	cbnz	r0, 19ebe <z_abort_timeout+0x2e>
   19eac:	4914      	ldr	r1, [pc, #80]	; (19f00 <z_abort_timeout+0x70>)
   19eae:	4815      	ldr	r0, [pc, #84]	; (19f04 <z_abort_timeout+0x74>)
   19eb0:	227c      	movs	r2, #124	; 0x7c
   19eb2:	f000 fd95 	bl	1a9e0 <printk>
   19eb6:	217c      	movs	r1, #124	; 0x7c
   19eb8:	4811      	ldr	r0, [pc, #68]	; (19f00 <z_abort_timeout+0x70>)
   19eba:	f001 f837 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   19ebe:	480f      	ldr	r0, [pc, #60]	; (19efc <z_abort_timeout+0x6c>)
   19ec0:	f7ff fdbe 	bl	19a40 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   19ec4:	6823      	ldr	r3, [r4, #0]
   19ec6:	b1b3      	cbz	r3, 19ef6 <z_abort_timeout+0x66>
			remove_timeout(to);
   19ec8:	4620      	mov	r0, r4
   19eca:	f7ff ff17 	bl	19cfc <remove_timeout>
			ret = 0;
   19ece:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ed0:	480a      	ldr	r0, [pc, #40]	; (19efc <z_abort_timeout+0x6c>)
   19ed2:	f7ff fda7 	bl	19a24 <z_spin_unlock_valid>
   19ed6:	b940      	cbnz	r0, 19eea <z_abort_timeout+0x5a>
   19ed8:	4909      	ldr	r1, [pc, #36]	; (19f00 <z_abort_timeout+0x70>)
   19eda:	480a      	ldr	r0, [pc, #40]	; (19f04 <z_abort_timeout+0x74>)
   19edc:	22a7      	movs	r2, #167	; 0xa7
   19ede:	f000 fd7f 	bl	1a9e0 <printk>
   19ee2:	21a7      	movs	r1, #167	; 0xa7
   19ee4:	4806      	ldr	r0, [pc, #24]	; (19f00 <z_abort_timeout+0x70>)
   19ee6:	f001 f821 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19eea:	f385 8811 	msr	BASEPRI, r5
   19eee:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   19ef2:	4620      	mov	r0, r4
   19ef4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19ef6:	f06f 0415 	mvn.w	r4, #21
   19efa:	e7e9      	b.n	19ed0 <z_abort_timeout+0x40>
   19efc:	2000a2cc 	.word	0x2000a2cc
   19f00:	0001fae5 	.word	0x0001fae5
   19f04:	0001faab 	.word	0x0001faab

00019f08 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   19f08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19f0a:	f04f 0320 	mov.w	r3, #32
   19f0e:	f3ef 8511 	mrs	r5, BASEPRI
   19f12:	f383 8811 	msr	BASEPRI, r3
   19f16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f1a:	4813      	ldr	r0, [pc, #76]	; (19f68 <z_get_next_timeout_expiry+0x60>)
   19f1c:	f7ff fd74 	bl	19a08 <z_spin_lock_valid>
   19f20:	b940      	cbnz	r0, 19f34 <z_get_next_timeout_expiry+0x2c>
   19f22:	4912      	ldr	r1, [pc, #72]	; (19f6c <z_get_next_timeout_expiry+0x64>)
   19f24:	4812      	ldr	r0, [pc, #72]	; (19f70 <z_get_next_timeout_expiry+0x68>)
   19f26:	227c      	movs	r2, #124	; 0x7c
   19f28:	f000 fd5a 	bl	1a9e0 <printk>
   19f2c:	217c      	movs	r1, #124	; 0x7c
   19f2e:	480f      	ldr	r0, [pc, #60]	; (19f6c <z_get_next_timeout_expiry+0x64>)
   19f30:	f000 fffc 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   19f34:	480c      	ldr	r0, [pc, #48]	; (19f68 <z_get_next_timeout_expiry+0x60>)
   19f36:	f7ff fd83 	bl	19a40 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   19f3a:	f7ff feb7 	bl	19cac <next_timeout>
   19f3e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f40:	4809      	ldr	r0, [pc, #36]	; (19f68 <z_get_next_timeout_expiry+0x60>)
   19f42:	f7ff fd6f 	bl	19a24 <z_spin_unlock_valid>
   19f46:	b940      	cbnz	r0, 19f5a <z_get_next_timeout_expiry+0x52>
   19f48:	4908      	ldr	r1, [pc, #32]	; (19f6c <z_get_next_timeout_expiry+0x64>)
   19f4a:	4809      	ldr	r0, [pc, #36]	; (19f70 <z_get_next_timeout_expiry+0x68>)
   19f4c:	22a7      	movs	r2, #167	; 0xa7
   19f4e:	f000 fd47 	bl	1a9e0 <printk>
   19f52:	21a7      	movs	r1, #167	; 0xa7
   19f54:	4805      	ldr	r0, [pc, #20]	; (19f6c <z_get_next_timeout_expiry+0x64>)
   19f56:	f000 ffe9 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19f5a:	f385 8811 	msr	BASEPRI, r5
   19f5e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   19f62:	4620      	mov	r0, r4
   19f64:	bd38      	pop	{r3, r4, r5, pc}
   19f66:	bf00      	nop
   19f68:	2000a2cc 	.word	0x2000a2cc
   19f6c:	0001fae5 	.word	0x0001fae5
   19f70:	0001faab 	.word	0x0001faab

00019f74 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   19f74:	b570      	push	{r4, r5, r6, lr}
   19f76:	4604      	mov	r4, r0
   19f78:	460d      	mov	r5, r1
	__asm__ volatile(
   19f7a:	f04f 0320 	mov.w	r3, #32
   19f7e:	f3ef 8611 	mrs	r6, BASEPRI
   19f82:	f383 8811 	msr	BASEPRI, r3
   19f86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f8a:	4816      	ldr	r0, [pc, #88]	; (19fe4 <z_set_timeout_expiry+0x70>)
   19f8c:	f7ff fd3c 	bl	19a08 <z_spin_lock_valid>
   19f90:	b940      	cbnz	r0, 19fa4 <z_set_timeout_expiry+0x30>
   19f92:	4915      	ldr	r1, [pc, #84]	; (19fe8 <z_set_timeout_expiry+0x74>)
   19f94:	4815      	ldr	r0, [pc, #84]	; (19fec <z_set_timeout_expiry+0x78>)
   19f96:	227c      	movs	r2, #124	; 0x7c
   19f98:	f000 fd22 	bl	1a9e0 <printk>
   19f9c:	217c      	movs	r1, #124	; 0x7c
   19f9e:	4812      	ldr	r0, [pc, #72]	; (19fe8 <z_set_timeout_expiry+0x74>)
   19fa0:	f000 ffc4 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   19fa4:	480f      	ldr	r0, [pc, #60]	; (19fe4 <z_set_timeout_expiry+0x70>)
   19fa6:	f7ff fd4b 	bl	19a40 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   19faa:	f7ff fe7f 	bl	19cac <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   19fae:	2801      	cmp	r0, #1
   19fb0:	dd05      	ble.n	19fbe <z_set_timeout_expiry+0x4a>
   19fb2:	42a0      	cmp	r0, r4
   19fb4:	dd03      	ble.n	19fbe <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   19fb6:	4629      	mov	r1, r5
   19fb8:	4620      	mov	r0, r4
   19fba:	f7f2 fb8d 	bl	c6d8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19fbe:	4809      	ldr	r0, [pc, #36]	; (19fe4 <z_set_timeout_expiry+0x70>)
   19fc0:	f7ff fd30 	bl	19a24 <z_spin_unlock_valid>
   19fc4:	b940      	cbnz	r0, 19fd8 <z_set_timeout_expiry+0x64>
   19fc6:	4908      	ldr	r1, [pc, #32]	; (19fe8 <z_set_timeout_expiry+0x74>)
   19fc8:	4808      	ldr	r0, [pc, #32]	; (19fec <z_set_timeout_expiry+0x78>)
   19fca:	22a7      	movs	r2, #167	; 0xa7
   19fcc:	f000 fd08 	bl	1a9e0 <printk>
   19fd0:	21a7      	movs	r1, #167	; 0xa7
   19fd2:	4805      	ldr	r0, [pc, #20]	; (19fe8 <z_set_timeout_expiry+0x74>)
   19fd4:	f000 ffaa 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   19fd8:	f386 8811 	msr	BASEPRI, r6
   19fdc:	f3bf 8f6f 	isb	sy
		}
	}
}
   19fe0:	bd70      	pop	{r4, r5, r6, pc}
   19fe2:	bf00      	nop
   19fe4:	2000a2cc 	.word	0x2000a2cc
   19fe8:	0001fae5 	.word	0x0001fae5
   19fec:	0001faab 	.word	0x0001faab

00019ff0 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   19ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ff4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19ff6:	f7fe fe61 	bl	18cbc <z_time_slice>
	__asm__ volatile(
   19ffa:	f04f 0320 	mov.w	r3, #32
   19ffe:	f3ef 8511 	mrs	r5, BASEPRI
   1a002:	f383 8811 	msr	BASEPRI, r3
   1a006:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a00a:	4842      	ldr	r0, [pc, #264]	; (1a114 <z_clock_announce+0x124>)
   1a00c:	f7ff fcfc 	bl	19a08 <z_spin_lock_valid>
   1a010:	b940      	cbnz	r0, 1a024 <z_clock_announce+0x34>
   1a012:	4941      	ldr	r1, [pc, #260]	; (1a118 <z_clock_announce+0x128>)
   1a014:	4841      	ldr	r0, [pc, #260]	; (1a11c <z_clock_announce+0x12c>)
   1a016:	227c      	movs	r2, #124	; 0x7c
   1a018:	f000 fce2 	bl	1a9e0 <printk>
   1a01c:	217c      	movs	r1, #124	; 0x7c
   1a01e:	483e      	ldr	r0, [pc, #248]	; (1a118 <z_clock_announce+0x128>)
   1a020:	f000 ff84 	bl	1af2c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1a024:	4f3e      	ldr	r7, [pc, #248]	; (1a120 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   1a026:	483b      	ldr	r0, [pc, #236]	; (1a114 <z_clock_announce+0x124>)
	return list->head == list;
   1a028:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1a124 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1a02c:	4e3e      	ldr	r6, [pc, #248]	; (1a128 <z_clock_announce+0x138>)
   1a02e:	f7ff fd07 	bl	19a40 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   1a032:	603c      	str	r4, [r7, #0]
   1a034:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a038:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a03a:	4544      	cmp	r4, r8
   1a03c:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   1a040:	e9d6 1e00 	ldrd	r1, lr, [r6]
   1a044:	d00b      	beq.n	1a05e <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a046:	b154      	cbz	r4, 1a05e <z_clock_announce+0x6e>
   1a048:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   1a04c:	429a      	cmp	r2, r3
   1a04e:	eb70 090c 	sbcs.w	r9, r0, ip
   1a052:	da23      	bge.n	1a09c <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1a054:	1a9b      	subs	r3, r3, r2
   1a056:	eb6c 0c00 	sbc.w	ip, ip, r0
   1a05a:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1a05e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1a060:	1852      	adds	r2, r2, r1
   1a062:	eb4e 0000 	adc.w	r0, lr, r0
   1a066:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   1a06a:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   1a06c:	f7ff fe1e 	bl	19cac <next_timeout>
   1a070:	4621      	mov	r1, r4
   1a072:	f7f2 fb31 	bl	c6d8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a076:	4827      	ldr	r0, [pc, #156]	; (1a114 <z_clock_announce+0x124>)
   1a078:	f7ff fcd4 	bl	19a24 <z_spin_unlock_valid>
   1a07c:	b940      	cbnz	r0, 1a090 <z_clock_announce+0xa0>
   1a07e:	4926      	ldr	r1, [pc, #152]	; (1a118 <z_clock_announce+0x128>)
   1a080:	4826      	ldr	r0, [pc, #152]	; (1a11c <z_clock_announce+0x12c>)
   1a082:	22a7      	movs	r2, #167	; 0xa7
   1a084:	f000 fcac 	bl	1a9e0 <printk>
   1a088:	21a7      	movs	r1, #167	; 0xa7
   1a08a:	4823      	ldr	r0, [pc, #140]	; (1a118 <z_clock_announce+0x128>)
   1a08c:	f000 ff4e 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1a090:	f385 8811 	msr	BASEPRI, r5
   1a094:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1a098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1a09c:	1859      	adds	r1, r3, r1
   1a09e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   1a0a2:	1ad3      	subs	r3, r2, r3
   1a0a4:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   1a0a6:	2200      	movs	r2, #0
   1a0a8:	2300      	movs	r3, #0
		curr_tick += dt;
   1a0aa:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   1a0ae:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1a0b2:	4620      	mov	r0, r4
   1a0b4:	f7ff fe22 	bl	19cfc <remove_timeout>
   1a0b8:	4816      	ldr	r0, [pc, #88]	; (1a114 <z_clock_announce+0x124>)
   1a0ba:	f7ff fcb3 	bl	19a24 <z_spin_unlock_valid>
   1a0be:	b940      	cbnz	r0, 1a0d2 <z_clock_announce+0xe2>
   1a0c0:	4915      	ldr	r1, [pc, #84]	; (1a118 <z_clock_announce+0x128>)
   1a0c2:	4816      	ldr	r0, [pc, #88]	; (1a11c <z_clock_announce+0x12c>)
   1a0c4:	22a7      	movs	r2, #167	; 0xa7
   1a0c6:	f000 fc8b 	bl	1a9e0 <printk>
   1a0ca:	21a7      	movs	r1, #167	; 0xa7
   1a0cc:	4812      	ldr	r0, [pc, #72]	; (1a118 <z_clock_announce+0x128>)
   1a0ce:	f000 ff2d 	bl	1af2c <assert_post_action>
   1a0d2:	f385 8811 	msr	BASEPRI, r5
   1a0d6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1a0da:	4620      	mov	r0, r4
   1a0dc:	68a3      	ldr	r3, [r4, #8]
   1a0de:	4798      	blx	r3
	__asm__ volatile(
   1a0e0:	f04f 0320 	mov.w	r3, #32
   1a0e4:	f3ef 8511 	mrs	r5, BASEPRI
   1a0e8:	f383 8811 	msr	BASEPRI, r3
   1a0ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0f0:	4808      	ldr	r0, [pc, #32]	; (1a114 <z_clock_announce+0x124>)
   1a0f2:	f7ff fc89 	bl	19a08 <z_spin_lock_valid>
   1a0f6:	b940      	cbnz	r0, 1a10a <z_clock_announce+0x11a>
   1a0f8:	4907      	ldr	r1, [pc, #28]	; (1a118 <z_clock_announce+0x128>)
   1a0fa:	4808      	ldr	r0, [pc, #32]	; (1a11c <z_clock_announce+0x12c>)
   1a0fc:	227c      	movs	r2, #124	; 0x7c
   1a0fe:	f000 fc6f 	bl	1a9e0 <printk>
   1a102:	217c      	movs	r1, #124	; 0x7c
   1a104:	4804      	ldr	r0, [pc, #16]	; (1a118 <z_clock_announce+0x128>)
   1a106:	f000 ff11 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a10a:	4802      	ldr	r0, [pc, #8]	; (1a114 <z_clock_announce+0x124>)
   1a10c:	f7ff fc98 	bl	19a40 <z_spin_lock_set_owner>
	return k;
   1a110:	e790      	b.n	1a034 <z_clock_announce+0x44>
   1a112:	bf00      	nop
   1a114:	2000a2cc 	.word	0x2000a2cc
   1a118:	0001fae5 	.word	0x0001fae5
   1a11c:	0001faab 	.word	0x0001faab
   1a120:	2000a2c8 	.word	0x2000a2c8
   1a124:	20008424 	.word	0x20008424
   1a128:	20009990 	.word	0x20009990

0001a12c <z_tick_get>:

int64_t z_tick_get(void)
{
   1a12c:	b570      	push	{r4, r5, r6, lr}
   1a12e:	f04f 0320 	mov.w	r3, #32
   1a132:	f3ef 8611 	mrs	r6, BASEPRI
   1a136:	f383 8811 	msr	BASEPRI, r3
   1a13a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a13e:	4816      	ldr	r0, [pc, #88]	; (1a198 <z_tick_get+0x6c>)
   1a140:	f7ff fc62 	bl	19a08 <z_spin_lock_valid>
   1a144:	b940      	cbnz	r0, 1a158 <z_tick_get+0x2c>
   1a146:	4915      	ldr	r1, [pc, #84]	; (1a19c <z_tick_get+0x70>)
   1a148:	4815      	ldr	r0, [pc, #84]	; (1a1a0 <z_tick_get+0x74>)
   1a14a:	227c      	movs	r2, #124	; 0x7c
   1a14c:	f000 fc48 	bl	1a9e0 <printk>
   1a150:	217c      	movs	r1, #124	; 0x7c
   1a152:	4812      	ldr	r0, [pc, #72]	; (1a19c <z_tick_get+0x70>)
   1a154:	f000 feea 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a158:	480f      	ldr	r0, [pc, #60]	; (1a198 <z_tick_get+0x6c>)
   1a15a:	f7ff fc71 	bl	19a40 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1a15e:	f7f2 faed 	bl	c73c <z_clock_elapsed>
   1a162:	4b10      	ldr	r3, [pc, #64]	; (1a1a4 <z_tick_get+0x78>)
   1a164:	e9d3 4500 	ldrd	r4, r5, [r3]
   1a168:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a16a:	480b      	ldr	r0, [pc, #44]	; (1a198 <z_tick_get+0x6c>)
   1a16c:	f145 0500 	adc.w	r5, r5, #0
   1a170:	f7ff fc58 	bl	19a24 <z_spin_unlock_valid>
   1a174:	b940      	cbnz	r0, 1a188 <z_tick_get+0x5c>
   1a176:	4909      	ldr	r1, [pc, #36]	; (1a19c <z_tick_get+0x70>)
   1a178:	4809      	ldr	r0, [pc, #36]	; (1a1a0 <z_tick_get+0x74>)
   1a17a:	22a7      	movs	r2, #167	; 0xa7
   1a17c:	f000 fc30 	bl	1a9e0 <printk>
   1a180:	21a7      	movs	r1, #167	; 0xa7
   1a182:	4806      	ldr	r0, [pc, #24]	; (1a19c <z_tick_get+0x70>)
   1a184:	f000 fed2 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1a188:	f386 8811 	msr	BASEPRI, r6
   1a18c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a190:	4620      	mov	r0, r4
   1a192:	4629      	mov	r1, r5
   1a194:	bd70      	pop	{r4, r5, r6, pc}
   1a196:	bf00      	nop
   1a198:	2000a2cc 	.word	0x2000a2cc
   1a19c:	0001fae5 	.word	0x0001fae5
   1a1a0:	0001faab 	.word	0x0001faab
   1a1a4:	20009990 	.word	0x20009990

0001a1a8 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1a1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1a1ac:	6884      	ldr	r4, [r0, #8]
{
   1a1ae:	4605      	mov	r5, r0
   1a1b0:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1a1b2:	b1b4      	cbz	r4, 1a1e2 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   1a1b4:	7863      	ldrb	r3, [r4, #1]
   1a1b6:	2b01      	cmp	r3, #1
   1a1b8:	d145      	bne.n	1a246 <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1a1ba:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   1a1be:	d10a      	bne.n	1a1d6 <signal_poll_event+0x2e>
   1a1c0:	22e3      	movs	r2, #227	; 0xe3
   1a1c2:	492d      	ldr	r1, [pc, #180]	; (1a278 <signal_poll_event+0xd0>)
   1a1c4:	482d      	ldr	r0, [pc, #180]	; (1a27c <signal_poll_event+0xd4>)
   1a1c6:	f000 fc0b 	bl	1a9e0 <printk>
   1a1ca:	21e3      	movs	r1, #227	; 0xe3
   1a1cc:	482a      	ldr	r0, [pc, #168]	; (1a278 <signal_poll_event+0xd0>)
   1a1ce:	f000 fead 	bl	1af2c <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1a1d2:	7b7b      	ldrb	r3, [r7, #13]
   1a1d4:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   1a1d6:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1a1da:	f013 0302 	ands.w	r3, r3, #2
   1a1de:	d10a      	bne.n	1a1f6 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   1a1e0:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1a1e2:	2000      	movs	r0, #0
	event->state |= state;
   1a1e4:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1a1e6:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1a1e8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1a1ec:	430e      	orrs	r6, r1
   1a1ee:	f366 3310 	bfi	r3, r6, #12, #5
   1a1f2:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1a1f4:	e00b      	b.n	1a20e <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   1a1f6:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1a1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a1fe:	bf08      	it	eq
   1a200:	f112 0f02 	cmneq.w	r2, #2
   1a204:	d105      	bne.n	1a212 <signal_poll_event+0x6a>
		poller->is_polling = false;
   1a206:	2300      	movs	r3, #0
		return -EAGAIN;
   1a208:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1a20c:	7023      	strb	r3, [r4, #0]
}
   1a20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1a212:	4638      	mov	r0, r7
   1a214:	f7fe fb30 	bl	18878 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1a218:	2e08      	cmp	r6, #8
   1a21a:	bf0c      	ite	eq
   1a21c:	f06f 0303 	mvneq.w	r3, #3
   1a220:	2300      	movne	r3, #0
   1a222:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a224:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1a228:	06db      	lsls	r3, r3, #27
   1a22a:	d104      	bne.n	1a236 <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   1a22c:	f854 8c54 	ldr.w	r8, [r4, #-84]
   1a230:	f1b8 0f00 	cmp.w	r8, #0
   1a234:	d001      	beq.n	1a23a <signal_poll_event+0x92>
		poller->is_polling = false;
   1a236:	2300      	movs	r3, #0
   1a238:	e7d2      	b.n	1a1e0 <signal_poll_event+0x38>
	z_ready_thread(thread);
   1a23a:	4638      	mov	r0, r7
   1a23c:	f7fe fc36 	bl	18aac <z_ready_thread>
		poller->is_polling = false;
   1a240:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1a244:	e7cd      	b.n	1a1e2 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   1a246:	2b02      	cmp	r3, #2
   1a248:	d1f5      	bne.n	1a236 <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1a24a:	7823      	ldrb	r3, [r4, #0]
   1a24c:	2b00      	cmp	r3, #0
   1a24e:	d0c8      	beq.n	1a1e2 <signal_poll_event+0x3a>
   1a250:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1a254:	b177      	cbz	r7, 1a274 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1a256:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1a25a:	f1a4 0910 	sub.w	r9, r4, #16
   1a25e:	f104 0010 	add.w	r0, r4, #16
   1a262:	f7ff fe15 	bl	19e90 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1a266:	4649      	mov	r1, r9
   1a268:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1a26a:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1a26e:	f003 ff6e 	bl	1e14e <k_work_submit_to_queue>
   1a272:	e7e5      	b.n	1a240 <signal_poll_event+0x98>
		poller->is_polling = false;
   1a274:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1a276:	e7b4      	b.n	1a1e2 <signal_poll_event+0x3a>
   1a278:	00022969 	.word	0x00022969
   1a27c:	0001faab 	.word	0x0001faab

0001a280 <register_events>:
{
   1a280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1a284:	2600      	movs	r6, #0
{
   1a286:	4614      	mov	r4, r2
   1a288:	4681      	mov	r9, r0
	int events_registered = 0;
   1a28a:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a28c:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a418 <register_events+0x198>
   1a290:	4f62      	ldr	r7, [pc, #392]	; (1a41c <register_events+0x19c>)
   1a292:	4d63      	ldr	r5, [pc, #396]	; (1a420 <register_events+0x1a0>)
{
   1a294:	9100      	str	r1, [sp, #0]
   1a296:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1a298:	9b00      	ldr	r3, [sp, #0]
   1a29a:	429e      	cmp	r6, r3
   1a29c:	db03      	blt.n	1a2a6 <register_events+0x26>
}
   1a29e:	4640      	mov	r0, r8
   1a2a0:	b003      	add	sp, #12
   1a2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1a2a6:	f04f 0220 	mov.w	r2, #32
   1a2aa:	f3ef 8b11 	mrs	fp, BASEPRI
   1a2ae:	f382 8811 	msr	BASEPRI, r2
   1a2b2:	f3bf 8f6f 	isb	sy
   1a2b6:	4650      	mov	r0, sl
   1a2b8:	f7ff fba6 	bl	19a08 <z_spin_lock_valid>
   1a2bc:	b940      	cbnz	r0, 1a2d0 <register_events+0x50>
   1a2be:	4639      	mov	r1, r7
   1a2c0:	4628      	mov	r0, r5
   1a2c2:	227c      	movs	r2, #124	; 0x7c
   1a2c4:	f000 fb8c 	bl	1a9e0 <printk>
   1a2c8:	217c      	movs	r1, #124	; 0x7c
   1a2ca:	4638      	mov	r0, r7
   1a2cc:	f000 fe2e 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a2d0:	4650      	mov	r0, sl
   1a2d2:	f7ff fbb5 	bl	19a40 <z_spin_lock_set_owner>
	switch (event->type) {
   1a2d6:	f899 200d 	ldrb.w	r2, [r9, #13]
   1a2da:	f002 020f 	and.w	r2, r2, #15
   1a2de:	2a04      	cmp	r2, #4
   1a2e0:	d848      	bhi.n	1a374 <register_events+0xf4>
   1a2e2:	e8df f002 	tbb	[pc, r2]
   1a2e6:	402f      	.short	0x402f
   1a2e8:	4703      	.short	0x4703
   1a2ea:	2b          	.byte	0x2b
   1a2eb:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1a2ec:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a2f0:	6892      	ldr	r2, [r2, #8]
   1a2f2:	b33a      	cbz	r2, 1a344 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1a2f4:	2102      	movs	r1, #2
	event->poller = NULL;
   1a2f6:	2000      	movs	r0, #0
	event->state |= state;
   1a2f8:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1a2fc:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   1a300:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   1a304:	ea41 010c 	orr.w	r1, r1, ip
   1a308:	f361 3210 	bfi	r2, r1, #12, #5
   1a30c:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   1a310:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a312:	4650      	mov	r0, sl
   1a314:	f7ff fb86 	bl	19a24 <z_spin_unlock_valid>
   1a318:	b940      	cbnz	r0, 1a32c <register_events+0xac>
   1a31a:	4639      	mov	r1, r7
   1a31c:	4628      	mov	r0, r5
   1a31e:	22a7      	movs	r2, #167	; 0xa7
   1a320:	f000 fb5e 	bl	1a9e0 <printk>
   1a324:	21a7      	movs	r1, #167	; 0xa7
   1a326:	4638      	mov	r0, r7
   1a328:	f000 fe00 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1a32c:	f38b 8811 	msr	BASEPRI, fp
   1a330:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1a334:	3601      	adds	r6, #1
   1a336:	f109 0914 	add.w	r9, r9, #20
   1a33a:	e7ad      	b.n	1a298 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   1a33c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a340:	6812      	ldr	r2, [r2, #0]
   1a342:	bb0a      	cbnz	r2, 1a388 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   1a344:	9b01      	ldr	r3, [sp, #4]
   1a346:	2b00      	cmp	r3, #0
   1a348:	d1e3      	bne.n	1a312 <register_events+0x92>
   1a34a:	7822      	ldrb	r2, [r4, #0]
   1a34c:	2a00      	cmp	r2, #0
   1a34e:	d0e0      	beq.n	1a312 <register_events+0x92>
	switch (event->type) {
   1a350:	f899 200d 	ldrb.w	r2, [r9, #13]
   1a354:	f002 020f 	and.w	r2, r2, #15
   1a358:	2a04      	cmp	r2, #4
   1a35a:	d852      	bhi.n	1a402 <register_events+0x182>
   1a35c:	e8df f002 	tbb	[pc, r2]
   1a360:	51164029 	.word	0x51164029
   1a364:	2e          	.byte	0x2e
   1a365:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1a366:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a36a:	6892      	ldr	r2, [r2, #8]
   1a36c:	2a00      	cmp	r2, #0
   1a36e:	d0e9      	beq.n	1a344 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1a370:	2101      	movs	r1, #1
   1a372:	e7c0      	b.n	1a2f6 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1a374:	4628      	mov	r0, r5
   1a376:	2254      	movs	r2, #84	; 0x54
   1a378:	492a      	ldr	r1, [pc, #168]	; (1a424 <register_events+0x1a4>)
   1a37a:	f000 fb31 	bl	1a9e0 <printk>
   1a37e:	2154      	movs	r1, #84	; 0x54
   1a380:	4828      	ldr	r0, [pc, #160]	; (1a424 <register_events+0x1a4>)
   1a382:	f000 fdd3 	bl	1af2c <assert_post_action>
		break;
   1a386:	e7dd      	b.n	1a344 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1a388:	2104      	movs	r1, #4
   1a38a:	e7b4      	b.n	1a2f6 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a38c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a390:	b942      	cbnz	r2, 1a3a4 <register_events+0x124>
   1a392:	4628      	mov	r0, r5
   1a394:	4923      	ldr	r1, [pc, #140]	; (1a424 <register_events+0x1a4>)
   1a396:	227e      	movs	r2, #126	; 0x7e
   1a398:	f000 fb22 	bl	1a9e0 <printk>
   1a39c:	217e      	movs	r1, #126	; 0x7e
   1a39e:	4821      	ldr	r0, [pc, #132]	; (1a424 <register_events+0x1a4>)
   1a3a0:	f000 fdc4 	bl	1af2c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1a3a4:	4622      	mov	r2, r4
   1a3a6:	4649      	mov	r1, r9
   1a3a8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a3ac:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1a3ae:	f003 fee2 	bl	1e176 <add_event>
	event->poller = poller;
   1a3b2:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1a3b6:	f108 0801 	add.w	r8, r8, #1
   1a3ba:	e7aa      	b.n	1a312 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a3bc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a3c0:	b942      	cbnz	r2, 1a3d4 <register_events+0x154>
   1a3c2:	4628      	mov	r0, r5
   1a3c4:	4917      	ldr	r1, [pc, #92]	; (1a424 <register_events+0x1a4>)
   1a3c6:	2282      	movs	r2, #130	; 0x82
   1a3c8:	f000 fb0a 	bl	1a9e0 <printk>
   1a3cc:	2182      	movs	r1, #130	; 0x82
   1a3ce:	4815      	ldr	r0, [pc, #84]	; (1a424 <register_events+0x1a4>)
   1a3d0:	f000 fdac 	bl	1af2c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1a3d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a3d8:	4622      	mov	r2, r4
   1a3da:	4649      	mov	r1, r9
   1a3dc:	3014      	adds	r0, #20
   1a3de:	e7e6      	b.n	1a3ae <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a3e0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a3e4:	b942      	cbnz	r2, 1a3f8 <register_events+0x178>
   1a3e6:	4628      	mov	r0, r5
   1a3e8:	490e      	ldr	r1, [pc, #56]	; (1a424 <register_events+0x1a4>)
   1a3ea:	2286      	movs	r2, #134	; 0x86
   1a3ec:	f000 faf8 	bl	1a9e0 <printk>
   1a3f0:	2186      	movs	r1, #134	; 0x86
   1a3f2:	480c      	ldr	r0, [pc, #48]	; (1a424 <register_events+0x1a4>)
   1a3f4:	f000 fd9a 	bl	1af2c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1a3f8:	4622      	mov	r2, r4
   1a3fa:	4649      	mov	r1, r9
   1a3fc:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a400:	e7d5      	b.n	1a3ae <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1a402:	4628      	mov	r0, r5
   1a404:	228d      	movs	r2, #141	; 0x8d
   1a406:	4907      	ldr	r1, [pc, #28]	; (1a424 <register_events+0x1a4>)
   1a408:	f000 faea 	bl	1a9e0 <printk>
   1a40c:	218d      	movs	r1, #141	; 0x8d
   1a40e:	4805      	ldr	r0, [pc, #20]	; (1a424 <register_events+0x1a4>)
   1a410:	f000 fd8c 	bl	1af2c <assert_post_action>
		break;
   1a414:	e7cd      	b.n	1a3b2 <register_events+0x132>
   1a416:	bf00      	nop
   1a418:	2000a2d0 	.word	0x2000a2d0
   1a41c:	0001fae5 	.word	0x0001fae5
   1a420:	0001faab 	.word	0x0001faab
   1a424:	00022969 	.word	0x00022969

0001a428 <clear_event_registrations>:
{
   1a428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a42c:	2414      	movs	r4, #20
   1a42e:	4617      	mov	r7, r2
	while (num_events--) {
   1a430:	460e      	mov	r6, r1
   1a432:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1a436:	4d3d      	ldr	r5, [pc, #244]	; (1a52c <clear_event_registrations+0x104>)
   1a438:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1a530 <clear_event_registrations+0x108>
   1a43c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1a534 <clear_event_registrations+0x10c>
	while (num_events--) {
   1a440:	b90e      	cbnz	r6, 1a446 <clear_event_registrations+0x1e>
}
   1a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1a446:	2300      	movs	r3, #0
   1a448:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1a44c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1a450:	f1a4 0a14 	sub.w	sl, r4, #20
   1a454:	f003 030f 	and.w	r3, r3, #15
   1a458:	2b04      	cmp	r3, #4
   1a45a:	d831      	bhi.n	1a4c0 <clear_event_registrations+0x98>
   1a45c:	e8df f003 	tbb	[pc, r3]
   1a460:	30032539 	.word	0x30032539
   1a464:	1a          	.byte	0x1a
   1a465:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a466:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a46a:	b943      	cbnz	r3, 1a47e <clear_event_registrations+0x56>
   1a46c:	4629      	mov	r1, r5
   1a46e:	229d      	movs	r2, #157	; 0x9d
   1a470:	4640      	mov	r0, r8
   1a472:	f000 fab5 	bl	1a9e0 <printk>
   1a476:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a478:	4628      	mov	r0, r5
   1a47a:	f000 fd57 	bl	1af2c <assert_post_action>
	return node->next != NULL;
   1a47e:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1a482:	b333      	cbz	r3, 1a4d2 <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   1a484:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1a488:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a48a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a48c:	2300      	movs	r3, #0
	node->prev = NULL;
   1a48e:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1a492:	e01e      	b.n	1a4d2 <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a494:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a498:	2b00      	cmp	r3, #0
   1a49a:	d1f0      	bne.n	1a47e <clear_event_registrations+0x56>
   1a49c:	4629      	mov	r1, r5
   1a49e:	22a1      	movs	r2, #161	; 0xa1
   1a4a0:	4640      	mov	r0, r8
   1a4a2:	f000 fa9d 	bl	1a9e0 <printk>
   1a4a6:	21a1      	movs	r1, #161	; 0xa1
   1a4a8:	e7e6      	b.n	1a478 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a4aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a4ae:	2b00      	cmp	r3, #0
   1a4b0:	d1e5      	bne.n	1a47e <clear_event_registrations+0x56>
   1a4b2:	4629      	mov	r1, r5
   1a4b4:	22a5      	movs	r2, #165	; 0xa5
   1a4b6:	4640      	mov	r0, r8
   1a4b8:	f000 fa92 	bl	1a9e0 <printk>
   1a4bc:	21a5      	movs	r1, #165	; 0xa5
   1a4be:	e7db      	b.n	1a478 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   1a4c0:	4629      	mov	r1, r5
   1a4c2:	4640      	mov	r0, r8
   1a4c4:	22ac      	movs	r2, #172	; 0xac
   1a4c6:	f000 fa8b 	bl	1a9e0 <printk>
   1a4ca:	21ac      	movs	r1, #172	; 0xac
   1a4cc:	4628      	mov	r0, r5
   1a4ce:	f000 fd2d 	bl	1af2c <assert_post_action>
   1a4d2:	4648      	mov	r0, r9
   1a4d4:	f7ff faa6 	bl	19a24 <z_spin_unlock_valid>
   1a4d8:	b940      	cbnz	r0, 1a4ec <clear_event_registrations+0xc4>
   1a4da:	4640      	mov	r0, r8
   1a4dc:	4916      	ldr	r1, [pc, #88]	; (1a538 <clear_event_registrations+0x110>)
   1a4de:	22a7      	movs	r2, #167	; 0xa7
   1a4e0:	f000 fa7e 	bl	1a9e0 <printk>
   1a4e4:	21a7      	movs	r1, #167	; 0xa7
   1a4e6:	4814      	ldr	r0, [pc, #80]	; (1a538 <clear_event_registrations+0x110>)
   1a4e8:	f000 fd20 	bl	1af2c <assert_post_action>
   1a4ec:	f387 8811 	msr	BASEPRI, r7
   1a4f0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a4f4:	f04f 0320 	mov.w	r3, #32
   1a4f8:	f3ef 8711 	mrs	r7, BASEPRI
   1a4fc:	f383 8811 	msr	BASEPRI, r3
   1a500:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a504:	4648      	mov	r0, r9
   1a506:	f7ff fa7f 	bl	19a08 <z_spin_lock_valid>
   1a50a:	b940      	cbnz	r0, 1a51e <clear_event_registrations+0xf6>
   1a50c:	4640      	mov	r0, r8
   1a50e:	490a      	ldr	r1, [pc, #40]	; (1a538 <clear_event_registrations+0x110>)
   1a510:	227c      	movs	r2, #124	; 0x7c
   1a512:	f000 fa65 	bl	1a9e0 <printk>
   1a516:	217c      	movs	r1, #124	; 0x7c
   1a518:	4807      	ldr	r0, [pc, #28]	; (1a538 <clear_event_registrations+0x110>)
   1a51a:	f000 fd07 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a51e:	4648      	mov	r0, r9
   1a520:	f7ff fa8e 	bl	19a40 <z_spin_lock_set_owner>
	return k;
   1a524:	4654      	mov	r4, sl
   1a526:	3e01      	subs	r6, #1
   1a528:	e78a      	b.n	1a440 <clear_event_registrations+0x18>
   1a52a:	bf00      	nop
   1a52c:	00022969 	.word	0x00022969
   1a530:	0001faab 	.word	0x0001faab
   1a534:	2000a2d0 	.word	0x2000a2d0
   1a538:	0001fae5 	.word	0x0001fae5

0001a53c <k_poll_event_init>:
{
   1a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a53e:	4605      	mov	r5, r0
   1a540:	460f      	mov	r7, r1
   1a542:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1a544:	4614      	mov	r4, r2
   1a546:	b142      	cbz	r2, 1a55a <k_poll_event_init+0x1e>
   1a548:	4915      	ldr	r1, [pc, #84]	; (1a5a0 <k_poll_event_init+0x64>)
   1a54a:	4816      	ldr	r0, [pc, #88]	; (1a5a4 <k_poll_event_init+0x68>)
   1a54c:	222d      	movs	r2, #45	; 0x2d
   1a54e:	f000 fa47 	bl	1a9e0 <printk>
   1a552:	212d      	movs	r1, #45	; 0x2d
   1a554:	4812      	ldr	r0, [pc, #72]	; (1a5a0 <k_poll_event_init+0x64>)
   1a556:	f000 fce9 	bl	1af2c <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1a55a:	2f0f      	cmp	r7, #15
   1a55c:	d908      	bls.n	1a570 <k_poll_event_init+0x34>
   1a55e:	4910      	ldr	r1, [pc, #64]	; (1a5a0 <k_poll_event_init+0x64>)
   1a560:	4810      	ldr	r0, [pc, #64]	; (1a5a4 <k_poll_event_init+0x68>)
   1a562:	222f      	movs	r2, #47	; 0x2f
   1a564:	f000 fa3c 	bl	1a9e0 <printk>
   1a568:	212f      	movs	r1, #47	; 0x2f
   1a56a:	480d      	ldr	r0, [pc, #52]	; (1a5a0 <k_poll_event_init+0x64>)
   1a56c:	f000 fcde 	bl	1af2c <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1a570:	b946      	cbnz	r6, 1a584 <k_poll_event_init+0x48>
   1a572:	490b      	ldr	r1, [pc, #44]	; (1a5a0 <k_poll_event_init+0x64>)
   1a574:	480b      	ldr	r0, [pc, #44]	; (1a5a4 <k_poll_event_init+0x68>)
   1a576:	2230      	movs	r2, #48	; 0x30
   1a578:	f000 fa32 	bl	1a9e0 <printk>
   1a57c:	2130      	movs	r1, #48	; 0x30
   1a57e:	4808      	ldr	r0, [pc, #32]	; (1a5a0 <k_poll_event_init+0x64>)
   1a580:	f000 fcd4 	bl	1af2c <assert_post_action>
	event->poller = NULL;
   1a584:	2300      	movs	r3, #0
	event->type = type;
   1a586:	0464      	lsls	r4, r4, #17
   1a588:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1a58a:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1a58c:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   1a590:	7b2b      	ldrb	r3, [r5, #12]
   1a592:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1a596:	433c      	orrs	r4, r7
   1a598:	431c      	orrs	r4, r3
	event->obj = obj;
   1a59a:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1a59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a5a0:	00022969 	.word	0x00022969
   1a5a4:	0001faab 	.word	0x0001faab

0001a5a8 <z_impl_k_poll>:
{
   1a5a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a5ac:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1a5ae:	4b64      	ldr	r3, [pc, #400]	; (1a740 <z_impl_k_poll+0x198>)
{
   1a5b0:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1a5b2:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1a5b4:	2301      	movs	r3, #1
{
   1a5b6:	4688      	mov	r8, r1
   1a5b8:	4616      	mov	r6, r2
   1a5ba:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1a5bc:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1a5c0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1a5c4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1a5c8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a5cc:	b153      	cbz	r3, 1a5e4 <z_impl_k_poll+0x3c>
   1a5ce:	495d      	ldr	r1, [pc, #372]	; (1a744 <z_impl_k_poll+0x19c>)
   1a5d0:	485d      	ldr	r0, [pc, #372]	; (1a748 <z_impl_k_poll+0x1a0>)
   1a5d2:	f44f 7282 	mov.w	r2, #260	; 0x104
   1a5d6:	f000 fa03 	bl	1a9e0 <printk>
   1a5da:	f44f 7182 	mov.w	r1, #260	; 0x104
   1a5de:	4859      	ldr	r0, [pc, #356]	; (1a744 <z_impl_k_poll+0x19c>)
   1a5e0:	f000 fca4 	bl	1af2c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1a5e4:	b954      	cbnz	r4, 1a5fc <z_impl_k_poll+0x54>
   1a5e6:	4957      	ldr	r1, [pc, #348]	; (1a744 <z_impl_k_poll+0x19c>)
   1a5e8:	4857      	ldr	r0, [pc, #348]	; (1a748 <z_impl_k_poll+0x1a0>)
   1a5ea:	f240 1205 	movw	r2, #261	; 0x105
   1a5ee:	f000 f9f7 	bl	1a9e0 <printk>
   1a5f2:	f240 1105 	movw	r1, #261	; 0x105
   1a5f6:	4853      	ldr	r0, [pc, #332]	; (1a744 <z_impl_k_poll+0x19c>)
   1a5f8:	f000 fc98 	bl	1af2c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1a5fc:	f1b8 0f00 	cmp.w	r8, #0
   1a600:	da0a      	bge.n	1a618 <z_impl_k_poll+0x70>
   1a602:	4950      	ldr	r1, [pc, #320]	; (1a744 <z_impl_k_poll+0x19c>)
   1a604:	4850      	ldr	r0, [pc, #320]	; (1a748 <z_impl_k_poll+0x1a0>)
   1a606:	f44f 7283 	mov.w	r2, #262	; 0x106
   1a60a:	f000 f9e9 	bl	1a9e0 <printk>
   1a60e:	f44f 7183 	mov.w	r1, #262	; 0x106
   1a612:	484c      	ldr	r0, [pc, #304]	; (1a744 <z_impl_k_poll+0x19c>)
   1a614:	f000 fc8a 	bl	1af2c <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1a618:	ea56 0305 	orrs.w	r3, r6, r5
   1a61c:	bf0c      	ite	eq
   1a61e:	2301      	moveq	r3, #1
   1a620:	2300      	movne	r3, #0
   1a622:	4641      	mov	r1, r8
   1a624:	464a      	mov	r2, r9
   1a626:	4620      	mov	r0, r4
   1a628:	f7ff fe2a 	bl	1a280 <register_events>
   1a62c:	4680      	mov	r8, r0
   1a62e:	f04f 0320 	mov.w	r3, #32
   1a632:	f3ef 8911 	mrs	r9, BASEPRI
   1a636:	f383 8811 	msr	BASEPRI, r3
   1a63a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a63e:	4843      	ldr	r0, [pc, #268]	; (1a74c <z_impl_k_poll+0x1a4>)
   1a640:	f7ff f9e2 	bl	19a08 <z_spin_lock_valid>
   1a644:	b940      	cbnz	r0, 1a658 <z_impl_k_poll+0xb0>
   1a646:	4942      	ldr	r1, [pc, #264]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a648:	483f      	ldr	r0, [pc, #252]	; (1a748 <z_impl_k_poll+0x1a0>)
   1a64a:	227c      	movs	r2, #124	; 0x7c
   1a64c:	f000 f9c8 	bl	1a9e0 <printk>
   1a650:	217c      	movs	r1, #124	; 0x7c
   1a652:	483f      	ldr	r0, [pc, #252]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a654:	f000 fc6a 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a658:	483c      	ldr	r0, [pc, #240]	; (1a74c <z_impl_k_poll+0x1a4>)
   1a65a:	f7ff f9f1 	bl	19a40 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1a65e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1a662:	b9d3      	cbnz	r3, 1a69a <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1a664:	4620      	mov	r0, r4
   1a666:	464a      	mov	r2, r9
   1a668:	4641      	mov	r1, r8
   1a66a:	f7ff fedd 	bl	1a428 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a66e:	4837      	ldr	r0, [pc, #220]	; (1a74c <z_impl_k_poll+0x1a4>)
   1a670:	f7ff f9d8 	bl	19a24 <z_spin_unlock_valid>
   1a674:	b940      	cbnz	r0, 1a688 <z_impl_k_poll+0xe0>
   1a676:	4936      	ldr	r1, [pc, #216]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a678:	4833      	ldr	r0, [pc, #204]	; (1a748 <z_impl_k_poll+0x1a0>)
   1a67a:	22a7      	movs	r2, #167	; 0xa7
   1a67c:	f000 f9b0 	bl	1a9e0 <printk>
   1a680:	21a7      	movs	r1, #167	; 0xa7
   1a682:	4833      	ldr	r0, [pc, #204]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a684:	f000 fc52 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1a688:	f389 8811 	msr	BASEPRI, r9
   1a68c:	f3bf 8f6f 	isb	sy
		return 0;
   1a690:	2500      	movs	r5, #0
}
   1a692:	4628      	mov	r0, r5
   1a694:	b005      	add	sp, #20
   1a696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1a69a:	2300      	movs	r3, #0
   1a69c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a6a0:	ea56 0305 	orrs.w	r3, r6, r5
   1a6a4:	d113      	bne.n	1a6ce <z_impl_k_poll+0x126>
   1a6a6:	4829      	ldr	r0, [pc, #164]	; (1a74c <z_impl_k_poll+0x1a4>)
   1a6a8:	f7ff f9bc 	bl	19a24 <z_spin_unlock_valid>
   1a6ac:	b940      	cbnz	r0, 1a6c0 <z_impl_k_poll+0x118>
   1a6ae:	4928      	ldr	r1, [pc, #160]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a6b0:	4825      	ldr	r0, [pc, #148]	; (1a748 <z_impl_k_poll+0x1a0>)
   1a6b2:	22a7      	movs	r2, #167	; 0xa7
   1a6b4:	f000 f994 	bl	1a9e0 <printk>
   1a6b8:	21a7      	movs	r1, #167	; 0xa7
   1a6ba:	4825      	ldr	r0, [pc, #148]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a6bc:	f000 fc36 	bl	1af2c <assert_post_action>
   1a6c0:	f389 8811 	msr	BASEPRI, r9
   1a6c4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1a6c8:	f06f 050a 	mvn.w	r5, #10
   1a6cc:	e7e1      	b.n	1a692 <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a6ce:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a6d2:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a6d4:	4649      	mov	r1, r9
   1a6d6:	481d      	ldr	r0, [pc, #116]	; (1a74c <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a6d8:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a6dc:	f7fe fd50 	bl	19180 <z_pend_curr>
   1a6e0:	4605      	mov	r5, r0
	__asm__ volatile(
   1a6e2:	f04f 0320 	mov.w	r3, #32
   1a6e6:	f3ef 8611 	mrs	r6, BASEPRI
   1a6ea:	f383 8811 	msr	BASEPRI, r3
   1a6ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a6f2:	4816      	ldr	r0, [pc, #88]	; (1a74c <z_impl_k_poll+0x1a4>)
   1a6f4:	f7ff f988 	bl	19a08 <z_spin_lock_valid>
   1a6f8:	b940      	cbnz	r0, 1a70c <z_impl_k_poll+0x164>
   1a6fa:	4915      	ldr	r1, [pc, #84]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a6fc:	4812      	ldr	r0, [pc, #72]	; (1a748 <z_impl_k_poll+0x1a0>)
   1a6fe:	227c      	movs	r2, #124	; 0x7c
   1a700:	f000 f96e 	bl	1a9e0 <printk>
   1a704:	217c      	movs	r1, #124	; 0x7c
   1a706:	4812      	ldr	r0, [pc, #72]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a708:	f000 fc10 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a70c:	480f      	ldr	r0, [pc, #60]	; (1a74c <z_impl_k_poll+0x1a4>)
   1a70e:	f7ff f997 	bl	19a40 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1a712:	4620      	mov	r0, r4
   1a714:	4632      	mov	r2, r6
   1a716:	4641      	mov	r1, r8
   1a718:	f7ff fe86 	bl	1a428 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a71c:	480b      	ldr	r0, [pc, #44]	; (1a74c <z_impl_k_poll+0x1a4>)
   1a71e:	f7ff f981 	bl	19a24 <z_spin_unlock_valid>
   1a722:	b940      	cbnz	r0, 1a736 <z_impl_k_poll+0x18e>
   1a724:	490a      	ldr	r1, [pc, #40]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a726:	4808      	ldr	r0, [pc, #32]	; (1a748 <z_impl_k_poll+0x1a0>)
   1a728:	22a7      	movs	r2, #167	; 0xa7
   1a72a:	f000 f959 	bl	1a9e0 <printk>
   1a72e:	21a7      	movs	r1, #167	; 0xa7
   1a730:	4807      	ldr	r0, [pc, #28]	; (1a750 <z_impl_k_poll+0x1a8>)
   1a732:	f000 fbfb 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1a736:	f386 8811 	msr	BASEPRI, r6
   1a73a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1a73e:	e7a8      	b.n	1a692 <z_impl_k_poll+0xea>
   1a740:	2000a27c 	.word	0x2000a27c
   1a744:	00022969 	.word	0x00022969
   1a748:	0001faab 	.word	0x0001faab
   1a74c:	2000a2d0 	.word	0x2000a2d0
   1a750:	0001fae5 	.word	0x0001fae5

0001a754 <z_impl_k_poll_signal_raise>:
{
   1a754:	b570      	push	{r4, r5, r6, lr}
   1a756:	4604      	mov	r4, r0
   1a758:	460d      	mov	r5, r1
	__asm__ volatile(
   1a75a:	f04f 0320 	mov.w	r3, #32
   1a75e:	f3ef 8611 	mrs	r6, BASEPRI
   1a762:	f383 8811 	msr	BASEPRI, r3
   1a766:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a76a:	481c      	ldr	r0, [pc, #112]	; (1a7dc <z_impl_k_poll_signal_raise+0x88>)
   1a76c:	f7ff f94c 	bl	19a08 <z_spin_lock_valid>
   1a770:	b940      	cbnz	r0, 1a784 <z_impl_k_poll_signal_raise+0x30>
   1a772:	491b      	ldr	r1, [pc, #108]	; (1a7e0 <z_impl_k_poll_signal_raise+0x8c>)
   1a774:	481b      	ldr	r0, [pc, #108]	; (1a7e4 <z_impl_k_poll_signal_raise+0x90>)
   1a776:	227c      	movs	r2, #124	; 0x7c
   1a778:	f000 f932 	bl	1a9e0 <printk>
   1a77c:	217c      	movs	r1, #124	; 0x7c
   1a77e:	4818      	ldr	r0, [pc, #96]	; (1a7e0 <z_impl_k_poll_signal_raise+0x8c>)
   1a780:	f000 fbd4 	bl	1af2c <assert_post_action>
	z_spin_lock_set_owner(l);
   1a784:	4815      	ldr	r0, [pc, #84]	; (1a7dc <z_impl_k_poll_signal_raise+0x88>)
   1a786:	f7ff f95b 	bl	19a40 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1a78a:	2101      	movs	r1, #1
	return list->head == list;
   1a78c:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1a78e:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a790:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1a792:	60a1      	str	r1, [r4, #8]
   1a794:	d112      	bne.n	1a7bc <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a796:	4811      	ldr	r0, [pc, #68]	; (1a7dc <z_impl_k_poll_signal_raise+0x88>)
   1a798:	f7ff f944 	bl	19a24 <z_spin_unlock_valid>
   1a79c:	b940      	cbnz	r0, 1a7b0 <z_impl_k_poll_signal_raise+0x5c>
   1a79e:	4910      	ldr	r1, [pc, #64]	; (1a7e0 <z_impl_k_poll_signal_raise+0x8c>)
   1a7a0:	4810      	ldr	r0, [pc, #64]	; (1a7e4 <z_impl_k_poll_signal_raise+0x90>)
   1a7a2:	22a7      	movs	r2, #167	; 0xa7
   1a7a4:	f000 f91c 	bl	1a9e0 <printk>
   1a7a8:	21a7      	movs	r1, #167	; 0xa7
   1a7aa:	480d      	ldr	r0, [pc, #52]	; (1a7e0 <z_impl_k_poll_signal_raise+0x8c>)
   1a7ac:	f000 fbbe 	bl	1af2c <assert_post_action>
	__asm__ volatile(
   1a7b0:	f386 8811 	msr	BASEPRI, r6
   1a7b4:	f3bf 8f6f 	isb	sy
		return 0;
   1a7b8:	2400      	movs	r4, #0
   1a7ba:	e00d      	b.n	1a7d8 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1a7bc:	e9d0 3200 	ldrd	r3, r2, [r0]
   1a7c0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a7c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a7c4:	2300      	movs	r3, #0
	node->prev = NULL;
   1a7c6:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a7ca:	f7ff fced 	bl	1a1a8 <signal_poll_event>
	z_reschedule(&lock, key);
   1a7ce:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a7d0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1a7d2:	4802      	ldr	r0, [pc, #8]	; (1a7dc <z_impl_k_poll_signal_raise+0x88>)
   1a7d4:	f7fd ff96 	bl	18704 <z_reschedule>
}
   1a7d8:	4620      	mov	r0, r4
   1a7da:	bd70      	pop	{r4, r5, r6, pc}
   1a7dc:	2000a2d0 	.word	0x2000a2d0
   1a7e0:	0001fae5 	.word	0x0001fae5
   1a7e4:	0001faab 	.word	0x0001faab

0001a7e8 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1a7e8:	2803      	cmp	r0, #3
{
   1a7ea:	b538      	push	{r3, r4, r5, lr}
   1a7ec:	4604      	mov	r4, r0
   1a7ee:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1a7f0:	d901      	bls.n	1a7f6 <k_aligned_alloc+0xe>
   1a7f2:	0783      	lsls	r3, r0, #30
   1a7f4:	d008      	beq.n	1a808 <k_aligned_alloc+0x20>
   1a7f6:	490e      	ldr	r1, [pc, #56]	; (1a830 <k_aligned_alloc+0x48>)
   1a7f8:	480e      	ldr	r0, [pc, #56]	; (1a834 <k_aligned_alloc+0x4c>)
   1a7fa:	223e      	movs	r2, #62	; 0x3e
   1a7fc:	f000 f8f0 	bl	1a9e0 <printk>
   1a800:	213e      	movs	r1, #62	; 0x3e
   1a802:	480b      	ldr	r0, [pc, #44]	; (1a830 <k_aligned_alloc+0x48>)
   1a804:	f000 fb92 	bl	1af2c <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1a808:	1e63      	subs	r3, r4, #1
   1a80a:	4223      	tst	r3, r4
   1a80c:	d008      	beq.n	1a820 <k_aligned_alloc+0x38>
   1a80e:	4908      	ldr	r1, [pc, #32]	; (1a830 <k_aligned_alloc+0x48>)
   1a810:	4808      	ldr	r0, [pc, #32]	; (1a834 <k_aligned_alloc+0x4c>)
   1a812:	2242      	movs	r2, #66	; 0x42
   1a814:	f000 f8e4 	bl	1a9e0 <printk>
   1a818:	2142      	movs	r1, #66	; 0x42
   1a81a:	4805      	ldr	r0, [pc, #20]	; (1a830 <k_aligned_alloc+0x48>)
   1a81c:	f000 fb86 	bl	1af2c <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a820:	462a      	mov	r2, r5
   1a822:	4621      	mov	r1, r4
}
   1a824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a828:	4803      	ldr	r0, [pc, #12]	; (1a838 <k_aligned_alloc+0x50>)
   1a82a:	f003 bce4 	b.w	1e1f6 <z_heap_aligned_alloc>
   1a82e:	bf00      	nop
   1a830:	0002298a 	.word	0x0002298a
   1a834:	0001faab 	.word	0x0001faab
   1a838:	20008510 	.word	0x20008510

0001a83c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1a83c:	b538      	push	{r3, r4, r5, lr}
   1a83e:	4604      	mov	r4, r0
   1a840:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1a842:	f003 fbeb 	bl	1e01c <k_is_in_isr>
   1a846:	b958      	cbnz	r0, 1a860 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1a848:	4b07      	ldr	r3, [pc, #28]	; (1a868 <z_thread_aligned_alloc+0x2c>)
   1a84a:	689b      	ldr	r3, [r3, #8]
   1a84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1a850:	b143      	cbz	r3, 1a864 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1a852:	462a      	mov	r2, r5
   1a854:	4621      	mov	r1, r4
   1a856:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1a858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1a85c:	f003 bccb 	b.w	1e1f6 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1a860:	4b02      	ldr	r3, [pc, #8]	; (1a86c <z_thread_aligned_alloc+0x30>)
   1a862:	e7f6      	b.n	1a852 <z_thread_aligned_alloc+0x16>
}
   1a864:	bd38      	pop	{r3, r4, r5, pc}
   1a866:	bf00      	nop
   1a868:	2000a27c 	.word	0x2000a27c
   1a86c:	20008510 	.word	0x20008510

0001a870 <_ZN13DeviceManager12le_param_reqEP7bt_connP16bt_le_conn_param>:
}
   1a870:	2001      	movs	r0, #1
   1a872:	4770      	bx	lr

0001a874 <_ZN13DeviceManager16le_param_updatedEP7bt_connttt>:
{}
   1a874:	4770      	bx	lr

0001a876 <_ZN13DeviceManager10app_led_cbEb>:
{
   1a876:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1a878:	2003      	movs	r0, #3
   1a87a:	f7fc b9eb 	b.w	16c54 <dk_set_led>

0001a87e <_ZN13DeviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   1a87e:	f7ef b855 	b.w	992c <_ZN13DeviceManager8initScanEv>

0001a882 <_ZN13DeviceManager14checkAddressesEPcS0_>:

bool DeviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   1a882:	2300      	movs	r3, #0
{
   1a884:	b530      	push	{r4, r5, lr}
   1a886:	1e42      	subs	r2, r0, #1
   1a888:	3901      	subs	r1, #1
   1a88a:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   1a88c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1a890:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a894:	42a5      	cmp	r5, r4
		{
			cnt++;
   1a896:	bf04      	itt	eq
   1a898:	3301      	addeq	r3, #1
   1a89a:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   1a89c:	4282      	cmp	r2, r0
   1a89e:	d1f5      	bne.n	1a88c <_ZN13DeviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   1a8a0:	3b11      	subs	r3, #17
   1a8a2:	4258      	negs	r0, r3
   1a8a4:	4158      	adcs	r0, r3
   1a8a6:	bd30      	pop	{r4, r5, pc}

0001a8a8 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1a8a8:	f001 bd78 	b.w	1c39c <bt_conn_get_dst>

0001a8ac <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1a8ae:	2364      	movs	r3, #100	; 0x64
{
   1a8b0:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1a8b2:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1a8b4:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1a8b6:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1a8ba:	b111      	cbz	r1, 1a8c2 <u8_to_dec+0x16>
   1a8bc:	3d01      	subs	r5, #1
   1a8be:	d101      	bne.n	1a8c4 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1a8c0:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1a8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1a8c4:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a8c8:	429a      	cmp	r2, r3
		digit = value / divisor;
   1a8ca:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a8cc:	d202      	bcs.n	1a8d4 <u8_to_dec+0x28>
   1a8ce:	2b01      	cmp	r3, #1
   1a8d0:	d000      	beq.n	1a8d4 <u8_to_dec+0x28>
   1a8d2:	b130      	cbz	r0, 1a8e2 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1a8d4:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1a8d6:	3901      	subs	r1, #1
			num_digits++;
   1a8d8:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1a8da:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1a8de:	b2c9      	uxtb	r1, r1
			num_digits++;
   1a8e0:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1a8e2:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1a8e6:	fbb3 f3fc 	udiv	r3, r3, ip
   1a8ea:	b2d2      	uxtb	r2, r2
   1a8ec:	e7e5      	b.n	1a8ba <u8_to_dec+0xe>

0001a8ee <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1a8ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a8f2:	b2db      	uxtb	r3, r3
   1a8f4:	2b09      	cmp	r3, #9
   1a8f6:	d802      	bhi.n	1a8fe <char2hex+0x10>
		*x = c - '0';
   1a8f8:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1a8fa:	2000      	movs	r0, #0
   1a8fc:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1a8fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a902:	2b05      	cmp	r3, #5
   1a904:	d802      	bhi.n	1a90c <char2hex+0x1e>
		*x = c - 'a' + 10;
   1a906:	3857      	subs	r0, #87	; 0x57
   1a908:	7008      	strb	r0, [r1, #0]
   1a90a:	e7f6      	b.n	1a8fa <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1a90c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a910:	2b05      	cmp	r3, #5
   1a912:	d801      	bhi.n	1a918 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1a914:	3837      	subs	r0, #55	; 0x37
   1a916:	e7f7      	b.n	1a908 <char2hex+0x1a>
		return -EINVAL;
   1a918:	f06f 0015 	mvn.w	r0, #21
}
   1a91c:	4770      	bx	lr

0001a91e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1a91e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a920:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1a922:	f001 0001 	and.w	r0, r1, #1
   1a926:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1a92a:	429d      	cmp	r5, r3
   1a92c:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1a930:	d903      	bls.n	1a93a <hex2bin+0x1c>
		return 0;
   1a932:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1a934:	4628      	mov	r0, r5
   1a936:	b003      	add	sp, #12
   1a938:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1a93a:	b158      	cbz	r0, 1a954 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1a93c:	7820      	ldrb	r0, [r4, #0]
   1a93e:	f10d 0107 	add.w	r1, sp, #7
   1a942:	f7ff ffd4 	bl	1a8ee <char2hex>
   1a946:	2800      	cmp	r0, #0
   1a948:	dbf3      	blt.n	1a932 <hex2bin+0x14>
		buf[0] = dec;
   1a94a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1a94e:	3401      	adds	r4, #1
		buf[0] = dec;
   1a950:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a954:	3401      	adds	r4, #1
   1a956:	4416      	add	r6, r2
   1a958:	42b2      	cmp	r2, r6
   1a95a:	d0eb      	beq.n	1a934 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1a95c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1a960:	f10d 0107 	add.w	r1, sp, #7
   1a964:	f7ff ffc3 	bl	1a8ee <char2hex>
   1a968:	2800      	cmp	r0, #0
   1a96a:	dbe2      	blt.n	1a932 <hex2bin+0x14>
		buf[i] = dec << 4;
   1a96c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a970:	011b      	lsls	r3, r3, #4
   1a972:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1a974:	f814 0b02 	ldrb.w	r0, [r4], #2
   1a978:	f7ff ffb9 	bl	1a8ee <char2hex>
   1a97c:	2800      	cmp	r0, #0
   1a97e:	dbd8      	blt.n	1a932 <hex2bin+0x14>
		buf[i] += dec;
   1a980:	7813      	ldrb	r3, [r2, #0]
   1a982:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1a986:	440b      	add	r3, r1
   1a988:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a98c:	e7e4      	b.n	1a958 <hex2bin+0x3a>

0001a98e <sys_notify_validate>:
	if (notify == NULL) {
   1a98e:	4603      	mov	r3, r0
   1a990:	b140      	cbz	r0, 1a9a4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a992:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a994:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1a998:	2a02      	cmp	r2, #2
   1a99a:	d006      	beq.n	1a9aa <sys_notify_validate+0x1c>
   1a99c:	2a03      	cmp	r2, #3
   1a99e:	d004      	beq.n	1a9aa <sys_notify_validate+0x1c>
   1a9a0:	2a01      	cmp	r2, #1
   1a9a2:	d005      	beq.n	1a9b0 <sys_notify_validate+0x22>
		return -EINVAL;
   1a9a4:	f06f 0015 	mvn.w	r0, #21
}
   1a9a8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1a9aa:	681a      	ldr	r2, [r3, #0]
   1a9ac:	2a00      	cmp	r2, #0
   1a9ae:	d0f9      	beq.n	1a9a4 <sys_notify_validate+0x16>
		notify->result = 0;
   1a9b0:	2000      	movs	r0, #0
   1a9b2:	6098      	str	r0, [r3, #8]
   1a9b4:	4770      	bx	lr

0001a9b6 <arch_printk_char_out>:
}
   1a9b6:	2000      	movs	r0, #0
   1a9b8:	4770      	bx	lr

0001a9ba <str_out>:
{
   1a9ba:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a9bc:	688a      	ldr	r2, [r1, #8]
   1a9be:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1a9c0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a9c2:	b114      	cbz	r4, 1a9ca <str_out+0x10>
   1a9c4:	684b      	ldr	r3, [r1, #4]
   1a9c6:	4293      	cmp	r3, r2
   1a9c8:	dc01      	bgt.n	1a9ce <str_out+0x14>
		ctx->count++;
   1a9ca:	608d      	str	r5, [r1, #8]
}
   1a9cc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1a9ce:	3b01      	subs	r3, #1
   1a9d0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1a9d2:	bf08      	it	eq
   1a9d4:	2200      	moveq	r2, #0
   1a9d6:	608d      	str	r5, [r1, #8]
   1a9d8:	bf0c      	ite	eq
   1a9da:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1a9dc:	54a0      	strbne	r0, [r4, r2]
   1a9de:	e7f5      	b.n	1a9cc <str_out+0x12>

0001a9e0 <printk>:
{
   1a9e0:	b40f      	push	{r0, r1, r2, r3}
   1a9e2:	b507      	push	{r0, r1, r2, lr}
   1a9e4:	a904      	add	r1, sp, #16
   1a9e6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1a9ea:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1a9ec:	f7ef ffd6 	bl	a99c <vprintk>
}
   1a9f0:	b003      	add	sp, #12
   1a9f2:	f85d eb04 	ldr.w	lr, [sp], #4
   1a9f6:	b004      	add	sp, #16
   1a9f8:	4770      	bx	lr

0001a9fa <snprintk>:
{
   1a9fa:	b40c      	push	{r2, r3}
   1a9fc:	b507      	push	{r0, r1, r2, lr}
   1a9fe:	ab04      	add	r3, sp, #16
   1aa00:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1aa04:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1aa06:	f7ef ffd7 	bl	a9b8 <vsnprintk>
}
   1aa0a:	b003      	add	sp, #12
   1aa0c:	f85d eb04 	ldr.w	lr, [sp], #4
   1aa10:	b002      	add	sp, #8
   1aa12:	4770      	bx	lr

0001aa14 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1aa14:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1aa16:	f013 0307 	ands.w	r3, r3, #7
   1aa1a:	d105      	bne.n	1aa28 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1aa1c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1aa1e:	2b00      	cmp	r3, #0
   1aa20:	bf0c      	ite	eq
   1aa22:	2000      	moveq	r0, #0
   1aa24:	2003      	movne	r0, #3
   1aa26:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1aa28:	2b02      	cmp	r3, #2
   1aa2a:	d105      	bne.n	1aa38 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1aa2c:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1aa2e:	2b00      	cmp	r3, #0
   1aa30:	bf14      	ite	ne
   1aa32:	2000      	movne	r0, #0
   1aa34:	2004      	moveq	r0, #4
   1aa36:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1aa38:	2b01      	cmp	r3, #1
   1aa3a:	d105      	bne.n	1aa48 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1aa3c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1aa3e:	2b00      	cmp	r3, #0
   1aa40:	bf0c      	ite	eq
   1aa42:	2000      	moveq	r0, #0
   1aa44:	2005      	movne	r0, #5
   1aa46:	4770      	bx	lr
	int evt = EVT_NOP;
   1aa48:	2000      	movs	r0, #0
}
   1aa4a:	4770      	bx	lr

0001aa4c <notify_one>:
{
   1aa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa50:	460d      	mov	r5, r1
   1aa52:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1aa54:	4619      	mov	r1, r3
   1aa56:	1d28      	adds	r0, r5, #4
{
   1aa58:	4690      	mov	r8, r2
   1aa5a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1aa5c:	f7ef ff64 	bl	a928 <sys_notify_finalize>
	if (cb) {
   1aa60:	4604      	mov	r4, r0
   1aa62:	b138      	cbz	r0, 1aa74 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1aa64:	4633      	mov	r3, r6
   1aa66:	4642      	mov	r2, r8
   1aa68:	4629      	mov	r1, r5
   1aa6a:	4638      	mov	r0, r7
   1aa6c:	46a4      	mov	ip, r4
}
   1aa6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1aa72:	4760      	bx	ip
}
   1aa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aa78 <validate_args>:
{
   1aa78:	b510      	push	{r4, lr}
   1aa7a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1aa7c:	b140      	cbz	r0, 1aa90 <validate_args+0x18>
   1aa7e:	b139      	cbz	r1, 1aa90 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1aa80:	1d08      	adds	r0, r1, #4
   1aa82:	f7ff ff84 	bl	1a98e <sys_notify_validate>
	if ((rv == 0)
   1aa86:	b928      	cbnz	r0, 1aa94 <validate_args+0x1c>
	    && ((cli->notify.flags
   1aa88:	68a3      	ldr	r3, [r4, #8]
   1aa8a:	f033 0303 	bics.w	r3, r3, #3
   1aa8e:	d001      	beq.n	1aa94 <validate_args+0x1c>
		rv = -EINVAL;
   1aa90:	f06f 0015 	mvn.w	r0, #21
}
   1aa94:	bd10      	pop	{r4, pc}

0001aa96 <onoff_manager_init>:
{
   1aa96:	b538      	push	{r3, r4, r5, lr}
   1aa98:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1aa9a:	4605      	mov	r5, r0
   1aa9c:	b158      	cbz	r0, 1aab6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1aa9e:	b151      	cbz	r1, 1aab6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1aaa0:	680b      	ldr	r3, [r1, #0]
   1aaa2:	b143      	cbz	r3, 1aab6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1aaa4:	684b      	ldr	r3, [r1, #4]
   1aaa6:	b133      	cbz	r3, 1aab6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1aaa8:	2220      	movs	r2, #32
   1aaaa:	2100      	movs	r1, #0
   1aaac:	f001 f9ed 	bl	1be8a <memset>
	return 0;
   1aab0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1aab2:	612c      	str	r4, [r5, #16]
}
   1aab4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1aab6:	f06f 0015 	mvn.w	r0, #21
   1aaba:	e7fb      	b.n	1aab4 <onoff_manager_init+0x1e>

0001aabc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1aabc:	4604      	mov	r4, r0
   1aabe:	b508      	push	{r3, lr}
   1aac0:	4608      	mov	r0, r1
   1aac2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1aac4:	461a      	mov	r2, r3
   1aac6:	47a0      	blx	r4
	return z_impl_k_current_get();
   1aac8:	f7fe fdac 	bl	19624 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1aacc:	f7f3 fb78 	bl	e1c0 <z_impl_k_thread_abort>

0001aad0 <chunk_field>:
	if (big_heap(h)) {
   1aad0:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1aad2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1aad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1aada:	bf2c      	ite	cs
   1aadc:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1aae0:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1aae4:	4770      	bx	lr

0001aae6 <chunk_set>:
	void *cmem = &buf[c];
   1aae6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1aaea:	6880      	ldr	r0, [r0, #8]
   1aaec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1aaf0:	bf2c      	ite	cs
   1aaf2:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1aaf6:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1aafa:	4770      	bx	lr

0001aafc <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1aafc:	2201      	movs	r2, #1
{
   1aafe:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1ab00:	f7ff ffe6 	bl	1aad0 <chunk_field>
}
   1ab04:	40d0      	lsrs	r0, r2
   1ab06:	bd08      	pop	{r3, pc}

0001ab08 <set_chunk_used>:
	if (big_heap(h)) {
   1ab08:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1ab0a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ab0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ab12:	d308      	bcc.n	1ab26 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ab14:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1ab16:	b11a      	cbz	r2, 1ab20 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ab18:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ab1c:	604b      	str	r3, [r1, #4]
   1ab1e:	4770      	bx	lr
   1ab20:	f023 0301 	bic.w	r3, r3, #1
   1ab24:	e7fa      	b.n	1ab1c <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ab26:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1ab28:	b11a      	cbz	r2, 1ab32 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ab2a:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ab2e:	804b      	strh	r3, [r1, #2]
}
   1ab30:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ab32:	f023 0301 	bic.w	r3, r3, #1
   1ab36:	e7fa      	b.n	1ab2e <set_chunk_used+0x26>

0001ab38 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ab38:	0053      	lsls	r3, r2, #1
   1ab3a:	2201      	movs	r2, #1
   1ab3c:	f7ff bfd3 	b.w	1aae6 <chunk_set>

0001ab40 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1ab40:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1ab44:	bf2c      	ite	cs
   1ab46:	2008      	movcs	r0, #8
   1ab48:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ab4a:	3107      	adds	r1, #7
   1ab4c:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1ab4e:	08c0      	lsrs	r0, r0, #3
   1ab50:	4770      	bx	lr

0001ab52 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1ab52:	b508      	push	{r3, lr}
   1ab54:	460b      	mov	r3, r1
   1ab56:	2101      	movs	r1, #1
   1ab58:	f7ff fff2 	bl	1ab40 <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1ab5c:	3301      	adds	r3, #1
   1ab5e:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1ab60:	fab3 f083 	clz	r0, r3
}
   1ab64:	f1c0 001f 	rsb	r0, r0, #31
   1ab68:	bd08      	pop	{r3, pc}

0001ab6a <free_list_remove_bidx>:
{
   1ab6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab6e:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1ab70:	2203      	movs	r2, #3
   1ab72:	460e      	mov	r6, r1
   1ab74:	4604      	mov	r4, r0
   1ab76:	f7ff ffab 	bl	1aad0 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1ab7a:	4286      	cmp	r6, r0
   1ab7c:	4605      	mov	r5, r0
   1ab7e:	f107 0804 	add.w	r8, r7, #4
   1ab82:	d10b      	bne.n	1ab9c <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1ab84:	2301      	movs	r3, #1
   1ab86:	fa03 f707 	lsl.w	r7, r3, r7
   1ab8a:	68e3      	ldr	r3, [r4, #12]
   1ab8c:	ea23 0307 	bic.w	r3, r3, r7
   1ab90:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1ab92:	2300      	movs	r3, #0
   1ab94:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1ab9c:	4631      	mov	r1, r6
   1ab9e:	2202      	movs	r2, #2
   1aba0:	4620      	mov	r0, r4
   1aba2:	f7ff ff95 	bl	1aad0 <chunk_field>
   1aba6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1aba8:	462b      	mov	r3, r5
   1abaa:	4601      	mov	r1, r0
   1abac:	2203      	movs	r2, #3
   1abae:	4620      	mov	r0, r4
		b->next = second;
   1abb0:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1abb4:	f7ff ff97 	bl	1aae6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1abb8:	4633      	mov	r3, r6
   1abba:	4629      	mov	r1, r5
   1abbc:	4620      	mov	r0, r4
}
   1abbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1abc2:	2202      	movs	r2, #2
   1abc4:	f7ff bf8f 	b.w	1aae6 <chunk_set>

0001abc8 <free_list_remove>:
{
   1abc8:	b570      	push	{r4, r5, r6, lr}
   1abca:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1abcc:	6886      	ldr	r6, [r0, #8]
   1abce:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1abd0:	f7ff ff94 	bl	1aafc <chunk_size>
   1abd4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1abd8:	4601      	mov	r1, r0
   1abda:	d301      	bcc.n	1abe0 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1abdc:	2801      	cmp	r0, #1
   1abde:	d009      	beq.n	1abf4 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1abe0:	4630      	mov	r0, r6
   1abe2:	f7ff ffb6 	bl	1ab52 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1abe6:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1abe8:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1abea:	4620      	mov	r0, r4
}
   1abec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1abf0:	f7ff bfbb 	b.w	1ab6a <free_list_remove_bidx>
}
   1abf4:	bd70      	pop	{r4, r5, r6, pc}

0001abf6 <alloc_chunk>:
{
   1abf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1abfa:	6886      	ldr	r6, [r0, #8]
   1abfc:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1abfe:	4630      	mov	r0, r6
{
   1ac00:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1ac02:	f7ff ffa6 	bl	1ab52 <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1ac06:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1ac08:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1ac0a:	4630      	mov	r0, r6
   1ac0c:	f7ff ffa1 	bl	1ab52 <bucket_idx.isra.0>
   1ac10:	42a8      	cmp	r0, r5
   1ac12:	da03      	bge.n	1ac1c <alloc_chunk+0x26>
		return 0;
   1ac14:	2600      	movs	r6, #0
}
   1ac16:	4630      	mov	r0, r6
   1ac18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1ac1c:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1ac20:	f8da 9010 	ldr.w	r9, [sl, #16]
   1ac24:	f1b9 0f00 	cmp.w	r9, #0
   1ac28:	d019      	beq.n	1ac5e <alloc_chunk+0x68>
   1ac2a:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1ac2c:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1ac30:	4620      	mov	r0, r4
   1ac32:	4631      	mov	r1, r6
   1ac34:	f7ff ff62 	bl	1aafc <chunk_size>
   1ac38:	4540      	cmp	r0, r8
   1ac3a:	d305      	bcc.n	1ac48 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1ac3c:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1ac3e:	4631      	mov	r1, r6
   1ac40:	4620      	mov	r0, r4
   1ac42:	f7ff ff92 	bl	1ab6a <free_list_remove_bidx>
		return c;
   1ac46:	e7e6      	b.n	1ac16 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1ac48:	2203      	movs	r2, #3
   1ac4a:	4631      	mov	r1, r6
   1ac4c:	4620      	mov	r0, r4
   1ac4e:	f7ff ff3f 	bl	1aad0 <chunk_field>
		} while (--i && b->next != first);
   1ac52:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1ac54:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1ac58:	d001      	beq.n	1ac5e <alloc_chunk+0x68>
   1ac5a:	4581      	cmp	r9, r0
   1ac5c:	d1e6      	bne.n	1ac2c <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1ac5e:	f04f 32ff 	mov.w	r2, #4294967295
   1ac62:	68e3      	ldr	r3, [r4, #12]
   1ac64:	3501      	adds	r5, #1
   1ac66:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1ac68:	401a      	ands	r2, r3
   1ac6a:	d0d3      	beq.n	1ac14 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1ac6c:	fa92 f2a2 	rbit	r2, r2
   1ac70:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ac74:	1d13      	adds	r3, r2, #4
   1ac76:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1ac7a:	e7e0      	b.n	1ac3e <alloc_chunk+0x48>

0001ac7c <split_chunks>:
{
   1ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac80:	4614      	mov	r4, r2
   1ac82:	460e      	mov	r6, r1
   1ac84:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1ac86:	f7ff ff39 	bl	1aafc <chunk_size>
	size_t lsz = rc - lc;
   1ac8a:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1ac8e:	1b37      	subs	r7, r6, r4
   1ac90:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1ac92:	4642      	mov	r2, r8
   1ac94:	4631      	mov	r1, r6
   1ac96:	4628      	mov	r0, r5
   1ac98:	f7ff ff4e 	bl	1ab38 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1ac9c:	463a      	mov	r2, r7
   1ac9e:	4621      	mov	r1, r4
   1aca0:	4628      	mov	r0, r5
   1aca2:	f7ff ff49 	bl	1ab38 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1aca6:	4643      	mov	r3, r8
   1aca8:	2200      	movs	r2, #0
   1acaa:	4621      	mov	r1, r4
   1acac:	4628      	mov	r0, r5
   1acae:	f7ff ff1a 	bl	1aae6 <chunk_set>
	return c + chunk_size(h, c);
   1acb2:	4621      	mov	r1, r4
   1acb4:	4628      	mov	r0, r5
   1acb6:	f7ff ff21 	bl	1aafc <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1acba:	463b      	mov	r3, r7
   1acbc:	1821      	adds	r1, r4, r0
   1acbe:	2200      	movs	r2, #0
   1acc0:	4628      	mov	r0, r5
}
   1acc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1acc6:	f7ff bf0e 	b.w	1aae6 <chunk_set>

0001acca <merge_chunks>:
{
   1acca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1acce:	4616      	mov	r6, r2
   1acd0:	4604      	mov	r4, r0
   1acd2:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1acd4:	f7ff ff12 	bl	1aafc <chunk_size>
   1acd8:	4631      	mov	r1, r6
   1acda:	4605      	mov	r5, r0
   1acdc:	4620      	mov	r0, r4
   1acde:	f7ff ff0d 	bl	1aafc <chunk_size>
   1ace2:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1ace4:	462a      	mov	r2, r5
   1ace6:	4639      	mov	r1, r7
   1ace8:	4620      	mov	r0, r4
   1acea:	f7ff ff25 	bl	1ab38 <set_chunk_size>
	return c + chunk_size(h, c);
   1acee:	4631      	mov	r1, r6
   1acf0:	4620      	mov	r0, r4
   1acf2:	f7ff ff03 	bl	1aafc <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1acf6:	462b      	mov	r3, r5
   1acf8:	1831      	adds	r1, r6, r0
   1acfa:	2200      	movs	r2, #0
   1acfc:	4620      	mov	r0, r4
}
   1acfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad02:	f7ff bef0 	b.w	1aae6 <chunk_set>

0001ad06 <free_list_add>:
{
   1ad06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad0a:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1ad0c:	6886      	ldr	r6, [r0, #8]
   1ad0e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ad10:	f7ff fef4 	bl	1aafc <chunk_size>
   1ad14:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ad18:	4601      	mov	r1, r0
   1ad1a:	d301      	bcc.n	1ad20 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1ad1c:	2801      	cmp	r0, #1
   1ad1e:	d033      	beq.n	1ad88 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ad20:	4630      	mov	r0, r6
   1ad22:	f7ff ff16 	bl	1ab52 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1ad26:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1ad2a:	6916      	ldr	r6, [r2, #16]
   1ad2c:	b99e      	cbnz	r6, 1ad56 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1ad2e:	2301      	movs	r3, #1
   1ad30:	fa03 f000 	lsl.w	r0, r3, r0
   1ad34:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1ad36:	4629      	mov	r1, r5
   1ad38:	4303      	orrs	r3, r0
   1ad3a:	60e3      	str	r3, [r4, #12]
   1ad3c:	4620      	mov	r0, r4
		b->next = c;
   1ad3e:	6115      	str	r5, [r2, #16]
   1ad40:	462b      	mov	r3, r5
   1ad42:	2202      	movs	r2, #2
   1ad44:	f7ff fecf 	bl	1aae6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ad48:	2203      	movs	r2, #3
   1ad4a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1ad4c:	4620      	mov	r0, r4
}
   1ad4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad52:	f7ff bec8 	b.w	1aae6 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1ad56:	2202      	movs	r2, #2
   1ad58:	4631      	mov	r1, r6
   1ad5a:	4620      	mov	r0, r4
   1ad5c:	f7ff feb8 	bl	1aad0 <chunk_field>
   1ad60:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1ad62:	4603      	mov	r3, r0
   1ad64:	4629      	mov	r1, r5
   1ad66:	4620      	mov	r0, r4
   1ad68:	f7ff febd 	bl	1aae6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ad6c:	2203      	movs	r2, #3
   1ad6e:	4633      	mov	r3, r6
   1ad70:	4629      	mov	r1, r5
   1ad72:	4620      	mov	r0, r4
   1ad74:	f7ff feb7 	bl	1aae6 <chunk_set>
   1ad78:	4639      	mov	r1, r7
   1ad7a:	462b      	mov	r3, r5
   1ad7c:	4620      	mov	r0, r4
   1ad7e:	f7ff feb2 	bl	1aae6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ad82:	2202      	movs	r2, #2
   1ad84:	4631      	mov	r1, r6
   1ad86:	e7e1      	b.n	1ad4c <free_list_add+0x46>
   1ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ad8c <free_chunk>:
{
   1ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad8e:	460c      	mov	r4, r1
   1ad90:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1ad92:	f7ff feb3 	bl	1aafc <chunk_size>
   1ad96:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ad98:	2201      	movs	r2, #1
   1ad9a:	4631      	mov	r1, r6
   1ad9c:	4628      	mov	r0, r5
   1ad9e:	f7ff fe97 	bl	1aad0 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1ada2:	07c3      	lsls	r3, r0, #31
   1ada4:	d40c      	bmi.n	1adc0 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1ada6:	4631      	mov	r1, r6
   1ada8:	4628      	mov	r0, r5
   1adaa:	f7ff ff0d 	bl	1abc8 <free_list_remove>
	return c + chunk_size(h, c);
   1adae:	4621      	mov	r1, r4
   1adb0:	4628      	mov	r0, r5
   1adb2:	f7ff fea3 	bl	1aafc <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1adb6:	4621      	mov	r1, r4
   1adb8:	1822      	adds	r2, r4, r0
   1adba:	4628      	mov	r0, r5
   1adbc:	f7ff ff85 	bl	1acca <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1adc0:	2200      	movs	r2, #0
   1adc2:	4621      	mov	r1, r4
   1adc4:	4628      	mov	r0, r5
   1adc6:	f7ff fe83 	bl	1aad0 <chunk_field>
   1adca:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1adcc:	2201      	movs	r2, #1
   1adce:	4639      	mov	r1, r7
   1add0:	4628      	mov	r0, r5
   1add2:	f7ff fe7d 	bl	1aad0 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1add6:	ea10 0602 	ands.w	r6, r0, r2
   1adda:	d113      	bne.n	1ae04 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1addc:	4639      	mov	r1, r7
   1adde:	4628      	mov	r0, r5
   1ade0:	f7ff fef2 	bl	1abc8 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ade4:	4621      	mov	r1, r4
   1ade6:	4632      	mov	r2, r6
   1ade8:	4628      	mov	r0, r5
   1adea:	f7ff fe71 	bl	1aad0 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1adee:	4622      	mov	r2, r4
   1adf0:	1a21      	subs	r1, r4, r0
   1adf2:	4628      	mov	r0, r5
   1adf4:	f7ff ff69 	bl	1acca <merge_chunks>
   1adf8:	4621      	mov	r1, r4
   1adfa:	4632      	mov	r2, r6
   1adfc:	4628      	mov	r0, r5
   1adfe:	f7ff fe67 	bl	1aad0 <chunk_field>
   1ae02:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1ae04:	4621      	mov	r1, r4
   1ae06:	4628      	mov	r0, r5
}
   1ae08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1ae0c:	f7ff bf7b 	b.w	1ad06 <free_list_add>

0001ae10 <sys_heap_alloc>:
{
   1ae10:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1ae12:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1ae14:	b909      	cbnz	r1, 1ae1a <sys_heap_alloc+0xa>
		return NULL;
   1ae16:	2000      	movs	r0, #0
}
   1ae18:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1ae1a:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1ae1c:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1ae20:	d9f9      	bls.n	1ae16 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1ae22:	f7ff fe8d 	bl	1ab40 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1ae26:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1ae28:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1ae2a:	4630      	mov	r0, r6
   1ae2c:	f7ff fee3 	bl	1abf6 <alloc_chunk>
	if (c == 0U) {
   1ae30:	4604      	mov	r4, r0
   1ae32:	2800      	cmp	r0, #0
   1ae34:	d0ef      	beq.n	1ae16 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1ae36:	4601      	mov	r1, r0
   1ae38:	4630      	mov	r0, r6
   1ae3a:	f7ff fe5f 	bl	1aafc <chunk_size>
   1ae3e:	42a8      	cmp	r0, r5
   1ae40:	d909      	bls.n	1ae56 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1ae42:	4425      	add	r5, r4
   1ae44:	4621      	mov	r1, r4
   1ae46:	4630      	mov	r0, r6
   1ae48:	462a      	mov	r2, r5
   1ae4a:	f7ff ff17 	bl	1ac7c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1ae4e:	4629      	mov	r1, r5
   1ae50:	4630      	mov	r0, r6
   1ae52:	f7ff ff58 	bl	1ad06 <free_list_add>
	set_chunk_used(h, c, true);
   1ae56:	4621      	mov	r1, r4
   1ae58:	4630      	mov	r0, r6
   1ae5a:	2201      	movs	r2, #1
   1ae5c:	f7ff fe54 	bl	1ab08 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1ae60:	68b3      	ldr	r3, [r6, #8]
   1ae62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ae66:	bf2c      	ite	cs
   1ae68:	2308      	movcs	r3, #8
   1ae6a:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ae6c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ae70:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1ae72:	e7d1      	b.n	1ae18 <sys_heap_alloc+0x8>

0001ae74 <encode_uint>:
{
   1ae74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae78:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1ae7a:	78d3      	ldrb	r3, [r2, #3]
{
   1ae7c:	4680      	mov	r8, r0
	switch (specifier) {
   1ae7e:	2b6f      	cmp	r3, #111	; 0x6f
{
   1ae80:	460f      	mov	r7, r1
   1ae82:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ae84:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1ae88:	d029      	beq.n	1aede <encode_uint+0x6a>
   1ae8a:	d824      	bhi.n	1aed6 <encode_uint+0x62>
		return 16;
   1ae8c:	2b58      	cmp	r3, #88	; 0x58
   1ae8e:	bf14      	ite	ne
   1ae90:	260a      	movne	r6, #10
   1ae92:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1ae94:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1ae98:	4632      	mov	r2, r6
   1ae9a:	2300      	movs	r3, #0
   1ae9c:	4640      	mov	r0, r8
   1ae9e:	4639      	mov	r1, r7
   1aea0:	f7ed fe44 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1aea4:	2a09      	cmp	r2, #9
   1aea6:	b2d4      	uxtb	r4, r2
   1aea8:	d81e      	bhi.n	1aee8 <encode_uint+0x74>
   1aeaa:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1aeac:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1aeae:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1aeb0:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1aeb4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1aeb8:	d301      	bcc.n	1aebe <encode_uint+0x4a>
   1aeba:	45d1      	cmp	r9, sl
   1aebc:	d811      	bhi.n	1aee2 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1aebe:	782b      	ldrb	r3, [r5, #0]
   1aec0:	069b      	lsls	r3, r3, #26
   1aec2:	d505      	bpl.n	1aed0 <encode_uint+0x5c>
		if (radix == 8) {
   1aec4:	2e08      	cmp	r6, #8
   1aec6:	d115      	bne.n	1aef4 <encode_uint+0x80>
			conv->altform_0 = true;
   1aec8:	78ab      	ldrb	r3, [r5, #2]
   1aeca:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1aece:	70ab      	strb	r3, [r5, #2]
}
   1aed0:	4648      	mov	r0, r9
   1aed2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1aed6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1aeda:	2b70      	cmp	r3, #112	; 0x70
   1aedc:	e7d7      	b.n	1ae8e <encode_uint+0x1a>
	switch (specifier) {
   1aede:	2608      	movs	r6, #8
   1aee0:	e7d8      	b.n	1ae94 <encode_uint+0x20>
		value /= radix;
   1aee2:	4680      	mov	r8, r0
   1aee4:	460f      	mov	r7, r1
   1aee6:	e7d7      	b.n	1ae98 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1aee8:	f1bb 0f19 	cmp.w	fp, #25
   1aeec:	bf94      	ite	ls
   1aeee:	3437      	addls	r4, #55	; 0x37
   1aef0:	3457      	addhi	r4, #87	; 0x57
   1aef2:	e7db      	b.n	1aeac <encode_uint+0x38>
		} else if (radix == 16) {
   1aef4:	2e10      	cmp	r6, #16
   1aef6:	d1eb      	bne.n	1aed0 <encode_uint+0x5c>
			conv->altform_0c = true;
   1aef8:	78ab      	ldrb	r3, [r5, #2]
   1aefa:	f043 0310 	orr.w	r3, r3, #16
   1aefe:	e7e6      	b.n	1aece <encode_uint+0x5a>

0001af00 <outs>:
{
   1af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af04:	4607      	mov	r7, r0
   1af06:	4688      	mov	r8, r1
   1af08:	4615      	mov	r5, r2
   1af0a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1af0c:	4614      	mov	r4, r2
   1af0e:	42b4      	cmp	r4, r6
   1af10:	eba4 0005 	sub.w	r0, r4, r5
   1af14:	d302      	bcc.n	1af1c <outs+0x1c>
   1af16:	b93e      	cbnz	r6, 1af28 <outs+0x28>
   1af18:	7823      	ldrb	r3, [r4, #0]
   1af1a:	b12b      	cbz	r3, 1af28 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1af1c:	4641      	mov	r1, r8
   1af1e:	f814 0b01 	ldrb.w	r0, [r4], #1
   1af22:	47b8      	blx	r7
		if (rc < 0) {
   1af24:	2800      	cmp	r0, #0
   1af26:	daf2      	bge.n	1af0e <outs+0xe>
}
   1af28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001af2c <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1af2c:	4040      	eors	r0, r0
   1af2e:	f380 8811 	msr	BASEPRI, r0
   1af32:	f04f 0004 	mov.w	r0, #4
   1af36:	df02      	svc	2
}
   1af38:	4770      	bx	lr

0001af3a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1af3a:	4770      	bx	lr

0001af3c <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1af3c:	f04f 0320 	mov.w	r3, #32
   1af40:	f3ef 8111 	mrs	r1, BASEPRI
   1af44:	f383 8811 	msr	BASEPRI, r3
   1af48:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1af4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1af50:	2201      	movs	r2, #1
   1af52:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1af56:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1af5a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1af5e:	f381 8811 	msr	BASEPRI, r1
   1af62:	f3bf 8f6f 	isb	sy
}
   1af66:	2000      	movs	r0, #0
   1af68:	4770      	bx	lr

0001af6a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1af6a:	f002 bba9 	b.w	1d6c0 <SystemInit>

0001af6e <virtio_get_status>:
}
   1af6e:	2004      	movs	r0, #4
   1af70:	4770      	bx	lr

0001af72 <virtio_get_features>:
}
   1af72:	2001      	movs	r0, #1
   1af74:	4770      	bx	lr

0001af76 <virtio_set_features>:
}
   1af76:	4770      	bx	lr

0001af78 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1af78:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1af7a:	21b4      	movs	r1, #180	; 0xb4
   1af7c:	2004      	movs	r0, #4
   1af7e:	f7ff fc33 	bl	1a7e8 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1af82:	4604      	mov	r4, r0
   1af84:	b118      	cbz	r0, 1af8e <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1af86:	22b4      	movs	r2, #180	; 0xb4
   1af88:	2100      	movs	r1, #0
   1af8a:	f000 ff7e 	bl	1be8a <memset>
	}

	return vqs;
}
   1af8e:	4620      	mov	r0, r4
   1af90:	bd10      	pop	{r4, pc}

0001af92 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1af92:	f002 bea4 	b.w	1dcde <rpmsg_destroy_ept>

0001af96 <settings_load>:
	return settings_load_subtree(NULL);
   1af96:	2000      	movs	r0, #0
   1af98:	f7f0 beae 	b.w	bcf8 <settings_load_subtree>

0001af9c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1af9c:	2200      	movs	r2, #0
   1af9e:	4611      	mov	r1, r2
   1afa0:	f7f0 be84 	b.w	bcac <settings_save_one>

0001afa4 <settings_name_steq>:
{
   1afa4:	4603      	mov	r3, r0
   1afa6:	b530      	push	{r4, r5, lr}
   1afa8:	4608      	mov	r0, r1
	if (next) {
   1afaa:	b10a      	cbz	r2, 1afb0 <settings_name_steq+0xc>
		*next = NULL;
   1afac:	2100      	movs	r1, #0
   1afae:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1afb0:	b163      	cbz	r3, 1afcc <settings_name_steq+0x28>
   1afb2:	b190      	cbz	r0, 1afda <settings_name_steq+0x36>
   1afb4:	1e41      	subs	r1, r0, #1
   1afb6:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1afb8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1afbc:	4604      	mov	r4, r0
   1afbe:	f810 3b01 	ldrb.w	r3, [r0], #1
   1afc2:	b15d      	cbz	r5, 1afdc <settings_name_steq+0x38>
   1afc4:	429d      	cmp	r5, r3
   1afc6:	d101      	bne.n	1afcc <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1afc8:	2d3d      	cmp	r5, #61	; 0x3d
   1afca:	d1f5      	bne.n	1afb8 <settings_name_steq+0x14>
	return 0;
   1afcc:	2000      	movs	r0, #0
   1afce:	e004      	b.n	1afda <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1afd0:	2b3d      	cmp	r3, #61	; 0x3d
   1afd2:	d008      	beq.n	1afe6 <settings_name_steq+0x42>
   1afd4:	fab3 f083 	clz	r0, r3
   1afd8:	0940      	lsrs	r0, r0, #5
}
   1afda:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1afdc:	2b2f      	cmp	r3, #47	; 0x2f
   1afde:	d1f7      	bne.n	1afd0 <settings_name_steq+0x2c>
		if (next) {
   1afe0:	b10a      	cbz	r2, 1afe6 <settings_name_steq+0x42>
			*next = name + 1;
   1afe2:	3401      	adds	r4, #1
   1afe4:	6014      	str	r4, [r2, #0]
		return 1;
   1afe6:	2001      	movs	r0, #1
   1afe8:	e7f7      	b.n	1afda <settings_name_steq+0x36>

0001afea <settings_name_next>:
{
   1afea:	4603      	mov	r3, r0
   1afec:	b530      	push	{r4, r5, lr}
	if (next) {
   1afee:	b109      	cbz	r1, 1aff4 <settings_name_next+0xa>
		*next = NULL;
   1aff0:	2200      	movs	r2, #0
   1aff2:	600a      	str	r2, [r1, #0]
	if (!name) {
   1aff4:	b16b      	cbz	r3, 1b012 <settings_name_next+0x28>
   1aff6:	461a      	mov	r2, r3
   1aff8:	4614      	mov	r4, r2
   1affa:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1affc:	f812 5b01 	ldrb.w	r5, [r2], #1
   1b000:	b135      	cbz	r5, 1b010 <settings_name_next+0x26>
   1b002:	2d3d      	cmp	r5, #61	; 0x3d
   1b004:	d004      	beq.n	1b010 <settings_name_next+0x26>
   1b006:	2d2f      	cmp	r5, #47	; 0x2f
   1b008:	d1f6      	bne.n	1aff8 <settings_name_next+0xe>
		if (next) {
   1b00a:	b109      	cbz	r1, 1b010 <settings_name_next+0x26>
			*next = name + 1;
   1b00c:	3401      	adds	r4, #1
   1b00e:	600c      	str	r4, [r1, #0]
}
   1b010:	bd30      	pop	{r4, r5, pc}
		return 0;
   1b012:	4618      	mov	r0, r3
   1b014:	e7fc      	b.n	1b010 <settings_name_next+0x26>

0001b016 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1b016:	2000      	movs	r0, #0
   1b018:	4770      	bx	lr

0001b01a <set_on_state>:
	__asm__ volatile(
   1b01a:	f04f 0320 	mov.w	r3, #32
   1b01e:	f3ef 8211 	mrs	r2, BASEPRI
   1b022:	f383 8811 	msr	BASEPRI, r3
   1b026:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1b02a:	6803      	ldr	r3, [r0, #0]
   1b02c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b030:	f043 0302 	orr.w	r3, r3, #2
   1b034:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1b036:	f382 8811 	msr	BASEPRI, r2
   1b03a:	f3bf 8f6f 	isb	sy
}
   1b03e:	4770      	bx	lr

0001b040 <async_start>:
{
   1b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b042:	9f06      	ldr	r7, [sp, #24]
   1b044:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1b046:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1b048:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1b04a:	f04f 0020 	mov.w	r0, #32
   1b04e:	f3ef 8c11 	mrs	ip, BASEPRI
   1b052:	f380 8811 	msr	BASEPRI, r0
   1b056:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b05a:	260c      	movs	r6, #12
   1b05c:	fb06 4601 	mla	r6, r6, r1, r4
   1b060:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1b064:	f000 0e07 	and.w	lr, r0, #7
   1b068:	f1be 0f01 	cmp.w	lr, #1
   1b06c:	d111      	bne.n	1b092 <_flash_used+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1b06e:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1b072:	2600      	movs	r6, #0
	__asm__ volatile(
   1b074:	f38c 8811 	msr	BASEPRI, ip
   1b078:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1b07c:	b93e      	cbnz	r6, 1b08e <_flash_used+0x26>
	subdata->cb = cb;
   1b07e:	200c      	movs	r0, #12
   1b080:	4341      	muls	r1, r0
   1b082:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1b084:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1b088:	686b      	ldr	r3, [r5, #4]
   1b08a:	585b      	ldr	r3, [r3, r1]
   1b08c:	4798      	blx	r3
}
   1b08e:	4630      	mov	r0, r6
   1b090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1b092:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1b096:	4287      	cmp	r7, r0
   1b098:	bf14      	ite	ne
   1b09a:	f04f 36ff 	movne.w	r6, #4294967295
   1b09e:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1b0a2:	e7e7      	b.n	1b074 <_flash_used+0xc>

0001b0a4 <api_start>:
{
   1b0a4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1b0a6:	2480      	movs	r4, #128	; 0x80
   1b0a8:	9400      	str	r4, [sp, #0]
   1b0aa:	f7ff ffc9 	bl	1b040 <async_start>
}
   1b0ae:	b002      	add	sp, #8
   1b0b0:	bd10      	pop	{r4, pc}

0001b0b2 <onoff_started_callback>:
	return &data->mgr[type];
   1b0b2:	68c0      	ldr	r0, [r0, #12]
   1b0b4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1b0b6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1b0ba:	2100      	movs	r1, #0
   1b0bc:	4710      	bx	r2

0001b0be <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1b0be:	2003      	movs	r0, #3
   1b0c0:	f7fb be9c 	b.w	16dfc <nrfx_clock_start>

0001b0c4 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1b0c4:	2002      	movs	r0, #2
   1b0c6:	f7fb be99 	b.w	16dfc <nrfx_clock_start>

0001b0ca <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1b0ca:	2000      	movs	r0, #0
   1b0cc:	f7fb be96 	b.w	16dfc <nrfx_clock_start>

0001b0d0 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1b0d0:	2003      	movs	r0, #3
   1b0d2:	f7fb befd 	b.w	16ed0 <nrfx_clock_stop>

0001b0d6 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1b0d6:	2002      	movs	r0, #2
   1b0d8:	f7fb befa 	b.w	16ed0 <nrfx_clock_stop>

0001b0dc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1b0dc:	2000      	movs	r0, #0
   1b0de:	f7fb bef7 	b.w	16ed0 <nrfx_clock_stop>

0001b0e2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1b0e2:	2280      	movs	r2, #128	; 0x80
   1b0e4:	f7f0 bf38 	b.w	bf58 <stop>

0001b0e8 <blocking_start_callback>:
{
   1b0e8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1b0ea:	f7fe baa1 	b.w	19630 <z_impl_k_sem_give>

0001b0ee <bt_rpmsg_open>:
{
   1b0ee:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1b0f0:	f7f1 fa32 	bl	c558 <bt_rpmsg_platform_endpoint_is_bound>
   1b0f4:	b108      	cbz	r0, 1b0fa <bt_rpmsg_open+0xc>
}
   1b0f6:	2000      	movs	r0, #0
   1b0f8:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1b0fa:	2100      	movs	r1, #0
   1b0fc:	2021      	movs	r0, #33	; 0x21
   1b0fe:	f7fe fa61 	bl	195c4 <z_impl_k_sleep>
   1b102:	e7f5      	b.n	1b0f0 <bt_rpmsg_open+0x2>

0001b104 <endpoint_cb>:
{
   1b104:	b508      	push	{r3, lr}
   1b106:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1b108:	4611      	mov	r1, r2
   1b10a:	f7f1 f93b 	bl	c384 <bt_rpmsg_rx>
}
   1b10e:	2000      	movs	r0, #0
   1b110:	bd08      	pop	{r3, pc}

0001b112 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1b112:	4770      	bx	lr

0001b114 <attr_find_by_handle>:
{
   1b114:	b570      	push	{r4, r5, r6, lr}
   1b116:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1b118:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1b11c:	b1a8      	cbz	r0, 1b14a <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1b11e:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1b120:	3801      	subs	r0, #1
	while (upper >= lower) {
   1b122:	4286      	cmp	r6, r0
   1b124:	dd01      	ble.n	1b12a <attr_find_by_handle+0x16>
		return NULL;
   1b126:	2000      	movs	r0, #0
   1b128:	e00f      	b.n	1b14a <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1b12a:	1832      	adds	r2, r6, r0
   1b12c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1b130:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1b132:	1cd5      	adds	r5, r2, #3
   1b134:	00eb      	lsls	r3, r5, #3
   1b136:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1b13a:	892d      	ldrh	r5, [r5, #8]
   1b13c:	428d      	cmp	r5, r1
   1b13e:	d201      	bcs.n	1b144 <attr_find_by_handle+0x30>
			lower = m + 1;
   1b140:	1c56      	adds	r6, r2, #1
   1b142:	e7ee      	b.n	1b122 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1b144:	d802      	bhi.n	1b14c <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1b146:	3304      	adds	r3, #4
   1b148:	18e0      	adds	r0, r4, r3
}
   1b14a:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1b14c:	1e50      	subs	r0, r2, #1
   1b14e:	e7e8      	b.n	1b122 <attr_find_by_handle+0xe>

0001b150 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1b150:	2300      	movs	r3, #0
{
   1b152:	b510      	push	{r4, lr}
   1b154:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1b156:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1b15a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1b15e:	b910      	cbnz	r0, 1b166 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1b160:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1b164:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b166:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1b16a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b16c:	4290      	cmp	r0, r2
	list->head = node;
   1b16e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1b172:	bf08      	it	eq
   1b174:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1b178:	f003 f85b 	bl	1e232 <k_free>
   1b17c:	e7ed      	b.n	1b15a <svc_attr_memory_release+0xa>

0001b17e <atomic_and>:
{
   1b17e:	4603      	mov	r3, r0
}
   1b180:	e8d3 0fef 	ldaex	r0, [r3]
   1b184:	ea00 0201 	and.w	r2, r0, r1
   1b188:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b18c:	f1bc 0f00 	cmp.w	ip, #0
   1b190:	d1f6      	bne.n	1b180 <atomic_and+0x2>
   1b192:	4770      	bx	lr

0001b194 <discovery_complete_not_found>:
{
   1b194:	b510      	push	{r4, lr}
   1b196:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1b198:	f7ff ffda 	bl	1b150 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b19c:	f06f 0101 	mvn.w	r1, #1
   1b1a0:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1b1a4:	f7ff ffeb 	bl	1b17e <atomic_and>
	if (dm->callback->service_not_found) {
   1b1a8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1b1ac:	685b      	ldr	r3, [r3, #4]
   1b1ae:	b123      	cbz	r3, 1b1ba <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1b1b0:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1b1b8:	4718      	bx	r3
}
   1b1ba:	bd10      	pop	{r4, pc}

0001b1bc <bt_gatt_dm_attr_service_val>:
{
   1b1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b1be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b1c2:	2400      	movs	r4, #0
{
   1b1c4:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b1c6:	6801      	ldr	r1, [r0, #0]
   1b1c8:	4668      	mov	r0, sp
   1b1ca:	f88d 4000 	strb.w	r4, [sp]
   1b1ce:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b1d2:	f000 fea4 	bl	1bf1e <bt_uuid_cmp>
   1b1d6:	b918      	cbnz	r0, 1b1e0 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1b1d8:	6828      	ldr	r0, [r5, #0]
   1b1da:	3808      	subs	r0, #8
}
   1b1dc:	b003      	add	sp, #12
   1b1de:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1b1e0:	f642 0301 	movw	r3, #10241	; 0x2801
   1b1e4:	6829      	ldr	r1, [r5, #0]
   1b1e6:	a801      	add	r0, sp, #4
   1b1e8:	f88d 4004 	strb.w	r4, [sp, #4]
   1b1ec:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b1f0:	f000 fe95 	bl	1bf1e <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b1f4:	2800      	cmp	r0, #0
   1b1f6:	d0ef      	beq.n	1b1d8 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1b1f8:	4620      	mov	r0, r4
   1b1fa:	e7ef      	b.n	1b1dc <bt_gatt_dm_attr_service_val+0x20>

0001b1fc <bt_gatt_dm_attr_chrc_val>:
{
   1b1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1b1fe:	f642 0303 	movw	r3, #10243	; 0x2803
   1b202:	2400      	movs	r4, #0
{
   1b204:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1b206:	6801      	ldr	r1, [r0, #0]
   1b208:	a801      	add	r0, sp, #4
   1b20a:	f88d 4004 	strb.w	r4, [sp, #4]
   1b20e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b212:	f000 fe84 	bl	1bf1e <bt_uuid_cmp>
   1b216:	b918      	cbnz	r0, 1b220 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1b218:	6828      	ldr	r0, [r5, #0]
   1b21a:	3808      	subs	r0, #8
}
   1b21c:	b003      	add	sp, #12
   1b21e:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1b220:	4620      	mov	r0, r4
   1b222:	e7fb      	b.n	1b21c <bt_gatt_dm_attr_chrc_val+0x20>

0001b224 <bt_gatt_dm_conn_get>:
}
   1b224:	6800      	ldr	r0, [r0, #0]
   1b226:	4770      	bx	lr

0001b228 <bt_gatt_dm_service_get>:
}
   1b228:	301c      	adds	r0, #28
   1b22a:	4770      	bx	lr

0001b22c <bt_gatt_dm_char_next>:
{
   1b22c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1b22e:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1b232:	b131      	cbz	r1, 1b242 <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1b234:	42a9      	cmp	r1, r5
   1b236:	d203      	bcs.n	1b240 <bt_gatt_dm_char_next+0x14>
	return NULL;
   1b238:	2500      	movs	r5, #0
}
   1b23a:	4628      	mov	r0, r5
   1b23c:	b003      	add	sp, #12
   1b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b240:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1b242:	2600      	movs	r6, #0
   1b244:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1b248:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1b24c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1b250:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1b254:	3508      	adds	r5, #8
   1b256:	42ac      	cmp	r4, r5
   1b258:	d9ee      	bls.n	1b238 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1b25a:	6829      	ldr	r1, [r5, #0]
   1b25c:	a801      	add	r0, sp, #4
   1b25e:	f88d 6004 	strb.w	r6, [sp, #4]
   1b262:	f8ad 7006 	strh.w	r7, [sp, #6]
   1b266:	f000 fe5a 	bl	1bf1e <bt_uuid_cmp>
   1b26a:	2800      	cmp	r0, #0
   1b26c:	d1f2      	bne.n	1b254 <bt_gatt_dm_char_next+0x28>
   1b26e:	e7e4      	b.n	1b23a <bt_gatt_dm_char_next+0xe>

0001b270 <bt_gatt_dm_attr_next>:
{
   1b270:	4602      	mov	r2, r0
		prev = dm->attrs;
   1b272:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1b276:	b111      	cbz	r1, 1b27e <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1b278:	4299      	cmp	r1, r3
   1b27a:	d30b      	bcc.n	1b294 <bt_gatt_dm_attr_next+0x24>
   1b27c:	460b      	mov	r3, r1
		if (++prev < end) {
   1b27e:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1b282:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1b286:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1b28a:	321c      	adds	r2, #28
	return NULL;
   1b28c:	4290      	cmp	r0, r2
   1b28e:	bf28      	it	cs
   1b290:	2000      	movcs	r0, #0
   1b292:	4770      	bx	lr
   1b294:	2000      	movs	r0, #0
}
   1b296:	4770      	bx	lr

0001b298 <bt_gatt_dm_desc_next>:
{
   1b298:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1b29a:	f7ff ffe9 	bl	1b270 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1b29e:	4604      	mov	r4, r0
   1b2a0:	b158      	cbz	r0, 1b2ba <bt_gatt_dm_desc_next+0x22>
   1b2a2:	2300      	movs	r3, #0
   1b2a4:	f88d 3004 	strb.w	r3, [sp, #4]
   1b2a8:	f642 0303 	movw	r3, #10243	; 0x2803
   1b2ac:	6801      	ldr	r1, [r0, #0]
   1b2ae:	a801      	add	r0, sp, #4
   1b2b0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b2b4:	f000 fe33 	bl	1bf1e <bt_uuid_cmp>
   1b2b8:	b900      	cbnz	r0, 1b2bc <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1b2ba:	2400      	movs	r4, #0
}
   1b2bc:	4620      	mov	r0, r4
   1b2be:	b002      	add	sp, #8
   1b2c0:	bd10      	pop	{r4, pc}

0001b2c2 <bt_gatt_dm_desc_by_uuid>:
{
   1b2c2:	b570      	push	{r4, r5, r6, lr}
   1b2c4:	4605      	mov	r5, r0
   1b2c6:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1b2c8:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1b2ca:	4621      	mov	r1, r4
   1b2cc:	4628      	mov	r0, r5
   1b2ce:	f7ff ffe3 	bl	1b298 <bt_gatt_dm_desc_next>
   1b2d2:	4604      	mov	r4, r0
   1b2d4:	b128      	cbz	r0, 1b2e2 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1b2d6:	4630      	mov	r0, r6
   1b2d8:	6821      	ldr	r1, [r4, #0]
   1b2da:	f000 fe20 	bl	1bf1e <bt_uuid_cmp>
   1b2de:	2800      	cmp	r0, #0
   1b2e0:	d1f3      	bne.n	1b2ca <bt_gatt_dm_desc_by_uuid+0x8>
}
   1b2e2:	4620      	mov	r0, r4
   1b2e4:	bd70      	pop	{r4, r5, r6, pc}

0001b2e6 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1b2e6:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1b2e8:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1b2ec:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b2ee:	f06f 0102 	mvn.w	r1, #2
   1b2f2:	4628      	mov	r0, r5
   1b2f4:	f7ff ff43 	bl	1b17e <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1b2f8:	0783      	lsls	r3, r0, #30
   1b2fa:	d509      	bpl.n	1b310 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1b2fc:	4620      	mov	r0, r4
   1b2fe:	f7ff ff27 	bl	1b150 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b302:	f06f 0101 	mvn.w	r1, #1
   1b306:	4628      	mov	r0, r5
   1b308:	f7ff ff39 	bl	1b17e <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1b30c:	2000      	movs	r0, #0
}
   1b30e:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1b310:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1b314:	e7fb      	b.n	1b30e <bt_gatt_dm_data_release+0x28>

0001b316 <bt_scan_stop>:
	return bt_le_scan_stop();
   1b316:	f7f5 be2d 	b.w	10f74 <bt_le_scan_stop>

0001b31a <bt_bas_conn>:
}
   1b31a:	6800      	ldr	r0, [r0, #0]
   1b31c:	4770      	bx	lr

0001b31e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1b31e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1b320:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1b322:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1b324:	bf9c      	itt	ls
   1b326:	6880      	ldrls	r0, [r0, #8]
   1b328:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1b32a:	3b01      	subs	r3, #1
   1b32c:	1a98      	subs	r0, r3, r2
}
   1b32e:	4770      	bx	lr

0001b330 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1b334:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b338:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1b33a:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b33e:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1b340:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b342:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b344:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1b346:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1b348:	d904      	bls.n	1b354 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b34a:	f000 fd73 	bl	1be34 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1b34e:	60ec      	str	r4, [r5, #12]
}
   1b350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b354:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1b356:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b35a:	f000 fd6b 	bl	1be34 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b35e:	4622      	mov	r2, r4
   1b360:	6868      	ldr	r0, [r5, #4]
   1b362:	eb07 0108 	add.w	r1, r7, r8
   1b366:	e7f0      	b.n	1b34a <_WriteNoCheck+0x1a>

0001b368 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1b368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b36c:	4606      	mov	r6, r0
   1b36e:	4689      	mov	r9, r1
   1b370:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1b372:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1b376:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1b378:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b37a:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1b37c:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b37e:	bf28      	it	cs
   1b380:	18e4      	addcs	r4, r4, r3
   1b382:	3c01      	subs	r4, #1
   1b384:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1b386:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1b388:	42bc      	cmp	r4, r7
   1b38a:	bf28      	it	cs
   1b38c:	463c      	movcs	r4, r7
   1b38e:	4294      	cmp	r4, r2
   1b390:	bf28      	it	cs
   1b392:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1b394:	6870      	ldr	r0, [r6, #4]
   1b396:	4649      	mov	r1, r9
   1b398:	4428      	add	r0, r5
   1b39a:	4622      	mov	r2, r4
   1b39c:	f000 fd4a 	bl	1be34 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1b3a0:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1b3a2:	4425      	add	r5, r4
      WrOff = 0u;
   1b3a4:	42ab      	cmp	r3, r5
   1b3a6:	bf08      	it	eq
   1b3a8:	2500      	moveq	r5, #0
  } while (NumBytes);
   1b3aa:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1b3ac:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1b3ae:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1b3b0:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1b3b2:	d1e1      	bne.n	1b378 <_WriteBlocking+0x10>
}
   1b3b4:	4640      	mov	r0, r8
   1b3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b3ba <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1b3ba:	f7f2 b999 	b.w	d6f0 <_DoInit>

0001b3be <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1b3be:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1b3c0:	f7ff fffb 	bl	1b3ba <SEGGER_RTT_Init>

	return 0;
}
   1b3c4:	2000      	movs	r0, #0
   1b3c6:	bd08      	pop	{r3, pc}

0001b3c8 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b3c8:	b538      	push	{r3, r4, r5, lr}
   1b3ca:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b3cc:	42ab      	cmp	r3, r5
{
   1b3ce:	4611      	mov	r1, r2
   1b3d0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b3d2:	d804      	bhi.n	1b3de <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1b3d4:	461a      	mov	r2, r3
   1b3d6:	f000 fd2d 	bl	1be34 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b3da:	4620      	mov	r0, r4
   1b3dc:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b3de:	2400      	movs	r4, #0
   1b3e0:	e7fb      	b.n	1b3da <_copy+0x12>

0001b3e2 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1b3e2:	f000 bd52 	b.w	1be8a <memset>

0001b3e6 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b3e6:	09c3      	lsrs	r3, r0, #7
   1b3e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b3ec:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b3f0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b3f4:	b2c0      	uxtb	r0, r0
   1b3f6:	4770      	bx	lr

0001b3f8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b3f8:	78cb      	ldrb	r3, [r1, #3]
   1b3fa:	7802      	ldrb	r2, [r0, #0]
   1b3fc:	4053      	eors	r3, r2
   1b3fe:	7003      	strb	r3, [r0, #0]
   1b400:	884b      	ldrh	r3, [r1, #2]
   1b402:	7842      	ldrb	r2, [r0, #1]
   1b404:	4053      	eors	r3, r2
   1b406:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b408:	680a      	ldr	r2, [r1, #0]
   1b40a:	7883      	ldrb	r3, [r0, #2]
   1b40c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b410:	7083      	strb	r3, [r0, #2]
   1b412:	680a      	ldr	r2, [r1, #0]
   1b414:	78c3      	ldrb	r3, [r0, #3]
   1b416:	4053      	eors	r3, r2
   1b418:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b41a:	79cb      	ldrb	r3, [r1, #7]
   1b41c:	7902      	ldrb	r2, [r0, #4]
   1b41e:	4053      	eors	r3, r2
   1b420:	7103      	strb	r3, [r0, #4]
   1b422:	88cb      	ldrh	r3, [r1, #6]
   1b424:	7942      	ldrb	r2, [r0, #5]
   1b426:	4053      	eors	r3, r2
   1b428:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b42a:	684a      	ldr	r2, [r1, #4]
   1b42c:	7983      	ldrb	r3, [r0, #6]
   1b42e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b432:	7183      	strb	r3, [r0, #6]
   1b434:	684a      	ldr	r2, [r1, #4]
   1b436:	79c3      	ldrb	r3, [r0, #7]
   1b438:	4053      	eors	r3, r2
   1b43a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b43c:	7acb      	ldrb	r3, [r1, #11]
   1b43e:	7a02      	ldrb	r2, [r0, #8]
   1b440:	4053      	eors	r3, r2
   1b442:	7203      	strb	r3, [r0, #8]
   1b444:	7a42      	ldrb	r2, [r0, #9]
   1b446:	894b      	ldrh	r3, [r1, #10]
   1b448:	4053      	eors	r3, r2
   1b44a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b44c:	688a      	ldr	r2, [r1, #8]
   1b44e:	7a83      	ldrb	r3, [r0, #10]
   1b450:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b454:	7283      	strb	r3, [r0, #10]
   1b456:	688a      	ldr	r2, [r1, #8]
   1b458:	7ac3      	ldrb	r3, [r0, #11]
   1b45a:	4053      	eors	r3, r2
   1b45c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b45e:	7bcb      	ldrb	r3, [r1, #15]
   1b460:	7b02      	ldrb	r2, [r0, #12]
   1b462:	4053      	eors	r3, r2
   1b464:	7303      	strb	r3, [r0, #12]
   1b466:	89cb      	ldrh	r3, [r1, #14]
   1b468:	7b42      	ldrb	r2, [r0, #13]
   1b46a:	4053      	eors	r3, r2
   1b46c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b46e:	68ca      	ldr	r2, [r1, #12]
   1b470:	7b83      	ldrb	r3, [r0, #14]
   1b472:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b476:	7383      	strb	r3, [r0, #14]
   1b478:	68ca      	ldr	r2, [r1, #12]
   1b47a:	7bc3      	ldrb	r3, [r0, #15]
   1b47c:	4053      	eors	r3, r2
   1b47e:	73c3      	strb	r3, [r0, #15]
}
   1b480:	4770      	bx	lr

0001b482 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1b482:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b484:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b486:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b488:	f88d 2000 	strb.w	r2, [sp]
   1b48c:	7942      	ldrb	r2, [r0, #5]
   1b48e:	f88d 2001 	strb.w	r2, [sp, #1]
   1b492:	7a82      	ldrb	r2, [r0, #10]
   1b494:	f88d 2002 	strb.w	r2, [sp, #2]
   1b498:	7bc2      	ldrb	r2, [r0, #15]
   1b49a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b49e:	7902      	ldrb	r2, [r0, #4]
   1b4a0:	f88d 2004 	strb.w	r2, [sp, #4]
   1b4a4:	7a42      	ldrb	r2, [r0, #9]
   1b4a6:	f88d 2005 	strb.w	r2, [sp, #5]
   1b4aa:	7b82      	ldrb	r2, [r0, #14]
   1b4ac:	f88d 2006 	strb.w	r2, [sp, #6]
   1b4b0:	78c2      	ldrb	r2, [r0, #3]
   1b4b2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b4b6:	7a02      	ldrb	r2, [r0, #8]
   1b4b8:	f88d 2008 	strb.w	r2, [sp, #8]
   1b4bc:	7b42      	ldrb	r2, [r0, #13]
   1b4be:	f88d 2009 	strb.w	r2, [sp, #9]
   1b4c2:	7882      	ldrb	r2, [r0, #2]
   1b4c4:	f88d 200a 	strb.w	r2, [sp, #10]
   1b4c8:	79c2      	ldrb	r2, [r0, #7]
   1b4ca:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b4ce:	7b02      	ldrb	r2, [r0, #12]
   1b4d0:	f88d 200c 	strb.w	r2, [sp, #12]
   1b4d4:	7842      	ldrb	r2, [r0, #1]
   1b4d6:	f88d 200d 	strb.w	r2, [sp, #13]
   1b4da:	7982      	ldrb	r2, [r0, #6]
   1b4dc:	f88d 200e 	strb.w	r2, [sp, #14]
   1b4e0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b4e4:	2310      	movs	r3, #16
   1b4e6:	466a      	mov	r2, sp
   1b4e8:	4619      	mov	r1, r3
   1b4ea:	f7ff ff6d 	bl	1b3c8 <_copy>
}
   1b4ee:	b005      	add	sp, #20
   1b4f0:	f85d fb04 	ldr.w	pc, [sp], #4

0001b4f4 <mult_row_column>:
{
   1b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4f6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b4f8:	7808      	ldrb	r0, [r1, #0]
{
   1b4fa:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b4fc:	f7ff ff73 	bl	1b3e6 <_double_byte>
   1b500:	4605      	mov	r5, r0
   1b502:	7860      	ldrb	r0, [r4, #1]
   1b504:	f7ff ff6f 	bl	1b3e6 <_double_byte>
   1b508:	78a2      	ldrb	r2, [r4, #2]
   1b50a:	7863      	ldrb	r3, [r4, #1]
   1b50c:	4053      	eors	r3, r2
   1b50e:	78e2      	ldrb	r2, [r4, #3]
   1b510:	4053      	eors	r3, r2
   1b512:	405d      	eors	r5, r3
   1b514:	4045      	eors	r5, r0
   1b516:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b518:	7860      	ldrb	r0, [r4, #1]
   1b51a:	7827      	ldrb	r7, [r4, #0]
   1b51c:	f7ff ff63 	bl	1b3e6 <_double_byte>
   1b520:	4605      	mov	r5, r0
   1b522:	78a0      	ldrb	r0, [r4, #2]
   1b524:	f7ff ff5f 	bl	1b3e6 <_double_byte>
   1b528:	78a3      	ldrb	r3, [r4, #2]
   1b52a:	405f      	eors	r7, r3
   1b52c:	78e3      	ldrb	r3, [r4, #3]
   1b52e:	405f      	eors	r7, r3
   1b530:	407d      	eors	r5, r7
   1b532:	4045      	eors	r5, r0
   1b534:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b536:	78a0      	ldrb	r0, [r4, #2]
   1b538:	7865      	ldrb	r5, [r4, #1]
   1b53a:	7827      	ldrb	r7, [r4, #0]
   1b53c:	f7ff ff53 	bl	1b3e6 <_double_byte>
   1b540:	406f      	eors	r7, r5
   1b542:	4605      	mov	r5, r0
   1b544:	78e0      	ldrb	r0, [r4, #3]
   1b546:	f7ff ff4e 	bl	1b3e6 <_double_byte>
   1b54a:	78e3      	ldrb	r3, [r4, #3]
   1b54c:	405f      	eors	r7, r3
   1b54e:	407d      	eors	r5, r7
   1b550:	4045      	eors	r5, r0
   1b552:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b554:	7820      	ldrb	r0, [r4, #0]
   1b556:	f7ff ff46 	bl	1b3e6 <_double_byte>
   1b55a:	7863      	ldrb	r3, [r4, #1]
   1b55c:	7825      	ldrb	r5, [r4, #0]
   1b55e:	405d      	eors	r5, r3
   1b560:	78a3      	ldrb	r3, [r4, #2]
   1b562:	405d      	eors	r5, r3
   1b564:	4045      	eors	r5, r0
   1b566:	78e0      	ldrb	r0, [r4, #3]
   1b568:	f7ff ff3d 	bl	1b3e6 <_double_byte>
   1b56c:	b2ed      	uxtb	r5, r5
   1b56e:	4045      	eors	r5, r0
   1b570:	70f5      	strb	r5, [r6, #3]
}
   1b572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b574 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1b574:	b570      	push	{r4, r5, r6, lr}
   1b576:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1b578:	4605      	mov	r5, r0
{
   1b57a:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1b57c:	2800      	cmp	r0, #0
   1b57e:	d049      	beq.n	1b614 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1b580:	2900      	cmp	r1, #0
   1b582:	d049      	beq.n	1b618 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1b584:	2a00      	cmp	r2, #0
   1b586:	d049      	beq.n	1b61c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1b588:	2310      	movs	r3, #16
   1b58a:	460a      	mov	r2, r1
   1b58c:	4668      	mov	r0, sp
   1b58e:	4619      	mov	r1, r3
   1b590:	f7ff ff1a 	bl	1b3c8 <_copy>
	add_round_key(state, s->words);
   1b594:	4621      	mov	r1, r4
   1b596:	4668      	mov	r0, sp
   1b598:	f7ff ff2e 	bl	1b3f8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1b59c:	3410      	adds	r4, #16
   1b59e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1b5a2:	4668      	mov	r0, sp
   1b5a4:	f7f2 f904 	bl	d7b0 <sub_bytes>
		shift_rows(state);
   1b5a8:	4668      	mov	r0, sp
   1b5aa:	f7ff ff6a 	bl	1b482 <shift_rows>
	mult_row_column(t, s);
   1b5ae:	4669      	mov	r1, sp
   1b5b0:	a804      	add	r0, sp, #16
   1b5b2:	f7ff ff9f 	bl	1b4f4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1b5b6:	a901      	add	r1, sp, #4
   1b5b8:	a805      	add	r0, sp, #20
   1b5ba:	f7ff ff9b 	bl	1b4f4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1b5be:	a902      	add	r1, sp, #8
   1b5c0:	a806      	add	r0, sp, #24
   1b5c2:	f7ff ff97 	bl	1b4f4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1b5c6:	a903      	add	r1, sp, #12
   1b5c8:	a807      	add	r0, sp, #28
   1b5ca:	f7ff ff93 	bl	1b4f4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b5ce:	2310      	movs	r3, #16
   1b5d0:	4668      	mov	r0, sp
   1b5d2:	4619      	mov	r1, r3
   1b5d4:	eb0d 0203 	add.w	r2, sp, r3
   1b5d8:	f7ff fef6 	bl	1b3c8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1b5dc:	4621      	mov	r1, r4
   1b5de:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1b5e0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1b5e2:	f7ff ff09 	bl	1b3f8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1b5e6:	42a6      	cmp	r6, r4
   1b5e8:	d1db      	bne.n	1b5a2 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1b5ea:	f7f2 f8e1 	bl	d7b0 <sub_bytes>
	shift_rows(state);
   1b5ee:	4668      	mov	r0, sp
   1b5f0:	f7ff ff47 	bl	1b482 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1b5f4:	4631      	mov	r1, r6
   1b5f6:	4668      	mov	r0, sp
   1b5f8:	f7ff fefe 	bl	1b3f8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1b5fc:	2310      	movs	r3, #16
   1b5fe:	466a      	mov	r2, sp
   1b600:	4619      	mov	r1, r3
   1b602:	4628      	mov	r0, r5
   1b604:	f7ff fee0 	bl	1b3c8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1b608:	4668      	mov	r0, sp
   1b60a:	2210      	movs	r2, #16
   1b60c:	2100      	movs	r1, #0
   1b60e:	f7ff fee8 	bl	1b3e2 <_set>

	return TC_CRYPTO_SUCCESS;
   1b612:	2001      	movs	r0, #1
}
   1b614:	b008      	add	sp, #32
   1b616:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b618:	4608      	mov	r0, r1
   1b61a:	e7fb      	b.n	1b614 <tc_aes_encrypt+0xa0>
   1b61c:	4610      	mov	r0, r2
   1b61e:	e7f9      	b.n	1b614 <tc_aes_encrypt+0xa0>

0001b620 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b620:	460a      	mov	r2, r1
{
   1b622:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b624:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1b628:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b62a:	2b00      	cmp	r3, #0
   1b62c:	bfb4      	ite	lt
   1b62e:	2387      	movlt	r3, #135	; 0x87
   1b630:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b632:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b636:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b63a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1b63c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b640:	d002      	beq.n	1b648 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b642:	7813      	ldrb	r3, [r2, #0]
   1b644:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b646:	e7f4      	b.n	1b632 <gf_double+0x12>
	}
}
   1b648:	bd10      	pop	{r4, pc}

0001b64a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b64a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b64c:	b120      	cbz	r0, 1b658 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b64e:	2258      	movs	r2, #88	; 0x58
   1b650:	2100      	movs	r1, #0
   1b652:	f7ff fec6 	bl	1b3e2 <_set>
   1b656:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b658:	bd08      	pop	{r3, pc}

0001b65a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b65a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b65c:	4604      	mov	r4, r0
   1b65e:	b188      	cbz	r0, 1b684 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b660:	2210      	movs	r2, #16
   1b662:	2100      	movs	r1, #0
   1b664:	f7ff febd 	bl	1b3e2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b668:	2210      	movs	r2, #16
   1b66a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b66e:	2100      	movs	r1, #0
   1b670:	f7ff feb7 	bl	1b3e2 <_set>
	s->leftover_offset = 0;
   1b674:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b676:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1b678:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1b67a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b67e:	2001      	movs	r0, #1
   1b680:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1b684:	bd10      	pop	{r4, pc}

0001b686 <tc_cmac_setup>:
{
   1b686:	b570      	push	{r4, r5, r6, lr}
   1b688:	460d      	mov	r5, r1
   1b68a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1b68c:	4604      	mov	r4, r0
   1b68e:	b310      	cbz	r0, 1b6d6 <tc_cmac_setup+0x50>
   1b690:	b311      	cbz	r1, 1b6d8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1b692:	2258      	movs	r2, #88	; 0x58
   1b694:	2100      	movs	r1, #0
   1b696:	f7ff fea4 	bl	1b3e2 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1b69a:	4629      	mov	r1, r5
   1b69c:	4630      	mov	r0, r6
	s->sched = sched;
   1b69e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1b6a0:	f7f2 f892 	bl	d7c8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b6a4:	2210      	movs	r2, #16
   1b6a6:	2100      	movs	r1, #0
   1b6a8:	4620      	mov	r0, r4
   1b6aa:	f7ff fe9a 	bl	1b3e2 <_set>
	gf_double (s->K1, s->iv);
   1b6ae:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b6b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b6b4:	4621      	mov	r1, r4
   1b6b6:	4620      	mov	r0, r4
   1b6b8:	f7ff ff5c 	bl	1b574 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1b6bc:	4621      	mov	r1, r4
   1b6be:	4628      	mov	r0, r5
   1b6c0:	f7ff ffae 	bl	1b620 <gf_double>
	gf_double (s->K2, s->K1);
   1b6c4:	4629      	mov	r1, r5
   1b6c6:	f104 0020 	add.w	r0, r4, #32
   1b6ca:	f7ff ffa9 	bl	1b620 <gf_double>
	tc_cmac_init(s);
   1b6ce:	4620      	mov	r0, r4
   1b6d0:	f7ff ffc3 	bl	1b65a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1b6d4:	2001      	movs	r0, #1
}
   1b6d6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b6d8:	4608      	mov	r0, r1
   1b6da:	e7fc      	b.n	1b6d6 <tc_cmac_setup+0x50>

0001b6dc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1b6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6e0:	460d      	mov	r5, r1
   1b6e2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b6e4:	4604      	mov	r4, r0
   1b6e6:	2800      	cmp	r0, #0
   1b6e8:	d061      	beq.n	1b7ae <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1b6ea:	b912      	cbnz	r2, 1b6f2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1b6ec:	2001      	movs	r0, #1
}
   1b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1b6f2:	2900      	cmp	r1, #0
   1b6f4:	d05b      	beq.n	1b7ae <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1b6f6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1b6fa:	ea53 0102 	orrs.w	r1, r3, r2
   1b6fe:	d056      	beq.n	1b7ae <tc_cmac_update+0xd2>
	s->countdown--;
   1b700:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1b702:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1b706:	f142 32ff 	adc.w	r2, r2, #4294967295
   1b70a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1b70e:	f1b8 0f00 	cmp.w	r8, #0
   1b712:	d02a      	beq.n	1b76a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b714:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b718:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1b71c:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b71e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1b720:	d208      	bcs.n	1b734 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b722:	462a      	mov	r2, r5
   1b724:	4633      	mov	r3, r6
   1b726:	4631      	mov	r1, r6
   1b728:	f7ff fe4e 	bl	1b3c8 <_copy>
			s->leftover_offset += data_length;
   1b72c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b72e:	4432      	add	r2, r6
   1b730:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1b732:	e7db      	b.n	1b6ec <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1b734:	463b      	mov	r3, r7
   1b736:	462a      	mov	r2, r5
   1b738:	4639      	mov	r1, r7
   1b73a:	f7ff fe45 	bl	1b3c8 <_copy>
		s->leftover_offset = 0;
   1b73e:	2300      	movs	r3, #0
   1b740:	3e10      	subs	r6, #16
   1b742:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b744:	4446      	add	r6, r8
		data += remaining_space;
   1b746:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b748:	1e63      	subs	r3, r4, #1
   1b74a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b74e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b752:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b756:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b758:	ea82 0200 	eor.w	r2, r2, r0
   1b75c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b75e:	d1f6      	bne.n	1b74e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b760:	4621      	mov	r1, r4
   1b762:	4620      	mov	r0, r4
   1b764:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b766:	f7ff ff05 	bl	1b574 <tc_aes_encrypt>
   1b76a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b76e:	2e10      	cmp	r6, #16
   1b770:	d80a      	bhi.n	1b788 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1b772:	2e00      	cmp	r6, #0
   1b774:	d0ba      	beq.n	1b6ec <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1b776:	4633      	mov	r3, r6
   1b778:	462a      	mov	r2, r5
   1b77a:	4631      	mov	r1, r6
   1b77c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b780:	f7ff fe22 	bl	1b3c8 <_copy>
		s->leftover_offset = data_length;
   1b784:	6466      	str	r6, [r4, #68]	; 0x44
   1b786:	e7b1      	b.n	1b6ec <tc_cmac_update+0x10>
   1b788:	1e63      	subs	r3, r4, #1
   1b78a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1b78c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b790:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b794:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b796:	ea82 0200 	eor.w	r2, r2, r0
   1b79a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b79c:	d1f6      	bne.n	1b78c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b79e:	4621      	mov	r1, r4
   1b7a0:	4620      	mov	r0, r4
   1b7a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b7a4:	f7ff fee6 	bl	1b574 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b7a8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b7aa:	3e10      	subs	r6, #16
   1b7ac:	e7df      	b.n	1b76e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1b7ae:	2000      	movs	r0, #0
   1b7b0:	e79d      	b.n	1b6ee <tc_cmac_update+0x12>

0001b7b2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b7b2:	b570      	push	{r4, r5, r6, lr}
   1b7b4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b7b6:	4605      	mov	r5, r0
   1b7b8:	b1f0      	cbz	r0, 1b7f8 <tc_cmac_final+0x46>
   1b7ba:	b371      	cbz	r1, 1b81a <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b7bc:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b7be:	2a10      	cmp	r2, #16
   1b7c0:	d11b      	bne.n	1b7fa <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b7c2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b7c4:	1e63      	subs	r3, r4, #1
   1b7c6:	3901      	subs	r1, #1
   1b7c8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b7cc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b7d0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b7d4:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b7d6:	ea82 0206 	eor.w	r2, r2, r6
   1b7da:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1b7de:	ea82 0206 	eor.w	r2, r2, r6
   1b7e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b7e4:	d1f2      	bne.n	1b7cc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b7e6:	4621      	mov	r1, r4
   1b7e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b7ea:	4628      	mov	r0, r5
   1b7ec:	f7ff fec2 	bl	1b574 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b7f0:	4620      	mov	r0, r4
   1b7f2:	f7ff ff2a 	bl	1b64a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b7f6:	2001      	movs	r0, #1
}
   1b7f8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b7fa:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b7fe:	2100      	movs	r1, #0
   1b800:	f1c2 0210 	rsb	r2, r2, #16
   1b804:	4420      	add	r0, r4
   1b806:	f7ff fdec 	bl	1b3e2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b80a:	2280      	movs	r2, #128	; 0x80
   1b80c:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1b80e:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b812:	4423      	add	r3, r4
   1b814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b818:	e7d4      	b.n	1b7c4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b81a:	4608      	mov	r0, r1
   1b81c:	e7ec      	b.n	1b7f8 <tc_cmac_final+0x46>

0001b81e <tc_sha256_update>:
{
   1b81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b820:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1b822:	b110      	cbz	r0, 1b82a <tc_sha256_update+0xc>
   1b824:	b1f9      	cbz	r1, 1b866 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1b826:	b90a      	cbnz	r2, 1b82c <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1b828:	2001      	movs	r0, #1
}
   1b82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1b82c:	2600      	movs	r6, #0
   1b82e:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1b830:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1b834:	42a5      	cmp	r5, r4
   1b836:	d0f7      	beq.n	1b828 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1b838:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b83a:	1c5a      	adds	r2, r3, #1
   1b83c:	6682      	str	r2, [r0, #104]	; 0x68
   1b83e:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b842:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b844:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1b846:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b84a:	d9f3      	bls.n	1b834 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1b84c:	4639      	mov	r1, r7
   1b84e:	f7f2 f80f 	bl	d870 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b852:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1b856:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1b85a:	f142 0200 	adc.w	r2, r2, #0
   1b85e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1b862:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b864:	e7e6      	b.n	1b834 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1b866:	4608      	mov	r0, r1
   1b868:	e7df      	b.n	1b82a <tc_sha256_update+0xc>

0001b86a <tc_sha256_final>:
{
   1b86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b86c:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1b86e:	4605      	mov	r5, r0
   1b870:	2800      	cmp	r0, #0
   1b872:	d055      	beq.n	1b920 <tc_sha256_final+0xb6>
   1b874:	2900      	cmp	r1, #0
   1b876:	d054      	beq.n	1b922 <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1b878:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1b87a:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1b87e:	00d8      	lsls	r0, r3, #3
   1b880:	1812      	adds	r2, r2, r0
   1b882:	f141 0100 	adc.w	r1, r1, #0
   1b886:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b88a:	2280      	movs	r2, #128	; 0x80
   1b88c:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b88e:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b890:	4423      	add	r3, r4
   1b892:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1b894:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b898:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1b89c:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b8a0:	d90a      	bls.n	1b8b8 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1b8a2:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1b8a6:	4639      	mov	r1, r7
   1b8a8:	4430      	add	r0, r6
   1b8aa:	f7ff fd9a 	bl	1b3e2 <_set>
		compress(s->iv, s->leftover);
   1b8ae:	4631      	mov	r1, r6
   1b8b0:	4620      	mov	r0, r4
   1b8b2:	f7f1 ffdd 	bl	d870 <compress>
		s->leftover_offset = 0;
   1b8b6:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1b8b8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1b8ba:	2100      	movs	r1, #0
   1b8bc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1b8c0:	4430      	add	r0, r6
   1b8c2:	f7ff fd8e 	bl	1b3e2 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b8c6:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1b8c8:	4631      	mov	r1, r6
   1b8ca:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1b8ce:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b8d0:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1b8d2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b8d6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b8da:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b8dc:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1b8de:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b8e0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b8e4:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1b8e8:	f7f1 ffc2 	bl	d870 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b8ec:	1f26      	subs	r6, r4, #4
   1b8ee:	1d2b      	adds	r3, r5, #4
   1b8f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1b8f4:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b8f8:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1b8fa:	0e11      	lsrs	r1, r2, #24
   1b8fc:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1b900:	0c11      	lsrs	r1, r2, #16
   1b902:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1b906:	0a11      	lsrs	r1, r2, #8
   1b908:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1b90c:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b910:	4283      	cmp	r3, r0
   1b912:	d1ef      	bne.n	1b8f4 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1b914:	4620      	mov	r0, r4
   1b916:	2270      	movs	r2, #112	; 0x70
   1b918:	2100      	movs	r1, #0
   1b91a:	f7ff fd62 	bl	1b3e2 <_set>
	return TC_CRYPTO_SUCCESS;
   1b91e:	2001      	movs	r0, #1
}
   1b920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b922:	4608      	mov	r0, r1
   1b924:	e7fc      	b.n	1b920 <tc_sha256_final+0xb6>

0001b926 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1b926:	b530      	push	{r4, r5, lr}
   1b928:	1e43      	subs	r3, r0, #1
   1b92a:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1b92c:	42a9      	cmp	r1, r5
   1b92e:	d106      	bne.n	1b93e <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b930:	2136      	movs	r1, #54	; 0x36
   1b932:	245c      	movs	r4, #92	; 0x5c
   1b934:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b936:	1a13      	subs	r3, r2, r0
   1b938:	2b3f      	cmp	r3, #63	; 0x3f
   1b93a:	d90c      	bls.n	1b956 <rekey+0x30>
	}
}
   1b93c:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1b93e:	780c      	ldrb	r4, [r1, #0]
   1b940:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1b944:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1b948:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b94c:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1b950:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1b954:	e7ea      	b.n	1b92c <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b956:	f802 1b01 	strb.w	r1, [r2], #1
   1b95a:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b95e:	e7ea      	b.n	1b936 <rekey+0x10>

0001b960 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1b960:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b962:	460e      	mov	r6, r1
   1b964:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1b966:	4605      	mov	r5, r0
{
   1b968:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1b96a:	b1b8      	cbz	r0, 1b99c <tc_hmac_set_key+0x3c>
   1b96c:	b341      	cbz	r1, 1b9c0 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1b96e:	b34a      	cbz	r2, 1b9c4 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b970:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1b972:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b976:	d813      	bhi.n	1b9a0 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1b978:	a810      	add	r0, sp, #64	; 0x40
   1b97a:	f7f2 f861 	bl	da40 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1b97e:	4622      	mov	r2, r4
   1b980:	4669      	mov	r1, sp
   1b982:	a810      	add	r0, sp, #64	; 0x40
   1b984:	f7ff ff4b 	bl	1b81e <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1b988:	a910      	add	r1, sp, #64	; 0x40
   1b98a:	a834      	add	r0, sp, #208	; 0xd0
   1b98c:	f7ff ff6d 	bl	1b86a <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1b990:	4622      	mov	r2, r4
   1b992:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1b994:	4638      	mov	r0, r7
   1b996:	f7ff ffc6 	bl	1b926 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1b99a:	2001      	movs	r0, #1
}
   1b99c:	b04d      	add	sp, #308	; 0x134
   1b99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1b9a0:	f7f2 f84e 	bl	da40 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b9a4:	4622      	mov	r2, r4
   1b9a6:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b9a8:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b9ac:	4628      	mov	r0, r5
   1b9ae:	f7ff ff36 	bl	1b81e <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b9b2:	4629      	mov	r1, r5
   1b9b4:	4620      	mov	r0, r4
   1b9b6:	f7ff ff58 	bl	1b86a <tc_sha256_final>
		rekey(ctx->key,
   1b9ba:	2220      	movs	r2, #32
   1b9bc:	4621      	mov	r1, r4
   1b9be:	e7e9      	b.n	1b994 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1b9c0:	4608      	mov	r0, r1
   1b9c2:	e7eb      	b.n	1b99c <tc_hmac_set_key+0x3c>
   1b9c4:	4610      	mov	r0, r2
   1b9c6:	e7e9      	b.n	1b99c <tc_hmac_set_key+0x3c>

0001b9c8 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1b9c8:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b9ca:	4604      	mov	r4, r0
   1b9cc:	b140      	cbz	r0, 1b9e0 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1b9ce:	f7f2 f837 	bl	da40 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1b9d2:	2240      	movs	r2, #64	; 0x40
   1b9d4:	4620      	mov	r0, r4
   1b9d6:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1b9da:	f7ff ff20 	bl	1b81e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b9de:	2001      	movs	r0, #1
}
   1b9e0:	bd10      	pop	{r4, pc}

0001b9e2 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1b9e2:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b9e4:	b110      	cbz	r0, 1b9ec <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1b9e6:	f7ff ff1a 	bl	1b81e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b9ea:	2001      	movs	r0, #1
}
   1b9ec:	bd08      	pop	{r3, pc}

0001b9ee <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1b9ee:	b570      	push	{r4, r5, r6, lr}
   1b9f0:	460e      	mov	r6, r1
   1b9f2:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b9f4:	4605      	mov	r5, r0
   1b9f6:	b1f0      	cbz	r0, 1ba36 <tc_hmac_final+0x48>
   1b9f8:	2920      	cmp	r1, #32
   1b9fa:	d11c      	bne.n	1ba36 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1b9fc:	b1ea      	cbz	r2, 1ba3a <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1b9fe:	4611      	mov	r1, r2
   1ba00:	f7ff ff33 	bl	1b86a <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1ba04:	4620      	mov	r0, r4
   1ba06:	f7f2 f81b 	bl	da40 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1ba0a:	2240      	movs	r2, #64	; 0x40
   1ba0c:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1ba10:	4620      	mov	r0, r4
   1ba12:	f7ff ff04 	bl	1b81e <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1ba16:	4632      	mov	r2, r6
   1ba18:	4629      	mov	r1, r5
   1ba1a:	4620      	mov	r0, r4
   1ba1c:	f7ff feff 	bl	1b81e <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1ba20:	4621      	mov	r1, r4
   1ba22:	4628      	mov	r0, r5
   1ba24:	f7ff ff21 	bl	1b86a <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1ba28:	4620      	mov	r0, r4
   1ba2a:	22f0      	movs	r2, #240	; 0xf0
   1ba2c:	2100      	movs	r1, #0
   1ba2e:	f7ff fcd8 	bl	1b3e2 <_set>

	return TC_CRYPTO_SUCCESS;
   1ba32:	2001      	movs	r0, #1
}
   1ba34:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1ba36:	2000      	movs	r0, #0
   1ba38:	e7fc      	b.n	1ba34 <tc_hmac_final+0x46>
   1ba3a:	4610      	mov	r0, r2
   1ba3c:	e7fa      	b.n	1ba34 <tc_hmac_final+0x46>

0001ba3e <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1ba3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba42:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1ba44:	f04f 0b01 	mov.w	fp, #1
{
   1ba48:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1ba4a:	2300      	movs	r3, #0
{
   1ba4c:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ba4e:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1ba52:	4631      	mov	r1, r6
{
   1ba54:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ba56:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1ba58:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1ba5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1ba60:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ba64:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ba68:	f7ff ff7a 	bl	1b960 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1ba6c:	4620      	mov	r0, r4
   1ba6e:	f7ff ffab 	bl	1b9c8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ba72:	2220      	movs	r2, #32
   1ba74:	4629      	mov	r1, r5
   1ba76:	4620      	mov	r0, r4
   1ba78:	f7ff ffb3 	bl	1b9e2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1ba7c:	465a      	mov	r2, fp
   1ba7e:	4620      	mov	r0, r4
   1ba80:	f10d 0106 	add.w	r1, sp, #6
   1ba84:	f7ff ffad 	bl	1b9e2 <tc_hmac_update>

	if (data && datalen)
   1ba88:	f1b8 0f00 	cmp.w	r8, #0
   1ba8c:	d007      	beq.n	1ba9e <update+0x60>
   1ba8e:	f1b9 0f00 	cmp.w	r9, #0
   1ba92:	d004      	beq.n	1ba9e <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1ba94:	464a      	mov	r2, r9
   1ba96:	4641      	mov	r1, r8
   1ba98:	4620      	mov	r0, r4
   1ba9a:	f7ff ffa2 	bl	1b9e2 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1ba9e:	b13f      	cbz	r7, 1bab0 <update+0x72>
   1baa0:	f1ba 0f00 	cmp.w	sl, #0
   1baa4:	d004      	beq.n	1bab0 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1baa6:	4652      	mov	r2, sl
   1baa8:	4639      	mov	r1, r7
   1baaa:	4620      	mov	r0, r4
   1baac:	f7ff ff99 	bl	1b9e2 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bab0:	4622      	mov	r2, r4
   1bab2:	2120      	movs	r1, #32
   1bab4:	4630      	mov	r0, r6
   1bab6:	f7ff ff9a 	bl	1b9ee <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1baba:	2220      	movs	r2, #32
   1babc:	4631      	mov	r1, r6
   1babe:	4620      	mov	r0, r4
   1bac0:	f7ff ff4e 	bl	1b960 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bac4:	4620      	mov	r0, r4
   1bac6:	f7ff ff7f 	bl	1b9c8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1baca:	2220      	movs	r2, #32
   1bacc:	4629      	mov	r1, r5
   1bace:	4620      	mov	r0, r4
   1bad0:	f7ff ff87 	bl	1b9e2 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bad4:	4622      	mov	r2, r4
   1bad6:	2120      	movs	r1, #32
   1bad8:	4628      	mov	r0, r5
   1bada:	f7ff ff88 	bl	1b9ee <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1bade:	f1b8 0f00 	cmp.w	r8, #0
   1bae2:	d03a      	beq.n	1bb5a <update+0x11c>
   1bae4:	f1b9 0f00 	cmp.w	r9, #0
   1bae8:	d037      	beq.n	1bb5a <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1baea:	2220      	movs	r2, #32
   1baec:	4631      	mov	r1, r6
   1baee:	4620      	mov	r0, r4
   1baf0:	f7ff ff36 	bl	1b960 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1baf4:	4620      	mov	r0, r4
   1baf6:	f7ff ff67 	bl	1b9c8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bafa:	2220      	movs	r2, #32
   1bafc:	4629      	mov	r1, r5
   1bafe:	4620      	mov	r0, r4
   1bb00:	f7ff ff6f 	bl	1b9e2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1bb04:	2201      	movs	r2, #1
   1bb06:	f10d 0107 	add.w	r1, sp, #7
   1bb0a:	4620      	mov	r0, r4
   1bb0c:	f7ff ff69 	bl	1b9e2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1bb10:	464a      	mov	r2, r9
   1bb12:	4641      	mov	r1, r8
   1bb14:	4620      	mov	r0, r4
   1bb16:	f7ff ff64 	bl	1b9e2 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1bb1a:	b13f      	cbz	r7, 1bb2c <update+0xee>
   1bb1c:	f1ba 0f00 	cmp.w	sl, #0
   1bb20:	d004      	beq.n	1bb2c <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1bb22:	4652      	mov	r2, sl
   1bb24:	4639      	mov	r1, r7
   1bb26:	4620      	mov	r0, r4
   1bb28:	f7ff ff5b 	bl	1b9e2 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bb2c:	4622      	mov	r2, r4
   1bb2e:	2120      	movs	r1, #32
   1bb30:	4630      	mov	r0, r6
   1bb32:	f7ff ff5c 	bl	1b9ee <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bb36:	2220      	movs	r2, #32
   1bb38:	4631      	mov	r1, r6
   1bb3a:	4620      	mov	r0, r4
   1bb3c:	f7ff ff10 	bl	1b960 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bb40:	4620      	mov	r0, r4
   1bb42:	f7ff ff41 	bl	1b9c8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bb46:	2220      	movs	r2, #32
   1bb48:	4629      	mov	r1, r5
   1bb4a:	4620      	mov	r0, r4
   1bb4c:	f7ff ff49 	bl	1b9e2 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bb50:	4622      	mov	r2, r4
   1bb52:	2120      	movs	r1, #32
   1bb54:	4628      	mov	r0, r5
   1bb56:	f7ff ff4a 	bl	1b9ee <tc_hmac_final>
}
   1bb5a:	b003      	add	sp, #12
   1bb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bb60 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1bb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bb62:	460c      	mov	r4, r1
   1bb64:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1bb66:	4605      	mov	r5, r0
   1bb68:	b1b0      	cbz	r0, 1bb98 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1bb6a:	b1b9      	cbz	r1, 1bb9c <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1bb6c:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1bb6e:	2220      	movs	r2, #32
   1bb70:	2100      	movs	r1, #0
   1bb72:	30f0      	adds	r0, #240	; 0xf0
   1bb74:	f7ff fc35 	bl	1b3e2 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1bb78:	2220      	movs	r2, #32
   1bb7a:	2101      	movs	r1, #1
   1bb7c:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1bb80:	f7ff fc2f 	bl	1b3e2 <_set>
	update(prng, personalization, plen, 0, 0);
   1bb84:	4628      	mov	r0, r5
   1bb86:	4633      	mov	r3, r6
   1bb88:	463a      	mov	r2, r7
   1bb8a:	4621      	mov	r1, r4
   1bb8c:	9600      	str	r6, [sp, #0]
   1bb8e:	f7ff ff56 	bl	1ba3e <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1bb92:	2001      	movs	r0, #1
	prng->countdown = 0;
   1bb94:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1bb98:	b003      	add	sp, #12
   1bb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1bb9c:	4608      	mov	r0, r1
   1bb9e:	e7fb      	b.n	1bb98 <tc_hmac_prng_init+0x38>

0001bba0 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1bba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bba2:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1bba4:	4605      	mov	r5, r0
   1bba6:	b180      	cbz	r0, 1bbca <tc_hmac_prng_reseed+0x2a>
   1bba8:	b179      	cbz	r1, 1bbca <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1bbaa:	2a1f      	cmp	r2, #31
   1bbac:	d90d      	bls.n	1bbca <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1bbae:	b153      	cbz	r3, 1bbc6 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1bbb0:	b16c      	cbz	r4, 1bbce <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1bbb2:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1bbb4:	f7ff ff43 	bl	1ba3e <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1bbb8:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1bbbc:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1bbbe:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1bbc2:	b003      	add	sp, #12
   1bbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1bbc6:	9300      	str	r3, [sp, #0]
   1bbc8:	e7f4      	b.n	1bbb4 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1bbca:	2000      	movs	r0, #0
   1bbcc:	e7f9      	b.n	1bbc2 <tc_hmac_prng_reseed+0x22>
   1bbce:	4620      	mov	r0, r4
   1bbd0:	e7f7      	b.n	1bbc2 <tc_hmac_prng_reseed+0x22>

0001bbd2 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1bbd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bbd6:	460d      	mov	r5, r1
   1bbd8:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1bbda:	4680      	mov	r8, r0
   1bbdc:	b3d8      	cbz	r0, 1bc56 <tc_hmac_prng_generate+0x84>
   1bbde:	b3d2      	cbz	r2, 1bc56 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1bbe0:	1e4b      	subs	r3, r1, #1
   1bbe2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1bbe6:	d236      	bcs.n	1bc56 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1bbe8:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1bbec:	b3ab      	cbz	r3, 1bc5a <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1bbee:	3b01      	subs	r3, #1
   1bbf0:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bbf4:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bbf8:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bbfc:	2220      	movs	r2, #32
   1bbfe:	4649      	mov	r1, r9
   1bc00:	4620      	mov	r0, r4
   1bc02:	f7ff fead 	bl	1b960 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1bc06:	4620      	mov	r0, r4
   1bc08:	f7ff fede 	bl	1b9c8 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bc0c:	2220      	movs	r2, #32
   1bc0e:	4639      	mov	r1, r7
   1bc10:	4620      	mov	r0, r4
   1bc12:	f7ff fee6 	bl	1b9e2 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bc16:	4622      	mov	r2, r4
   1bc18:	2120      	movs	r1, #32
   1bc1a:	4638      	mov	r0, r7
   1bc1c:	f7ff fee7 	bl	1b9ee <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1bc20:	2d20      	cmp	r5, #32
   1bc22:	462e      	mov	r6, r5
   1bc24:	bf28      	it	cs
   1bc26:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1bc28:	4640      	mov	r0, r8
   1bc2a:	4633      	mov	r3, r6
   1bc2c:	463a      	mov	r2, r7
   1bc2e:	4631      	mov	r1, r6
   1bc30:	f7ff fbca 	bl	1b3c8 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1bc34:	2d20      	cmp	r5, #32
   1bc36:	bf38      	it	cc
   1bc38:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1bc3a:	3d20      	subs	r5, #32
		out += bufferlen;
   1bc3c:	44b0      	add	r8, r6
	while (outlen != 0) {
   1bc3e:	d1dd      	bne.n	1bbfc <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1bc40:	4620      	mov	r0, r4
   1bc42:	462b      	mov	r3, r5
   1bc44:	462a      	mov	r2, r5
   1bc46:	4629      	mov	r1, r5
   1bc48:	9500      	str	r5, [sp, #0]
   1bc4a:	f7ff fef8 	bl	1ba3e <update>

	return TC_CRYPTO_SUCCESS;
   1bc4e:	2001      	movs	r0, #1
}
   1bc50:	b003      	add	sp, #12
   1bc52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1bc56:	2000      	movs	r0, #0
   1bc58:	e7fa      	b.n	1bc50 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1bc5a:	f04f 30ff 	mov.w	r0, #4294967295
   1bc5e:	e7f7      	b.n	1bc50 <tc_hmac_prng_generate+0x7e>

0001bc60 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1bc60:	2100      	movs	r1, #0
   1bc62:	2001      	movs	r0, #1
   1bc64:	f7f2 b80a 	b.w	dc7c <z_arm_fatal_error>

0001bc68 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1bc68:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1bc6a:	f383 880b 	msr	PSPLIM, r3
}
   1bc6e:	4770      	bx	lr

0001bc70 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1bc70:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1bc72:	6800      	ldr	r0, [r0, #0]
   1bc74:	f7f2 b802 	b.w	dc7c <z_arm_fatal_error>

0001bc78 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1bc78:	b508      	push	{r3, lr}
	handler();
   1bc7a:	f7f2 f82d 	bl	dcd8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1bc7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1bc82:	f7f2 ba71 	b.w	e168 <z_arm_exc_exit>

0001bc86 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1bc86:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1bc8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1bc8e:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1bc90:	bf08      	it	eq
   1bc92:	f06f 0015 	mvneq.w	r0, #21
   1bc96:	4770      	bx	lr

0001bc98 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1bc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bc9c:	4684      	mov	ip, r0
   1bc9e:	4688      	mov	r8, r1
	register const char *s = nptr;
   1bca0:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1bca2:	4621      	mov	r1, r4
   1bca4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bca8:	2b20      	cmp	r3, #32
   1bcaa:	d0fa      	beq.n	1bca2 <strtol+0xa>
   1bcac:	f1a3 0009 	sub.w	r0, r3, #9
   1bcb0:	2804      	cmp	r0, #4
   1bcb2:	d9f6      	bls.n	1bca2 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1bcb4:	2b2d      	cmp	r3, #45	; 0x2d
   1bcb6:	d12d      	bne.n	1bd14 <strtol+0x7c>
		neg = 1;
		c = *s++;
   1bcb8:	784b      	ldrb	r3, [r1, #1]
   1bcba:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1bcbc:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1bcbe:	2a00      	cmp	r2, #0
   1bcc0:	d05a      	beq.n	1bd78 <strtol+0xe0>
   1bcc2:	2a10      	cmp	r2, #16
   1bcc4:	d109      	bne.n	1bcda <strtol+0x42>
   1bcc6:	2b30      	cmp	r3, #48	; 0x30
   1bcc8:	d107      	bne.n	1bcda <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1bcca:	7823      	ldrb	r3, [r4, #0]
   1bccc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1bcd0:	2b58      	cmp	r3, #88	; 0x58
   1bcd2:	d14c      	bne.n	1bd6e <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1bcd4:	2210      	movs	r2, #16
		c = s[1];
   1bcd6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1bcd8:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1bcda:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1bcdc:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1bce0:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1bce2:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1bce6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1bce8:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1bcec:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1bcf0:	2d09      	cmp	r5, #9
   1bcf2:	d815      	bhi.n	1bd20 <strtol+0x88>
			c -= '0';
   1bcf4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1bcf6:	429a      	cmp	r2, r3
   1bcf8:	dd22      	ble.n	1bd40 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1bcfa:	1c75      	adds	r5, r6, #1
   1bcfc:	d007      	beq.n	1bd0e <strtol+0x76>
   1bcfe:	4570      	cmp	r0, lr
   1bd00:	d81b      	bhi.n	1bd3a <strtol+0xa2>
   1bd02:	d101      	bne.n	1bd08 <strtol+0x70>
   1bd04:	454b      	cmp	r3, r9
   1bd06:	dc18      	bgt.n	1bd3a <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1bd08:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1bd0a:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1bd0e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1bd12:	e7eb      	b.n	1bcec <strtol+0x54>
	} else if (c == '+') {
   1bd14:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1bd16:	bf04      	itt	eq
   1bd18:	784b      	ldrbeq	r3, [r1, #1]
   1bd1a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1bd1c:	2100      	movs	r1, #0
   1bd1e:	e7ce      	b.n	1bcbe <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1bd20:	f043 0520 	orr.w	r5, r3, #32
   1bd24:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1bd26:	2d19      	cmp	r5, #25
   1bd28:	d80a      	bhi.n	1bd40 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bd2a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1bd2e:	2d1a      	cmp	r5, #26
   1bd30:	bf34      	ite	cc
   1bd32:	2537      	movcc	r5, #55	; 0x37
   1bd34:	2557      	movcs	r5, #87	; 0x57
   1bd36:	1b5b      	subs	r3, r3, r5
   1bd38:	e7dd      	b.n	1bcf6 <strtol+0x5e>
			any = -1;
   1bd3a:	f04f 36ff 	mov.w	r6, #4294967295
   1bd3e:	e7e6      	b.n	1bd0e <strtol+0x76>
		}
	}

	if (any < 0) {
   1bd40:	1c73      	adds	r3, r6, #1
   1bd42:	d109      	bne.n	1bd58 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1bd44:	f7fb fec4 	bl	17ad0 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1bd48:	2326      	movs	r3, #38	; 0x26
   1bd4a:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1bd4c:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1bd4e:	f1b8 0f00 	cmp.w	r8, #0
   1bd52:	d107      	bne.n	1bd64 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1bd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1bd58:	b101      	cbz	r1, 1bd5c <strtol+0xc4>
		acc = -acc;
   1bd5a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1bd5c:	f1b8 0f00 	cmp.w	r8, #0
   1bd60:	d0f8      	beq.n	1bd54 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1bd62:	b10e      	cbz	r6, 1bd68 <strtol+0xd0>
   1bd64:	f104 3cff 	add.w	ip, r4, #4294967295
   1bd68:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1bd6c:	e7f2      	b.n	1bd54 <strtol+0xbc>
	if (base == 0) {
   1bd6e:	2330      	movs	r3, #48	; 0x30
   1bd70:	2a00      	cmp	r2, #0
   1bd72:	d1b2      	bne.n	1bcda <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1bd74:	2208      	movs	r2, #8
   1bd76:	e7b0      	b.n	1bcda <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1bd78:	2b30      	cmp	r3, #48	; 0x30
   1bd7a:	d0a6      	beq.n	1bcca <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1bd7c:	220a      	movs	r2, #10
   1bd7e:	e7ac      	b.n	1bcda <strtol+0x42>

0001bd80 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1bd80:	4603      	mov	r3, r0
   1bd82:	3901      	subs	r1, #1
   1bd84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bd88:	b90a      	cbnz	r2, 1bd8e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1bd8a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1bd8c:	4770      	bx	lr
		*d = *s;
   1bd8e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1bd92:	e7f7      	b.n	1bd84 <strcpy+0x4>

0001bd94 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1bd94:	b570      	push	{r4, r5, r6, lr}
   1bd96:	4605      	mov	r5, r0
   1bd98:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1bd9a:	b142      	cbz	r2, 1bdae <strncpy+0x1a>
   1bd9c:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1bda0:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1bda2:	b92c      	cbnz	r4, 1bdb0 <strncpy+0x1c>
   1bda4:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1bda6:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1bdaa:	429a      	cmp	r2, r3
   1bdac:	d1fb      	bne.n	1bda6 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1bdae:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1bdb0:	4632      	mov	r2, r6
		*d = *s;
   1bdb2:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1bdb6:	e7ef      	b.n	1bd98 <strncpy+0x4>

0001bdb8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1bdb8:	4603      	mov	r3, r0
	size_t n = 0;
   1bdba:	2000      	movs	r0, #0

	while (*s != '\0') {
   1bdbc:	5c1a      	ldrb	r2, [r3, r0]
   1bdbe:	b902      	cbnz	r2, 1bdc2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1bdc0:	4770      	bx	lr
		n++;
   1bdc2:	3001      	adds	r0, #1
   1bdc4:	e7fa      	b.n	1bdbc <strlen+0x4>

0001bdc6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1bdc6:	4603      	mov	r3, r0
	size_t n = 0;
   1bdc8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1bdca:	5c1a      	ldrb	r2, [r3, r0]
   1bdcc:	b10a      	cbz	r2, 1bdd2 <strnlen+0xc>
   1bdce:	4288      	cmp	r0, r1
   1bdd0:	d100      	bne.n	1bdd4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1bdd2:	4770      	bx	lr
		n++;
   1bdd4:	3001      	adds	r0, #1
   1bdd6:	e7f8      	b.n	1bdca <strnlen+0x4>

0001bdd8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1bdd8:	1e43      	subs	r3, r0, #1
   1bdda:	3901      	subs	r1, #1
   1bddc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bde0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1bde4:	4282      	cmp	r2, r0
   1bde6:	d101      	bne.n	1bdec <strcmp+0x14>
   1bde8:	2a00      	cmp	r2, #0
   1bdea:	d1f7      	bne.n	1bddc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1bdec:	1a10      	subs	r0, r2, r0
   1bdee:	4770      	bx	lr

0001bdf0 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1bdf0:	b510      	push	{r4, lr}
   1bdf2:	3901      	subs	r1, #1
   1bdf4:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1bdf6:	4282      	cmp	r2, r0
   1bdf8:	d009      	beq.n	1be0e <strncmp+0x1e>
   1bdfa:	7803      	ldrb	r3, [r0, #0]
   1bdfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1be00:	42a3      	cmp	r3, r4
   1be02:	d100      	bne.n	1be06 <strncmp+0x16>
   1be04:	b90b      	cbnz	r3, 1be0a <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1be06:	1b18      	subs	r0, r3, r4
   1be08:	e002      	b.n	1be10 <strncmp+0x20>
		s1++;
   1be0a:	3001      	adds	r0, #1
		n--;
   1be0c:	e7f3      	b.n	1bdf6 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1be0e:	2000      	movs	r0, #0
}
   1be10:	bd10      	pop	{r4, pc}

0001be12 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1be12:	4603      	mov	r3, r0
   1be14:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1be16:	b15a      	cbz	r2, 1be30 <memcmp+0x1e>
   1be18:	3901      	subs	r1, #1
   1be1a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1be1c:	f813 0b01 	ldrb.w	r0, [r3], #1
   1be20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1be24:	42a3      	cmp	r3, r4
   1be26:	d001      	beq.n	1be2c <memcmp+0x1a>
   1be28:	4290      	cmp	r0, r2
   1be2a:	d0f7      	beq.n	1be1c <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1be2c:	1a80      	subs	r0, r0, r2
}
   1be2e:	bd10      	pop	{r4, pc}
		return 0;
   1be30:	4610      	mov	r0, r2
   1be32:	e7fc      	b.n	1be2e <memcmp+0x1c>

0001be34 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1be34:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1be36:	ea81 0400 	eor.w	r4, r1, r0
   1be3a:	07a5      	lsls	r5, r4, #30
   1be3c:	4603      	mov	r3, r0
   1be3e:	d00b      	beq.n	1be58 <memcpy+0x24>
   1be40:	3b01      	subs	r3, #1
   1be42:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1be44:	4291      	cmp	r1, r2
   1be46:	d11b      	bne.n	1be80 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1be48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1be4a:	2a00      	cmp	r2, #0
   1be4c:	d0fc      	beq.n	1be48 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1be4e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1be52:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1be54:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1be58:	079c      	lsls	r4, r3, #30
   1be5a:	d1f6      	bne.n	1be4a <memcpy+0x16>
   1be5c:	f022 0403 	bic.w	r4, r2, #3
   1be60:	1f1d      	subs	r5, r3, #4
   1be62:	0896      	lsrs	r6, r2, #2
   1be64:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1be66:	42b9      	cmp	r1, r7
   1be68:	d105      	bne.n	1be76 <memcpy+0x42>
   1be6a:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1be6e:	4423      	add	r3, r4
   1be70:	fb05 2206 	mla	r2, r5, r6, r2
   1be74:	e7e4      	b.n	1be40 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1be76:	f851 cb04 	ldr.w	ip, [r1], #4
   1be7a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1be7e:	e7f2      	b.n	1be66 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1be80:	f811 4b01 	ldrb.w	r4, [r1], #1
   1be84:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1be88:	e7dc      	b.n	1be44 <memcpy+0x10>

0001be8a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1be8a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1be8c:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1be8e:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1be90:	07a3      	lsls	r3, r4, #30
   1be92:	d111      	bne.n	1beb8 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1be94:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1be98:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1be9c:	f022 0303 	bic.w	r3, r2, #3
   1bea0:	0896      	lsrs	r6, r2, #2
   1bea2:	4423      	add	r3, r4
   1bea4:	429c      	cmp	r4, r3
   1bea6:	d10d      	bne.n	1bec4 <memset+0x3a>
   1bea8:	f06f 0403 	mvn.w	r4, #3
   1beac:	fb04 2206 	mla	r2, r4, r6, r2
   1beb0:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1beb2:	4293      	cmp	r3, r2
   1beb4:	d109      	bne.n	1beca <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1beb6:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1beb8:	2a00      	cmp	r2, #0
   1beba:	d0fc      	beq.n	1beb6 <memset+0x2c>
		*(d_byte++) = c_byte;
   1bebc:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1bec0:	3a01      	subs	r2, #1
   1bec2:	e7e5      	b.n	1be90 <memset+0x6>
		*(d_word++) = c_word;
   1bec4:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1bec8:	e7ec      	b.n	1bea4 <memset+0x1a>
		*(d_byte++) = c_byte;
   1beca:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bece:	e7f0      	b.n	1beb2 <memset+0x28>

0001bed0 <_stdout_hook_default>:
}
   1bed0:	f04f 30ff 	mov.w	r0, #4294967295
   1bed4:	4770      	bx	lr

0001bed6 <bt_settings_decode_key>:
{
   1bed6:	b570      	push	{r4, r5, r6, lr}
   1bed8:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1beda:	2100      	movs	r1, #0
{
   1bedc:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1bede:	f7ff f884 	bl	1afea <settings_name_next>
   1bee2:	280d      	cmp	r0, #13
   1bee4:	d118      	bne.n	1bf18 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1bee6:	7b23      	ldrb	r3, [r4, #12]
   1bee8:	2b30      	cmp	r3, #48	; 0x30
   1beea:	d111      	bne.n	1bf10 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1beec:	2300      	movs	r3, #0
   1beee:	702b      	strb	r3, [r5, #0]
   1bef0:	f104 060c 	add.w	r6, r4, #12
   1bef4:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bef6:	462a      	mov	r2, r5
   1bef8:	4620      	mov	r0, r4
   1befa:	2301      	movs	r3, #1
   1befc:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1befe:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bf00:	f7fe fd0d 	bl	1a91e <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1bf04:	42b4      	cmp	r4, r6
   1bf06:	f105 35ff 	add.w	r5, r5, #4294967295
   1bf0a:	d1f4      	bne.n	1bef6 <bt_settings_decode_key+0x20>
	return 0;
   1bf0c:	2000      	movs	r0, #0
}
   1bf0e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1bf10:	2b31      	cmp	r3, #49	; 0x31
   1bf12:	d101      	bne.n	1bf18 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1bf14:	2301      	movs	r3, #1
   1bf16:	e7ea      	b.n	1beee <bt_settings_decode_key+0x18>
		return -EINVAL;
   1bf18:	f06f 0015 	mvn.w	r0, #21
   1bf1c:	e7f7      	b.n	1bf0e <bt_settings_decode_key+0x38>

0001bf1e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1bf1e:	b510      	push	{r4, lr}
   1bf20:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1bf22:	7801      	ldrb	r1, [r0, #0]
   1bf24:	7822      	ldrb	r2, [r4, #0]
{
   1bf26:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1bf28:	428a      	cmp	r2, r1
   1bf2a:	d00f      	beq.n	1bf4c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1bf2c:	4669      	mov	r1, sp
   1bf2e:	f7f2 fcc1 	bl	e8b4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1bf32:	4620      	mov	r0, r4
   1bf34:	a905      	add	r1, sp, #20
   1bf36:	f7f2 fcbd 	bl	e8b4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1bf3a:	2210      	movs	r2, #16
   1bf3c:	f10d 0115 	add.w	r1, sp, #21
   1bf40:	f10d 0001 	add.w	r0, sp, #1
   1bf44:	f7ff ff65 	bl	1be12 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1bf48:	b00a      	add	sp, #40	; 0x28
   1bf4a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1bf4c:	2a01      	cmp	r2, #1
   1bf4e:	d006      	beq.n	1bf5e <bt_uuid_cmp+0x40>
   1bf50:	2a02      	cmp	r2, #2
   1bf52:	d007      	beq.n	1bf64 <bt_uuid_cmp+0x46>
   1bf54:	b972      	cbnz	r2, 1bf74 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1bf56:	8840      	ldrh	r0, [r0, #2]
   1bf58:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1bf5a:	1ac0      	subs	r0, r0, r3
   1bf5c:	e7f4      	b.n	1bf48 <bt_uuid_cmp+0x2a>
   1bf5e:	6840      	ldr	r0, [r0, #4]
   1bf60:	6863      	ldr	r3, [r4, #4]
   1bf62:	e7fa      	b.n	1bf5a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1bf64:	2210      	movs	r2, #16
   1bf66:	1c61      	adds	r1, r4, #1
   1bf68:	3001      	adds	r0, #1
}
   1bf6a:	b00a      	add	sp, #40	; 0x28
   1bf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1bf70:	f7ff bf4f 	b.w	1be12 <memcmp>
	switch (u1->type) {
   1bf74:	f06f 0015 	mvn.w	r0, #21
   1bf78:	e7e6      	b.n	1bf48 <bt_uuid_cmp+0x2a>

0001bf7a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1bf7a:	2a04      	cmp	r2, #4
{
   1bf7c:	b510      	push	{r4, lr}
	switch (data_len) {
   1bf7e:	d00a      	beq.n	1bf96 <bt_uuid_create+0x1c>
   1bf80:	2a10      	cmp	r2, #16
   1bf82:	d00d      	beq.n	1bfa0 <bt_uuid_create+0x26>
   1bf84:	2a02      	cmp	r2, #2
   1bf86:	f04f 0300 	mov.w	r3, #0
   1bf8a:	d10f      	bne.n	1bfac <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1bf8c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1bf8e:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1bf90:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1bf92:	2001      	movs	r0, #1
}
   1bf94:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1bf96:	2301      	movs	r3, #1
   1bf98:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1bf9a:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1bf9c:	6042      	str	r2, [r0, #4]
		break;
   1bf9e:	e7f8      	b.n	1bf92 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1bfa0:	2302      	movs	r3, #2
   1bfa2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1bfa6:	f7ff ff45 	bl	1be34 <memcpy>
		break;
   1bfaa:	e7f2      	b.n	1bf92 <bt_uuid_create+0x18>
	switch (data_len) {
   1bfac:	4618      	mov	r0, r3
   1bfae:	e7f1      	b.n	1bf94 <bt_uuid_create+0x1a>

0001bfb0 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1bfb0:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1bfb2:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1bfb4:	2106      	movs	r1, #6
{
   1bfb6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1bfb8:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1bfbc:	f7f5 f86e 	bl	1109c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1bfc0:	b918      	cbnz	r0, 1bfca <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1bfc2:	79a3      	ldrb	r3, [r4, #6]
   1bfc4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1bfc8:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1bfca:	bd10      	pop	{r4, pc}

0001bfcc <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1bfcc:	280f      	cmp	r0, #15
   1bfce:	d806      	bhi.n	1bfde <bt_hci_evt_get_flags+0x12>
   1bfd0:	280d      	cmp	r0, #13
   1bfd2:	d80b      	bhi.n	1bfec <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1bfd4:	2805      	cmp	r0, #5
   1bfd6:	bf14      	ite	ne
   1bfd8:	2002      	movne	r0, #2
   1bfda:	2003      	moveq	r0, #3
   1bfdc:	4770      	bx	lr
	switch (evt) {
   1bfde:	2813      	cmp	r0, #19
   1bfe0:	d004      	beq.n	1bfec <bt_hci_evt_get_flags+0x20>
   1bfe2:	281a      	cmp	r0, #26
   1bfe4:	bf14      	ite	ne
   1bfe6:	2002      	movne	r0, #2
   1bfe8:	2001      	moveq	r0, #1
   1bfea:	4770      	bx	lr
   1bfec:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1bfee:	4770      	bx	lr

0001bff0 <get_adv_channel_map>:
{
   1bff0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1bff2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1bff6:	bf0c      	ite	eq
   1bff8:	2007      	moveq	r0, #7
   1bffa:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1bffc:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1bffe:	bf48      	it	mi
   1c000:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1c004:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1c006:	bf48      	it	mi
   1c008:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1c00c:	4770      	bx	lr

0001c00e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c00e:	e8d0 0faf 	lda	r0, [r0]
}
   1c012:	4770      	bx	lr

0001c014 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1c014:	2207      	movs	r2, #7
   1c016:	f7ff bf0d 	b.w	1be34 <memcpy>

0001c01a <atomic_or>:
{
   1c01a:	4603      	mov	r3, r0
}
   1c01c:	e8d3 0fef 	ldaex	r0, [r3]
   1c020:	ea40 0201 	orr.w	r2, r0, r1
   1c024:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c028:	f1bc 0f00 	cmp.w	ip, #0
   1c02c:	d1f6      	bne.n	1c01c <atomic_or+0x2>
   1c02e:	4770      	bx	lr

0001c030 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1c030:	2207      	movs	r2, #7
   1c032:	f7ff beee 	b.w	1be12 <memcmp>

0001c036 <atomic_and>:
{
   1c036:	4603      	mov	r3, r0
}
   1c038:	e8d3 0fef 	ldaex	r0, [r3]
   1c03c:	ea00 0201 	and.w	r2, r0, r1
   1c040:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c044:	f1bc 0f00 	cmp.w	ip, #0
   1c048:	d1f6      	bne.n	1c038 <atomic_and+0x2>
   1c04a:	4770      	bx	lr

0001c04c <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1c04c:	460b      	mov	r3, r1
   1c04e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c050:	f001 041f 	and.w	r4, r1, #31
   1c054:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c056:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c058:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c05a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1c05e:	b112      	cbz	r2, 1c066 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1c060:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c062:	f7ff bfda 	b.w	1c01a <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c066:	43c9      	mvns	r1, r1
}
   1c068:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c06a:	f7ff bfe4 	b.w	1c036 <atomic_and>

0001c06e <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1c06e:	f100 0210 	add.w	r2, r0, #16
{
   1c072:	b508      	push	{r3, lr}
   1c074:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c076:	4610      	mov	r0, r2
   1c078:	f7ff ffc9 	bl	1c00e <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1c07c:	0640      	lsls	r0, r0, #25
   1c07e:	d50a      	bpl.n	1c096 <adv_id_check_connectable_func+0x28>
   1c080:	4610      	mov	r0, r2
   1c082:	f7ff ffc4 	bl	1c00e <atomic_get>
   1c086:	05c2      	lsls	r2, r0, #23
   1c088:	d505      	bpl.n	1c096 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1c08a:	781a      	ldrb	r2, [r3, #0]
   1c08c:	780b      	ldrb	r3, [r1, #0]
   1c08e:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1c090:	bf1c      	itt	ne
   1c092:	2301      	movne	r3, #1
   1c094:	704b      	strbne	r3, [r1, #1]
}
   1c096:	bd08      	pop	{r3, pc}

0001c098 <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1c098:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1c09a:	2106      	movs	r1, #6
   1c09c:	4668      	mov	r0, sp
   1c09e:	f7f4 fffd 	bl	1109c <bt_rand>
	if (err) {
   1c0a2:	b940      	cbnz	r0, 1c0b6 <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1c0a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1c0a8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1c0aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c0ae:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1c0b2:	f7f3 f907 	bl	f2c4 <set_random_address>
}
   1c0b6:	b003      	add	sp, #12
   1c0b8:	f85d fb04 	ldr.w	pc, [sp], #4

0001c0bc <bt_lookup_id_addr>:
}
   1c0bc:	4608      	mov	r0, r1
   1c0be:	4770      	bx	lr

0001c0c0 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1c0c0:	f7f3 bb58 	b.w	f774 <bt_le_create_conn_legacy>

0001c0c4 <bt_hci_disconnect>:
{
   1c0c4:	b570      	push	{r4, r5, r6, lr}
   1c0c6:	4606      	mov	r6, r0
   1c0c8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1c0ca:	f240 4006 	movw	r0, #1030	; 0x406
   1c0ce:	2103      	movs	r1, #3
   1c0d0:	f7f3 f82c 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   1c0d4:	4604      	mov	r4, r0
   1c0d6:	b168      	cbz	r0, 1c0f4 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1c0d8:	2103      	movs	r1, #3
   1c0da:	3008      	adds	r0, #8
   1c0dc:	f7f9 fd20 	bl	15b20 <net_buf_simple_add>
	disconn->reason = reason;
   1c0e0:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1c0e2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c0e4:	4621      	mov	r1, r4
}
   1c0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c0ea:	2200      	movs	r2, #0
   1c0ec:	f240 4006 	movw	r0, #1030	; 0x406
   1c0f0:	f7f3 b866 	b.w	f1c0 <bt_hci_cmd_send_sync>
}
   1c0f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c0f8:	bd70      	pop	{r4, r5, r6, pc}

0001c0fa <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1c0fa:	8803      	ldrh	r3, [r0, #0]
   1c0fc:	8842      	ldrh	r2, [r0, #2]
{
   1c0fe:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1c100:	4293      	cmp	r3, r2
   1c102:	d819      	bhi.n	1c138 <bt_le_conn_params_valid+0x3e>
   1c104:	2b05      	cmp	r3, #5
   1c106:	d917      	bls.n	1c138 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1c108:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1c10c:	d814      	bhi.n	1c138 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1c10e:	8883      	ldrh	r3, [r0, #4]
   1c110:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1c114:	d210      	bcs.n	1c138 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c116:	f640 4476 	movw	r4, #3190	; 0xc76
   1c11a:	88c0      	ldrh	r0, [r0, #6]
   1c11c:	f1a0 010a 	sub.w	r1, r0, #10
   1c120:	b289      	uxth	r1, r1
   1c122:	42a1      	cmp	r1, r4
   1c124:	d808      	bhi.n	1c138 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1c126:	3301      	adds	r3, #1
   1c128:	b29b      	uxth	r3, r3
   1c12a:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c12c:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1c130:	bf34      	ite	cc
   1c132:	2001      	movcc	r0, #1
   1c134:	2000      	movcs	r0, #0
}
   1c136:	bd10      	pop	{r4, pc}
		return false;
   1c138:	2000      	movs	r0, #0
   1c13a:	e7fc      	b.n	1c136 <bt_le_conn_params_valid+0x3c>

0001c13c <bt_le_set_data_len>:
{
   1c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c13e:	4607      	mov	r7, r0
   1c140:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c142:	f242 0022 	movw	r0, #8226	; 0x2022
   1c146:	2106      	movs	r1, #6
{
   1c148:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c14a:	f7f2 ffef 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   1c14e:	4604      	mov	r4, r0
   1c150:	b170      	cbz	r0, 1c170 <bt_le_set_data_len+0x34>
   1c152:	2106      	movs	r1, #6
   1c154:	3008      	adds	r0, #8
   1c156:	f7f9 fce3 	bl	15b20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c15a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c15c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c15e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1c160:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1c162:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c164:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1c168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c16c:	f7f3 bd24 	b.w	fbb8 <bt_hci_cmd_send>
}
   1c170:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c176 <bt_le_set_phy>:
{
   1c176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c17a:	4680      	mov	r8, r0
   1c17c:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c17e:	f242 0032 	movw	r0, #8242	; 0x2032
   1c182:	2107      	movs	r1, #7
{
   1c184:	4616      	mov	r6, r2
   1c186:	461d      	mov	r5, r3
   1c188:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c18c:	f7f2 ffce 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   1c190:	4604      	mov	r4, r0
   1c192:	b190      	cbz	r0, 1c1ba <bt_le_set_phy+0x44>
   1c194:	2107      	movs	r1, #7
   1c196:	3008      	adds	r0, #8
   1c198:	f7f9 fcc2 	bl	15b20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c19c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1c1a0:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1c1a2:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1c1a4:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c1a6:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1c1a8:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c1ac:	4621      	mov	r1, r4
}
   1c1ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c1b2:	f242 0032 	movw	r0, #8242	; 0x2032
   1c1b6:	f7f3 bcff 	b.w	fbb8 <bt_hci_cmd_send>
}
   1c1ba:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c1c2 <bt_addr_le_is_bonded>:
}
   1c1c2:	2000      	movs	r0, #0
   1c1c4:	4770      	bx	lr

0001c1c6 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1c1c6:	6880      	ldr	r0, [r0, #8]
   1c1c8:	f7f4 bd72 	b.w	10cb0 <enh_conn_complete>

0001c1cc <le_legacy_conn_complete>:
{
   1c1cc:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c1ce:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1c1d0:	6881      	ldr	r1, [r0, #8]
{
   1c1d2:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1c1d4:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c1d6:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1c1d8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1c1dc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c1e0:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1c1e2:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1c1e6:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1c1ea:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1c1ee:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1c1f2:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1c1f6:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1c1fa:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1c1fe:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1c202:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1c206:	7b4b      	ldrb	r3, [r1, #13]
   1c208:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c20c:	f7ff ff02 	bl	1c014 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1c210:	4669      	mov	r1, sp
   1c212:	2206      	movs	r2, #6
   1c214:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c218:	9400      	str	r4, [sp, #0]
   1c21a:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c21e:	f7ff fe09 	bl	1be34 <memcpy>
   1c222:	2206      	movs	r2, #6
   1c224:	4669      	mov	r1, sp
   1c226:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1c22a:	9400      	str	r4, [sp, #0]
   1c22c:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c230:	f7ff fe00 	bl	1be34 <memcpy>
	enh_conn_complete(&enh);
   1c234:	a802      	add	r0, sp, #8
   1c236:	f7f4 fd3b 	bl	10cb0 <enh_conn_complete>
}
   1c23a:	b00a      	add	sp, #40	; 0x28
   1c23c:	bd10      	pop	{r4, pc}

0001c23e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c23e:	e8d0 0faf 	lda	r0, [r0]
}
   1c242:	4770      	bx	lr

0001c244 <tx_notify>:
{
   1c244:	b570      	push	{r4, r5, r6, lr}
   1c246:	4604      	mov	r4, r0
	__asm__ volatile(
   1c248:	f04f 0220 	mov.w	r2, #32
   1c24c:	f3ef 8311 	mrs	r3, BASEPRI
   1c250:	f382 8811 	msr	BASEPRI, r2
   1c254:	f3bf 8f6f 	isb	sy
	return list->head;
   1c258:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1c25a:	b920      	cbnz	r0, 1c266 <tx_notify+0x22>
	__asm__ volatile(
   1c25c:	f383 8811 	msr	BASEPRI, r3
   1c260:	f3bf 8f6f 	isb	sy
}
   1c264:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c266:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1c268:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c26a:	4288      	cmp	r0, r1
	list->tail = node;
   1c26c:	bf08      	it	eq
   1c26e:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1c270:	6222      	str	r2, [r4, #32]
   1c272:	f383 8811 	msr	BASEPRI, r3
   1c276:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1c27a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1c27e:	f7f4 ff25 	bl	110cc <tx_free>
		cb(conn, user_data);
   1c282:	4631      	mov	r1, r6
   1c284:	4620      	mov	r0, r4
   1c286:	47a8      	blx	r5
	while (1) {
   1c288:	e7de      	b.n	1c248 <tx_notify+0x4>

0001c28a <tx_complete_work>:
	tx_notify(conn);
   1c28a:	3828      	subs	r0, #40	; 0x28
   1c28c:	f7ff bfda 	b.w	1c244 <tx_notify>

0001c290 <bt_conn_new>:
{
   1c290:	b538      	push	{r3, r4, r5, lr}
   1c292:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1c294:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c296:	2501      	movs	r5, #1
   1c298:	428b      	cmp	r3, r1
   1c29a:	d102      	bne.n	1c2a2 <bt_conn_new+0x12>
		return NULL;
   1c29c:	2400      	movs	r4, #0
}
   1c29e:	4620      	mov	r0, r4
   1c2a0:	bd38      	pop	{r3, r4, r5, pc}
   1c2a2:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1c2a6:	e8d2 0fef 	ldaex	r0, [r2]
   1c2aa:	2800      	cmp	r0, #0
   1c2ac:	d104      	bne.n	1c2b8 <bt_conn_new+0x28>
   1c2ae:	e8c2 5fec 	stlex	ip, r5, [r2]
   1c2b2:	f1bc 0f00 	cmp.w	ip, #0
   1c2b6:	d1f6      	bne.n	1c2a6 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1c2b8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c2bc:	d002      	beq.n	1c2c4 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1c2be:	4604      	mov	r4, r0
   1c2c0:	3301      	adds	r3, #1
   1c2c2:	e7e9      	b.n	1c298 <bt_conn_new+0x8>
	if (!conn) {
   1c2c4:	2c00      	cmp	r4, #0
   1c2c6:	d0ea      	beq.n	1c29e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1c2c8:	22b8      	movs	r2, #184	; 0xb8
   1c2ca:	2100      	movs	r1, #0
   1c2cc:	4620      	mov	r0, r4
   1c2ce:	f7ff fddc 	bl	1be8a <memset>
	return conn;
   1c2d2:	e7e4      	b.n	1c29e <bt_conn_new+0xe>

0001c2d4 <bt_conn_get_security>:
}
   1c2d4:	2001      	movs	r0, #1
   1c2d6:	4770      	bx	lr

0001c2d8 <bt_conn_reset_rx_state>:
{
   1c2d8:	b510      	push	{r4, lr}
   1c2da:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c2dc:	6900      	ldr	r0, [r0, #16]
   1c2de:	b118      	cbz	r0, 1c2e8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c2e0:	f7f9 fb08 	bl	158f4 <net_buf_unref>
	conn->rx = NULL;
   1c2e4:	2300      	movs	r3, #0
   1c2e6:	6123      	str	r3, [r4, #16]
}
   1c2e8:	bd10      	pop	{r4, pc}

0001c2ea <bt_conn_is_peer_addr_le>:
{
   1c2ea:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c2ec:	7a03      	ldrb	r3, [r0, #8]
{
   1c2ee:	4604      	mov	r4, r0
	if (id != conn->id) {
   1c2f0:	428b      	cmp	r3, r1
{
   1c2f2:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c2f4:	d115      	bne.n	1c322 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c2f6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c2fa:	2207      	movs	r2, #7
   1c2fc:	4628      	mov	r0, r5
   1c2fe:	f7ff fd88 	bl	1be12 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1c302:	b180      	cbz	r0, 1c326 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1c304:	78e3      	ldrb	r3, [r4, #3]
   1c306:	2207      	movs	r2, #7
   1c308:	b943      	cbnz	r3, 1c31c <bt_conn_is_peer_addr_le+0x32>
   1c30a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1c30e:	4628      	mov	r0, r5
   1c310:	f7ff fd7f 	bl	1be12 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1c314:	fab0 f080 	clz	r0, r0
   1c318:	0940      	lsrs	r0, r0, #5
}
   1c31a:	bd38      	pop	{r3, r4, r5, pc}
   1c31c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1c320:	e7f5      	b.n	1c30e <bt_conn_is_peer_addr_le+0x24>
		return false;
   1c322:	2000      	movs	r0, #0
   1c324:	e7f9      	b.n	1c31a <bt_conn_is_peer_addr_le+0x30>
		return true;
   1c326:	2001      	movs	r0, #1
   1c328:	e7f7      	b.n	1c31a <bt_conn_is_peer_addr_le+0x30>

0001c32a <bt_conn_ref>:
{
   1c32a:	4603      	mov	r3, r0
   1c32c:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1c32e:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1c332:	4610      	mov	r0, r2
   1c334:	f7ff ff83 	bl	1c23e <atomic_get>
		if (!old) {
   1c338:	b160      	cbz	r0, 1c354 <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1c33a:	1c41      	adds	r1, r0, #1
   1c33c:	e8d2 4fef 	ldaex	r4, [r2]
   1c340:	4284      	cmp	r4, r0
   1c342:	d104      	bne.n	1c34e <bt_conn_ref+0x24>
   1c344:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c348:	f1bc 0f00 	cmp.w	ip, #0
   1c34c:	d1f6      	bne.n	1c33c <bt_conn_ref+0x12>
   1c34e:	d1f0      	bne.n	1c332 <bt_conn_ref+0x8>
}
   1c350:	4618      	mov	r0, r3
   1c352:	bd10      	pop	{r4, pc}
			return NULL;
   1c354:	4603      	mov	r3, r0
   1c356:	e7fb      	b.n	1c350 <bt_conn_ref+0x26>

0001c358 <conn_lookup_handle>:
{
   1c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c35c:	4607      	mov	r7, r0
   1c35e:	460e      	mov	r6, r1
   1c360:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1c362:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c364:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1c368:	42b4      	cmp	r4, r6
   1c36a:	d103      	bne.n	1c374 <conn_lookup_handle+0x1c>
	return NULL;
   1c36c:	2300      	movs	r3, #0
}
   1c36e:	4618      	mov	r0, r3
   1c370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c374:	fb09 7004 	mla	r0, r9, r4, r7
   1c378:	f7ff ffd7 	bl	1c32a <bt_conn_ref>
   1c37c:	4603      	mov	r3, r0
		if (!conn) {
   1c37e:	b158      	cbz	r0, 1c398 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1c380:	7a85      	ldrb	r5, [r0, #10]
   1c382:	2d01      	cmp	r5, #1
   1c384:	d002      	beq.n	1c38c <conn_lookup_handle+0x34>
   1c386:	3d07      	subs	r5, #7
   1c388:	2d01      	cmp	r5, #1
   1c38a:	d803      	bhi.n	1c394 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1c38c:	881a      	ldrh	r2, [r3, #0]
   1c38e:	4542      	cmp	r2, r8
   1c390:	d0ed      	beq.n	1c36e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1c392:	4618      	mov	r0, r3
   1c394:	f7f5 f91e 	bl	115d4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1c398:	3401      	adds	r4, #1
   1c39a:	e7e5      	b.n	1c368 <conn_lookup_handle+0x10>

0001c39c <bt_conn_get_dst>:
}
   1c39c:	3088      	adds	r0, #136	; 0x88
   1c39e:	4770      	bx	lr

0001c3a0 <bt_conn_le_conn_update>:
{
   1c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3a2:	4607      	mov	r7, r0
   1c3a4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c3a6:	f242 0013 	movw	r0, #8211	; 0x2013
   1c3aa:	210e      	movs	r1, #14
   1c3ac:	f7f2 febe 	bl	f12c <bt_hci_cmd_create>
	if (!buf) {
   1c3b0:	4606      	mov	r6, r0
   1c3b2:	b1d0      	cbz	r0, 1c3ea <bt_conn_le_conn_update+0x4a>
   1c3b4:	210e      	movs	r1, #14
   1c3b6:	3008      	adds	r0, #8
   1c3b8:	f7f9 fbb2 	bl	15b20 <net_buf_simple_add>
   1c3bc:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c3be:	220e      	movs	r2, #14
   1c3c0:	2100      	movs	r1, #0
   1c3c2:	f7ff fd62 	bl	1be8a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c3c6:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c3c8:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c3ca:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c3cc:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c3ce:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c3d0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c3d2:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c3d4:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c3d8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c3da:	88ab      	ldrh	r3, [r5, #4]
   1c3dc:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c3de:	88eb      	ldrh	r3, [r5, #6]
   1c3e0:	8123      	strh	r3, [r4, #8]
}
   1c3e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c3e6:	f7f2 beeb 	b.w	f1c0 <bt_hci_cmd_send_sync>
}
   1c3ea:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c3f0 <l2cap_connected>:
}
   1c3f0:	4770      	bx	lr

0001c3f2 <l2cap_disconnected>:
   1c3f2:	4770      	bx	lr

0001c3f4 <bt_l2cap_chan_remove>:
	return list->head;
   1c3f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c3f6:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c3f8:	b17b      	cbz	r3, 1c41a <bt_l2cap_chan_remove+0x26>
   1c3fa:	2200      	movs	r2, #0
   1c3fc:	3b08      	subs	r3, #8
   1c3fe:	b163      	cbz	r3, 1c41a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1c400:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1c402:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1c406:	d10e      	bne.n	1c426 <bt_l2cap_chan_remove+0x32>
	return node->next;
   1c408:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1c40a:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1c40c:	b932      	cbnz	r2, 1c41c <bt_l2cap_chan_remove+0x28>
   1c40e:	42ac      	cmp	r4, r5
	list->head = node;
   1c410:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1c412:	d100      	bne.n	1c416 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1c414:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1c416:	2200      	movs	r2, #0
   1c418:	609a      	str	r2, [r3, #8]
}
   1c41a:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c41c:	42ac      	cmp	r4, r5
	parent->next = child;
   1c41e:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1c420:	bf08      	it	eq
   1c422:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1c424:	e7f7      	b.n	1c416 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c426:	2c00      	cmp	r4, #0
   1c428:	d0f7      	beq.n	1c41a <bt_l2cap_chan_remove+0x26>
	return node->next;
   1c42a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c42c:	2b00      	cmp	r3, #0
   1c42e:	d0f4      	beq.n	1c41a <bt_l2cap_chan_remove+0x26>
   1c430:	4622      	mov	r2, r4
   1c432:	3b08      	subs	r3, #8
   1c434:	e7e3      	b.n	1c3fe <bt_l2cap_chan_remove+0xa>

0001c436 <bt_l2cap_chan_del>:
{
   1c436:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1c438:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1c43c:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c43e:	b123      	cbz	r3, 1c44a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c440:	686b      	ldr	r3, [r5, #4]
   1c442:	b103      	cbz	r3, 1c446 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c444:	4798      	blx	r3
	chan->conn = NULL;
   1c446:	2300      	movs	r3, #0
   1c448:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c44a:	68e3      	ldr	r3, [r4, #12]
   1c44c:	b10b      	cbz	r3, 1c452 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c44e:	4620      	mov	r0, r4
   1c450:	4798      	blx	r3
	if (ops->released) {
   1c452:	69eb      	ldr	r3, [r5, #28]
   1c454:	b11b      	cbz	r3, 1c45e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c456:	4620      	mov	r0, r4
}
   1c458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c45c:	4718      	bx	r3
}
   1c45e:	bd70      	pop	{r4, r5, r6, pc}

0001c460 <bt_l2cap_disconnected>:
	return list->head;
   1c460:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c462:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c464:	b18b      	cbz	r3, 1c48a <bt_l2cap_disconnected+0x2a>
   1c466:	f1b3 0008 	subs.w	r0, r3, #8
   1c46a:	d00e      	beq.n	1c48a <bt_l2cap_disconnected+0x2a>
	return node->next;
   1c46c:	681c      	ldr	r4, [r3, #0]
   1c46e:	b104      	cbz	r4, 1c472 <bt_l2cap_disconnected+0x12>
   1c470:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c472:	f7ff ffe0 	bl	1c436 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c476:	b144      	cbz	r4, 1c48a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c478:	f114 0308 	adds.w	r3, r4, #8
   1c47c:	d002      	beq.n	1c484 <bt_l2cap_disconnected+0x24>
	return node->next;
   1c47e:	68a3      	ldr	r3, [r4, #8]
   1c480:	b103      	cbz	r3, 1c484 <bt_l2cap_disconnected+0x24>
   1c482:	3b08      	subs	r3, #8
{
   1c484:	4620      	mov	r0, r4
   1c486:	461c      	mov	r4, r3
   1c488:	e7f3      	b.n	1c472 <bt_l2cap_disconnected+0x12>
}
   1c48a:	bd10      	pop	{r4, pc}

0001c48c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c48c:	3104      	adds	r1, #4
   1c48e:	f7f5 bc2d 	b.w	11cec <bt_conn_create_pdu_timeout>

0001c492 <bt_l2cap_send_cb>:
{
   1c492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c496:	4614      	mov	r4, r2
   1c498:	4605      	mov	r5, r0
   1c49a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1c49c:	f102 0008 	add.w	r0, r2, #8
   1c4a0:	2104      	movs	r1, #4
   1c4a2:	461e      	mov	r6, r3
   1c4a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c4a8:	f7f9 fae2 	bl	15a70 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c4ac:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c4ae:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c4b0:	3a04      	subs	r2, #4
   1c4b2:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1c4b4:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c4b6:	4632      	mov	r2, r6
   1c4b8:	4621      	mov	r1, r4
   1c4ba:	4628      	mov	r0, r5
}
   1c4bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c4c0:	f7f4 bfc6 	b.w	11450 <bt_conn_send_cb>

0001c4c4 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1c4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c4c6:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c4c8:	2202      	movs	r2, #2
   1c4ca:	2001      	movs	r0, #1
   1c4cc:	f7f5 fd60 	bl	11f90 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c4d0:	4604      	mov	r4, r0
   1c4d2:	b160      	cbz	r0, 1c4ee <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1c4d4:	2102      	movs	r1, #2
   1c4d6:	3008      	adds	r0, #8
   1c4d8:	f7f9 fb22 	bl	15b20 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1c4dc:	2300      	movs	r3, #0
   1c4de:	4622      	mov	r2, r4
   1c4e0:	7003      	strb	r3, [r0, #0]
   1c4e2:	7043      	strb	r3, [r0, #1]
   1c4e4:	2105      	movs	r1, #5
   1c4e6:	4628      	mov	r0, r5
   1c4e8:	9300      	str	r3, [sp, #0]
   1c4ea:	f7ff ffd2 	bl	1c492 <bt_l2cap_send_cb>
}
   1c4ee:	b003      	add	sp, #12
   1c4f0:	bd30      	pop	{r4, r5, pc}

0001c4f2 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1c4f2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c4f4:	b160      	cbz	r0, 1c510 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1c4f6:	3808      	subs	r0, #8
   1c4f8:	b900      	cbnz	r0, 1c4fc <bt_l2cap_le_lookup_tx_cid+0xa>
   1c4fa:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1c4fc:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1c500:	428b      	cmp	r3, r1
   1c502:	d005      	beq.n	1c510 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c504:	f110 0308 	adds.w	r3, r0, #8
   1c508:	d001      	beq.n	1c50e <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1c50a:	6880      	ldr	r0, [r0, #8]
   1c50c:	e7f2      	b.n	1c4f4 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1c50e:	4618      	mov	r0, r3
}
   1c510:	4770      	bx	lr

0001c512 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1c512:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c514:	b160      	cbz	r0, 1c530 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1c516:	3808      	subs	r0, #8
   1c518:	b900      	cbnz	r0, 1c51c <bt_l2cap_le_lookup_rx_cid+0xa>
   1c51a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c51c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1c520:	428b      	cmp	r3, r1
   1c522:	d005      	beq.n	1c530 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c524:	f110 0308 	adds.w	r3, r0, #8
   1c528:	d001      	beq.n	1c52e <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1c52a:	6880      	ldr	r0, [r0, #8]
   1c52c:	e7f2      	b.n	1c514 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1c52e:	4618      	mov	r0, r3
}
   1c530:	4770      	bx	lr

0001c532 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1c532:	4770      	bx	lr

0001c534 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c534:	4603      	mov	r3, r0
	return list->head;
   1c536:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c538:	b128      	cbz	r0, 1c546 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c53a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c53c:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c53e:	4288      	cmp	r0, r1
	list->head = node;
   1c540:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c542:	bf08      	it	eq
   1c544:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c546:	4770      	bx	lr

0001c548 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c548:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c54a:	2000      	movs	r0, #0

	while (buf) {
   1c54c:	b903      	cbnz	r3, 1c550 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c54e:	4770      	bx	lr
		bytes += buf->len;
   1c550:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c552:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c554:	4410      	add	r0, r2
		buf = buf->frags;
   1c556:	e7f9      	b.n	1c54c <net_buf_frags_len+0x4>

0001c558 <att_sent>:
	if (chan->ops->sent) {
   1c558:	684b      	ldr	r3, [r1, #4]
{
   1c55a:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1c55c:	695b      	ldr	r3, [r3, #20]
   1c55e:	b103      	cbz	r3, 1c562 <att_sent+0xa>
		chan->ops->sent(chan);
   1c560:	4718      	bx	r3
}
   1c562:	4770      	bx	lr

0001c564 <attr_read_type_cb>:
{
   1c564:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c566:	68d4      	ldr	r4, [r2, #12]
   1c568:	3102      	adds	r1, #2
   1c56a:	7823      	ldrb	r3, [r4, #0]
   1c56c:	b913      	cbnz	r3, 1c574 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c56e:	7021      	strb	r1, [r4, #0]
	return true;
   1c570:	2001      	movs	r0, #1
   1c572:	e006      	b.n	1c582 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c574:	428b      	cmp	r3, r1
   1c576:	d0fb      	beq.n	1c570 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c578:	8983      	ldrh	r3, [r0, #12]
   1c57a:	3b02      	subs	r3, #2
   1c57c:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1c57e:	2000      	movs	r0, #0
   1c580:	6110      	str	r0, [r2, #16]
}
   1c582:	bd10      	pop	{r4, pc}

0001c584 <att_prepare_write_req>:
}
   1c584:	2006      	movs	r0, #6
   1c586:	4770      	bx	lr

0001c588 <att_op_get_type>:
	switch (op) {
   1c588:	281e      	cmp	r0, #30
   1c58a:	d816      	bhi.n	1c5ba <att_op_get_type+0x32>
   1c58c:	b308      	cbz	r0, 1c5d2 <att_op_get_type+0x4a>
   1c58e:	1e43      	subs	r3, r0, #1
   1c590:	2b1d      	cmp	r3, #29
   1c592:	d81e      	bhi.n	1c5d2 <att_op_get_type+0x4a>
   1c594:	e8df f003 	tbb	[pc, r3]
   1c598:	23172317 	.word	0x23172317
   1c59c:	23172317 	.word	0x23172317
   1c5a0:	23172317 	.word	0x23172317
   1c5a4:	23172317 	.word	0x23172317
   1c5a8:	1d172317 	.word	0x1d172317
   1c5ac:	2317231d 	.word	0x2317231d
   1c5b0:	1d191d17 	.word	0x1d191d17
   1c5b4:	0f1b      	.short	0x0f1b
   1c5b6:	2004      	movs	r0, #4
   1c5b8:	4770      	bx	lr
   1c5ba:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c5be:	2b52      	cmp	r3, #82	; 0x52
   1c5c0:	d107      	bne.n	1c5d2 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1c5c2:	2000      	movs	r0, #0
}
   1c5c4:	4770      	bx	lr
		return ATT_RESPONSE;
   1c5c6:	2002      	movs	r0, #2
   1c5c8:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c5ca:	2003      	movs	r0, #3
   1c5cc:	4770      	bx	lr
		return ATT_INDICATION;
   1c5ce:	2005      	movs	r0, #5
   1c5d0:	4770      	bx	lr
		return ATT_COMMAND;
   1c5d2:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c5d6:	bf0c      	ite	eq
   1c5d8:	2006      	moveq	r0, #6
   1c5da:	2000      	movne	r0, #0
   1c5dc:	4770      	bx	lr
		return ATT_REQUEST;
   1c5de:	2001      	movs	r0, #1
   1c5e0:	4770      	bx	lr

0001c5e2 <att_notify_mult>:
{
   1c5e2:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1c5e4:	6803      	ldr	r3, [r0, #0]
   1c5e6:	898a      	ldrh	r2, [r1, #12]
   1c5e8:	6818      	ldr	r0, [r3, #0]
   1c5ea:	6889      	ldr	r1, [r1, #8]
   1c5ec:	f7f8 fe2a 	bl	15244 <bt_gatt_mult_notification>
}
   1c5f0:	2000      	movs	r0, #0
   1c5f2:	bd08      	pop	{r3, pc}

0001c5f4 <att_notify>:
{
   1c5f4:	b538      	push	{r3, r4, r5, lr}
   1c5f6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c5f8:	f101 0008 	add.w	r0, r1, #8
   1c5fc:	460c      	mov	r4, r1
   1c5fe:	f000 ff44 	bl	1d48a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1c602:	682d      	ldr	r5, [r5, #0]
   1c604:	4601      	mov	r1, r0
   1c606:	89a3      	ldrh	r3, [r4, #12]
   1c608:	6828      	ldr	r0, [r5, #0]
   1c60a:	68a2      	ldr	r2, [r4, #8]
   1c60c:	f000 fea5 	bl	1d35a <bt_gatt_notification>
}
   1c610:	2000      	movs	r0, #0
   1c612:	bd38      	pop	{r3, r4, r5, pc}

0001c614 <bt_gatt_foreach_attr>:
{
   1c614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c616:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c61a:	2300      	movs	r3, #0
   1c61c:	461a      	mov	r2, r3
   1c61e:	9300      	str	r3, [sp, #0]
   1c620:	f7f7 fc64 	bl	13eec <bt_gatt_foreach_attr_type>
}
   1c624:	b005      	add	sp, #20
   1c626:	f85d fb04 	ldr.w	pc, [sp], #4

0001c62a <find_info_cb>:
{
   1c62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c62c:	6893      	ldr	r3, [r2, #8]
{
   1c62e:	4605      	mov	r5, r0
   1c630:	460e      	mov	r6, r1
   1c632:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c634:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1c636:	b963      	cbnz	r3, 1c652 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c638:	6850      	ldr	r0, [r2, #4]
   1c63a:	2101      	movs	r1, #1
   1c63c:	3008      	adds	r0, #8
   1c63e:	f7f9 fa6f 	bl	15b20 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c642:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c644:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c646:	781b      	ldrb	r3, [r3, #0]
   1c648:	2b00      	cmp	r3, #0
   1c64a:	bf0c      	ite	eq
   1c64c:	2301      	moveq	r3, #1
   1c64e:	2302      	movne	r3, #2
   1c650:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c652:	68a3      	ldr	r3, [r4, #8]
   1c654:	781b      	ldrb	r3, [r3, #0]
   1c656:	2b01      	cmp	r3, #1
   1c658:	d003      	beq.n	1c662 <find_info_cb+0x38>
   1c65a:	2b02      	cmp	r3, #2
   1c65c:	d019      	beq.n	1c692 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1c65e:	2000      	movs	r0, #0
   1c660:	e016      	b.n	1c690 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c662:	682b      	ldr	r3, [r5, #0]
   1c664:	781b      	ldrb	r3, [r3, #0]
   1c666:	2b00      	cmp	r3, #0
   1c668:	d1f9      	bne.n	1c65e <find_info_cb+0x34>
   1c66a:	6860      	ldr	r0, [r4, #4]
   1c66c:	2104      	movs	r1, #4
   1c66e:	3008      	adds	r0, #8
   1c670:	f7f9 fa56 	bl	15b20 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c674:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c676:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c678:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c67a:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c67c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c67e:	6863      	ldr	r3, [r4, #4]
   1c680:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c684:	899b      	ldrh	r3, [r3, #12]
   1c686:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c688:	2804      	cmp	r0, #4
   1c68a:	bf94      	ite	ls
   1c68c:	2000      	movls	r0, #0
   1c68e:	2001      	movhi	r0, #1
}
   1c690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c692:	682b      	ldr	r3, [r5, #0]
   1c694:	781b      	ldrb	r3, [r3, #0]
   1c696:	2b02      	cmp	r3, #2
   1c698:	d1e1      	bne.n	1c65e <find_info_cb+0x34>
   1c69a:	6860      	ldr	r0, [r4, #4]
   1c69c:	2112      	movs	r1, #18
   1c69e:	3008      	adds	r0, #8
   1c6a0:	f7f9 fa3e 	bl	15b20 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c6a4:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c6a6:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c6a8:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1c6aa:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c6ae:	3101      	adds	r1, #1
   1c6b0:	f7ff fbc0 	bl	1be34 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c6b4:	6863      	ldr	r3, [r4, #4]
   1c6b6:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c6ba:	899b      	ldrh	r3, [r3, #12]
   1c6bc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c6be:	2812      	cmp	r0, #18
   1c6c0:	e7e3      	b.n	1c68a <find_info_cb+0x60>

0001c6c2 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c6c2:	68d0      	ldr	r0, [r2, #12]
   1c6c4:	3104      	adds	r1, #4
   1c6c6:	7803      	ldrb	r3, [r0, #0]
   1c6c8:	b913      	cbnz	r3, 1c6d0 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c6ca:	7001      	strb	r1, [r0, #0]
	return true;
   1c6cc:	2001      	movs	r0, #1
}
   1c6ce:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c6d0:	428b      	cmp	r3, r1
   1c6d2:	d0fb      	beq.n	1c6cc <attr_read_group_cb+0xa>
		data->group = NULL;
   1c6d4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c6d6:	6891      	ldr	r1, [r2, #8]
   1c6d8:	898b      	ldrh	r3, [r1, #12]
   1c6da:	3b04      	subs	r3, #4
   1c6dc:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c6de:	6110      	str	r0, [r2, #16]
		return false;
   1c6e0:	4770      	bx	lr

0001c6e2 <write_cb>:
{
   1c6e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c6e4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c6e6:	4601      	mov	r1, r0
{
   1c6e8:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c6ea:	222a      	movs	r2, #42	; 0x2a
   1c6ec:	6820      	ldr	r0, [r4, #0]
   1c6ee:	f000 fda5 	bl	1d23c <bt_gatt_check_perm>
   1c6f2:	4605      	mov	r5, r0
   1c6f4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c6f6:	bb00      	cbnz	r0, 1c73a <write_cb+0x58>
	if (!data->req) {
   1c6f8:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1c6fa:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c6fc:	2b00      	cmp	r3, #0
   1c6fe:	bf14      	ite	ne
   1c700:	2300      	movne	r3, #0
   1c702:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c704:	9301      	str	r3, [sp, #4]
   1c706:	8a63      	ldrh	r3, [r4, #18]
   1c708:	68b7      	ldr	r7, [r6, #8]
   1c70a:	9300      	str	r3, [sp, #0]
   1c70c:	68e2      	ldr	r2, [r4, #12]
   1c70e:	8a23      	ldrh	r3, [r4, #16]
   1c710:	6820      	ldr	r0, [r4, #0]
   1c712:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1c714:	1e03      	subs	r3, r0, #0
   1c716:	db05      	blt.n	1c724 <write_cb+0x42>
   1c718:	8a22      	ldrh	r2, [r4, #16]
   1c71a:	4293      	cmp	r3, r2
   1c71c:	d10b      	bne.n	1c736 <write_cb+0x54>
	data->err = 0U;
   1c71e:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c720:	2501      	movs	r5, #1
   1c722:	e005      	b.n	1c730 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1c724:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1c728:	d305      	bcc.n	1c736 <write_cb+0x54>
		return -err;
   1c72a:	425b      	negs	r3, r3
   1c72c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1c72e:	7523      	strb	r3, [r4, #20]
}
   1c730:	4628      	mov	r0, r5
   1c732:	b003      	add	sp, #12
   1c734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c736:	230e      	movs	r3, #14
   1c738:	e7f9      	b.n	1c72e <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1c73a:	2500      	movs	r5, #0
   1c73c:	e7f8      	b.n	1c730 <write_cb+0x4e>

0001c73e <att_chan_read>:
{
   1c73e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c742:	4680      	mov	r8, r0
   1c744:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c746:	4610      	mov	r0, r2
{
   1c748:	4699      	mov	r9, r3
   1c74a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c74c:	f7ff fefc 	bl	1c548 <net_buf_frags_len>
   1c750:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1c754:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c756:	4283      	cmp	r3, r0
   1c758:	d97a      	bls.n	1c850 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c75a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1c75e:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1c760:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c762:	f7f9 f923 	bl	159ac <net_buf_frag_last>
	size_t len, total = 0;
   1c766:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c76a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c76c:	4630      	mov	r0, r6
   1c76e:	f7ff feeb 	bl	1c548 <net_buf_frags_len>
   1c772:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1c776:	f105 0708 	add.w	r7, r5, #8
   1c77a:	1a24      	subs	r4, r4, r0
   1c77c:	4638      	mov	r0, r7
   1c77e:	f000 fe90 	bl	1d4a2 <net_buf_simple_tailroom>
   1c782:	4284      	cmp	r4, r0
   1c784:	d211      	bcs.n	1c7aa <att_chan_read+0x6c>
   1c786:	4630      	mov	r0, r6
   1c788:	f7ff fede 	bl	1c548 <net_buf_frags_len>
   1c78c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c790:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c792:	bb34      	cbnz	r4, 1c7e2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c794:	79b0      	ldrb	r0, [r6, #6]
   1c796:	f7f8 ff2d 	bl	155f4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c79a:	2200      	movs	r2, #0
   1c79c:	2300      	movs	r3, #0
   1c79e:	f000 fe5a 	bl	1d456 <net_buf_alloc_fixed>
			if (!frag) {
   1c7a2:	4605      	mov	r5, r0
   1c7a4:	b930      	cbnz	r0, 1c7b4 <att_chan_read+0x76>
	return total;
   1c7a6:	4657      	mov	r7, sl
   1c7a8:	e02c      	b.n	1c804 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c7aa:	4638      	mov	r0, r7
   1c7ac:	f000 fe79 	bl	1d4a2 <net_buf_simple_tailroom>
   1c7b0:	4604      	mov	r4, r0
   1c7b2:	e7ee      	b.n	1c792 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c7b4:	4601      	mov	r1, r0
   1c7b6:	4630      	mov	r0, r6
   1c7b8:	f7f9 f938 	bl	15a2c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c7bc:	4630      	mov	r0, r6
   1c7be:	f7ff fec3 	bl	1c548 <net_buf_frags_len>
   1c7c2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c7c6:	f105 0708 	add.w	r7, r5, #8
   1c7ca:	1a24      	subs	r4, r4, r0
   1c7cc:	4638      	mov	r0, r7
   1c7ce:	f000 fe68 	bl	1d4a2 <net_buf_simple_tailroom>
   1c7d2:	4284      	cmp	r4, r0
   1c7d4:	d21a      	bcs.n	1c80c <att_chan_read+0xce>
   1c7d6:	4630      	mov	r0, r6
   1c7d8:	f7ff feb6 	bl	1c548 <net_buf_frags_len>
   1c7dc:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c7e0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c7e2:	68a9      	ldr	r1, [r5, #8]
   1c7e4:	89aa      	ldrh	r2, [r5, #12]
   1c7e6:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c7ea:	440a      	add	r2, r1
   1c7ec:	9803      	ldr	r0, [sp, #12]
   1c7ee:	4659      	mov	r1, fp
   1c7f0:	f8cd 9000 	str.w	r9, [sp]
   1c7f4:	b2a3      	uxth	r3, r4
   1c7f6:	47b8      	blx	r7
		if (read < 0) {
   1c7f8:	1e07      	subs	r7, r0, #0
   1c7fa:	da0c      	bge.n	1c816 <att_chan_read+0xd8>
				return total;
   1c7fc:	f1ba 0f00 	cmp.w	sl, #0
   1c800:	bf18      	it	ne
   1c802:	4657      	movne	r7, sl
}
   1c804:	4638      	mov	r0, r7
   1c806:	b005      	add	sp, #20
   1c808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c80c:	4638      	mov	r0, r7
   1c80e:	f000 fe48 	bl	1d4a2 <net_buf_simple_tailroom>
   1c812:	4604      	mov	r4, r0
   1c814:	e7e5      	b.n	1c7e2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c818:	b993      	cbnz	r3, 1c840 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c81a:	4639      	mov	r1, r7
   1c81c:	f105 0008 	add.w	r0, r5, #8
   1c820:	f7f9 f97e 	bl	15b20 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c824:	4630      	mov	r0, r6
   1c826:	f7ff fe8f 	bl	1c548 <net_buf_frags_len>
   1c82a:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1c82e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c830:	4283      	cmp	r3, r0
		total += read;
   1c832:	44ba      	add	sl, r7
		offset += read;
   1c834:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c838:	d9b5      	bls.n	1c7a6 <att_chan_read+0x68>
   1c83a:	42a7      	cmp	r7, r4
   1c83c:	d096      	beq.n	1c76c <att_chan_read+0x2e>
   1c83e:	e7b2      	b.n	1c7a6 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c840:	4639      	mov	r1, r7
   1c842:	4628      	mov	r0, r5
   1c844:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c848:	4798      	blx	r3
   1c84a:	2800      	cmp	r0, #0
   1c84c:	d1e5      	bne.n	1c81a <att_chan_read+0xdc>
   1c84e:	e7aa      	b.n	1c7a6 <att_chan_read+0x68>
		return 0;
   1c850:	2700      	movs	r7, #0
   1c852:	e7d7      	b.n	1c804 <att_chan_read+0xc6>

0001c854 <bt_att_chan_send>:
{
   1c854:	b570      	push	{r4, r5, r6, lr}
   1c856:	4604      	mov	r4, r0
   1c858:	460e      	mov	r6, r1
	if (!cb) {
   1c85a:	4615      	mov	r5, r2
   1c85c:	b132      	cbz	r2, 1c86c <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1c85e:	462a      	mov	r2, r5
   1c860:	4631      	mov	r1, r6
   1c862:	4620      	mov	r0, r4
}
   1c864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1c868:	f7f5 beb6 	b.w	125d8 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1c86c:	2200      	movs	r2, #0
   1c86e:	2300      	movs	r3, #0
   1c870:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1c874:	f7fc ff18 	bl	196a8 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1c878:	2800      	cmp	r0, #0
   1c87a:	daf0      	bge.n	1c85e <bt_att_chan_send+0xa>
}
   1c87c:	f06f 000a 	mvn.w	r0, #10
   1c880:	bd70      	pop	{r4, r5, r6, pc}

0001c882 <bt_att_chan_send_rsp>:
{
   1c882:	b538      	push	{r3, r4, r5, lr}
   1c884:	4604      	mov	r4, r0
   1c886:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1c888:	f7ff ffe4 	bl	1c854 <bt_att_chan_send>
	if (err) {
   1c88c:	b130      	cbz	r0, 1c89c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1c88e:	4629      	mov	r1, r5
   1c890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1c894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1c898:	f7f8 bffe 	b.w	15898 <net_buf_put>
}
   1c89c:	bd38      	pop	{r3, r4, r5, pc}

0001c89e <process_queue>:
{
   1c89e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1c8a0:	2200      	movs	r2, #0
{
   1c8a2:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1c8a4:	2300      	movs	r3, #0
   1c8a6:	4608      	mov	r0, r1
{
   1c8a8:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1c8aa:	f7f8 ffa1 	bl	157f0 <net_buf_get>
	if (buf) {
   1c8ae:	4605      	mov	r5, r0
   1c8b0:	b160      	cbz	r0, 1c8cc <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1c8b2:	4601      	mov	r1, r0
   1c8b4:	2200      	movs	r2, #0
   1c8b6:	4620      	mov	r0, r4
   1c8b8:	f7f5 fe8e 	bl	125d8 <chan_send>
		if (err) {
   1c8bc:	4604      	mov	r4, r0
   1c8be:	b118      	cbz	r0, 1c8c8 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1c8c0:	4629      	mov	r1, r5
   1c8c2:	4630      	mov	r0, r6
   1c8c4:	f001 fb4d 	bl	1df62 <k_queue_prepend>
}
   1c8c8:	4620      	mov	r0, r4
   1c8ca:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c8cc:	f06f 0401 	mvn.w	r4, #1
   1c8d0:	e7fa      	b.n	1c8c8 <process_queue+0x2a>

0001c8d2 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8d2:	2200      	movs	r2, #0
   1c8d4:	b510      	push	{r4, lr}
	return list->head;
   1c8d6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8d8:	b153      	cbz	r3, 1c8f0 <sys_slist_find_and_remove.isra.0+0x1e>
   1c8da:	428b      	cmp	r3, r1
   1c8dc:	d10e      	bne.n	1c8fc <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1c8de:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1c8e0:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c8e2:	b932      	cbnz	r2, 1c8f2 <sys_slist_find_and_remove.isra.0+0x20>
   1c8e4:	42a1      	cmp	r1, r4
	list->head = node;
   1c8e6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c8e8:	d100      	bne.n	1c8ec <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1c8ea:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c8ec:	2300      	movs	r3, #0
   1c8ee:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8f0:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c8f2:	42a1      	cmp	r1, r4
	parent->next = child;
   1c8f4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c8f6:	bf08      	it	eq
   1c8f8:	6042      	streq	r2, [r0, #4]
}
   1c8fa:	e7f7      	b.n	1c8ec <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1c8fc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8fe:	681b      	ldr	r3, [r3, #0]
   1c900:	e7ea      	b.n	1c8d8 <sys_slist_find_and_remove.isra.0+0x6>

0001c902 <att_exec_write_req>:
   1c902:	2006      	movs	r0, #6
   1c904:	4770      	bx	lr

0001c906 <chan_req_send>:
{
   1c906:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c908:	690e      	ldr	r6, [r1, #16]
{
   1c90a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c90c:	4630      	mov	r0, r6
   1c90e:	f7ff fe1b 	bl	1c548 <net_buf_frags_len>
   1c912:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1c916:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c918:	4283      	cmp	r3, r0
   1c91a:	d317      	bcc.n	1c94c <chan_req_send+0x46>
	chan->req = req;
   1c91c:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1c920:	f106 0008 	add.w	r0, r6, #8
   1c924:	f000 fdb9 	bl	1d49a <net_buf_simple_headroom>
	state->len = buf->len;
   1c928:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1c92a:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1c92c:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1c92e:	6920      	ldr	r0, [r4, #16]
   1c930:	f7f9 f824 	bl	1597c <net_buf_ref>
   1c934:	2200      	movs	r2, #0
   1c936:	4601      	mov	r1, r0
   1c938:	4628      	mov	r0, r5
   1c93a:	f7f5 fe4d 	bl	125d8 <chan_send>
	if (err) {
   1c93e:	4605      	mov	r5, r0
   1c940:	b110      	cbz	r0, 1c948 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1c942:	6920      	ldr	r0, [r4, #16]
   1c944:	f7f8 ffd6 	bl	158f4 <net_buf_unref>
}
   1c948:	4628      	mov	r0, r5
   1c94a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1c94c:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1c950:	e7fa      	b.n	1c948 <chan_req_send+0x42>

0001c952 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c952:	30c8      	adds	r0, #200	; 0xc8
   1c954:	e8d0 3fef 	ldaex	r3, [r0]
   1c958:	f023 0301 	bic.w	r3, r3, #1
   1c95c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c960:	2a00      	cmp	r2, #0
   1c962:	d1f7      	bne.n	1c954 <chan_rsp_sent+0x2>
}
   1c964:	4770      	bx	lr

0001c966 <chan_cfm_sent>:
   1c966:	30c8      	adds	r0, #200	; 0xc8
   1c968:	e8d0 3fef 	ldaex	r3, [r0]
   1c96c:	f023 0302 	bic.w	r3, r3, #2
   1c970:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c974:	2a00      	cmp	r2, #0
   1c976:	d1f7      	bne.n	1c968 <chan_cfm_sent+0x2>
}
   1c978:	4770      	bx	lr

0001c97a <read_cb>:
{
   1c97a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c97e:	4606      	mov	r6, r0
	data->err = 0x00;
   1c980:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1c982:	f8d2 8000 	ldr.w	r8, [r2]
{
   1c986:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1c988:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c98c:	4631      	mov	r1, r6
	data->err = 0x00;
   1c98e:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c990:	2215      	movs	r2, #21
   1c992:	f000 fc53 	bl	1d23c <bt_gatt_check_perm>
   1c996:	4604      	mov	r4, r0
   1c998:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1c99a:	b9a0      	cbnz	r0, 1c9c6 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c99c:	e9cd 0000 	strd	r0, r0, [sp]
   1c9a0:	88ab      	ldrh	r3, [r5, #4]
   1c9a2:	4631      	mov	r1, r6
   1c9a4:	4640      	mov	r0, r8
   1c9a6:	68aa      	ldr	r2, [r5, #8]
   1c9a8:	f7ff fec9 	bl	1c73e <att_chan_read>
	if (ret < 0) {
   1c9ac:	1e03      	subs	r3, r0, #0
   1c9ae:	da0c      	bge.n	1c9ca <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1c9b0:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1c9b4:	bf32      	itee	cc
   1c9b6:	230e      	movcc	r3, #14
		return -err;
   1c9b8:	425b      	negcs	r3, r3
   1c9ba:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1c9bc:	732b      	strb	r3, [r5, #12]
}
   1c9be:	4620      	mov	r0, r4
   1c9c0:	b002      	add	sp, #8
   1c9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1c9c6:	463c      	mov	r4, r7
   1c9c8:	e7f9      	b.n	1c9be <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1c9ca:	2401      	movs	r4, #1
   1c9cc:	e7f7      	b.n	1c9be <read_cb+0x44>

0001c9ce <bt_att_sent>:
{
   1c9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1c9d0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1c9d4:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1c9d6:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c9da:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1c9de:	b10b      	cbz	r3, 1c9e4 <bt_att_sent+0x16>
		chan->sent(chan);
   1c9e0:	4638      	mov	r0, r7
   1c9e2:	4798      	blx	r3
   1c9e4:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1c9e8:	e8d3 2fef 	ldaex	r2, [r3]
   1c9ec:	f022 0210 	bic.w	r2, r2, #16
   1c9f0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c9f4:	2900      	cmp	r1, #0
   1c9f6:	d1f7      	bne.n	1c9e8 <bt_att_sent+0x1a>
	if (!att) {
   1c9f8:	b335      	cbz	r5, 1ca48 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1c9fa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1c9fe:	b98b      	cbnz	r3, 1ca24 <bt_att_sent+0x56>
   1ca00:	686b      	ldr	r3, [r5, #4]
   1ca02:	b17b      	cbz	r3, 1ca24 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1ca04:	1d28      	adds	r0, r5, #4
   1ca06:	f7ff fd95 	bl	1c534 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ca0a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1ca0c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ca0e:	4638      	mov	r0, r7
   1ca10:	f7ff ff79 	bl	1c906 <chan_req_send>
   1ca14:	2800      	cmp	r0, #0
   1ca16:	da17      	bge.n	1ca48 <bt_att_sent+0x7a>
	parent->next = child;
   1ca18:	686b      	ldr	r3, [r5, #4]
   1ca1a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ca1c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1ca1e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ca20:	b903      	cbnz	r3, 1ca24 <bt_att_sent+0x56>
	list->tail = node;
   1ca22:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1ca24:	4638      	mov	r0, r7
   1ca26:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1ca2a:	f7ff ff38 	bl	1c89e <process_queue>
	if (!err) {
   1ca2e:	b158      	cbz	r0, 1ca48 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1ca30:	4638      	mov	r0, r7
   1ca32:	f105 010c 	add.w	r1, r5, #12
   1ca36:	f7ff ff32 	bl	1c89e <process_queue>
	if (!err) {
   1ca3a:	b128      	cbz	r0, 1ca48 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1ca3c:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1ca40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ca44:	f7fc bdf4 	b.w	19630 <z_impl_k_sem_give>
   1ca48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ca4a <att_req_send_process>:
{
   1ca4a:	b570      	push	{r4, r5, r6, lr}
   1ca4c:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1ca4e:	3004      	adds	r0, #4
   1ca50:	f7ff fd70 	bl	1c534 <sys_slist_get>
	if (!node) {
   1ca54:	4606      	mov	r6, r0
   1ca56:	b1c0      	cbz	r0, 1ca8a <att_req_send_process+0x40>
	return list->head;
   1ca58:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ca5a:	b153      	cbz	r3, 1ca72 <att_req_send_process+0x28>
   1ca5c:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1ca60:	d007      	beq.n	1ca72 <att_req_send_process+0x28>
	return node->next;
   1ca62:	681c      	ldr	r4, [r3, #0]
   1ca64:	b10c      	cbz	r4, 1ca6a <att_req_send_process+0x20>
   1ca66:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1ca6a:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1ca6e:	b13b      	cbz	r3, 1ca80 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ca70:	b964      	cbnz	r4, 1ca8c <att_req_send_process+0x42>
	parent->next = child;
   1ca72:	686b      	ldr	r3, [r5, #4]
   1ca74:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ca76:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1ca78:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ca7a:	b933      	cbnz	r3, 1ca8a <att_req_send_process+0x40>
	list->tail = node;
   1ca7c:	60ae      	str	r6, [r5, #8]
}
   1ca7e:	e004      	b.n	1ca8a <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ca80:	4631      	mov	r1, r6
   1ca82:	f7f5 fe15 	bl	126b0 <bt_att_chan_req_send>
   1ca86:	2800      	cmp	r0, #0
   1ca88:	dbf2      	blt.n	1ca70 <att_req_send_process+0x26>
}
   1ca8a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ca8c:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1ca90:	d004      	beq.n	1ca9c <att_req_send_process+0x52>
	return node->next;
   1ca92:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ca96:	b10b      	cbz	r3, 1ca9c <att_req_send_process+0x52>
   1ca98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1ca9c:	4620      	mov	r0, r4
   1ca9e:	461c      	mov	r4, r3
   1caa0:	e7e3      	b.n	1ca6a <att_req_send_process+0x20>

0001caa2 <bt_att_status>:
{
   1caa2:	b538      	push	{r3, r4, r5, lr}
   1caa4:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1caa6:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1caaa:	07db      	lsls	r3, r3, #31
   1caac:	d519      	bpl.n	1cae2 <bt_att_status+0x40>
	if (!chan->att) {
   1caae:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1cab2:	b1b0      	cbz	r0, 1cae2 <bt_att_status+0x40>
	if (chan->req) {
   1cab4:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1cab8:	b99b      	cbnz	r3, 1cae2 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1caba:	3004      	adds	r0, #4
   1cabc:	f7ff fd3a 	bl	1c534 <sys_slist_get>
	if (!node) {
   1cac0:	4604      	mov	r4, r0
   1cac2:	b170      	cbz	r0, 1cae2 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cac4:	4601      	mov	r1, r0
   1cac6:	f1a5 0008 	sub.w	r0, r5, #8
   1caca:	f7f5 fdf1 	bl	126b0 <bt_att_chan_req_send>
   1cace:	2800      	cmp	r0, #0
   1cad0:	da07      	bge.n	1cae2 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1cad2:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1cad6:	685a      	ldr	r2, [r3, #4]
   1cad8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cada:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1cadc:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cade:	b902      	cbnz	r2, 1cae2 <bt_att_status+0x40>
	list->tail = node;
   1cae0:	609c      	str	r4, [r3, #8]
}
   1cae2:	bd38      	pop	{r3, r4, r5, pc}

0001cae4 <att_write_req>:
{
   1cae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cae6:	460c      	mov	r4, r1
   1cae8:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1caea:	f101 0008 	add.w	r0, r1, #8
   1caee:	f000 fccc 	bl	1d48a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1caf2:	89a2      	ldrh	r2, [r4, #12]
   1caf4:	4603      	mov	r3, r0
   1caf6:	9201      	str	r2, [sp, #4]
   1caf8:	68a2      	ldr	r2, [r4, #8]
   1cafa:	2112      	movs	r1, #18
   1cafc:	9200      	str	r2, [sp, #0]
   1cafe:	4628      	mov	r0, r5
   1cb00:	2213      	movs	r2, #19
   1cb02:	f7f5 ffb3 	bl	12a6c <att_write_rsp.constprop.0>
}
   1cb06:	b003      	add	sp, #12
   1cb08:	bd30      	pop	{r4, r5, pc}

0001cb0a <att_write_cmd>:
{
   1cb0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cb0c:	460c      	mov	r4, r1
   1cb0e:	4605      	mov	r5, r0
   1cb10:	f101 0008 	add.w	r0, r1, #8
   1cb14:	f000 fcb9 	bl	1d48a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1cb18:	89a2      	ldrh	r2, [r4, #12]
   1cb1a:	4603      	mov	r3, r0
   1cb1c:	9201      	str	r2, [sp, #4]
   1cb1e:	68a2      	ldr	r2, [r4, #8]
   1cb20:	4628      	mov	r0, r5
   1cb22:	9200      	str	r2, [sp, #0]
   1cb24:	2200      	movs	r2, #0
   1cb26:	4611      	mov	r1, r2
   1cb28:	f7f5 ffa0 	bl	12a6c <att_write_rsp.constprop.0>
}
   1cb2c:	b003      	add	sp, #12
   1cb2e:	bd30      	pop	{r4, r5, pc}

0001cb30 <att_read_blob_req>:
{
   1cb30:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1cb32:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1cb34:	210c      	movs	r1, #12
   1cb36:	8813      	ldrh	r3, [r2, #0]
   1cb38:	8852      	ldrh	r2, [r2, #2]
   1cb3a:	9200      	str	r2, [sp, #0]
   1cb3c:	220d      	movs	r2, #13
   1cb3e:	f7f6 f8f1 	bl	12d24 <att_read_rsp>
}
   1cb42:	b003      	add	sp, #12
   1cb44:	f85d fb04 	ldr.w	pc, [sp], #4

0001cb48 <att_read_req>:
{
   1cb48:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cb4a:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1cb4c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cb4e:	210a      	movs	r1, #10
   1cb50:	881b      	ldrh	r3, [r3, #0]
   1cb52:	9200      	str	r2, [sp, #0]
   1cb54:	220b      	movs	r2, #11
   1cb56:	f7f6 f8e5 	bl	12d24 <att_read_rsp>
}
   1cb5a:	b003      	add	sp, #12
   1cb5c:	f85d fb04 	ldr.w	pc, [sp], #4

0001cb60 <bt_att_init>:
	bt_gatt_init();
   1cb60:	f7f7 b918 	b.w	13d94 <bt_gatt_init>

0001cb64 <bt_att_get_mtu>:
{
   1cb64:	b508      	push	{r3, lr}
	att = att_get(conn);
   1cb66:	f7f5 fba5 	bl	122b4 <att_get>
	if (!att) {
   1cb6a:	b1d8      	cbz	r0, 1cba4 <bt_att_get_mtu+0x40>
	return list->head;
   1cb6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cb6e:	b1c8      	cbz	r0, 1cba4 <bt_att_get_mtu+0x40>
   1cb70:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   1cb74:	d015      	beq.n	1cba2 <bt_att_get_mtu+0x3e>
	return node->next;
   1cb76:	6803      	ldr	r3, [r0, #0]
   1cb78:	b10b      	cbz	r3, 1cb7e <bt_att_get_mtu+0x1a>
   1cb7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1cb7e:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1cb80:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   1cb84:	4290      	cmp	r0, r2
   1cb86:	bf38      	it	cc
   1cb88:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cb8a:	b15b      	cbz	r3, 1cba4 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cb8c:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1cb90:	d004      	beq.n	1cb9c <bt_att_get_mtu+0x38>
	return node->next;
   1cb92:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1cb96:	b10a      	cbz	r2, 1cb9c <bt_att_get_mtu+0x38>
   1cb98:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1cb9c:	4619      	mov	r1, r3
   1cb9e:	4613      	mov	r3, r2
   1cba0:	e7ee      	b.n	1cb80 <bt_att_get_mtu+0x1c>
		return 0;
   1cba2:	4608      	mov	r0, r1
}
   1cba4:	bd08      	pop	{r3, pc}

0001cba6 <att_req_destroy>:
{
   1cba6:	b510      	push	{r4, lr}
   1cba8:	4604      	mov	r4, r0
	if (req->buf) {
   1cbaa:	6900      	ldr	r0, [r0, #16]
   1cbac:	b108      	cbz	r0, 1cbb2 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1cbae:	f7f8 fea1 	bl	158f4 <net_buf_unref>
	if (req->destroy) {
   1cbb2:	68a3      	ldr	r3, [r4, #8]
   1cbb4:	b10b      	cbz	r3, 1cbba <att_req_destroy+0x14>
		req->destroy(req);
   1cbb6:	4620      	mov	r0, r4
   1cbb8:	4798      	blx	r3
	bt_att_req_free(req);
   1cbba:	4620      	mov	r0, r4
}
   1cbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1cbc0:	f7f6 ba4e 	b.w	13060 <bt_att_req_free>

0001cbc4 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1cbc4:	898a      	ldrh	r2, [r1, #12]
   1cbc6:	2300      	movs	r3, #0
   1cbc8:	6889      	ldr	r1, [r1, #8]
   1cbca:	f7f6 ba55 	b.w	13078 <att_handle_rsp>

0001cbce <att_handle_find_type_rsp>:
   1cbce:	f7ff bff9 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbd2 <att_handle_read_type_rsp>:
   1cbd2:	f7ff bff7 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbd6 <att_handle_read_rsp>:
   1cbd6:	f7ff bff5 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbda <att_handle_read_blob_rsp>:
   1cbda:	f7ff bff3 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbde <att_handle_read_mult_rsp>:
   1cbde:	f7ff bff1 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbe2 <att_handle_read_group_rsp>:
   1cbe2:	f7ff bfef 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbe6 <att_handle_write_rsp>:
   1cbe6:	f7ff bfed 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbea <att_handle_prepare_write_rsp>:
   1cbea:	f7ff bfeb 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbee <att_handle_exec_write_rsp>:
   1cbee:	f7ff bfe9 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbf2 <att_confirm>:
   1cbf2:	f7ff bfe7 	b.w	1cbc4 <att_handle_find_info_rsp>

0001cbf6 <att_mtu_rsp>:
{
   1cbf6:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1cbf8:	6889      	ldr	r1, [r1, #8]
{
   1cbfa:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1cbfc:	880c      	ldrh	r4, [r1, #0]
{
   1cbfe:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1cc00:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1cc02:	bf89      	itett	hi
   1cc04:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1cc06:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1cc08:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1cc0c:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1cc10:	bf99      	ittee	ls
   1cc12:	2304      	movls	r3, #4
   1cc14:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1cc16:	2300      	movhi	r3, #0
   1cc18:	8992      	ldrhhi	r2, [r2, #12]
}
   1cc1a:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1cc1c:	f7f6 ba2c 	b.w	13078 <att_handle_rsp>

0001cc20 <att_chan_detach>:
{
   1cc20:	b538      	push	{r3, r4, r5, lr}
   1cc22:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1cc24:	6800      	ldr	r0, [r0, #0]
   1cc26:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1cc2a:	3028      	adds	r0, #40	; 0x28
   1cc2c:	f7ff fe51 	bl	1c8d2 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1cc30:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1cc34:	4628      	mov	r0, r5
   1cc36:	f7fc fcfb 	bl	19630 <z_impl_k_sem_give>
   1cc3a:	4628      	mov	r0, r5
   1cc3c:	f7fc fcf8 	bl	19630 <z_impl_k_sem_give>
   1cc40:	4628      	mov	r0, r5
   1cc42:	f7fc fcf5 	bl	19630 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1cc46:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1cc4a:	2200      	movs	r2, #0
   1cc4c:	2300      	movs	r3, #0
   1cc4e:	4628      	mov	r0, r5
   1cc50:	f7f8 fdce 	bl	157f0 <net_buf_get>
   1cc54:	4602      	mov	r2, r0
   1cc56:	b950      	cbnz	r0, 1cc6e <att_chan_detach+0x4e>
	if (chan->req) {
   1cc58:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1cc5c:	b123      	cbz	r3, 1cc68 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1cc5e:	4601      	mov	r1, r0
   1cc60:	230e      	movs	r3, #14
   1cc62:	4620      	mov	r0, r4
   1cc64:	f7f6 fa08 	bl	13078 <att_handle_rsp>
	chan->att = NULL;
   1cc68:	2300      	movs	r3, #0
   1cc6a:	6023      	str	r3, [r4, #0]
}
   1cc6c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1cc6e:	f7f8 fe41 	bl	158f4 <net_buf_unref>
   1cc72:	e7ea      	b.n	1cc4a <att_chan_detach+0x2a>

0001cc74 <bt_att_disconnected>:
{
   1cc74:	b538      	push	{r3, r4, r5, lr}
   1cc76:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1cc78:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1cc7c:	f7ff ffd0 	bl	1cc20 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1cc80:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cc82:	b93b      	cbnz	r3, 1cc94 <bt_att_disconnected+0x20>
	att_reset(att);
   1cc84:	4628      	mov	r0, r5
   1cc86:	f7f6 fa55 	bl	13134 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1cc8a:	6820      	ldr	r0, [r4, #0]
}
   1cc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1cc90:	f7f8 bbdc 	b.w	1544c <bt_gatt_disconnected>
}
   1cc94:	bd38      	pop	{r3, r4, r5, pc}

0001cc96 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1cc96:	6010      	str	r0, [r2, #0]
}
   1cc98:	2000      	movs	r0, #0
   1cc9a:	4770      	bx	lr

0001cc9c <gatt_ccc_changed>:
{
   1cc9c:	460b      	mov	r3, r1
   1cc9e:	8a49      	ldrh	r1, [r1, #18]
   1cca0:	8b9a      	ldrh	r2, [r3, #28]
   1cca2:	4291      	cmp	r1, r2
   1cca4:	bf38      	it	cc
   1cca6:	4611      	movcc	r1, r2
   1cca8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1ccaa:	4291      	cmp	r1, r2
   1ccac:	bf38      	it	cc
   1ccae:	4611      	movcc	r1, r2
   1ccb0:	891a      	ldrh	r2, [r3, #8]
   1ccb2:	4291      	cmp	r1, r2
   1ccb4:	bf38      	it	cc
   1ccb6:	4611      	movcc	r1, r2
		if (ccc->cfg[i].value > value) {
   1ccb8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   1ccba:	4291      	cmp	r1, r2
   1ccbc:	bf38      	it	cc
   1ccbe:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1ccc0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   1ccc2:	428a      	cmp	r2, r1
   1ccc4:	d003      	beq.n	1ccce <gatt_ccc_changed+0x32>
		ccc->value = value;
   1ccc6:	8659      	strh	r1, [r3, #50]	; 0x32
		if (ccc->cfg_changed) {
   1ccc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1ccca:	b103      	cbz	r3, 1ccce <gatt_ccc_changed+0x32>
			ccc->cfg_changed(attr, value);
   1cccc:	4718      	bx	r3
}
   1ccce:	4770      	bx	lr

0001ccd0 <gatt_indicate_rsp>:
{
   1ccd0:	b510      	push	{r4, lr}
   1ccd2:	9c02      	ldr	r4, [sp, #8]
   1ccd4:	460a      	mov	r2, r1
	params->_ref--;
   1ccd6:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1ccd8:	4621      	mov	r1, r4
	params->_ref--;
   1ccda:	3b01      	subs	r3, #1
   1ccdc:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1ccde:	68a3      	ldr	r3, [r4, #8]
   1cce0:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1cce2:	68e3      	ldr	r3, [r4, #12]
   1cce4:	b12b      	cbz	r3, 1ccf2 <gatt_indicate_rsp+0x22>
   1cce6:	7da2      	ldrb	r2, [r4, #22]
   1cce8:	b91a      	cbnz	r2, 1ccf2 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1ccea:	4620      	mov	r0, r4
}
   1ccec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1ccf0:	4718      	bx	r3
}
   1ccf2:	bd10      	pop	{r4, pc}

0001ccf4 <match_uuid>:
	data->attr = attr;
   1ccf4:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1ccf6:	8091      	strh	r1, [r2, #4]
}
   1ccf8:	2000      	movs	r0, #0
   1ccfa:	4770      	bx	lr

0001ccfc <ccc_set_cb>:
}
   1ccfc:	2000      	movs	r0, #0
   1ccfe:	4770      	bx	lr

0001cd00 <gen_hash_m>:
{
   1cd00:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cd02:	6807      	ldr	r7, [r0, #0]
{
   1cd04:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cd06:	783d      	ldrb	r5, [r7, #0]
{
   1cd08:	4614      	mov	r4, r2
   1cd0a:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cd0c:	b10d      	cbz	r5, 1cd12 <gen_hash_m+0x12>
	switch (u16->val) {
   1cd0e:	2501      	movs	r5, #1
   1cd10:	e014      	b.n	1cd3c <gen_hash_m+0x3c>
   1cd12:	887b      	ldrh	r3, [r7, #2]
   1cd14:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1cd18:	d004      	beq.n	1cd24 <gen_hash_m+0x24>
   1cd1a:	d812      	bhi.n	1cd42 <gen_hash_m+0x42>
   1cd1c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1cd20:	2b03      	cmp	r3, #3
   1cd22:	d8f4      	bhi.n	1cd0e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1cd24:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cd28:	2202      	movs	r2, #2
   1cd2a:	4620      	mov	r0, r4
   1cd2c:	f10d 010e 	add.w	r1, sp, #14
   1cd30:	f7fe fcd4 	bl	1b6dc <tc_cmac_update>
   1cd34:	b9e0      	cbnz	r0, 1cd70 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1cd36:	f06f 0315 	mvn.w	r3, #21
   1cd3a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1cd3c:	4628      	mov	r0, r5
   1cd3e:	b009      	add	sp, #36	; 0x24
   1cd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1cd42:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1cd46:	33ff      	adds	r3, #255	; 0xff
   1cd48:	b29b      	uxth	r3, r3
   1cd4a:	2b04      	cmp	r3, #4
   1cd4c:	d8df      	bhi.n	1cd0e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1cd4e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cd52:	2202      	movs	r2, #2
   1cd54:	4620      	mov	r0, r4
   1cd56:	f10d 010e 	add.w	r1, sp, #14
   1cd5a:	f7fe fcbf 	bl	1b6dc <tc_cmac_update>
   1cd5e:	2800      	cmp	r0, #0
   1cd60:	d0e9      	beq.n	1cd36 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1cd62:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cd64:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1cd66:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cd6a:	f10d 010e 	add.w	r1, sp, #14
   1cd6e:	e017      	b.n	1cda0 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1cd70:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cd72:	2202      	movs	r2, #2
   1cd74:	4620      	mov	r0, r4
   1cd76:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1cd7a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cd7e:	f7fe fcad 	bl	1b6dc <tc_cmac_update>
   1cd82:	2800      	cmp	r0, #0
   1cd84:	d0d7      	beq.n	1cd36 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1cd86:	2000      	movs	r0, #0
   1cd88:	2310      	movs	r3, #16
   1cd8a:	4631      	mov	r1, r6
   1cd8c:	eb0d 0203 	add.w	r2, sp, r3
   1cd90:	6877      	ldr	r7, [r6, #4]
   1cd92:	9000      	str	r0, [sp, #0]
   1cd94:	47b8      	blx	r7
		if (len < 0) {
   1cd96:	1e02      	subs	r2, r0, #0
   1cd98:	da01      	bge.n	1cd9e <gen_hash_m+0x9e>
			state->err = len;
   1cd9a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1cd9c:	e7ce      	b.n	1cd3c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1cd9e:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cda0:	4620      	mov	r0, r4
   1cda2:	f7fe fc9b 	bl	1b6dc <tc_cmac_update>
   1cda6:	2800      	cmp	r0, #0
   1cda8:	d1b1      	bne.n	1cd0e <gen_hash_m+0xe>
   1cdaa:	e7c4      	b.n	1cd36 <gen_hash_m+0x36>

0001cdac <bt_addr_le_cmp>:
   1cdac:	2207      	movs	r2, #7
   1cdae:	f7ff b830 	b.w	1be12 <memcmp>

0001cdb2 <find_ccc_cfg>:
{
   1cdb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cdb4:	4606      	mov	r6, r0
   1cdb6:	1c4c      	adds	r4, r1, #1
   1cdb8:	f101 0533 	add.w	r5, r1, #51	; 0x33
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1cdbc:	1e67      	subs	r7, r4, #1
		if (conn) {
   1cdbe:	b14e      	cbz	r6, 1cdd4 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1cdc0:	4622      	mov	r2, r4
   1cdc2:	4630      	mov	r0, r6
   1cdc4:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1cdc8:	f7ff fa8f 	bl	1c2ea <bt_conn_is_peer_addr_le>
   1cdcc:	b158      	cbz	r0, 1cde6 <find_ccc_cfg+0x34>
}
   1cdce:	4638      	mov	r0, r7
   1cdd0:	b003      	add	sp, #12
   1cdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1cdd4:	4669      	mov	r1, sp
   1cdd6:	4620      	mov	r0, r4
   1cdd8:	9600      	str	r6, [sp, #0]
   1cdda:	f8cd 6003 	str.w	r6, [sp, #3]
   1cdde:	f7ff ffe5 	bl	1cdac <bt_addr_le_cmp>
   1cde2:	2800      	cmp	r0, #0
   1cde4:	d0f3      	beq.n	1cdce <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cde6:	340a      	adds	r4, #10
   1cde8:	42ac      	cmp	r4, r5
   1cdea:	d1e7      	bne.n	1cdbc <find_ccc_cfg+0xa>
	return NULL;
   1cdec:	2700      	movs	r7, #0
   1cdee:	e7ee      	b.n	1cdce <find_ccc_cfg+0x1c>

0001cdf0 <ccc_find_cfg>:
{
   1cdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cdf4:	4604      	mov	r4, r0
   1cdf6:	460f      	mov	r7, r1
   1cdf8:	4690      	mov	r8, r2
   1cdfa:	2500      	movs	r5, #0
   1cdfc:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1cdfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1ce02:	4543      	cmp	r3, r8
   1ce04:	d107      	bne.n	1ce16 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1ce06:	4639      	mov	r1, r7
   1ce08:	4630      	mov	r0, r6
   1ce0a:	f7ff ffcf 	bl	1cdac <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1ce0e:	b910      	cbnz	r0, 1ce16 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1ce10:	1960      	adds	r0, r4, r5
}
   1ce12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ce16:	350a      	adds	r5, #10
   1ce18:	2d32      	cmp	r5, #50	; 0x32
   1ce1a:	f106 060a 	add.w	r6, r6, #10
   1ce1e:	d1ee      	bne.n	1cdfe <ccc_find_cfg+0xe>
	return NULL;
   1ce20:	2000      	movs	r0, #0
   1ce22:	e7f6      	b.n	1ce12 <ccc_find_cfg+0x22>

0001ce24 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1ce24:	2207      	movs	r2, #7
   1ce26:	f7ff b805 	b.w	1be34 <memcpy>

0001ce2a <clear_ccc_cfg>:
{
   1ce2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ce2c:	2500      	movs	r5, #0
{
   1ce2e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ce30:	4669      	mov	r1, sp
   1ce32:	3001      	adds	r0, #1
   1ce34:	9500      	str	r5, [sp, #0]
   1ce36:	f8cd 5003 	str.w	r5, [sp, #3]
   1ce3a:	f7ff fff3 	bl	1ce24 <bt_addr_le_copy>
	cfg->id = 0U;
   1ce3e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1ce40:	8125      	strh	r5, [r4, #8]
}
   1ce42:	b003      	add	sp, #12
   1ce44:	bd30      	pop	{r4, r5, pc}

0001ce46 <atomic_or>:
{
   1ce46:	4603      	mov	r3, r0
}
   1ce48:	e8d3 0fef 	ldaex	r0, [r3]
   1ce4c:	ea40 0201 	orr.w	r2, r0, r1
   1ce50:	e8c3 2fec 	stlex	ip, r2, [r3]
   1ce54:	f1bc 0f00 	cmp.w	ip, #0
   1ce58:	d1f6      	bne.n	1ce48 <atomic_or+0x2>
   1ce5a:	4770      	bx	lr

0001ce5c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ce5c:	e8d0 0faf 	lda	r0, [r0]
}
   1ce60:	4770      	bx	lr

0001ce62 <gatt_read_mult_rsp>:
{
   1ce62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ce64:	9d08      	ldr	r5, [sp, #32]
   1ce66:	4606      	mov	r6, r0
	if (err || !length) {
   1ce68:	460c      	mov	r4, r1
	params->func(conn, 0, params, pdu, length);
   1ce6a:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   1ce6c:	b901      	cbnz	r1, 1ce70 <gatt_read_mult_rsp+0xe>
   1ce6e:	b94b      	cbnz	r3, 1ce84 <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   1ce70:	2300      	movs	r3, #0
   1ce72:	462a      	mov	r2, r5
   1ce74:	4621      	mov	r1, r4
   1ce76:	9308      	str	r3, [sp, #32]
	params->func(conn, 0, params, NULL, 0);
   1ce78:	4630      	mov	r0, r6
   1ce7a:	46bc      	mov	ip, r7
}
   1ce7c:	b003      	add	sp, #12
   1ce7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   1ce82:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   1ce84:	9300      	str	r3, [sp, #0]
   1ce86:	4613      	mov	r3, r2
   1ce88:	462a      	mov	r2, r5
   1ce8a:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   1ce8c:	9408      	str	r4, [sp, #32]
   1ce8e:	4623      	mov	r3, r4
   1ce90:	462a      	mov	r2, r5
   1ce92:	4621      	mov	r1, r4
   1ce94:	682f      	ldr	r7, [r5, #0]
   1ce96:	e7ef      	b.n	1ce78 <gatt_read_mult_rsp+0x16>

0001ce98 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1ce98:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1ce9a:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1ce9c:	3001      	adds	r0, #1
   1ce9e:	4669      	mov	r1, sp
   1cea0:	9300      	str	r3, [sp, #0]
   1cea2:	f8cd 3003 	str.w	r3, [sp, #3]
   1cea6:	f7ff ffbd 	bl	1ce24 <bt_addr_le_copy>
}
   1ceaa:	b003      	add	sp, #12
   1ceac:	f85d fb04 	ldr.w	pc, [sp], #4

0001ceb0 <clear_cf_cfg>:
{
   1ceb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ceb2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ceb4:	2500      	movs	r5, #0
   1ceb6:	4669      	mov	r1, sp
   1ceb8:	3001      	adds	r0, #1
   1ceba:	9500      	str	r5, [sp, #0]
   1cebc:	f8cd 5003 	str.w	r5, [sp, #3]
   1cec0:	f7ff ffb0 	bl	1ce24 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1cec4:	f104 0008 	add.w	r0, r4, #8
   1cec8:	2201      	movs	r2, #1
   1ceca:	4629      	mov	r1, r5
   1cecc:	f7fe ffdd 	bl	1be8a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ced0:	340c      	adds	r4, #12
   1ced2:	e8d4 3fef 	ldaex	r3, [r4]
   1ced6:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1ceda:	2a00      	cmp	r2, #0
   1cedc:	d1f9      	bne.n	1ced2 <clear_cf_cfg+0x22>
}
   1cede:	b003      	add	sp, #12
   1cee0:	bd30      	pop	{r4, r5, pc}

0001cee2 <gatt_sub_remove>:
{
   1cee2:	b570      	push	{r4, r5, r6, lr}
   1cee4:	460c      	mov	r4, r1
	if (params) {
   1cee6:	4619      	mov	r1, r3
   1cee8:	b16b      	cbz	r3, 1cf06 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1ceea:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1ceee:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1cef0:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1cef2:	b97a      	cbnz	r2, 1cf14 <gatt_sub_remove+0x32>
   1cef4:	42ae      	cmp	r6, r5
	list->head = node;
   1cef6:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1cef8:	d100      	bne.n	1cefc <gatt_sub_remove+0x1a>
	list->tail = node;
   1cefa:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1cefc:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1cefe:	680d      	ldr	r5, [r1, #0]
   1cf00:	461a      	mov	r2, r3
   1cf02:	614b      	str	r3, [r1, #20]
   1cf04:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1cf06:	68a3      	ldr	r3, [r4, #8]
   1cf08:	b94b      	cbnz	r3, 1cf1e <gatt_sub_remove+0x3c>
   1cf0a:	4620      	mov	r0, r4
}
   1cf0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cf10:	f7ff bfc2 	b.w	1ce98 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1cf14:	42ae      	cmp	r6, r5
	parent->next = child;
   1cf16:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1cf18:	bf08      	it	eq
   1cf1a:	60e2      	streq	r2, [r4, #12]
}
   1cf1c:	e7ee      	b.n	1cefc <gatt_sub_remove+0x1a>
   1cf1e:	bd70      	pop	{r4, r5, r6, pc}

0001cf20 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1cf20:	2a02      	cmp	r2, #2
{
   1cf22:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1cf24:	d108      	bne.n	1cf38 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1cf26:	2300      	movs	r3, #0
   1cf28:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1cf2c:	461a      	mov	r2, r3
   1cf2e:	7a00      	ldrb	r0, [r0, #8]
   1cf30:	f7f6 fb98 	bl	13664 <sc_save>
}
   1cf34:	2002      	movs	r0, #2
   1cf36:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1cf38:	f7f6 fe48 	bl	13bcc <sc_clear>
   1cf3c:	e7fa      	b.n	1cf34 <sc_ccc_cfg_write+0x14>

0001cf3e <gatt_write_ccc_rsp>:
{
   1cf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf42:	4606      	mov	r6, r0
   1cf44:	460d      	mov	r5, r1
   1cf46:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cf48:	f104 0310 	add.w	r3, r4, #16
   1cf4c:	e8d3 2fef 	ldaex	r2, [r3]
   1cf50:	f022 0204 	bic.w	r2, r2, #4
   1cf54:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1cf58:	2900      	cmp	r1, #0
   1cf5a:	d1f7      	bne.n	1cf4c <gatt_write_ccc_rsp+0xe>
	if (err) {
   1cf5c:	b1dd      	cbz	r5, 1cf96 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1cf5e:	f7f6 fa6b 	bl	13438 <gatt_sub_find>
		if (!sub) {
   1cf62:	4601      	mov	r1, r0
   1cf64:	b300      	cbz	r0, 1cfa8 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1cf66:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cf68:	b143      	cbz	r3, 1cf7c <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1cf6a:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1cf6c:	f104 0014 	add.w	r0, r4, #20
   1cf70:	4283      	cmp	r3, r0
   1cf72:	d10b      	bne.n	1cf8c <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1cf74:	4623      	mov	r3, r4
   1cf76:	4630      	mov	r0, r6
   1cf78:	f7ff ffb3 	bl	1cee2 <gatt_sub_remove>
	if (params->write) {
   1cf7c:	6863      	ldr	r3, [r4, #4]
   1cf7e:	b19b      	cbz	r3, 1cfa8 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1cf80:	4629      	mov	r1, r5
   1cf82:	4630      	mov	r0, r6
}
   1cf84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1cf88:	2200      	movs	r2, #0
   1cf8a:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cf8c:	2a00      	cmp	r2, #0
   1cf8e:	d0f5      	beq.n	1cf7c <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1cf90:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cf92:	6812      	ldr	r2, [r2, #0]
   1cf94:	e7ec      	b.n	1cf70 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1cf96:	89a3      	ldrh	r3, [r4, #12]
   1cf98:	2b00      	cmp	r3, #0
   1cf9a:	d1ef      	bne.n	1cf7c <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1cf9c:	462b      	mov	r3, r5
   1cf9e:	462a      	mov	r2, r5
   1cfa0:	4621      	mov	r1, r4
   1cfa2:	6827      	ldr	r7, [r4, #0]
   1cfa4:	47b8      	blx	r7
   1cfa6:	e7e9      	b.n	1cf7c <gatt_write_ccc_rsp+0x3e>
}
   1cfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cfac <read_ppcp>:
{
   1cfac:	b513      	push	{r0, r1, r4, lr}
   1cfae:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1cfb0:	2218      	movs	r2, #24
   1cfb2:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1cfb6:	2228      	movs	r2, #40	; 0x28
   1cfb8:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1cfbc:	2200      	movs	r2, #0
   1cfbe:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1cfc2:	222a      	movs	r2, #42	; 0x2a
{
   1cfc4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1cfc8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1cfcc:	2908      	cmp	r1, #8
   1cfce:	d80b      	bhi.n	1cfe8 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1cfd0:	f1c1 0408 	rsb	r4, r1, #8
   1cfd4:	429c      	cmp	r4, r3
   1cfd6:	bfa8      	it	ge
   1cfd8:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1cfda:	4469      	add	r1, sp
   1cfdc:	4622      	mov	r2, r4
   1cfde:	f7fe ff29 	bl	1be34 <memcpy>
}
   1cfe2:	4620      	mov	r0, r4
   1cfe4:	b002      	add	sp, #8
   1cfe6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cfe8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1cfec:	e7f9      	b.n	1cfe2 <read_ppcp+0x36>

0001cfee <read_appearance>:
{
   1cfee:	b513      	push	{r0, r1, r4, lr}
   1cff0:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1cff2:	2200      	movs	r2, #0
{
   1cff4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1cff8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1cffc:	2902      	cmp	r1, #2
   1cffe:	d80d      	bhi.n	1d01c <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1d000:	f1c1 0402 	rsb	r4, r1, #2
   1d004:	429c      	cmp	r4, r3
   1d006:	bfa8      	it	ge
   1d008:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d00a:	f10d 0306 	add.w	r3, sp, #6
   1d00e:	4622      	mov	r2, r4
   1d010:	4419      	add	r1, r3
   1d012:	f7fe ff0f 	bl	1be34 <memcpy>
}
   1d016:	4620      	mov	r0, r4
   1d018:	b002      	add	sp, #8
   1d01a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d01c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1d020:	e7f9      	b.n	1d016 <read_appearance+0x28>

0001d022 <read_name>:
{
   1d022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d026:	4698      	mov	r8, r3
   1d028:	4615      	mov	r5, r2
   1d02a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1d02e:	f7f3 fb8d 	bl	1074c <bt_get_name>
   1d032:	4607      	mov	r7, r0
				 strlen(name));
   1d034:	f7fe fec0 	bl	1bdb8 <strlen>
	if (offset > value_len) {
   1d038:	b283      	uxth	r3, r0
   1d03a:	42b3      	cmp	r3, r6
   1d03c:	d30c      	bcc.n	1d058 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1d03e:	1b9c      	subs	r4, r3, r6
   1d040:	4544      	cmp	r4, r8
   1d042:	bfa8      	it	ge
   1d044:	4644      	movge	r4, r8
   1d046:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d048:	4622      	mov	r2, r4
   1d04a:	4628      	mov	r0, r5
   1d04c:	19b9      	adds	r1, r7, r6
   1d04e:	f7fe fef1 	bl	1be34 <memcpy>
}
   1d052:	4620      	mov	r0, r4
   1d054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d058:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1d05c:	e7f9      	b.n	1d052 <read_name+0x30>

0001d05e <cf_read>:
{
   1d05e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d060:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1d062:	2300      	movs	r3, #0
{
   1d064:	4615      	mov	r5, r2
   1d066:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1d06a:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1d06e:	f7f6 f9a5 	bl	133bc <find_cf_cfg>
	if (cfg) {
   1d072:	b128      	cbz	r0, 1d080 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1d074:	f100 0108 	add.w	r1, r0, #8
   1d078:	2201      	movs	r2, #1
   1d07a:	a801      	add	r0, sp, #4
   1d07c:	f7fe feda 	bl	1be34 <memcpy>
	if (offset > value_len) {
   1d080:	2e01      	cmp	r6, #1
   1d082:	d80d      	bhi.n	1d0a0 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1d084:	f1c6 0401 	rsb	r4, r6, #1
   1d088:	42bc      	cmp	r4, r7
   1d08a:	bfa8      	it	ge
   1d08c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d08e:	ab01      	add	r3, sp, #4
   1d090:	4622      	mov	r2, r4
   1d092:	4628      	mov	r0, r5
   1d094:	1999      	adds	r1, r3, r6
   1d096:	f7fe fecd 	bl	1be34 <memcpy>
}
   1d09a:	4620      	mov	r0, r4
   1d09c:	b003      	add	sp, #12
   1d09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d0a0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1d0a4:	e7f9      	b.n	1d09a <cf_read+0x3c>

0001d0a6 <bt_gatt_attr_read_service>:
{
   1d0a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1d0a8:	68c9      	ldr	r1, [r1, #12]
{
   1d0aa:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1d0ac:	780b      	ldrb	r3, [r1, #0]
{
   1d0ae:	4610      	mov	r0, r2
   1d0b0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1d0b4:	b993      	cbnz	r3, 1d0dc <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d0b6:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1d0b8:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d0ba:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1d0be:	d819      	bhi.n	1d0f4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d0c0:	f1c5 0202 	rsb	r2, r5, #2
   1d0c4:	4294      	cmp	r4, r2
   1d0c6:	bfa8      	it	ge
   1d0c8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d0ca:	4622      	mov	r2, r4
   1d0cc:	f10d 0306 	add.w	r3, sp, #6
   1d0d0:	1959      	adds	r1, r3, r5
   1d0d2:	f7fe feaf 	bl	1be34 <memcpy>
}
   1d0d6:	4620      	mov	r0, r4
   1d0d8:	b003      	add	sp, #12
   1d0da:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1d0dc:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1d0de:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1d0e2:	d807      	bhi.n	1d0f4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d0e4:	f1c5 0210 	rsb	r2, r5, #16
   1d0e8:	4294      	cmp	r4, r2
   1d0ea:	bfa8      	it	ge
   1d0ec:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d0ee:	4429      	add	r1, r5
   1d0f0:	4622      	mov	r2, r4
   1d0f2:	e7ee      	b.n	1d0d2 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d0f4:	f06f 0406 	mvn.w	r4, #6
   1d0f8:	e7ed      	b.n	1d0d6 <bt_gatt_attr_read_service+0x30>

0001d0fa <bt_gatt_attr_read_ccc>:
{
   1d0fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1d0fc:	68c9      	ldr	r1, [r1, #12]
{
   1d0fe:	4615      	mov	r5, r2
   1d100:	461f      	mov	r7, r3
   1d102:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1d106:	f7ff fe54 	bl	1cdb2 <find_ccc_cfg>
	if (cfg) {
   1d10a:	b100      	cbz	r0, 1d10e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1d10c:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1d10e:	2e02      	cmp	r6, #2
   1d110:	f8ad 0006 	strh.w	r0, [sp, #6]
   1d114:	d80e      	bhi.n	1d134 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1d116:	f1c6 0402 	rsb	r4, r6, #2
   1d11a:	42bc      	cmp	r4, r7
   1d11c:	bfa8      	it	ge
   1d11e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d120:	f10d 0306 	add.w	r3, sp, #6
   1d124:	4622      	mov	r2, r4
   1d126:	4628      	mov	r0, r5
   1d128:	1999      	adds	r1, r3, r6
   1d12a:	f7fe fe83 	bl	1be34 <memcpy>
}
   1d12e:	4620      	mov	r0, r4
   1d130:	b003      	add	sp, #12
   1d132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d134:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1d138:	e7f9      	b.n	1d12e <bt_gatt_attr_read_ccc+0x34>

0001d13a <sc_restore_rsp>:
{
   1d13a:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1d13c:	f7f6 f93e 	bl	133bc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d140:	b140      	cbz	r0, 1d154 <sc_restore_rsp+0x1a>
   1d142:	7a03      	ldrb	r3, [r0, #8]
   1d144:	07db      	lsls	r3, r3, #31
   1d146:	d505      	bpl.n	1d154 <sc_restore_rsp+0x1a>
}
   1d148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d14c:	2101      	movs	r1, #1
   1d14e:	300c      	adds	r0, #12
   1d150:	f7ff be79 	b.w	1ce46 <atomic_or>
   1d154:	bd08      	pop	{r3, pc}

0001d156 <bt_gatt_attr_read>:
{
   1d156:	b538      	push	{r3, r4, r5, lr}
   1d158:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d15c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1d160:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d162:	42a9      	cmp	r1, r5
   1d164:	d80b      	bhi.n	1d17e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1d166:	1a6d      	subs	r5, r5, r1
   1d168:	429d      	cmp	r5, r3
   1d16a:	bfa8      	it	ge
   1d16c:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d16e:	9b05      	ldr	r3, [sp, #20]
   1d170:	b2ad      	uxth	r5, r5
   1d172:	462a      	mov	r2, r5
   1d174:	4419      	add	r1, r3
   1d176:	f7fe fe5d 	bl	1be34 <memcpy>
}
   1d17a:	4628      	mov	r0, r5
   1d17c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d17e:	f06f 0506 	mvn.w	r5, #6
   1d182:	e7fa      	b.n	1d17a <bt_gatt_attr_read+0x24>

0001d184 <bt_gatt_attr_value_handle>:
{
   1d184:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d186:	4604      	mov	r4, r0
   1d188:	b910      	cbnz	r0, 1d190 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1d18a:	2000      	movs	r0, #0
}
   1d18c:	b002      	add	sp, #8
   1d18e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d190:	2300      	movs	r3, #0
   1d192:	f88d 3004 	strb.w	r3, [sp, #4]
   1d196:	f642 0303 	movw	r3, #10243	; 0x2803
   1d19a:	6800      	ldr	r0, [r0, #0]
   1d19c:	a901      	add	r1, sp, #4
   1d19e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d1a2:	f7fe febc 	bl	1bf1e <bt_uuid_cmp>
   1d1a6:	2800      	cmp	r0, #0
   1d1a8:	d1ef      	bne.n	1d18a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1d1aa:	68e3      	ldr	r3, [r4, #12]
   1d1ac:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1d1ae:	2800      	cmp	r0, #0
   1d1b0:	d1ec      	bne.n	1d18c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1d1b2:	4620      	mov	r0, r4
   1d1b4:	f7f6 fe56 	bl	13e64 <bt_gatt_attr_get_handle>
   1d1b8:	3001      	adds	r0, #1
   1d1ba:	b280      	uxth	r0, r0
	return handle;
   1d1bc:	e7e6      	b.n	1d18c <bt_gatt_attr_value_handle+0x8>

0001d1be <bt_gatt_attr_read_chrc>:
{
   1d1be:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d1c0:	68cf      	ldr	r7, [r1, #12]
{
   1d1c2:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1d1c4:	79bb      	ldrb	r3, [r7, #6]
{
   1d1c6:	b087      	sub	sp, #28
   1d1c8:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1d1ca:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d1ce:	4615      	mov	r5, r2
   1d1d0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d1d4:	f7ff ffd6 	bl	1d184 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d1d8:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d1da:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d1de:	780b      	ldrb	r3, [r1, #0]
   1d1e0:	b99b      	cbnz	r3, 1d20a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d1e2:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1d1e4:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d1e6:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1d1ea:	42b1      	cmp	r1, r6
   1d1ec:	d315      	bcc.n	1d21a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1d1ee:	1b89      	subs	r1, r1, r6
   1d1f0:	42a1      	cmp	r1, r4
   1d1f2:	bfa8      	it	ge
   1d1f4:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d1f6:	ab01      	add	r3, sp, #4
   1d1f8:	b28c      	uxth	r4, r1
   1d1fa:	4622      	mov	r2, r4
   1d1fc:	4628      	mov	r0, r5
   1d1fe:	1999      	adds	r1, r3, r6
   1d200:	f7fe fe18 	bl	1be34 <memcpy>
}
   1d204:	4620      	mov	r0, r4
   1d206:	b007      	add	sp, #28
   1d208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d20a:	3101      	adds	r1, #1
   1d20c:	2210      	movs	r2, #16
   1d20e:	f10d 0007 	add.w	r0, sp, #7
   1d212:	f7fe fe0f 	bl	1be34 <memcpy>
		value_len += 16U;
   1d216:	2113      	movs	r1, #19
   1d218:	e7e7      	b.n	1d1ea <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d21a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d21e:	e7f1      	b.n	1d204 <bt_gatt_attr_read_chrc+0x46>

0001d220 <bt_gatt_foreach_attr>:
{
   1d220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d222:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d226:	2300      	movs	r3, #0
   1d228:	461a      	mov	r2, r3
   1d22a:	9300      	str	r3, [sp, #0]
   1d22c:	f7f6 fe5e 	bl	13eec <bt_gatt_foreach_attr_type>
}
   1d230:	b005      	add	sp, #20
   1d232:	f85d fb04 	ldr.w	pc, [sp], #4

0001d236 <db_hash_process>:
	db_hash_gen(true);
   1d236:	2001      	movs	r0, #1
   1d238:	f7f6 bec4 	b.w	13fc4 <db_hash_gen>

0001d23c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1d23c:	07d3      	lsls	r3, r2, #31
{
   1d23e:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d240:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d242:	d504      	bpl.n	1d24e <bt_gatt_check_perm+0x12>
   1d244:	f014 0f15 	tst.w	r4, #21
   1d248:	d017      	beq.n	1d27a <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d24a:	684b      	ldr	r3, [r1, #4]
   1d24c:	b1ab      	cbz	r3, 1d27a <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d24e:	0793      	lsls	r3, r2, #30
   1d250:	d504      	bpl.n	1d25c <bt_gatt_check_perm+0x20>
   1d252:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1d256:	d012      	beq.n	1d27e <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d258:	688b      	ldr	r3, [r1, #8]
   1d25a:	b183      	cbz	r3, 1d27e <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1d25c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d25e:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d262:	d104      	bne.n	1d26e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1d264:	f014 000c 	ands.w	r0, r4, #12
   1d268:	bf18      	it	ne
   1d26a:	200f      	movne	r0, #15
}
   1d26c:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d26e:	f7ff f831 	bl	1c2d4 <bt_conn_get_security>
   1d272:	2802      	cmp	r0, #2
   1d274:	d8f6      	bhi.n	1d264 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1d276:	2005      	movs	r0, #5
   1d278:	e7f8      	b.n	1d26c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d27a:	2002      	movs	r0, #2
   1d27c:	e7f6      	b.n	1d26c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d27e:	2003      	movs	r0, #3
   1d280:	e7f4      	b.n	1d26c <bt_gatt_check_perm+0x30>

0001d282 <gatt_discover_next>:
{
   1d282:	b570      	push	{r4, r5, r6, lr}
   1d284:	4605      	mov	r5, r0
   1d286:	4614      	mov	r4, r2
	if (!last_handle)
   1d288:	b929      	cbnz	r1, 1d296 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1d28a:	4621      	mov	r1, r4
   1d28c:	4628      	mov	r0, r5
   1d28e:	f7f7 f9f1 	bl	14674 <bt_gatt_discover>
   1d292:	b928      	cbnz	r0, 1d2a0 <gatt_discover_next+0x1e>
}
   1d294:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1d296:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d29a:	4291      	cmp	r1, r2
   1d29c:	d107      	bne.n	1d2ae <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1d29e:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1d2a0:	4622      	mov	r2, r4
   1d2a2:	4628      	mov	r0, r5
   1d2a4:	6863      	ldr	r3, [r4, #4]
   1d2a6:	2100      	movs	r1, #0
}
   1d2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1d2ac:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1d2ae:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1d2b0:	1c4b      	adds	r3, r1, #1
   1d2b2:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1d2b4:	429a      	cmp	r2, r3
		params->start_handle++;
   1d2b6:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1d2b8:	d2e7      	bcs.n	1d28a <gatt_discover_next+0x8>
   1d2ba:	e7f1      	b.n	1d2a0 <gatt_discover_next+0x1e>

0001d2bc <gatt_find_type_rsp>:
{
   1d2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d2c0:	b088      	sub	sp, #32
   1d2c2:	4607      	mov	r7, r0
   1d2c4:	4614      	mov	r4, r2
   1d2c6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1d2ca:	b911      	cbnz	r1, 1d2d2 <gatt_find_type_rsp+0x16>
   1d2cc:	f013 0803 	ands.w	r8, r3, #3
   1d2d0:	d008      	beq.n	1d2e4 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1d2d2:	464a      	mov	r2, r9
   1d2d4:	2100      	movs	r1, #0
   1d2d6:	4638      	mov	r0, r7
   1d2d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1d2dc:	b008      	add	sp, #32
   1d2de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1d2e2:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d2e4:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d2e6:	f642 0a01 	movw	sl, #10241	; 0x2801
   1d2ea:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1d2ee:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1d2f2:	42ac      	cmp	r4, r5
   1d2f4:	d107      	bne.n	1d306 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1d2f6:	464a      	mov	r2, r9
   1d2f8:	4641      	mov	r1, r8
   1d2fa:	4638      	mov	r0, r7
}
   1d2fc:	b008      	add	sp, #32
   1d2fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1d302:	f7ff bfbe 	b.w	1d282 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1d306:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1d30a:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d30c:	2900      	cmp	r1, #0
   1d30e:	bf0c      	ite	eq
   1d310:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1d314:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1d316:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1d31a:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1d31e:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1d322:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1d324:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d326:	ab01      	add	r3, sp, #4
   1d328:	f8ad 1002 	strh.w	r1, [sp, #2]
   1d32c:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1d32e:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d332:	4638      	mov	r0, r7
   1d334:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d336:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d33a:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d33e:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d342:	f8cd d00c 	str.w	sp, [sp, #12]
   1d346:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d34a:	a903      	add	r1, sp, #12
   1d34c:	4798      	blx	r3
   1d34e:	3404      	adds	r4, #4
   1d350:	2800      	cmp	r0, #0
   1d352:	d1ce      	bne.n	1d2f2 <gatt_find_type_rsp+0x36>
}
   1d354:	b008      	add	sp, #32
   1d356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d35a <bt_gatt_notification>:
{
   1d35a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d35e:	4607      	mov	r7, r0
   1d360:	4688      	mov	r8, r1
   1d362:	4691      	mov	r9, r2
   1d364:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1d366:	f7f6 f867 	bl	13438 <gatt_sub_find>
	if (!sub) {
   1d36a:	b1f8      	cbz	r0, 1d3ac <bt_gatt_notification+0x52>
	return list->head;
   1d36c:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d36e:	b1eb      	cbz	r3, 1d3ac <bt_gatt_notification+0x52>
   1d370:	f1b3 0614 	subs.w	r6, r3, #20
   1d374:	d01a      	beq.n	1d3ac <bt_gatt_notification+0x52>
	return node->next;
   1d376:	681c      	ldr	r4, [r3, #0]
   1d378:	b104      	cbz	r4, 1d37c <bt_gatt_notification+0x22>
   1d37a:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1d37c:	8933      	ldrh	r3, [r6, #8]
   1d37e:	4543      	cmp	r3, r8
   1d380:	d10a      	bne.n	1d398 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1d382:	4653      	mov	r3, sl
   1d384:	464a      	mov	r2, r9
   1d386:	4631      	mov	r1, r6
   1d388:	4638      	mov	r0, r7
   1d38a:	6835      	ldr	r5, [r6, #0]
   1d38c:	47a8      	blx	r5
   1d38e:	b918      	cbnz	r0, 1d398 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1d390:	4631      	mov	r1, r6
   1d392:	4638      	mov	r0, r7
   1d394:	f7f7 febe 	bl	15114 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d398:	b144      	cbz	r4, 1d3ac <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d39a:	f114 0514 	adds.w	r5, r4, #20
   1d39e:	d002      	beq.n	1d3a6 <bt_gatt_notification+0x4c>
	return node->next;
   1d3a0:	6965      	ldr	r5, [r4, #20]
   1d3a2:	b105      	cbz	r5, 1d3a6 <bt_gatt_notification+0x4c>
   1d3a4:	3d14      	subs	r5, #20
{
   1d3a6:	4626      	mov	r6, r4
   1d3a8:	462c      	mov	r4, r5
   1d3aa:	e7e7      	b.n	1d37c <bt_gatt_notification+0x22>
}
   1d3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d3b0 <bt_gatt_change_aware>:
{
   1d3b0:	b510      	push	{r4, lr}
   1d3b2:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1d3b4:	f7f6 f802 	bl	133bc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d3b8:	b910      	cbnz	r0, 1d3c0 <bt_gatt_change_aware+0x10>
		return true;
   1d3ba:	2401      	movs	r4, #1
}
   1d3bc:	4620      	mov	r0, r4
   1d3be:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d3c0:	7a03      	ldrb	r3, [r0, #8]
   1d3c2:	07db      	lsls	r3, r3, #31
   1d3c4:	d5f9      	bpl.n	1d3ba <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d3c6:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d3ca:	4618      	mov	r0, r3
   1d3cc:	f7ff fd46 	bl	1ce5c <atomic_get>
   1d3d0:	07c1      	lsls	r1, r0, #31
   1d3d2:	d4f2      	bmi.n	1d3ba <bt_gatt_change_aware+0xa>
	if (!req) {
   1d3d4:	2c00      	cmp	r4, #0
   1d3d6:	d0f1      	beq.n	1d3bc <bt_gatt_change_aware+0xc>
   1d3d8:	4618      	mov	r0, r3
   1d3da:	f7ff fd3f 	bl	1ce5c <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1d3de:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d3e0:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1d3e4:	d50c      	bpl.n	1d400 <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d3e6:	e8d3 2fef 	ldaex	r2, [r3]
   1d3ea:	f022 0202 	bic.w	r2, r2, #2
   1d3ee:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d3f2:	2900      	cmp	r1, #0
   1d3f4:	d1f7      	bne.n	1d3e6 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d3f6:	2101      	movs	r1, #1
   1d3f8:	4618      	mov	r0, r3
   1d3fa:	f7ff fd24 	bl	1ce46 <atomic_or>
}
   1d3fe:	e7dd      	b.n	1d3bc <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d400:	2102      	movs	r1, #2
   1d402:	e7f9      	b.n	1d3f8 <bt_gatt_change_aware+0x48>

0001d404 <bt_smp_recv>:
{
   1d404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d406:	2100      	movs	r1, #0
   1d408:	f04f 32ff 	mov.w	r2, #4294967295
   1d40c:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1d410:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d412:	4608      	mov	r0, r1
   1d414:	f7ff f83a 	bl	1c48c <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1d418:	f100 0608 	add.w	r6, r0, #8
   1d41c:	4604      	mov	r4, r0
   1d41e:	2101      	movs	r1, #1
   1d420:	4630      	mov	r0, r6
   1d422:	f7f8 fb7d 	bl	15b20 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1d426:	2505      	movs	r5, #5
   1d428:	2101      	movs	r1, #1
   1d42a:	7005      	strb	r5, [r0, #0]
   1d42c:	4630      	mov	r0, r6
   1d42e:	f7f8 fb77 	bl	15b20 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1d432:	7005      	strb	r5, [r0, #0]
   1d434:	2500      	movs	r5, #0
   1d436:	4622      	mov	r2, r4
   1d438:	462b      	mov	r3, r5
   1d43a:	2106      	movs	r1, #6
   1d43c:	4638      	mov	r0, r7
   1d43e:	9500      	str	r5, [sp, #0]
   1d440:	f7ff f827 	bl	1c492 <bt_l2cap_send_cb>
}
   1d444:	4628      	mov	r0, r5
   1d446:	b003      	add	sp, #12
   1d448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d44a <bt_smp_sign>:
   1d44a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d44e:	4770      	bx	lr

0001d450 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1d450:	2000      	movs	r0, #0
   1d452:	4770      	bx	lr

0001d454 <fixed_data_unref>:
}
   1d454:	4770      	bx	lr

0001d456 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d456:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d458:	6849      	ldr	r1, [r1, #4]
   1d45a:	6809      	ldr	r1, [r1, #0]
   1d45c:	f7f8 b91c 	b.w	15698 <net_buf_alloc_len>

0001d460 <net_buf_simple_init_with_data>:
	buf->size  = size;
   1d460:	b292      	uxth	r2, r2
	buf->__buf = data;
   1d462:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1d464:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1d466:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1d468:	8082      	strh	r2, [r0, #4]
}
   1d46a:	4770      	bx	lr

0001d46c <net_buf_simple_push_u8>:
{
   1d46c:	b510      	push	{r4, lr}
   1d46e:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1d470:	2101      	movs	r1, #1
   1d472:	f7f8 fafd 	bl	15a70 <net_buf_simple_push>
	*data = val;
   1d476:	7004      	strb	r4, [r0, #0]
}
   1d478:	bd10      	pop	{r4, pc}

0001d47a <net_buf_simple_pull_u8>:
{
   1d47a:	b510      	push	{r4, lr}
	val = buf->data[0];
   1d47c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1d47e:	2101      	movs	r1, #1
	val = buf->data[0];
   1d480:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d482:	f7f8 fb13 	bl	15aac <net_buf_simple_pull>
}
   1d486:	4620      	mov	r0, r4
   1d488:	bd10      	pop	{r4, pc}

0001d48a <net_buf_simple_pull_le16>:
{
   1d48a:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d48c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d48e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d490:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d492:	f7f8 fb0b 	bl	15aac <net_buf_simple_pull>
}
   1d496:	4620      	mov	r0, r4
   1d498:	bd10      	pop	{r4, pc}

0001d49a <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1d49a:	6802      	ldr	r2, [r0, #0]
   1d49c:	6880      	ldr	r0, [r0, #8]
}
   1d49e:	1a10      	subs	r0, r2, r0
   1d4a0:	4770      	bx	lr

0001d4a2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d4a2:	8883      	ldrh	r3, [r0, #4]
   1d4a4:	88c2      	ldrh	r2, [r0, #6]
   1d4a6:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d4a8:	6803      	ldr	r3, [r0, #0]
   1d4aa:	6880      	ldr	r0, [r0, #8]
   1d4ac:	1a18      	subs	r0, r3, r0
}
   1d4ae:	1a10      	subs	r0, r2, r0
   1d4b0:	4770      	bx	lr

0001d4b2 <net_buf_simple_add_mem>:
{
   1d4b2:	b538      	push	{r3, r4, r5, lr}
   1d4b4:	460d      	mov	r5, r1
   1d4b6:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d4b8:	4611      	mov	r1, r2
   1d4ba:	f7f8 fb31 	bl	15b20 <net_buf_simple_add>
   1d4be:	4622      	mov	r2, r4
   1d4c0:	4629      	mov	r1, r5
}
   1d4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d4c6:	f7fe bcb5 	b.w	1be34 <memcpy>

0001d4ca <net_buf_simple_add_u8>:
{
   1d4ca:	b510      	push	{r4, lr}
   1d4cc:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1d4ce:	2101      	movs	r1, #1
   1d4d0:	f7f8 fb26 	bl	15b20 <net_buf_simple_add>
	*u8 = val;
   1d4d4:	7004      	strb	r4, [r0, #0]
}
   1d4d6:	bd10      	pop	{r4, pc}

0001d4d8 <net_buf_simple_add_le16>:
{
   1d4d8:	b510      	push	{r4, lr}
   1d4da:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1d4dc:	2102      	movs	r1, #2
   1d4de:	f7f8 fb1f 	bl	15b20 <net_buf_simple_add>
	dst[0] = val;
   1d4e2:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1d4e4:	0a24      	lsrs	r4, r4, #8
   1d4e6:	7044      	strb	r4, [r0, #1]
}
   1d4e8:	bd10      	pop	{r4, pc}

0001d4ea <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d4ea:	6843      	ldr	r3, [r0, #4]
}
   1d4ec:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d4ee:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d4f0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1d4f2:	600b      	str	r3, [r1, #0]
}
   1d4f4:	4770      	bx	lr

0001d4f6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d4f6:	6843      	ldr	r3, [r0, #4]
   1d4f8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d4fa:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d4fc:	4042      	eors	r2, r0
   1d4fe:	400a      	ands	r2, r1
   1d500:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d502:	605a      	str	r2, [r3, #4]
}
   1d504:	2000      	movs	r0, #0
   1d506:	4770      	bx	lr

0001d508 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d508:	6843      	ldr	r3, [r0, #4]
}
   1d50a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d50c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d50e:	6099      	str	r1, [r3, #8]
}
   1d510:	4770      	bx	lr

0001d512 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d512:	6843      	ldr	r3, [r0, #4]
}
   1d514:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d516:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d518:	60d9      	str	r1, [r3, #12]
}
   1d51a:	4770      	bx	lr

0001d51c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d51c:	6843      	ldr	r3, [r0, #4]
}
   1d51e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d520:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d522:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d524:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d526:	6053      	str	r3, [r2, #4]
}
   1d528:	4770      	bx	lr

0001d52a <nrf_gpio_cfg_sense_set>:
{
   1d52a:	b513      	push	{r0, r1, r4, lr}
   1d52c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d52e:	a801      	add	r0, sp, #4
{
   1d530:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d532:	f7f8 fb59 	bl	15be8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d536:	9b01      	ldr	r3, [sp, #4]
   1d538:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d53c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1d540:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d544:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1d548:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1d54c:	b002      	add	sp, #8
   1d54e:	bd10      	pop	{r4, pc}

0001d550 <cfg_level_pins>:
{
   1d550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d554:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d556:	2500      	movs	r5, #0
	return port->data;
   1d558:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1d55a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d55e:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d560:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1d564:	4313      	orrs	r3, r2
   1d566:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1d56a:	b90c      	cbnz	r4, 1d570 <cfg_level_pins+0x20>
}
   1d56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d570:	4226      	tst	r6, r4
   1d572:	d010      	beq.n	1d596 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d574:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d576:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d57a:	40e9      	lsrs	r1, r5
   1d57c:	f001 0101 	and.w	r1, r1, #1
   1d580:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d584:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d588:	b2c9      	uxtb	r1, r1
   1d58a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1d58e:	f7ff ffcc 	bl	1d52a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d592:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d596:	3501      	adds	r5, #1
		bit <<= 1;
   1d598:	0076      	lsls	r6, r6, #1
   1d59a:	e7e6      	b.n	1d56a <cfg_level_pins+0x1a>

0001d59c <check_level_trigger_pins>:
{
   1d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d5a0:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d5a2:	2700      	movs	r7, #0
	return port->data;
   1d5a4:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1d5a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d5aa:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d5ac:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1d5b0:	430a      	orrs	r2, r1
   1d5b2:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1d5b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1d5ba:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1d5bc:	6915      	ldr	r5, [r2, #16]
   1d5be:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1d5c0:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1d5c4:	b914      	cbnz	r4, 1d5cc <check_level_trigger_pins+0x30>
}
   1d5c6:	4628      	mov	r0, r5
   1d5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d5cc:	4234      	tst	r4, r6
   1d5ce:	d00a      	beq.n	1d5e6 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d5d0:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d5d4:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d5d8:	2100      	movs	r1, #0
   1d5da:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1d5de:	f7ff ffa4 	bl	1d52a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d5e2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d5e6:	3701      	adds	r7, #1
		bit <<= 1;
   1d5e8:	0076      	lsls	r6, r6, #1
   1d5ea:	e7eb      	b.n	1d5c4 <check_level_trigger_pins+0x28>

0001d5ec <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1d5ec:	6883      	ldr	r3, [r0, #8]
   1d5ee:	689b      	ldr	r3, [r3, #8]
   1d5f0:	4718      	bx	r3

0001d5f2 <vipm_nrf_max_id_val_get>:
}
   1d5f2:	2000      	movs	r0, #0
   1d5f4:	4770      	bx	lr

0001d5f6 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1d5f6:	b508      	push	{r3, lr}
   1d5f8:	b139      	cbz	r1, 1d60a <vipm_nrf_1_set_enabled+0x14>
   1d5fa:	202a      	movs	r0, #42	; 0x2a
   1d5fc:	f7f0 faa6 	bl	db4c <arch_irq_enable>
   1d600:	2001      	movs	r0, #1
   1d602:	f7f9 fe23 	bl	1724c <nrfx_ipc_receive_event_enable>
   1d606:	2000      	movs	r0, #0
   1d608:	bd08      	pop	{r3, pc}
   1d60a:	2001      	movs	r0, #1
   1d60c:	f7f9 fe3c 	bl	17288 <nrfx_ipc_receive_event_disable>
   1d610:	e7f9      	b.n	1d606 <vipm_nrf_1_set_enabled+0x10>

0001d612 <uarte_nrfx_config_get>:
{
   1d612:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d614:	68c2      	ldr	r2, [r0, #12]
   1d616:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d61a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d61e:	2000      	movs	r0, #0
   1d620:	4770      	bx	lr

0001d622 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d622:	6843      	ldr	r3, [r0, #4]
   1d624:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d626:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d62a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d62e:	4770      	bx	lr

0001d630 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d630:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d632:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1d634:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d636:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d63a:	b148      	cbz	r0, 1d650 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d63c:	2000      	movs	r0, #0
	*c = data->rx_data;
   1d63e:	7c52      	ldrb	r2, [r2, #17]
   1d640:	700a      	strb	r2, [r1, #0]
   1d642:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d646:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d64a:	2201      	movs	r2, #1
   1d64c:	601a      	str	r2, [r3, #0]
	return 0;
   1d64e:	4770      	bx	lr
		return -1;
   1d650:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d654:	4770      	bx	lr

0001d656 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d656:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d658:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d65a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d65e:	b938      	cbnz	r0, 1d670 <is_tx_ready.isra.0+0x1a>
   1d660:	799b      	ldrb	r3, [r3, #6]
   1d662:	b933      	cbnz	r3, 1d672 <is_tx_ready.isra.0+0x1c>
   1d664:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d668:	3800      	subs	r0, #0
   1d66a:	bf18      	it	ne
   1d66c:	2001      	movne	r0, #1
   1d66e:	4770      	bx	lr
   1d670:	2001      	movs	r0, #1
}
   1d672:	4770      	bx	lr

0001d674 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1d674:	6843      	ldr	r3, [r0, #4]
   1d676:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1d678:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d67c:	05d2      	lsls	r2, r2, #23
   1d67e:	d518      	bpl.n	1d6b2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d680:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1d684:	b1aa      	cbz	r2, 1d6b2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1d686:	f04f 0120 	mov.w	r1, #32
   1d68a:	f3ef 8211 	mrs	r2, BASEPRI
   1d68e:	f381 8811 	msr	BASEPRI, r1
   1d692:	f3bf 8f6f 	isb	sy
   1d696:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d69a:	b131      	cbz	r1, 1d6aa <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d69c:	2100      	movs	r1, #0
   1d69e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d6a2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6a6:	2101      	movs	r1, #1
   1d6a8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d6aa:	f382 8811 	msr	BASEPRI, r2
   1d6ae:	f3bf 8f6f 	isb	sy
}
   1d6b2:	4770      	bx	lr

0001d6b4 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1d6b4:	2101      	movs	r1, #1
   1d6b6:	f7f9 bacd 	b.w	16c54 <dk_set_led>

0001d6ba <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1d6ba:	2100      	movs	r1, #0
   1d6bc:	f7f9 baca 	b.w	16c54 <dk_set_led>

0001d6c0 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1d6c0:	f7f9 bb48 	b.w	16d54 <SystemCoreClockUpdate>

0001d6c4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1d6c4:	4700      	bx	r0

0001d6c6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1d6c6:	f000 bcaf 	b.w	1e028 <z_impl_k_busy_wait>

0001d6ca <metal_device_open>:
{
   1d6ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d6cc:	460c      	mov	r4, r1
   1d6ce:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1d6d0:	4606      	mov	r6, r0
   1d6d2:	b918      	cbnz	r0, 1d6dc <metal_device_open+0x12>
		return -EINVAL;
   1d6d4:	f06f 0015 	mvn.w	r0, #21
}
   1d6d8:	b002      	add	sp, #8
   1d6da:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1d6dc:	f7fe fb6c 	bl	1bdb8 <strlen>
   1d6e0:	2800      	cmp	r0, #0
   1d6e2:	d0f7      	beq.n	1d6d4 <metal_device_open+0xa>
   1d6e4:	2c00      	cmp	r4, #0
   1d6e6:	d0f5      	beq.n	1d6d4 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1d6e8:	4620      	mov	r0, r4
   1d6ea:	f7fe fb65 	bl	1bdb8 <strlen>
   1d6ee:	2800      	cmp	r0, #0
   1d6f0:	d0f0      	beq.n	1d6d4 <metal_device_open+0xa>
   1d6f2:	2d00      	cmp	r5, #0
   1d6f4:	d0ee      	beq.n	1d6d4 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1d6f6:	4630      	mov	r0, r6
   1d6f8:	a901      	add	r1, sp, #4
   1d6fa:	f7f9 fe39 	bl	17370 <metal_bus_find>
	if (error)
   1d6fe:	2800      	cmp	r0, #0
   1d700:	d1ea      	bne.n	1d6d8 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1d702:	9801      	ldr	r0, [sp, #4]
   1d704:	6883      	ldr	r3, [r0, #8]
   1d706:	b11b      	cbz	r3, 1d710 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1d708:	462a      	mov	r2, r5
   1d70a:	4621      	mov	r1, r4
   1d70c:	4798      	blx	r3
	if (error)
   1d70e:	e7e3      	b.n	1d6d8 <metal_device_open+0xe>
		return -ENODEV;
   1d710:	f06f 0012 	mvn.w	r0, #18
   1d714:	e7e0      	b.n	1d6d8 <metal_device_open+0xe>

0001d716 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1d716:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d718:	6804      	ldr	r4, [r0, #0]
   1d71a:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d71c:	1c66      	adds	r6, r4, #1
   1d71e:	d00f      	beq.n	1d740 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d720:	42a9      	cmp	r1, r5
   1d722:	d232      	bcs.n	1d78a <metal_io_block_read+0x74>
		: NULL);
   1d724:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d726:	185e      	adds	r6, r3, r1
   1d728:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d72a:	bf88      	it	hi
   1d72c:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1d72e:	6a05      	ldr	r5, [r0, #32]
   1d730:	b155      	cbz	r5, 1d748 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1d732:	9300      	str	r3, [sp, #0]
   1d734:	2305      	movs	r3, #5
   1d736:	47a8      	blx	r5
   1d738:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1d73a:	4618      	mov	r0, r3
   1d73c:	b002      	add	sp, #8
   1d73e:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d740:	42a9      	cmp	r1, r5
   1d742:	d222      	bcs.n	1d78a <metal_io_block_read+0x74>
   1d744:	2400      	movs	r4, #0
   1d746:	e7ee      	b.n	1d726 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1d748:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1d74c:	4621      	mov	r1, r4
   1d74e:	4618      	mov	r0, r3
   1d750:	2800      	cmp	r0, #0
   1d752:	d0f2      	beq.n	1d73a <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1d754:	ea42 0401 	orr.w	r4, r2, r1
   1d758:	07a4      	lsls	r4, r4, #30
   1d75a:	d10a      	bne.n	1d772 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d75c:	2803      	cmp	r0, #3
   1d75e:	dc0e      	bgt.n	1d77e <metal_io_block_read+0x68>
   1d760:	3901      	subs	r1, #1
   1d762:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1d764:	4282      	cmp	r2, r0
   1d766:	d0e8      	beq.n	1d73a <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1d768:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1d76c:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1d770:	e7f8      	b.n	1d764 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1d772:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1d776:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1d778:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1d77c:	e7e8      	b.n	1d750 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1d77e:	f851 4b04 	ldr.w	r4, [r1], #4
   1d782:	3804      	subs	r0, #4
   1d784:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d788:	e7e8      	b.n	1d75c <metal_io_block_read+0x46>
		return -ERANGE;
   1d78a:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1d78e:	e7d4      	b.n	1d73a <metal_io_block_read+0x24>

0001d790 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1d790:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d792:	6804      	ldr	r4, [r0, #0]
   1d794:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d796:	1c66      	adds	r6, r4, #1
   1d798:	d00e      	beq.n	1d7b8 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d79a:	42a9      	cmp	r1, r5
   1d79c:	d230      	bcs.n	1d800 <metal_io_block_write+0x70>
		: NULL);
   1d79e:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d7a0:	185e      	adds	r6, r3, r1
   1d7a2:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d7a4:	bf88      	it	hi
   1d7a6:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1d7a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1d7aa:	b94d      	cbnz	r5, 1d7c0 <metal_io_block_write+0x30>
   1d7ac:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1d7ae:	b991      	cbnz	r1, 1d7d6 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1d7b0:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1d7b4:	4618      	mov	r0, r3
   1d7b6:	e006      	b.n	1d7c6 <metal_io_block_write+0x36>
	if (offset >= io->size)
   1d7b8:	42a9      	cmp	r1, r5
   1d7ba:	d221      	bcs.n	1d800 <metal_io_block_write+0x70>
   1d7bc:	2400      	movs	r4, #0
   1d7be:	e7ef      	b.n	1d7a0 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1d7c0:	9300      	str	r3, [sp, #0]
   1d7c2:	2305      	movs	r3, #5
   1d7c4:	47a8      	blx	r5
	}
	return retlen;
}
   1d7c6:	b002      	add	sp, #8
   1d7c8:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1d7ca:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1d7ce:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1d7d0:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1d7d4:	e7eb      	b.n	1d7ae <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1d7d6:	ea44 0002 	orr.w	r0, r4, r2
   1d7da:	0780      	lsls	r0, r0, #30
   1d7dc:	d1f5      	bne.n	1d7ca <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d7de:	2903      	cmp	r1, #3
   1d7e0:	dc08      	bgt.n	1d7f4 <metal_io_block_write+0x64>
   1d7e2:	3a01      	subs	r2, #1
   1d7e4:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1d7e6:	428c      	cmp	r4, r1
   1d7e8:	d0e2      	beq.n	1d7b0 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1d7ea:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1d7ee:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1d7f2:	e7f8      	b.n	1d7e6 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1d7f4:	f852 0b04 	ldr.w	r0, [r2], #4
   1d7f8:	3904      	subs	r1, #4
   1d7fa:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d7fe:	e7ee      	b.n	1d7de <metal_io_block_write+0x4e>
		return -ERANGE;
   1d800:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1d804:	e7df      	b.n	1d7c6 <metal_io_block_write+0x36>

0001d806 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1d806:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d808:	6804      	ldr	r4, [r0, #0]
   1d80a:	461d      	mov	r5, r3
		: NULL);
   1d80c:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d80e:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1d810:	d00e      	beq.n	1d830 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d812:	4299      	cmp	r1, r3
   1d814:	d22d      	bcs.n	1d872 <metal_io_block_set+0x6c>
		: NULL);
   1d816:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d818:	186e      	adds	r6, r5, r1
   1d81a:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1d81c:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1d81e:	bf88      	it	hi
   1d820:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1d822:	b186      	cbz	r6, 1d846 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1d824:	2305      	movs	r3, #5
   1d826:	9500      	str	r5, [sp, #0]
   1d828:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1d82a:	4628      	mov	r0, r5
   1d82c:	b002      	add	sp, #8
   1d82e:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d830:	4299      	cmp	r1, r3
   1d832:	d21e      	bcs.n	1d872 <metal_io_block_set+0x6c>
   1d834:	2400      	movs	r4, #0
   1d836:	e7ef      	b.n	1d818 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1d838:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d83c:	3b01      	subs	r3, #1
   1d83e:	b923      	cbnz	r3, 1d84a <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1d840:	f3bf 8f5b 	dmb	ish
   1d844:	e7f1      	b.n	1d82a <metal_io_block_set+0x24>
   1d846:	462b      	mov	r3, r5
   1d848:	e7f9      	b.n	1d83e <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d84a:	07a1      	lsls	r1, r4, #30
   1d84c:	d1f4      	bne.n	1d838 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1d84e:	0611      	lsls	r1, r2, #24
   1d850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1d854:	4311      	orrs	r1, r2
   1d856:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d85a:	2b03      	cmp	r3, #3
   1d85c:	dc05      	bgt.n	1d86a <metal_io_block_set+0x64>
   1d85e:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1d860:	429c      	cmp	r4, r3
   1d862:	d0ed      	beq.n	1d840 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1d864:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1d868:	e7fa      	b.n	1d860 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1d86a:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d86e:	3b04      	subs	r3, #4
   1d870:	e7f3      	b.n	1d85a <metal_io_block_set+0x54>
		return -ERANGE;
   1d872:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1d876:	e7d8      	b.n	1d82a <metal_io_block_set+0x24>

0001d878 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1d878:	2000      	movs	r0, #0
   1d87a:	4770      	bx	lr

0001d87c <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1d87c:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1d87e:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1d880:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1d882:	b984      	cbnz	r4, 1d8a6 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1d884:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1d886:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1d888:	291f      	cmp	r1, #31
   1d88a:	bf98      	it	ls
   1d88c:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1d890:	b165      	cbz	r5, 1d8ac <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1d892:	6881      	ldr	r1, [r0, #8]
   1d894:	428b      	cmp	r3, r1
   1d896:	d209      	bcs.n	1d8ac <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1d898:	6900      	ldr	r0, [r0, #16]
   1d89a:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1d89c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d8a0:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1d8a2:	bc30      	pop	{r4, r5}
   1d8a4:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1d8a6:	4623      	mov	r3, r4
}
   1d8a8:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1d8aa:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1d8ac:	f04f 30ff 	mov.w	r0, #4294967295
   1d8b0:	e7f7      	b.n	1d8a2 <metal_io_phys+0x26>

0001d8b2 <virtqueue_create>:
{
   1d8b2:	b570      	push	{r4, r5, r6, lr}
   1d8b4:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1d8b6:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1d8b8:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1d8ba:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1d8be:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1d8c0:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1d8c2:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d8c4:	1c96      	adds	r6, r2, #2
   1d8c6:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1d8c8:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1d8cc:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1d8d0:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d8d2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1d8d6:	1c6e      	adds	r6, r5, #1
   1d8d8:	4433      	add	r3, r6
   1d8da:	426d      	negs	r5, r5
   1d8dc:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1d8de:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d8e0:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1d8e2:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1d8e6:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1d8e8:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d8ea:	b96b      	cbnz	r3, 1d908 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1d8ec:	3a01      	subs	r2, #1
   1d8ee:	4293      	cmp	r3, r2
   1d8f0:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1d8f4:	db0a      	blt.n	1d90c <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d8f6:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1d8f8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d8fc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1d900:	7393      	strb	r3, [r2, #14]
   1d902:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d906:	73d3      	strb	r3, [r2, #15]
}
   1d908:	2000      	movs	r0, #0
   1d90a:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1d90c:	3301      	adds	r3, #1
   1d90e:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1d910:	e7ed      	b.n	1d8ee <virtqueue_create+0x3c>

0001d912 <virtqueue_add_buffer>:
{
   1d912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d916:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1d918:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1d91c:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d91e:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d920:	46ba      	mov	sl, r7
{
   1d922:	b085      	sub	sp, #20
	needed = readable + writable;
   1d924:	18d6      	adds	r6, r2, r3
{
   1d926:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1d928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d92a:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1d92e:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1d930:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1d932:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1d934:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d936:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1d93a:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d93c:	42be      	cmp	r6, r7
   1d93e:	dc19      	bgt.n	1d974 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1d940:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d942:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1d944:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d946:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1d948:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1d94a:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d94c:	1e51      	subs	r1, r2, #1
   1d94e:	885a      	ldrh	r2, [r3, #2]
}
   1d950:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1d952:	400a      	ands	r2, r1
   1d954:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1d958:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1d95c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1d960:	69e2      	ldr	r2, [r4, #28]
   1d962:	8853      	ldrh	r3, [r2, #2]
   1d964:	3301      	adds	r3, #1
   1d966:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1d968:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1d96a:	3301      	adds	r3, #1
   1d96c:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1d96e:	b005      	add	sp, #20
   1d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1d974:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1d976:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1d978:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1d97c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1d980:	9302      	str	r3, [sp, #8]
   1d982:	6803      	ldr	r3, [r0, #0]
   1d984:	9203      	str	r2, [sp, #12]
   1d986:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1d988:	6883      	ldr	r3, [r0, #8]
   1d98a:	f108 0808 	add.w	r8, r8, #8
   1d98e:	4299      	cmp	r1, r3
   1d990:	bf28      	it	cs
   1d992:	f04f 31ff 	movcs.w	r1, #4294967295
   1d996:	f7ff ff71 	bl	1d87c <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d99a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1d99e:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1d9a0:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1d9a4:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1d9a8:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1d9aa:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d9ac:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1d9b0:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1d9b2:	bfb6      	itet	lt
   1d9b4:	2201      	movlt	r2, #1
		dp->flags = 0;
   1d9b6:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1d9ba:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1d9bc:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1d9be:	bfd8      	it	le
   1d9c0:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9c2:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1d9c6:	bfdc      	itt	le
   1d9c8:	f042 0202 	orrle.w	r2, r2, #2
   1d9cc:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9ce:	89ed      	ldrh	r5, [r5, #14]
   1d9d0:	e7b4      	b.n	1d93c <virtqueue_add_buffer+0x2a>

0001d9d2 <virtqueue_get_buffer>:
{
   1d9d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1d9d4:	b350      	cbz	r0, 1da2c <virtqueue_get_buffer+0x5a>
   1d9d6:	6a05      	ldr	r5, [r0, #32]
   1d9d8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1d9da:	886c      	ldrh	r4, [r5, #2]
   1d9dc:	429c      	cmp	r4, r3
   1d9de:	d030      	beq.n	1da42 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1d9e0:	1c5c      	adds	r4, r3, #1
   1d9e2:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1d9e4:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1d9e6:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1d9ea:	3c01      	subs	r4, #1
   1d9ec:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1d9ee:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1d9f2:	686b      	ldr	r3, [r5, #4]
   1d9f4:	b29e      	uxth	r6, r3
	if (len)
   1d9f6:	b109      	cbz	r1, 1d9fc <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1d9f8:	68ad      	ldr	r5, [r5, #8]
   1d9fa:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1d9fc:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1da00:	b29b      	uxth	r3, r3
   1da02:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1da06:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1da0a:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1da0c:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1da0e:	442f      	add	r7, r5
	dxp->ndescs--;
   1da10:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1da12:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1da14:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1da16:	898d      	ldrh	r5, [r1, #12]
   1da18:	076f      	lsls	r7, r5, #29
   1da1a:	d50e      	bpl.n	1da3a <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1da1c:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1da1e:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1da20:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1da22:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1da24:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1da26:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1da28:	b102      	cbz	r2, 1da2c <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1da2a:	8014      	strh	r4, [r2, #0]
}
   1da2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1da2e:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1da30:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1da32:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1da34:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1da38:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1da3a:	898d      	ldrh	r5, [r1, #12]
   1da3c:	07ed      	lsls	r5, r5, #31
   1da3e:	d4f6      	bmi.n	1da2e <virtqueue_get_buffer+0x5c>
   1da40:	e7ec      	b.n	1da1c <virtqueue_get_buffer+0x4a>
		return NULL;
   1da42:	2000      	movs	r0, #0
   1da44:	e7f2      	b.n	1da2c <virtqueue_get_buffer+0x5a>

0001da46 <virtqueue_get_available_buffer>:
{
   1da46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1da4a:	f3bf 8f5b 	dmb	ish
{
   1da4e:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1da50:	69c2      	ldr	r2, [r0, #28]
{
   1da52:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1da54:	8853      	ldrh	r3, [r2, #2]
   1da56:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1da58:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1da5a:	428b      	cmp	r3, r1
   1da5c:	d045      	beq.n	1daea <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1da5e:	1c4b      	adds	r3, r1, #1
   1da60:	8603      	strh	r3, [r0, #48]	; 0x30
   1da62:	8943      	ldrh	r3, [r0, #10]
   1da64:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1da68:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1da6a:	400b      	ands	r3, r1
   1da6c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1da70:	889a      	ldrh	r2, [r3, #4]
   1da72:	b293      	uxth	r3, r2
   1da74:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1da76:	6982      	ldr	r2, [r0, #24]
   1da78:	011b      	lsls	r3, r3, #4
   1da7a:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1da7e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1da82:	bb5b      	cbnz	r3, 1dadc <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1da84:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1da88:	1c62      	adds	r2, r4, #1
   1da8a:	bf09      	itett	eq
   1da8c:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1da90:	ea09 0404 	andne.w	r4, r9, r4
   1da94:	681c      	ldreq	r4, [r3, #0]
   1da96:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1da9a:	4621      	mov	r1, r4
   1da9c:	4640      	mov	r0, r8
   1da9e:	f7ff feed 	bl	1d87c <metal_io_phys>
   1daa2:	4581      	cmp	r9, r0
   1daa4:	d009      	beq.n	1daba <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1daa6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1daaa:	3301      	adds	r3, #1
   1daac:	441c      	add	r4, r3
		} while (offset < io->size);
   1daae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dab2:	429c      	cmp	r4, r3
   1dab4:	d3f1      	bcc.n	1da9a <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1dab6:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1daba:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1dabe:	1c43      	adds	r3, r0, #1
   1dac0:	d011      	beq.n	1dae6 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1dac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dac6:	42a3      	cmp	r3, r4
   1dac8:	d90d      	bls.n	1dae6 <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1daca:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1dacc:	8832      	ldrh	r2, [r6, #0]
   1dace:	69ab      	ldr	r3, [r5, #24]
   1dad0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1dad4:	689b      	ldr	r3, [r3, #8]
   1dad6:	603b      	str	r3, [r7, #0]
}
   1dad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1dadc:	4649      	mov	r1, r9
   1dade:	4640      	mov	r0, r8
   1dae0:	4798      	blx	r3
   1dae2:	4604      	mov	r4, r0
   1dae4:	e7e9      	b.n	1daba <virtqueue_get_available_buffer+0x74>
		: NULL);
   1dae6:	2000      	movs	r0, #0
   1dae8:	e7f0      	b.n	1dacc <virtqueue_get_available_buffer+0x86>
		return NULL;
   1daea:	2000      	movs	r0, #0
   1daec:	e7f4      	b.n	1dad8 <virtqueue_get_available_buffer+0x92>

0001daee <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1daee:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1daf0:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1daf2:	6912      	ldr	r2, [r2, #16]
   1daf4:	0092      	lsls	r2, r2, #2
   1daf6:	d515      	bpl.n	1db24 <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1daf8:	b94b      	cbnz	r3, 1db0e <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1dafa:	69c2      	ldr	r2, [r0, #28]
   1dafc:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1dafe:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1db00:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1db02:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1db06:	1a1b      	subs	r3, r3, r0
   1db08:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1db0a:	8093      	strh	r3, [r2, #4]
   1db0c:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1db0e:	2b01      	cmp	r3, #1
   1db10:	d10e      	bne.n	1db30 <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1db12:	6a02      	ldr	r2, [r0, #32]
   1db14:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1db16:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1db18:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1db1a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1db1e:	1a1b      	subs	r3, r3, r0
   1db20:	3b01      	subs	r3, #1
   1db22:	e7f2      	b.n	1db0a <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1db24:	b92b      	cbnz	r3, 1db32 <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1db26:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1db28:	8813      	ldrh	r3, [r2, #0]
   1db2a:	f043 0301 	orr.w	r3, r3, #1
   1db2e:	8013      	strh	r3, [r2, #0]
}
   1db30:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1db32:	2b01      	cmp	r3, #1
   1db34:	d1fc      	bne.n	1db30 <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1db36:	6a02      	ldr	r2, [r0, #32]
   1db38:	e7f6      	b.n	1db28 <virtqueue_disable_cb+0x3a>

0001db3a <virtqueue_kick>:
{
   1db3a:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1db3c:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1db40:	6803      	ldr	r3, [r0, #0]
{
   1db42:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1db44:	691a      	ldr	r2, [r3, #16]
   1db46:	699b      	ldr	r3, [r3, #24]
   1db48:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1db4c:	d019      	beq.n	1db82 <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1db4e:	b97b      	cbnz	r3, 1db70 <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1db50:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1db52:	6a02      	ldr	r2, [r0, #32]
   1db54:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1db56:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1db58:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1db5c:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1db5e:	1a9b      	subs	r3, r3, r2
   1db60:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1db62:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1db64:	b29b      	uxth	r3, r3
   1db66:	429a      	cmp	r2, r3
   1db68:	d813      	bhi.n	1db92 <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1db6a:	2300      	movs	r3, #0
   1db6c:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1db6e:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1db70:	2b01      	cmp	r3, #1
   1db72:	d1fa      	bne.n	1db6a <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1db74:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1db76:	69c2      	ldr	r2, [r0, #28]
   1db78:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1db7a:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1db7c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1db80:	e7ec      	b.n	1db5c <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1db82:	b963      	cbnz	r3, 1db9e <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1db84:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1db86:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1db88:	43db      	mvns	r3, r3
   1db8a:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1db8e:	2b00      	cmp	r3, #0
   1db90:	d0eb      	beq.n	1db6a <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1db92:	6923      	ldr	r3, [r4, #16]
   1db94:	2b00      	cmp	r3, #0
   1db96:	d0e8      	beq.n	1db6a <virtqueue_kick+0x30>
		vq->notify(vq);
   1db98:	4620      	mov	r0, r4
   1db9a:	4798      	blx	r3
   1db9c:	e7e5      	b.n	1db6a <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1db9e:	2b01      	cmp	r3, #1
   1dba0:	d1e3      	bne.n	1db6a <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1dba2:	69c3      	ldr	r3, [r0, #28]
   1dba4:	e7ef      	b.n	1db86 <virtqueue_kick+0x4c>

0001dba6 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1dba6:	69c2      	ldr	r2, [r0, #28]
   1dba8:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1dbaa:	8853      	ldrh	r3, [r2, #2]
   1dbac:	428b      	cmp	r3, r1
   1dbae:	d00a      	beq.n	1dbc6 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1dbb0:	8943      	ldrh	r3, [r0, #10]
   1dbb2:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1dbb4:	400b      	ands	r3, r1
   1dbb6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1dbba:	889a      	ldrh	r2, [r3, #4]
   1dbbc:	6983      	ldr	r3, [r0, #24]
   1dbbe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1dbc2:	6898      	ldr	r0, [r3, #8]
	return len;
   1dbc4:	4770      	bx	lr
		return 0;
   1dbc6:	2000      	movs	r0, #0
}
   1dbc8:	4770      	bx	lr

0001dbca <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1dbca:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1dbce:	68c3      	ldr	r3, [r0, #12]
   1dbd0:	b103      	cbz	r3, 1dbd4 <virtqueue_notification+0xa>
		vq->callback(vq);
   1dbd2:	4718      	bx	r3
}
   1dbd4:	4770      	bx	lr

0001dbd6 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1dbd6:	f04f 32ff 	mov.w	r2, #4294967295
   1dbda:	f04f 33ff 	mov.w	r3, #4294967295
   1dbde:	f7fb bd63 	b.w	196a8 <z_impl_k_sem_take>

0001dbe2 <rpmsg_unregister_endpoint>:
{
   1dbe2:	b570      	push	{r4, r5, r6, lr}
   1dbe4:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1dbe6:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1dbe8:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1dbec:	4630      	mov	r0, r6
   1dbee:	f7ff fff2 	bl	1dbd6 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1dbf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dbf4:	1c5a      	adds	r2, r3, #1
   1dbf6:	d010      	beq.n	1dc1a <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1dbf8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1dbfc:	2b7f      	cmp	r3, #127	; 0x7f
   1dbfe:	d80c      	bhi.n	1dc1a <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dc00:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1dc02:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1dc04:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dc06:	f003 031f 	and.w	r3, r3, #31
   1dc0a:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1dc0e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1dc12:	ea22 0203 	bic.w	r2, r2, r3
   1dc16:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1dc1a:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1dc1e:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1dc22:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1dc24:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1dc26:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1dc2a:	2300      	movs	r3, #0
   1dc2c:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1dc2e:	4630      	mov	r0, r6
}
   1dc30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dc34:	f7fb bcfc 	b.w	19630 <z_impl_k_sem_give>

0001dc38 <rpmsg_send_ns_message>:
{
   1dc38:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1dc3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1dc3c:	b08c      	sub	sp, #48	; 0x30
   1dc3e:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1dc40:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1dc42:	2220      	movs	r2, #32
   1dc44:	4601      	mov	r1, r0
   1dc46:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1dc48:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1dc4a:	f7fe f8a3 	bl	1bd94 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1dc4e:	2328      	movs	r3, #40	; 0x28
   1dc50:	2201      	movs	r2, #1
   1dc52:	4620      	mov	r0, r4
   1dc54:	e9cd 3200 	strd	r3, r2, [sp]
   1dc58:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1dc5a:	2235      	movs	r2, #53	; 0x35
   1dc5c:	ab02      	add	r3, sp, #8
   1dc5e:	f7f9 fcb3 	bl	175c8 <rpmsg_send_offchannel_raw>
}
   1dc62:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1dc66:	b00c      	add	sp, #48	; 0x30
   1dc68:	bd10      	pop	{r4, pc}

0001dc6a <rpmsg_get_endpoint>:
{
   1dc6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dc6e:	4680      	mov	r8, r0
   1dc70:	4689      	mov	r9, r1
   1dc72:	4615      	mov	r5, r2
   1dc74:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1dc76:	6807      	ldr	r7, [r0, #0]
   1dc78:	45b8      	cmp	r8, r7
   1dc7a:	d101      	bne.n	1dc80 <rpmsg_get_endpoint+0x16>
	return NULL;
   1dc7c:	2400      	movs	r4, #0
   1dc7e:	e021      	b.n	1dcc4 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1dc80:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1dc82:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1dc86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dc88:	d006      	beq.n	1dc98 <rpmsg_get_endpoint+0x2e>
   1dc8a:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1dc8c:	d01a      	beq.n	1dcc4 <rpmsg_get_endpoint+0x5a>
		if (name)
   1dc8e:	f1b9 0f00 	cmp.w	r9, #0
   1dc92:	d106      	bne.n	1dca2 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1dc94:	683f      	ldr	r7, [r7, #0]
   1dc96:	e7ef      	b.n	1dc78 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1dc98:	3301      	adds	r3, #1
   1dc9a:	d1f8      	bne.n	1dc8e <rpmsg_get_endpoint+0x24>
   1dc9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dc9e:	42b3      	cmp	r3, r6
   1dca0:	e7f4      	b.n	1dc8c <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1dca2:	2220      	movs	r2, #32
   1dca4:	4649      	mov	r1, r9
   1dca6:	4620      	mov	r0, r4
   1dca8:	f7fe f8a2 	bl	1bdf0 <strncmp>
		if (!name || !name_match)
   1dcac:	2800      	cmp	r0, #0
   1dcae:	d1f1      	bne.n	1dc94 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1dcb0:	1c72      	adds	r2, r6, #1
   1dcb2:	d002      	beq.n	1dcba <rpmsg_get_endpoint+0x50>
   1dcb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dcb6:	42b3      	cmp	r3, r6
   1dcb8:	d004      	beq.n	1dcc4 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1dcba:	1c6b      	adds	r3, r5, #1
   1dcbc:	d1ea      	bne.n	1dc94 <rpmsg_get_endpoint+0x2a>
   1dcbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dcc0:	3301      	adds	r3, #1
   1dcc2:	d1e7      	bne.n	1dc94 <rpmsg_get_endpoint+0x2a>
}
   1dcc4:	4620      	mov	r0, r4
   1dcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001dcca <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1dcca:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1dccc:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1dcd0:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1dcd4:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1dcd6:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1dcd8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1dcda:	6013      	str	r3, [r2, #0]
}
   1dcdc:	4770      	bx	lr

0001dcde <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1dcde:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1dce0:	4604      	mov	r4, r0
   1dce2:	b190      	cbz	r0, 1dd0a <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1dce4:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1dce6:	b183      	cbz	r3, 1dd0a <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1dce8:	7802      	ldrb	r2, [r0, #0]
   1dcea:	b14a      	cbz	r2, 1dd00 <rpmsg_destroy_ept+0x22>
   1dcec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1dcf0:	b133      	cbz	r3, 1dd00 <rpmsg_destroy_ept+0x22>
   1dcf2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1dcf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1dcf8:	d302      	bcc.n	1dd00 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1dcfa:	2101      	movs	r1, #1
   1dcfc:	f7ff ff9c 	bl	1dc38 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1dd00:	4620      	mov	r0, r4
}
   1dd02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1dd06:	f7ff bf6c 	b.w	1dbe2 <rpmsg_unregister_endpoint>
}
   1dd0a:	bd10      	pop	{r4, pc}

0001dd0c <rpmsg_virtio_tx_callback>:
}
   1dd0c:	4770      	bx	lr

0001dd0e <k_sem_give>:
   1dd0e:	f7fb bc8f 	b.w	19630 <z_impl_k_sem_give>

0001dd12 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1dd12:	f04f 32ff 	mov.w	r2, #4294967295
   1dd16:	f04f 33ff 	mov.w	r3, #4294967295
   1dd1a:	f7fb bcc5 	b.w	196a8 <z_impl_k_sem_take>

0001dd1e <rpmsg_virtio_ns_callback>:
{
   1dd1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1dd22:	2a28      	cmp	r2, #40	; 0x28
{
   1dd24:	4680      	mov	r8, r0
   1dd26:	460e      	mov	r6, r1
   1dd28:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1dd2a:	d12b      	bne.n	1dd84 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1dd2c:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1dd2e:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1dd30:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1dd34:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1dd36:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1dd38:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1dd3a:	1a71      	subs	r1, r6, r1
   1dd3c:	42a1      	cmp	r1, r4
   1dd3e:	bf28      	it	cs
   1dd40:	f04f 31ff 	movcs.w	r1, #4294967295
   1dd44:	f7ff fce7 	bl	1d716 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1dd48:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1dd4c:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1dd50:	4638      	mov	r0, r7
   1dd52:	f7ff ffde 	bl	1dd12 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1dd56:	464b      	mov	r3, r9
   1dd58:	f04f 32ff 	mov.w	r2, #4294967295
   1dd5c:	4669      	mov	r1, sp
   1dd5e:	4628      	mov	r0, r5
   1dd60:	f7ff ff83 	bl	1dc6a <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1dd64:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1dd66:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1dd68:	07db      	lsls	r3, r3, #31
   1dd6a:	d50f      	bpl.n	1dd8c <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1dd6c:	b110      	cbz	r0, 1dd74 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1dd6e:	f04f 33ff 	mov.w	r3, #4294967295
   1dd72:	6283      	str	r3, [r0, #40]	; 0x28
   1dd74:	4638      	mov	r0, r7
   1dd76:	f7ff ffca 	bl	1dd0e <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1dd7a:	b11c      	cbz	r4, 1dd84 <rpmsg_virtio_ns_callback+0x66>
   1dd7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dd7e:	b10b      	cbz	r3, 1dd84 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1dd80:	4640      	mov	r0, r8
   1dd82:	4798      	blx	r3
}
   1dd84:	2000      	movs	r0, #0
   1dd86:	b009      	add	sp, #36	; 0x24
   1dd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1dd8c:	b950      	cbnz	r0, 1dda4 <rpmsg_virtio_ns_callback+0x86>
   1dd8e:	4638      	mov	r0, r7
   1dd90:	f7ff ffbd 	bl	1dd0e <k_sem_give>
			if (rdev->ns_bind_cb)
   1dd94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1dd96:	2b00      	cmp	r3, #0
   1dd98:	d0f4      	beq.n	1dd84 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1dd9a:	464a      	mov	r2, r9
   1dd9c:	4669      	mov	r1, sp
   1dd9e:	4628      	mov	r0, r5
   1dda0:	4798      	blx	r3
   1dda2:	e7ef      	b.n	1dd84 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1dda4:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1dda8:	4638      	mov	r0, r7
   1ddaa:	f7ff ffb0 	bl	1dd0e <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1ddae:	e7e9      	b.n	1dd84 <rpmsg_virtio_ns_callback+0x66>

0001ddb0 <rpmsg_virtio_get_rx_buffer>:
{
   1ddb0:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1ddb2:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1ddb4:	4613      	mov	r3, r2
   1ddb6:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1ddb8:	b925      	cbnz	r5, 1ddc4 <rpmsg_virtio_get_rx_buffer+0x14>
}
   1ddba:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1ddbc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1ddc0:	f7ff be07 	b.w	1d9d2 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1ddc4:	2d01      	cmp	r5, #1
   1ddc6:	d106      	bne.n	1ddd6 <rpmsg_virtio_get_rx_buffer+0x26>
}
   1ddc8:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1ddca:	460a      	mov	r2, r1
   1ddcc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1ddd0:	4619      	mov	r1, r3
   1ddd2:	f7ff be38 	b.w	1da46 <virtqueue_get_available_buffer>
}
   1ddd6:	2000      	movs	r0, #0
   1ddd8:	bc30      	pop	{r4, r5}
   1ddda:	4770      	bx	lr

0001dddc <rpmsg_virtio_rx_callback>:
{
   1dddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1dde0:	6803      	ldr	r3, [r0, #0]
{
   1dde2:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1dde4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1dde6:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1ddea:	4638      	mov	r0, r7
   1ddec:	f7ff ff91 	bl	1dd12 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1ddf0:	4630      	mov	r0, r6
   1ddf2:	f10d 020a 	add.w	r2, sp, #10
   1ddf6:	a903      	add	r1, sp, #12
   1ddf8:	f7ff ffda 	bl	1ddb0 <rpmsg_virtio_get_rx_buffer>
   1ddfc:	4604      	mov	r4, r0
   1ddfe:	4638      	mov	r0, r7
   1de00:	f7ff ff85 	bl	1dd0e <k_sem_give>
	while (rp_hdr) {
   1de04:	b914      	cbnz	r4, 1de0c <rpmsg_virtio_rx_callback+0x30>
}
   1de06:	b006      	add	sp, #24
   1de08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de0c:	4638      	mov	r0, r7
   1de0e:	f7ff ff80 	bl	1dd12 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1de12:	f04f 33ff 	mov.w	r3, #4294967295
   1de16:	2100      	movs	r1, #0
   1de18:	4630      	mov	r0, r6
   1de1a:	6862      	ldr	r2, [r4, #4]
   1de1c:	f7ff ff25 	bl	1dc6a <rpmsg_get_endpoint>
   1de20:	4605      	mov	r5, r0
   1de22:	4638      	mov	r0, r7
   1de24:	f7ff ff73 	bl	1dd0e <k_sem_give>
		if (ept) {
   1de28:	b185      	cbz	r5, 1de4c <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1de2a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1de2c:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1de2e:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1de30:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1de32:	bf08      	it	eq
   1de34:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1de36:	89a2      	ldrh	r2, [r4, #12]
   1de38:	9100      	str	r1, [sp, #0]
   1de3a:	4628      	mov	r0, r5
   1de3c:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1de40:	f104 0110 	add.w	r1, r4, #16
   1de44:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1de46:	2800      	cmp	r0, #0
   1de48:	da00      	bge.n	1de4c <rpmsg_virtio_rx_callback+0x70>
   1de4a:	e7fe      	b.n	1de4a <rpmsg_virtio_rx_callback+0x6e>
   1de4c:	4638      	mov	r0, r7
   1de4e:	f7ff ff60 	bl	1dd12 <__metal_mutex_acquire>
   1de52:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1de54:	9b03      	ldr	r3, [sp, #12]
   1de56:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1de58:	b9b2      	cbnz	r2, 1de88 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1de5a:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1de5c:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1de60:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1de64:	2301      	movs	r3, #1
   1de66:	a904      	add	r1, sp, #16
   1de68:	f7ff fd53 	bl	1d912 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1de6c:	4630      	mov	r0, r6
   1de6e:	f10d 020a 	add.w	r2, sp, #10
   1de72:	a903      	add	r1, sp, #12
   1de74:	f7ff ff9c 	bl	1ddb0 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1de78:	4604      	mov	r4, r0
   1de7a:	2800      	cmp	r0, #0
   1de7c:	d1bf      	bne.n	1ddfe <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1de7e:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1de82:	f7ff fe5a 	bl	1db3a <virtqueue_kick>
   1de86:	e7ba      	b.n	1ddfe <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1de88:	2a01      	cmp	r2, #1
   1de8a:	d1ef      	bne.n	1de6c <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1de8c:	461a      	mov	r2, r3
   1de8e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1de92:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1de96:	f7f9 fb7b 	bl	17590 <virtqueue_add_consumed_buffer>
   1de9a:	e7e7      	b.n	1de6c <rpmsg_virtio_rx_callback+0x90>

0001de9c <_rpmsg_virtio_get_buffer_size>:
{
   1de9c:	b508      	push	{r3, lr}
   1de9e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1dea0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1dea2:	b14b      	cbz	r3, 1deb8 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1dea4:	2b01      	cmp	r3, #1
   1dea6:	d10a      	bne.n	1debe <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1dea8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1deac:	f7ff fe7b 	bl	1dba6 <virtqueue_get_desc_size>
   1deb0:	3810      	subs	r0, #16
   1deb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1deb6:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1deb8:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1debc:	e7fb      	b.n	1deb6 <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1debe:	2000      	movs	r0, #0
	return length;
   1dec0:	e7f9      	b.n	1deb6 <_rpmsg_virtio_get_buffer_size+0x1a>

0001dec2 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1dec2:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1dec4:	6842      	ldr	r2, [r0, #4]
{
   1dec6:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1dec8:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1deca:	bf29      	itett	cs
   1decc:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1dece:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1ded0:	1a84      	subcs	r4, r0, r2
   1ded2:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1ded4:	bf22      	ittt	cs
   1ded6:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1ded8:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1deda:	605a      	strcs	r2, [r3, #4]
}
   1dedc:	bd10      	pop	{r4, pc}

0001dede <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1dede:	b110      	cbz	r0, 1dee6 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1dee0:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1dee4:	6001      	str	r1, [r0, #0]
}
   1dee6:	4770      	bx	lr

0001dee8 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1dee8:	f7fd b913 	b.w	1b112 <z_clock_idle_exit>

0001deec <k_heap_init>:
{
   1deec:	b410      	push	{r4}
   1deee:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1def2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1def6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1def8:	f7ed b8ba 	b.w	b070 <sys_heap_init>

0001defc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1defc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1df00:	428b      	cmp	r3, r1
   1df02:	d001      	beq.n	1df08 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1df04:	f7fb b962 	b.w	191cc <z_set_prio>
}
   1df08:	2000      	movs	r0, #0
   1df0a:	4770      	bx	lr

0001df0c <z_impl_k_mutex_init>:
{
   1df0c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1df0e:	2000      	movs	r0, #0
   1df10:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1df14:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1df18:	4770      	bx	lr

0001df1a <z_queue_node_peek>:
{
   1df1a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1df1c:	4604      	mov	r4, r0
   1df1e:	b130      	cbz	r0, 1df2e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1df20:	6802      	ldr	r2, [r0, #0]
   1df22:	0793      	lsls	r3, r2, #30
   1df24:	d003      	beq.n	1df2e <z_queue_node_peek+0x14>
		ret = anode->data;
   1df26:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1df28:	b109      	cbz	r1, 1df2e <z_queue_node_peek+0x14>
			k_free(anode);
   1df2a:	f000 f982 	bl	1e232 <k_free>
}
   1df2e:	4620      	mov	r0, r4
   1df30:	bd10      	pop	{r4, pc}

0001df32 <z_impl_k_queue_init>:
	list->head = NULL;
   1df32:	2300      	movs	r3, #0
	list->tail = NULL;
   1df34:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1df38:	6083      	str	r3, [r0, #8]
   1df3a:	f100 030c 	add.w	r3, r0, #12
   1df3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1df42:	f100 0314 	add.w	r3, r0, #20
   1df46:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1df4a:	4770      	bx	lr

0001df4c <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1df4c:	2301      	movs	r3, #1
{
   1df4e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1df50:	9300      	str	r3, [sp, #0]
   1df52:	2300      	movs	r3, #0
{
   1df54:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1df56:	4619      	mov	r1, r3
   1df58:	f7fa fa20 	bl	1839c <queue_insert>
}
   1df5c:	b003      	add	sp, #12
   1df5e:	f85d fb04 	ldr.w	pc, [sp], #4

0001df62 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1df62:	2300      	movs	r3, #0
{
   1df64:	b507      	push	{r0, r1, r2, lr}
   1df66:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1df68:	9300      	str	r3, [sp, #0]
   1df6a:	4619      	mov	r1, r3
   1df6c:	f7fa fa16 	bl	1839c <queue_insert>
}
   1df70:	b003      	add	sp, #12
   1df72:	f85d fb04 	ldr.w	pc, [sp], #4

0001df76 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1df76:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1df7a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1df7e:	4298      	cmp	r0, r3
   1df80:	bfac      	ite	ge
   1df82:	2000      	movge	r0, #0
   1df84:	2001      	movlt	r0, #1
   1df86:	4770      	bx	lr

0001df88 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1df88:	4603      	mov	r3, r0
   1df8a:	b920      	cbnz	r0, 1df96 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1df8c:	f3ef 8205 	mrs	r2, IPSR
   1df90:	b90a      	cbnz	r2, 1df96 <z_reschedule_irqlock+0xe>
   1df92:	f7ef bd81 	b.w	da98 <arch_swap>
   1df96:	f383 8811 	msr	BASEPRI, r3
   1df9a:	f3bf 8f6f 	isb	sy
}
   1df9e:	4770      	bx	lr

0001dfa0 <z_reschedule_unlocked>:
	__asm__ volatile(
   1dfa0:	f04f 0320 	mov.w	r3, #32
   1dfa4:	f3ef 8011 	mrs	r0, BASEPRI
   1dfa8:	f383 8811 	msr	BASEPRI, r3
   1dfac:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dfb0:	f7ff bfea 	b.w	1df88 <z_reschedule_irqlock>

0001dfb4 <unpend_thread_no_timeout>:
{
   1dfb4:	b510      	push	{r4, lr}
   1dfb6:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1dfb8:	f7fa fb2a 	bl	18610 <pended_on>
   1dfbc:	4621      	mov	r1, r4
   1dfbe:	f7fa fc2f 	bl	18820 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dfc2:	7b63      	ldrb	r3, [r4, #13]
   1dfc4:	f023 0302 	bic.w	r3, r3, #2
   1dfc8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1dfca:	2300      	movs	r3, #0
   1dfcc:	60a3      	str	r3, [r4, #8]
}
   1dfce:	bd10      	pop	{r4, pc}

0001dfd0 <z_priq_dumb_best>:
{
   1dfd0:	4603      	mov	r3, r0
	return list->head == list;
   1dfd2:	6800      	ldr	r0, [r0, #0]
}
   1dfd4:	4283      	cmp	r3, r0
   1dfd6:	bf08      	it	eq
   1dfd8:	2000      	moveq	r0, #0
   1dfda:	4770      	bx	lr

0001dfdc <z_unpend_all>:
{
   1dfdc:	b538      	push	{r3, r4, r5, lr}
   1dfde:	4605      	mov	r5, r0
	int need_sched = 0;
   1dfe0:	2000      	movs	r0, #0
   1dfe2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dfe4:	42a5      	cmp	r5, r4
   1dfe6:	d000      	beq.n	1dfea <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1dfe8:	b904      	cbnz	r4, 1dfec <z_unpend_all+0x10>
}
   1dfea:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1dfec:	4620      	mov	r0, r4
   1dfee:	f7fa fc43 	bl	18878 <z_unpend_thread>
		z_ready_thread(thread);
   1dff2:	4620      	mov	r0, r4
   1dff4:	f7fa fd5a 	bl	18aac <z_ready_thread>
		need_sched = 1;
   1dff8:	2001      	movs	r0, #1
   1dffa:	e7f2      	b.n	1dfe2 <z_unpend_all+0x6>

0001dffc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1dffc:	b15a      	cbz	r2, 1e016 <z_impl_k_sem_init+0x1a>
   1dffe:	428a      	cmp	r2, r1
   1e000:	d309      	bcc.n	1e016 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e002:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e006:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1e00a:	e9c0 0000 	strd	r0, r0, [r0]
   1e00e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e012:	2000      	movs	r0, #0
   1e014:	4770      	bx	lr
		return -EINVAL;
   1e016:	f06f 0015 	mvn.w	r0, #21
}
   1e01a:	4770      	bx	lr

0001e01c <k_is_in_isr>:
   1e01c:	f3ef 8005 	mrs	r0, IPSR
}
   1e020:	3800      	subs	r0, #0
   1e022:	bf18      	it	ne
   1e024:	2001      	movne	r0, #1
   1e026:	4770      	bx	lr

0001e028 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1e028:	b108      	cbz	r0, 1e02e <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1e02a:	f7ed bc6b 	b.w	b904 <arch_busy_wait>
}
   1e02e:	4770      	bx	lr

0001e030 <z_impl_k_thread_name_set>:
}
   1e030:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1e034:	4770      	bx	lr

0001e036 <k_thread_name_get>:
}
   1e036:	2000      	movs	r0, #0
   1e038:	4770      	bx	lr

0001e03a <k_work_submit_to_queue>:
{
   1e03a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e03c:	f101 0308 	add.w	r3, r1, #8
   1e040:	e8d3 2fef 	ldaex	r2, [r3]
   1e044:	f042 0c01 	orr.w	ip, r2, #1
   1e048:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e04c:	f1be 0f00 	cmp.w	lr, #0
   1e050:	d1f6      	bne.n	1e040 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e052:	07d3      	lsls	r3, r2, #31
   1e054:	d403      	bmi.n	1e05e <k_work_submit_to_queue+0x24>
}
   1e056:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e05a:	f7ff bf77 	b.w	1df4c <k_queue_append>
}
   1e05e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e062 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1e062:	f1a0 0110 	sub.w	r1, r0, #16
   1e066:	6980      	ldr	r0, [r0, #24]
   1e068:	f7ff bfe7 	b.w	1e03a <k_work_submit_to_queue>

0001e06c <work_cancel>:
{
   1e06c:	b570      	push	{r4, r5, r6, lr}
   1e06e:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1e070:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e074:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1e078:	07db      	lsls	r3, r3, #31
   1e07a:	d52f      	bpl.n	1e0dc <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e07c:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1e07e:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1e080:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e082:	b913      	cbnz	r3, 1e08a <work_cancel+0x1e>
			return -EINVAL;
   1e084:	f06f 0015 	mvn.w	r0, #21
}
   1e088:	bd70      	pop	{r4, r5, r6, pc}
   1e08a:	429c      	cmp	r4, r3
   1e08c:	d121      	bne.n	1e0d2 <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e08e:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1e090:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e092:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1e096:	b991      	cbnz	r1, 1e0be <work_cancel+0x52>
   1e098:	42b4      	cmp	r4, r6
	list->head = node;
   1e09a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e09c:	d100      	bne.n	1e0a0 <work_cancel+0x34>
	list->tail = node;
   1e09e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e0a0:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e0a2:	f003 0303 	and.w	r3, r3, #3
   1e0a6:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1e0a8:	2000      	movs	r0, #0
   1e0aa:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e0ac:	e8d5 3fef 	ldaex	r3, [r5]
   1e0b0:	f023 0301 	bic.w	r3, r3, #1
   1e0b4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1e0b8:	2a00      	cmp	r2, #0
   1e0ba:	d0e5      	beq.n	1e088 <work_cancel+0x1c>
   1e0bc:	e7f6      	b.n	1e0ac <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e0be:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e0c0:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e0c2:	f003 0303 	and.w	r3, r3, #3
   1e0c6:	ea43 0300 	orr.w	r3, r3, r0
   1e0ca:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1e0cc:	bf08      	it	eq
   1e0ce:	6051      	streq	r1, [r2, #4]
}
   1e0d0:	e7e6      	b.n	1e0a0 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e0d2:	6818      	ldr	r0, [r3, #0]
   1e0d4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e0d6:	f020 0303 	bic.w	r3, r0, #3
   1e0da:	e7d2      	b.n	1e082 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1e0dc:	3010      	adds	r0, #16
   1e0de:	f7fb fed7 	bl	19e90 <z_abort_timeout>
		if (err) {
   1e0e2:	2800      	cmp	r0, #0
   1e0e4:	d0e0      	beq.n	1e0a8 <work_cancel+0x3c>
			return -EALREADY;
   1e0e6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1e0ea:	e7cd      	b.n	1e088 <work_cancel+0x1c>

0001e0ec <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1e0ec:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1e0ee:	f7fc f81d 	bl	1a12c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e0f2:	bd08      	pop	{r3, pc}

0001e0f4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1e0f4:	f7fc b81a 	b.w	1a12c <z_tick_get>

0001e0f8 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e0f8:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e0fc:	bf08      	it	eq
   1e0fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e102:	b538      	push	{r3, r4, r5, lr}
   1e104:	4605      	mov	r5, r0
   1e106:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e108:	d01d      	beq.n	1e146 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e10a:	ea51 0300 	orrs.w	r3, r1, r0
   1e10e:	d103      	bne.n	1e118 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1e110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1e114:	f7fc b80a 	b.w	1a12c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e118:	f06f 0301 	mvn.w	r3, #1
   1e11c:	1a18      	subs	r0, r3, r0
   1e11e:	f04f 33ff 	mov.w	r3, #4294967295
   1e122:	eb63 0101 	sbc.w	r1, r3, r1
   1e126:	2900      	cmp	r1, #0
   1e128:	da0c      	bge.n	1e144 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1e12a:	f7fb ffff 	bl	1a12c <z_tick_get>
   1e12e:	2d01      	cmp	r5, #1
   1e130:	4622      	mov	r2, r4
   1e132:	f174 0400 	sbcs.w	r4, r4, #0
   1e136:	462b      	mov	r3, r5
   1e138:	bfbc      	itt	lt
   1e13a:	2301      	movlt	r3, #1
   1e13c:	2200      	movlt	r2, #0
   1e13e:	1818      	adds	r0, r3, r0
   1e140:	eb41 0102 	adc.w	r1, r1, r2
}
   1e144:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1e146:	f04f 30ff 	mov.w	r0, #4294967295
   1e14a:	4601      	mov	r1, r0
   1e14c:	e7fa      	b.n	1e144 <z_timeout_end_calc+0x4c>

0001e14e <k_work_submit_to_queue>:
{
   1e14e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e150:	f101 0308 	add.w	r3, r1, #8
   1e154:	e8d3 2fef 	ldaex	r2, [r3]
   1e158:	f042 0c01 	orr.w	ip, r2, #1
   1e15c:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e160:	f1be 0f00 	cmp.w	lr, #0
   1e164:	d1f6      	bne.n	1e154 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e166:	07d3      	lsls	r3, r2, #31
   1e168:	d403      	bmi.n	1e172 <k_work_submit_to_queue+0x24>
}
   1e16a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e16e:	f7ff beed 	b.w	1df4c <k_queue_append>
}
   1e172:	f85d fb04 	ldr.w	pc, [sp], #4

0001e176 <add_event>:
{
   1e176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e178:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e17a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e17e:	4290      	cmp	r0, r2
   1e180:	4604      	mov	r4, r0
   1e182:	460d      	mov	r5, r1
   1e184:	d106      	bne.n	1e194 <add_event+0x1e>
	node->prev = list->tail;
   1e186:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1e188:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1e18a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1e18c:	6863      	ldr	r3, [r4, #4]
   1e18e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e190:	6065      	str	r5, [r4, #4]
}
   1e192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1e194:	2b00      	cmp	r3, #0
   1e196:	d0f6      	beq.n	1e186 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e198:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e19a:	b100      	cbz	r0, 1e19e <add_event+0x28>
   1e19c:	386c      	subs	r0, #108	; 0x6c
   1e19e:	b107      	cbz	r7, 1e1a2 <add_event+0x2c>
   1e1a0:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e1a2:	4639      	mov	r1, r7
   1e1a4:	f7ff fee7 	bl	1df76 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1e1a8:	2800      	cmp	r0, #0
   1e1aa:	d1ec      	bne.n	1e186 <add_event+0x10>
	return list->head == list;
   1e1ac:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e1ae:	42b4      	cmp	r4, r6
   1e1b0:	d0e9      	beq.n	1e186 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e1b2:	2e00      	cmp	r6, #0
   1e1b4:	d0e7      	beq.n	1e186 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e1b6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e1b8:	b101      	cbz	r1, 1e1bc <add_event+0x46>
   1e1ba:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e1bc:	4638      	mov	r0, r7
   1e1be:	f7ff feda 	bl	1df76 <z_is_t1_higher_prio_than_t2>
   1e1c2:	b128      	cbz	r0, 1e1d0 <add_event+0x5a>
	node->prev = successor->prev;
   1e1c4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e1c6:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1e1ca:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e1cc:	6075      	str	r5, [r6, #4]
			return;
   1e1ce:	e7e0      	b.n	1e192 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1e1d0:	6863      	ldr	r3, [r4, #4]
   1e1d2:	429e      	cmp	r6, r3
   1e1d4:	d0d7      	beq.n	1e186 <add_event+0x10>
   1e1d6:	6836      	ldr	r6, [r6, #0]
   1e1d8:	e7eb      	b.n	1e1b2 <add_event+0x3c>

0001e1da <z_handle_obj_poll_events>:
{
   1e1da:	4603      	mov	r3, r0
	return list->head == list;
   1e1dc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e1de:	4283      	cmp	r3, r0
   1e1e0:	d008      	beq.n	1e1f4 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1e1e2:	e9d0 3200 	ldrd	r3, r2, [r0]
   1e1e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e1e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e1ea:	2300      	movs	r3, #0
	node->prev = NULL;
   1e1ec:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e1f0:	f7fb bfda 	b.w	1a1a8 <signal_poll_event>
}
   1e1f4:	4770      	bx	lr

0001e1f6 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e1f6:	2904      	cmp	r1, #4
{
   1e1f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e1fc:	460d      	mov	r5, r1
   1e1fe:	bf38      	it	cc
   1e200:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e202:	1952      	adds	r2, r2, r5
{
   1e204:	4606      	mov	r6, r0
   1e206:	d209      	bcs.n	1e21c <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1e208:	f04f 0800 	mov.w	r8, #0
   1e20c:	f04f 0900 	mov.w	r9, #0
   1e210:	e9cd 8900 	strd	r8, r9, [sp]
   1e214:	f7f9 fdb4 	bl	17d80 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e218:	4604      	mov	r4, r0
   1e21a:	b918      	cbnz	r0, 1e224 <z_heap_aligned_alloc+0x2e>
		return NULL;
   1e21c:	2000      	movs	r0, #0
}
   1e21e:	b002      	add	sp, #8
   1e220:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1e224:	462a      	mov	r2, r5
   1e226:	21ff      	movs	r1, #255	; 0xff
   1e228:	f7fd fe2f 	bl	1be8a <memset>
	*heap_ref = heap;
   1e22c:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1e22e:	1960      	adds	r0, r4, r5
   1e230:	e7f5      	b.n	1e21e <z_heap_aligned_alloc+0x28>

0001e232 <k_free>:
	if (ptr != NULL) {
   1e232:	b138      	cbz	r0, 1e244 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e234:	1f03      	subs	r3, r0, #4
   1e236:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1e238:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e23c:	1c42      	adds	r2, r0, #1
   1e23e:	d0fa      	beq.n	1e236 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1e240:	f7f9 be26 	b.w	17e90 <k_heap_free>
}
   1e244:	4770      	bx	lr

0001e246 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1e246:	4770      	bx	lr
