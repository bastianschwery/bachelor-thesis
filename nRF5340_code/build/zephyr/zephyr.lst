
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	58 eb 00 20 b9 d0 00 00 cf ad 01 00 e9 d0 00 00     X.. ............
    8010:	e9 d0 00 00 e9 d0 00 00 e9 d0 00 00 e9 d0 00 00     ................
	...
    802c:	81 ce 00 00 e9 d0 00 00 00 00 00 00 25 ce 00 00     ............%...
    803c:	99 bb 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8050:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8060:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8070:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8080:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8090:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    80a0:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    80b0:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    80c0:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    80d0:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    80e0:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    80f0:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8100:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8110:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8120:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8130:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8140:	79 d0 00 00 79 d0 00 00 79 d0 00 00 79 d0 00 00     y...y...y...y...
    8150:	79 d0 00 00                                         y...

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	24 a2 01 00 01 00 00 00 00 80 00 00 00 80 00 00     $...............
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
    }

    return retVal;
}

uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{

    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f00:	2b01      	cmp	r3, #1
{
    8f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f06:	4607      	mov	r7, r0
    8f08:	4688      	mov	r8, r1
    8f0a:	4614      	mov	r4, r2
    8f0c:	461e      	mov	r6, r3
    if (len == 1)
    8f0e:	d125      	bne.n	8f5c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f10:	7815      	ldrb	r5, [r2, #0]
    8f12:	4b4b      	ldr	r3, [pc, #300]	; (9040 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f14:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f16:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f18:	f7ff fae4 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f1c:	062b      	lsls	r3, r5, #24
    8f1e:	d503      	bpl.n	8f28 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f20:	2200      	movs	r2, #0
    8f22:	4b48      	ldr	r3, [pc, #288]	; (9044 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f24:	f7ff f992 	bl	824c <__adddf3>
        }
        else {
            dia = diameter * 2.54;
    8f28:	a343      	add	r3, pc, #268	; (adr r3, 9038 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f2e:	f7ff fb43 	bl	85b8 <__aeabi_dmul>
    8f32:	4b45      	ldr	r3, [pc, #276]	; (9048 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f34:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f38:	463a      	mov	r2, r7
    8f3a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8f3e:	4843      	ldr	r0, [pc, #268]	; (904c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8f40:	f010 fde3 	bl	19b0a <printk>
    8f44:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f46:	4f42      	ldr	r7, [pc, #264]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++){
    8f48:	1c5d      	adds	r5, r3, #1
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	42b3      	cmp	r3, r6
    8f4e:	da6c      	bge.n	902a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8f50:	5ce1      	ldrb	r1, [r4, r3]
    8f52:	4638      	mov	r0, r7
    8f54:	f010 fdd9 	bl	19b0a <printk>
    for(uint8_t i = 0; i < len; i++){
    8f58:	462b      	mov	r3, r5
    8f5a:	e7f5      	b.n	8f48 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8f5c:	2b13      	cmp	r3, #19
    8f5e:	d1eb      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8f60:	7c53      	ldrb	r3, [r2, #17]
    8f62:	4a3c      	ldr	r2, [pc, #240]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8f64:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8f66:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8f68:	4a3b      	ldr	r2, [pc, #236]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8f6a:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8f6c:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8f6e:	d00e      	beq.n	8f8e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8f70:	2b03      	cmp	r3, #3
    8f72:	d02e      	beq.n	8fd2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8f74:	2b01      	cmp	r3, #1
    8f76:	d1df      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8f78:	4a38      	ldr	r2, [pc, #224]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f7a:	1e63      	subs	r3, r4, #1
    8f7c:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f84:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8f86:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8f8a:	d1f9      	bne.n	8f80 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8f8c:	e7d4      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8f8e:	4b34      	ldr	r3, [pc, #208]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8f90:	781d      	ldrb	r5, [r3, #0]
    8f92:	3501      	adds	r5, #1
    8f94:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8f96:	2d01      	cmp	r5, #1
            cntAddresses++;
    8f98:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8f9a:	d10a      	bne.n	8fb2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    8f9c:	4a2f      	ldr	r2, [pc, #188]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f9e:	1e63      	subs	r3, r4, #1
    8fa0:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fa4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fa8:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8faa:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fae:	d1f9      	bne.n	8fa4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    8fb0:	e7c2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8fb2:	2d02      	cmp	r5, #2
    8fb4:	d1c0      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fb6:	4a2b      	ldr	r2, [pc, #172]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8fb8:	1e63      	subs	r3, r4, #1
    8fba:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fc2:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fc4:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc8:	d1f9      	bne.n	8fbe <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    8fca:	2200      	movs	r2, #0
    8fcc:	4b24      	ldr	r3, [pc, #144]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	e7b2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fd2:	4b23      	ldr	r3, [pc, #140]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fd4:	781d      	ldrb	r5, [r3, #0]
    8fd6:	3501      	adds	r5, #1
    8fd8:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8fda:	2d01      	cmp	r5, #1
            cntAddresses++;
    8fdc:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8fde:	d10a      	bne.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    8fe0:	4a1e      	ldr	r2, [pc, #120]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fec:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    8ff4:	e7a0      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8ff6:	2d02      	cmp	r5, #2
    8ff8:	d10a      	bne.n	9010 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    8ffa:	4a1a      	ldr	r2, [pc, #104]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8ffc:	1e63      	subs	r3, r4, #1
    8ffe:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9002:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9006:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9008:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    900c:	d1f9      	bne.n	9002 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    900e:	e793      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9010:	2d03      	cmp	r5, #3
    9012:	d191      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    9014:	4a14      	ldr	r2, [pc, #80]	; (9068 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    9016:	1e63      	subs	r3, r4, #1
    9018:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    901c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9020:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    9022:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9026:	d1f9      	bne.n	901c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9028:	e7cf      	b.n	8fca <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    902a:	4810      	ldr	r0, [pc, #64]	; (906c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    902c:	f010 fd6d 	bl	19b0a <printk>
 	return len;
}
    9030:	4630      	mov	r0, r6
    9032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9036:	bf00      	nop
    9038:	851eb852 	.word	0x851eb852
    903c:	400451eb 	.word	0x400451eb
    9040:	2000c140 	.word	0x2000c140
    9044:	3fe00000 	.word	0x3fe00000
    9048:	20008818 	.word	0x20008818
    904c:	0001ebe1 	.word	0x0001ebe1
    9050:	0001ec0d 	.word	0x0001ec0d
    9054:	2000c142 	.word	0x2000c142
    9058:	2000c141 	.word	0x2000c141
    905c:	2000bf2c 	.word	0x2000bf2c
    9060:	2000bf5f 	.word	0x2000bf5f
    9064:	2000bf3d 	.word	0x2000bf3d
    9068:	2000bf4e 	.word	0x2000bf4e
    906c:	000217d4 	.word	0x000217d4

00009070 <main>:
#include <bluetooth/services/bas_client.h>

//static struct bt_bas_client bas;

void main(void)
{
    9070:	b500      	push	{lr}

	printk("Application start\n");
    9072:	4807      	ldr	r0, [pc, #28]	; (9090 <main+0x20>)
{
    9074:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    9076:	f010 fd48 	bl	19b0a <printk>

	//bt_bas_client_init(&bas);


	// create a new device manager
	deviceManager dManager;
    907a:	4668      	mov	r0, sp
    907c:	f000 f98a 	bl	9394 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9080:	2201      	movs	r2, #1
    9082:	4668      	mov	r0, sp
    9084:	4611      	mov	r1, r2
    9086:	f000 fc1b 	bl	98c0 <_ZN13deviceManager9setDeviceEbb>
    908a:	b011      	add	sp, #68	; 0x44
    908c:	f85d fb04 	ldr.w	pc, [sp], #4
    9090:	0001e404 	.word	0x0001e404

00009094 <_ZN13deviceManager13app_button_cbEv>:
    dk_set_led(USER_LED,led_state);
}

bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    9094:	4b01      	ldr	r3, [pc, #4]	; (909c <_ZN13deviceManager13app_button_cbEv+0x8>)
    9096:	7818      	ldrb	r0, [r3, #0]
    9098:	4770      	bx	lr
    909a:	bf00      	nop
    909c:	2000bf27 	.word	0x2000bf27

000090a0 <_ZN13deviceManager12le_param_reqEP7bt_connP16bt_le_conn_param>:
		startScan();	
	}
}

bool deviceManager::le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    90a0:	b508      	push	{r3, lr}
	printk("Accept new parameters\n");
    90a2:	4802      	ldr	r0, [pc, #8]	; (90ac <_ZN13deviceManager12le_param_reqEP7bt_connP16bt_le_conn_param+0xc>)
    90a4:	f010 fd31 	bl	19b0a <printk>

	return true;
}
    90a8:	2001      	movs	r0, #1
    90aa:	bd08      	pop	{r3, pc}
    90ac:	0001e417 	.word	0x0001e417

000090b0 <_ZN13deviceManager16le_param_updatedEP7bt_connttt>:

void deviceManager::le_param_updated(struct bt_conn *conn, uint16_t interval,
				 uint16_t latency, uint16_t timeout)
{
	printk("Params updated!\n");
    90b0:	4801      	ldr	r0, [pc, #4]	; (90b8 <_ZN13deviceManager16le_param_updatedEP7bt_connttt+0x8>)
    90b2:	f010 bd2a 	b.w	19b0a <printk>
    90b6:	bf00      	nop
    90b8:	0001e42e 	.word	0x0001e42e

000090bc <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
}


void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    90bc:	4801      	ldr	r0, [pc, #4]	; (90c4 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    90be:	f010 bd24 	b.w	19b0a <printk>
    90c2:	bf00      	nop
    90c4:	0001e43f 	.word	0x0001e43f

000090c8 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
	return BT_GATT_ITER_CONTINUE;
}

uint8_t deviceManager::notify_HR(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) {
    90c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    90ca:	461d      	mov	r5, r3

	uint8_t dataToSend[2];
	dataToSend[0] = HEARTRATE;
    90cc:	2303      	movs	r3, #3
		const void *data, uint16_t length) {
    90ce:	460e      	mov	r6, r1
	if (!data) {
    90d0:	4614      	mov	r4, r2
	dataToSend[0] = HEARTRATE;
    90d2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!data) {
    90d6:	b932      	cbnz	r2, 90e6 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e>
		printk("[UNSUBSCRIBED]\n");
    90d8:	480f      	ldr	r0, [pc, #60]	; (9118 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x50>)
    90da:	f010 fd16 	bl	19b0a <printk>
		params->value_handle = 0U;
		return BT_GATT_ITER_STOP;
    90de:	4620      	mov	r0, r4
		params->value_handle = 0U;
    90e0:	8134      	strh	r4, [r6, #8]
	} else {
		printk("[NOTIFICATION] data %p length %u\n", data, length);
	}

	return BT_GATT_ITER_CONTINUE;
}
    90e2:	b002      	add	sp, #8
    90e4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 2) {
    90e6:	2d02      	cmp	r5, #2
    90e8:	d10f      	bne.n	910a <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x42>
		uint8_t hr_bpm = ((uint8_t *)data)[1];
    90ea:	7851      	ldrb	r1, [r2, #1]
		deviceManager::data.heartRate = hr_bpm;
    90ec:	4b0b      	ldr	r3, [pc, #44]	; (911c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x54>)
		printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    90ee:	480c      	ldr	r0, [pc, #48]	; (9120 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x58>)
		deviceManager::data.heartRate = hr_bpm;
    90f0:	7459      	strb	r1, [r3, #17]
		dataToSend[1] = hr_bpm;
    90f2:	f88d 1005 	strb.w	r1, [sp, #5]
		printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    90f6:	f010 fd08 	bl	19b0a <printk>
		data_service_send(peripheralConn,dataToSend,sizeof(dataToSend));
    90fa:	4b0a      	ldr	r3, [pc, #40]	; (9124 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5c>)
    90fc:	462a      	mov	r2, r5
    90fe:	6818      	ldr	r0, [r3, #0]
    9100:	a901      	add	r1, sp, #4
    9102:	f000 fec3 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
	return BT_GATT_ITER_CONTINUE;
    9106:	2001      	movs	r0, #1
    9108:	e7eb      	b.n	90e2 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a>
		printk("[NOTIFICATION] data %p length %u\n", data, length);
    910a:	462a      	mov	r2, r5
    910c:	4621      	mov	r1, r4
    910e:	4806      	ldr	r0, [pc, #24]	; (9128 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x60>)
    9110:	f010 fcfb 	bl	19b0a <printk>
    9114:	e7f7      	b.n	9106 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x3e>
    9116:	bf00      	nop
    9118:	0001e467 	.word	0x0001e467
    911c:	200087e8 	.word	0x200087e8
    9120:	0001e477 	.word	0x0001e477
    9124:	2000a468 	.word	0x2000a468
    9128:	0001e499 	.word	0x0001e499

0000912c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
{
    912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    912e:	4604      	mov	r4, r0
	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    9130:	f011 f927 	bl	1a382 <bt_gatt_dm_conn_get>
    9134:	4607      	mov	r7, r0
	printk("The discovery procedure succeeded\n");
    9136:	4821      	ldr	r0, [pc, #132]	; (91bc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x90>)
    9138:	f010 fce7 	bl	19b0a <printk>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    913c:	4620      	mov	r0, r4
    913e:	4920      	ldr	r1, [pc, #128]	; (91c0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x94>)
    9140:	f003 f836 	bl	c1b0 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    9144:	4606      	mov	r6, r0
    9146:	b920      	cbnz	r0, 9152 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x26>
		printk("No heart rate measurement characteristic found");
    9148:	481e      	ldr	r0, [pc, #120]	; (91c4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x98>)
}
    914a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("No heat rate measurement characteristic value found");
    914e:	f010 bcdc 	b.w	19b0a <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9152:	4601      	mov	r1, r0
    9154:	4a1c      	ldr	r2, [pc, #112]	; (91c8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x9c>)
    9156:	4620      	mov	r0, r4
    9158:	f011 f960 	bl	1a41c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    915c:	b908      	cbnz	r0, 9162 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x36>
		printk("No heat rate measurement characteristic value found");
    915e:	481b      	ldr	r0, [pc, #108]	; (91cc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa0>)
    9160:	e7f3      	b.n	914a <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.value_handle = gatt_desc->handle;
    9162:	8883      	ldrh	r3, [r0, #4]
    9164:	4d1a      	ldr	r5, [pc, #104]	; (91d0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa4>)
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9166:	4631      	mov	r1, r6
    9168:	4620      	mov	r0, r4
    916a:	4a1a      	ldr	r2, [pc, #104]	; (91d4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa8>)
	paramHR.value_handle = gatt_desc->handle;
    916c:	812b      	strh	r3, [r5, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    916e:	f011 f955 	bl	1a41c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    9172:	b908      	cbnz	r0, 9178 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x4c>
		printk("No heart rate CCC descriptor found. "
    9174:	4818      	ldr	r0, [pc, #96]	; (91d8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xac>)
    9176:	e7e8      	b.n	914a <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.notify = notify_HR;
    9178:	4b18      	ldr	r3, [pc, #96]	; (91dc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb0>)
	err = bt_gatt_subscribe(conn, &paramHR);
    917a:	4629      	mov	r1, r5
	paramHR.notify = notify_HR;
    917c:	602b      	str	r3, [r5, #0]
	paramHR.value = BT_GATT_CCC_NOTIFY;
    917e:	2301      	movs	r3, #1
    9180:	81ab      	strh	r3, [r5, #12]
	paramHR.ccc_handle = gatt_desc->handle;
    9182:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &paramHR);
    9184:	4638      	mov	r0, r7
	paramHR.ccc_handle = gatt_desc->handle;
    9186:	816b      	strh	r3, [r5, #10]
	err = bt_gatt_subscribe(conn, &paramHR);
    9188:	f00a ffca 	bl	14120 <bt_gatt_subscribe>
	if (err && err != -EALREADY) {
    918c:	4601      	mov	r1, r0
    918e:	b178      	cbz	r0, 91b0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x84>
    9190:	f110 0f45 	cmn.w	r0, #69	; 0x45
    9194:	d00c      	beq.n	91b0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x84>
		printk("Subscribe failed (err %d)\n", err);
    9196:	4812      	ldr	r0, [pc, #72]	; (91e0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb4>)
    9198:	f010 fcb7 	bl	19b0a <printk>
	err = bt_gatt_dm_data_release(dm);
    919c:	4620      	mov	r0, r4
    919e:	f011 f94f 	bl	1a440 <bt_gatt_dm_data_release>
	if (err) {
    91a2:	4601      	mov	r1, r0
    91a4:	b140      	cbz	r0, 91b8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x8c>
}
    91a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("Could not release the discovery data (err %d)\n", err);
    91aa:	480e      	ldr	r0, [pc, #56]	; (91e4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb8>)
    91ac:	f010 bcad 	b.w	19b0a <printk>
		printk("[SUBSCRIBED]\n");
    91b0:	480d      	ldr	r0, [pc, #52]	; (91e8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xbc>)
    91b2:	f010 fcaa 	bl	19b0a <printk>
    91b6:	e7f1      	b.n	919c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x70>
}
    91b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    91ba:	bf00      	nop
    91bc:	0001e4bb 	.word	0x0001e4bb
    91c0:	0001e35c 	.word	0x0001e35c
    91c4:	0001e4de 	.word	0x0001e4de
    91c8:	0001e360 	.word	0x0001e360
    91cc:	0001e50d 	.word	0x0001e50d
    91d0:	2000a480 	.word	0x2000a480
    91d4:	0001e364 	.word	0x0001e364
    91d8:	0001e541 	.word	0x0001e541
    91dc:	000090c9 	.word	0x000090c9
    91e0:	0001e598 	.word	0x0001e598
    91e4:	0001e5c1 	.word	0x0001e5c1
    91e8:	0001e5b3 	.word	0x0001e5b3

000091ec <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    91ec:	b513      	push	{r0, r1, r4, lr}
    91ee:	4604      	mov	r4, r0
	printk("Service not found!\n");
    91f0:	4808      	ldr	r0, [pc, #32]	; (9214 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    91f2:	f010 fc8a 	bl	19b0a <printk>
	error[0] = 10;
    91f6:	230a      	movs	r3, #10
    91f8:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    91fc:	4b06      	ldr	r3, [pc, #24]	; (9218 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    91fe:	2201      	movs	r2, #1
    9200:	6818      	ldr	r0, [r3, #0]
    9202:	a901      	add	r1, sp, #4
    9204:	f000 fe42 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,-5);
    9208:	21fb      	movs	r1, #251	; 0xfb
    920a:	4620      	mov	r0, r4
    920c:	f007 fe48 	bl	10ea0 <bt_conn_disconnect>
}
    9210:	b002      	add	sp, #8
    9212:	bd10      	pop	{r4, pc}
    9214:	0001e5f0 	.word	0x0001e5f0
    9218:	2000a468 	.word	0x2000a468

0000921c <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    921c:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    921e:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    9220:	d507      	bpl.n	9232 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    9222:	1e04      	subs	r4, r0, #0
    9224:	bf18      	it	ne
    9226:	2401      	movne	r4, #1
    9228:	4620      	mov	r0, r4
    922a:	f003 fbe9 	bl	ca00 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    922e:	4b01      	ldr	r3, [pc, #4]	; (9234 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    9230:	701c      	strb	r4, [r3, #0]
}
    9232:	bd10      	pop	{r4, pc}
    9234:	2000bf27 	.word	0x2000bf27

00009238 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
			const void *data, uint16_t length) {
    9238:	b513      	push	{r0, r1, r4, lr}
    923a:	4611      	mov	r1, r2
	if (subscriptionDone)
    923c:	4a31      	ldr	r2, [pc, #196]	; (9304 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    923e:	7812      	ldrb	r2, [r2, #0]
    9240:	2a00      	cmp	r2, #0
    9242:	d034      	beq.n	92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
		if (length > 0)
    9244:	2b00      	cmp	r3, #0
    9246:	d032      	beq.n	92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
			deviceManager::data.saveData(data);
    9248:	4c2f      	ldr	r4, [pc, #188]	; (9308 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    924a:	4620      	mov	r0, r4
    924c:	f000 fd98 	bl	9d80 <_ZN7dataCSC8saveDataEPKv>
			if (getDiameter() != 0 && diameterSet == false)
    9250:	f000 fe46 	bl	9ee0 <_Z11getDiameterv>
    9254:	2200      	movs	r2, #0
    9256:	2300      	movs	r3, #0
    9258:	f7ff fc16 	bl	8a88 <__aeabi_dcmpeq>
    925c:	bb50      	cbnz	r0, 92b4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
    925e:	4b2b      	ldr	r3, [pc, #172]	; (930c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9260:	781a      	ldrb	r2, [r3, #0]
    9262:	bb3a      	cbnz	r2, 92b4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
				diameterSet = true;
    9264:	2201      	movs	r2, #1
    9266:	701a      	strb	r2, [r3, #0]
				deviceManager::data.wheelDiameter = getDiameter();
    9268:	f000 fe3a 	bl	9ee0 <_Z11getDiameterv>
    926c:	e9c4 0106 	strd	r0, r1, [r4, #24]
			if (deviceManager::data.type == CSC_SPEED)
    9270:	7c24      	ldrb	r4, [r4, #16]
    9272:	2c01      	cmp	r4, #1
    9274:	d12d      	bne.n	92d2 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9a>
				if (diameterSet)
    9276:	4b25      	ldr	r3, [pc, #148]	; (930c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	b1c3      	cbz	r3, 92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t speed = deviceManager::data.calcSpeed();
    927c:	4822      	ldr	r0, [pc, #136]	; (9308 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    927e:	f7ff fde3 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>
					if (speed > 0)
    9282:	b1a0      	cbz	r0, 92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[1] = (uint8_t) (speed/100);	
    9284:	2164      	movs	r1, #100	; 0x64
    9286:	fbb0 f1f1 	udiv	r1, r0, r1
						dataToSend[0] = CSC_SPEED;
    928a:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    928e:	4c20      	ldr	r4, [pc, #128]	; (9310 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[1] = (uint8_t) (speed/100);	
    9290:	b289      	uxth	r1, r1
						if (peripheralConn != nullptr)
    9292:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) (speed/100);	
    9294:	f88d 1005 	strb.w	r1, [sp, #5]
						val_after_comma = (uint8_t) (speed);
    9298:	f88d 0006 	strb.w	r0, [sp, #6]
						if (peripheralConn != nullptr)
    929c:	b13b      	cbz	r3, 92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Speed: %d\n",speed/100);
    929e:	481d      	ldr	r0, [pc, #116]	; (9314 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xdc>)
							printk("Cadence rpm: %d\n",rpm);
    92a0:	f010 fc33 	bl	19b0a <printk>
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    92a4:	2203      	movs	r2, #3
    92a6:	6820      	ldr	r0, [r4, #0]
    92a8:	a901      	add	r1, sp, #4
    92aa:	f000 fdef 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
}
    92ae:	2001      	movs	r0, #1
    92b0:	b002      	add	sp, #8
    92b2:	bd10      	pop	{r4, pc}
			else if (getDiameter() == 0 && diameterSet == true)
    92b4:	f000 fe14 	bl	9ee0 <_Z11getDiameterv>
    92b8:	2200      	movs	r2, #0
    92ba:	2300      	movs	r3, #0
    92bc:	f7ff fbe4 	bl	8a88 <__aeabi_dcmpeq>
    92c0:	2800      	cmp	r0, #0
    92c2:	d0d5      	beq.n	9270 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
    92c4:	4b11      	ldr	r3, [pc, #68]	; (930c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    92c6:	781a      	ldrb	r2, [r3, #0]
    92c8:	2a00      	cmp	r2, #0
    92ca:	d0d1      	beq.n	9270 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
				diameterSet = false;
    92cc:	2200      	movs	r2, #0
    92ce:	701a      	strb	r2, [r3, #0]
    92d0:	e7ce      	b.n	9270 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
			else if (deviceManager::data.type == CSC_CADENCE)
    92d2:	2c02      	cmp	r4, #2
    92d4:	d1eb      	bne.n	92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				if (diameterSet)
    92d6:	4b0d      	ldr	r3, [pc, #52]	; (930c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    92d8:	781b      	ldrb	r3, [r3, #0]
    92da:	2b00      	cmp	r3, #0
    92dc:	d0e7      	beq.n	92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t rpm = deviceManager::data.calcRPM();
    92de:	480a      	ldr	r0, [pc, #40]	; (9308 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    92e0:	f000 fd70 	bl	9dc4 <_ZN7dataCSC7calcRPMEv>
					if (rpm > 0)
    92e4:	4601      	mov	r1, r0
    92e6:	2800      	cmp	r0, #0
    92e8:	d0e1      	beq.n	92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[0] = CSC_CADENCE;	
    92ea:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    92ee:	4c08      	ldr	r4, [pc, #32]	; (9310 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[2] = (uint8_t) (rpm >> 8);	
    92f0:	0a03      	lsrs	r3, r0, #8
    92f2:	f88d 3006 	strb.w	r3, [sp, #6]
						if (peripheralConn != nullptr)
    92f6:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) rpm;
    92f8:	f88d 0005 	strb.w	r0, [sp, #5]
						if (peripheralConn != nullptr)
    92fc:	2b00      	cmp	r3, #0
    92fe:	d0d6      	beq.n	92ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Cadence rpm: %d\n",rpm);
    9300:	4805      	ldr	r0, [pc, #20]	; (9318 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe0>)
    9302:	e7cd      	b.n	92a0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
    9304:	2000bf28 	.word	0x2000bf28
    9308:	200087e8 	.word	0x200087e8
    930c:	2000bf23 	.word	0x2000bf23
    9310:	2000a468 	.word	0x2000a468
    9314:	0001e604 	.word	0x0001e604
    9318:	0001e60f 	.word	0x0001e60f

0000931c <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    931c:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    931e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9320:	b08b      	sub	sp, #44	; 0x2c
    9322:	4604      	mov	r4, r0
    9324:	460e      	mov	r6, r1
    9326:	4617      	mov	r7, r2
    9328:	ad07      	add	r5, sp, #28
    932a:	2b03      	cmp	r3, #3
    932c:	d820      	bhi.n	9370 <bt_addr_le_to_str.isra.0+0x54>
    932e:	e8df f003 	tbb	[pc, r3]
    9332:	1902      	.short	0x1902
    9334:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    9336:	4911      	ldr	r1, [pc, #68]	; (937c <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    9338:	4628      	mov	r0, r5
    933a:	f011 fdcc 	bl	1aed6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    933e:	7863      	ldrb	r3, [r4, #1]
    9340:	4639      	mov	r1, r7
    9342:	9304      	str	r3, [sp, #16]
    9344:	78a3      	ldrb	r3, [r4, #2]
    9346:	4630      	mov	r0, r6
    9348:	9303      	str	r3, [sp, #12]
    934a:	78e3      	ldrb	r3, [r4, #3]
    934c:	4a0c      	ldr	r2, [pc, #48]	; (9380 <bt_addr_le_to_str.isra.0+0x64>)
    934e:	9302      	str	r3, [sp, #8]
    9350:	7923      	ldrb	r3, [r4, #4]
    9352:	9505      	str	r5, [sp, #20]
    9354:	9301      	str	r3, [sp, #4]
    9356:	7963      	ldrb	r3, [r4, #5]
    9358:	9300      	str	r3, [sp, #0]
    935a:	79a3      	ldrb	r3, [r4, #6]
    935c:	f010 fbe2 	bl	19b24 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    9360:	b00b      	add	sp, #44	; 0x2c
    9362:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    9364:	4907      	ldr	r1, [pc, #28]	; (9384 <bt_addr_le_to_str.isra.0+0x68>)
    9366:	e7e7      	b.n	9338 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    9368:	4907      	ldr	r1, [pc, #28]	; (9388 <bt_addr_le_to_str.isra.0+0x6c>)
    936a:	e7e5      	b.n	9338 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    936c:	4907      	ldr	r1, [pc, #28]	; (938c <bt_addr_le_to_str.isra.0+0x70>)
    936e:	e7e3      	b.n	9338 <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    9370:	210a      	movs	r1, #10
    9372:	4628      	mov	r0, r5
    9374:	4a06      	ldr	r2, [pc, #24]	; (9390 <bt_addr_le_to_str.isra.0+0x74>)
    9376:	f010 fbd5 	bl	19b24 <snprintk>
		break;
    937a:	e7e0      	b.n	933e <bt_addr_le_to_str.isra.0+0x22>
    937c:	0001e620 	.word	0x0001e620
    9380:	0001e649 	.word	0x0001e649
    9384:	0001e627 	.word	0x0001e627
    9388:	0001e62e 	.word	0x0001e62e
    938c:	0001e638 	.word	0x0001e638
    9390:	0001e642 	.word	0x0001e642

00009394 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    9394:	b510      	push	{r4, lr}
    9396:	4604      	mov	r4, r0
    9398:	2214      	movs	r2, #20
    939a:	2100      	movs	r1, #0
    939c:	f011 fe20 	bl	1afe0 <memset>
    93a0:	4b10      	ldr	r3, [pc, #64]	; (93e4 <_ZN13deviceManagerC1Ev+0x50>)
    93a2:	4a11      	ldr	r2, [pc, #68]	; (93e8 <_ZN13deviceManagerC1Ev+0x54>)
    93a4:	6023      	str	r3, [r4, #0]
    93a6:	4b11      	ldr	r3, [pc, #68]	; (93ec <_ZN13deviceManagerC1Ev+0x58>)
    93a8:	e892 0003 	ldmia.w	r2, {r0, r1}
    93ac:	6063      	str	r3, [r4, #4]
    93ae:	4b10      	ldr	r3, [pc, #64]	; (93f0 <_ZN13deviceManagerC1Ev+0x5c>)
    93b0:	2224      	movs	r2, #36	; 0x24
    93b2:	60a3      	str	r3, [r4, #8]
    93b4:	4b0f      	ldr	r3, [pc, #60]	; (93f4 <_ZN13deviceManagerC1Ev+0x60>)
    93b6:	60e3      	str	r3, [r4, #12]
    93b8:	f104 0314 	add.w	r3, r4, #20
    93bc:	e883 0003 	stmia.w	r3, {r0, r1}
    93c0:	2100      	movs	r1, #0
    93c2:	f104 001c 	add.w	r0, r4, #28
    93c6:	f011 fe0b 	bl	1afe0 <memset>
		centralConnections[i] = nullptr;
    93ca:	2300      	movs	r3, #0
    93cc:	4a0a      	ldr	r2, [pc, #40]	; (93f8 <_ZN13deviceManagerC1Ev+0x64>)
}
    93ce:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    93d0:	e9c2 3300 	strd	r3, r3, [r2]
    93d4:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    93d8:	4a08      	ldr	r2, [pc, #32]	; (93fc <_ZN13deviceManagerC1Ev+0x68>)
    93da:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    93dc:	4a08      	ldr	r2, [pc, #32]	; (9400 <_ZN13deviceManagerC1Ev+0x6c>)
    93de:	7013      	strb	r3, [r2, #0]
}
    93e0:	bd10      	pop	{r4, pc}
    93e2:	bf00      	nop
    93e4:	0000998d 	.word	0x0000998d
    93e8:	0001d970 	.word	0x0001d970
    93ec:	00009bf1 	.word	0x00009bf1
    93f0:	000090a1 	.word	0x000090a1
    93f4:	000090b1 	.word	0x000090b1
    93f8:	2000a46c 	.word	0x2000a46c
    93fc:	2000bf22 	.word	0x2000bf22
    9400:	2000bf21 	.word	0x2000bf21

00009404 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    9404:	4a07      	ldr	r2, [pc, #28]	; (9424 <_ZN13deviceManager9getDeviceEv+0x20>)
    9406:	4b08      	ldr	r3, [pc, #32]	; (9428 <_ZN13deviceManager9getDeviceEv+0x24>)
    9408:	7812      	ldrb	r2, [r2, #0]
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	b122      	cbz	r2, 9418 <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    940e:	2b00      	cmp	r3, #0
    9410:	bf14      	ite	ne
    9412:	2003      	movne	r0, #3
    9414:	2001      	moveq	r0, #1
    9416:	4770      	bx	lr
        return 0;
    9418:	2b00      	cmp	r3, #0
    941a:	bf14      	ite	ne
    941c:	2002      	movne	r0, #2
    941e:	2000      	moveq	r0, #0
}
    9420:	4770      	bx	lr
    9422:	bf00      	nop
    9424:	2000bf2a 	.word	0x2000bf2a
    9428:	2000bf25 	.word	0x2000bf25

0000942c <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    942c:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    942e:	4805      	ldr	r0, [pc, #20]	; (9444 <_ZN13deviceManager10initButtonEv+0x18>)
    9430:	f00c fbe6 	bl	15c00 <dk_buttons_init>
	if (err) {
    9434:	4604      	mov	r4, r0
    9436:	b118      	cbz	r0, 9440 <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    9438:	4601      	mov	r1, r0
    943a:	4803      	ldr	r0, [pc, #12]	; (9448 <_ZN13deviceManager10initButtonEv+0x1c>)
    943c:	f010 fb65 	bl	19b0a <printk>
}
    9440:	4620      	mov	r0, r4
    9442:	bd10      	pop	{r4, pc}
    9444:	0000921d 	.word	0x0000921d
    9448:	0001e66c 	.word	0x0001e66c

0000944c <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    944c:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    944e:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9450:	490b      	ldr	r1, [pc, #44]	; (9480 <_ZN13deviceManager16startAdvertisingEv+0x34>)
    9452:	9300      	str	r3, [sp, #0]
    9454:	2202      	movs	r2, #2
    9456:	4b0b      	ldr	r3, [pc, #44]	; (9484 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    9458:	480b      	ldr	r0, [pc, #44]	; (9488 <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    945a:	f006 fd33 	bl	fec4 <bt_le_adv_start>
	if (err) {
    945e:	4601      	mov	r1, r0
    9460:	b128      	cbz	r0, 946e <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    9462:	480a      	ldr	r0, [pc, #40]	; (948c <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    9464:	b003      	add	sp, #12
    9466:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    946a:	f010 bb4e 	b.w	19b0a <printk>
	printk("Advertising successfully started\n");
    946e:	4808      	ldr	r0, [pc, #32]	; (9490 <_ZN13deviceManager16startAdvertisingEv+0x44>)
    9470:	f010 fb4b 	bl	19b0a <printk>
	printk("Waiting for connection...\n");
    9474:	4807      	ldr	r0, [pc, #28]	; (9494 <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    9476:	b003      	add	sp, #12
    9478:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    947c:	f010 bb45 	b.w	19b0a <printk>
    9480:	0001da88 	.word	0x0001da88
    9484:	0001da98 	.word	0x0001da98
    9488:	0001da08 	.word	0x0001da08
    948c:	0001e68b 	.word	0x0001e68b
    9490:	0001e6b1 	.word	0x0001e6b1
    9494:	0001e6d3 	.word	0x0001e6d3

00009498 <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    9498:	b510      	push	{r4, lr}
    949a:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    949c:	f7ff ffb2 	bl	9404 <_ZN13deviceManager9getDeviceEv>
    94a0:	1e83      	subs	r3, r0, #2
    94a2:	b2db      	uxtb	r3, r3
    94a4:	2b01      	cmp	r3, #1
    94a6:	d82d      	bhi.n	9504 <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    94a8:	f00c fb44 	bl	15b34 <dk_leds_init>
        if (err) {
    94ac:	4601      	mov	r1, r0
    94ae:	b120      	cbz	r0, 94ba <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    94b0:	4815      	ldr	r0, [pc, #84]	; (9508 <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    94b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    94b6:	f010 bb28 	b.w	19b0a <printk>
        err = initButton();
    94ba:	f7ff ffb7 	bl	942c <_ZN13deviceManager10initButtonEv>
    94be:	4601      	mov	r1, r0
        if (err) {
    94c0:	b108      	cbz	r0, 94c6 <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    94c2:	4812      	ldr	r0, [pc, #72]	; (950c <_ZN13deviceManager14initPeripheralEv+0x74>)
    94c4:	e7f5      	b.n	94b2 <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    94c6:	f006 fa63 	bl	f990 <bt_enable>
        if (err) {
    94ca:	4601      	mov	r1, r0
    94cc:	b108      	cbz	r0, 94d2 <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    94ce:	4810      	ldr	r0, [pc, #64]	; (9510 <_ZN13deviceManager14initPeripheralEv+0x78>)
    94d0:	e7ef      	b.n	94b2 <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    94d2:	4810      	ldr	r0, [pc, #64]	; (9514 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    94d4:	f010 fb19 	bl	19b0a <printk>
		bt_conn_cb_register(&conn_callbacks);
    94d8:	4620      	mov	r0, r4
    94da:	f007 f8b7 	bl	1064c <bt_conn_cb_register>
            settings_load();
    94de:	f010 fe09 	bl	1a0f4 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    94e2:	f104 0014 	add.w	r0, r4, #20
    94e6:	f003 fa81 	bl	c9ec <bt_lbs_init>
        if (err) {
    94ea:	4601      	mov	r1, r0
    94ec:	b108      	cbz	r0, 94f2 <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    94ee:	480a      	ldr	r0, [pc, #40]	; (9518 <_ZN13deviceManager14initPeripheralEv+0x80>)
    94f0:	e7df      	b.n	94b2 <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    94f2:	f000 fcb9 	bl	9e68 <_Z17data_service_initv>
		if (err) 
    94f6:	4601      	mov	r1, r0
    94f8:	2800      	cmp	r0, #0
    94fa:	d1f8      	bne.n	94ee <_ZN13deviceManager14initPeripheralEv+0x56>
}
    94fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    9500:	f7ff bfa4 	b.w	944c <_ZN13deviceManager16startAdvertisingEv>
}
    9504:	bd10      	pop	{r4, pc}
    9506:	bf00      	nop
    9508:	0001e6ee 	.word	0x0001e6ee
    950c:	0001e709 	.word	0x0001e709
    9510:	0001e726 	.word	0x0001e726
    9514:	0001e746 	.word	0x0001e746
    9518:	0001e75d 	.word	0x0001e75d

0000951c <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    951c:	2001      	movs	r0, #1
void deviceManager::startScan(){
    951e:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9520:	f003 fa1c 	bl	c95c <bt_scan_start>
	if (err) {
    9524:	4601      	mov	r1, r0
    9526:	b110      	cbz	r0, 952e <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    9528:	4803      	ldr	r0, [pc, #12]	; (9538 <_ZN13deviceManager9startScanEv+0x1c>)
    952a:	f010 faee 	bl	19b0a <printk>
}
    952e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    9532:	4802      	ldr	r0, [pc, #8]	; (953c <_ZN13deviceManager9startScanEv+0x20>)
    9534:	f010 bae9 	b.w	19b0a <printk>
    9538:	0001e77a 	.word	0x0001e77a
    953c:	0001e79c 	.word	0x0001e79c

00009540 <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    9540:	b530      	push	{r4, r5, lr}
    9542:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    9544:	f000 fd02 	bl	9f4c <_Z14getSensorInfosv>
    9548:	4d2e      	ldr	r5, [pc, #184]	; (9604 <_ZN13deviceManager8initScanEv+0xc4>)
	struct bt_le_scan_param scanParam = {
    954a:	ab03      	add	r3, sp, #12
    954c:	2214      	movs	r2, #20
    954e:	2100      	movs	r1, #0
	sensorInfos = getSensorInfos();
    9550:	7028      	strb	r0, [r5, #0]
    9552:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    9554:	4618      	mov	r0, r3
    9556:	f011 fd43 	bl	1afe0 <memset>
    955a:	2201      	movs	r2, #1
    955c:	f88d 200c 	strb.w	r2, [sp, #12]
    9560:	9204      	str	r2, [sp, #16]
    9562:	4a29      	ldr	r2, [pc, #164]	; (9608 <_ZN13deviceManager8initScanEv+0xc8>)
	struct bt_scan_init_param scanInit = {
    9564:	4929      	ldr	r1, [pc, #164]	; (960c <_ZN13deviceManager8initScanEv+0xcc>)
	struct bt_le_scan_param scanParam = {
    9566:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    9568:	2200      	movs	r2, #0
    956a:	9102      	str	r1, [sp, #8]
    956c:	9201      	str	r2, [sp, #4]
	};
    956e:	9000      	str	r0, [sp, #0]
	if (sensorInfos != 0)
    9570:	2c00      	cmp	r4, #0
    9572:	d042      	beq.n	95fa <_ZN13deviceManager8initScanEv+0xba>
		if (once)
    9574:	4b26      	ldr	r3, [pc, #152]	; (9610 <_ZN13deviceManager8initScanEv+0xd0>)
    9576:	7819      	ldrb	r1, [r3, #0]
    9578:	b141      	cbz	r1, 958c <_ZN13deviceManager8initScanEv+0x4c>
			once = false;
    957a:	701a      	strb	r2, [r3, #0]
			bt_le_scan_stop();
    957c:	f006 fea4 	bl	102c8 <bt_le_scan_stop>
			bt_scan_init(&scanInit);
    9580:	4668      	mov	r0, sp
    9582:	f003 f9b9 	bl	c8f8 <bt_scan_init>
			bt_scan_cb_register(&scan_cb);			
    9586:	4823      	ldr	r0, [pc, #140]	; (9614 <_ZN13deviceManager8initScanEv+0xd4>)
    9588:	f002 ffde 	bl	c548 <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    958c:	f003 f866 	bl	c65c <bt_scan_filter_remove_all>
		switch (sensorInfos)
    9590:	782b      	ldrb	r3, [r5, #0]
    9592:	3b01      	subs	r3, #1
    9594:	2b04      	cmp	r3, #4
    9596:	d825      	bhi.n	95e4 <_ZN13deviceManager8initScanEv+0xa4>
    9598:	e8df f003 	tbb	[pc, r3]
    959c:	190f0d03 	.word	0x190f0d03
    95a0:	22          	.byte	0x22
    95a1:	00          	.byte	0x00
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    95a2:	491d      	ldr	r1, [pc, #116]	; (9618 <_ZN13deviceManager8initScanEv+0xd8>)
    95a4:	2003      	movs	r0, #3
    95a6:	f002 ffdf 	bl	c568 <bt_scan_filter_add>
				if (err) {
    95aa:	b1d8      	cbz	r0, 95e4 <_ZN13deviceManager8initScanEv+0xa4>
					printk("Scanning filters cannot be set\n");
    95ac:	481b      	ldr	r0, [pc, #108]	; (961c <_ZN13deviceManager8initScanEv+0xdc>)
    95ae:	f010 faac 	bl	19b0a <printk>
}
    95b2:	b009      	add	sp, #36	; 0x24
    95b4:	bd30      	pop	{r4, r5, pc}
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    95b6:	491a      	ldr	r1, [pc, #104]	; (9620 <_ZN13deviceManager8initScanEv+0xe0>)
    95b8:	e7f4      	b.n	95a4 <_ZN13deviceManager8initScanEv+0x64>
				if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    95ba:	4b1a      	ldr	r3, [pc, #104]	; (9624 <_ZN13deviceManager8initScanEv+0xe4>)
    95bc:	781b      	ldrb	r3, [r3, #0]
    95be:	2b01      	cmp	r3, #1
    95c0:	d801      	bhi.n	95c6 <_ZN13deviceManager8initScanEv+0x86>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    95c2:	4919      	ldr	r1, [pc, #100]	; (9628 <_ZN13deviceManager8initScanEv+0xe8>)
    95c4:	e7ee      	b.n	95a4 <_ZN13deviceManager8initScanEv+0x64>
				else if (nbrConnectionsCentral == 2)
    95c6:	2b02      	cmp	r3, #2
    95c8:	d10c      	bne.n	95e4 <_ZN13deviceManager8initScanEv+0xa4>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    95ca:	4918      	ldr	r1, [pc, #96]	; (962c <_ZN13deviceManager8initScanEv+0xec>)
    95cc:	e7ea      	b.n	95a4 <_ZN13deviceManager8initScanEv+0x64>
				if (nbrConnectionsCentral == 0)
    95ce:	4b15      	ldr	r3, [pc, #84]	; (9624 <_ZN13deviceManager8initScanEv+0xe4>)
    95d0:	781b      	ldrb	r3, [r3, #0]
    95d2:	b90b      	cbnz	r3, 95d8 <_ZN13deviceManager8initScanEv+0x98>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    95d4:	4916      	ldr	r1, [pc, #88]	; (9630 <_ZN13deviceManager8initScanEv+0xf0>)
    95d6:	e7e5      	b.n	95a4 <_ZN13deviceManager8initScanEv+0x64>
				else if (nbrConnectionsCentral == 1)
    95d8:	2b01      	cmp	r3, #1
    95da:	d103      	bne.n	95e4 <_ZN13deviceManager8initScanEv+0xa4>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    95dc:	4915      	ldr	r1, [pc, #84]	; (9634 <_ZN13deviceManager8initScanEv+0xf4>)
    95de:	e7e1      	b.n	95a4 <_ZN13deviceManager8initScanEv+0x64>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    95e0:	4915      	ldr	r1, [pc, #84]	; (9638 <_ZN13deviceManager8initScanEv+0xf8>)
    95e2:	e7df      	b.n	95a4 <_ZN13deviceManager8initScanEv+0x64>
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    95e4:	2100      	movs	r1, #0
    95e6:	2004      	movs	r0, #4
    95e8:	f003 f864 	bl	c6b4 <bt_scan_filter_enable>
		if (err) {
    95ec:	b110      	cbz	r0, 95f4 <_ZN13deviceManager8initScanEv+0xb4>
			printk("Filters cannot be turned on\n");
    95ee:	4813      	ldr	r0, [pc, #76]	; (963c <_ZN13deviceManager8initScanEv+0xfc>)
    95f0:	f010 fa8b 	bl	19b0a <printk>
		startScan();
    95f4:	f7ff ff92 	bl	951c <_ZN13deviceManager9startScanEv>
    95f8:	e7db      	b.n	95b2 <_ZN13deviceManager8initScanEv+0x72>
		err = bt_le_scan_start(&scanParam, deviceFound);
    95fa:	4911      	ldr	r1, [pc, #68]	; (9640 <_ZN13deviceManager8initScanEv+0x100>)
    95fc:	f006 fe00 	bl	10200 <bt_le_scan_start>
		if (err) {
    9600:	e7d7      	b.n	95b2 <_ZN13deviceManager8initScanEv+0x72>
    9602:	bf00      	nop
    9604:	2000bf24 	.word	0x2000bf24
    9608:	00300060 	.word	0x00300060
    960c:	0001e324 	.word	0x0001e324
    9610:	20008574 	.word	0x20008574
    9614:	20008170 	.word	0x20008170
    9618:	0001e32c 	.word	0x0001e32c
    961c:	0001e7a9 	.word	0x0001e7a9
    9620:	0001e330 	.word	0x0001e330
    9624:	2000bf29 	.word	0x2000bf29
    9628:	0001e334 	.word	0x0001e334
    962c:	0001e338 	.word	0x0001e338
    9630:	0001e33c 	.word	0x0001e33c
    9634:	0001e340 	.word	0x0001e340
    9638:	0001e344 	.word	0x0001e344
    963c:	0001e7c9 	.word	0x0001e7c9
    9640:	000199a9 	.word	0x000199a9

00009644 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    9644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!subscriptionDone)
    9648:	4e5e      	ldr	r6, [pc, #376]	; (97c4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    964a:	4604      	mov	r4, r0
	if (!subscriptionDone)
    964c:	7833      	ldrb	r3, [r6, #0]
    964e:	2b00      	cmp	r3, #0
    9650:	d150      	bne.n	96f4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb0>
		printk("Error in line 823\n");
    9652:	485d      	ldr	r0, [pc, #372]	; (97c8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x184>)
    9654:	f010 fa59 	bl	19b0a <printk>
		printk("Error in line 833\n");
    9658:	485c      	ldr	r0, [pc, #368]	; (97cc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x188>)
    965a:	f010 fa56 	bl	19b0a <printk>
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    965e:	4620      	mov	r0, r4
    9660:	495b      	ldr	r1, [pc, #364]	; (97d0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18c>)
    9662:	f002 fda5 	bl	c1b0 <bt_gatt_dm_char_by_uuid>
		if (!chrc) {
    9666:	4605      	mov	r5, r0
    9668:	b970      	cbnz	r0, 9688 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x44>
			printk("Missing CSC measurement characteristic\n");
    966a:	485a      	ldr	r0, [pc, #360]	; (97d4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x190>)
			printk("Missing CSC measurement char CCC descriptor\n");
    966c:	f010 fa4d 	bl	19b0a <printk>
			err = bt_gatt_dm_data_release(dm);
    9670:	4620      	mov	r0, r4
    9672:	f010 fee5 	bl	1a440 <bt_gatt_dm_data_release>
			if (err) {
    9676:	4601      	mov	r1, r0
    9678:	2800      	cmp	r0, #0
    967a:	d05b      	beq.n	9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf0>
				printk("Could not release discovery data, err: %d\n", err);
    967c:	4856      	ldr	r0, [pc, #344]	; (97d8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
}
    967e:	b002      	add	sp, #8
    9680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				printk("Could not release discovery data, err: %d\n", err);
    9684:	f010 ba41 	b.w	19b0a <printk>
		printk("Error in line 844\n");
    9688:	4854      	ldr	r0, [pc, #336]	; (97dc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x198>)
    968a:	f010 fa3e 	bl	19b0a <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    968e:	4629      	mov	r1, r5
    9690:	4620      	mov	r0, r4
    9692:	4a53      	ldr	r2, [pc, #332]	; (97e0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x19c>)
    9694:	f010 fec2 	bl	1a41c <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9698:	4607      	mov	r7, r0
    969a:	b908      	cbnz	r0, 96a0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x5c>
			printk("Missing CSC measurement char CCC descriptor\n");
    969c:	4851      	ldr	r0, [pc, #324]	; (97e4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a0>)
    969e:	e7e5      	b.n	966c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x28>
		printk("Error in line 855\n");
    96a0:	4851      	ldr	r0, [pc, #324]	; (97e8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a4>)
    96a2:	f010 fa32 	bl	19b0a <printk>
		param.value_handle = desc->handle;
    96a6:	f8df 8144 	ldr.w	r8, [pc, #324]	; 97ec <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a8>
    96aa:	88bb      	ldrh	r3, [r7, #4]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    96ac:	4629      	mov	r1, r5
    96ae:	4620      	mov	r0, r4
    96b0:	4a4f      	ldr	r2, [pc, #316]	; (97f0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1ac>)
		param.value_handle = desc->handle;
    96b2:	f8a8 3008 	strh.w	r3, [r8, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    96b6:	f010 feb1 	bl	1a41c <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    96ba:	4605      	mov	r5, r0
    96bc:	2800      	cmp	r0, #0
    96be:	d0ed      	beq.n	969c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x58>
		printk("Error in line 868\n");
    96c0:	484c      	ldr	r0, [pc, #304]	; (97f4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b0>)
    96c2:	f010 fa22 	bl	19b0a <printk>
		param.ccc_handle = desc->handle;
    96c6:	88ab      	ldrh	r3, [r5, #4]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    96c8:	4620      	mov	r0, r4
		param.ccc_handle = desc->handle;
    96ca:	f8a8 300a 	strh.w	r3, [r8, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    96ce:	f010 fe58 	bl	1a382 <bt_gatt_dm_conn_get>
    96d2:	4641      	mov	r1, r8
    96d4:	f00a fd24 	bl	14120 <bt_gatt_subscribe>
		if (err) {
    96d8:	4601      	mov	r1, r0
    96da:	b110      	cbz	r0, 96e2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x9e>
			printk("Subscribtion failed (err %d)\n", err);
    96dc:	4846      	ldr	r0, [pc, #280]	; (97f8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b4>)
    96de:	f010 fa14 	bl	19b0a <printk>
		printk("Error in line 876\n");
    96e2:	4846      	ldr	r0, [pc, #280]	; (97fc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1b8>)
    96e4:	f010 fa11 	bl	19b0a <printk>
		bt_gatt_dm_data_release(dm);
    96e8:	4620      	mov	r0, r4
    96ea:	f010 fea9 	bl	1a440 <bt_gatt_dm_data_release>
		printk("Error in line 677\n");
    96ee:	4844      	ldr	r0, [pc, #272]	; (9800 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1bc>)
    96f0:	f010 fa0b 	bl	19b0a <printk>
	printk("nbr connections %d\n",nbrConnectionsCentral);
    96f4:	4c43      	ldr	r4, [pc, #268]	; (9804 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c0>)
	printk("Error in line 909\n");
    96f6:	4844      	ldr	r0, [pc, #272]	; (9808 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c4>)
    96f8:	f010 fa07 	bl	19b0a <printk>
	printk("nbr connections %d\n",nbrConnectionsCentral);
    96fc:	7821      	ldrb	r1, [r4, #0]
    96fe:	4843      	ldr	r0, [pc, #268]	; (980c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1c8>)
    9700:	f010 fa03 	bl	19b0a <printk>
	switch (nbrConnectionsCentral)
    9704:	7822      	ldrb	r2, [r4, #0]
    9706:	2a02      	cmp	r2, #2
    9708:	d027      	beq.n	975a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x116>
    970a:	2a03      	cmp	r2, #3
    970c:	d04e      	beq.n	97ac <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x168>
    970e:	2a01      	cmp	r2, #1
    9710:	d110      	bne.n	9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf0>
		if (nbrAddresses == 1)
    9712:	4b3f      	ldr	r3, [pc, #252]	; (9810 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1cc>)
    9714:	781c      	ldrb	r4, [r3, #0]
    9716:	2c01      	cmp	r4, #1
    9718:	d10f      	bne.n	973a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf6>
			connectedCode[0] = 14;
    971a:	230e      	movs	r3, #14
    971c:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9720:	4b3c      	ldr	r3, [pc, #240]	; (9814 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1d0>)
    9722:	4622      	mov	r2, r4
    9724:	6818      	ldr	r0, [r3, #0]
    9726:	a901      	add	r1, sp, #4
    9728:	f000 fbb0 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
			printk("Discovery completed\n");
    972c:	483a      	ldr	r0, [pc, #232]	; (9818 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1d4>)
    972e:	f010 f9ec 	bl	19b0a <printk>
			subscriptionDone = true;
    9732:	7034      	strb	r4, [r6, #0]
}
    9734:	b002      	add	sp, #8
    9736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (nbrAddresses == 2)	
    973a:	2c02      	cmp	r4, #2
    973c:	d1fa      	bne.n	9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf0>
			connectedCode[0] = 15;
    973e:	230f      	movs	r3, #15
    9740:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9744:	4b33      	ldr	r3, [pc, #204]	; (9814 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1d0>)
    9746:	a901      	add	r1, sp, #4
    9748:	6818      	ldr	r0, [r3, #0]
    974a:	f000 fb9f 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
			initScan();
    974e:	f7ff fef7 	bl	9540 <_ZN13deviceManager8initScanEv>
			printk("First discovery completed\n");			
    9752:	4832      	ldr	r0, [pc, #200]	; (981c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1d8>)
    9754:	f010 f9d9 	bl	19b0a <printk>
    9758:	e7ec      	b.n	9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf0>
		if (nbrAddresses == 2)
    975a:	4b2d      	ldr	r3, [pc, #180]	; (9810 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1cc>)
    975c:	781b      	ldrb	r3, [r3, #0]
    975e:	2b02      	cmp	r3, #2
    9760:	d113      	bne.n	978a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x146>
			connectedCode[0] = 16;
    9762:	2310      	movs	r3, #16
    9764:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn, connectedCode, sizeof(connectedCode));
    9768:	4b2a      	ldr	r3, [pc, #168]	; (9814 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1d0>)
    976a:	2201      	movs	r2, #1
    976c:	6818      	ldr	r0, [r3, #0]
    976e:	a901      	add	r1, sp, #4
    9770:	f000 fb8c 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");
    9774:	482a      	ldr	r0, [pc, #168]	; (9820 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1dc>)
			printk("Third discovery completed\n");
    9776:	f010 f9c8 	bl	19b0a <printk>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    977a:	2001      	movs	r0, #1
    977c:	f013 f8f6 	bl	1c96c <dk_set_led_on>
			connectedC = true;	
    9780:	2301      	movs	r3, #1
    9782:	4a28      	ldr	r2, [pc, #160]	; (9824 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1e0>)
			subscriptionDone = true;		
    9784:	7033      	strb	r3, [r6, #0]
			connectedC = true;	
    9786:	7013      	strb	r3, [r2, #0]
		break;
    9788:	e7d4      	b.n	9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf0>
		else if (nbrAddresses == 3) 
    978a:	2b03      	cmp	r3, #3
    978c:	d1d2      	bne.n	9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf0>
			connectedCode[0] = 17;
    978e:	2311      	movs	r3, #17
    9790:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9794:	4b1f      	ldr	r3, [pc, #124]	; (9814 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1d0>)
    9796:	2201      	movs	r2, #1
    9798:	6818      	ldr	r0, [r3, #0]
    979a:	a901      	add	r1, sp, #4
    979c:	f000 fb76 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");		
    97a0:	481f      	ldr	r0, [pc, #124]	; (9820 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1dc>)
    97a2:	f010 f9b2 	bl	19b0a <printk>
			initScan();
    97a6:	f7ff fecb 	bl	9540 <_ZN13deviceManager8initScanEv>
    97aa:	e7c3      	b.n	9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf0>
			connectedCode[0] = 18;
    97ac:	2312      	movs	r3, #18
    97ae:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    97b2:	4b18      	ldr	r3, [pc, #96]	; (9814 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1d0>)
    97b4:	2201      	movs	r2, #1
    97b6:	6818      	ldr	r0, [r3, #0]
    97b8:	a901      	add	r1, sp, #4
    97ba:	f000 fb67 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
			printk("Third discovery completed\n");
    97be:	481a      	ldr	r0, [pc, #104]	; (9828 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1e4>)
    97c0:	e7d9      	b.n	9776 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x132>
    97c2:	bf00      	nop
    97c4:	2000bf28 	.word	0x2000bf28
    97c8:	0001e7e6 	.word	0x0001e7e6
    97cc:	0001e7f9 	.word	0x0001e7f9
    97d0:	0001e350 	.word	0x0001e350
    97d4:	0001e80c 	.word	0x0001e80c
    97d8:	0001e834 	.word	0x0001e834
    97dc:	0001e85f 	.word	0x0001e85f
    97e0:	0001e354 	.word	0x0001e354
    97e4:	0001e872 	.word	0x0001e872
    97e8:	0001e89f 	.word	0x0001e89f
    97ec:	20008158 	.word	0x20008158
    97f0:	0001e358 	.word	0x0001e358
    97f4:	0001e8b2 	.word	0x0001e8b2
    97f8:	0001e8c5 	.word	0x0001e8c5
    97fc:	0001e8e3 	.word	0x0001e8e3
    9800:	0001e8f6 	.word	0x0001e8f6
    9804:	2000bf29 	.word	0x2000bf29
    9808:	0001e909 	.word	0x0001e909
    980c:	0001e91c 	.word	0x0001e91c
    9810:	2000bf26 	.word	0x2000bf26
    9814:	2000a468 	.word	0x2000a468
    9818:	0001e930 	.word	0x0001e930
    981c:	0001e945 	.word	0x0001e945
    9820:	0001e960 	.word	0x0001e960
    9824:	2000bf21 	.word	0x2000bf21
    9828:	0001e97c 	.word	0x0001e97c

0000982c <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    982c:	b510      	push	{r4, lr}
    982e:	4604      	mov	r4, r0
	printk("Init Central\n");
    9830:	481c      	ldr	r0, [pc, #112]	; (98a4 <_ZN13deviceManager11initCentralEv+0x78>)
    9832:	f010 f96a 	bl	19b0a <printk>
	if (getDevice() == 1 || getDevice() == 3)
    9836:	f7ff fde5 	bl	9404 <_ZN13deviceManager9getDeviceEv>
    983a:	2801      	cmp	r0, #1
    983c:	d00a      	beq.n	9854 <_ZN13deviceManager11initCentralEv+0x28>
    983e:	2803      	cmp	r0, #3
    9840:	d12f      	bne.n	98a2 <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    9842:	4620      	mov	r0, r4
    9844:	f006 ff02 	bl	1064c <bt_conn_cb_register>
		initScan();
    9848:	f7ff fe7a 	bl	9540 <_ZN13deviceManager8initScanEv>
}
    984c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9850:	f7ff be64 	b.w	951c <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    9854:	2000      	movs	r0, #0
    9856:	f006 f89b 	bl	f990 <bt_enable>
			if (err) {
    985a:	4601      	mov	r1, r0
    985c:	b120      	cbz	r0, 9868 <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    985e:	4812      	ldr	r0, [pc, #72]	; (98a8 <_ZN13deviceManager11initCentralEv+0x7c>)
}
    9860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9864:	f010 b951 	b.w	19b0a <printk>
			printk("Bluetooth ready\n");
    9868:	4810      	ldr	r0, [pc, #64]	; (98ac <_ZN13deviceManager11initCentralEv+0x80>)
    986a:	f010 f94e 	bl	19b0a <printk>
			err = dk_leds_init();
    986e:	f00c f961 	bl	15b34 <dk_leds_init>
			if (err) {
    9872:	4601      	mov	r1, r0
    9874:	b108      	cbz	r0, 987a <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    9876:	480e      	ldr	r0, [pc, #56]	; (98b0 <_ZN13deviceManager11initCentralEv+0x84>)
    9878:	e7f2      	b.n	9860 <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    987a:	f7ff fdd7 	bl	942c <_ZN13deviceManager10initButtonEv>
			if (err) {
    987e:	4601      	mov	r1, r0
    9880:	b108      	cbz	r0, 9886 <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    9882:	480c      	ldr	r0, [pc, #48]	; (98b4 <_ZN13deviceManager11initCentralEv+0x88>)
    9884:	e7ec      	b.n	9860 <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    9886:	f104 0014 	add.w	r0, r4, #20
    988a:	f003 f8af 	bl	c9ec <bt_lbs_init>
			if (err) {
    988e:	4601      	mov	r1, r0
    9890:	b108      	cbz	r0, 9896 <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    9892:	4809      	ldr	r0, [pc, #36]	; (98b8 <_ZN13deviceManager11initCentralEv+0x8c>)
    9894:	e7e4      	b.n	9860 <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    9896:	f010 fc2d 	bl	1a0f4 <settings_load>
				printk("Settings loaded\n");
    989a:	4808      	ldr	r0, [pc, #32]	; (98bc <_ZN13deviceManager11initCentralEv+0x90>)
    989c:	f010 f935 	bl	19b0a <printk>
    98a0:	e7cf      	b.n	9842 <_ZN13deviceManager11initCentralEv+0x16>
}
    98a2:	bd10      	pop	{r4, pc}
    98a4:	0001e997 	.word	0x0001e997
    98a8:	0001e726 	.word	0x0001e726
    98ac:	0001e9a5 	.word	0x0001e9a5
    98b0:	0001e6ee 	.word	0x0001e6ee
    98b4:	0001e709 	.word	0x0001e709
    98b8:	0001e75d 	.word	0x0001e75d
    98bc:	0001e9b6 	.word	0x0001e9b6

000098c0 <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    98c0:	b410      	push	{r4}
    isPeripheral = p;
    98c2:	4c09      	ldr	r4, [pc, #36]	; (98e8 <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    98c4:	4603      	mov	r3, r0
    isPeripheral = p;
    98c6:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    98c8:	4c08      	ldr	r4, [pc, #32]	; (98ec <_ZN13deviceManager9setDeviceEbb+0x2c>)
    98ca:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    98cc:	b139      	cbz	r1, 98de <_ZN13deviceManager9setDeviceEbb+0x1e>
    98ce:	b11a      	cbz	r2, 98d8 <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    98d0:	4618      	mov	r0, r3
}
    98d2:	bc10      	pop	{r4}
		initPeripheral();
    98d4:	f7ff bde0 	b.w	9498 <_ZN13deviceManager14initPeripheralEv>
}
    98d8:	bc10      	pop	{r4}
		initCentral();
    98da:	f7ff bfa7 	b.w	982c <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    98de:	2a00      	cmp	r2, #0
    98e0:	d1f6      	bne.n	98d0 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    98e2:	bc10      	pop	{r4}
    98e4:	4770      	bx	lr
    98e6:	bf00      	nop
    98e8:	2000bf25 	.word	0x2000bf25
    98ec:	2000bf2a 	.word	0x2000bf2a

000098f0 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    98f0:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    98f2:	4803      	ldr	r0, [pc, #12]	; (9900 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    98f4:	f010 f909 	bl	19b0a <printk>
}
    98f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    98fc:	f7ff be0e 	b.w	951c <_ZN13deviceManager9startScanEv>
    9900:	0001e9c7 	.word	0x0001e9c7

00009904 <_ZN13deviceManager11discoverCSCEv>:
{
    9904:	b510      	push	{r4, lr}
	printk("Error in line 800\n");
    9906:	480b      	ldr	r0, [pc, #44]	; (9934 <_ZN13deviceManager11discoverCSCEv+0x30>)
    9908:	f010 f8ff 	bl	19b0a <printk>
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    990c:	4b0a      	ldr	r3, [pc, #40]	; (9938 <_ZN13deviceManager11discoverCSCEv+0x34>)
    990e:	4c0b      	ldr	r4, [pc, #44]	; (993c <_ZN13deviceManager11discoverCSCEv+0x38>)
    9910:	7818      	ldrb	r0, [r3, #0]
    9912:	490b      	ldr	r1, [pc, #44]	; (9940 <_ZN13deviceManager11discoverCSCEv+0x3c>)
    9914:	3801      	subs	r0, #1
    9916:	2300      	movs	r3, #0
    9918:	4a0a      	ldr	r2, [pc, #40]	; (9944 <_ZN13deviceManager11discoverCSCEv+0x40>)
    991a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    991e:	f002 fc73 	bl	c208 <bt_gatt_dm_start>
	if (err) 
    9922:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9926:	d004      	beq.n	9932 <_ZN13deviceManager11discoverCSCEv+0x2e>
}
    9928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    992c:	4806      	ldr	r0, [pc, #24]	; (9948 <_ZN13deviceManager11discoverCSCEv+0x44>)
    992e:	f010 b8ec 	b.w	19b0a <printk>
}
    9932:	bd10      	pop	{r4, pc}
    9934:	0001e9da 	.word	0x0001e9da
    9938:	2000bf29 	.word	0x2000bf29
    993c:	2000a46c 	.word	0x2000a46c
    9940:	0001e348 	.word	0x0001e348
    9944:	20008140 	.word	0x20008140
    9948:	0001e9ed 	.word	0x0001e9ed

0000994c <_ZN13deviceManager10discoverHREv>:
{
    994c:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_DIS, &discovery_cb_HR, NULL);
    994e:	4b0a      	ldr	r3, [pc, #40]	; (9978 <_ZN13deviceManager10discoverHREv+0x2c>)
    9950:	4c0a      	ldr	r4, [pc, #40]	; (997c <_ZN13deviceManager10discoverHREv+0x30>)
    9952:	7818      	ldrb	r0, [r3, #0]
    9954:	490a      	ldr	r1, [pc, #40]	; (9980 <_ZN13deviceManager10discoverHREv+0x34>)
    9956:	3801      	subs	r0, #1
    9958:	2300      	movs	r3, #0
    995a:	4a0a      	ldr	r2, [pc, #40]	; (9984 <_ZN13deviceManager10discoverHREv+0x38>)
    995c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9960:	f002 fc52 	bl	c208 <bt_gatt_dm_start>
	if (err) 
    9964:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9968:	d004      	beq.n	9974 <_ZN13deviceManager10discoverHREv+0x28>
}
    996a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    996e:	4806      	ldr	r0, [pc, #24]	; (9988 <_ZN13deviceManager10discoverHREv+0x3c>)
    9970:	f010 b8cb 	b.w	19b0a <printk>
}
    9974:	bd10      	pop	{r4, pc}
    9976:	bf00      	nop
    9978:	2000bf29 	.word	0x2000bf29
    997c:	2000a46c 	.word	0x2000a46c
    9980:	0001e34c 	.word	0x0001e34c
    9984:	2000814c 	.word	0x2000814c
    9988:	0001e9ed 	.word	0x0001e9ed

0000998c <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    998c:	b570      	push	{r4, r5, r6, lr}
    998e:	b090      	sub	sp, #64	; 0x40
    9990:	460c      	mov	r4, r1
	int error = bt_conn_get_info(conn,&info);
    9992:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9994:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    9996:	f007 f959 	bl	10c4c <bt_conn_get_info>
	if (error)
    999a:	b120      	cbz	r0, 99a6 <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    999c:	4835      	ldr	r0, [pc, #212]	; (9a74 <_ZN13deviceManager9connectedEP7bt_connh+0xe8>)
    999e:	f010 f8b4 	bl	19b0a <printk>
}
    99a2:	b010      	add	sp, #64	; 0x40
    99a4:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    99a6:	f89d 6005 	ldrb.w	r6, [sp, #5]
    99aa:	2e00      	cmp	r6, #0
    99ac:	d13f      	bne.n	9a2e <_ZN13deviceManager9connectedEP7bt_connh+0xa2>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    99ae:	4628      	mov	r0, r5
    99b0:	f011 fd9f 	bl	1b4f2 <bt_conn_get_dst>
    99b4:	221e      	movs	r2, #30
    99b6:	a908      	add	r1, sp, #32
    99b8:	f7ff fcb0 	bl	931c <bt_addr_le_to_str.isra.0>
		if (err) {
    99bc:	b13c      	cbz	r4, 99ce <_ZN13deviceManager9connectedEP7bt_connh+0x42>
			printk("Failed to connect to %s (%u)\n", addr, err);
    99be:	4622      	mov	r2, r4
    99c0:	482d      	ldr	r0, [pc, #180]	; (9a78 <_ZN13deviceManager9connectedEP7bt_connh+0xec>)
    99c2:	a908      	add	r1, sp, #32
    99c4:	f010 f8a1 	bl	19b0a <printk>
			startScan();
    99c8:	f7ff fda8 	bl	951c <_ZN13deviceManager9startScanEv>
			return;
    99cc:	e7e9      	b.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected: %s\n", addr);
    99ce:	a908      	add	r1, sp, #32
    99d0:	482a      	ldr	r0, [pc, #168]	; (9a7c <_ZN13deviceManager9connectedEP7bt_connh+0xf0>)
    99d2:	f010 f89a 	bl	19b0a <printk>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);
    99d6:	4c2a      	ldr	r4, [pc, #168]	; (9a80 <_ZN13deviceManager9connectedEP7bt_connh+0xf4>)
		printk("Error in line 620\n");
    99d8:	482a      	ldr	r0, [pc, #168]	; (9a84 <_ZN13deviceManager9connectedEP7bt_connh+0xf8>)
    99da:	f010 f896 	bl	19b0a <printk>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);
    99de:	4628      	mov	r0, r5
    99e0:	7826      	ldrb	r6, [r4, #0]
    99e2:	f011 fd4d 	bl	1b480 <bt_conn_ref>
    99e6:	4b28      	ldr	r3, [pc, #160]	; (9a88 <_ZN13deviceManager9connectedEP7bt_connh+0xfc>)
    99e8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
		printk("Error in line 622\n");
    99ec:	4827      	ldr	r0, [pc, #156]	; (9a8c <_ZN13deviceManager9connectedEP7bt_connh+0x100>)
    99ee:	f010 f88c 	bl	19b0a <printk>
		bt_conn_unref(conn);
    99f2:	4628      	mov	r0, r5
    99f4:	f006 ff98 	bl	10928 <bt_conn_unref>
		printk("Error in line 624\n");
    99f8:	4825      	ldr	r0, [pc, #148]	; (9a90 <_ZN13deviceManager9connectedEP7bt_connh+0x104>)
    99fa:	f010 f886 	bl	19b0a <printk>
		switch (sensorInfos)
    99fe:	4a25      	ldr	r2, [pc, #148]	; (9a94 <_ZN13deviceManager9connectedEP7bt_connh+0x108>)
		nbrConnectionsCentral++;
    9a00:	7823      	ldrb	r3, [r4, #0]
    9a02:	7812      	ldrb	r2, [r2, #0]
    9a04:	3301      	adds	r3, #1
    9a06:	b2db      	uxtb	r3, r3
    9a08:	3a01      	subs	r2, #1
    9a0a:	7023      	strb	r3, [r4, #0]
		switch (sensorInfos)
    9a0c:	2a04      	cmp	r2, #4
    9a0e:	d8c8      	bhi.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9a10:	e8df f002 	tbb	[pc, r2]
    9a14:	08030505 	.word	0x08030505
    9a18:	0a          	.byte	0x0a
    9a19:	00          	.byte	0x00
			if (nbrConnectionsCentral <= 2)
    9a1a:	2b02      	cmp	r3, #2
    9a1c:	d804      	bhi.n	9a28 <_ZN13deviceManager9connectedEP7bt_connh+0x9c>
				discoverCSC();
    9a1e:	f7ff ff71 	bl	9904 <_ZN13deviceManager11discoverCSCEv>
    9a22:	e7be      	b.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			if (nbrConnectionsCentral == 1)
    9a24:	2b01      	cmp	r3, #1
    9a26:	d0fa      	beq.n	9a1e <_ZN13deviceManager9connectedEP7bt_connh+0x92>
			discoverHR();
    9a28:	f7ff ff90 	bl	994c <_ZN13deviceManager10discoverHREv>
			break;
    9a2c:	e7b9      	b.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9a2e:	2e01      	cmp	r6, #1
    9a30:	d1b7      	bne.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    9a32:	b124      	cbz	r4, 9a3e <_ZN13deviceManager9connectedEP7bt_connh+0xb2>
			printk("Connection failed (err %u)\n", err);
    9a34:	4621      	mov	r1, r4
    9a36:	4818      	ldr	r0, [pc, #96]	; (9a98 <_ZN13deviceManager9connectedEP7bt_connh+0x10c>)
    9a38:	f010 f867 	bl	19b0a <printk>
			return;
    9a3c:	e7b1      	b.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected with application\n");
    9a3e:	4817      	ldr	r0, [pc, #92]	; (9a9c <_ZN13deviceManager9connectedEP7bt_connh+0x110>)
    9a40:	f010 f863 	bl	19b0a <printk>
		connectedP = true;
    9a44:	4b16      	ldr	r3, [pc, #88]	; (9aa0 <_ZN13deviceManager9connectedEP7bt_connh+0x114>)
		peripheralConn = bt_conn_ref(conn);
    9a46:	4628      	mov	r0, r5
		connectedP = true;
    9a48:	701e      	strb	r6, [r3, #0]
		peripheralConn = bt_conn_ref(conn);
    9a4a:	f011 fd19 	bl	1b480 <bt_conn_ref>
    9a4e:	4b15      	ldr	r3, [pc, #84]	; (9aa4 <_ZN13deviceManager9connectedEP7bt_connh+0x118>)
    9a50:	6018      	str	r0, [r3, #0]
		bt_conn_unref(conn);
    9a52:	4628      	mov	r0, r5
    9a54:	f006 ff68 	bl	10928 <bt_conn_unref>
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9a58:	4620      	mov	r0, r4
    9a5a:	f012 ff87 	bl	1c96c <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9a5e:	f7ff fcd1 	bl	9404 <_ZN13deviceManager9getDeviceEv>
    9a62:	2803      	cmp	r0, #3
    9a64:	d19d      	bne.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9a66:	4b06      	ldr	r3, [pc, #24]	; (9a80 <_ZN13deviceManager9connectedEP7bt_connh+0xf4>)
    9a68:	781b      	ldrb	r3, [r3, #0]
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d199      	bne.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    9a6e:	f7ff fd67 	bl	9540 <_ZN13deviceManager8initScanEv>
    9a72:	e796      	b.n	99a2 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9a74:	0001ea18 	.word	0x0001ea18
    9a78:	0001ea3e 	.word	0x0001ea3e
    9a7c:	0001ea5c 	.word	0x0001ea5c
    9a80:	2000bf29 	.word	0x2000bf29
    9a84:	0001ea6b 	.word	0x0001ea6b
    9a88:	2000a46c 	.word	0x2000a46c
    9a8c:	0001ea7e 	.word	0x0001ea7e
    9a90:	0001ea91 	.word	0x0001ea91
    9a94:	2000bf24 	.word	0x2000bf24
    9a98:	0001eaa4 	.word	0x0001eaa4
    9a9c:	0001eac0 	.word	0x0001eac0
    9aa0:	2000bf22 	.word	0x2000bf22
    9aa4:	2000a468 	.word	0x2000a468

00009aa8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    9aa8:	b570      	push	{r4, r5, r6, lr}
    9aaa:	b08e      	sub	sp, #56	; 0x38
    9aac:	4605      	mov	r5, r0
	nbrAddresses = getNbrOfAddresses();
    9aae:	f000 fa1d 	bl	9eec <_Z17getNbrOfAddressesv>
    9ab2:	4b41      	ldr	r3, [pc, #260]	; (9bb8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x110>)
    9ab4:	4604      	mov	r4, r0
    9ab6:	4e41      	ldr	r6, [pc, #260]	; (9bbc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x114>)
    9ab8:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    9aba:	2800      	cmp	r0, #0
    9abc:	d045      	beq.n	9b4a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa2>
		ready = true;
    9abe:	2101      	movs	r1, #1
		switch (nbrAddresses)
    9ac0:	2802      	cmp	r0, #2
		ready = true;
    9ac2:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    9ac4:	d031      	beq.n	9b2a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x82>
    9ac6:	2803      	cmp	r0, #3
    9ac8:	d035      	beq.n	9b36 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8e>
    9aca:	4288      	cmp	r0, r1
    9acc:	d103      	bne.n	9ad6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
			getAddress(sensor1,1);
    9ace:	4601      	mov	r1, r0
    9ad0:	483b      	ldr	r0, [pc, #236]	; (9bc0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
			getAddress(sensor2,2);
    9ad2:	f000 fa11 	bl	9ef8 <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9ad6:	682b      	ldr	r3, [r5, #0]
    9ad8:	221e      	movs	r2, #30
    9ada:	6818      	ldr	r0, [r3, #0]
    9adc:	a906      	add	r1, sp, #24
    9ade:	f7ff fc1d 	bl	931c <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    9ae2:	682b      	ldr	r3, [r5, #0]
    9ae4:	2212      	movs	r2, #18
    9ae6:	6818      	ldr	r0, [r3, #0]
    9ae8:	a901      	add	r1, sp, #4
    9aea:	f7ff fc17 	bl	931c <bt_addr_le_to_str.isra.0>
	if (ready)
    9aee:	7833      	ldrb	r3, [r6, #0]
    9af0:	2b00      	cmp	r3, #0
    9af2:	d03d      	beq.n	9b70 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
		bt_scan_stop();
    9af4:	f010 fcbc 	bl	1a470 <bt_scan_stop>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9af8:	4931      	ldr	r1, [pc, #196]	; (9bc0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9afa:	a801      	add	r0, sp, #4
    9afc:	f00f ff56 	bl	199ac <_ZN13deviceManager14checkAddressesEPcS0_>
    9b00:	b338      	cbz	r0, 9b52 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
    9b02:	4c30      	ldr	r4, [pc, #192]	; (9bc4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    9b04:	7823      	ldrb	r3, [r4, #0]
    9b06:	b323      	cbz	r3, 9b52 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
			printk("Correct sensor found\n");
    9b08:	482f      	ldr	r0, [pc, #188]	; (9bc8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9b0a:	f00f fffe 	bl	19b0a <printk>
			once_sensor1 = false;
    9b0e:	2300      	movs	r3, #0
    9b10:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9b12:	4b2e      	ldr	r3, [pc, #184]	; (9bcc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9b14:	6828      	ldr	r0, [r5, #0]
    9b16:	781a      	ldrb	r2, [r3, #0]
    9b18:	4b2d      	ldr	r3, [pc, #180]	; (9bd0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9b1a:	492e      	ldr	r1, [pc, #184]	; (9bd4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9b1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9b20:	686a      	ldr	r2, [r5, #4]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9b22:	6800      	ldr	r0, [r0, #0]
    9b24:	f007 f8be 	bl	10ca4 <bt_conn_le_create>
}
    9b28:	e022      	b.n	9b70 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
			getAddress(sensor1,1);
    9b2a:	4825      	ldr	r0, [pc, #148]	; (9bc0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9b2c:	f000 f9e4 	bl	9ef8 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9b30:	4621      	mov	r1, r4
    9b32:	4829      	ldr	r0, [pc, #164]	; (9bd8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9b34:	e7cd      	b.n	9ad2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
			getAddress(sensor1,1);
    9b36:	4822      	ldr	r0, [pc, #136]	; (9bc0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9b38:	f000 f9de 	bl	9ef8 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9b3c:	2102      	movs	r1, #2
    9b3e:	4826      	ldr	r0, [pc, #152]	; (9bd8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9b40:	f000 f9da 	bl	9ef8 <_Z10getAddressPch>
			getAddress(sensor3,3);
    9b44:	4621      	mov	r1, r4
    9b46:	4825      	ldr	r0, [pc, #148]	; (9bdc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9b48:	e7c3      	b.n	9ad2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
		initScan();
    9b4a:	f7ff fcf9 	bl	9540 <_ZN13deviceManager8initScanEv>
		ready = false;
    9b4e:	7034      	strb	r4, [r6, #0]
    9b50:	e7c1      	b.n	9ad6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2)
    9b52:	4921      	ldr	r1, [pc, #132]	; (9bd8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9b54:	a801      	add	r0, sp, #4
    9b56:	f00f ff29 	bl	199ac <_ZN13deviceManager14checkAddressesEPcS0_>
    9b5a:	b110      	cbz	r0, 9b62 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xba>
    9b5c:	4c20      	ldr	r4, [pc, #128]	; (9be0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9b5e:	7823      	ldrb	r3, [r4, #0]
    9b60:	b943      	cbnz	r3, 9b74 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xcc>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9b62:	491e      	ldr	r1, [pc, #120]	; (9bdc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9b64:	a801      	add	r0, sp, #4
    9b66:	f00f ff21 	bl	199ac <_ZN13deviceManager14checkAddressesEPcS0_>
    9b6a:	b988      	cbnz	r0, 9b90 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe8>
			startScan();
    9b6c:	f7ff fcd6 	bl	951c <_ZN13deviceManager9startScanEv>
}
    9b70:	b00e      	add	sp, #56	; 0x38
    9b72:	bd70      	pop	{r4, r5, r6, pc}
			printk("Correct sensor found\n");
    9b74:	4814      	ldr	r0, [pc, #80]	; (9bc8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9b76:	f00f ffc8 	bl	19b0a <printk>
			once_sensor2 = false;
    9b7a:	2300      	movs	r3, #0
    9b7c:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9b7e:	4b13      	ldr	r3, [pc, #76]	; (9bcc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9b80:	6828      	ldr	r0, [r5, #0]
    9b82:	781a      	ldrb	r2, [r3, #0]
    9b84:	4b12      	ldr	r3, [pc, #72]	; (9bd0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9b86:	4917      	ldr	r1, [pc, #92]	; (9be4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9b88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9b8c:	686a      	ldr	r2, [r5, #4]
    9b8e:	e7c8      	b.n	9b22 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9b90:	4c15      	ldr	r4, [pc, #84]	; (9be8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9b92:	7823      	ldrb	r3, [r4, #0]
    9b94:	2b00      	cmp	r3, #0
    9b96:	d0e9      	beq.n	9b6c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
			printk("Correct sensor found\n");
    9b98:	480b      	ldr	r0, [pc, #44]	; (9bc8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9b9a:	f00f ffb6 	bl	19b0a <printk>
			once_sensor3 = false;
    9b9e:	2300      	movs	r3, #0
    9ba0:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    9ba2:	f010 fc65 	bl	1a470 <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9ba6:	4b09      	ldr	r3, [pc, #36]	; (9bcc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9ba8:	6828      	ldr	r0, [r5, #0]
    9baa:	781a      	ldrb	r2, [r3, #0]
    9bac:	4b08      	ldr	r3, [pc, #32]	; (9bd0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9bae:	490f      	ldr	r1, [pc, #60]	; (9bec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9bb0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9bb4:	686a      	ldr	r2, [r5, #4]
    9bb6:	e7b4      	b.n	9b22 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
    9bb8:	2000bf26 	.word	0x2000bf26
    9bbc:	2000bf2b 	.word	0x2000bf2b
    9bc0:	2000beee 	.word	0x2000beee
    9bc4:	20008571 	.word	0x20008571
    9bc8:	0001eadc 	.word	0x0001eadc
    9bcc:	2000bf29 	.word	0x2000bf29
    9bd0:	2000a46c 	.word	0x2000a46c
    9bd4:	0001da1c 	.word	0x0001da1c
    9bd8:	2000beff 	.word	0x2000beff
    9bdc:	2000bf10 	.word	0x2000bf10
    9be0:	20008572 	.word	0x20008572
    9be4:	0001da2c 	.word	0x0001da2c
    9be8:	20008573 	.word	0x20008573
    9bec:	0001da3c 	.word	0x0001da3c

00009bf0 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bf4:	b096      	sub	sp, #88	; 0x58
    9bf6:	460e      	mov	r6, r1
	int error = bt_conn_get_info(conn,&info);
    9bf8:	a907      	add	r1, sp, #28
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9bfa:	4607      	mov	r7, r0
	int error = bt_conn_get_info(conn,&info);
    9bfc:	f007 f826 	bl	10c4c <bt_conn_get_info>
	if (error)
    9c00:	4605      	mov	r5, r0
    9c02:	b128      	cbz	r0, 9c10 <_ZN13deviceManager12disconnectedEP7bt_connh+0x20>
		printk("Cannot get info of connection object\n");
    9c04:	484e      	ldr	r0, [pc, #312]	; (9d40 <_ZN13deviceManager12disconnectedEP7bt_connh+0x150>)
    9c06:	f00f ff80 	bl	19b0a <printk>
}
    9c0a:	b016      	add	sp, #88	; 0x58
    9c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9c10:	f89d 401d 	ldrb.w	r4, [sp, #29]
    9c14:	2c01      	cmp	r4, #1
    9c16:	d10b      	bne.n	9c30 <_ZN13deviceManager12disconnectedEP7bt_connh+0x40>
		printk("Disconnected from Application (reason %u)\n", reason);
    9c18:	4631      	mov	r1, r6
    9c1a:	484a      	ldr	r0, [pc, #296]	; (9d44 <_ZN13deviceManager12disconnectedEP7bt_connh+0x154>)
    9c1c:	f00f ff75 	bl	19b0a <printk>
		connectedP = false;
    9c20:	4b49      	ldr	r3, [pc, #292]	; (9d48 <_ZN13deviceManager12disconnectedEP7bt_connh+0x158>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9c22:	4628      	mov	r0, r5
		connectedP = false;
    9c24:	701d      	strb	r5, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9c26:	f012 fea4 	bl	1c972 <dk_set_led_off>
		startAdvertising();
    9c2a:	f7ff fc0f 	bl	944c <_ZN13deviceManager16startAdvertisingEv>
    9c2e:	e7ec      	b.n	9c0a <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9c30:	2c00      	cmp	r4, #0
    9c32:	d1ea      	bne.n	9c0a <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9c34:	4638      	mov	r0, r7
    9c36:	f011 fc5c 	bl	1b4f2 <bt_conn_get_dst>
    9c3a:	221e      	movs	r2, #30
    9c3c:	a90e      	add	r1, sp, #56	; 0x38
    9c3e:	f7ff fb6d 	bl	931c <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9c42:	4632      	mov	r2, r6
    9c44:	4841      	ldr	r0, [pc, #260]	; (9d4c <_ZN13deviceManager12disconnectedEP7bt_connh+0x15c>)
    9c46:	a90e      	add	r1, sp, #56	; 0x38
    9c48:	f00f ff5f 	bl	19b0a <printk>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9c4c:	4f40      	ldr	r7, [pc, #256]	; (9d50 <_ZN13deviceManager12disconnectedEP7bt_connh+0x160>)
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9c4e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 9d54 <_ZN13deviceManager12disconnectedEP7bt_connh+0x164>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9c52:	783d      	ldrb	r5, [r7, #0]
    9c54:	b2e6      	uxtb	r6, r4
    9c56:	1e6b      	subs	r3, r5, #1
    9c58:	429e      	cmp	r6, r3
    9c5a:	dc18      	bgt.n	9c8e <_ZN13deviceManager12disconnectedEP7bt_connh+0x9e>
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9c5c:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
    9c60:	f011 fc47 	bl	1b4f2 <bt_conn_get_dst>
    9c64:	a902      	add	r1, sp, #8
    9c66:	2212      	movs	r2, #18
    9c68:	f7ff fb58 	bl	931c <bt_addr_le_to_str.isra.0>
			if (checkAddresses(addr,addrToFind))
    9c6c:	a902      	add	r1, sp, #8
    9c6e:	a80e      	add	r0, sp, #56	; 0x38
    9c70:	f00f fe9c 	bl	199ac <_ZN13deviceManager14checkAddressesEPcS0_>
    9c74:	b148      	cbz	r0, 9c8a <_ZN13deviceManager12disconnectedEP7bt_connh+0x9a>
				bt_conn_unref(centralConnections[i]);
    9c76:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
    9c7a:	f006 fe55 	bl	10928 <bt_conn_unref>
				centralConnections[i] = nullptr;
    9c7e:	2300      	movs	r3, #0
    9c80:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
				nbrConnectionsCentral--;
    9c84:	783b      	ldrb	r3, [r7, #0]
    9c86:	3b01      	subs	r3, #1
    9c88:	703b      	strb	r3, [r7, #0]
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9c8a:	3401      	adds	r4, #1
    9c8c:	e7e1      	b.n	9c52 <_ZN13deviceManager12disconnectedEP7bt_connh+0x62>
		if (nbrConnectionsCentral == 0)
    9c8e:	b97d      	cbnz	r5, 9cb0 <_ZN13deviceManager12disconnectedEP7bt_connh+0xc0>
			connectedC = false;
    9c90:	4b31      	ldr	r3, [pc, #196]	; (9d58 <_ZN13deviceManager12disconnectedEP7bt_connh+0x168>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c92:	2201      	movs	r2, #1
			connectedC = false;
    9c94:	701d      	strb	r5, [r3, #0]
			disconnectedCode[0] = 13;
    9c96:	230d      	movs	r3, #13
    9c98:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c9c:	4b2f      	ldr	r3, [pc, #188]	; (9d5c <_ZN13deviceManager12disconnectedEP7bt_connh+0x16c>)
    9c9e:	a901      	add	r1, sp, #4
    9ca0:	6818      	ldr	r0, [r3, #0]
    9ca2:	f000 f8f3 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9ca6:	2001      	movs	r0, #1
    9ca8:	f012 fe63 	bl	1c972 <dk_set_led_off>
			subscriptionDone = false;
    9cac:	4b2c      	ldr	r3, [pc, #176]	; (9d60 <_ZN13deviceManager12disconnectedEP7bt_connh+0x170>)
    9cae:	701d      	strb	r5, [r3, #0]
		if (checkAddresses(addr,sensor1))
    9cb0:	492c      	ldr	r1, [pc, #176]	; (9d64 <_ZN13deviceManager12disconnectedEP7bt_connh+0x174>)
    9cb2:	a80e      	add	r0, sp, #56	; 0x38
    9cb4:	f00f fe7a 	bl	199ac <_ZN13deviceManager14checkAddressesEPcS0_>
    9cb8:	b190      	cbz	r0, 9ce0 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf0>
			once_sensor1 = true;
    9cba:	2201      	movs	r2, #1
			subscriptionDone = false;
    9cbc:	2100      	movs	r1, #0
			once_sensor1 = true;
    9cbe:	4b2a      	ldr	r3, [pc, #168]	; (9d68 <_ZN13deviceManager12disconnectedEP7bt_connh+0x178>)
    9cc0:	701a      	strb	r2, [r3, #0]
			subscriptionDone = false;
    9cc2:	4b27      	ldr	r3, [pc, #156]	; (9d60 <_ZN13deviceManager12disconnectedEP7bt_connh+0x170>)
    9cc4:	7019      	strb	r1, [r3, #0]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9cc6:	4b25      	ldr	r3, [pc, #148]	; (9d5c <_ZN13deviceManager12disconnectedEP7bt_connh+0x16c>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9cc8:	a901      	add	r1, sp, #4
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9cca:	6818      	ldr	r0, [r3, #0]
			if (sensorInfos == 5)
    9ccc:	4b27      	ldr	r3, [pc, #156]	; (9d6c <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
    9cce:	781b      	ldrb	r3, [r3, #0]
    9cd0:	2b05      	cmp	r3, #5
				disconnectedCode[0] = 12;
    9cd2:	bf0c      	ite	eq
    9cd4:	230c      	moveq	r3, #12
				disconnectedCode[0] = 11;
    9cd6:	230b      	movne	r3, #11
    9cd8:	f88d 3004 	strb.w	r3, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9cdc:	f000 f8d6 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor2))
    9ce0:	4923      	ldr	r1, [pc, #140]	; (9d70 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9ce2:	a80e      	add	r0, sp, #56	; 0x38
    9ce4:	f00f fe62 	bl	199ac <_ZN13deviceManager14checkAddressesEPcS0_>
    9ce8:	b198      	cbz	r0, 9d12 <_ZN13deviceManager12disconnectedEP7bt_connh+0x122>
			once_sensor2 = true;
    9cea:	2201      	movs	r2, #1
			subscriptionDone = false;
    9cec:	2100      	movs	r1, #0
			once_sensor2 = true;
    9cee:	4b21      	ldr	r3, [pc, #132]	; (9d74 <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
    9cf0:	701a      	strb	r2, [r3, #0]
			subscriptionDone = false;
    9cf2:	4b1b      	ldr	r3, [pc, #108]	; (9d60 <_ZN13deviceManager12disconnectedEP7bt_connh+0x170>)
    9cf4:	7019      	strb	r1, [r3, #0]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9cf6:	4b19      	ldr	r3, [pc, #100]	; (9d5c <_ZN13deviceManager12disconnectedEP7bt_connh+0x16c>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9cf8:	a901      	add	r1, sp, #4
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9cfa:	6818      	ldr	r0, [r3, #0]
			if (sensorInfos == 2 || sensorInfos == 3)
    9cfc:	4b1b      	ldr	r3, [pc, #108]	; (9d6c <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
    9cfe:	781b      	ldrb	r3, [r3, #0]
    9d00:	3b02      	subs	r3, #2
    9d02:	4293      	cmp	r3, r2
				disconnectedCode[0] = 11;
    9d04:	bf94      	ite	ls
    9d06:	230b      	movls	r3, #11
				disconnectedCode[0] = 12;
    9d08:	230c      	movhi	r3, #12
    9d0a:	f88d 3004 	strb.w	r3, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d0e:	f000 f8bd 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor3))
    9d12:	4919      	ldr	r1, [pc, #100]	; (9d78 <_ZN13deviceManager12disconnectedEP7bt_connh+0x188>)
    9d14:	a80e      	add	r0, sp, #56	; 0x38
    9d16:	f00f fe49 	bl	199ac <_ZN13deviceManager14checkAddressesEPcS0_>
    9d1a:	b168      	cbz	r0, 9d38 <_ZN13deviceManager12disconnectedEP7bt_connh+0x148>
			subscriptionDone = false;
    9d1c:	2200      	movs	r2, #0
    9d1e:	4b10      	ldr	r3, [pc, #64]	; (9d60 <_ZN13deviceManager12disconnectedEP7bt_connh+0x170>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d20:	a901      	add	r1, sp, #4
			subscriptionDone = false;
    9d22:	701a      	strb	r2, [r3, #0]
			once_sensor3 = true;
    9d24:	2201      	movs	r2, #1
    9d26:	4b15      	ldr	r3, [pc, #84]	; (9d7c <_ZN13deviceManager12disconnectedEP7bt_connh+0x18c>)
    9d28:	701a      	strb	r2, [r3, #0]
			disconnectedCode[0] = 12;
    9d2a:	230c      	movs	r3, #12
    9d2c:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d30:	4b0a      	ldr	r3, [pc, #40]	; (9d5c <_ZN13deviceManager12disconnectedEP7bt_connh+0x16c>)
    9d32:	6818      	ldr	r0, [r3, #0]
    9d34:	f000 f8aa 	bl	9e8c <_Z17data_service_sendP7bt_connPKht>
		startScan();	
    9d38:	f7ff fbf0 	bl	951c <_ZN13deviceManager9startScanEv>
    9d3c:	e765      	b.n	9c0a <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
    9d3e:	bf00      	nop
    9d40:	0001ea18 	.word	0x0001ea18
    9d44:	0001eaf2 	.word	0x0001eaf2
    9d48:	2000bf22 	.word	0x2000bf22
    9d4c:	0001eb1d 	.word	0x0001eb1d
    9d50:	2000bf29 	.word	0x2000bf29
    9d54:	2000a46c 	.word	0x2000a46c
    9d58:	2000bf21 	.word	0x2000bf21
    9d5c:	2000a468 	.word	0x2000a468
    9d60:	2000bf28 	.word	0x2000bf28
    9d64:	2000beee 	.word	0x2000beee
    9d68:	20008571 	.word	0x20008571
    9d6c:	2000bf24 	.word	0x2000bf24
    9d70:	2000beff 	.word	0x2000beff
    9d74:	20008572 	.word	0x20008572
    9d78:	2000bf10 	.word	0x2000bf10
    9d7c:	20008573 	.word	0x20008573

00009d80 <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9d80:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9d82:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9d84:	7403      	strb	r3, [r0, #16]
    switch (type)
    9d86:	d004      	beq.n	9d92 <_ZN7dataCSC8saveDataEPKv+0x12>
    9d88:	2b02      	cmp	r3, #2
    9d8a:	d00d      	beq.n	9da8 <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9d8c:	480c      	ldr	r0, [pc, #48]	; (9dc0 <_ZN7dataCSC8saveDataEPKv+0x40>)
    9d8e:	f00f bebc 	b.w	19b0a <printk>
        oldSumRevSpeed = sumRevSpeed;
    9d92:	8803      	ldrh	r3, [r0, #0]
    9d94:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9d96:	8903      	ldrh	r3, [r0, #8]
    9d98:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    9d9a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9d9e:	8003      	strh	r3, [r0, #0]
    9da0:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9da4:	8103      	strh	r3, [r0, #8]
        break;
    9da6:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    9da8:	8883      	ldrh	r3, [r0, #4]
    9daa:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    9dac:	8983      	ldrh	r3, [r0, #12]
    9dae:	81c3      	strh	r3, [r0, #14]
    9db0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9db4:	8083      	strh	r3, [r0, #4]
    9db6:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9dba:	8183      	strh	r3, [r0, #12]
}
    9dbc:	4770      	bx	lr
    9dbe:	bf00      	nop
    9dc0:	0001eb5d 	.word	0x0001eb5d

00009dc4 <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9dc8:	8985      	ldrh	r5, [r0, #12]
    9dca:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9dcc:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9dce:	429d      	cmp	r5, r3
    9dd0:	d02f      	beq.n	9e32 <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9dd2:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9dd6:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9dda:	45c8      	cmp	r8, r9
    9ddc:	d029      	beq.n	9e32 <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9dde:	1aed      	subs	r5, r5, r3
    9de0:	4628      	mov	r0, r5
    9de2:	f7fe fb7f 	bl	84e4 <__aeabi_i2d>
    9de6:	2200      	movs	r2, #0
    9de8:	4b13      	ldr	r3, [pc, #76]	; (9e38 <_ZN7dataCSC7calcRPMEv+0x74>)
    9dea:	f7fe fbe5 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9dee:	2200      	movs	r2, #0
    9df0:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9df2:	4606      	mov	r6, r0
    9df4:	460f      	mov	r7, r1
        if (time < 0)
    9df6:	f7fe fe51 	bl	8a9c <__aeabi_dcmplt>
    9dfa:	b130      	cbz	r0, 9e0a <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    9dfc:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9e00:	30ff      	adds	r0, #255	; 0xff
    9e02:	f7fe fb6f 	bl	84e4 <__aeabi_i2d>
    9e06:	4606      	mov	r6, r0
    9e08:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9e0a:	203c      	movs	r0, #60	; 0x3c
    9e0c:	eba8 0809 	sub.w	r8, r8, r9
    9e10:	fb00 f008 	mul.w	r0, r0, r8
    9e14:	f7fe fb66 	bl	84e4 <__aeabi_i2d>
    9e18:	4632      	mov	r2, r6
    9e1a:	463b      	mov	r3, r7
    9e1c:	f7fe fcf6 	bl	880c <__aeabi_ddiv>
    9e20:	4602      	mov	r2, r0
    9e22:	460b      	mov	r3, r1
    9e24:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
        retVal = (uint16_t) rpm;
    9e28:	f7fe fe60 	bl	8aec <__aeabi_d2uiz>
    9e2c:	b280      	uxth	r0, r0
}
    9e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9e32:	2000      	movs	r0, #0
    9e34:	e7fb      	b.n	9e2e <_ZN7dataCSC7calcRPMEv+0x6a>
    9e36:	bf00      	nop
    9e38:	3f500000 	.word	0x3f500000

00009e3c <_Z15on_cccd_changedPK12bt_gatt_attrt>:
{
    ARG_UNUSED(attr);

    uint8_t notificationsCode[1];

    switch(value)
    9e3c:	2901      	cmp	r1, #1
    9e3e:	d004      	beq.n	9e4a <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9e40:	2902      	cmp	r1, #2
    9e42:	d005      	beq.n	9e50 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9e44:	b931      	cbnz	r1, 9e54 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9e46:	4804      	ldr	r0, [pc, #16]	; (9e58 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9e48:	e000      	b.n	9e4c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9e4a:	4804      	ldr	r0, [pc, #16]	; (9e5c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9e4c:	f00f be5d 	b.w	19b0a <printk>
            printk("Notifications ON with Indications\n");
    9e50:	4803      	ldr	r0, [pc, #12]	; (9e60 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9e52:	e7fb      	b.n	9e4c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9e54:	4803      	ldr	r0, [pc, #12]	; (9e64 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9e56:	e7f9      	b.n	9e4c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9e58:	0001eba0 	.word	0x0001eba0
    9e5c:	0001eb6b 	.word	0x0001eb6b
    9e60:	0001eb7d 	.word	0x0001eb7d
    9e64:	0001ebb3 	.word	0x0001ebb3

00009e68 <_Z17data_service_initv>:
{
    9e68:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    9e6a:	22f0      	movs	r2, #240	; 0xf0
    9e6c:	2100      	movs	r1, #0
    9e6e:	4805      	ldr	r0, [pc, #20]	; (9e84 <_Z17data_service_initv+0x1c>)
    9e70:	f011 f8b6 	bl	1afe0 <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    9e74:	22f0      	movs	r2, #240	; 0xf0
    9e76:	2100      	movs	r1, #0
    9e78:	4803      	ldr	r0, [pc, #12]	; (9e88 <_Z17data_service_initv+0x20>)
    9e7a:	f011 f8b1 	bl	1afe0 <memset>
}
    9e7e:	2000      	movs	r0, #0
    9e80:	bd08      	pop	{r3, pc}
    9e82:	bf00      	nop
    9e84:	2000bf60 	.word	0x2000bf60
    9e88:	2000c050 	.word	0x2000c050

00009e8c <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    9e8c:	2300      	movs	r3, #0
{
    9e8e:	b510      	push	{r4, lr}
    9e90:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    9e92:	9303      	str	r3, [sp, #12]
    9e94:	9305      	str	r3, [sp, #20]
    9e96:	4b0d      	ldr	r3, [pc, #52]	; (9ecc <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    9e98:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    9e9c:	9300      	str	r3, [sp, #0]
    9e9e:	4b0c      	ldr	r3, [pc, #48]	; (9ed0 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9ea0:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    9ea2:	9304      	str	r3, [sp, #16]
    };
    9ea4:	4b0b      	ldr	r3, [pc, #44]	; (9ed4 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    9ea6:	4604      	mov	r4, r0
    };
    9ea8:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9eac:	4619      	mov	r1, r3
    9eae:	f009 fd23 	bl	138f8 <bt_gatt_is_subscribed>
    9eb2:	b148      	cbz	r0, 9ec8 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    9eb4:	4669      	mov	r1, sp
    9eb6:	4620      	mov	r0, r4
    9eb8:	f009 fb3c 	bl	13534 <bt_gatt_notify_cb>
    9ebc:	b110      	cbz	r0, 9ec4 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    9ebe:	4806      	ldr	r0, [pc, #24]	; (9ed8 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    9ec0:	f00f fe23 	bl	19b0a <printk>
    }
}
    9ec4:	b006      	add	sp, #24
    9ec6:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    9ec8:	4804      	ldr	r0, [pc, #16]	; (9edc <_Z17data_service_sendP7bt_connPKht+0x50>)
    9eca:	e7f9      	b.n	9ec0 <_Z17data_service_sendP7bt_connPKht+0x34>
    9ecc:	0001ecc8 	.word	0x0001ecc8
    9ed0:	000199d3 	.word	0x000199d3
    9ed4:	0001daec 	.word	0x0001daec
    9ed8:	0001ec12 	.word	0x0001ec12
    9edc:	0001ec36 	.word	0x0001ec36

00009ee0 <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
}
    9ee0:	4b01      	ldr	r3, [pc, #4]	; (9ee8 <_Z11getDiameterv+0x8>)
    9ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
    9ee6:	4770      	bx	lr
    9ee8:	20008818 	.word	0x20008818

00009eec <_Z17getNbrOfAddressesv>:

// getter
uint8_t getNbrOfAddresses() {
    return nbrAddresses;
}
    9eec:	4b01      	ldr	r3, [pc, #4]	; (9ef4 <_Z17getNbrOfAddressesv+0x8>)
    9eee:	7818      	ldrb	r0, [r3, #0]
    9ef0:	4770      	bx	lr
    9ef2:	bf00      	nop
    9ef4:	2000c142 	.word	0x2000c142

00009ef8 <_Z10getAddressPch>:

// getter
void getAddress(char* outArray, uint8_t nbr) {
    switch (nbr)
    9ef8:	2902      	cmp	r1, #2
    9efa:	d00d      	beq.n	9f18 <_Z10getAddressPch+0x20>
    9efc:	2903      	cmp	r1, #3
    9efe:	d015      	beq.n	9f2c <_Z10getAddressPch+0x34>
    9f00:	2901      	cmp	r1, #1
    9f02:	d11c      	bne.n	9f3e <_Z10getAddressPch+0x46>
    9f04:	4a0e      	ldr	r2, [pc, #56]	; (9f40 <_Z10getAddressPch+0x48>)
    9f06:	1e43      	subs	r3, r0, #1
    9f08:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    9f0a:	f812 1b01 	ldrb.w	r1, [r2], #1
    9f0e:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9f12:	4283      	cmp	r3, r0
    9f14:	d1f9      	bne.n	9f0a <_Z10getAddressPch+0x12>
    9f16:	4770      	bx	lr
    9f18:	4a0a      	ldr	r2, [pc, #40]	; (9f44 <_Z10getAddressPch+0x4c>)
    9f1a:	1e43      	subs	r3, r0, #1
    9f1c:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    9f1e:	f812 1b01 	ldrb.w	r1, [r2], #1
    9f22:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9f26:	4283      	cmp	r3, r0
    9f28:	d1f9      	bne.n	9f1e <_Z10getAddressPch+0x26>
    9f2a:	4770      	bx	lr
    9f2c:	4a06      	ldr	r2, [pc, #24]	; (9f48 <_Z10getAddressPch+0x50>)
    9f2e:	1e43      	subs	r3, r0, #1
    9f30:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    9f32:	f812 1b01 	ldrb.w	r1, [r2], #1
    9f36:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9f3a:	4283      	cmp	r3, r0
    9f3c:	d1f9      	bne.n	9f32 <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    9f3e:	4770      	bx	lr
    9f40:	2000bf2c 	.word	0x2000bf2c
    9f44:	2000bf3d 	.word	0x2000bf3d
    9f48:	2000bf4e 	.word	0x2000bf4e

00009f4c <_Z14getSensorInfosv>:

uint8_t getSensorInfos() {
    return infoSensors;
}
    9f4c:	4b01      	ldr	r3, [pc, #4]	; (9f54 <_Z14getSensorInfosv+0x8>)
    9f4e:	7818      	ldrb	r0, [r3, #0]
    9f50:	4770      	bx	lr
    9f52:	bf00      	nop
    9f54:	2000c141 	.word	0x2000c141

00009f58 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9f58:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    9f5a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    9f5c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    9f60:	2b02      	cmp	r3, #2
{
    9f62:	4604      	mov	r4, r0
    9f64:	460e      	mov	r6, r1
	notify->result = res;
    9f66:	6081      	str	r1, [r0, #8]
	switch (method) {
    9f68:	d010      	beq.n	9f8c <sys_notify_finalize+0x34>
    9f6a:	2b03      	cmp	r3, #3
    9f6c:	d004      	beq.n	9f78 <sys_notify_finalize+0x20>
    9f6e:	2b01      	cmp	r3, #1
    9f70:	d10f      	bne.n	9f92 <sys_notify_finalize+0x3a>
    9f72:	2500      	movs	r5, #0
    9f74:	4628      	mov	r0, r5
    9f76:	e001      	b.n	9f7c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9f78:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    9f7a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9f7c:	2300      	movs	r3, #0
    9f7e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    9f80:	b110      	cbz	r0, 9f88 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    9f82:	4631      	mov	r1, r6
    9f84:	f00f fc7e 	bl	19884 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9f88:	4628      	mov	r0, r5
    9f8a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    9f8c:	2500      	movs	r5, #0
		sig = notify->method.signal;
    9f8e:	6800      	ldr	r0, [r0, #0]
		break;
    9f90:	e7f4      	b.n	9f7c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    9f92:	2245      	movs	r2, #69	; 0x45
    9f94:	4904      	ldr	r1, [pc, #16]	; (9fa8 <sys_notify_finalize+0x50>)
    9f96:	4805      	ldr	r0, [pc, #20]	; (9fac <sys_notify_finalize+0x54>)
    9f98:	f00f fdb7 	bl	19b0a <printk>
    9f9c:	2145      	movs	r1, #69	; 0x45
    9f9e:	4802      	ldr	r0, [pc, #8]	; (9fa8 <sys_notify_finalize+0x50>)
    9fa0:	f010 f859 	bl	1a056 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    9fa4:	2500      	movs	r5, #0
    9fa6:	e7e8      	b.n	9f7a <sys_notify_finalize+0x22>
    9fa8:	0001ecd9 	.word	0x0001ecd9
    9fac:	0001ecfc 	.word	0x0001ecfc

00009fb0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    9fb0:	680b      	ldr	r3, [r1, #0]
    9fb2:	3301      	adds	r3, #1
    9fb4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    9fb6:	4b01      	ldr	r3, [pc, #4]	; (9fbc <char_out+0xc>)
    9fb8:	681b      	ldr	r3, [r3, #0]
    9fba:	4718      	bx	r3
    9fbc:	200081fc 	.word	0x200081fc

00009fc0 <__printk_hook_install>:
	_char_out = fn;
    9fc0:	4b01      	ldr	r3, [pc, #4]	; (9fc8 <__printk_hook_install+0x8>)
    9fc2:	6018      	str	r0, [r3, #0]
}
    9fc4:	4770      	bx	lr
    9fc6:	bf00      	nop
    9fc8:	200081fc 	.word	0x200081fc

00009fcc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    9fcc:	b507      	push	{r0, r1, r2, lr}
    9fce:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    9fd0:	2100      	movs	r1, #0
{
    9fd2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    9fd4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    9fd6:	4803      	ldr	r0, [pc, #12]	; (9fe4 <vprintk+0x18>)
    9fd8:	a901      	add	r1, sp, #4
    9fda:	f000 fbe9 	bl	a7b0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    9fde:	b003      	add	sp, #12
    9fe0:	f85d fb04 	ldr.w	pc, [sp], #4
    9fe4:	00009fb1 	.word	0x00009fb1

00009fe8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9fe8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    9fea:	2500      	movs	r5, #0
{
    9fec:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    9fee:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    9ff2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    9ff4:	a901      	add	r1, sp, #4
    9ff6:	4805      	ldr	r0, [pc, #20]	; (a00c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    9ff8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    9ffa:	f000 fbd9 	bl	a7b0 <cbvprintf>

	if (ctx.count < ctx.max) {
    9ffe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    a002:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a004:	bfb8      	it	lt
    a006:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a008:	b005      	add	sp, #20
    a00a:	bd30      	pop	{r4, r5, pc}
    a00c:	00019ae5 	.word	0x00019ae5

0000a010 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a014:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    a018:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a01a:	f01a 0f08 	tst.w	sl, #8
{
    a01e:	4693      	mov	fp, r2
	if (processing) {
    a020:	d01c      	beq.n	a05c <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    a022:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a024:	bf0c      	ite	eq
    a026:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    a02a:	f04a 0a20 	orrne.w	sl, sl, #32
    a02e:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a032:	f104 0014 	add.w	r0, r4, #20
    a036:	f00e fd8d 	bl	18b54 <z_spin_unlock_valid>
    a03a:	b940      	cbnz	r0, a04e <process_event+0x3e>
    a03c:	4992      	ldr	r1, [pc, #584]	; (a288 <process_event+0x278>)
    a03e:	4893      	ldr	r0, [pc, #588]	; (a28c <process_event+0x27c>)
    a040:	22a7      	movs	r2, #167	; 0xa7
    a042:	f00f fd62 	bl	19b0a <printk>
    a046:	21a7      	movs	r1, #167	; 0xa7
    a048:	488f      	ldr	r0, [pc, #572]	; (a288 <process_event+0x278>)
    a04a:	f010 f804 	bl	1a056 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a04e:	f38b 8811 	msr	BASEPRI, fp
    a052:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a056:	b003      	add	sp, #12
    a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    a05c:	4f8c      	ldr	r7, [pc, #560]	; (a290 <process_event+0x280>)
    a05e:	f8df 822c 	ldr.w	r8, [pc, #556]	; a28c <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a062:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    a066:	2902      	cmp	r1, #2
    a068:	d106      	bne.n	a078 <process_event+0x68>
			evt = process_recheck(mgr);
    a06a:	4620      	mov	r0, r4
    a06c:	f00f fd67 	bl	19b3e <process_recheck>
		if (evt == EVT_NOP) {
    a070:	2800      	cmp	r0, #0
    a072:	d0de      	beq.n	a032 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    a074:	2801      	cmp	r0, #1
    a076:	d163      	bne.n	a140 <process_event+0x130>
			res = mgr->last_res;
    a078:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a07c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    a07e:	f1b9 0f00 	cmp.w	r9, #0
    a082:	da19      	bge.n	a0b8 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    a084:	2600      	movs	r6, #0
		*clients = mgr->clients;
    a086:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a088:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    a08c:	e9c4 6600 	strd	r6, r6, [r4]
    a090:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a094:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a096:	8ba3      	ldrh	r3, [r4, #28]
    a098:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a09c:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a09e:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    a0a0:	d003      	beq.n	a0aa <process_event+0x9a>
		if (do_monitors
    a0a2:	68a2      	ldr	r2, [r4, #8]
    a0a4:	2a00      	cmp	r2, #0
    a0a6:	f040 80f5 	bne.w	a294 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    a0aa:	b915      	cbnz	r5, a0b2 <process_event+0xa2>
		    || (transit != NULL)) {
    a0ac:	2e00      	cmp	r6, #0
    a0ae:	f000 812f 	beq.w	a310 <process_event+0x300>
    a0b2:	f04f 0a00 	mov.w	sl, #0
    a0b6:	e0ef      	b.n	a298 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a0b8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a0bc:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a0be:	2901      	cmp	r1, #1
    a0c0:	d820      	bhi.n	a104 <process_event+0xf4>
	list->head = NULL;
    a0c2:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0c4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    a0c8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    a0ca:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0cc:	b29b      	uxth	r3, r3
	list->tail = NULL;
    a0ce:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a0d2:	d10a      	bne.n	a0ea <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a0d4:	b13d      	cbz	r5, a0e6 <process_event+0xd6>
    a0d6:	4629      	mov	r1, r5
    a0d8:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    a0da:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    a0dc:	3201      	adds	r2, #1
    a0de:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a0e0:	2900      	cmp	r1, #0
    a0e2:	d1fa      	bne.n	a0da <process_event+0xca>
    a0e4:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0e6:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    a0ea:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a0ec:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a0ee:	f00f fd26 	bl	19b3e <process_recheck>
    a0f2:	4606      	mov	r6, r0
    a0f4:	2800      	cmp	r0, #0
    a0f6:	d0ce      	beq.n	a096 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a0f8:	8ba3      	ldrh	r3, [r4, #28]
    a0fa:	f043 0320 	orr.w	r3, r3, #32
    a0fe:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    a100:	2600      	movs	r6, #0
    a102:	e7c8      	b.n	a096 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a104:	2a04      	cmp	r2, #4
    a106:	d10d      	bne.n	a124 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a108:	f023 0307 	bic.w	r3, r3, #7
    a10c:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    a10e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a110:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a112:	f00f fd14 	bl	19b3e <process_recheck>
    a116:	4605      	mov	r5, r0
    a118:	b180      	cbz	r0, a13c <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a11a:	f042 0220 	orr.w	r2, r2, #32
    a11e:	2500      	movs	r5, #0
    a120:	83a2      	strh	r2, [r4, #28]
    a122:	e7ed      	b.n	a100 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    a124:	f240 1219 	movw	r2, #281	; 0x119
    a128:	4639      	mov	r1, r7
    a12a:	4640      	mov	r0, r8
    a12c:	f00f fced 	bl	19b0a <printk>
    a130:	f240 1119 	movw	r1, #281	; 0x119
    a134:	4638      	mov	r0, r7
    a136:	f00f ff8e 	bl	1a056 <assert_post_action>
    a13a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    a13c:	462e      	mov	r6, r5
    a13e:	e7aa      	b.n	a096 <process_event+0x86>
		} else if (evt == EVT_START) {
    a140:	2803      	cmp	r0, #3
    a142:	d131      	bne.n	a1a8 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    a144:	f1ba 0f00 	cmp.w	sl, #0
    a148:	d00a      	beq.n	a160 <process_event+0x150>
    a14a:	4639      	mov	r1, r7
    a14c:	4640      	mov	r0, r8
    a14e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a152:	f00f fcda 	bl	19b0a <printk>
    a156:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a15a:	4638      	mov	r0, r7
    a15c:	f00f ff7b 	bl	1a056 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a160:	6823      	ldr	r3, [r4, #0]
    a162:	b953      	cbnz	r3, a17a <process_event+0x16a>
    a164:	4639      	mov	r1, r7
    a166:	4640      	mov	r0, r8
    a168:	f240 1255 	movw	r2, #341	; 0x155
    a16c:	f00f fccd 	bl	19b0a <printk>
    a170:	f240 1155 	movw	r1, #341	; 0x155
    a174:	4638      	mov	r0, r7
    a176:	f00f ff6e 	bl	1a056 <assert_post_action>
			transit = mgr->transitions->start;
    a17a:	6923      	ldr	r3, [r4, #16]
    a17c:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a17e:	b956      	cbnz	r6, a196 <process_event+0x186>
    a180:	4639      	mov	r1, r7
    a182:	4640      	mov	r0, r8
    a184:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a188:	f00f fcbf 	bl	19b0a <printk>
    a18c:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a190:	4638      	mov	r0, r7
    a192:	f00f ff60 	bl	1a056 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a196:	8ba3      	ldrh	r3, [r4, #28]
    a198:	f023 0307 	bic.w	r3, r3, #7
    a19c:	f043 0306 	orr.w	r3, r3, #6
}
    a1a0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a1a2:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a1a4:	46a9      	mov	r9, r5
}
    a1a6:	e776      	b.n	a096 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a1a8:	2804      	cmp	r0, #4
    a1aa:	d12e      	bne.n	a20a <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a1ac:	f1ba 0f02 	cmp.w	sl, #2
    a1b0:	d00a      	beq.n	a1c8 <process_event+0x1b8>
    a1b2:	4639      	mov	r1, r7
    a1b4:	4640      	mov	r0, r8
    a1b6:	f240 125b 	movw	r2, #347	; 0x15b
    a1ba:	f00f fca6 	bl	19b0a <printk>
    a1be:	f240 115b 	movw	r1, #347	; 0x15b
    a1c2:	4638      	mov	r0, r7
    a1c4:	f00f ff47 	bl	1a056 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a1c8:	8be3      	ldrh	r3, [r4, #30]
    a1ca:	b153      	cbz	r3, a1e2 <process_event+0x1d2>
    a1cc:	4639      	mov	r1, r7
    a1ce:	4640      	mov	r0, r8
    a1d0:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a1d4:	f00f fc99 	bl	19b0a <printk>
    a1d8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a1dc:	4638      	mov	r0, r7
    a1de:	f00f ff3a 	bl	1a056 <assert_post_action>
			transit = mgr->transitions->stop;
    a1e2:	6923      	ldr	r3, [r4, #16]
    a1e4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a1e6:	b956      	cbnz	r6, a1fe <process_event+0x1ee>
    a1e8:	4639      	mov	r1, r7
    a1ea:	4640      	mov	r0, r8
    a1ec:	f240 125f 	movw	r2, #351	; 0x15f
    a1f0:	f00f fc8b 	bl	19b0a <printk>
    a1f4:	f240 115f 	movw	r1, #351	; 0x15f
    a1f8:	4638      	mov	r0, r7
    a1fa:	f00f ff2c 	bl	1a056 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a1fe:	8ba3      	ldrh	r3, [r4, #28]
    a200:	f023 0307 	bic.w	r3, r3, #7
    a204:	f043 0304 	orr.w	r3, r3, #4
    a208:	e7ca      	b.n	a1a0 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a20a:	2805      	cmp	r0, #5
    a20c:	d12e      	bne.n	a26c <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a20e:	f1ba 0f01 	cmp.w	sl, #1
    a212:	d00a      	beq.n	a22a <process_event+0x21a>
    a214:	4639      	mov	r1, r7
    a216:	4640      	mov	r0, r8
    a218:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a21c:	f00f fc75 	bl	19b0a <printk>
    a220:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a224:	4638      	mov	r0, r7
    a226:	f00f ff16 	bl	1a056 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a22a:	6823      	ldr	r3, [r4, #0]
    a22c:	b953      	cbnz	r3, a244 <process_event+0x234>
    a22e:	4639      	mov	r1, r7
    a230:	4640      	mov	r0, r8
    a232:	f240 1263 	movw	r2, #355	; 0x163
    a236:	f00f fc68 	bl	19b0a <printk>
    a23a:	f240 1163 	movw	r1, #355	; 0x163
    a23e:	4638      	mov	r0, r7
    a240:	f00f ff09 	bl	1a056 <assert_post_action>
			transit = mgr->transitions->reset;
    a244:	6923      	ldr	r3, [r4, #16]
    a246:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a248:	b956      	cbnz	r6, a260 <process_event+0x250>
    a24a:	4639      	mov	r1, r7
    a24c:	4640      	mov	r0, r8
    a24e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a252:	f00f fc5a 	bl	19b0a <printk>
    a256:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a25a:	4638      	mov	r0, r7
    a25c:	f00f fefb 	bl	1a056 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a260:	8ba3      	ldrh	r3, [r4, #28]
    a262:	f023 0307 	bic.w	r3, r3, #7
    a266:	f043 0305 	orr.w	r3, r3, #5
    a26a:	e799      	b.n	a1a0 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a26c:	2500      	movs	r5, #0
    a26e:	f240 1269 	movw	r2, #361	; 0x169
    a272:	4639      	mov	r1, r7
    a274:	4640      	mov	r0, r8
    a276:	f00f fc48 	bl	19b0a <printk>
    a27a:	f240 1169 	movw	r1, #361	; 0x169
    a27e:	4638      	mov	r0, r7
    a280:	f00f fee9 	bl	1a056 <assert_post_action>
		onoff_transition_fn transit = NULL;
    a284:	462e      	mov	r6, r5
    a286:	e78d      	b.n	a1a4 <process_event+0x194>
    a288:	0001ed36 	.word	0x0001ed36
    a28c:	0001ecfc 	.word	0x0001ecfc
    a290:	0001ed14 	.word	0x0001ed14
				   && !sys_slist_is_empty(&mgr->monitors);
    a294:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a298:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a29c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a29e:	f104 0314 	add.w	r3, r4, #20
    a2a2:	4618      	mov	r0, r3
    a2a4:	9301      	str	r3, [sp, #4]
    a2a6:	f00e fc55 	bl	18b54 <z_spin_unlock_valid>
    a2aa:	b940      	cbnz	r0, a2be <process_event+0x2ae>
    a2ac:	4640      	mov	r0, r8
    a2ae:	4931      	ldr	r1, [pc, #196]	; (a374 <process_event+0x364>)
    a2b0:	22a7      	movs	r2, #167	; 0xa7
    a2b2:	f00f fc2a 	bl	19b0a <printk>
    a2b6:	21a7      	movs	r1, #167	; 0xa7
    a2b8:	482e      	ldr	r0, [pc, #184]	; (a374 <process_event+0x364>)
    a2ba:	f00f fecc 	bl	1a056 <assert_post_action>
    a2be:	f38b 8811 	msr	BASEPRI, fp
    a2c2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a2c6:	f1ba 0f00 	cmp.w	sl, #0
    a2ca:	d130      	bne.n	a32e <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a2cc:	2d00      	cmp	r5, #0
    a2ce:	d140      	bne.n	a352 <process_event+0x342>
			if (transit != NULL) {
    a2d0:	b116      	cbz	r6, a2d8 <process_event+0x2c8>
				transit(mgr, transition_complete);
    a2d2:	4620      	mov	r0, r4
    a2d4:	4928      	ldr	r1, [pc, #160]	; (a378 <process_event+0x368>)
    a2d6:	47b0      	blx	r6
	__asm__ volatile(
    a2d8:	f04f 0320 	mov.w	r3, #32
    a2dc:	f3ef 8b11 	mrs	fp, BASEPRI
    a2e0:	f383 8811 	msr	BASEPRI, r3
    a2e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2e8:	9801      	ldr	r0, [sp, #4]
    a2ea:	f00e fc25 	bl	18b38 <z_spin_lock_valid>
    a2ee:	b940      	cbnz	r0, a302 <process_event+0x2f2>
    a2f0:	4640      	mov	r0, r8
    a2f2:	4920      	ldr	r1, [pc, #128]	; (a374 <process_event+0x364>)
    a2f4:	227c      	movs	r2, #124	; 0x7c
    a2f6:	f00f fc08 	bl	19b0a <printk>
    a2fa:	217c      	movs	r1, #124	; 0x7c
    a2fc:	481d      	ldr	r0, [pc, #116]	; (a374 <process_event+0x364>)
    a2fe:	f00f feaa 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
    a302:	9801      	ldr	r0, [sp, #4]
    a304:	f00e fc34 	bl	18b70 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a308:	8ba3      	ldrh	r3, [r4, #28]
    a30a:	f023 0308 	bic.w	r3, r3, #8
    a30e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a310:	8ba3      	ldrh	r3, [r4, #28]
    a312:	06da      	lsls	r2, r3, #27
    a314:	d525      	bpl.n	a362 <process_event+0x352>
			evt = EVT_COMPLETE;
    a316:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a318:	f023 0310 	bic.w	r3, r3, #16
    a31c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a31e:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    a322:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    a326:	2900      	cmp	r1, #0
    a328:	f47f ae9d 	bne.w	a066 <process_event+0x56>
out:
    a32c:	e681      	b.n	a032 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a32e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a330:	2900      	cmp	r1, #0
    a332:	d0cb      	beq.n	a2cc <process_event+0x2bc>
	return node->next;
    a334:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    a338:	464b      	mov	r3, r9
    a33a:	4620      	mov	r0, r4
    a33c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a340:	9a00      	ldr	r2, [sp, #0]
    a342:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a344:	f1ba 0f00 	cmp.w	sl, #0
    a348:	d0c0      	beq.n	a2cc <process_event+0x2bc>
    a34a:	4651      	mov	r1, sl
    a34c:	f8da a000 	ldr.w	sl, [sl]
    a350:	e7f2      	b.n	a338 <process_event+0x328>
    a352:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a354:	464b      	mov	r3, r9
    a356:	4620      	mov	r0, r4
    a358:	9a00      	ldr	r2, [sp, #0]
    a35a:	682d      	ldr	r5, [r5, #0]
    a35c:	f00f fc0b 	bl	19b76 <notify_one>
    a360:	e7b4      	b.n	a2cc <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a362:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a366:	bf1e      	ittt	ne
    a368:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a36c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a36e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a370:	e7d5      	b.n	a31e <process_event+0x30e>
    a372:	bf00      	nop
    a374:	0001ed36 	.word	0x0001ed36
    a378:	0000a37d 	.word	0x0000a37d

0000a37c <transition_complete>:
{
    a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a37e:	4604      	mov	r4, r0
    a380:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a382:	f100 0614 	add.w	r6, r0, #20
    a386:	f04f 0320 	mov.w	r3, #32
    a38a:	f3ef 8711 	mrs	r7, BASEPRI
    a38e:	f383 8811 	msr	BASEPRI, r3
    a392:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a396:	4630      	mov	r0, r6
    a398:	f00e fbce 	bl	18b38 <z_spin_lock_valid>
    a39c:	b940      	cbnz	r0, a3b0 <transition_complete+0x34>
    a39e:	490a      	ldr	r1, [pc, #40]	; (a3c8 <transition_complete+0x4c>)
    a3a0:	480a      	ldr	r0, [pc, #40]	; (a3cc <transition_complete+0x50>)
    a3a2:	227c      	movs	r2, #124	; 0x7c
    a3a4:	f00f fbb1 	bl	19b0a <printk>
    a3a8:	217c      	movs	r1, #124	; 0x7c
    a3aa:	4807      	ldr	r0, [pc, #28]	; (a3c8 <transition_complete+0x4c>)
    a3ac:	f00f fe53 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
    a3b0:	4630      	mov	r0, r6
    a3b2:	f00e fbdd 	bl	18b70 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a3b6:	463a      	mov	r2, r7
    a3b8:	4620      	mov	r0, r4
	mgr->last_res = res;
    a3ba:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a3bc:	2101      	movs	r1, #1
}
    a3be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a3c2:	f7ff be25 	b.w	a010 <process_event>
    a3c6:	bf00      	nop
    a3c8:	0001ed36 	.word	0x0001ed36
    a3cc:	0001ecfc 	.word	0x0001ecfc

0000a3d0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a3d4:	4604      	mov	r4, r0
    a3d6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a3d8:	f00f fbe3 	bl	19ba2 <validate_args>

	if (rv < 0) {
    a3dc:	1e05      	subs	r5, r0, #0
    a3de:	db54      	blt.n	a48a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a3e0:	f104 0914 	add.w	r9, r4, #20
    a3e4:	f04f 0320 	mov.w	r3, #32
    a3e8:	f3ef 8a11 	mrs	sl, BASEPRI
    a3ec:	f383 8811 	msr	BASEPRI, r3
    a3f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a3f4:	4648      	mov	r0, r9
    a3f6:	f00e fb9f 	bl	18b38 <z_spin_lock_valid>
    a3fa:	b940      	cbnz	r0, a40e <onoff_request+0x3e>
    a3fc:	4933      	ldr	r1, [pc, #204]	; (a4cc <onoff_request+0xfc>)
    a3fe:	4834      	ldr	r0, [pc, #208]	; (a4d0 <onoff_request+0x100>)
    a400:	227c      	movs	r2, #124	; 0x7c
    a402:	f00f fb82 	bl	19b0a <printk>
    a406:	217c      	movs	r1, #124	; 0x7c
    a408:	4830      	ldr	r0, [pc, #192]	; (a4cc <onoff_request+0xfc>)
    a40a:	f00f fe24 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
    a40e:	4648      	mov	r0, r9
    a410:	f00e fbae 	bl	18b70 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a414:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a418:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a41a:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a41c:	428b      	cmp	r3, r1
    a41e:	f002 0607 	and.w	r6, r2, #7
    a422:	d04a      	beq.n	a4ba <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a424:	2e02      	cmp	r6, #2
    a426:	d11f      	bne.n	a468 <onoff_request+0x98>
	rv = state;
    a428:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a42a:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a42e:	3301      	adds	r3, #1
    a430:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a432:	4648      	mov	r0, r9
    a434:	f00e fb8e 	bl	18b54 <z_spin_unlock_valid>
    a438:	b940      	cbnz	r0, a44c <onoff_request+0x7c>
    a43a:	4924      	ldr	r1, [pc, #144]	; (a4cc <onoff_request+0xfc>)
    a43c:	4824      	ldr	r0, [pc, #144]	; (a4d0 <onoff_request+0x100>)
    a43e:	22a7      	movs	r2, #167	; 0xa7
    a440:	f00f fb63 	bl	19b0a <printk>
    a444:	21a7      	movs	r1, #167	; 0xa7
    a446:	4821      	ldr	r0, [pc, #132]	; (a4cc <onoff_request+0xfc>)
    a448:	f00f fe05 	bl	1a056 <assert_post_action>
	__asm__ volatile(
    a44c:	f38a 8811 	msr	BASEPRI, sl
    a450:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a454:	f1b8 0f00 	cmp.w	r8, #0
    a458:	d017      	beq.n	a48a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a45a:	2300      	movs	r3, #0
    a45c:	4632      	mov	r2, r6
    a45e:	4639      	mov	r1, r7
    a460:	4620      	mov	r0, r4
    a462:	f00f fb88 	bl	19b76 <notify_one>
    a466:	e010      	b.n	a48a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a468:	0793      	lsls	r3, r2, #30
    a46a:	d001      	beq.n	a470 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a46c:	2e06      	cmp	r6, #6
    a46e:	d10f      	bne.n	a490 <onoff_request+0xc0>
	parent->next = child;
    a470:	2300      	movs	r3, #0
    a472:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a474:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a476:	b9eb      	cbnz	r3, a4b4 <onoff_request+0xe4>
	list->head = node;
    a478:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a47c:	4635      	mov	r5, r6
    a47e:	b9f6      	cbnz	r6, a4be <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a480:	4652      	mov	r2, sl
    a482:	2102      	movs	r1, #2
    a484:	4620      	mov	r0, r4
    a486:	f7ff fdc3 	bl	a010 <process_event>
		}
	}

	return rv;
}
    a48a:	4628      	mov	r0, r5
    a48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a490:	2e05      	cmp	r6, #5
    a492:	d017      	beq.n	a4c4 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a494:	2e01      	cmp	r6, #1
    a496:	d00a      	beq.n	a4ae <onoff_request+0xde>
    a498:	490e      	ldr	r1, [pc, #56]	; (a4d4 <onoff_request+0x104>)
    a49a:	480d      	ldr	r0, [pc, #52]	; (a4d0 <onoff_request+0x100>)
    a49c:	f240 12c5 	movw	r2, #453	; 0x1c5
    a4a0:	f00f fb33 	bl	19b0a <printk>
    a4a4:	f240 11c5 	movw	r1, #453	; 0x1c5
    a4a8:	480a      	ldr	r0, [pc, #40]	; (a4d4 <onoff_request+0x104>)
    a4aa:	f00f fdd4 	bl	1a056 <assert_post_action>
		rv = -EIO;
    a4ae:	f06f 0504 	mvn.w	r5, #4
    a4b2:	e004      	b.n	a4be <onoff_request+0xee>
	parent->next = child;
    a4b4:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a4b6:	6067      	str	r7, [r4, #4]
}
    a4b8:	e7e0      	b.n	a47c <onoff_request+0xac>
		rv = -EAGAIN;
    a4ba:	f06f 050a 	mvn.w	r5, #10
    a4be:	f04f 0800 	mov.w	r8, #0
    a4c2:	e7b6      	b.n	a432 <onoff_request+0x62>
		rv = -ENOTSUP;
    a4c4:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a4c8:	e7f9      	b.n	a4be <onoff_request+0xee>
    a4ca:	bf00      	nop
    a4cc:	0001ed36 	.word	0x0001ed36
    a4d0:	0001ecfc 	.word	0x0001ecfc
    a4d4:	0001ed14 	.word	0x0001ed14

0000a4d8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4dc:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a4de:	4e14      	ldr	r6, [pc, #80]	; (a530 <z_work_q_main+0x58>)
    a4e0:	f8df 8050 	ldr.w	r8, [pc, #80]	; a534 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a4e4:	f04f 32ff 	mov.w	r2, #4294967295
    a4e8:	f04f 33ff 	mov.w	r3, #4294967295
    a4ec:	4628      	mov	r0, r5
    a4ee:	f00d f8cb 	bl	17688 <z_impl_k_queue_get>
		if (work == NULL) {
    a4f2:	4604      	mov	r4, r0
    a4f4:	2800      	cmp	r0, #0
    a4f6:	d0f5      	beq.n	a4e4 <z_work_q_main+0xc>
		handler = work->handler;
    a4f8:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a4fa:	b947      	cbnz	r7, a50e <z_work_q_main+0x36>
    a4fc:	4631      	mov	r1, r6
    a4fe:	4640      	mov	r0, r8
    a500:	221c      	movs	r2, #28
    a502:	f00f fb02 	bl	19b0a <printk>
    a506:	211c      	movs	r1, #28
    a508:	4630      	mov	r0, r6
    a50a:	f00f fda4 	bl	1a056 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a50e:	f104 0308 	add.w	r3, r4, #8
    a512:	e8d3 2fef 	ldaex	r2, [r3]
    a516:	f022 0101 	bic.w	r1, r2, #1
    a51a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    a51e:	2800      	cmp	r0, #0
    a520:	d1f7      	bne.n	a512 <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a522:	07d3      	lsls	r3, r2, #31
    a524:	d501      	bpl.n	a52a <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a526:	4620      	mov	r0, r4
    a528:	47b8      	blx	r7
	z_impl_k_yield();
    a52a:	f00d ffd7 	bl	184dc <z_impl_k_yield>
    a52e:	e7d9      	b.n	a4e4 <z_work_q_main+0xc>
    a530:	0001ed5c 	.word	0x0001ed5c
    a534:	0001ecfc 	.word	0x0001ecfc

0000a538 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    a538:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    a53a:	2900      	cmp	r1, #0
    a53c:	d039      	beq.n	a5b2 <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    a53e:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a540:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a542:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a544:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    a546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a54a:	bf2c      	ite	cs
    a54c:	2408      	movcs	r4, #8
    a54e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a550:	1b0c      	subs	r4, r1, r4
    a552:	1b64      	subs	r4, r4, r5
    a554:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a556:	4621      	mov	r1, r4
    a558:	f00f fb4f 	bl	19bfa <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    a55c:	07c3      	lsls	r3, r0, #31
    a55e:	d408      	bmi.n	a572 <sys_heap_free+0x3a>
    a560:	4914      	ldr	r1, [pc, #80]	; (a5b4 <sys_heap_free+0x7c>)
    a562:	4815      	ldr	r0, [pc, #84]	; (a5b8 <sys_heap_free+0x80>)
    a564:	229a      	movs	r2, #154	; 0x9a
    a566:	f00f fad0 	bl	19b0a <printk>
    a56a:	219a      	movs	r1, #154	; 0x9a
    a56c:	4811      	ldr	r0, [pc, #68]	; (a5b4 <sys_heap_free+0x7c>)
    a56e:	f00f fd72 	bl	1a056 <assert_post_action>
	return c + chunk_size(h, c);
    a572:	4621      	mov	r1, r4
    a574:	4628      	mov	r0, r5
    a576:	f00f fb56 	bl	19c26 <chunk_size>
    a57a:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    a57c:	4631      	mov	r1, r6
    a57e:	2200      	movs	r2, #0
    a580:	4628      	mov	r0, r5
    a582:	f00f fb3a 	bl	19bfa <chunk_field>
    a586:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    a588:	42b4      	cmp	r4, r6
    a58a:	d008      	beq.n	a59e <sys_heap_free+0x66>
    a58c:	4909      	ldr	r1, [pc, #36]	; (a5b4 <sys_heap_free+0x7c>)
    a58e:	480a      	ldr	r0, [pc, #40]	; (a5b8 <sys_heap_free+0x80>)
    a590:	22a2      	movs	r2, #162	; 0xa2
    a592:	f00f faba 	bl	19b0a <printk>
    a596:	21a2      	movs	r1, #162	; 0xa2
    a598:	4806      	ldr	r0, [pc, #24]	; (a5b4 <sys_heap_free+0x7c>)
    a59a:	f00f fd5c 	bl	1a056 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    a59e:	4621      	mov	r1, r4
    a5a0:	4628      	mov	r0, r5
    a5a2:	2200      	movs	r2, #0
    a5a4:	f00f fb45 	bl	19c32 <set_chunk_used>
	free_chunk(h, c);
    a5a8:	4621      	mov	r1, r4
}
    a5aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    a5ae:	f00f bc82 	b.w	19eb6 <free_chunk>
}
    a5b2:	bd70      	pop	{r4, r5, r6, pc}
    a5b4:	0001ed7f 	.word	0x0001ed7f
    a5b8:	0001ecfc 	.word	0x0001ecfc

0000a5bc <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a5c0:	f101 39ff 	add.w	r9, r1, #4294967295
    a5c4:	ea19 0f01 	tst.w	r9, r1
{
    a5c8:	4680      	mov	r8, r0
    a5ca:	460f      	mov	r7, r1
    a5cc:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    a5ce:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a5d0:	d008      	beq.n	a5e4 <sys_heap_aligned_alloc+0x28>
    a5d2:	4931      	ldr	r1, [pc, #196]	; (a698 <sys_heap_aligned_alloc+0xdc>)
    a5d4:	4831      	ldr	r0, [pc, #196]	; (a69c <sys_heap_aligned_alloc+0xe0>)
    a5d6:	22fc      	movs	r2, #252	; 0xfc
    a5d8:	f00f fa97 	bl	19b0a <printk>
    a5dc:	21fc      	movs	r1, #252	; 0xfc
    a5de:	482e      	ldr	r0, [pc, #184]	; (a698 <sys_heap_aligned_alloc+0xdc>)
    a5e0:	f00f fd39 	bl	1a056 <assert_post_action>
	return big_heap_chunks(h->len);
    a5e4:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    a5e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a5ea:	bf2c      	ite	cs
    a5ec:	2308      	movcs	r3, #8
    a5ee:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    a5f0:	429f      	cmp	r7, r3
    a5f2:	d805      	bhi.n	a600 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    a5f4:	4621      	mov	r1, r4
    a5f6:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    a5f8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    a5fc:	f00f bc9d 	b.w	19f3a <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a600:	b91c      	cbnz	r4, a60a <sys_heap_aligned_alloc+0x4e>
		return NULL;
    a602:	2600      	movs	r6, #0
}
    a604:	4630      	mov	r0, r6
    a606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    a60a:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    a60e:	d9f8      	bls.n	a602 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    a610:	1939      	adds	r1, r7, r4
    a612:	1ac9      	subs	r1, r1, r3
    a614:	f00f fb29 	bl	19c6a <bytes_to_chunksz.isra.0>
    a618:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a61a:	4628      	mov	r0, r5
    a61c:	f00f fb80 	bl	19d20 <alloc_chunk>
	if (c0 == 0) {
    a620:	4680      	mov	r8, r0
    a622:	2800      	cmp	r0, #0
    a624:	d0ed      	beq.n	a602 <sys_heap_aligned_alloc+0x46>
    a626:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a628:	427f      	negs	r7, r7
    a62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a62e:	bf2c      	ite	cs
    a630:	2308      	movcs	r3, #8
    a632:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a634:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    a638:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a63a:	444e      	add	r6, r9
    a63c:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a63e:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a640:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a642:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a644:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a646:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a64a:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    a64c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a650:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a654:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a658:	d208      	bcs.n	a66c <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    a65a:	4601      	mov	r1, r0
    a65c:	463a      	mov	r2, r7
    a65e:	4628      	mov	r0, r5
    a660:	f00f fba1 	bl	19da6 <split_chunks>
		free_list_add(h, c0);
    a664:	4641      	mov	r1, r8
    a666:	4628      	mov	r0, r5
    a668:	f00f fbe2 	bl	19e30 <free_list_add>
	return c + chunk_size(h, c);
    a66c:	4639      	mov	r1, r7
    a66e:	4628      	mov	r0, r5
    a670:	f00f fad9 	bl	19c26 <chunk_size>
    a674:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a676:	4284      	cmp	r4, r0
    a678:	d208      	bcs.n	a68c <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    a67a:	4639      	mov	r1, r7
    a67c:	4628      	mov	r0, r5
    a67e:	4622      	mov	r2, r4
    a680:	f00f fb91 	bl	19da6 <split_chunks>
		free_list_add(h, c_end);
    a684:	4621      	mov	r1, r4
    a686:	4628      	mov	r0, r5
    a688:	f00f fbd2 	bl	19e30 <free_list_add>
	set_chunk_used(h, c, true);
    a68c:	2201      	movs	r2, #1
    a68e:	4639      	mov	r1, r7
    a690:	4628      	mov	r0, r5
    a692:	f00f face 	bl	19c32 <set_chunk_used>
	return mem;
    a696:	e7b5      	b.n	a604 <sys_heap_aligned_alloc+0x48>
    a698:	0001ed7f 	.word	0x0001ed7f
    a69c:	0001ecfc 	.word	0x0001ecfc

0000a6a0 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    a6a0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6a6:	4607      	mov	r7, r0
    a6a8:	460c      	mov	r4, r1
    a6aa:	4616      	mov	r6, r2
    a6ac:	d20e      	bcs.n	a6cc <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    a6ae:	2a04      	cmp	r2, #4
    a6b0:	d80a      	bhi.n	a6c8 <sys_heap_init+0x28>
    a6b2:	493d      	ldr	r1, [pc, #244]	; (a7a8 <sys_heap_init+0x108>)
    a6b4:	483d      	ldr	r0, [pc, #244]	; (a7ac <sys_heap_init+0x10c>)
    a6b6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    a6ba:	f00f fa26 	bl	19b0a <printk>
    a6be:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    a6c2:	4839      	ldr	r0, [pc, #228]	; (a7a8 <sys_heap_init+0x108>)
    a6c4:	f00f fcc7 	bl	1a056 <assert_post_action>
    a6c8:	2204      	movs	r2, #4
    a6ca:	e000      	b.n	a6ce <sys_heap_init+0x2e>
    a6cc:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    a6ce:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a6d0:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a6d2:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a6d4:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a6d8:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a6dc:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a6de:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a6e0:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a6e4:	d80a      	bhi.n	a6fc <sys_heap_init+0x5c>
    a6e6:	4930      	ldr	r1, [pc, #192]	; (a7a8 <sys_heap_init+0x108>)
    a6e8:	4830      	ldr	r0, [pc, #192]	; (a7ac <sys_heap_init+0x10c>)
    a6ea:	f240 1275 	movw	r2, #373	; 0x175
    a6ee:	f00f fa0c 	bl	19b0a <printk>
    a6f2:	f240 1175 	movw	r1, #373	; 0x175
    a6f6:	482c      	ldr	r0, [pc, #176]	; (a7a8 <sys_heap_init+0x108>)
    a6f8:	f00f fcad 	bl	1a056 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    a6fc:	2300      	movs	r3, #0
    a6fe:	2200      	movs	r2, #0
	heap->heap = h;
    a700:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    a702:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    a706:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a708:	4631      	mov	r1, r6
    a70a:	4630      	mov	r0, r6
	h->len = buf_sz;
    a70c:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    a70e:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a710:	f00f fab4 	bl	19c7c <bucket_idx.isra.0>
    a714:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a716:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a718:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a71a:	4630      	mov	r0, r6
    a71c:	f00f faa5 	bl	19c6a <bytes_to_chunksz.isra.0>
    a720:	341b      	adds	r4, #27
    a722:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    a724:	4420      	add	r0, r4
    a726:	42b0      	cmp	r0, r6
    a728:	d30a      	bcc.n	a740 <sys_heap_init+0xa0>
    a72a:	491f      	ldr	r1, [pc, #124]	; (a7a8 <sys_heap_init+0x108>)
    a72c:	481f      	ldr	r0, [pc, #124]	; (a7ac <sys_heap_init+0x10c>)
    a72e:	f240 1281 	movw	r2, #385	; 0x181
    a732:	f00f f9ea 	bl	19b0a <printk>
    a736:	f240 1181 	movw	r1, #385	; 0x181
    a73a:	481b      	ldr	r0, [pc, #108]	; (a7a8 <sys_heap_init+0x108>)
    a73c:	f00f fc8b 	bl	1a056 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    a740:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    a742:	4619      	mov	r1, r3
    a744:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    a748:	42bb      	cmp	r3, r7
    a74a:	db28      	blt.n	a79e <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a74c:	4622      	mov	r2, r4
    a74e:	4628      	mov	r0, r5
    a750:	2100      	movs	r1, #0
    a752:	f00f fa86 	bl	19c62 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a756:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    a758:	4628      	mov	r0, r5
    a75a:	2201      	movs	r2, #1
    a75c:	2100      	movs	r1, #0
    a75e:	f00f fa68 	bl	19c32 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a762:	463a      	mov	r2, r7
    a764:	4621      	mov	r1, r4
    a766:	f00f fa7c 	bl	19c62 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a76a:	4623      	mov	r3, r4
    a76c:	2200      	movs	r2, #0
    a76e:	4621      	mov	r1, r4
    a770:	4628      	mov	r0, r5
    a772:	f00f fa4d 	bl	19c10 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    a776:	4631      	mov	r1, r6
    a778:	4628      	mov	r0, r5
    a77a:	f00f fa72 	bl	19c62 <set_chunk_size>
    a77e:	463b      	mov	r3, r7
    a780:	4631      	mov	r1, r6
    a782:	4628      	mov	r0, r5
    a784:	2200      	movs	r2, #0
    a786:	f00f fa43 	bl	19c10 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    a78a:	4631      	mov	r1, r6
    a78c:	4628      	mov	r0, r5
    a78e:	2201      	movs	r2, #1
    a790:	f00f fa4f 	bl	19c32 <set_chunk_used>

	free_list_add(h, chunk0_size);
    a794:	4621      	mov	r1, r4
}
    a796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a79a:	f00f bb49 	b.w	19e30 <free_list_add>
		h->buckets[i].next = 0;
    a79e:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a7a2:	3301      	adds	r3, #1
    a7a4:	e7d0      	b.n	a748 <sys_heap_init+0xa8>
    a7a6:	bf00      	nop
    a7a8:	0001ed7f 	.word	0x0001ed7f
    a7ac:	0001ecfc 	.word	0x0001ecfc

0000a7b0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7b4:	468b      	mov	fp, r1
    a7b6:	4692      	mov	sl, r2
    a7b8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a7ba:	2500      	movs	r5, #0
{
    a7bc:	b091      	sub	sp, #68	; 0x44
    a7be:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a7c0:	f89a 0000 	ldrb.w	r0, [sl]
    a7c4:	b908      	cbnz	r0, a7ca <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a7c6:	4628      	mov	r0, r5
    a7c8:	e35f      	b.n	ae8a <cbvprintf+0x6da>
		if (*fp != '%') {
    a7ca:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a7cc:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    a7d0:	d007      	beq.n	a7e2 <cbvprintf+0x32>
			OUTC('%');
    a7d2:	4659      	mov	r1, fp
    a7d4:	9b02      	ldr	r3, [sp, #8]
    a7d6:	4798      	blx	r3
    a7d8:	2800      	cmp	r0, #0
    a7da:	f2c0 8356 	blt.w	ae8a <cbvprintf+0x6da>
    a7de:	3501      	adds	r5, #1
			break;
    a7e0:	e212      	b.n	ac08 <cbvprintf+0x458>
		} state = {
    a7e2:	2218      	movs	r2, #24
    a7e4:	2100      	movs	r1, #0
    a7e6:	a80a      	add	r0, sp, #40	; 0x28
    a7e8:	f010 fbfa 	bl	1afe0 <memset>
	if (*sp == '%') {
    a7ec:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a7f0:	2b25      	cmp	r3, #37	; 0x25
    a7f2:	d078      	beq.n	a8e6 <cbvprintf+0x136>
    a7f4:	2200      	movs	r2, #0
    a7f6:	4694      	mov	ip, r2
    a7f8:	4696      	mov	lr, r2
    a7fa:	4616      	mov	r6, r2
    a7fc:	4610      	mov	r0, r2
    a7fe:	4639      	mov	r1, r7
		switch (*sp) {
    a800:	f817 3b01 	ldrb.w	r3, [r7], #1
    a804:	2b2b      	cmp	r3, #43	; 0x2b
    a806:	f000 809d 	beq.w	a944 <cbvprintf+0x194>
    a80a:	f200 8094 	bhi.w	a936 <cbvprintf+0x186>
    a80e:	2b20      	cmp	r3, #32
    a810:	f000 809a 	beq.w	a948 <cbvprintf+0x198>
    a814:	2b23      	cmp	r3, #35	; 0x23
    a816:	f000 809a 	beq.w	a94e <cbvprintf+0x19e>
    a81a:	b128      	cbz	r0, a828 <cbvprintf+0x78>
    a81c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a820:	f040 0004 	orr.w	r0, r0, #4
    a824:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a828:	b12e      	cbz	r6, a836 <cbvprintf+0x86>
    a82a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a82e:	f040 0008 	orr.w	r0, r0, #8
    a832:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a836:	f1be 0f00 	cmp.w	lr, #0
    a83a:	d005      	beq.n	a848 <cbvprintf+0x98>
    a83c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a840:	f040 0010 	orr.w	r0, r0, #16
    a844:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a848:	f1bc 0f00 	cmp.w	ip, #0
    a84c:	d005      	beq.n	a85a <cbvprintf+0xaa>
    a84e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a852:	f040 0020 	orr.w	r0, r0, #32
    a856:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a85a:	b12a      	cbz	r2, a868 <cbvprintf+0xb8>
    a85c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    a864:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    a868:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a86c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    a870:	2844      	cmp	r0, #68	; 0x44
    a872:	d103      	bne.n	a87c <cbvprintf+0xcc>
		conv->flag_zero = false;
    a874:	f36f 1286 	bfc	r2, #6, #1
    a878:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    a87c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a880:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    a882:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a886:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a88a:	d17b      	bne.n	a984 <cbvprintf+0x1d4>
		conv->width_star = true;
    a88c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    a890:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a892:	f042 0201 	orr.w	r2, r2, #1
    a896:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    a89a:	781a      	ldrb	r2, [r3, #0]
    a89c:	2a2e      	cmp	r2, #46	; 0x2e
    a89e:	bf0c      	ite	eq
    a8a0:	2101      	moveq	r1, #1
    a8a2:	2100      	movne	r1, #0
    a8a4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a8a8:	f361 0241 	bfi	r2, r1, #1, #1
    a8ac:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    a8b0:	d174      	bne.n	a99c <cbvprintf+0x1ec>
	if (*sp == '*') {
    a8b2:	785a      	ldrb	r2, [r3, #1]
    a8b4:	2a2a      	cmp	r2, #42	; 0x2a
    a8b6:	d06a      	beq.n	a98e <cbvprintf+0x1de>
	size_t val = 0;
    a8b8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    a8ba:	260a      	movs	r6, #10
	++sp;
    a8bc:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a8be:	4618      	mov	r0, r3
    a8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    a8c4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a8c8:	2f09      	cmp	r7, #9
    a8ca:	f240 808e 	bls.w	a9ea <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    a8ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    a8d2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    a8d4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    a8d8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    a8dc:	f361 0241 	bfi	r2, r1, #1, #1
    a8e0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    a8e4:	e05a      	b.n	a99c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    a8e6:	f10a 0702 	add.w	r7, sl, #2
    a8ea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    a8ee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a8f2:	07d9      	lsls	r1, r3, #31
    a8f4:	f140 8149 	bpl.w	ab8a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    a8f8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    a8fc:	f1b9 0f00 	cmp.w	r9, #0
    a900:	da07      	bge.n	a912 <cbvprintf+0x162>
				conv->flag_dash = true;
    a902:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    a906:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    a90a:	f042 0204 	orr.w	r2, r2, #4
    a90e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    a912:	075a      	lsls	r2, r3, #29
    a914:	f140 8142 	bpl.w	ab9c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    a918:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    a91c:	f1b8 0f00 	cmp.w	r8, #0
    a920:	f280 8141 	bge.w	aba6 <cbvprintf+0x3f6>
				conv->prec_present = false;
    a924:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a928:	f36f 0341 	bfc	r3, #1, #1
    a92c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    a930:	f04f 38ff 	mov.w	r8, #4294967295
    a934:	e137      	b.n	aba6 <cbvprintf+0x3f6>
		switch (*sp) {
    a936:	2b2d      	cmp	r3, #45	; 0x2d
    a938:	d00c      	beq.n	a954 <cbvprintf+0x1a4>
    a93a:	2b30      	cmp	r3, #48	; 0x30
    a93c:	f47f af6d 	bne.w	a81a <cbvprintf+0x6a>
			conv->flag_zero = true;
    a940:	2201      	movs	r2, #1
	} while (loop);
    a942:	e75c      	b.n	a7fe <cbvprintf+0x4e>
			conv->flag_plus = true;
    a944:	2601      	movs	r6, #1
    a946:	e75a      	b.n	a7fe <cbvprintf+0x4e>
			conv->flag_space = true;
    a948:	f04f 0e01 	mov.w	lr, #1
    a94c:	e757      	b.n	a7fe <cbvprintf+0x4e>
			conv->flag_hash = true;
    a94e:	f04f 0c01 	mov.w	ip, #1
    a952:	e754      	b.n	a7fe <cbvprintf+0x4e>
		switch (*sp) {
    a954:	2001      	movs	r0, #1
    a956:	e752      	b.n	a7fe <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    a958:	4633      	mov	r3, r6
    a95a:	fb0c 0202 	mla	r2, ip, r2, r0
    a95e:	3a30      	subs	r2, #48	; 0x30
    a960:	461e      	mov	r6, r3
    a962:	f816 0b01 	ldrb.w	r0, [r6], #1
    a966:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a96a:	2f09      	cmp	r7, #9
    a96c:	d9f4      	bls.n	a958 <cbvprintf+0x1a8>
	if (sp != wp) {
    a96e:	4299      	cmp	r1, r3
    a970:	d093      	beq.n	a89a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a972:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    a976:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    a978:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a97a:	f362 0141 	bfi	r1, r2, #1, #1
    a97e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    a982:	e78a      	b.n	a89a <cbvprintf+0xea>
    a984:	460b      	mov	r3, r1
	size_t val = 0;
    a986:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a988:	f04f 0c0a 	mov.w	ip, #10
    a98c:	e7e8      	b.n	a960 <cbvprintf+0x1b0>
		conv->prec_star = true;
    a98e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    a992:	3302      	adds	r3, #2
		conv->prec_star = true;
    a994:	f042 0204 	orr.w	r2, r2, #4
    a998:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    a99c:	461f      	mov	r7, r3
    a99e:	f817 2b01 	ldrb.w	r2, [r7], #1
    a9a2:	2a6c      	cmp	r2, #108	; 0x6c
    a9a4:	d041      	beq.n	aa2a <cbvprintf+0x27a>
    a9a6:	d825      	bhi.n	a9f4 <cbvprintf+0x244>
    a9a8:	2a68      	cmp	r2, #104	; 0x68
    a9aa:	d02b      	beq.n	aa04 <cbvprintf+0x254>
    a9ac:	2a6a      	cmp	r2, #106	; 0x6a
    a9ae:	d046      	beq.n	aa3e <cbvprintf+0x28e>
    a9b0:	2a4c      	cmp	r2, #76	; 0x4c
    a9b2:	d04c      	beq.n	aa4e <cbvprintf+0x29e>
    a9b4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    a9b6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    a9ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    a9be:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    a9c0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    a9c4:	f200 80d9 	bhi.w	ab7a <cbvprintf+0x3ca>
    a9c8:	2a57      	cmp	r2, #87	; 0x57
    a9ca:	d84d      	bhi.n	aa68 <cbvprintf+0x2b8>
    a9cc:	2a41      	cmp	r2, #65	; 0x41
    a9ce:	d003      	beq.n	a9d8 <cbvprintf+0x228>
    a9d0:	3a45      	subs	r2, #69	; 0x45
    a9d2:	2a02      	cmp	r2, #2
    a9d4:	f200 80d1 	bhi.w	ab7a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    a9d8:	2204      	movs	r2, #4
    a9da:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    a9de:	f362 0302 	bfi	r3, r2, #0, #3
    a9e2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    a9e6:	2301      	movs	r3, #1
			break;
    a9e8:	e09e      	b.n	ab28 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    a9ea:	fb06 2101 	mla	r1, r6, r1, r2
    a9ee:	4603      	mov	r3, r0
    a9f0:	3930      	subs	r1, #48	; 0x30
    a9f2:	e764      	b.n	a8be <cbvprintf+0x10e>
	switch (*sp) {
    a9f4:	2a74      	cmp	r2, #116	; 0x74
    a9f6:	d026      	beq.n	aa46 <cbvprintf+0x296>
    a9f8:	2a7a      	cmp	r2, #122	; 0x7a
    a9fa:	d1db      	bne.n	a9b4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    a9fc:	2206      	movs	r2, #6
    a9fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aa02:	e00d      	b.n	aa20 <cbvprintf+0x270>
		if (*++sp == 'h') {
    aa04:	785a      	ldrb	r2, [r3, #1]
    aa06:	2a68      	cmp	r2, #104	; 0x68
    aa08:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    aa0c:	d106      	bne.n	aa1c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    aa0e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    aa10:	f361 02c6 	bfi	r2, r1, #3, #4
    aa14:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    aa18:	1c9f      	adds	r7, r3, #2
    aa1a:	e7cc      	b.n	a9b6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    aa1c:	4613      	mov	r3, r2
    aa1e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    aa20:	f362 03c6 	bfi	r3, r2, #3, #4
    aa24:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    aa28:	e7c5      	b.n	a9b6 <cbvprintf+0x206>
		if (*++sp == 'l') {
    aa2a:	785a      	ldrb	r2, [r3, #1]
    aa2c:	2a6c      	cmp	r2, #108	; 0x6c
    aa2e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    aa32:	d101      	bne.n	aa38 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    aa34:	2104      	movs	r1, #4
    aa36:	e7eb      	b.n	aa10 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    aa38:	4613      	mov	r3, r2
    aa3a:	2203      	movs	r2, #3
    aa3c:	e7f0      	b.n	aa20 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    aa3e:	2205      	movs	r2, #5
    aa40:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aa44:	e7ec      	b.n	aa20 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    aa46:	2207      	movs	r2, #7
    aa48:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aa4c:	e7e8      	b.n	aa20 <cbvprintf+0x270>
		conv->unsupported = true;
    aa4e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    aa52:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    aa56:	f023 0302 	bic.w	r3, r3, #2
    aa5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    aa5e:	f043 0302 	orr.w	r3, r3, #2
    aa62:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    aa66:	e7a6      	b.n	a9b6 <cbvprintf+0x206>
    aa68:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    aa6c:	2920      	cmp	r1, #32
    aa6e:	f200 8084 	bhi.w	ab7a <cbvprintf+0x3ca>
    aa72:	a001      	add	r0, pc, #4	; (adr r0, aa78 <cbvprintf+0x2c8>)
    aa74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    aa78:	0000ab3d 	.word	0x0000ab3d
    aa7c:	0000ab7b 	.word	0x0000ab7b
    aa80:	0000ab7b 	.word	0x0000ab7b
    aa84:	0000ab7b 	.word	0x0000ab7b
    aa88:	0000ab7b 	.word	0x0000ab7b
    aa8c:	0000ab7b 	.word	0x0000ab7b
    aa90:	0000ab7b 	.word	0x0000ab7b
    aa94:	0000ab7b 	.word	0x0000ab7b
    aa98:	0000ab7b 	.word	0x0000ab7b
    aa9c:	0000a9d9 	.word	0x0000a9d9
    aaa0:	0000ab7b 	.word	0x0000ab7b
    aaa4:	0000ab3d 	.word	0x0000ab3d
    aaa8:	0000aafd 	.word	0x0000aafd
    aaac:	0000a9d9 	.word	0x0000a9d9
    aab0:	0000a9d9 	.word	0x0000a9d9
    aab4:	0000a9d9 	.word	0x0000a9d9
    aab8:	0000ab7b 	.word	0x0000ab7b
    aabc:	0000aafd 	.word	0x0000aafd
    aac0:	0000ab7b 	.word	0x0000ab7b
    aac4:	0000ab7b 	.word	0x0000ab7b
    aac8:	0000ab7b 	.word	0x0000ab7b
    aacc:	0000ab7b 	.word	0x0000ab7b
    aad0:	0000ab45 	.word	0x0000ab45
    aad4:	0000ab3d 	.word	0x0000ab3d
    aad8:	0000ab61 	.word	0x0000ab61
    aadc:	0000ab7b 	.word	0x0000ab7b
    aae0:	0000ab7b 	.word	0x0000ab7b
    aae4:	0000ab61 	.word	0x0000ab61
    aae8:	0000ab7b 	.word	0x0000ab7b
    aaec:	0000ab3d 	.word	0x0000ab3d
    aaf0:	0000ab7b 	.word	0x0000ab7b
    aaf4:	0000ab7b 	.word	0x0000ab7b
    aaf8:	0000ab3d 	.word	0x0000ab3d
		conv->specifier_cat = SPECIFIER_SINT;
    aafc:	2001      	movs	r0, #1
    aafe:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab02:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ab06:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab0a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ab0c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    ab10:	bf02      	ittt	eq
    ab12:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    ab16:	f041 0101 	orreq.w	r1, r1, #1
    ab1a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    ab1e:	2a63      	cmp	r2, #99	; 0x63
    ab20:	d131      	bne.n	ab86 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ab22:	3b00      	subs	r3, #0
    ab24:	bf18      	it	ne
    ab26:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    ab28:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    ab2c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ab30:	430b      	orrs	r3, r1
    ab32:	f363 0241 	bfi	r2, r3, #1, #1
    ab36:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    ab3a:	e6d8      	b.n	a8ee <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    ab3c:	2002      	movs	r0, #2
    ab3e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    ab42:	e7de      	b.n	ab02 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    ab44:	2103      	movs	r1, #3
    ab46:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab4a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    ab4e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    ab52:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab56:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    ab58:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab5c:	4143      	adcs	r3, r0
    ab5e:	e7e3      	b.n	ab28 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    ab60:	2103      	movs	r1, #3
    ab62:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    ab66:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ab6a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    ab6e:	bf14      	ite	ne
    ab70:	2301      	movne	r3, #1
    ab72:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    ab74:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    ab78:	e7d6      	b.n	ab28 <cbvprintf+0x378>
		conv->invalid = true;
    ab7a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    ab7e:	f043 0301 	orr.w	r3, r3, #1
    ab82:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    ab86:	2300      	movs	r3, #0
    ab88:	e7ce      	b.n	ab28 <cbvprintf+0x378>
		} else if (conv->width_present) {
    ab8a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    ab8e:	2a00      	cmp	r2, #0
		int width = -1;
    ab90:	bfac      	ite	ge
    ab92:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    ab96:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    ab9a:	e6ba      	b.n	a912 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    ab9c:	079b      	lsls	r3, r3, #30
    ab9e:	f57f aec7 	bpl.w	a930 <cbvprintf+0x180>
			precision = conv->prec_value;
    aba2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    aba6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    aba8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    abac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    abb0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    abb4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    abb8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    abba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    abbe:	d138      	bne.n	ac32 <cbvprintf+0x482>
			switch (length_mod) {
    abc0:	1ecb      	subs	r3, r1, #3
    abc2:	2b04      	cmp	r3, #4
    abc4:	d822      	bhi.n	ac0c <cbvprintf+0x45c>
    abc6:	e8df f003 	tbb	[pc, r3]
    abca:	0903      	.short	0x0903
    abcc:	2109      	.short	0x2109
    abce:	21          	.byte	0x21
    abcf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    abd0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    abd4:	17da      	asrs	r2, r3, #31
    abd6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    abda:	e006      	b.n	abea <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    abdc:	3407      	adds	r4, #7
    abde:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    abe2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    abe6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    abea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    abee:	f013 0603 	ands.w	r6, r3, #3
    abf2:	d056      	beq.n	aca2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    abf4:	463b      	mov	r3, r7
    abf6:	4652      	mov	r2, sl
    abf8:	4659      	mov	r1, fp
    abfa:	9802      	ldr	r0, [sp, #8]
    abfc:	f00f fa15 	bl	1a02a <outs>
    ac00:	2800      	cmp	r0, #0
    ac02:	f2c0 8142 	blt.w	ae8a <cbvprintf+0x6da>
    ac06:	4405      	add	r5, r0
			continue;
    ac08:	46ba      	mov	sl, r7
    ac0a:	e5d9      	b.n	a7c0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ac0c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ac10:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ac12:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ac16:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    ac1a:	d105      	bne.n	ac28 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    ac1c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    ac20:	930a      	str	r3, [sp, #40]	; 0x28
    ac22:	2300      	movs	r3, #0
    ac24:	930b      	str	r3, [sp, #44]	; 0x2c
    ac26:	e7e0      	b.n	abea <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    ac28:	2902      	cmp	r1, #2
    ac2a:	d1de      	bne.n	abea <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    ac2c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    ac30:	e7d0      	b.n	abd4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ac32:	2b02      	cmp	r3, #2
    ac34:	d123      	bne.n	ac7e <cbvprintf+0x4ce>
			switch (length_mod) {
    ac36:	1ecb      	subs	r3, r1, #3
    ac38:	2b04      	cmp	r3, #4
    ac3a:	d813      	bhi.n	ac64 <cbvprintf+0x4b4>
    ac3c:	e8df f003 	tbb	[pc, r3]
    ac40:	120a0a03 	.word	0x120a0a03
    ac44:	12          	.byte	0x12
    ac45:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    ac46:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    ac48:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    ac4a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    ac4c:	920a      	str	r2, [sp, #40]	; 0x28
    ac4e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    ac50:	4604      	mov	r4, r0
    ac52:	e7ca      	b.n	abea <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    ac54:	1de0      	adds	r0, r4, #7
    ac56:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    ac5a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    ac5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    ac62:	e7f5      	b.n	ac50 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    ac64:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ac68:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    ac6a:	930a      	str	r3, [sp, #40]	; 0x28
    ac6c:	f04f 0300 	mov.w	r3, #0
    ac70:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    ac72:	d0d3      	beq.n	ac1c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    ac74:	2902      	cmp	r1, #2
    ac76:	d1b8      	bne.n	abea <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    ac78:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ac7c:	e7d0      	b.n	ac20 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    ac7e:	2b04      	cmp	r3, #4
    ac80:	d109      	bne.n	ac96 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    ac82:	1de3      	adds	r3, r4, #7
    ac84:	f023 0307 	bic.w	r3, r3, #7
    ac88:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ac94:	e7a9      	b.n	abea <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ac96:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    ac98:	bf04      	itt	eq
    ac9a:	f854 3b04 	ldreq.w	r3, [r4], #4
    ac9e:	930a      	streq	r3, [sp, #40]	; 0x28
    aca0:	e7a3      	b.n	abea <cbvprintf+0x43a>
		switch (conv->specifier) {
    aca2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aca6:	2878      	cmp	r0, #120	; 0x78
    aca8:	d8ae      	bhi.n	ac08 <cbvprintf+0x458>
    acaa:	2862      	cmp	r0, #98	; 0x62
    acac:	d822      	bhi.n	acf4 <cbvprintf+0x544>
    acae:	2825      	cmp	r0, #37	; 0x25
    acb0:	f43f ad8f 	beq.w	a7d2 <cbvprintf+0x22>
    acb4:	2858      	cmp	r0, #88	; 0x58
    acb6:	d1a7      	bne.n	ac08 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    acb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    acbc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    acc0:	9300      	str	r3, [sp, #0]
    acc2:	aa0c      	add	r2, sp, #48	; 0x30
    acc4:	ab04      	add	r3, sp, #16
    acc6:	f00f f96a 	bl	19f9e <encode_uint>
    acca:	4682      	mov	sl, r0
			if (precision >= 0) {
    accc:	f1b8 0f00 	cmp.w	r8, #0
    acd0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    acd4:	db0c      	blt.n	acf0 <cbvprintf+0x540>
				conv->flag_zero = false;
    acd6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    acda:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    acde:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ace2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    ace4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    ace8:	d902      	bls.n	acf0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    acea:	eba8 0303 	sub.w	r3, r8, r3
    acee:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    acf0:	4680      	mov	r8, r0
    acf2:	e03d      	b.n	ad70 <cbvprintf+0x5c0>
    acf4:	3863      	subs	r0, #99	; 0x63
    acf6:	2815      	cmp	r0, #21
    acf8:	d886      	bhi.n	ac08 <cbvprintf+0x458>
    acfa:	a201      	add	r2, pc, #4	; (adr r2, ad00 <cbvprintf+0x550>)
    acfc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    ad00:	0000ad81 	.word	0x0000ad81
    ad04:	0000ade5 	.word	0x0000ade5
    ad08:	0000ac09 	.word	0x0000ac09
    ad0c:	0000ac09 	.word	0x0000ac09
    ad10:	0000ac09 	.word	0x0000ac09
    ad14:	0000ac09 	.word	0x0000ac09
    ad18:	0000ade5 	.word	0x0000ade5
    ad1c:	0000ac09 	.word	0x0000ac09
    ad20:	0000ac09 	.word	0x0000ac09
    ad24:	0000ac09 	.word	0x0000ac09
    ad28:	0000ac09 	.word	0x0000ac09
    ad2c:	0000ae3f 	.word	0x0000ae3f
    ad30:	0000ae0d 	.word	0x0000ae0d
    ad34:	0000ae11 	.word	0x0000ae11
    ad38:	0000ac09 	.word	0x0000ac09
    ad3c:	0000ac09 	.word	0x0000ac09
    ad40:	0000ad59 	.word	0x0000ad59
    ad44:	0000ac09 	.word	0x0000ac09
    ad48:	0000ae0d 	.word	0x0000ae0d
    ad4c:	0000ac09 	.word	0x0000ac09
    ad50:	0000ac09 	.word	0x0000ac09
    ad54:	0000ae0d 	.word	0x0000ae0d
			if (precision >= 0) {
    ad58:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    ad5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    ad60:	db0a      	blt.n	ad78 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    ad62:	4641      	mov	r1, r8
    ad64:	4650      	mov	r0, sl
    ad66:	f010 f8d9 	bl	1af1c <strnlen>
		char sign = 0;
    ad6a:	2600      	movs	r6, #0
			bpe = bps + len;
    ad6c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    ad70:	f1ba 0f00 	cmp.w	sl, #0
    ad74:	d10c      	bne.n	ad90 <cbvprintf+0x5e0>
    ad76:	e747      	b.n	ac08 <cbvprintf+0x458>
				len = strlen(bps);
    ad78:	4650      	mov	r0, sl
    ad7a:	f010 f8c8 	bl	1af0e <strlen>
    ad7e:	e7f4      	b.n	ad6a <cbvprintf+0x5ba>
			break;
    ad80:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ad82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    ad84:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ad88:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    ad8c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    ad90:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    ad94:	b106      	cbz	r6, ad98 <cbvprintf+0x5e8>
			nj_len += 1U;
    ad96:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    ad98:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    ad9c:	06d0      	lsls	r0, r2, #27
    ad9e:	d568      	bpl.n	ae72 <cbvprintf+0x6c2>
			nj_len += 2U;
    ada0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    ada2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    ada4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    ada6:	bf48      	it	mi
    ada8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    adaa:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    adac:	bf48      	it	mi
    adae:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    adb0:	f1b9 0f00 	cmp.w	r9, #0
    adb4:	dd76      	ble.n	aea4 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    adb6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    adba:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    adbe:	f3c2 0380 	ubfx	r3, r2, #2, #1
    adc2:	9303      	str	r3, [sp, #12]
    adc4:	0753      	lsls	r3, r2, #29
    adc6:	d46d      	bmi.n	aea4 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    adc8:	0650      	lsls	r0, r2, #25
    adca:	d561      	bpl.n	ae90 <cbvprintf+0x6e0>
					if (sign != 0) {
    adcc:	b146      	cbz	r6, ade0 <cbvprintf+0x630>
						OUTC(sign);
    adce:	4659      	mov	r1, fp
    add0:	4630      	mov	r0, r6
    add2:	9b02      	ldr	r3, [sp, #8]
    add4:	4798      	blx	r3
    add6:	2800      	cmp	r0, #0
    add8:	db57      	blt.n	ae8a <cbvprintf+0x6da>
						sign = 0;
    adda:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    addc:	3501      	adds	r5, #1
						sign = 0;
    adde:	461e      	mov	r6, r3
					pad = '0';
    ade0:	2330      	movs	r3, #48	; 0x30
    ade2:	e056      	b.n	ae92 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    ade4:	071e      	lsls	r6, r3, #28
    ade6:	d40f      	bmi.n	ae08 <cbvprintf+0x658>
				sign = ' ';
    ade8:	f013 0610 	ands.w	r6, r3, #16
    adec:	bf18      	it	ne
    adee:	2620      	movne	r6, #32
			if (value->sint < 0) {
    adf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    adf4:	2b00      	cmp	r3, #0
    adf6:	f6bf af5f 	bge.w	acb8 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    adfa:	4252      	negs	r2, r2
    adfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ae00:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    ae02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ae06:	e757      	b.n	acb8 <cbvprintf+0x508>
				sign = '+';
    ae08:	262b      	movs	r6, #43	; 0x2b
    ae0a:	e7f1      	b.n	adf0 <cbvprintf+0x640>
		switch (conv->specifier) {
    ae0c:	2600      	movs	r6, #0
    ae0e:	e753      	b.n	acb8 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    ae10:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae12:	b340      	cbz	r0, ae66 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ae14:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ae18:	9300      	str	r3, [sp, #0]
    ae1a:	2100      	movs	r1, #0
    ae1c:	ab04      	add	r3, sp, #16
    ae1e:	aa0c      	add	r2, sp, #48	; 0x30
    ae20:	f00f f8bd 	bl	19f9e <encode_uint>
				conv->altform_0c = true;
    ae24:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ae28:	4682      	mov	sl, r0
				conv->altform_0c = true;
    ae2a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ae2e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ae32:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ae36:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ae38:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ae3c:	e746      	b.n	accc <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    ae3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    ae40:	2907      	cmp	r1, #7
    ae42:	f63f aee1 	bhi.w	ac08 <cbvprintf+0x458>
    ae46:	e8df f001 	tbb	[pc, r1]
    ae4a:	040c      	.short	0x040c
    ae4c:	08080c06 	.word	0x08080c06
    ae50:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    ae52:	701d      	strb	r5, [r3, #0]
		break;
    ae54:	e6d8      	b.n	ac08 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    ae56:	801d      	strh	r5, [r3, #0]
		break;
    ae58:	e6d6      	b.n	ac08 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    ae5a:	17ea      	asrs	r2, r5, #31
    ae5c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    ae60:	e6d2      	b.n	ac08 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ae62:	601d      	str	r5, [r3, #0]
		break;
    ae64:	e6d0      	b.n	ac08 <cbvprintf+0x458>
			bps = "(nil)";
    ae66:	f8df a0c8 	ldr.w	sl, [pc, #200]	; af30 <cbvprintf+0x780>
    ae6a:	4606      	mov	r6, r0
			bpe = bps + 5;
    ae6c:	f10a 0805 	add.w	r8, sl, #5
    ae70:	e78e      	b.n	ad90 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    ae72:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    ae74:	bf48      	it	mi
    ae76:	3301      	addmi	r3, #1
    ae78:	e793      	b.n	ada2 <cbvprintf+0x5f2>
					OUTC(pad);
    ae7a:	4618      	mov	r0, r3
    ae7c:	9303      	str	r3, [sp, #12]
    ae7e:	4659      	mov	r1, fp
    ae80:	9b02      	ldr	r3, [sp, #8]
    ae82:	4798      	blx	r3
    ae84:	2800      	cmp	r0, #0
    ae86:	9b03      	ldr	r3, [sp, #12]
    ae88:	da04      	bge.n	ae94 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    ae8a:	b011      	add	sp, #68	; 0x44
    ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ae90:	2320      	movs	r3, #32
    ae92:	444d      	add	r5, r9
    ae94:	464a      	mov	r2, r9
				while (width-- > 0) {
    ae96:	2a00      	cmp	r2, #0
    ae98:	eba5 0109 	sub.w	r1, r5, r9
    ae9c:	f109 39ff 	add.w	r9, r9, #4294967295
    aea0:	dceb      	bgt.n	ae7a <cbvprintf+0x6ca>
    aea2:	460d      	mov	r5, r1
		if (sign != 0) {
    aea4:	b136      	cbz	r6, aeb4 <cbvprintf+0x704>
			OUTC(sign);
    aea6:	4659      	mov	r1, fp
    aea8:	4630      	mov	r0, r6
    aeaa:	9b02      	ldr	r3, [sp, #8]
    aeac:	4798      	blx	r3
    aeae:	2800      	cmp	r0, #0
    aeb0:	dbeb      	blt.n	ae8a <cbvprintf+0x6da>
    aeb2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    aeb4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    aeb8:	06d9      	lsls	r1, r3, #27
    aeba:	d401      	bmi.n	aec0 <cbvprintf+0x710>
    aebc:	071a      	lsls	r2, r3, #28
    aebe:	d506      	bpl.n	aece <cbvprintf+0x71e>
				OUTC('0');
    aec0:	4659      	mov	r1, fp
    aec2:	2030      	movs	r0, #48	; 0x30
    aec4:	9b02      	ldr	r3, [sp, #8]
    aec6:	4798      	blx	r3
    aec8:	2800      	cmp	r0, #0
    aeca:	dbde      	blt.n	ae8a <cbvprintf+0x6da>
    aecc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    aece:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    aed2:	06db      	lsls	r3, r3, #27
    aed4:	d507      	bpl.n	aee6 <cbvprintf+0x736>
				OUTC(conv->specifier);
    aed6:	4659      	mov	r1, fp
    aed8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aedc:	9b02      	ldr	r3, [sp, #8]
    aede:	4798      	blx	r3
    aee0:	2800      	cmp	r0, #0
    aee2:	dbd2      	blt.n	ae8a <cbvprintf+0x6da>
    aee4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    aee6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    aee8:	442e      	add	r6, r5
    aeea:	1b73      	subs	r3, r6, r5
    aeec:	2b00      	cmp	r3, #0
    aeee:	dc16      	bgt.n	af1e <cbvprintf+0x76e>
			OUTS(bps, bpe);
    aef0:	4643      	mov	r3, r8
    aef2:	4652      	mov	r2, sl
    aef4:	4659      	mov	r1, fp
    aef6:	9802      	ldr	r0, [sp, #8]
    aef8:	f00f f897 	bl	1a02a <outs>
    aefc:	2800      	cmp	r0, #0
    aefe:	dbc4      	blt.n	ae8a <cbvprintf+0x6da>
    af00:	4405      	add	r5, r0
		while (width > 0) {
    af02:	44a9      	add	r9, r5
    af04:	eba9 0305 	sub.w	r3, r9, r5
    af08:	2b00      	cmp	r3, #0
    af0a:	f77f ae7d 	ble.w	ac08 <cbvprintf+0x458>
			OUTC(' ');
    af0e:	4659      	mov	r1, fp
    af10:	2020      	movs	r0, #32
    af12:	9b02      	ldr	r3, [sp, #8]
    af14:	4798      	blx	r3
    af16:	2800      	cmp	r0, #0
    af18:	dbb7      	blt.n	ae8a <cbvprintf+0x6da>
    af1a:	3501      	adds	r5, #1
			--width;
    af1c:	e7f2      	b.n	af04 <cbvprintf+0x754>
				OUTC('0');
    af1e:	4659      	mov	r1, fp
    af20:	2030      	movs	r0, #48	; 0x30
    af22:	9b02      	ldr	r3, [sp, #8]
    af24:	4798      	blx	r3
    af26:	2800      	cmp	r0, #0
    af28:	dbaf      	blt.n	ae8a <cbvprintf+0x6da>
    af2a:	3501      	adds	r5, #1
    af2c:	e7dd      	b.n	aeea <cbvprintf+0x73a>
    af2e:	bf00      	nop
    af30:	0001eda0 	.word	0x0001eda0

0000af34 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    af34:	b148      	cbz	r0, af4a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    af36:	4b05      	ldr	r3, [pc, #20]	; (af4c <arch_busy_wait+0x18>)
    af38:	681a      	ldr	r2, [r3, #0]
    af3a:	4b05      	ldr	r3, [pc, #20]	; (af50 <arch_busy_wait+0x1c>)
    af3c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    af40:	4b04      	ldr	r3, [pc, #16]	; (af54 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    af42:	4350      	muls	r0, r2
    af44:	f043 0301 	orr.w	r3, r3, #1
    af48:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    af4a:	4770      	bx	lr
    af4c:	20008528 	.word	0x20008528
    af50:	000f4240 	.word	0x000f4240
    af54:	0001da00 	.word	0x0001da00

0000af58 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    af58:	4b01      	ldr	r3, [pc, #4]	; (af60 <virtio_set_status+0x8>)
    af5a:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    af5c:	4770      	bx	lr
    af5e:	bf00      	nop
    af60:	20070000 	.word	0x20070000

0000af64 <init_status_flag>:
    af64:	2000      	movs	r0, #0
    af66:	4b01      	ldr	r3, [pc, #4]	; (af6c <init_status_flag+0x8>)
    af68:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    af6a:	4770      	bx	lr
    af6c:	20070000 	.word	0x20070000

0000af70 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    af70:	4b01      	ldr	r3, [pc, #4]	; (af78 <ipm_callback_process+0x8>)
    af72:	6818      	ldr	r0, [r3, #0]
    af74:	f011 bf85 	b.w	1ce82 <virtqueue_notification>
    af78:	2000a4a8 	.word	0x2000a4a8

0000af7c <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    af7c:	4b0a      	ldr	r3, [pc, #40]	; (afa8 <virtio_notify+0x2c>)
{
    af7e:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    af80:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    af82:	2300      	movs	r3, #0
    af84:	6882      	ldr	r2, [r0, #8]
    af86:	9300      	str	r3, [sp, #0]
    af88:	6814      	ldr	r4, [r2, #0]
    af8a:	4619      	mov	r1, r3
    af8c:	461a      	mov	r2, r3
    af8e:	47a0      	blx	r4
	if (status != 0) {
    af90:	4602      	mov	r2, r0
    af92:	b130      	cbz	r0, afa2 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    af94:	2145      	movs	r1, #69	; 0x45
    af96:	4805      	ldr	r0, [pc, #20]	; (afac <virtio_notify+0x30>)
}
    af98:	b002      	add	sp, #8
    af9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    af9e:	f00e bdb4 	b.w	19b0a <printk>
}
    afa2:	b002      	add	sp, #8
    afa4:	bd10      	pop	{r4, pc}
    afa6:	bf00      	nop
    afa8:	2000a498 	.word	0x2000a498
    afac:	0001edd2 	.word	0x0001edd2

0000afb0 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    afb0:	4907      	ldr	r1, [pc, #28]	; (afd0 <ipm_callback+0x20>)
    afb2:	e8d1 3fef 	ldaex	r3, [r1]
    afb6:	f043 0201 	orr.w	r2, r3, #1
    afba:	e8c1 2fe0 	stlex	r0, r2, [r1]
    afbe:	2800      	cmp	r0, #0
    afc0:	d1f7      	bne.n	afb2 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    afc2:	07db      	lsls	r3, r3, #31
    afc4:	d403      	bmi.n	afce <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    afc6:	4803      	ldr	r0, [pc, #12]	; (afd4 <ipm_callback+0x24>)
    afc8:	3908      	subs	r1, #8
    afca:	f012 b91b 	b.w	1d204 <k_queue_append>
}
    afce:	4770      	bx	lr
    afd0:	2000a4a4 	.word	0x2000a4a4
    afd4:	20008820 	.word	0x20008820

0000afd8 <rpmsg_backend_init>:
{
    afd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    afda:	4b47      	ldr	r3, [pc, #284]	; (b0f8 <rpmsg_backend_init+0x120>)
{
    afdc:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    afde:	ac02      	add	r4, sp, #8
{
    afe0:	4606      	mov	r6, r0
    afe2:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    afe4:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    afe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    afec:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    aff0:	f04f 33ff 	mov.w	r3, #4294967295
    aff4:	4941      	ldr	r1, [pc, #260]	; (b0fc <rpmsg_backend_init+0x124>)
    aff6:	4842      	ldr	r0, [pc, #264]	; (b100 <rpmsg_backend_init+0x128>)
    aff8:	f00d fdee 	bl	18bd8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    affc:	4941      	ldr	r1, [pc, #260]	; (b104 <rpmsg_backend_init+0x12c>)
    affe:	4842      	ldr	r0, [pc, #264]	; (b108 <rpmsg_backend_init+0x130>)
    b000:	f012 f972 	bl	1d2e8 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b004:	2200      	movs	r2, #0
    b006:	4b41      	ldr	r3, [pc, #260]	; (b10c <rpmsg_backend_init+0x134>)
    b008:	4941      	ldr	r1, [pc, #260]	; (b110 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b00a:	4620      	mov	r0, r4
    b00c:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b010:	601a      	str	r2, [r3, #0]
    b012:	f00b fab7 	bl	16584 <metal_init>
	if (err) {
    b016:	4604      	mov	r4, r0
    b018:	b138      	cbz	r0, b02a <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b01a:	2145      	movs	r1, #69	; 0x45
    b01c:	4602      	mov	r2, r0
    b01e:	483d      	ldr	r0, [pc, #244]	; (b114 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b020:	f00e fd73 	bl	19b0a <printk>
}
    b024:	4620      	mov	r0, r4
    b026:	b005      	add	sp, #20
    b028:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b02a:	483b      	ldr	r0, [pc, #236]	; (b118 <rpmsg_backend_init+0x140>)
    b02c:	f00b fa8a 	bl	16544 <metal_register_generic_device>
	if (err) {
    b030:	4604      	mov	r4, r0
    b032:	b118      	cbz	r0, b03c <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b034:	4602      	mov	r2, r0
    b036:	2145      	movs	r1, #69	; 0x45
    b038:	4838      	ldr	r0, [pc, #224]	; (b11c <rpmsg_backend_init+0x144>)
    b03a:	e7f1      	b.n	b020 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b03c:	4938      	ldr	r1, [pc, #224]	; (b120 <rpmsg_backend_init+0x148>)
    b03e:	4839      	ldr	r0, [pc, #228]	; (b124 <rpmsg_backend_init+0x14c>)
    b040:	aa01      	add	r2, sp, #4
    b042:	f011 fc9e 	bl	1c982 <metal_device_open>
	if (err) {
    b046:	4604      	mov	r4, r0
    b048:	b118      	cbz	r0, b052 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    b04a:	4602      	mov	r2, r0
    b04c:	2145      	movs	r1, #69	; 0x45
    b04e:	4836      	ldr	r0, [pc, #216]	; (b128 <rpmsg_backend_init+0x150>)
    b050:	e7e6      	b.n	b020 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    b052:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b054:	689a      	ldr	r2, [r3, #8]
    b056:	b92a      	cbnz	r2, b064 <rpmsg_backend_init+0x8c>
    b058:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    b05a:	2145      	movs	r1, #69	; 0x45
    b05c:	4833      	ldr	r0, [pc, #204]	; (b12c <rpmsg_backend_init+0x154>)
    b05e:	f00e fd54 	bl	19b0a <printk>
		return err;
    b062:	e7df      	b.n	b024 <rpmsg_backend_init+0x4c>
    b064:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    b066:	6033      	str	r3, [r6, #0]
	if (!*io) {
    b068:	2b00      	cmp	r3, #0
    b06a:	d0f6      	beq.n	b05a <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b06c:	4830      	ldr	r0, [pc, #192]	; (b130 <rpmsg_backend_init+0x158>)
    b06e:	f00b fda1 	bl	16bb4 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    b072:	4f30      	ldr	r7, [pc, #192]	; (b134 <rpmsg_backend_init+0x15c>)
    b074:	6038      	str	r0, [r7, #0]
    b076:	4830      	ldr	r0, [pc, #192]	; (b138 <rpmsg_backend_init+0x160>)
    b078:	f00b fd9c 	bl	16bb4 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    b07c:	683a      	ldr	r2, [r7, #0]
    b07e:	b932      	cbnz	r2, b08e <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    b080:	2145      	movs	r1, #69	; 0x45
    b082:	482e      	ldr	r0, [pc, #184]	; (b13c <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    b084:	f00e fd41 	bl	19b0a <printk>
		return -ENODEV;
    b088:	f06f 0412 	mvn.w	r4, #18
    b08c:	e7ca      	b.n	b024 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    b08e:	b910      	cbnz	r0, b096 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    b090:	2145      	movs	r1, #69	; 0x45
    b092:	482b      	ldr	r0, [pc, #172]	; (b140 <rpmsg_backend_init+0x168>)
    b094:	e7f6      	b.n	b084 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    b096:	6883      	ldr	r3, [r0, #8]
    b098:	4622      	mov	r2, r4
    b09a:	685b      	ldr	r3, [r3, #4]
    b09c:	4929      	ldr	r1, [pc, #164]	; (b144 <rpmsg_backend_init+0x16c>)
    b09e:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    b0a0:	f00f f819 	bl	1a0d6 <virtqueue_allocate.constprop.0>
    b0a4:	4f28      	ldr	r7, [pc, #160]	; (b148 <rpmsg_backend_init+0x170>)
    b0a6:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    b0a8:	b930      	cbnz	r0, b0b8 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    b0aa:	2145      	movs	r1, #69	; 0x45
    b0ac:	4827      	ldr	r0, [pc, #156]	; (b14c <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b0ae:	f00e fd2c 	bl	19b0a <printk>
		return -ENOMEM;
    b0b2:	f06f 040b 	mvn.w	r4, #11
    b0b6:	e7b5      	b.n	b024 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    b0b8:	f00f f80d 	bl	1a0d6 <virtqueue_allocate.constprop.0>
    b0bc:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    b0be:	b910      	cbnz	r0, b0c6 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b0c0:	2145      	movs	r1, #69	; 0x45
    b0c2:	4823      	ldr	r0, [pc, #140]	; (b150 <rpmsg_backend_init+0x178>)
    b0c4:	e7f3      	b.n	b0ae <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    b0c6:	6832      	ldr	r2, [r6, #0]
    b0c8:	4b22      	ldr	r3, [pc, #136]	; (b154 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    b0ca:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    b0cc:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b0ce:	4a22      	ldr	r2, [pc, #136]	; (b158 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    b0d0:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b0d2:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b0d4:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    b0d6:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b0d8:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    b0da:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    b0dc:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    b0de:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b0e0:	4e1e      	ldr	r6, [pc, #120]	; (b15c <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    b0e2:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    b0e4:	4a1e      	ldr	r2, [pc, #120]	; (b160 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    b0e6:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b0e8:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    b0ea:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    b0ec:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    b0ee:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    b0f0:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    b0f2:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    b0f4:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    b0f6:	e795      	b.n	b024 <rpmsg_backend_init+0x4c>
    b0f8:	0001d978 	.word	0x0001d978
    b0fc:	2000c640 	.word	0x2000c640
    b100:	20008820 	.word	0x20008820
    b104:	0001edf5 	.word	0x0001edf5
    b108:	20008840 	.word	0x20008840
    b10c:	2000a49c 	.word	0x2000a49c
    b110:	0000af71 	.word	0x0000af71
    b114:	0001ee00 	.word	0x0001ee00
    b118:	20008240 	.word	0x20008240
    b11c:	0001ee28 	.word	0x0001ee28
    b120:	0001ee58 	.word	0x0001ee58
    b124:	0001ee62 	.word	0x0001ee62
    b128:	0001ee6a 	.word	0x0001ee6a
    b12c:	0001ee8c 	.word	0x0001ee8c
    b130:	0001eebd 	.word	0x0001eebd
    b134:	2000a498 	.word	0x2000a498
    b138:	0001eec3 	.word	0x0001eec3
    b13c:	0001eec9 	.word	0x0001eec9
    b140:	0001eef1 	.word	0x0001eef1
    b144:	0000afb1 	.word	0x0000afb1
    b148:	2000a4a8 	.word	0x2000a4a8
    b14c:	0001ef19 	.word	0x0001ef19
    b150:	0001ef47 	.word	0x0001ef47
    b154:	20008210 	.word	0x20008210
    b158:	2007fc00 	.word	0x2007fc00
    b15c:	2007f800 	.word	0x2007f800
    b160:	0001db8c 	.word	0x0001db8c

0000b164 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b164:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b168:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b16a:	4e1b      	ldr	r6, [pc, #108]	; (b1d8 <ns_bind_cb+0x74>)
{
    b16c:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b16e:	6831      	ldr	r1, [r6, #0]
    b170:	4628      	mov	r0, r5
{
    b172:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b174:	f00f fedb 	bl	1af2e <strcmp>
    b178:	b168      	cbz	r0, b196 <ns_bind_cb+0x32>
    b17a:	4628      	mov	r0, r5
    b17c:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b17e:	f00f fed6 	bl	1af2e <strcmp>
    b182:	b138      	cbz	r0, b194 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b184:	462a      	mov	r2, r5
    b186:	2145      	movs	r1, #69	; 0x45
    b188:	4814      	ldr	r0, [pc, #80]	; (b1dc <ns_bind_cb+0x78>)
}
    b18a:	b004      	add	sp, #16
    b18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b190:	f00e bcbb 	b.w	19b0a <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b194:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b196:	244c      	movs	r4, #76	; 0x4c
    b198:	4344      	muls	r4, r0
    b19a:	4b11      	ldr	r3, [pc, #68]	; (b1e0 <ns_bind_cb+0x7c>)
    b19c:	f104 0008 	add.w	r0, r4, #8
    b1a0:	9302      	str	r3, [sp, #8]
    b1a2:	4434      	add	r4, r6
    b1a4:	6863      	ldr	r3, [r4, #4]
    b1a6:	462a      	mov	r2, r5
    b1a8:	e9cd 8300 	strd	r8, r3, [sp]
    b1ac:	4639      	mov	r1, r7
    b1ae:	f04f 33ff 	mov.w	r3, #4294967295
    b1b2:	4430      	add	r0, r6
    b1b4:	f00b fab2 	bl	1671c <rpmsg_create_ept>
			if (err != 0) {
    b1b8:	4603      	mov	r3, r0
    b1ba:	b138      	cbz	r0, b1cc <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b1bc:	462a      	mov	r2, r5
    b1be:	2145      	movs	r1, #69	; 0x45
    b1c0:	4808      	ldr	r0, [pc, #32]	; (b1e4 <ns_bind_cb+0x80>)
}
    b1c2:	b004      	add	sp, #16
    b1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    b1c8:	f00e bc9f 	b.w	19b0a <printk>
				endpoints[i].bound = true;
    b1cc:	2301      	movs	r3, #1
    b1ce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    b1d2:	b004      	add	sp, #16
    b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b1d8:	2000a4b0 	.word	0x2000a4b0
    b1dc:	0001ef83 	.word	0x0001ef83
    b1e0:	0001a0f1 	.word	0x0001a0f1
    b1e4:	0001efb2 	.word	0x0001efb2

0000b1e8 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    b1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    b1ea:	4d13      	ldr	r5, [pc, #76]	; (b238 <rpmsg_service_init+0x50>)
    b1ec:	4913      	ldr	r1, [pc, #76]	; (b23c <rpmsg_service_init+0x54>)
    b1ee:	4628      	mov	r0, r5
    b1f0:	f7ff fef2 	bl	afd8 <rpmsg_backend_init>
	if (err) {
    b1f4:	4604      	mov	r4, r0
    b1f6:	b138      	cbz	r0, b208 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    b1f8:	2145      	movs	r1, #69	; 0x45
    b1fa:	4602      	mov	r2, r0
    b1fc:	4810      	ldr	r0, [pc, #64]	; (b240 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b1fe:	f00e fc84 	bl	19b0a <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    b202:	4620      	mov	r0, r4
    b204:	b003      	add	sp, #12
    b206:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    b208:	4c0e      	ldr	r4, [pc, #56]	; (b244 <rpmsg_service_init+0x5c>)
    b20a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    b20e:	4620      	mov	r0, r4
    b210:	490d      	ldr	r1, [pc, #52]	; (b248 <rpmsg_service_init+0x60>)
    b212:	f011 ffc0 	bl	1d196 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    b216:	9400      	str	r4, [sp, #0]
    b218:	682b      	ldr	r3, [r5, #0]
    b21a:	4a0c      	ldr	r2, [pc, #48]	; (b24c <rpmsg_service_init+0x64>)
    b21c:	4907      	ldr	r1, [pc, #28]	; (b23c <rpmsg_service_init+0x54>)
    b21e:	480c      	ldr	r0, [pc, #48]	; (b250 <rpmsg_service_init+0x68>)
    b220:	f00b fba8 	bl	16974 <rpmsg_init_vdev>
	if (err) {
    b224:	4604      	mov	r4, r0
    b226:	b118      	cbz	r0, b230 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b228:	4602      	mov	r2, r0
    b22a:	2145      	movs	r1, #69	; 0x45
    b22c:	4809      	ldr	r0, [pc, #36]	; (b254 <rpmsg_service_init+0x6c>)
    b22e:	e7e6      	b.n	b1fe <rpmsg_service_init+0x16>
	ep_crt_started = true;
    b230:	2201      	movs	r2, #1
    b232:	4b09      	ldr	r3, [pc, #36]	; (b258 <rpmsg_service_init+0x70>)
    b234:	701a      	strb	r2, [r3, #0]
	return 0;
    b236:	e7e4      	b.n	b202 <rpmsg_service_init+0x1a>
    b238:	2000a548 	.word	0x2000a548
    b23c:	200088d0 	.word	0x200088d0
    b240:	0001efe8 	.word	0x0001efe8
    b244:	2000a5dc 	.word	0x2000a5dc
    b248:	20070400 	.word	0x20070400
    b24c:	0000b165 	.word	0x0000b165
    b250:	2000a54c 	.word	0x2000a54c
    b254:	0001f015 	.word	0x0001f015
    b258:	2000c143 	.word	0x2000c143

0000b25c <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    b25c:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    b25e:	4b0d      	ldr	r3, [pc, #52]	; (b294 <rpmsg_service_register_endpoint+0x38>)
{
    b260:	4602      	mov	r2, r0
	if (ep_crt_started) {
    b262:	781b      	ldrb	r3, [r3, #0]
    b264:	b993      	cbnz	r3, b28c <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    b266:	4c0c      	ldr	r4, [pc, #48]	; (b298 <rpmsg_service_register_endpoint+0x3c>)
    b268:	6820      	ldr	r0, [r4, #0]
    b26a:	b148      	cbz	r0, b280 <rpmsg_service_register_endpoint+0x24>
    b26c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b26e:	b133      	cbz	r3, b27e <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    b270:	480a      	ldr	r0, [pc, #40]	; (b29c <rpmsg_service_register_endpoint+0x40>)
    b272:	2145      	movs	r1, #69	; 0x45
    b274:	f00e fc49 	bl	19b0a <printk>

	return -ENOMEM;
    b278:	f06f 000b 	mvn.w	r0, #11
}
    b27c:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b27e:	2001      	movs	r0, #1
			endpoints[i].name = name;
    b280:	234c      	movs	r3, #76	; 0x4c
    b282:	4343      	muls	r3, r0
    b284:	18e5      	adds	r5, r4, r3
    b286:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    b288:	6069      	str	r1, [r5, #4]
			return i;
    b28a:	e7f7      	b.n	b27c <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    b28c:	f06f 0043 	mvn.w	r0, #67	; 0x43
    b290:	e7f4      	b.n	b27c <rpmsg_service_register_endpoint+0x20>
    b292:	bf00      	nop
    b294:	2000c143 	.word	0x2000c143
    b298:	2000a4b0 	.word	0x2000a4b0
    b29c:	0001f034 	.word	0x0001f034

0000b2a0 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    b2a0:	224c      	movs	r2, #76	; 0x4c
    b2a2:	4b03      	ldr	r3, [pc, #12]	; (b2b0 <rpmsg_service_endpoint_is_bound+0x10>)
    b2a4:	fb02 3300 	mla	r3, r2, r0, r3
    b2a8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b2ac:	4770      	bx	lr
    b2ae:	bf00      	nop
    b2b0:	2000a4b0 	.word	0x2000a4b0

0000b2b4 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    b2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b2b6:	244c      	movs	r4, #76	; 0x4c
    b2b8:	460b      	mov	r3, r1
    b2ba:	2101      	movs	r1, #1
    b2bc:	4344      	muls	r4, r0
    b2be:	e9cd 2100 	strd	r2, r1, [sp]
    b2c2:	4d05      	ldr	r5, [pc, #20]	; (b2d8 <rpmsg_service_send+0x24>)
    b2c4:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    b2c6:	3408      	adds	r4, #8
    b2c8:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    b2cc:	1928      	adds	r0, r5, r4
    b2ce:	f00b fa13 	bl	166f8 <rpmsg_send_offchannel_raw>
}
    b2d2:	b003      	add	sp, #12
    b2d4:	bd30      	pop	{r4, r5, pc}
    b2d6:	bf00      	nop
    b2d8:	2000a4b0 	.word	0x2000a4b0

0000b2dc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    b2dc:	4b10      	ldr	r3, [pc, #64]	; (b320 <settings_save_one+0x44>)
{
    b2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    b2e2:	681c      	ldr	r4, [r3, #0]
{
    b2e4:	4605      	mov	r5, r0
    b2e6:	460e      	mov	r6, r1
    b2e8:	4617      	mov	r7, r2
	if (!cs) {
    b2ea:	b1ac      	cbz	r4, b318 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    b2ec:	f04f 32ff 	mov.w	r2, #4294967295
    b2f0:	f04f 33ff 	mov.w	r3, #4294967295
    b2f4:	480b      	ldr	r0, [pc, #44]	; (b324 <settings_save_one+0x48>)
    b2f6:	f00b ff7f 	bl	171f8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    b2fa:	6863      	ldr	r3, [r4, #4]
    b2fc:	4632      	mov	r2, r6
    b2fe:	f8d3 8008 	ldr.w	r8, [r3, #8]
    b302:	4629      	mov	r1, r5
    b304:	463b      	mov	r3, r7
    b306:	4620      	mov	r0, r4
    b308:	47c0      	blx	r8
    b30a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b30c:	4805      	ldr	r0, [pc, #20]	; (b324 <settings_save_one+0x48>)
    b30e:	f00c f83f 	bl	17390 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    b312:	4620      	mov	r0, r4
    b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    b318:	f06f 0401 	mvn.w	r4, #1
    b31c:	e7f9      	b.n	b312 <settings_save_one+0x36>
    b31e:	bf00      	nop
    b320:	2000a5f0 	.word	0x2000a5f0
    b324:	20008680 	.word	0x20008680

0000b328 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    b328:	2300      	movs	r3, #0
{
    b32a:	b530      	push	{r4, r5, lr}
    b32c:	b085      	sub	sp, #20
    b32e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    b330:	e9cd 3302 	strd	r3, r3, [sp, #8]
    b334:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b336:	f04f 33ff 	mov.w	r3, #4294967295
    b33a:	f04f 32ff 	mov.w	r2, #4294967295
    b33e:	480b      	ldr	r0, [pc, #44]	; (b36c <settings_load_subtree+0x44>)
    b340:	f00b ff5a 	bl	171f8 <z_impl_k_mutex_lock>
	return list->head;
    b344:	4b0a      	ldr	r3, [pc, #40]	; (b370 <settings_load_subtree+0x48>)
    b346:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b348:	b134      	cbz	r4, b358 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    b34a:	6863      	ldr	r3, [r4, #4]
    b34c:	4620      	mov	r0, r4
    b34e:	681b      	ldr	r3, [r3, #0]
    b350:	a901      	add	r1, sp, #4
    b352:	4798      	blx	r3
	return node->next;
    b354:	6824      	ldr	r4, [r4, #0]
    b356:	e7f7      	b.n	b348 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    b358:	4628      	mov	r0, r5
    b35a:	f000 f83b 	bl	b3d4 <settings_commit_subtree>
    b35e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b360:	4802      	ldr	r0, [pc, #8]	; (b36c <settings_load_subtree+0x44>)
    b362:	f00c f815 	bl	17390 <z_impl_k_mutex_unlock>
}
    b366:	4620      	mov	r0, r4
    b368:	b005      	add	sp, #20
    b36a:	bd30      	pop	{r4, r5, pc}
    b36c:	20008680 	.word	0x20008680
    b370:	2000a5e8 	.word	0x2000a5e8

0000b374 <settings_load_subtree_direct>:
{
    b374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    b376:	e9cd 0101 	strd	r0, r1, [sp, #4]
    b37a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    b37c:	f04f 33ff 	mov.w	r3, #4294967295
    b380:	f04f 32ff 	mov.w	r2, #4294967295
    b384:	4809      	ldr	r0, [pc, #36]	; (b3ac <settings_load_subtree_direct+0x38>)
    b386:	f00b ff37 	bl	171f8 <z_impl_k_mutex_lock>
	return list->head;
    b38a:	4b09      	ldr	r3, [pc, #36]	; (b3b0 <settings_load_subtree_direct+0x3c>)
    b38c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b38e:	b134      	cbz	r4, b39e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    b390:	6863      	ldr	r3, [r4, #4]
    b392:	4620      	mov	r0, r4
    b394:	681b      	ldr	r3, [r3, #0]
    b396:	a901      	add	r1, sp, #4
    b398:	4798      	blx	r3
	return node->next;
    b39a:	6824      	ldr	r4, [r4, #0]
    b39c:	e7f7      	b.n	b38e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    b39e:	4803      	ldr	r0, [pc, #12]	; (b3ac <settings_load_subtree_direct+0x38>)
    b3a0:	f00b fff6 	bl	17390 <z_impl_k_mutex_unlock>
}
    b3a4:	2000      	movs	r0, #0
    b3a6:	b004      	add	sp, #16
    b3a8:	bd10      	pop	{r4, pc}
    b3aa:	bf00      	nop
    b3ac:	20008680 	.word	0x20008680
    b3b0:	2000a5e8 	.word	0x2000a5e8

0000b3b4 <settings_store_init>:
	list->head = NULL;
    b3b4:	2200      	movs	r2, #0
    b3b6:	4b02      	ldr	r3, [pc, #8]	; (b3c0 <settings_store_init+0xc>)
	list->tail = NULL;
    b3b8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    b3bc:	4770      	bx	lr
    b3be:	bf00      	nop
    b3c0:	2000a5e8 	.word	0x2000a5e8

0000b3c4 <settings_init>:
	list->head = NULL;
    b3c4:	2200      	movs	r2, #0
    b3c6:	4b02      	ldr	r3, [pc, #8]	; (b3d0 <settings_init+0xc>)
	list->tail = NULL;
    b3c8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    b3cc:	f7ff bff2 	b.w	b3b4 <settings_store_init>
    b3d0:	2000a5f4 	.word	0x2000a5f4

0000b3d4 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    b3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3d8:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    b3da:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b3dc:	4c1f      	ldr	r4, [pc, #124]	; (b45c <settings_commit_subtree+0x88>)
    b3de:	4f20      	ldr	r7, [pc, #128]	; (b460 <settings_commit_subtree+0x8c>)
    b3e0:	f8df 8080 	ldr.w	r8, [pc, #128]	; b464 <settings_commit_subtree+0x90>
    b3e4:	42bc      	cmp	r4, r7
    b3e6:	d908      	bls.n	b3fa <settings_commit_subtree+0x26>
    b3e8:	4641      	mov	r1, r8
    b3ea:	481f      	ldr	r0, [pc, #124]	; (b468 <settings_commit_subtree+0x94>)
    b3ec:	22f4      	movs	r2, #244	; 0xf4
    b3ee:	f00e fb8c 	bl	19b0a <printk>
    b3f2:	21f4      	movs	r1, #244	; 0xf4
    b3f4:	4640      	mov	r0, r8
    b3f6:	f00e fe2e 	bl	1a056 <assert_post_action>
    b3fa:	42bc      	cmp	r4, r7
    b3fc:	d307      	bcc.n	b40e <settings_commit_subtree+0x3a>
	return list->head;
    b3fe:	4b1b      	ldr	r3, [pc, #108]	; (b46c <settings_commit_subtree+0x98>)
    b400:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    b402:	b10c      	cbz	r4, b408 <settings_commit_subtree+0x34>
    b404:	3c14      	subs	r4, #20
    b406:	b9a4      	cbnz	r4, b432 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    b408:	4628      	mov	r0, r5
    b40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b40e:	b91e      	cbnz	r6, b418 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    b410:	68e3      	ldr	r3, [r4, #12]
    b412:	b94b      	cbnz	r3, b428 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b414:	3414      	adds	r4, #20
    b416:	e7e5      	b.n	b3e4 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b418:	2200      	movs	r2, #0
    b41a:	4631      	mov	r1, r6
    b41c:	6820      	ldr	r0, [r4, #0]
    b41e:	f00e fe70 	bl	1a102 <settings_name_steq>
    b422:	2800      	cmp	r0, #0
    b424:	d1f4      	bne.n	b410 <settings_commit_subtree+0x3c>
    b426:	e7f5      	b.n	b414 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    b428:	4798      	blx	r3
				rc = rc2;
    b42a:	2d00      	cmp	r5, #0
    b42c:	bf08      	it	eq
    b42e:	4605      	moveq	r5, r0
    b430:	e7f0      	b.n	b414 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b432:	b936      	cbnz	r6, b442 <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    b434:	68e3      	ldr	r3, [r4, #12]
    b436:	b963      	cbnz	r3, b452 <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b438:	f114 0f14 	cmn.w	r4, #20
    b43c:	d0e4      	beq.n	b408 <settings_commit_subtree+0x34>
	return node->next;
    b43e:	6964      	ldr	r4, [r4, #20]
    b440:	e7df      	b.n	b402 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b442:	2200      	movs	r2, #0
    b444:	4631      	mov	r1, r6
    b446:	6820      	ldr	r0, [r4, #0]
    b448:	f00e fe5b 	bl	1a102 <settings_name_steq>
    b44c:	2800      	cmp	r0, #0
    b44e:	d1f1      	bne.n	b434 <settings_commit_subtree+0x60>
    b450:	e7f2      	b.n	b438 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    b452:	4798      	blx	r3
				rc = rc2;
    b454:	2d00      	cmp	r5, #0
    b456:	bf08      	it	eq
    b458:	4605      	moveq	r5, r0
    b45a:	e7ed      	b.n	b438 <settings_commit_subtree+0x64>
    b45c:	0001d81c 	.word	0x0001d81c
    b460:	0001d880 	.word	0x0001d880
    b464:	0001f06d 	.word	0x0001f06d
    b468:	0001ecfc 	.word	0x0001ecfc
    b46c:	2000a5f4 	.word	0x2000a5f4

0000b470 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    b470:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    b472:	4c06      	ldr	r4, [pc, #24]	; (b48c <settings_subsys_init+0x1c>)
    b474:	7823      	ldrb	r3, [r4, #0]
    b476:	b93b      	cbnz	r3, b488 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    b478:	f7ff ffa4 	bl	b3c4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    b47c:	f00e fe7a 	bl	1a174 <settings_backend_init>

	if (!err) {
    b480:	b908      	cbnz	r0, b486 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    b482:	2301      	movs	r3, #1
    b484:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    b486:	bd10      	pop	{r4, pc}
		return 0;
    b488:	2000      	movs	r0, #0
    b48a:	e7fc      	b.n	b486 <settings_subsys_init+0x16>
    b48c:	2000c144 	.word	0x2000c144

0000b490 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    b490:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    b492:	4c04      	ldr	r4, [pc, #16]	; (b4a4 <rtt_console_init+0x14>)
    b494:	4620      	mov	r0, r4
    b496:	f7fe fd93 	bl	9fc0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    b49a:	4620      	mov	r0, r4
    b49c:	f002 fa64 	bl	d968 <__stdout_hook_install>

	return 0;
}
    b4a0:	2000      	movs	r0, #0
    b4a2:	bd10      	pop	{r4, pc}
    b4a4:	0000b4a9 	.word	0x0000b4a9

0000b4a8 <rtt_console_out>:
{
    b4a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b4ac:	4604      	mov	r4, r0
	char c = (char)character;
    b4ae:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    b4b0:	f8df 8058 	ldr.w	r8, [pc, #88]	; b50c <rtt_console_out+0x64>
    b4b4:	4e16      	ldr	r6, [pc, #88]	; (b510 <rtt_console_out+0x68>)
    b4b6:	f88d 0007 	strb.w	r0, [sp, #7]
    b4ba:	f04f 33ff 	mov.w	r3, #4294967295
    b4be:	f04f 32ff 	mov.w	r2, #4294967295
    b4c2:	4640      	mov	r0, r8
    b4c4:	f00b fe98 	bl	171f8 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    b4c8:	2201      	movs	r2, #1
    b4ca:	f10d 0107 	add.w	r1, sp, #7
    b4ce:	2000      	movs	r0, #0
    b4d0:	f001 fae8 	bl	caa4 <SEGGER_RTT_WriteNoLock>
    b4d4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    b4d6:	4640      	mov	r0, r8
    b4d8:	f00b ff5a 	bl	17390 <z_impl_k_mutex_unlock>
		if (cnt) {
    b4dc:	b12f      	cbz	r7, b4ea <rtt_console_out+0x42>
			host_present = true;
    b4de:	2301      	movs	r3, #1
    b4e0:	7033      	strb	r3, [r6, #0]
}
    b4e2:	4620      	mov	r0, r4
    b4e4:	b002      	add	sp, #8
    b4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    b4ea:	7833      	ldrb	r3, [r6, #0]
    b4ec:	2b00      	cmp	r3, #0
    b4ee:	d0f8      	beq.n	b4e2 <rtt_console_out+0x3a>
			if (max_cnt) {
    b4f0:	3d01      	subs	r5, #1
    b4f2:	d008      	beq.n	b506 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    b4f4:	f011 feee 	bl	1d2d4 <k_is_in_isr>
    b4f8:	2800      	cmp	r0, #0
    b4fa:	d1de      	bne.n	b4ba <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    b4fc:	2100      	movs	r1, #0
    b4fe:	2042      	movs	r0, #66	; 0x42
    b500:	f00d f8f8 	bl	186f4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b504:	e7d9      	b.n	b4ba <rtt_console_out+0x12>
				host_present = false;
    b506:	7035      	strb	r5, [r6, #0]
    b508:	e7eb      	b.n	b4e2 <rtt_console_out+0x3a>
    b50a:	bf00      	nop
    b50c:	20008658 	.word	0x20008658
    b510:	2000c145 	.word	0x2000c145

0000b514 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    b514:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b516:	2340      	movs	r3, #64	; 0x40
{
    b518:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b51a:	490a      	ldr	r1, [pc, #40]	; (b544 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b51c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    b51e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b520:	1149      	asrs	r1, r1, #5
{
    b522:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b524:	4623      	mov	r3, r4
    b526:	4a08      	ldr	r2, [pc, #32]	; (b548 <onoff_start+0x34>)
    b528:	4808      	ldr	r0, [pc, #32]	; (b54c <onoff_start+0x38>)
    b52a:	f00e fe38 	bl	1a19e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    b52e:	1e01      	subs	r1, r0, #0
    b530:	da05      	bge.n	b53e <onoff_start+0x2a>
		notify(mgr, err);
    b532:	4628      	mov	r0, r5
    b534:	4623      	mov	r3, r4
	}
}
    b536:	b003      	add	sp, #12
    b538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    b53c:	4718      	bx	r3
}
    b53e:	b003      	add	sp, #12
    b540:	bd30      	pop	{r4, r5, pc}
    b542:	bf00      	nop
    b544:	2000a60c 	.word	0x2000a60c
    b548:	0001a211 	.word	0x0001a211
    b54c:	20008578 	.word	0x20008578

0000b550 <get_status>:
{
    b550:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b552:	b2cc      	uxtb	r4, r1
    b554:	2c03      	cmp	r4, #3
{
    b556:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b558:	d908      	bls.n	b56c <get_status+0x1c>
    b55a:	4909      	ldr	r1, [pc, #36]	; (b580 <get_status+0x30>)
    b55c:	4809      	ldr	r0, [pc, #36]	; (b584 <get_status+0x34>)
    b55e:	227e      	movs	r2, #126	; 0x7e
    b560:	f00e fad3 	bl	19b0a <printk>
    b564:	217e      	movs	r1, #126	; 0x7e
    b566:	4806      	ldr	r0, [pc, #24]	; (b580 <get_status+0x30>)
    b568:	f00e fd75 	bl	1a056 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b56c:	230c      	movs	r3, #12
    b56e:	68e9      	ldr	r1, [r5, #12]
    b570:	fb04 1403 	mla	r4, r4, r3, r1
    b574:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    b578:	f000 0007 	and.w	r0, r0, #7
    b57c:	bd38      	pop	{r3, r4, r5, pc}
    b57e:	bf00      	nop
    b580:	0001f0a5 	.word	0x0001f0a5
    b584:	0001ecfc 	.word	0x0001ecfc

0000b588 <stop>:
{
    b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b58a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b58c:	2c03      	cmp	r4, #3
{
    b58e:	4605      	mov	r5, r0
    b590:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    b592:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b594:	d90a      	bls.n	b5ac <stop+0x24>
    b596:	4919      	ldr	r1, [pc, #100]	; (b5fc <stop+0x74>)
    b598:	4819      	ldr	r0, [pc, #100]	; (b600 <stop+0x78>)
    b59a:	f240 1253 	movw	r2, #339	; 0x153
    b59e:	f00e fab4 	bl	19b0a <printk>
    b5a2:	f240 1153 	movw	r1, #339	; 0x153
    b5a6:	4815      	ldr	r0, [pc, #84]	; (b5fc <stop+0x74>)
    b5a8:	f00e fd55 	bl	1a056 <assert_post_action>
	__asm__ volatile(
    b5ac:	f04f 0320 	mov.w	r3, #32
    b5b0:	f3ef 8111 	mrs	r1, BASEPRI
    b5b4:	f383 8811 	msr	BASEPRI, r3
    b5b8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b5bc:	220c      	movs	r2, #12
    b5be:	fb02 6304 	mla	r3, r2, r4, r6
    b5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b5c6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b5ca:	d001      	beq.n	b5d0 <stop+0x48>
    b5cc:	429f      	cmp	r7, r3
    b5ce:	d112      	bne.n	b5f6 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b5d0:	2301      	movs	r3, #1
	int err = 0;
    b5d2:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b5d4:	fb02 6604 	mla	r6, r2, r4, r6
    b5d8:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    b5dc:	f381 8811 	msr	BASEPRI, r1
    b5e0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b5e4:	b930      	cbnz	r0, b5f4 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    b5e6:	230c      	movs	r3, #12
    b5e8:	6869      	ldr	r1, [r5, #4]
    b5ea:	fb03 1404 	mla	r4, r3, r4, r1
    b5ee:	6863      	ldr	r3, [r4, #4]
    b5f0:	4798      	blx	r3
	return 0;
    b5f2:	2000      	movs	r0, #0
}
    b5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    b5f6:	f04f 30ff 	mov.w	r0, #4294967295
    b5fa:	e7ef      	b.n	b5dc <stop+0x54>
    b5fc:	0001f0a5 	.word	0x0001f0a5
    b600:	0001ecfc 	.word	0x0001ecfc

0000b604 <onoff_stop>:
{
    b604:	b570      	push	{r4, r5, r6, lr}
    b606:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b608:	4906      	ldr	r1, [pc, #24]	; (b624 <onoff_stop+0x20>)
{
    b60a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    b60c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b60e:	1149      	asrs	r1, r1, #5
    b610:	2240      	movs	r2, #64	; 0x40
    b612:	4805      	ldr	r0, [pc, #20]	; (b628 <onoff_stop+0x24>)
    b614:	f7ff ffb8 	bl	b588 <stop>
	notify(mgr, res);
    b618:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b61a:	4601      	mov	r1, r0
	notify(mgr, res);
    b61c:	4620      	mov	r0, r4
}
    b61e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    b622:	4718      	bx	r3
    b624:	2000a60c 	.word	0x2000a60c
    b628:	20008578 	.word	0x20008578

0000b62c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    b62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b630:	2200      	movs	r2, #0
    b632:	2101      	movs	r1, #1
{
    b634:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b636:	2005      	movs	r0, #5
    b638:	f001 fc50 	bl	cedc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    b63c:	2005      	movs	r0, #5
    b63e:	f001 fc2f 	bl	cea0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    b642:	4811      	ldr	r0, [pc, #68]	; (b688 <clk_init+0x5c>)
    b644:	f00a fc2e 	bl	15ea4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    b648:	4b10      	ldr	r3, [pc, #64]	; (b68c <clk_init+0x60>)
    b64a:	4298      	cmp	r0, r3
    b64c:	d119      	bne.n	b682 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    b64e:	f00a fc49 	bl	15ee4 <nrfx_clock_enable>
    b652:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b654:	f04f 080c 	mov.w	r8, #12
    b658:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b65a:	f8df 9034 	ldr.w	r9, [pc, #52]	; b690 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    b65e:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b660:	4649      	mov	r1, r9
    b662:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    b666:	f00e faab 	bl	19bc0 <onoff_manager_init>
		if (err < 0) {
    b66a:	2800      	cmp	r0, #0
    b66c:	db07      	blt.n	b67e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b66e:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    b672:	3401      	adds	r4, #1
    b674:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b676:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    b67a:	d1f0      	bne.n	b65e <clk_init+0x32>
	}

	return 0;
    b67c:	2000      	movs	r0, #0
}
    b67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    b682:	f06f 0004 	mvn.w	r0, #4
    b686:	e7fa      	b.n	b67e <clk_init+0x52>
    b688:	0000b6cd 	.word	0x0000b6cd
    b68c:	0bad0000 	.word	0x0bad0000
    b690:	0001dbf4 	.word	0x0001dbf4

0000b694 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    b694:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    b696:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    b698:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    b69a:	434b      	muls	r3, r1
    b69c:	4809      	ldr	r0, [pc, #36]	; (b6c4 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    b69e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    b6a0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    b6a2:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    b6a4:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    b6a8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    b6aa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    b6ae:	f00e fd63 	bl	1a178 <set_on_state>
	if (callback) {
    b6b2:	b12d      	cbz	r5, b6c0 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b6b4:	4632      	mov	r2, r6
    b6b6:	462b      	mov	r3, r5
}
    b6b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    b6bc:	4802      	ldr	r0, [pc, #8]	; (b6c8 <clkstarted_handle.constprop.0+0x34>)
    b6be:	4718      	bx	r3
}
    b6c0:	bd70      	pop	{r4, r5, r6, pc}
    b6c2:	bf00      	nop
    b6c4:	2000a60c 	.word	0x2000a60c
    b6c8:	20008578 	.word	0x20008578

0000b6cc <clock_event_handler>:
{
    b6cc:	b508      	push	{r3, lr}
    b6ce:	2805      	cmp	r0, #5
    b6d0:	d821      	bhi.n	b716 <clock_event_handler+0x4a>
    b6d2:	e8df f000 	tbb	[pc, r0]
    b6d6:	1103      	.short	0x1103
    b6d8:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    b6dc:	4b13      	ldr	r3, [pc, #76]	; (b72c <clock_event_handler+0x60>)
    b6de:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    b6e2:	f010 0007 	ands.w	r0, r0, #7
    b6e6:	d11f      	bne.n	b728 <clock_event_handler+0x5c>
}
    b6e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    b6ec:	f7ff bfd2 	b.w	b694 <clkstarted_handle.constprop.0>
    b6f0:	2002      	movs	r0, #2
    b6f2:	e7f9      	b.n	b6e8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    b6f4:	2003      	movs	r0, #3
    b6f6:	e7f7      	b.n	b6e8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    b6f8:	2001      	movs	r0, #1
    b6fa:	e7f5      	b.n	b6e8 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    b6fc:	490c      	ldr	r1, [pc, #48]	; (b730 <clock_event_handler+0x64>)
    b6fe:	f240 2266 	movw	r2, #614	; 0x266
    b702:	480c      	ldr	r0, [pc, #48]	; (b734 <clock_event_handler+0x68>)
    b704:	f00e fa01 	bl	19b0a <printk>
    b708:	f240 2166 	movw	r1, #614	; 0x266
}
    b70c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    b710:	4807      	ldr	r0, [pc, #28]	; (b730 <clock_event_handler+0x64>)
    b712:	f00e bca0 	b.w	1a056 <assert_post_action>
    b716:	4906      	ldr	r1, [pc, #24]	; (b730 <clock_event_handler+0x64>)
    b718:	f240 226a 	movw	r2, #618	; 0x26a
    b71c:	4805      	ldr	r0, [pc, #20]	; (b734 <clock_event_handler+0x68>)
    b71e:	f00e f9f4 	bl	19b0a <printk>
    b722:	f240 216a 	movw	r1, #618	; 0x26a
    b726:	e7f1      	b.n	b70c <clock_event_handler+0x40>
}
    b728:	bd08      	pop	{r3, pc}
    b72a:	bf00      	nop
    b72c:	2000a60c 	.word	0x2000a60c
    b730:	0001f0a5 	.word	0x0001f0a5
    b734:	0001ecfc 	.word	0x0001ecfc

0000b738 <generic_hfclk_start>:
{
    b738:	b508      	push	{r3, lr}
	__asm__ volatile(
    b73a:	f04f 0320 	mov.w	r3, #32
    b73e:	f3ef 8111 	mrs	r1, BASEPRI
    b742:	f383 8811 	msr	BASEPRI, r3
    b746:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    b74a:	4a11      	ldr	r2, [pc, #68]	; (b790 <generic_hfclk_start+0x58>)
    b74c:	6813      	ldr	r3, [r2, #0]
    b74e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    b752:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    b756:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    b758:	d00b      	beq.n	b772 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b75a:	4a0e      	ldr	r2, [pc, #56]	; (b794 <generic_hfclk_start+0x5c>)
    b75c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b760:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    b764:	f013 0301 	ands.w	r3, r3, #1
    b768:	d003      	beq.n	b772 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    b76a:	480b      	ldr	r0, [pc, #44]	; (b798 <generic_hfclk_start+0x60>)
    b76c:	f00e fd04 	bl	1a178 <set_on_state>
			already_started = true;
    b770:	2301      	movs	r3, #1
	__asm__ volatile(
    b772:	f381 8811 	msr	BASEPRI, r1
    b776:	f3bf 8f6f 	isb	sy
	if (already_started) {
    b77a:	b123      	cbz	r3, b786 <generic_hfclk_start+0x4e>
}
    b77c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    b780:	2000      	movs	r0, #0
    b782:	f7ff bf87 	b.w	b694 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b786:	2001      	movs	r0, #1
}
    b788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b78c:	f00a bbce 	b.w	15f2c <nrfx_clock_start>
    b790:	2000a6bc 	.word	0x2000a6bc
    b794:	40005000 	.word	0x40005000
    b798:	2000a694 	.word	0x2000a694

0000b79c <api_blocking_start>:
{
    b79c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b79e:	2200      	movs	r2, #0
    b7a0:	2301      	movs	r3, #1
    b7a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b7a6:	ab04      	add	r3, sp, #16
    b7a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b7ac:	4a09      	ldr	r2, [pc, #36]	; (b7d4 <api_blocking_start+0x38>)
    b7ae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b7b0:	f8cd d000 	str.w	sp, [sp]
    b7b4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b7b8:	f00e fd23 	bl	1a202 <api_start>
	if (err < 0) {
    b7bc:	2800      	cmp	r0, #0
    b7be:	db05      	blt.n	b7cc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    b7c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b7c4:	2300      	movs	r3, #0
    b7c6:	4668      	mov	r0, sp
    b7c8:	f00d f806 	bl	187d8 <z_impl_k_sem_take>
}
    b7cc:	b007      	add	sp, #28
    b7ce:	f85d fb04 	ldr.w	pc, [sp], #4
    b7d2:	bf00      	nop
    b7d4:	0001a247 	.word	0x0001a247

0000b7d8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b7d8:	4b07      	ldr	r3, [pc, #28]	; (b7f8 <generic_hfclk_stop+0x20>)
    b7da:	e8d3 2fef 	ldaex	r2, [r3]
    b7de:	f022 0102 	bic.w	r1, r2, #2
    b7e2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    b7e6:	2800      	cmp	r0, #0
    b7e8:	d1f7      	bne.n	b7da <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    b7ea:	07d3      	lsls	r3, r2, #31
    b7ec:	d402      	bmi.n	b7f4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b7ee:	2001      	movs	r0, #1
    b7f0:	f00a bc06 	b.w	16000 <nrfx_clock_stop>
}
    b7f4:	4770      	bx	lr
    b7f6:	bf00      	nop
    b7f8:	2000a6bc 	.word	0x2000a6bc

0000b7fc <z_nrf_clock_control_lf_on>:
{
    b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b800:	2201      	movs	r2, #1
    b802:	4606      	mov	r6, r0
    b804:	4942      	ldr	r1, [pc, #264]	; (b910 <z_nrf_clock_control_lf_on+0x114>)
    b806:	e8d1 3fef 	ldaex	r3, [r1]
    b80a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b80e:	2800      	cmp	r0, #0
    b810:	d1f9      	bne.n	b806 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    b812:	b99b      	cbnz	r3, b83c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    b814:	493f      	ldr	r1, [pc, #252]	; (b914 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    b816:	4840      	ldr	r0, [pc, #256]	; (b918 <z_nrf_clock_control_lf_on+0x11c>)
    b818:	604b      	str	r3, [r1, #4]
    b81a:	60cb      	str	r3, [r1, #12]
    b81c:	608a      	str	r2, [r1, #8]
    b81e:	f7fe fdd7 	bl	a3d0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    b822:	2800      	cmp	r0, #0
    b824:	da0a      	bge.n	b83c <z_nrf_clock_control_lf_on+0x40>
    b826:	493d      	ldr	r1, [pc, #244]	; (b91c <z_nrf_clock_control_lf_on+0x120>)
    b828:	483d      	ldr	r0, [pc, #244]	; (b920 <z_nrf_clock_control_lf_on+0x124>)
    b82a:	f240 2226 	movw	r2, #550	; 0x226
    b82e:	f00e f96c 	bl	19b0a <printk>
    b832:	f240 2126 	movw	r1, #550	; 0x226
    b836:	4839      	ldr	r0, [pc, #228]	; (b91c <z_nrf_clock_control_lf_on+0x120>)
    b838:	f00e fc0d 	bl	1a056 <assert_post_action>
	switch (start_mode) {
    b83c:	b386      	cbz	r6, b8a0 <z_nrf_clock_control_lf_on+0xa4>
    b83e:	1e73      	subs	r3, r6, #1
    b840:	2b01      	cmp	r3, #1
    b842:	d852      	bhi.n	b8ea <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    b844:	2e01      	cmp	r6, #1
    b846:	d106      	bne.n	b856 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b848:	4b36      	ldr	r3, [pc, #216]	; (b924 <z_nrf_clock_control_lf_on+0x128>)
    b84a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    b84e:	f003 0303 	and.w	r3, r3, #3
    b852:	2b02      	cmp	r3, #2
    b854:	d024      	beq.n	b8a0 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b856:	f011 fd3d 	bl	1d2d4 <k_is_in_isr>
    b85a:	4604      	mov	r4, r0
    b85c:	b918      	cbnz	r0, b866 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    b85e:	4b32      	ldr	r3, [pc, #200]	; (b928 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	2b00      	cmp	r3, #0
    b864:	d14e      	bne.n	b904 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    b866:	f04f 0320 	mov.w	r3, #32
    b86a:	f3ef 8711 	mrs	r7, BASEPRI
    b86e:	f383 8811 	msr	BASEPRI, r3
    b872:	f3bf 8f6f 	isb	sy
    b876:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b878:	4d2a      	ldr	r5, [pc, #168]	; (b924 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b87a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b92c <z_nrf_clock_control_lf_on+0x130>
    b87e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b882:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    b886:	03d2      	lsls	r2, r2, #15
    b888:	d50c      	bpl.n	b8a4 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    b88a:	f003 0303 	and.w	r3, r3, #3
    b88e:	2b02      	cmp	r3, #2
    b890:	d001      	beq.n	b896 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    b892:	2e01      	cmp	r6, #1
    b894:	d106      	bne.n	b8a4 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    b896:	b324      	cbz	r4, b8e2 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    b898:	f387 8811 	msr	BASEPRI, r7
    b89c:	f3bf 8f6f 	isb	sy
}
    b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    b8a4:	b1c4      	cbz	r4, b8d8 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    b8a6:	4638      	mov	r0, r7
    b8a8:	f001 fb88 	bl	cfbc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    b8ac:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    b8b0:	b2db      	uxtb	r3, r3
    b8b2:	2b01      	cmp	r3, #1
    b8b4:	d1e3      	bne.n	b87e <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b8b6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    b8ba:	2a00      	cmp	r2, #0
    b8bc:	d0df      	beq.n	b87e <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b8be:	2200      	movs	r2, #0
    b8c0:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    b8c4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    b8c8:	2202      	movs	r2, #2
    b8ca:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    b8ce:	2220      	movs	r2, #32
    b8d0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b8d4:	60ab      	str	r3, [r5, #8]
}
    b8d6:	e7d2      	b.n	b87e <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    b8d8:	2100      	movs	r1, #0
    b8da:	2021      	movs	r0, #33	; 0x21
    b8dc:	f00c ff0a 	bl	186f4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b8e0:	e7e4      	b.n	b8ac <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    b8e2:	2302      	movs	r3, #2
    b8e4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    b8e8:	e7da      	b.n	b8a0 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    b8ea:	490c      	ldr	r1, [pc, #48]	; (b91c <z_nrf_clock_control_lf_on+0x120>)
    b8ec:	480c      	ldr	r0, [pc, #48]	; (b920 <z_nrf_clock_control_lf_on+0x124>)
    b8ee:	f44f 720e 	mov.w	r2, #568	; 0x238
    b8f2:	f00e f90a 	bl	19b0a <printk>
}
    b8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    b8fa:	f44f 710e 	mov.w	r1, #568	; 0x238
    b8fe:	4807      	ldr	r0, [pc, #28]	; (b91c <z_nrf_clock_control_lf_on+0x120>)
    b900:	f00e bba9 	b.w	1a056 <assert_post_action>
    p_reg->INTENCLR = mask;
    b904:	2202      	movs	r2, #2
    b906:	4b07      	ldr	r3, [pc, #28]	; (b924 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    b908:	4607      	mov	r7, r0
    b90a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b90e:	e7b3      	b.n	b878 <z_nrf_clock_control_lf_on+0x7c>
    b910:	2000a6c0 	.word	0x2000a6c0
    b914:	2000a5fc 	.word	0x2000a5fc
    b918:	2000a62c 	.word	0x2000a62c
    b91c:	0001f0a5 	.word	0x0001f0a5
    b920:	0001ecfc 	.word	0x0001ecfc
    b924:	40005000 	.word	0x40005000
    b928:	2000c63b 	.word	0x2000c63b
    b92c:	e000e100 	.word	0xe000e100

0000b930 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    b930:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    b932:	f000 f905 	bl	bb40 <bt_rpmsg_platform_init>
	if (err < 0) {
    b936:	1e04      	subs	r4, r0, #0
    b938:	da06      	bge.n	b948 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    b93a:	4622      	mov	r2, r4
    b93c:	2145      	movs	r1, #69	; 0x45
    b93e:	4807      	ldr	r0, [pc, #28]	; (b95c <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    b940:	f00e f8e3 	bl	19b0a <printk>
	}

	return err;
}
    b944:	4620      	mov	r0, r4
    b946:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    b948:	4805      	ldr	r0, [pc, #20]	; (b960 <bt_rpmsg_init+0x30>)
    b94a:	f003 fdbb 	bl	f4c4 <bt_hci_driver_register>
	if (err < 0) {
    b94e:	1e04      	subs	r4, r0, #0
    b950:	daf8      	bge.n	b944 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    b952:	4622      	mov	r2, r4
    b954:	2145      	movs	r1, #69	; 0x45
    b956:	4803      	ldr	r0, [pc, #12]	; (b964 <bt_rpmsg_init+0x34>)
    b958:	e7f2      	b.n	b940 <bt_rpmsg_init+0x10>
    b95a:	bf00      	nop
    b95c:	0001f117 	.word	0x0001f117
    b960:	0001dc00 	.word	0x0001dc00
    b964:	0001f143 	.word	0x0001f143

0000b968 <bt_rpmsg_send>:
{
    b968:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    b96a:	7d02      	ldrb	r2, [r0, #20]
    b96c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    b96e:	2a02      	cmp	r2, #2
    b970:	d00c      	beq.n	b98c <bt_rpmsg_send+0x24>
    b972:	2a04      	cmp	r2, #4
    b974:	d009      	beq.n	b98a <bt_rpmsg_send+0x22>
    b976:	b1b2      	cbz	r2, b9a6 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    b978:	2145      	movs	r1, #69	; 0x45
    b97a:	480c      	ldr	r0, [pc, #48]	; (b9ac <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    b97c:	f00e f8c5 	bl	19b0a <printk>
	net_buf_unref(buf);
    b980:	4620      	mov	r0, r4
    b982:	f009 f84f 	bl	14a24 <net_buf_unref>
}
    b986:	2000      	movs	r0, #0
    b988:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    b98a:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    b98c:	4611      	mov	r1, r2
    b98e:	f104 0008 	add.w	r0, r4, #8
    b992:	f010 fdd9 	bl	1c548 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    b996:	4620      	mov	r0, r4
    b998:	f000 f8ee 	bl	bb78 <bt_rpmsg_platform_send>
	if (err < 0) {
    b99c:	1e02      	subs	r2, r0, #0
    b99e:	daef      	bge.n	b980 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    b9a0:	2145      	movs	r1, #69	; 0x45
    b9a2:	4803      	ldr	r0, [pc, #12]	; (b9b0 <bt_rpmsg_send+0x48>)
    b9a4:	e7ea      	b.n	b97c <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    b9a6:	2201      	movs	r2, #1
    b9a8:	e7f0      	b.n	b98c <bt_rpmsg_send+0x24>
    b9aa:	bf00      	nop
    b9ac:	0001f172 	.word	0x0001f172
    b9b0:	0001f187 	.word	0x0001f187

0000b9b4 <bt_rpmsg_rx>:
{
    b9b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    b9b8:	4680      	mov	r8, r0
{
    b9ba:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    b9bc:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    b9c0:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    b9c2:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    b9c4:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    b9c8:	d009      	beq.n	b9de <bt_rpmsg_rx+0x2a>
    b9ca:	2805      	cmp	r0, #5
    b9cc:	d074      	beq.n	bab8 <bt_rpmsg_rx+0x104>
    b9ce:	2802      	cmp	r0, #2
    b9d0:	f040 8099 	bne.w	bb06 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    b9d4:	2b03      	cmp	r3, #3
    b9d6:	d84a      	bhi.n	ba6e <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    b9d8:	2145      	movs	r1, #69	; 0x45
    b9da:	484f      	ldr	r0, [pc, #316]	; (bb18 <bt_rpmsg_rx+0x164>)
    b9dc:	e003      	b.n	b9e6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    b9de:	2b01      	cmp	r3, #1
    b9e0:	d806      	bhi.n	b9f0 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    b9e2:	2145      	movs	r1, #69	; 0x45
    b9e4:	484d      	ldr	r0, [pc, #308]	; (bb1c <bt_rpmsg_rx+0x168>)
}
    b9e6:	b002      	add	sp, #8
    b9e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    b9ec:	f00e b88d 	b.w	19b0a <printk>
	switch (evt_type) {
    b9f0:	7873      	ldrb	r3, [r6, #1]
    b9f2:	2b3e      	cmp	r3, #62	; 0x3e
    b9f4:	d117      	bne.n	ba26 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    b9f6:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    b9f8:	2f02      	cmp	r7, #2
    b9fa:	d016      	beq.n	ba2a <bt_rpmsg_rx+0x76>
    b9fc:	f1a7 030d 	sub.w	r3, r7, #13
    ba00:	425f      	negs	r7, r3
    ba02:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    ba04:	2202      	movs	r2, #2
    ba06:	4641      	mov	r1, r8
    ba08:	a801      	add	r0, sp, #4
    ba0a:	f00f fabe 	bl	1af8a <memcpy>
	if (remaining != hdr.len) {
    ba0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    ba12:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    ba14:	429d      	cmp	r5, r3
    ba16:	d00a      	beq.n	ba2e <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    ba18:	2145      	movs	r1, #69	; 0x45
    ba1a:	4841      	ldr	r0, [pc, #260]	; (bb20 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    ba1c:	f00e f875 	bl	19b0a <printk>
}
    ba20:	b002      	add	sp, #8
    ba22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    ba26:	2700      	movs	r7, #0
    ba28:	e7ec      	b.n	ba04 <bt_rpmsg_rx+0x50>
			return true;
    ba2a:	2701      	movs	r7, #1
    ba2c:	e7ea      	b.n	ba04 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    ba2e:	2200      	movs	r2, #0
    ba30:	2300      	movs	r3, #0
    ba32:	4639      	mov	r1, r7
    ba34:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ba38:	f002 f96e 	bl	dd18 <bt_buf_get_evt>
	if (!buf) {
    ba3c:	4604      	mov	r4, r0
    ba3e:	b920      	cbnz	r0, ba4a <bt_rpmsg_rx+0x96>
		if (discardable) {
    ba40:	2f00      	cmp	r7, #0
    ba42:	d1ed      	bne.n	ba20 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    ba44:	2145      	movs	r1, #69	; 0x45
    ba46:	4837      	ldr	r0, [pc, #220]	; (bb24 <bt_rpmsg_rx+0x170>)
    ba48:	e7e8      	b.n	ba1c <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ba4a:	f100 0708 	add.w	r7, r0, #8
    ba4e:	2202      	movs	r2, #2
    ba50:	a901      	add	r1, sp, #4
    ba52:	4638      	mov	r0, r7
    ba54:	f010 fd9b 	bl	1c58e <net_buf_simple_add_mem>
    ba58:	462a      	mov	r2, r5
    ba5a:	1cf1      	adds	r1, r6, #3
    ba5c:	4638      	mov	r0, r7
    ba5e:	f010 fd96 	bl	1c58e <net_buf_simple_add_mem>
		bt_recv(buf);
    ba62:	4620      	mov	r0, r4
}
    ba64:	b002      	add	sp, #8
    ba66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    ba6a:	f003 bd01 	b.w	f470 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    ba6e:	2200      	movs	r2, #0
    ba70:	2300      	movs	r3, #0
    ba72:	2003      	movs	r0, #3
    ba74:	f002 f8fe 	bl	dc74 <bt_buf_get_rx>
	if (buf) {
    ba78:	4604      	mov	r4, r0
    ba7a:	b1d0      	cbz	r0, bab2 <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    ba7c:	2204      	movs	r2, #4
    ba7e:	4641      	mov	r1, r8
    ba80:	eb0d 0002 	add.w	r0, sp, r2
    ba84:	f00f fa81 	bl	1af8a <memcpy>
    ba88:	2204      	movs	r2, #4
    ba8a:	f104 0708 	add.w	r7, r4, #8
    ba8e:	4638      	mov	r0, r7
    ba90:	eb0d 0102 	add.w	r1, sp, r2
    ba94:	f010 fd7b 	bl	1c58e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    ba98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    ba9c:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    ba9e:	429d      	cmp	r5, r3
    baa0:	d02e      	beq.n	bb00 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    baa2:	2145      	movs	r1, #69	; 0x45
    baa4:	4820      	ldr	r0, [pc, #128]	; (bb28 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    baa6:	f00e f830 	bl	19b0a <printk>
		net_buf_unref(buf);
    baaa:	4620      	mov	r0, r4
    baac:	f008 ffba 	bl	14a24 <net_buf_unref>
	if (buf) {
    bab0:	e7b6      	b.n	ba20 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    bab2:	2145      	movs	r1, #69	; 0x45
    bab4:	481d      	ldr	r0, [pc, #116]	; (bb2c <bt_rpmsg_rx+0x178>)
    bab6:	e796      	b.n	b9e6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    bab8:	2b03      	cmp	r3, #3
    baba:	d802      	bhi.n	bac2 <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    babc:	2145      	movs	r1, #69	; 0x45
    babe:	481c      	ldr	r0, [pc, #112]	; (bb30 <bt_rpmsg_rx+0x17c>)
    bac0:	e791      	b.n	b9e6 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    bac2:	2200      	movs	r2, #0
    bac4:	2300      	movs	r3, #0
    bac6:	f002 f8d5 	bl	dc74 <bt_buf_get_rx>
	if (buf) {
    baca:	4604      	mov	r4, r0
    bacc:	b1a8      	cbz	r0, bafa <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    bace:	2204      	movs	r2, #4
    bad0:	4641      	mov	r1, r8
    bad2:	eb0d 0002 	add.w	r0, sp, r2
    bad6:	f00f fa58 	bl	1af8a <memcpy>
    bada:	2204      	movs	r2, #4
    badc:	f104 0708 	add.w	r7, r4, #8
    bae0:	4638      	mov	r0, r7
    bae2:	eb0d 0102 	add.w	r1, sp, r2
    bae6:	f010 fd52 	bl	1c58e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    baea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    baee:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    baf0:	429d      	cmp	r5, r3
    baf2:	d005      	beq.n	bb00 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    baf4:	2145      	movs	r1, #69	; 0x45
    baf6:	480f      	ldr	r0, [pc, #60]	; (bb34 <bt_rpmsg_rx+0x180>)
    baf8:	e7d5      	b.n	baa6 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    bafa:	2145      	movs	r1, #69	; 0x45
    bafc:	480e      	ldr	r0, [pc, #56]	; (bb38 <bt_rpmsg_rx+0x184>)
    bafe:	e772      	b.n	b9e6 <bt_rpmsg_rx+0x32>
    bb00:	462a      	mov	r2, r5
    bb02:	1d71      	adds	r1, r6, #5
    bb04:	e7aa      	b.n	ba5c <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    bb06:	4602      	mov	r2, r0
    bb08:	2145      	movs	r1, #69	; 0x45
    bb0a:	480c      	ldr	r0, [pc, #48]	; (bb3c <bt_rpmsg_rx+0x188>)
}
    bb0c:	b002      	add	sp, #8
    bb0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    bb12:	f00d bffa 	b.w	19b0a <printk>
    bb16:	bf00      	nop
    bb18:	0001f214 	.word	0x0001f214
    bb1c:	0001f1a4 	.word	0x0001f1a4
    bb20:	0001f1ca 	.word	0x0001f1ca
    bb24:	0001f1f3 	.word	0x0001f1f3
    bb28:	0001f257 	.word	0x0001f257
    bb2c:	0001f238 	.word	0x0001f238
    bb30:	0001f27e 	.word	0x0001f27e
    bb34:	0001f2c1 	.word	0x0001f2c1
    bb38:	0001f2a2 	.word	0x0001f2a2
    bb3c:	0001f2e8 	.word	0x0001f2e8

0000bb40 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    bb40:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    bb42:	4908      	ldr	r1, [pc, #32]	; (bb64 <bt_rpmsg_platform_init+0x24>)
    bb44:	4808      	ldr	r0, [pc, #32]	; (bb68 <bt_rpmsg_platform_init+0x28>)
    bb46:	f7ff fb89 	bl	b25c <rpmsg_service_register_endpoint>

	if (err < 0) {
    bb4a:	1e02      	subs	r2, r0, #0
    bb4c:	da05      	bge.n	bb5a <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    bb4e:	4807      	ldr	r0, [pc, #28]	; (bb6c <bt_rpmsg_platform_init+0x2c>)
    bb50:	2145      	movs	r1, #69	; 0x45
    bb52:	f00d ffda 	bl	19b0a <printk>
		return RPMSG_ERR_INIT;
    bb56:	4806      	ldr	r0, [pc, #24]	; (bb70 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    bb58:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    bb5a:	4b06      	ldr	r3, [pc, #24]	; (bb74 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    bb5c:	2000      	movs	r0, #0
	endpoint_id = err;
    bb5e:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    bb60:	e7fa      	b.n	bb58 <bt_rpmsg_platform_init+0x18>
    bb62:	bf00      	nop
    bb64:	0001a263 	.word	0x0001a263
    bb68:	0001f315 	.word	0x0001f315
    bb6c:	0001f320 	.word	0x0001f320
    bb70:	fffff82a 	.word	0xfffff82a
    bb74:	2000a6c4 	.word	0x2000a6c4

0000bb78 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    bb78:	4b02      	ldr	r3, [pc, #8]	; (bb84 <bt_rpmsg_platform_send+0xc>)
    bb7a:	8982      	ldrh	r2, [r0, #12]
    bb7c:	6881      	ldr	r1, [r0, #8]
    bb7e:	6818      	ldr	r0, [r3, #0]
    bb80:	f7ff bb98 	b.w	b2b4 <rpmsg_service_send>
    bb84:	2000a6c4 	.word	0x2000a6c4

0000bb88 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    bb88:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    bb8a:	4b02      	ldr	r3, [pc, #8]	; (bb94 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    bb8c:	6818      	ldr	r0, [r3, #0]
    bb8e:	f7ff fb87 	bl	b2a0 <rpmsg_service_endpoint_is_bound>
}
    bb92:	bd08      	pop	{r3, pc}
    bb94:	2000a6c4 	.word	0x2000a6c4

0000bb98 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    bb98:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    bb9a:	4c06      	ldr	r4, [pc, #24]	; (bbb4 <z_clock_isr+0x1c>)
    bb9c:	4806      	ldr	r0, [pc, #24]	; (bbb8 <z_clock_isr+0x20>)
    bb9e:	4621      	mov	r1, r4
    bba0:	2217      	movs	r2, #23
    bba2:	f00d ffb2 	bl	19b0a <printk>
    bba6:	4620      	mov	r0, r4
}
    bba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    bbac:	2117      	movs	r1, #23
    bbae:	f00e ba52 	b.w	1a056 <assert_post_action>
    bbb2:	bf00      	nop
    bbb4:	0001f35d 	.word	0x0001f35d
    bbb8:	0001ecfc 	.word	0x0001ecfc

0000bbbc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    bbbc:	4a04      	ldr	r2, [pc, #16]	; (bbd0 <sys_clock_timeout_handler+0x14>)
    bbbe:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    bbc0:	1ac8      	subs	r0, r1, r3
    bbc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    bbc6:	4403      	add	r3, r0
    bbc8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    bbca:	f00d baa9 	b.w	19120 <z_clock_announce>
    bbce:	bf00      	nop
    bbd0:	2000a6d4 	.word	0x2000a6d4

0000bbd4 <set_absolute_alarm>:
{
    bbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bbd8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bbdc:	f04f 0900 	mov.w	r9, #0
    bbe0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    bbe2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    bbe6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    bbea:	00a4      	lsls	r4, r4, #2
    bbec:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    bbf0:	b2a4      	uxth	r4, r4
    bbf2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    bbf6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    bbfa:	f8df 806c 	ldr.w	r8, [pc, #108]	; bc68 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    bbfe:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bc02:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bc06:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    bc08:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    bc0c:	eba3 030a 	sub.w	r3, r3, sl
    bc10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    bc14:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    bc18:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    bc1a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    bc1e:	d102      	bne.n	bc26 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    bc20:	2013      	movs	r0, #19
    bc22:	f011 fb5d 	bl	1d2e0 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    bc26:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    bc2a:	1aab      	subs	r3, r5, r2
    bc2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    bc30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    bc34:	bf88      	it	hi
    bc36:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bc38:	f8c4 9000 	str.w	r9, [r4]
    bc3c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    bc3e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    bc42:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    bc46:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    bc4a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    bc4e:	459a      	cmp	sl, r3
    bc50:	d006      	beq.n	bc60 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    bc52:	1aeb      	subs	r3, r5, r3
    bc54:	3b02      	subs	r3, #2
    bc56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    bc5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    bc5e:	d801      	bhi.n	bc64 <set_absolute_alarm+0x90>
}
    bc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    bc64:	462b      	mov	r3, r5
    bc66:	e7cf      	b.n	bc08 <set_absolute_alarm+0x34>
    bc68:	40015000 	.word	0x40015000

0000bc6c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bc6e:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bc70:	462f      	mov	r7, r5
    bc72:	4c10      	ldr	r4, [pc, #64]	; (bcb4 <rtc_nrf_isr+0x48>)
    bc74:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    bc76:	4b10      	ldr	r3, [pc, #64]	; (bcb8 <rtc_nrf_isr+0x4c>)
    bc78:	b105      	cbz	r5, bc7c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    bc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc7c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    bc80:	03d2      	lsls	r2, r2, #15
    bc82:	d5fa      	bpl.n	bc7a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bc84:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    bc88:	2a00      	cmp	r2, #0
    bc8a:	d0f6      	beq.n	bc7a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bc8c:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    bc90:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    bc94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bc98:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bc9c:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    bc9e:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    bca2:	b126      	cbz	r6, bcae <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    bca4:	2000      	movs	r0, #0
    bca6:	6862      	ldr	r2, [r4, #4]
    bca8:	6027      	str	r7, [r4, #0]
    bcaa:	47b0      	blx	r6
    bcac:	e7e2      	b.n	bc74 <rtc_nrf_isr+0x8>
    bcae:	6026      	str	r6, [r4, #0]
}
    bcb0:	e7e3      	b.n	bc7a <rtc_nrf_isr+0xe>
    bcb2:	bf00      	nop
    bcb4:	2000a6c8 	.word	0x2000a6c8
    bcb8:	40015000 	.word	0x40015000

0000bcbc <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    bcbc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    bcbe:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    bcc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    bcc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    bcc8:	4c0c      	ldr	r4, [pc, #48]	; (bcfc <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    bcca:	2101      	movs	r1, #1
    bccc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    bcd0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    bcd4:	4b0a      	ldr	r3, [pc, #40]	; (bd00 <z_clock_driver_init+0x44>)
    bcd6:	2015      	movs	r0, #21
    bcd8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    bcdc:	462a      	mov	r2, r5
    bcde:	f001 f8fd 	bl	cedc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    bce2:	2015      	movs	r0, #21
    bce4:	f001 f8dc 	bl	cea0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    bce8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    bcea:	4a06      	ldr	r2, [pc, #24]	; (bd04 <z_clock_driver_init+0x48>)
    bcec:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    bcee:	2002      	movs	r0, #2
    bcf0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    bcf2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    bcf4:	f7ff fd82 	bl	b7fc <z_nrf_clock_control_lf_on>

	return 0;
}
    bcf8:	4628      	mov	r0, r5
    bcfa:	bd38      	pop	{r3, r4, r5, pc}
    bcfc:	40015000 	.word	0x40015000
    bd00:	e000e100 	.word	0xe000e100
    bd04:	2000a6d0 	.word	0x2000a6d0

0000bd08 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    bd08:	4a13      	ldr	r2, [pc, #76]	; (bd58 <z_clock_set_timeout+0x50>)
    bd0a:	f1b0 3fff 	cmp.w	r0, #4294967295
    bd0e:	bf14      	ite	ne
    bd10:	4603      	movne	r3, r0
    bd12:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    bd14:	3b01      	subs	r3, #1
    bd16:	2b00      	cmp	r3, #0
    bd18:	dd1c      	ble.n	bd54 <z_clock_set_timeout+0x4c>
    bd1a:	4293      	cmp	r3, r2
    bd1c:	bfa8      	it	ge
    bd1e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    bd20:	4a0e      	ldr	r2, [pc, #56]	; (bd5c <z_clock_set_timeout+0x54>)
    bd22:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    bd26:	4a0e      	ldr	r2, [pc, #56]	; (bd60 <z_clock_set_timeout+0x58>)
    bd28:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    bd2a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    bd2c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    bd30:	bf18      	it	ne
    bd32:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    bd34:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    bd38:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    bd3a:	480a      	ldr	r0, [pc, #40]	; (bd64 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    bd3c:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    bd3e:	4a0a      	ldr	r2, [pc, #40]	; (bd68 <z_clock_set_timeout+0x60>)
    bd40:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    bd42:	2000      	movs	r0, #0
    bd44:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    bd46:	4a04      	ldr	r2, [pc, #16]	; (bd58 <z_clock_set_timeout+0x50>)
    bd48:	4293      	cmp	r3, r2
    bd4a:	bf94      	ite	ls
    bd4c:	18c9      	addls	r1, r1, r3
    bd4e:	1889      	addhi	r1, r1, r2
    bd50:	f7ff bf40 	b.w	bbd4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    bd54:	2300      	movs	r3, #0
    bd56:	e7e3      	b.n	bd20 <z_clock_set_timeout+0x18>
    bd58:	007fffff 	.word	0x007fffff
    bd5c:	40015000 	.word	0x40015000
    bd60:	2000a6d4 	.word	0x2000a6d4
    bd64:	0000bbbd 	.word	0x0000bbbd
    bd68:	2000a6c8 	.word	0x2000a6c8

0000bd6c <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    bd6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    bd6e:	f04f 0320 	mov.w	r3, #32
    bd72:	f3ef 8511 	mrs	r5, BASEPRI
    bd76:	f383 8811 	msr	BASEPRI, r3
    bd7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bd7e:	4815      	ldr	r0, [pc, #84]	; (bdd4 <z_clock_elapsed+0x68>)
    bd80:	f00c feda 	bl	18b38 <z_spin_lock_valid>
    bd84:	b940      	cbnz	r0, bd98 <z_clock_elapsed+0x2c>
    bd86:	4914      	ldr	r1, [pc, #80]	; (bdd8 <z_clock_elapsed+0x6c>)
    bd88:	4814      	ldr	r0, [pc, #80]	; (bddc <z_clock_elapsed+0x70>)
    bd8a:	227c      	movs	r2, #124	; 0x7c
    bd8c:	f00d febd 	bl	19b0a <printk>
    bd90:	217c      	movs	r1, #124	; 0x7c
    bd92:	4811      	ldr	r0, [pc, #68]	; (bdd8 <z_clock_elapsed+0x6c>)
    bd94:	f00e f95f 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
    bd98:	480e      	ldr	r0, [pc, #56]	; (bdd4 <z_clock_elapsed+0x68>)
    bd9a:	f00c fee9 	bl	18b70 <z_spin_lock_set_owner>
    bd9e:	4b10      	ldr	r3, [pc, #64]	; (bde0 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bda0:	480c      	ldr	r0, [pc, #48]	; (bdd4 <z_clock_elapsed+0x68>)
    bda2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    bda6:	4b0f      	ldr	r3, [pc, #60]	; (bde4 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    bda8:	681b      	ldr	r3, [r3, #0]
    bdaa:	1ae4      	subs	r4, r4, r3
    bdac:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    bdb0:	f00c fed0 	bl	18b54 <z_spin_unlock_valid>
    bdb4:	b940      	cbnz	r0, bdc8 <z_clock_elapsed+0x5c>
    bdb6:	4908      	ldr	r1, [pc, #32]	; (bdd8 <z_clock_elapsed+0x6c>)
    bdb8:	4808      	ldr	r0, [pc, #32]	; (bddc <z_clock_elapsed+0x70>)
    bdba:	22a7      	movs	r2, #167	; 0xa7
    bdbc:	f00d fea5 	bl	19b0a <printk>
    bdc0:	21a7      	movs	r1, #167	; 0xa7
    bdc2:	4805      	ldr	r0, [pc, #20]	; (bdd8 <z_clock_elapsed+0x6c>)
    bdc4:	f00e f947 	bl	1a056 <assert_post_action>
	__asm__ volatile(
    bdc8:	f385 8811 	msr	BASEPRI, r5
    bdcc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    bdd0:	4620      	mov	r0, r4
    bdd2:	bd38      	pop	{r3, r4, r5, pc}
    bdd4:	2000a6d8 	.word	0x2000a6d8
    bdd8:	0001ed36 	.word	0x0001ed36
    bddc:	0001ecfc 	.word	0x0001ecfc
    bde0:	40015000 	.word	0x40015000
    bde4:	2000a6d4 	.word	0x2000a6d4

0000bde8 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    bde8:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    bdea:	1cc5      	adds	r5, r0, #3
    bdec:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    bdf0:	2d74      	cmp	r5, #116	; 0x74
    bdf2:	d908      	bls.n	be06 <user_data_alloc.constprop.0+0x1e>
    bdf4:	4917      	ldr	r1, [pc, #92]	; (be54 <user_data_alloc.constprop.0+0x6c>)
    bdf6:	4818      	ldr	r0, [pc, #96]	; (be58 <user_data_alloc.constprop.0+0x70>)
    bdf8:	2250      	movs	r2, #80	; 0x50
    bdfa:	f00d fe86 	bl	19b0a <printk>
    bdfe:	2150      	movs	r1, #80	; 0x50
    be00:	4814      	ldr	r0, [pc, #80]	; (be54 <user_data_alloc.constprop.0+0x6c>)
    be02:	f00e f928 	bl	1a056 <assert_post_action>
	return list->head;
    be06:	4c15      	ldr	r4, [pc, #84]	; (be5c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    be08:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    be0c:	b123      	cbz	r3, be18 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    be0e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    be12:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    be14:	2b74      	cmp	r3, #116	; 0x74
    be16:	d919      	bls.n	be4c <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    be18:	2178      	movs	r1, #120	; 0x78
    be1a:	2004      	movs	r0, #4
    be1c:	f00d fd7c 	bl	19918 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    be20:	b178      	cbz	r0, be42 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    be22:	2300      	movs	r3, #0
	return list->tail;
    be24:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    be28:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    be2a:	b95a      	cbnz	r2, be44 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    be2c:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    be30:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    be34:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    be38:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    be3a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    be3c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    be3e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    be42:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    be44:	6010      	str	r0, [r2, #0]
	list->tail = node;
    be46:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    be4a:	e7f1      	b.n	be30 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    be4c:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    be50:	e7f0      	b.n	be34 <user_data_alloc.constprop.0+0x4c>
    be52:	bf00      	nop
    be54:	0001f3ca 	.word	0x0001f3ca
    be58:	0001ecfc 	.word	0x0001ecfc
    be5c:	2000a6dc 	.word	0x2000a6dc

0000be60 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be60:	4808      	ldr	r0, [pc, #32]	; (be84 <discovery_complete.constprop.0+0x24>)
    be62:	f500 739c 	add.w	r3, r0, #312	; 0x138
    be66:	e8d3 2fef 	ldaex	r2, [r3]
    be6a:	f042 0202 	orr.w	r2, r2, #2
    be6e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    be72:	2900      	cmp	r1, #0
    be74:	d1f7      	bne.n	be66 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    be76:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    be7a:	681b      	ldr	r3, [r3, #0]
    be7c:	b10b      	cbz	r3, be82 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    be7e:	6841      	ldr	r1, [r0, #4]
    be80:	4718      	bx	r3
	}
}
    be82:	4770      	bx	lr
    be84:	2000a6dc 	.word	0x2000a6dc

0000be88 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    be88:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    be8a:	4c0b      	ldr	r4, [pc, #44]	; (beb8 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    be8c:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    be8e:	4620      	mov	r0, r4
    be90:	f00e fa0d 	bl	1a2ae <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    be94:	f06f 0101 	mvn.w	r1, #1
    be98:	f504 709c 	add.w	r0, r4, #312	; 0x138
    be9c:	f00e fa1e 	bl	1a2dc <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    bea0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    bea4:	689b      	ldr	r3, [r3, #8]
    bea6:	b12b      	cbz	r3, beb4 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    bea8:	4629      	mov	r1, r5
    beaa:	6862      	ldr	r2, [r4, #4]
    beac:	6820      	ldr	r0, [r4, #0]
	}
}
    beae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    beb2:	4718      	bx	r3
}
    beb4:	bd70      	pop	{r4, r5, r6, pc}
    beb6:	bf00      	nop
    beb8:	2000a6dc 	.word	0x2000a6dc

0000bebc <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bec0:	4c1f      	ldr	r4, [pc, #124]	; (bf40 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bec2:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bec4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bec8:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    beca:	2b22      	cmp	r3, #34	; 0x22
    becc:	d907      	bls.n	bede <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    bece:	2145      	movs	r1, #69	; 0x45
    bed0:	481c      	ldr	r0, [pc, #112]	; (bf44 <attr_store.constprop.0+0x88>)
    bed2:	f00d fe1a 	bl	19b0a <printk>
		return NULL;
    bed6:	2500      	movs	r5, #0
}
    bed8:	4628      	mov	r0, r5
    beda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    bede:	6803      	ldr	r3, [r0, #0]
    bee0:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    bee2:	2b02      	cmp	r3, #2
    bee4:	d80d      	bhi.n	bf02 <attr_store.constprop.0+0x46>
    bee6:	4a18      	ldr	r2, [pc, #96]	; (bf48 <attr_store.constprop.0+0x8c>)
    bee8:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    beec:	eb06 0009 	add.w	r0, r6, r9
    bef0:	f7ff ff7a 	bl	bde8 <user_data_alloc.constprop.0>
	if (!attr_data) {
    bef4:	4605      	mov	r5, r0
    bef6:	b958      	cbnz	r0, bf10 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    bef8:	2145      	movs	r1, #69	; 0x45
    befa:	4814      	ldr	r0, [pc, #80]	; (bf4c <attr_store.constprop.0+0x90>)
    befc:	f00d fe05 	bl	19b0a <printk>
		return NULL;
    bf00:	e7ea      	b.n	bed8 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    bf02:	2145      	movs	r1, #69	; 0x45
    bf04:	4812      	ldr	r0, [pc, #72]	; (bf50 <attr_store.constprop.0+0x94>)
    bf06:	f00d fe00 	bl	19b0a <printk>
    bf0a:	f04f 0900 	mov.w	r9, #0
    bf0e:	e7ed      	b.n	beec <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    bf10:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    bf14:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    bf16:	1c5a      	adds	r2, r3, #1
    bf18:	3303      	adds	r3, #3
    bf1a:	00db      	lsls	r3, r3, #3
    bf1c:	f103 0804 	add.w	r8, r3, #4
    bf20:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    bf24:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    bf26:	441c      	add	r4, r3
    bf28:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bf2a:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    bf2c:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    bf2e:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bf30:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    bf32:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    bf34:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bf36:	f00f f828 	bl	1af8a <memcpy>
	return cur_attr;
    bf3a:	4645      	mov	r5, r8
    bf3c:	e7cc      	b.n	bed8 <attr_store.constprop.0+0x1c>
    bf3e:	bf00      	nop
    bf40:	2000a6dc 	.word	0x2000a6dc
    bf44:	0001f3f5 	.word	0x0001f3f5
    bf48:	0001f5c0 	.word	0x0001f5c0
    bf4c:	0001f432 	.word	0x0001f432
    bf50:	0001f416 	.word	0x0001f416

0000bf54 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    bf54:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    bf56:	4604      	mov	r4, r0
    bf58:	b930      	cbnz	r0, bf68 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    bf5a:	2145      	movs	r1, #69	; 0x45
    bf5c:	480c      	ldr	r0, [pc, #48]	; (bf90 <uuid_store.constprop.0+0x3c>)
    bf5e:	f00d fdd4 	bl	19b0a <printk>
    bf62:	4625      	mov	r5, r4
}
    bf64:	4628      	mov	r0, r5
    bf66:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    bf68:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    bf6a:	2b02      	cmp	r3, #2
    bf6c:	d80a      	bhi.n	bf84 <uuid_store.constprop.0+0x30>
    bf6e:	4a09      	ldr	r2, [pc, #36]	; (bf94 <uuid_store.constprop.0+0x40>)
    bf70:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    bf72:	4630      	mov	r0, r6
    bf74:	f7ff ff38 	bl	bde8 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    bf78:	4632      	mov	r2, r6
    bf7a:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    bf7c:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    bf7e:	f00f f804 	bl	1af8a <memcpy>
	return (struct bt_uuid *)buffer;
    bf82:	e7ef      	b.n	bf64 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    bf84:	2145      	movs	r1, #69	; 0x45
    bf86:	4804      	ldr	r0, [pc, #16]	; (bf98 <uuid_store.constprop.0+0x44>)
    bf88:	f00d fdbf 	bl	19b0a <printk>
    bf8c:	2600      	movs	r6, #0
    bf8e:	e7f0      	b.n	bf72 <uuid_store.constprop.0+0x1e>
    bf90:	0001f454 	.word	0x0001f454
    bf94:	0001f5c0 	.word	0x0001f5c0
    bf98:	0001f416 	.word	0x0001f416

0000bf9c <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    bf9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    bfa0:	4e79      	ldr	r6, [pc, #484]	; (c188 <discovery_callback+0x1ec>)
{
    bfa2:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    bfa4:	6833      	ldr	r3, [r6, #0]
    bfa6:	4283      	cmp	r3, r0
    bfa8:	d008      	beq.n	bfbc <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    bfaa:	4878      	ldr	r0, [pc, #480]	; (c18c <discovery_callback+0x1f0>)
    bfac:	2145      	movs	r1, #69	; 0x45
    bfae:	f00d fdac 	bl	19b0a <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    bfb2:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    bfb6:	f7ff ff67 	bl	be88 <discovery_complete_error.constprop.0>
    bfba:	e031      	b.n	c020 <discovery_callback+0x84>
    bfbc:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    bfbe:	2b03      	cmp	r3, #3
    bfc0:	f000 80ae 	beq.w	c120 <discovery_callback+0x184>
    bfc4:	d80d      	bhi.n	bfe2 <discovery_callback+0x46>
    bfc6:	2b02      	cmp	r3, #2
    bfc8:	d126      	bne.n	c018 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    bfca:	f240 12b3 	movw	r2, #435	; 0x1b3
    bfce:	4970      	ldr	r1, [pc, #448]	; (c190 <discovery_callback+0x1f4>)
    bfd0:	4870      	ldr	r0, [pc, #448]	; (c194 <discovery_callback+0x1f8>)
    bfd2:	f00d fd9a 	bl	19b0a <printk>
    bfd6:	f240 11b3 	movw	r1, #435	; 0x1b3
    bfda:	486d      	ldr	r0, [pc, #436]	; (c190 <discovery_callback+0x1f4>)
    bfdc:	f00e f83b 	bl	1a056 <assert_post_action>
    bfe0:	e01e      	b.n	c020 <discovery_callback+0x84>
	switch (params->type) {
    bfe2:	2b05      	cmp	r3, #5
    bfe4:	d1f1      	bne.n	bfca <discovery_callback+0x2e>
	if (!attr) {
    bfe6:	2900      	cmp	r1, #0
    bfe8:	f040 8081 	bne.w	c0ee <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    bfec:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    bff0:	2b01      	cmp	r3, #1
    bff2:	d979      	bls.n	c0e8 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    bff4:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    bff6:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    bffa:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    bffc:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    bffe:	2303      	movs	r3, #3
    c000:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    c002:	f007 fce3 	bl	139cc <bt_gatt_discover>
			if (err) {
    c006:	4604      	mov	r4, r0
    c008:	b150      	cbz	r0, c020 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    c00a:	4602      	mov	r2, r0
    c00c:	2145      	movs	r1, #69	; 0x45
    c00e:	4862      	ldr	r0, [pc, #392]	; (c198 <discovery_callback+0x1fc>)
    c010:	f00d fd7b 	bl	19b0a <printk>
				discovery_complete_error(dm, err);
    c014:	4620      	mov	r0, r4
    c016:	e7ce      	b.n	bfb6 <discovery_callback+0x1a>
	if (!attr) {
    c018:	b921      	cbnz	r1, c024 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    c01a:	4630      	mov	r0, r6
    c01c:	f00e f969 	bl	1a2f2 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    c020:	2400      	movs	r4, #0
    c022:	e04a      	b.n	c0ba <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    c024:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    c028:	4628      	mov	r0, r5
    c02a:	2108      	movs	r1, #8
    c02c:	f7ff ff46 	bl	bebc <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c030:	2400      	movs	r4, #0
    c032:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    c036:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c038:	4669      	mov	r1, sp
    c03a:	6828      	ldr	r0, [r5, #0]
    c03c:	f88d 4000 	strb.w	r4, [sp]
    c040:	f8ad 3002 	strh.w	r3, [sp, #2]
    c044:	f00f f816 	bl	1b074 <bt_uuid_cmp>
    c048:	b1a8      	cbz	r0, c076 <discovery_callback+0xda>
    c04a:	f642 0301 	movw	r3, #10241	; 0x2801
    c04e:	6828      	ldr	r0, [r5, #0]
    c050:	a901      	add	r1, sp, #4
    c052:	f88d 4004 	strb.w	r4, [sp, #4]
    c056:	f8ad 3006 	strh.w	r3, [sp, #6]
    c05a:	f00f f80b 	bl	1b074 <bt_uuid_cmp>
    c05e:	b150      	cbz	r0, c076 <discovery_callback+0xda>
    c060:	494b      	ldr	r1, [pc, #300]	; (c190 <discovery_callback+0x1f4>)
    c062:	484c      	ldr	r0, [pc, #304]	; (c194 <discovery_callback+0x1f8>)
    c064:	f240 1217 	movw	r2, #279	; 0x117
    c068:	f00d fd4f 	bl	19b0a <printk>
    c06c:	f240 1117 	movw	r1, #279	; 0x117
    c070:	4847      	ldr	r0, [pc, #284]	; (c190 <discovery_callback+0x1f4>)
    c072:	f00d fff0 	bl	1a056 <assert_post_action>
	if (!cur_attr) {
    c076:	b937      	cbnz	r7, c086 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    c078:	4848      	ldr	r0, [pc, #288]	; (c19c <discovery_callback+0x200>)
    c07a:	2145      	movs	r1, #69	; 0x45
    c07c:	f00d fd45 	bl	19b0a <printk>
		discovery_complete_error(dm, -ENOMEM);
    c080:	f06f 000b 	mvn.w	r0, #11
    c084:	e797      	b.n	bfb6 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    c086:	4638      	mov	r0, r7
    c088:	f00e f947 	bl	1a31a <bt_gatt_dm_attr_service_val>
    c08c:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    c08e:	2208      	movs	r2, #8
    c090:	4641      	mov	r1, r8
    c092:	f00e ff7a 	bl	1af8a <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    c096:	6828      	ldr	r0, [r5, #0]
    c098:	f7ff ff5c 	bl	bf54 <uuid_store.constprop.0>
    c09c:	4604      	mov	r4, r0
    c09e:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    c0a0:	b930      	cbnz	r0, c0b0 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    c0a2:	2145      	movs	r1, #69	; 0x45
    c0a4:	483e      	ldr	r0, [pc, #248]	; (c1a0 <discovery_callback+0x204>)
    c0a6:	f00d fd30 	bl	19b0a <printk>
		discovery_complete_error(dm, -ENOMEM);
    c0aa:	f06f 000b 	mvn.w	r0, #11
    c0ae:	e058      	b.n	c162 <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    c0b0:	88bb      	ldrh	r3, [r7, #4]
    c0b2:	88aa      	ldrh	r2, [r5, #4]
    c0b4:	4293      	cmp	r3, r2
    c0b6:	d104      	bne.n	c0c2 <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    c0b8:	2401      	movs	r4, #1
}
    c0ba:	4620      	mov	r0, r4
    c0bc:	b002      	add	sp, #8
    c0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c0c2:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    c0c4:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c0c6:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c0c8:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c0ca:	4936      	ldr	r1, [pc, #216]	; (c1a4 <discovery_callback+0x208>)
    c0cc:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    c0ce:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    c0d0:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c0d2:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c0d4:	f007 fc7a 	bl	139cc <bt_gatt_discover>
	if (err) {
    c0d8:	4602      	mov	r2, r0
    c0da:	2800      	cmp	r0, #0
    c0dc:	d0a0      	beq.n	c020 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    c0de:	2145      	movs	r1, #69	; 0x45
    c0e0:	4831      	ldr	r0, [pc, #196]	; (c1a8 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    c0e2:	f00d fd12 	bl	19b0a <printk>
		discovery_complete_error(dm, -ENOMEM);
    c0e6:	e7e0      	b.n	c0aa <discovery_callback+0x10e>
			discovery_complete(dm);
    c0e8:	f7ff feba 	bl	be60 <discovery_complete.constprop.0>
    c0ec:	e798      	b.n	c020 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    c0ee:	2400      	movs	r4, #0
    c0f0:	f642 0303 	movw	r3, #10243	; 0x2803
    c0f4:	6828      	ldr	r0, [r5, #0]
    c0f6:	a901      	add	r1, sp, #4
    c0f8:	f88d 4004 	strb.w	r4, [sp, #4]
    c0fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    c100:	f00e ffb8 	bl	1b074 <bt_uuid_cmp>
    c104:	b950      	cbnz	r0, c11c <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    c106:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    c108:	4628      	mov	r0, r5
    c10a:	f7ff fed7 	bl	bebc <attr_store.constprop.0>
    c10e:	4604      	mov	r4, r0
	if (!cur_attr) {
    c110:	2800      	cmp	r0, #0
    c112:	d1d1      	bne.n	c0b8 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    c114:	2145      	movs	r1, #69	; 0x45
    c116:	8a2a      	ldrh	r2, [r5, #16]
    c118:	4824      	ldr	r0, [pc, #144]	; (c1ac <discovery_callback+0x210>)
    c11a:	e7e2      	b.n	c0e2 <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    c11c:	4621      	mov	r1, r4
    c11e:	e7f3      	b.n	c108 <discovery_callback+0x16c>
	if (!attr) {
    c120:	2900      	cmp	r1, #0
    c122:	d0e1      	beq.n	c0e8 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    c124:	2300      	movs	r3, #0
    c126:	f88d 3004 	strb.w	r3, [sp, #4]
    c12a:	f642 0303 	movw	r3, #10243	; 0x2803
    c12e:	6828      	ldr	r0, [r5, #0]
    c130:	a901      	add	r1, sp, #4
    c132:	f8ad 3006 	strh.w	r3, [sp, #6]
    c136:	f00e ff9d 	bl	1b074 <bt_uuid_cmp>
    c13a:	b150      	cbz	r0, c152 <discovery_callback+0x1b6>
    c13c:	4914      	ldr	r1, [pc, #80]	; (c190 <discovery_callback+0x1f4>)
    c13e:	4815      	ldr	r0, [pc, #84]	; (c194 <discovery_callback+0x1f8>)
    c140:	f44f 72c0 	mov.w	r2, #384	; 0x180
    c144:	f00d fce1 	bl	19b0a <printk>
    c148:	f44f 71c0 	mov.w	r1, #384	; 0x180
    c14c:	4810      	ldr	r0, [pc, #64]	; (c190 <discovery_callback+0x1f4>)
    c14e:	f00d ff82 	bl	1a056 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    c152:	8a29      	ldrh	r1, [r5, #16]
    c154:	480c      	ldr	r0, [pc, #48]	; (c188 <discovery_callback+0x1ec>)
    c156:	f00e f88c 	bl	1a272 <attr_find_by_handle>
	if (!cur_attr) {
    c15a:	4604      	mov	r4, r0
    c15c:	b920      	cbnz	r0, c168 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    c15e:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    c162:	f7ff fe91 	bl	be88 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    c166:	e7a8      	b.n	c0ba <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    c168:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    c16a:	f00e f8f6 	bl	1a35a <bt_gatt_dm_attr_chrc_val>
    c16e:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    c170:	4621      	mov	r1, r4
    c172:	2208      	movs	r2, #8
    c174:	f00e ff09 	bl	1af8a <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    c178:	6828      	ldr	r0, [r5, #0]
    c17a:	f7ff feeb 	bl	bf54 <uuid_store.constprop.0>
    c17e:	4604      	mov	r4, r0
    c180:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    c182:	2800      	cmp	r0, #0
    c184:	d198      	bne.n	c0b8 <discovery_callback+0x11c>
    c186:	e790      	b.n	c0aa <discovery_callback+0x10e>
    c188:	2000a6dc 	.word	0x2000a6dc
    c18c:	0001f46d 	.word	0x0001f46d
    c190:	0001f3ca 	.word	0x0001f3ca
    c194:	0001ecfc 	.word	0x0001ecfc
    c198:	0001f521 	.word	0x0001f521
    c19c:	0001f494 	.word	0x0001f494
    c1a0:	0001f4c2 	.word	0x0001f4c2
    c1a4:	2000a6e4 	.word	0x2000a6e4
    c1a8:	0001f4f5 	.word	0x0001f4f5
    c1ac:	0001f551 	.word	0x0001f551

0000c1b0 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    c1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c1b4:	4606      	mov	r6, r0
    c1b6:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    c1b8:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    c1ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; c200 <bt_gatt_dm_char_by_uuid+0x50>
    c1be:	f8df 9044 	ldr.w	r9, [pc, #68]	; c204 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    c1c2:	4621      	mov	r1, r4
    c1c4:	4630      	mov	r0, r6
    c1c6:	f00e f8de 	bl	1a386 <bt_gatt_dm_char_next>
    c1ca:	4604      	mov	r4, r0
    c1cc:	b1a0      	cbz	r0, c1f8 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    c1ce:	f00e f8c4 	bl	1a35a <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    c1d2:	4605      	mov	r5, r0
    c1d4:	b950      	cbnz	r0, c1ec <bt_gatt_dm_char_by_uuid+0x3c>
    c1d6:	4641      	mov	r1, r8
    c1d8:	4648      	mov	r0, r9
    c1da:	f240 12fb 	movw	r2, #507	; 0x1fb
    c1de:	f00d fc94 	bl	19b0a <printk>
    c1e2:	f240 11fb 	movw	r1, #507	; 0x1fb
    c1e6:	4640      	mov	r0, r8
    c1e8:	f00d ff35 	bl	1a056 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    c1ec:	4638      	mov	r0, r7
    c1ee:	6829      	ldr	r1, [r5, #0]
    c1f0:	f00e ff40 	bl	1b074 <bt_uuid_cmp>
    c1f4:	2800      	cmp	r0, #0
    c1f6:	d1e4      	bne.n	c1c2 <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    c1f8:	4620      	mov	r0, r4
    c1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c1fe:	bf00      	nop
    c200:	0001f3ca 	.word	0x0001f3ca
    c204:	0001ecfc 	.word	0x0001ecfc

0000c208 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    c208:	b570      	push	{r4, r5, r6, lr}
    c20a:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    c20c:	4608      	mov	r0, r1
    c20e:	b119      	cbz	r1, c218 <bt_gatt_dm_start+0x10>
    c210:	7809      	ldrb	r1, [r1, #0]
    c212:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    c216:	d139      	bne.n	c28c <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    c218:	2a00      	cmp	r2, #0
    c21a:	d037      	beq.n	c28c <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c21c:	4c1e      	ldr	r4, [pc, #120]	; (c298 <bt_gatt_dm_start+0x90>)
    c21e:	f504 769c 	add.w	r6, r4, #312	; 0x138
    c222:	e8d6 1fef 	ldaex	r1, [r6]
    c226:	f041 0c01 	orr.w	ip, r1, #1
    c22a:	e8c6 cfee 	stlex	lr, ip, [r6]
    c22e:	f1be 0f00 	cmp.w	lr, #0
    c232:	d1f6      	bne.n	c222 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    c234:	f011 0101 	ands.w	r1, r1, #1
    c238:	d12b      	bne.n	c292 <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    c23a:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    c23e:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    c242:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    c246:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    c24a:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c24e:	b108      	cbz	r0, c254 <bt_gatt_dm_start+0x4c>
    c250:	f7ff fe80 	bl	bf54 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    c254:	4b11      	ldr	r3, [pc, #68]	; (c29c <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c256:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    c258:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    c25a:	2301      	movs	r3, #1
    c25c:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    c25e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c262:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c264:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    c266:	4628      	mov	r0, r5
    c268:	490d      	ldr	r1, [pc, #52]	; (c2a0 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c26a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    c26c:	f007 fbae 	bl	139cc <bt_gatt_discover>
	if (err) {
    c270:	4604      	mov	r4, r0
    c272:	b148      	cbz	r0, c288 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    c274:	4602      	mov	r2, r0
    c276:	2145      	movs	r1, #69	; 0x45
    c278:	480a      	ldr	r0, [pc, #40]	; (c2a4 <bt_gatt_dm_start+0x9c>)
    c27a:	f00d fc46 	bl	19b0a <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c27e:	f06f 0101 	mvn.w	r1, #1
    c282:	4809      	ldr	r0, [pc, #36]	; (c2a8 <bt_gatt_dm_start+0xa0>)
    c284:	f00e f82a 	bl	1a2dc <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    c288:	4620      	mov	r0, r4
    c28a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c28c:	f06f 0415 	mvn.w	r4, #21
    c290:	e7fa      	b.n	c288 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    c292:	f06f 0444 	mvn.w	r4, #68	; 0x44
    c296:	e7f7      	b.n	c288 <bt_gatt_dm_start+0x80>
    c298:	2000a6dc 	.word	0x2000a6dc
    c29c:	0000bf9d 	.word	0x0000bf9d
    c2a0:	2000a6e4 	.word	0x2000a6e4
    c2a4:	0001f594 	.word	0x0001f594
    c2a8:	2000a814 	.word	0x2000a814

0000c2ac <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    c2ac:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c2ae:	4c06      	ldr	r4, [pc, #24]	; (c2c8 <scan_default_param_set+0x1c>)
{
    c2b0:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c2b2:	ad01      	add	r5, sp, #4
    c2b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c2b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c2b8:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    c2ba:	4c04      	ldr	r4, [pc, #16]	; (c2cc <scan_default_param_set+0x20>)
    c2bc:	ad01      	add	r5, sp, #4
    c2be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c2c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c2c2:	6026      	str	r6, [r4, #0]
}
    c2c4:	b006      	add	sp, #24
    c2c6:	bd70      	pop	{r4, r5, r6, pc}
    c2c8:	0001d980 	.word	0x0001d980
    c2cc:	2000a888 	.word	0x2000a888

0000c2d0 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    c2d0:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    c2d4:	4b02      	ldr	r3, [pc, #8]	; (c2e0 <scan_default_conn_param_set+0x10>)
    c2d6:	4903      	ldr	r1, [pc, #12]	; (c2e4 <scan_default_conn_param_set+0x14>)
    c2d8:	e9c3 121d 	strd	r1, r2, [r3, #116]	; 0x74
}
    c2dc:	4770      	bx	lr
    c2de:	bf00      	nop
    c2e0:	2000a828 	.word	0x2000a828
    c2e4:	00280018 	.word	0x00280018

0000c2e8 <uuid_check>:
{
    c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    c2ec:	4c29      	ldr	r4, [pc, #164]	; (c394 <uuid_check+0xac>)
{
    c2ee:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    c2f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
{
    c2f4:	4606      	mov	r6, r0
    c2f6:	9100      	str	r1, [sp, #0]
    c2f8:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    c2fa:	2b00      	cmp	r3, #0
    c2fc:	d03c      	beq.n	c378 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    c2fe:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    c300:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    c302:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    c304:	f894 b058 	ldrb.w	fp, [r4, #88]	; 0x58
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c308:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
	uint8_t data_len = data->data_len;
    c30c:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    c30e:	4557      	cmp	r7, sl
    c310:	d30e      	bcc.n	c330 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    c312:	f886 5044 	strb.w	r5, [r6, #68]	; 0x44
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    c316:	f1bb 0f00 	cmp.w	fp, #0
    c31a:	d02b      	beq.n	c374 <uuid_check+0x8c>
    c31c:	45aa      	cmp	sl, r5
    c31e:	d12b      	bne.n	c378 <uuid_check+0x90>
			control->filter_match_cnt++;
    c320:	7873      	ldrb	r3, [r6, #1]
    c322:	3301      	adds	r3, #1
    c324:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    c326:	2301      	movs	r3, #1
    c328:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    c32c:	70b3      	strb	r3, [r6, #2]
}
    c32e:	e023      	b.n	c378 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c330:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    c334:	9b00      	ldr	r3, [sp, #0]
    c336:	9a03      	ldr	r2, [sp, #12]
    c338:	685b      	ldr	r3, [r3, #4]
    c33a:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    c33c:	4b16      	ldr	r3, [pc, #88]	; (c398 <uuid_check+0xb0>)
    c33e:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c342:	9b01      	ldr	r3, [sp, #4]
    c344:	4599      	cmp	r9, r3
    c346:	d305      	bcc.n	c354 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    c348:	f1bb 0f00 	cmp.w	fp, #0
    c34c:	d1e1      	bne.n	c312 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    c34e:	3701      	adds	r7, #1
    c350:	3418      	adds	r4, #24
    c352:	e7dc      	b.n	c30e <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    c354:	9b02      	ldr	r3, [sp, #8]
    c356:	4642      	mov	r2, r8
    c358:	eb03 0109 	add.w	r1, r3, r9
    c35c:	a805      	add	r0, sp, #20
    c35e:	f00e feb7 	bl	1b0d0 <bt_uuid_create>
    c362:	2800      	cmp	r0, #0
    c364:	d0f0      	beq.n	c348 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    c366:	68a1      	ldr	r1, [r4, #8]
    c368:	a805      	add	r0, sp, #20
    c36a:	f00e fe83 	bl	1b074 <bt_uuid_cmp>
    c36e:	b130      	cbz	r0, c37e <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c370:	44c1      	add	r9, r8
    c372:	e7e6      	b.n	c342 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    c374:	2d00      	cmp	r5, #0
    c376:	d1d3      	bne.n	c320 <uuid_check+0x38>
}
    c378:	b00b      	add	sp, #44	; 0x2c
    c37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    c37e:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c380:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    c384:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c386:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    c388:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    c38a:	f1bb 0f00 	cmp.w	fp, #0
    c38e:	d1de      	bne.n	c34e <uuid_check+0x66>
    c390:	e7bf      	b.n	c312 <uuid_check+0x2a>
    c392:	bf00      	nop
    c394:	2000a828 	.word	0x2000a828
    c398:	0001f5cf 	.word	0x0001f5cf

0000c39c <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    c3a0:	7803      	ldrb	r3, [r0, #0]
{
    c3a2:	4605      	mov	r5, r0
	switch (data->type) {
    c3a4:	2b19      	cmp	r3, #25
{
    c3a6:	460c      	mov	r4, r1
	switch (data->type) {
    c3a8:	d812      	bhi.n	c3d0 <adv_data_found+0x34>
    c3aa:	2b01      	cmp	r3, #1
    c3ac:	d912      	bls.n	c3d4 <adv_data_found+0x38>
    c3ae:	3b02      	subs	r3, #2
    c3b0:	2b17      	cmp	r3, #23
    c3b2:	d80f      	bhi.n	c3d4 <adv_data_found+0x38>
    c3b4:	e8df f003 	tbb	[pc, r3]
    c3b8:	80807a7a 	.word	0x80807a7a
    c3bc:	11318282 	.word	0x11318282
    c3c0:	0e0e0e0e 	.word	0x0e0e0e0e
    c3c4:	0e0e0e0e 	.word	0x0e0e0e0e
    c3c8:	0e0e0e0e 	.word	0x0e0e0e0e
    c3cc:	560e0e0e 	.word	0x560e0e0e
    c3d0:	2bff      	cmp	r3, #255	; 0xff
    c3d2:	d075      	beq.n	c4c0 <adv_data_found+0x124>
	default:
		break;
	}

	return true;
}
    c3d4:	2001      	movs	r0, #1
    c3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    c3da:	4f4e      	ldr	r7, [pc, #312]	; (c514 <adv_data_found+0x178>)
	if (is_name_filter_enabled()) {
    c3dc:	787b      	ldrb	r3, [r7, #1]
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d0f8      	beq.n	c3d4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c3e2:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    c3e4:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    c3e8:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c3ec:	4556      	cmp	r6, sl
    c3ee:	d2f1      	bcs.n	c3d4 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    c3f0:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    c3f4:	4642      	mov	r2, r8
    c3f6:	4648      	mov	r0, r9
    c3f8:	6869      	ldr	r1, [r5, #4]
    c3fa:	f00e fda4 	bl	1af46 <strncmp>
		if (adv_name_cmp(data->data,
    c3fe:	b950      	cbnz	r0, c416 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    c400:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    c402:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    c406:	3301      	adds	r3, #1
    c408:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    c40a:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    c40c:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    c410:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    c412:	70a3      	strb	r3, [r4, #2]
    c414:	e7de      	b.n	c3d4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c416:	3601      	adds	r6, #1
    c418:	e7e8      	b.n	c3ec <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    c41a:	4e3e      	ldr	r6, [pc, #248]	; (c514 <adv_data_found+0x178>)
	if (is_short_name_filter_enabled()) {
    c41c:	78f3      	ldrb	r3, [r6, #3]
    c41e:	2b00      	cmp	r3, #0
    c420:	d0d8      	beq.n	c3d4 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    c422:	78b3      	ldrb	r3, [r6, #2]
    c424:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c428:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    c42c:	18f7      	adds	r7, r6, r3
    c42e:	42be      	cmp	r6, r7
    c430:	d0d0      	beq.n	c3d4 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    c432:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c436:	4543      	cmp	r3, r8
    c438:	d812      	bhi.n	c460 <adv_data_found+0xc4>
    c43a:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    c43e:	4642      	mov	r2, r8
    c440:	4648      	mov	r0, r9
    c442:	6869      	ldr	r1, [r5, #4]
    c444:	f00e fd7f 	bl	1af46 <strncmp>
	if ((data_len >= short_name_min_len) &&
    c448:	b950      	cbnz	r0, c460 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    c44a:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    c44c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    c450:	3301      	adds	r3, #1
    c452:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    c454:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    c456:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    c45a:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    c45e:	e7d8      	b.n	c412 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c460:	3621      	adds	r6, #33	; 0x21
    c462:	e7e4      	b.n	c42e <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    c464:	482b      	ldr	r0, [pc, #172]	; (c514 <adv_data_found+0x178>)
	if (is_appearance_filter_enabled()) {
    c466:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    c46a:	2b00      	cmp	r3, #0
    c46c:	d0b2      	beq.n	c3d4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c46e:	2300      	movs	r3, #0
	const uint8_t counter =
    c470:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
	uint8_t data_len = data->data_len;
    c474:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    c476:	42b3      	cmp	r3, r6
    c478:	d2ac      	bcs.n	c3d4 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    c47a:	2f02      	cmp	r7, #2
    c47c:	d114      	bne.n	c4a8 <adv_data_found+0x10c>
	if (decoded_appearance == *appearance) {
    c47e:	686a      	ldr	r2, [r5, #4]
    c480:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    c484:	8812      	ldrh	r2, [r2, #0]
    c486:	f8b1 1054 	ldrh.w	r1, [r1, #84]	; 0x54
    c48a:	ba52      	rev16	r2, r2
    c48c:	b292      	uxth	r2, r2
    c48e:	4291      	cmp	r1, r2
    c490:	d10a      	bne.n	c4a8 <adv_data_found+0x10c>
		if (find_appearance(data->data,
    c492:	332a      	adds	r3, #42	; 0x2a
    c494:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    c498:	64e3      	str	r3, [r4, #76]	; 0x4c
			control->filter_match_cnt++;
    c49a:	7863      	ldrb	r3, [r4, #1]
    c49c:	3301      	adds	r3, #1
    c49e:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    c4a0:	2301      	movs	r3, #1
    c4a2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			control->filter_match = true;
    c4a6:	e7b4      	b.n	c412 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c4a8:	3301      	adds	r3, #1
    c4aa:	e7e4      	b.n	c476 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    c4ac:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c4ae:	4629      	mov	r1, r5
    c4b0:	4620      	mov	r0, r4
    c4b2:	f7ff ff19 	bl	c2e8 <uuid_check>
		break;
    c4b6:	e78d      	b.n	c3d4 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    c4b8:	2201      	movs	r2, #1
    c4ba:	e7f8      	b.n	c4ae <adv_data_found+0x112>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c4bc:	2202      	movs	r2, #2
    c4be:	e7f6      	b.n	c4ae <adv_data_found+0x112>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    c4c0:	f8df 8050 	ldr.w	r8, [pc, #80]	; c514 <adv_data_found+0x178>
	if (is_manufacturer_data_filter_enabled()) {
    c4c4:	f898 3057 	ldrb.w	r3, [r8, #87]	; 0x57
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d083      	beq.n	c3d4 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c4cc:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    c4ce:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c4d0:	f817 9f56 	ldrb.w	r9, [r7, #86]!
	for (size_t i = 0; i < counter; i++) {
    c4d4:	454e      	cmp	r6, r9
    c4d6:	f4bf af7d 	bcs.w	c3d4 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    c4da:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    c4de:	786b      	ldrb	r3, [r5, #1]
    c4e0:	4293      	cmp	r3, r2
    c4e2:	d313      	bcc.n	c50c <adv_data_found+0x170>
	if (memcmp(target_data, data, target_data_len) != 0) {
    c4e4:	4638      	mov	r0, r7
    c4e6:	6869      	ldr	r1, [r5, #4]
    c4e8:	f00e fd3e 	bl	1af68 <memcmp>
    c4ec:	b970      	cbnz	r0, c50c <adv_data_found+0x170>
				md_filter->manufacturer_data[i].data_len;
    c4ee:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    c4f2:	6567      	str	r7, [r4, #84]	; 0x54
				md_filter->manufacturer_data[i].data_len;
    c4f4:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    c4f6:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    c4fa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			control->filter_match_cnt++;
    c4fe:	7863      	ldrb	r3, [r4, #1]
    c500:	3301      	adds	r3, #1
    c502:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    c504:	2301      	movs	r3, #1
    c506:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    c50a:	e782      	b.n	c412 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c50c:	3601      	adds	r6, #1
    c50e:	3721      	adds	r7, #33	; 0x21
    c510:	e7e0      	b.n	c4d4 <adv_data_found+0x138>
    c512:	bf00      	nop
    c514:	2000a828 	.word	0x2000a828

0000c518 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    c518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c51a:	4605      	mov	r5, r0
    c51c:	460e      	mov	r6, r1
    c51e:	4617      	mov	r7, r2
	return list->head;
    c520:	4b08      	ldr	r3, [pc, #32]	; (c544 <notify_filter_matched.constprop.0+0x2c>)
    c522:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c524:	b10c      	cbz	r4, c52a <notify_filter_matched.constprop.0+0x12>
    c526:	3c04      	subs	r4, #4
    c528:	b904      	cbnz	r4, c52c <notify_filter_matched.constprop.0+0x14>
}
    c52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    c52c:	6823      	ldr	r3, [r4, #0]
    c52e:	681b      	ldr	r3, [r3, #0]
    c530:	b11b      	cbz	r3, c53a <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    c532:	463a      	mov	r2, r7
    c534:	4631      	mov	r1, r6
    c536:	4628      	mov	r0, r5
    c538:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c53a:	1d23      	adds	r3, r4, #4
    c53c:	d0f5      	beq.n	c52a <notify_filter_matched.constprop.0+0x12>
	return node->next;
    c53e:	6864      	ldr	r4, [r4, #4]
    c540:	e7f0      	b.n	c524 <notify_filter_matched.constprop.0+0xc>
    c542:	bf00      	nop
    c544:	2000a8a4 	.word	0x2000a8a4

0000c548 <bt_scan_cb_register>:
	if (!cb) {
    c548:	b150      	cbz	r0, c560 <bt_scan_cb_register+0x18>
	parent->next = child;
    c54a:	2300      	movs	r3, #0
    c54c:	6043      	str	r3, [r0, #4]
	return list->tail;
    c54e:	4b05      	ldr	r3, [pc, #20]	; (c564 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    c550:	1d02      	adds	r2, r0, #4
    c552:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    c554:	b911      	cbnz	r1, c55c <bt_scan_cb_register+0x14>
	list->head = node;
    c556:	e9c3 2200 	strd	r2, r2, [r3]
}
    c55a:	4770      	bx	lr
	parent->next = child;
    c55c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    c55e:	605a      	str	r2, [r3, #4]
}
    c560:	4770      	bx	lr
    c562:	bf00      	nop
    c564:	2000a8a4 	.word	0x2000a8a4

0000c568 <bt_scan_filter_add>:
{
    c568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c56c:	4604      	mov	r4, r0
	if (!data) {
    c56e:	460d      	mov	r5, r1
    c570:	2900      	cmp	r1, #0
    c572:	d06a      	beq.n	c64a <bt_scan_filter_add+0xe2>
	return z_impl_k_mutex_lock(mutex, timeout);
    c574:	f04f 32ff 	mov.w	r2, #4294967295
    c578:	f04f 33ff 	mov.w	r3, #4294967295
    c57c:	4834      	ldr	r0, [pc, #208]	; (c650 <bt_scan_filter_add+0xe8>)
    c57e:	f00a fe3b 	bl	171f8 <z_impl_k_mutex_lock>
	switch (type) {
    c582:	2c03      	cmp	r4, #3
    c584:	d006      	beq.n	c594 <bt_scan_filter_add+0x2c>
    c586:	d902      	bls.n	c58e <bt_scan_filter_add+0x26>
    c588:	3c04      	subs	r4, #4
    c58a:	2c01      	cmp	r4, #1
    c58c:	d85a      	bhi.n	c644 <bt_scan_filter_add+0xdc>
		return -ENOMEM;
    c58e:	f06f 060b 	mvn.w	r6, #11
    c592:	e020      	b.n	c5d6 <bt_scan_filter_add+0x6e>
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c594:	4f2f      	ldr	r7, [pc, #188]	; (c654 <bt_scan_filter_add+0xec>)
    c596:	f897 4050 	ldrb.w	r4, [r7, #80]	; 0x50
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    c59a:	2c02      	cmp	r4, #2
    c59c:	d8f7      	bhi.n	c58e <bt_scan_filter_add+0x26>
    c59e:	46b9      	mov	r9, r7
	for (size_t i = 0; i < counter; i++) {
    c5a0:	f04f 0800 	mov.w	r8, #0
    c5a4:	45a0      	cmp	r8, r4
    c5a6:	d31c      	bcc.n	c5e2 <bt_scan_filter_add+0x7a>
	switch (uuid->type) {
    c5a8:	782b      	ldrb	r3, [r5, #0]
    c5aa:	2b01      	cmp	r3, #1
    c5ac:	d026      	beq.n	c5fc <bt_scan_filter_add+0x94>
    c5ae:	2b02      	cmp	r3, #2
    c5b0:	d031      	beq.n	c616 <bt_scan_filter_add+0xae>
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d146      	bne.n	c644 <bt_scan_filter_add+0xdc>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    c5b6:	4b28      	ldr	r3, [pc, #160]	; (c658 <bt_scan_filter_add+0xf0>)
    c5b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c5bc:	6828      	ldr	r0, [r5, #0]
    c5be:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    c5c2:	1d11      	adds	r1, r2, #4
    c5c4:	6050      	str	r0, [r2, #4]
		uuid_filter[counter].uuid =
    c5c6:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	return 0;
    c5ca:	2600      	movs	r6, #0
	bt_scan.scan_filters.uuid.cnt++;
    c5cc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    c5d0:	3301      	adds	r3, #1
    c5d2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	return z_impl_k_mutex_unlock(mutex);
    c5d6:	481e      	ldr	r0, [pc, #120]	; (c650 <bt_scan_filter_add+0xe8>)
    c5d8:	f00a feda 	bl	17390 <z_impl_k_mutex_unlock>
}
    c5dc:	4630      	mov	r0, r6
    c5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    c5e2:	f8d9 0008 	ldr.w	r0, [r9, #8]
    c5e6:	4629      	mov	r1, r5
    c5e8:	f00e fd44 	bl	1b074 <bt_uuid_cmp>
    c5ec:	f109 0918 	add.w	r9, r9, #24
    c5f0:	4606      	mov	r6, r0
    c5f2:	2800      	cmp	r0, #0
    c5f4:	d0ef      	beq.n	c5d6 <bt_scan_filter_add+0x6e>
	for (size_t i = 0; i < counter; i++) {
    c5f6:	f108 0801 	add.w	r8, r8, #1
    c5fa:	e7d3      	b.n	c5a4 <bt_scan_filter_add+0x3c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    c5fc:	4a16      	ldr	r2, [pc, #88]	; (c658 <bt_scan_filter_add+0xf0>)
    c5fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c602:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    c606:	3304      	adds	r3, #4
    c608:	e895 0003 	ldmia.w	r5, {r0, r1}
    c60c:	e883 0003 	stmia.w	r3, {r0, r1}
		uuid_filter[counter].uuid =
    c610:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
		break;
    c614:	e7d9      	b.n	c5ca <bt_scan_filter_add+0x62>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    c616:	4a10      	ldr	r2, [pc, #64]	; (c658 <bt_scan_filter_add+0xf0>)
    c618:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c61c:	00e6      	lsls	r6, r4, #3
    c61e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    c622:	3404      	adds	r4, #4
    c624:	46a4      	mov	ip, r4
    c626:	f105 0e10 	add.w	lr, r5, #16
    c62a:	4623      	mov	r3, r4
    c62c:	6828      	ldr	r0, [r5, #0]
    c62e:	6869      	ldr	r1, [r5, #4]
    c630:	3508      	adds	r5, #8
    c632:	c303      	stmia	r3!, {r0, r1}
    c634:	4575      	cmp	r5, lr
    c636:	461c      	mov	r4, r3
    c638:	d1f7      	bne.n	c62a <bt_scan_filter_add+0xc2>
    c63a:	782b      	ldrb	r3, [r5, #0]
    c63c:	7023      	strb	r3, [r4, #0]
		uuid_filter[counter].uuid =
    c63e:	f842 c006 	str.w	ip, [r2, r6]
		break;
    c642:	e7c2      	b.n	c5ca <bt_scan_filter_add+0x62>
		err = -EINVAL;
    c644:	f06f 0615 	mvn.w	r6, #21
		break;
    c648:	e7c5      	b.n	c5d6 <bt_scan_filter_add+0x6e>
		return -EINVAL;
    c64a:	f06f 0615 	mvn.w	r6, #21
    c64e:	e7c5      	b.n	c5dc <bt_scan_filter_add+0x74>
    c650:	2000866c 	.word	0x2000866c
    c654:	2000a828 	.word	0x2000a828
    c658:	2000a830 	.word	0x2000a830

0000c65c <bt_scan_filter_remove_all>:
{
    c65c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    c65e:	4c0c      	ldr	r4, [pc, #48]	; (c690 <bt_scan_filter_remove_all+0x34>)
    c660:	f04f 32ff 	mov.w	r2, #4294967295
    c664:	f04f 33ff 	mov.w	r3, #4294967295
    c668:	4620      	mov	r0, r4
    c66a:	f00a fdc5 	bl	171f8 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    c66e:	2200      	movs	r2, #0
    c670:	4b08      	ldr	r3, [pc, #32]	; (c694 <bt_scan_filter_remove_all+0x38>)
    c672:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    c674:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    c676:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    c678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	appearance_filter->cnt = 0;
    c67c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	manufacturer_data_filter->cnt = 0;
    c680:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return z_impl_k_mutex_unlock(mutex);
    c684:	4620      	mov	r0, r4
}
    c686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c68a:	f00a be81 	b.w	17390 <z_impl_k_mutex_unlock>
    c68e:	bf00      	nop
    c690:	2000866c 	.word	0x2000866c
    c694:	2000a828 	.word	0x2000a828

0000c698 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    c698:	2200      	movs	r2, #0
    c69a:	4b05      	ldr	r3, [pc, #20]	; (c6b0 <bt_scan_filter_disable+0x18>)
    c69c:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    c69e:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    c6a0:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    c6a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	bt_scan.scan_filters.appearance.enabled = false;
    c6a6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    c6aa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
    c6ae:	4770      	bx	lr
    c6b0:	2000a828 	.word	0x2000a828

0000c6b4 <bt_scan_filter_enable>:
{
    c6b4:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    c6b6:	0683      	lsls	r3, r0, #26
    c6b8:	d025      	beq.n	c706 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    c6ba:	f7ff ffed 	bl	c698 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    c6be:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    c6c2:	bf18      	it	ne
    c6c4:	2201      	movne	r2, #1
    c6c6:	4b11      	ldr	r3, [pc, #68]	; (c70c <bt_scan_filter_enable+0x58>)
    c6c8:	bf18      	it	ne
    c6ca:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    c6cc:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    c6ce:	bf44      	itt	mi
    c6d0:	2201      	movmi	r2, #1
    c6d2:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    c6d4:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    c6d6:	bf44      	itt	mi
    c6d8:	2201      	movmi	r2, #1
    c6da:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    c6dc:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    c6de:	bf44      	itt	mi
    c6e0:	2201      	movmi	r2, #1
    c6e2:	f883 2051 	strbmi.w	r2, [r3, #81]	; 0x51
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    c6e6:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    c6e8:	bf44      	itt	mi
    c6ea:	2201      	movmi	r2, #1
    c6ec:	f883 2055 	strbmi.w	r2, [r3, #85]	; 0x55
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    c6f0:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    c6f2:	bf48      	it	mi
    c6f4:	2201      	movmi	r2, #1
	return 0;
    c6f6:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    c6fa:	bf48      	it	mi
    c6fc:	f883 2057 	strbmi.w	r2, [r3, #87]	; 0x57
	filters->all_mode = match_all;
    c700:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
}
    c704:	bd08      	pop	{r3, pc}
		return -EINVAL;
    c706:	f06f 0015 	mvn.w	r0, #21
    c70a:	e7fb      	b.n	c704 <bt_scan_filter_enable+0x50>
    c70c:	2000a828 	.word	0x2000a828

0000c710 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    c710:	b570      	push	{r4, r5, r6, lr}
    c712:	460e      	mov	r6, r1
    c714:	b086      	sub	sp, #24
    c716:	4605      	mov	r5, r0
	bt_scan_stop();
    c718:	f00d feaa 	bl	1a470 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    c71c:	4b18      	ldr	r3, [pc, #96]	; (c780 <scan_connect_with_target.part.0+0x70>)
    c71e:	ac02      	add	r4, sp, #8
    c720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    c722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    c726:	4621      	mov	r1, r4
    c728:	ab01      	add	r3, sp, #4
    c72a:	4630      	mov	r0, r6
    c72c:	4a15      	ldr	r2, [pc, #84]	; (c784 <scan_connect_with_target.part.0+0x74>)
    c72e:	f004 fab9 	bl	10ca4 <bt_conn_le_create>
	if (err) {
    c732:	4b15      	ldr	r3, [pc, #84]	; (c788 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    c734:	3508      	adds	r5, #8
	return list->head;
    c736:	681c      	ldr	r4, [r3, #0]
	if (err) {
    c738:	b168      	cbz	r0, c756 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c73a:	b10c      	cbz	r4, c740 <scan_connect_with_target.part.0+0x30>
    c73c:	3c04      	subs	r4, #4
    c73e:	b90c      	cbnz	r4, c744 <scan_connect_with_target.part.0+0x34>
}
    c740:	b006      	add	sp, #24
    c742:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    c744:	6823      	ldr	r3, [r4, #0]
    c746:	689b      	ldr	r3, [r3, #8]
    c748:	b10b      	cbz	r3, c74e <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    c74a:	4628      	mov	r0, r5
    c74c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c74e:	1d22      	adds	r2, r4, #4
    c750:	d0f6      	beq.n	c740 <scan_connect_with_target.part.0+0x30>
	return node->next;
    c752:	6864      	ldr	r4, [r4, #4]
    c754:	e7f1      	b.n	c73a <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c756:	b91c      	cbnz	r4, c760 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    c758:	9801      	ldr	r0, [sp, #4]
    c75a:	f004 f8e5 	bl	10928 <bt_conn_unref>
    c75e:	e7ef      	b.n	c740 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    c760:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c762:	3c04      	subs	r4, #4
    c764:	2c00      	cmp	r4, #0
    c766:	d0f7      	beq.n	c758 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    c768:	6823      	ldr	r3, [r4, #0]
    c76a:	68db      	ldr	r3, [r3, #12]
    c76c:	b113      	cbz	r3, c774 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    c76e:	4631      	mov	r1, r6
    c770:	4628      	mov	r0, r5
    c772:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c774:	1d23      	adds	r3, r4, #4
    c776:	d0ef      	beq.n	c758 <scan_connect_with_target.part.0+0x48>
	return node->next;
    c778:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c77a:	2c00      	cmp	r4, #0
    c77c:	d1f1      	bne.n	c762 <scan_connect_with_target.part.0+0x52>
    c77e:	e7eb      	b.n	c758 <scan_connect_with_target.part.0+0x48>
    c780:	0001d994 	.word	0x0001d994
    c784:	2000a89c 	.word	0x2000a89c
    c788:	2000a8a4 	.word	0x2000a8a4

0000c78c <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    c78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c790:	4c54      	ldr	r4, [pc, #336]	; (c8e4 <scan_recv+0x158>)
{
    c792:	b099      	sub	sp, #100	; 0x64
	memset(&scan_control, 0, sizeof(scan_control));
    c794:	225c      	movs	r2, #92	; 0x5c
{
    c796:	4606      	mov	r6, r0
    c798:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    c79a:	a801      	add	r0, sp, #4
    c79c:	2100      	movs	r1, #0
    c79e:	f00e fc1f 	bl	1afe0 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c7a2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
	return bt_scan.scan_filters.addr.enabled;
    c7a6:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c7a8:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    c7ac:	2300      	movs	r3, #0
    c7ae:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    c7b2:	b112      	cbz	r2, c7ba <scan_recv+0x2e>
		control->filter_cnt++;
    c7b4:	2301      	movs	r3, #1
    c7b6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    c7ba:	7863      	ldrb	r3, [r4, #1]
    c7bc:	b123      	cbz	r3, c7c8 <scan_recv+0x3c>
		control->filter_cnt++;
    c7be:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c7c2:	3301      	adds	r3, #1
    c7c4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    c7c8:	78e3      	ldrb	r3, [r4, #3]
    c7ca:	b123      	cbz	r3, c7d6 <scan_recv+0x4a>
		control->filter_cnt++;
    c7cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c7d0:	3301      	adds	r3, #1
    c7d2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    c7d6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    c7da:	b123      	cbz	r3, c7e6 <scan_recv+0x5a>
		control->filter_cnt++;
    c7dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c7e0:	3301      	adds	r3, #1
    c7e2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    c7e6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    c7ea:	b123      	cbz	r3, c7f6 <scan_recv+0x6a>
		control->filter_cnt++;
    c7ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c7f0:	3301      	adds	r3, #1
    c7f2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    c7f6:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
    c7fa:	b123      	cbz	r3, c806 <scan_recv+0x7a>
		control->filter_cnt++;
    c7fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c800:	3301      	adds	r3, #1
    c802:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    c806:	7a33      	ldrb	r3, [r6, #8]
    c808:	f003 0301 	and.w	r3, r3, #1
    c80c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    c810:	b1ea      	cbz	r2, c84e <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    c812:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    c816:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    c81a:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    c81e:	4f32      	ldr	r7, [pc, #200]	; (c8e8 <scan_recv+0x15c>)
    c820:	45c8      	cmp	r8, r9
    c822:	d214      	bcs.n	c84e <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    c824:	4639      	mov	r1, r7
    c826:	2207      	movs	r2, #7
    c828:	4650      	mov	r0, sl
    c82a:	f00e fb9d 	bl	1af68 <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    c82e:	46bb      	mov	fp, r7
    c830:	3707      	adds	r7, #7
    c832:	2800      	cmp	r0, #0
    c834:	d13a      	bne.n	c8ac <scan_recv+0x120>
			control->filter_match_cnt++;
    c836:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    c83a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    c83e:	3301      	adds	r3, #1
    c840:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    c844:	2301      	movs	r3, #1
    c846:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    c84a:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    c84e:	4628      	mov	r0, r5
    c850:	f00f fe91 	bl	1c576 <net_buf_simple_headroom>
    c854:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    c856:	4925      	ldr	r1, [pc, #148]	; (c8ec <scan_recv+0x160>)
    c858:	4628      	mov	r0, r5
    c85a:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    c85c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    c860:	f002 fb1c 	bl	ee9c <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    c864:	4b22      	ldr	r3, [pc, #136]	; (c8f0 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    c866:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    c868:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    c86c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c870:	fa10 f787 	uxtah	r7, r0, r7
    c874:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    c876:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    c87a:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    c87c:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    c87e:	b1c3      	cbz	r3, c8b2 <scan_recv+0x126>
    c880:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c884:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c888:	429a      	cmp	r2, r3
    c88a:	d116      	bne.n	c8ba <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    c88c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    c890:	a906      	add	r1, sp, #24
    c892:	a803      	add	r0, sp, #12
    c894:	f7ff fe40 	bl	c518 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    c898:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    c89c:	b11b      	cbz	r3, c8a6 <scan_recv+0x11a>
    c89e:	4629      	mov	r1, r5
    c8a0:	a801      	add	r0, sp, #4
    c8a2:	f7ff ff35 	bl	c710 <scan_connect_with_target.part.0>
}
    c8a6:	b019      	add	sp, #100	; 0x64
    c8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    c8ac:	f108 0801 	add.w	r8, r8, #1
    c8b0:	e7b6      	b.n	c820 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    c8b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c8b6:	2b00      	cmp	r3, #0
    c8b8:	d1e8      	bne.n	c88c <scan_recv+0x100>
	return list->head;
    c8ba:	4b0e      	ldr	r3, [pc, #56]	; (c8f4 <scan_recv+0x168>)
    c8bc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c8be:	2c00      	cmp	r4, #0
    c8c0:	d0f1      	beq.n	c8a6 <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    c8c2:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c8c6:	3c04      	subs	r4, #4
    c8c8:	2c00      	cmp	r4, #0
    c8ca:	d0ec      	beq.n	c8a6 <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    c8cc:	6823      	ldr	r3, [r4, #0]
    c8ce:	685b      	ldr	r3, [r3, #4]
    c8d0:	b113      	cbz	r3, c8d8 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    c8d2:	4629      	mov	r1, r5
    c8d4:	a803      	add	r0, sp, #12
    c8d6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c8d8:	1d23      	adds	r3, r4, #4
    c8da:	d0e4      	beq.n	c8a6 <scan_recv+0x11a>
	return node->next;
    c8dc:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c8de:	2c00      	cmp	r4, #0
    c8e0:	d1f1      	bne.n	c8c6 <scan_recv+0x13a>
    c8e2:	e7e0      	b.n	c8a6 <scan_recv+0x11a>
    c8e4:	2000a828 	.word	0x2000a828
    c8e8:	2000a82c 	.word	0x2000a82c
    c8ec:	0000c39d 	.word	0x0000c39d
    c8f0:	2000a89c 	.word	0x2000a89c
    c8f4:	2000a8a4 	.word	0x2000a8a4

0000c8f8 <bt_scan_init>:
{
    c8f8:	b570      	push	{r4, r5, r6, lr}
    c8fa:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    c8fc:	4c14      	ldr	r4, [pc, #80]	; (c950 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    c8fe:	4815      	ldr	r0, [pc, #84]	; (c954 <bt_scan_init+0x5c>)
    c900:	f003 fcf8 	bl	102f4 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    c904:	225c      	movs	r2, #92	; 0x5c
    c906:	2100      	movs	r1, #0
    c908:	4620      	mov	r0, r4
    c90a:	f00e fb69 	bl	1afe0 <memset>
	if (init) {
    c90e:	b1be      	cbz	r6, c940 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    c910:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    c912:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    c914:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (init->scan_param) {
    c918:	b15d      	cbz	r5, c932 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    c91a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c91c:	3460      	adds	r4, #96	; 0x60
    c91e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c920:	682b      	ldr	r3, [r5, #0]
    c922:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    c924:	68b2      	ldr	r2, [r6, #8]
    c926:	b13a      	cbz	r2, c938 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    c928:	4b0b      	ldr	r3, [pc, #44]	; (c958 <bt_scan_init+0x60>)
    c92a:	6810      	ldr	r0, [r2, #0]
    c92c:	6851      	ldr	r1, [r2, #4]
    c92e:	c303      	stmia	r3!, {r0, r1}
}
    c930:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    c932:	f7ff fcbb 	bl	c2ac <scan_default_param_set>
    c936:	e7f5      	b.n	c924 <bt_scan_init+0x2c>
}
    c938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    c93c:	f7ff bcc8 	b.w	c2d0 <scan_default_conn_param_set>
		scan_default_param_set();
    c940:	f7ff fcb4 	bl	c2ac <scan_default_param_set>
		scan_default_conn_param_set();
    c944:	f7ff fcc4 	bl	c2d0 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    c948:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
}
    c94c:	e7f0      	b.n	c930 <bt_scan_init+0x38>
    c94e:	bf00      	nop
    c950:	2000a828 	.word	0x2000a828
    c954:	20008298 	.word	0x20008298
    c958:	2000a89c 	.word	0x2000a89c

0000c95c <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    c95c:	b108      	cbz	r0, c962 <bt_scan_start+0x6>
    c95e:	2801      	cmp	r0, #1
    c960:	d106      	bne.n	c970 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    c962:	4b05      	ldr	r3, [pc, #20]	; (c978 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    c964:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    c966:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    c96a:	4804      	ldr	r0, [pc, #16]	; (c97c <bt_scan_start+0x20>)
    c96c:	f003 bc48 	b.w	10200 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    c970:	f06f 0015 	mvn.w	r0, #21
    c974:	4770      	bx	lr
    c976:	bf00      	nop
    c978:	2000a828 	.word	0x2000a828
    c97c:	2000a888 	.word	0x2000a888

0000c980 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    c980:	1e4b      	subs	r3, r1, #1
    c982:	4259      	negs	r1, r3
    c984:	4159      	adcs	r1, r3
    c986:	4b01      	ldr	r3, [pc, #4]	; (c98c <lbslc_ccc_cfg_changed+0xc>)
    c988:	7019      	strb	r1, [r3, #0]
}
    c98a:	4770      	bx	lr
    c98c:	2000c147 	.word	0x2000c147

0000c990 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    c990:	b510      	push	{r4, lr}
    c992:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    c994:	4b03      	ldr	r3, [pc, #12]	; (c9a4 <write_led+0x14>)
    c996:	681b      	ldr	r3, [r3, #0]
    c998:	b10b      	cbz	r3, c99e <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    c99a:	7810      	ldrb	r0, [r2, #0]
    c99c:	4798      	blx	r3
	}

	return len;
}
    c99e:	4620      	mov	r0, r4
    c9a0:	bd10      	pop	{r4, pc}
    c9a2:	bf00      	nop
    c9a4:	2000a8ac 	.word	0x2000a8ac

0000c9a8 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    c9a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c9ac:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    c9ae:	4b0d      	ldr	r3, [pc, #52]	; (c9e4 <read_button+0x3c>)
{
    c9b0:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    c9b2:	6858      	ldr	r0, [r3, #4]
{
    c9b4:	460c      	mov	r4, r1
    c9b6:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    c9b8:	b180      	cbz	r0, c9dc <read_button+0x34>
	const char *value = attr->user_data;
    c9ba:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    c9be:	4780      	blx	r0
    c9c0:	4b09      	ldr	r3, [pc, #36]	; (c9e8 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    c9c2:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    c9c4:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    c9c6:	2301      	movs	r3, #1
    c9c8:	e9cd 8301 	strd	r8, r3, [sp, #4]
    c9cc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c9d0:	4621      	mov	r1, r4
    c9d2:	9300      	str	r3, [sp, #0]
    c9d4:	4628      	mov	r0, r5
    c9d6:	463b      	mov	r3, r7
    c9d8:	f00f fc2b 	bl	1c232 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    c9dc:	b004      	add	sp, #16
    c9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9e2:	bf00      	nop
    c9e4:	2000a8ac 	.word	0x2000a8ac
    c9e8:	2000c146 	.word	0x2000c146

0000c9ec <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    c9ec:	b120      	cbz	r0, c9f8 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    c9ee:	4b03      	ldr	r3, [pc, #12]	; (c9fc <bt_lbs_init+0x10>)
    c9f0:	6802      	ldr	r2, [r0, #0]
    c9f2:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    c9f4:	6842      	ldr	r2, [r0, #4]
    c9f6:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    c9f8:	2000      	movs	r0, #0
    c9fa:	4770      	bx	lr
    c9fc:	2000a8ac 	.word	0x2000a8ac

0000ca00 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    ca00:	b500      	push	{lr}
	if (!notify_enabled) {
    ca02:	4b0e      	ldr	r3, [pc, #56]	; (ca3c <bt_lbs_send_button_state+0x3c>)
{
    ca04:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    ca06:	781b      	ldrb	r3, [r3, #0]
{
    ca08:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    ca0c:	b19b      	cbz	r3, ca36 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    ca0e:	2100      	movs	r1, #0
    ca10:	2218      	movs	r2, #24
    ca12:	a802      	add	r0, sp, #8
    ca14:	f00e fae4 	bl	1afe0 <memset>

	params.attr = attr;
    ca18:	4b09      	ldr	r3, [pc, #36]	; (ca40 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    ca1a:	2000      	movs	r0, #0
	params.attr = attr;
    ca1c:	9303      	str	r3, [sp, #12]
	params.data = data;
    ca1e:	f10d 0307 	add.w	r3, sp, #7
    ca22:	9304      	str	r3, [sp, #16]
	params.len = len;
    ca24:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    ca26:	a902      	add	r1, sp, #8
	params.len = len;
    ca28:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    ca2c:	f006 fd82 	bl	13534 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    ca30:	b009      	add	sp, #36	; 0x24
    ca32:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    ca36:	f06f 000c 	mvn.w	r0, #12
    ca3a:	e7f9      	b.n	ca30 <bt_lbs_send_button_state+0x30>
    ca3c:	2000c147 	.word	0x2000c147
    ca40:	0001dc3c 	.word	0x0001dc3c

0000ca44 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    ca44:	2303      	movs	r3, #3
static void _DoInit(void) {
    ca46:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    ca48:	4c10      	ldr	r4, [pc, #64]	; (ca8c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    ca4a:	4a11      	ldr	r2, [pc, #68]	; (ca90 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    ca4c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    ca50:	4b10      	ldr	r3, [pc, #64]	; (ca94 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    ca52:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    ca54:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    ca56:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    ca5a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    ca5c:	4a0e      	ldr	r2, [pc, #56]	; (ca98 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    ca5e:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    ca60:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    ca62:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    ca64:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    ca66:	490d      	ldr	r1, [pc, #52]	; (ca9c <_DoInit+0x58>)
    ca68:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    ca6a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    ca6c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    ca6e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    ca70:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    ca72:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    ca74:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    ca76:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    ca78:	f00e fa2d 	bl	1aed6 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    ca7c:	4620      	mov	r0, r4
    ca7e:	4908      	ldr	r1, [pc, #32]	; (caa0 <_DoInit+0x5c>)
    ca80:	f00e fa29 	bl	1aed6 <strcpy>
  p->acID[6] = ' ';
    ca84:	2320      	movs	r3, #32
    ca86:	71a3      	strb	r3, [r4, #6]
}
    ca88:	bd10      	pop	{r4, pc}
    ca8a:	bf00      	nop
    ca8c:	2000a8b4 	.word	0x2000a8b4
    ca90:	0001f639 	.word	0x0001f639
    ca94:	2000c158 	.word	0x2000c158
    ca98:	2000c148 	.word	0x2000c148
    ca9c:	0001f642 	.word	0x0001f642
    caa0:	0001f646 	.word	0x0001f646

0000caa4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    caa4:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    caa6:	2418      	movs	r4, #24
    caa8:	fb00 4504 	mla	r5, r0, r4, r4
    caac:	4b14      	ldr	r3, [pc, #80]	; (cb00 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    caae:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    cab0:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    cab2:	fb04 3300 	mla	r3, r4, r0, r3
    cab6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    cab8:	2c01      	cmp	r4, #1
    caba:	d00e      	beq.n	cada <SEGGER_RTT_WriteNoLock+0x36>
    cabc:	2c02      	cmp	r4, #2
    cabe:	d018      	beq.n	caf2 <SEGGER_RTT_WriteNoLock+0x4e>
    cac0:	b9e4      	cbnz	r4, cafc <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    cac2:	4628      	mov	r0, r5
    cac4:	f00d fcd6 	bl	1a474 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    cac8:	4286      	cmp	r6, r0
    caca:	d804      	bhi.n	cad6 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    cacc:	4632      	mov	r2, r6
    cace:	4628      	mov	r0, r5
    cad0:	f00d fcd9 	bl	1a486 <_WriteNoCheck>
    cad4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    cad6:	4620      	mov	r0, r4
    cad8:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    cada:	4628      	mov	r0, r5
    cadc:	f00d fcca 	bl	1a474 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    cae0:	4286      	cmp	r6, r0
    cae2:	4634      	mov	r4, r6
    cae4:	bf28      	it	cs
    cae6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    cae8:	4628      	mov	r0, r5
    caea:	4622      	mov	r2, r4
    caec:	f00d fccb 	bl	1a486 <_WriteNoCheck>
    break;
    caf0:	e7f1      	b.n	cad6 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    caf2:	4628      	mov	r0, r5
}
    caf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    caf8:	f00d bce1 	b.w	1a4be <_WriteBlocking>
  switch (pRing->Flags) {
    cafc:	2400      	movs	r4, #0
  return Status;
    cafe:	e7ea      	b.n	cad6 <SEGGER_RTT_WriteNoLock+0x32>
    cb00:	2000a8b4 	.word	0x2000a8b4

0000cb04 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    cb04:	4904      	ldr	r1, [pc, #16]	; (cb18 <sub_bytes+0x14>)
    cb06:	1e43      	subs	r3, r0, #1
    cb08:	300f      	adds	r0, #15
    cb0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cb0e:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    cb10:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    cb12:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    cb14:	d1f9      	bne.n	cb0a <sub_bytes+0x6>
	}
}
    cb16:	4770      	bx	lr
    cb18:	0001f64d 	.word	0x0001f64d

0000cb1c <tc_aes128_set_encrypt_key>:
{
    cb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb1e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    cb20:	4e26      	ldr	r6, [pc, #152]	; (cbbc <tc_aes128_set_encrypt_key+0xa0>)
{
    cb22:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    cb24:	ad01      	add	r5, sp, #4
{
    cb26:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    cb28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cb2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cb2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cb2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cb30:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    cb34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    cb38:	4638      	mov	r0, r7
    cb3a:	2f00      	cmp	r7, #0
    cb3c:	d039      	beq.n	cbb2 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    cb3e:	2c00      	cmp	r4, #0
    cb40:	d039      	beq.n	cbb6 <tc_aes128_set_encrypt_key+0x9a>
    cb42:	1f38      	subs	r0, r7, #4
    cb44:	4602      	mov	r2, r0
    cb46:	4621      	mov	r1, r4
    cb48:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    cb4a:	784b      	ldrb	r3, [r1, #1]
    cb4c:	780d      	ldrb	r5, [r1, #0]
    cb4e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    cb50:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    cb54:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    cb56:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    cb58:	432b      	orrs	r3, r5
    cb5a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    cb5e:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    cb60:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    cb64:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    cb68:	d1ef      	bne.n	cb4a <tc_aes128_set_encrypt_key+0x2e>
    cb6a:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    cb6c:	4c14      	ldr	r4, [pc, #80]	; (cbc0 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    cb6e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    cb70:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    cb72:	d116      	bne.n	cba2 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    cb74:	f3c3 4207 	ubfx	r2, r3, #16, #8
    cb78:	5ca5      	ldrb	r5, [r4, r2]
    cb7a:	0e1a      	lsrs	r2, r3, #24
    cb7c:	5ca2      	ldrb	r2, [r4, r2]
    cb7e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    cb82:	f3c3 2507 	ubfx	r5, r3, #8, #8
    cb86:	5d65      	ldrb	r5, [r4, r5]
    cb88:	b2db      	uxtb	r3, r3
    cb8a:	5ce3      	ldrb	r3, [r4, r3]
    cb8c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    cb90:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    cb94:	ad0c      	add	r5, sp, #48	; 0x30
    cb96:	f021 0303 	bic.w	r3, r1, #3
    cb9a:	442b      	add	r3, r5
    cb9c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    cba0:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    cba2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    cba6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    cba8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    cbaa:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    cbac:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    cbae:	d1de      	bne.n	cb6e <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    cbb0:	2001      	movs	r0, #1
}
    cbb2:	b00d      	add	sp, #52	; 0x34
    cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    cbb6:	4620      	mov	r0, r4
    cbb8:	e7fb      	b.n	cbb2 <tc_aes128_set_encrypt_key+0x96>
    cbba:	bf00      	nop
    cbbc:	0001d9a4 	.word	0x0001d9a4
    cbc0:	0001f64d 	.word	0x0001f64d

0000cbc4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    cbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    cbc8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    cbca:	6803      	ldr	r3, [r0, #0]
{
    cbcc:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    cbce:	9302      	str	r3, [sp, #8]
    cbd0:	6843      	ldr	r3, [r0, #4]
    cbd2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; cd8c <compress+0x1c8>
    cbd6:	9303      	str	r3, [sp, #12]
    cbd8:	6883      	ldr	r3, [r0, #8]
    cbda:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    cbde:	9304      	str	r3, [sp, #16]
    cbe0:	68c3      	ldr	r3, [r0, #12]
    cbe2:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    cbe4:	6903      	ldr	r3, [r0, #16]
    cbe6:	9306      	str	r3, [sp, #24]
    cbe8:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    cbea:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    cbee:	9307      	str	r3, [sp, #28]
    cbf0:	6983      	ldr	r3, [r0, #24]
    cbf2:	9308      	str	r3, [sp, #32]
    cbf4:	69c3      	ldr	r3, [r0, #28]
    cbf6:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    cbfa:	4698      	mov	r8, r3
    cbfc:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    cbfe:	9b04      	ldr	r3, [sp, #16]
    cc00:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    cc02:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    cc04:	ab0c      	add	r3, sp, #48	; 0x30
    cc06:	ba2d      	rev	r5, r5
    cc08:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    cc0a:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    cc0e:	3704      	adds	r7, #4
    cc10:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    cc14:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cc18:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    cc1c:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    cc20:	444d      	add	r5, r9
    cc22:	ea2b 0302 	bic.w	r3, fp, r2
    cc26:	ea02 090c 	and.w	r9, r2, ip
    cc2a:	ea83 0309 	eor.w	r3, r3, r9
    cc2e:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    cc30:	9d00      	ldr	r5, [sp, #0]
    cc32:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cc36:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    cc38:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    cc3a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    cc3e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    cc42:	4025      	ands	r5, r4
    cc44:	ea06 0909 	and.w	r9, r6, r9
    cc48:	ea85 0509 	eor.w	r5, r5, r9
    cc4c:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    cc50:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    cc52:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    cc54:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    cc58:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    cc5a:	f8dd e000 	ldr.w	lr, [sp]
    cc5e:	46d8      	mov	r8, fp
    cc60:	f040 8085 	bne.w	cd6e <compress+0x1aa>
    cc64:	f04f 0a10 	mov.w	sl, #16
    cc68:	4949      	ldr	r1, [pc, #292]	; (cd90 <compress+0x1cc>)
    cc6a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    cc6c:	4651      	mov	r1, sl
    cc6e:	f10a 0a01 	add.w	sl, sl, #1
    cc72:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    cc76:	f00a 070f 	and.w	r7, sl, #15
    cc7a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    cc7e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cc82:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    cc86:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    cc8a:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    cc8c:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    cc90:	f101 070e 	add.w	r7, r1, #14
    cc94:	f007 070f 	and.w	r7, r7, #15
    cc98:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    cc9c:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cca0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    cca2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    cca6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    ccaa:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ccae:	f001 010f 	and.w	r1, r1, #15
    ccb2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    ccb6:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    ccba:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    ccbe:	f851 1c40 	ldr.w	r1, [r1, #-64]
    ccc2:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    ccc6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ccca:	4471      	add	r1, lr
		s0 = sigma0(s0);
    cccc:	f8dd e004 	ldr.w	lr, [sp, #4]
    ccd0:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    ccd4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ccd8:	4441      	add	r1, r8
		s1 = sigma1(s1);
    ccda:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ccde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cce0:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cce2:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cce6:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    ccea:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ccee:	ea05 0802 	and.w	r8, r5, r2
    ccf2:	970a      	str	r7, [sp, #40]	; 0x28
    ccf4:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    ccf8:	ea2c 0705 	bic.w	r7, ip, r5
    ccfc:	ea87 0708 	eor.w	r7, r7, r8
    cd00:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    cd04:	444f      	add	r7, r9
    cd06:	4477      	add	r7, lr
    cd08:	4439      	add	r1, r7
    cd0a:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    cd0c:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    cd10:	ea84 0b06 	eor.w	fp, r4, r6
    cd14:	ea0b 0b03 	and.w	fp, fp, r3
    cd18:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    cd1c:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    cd20:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    cd24:	ea8b 0e0e 	eor.w	lr, fp, lr
    cd28:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    cd2c:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    cd2e:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    cd30:	46e3      	mov	fp, ip
    cd32:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    cd34:	9600      	str	r6, [sp, #0]
    cd36:	d121      	bne.n	cd7c <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    cd38:	9f02      	ldr	r7, [sp, #8]
    cd3a:	440f      	add	r7, r1
    cd3c:	9903      	ldr	r1, [sp, #12]
    cd3e:	6007      	str	r7, [r0, #0]
    cd40:	4419      	add	r1, r3
    cd42:	9b04      	ldr	r3, [sp, #16]
    cd44:	6041      	str	r1, [r0, #4]
    cd46:	4423      	add	r3, r4
    cd48:	6083      	str	r3, [r0, #8]
    cd4a:	9b05      	ldr	r3, [sp, #20]
    cd4c:	4433      	add	r3, r6
    cd4e:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    cd50:	9b06      	ldr	r3, [sp, #24]
    cd52:	4443      	add	r3, r8
    cd54:	6103      	str	r3, [r0, #16]
    cd56:	9b07      	ldr	r3, [sp, #28]
    cd58:	442b      	add	r3, r5
    cd5a:	6143      	str	r3, [r0, #20]
    cd5c:	9b08      	ldr	r3, [sp, #32]
    cd5e:	4413      	add	r3, r2
    cd60:	6183      	str	r3, [r0, #24]
    cd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd64:	4463      	add	r3, ip
    cd66:	61c3      	str	r3, [r0, #28]
}
    cd68:	b01d      	add	sp, #116	; 0x74
    cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd6e:	46e3      	mov	fp, ip
    cd70:	9600      	str	r6, [sp, #0]
    cd72:	4694      	mov	ip, r2
    cd74:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    cd76:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    cd78:	461c      	mov	r4, r3
    cd7a:	e742      	b.n	cc02 <compress+0x3e>
    cd7c:	4694      	mov	ip, r2
    cd7e:	4626      	mov	r6, r4
    cd80:	462a      	mov	r2, r5
    cd82:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cd84:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    cd86:	460b      	mov	r3, r1
    cd88:	e770      	b.n	cc6c <compress+0xa8>
    cd8a:	bf00      	nop
    cd8c:	0001dc8c 	.word	0x0001dc8c
    cd90:	0001dccc 	.word	0x0001dccc

0000cd94 <tc_sha256_init>:
{
    cd94:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    cd96:	4604      	mov	r4, r0
    cd98:	b1c8      	cbz	r0, cdce <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    cd9a:	2270      	movs	r2, #112	; 0x70
    cd9c:	2100      	movs	r1, #0
    cd9e:	f00d fbcb 	bl	1a538 <_set>
	s->iv[1] = 0xbb67ae85;
    cda2:	4b0b      	ldr	r3, [pc, #44]	; (cdd0 <tc_sha256_init+0x3c>)
    cda4:	4a0b      	ldr	r2, [pc, #44]	; (cdd4 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    cda6:	490c      	ldr	r1, [pc, #48]	; (cdd8 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    cda8:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    cdac:	4b0b      	ldr	r3, [pc, #44]	; (cddc <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    cdae:	480c      	ldr	r0, [pc, #48]	; (cde0 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    cdb0:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    cdb4:	4b0b      	ldr	r3, [pc, #44]	; (cde4 <tc_sha256_init+0x50>)
    cdb6:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    cdba:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    cdbc:	4b0a      	ldr	r3, [pc, #40]	; (cde8 <tc_sha256_init+0x54>)
    cdbe:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    cdc0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    cdc4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    cdc8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    cdcc:	61e3      	str	r3, [r4, #28]
}
    cdce:	bd10      	pop	{r4, pc}
    cdd0:	bb67ae85 	.word	0xbb67ae85
    cdd4:	6a09e667 	.word	0x6a09e667
    cdd8:	3c6ef372 	.word	0x3c6ef372
    cddc:	a54ff53a 	.word	0xa54ff53a
    cde0:	510e527f 	.word	0x510e527f
    cde4:	9b05688c 	.word	0x9b05688c
    cde8:	1f83d9ab 	.word	0x1f83d9ab

0000cdec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    cdec:	4a0a      	ldr	r2, [pc, #40]	; (ce18 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    cdee:	490b      	ldr	r1, [pc, #44]	; (ce1c <arch_swap+0x30>)
	_current->arch.basepri = key;
    cdf0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    cdf2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    cdf4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    cdf8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cdfc:	4908      	ldr	r1, [pc, #32]	; (ce20 <arch_swap+0x34>)
    cdfe:	684b      	ldr	r3, [r1, #4]
    ce00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ce04:	604b      	str	r3, [r1, #4]
    ce06:	2300      	movs	r3, #0
    ce08:	f383 8811 	msr	BASEPRI, r3
    ce0c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    ce10:	6893      	ldr	r3, [r2, #8]
}
    ce12:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    ce16:	4770      	bx	lr
    ce18:	2000ae1c 	.word	0x2000ae1c
    ce1c:	0001e2f8 	.word	0x0001e2f8
    ce20:	e000ed00 	.word	0xe000ed00

0000ce24 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ce24:	4914      	ldr	r1, [pc, #80]	; (ce78 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ce26:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ce28:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    ce2c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ce2e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ce32:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ce36:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ce38:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ce3c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ce40:	4f0e      	ldr	r7, [pc, #56]	; (ce7c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ce42:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ce46:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    ce48:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ce4a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ce4c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    ce50:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ce52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ce56:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ce5a:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    ce5e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ce62:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    ce66:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    ce6a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    ce6c:	f00d ffa7 	bl	1adbe <configure_builtin_stack_guard>
    pop {r2, lr}
    ce70:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    ce74:	4770      	bx	lr
    ce76:	0000      	.short	0x0000
    ldr r1, =_kernel
    ce78:	2000ae1c 	.word	0x2000ae1c
    ldr v4, =_SCS_ICSR
    ce7c:	e000ed04 	.word	0xe000ed04

0000ce80 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    ce80:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ce84:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ce86:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ce8a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ce8e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ce90:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ce94:	2902      	cmp	r1, #2
    beq _oops
    ce96:	d0ff      	beq.n	ce98 <_oops>

0000ce98 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ce98:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ce9a:	f00d ff94 	bl	1adc6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    ce9e:	bd01      	pop	{r0, pc}

0000cea0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cea0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    cea2:	2b00      	cmp	r3, #0
    cea4:	db08      	blt.n	ceb8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cea6:	2201      	movs	r2, #1
    cea8:	f000 001f 	and.w	r0, r0, #31
    ceac:	fa02 f000 	lsl.w	r0, r2, r0
    ceb0:	4a02      	ldr	r2, [pc, #8]	; (cebc <arch_irq_enable+0x1c>)
    ceb2:	095b      	lsrs	r3, r3, #5
    ceb4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    ceb8:	4770      	bx	lr
    ceba:	bf00      	nop
    cebc:	e000e100 	.word	0xe000e100

0000cec0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    cec0:	4b05      	ldr	r3, [pc, #20]	; (ced8 <arch_irq_is_enabled+0x18>)
    cec2:	0942      	lsrs	r2, r0, #5
    cec4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cec8:	2301      	movs	r3, #1
    ceca:	f000 001f 	and.w	r0, r0, #31
    cece:	fa03 f000 	lsl.w	r0, r3, r0
}
    ced2:	4010      	ands	r0, r2
    ced4:	4770      	bx	lr
    ced6:	bf00      	nop
    ced8:	e000e100 	.word	0xe000e100

0000cedc <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    cedc:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    cede:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cee0:	2c07      	cmp	r4, #7
{
    cee2:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cee4:	d908      	bls.n	cef8 <z_arm_irq_priority_set+0x1c>
    cee6:	490d      	ldr	r1, [pc, #52]	; (cf1c <z_arm_irq_priority_set+0x40>)
    cee8:	480d      	ldr	r0, [pc, #52]	; (cf20 <z_arm_irq_priority_set+0x44>)
    ceea:	225c      	movs	r2, #92	; 0x5c
    ceec:	f00c fe0d 	bl	19b0a <printk>
    cef0:	215c      	movs	r1, #92	; 0x5c
    cef2:	480a      	ldr	r0, [pc, #40]	; (cf1c <z_arm_irq_priority_set+0x40>)
    cef4:	f00d f8af 	bl	1a056 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    cef8:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    cefa:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cefc:	bfac      	ite	ge
    cefe:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cf02:	4b08      	ldrlt	r3, [pc, #32]	; (cf24 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cf04:	ea4f 1444 	mov.w	r4, r4, lsl #5
    cf08:	b2e4      	uxtb	r4, r4
    cf0a:	bfab      	itete	ge
    cf0c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cf10:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cf14:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cf18:	555c      	strblt	r4, [r3, r5]
}
    cf1a:	bd38      	pop	{r3, r4, r5, pc}
    cf1c:	0001f74d 	.word	0x0001f74d
    cf20:	0001ecfc 	.word	0x0001ecfc
    cf24:	e000ed14 	.word	0xe000ed14

0000cf28 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    cf28:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    cf2c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    cf2e:	490b      	ldr	r1, [pc, #44]	; (cf5c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    cf30:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    cf34:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    cf36:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    cf3a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    cf3e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    cf40:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    cf44:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    cf48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    cf4c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    cf50:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    cf52:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    cf54:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    cf56:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    cf5a:	4770      	bx	lr
    cf5c:	00019be7 	.word	0x00019be7

0000cf60 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    cf60:	4604      	mov	r4, r0
    cf62:	b508      	push	{r3, lr}
    cf64:	460e      	mov	r6, r1
    cf66:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    cf68:	f000 faf6 	bl	d558 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    cf6c:	4b08      	ldr	r3, [pc, #32]	; (cf90 <arch_switch_to_main_thread+0x30>)
    cf6e:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    cf70:	6f63      	ldr	r3, [r4, #116]	; 0x74
    cf72:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    cf76:	4628      	mov	r0, r5
    cf78:	f386 8809 	msr	PSP, r6
    cf7c:	2100      	movs	r1, #0
    cf7e:	b663      	cpsie	if
    cf80:	f381 8811 	msr	BASEPRI, r1
    cf84:	f3bf 8f6f 	isb	sy
    cf88:	2200      	movs	r2, #0
    cf8a:	2300      	movs	r3, #0
    cf8c:	f00c fe2b 	bl	19be6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    cf90:	2000ae1c 	.word	0x2000ae1c

0000cf94 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    cf94:	4901      	ldr	r1, [pc, #4]	; (cf9c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    cf96:	2210      	movs	r2, #16
	str	r2, [r1]
    cf98:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    cf9a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    cf9c:	e000ed10 	.word	0xe000ed10

0000cfa0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    cfa0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    cfa2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    cfa4:	f380 8811 	msr	BASEPRI, r0
	isb
    cfa8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    cfac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    cfb0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    cfb2:	b662      	cpsie	i
	isb
    cfb4:	f3bf 8f6f 	isb	sy

	bx	lr
    cfb8:	4770      	bx	lr
    cfba:	bf00      	nop

0000cfbc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    cfbc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    cfbe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    cfc0:	f381 8811 	msr	BASEPRI, r1

	wfe
    cfc4:	bf20      	wfe

	msr	BASEPRI, r0
    cfc6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    cfca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    cfcc:	4770      	bx	lr
    cfce:	bf00      	nop

0000cfd0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    cfd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cfd2:	4605      	mov	r5, r0

	if (esf != NULL) {
    cfd4:	460c      	mov	r4, r1
    cfd6:	b1c9      	cbz	r1, d00c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    cfd8:	688b      	ldr	r3, [r1, #8]
    cfda:	4810      	ldr	r0, [pc, #64]	; (d01c <z_arm_fatal_error+0x4c>)
    cfdc:	9300      	str	r3, [sp, #0]
    cfde:	e9d1 2300 	ldrd	r2, r3, [r1]
    cfe2:	2145      	movs	r1, #69	; 0x45
    cfe4:	f00c fd91 	bl	19b0a <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    cfe8:	6963      	ldr	r3, [r4, #20]
    cfea:	2145      	movs	r1, #69	; 0x45
    cfec:	9300      	str	r3, [sp, #0]
    cfee:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    cff2:	480b      	ldr	r0, [pc, #44]	; (d020 <z_arm_fatal_error+0x50>)
    cff4:	f00c fd89 	bl	19b0a <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    cff8:	2145      	movs	r1, #69	; 0x45
    cffa:	69e2      	ldr	r2, [r4, #28]
    cffc:	4809      	ldr	r0, [pc, #36]	; (d024 <z_arm_fatal_error+0x54>)
    cffe:	f00c fd84 	bl	19b0a <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d002:	2145      	movs	r1, #69	; 0x45
    d004:	69a2      	ldr	r2, [r4, #24]
    d006:	4808      	ldr	r0, [pc, #32]	; (d028 <z_arm_fatal_error+0x58>)
    d008:	f00c fd7f 	bl	19b0a <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d00c:	4621      	mov	r1, r4
    d00e:	4628      	mov	r0, r5
}
    d010:	b003      	add	sp, #12
    d012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    d016:	f009 bdf9 	b.w	16c0c <z_fatal_error>
    d01a:	bf00      	nop
    d01c:	0001f783 	.word	0x0001f783
    d020:	0001f7b7 	.word	0x0001f7b7
    d024:	0001f7eb 	.word	0x0001f7eb
    d028:	0001f7ff 	.word	0x0001f7ff

0000d02c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d02c:	bf30      	wfi
    b z_SysNmiOnReset
    d02e:	f7ff bffd 	b.w	d02c <z_SysNmiOnReset>
    d032:	bf00      	nop

0000d034 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d034:	4a0e      	ldr	r2, [pc, #56]	; (d070 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d036:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d038:	4b0e      	ldr	r3, [pc, #56]	; (d074 <z_arm_prep_c+0x40>)
    d03a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d03e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d040:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d044:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d048:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d04c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d054:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d058:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d05c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d060:	f009 fe60 	bl	16d24 <z_bss_zero>
	z_data_copy();
    d064:	f00b fe96 	bl	18d94 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d068:	f000 fa48 	bl	d4fc <z_arm_interrupt_init>
	z_cstart();
    d06c:	f009 fe7e 	bl	16d6c <z_cstart>
    d070:	00008000 	.word	0x00008000
    d074:	e000ed00 	.word	0xe000ed00

0000d078 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d078:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    d07a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d07c:	4a0b      	ldr	r2, [pc, #44]	; (d0ac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d07e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    d080:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d082:	bf1e      	ittt	ne
	movne	r1, #0
    d084:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d086:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    d088:	f010 f88a 	blne	1d1a0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d08c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d08e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d092:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d096:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    d09a:	4905      	ldr	r1, [pc, #20]	; (d0b0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d09c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d09e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    d0a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d0a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d0a6:	4903      	ldr	r1, [pc, #12]	; (d0b4 <_isr_wrapper+0x3c>)
	bx r1
    d0a8:	4708      	bx	r1
    d0aa:	0000      	.short	0x0000
	ldr r2, =_kernel
    d0ac:	2000ae1c 	.word	0x2000ae1c
	ldr r1, =_sw_isr_table
    d0b0:	0001d5a0 	.word	0x0001d5a0
	ldr r1, =z_arm_int_exit
    d0b4:	0000d4bd 	.word	0x0000d4bd

0000d0b8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    d0b8:	f00c ffec 	bl	1a094 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d0bc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d0be:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d0c2:	4808      	ldr	r0, [pc, #32]	; (d0e4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d0c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d0c8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d0ca:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d0ce:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d0d2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d0d4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d0d6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d0da:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d0de:	f7ff ffa9 	bl	d034 <z_arm_prep_c>
    d0e2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    d0e4:	2000ec98 	.word	0x2000ec98

0000d0e8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d0e8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d0ec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d0f0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d0f2:	4672      	mov	r2, lr
	bl z_arm_fault
    d0f4:	f000 f91a 	bl	d32c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d0f8:	bd01      	pop	{r0, pc}
    d0fa:	bf00      	nop

0000d0fc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    d0fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d0fe:	4c21      	ldr	r4, [pc, #132]	; (d184 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    d100:	2145      	movs	r1, #69	; 0x45
    d102:	4821      	ldr	r0, [pc, #132]	; (d188 <usage_fault.constprop.0+0x8c>)
    d104:	f00c fd01 	bl	19b0a <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d10a:	019d      	lsls	r5, r3, #6
    d10c:	d503      	bpl.n	d116 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    d10e:	2145      	movs	r1, #69	; 0x45
    d110:	481e      	ldr	r0, [pc, #120]	; (d18c <usage_fault.constprop.0+0x90>)
    d112:	f00c fcfa 	bl	19b0a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d118:	01dc      	lsls	r4, r3, #7
    d11a:	d503      	bpl.n	d124 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    d11c:	2145      	movs	r1, #69	; 0x45
    d11e:	481c      	ldr	r0, [pc, #112]	; (d190 <usage_fault.constprop.0+0x94>)
    d120:	f00c fcf3 	bl	19b0a <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d124:	4d17      	ldr	r5, [pc, #92]	; (d184 <usage_fault.constprop.0+0x88>)
    d126:	6aac      	ldr	r4, [r5, #40]	; 0x28
    d128:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    d12c:	d004      	beq.n	d138 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    d12e:	2145      	movs	r1, #69	; 0x45
    d130:	4818      	ldr	r0, [pc, #96]	; (d194 <usage_fault.constprop.0+0x98>)
    d132:	f00c fcea 	bl	19b0a <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    d136:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d138:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d13a:	0318      	lsls	r0, r3, #12
    d13c:	d503      	bpl.n	d146 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    d13e:	2145      	movs	r1, #69	; 0x45
    d140:	4815      	ldr	r0, [pc, #84]	; (d198 <usage_fault.constprop.0+0x9c>)
    d142:	f00c fce2 	bl	19b0a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d146:	4d0f      	ldr	r5, [pc, #60]	; (d184 <usage_fault.constprop.0+0x88>)
    d148:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d14a:	0359      	lsls	r1, r3, #13
    d14c:	d503      	bpl.n	d156 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d14e:	2145      	movs	r1, #69	; 0x45
    d150:	4812      	ldr	r0, [pc, #72]	; (d19c <usage_fault.constprop.0+0xa0>)
    d152:	f00c fcda 	bl	19b0a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d156:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d158:	039a      	lsls	r2, r3, #14
    d15a:	d503      	bpl.n	d164 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d15c:	2145      	movs	r1, #69	; 0x45
    d15e:	4810      	ldr	r0, [pc, #64]	; (d1a0 <usage_fault.constprop.0+0xa4>)
    d160:	f00c fcd3 	bl	19b0a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d164:	4d07      	ldr	r5, [pc, #28]	; (d184 <usage_fault.constprop.0+0x88>)
    d166:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d168:	03db      	lsls	r3, r3, #15
    d16a:	d503      	bpl.n	d174 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d16c:	2145      	movs	r1, #69	; 0x45
    d16e:	480d      	ldr	r0, [pc, #52]	; (d1a4 <usage_fault.constprop.0+0xa8>)
    d170:	f00c fccb 	bl	19b0a <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d174:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    d176:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d178:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d17c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d180:	62ab      	str	r3, [r5, #40]	; 0x28
}
    d182:	bd38      	pop	{r3, r4, r5, pc}
    d184:	e000ed00 	.word	0xe000ed00
    d188:	0001f832 	.word	0x0001f832
    d18c:	0001f84f 	.word	0x0001f84f
    d190:	0001f867 	.word	0x0001f867
    d194:	0001f886 	.word	0x0001f886
    d198:	0001f8b5 	.word	0x0001f8b5
    d19c:	0001f8d8 	.word	0x0001f8d8
    d1a0:	0001f902 	.word	0x0001f902
    d1a4:	0001f921 	.word	0x0001f921

0000d1a8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d1a8:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d1aa:	4c23      	ldr	r4, [pc, #140]	; (d238 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d1ac:	4606      	mov	r6, r0
    d1ae:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    d1b0:	4822      	ldr	r0, [pc, #136]	; (d23c <bus_fault.constprop.0+0x94>)
    d1b2:	2145      	movs	r1, #69	; 0x45
    d1b4:	f00c fca9 	bl	19b0a <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d1b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1ba:	04d9      	lsls	r1, r3, #19
    d1bc:	d503      	bpl.n	d1c6 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    d1be:	2145      	movs	r1, #69	; 0x45
    d1c0:	481f      	ldr	r0, [pc, #124]	; (d240 <bus_fault.constprop.0+0x98>)
    d1c2:	f00c fca2 	bl	19b0a <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d1c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1c8:	051a      	lsls	r2, r3, #20
    d1ca:	d503      	bpl.n	d1d4 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    d1cc:	2145      	movs	r1, #69	; 0x45
    d1ce:	481d      	ldr	r0, [pc, #116]	; (d244 <bus_fault.constprop.0+0x9c>)
    d1d0:	f00c fc9b 	bl	19b0a <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d1d4:	4c18      	ldr	r4, [pc, #96]	; (d238 <bus_fault.constprop.0+0x90>)
    d1d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1d8:	059b      	lsls	r3, r3, #22
    d1da:	d510      	bpl.n	d1fe <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    d1dc:	481a      	ldr	r0, [pc, #104]	; (d248 <bus_fault.constprop.0+0xa0>)
    d1de:	2145      	movs	r1, #69	; 0x45
    d1e0:	f00c fc93 	bl	19b0a <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    d1e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d1e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1e8:	0418      	lsls	r0, r3, #16
    d1ea:	d508      	bpl.n	d1fe <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    d1ec:	2145      	movs	r1, #69	; 0x45
    d1ee:	4817      	ldr	r0, [pc, #92]	; (d24c <bus_fault.constprop.0+0xa4>)
    d1f0:	f00c fc8b 	bl	19b0a <printk>
			if (from_hard_fault) {
    d1f4:	b11e      	cbz	r6, d1fe <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d1f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    d1fc:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d1fe:	4c0e      	ldr	r4, [pc, #56]	; (d238 <bus_fault.constprop.0+0x90>)
    d200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d202:	0559      	lsls	r1, r3, #21
    d204:	d503      	bpl.n	d20e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    d206:	2145      	movs	r1, #69	; 0x45
    d208:	4811      	ldr	r0, [pc, #68]	; (d250 <bus_fault.constprop.0+0xa8>)
    d20a:	f00c fc7e 	bl	19b0a <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d20e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d210:	05da      	lsls	r2, r3, #23
    d212:	d50b      	bpl.n	d22c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    d214:	2145      	movs	r1, #69	; 0x45
    d216:	480f      	ldr	r0, [pc, #60]	; (d254 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d218:	f00c fc77 	bl	19b0a <printk>
	*recoverable = memory_fault_recoverable(esf);
    d21c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d21e:	4a06      	ldr	r2, [pc, #24]	; (d238 <bus_fault.constprop.0+0x90>)
    d220:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d222:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    d226:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d228:	7028      	strb	r0, [r5, #0]
}
    d22a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d22c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d22e:	049b      	lsls	r3, r3, #18
    d230:	d5f4      	bpl.n	d21c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d232:	2145      	movs	r1, #69	; 0x45
    d234:	4808      	ldr	r0, [pc, #32]	; (d258 <bus_fault.constprop.0+0xb0>)
    d236:	e7ef      	b.n	d218 <bus_fault.constprop.0+0x70>
    d238:	e000ed00 	.word	0xe000ed00
    d23c:	0001f951 	.word	0x0001f951
    d240:	0001f96c 	.word	0x0001f96c
    d244:	0001f982 	.word	0x0001f982
    d248:	0001f99a 	.word	0x0001f99a
    d24c:	0001f9b8 	.word	0x0001f9b8
    d250:	0001f9d2 	.word	0x0001f9d2
    d254:	0001f9f2 	.word	0x0001f9f2
    d258:	0001fa0f 	.word	0x0001fa0f

0000d25c <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d25c:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d25e:	4c29      	ldr	r4, [pc, #164]	; (d304 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d260:	4606      	mov	r6, r0
    d262:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    d264:	4828      	ldr	r0, [pc, #160]	; (d308 <mem_manage_fault.constprop.0+0xac>)
    d266:	2145      	movs	r1, #69	; 0x45
    d268:	f00c fc4f 	bl	19b0a <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d26c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d26e:	06d8      	lsls	r0, r3, #27
    d270:	d503      	bpl.n	d27a <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    d272:	2145      	movs	r1, #69	; 0x45
    d274:	4825      	ldr	r0, [pc, #148]	; (d30c <mem_manage_fault.constprop.0+0xb0>)
    d276:	f00c fc48 	bl	19b0a <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d27a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d27c:	0719      	lsls	r1, r3, #28
    d27e:	d503      	bpl.n	d288 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    d280:	2145      	movs	r1, #69	; 0x45
    d282:	4823      	ldr	r0, [pc, #140]	; (d310 <mem_manage_fault.constprop.0+0xb4>)
    d284:	f00c fc41 	bl	19b0a <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d288:	4c1e      	ldr	r4, [pc, #120]	; (d304 <mem_manage_fault.constprop.0+0xa8>)
    d28a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d28c:	079a      	lsls	r2, r3, #30
    d28e:	d510      	bpl.n	d2b2 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    d290:	2145      	movs	r1, #69	; 0x45
    d292:	4820      	ldr	r0, [pc, #128]	; (d314 <mem_manage_fault.constprop.0+0xb8>)
    d294:	f00c fc39 	bl	19b0a <printk>
		uint32_t temp = SCB->MMFAR;
    d298:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d29a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d29c:	061b      	lsls	r3, r3, #24
    d29e:	d508      	bpl.n	d2b2 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    d2a0:	2145      	movs	r1, #69	; 0x45
    d2a2:	481d      	ldr	r0, [pc, #116]	; (d318 <mem_manage_fault.constprop.0+0xbc>)
    d2a4:	f00c fc31 	bl	19b0a <printk>
			if (from_hard_fault) {
    d2a8:	b11e      	cbz	r6, d2b2 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d2aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d2ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d2b0:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d2b2:	4c14      	ldr	r4, [pc, #80]	; (d304 <mem_manage_fault.constprop.0+0xa8>)
    d2b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d2b6:	07d8      	lsls	r0, r3, #31
    d2b8:	d503      	bpl.n	d2c2 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    d2ba:	2145      	movs	r1, #69	; 0x45
    d2bc:	4817      	ldr	r0, [pc, #92]	; (d31c <mem_manage_fault.constprop.0+0xc0>)
    d2be:	f00c fc24 	bl	19b0a <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d2c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d2c4:	0699      	lsls	r1, r3, #26
    d2c6:	d503      	bpl.n	d2d0 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    d2c8:	2145      	movs	r1, #69	; 0x45
    d2ca:	4815      	ldr	r0, [pc, #84]	; (d320 <mem_manage_fault.constprop.0+0xc4>)
    d2cc:	f00c fc1d 	bl	19b0a <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d2d0:	4b0c      	ldr	r3, [pc, #48]	; (d304 <mem_manage_fault.constprop.0+0xa8>)
    d2d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d2d4:	06d2      	lsls	r2, r2, #27
    d2d6:	d402      	bmi.n	d2de <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    d2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d2da:	079b      	lsls	r3, r3, #30
    d2dc:	d50a      	bpl.n	d2f4 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    d2de:	4911      	ldr	r1, [pc, #68]	; (d324 <mem_manage_fault.constprop.0+0xc8>)
    d2e0:	4811      	ldr	r0, [pc, #68]	; (d328 <mem_manage_fault.constprop.0+0xcc>)
    d2e2:	f240 1247 	movw	r2, #327	; 0x147
    d2e6:	f00c fc10 	bl	19b0a <printk>
    d2ea:	f240 1147 	movw	r1, #327	; 0x147
    d2ee:	480d      	ldr	r0, [pc, #52]	; (d324 <mem_manage_fault.constprop.0+0xc8>)
    d2f0:	f00c feb1 	bl	1a056 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    d2f4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d2f6:	4a03      	ldr	r2, [pc, #12]	; (d304 <mem_manage_fault.constprop.0+0xa8>)
    d2f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d2fa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    d2fe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d300:	7028      	strb	r0, [r5, #0]
}
    d302:	bd70      	pop	{r4, r5, r6, pc}
    d304:	e000ed00 	.word	0xe000ed00
    d308:	0001fa43 	.word	0x0001fa43
    d30c:	0001fa5e 	.word	0x0001fa5e
    d310:	0001f982 	.word	0x0001f982
    d314:	0001fa96 	.word	0x0001fa96
    d318:	0001fab3 	.word	0x0001fab3
    d31c:	0001face 	.word	0x0001face
    d320:	0001fa0f 	.word	0x0001fa0f
    d324:	0001faf2 	.word	0x0001faf2
    d328:	0001ecfc 	.word	0x0001ecfc

0000d32c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d330:	4b51      	ldr	r3, [pc, #324]	; (d478 <z_arm_fault+0x14c>)
{
    d332:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d334:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    d338:	4689      	mov	r9, r1
    d33a:	4614      	mov	r4, r2
    d33c:	2600      	movs	r6, #0
    d33e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d340:	f3c8 0708 	ubfx	r7, r8, #0, #9
    d344:	f386 8811 	msr	BASEPRI, r6
    d348:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d34c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    d350:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d354:	d111      	bne.n	d37a <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d356:	07d0      	lsls	r0, r2, #31
    d358:	d40f      	bmi.n	d37a <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d35a:	0651      	lsls	r1, r2, #25
    d35c:	d403      	bmi.n	d366 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d35e:	0722      	lsls	r2, r4, #28
    d360:	d408      	bmi.n	d374 <z_arm_fault+0x48>
			*nested_exc = true;
    d362:	2601      	movs	r6, #1
    d364:	e008      	b.n	d378 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    d366:	2145      	movs	r1, #69	; 0x45
    d368:	4844      	ldr	r0, [pc, #272]	; (d47c <z_arm_fault+0x150>)
    d36a:	f00c fbce 	bl	19b0a <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d36e:	f014 0404 	ands.w	r4, r4, #4
    d372:	d000      	beq.n	d376 <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    d374:	464d      	mov	r5, r9
	*nested_exc = false;
    d376:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    d378:	b95d      	cbnz	r5, d392 <z_arm_fault+0x66>
    d37a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    d37e:	4940      	ldr	r1, [pc, #256]	; (d480 <z_arm_fault+0x154>)
    d380:	4840      	ldr	r0, [pc, #256]	; (d484 <z_arm_fault+0x158>)
    d382:	f00c fbc2 	bl	19b0a <printk>
    d386:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    d38a:	483d      	ldr	r0, [pc, #244]	; (d480 <z_arm_fault+0x154>)
    d38c:	f00c fe63 	bl	1a056 <assert_post_action>
    d390:	2500      	movs	r5, #0
	*recoverable = false;
    d392:	2400      	movs	r4, #0
    d394:	1efb      	subs	r3, r7, #3
    d396:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    d39a:	2b09      	cmp	r3, #9
    d39c:	d85a      	bhi.n	d454 <z_arm_fault+0x128>
    d39e:	e8df f003 	tbb	[pc, r3]
    d3a2:	4e05      	.short	0x4e05
    d3a4:	59593252 	.word	0x59593252
    d3a8:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d3ac:	4f32      	ldr	r7, [pc, #200]	; (d478 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    d3ae:	2145      	movs	r1, #69	; 0x45
    d3b0:	4835      	ldr	r0, [pc, #212]	; (d488 <z_arm_fault+0x15c>)
    d3b2:	f00c fbaa 	bl	19b0a <printk>
	*recoverable = false;
    d3b6:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d3ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    d3bc:	f014 0402 	ands.w	r4, r4, #2
    d3c0:	d005      	beq.n	d3ce <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    d3c2:	2145      	movs	r1, #69	; 0x45
    d3c4:	4831      	ldr	r0, [pc, #196]	; (d48c <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    d3c6:	f00c fba0 	bl	19b0a <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d3ca:	2400      	movs	r4, #0
}
    d3cc:	e01e      	b.n	d40c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d3d0:	005b      	lsls	r3, r3, #1
    d3d2:	d51b      	bpl.n	d40c <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    d3d4:	2145      	movs	r1, #69	; 0x45
    d3d6:	482e      	ldr	r0, [pc, #184]	; (d490 <z_arm_fault+0x164>)
    d3d8:	f00c fb97 	bl	19b0a <printk>
		if (SCB_MMFSR != 0) {
    d3dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    d3e0:	b12b      	cbz	r3, d3ee <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    d3e2:	2001      	movs	r0, #1
    d3e4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d3e8:	f7ff ff38 	bl	d25c <mem_manage_fault.constprop.0>
    d3ec:	e00d      	b.n	d40a <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    d3ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    d3f2:	b12b      	cbz	r3, d400 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    d3f4:	2001      	movs	r0, #1
    d3f6:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    d3fa:	f7ff fed5 	bl	d1a8 <bus_fault.constprop.0>
    d3fe:	e004      	b.n	d40a <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    d400:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    d402:	b29b      	uxth	r3, r3
    d404:	b113      	cbz	r3, d40c <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    d406:	f7ff fe79 	bl	d0fc <usage_fault.constprop.0>
    d40a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d40c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d410:	b993      	cbnz	r3, d438 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d412:	2220      	movs	r2, #32
    d414:	4629      	mov	r1, r5
    d416:	a802      	add	r0, sp, #8
    d418:	f00d fdb7 	bl	1af8a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d41e:	b336      	cbz	r6, d46e <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d420:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d424:	b922      	cbnz	r2, d430 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d426:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d42a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d42e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d430:	4620      	mov	r0, r4
    d432:	a902      	add	r1, sp, #8
    d434:	f7ff fdcc 	bl	cfd0 <z_arm_fatal_error>
}
    d438:	b00b      	add	sp, #44	; 0x2c
    d43a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    d43e:	2000      	movs	r0, #0
    d440:	f10d 0107 	add.w	r1, sp, #7
    d444:	e7d0      	b.n	d3e8 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    d446:	2000      	movs	r0, #0
    d448:	f10d 0107 	add.w	r1, sp, #7
    d44c:	e7d5      	b.n	d3fa <z_arm_fault+0xce>
	PR_FAULT_INFO(
    d44e:	2145      	movs	r1, #69	; 0x45
    d450:	4810      	ldr	r0, [pc, #64]	; (d494 <z_arm_fault+0x168>)
    d452:	e7b8      	b.n	d3c6 <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    d454:	4910      	ldr	r1, [pc, #64]	; (d498 <z_arm_fault+0x16c>)
    d456:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    d45a:	4a10      	ldr	r2, [pc, #64]	; (d49c <z_arm_fault+0x170>)
    d45c:	4810      	ldr	r0, [pc, #64]	; (d4a0 <z_arm_fault+0x174>)
    d45e:	bf08      	it	eq
    d460:	460a      	moveq	r2, r1
    d462:	f1a7 0310 	sub.w	r3, r7, #16
    d466:	2145      	movs	r1, #69	; 0x45
    d468:	f00c fb4f 	bl	19b0a <printk>
    d46c:	e7ad      	b.n	d3ca <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d46e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d472:	f023 0301 	bic.w	r3, r3, #1
    d476:	e7da      	b.n	d42e <z_arm_fault+0x102>
    d478:	e000ed00 	.word	0xe000ed00
    d47c:	0001fb5a 	.word	0x0001fb5a
    d480:	0001faf2 	.word	0x0001faf2
    d484:	0001ecfc 	.word	0x0001ecfc
    d488:	0001fb82 	.word	0x0001fb82
    d48c:	0001fb9e 	.word	0x0001fb9e
    d490:	0001fbc4 	.word	0x0001fbc4
    d494:	0001fbe8 	.word	0x0001fbe8
    d498:	0001fb2c 	.word	0x0001fb2c
    d49c:	0001fb41 	.word	0x0001fb41
    d4a0:	0001fc23 	.word	0x0001fc23

0000d4a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d4a4:	4b04      	ldr	r3, [pc, #16]	; (d4b8 <z_arm_fault_init+0x14>)
    d4a6:	695a      	ldr	r2, [r3, #20]
    d4a8:	f042 0210 	orr.w	r2, r2, #16
    d4ac:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d4ae:	695a      	ldr	r2, [r3, #20]
    d4b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d4b4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    d4b6:	4770      	bx	lr
    d4b8:	e000ed00 	.word	0xe000ed00

0000d4bc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d4bc:	4b04      	ldr	r3, [pc, #16]	; (d4d0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d4be:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d4c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    d4c2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d4c4:	d003      	beq.n	d4ce <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d4c6:	4903      	ldr	r1, [pc, #12]	; (d4d4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d4c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d4cc:	600a      	str	r2, [r1, #0]

0000d4ce <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d4ce:	4770      	bx	lr
	ldr r3, =_kernel
    d4d0:	2000ae1c 	.word	0x2000ae1c
	ldr r1, =_SCS_ICSR
    d4d4:	e000ed04 	.word	0xe000ed04

0000d4d8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d4d8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d4dc:	4905      	ldr	r1, [pc, #20]	; (d4f4 <sys_arch_reboot+0x1c>)
    d4de:	4b06      	ldr	r3, [pc, #24]	; (d4f8 <sys_arch_reboot+0x20>)
    d4e0:	68ca      	ldr	r2, [r1, #12]
    d4e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d4e6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d4e8:	60cb      	str	r3, [r1, #12]
    d4ea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d4ee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d4f0:	e7fd      	b.n	d4ee <sys_arch_reboot+0x16>
    d4f2:	bf00      	nop
    d4f4:	e000ed00 	.word	0xe000ed00
    d4f8:	05fa0004 	.word	0x05fa0004

0000d4fc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d4fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d4fe:	2120      	movs	r1, #32
    d500:	4803      	ldr	r0, [pc, #12]	; (d510 <z_arm_interrupt_init+0x14>)
    d502:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d504:	3301      	adds	r3, #1
    d506:	2b45      	cmp	r3, #69	; 0x45
    d508:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d50c:	d1f9      	bne.n	d502 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d50e:	4770      	bx	lr
    d510:	e000e100 	.word	0xe000e100

0000d514 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    d514:	b508      	push	{r3, lr}
	if (_current == thread) {
    d516:	4b0e      	ldr	r3, [pc, #56]	; (d550 <z_impl_k_thread_abort+0x3c>)
    d518:	689b      	ldr	r3, [r3, #8]
    d51a:	4283      	cmp	r3, r0
    d51c:	d107      	bne.n	d52e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d51e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d522:	b193      	cbz	r3, d54a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d524:	4a0b      	ldr	r2, [pc, #44]	; (d554 <z_impl_k_thread_abort+0x40>)
    d526:	6853      	ldr	r3, [r2, #4]
    d528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d52c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    d52e:	f00a fd19 	bl	17f64 <z_thread_single_abort>
	__asm__ volatile(
    d532:	f04f 0320 	mov.w	r3, #32
    d536:	f3ef 8011 	mrs	r0, BASEPRI
    d53a:	f383 8811 	msr	BASEPRI, r3
    d53e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    d542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    d546:	f00f be7b 	b.w	1d240 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    d54a:	f00b fb19 	bl	18b80 <z_self_abort>
    d54e:	bf00      	nop
    d550:	2000ae1c 	.word	0x2000ae1c
    d554:	e000ed00 	.word	0xe000ed00

0000d558 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d55a:	4c09      	ldr	r4, [pc, #36]	; (d580 <z_arm_configure_static_mpu_regions+0x28>)
    d55c:	4a09      	ldr	r2, [pc, #36]	; (d584 <z_arm_configure_static_mpu_regions+0x2c>)
    d55e:	4623      	mov	r3, r4
    d560:	2101      	movs	r1, #1
    d562:	4809      	ldr	r0, [pc, #36]	; (d588 <z_arm_configure_static_mpu_regions+0x30>)
    d564:	f000 f976 	bl	d854 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d568:	2300      	movs	r3, #0
    d56a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d56c:	4b07      	ldr	r3, [pc, #28]	; (d58c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d56e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d570:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d572:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d574:	9301      	str	r3, [sp, #4]
    d576:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d578:	f000 f988 	bl	d88c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d57c:	b004      	add	sp, #16
    d57e:	bd10      	pop	{r4, pc}
    d580:	20070000 	.word	0x20070000
    d584:	20008000 	.word	0x20008000
    d588:	0001dd8c 	.word	0x0001dd8c
    d58c:	200087e8 	.word	0x200087e8

0000d590 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d590:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d592:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d594:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d596:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    d59a:	f004 031f 	and.w	r3, r4, #31
    d59e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d5a0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d5a2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d5a4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    d5a8:	4905      	ldr	r1, [pc, #20]	; (d5c0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d5aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d5ae:	f043 0301 	orr.w	r3, r3, #1
    d5b2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    d5b6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    d5ba:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d5be:	bd10      	pop	{r4, pc}
    d5c0:	e000ed00 	.word	0xe000ed00

0000d5c4 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    d5c4:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    d5c6:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    d5c8:	680c      	ldr	r4, [r1, #0]
{
    d5ca:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    d5cc:	890a      	ldrh	r2, [r1, #8]
    d5ce:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    d5d0:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d5d2:	3b01      	subs	r3, #1
    d5d4:	f024 041f 	bic.w	r4, r4, #31
    d5d8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    d5da:	f002 021f 	and.w	r2, r2, #31
    d5de:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d5e2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d5e6:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d5e8:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    d5ea:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d5ee:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    d5f0:	d909      	bls.n	d606 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d5f2:	4602      	mov	r2, r0
    d5f4:	2145      	movs	r1, #69	; 0x45
    d5f6:	4806      	ldr	r0, [pc, #24]	; (d610 <mpu_configure_region+0x4c>)
    d5f8:	f00c fa87 	bl	19b0a <printk>
    d5fc:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    d600:	4620      	mov	r0, r4
    d602:	b005      	add	sp, #20
    d604:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    d606:	4669      	mov	r1, sp
    d608:	f7ff ffc2 	bl	d590 <region_init>
	return region_allocate_and_init(index,
    d60c:	e7f8      	b.n	d600 <mpu_configure_region+0x3c>
    d60e:	bf00      	nop
    d610:	0001fc3f 	.word	0x0001fc3f

0000d614 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d618:	4689      	mov	r9, r1
    d61a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d61c:	4606      	mov	r6, r0
    d61e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    d622:	4d59      	ldr	r5, [pc, #356]	; (d788 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d624:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    d626:	45c8      	cmp	r8, r9
    d628:	da27      	bge.n	d67a <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    d62a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d62e:	f1ba 0f00 	cmp.w	sl, #0
    d632:	d045      	beq.n	d6c0 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    d634:	f1ba 0f1f 	cmp.w	sl, #31
    d638:	d918      	bls.n	d66c <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    d63a:	f01a 0f1f 	tst.w	sl, #31
    d63e:	d115      	bne.n	d66c <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    d640:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    d644:	f01b 0f1f 	tst.w	fp, #31
    d648:	d110      	bne.n	d66c <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d64a:	4658      	mov	r0, fp
    d64c:	f00d fbc6 	bl	1addc <arm_cmse_mpu_region_get>
    d650:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d652:	eb0a 000b 	add.w	r0, sl, fp
    d656:	3801      	subs	r0, #1
    d658:	f00d fbc0 	bl	1addc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d65c:	4287      	cmp	r7, r0
    d65e:	d010      	beq.n	d682 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    d660:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    d664:	463a      	mov	r2, r7
    d666:	2145      	movs	r1, #69	; 0x45
    d668:	4848      	ldr	r0, [pc, #288]	; (d78c <mpu_configure_regions_and_partition.constprop.0+0x178>)
    d66a:	e002      	b.n	d672 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    d66c:	4642      	mov	r2, r8
    d66e:	2145      	movs	r1, #69	; 0x45
    d670:	4847      	ldr	r0, [pc, #284]	; (d790 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d672:	f00c fa4a 	bl	19b0a <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    d676:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d67a:	4620      	mov	r0, r4
    d67c:	b005      	add	sp, #20
    d67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    d682:	f117 0f16 	cmn.w	r7, #22
    d686:	d0ed      	beq.n	d664 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    d688:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    d68a:	42bb      	cmp	r3, r7
    d68c:	dbea      	blt.n	d664 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    d68e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d692:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    d696:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d69a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d69e:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d6a2:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d6a6:	e9d6 3200 	ldrd	r3, r2, [r6]
    d6aa:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    d6ac:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d6ae:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    d6b2:	d11d      	bne.n	d6f0 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    d6b4:	45d3      	cmp	fp, sl
    d6b6:	d107      	bne.n	d6c8 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    d6b8:	4631      	mov	r1, r6
    d6ba:	b2f8      	uxtb	r0, r7
    d6bc:	f7ff ff82 	bl	d5c4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d6c0:	f108 0801 	add.w	r8, r8, #1
    d6c4:	360c      	adds	r6, #12
    d6c6:	e7ae      	b.n	d626 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    d6c8:	4631      	mov	r1, r6
	MPU->RNR = index;
    d6ca:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d6ce:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    d6d2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d6d6:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    d6da:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d6dc:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    d6e0:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    d6e2:	f7ff ff6f 	bl	d5c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d6e6:	f110 0f16 	cmn.w	r0, #22
    d6ea:	d0c4      	beq.n	d676 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    d6ec:	1c44      	adds	r4, r0, #1
    d6ee:	e7e7      	b.n	d6c0 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    d6f0:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    d6f2:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    d6f4:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    d6f6:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    d6fa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    d6fe:	d108      	bne.n	d712 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d700:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d704:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d706:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d70a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d70c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    d710:	e7e7      	b.n	d6e2 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d712:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    d716:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d71a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d71c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d720:	4631      	mov	r1, r6
    d722:	f7ff ff4f 	bl	d5c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d726:	f110 0f16 	cmn.w	r0, #22
    d72a:	d0a4      	beq.n	d676 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    d72c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    d730:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    d734:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    d738:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    d73c:	f362 0304 	bfi	r3, r2, #0, #5
    d740:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d744:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d748:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d74c:	085b      	lsrs	r3, r3, #1
    d74e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    d752:	e9d6 3100 	ldrd	r3, r1, [r6]
    d756:	440b      	add	r3, r1
    d758:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    d75a:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    d75e:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    d760:	445b      	add	r3, fp
    d762:	eba3 030a 	sub.w	r3, r3, sl
    d766:	b2c0      	uxtb	r0, r0
    d768:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d76c:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d76e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    d772:	9303      	str	r3, [sp, #12]
    d774:	d903      	bls.n	d77e <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d776:	4602      	mov	r2, r0
    d778:	2145      	movs	r1, #69	; 0x45
    d77a:	4806      	ldr	r0, [pc, #24]	; (d794 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    d77c:	e779      	b.n	d672 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    d77e:	4669      	mov	r1, sp
    d780:	f7ff ff06 	bl	d590 <region_init>
    d784:	e7b2      	b.n	d6ec <mpu_configure_regions_and_partition.constprop.0+0xd8>
    d786:	bf00      	nop
    d788:	e000ed00 	.word	0xe000ed00
    d78c:	0001fc92 	.word	0x0001fc92
    d790:	0001fc6a 	.word	0x0001fc6a
    d794:	0001fc3f 	.word	0x0001fc3f

0000d798 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d798:	2205      	movs	r2, #5
    d79a:	4b04      	ldr	r3, [pc, #16]	; (d7ac <arm_core_mpu_enable+0x14>)
    d79c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    d7a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d7a4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d7a8:	4770      	bx	lr
    d7aa:	bf00      	nop
    d7ac:	e000ed00 	.word	0xe000ed00

0000d7b0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d7b0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d7b4:	2200      	movs	r2, #0
    d7b6:	4b02      	ldr	r3, [pc, #8]	; (d7c0 <arm_core_mpu_disable+0x10>)
    d7b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    d7bc:	4770      	bx	lr
    d7be:	bf00      	nop
    d7c0:	e000ed00 	.word	0xe000ed00

0000d7c4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    d7c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d7c6:	4d1d      	ldr	r5, [pc, #116]	; (d83c <arm_mpu_init+0x78>)
    d7c8:	682c      	ldr	r4, [r5, #0]
    d7ca:	2c08      	cmp	r4, #8
    d7cc:	d90d      	bls.n	d7ea <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    d7ce:	f240 123b 	movw	r2, #315	; 0x13b
    d7d2:	491b      	ldr	r1, [pc, #108]	; (d840 <arm_mpu_init+0x7c>)
    d7d4:	481b      	ldr	r0, [pc, #108]	; (d844 <arm_mpu_init+0x80>)
    d7d6:	f00c f998 	bl	19b0a <printk>
    d7da:	4819      	ldr	r0, [pc, #100]	; (d840 <arm_mpu_init+0x7c>)
    d7dc:	f240 113b 	movw	r1, #315	; 0x13b
    d7e0:	f00c fc39 	bl	1a056 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    d7e4:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    d7e8:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d7ea:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    d7ec:	f7ff ffe0 	bl	d7b0 <arm_core_mpu_disable>
	MPU->MAIR0 =
    d7f0:	4b15      	ldr	r3, [pc, #84]	; (d848 <arm_mpu_init+0x84>)
    d7f2:	4a16      	ldr	r2, [pc, #88]	; (d84c <arm_mpu_init+0x88>)
    d7f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d7f8:	4284      	cmp	r4, r0
    d7fa:	d117      	bne.n	d82c <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    d7fc:	4b14      	ldr	r3, [pc, #80]	; (d850 <arm_mpu_init+0x8c>)
    d7fe:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    d800:	f7ff ffca 	bl	d798 <arm_core_mpu_enable>
	__ASSERT(
    d804:	4b10      	ldr	r3, [pc, #64]	; (d848 <arm_mpu_init+0x84>)
    d806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d80a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d80e:	2b08      	cmp	r3, #8
    d810:	d00a      	beq.n	d828 <arm_mpu_init+0x64>
    d812:	490b      	ldr	r1, [pc, #44]	; (d840 <arm_mpu_init+0x7c>)
    d814:	480b      	ldr	r0, [pc, #44]	; (d844 <arm_mpu_init+0x80>)
    d816:	f44f 72b3 	mov.w	r2, #358	; 0x166
    d81a:	f00c f976 	bl	19b0a <printk>
    d81e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d822:	4807      	ldr	r0, [pc, #28]	; (d840 <arm_mpu_init+0x7c>)
    d824:	f00c fc17 	bl	1a056 <assert_post_action>
	return 0;
    d828:	2000      	movs	r0, #0
    d82a:	e7dd      	b.n	d7e8 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d82c:	6869      	ldr	r1, [r5, #4]
    d82e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    d832:	f7ff fead 	bl	d590 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d836:	3001      	adds	r0, #1
    d838:	e7de      	b.n	d7f8 <arm_mpu_init+0x34>
    d83a:	bf00      	nop
    d83c:	0001dd98 	.word	0x0001dd98
    d840:	0001fcba 	.word	0x0001fcba
    d844:	0001ecfc 	.word	0x0001ecfc
    d848:	e000ed00 	.word	0xe000ed00
    d84c:	0044ffaa 	.word	0x0044ffaa
    d850:	2000c558 	.word	0x2000c558

0000d854 <arm_core_mpu_configure_static_mpu_regions>:
{
    d854:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d856:	4c0a      	ldr	r4, [pc, #40]	; (d880 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d858:	7822      	ldrb	r2, [r4, #0]
    d85a:	f7ff fedb 	bl	d614 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d85e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d860:	3016      	adds	r0, #22
    d862:	d10c      	bne.n	d87e <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d864:	4907      	ldr	r1, [pc, #28]	; (d884 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d866:	4808      	ldr	r0, [pc, #32]	; (d888 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    d868:	f44f 7282 	mov.w	r2, #260	; 0x104
    d86c:	f00c f94d 	bl	19b0a <printk>
}
    d870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d874:	f44f 7182 	mov.w	r1, #260	; 0x104
    d878:	4802      	ldr	r0, [pc, #8]	; (d884 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d87a:	f00c bbec 	b.w	1a056 <assert_post_action>
}
    d87e:	bd10      	pop	{r4, pc}
    d880:	2000c558 	.word	0x2000c558
    d884:	0001fcba 	.word	0x0001fcba
    d888:	0001ecfc 	.word	0x0001ecfc

0000d88c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    d88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d890:	4d30      	ldr	r5, [pc, #192]	; (d954 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    d892:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d894:	4606      	mov	r6, r0
    d896:	f04f 0800 	mov.w	r8, #0
    d89a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    d89c:	4f2e      	ldr	r7, [pc, #184]	; (d958 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d89e:	45d0      	cmp	r8, sl
    d8a0:	db02      	blt.n	d8a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    d8a2:	b003      	add	sp, #12
    d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    d8a8:	f8d6 9004 	ldr.w	r9, [r6, #4]
    d8ac:	f1b9 0f00 	cmp.w	r9, #0
    d8b0:	d04a      	beq.n	d948 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d8b2:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d8b4:	4608      	mov	r0, r1
    d8b6:	9101      	str	r1, [sp, #4]
    d8b8:	f00d fa90 	bl	1addc <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d8bc:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d8be:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d8c0:	eb09 0001 	add.w	r0, r9, r1
    d8c4:	3801      	subs	r0, #1
    d8c6:	f00d fa89 	bl	1addc <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d8ca:	4284      	cmp	r4, r0
    d8cc:	f04f 0214 	mov.w	r2, #20
    d8d0:	4b22      	ldr	r3, [pc, #136]	; (d95c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    d8d2:	d013      	beq.n	d8fc <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    d8d4:	f06f 0315 	mvn.w	r3, #21
    d8d8:	fb02 f808 	mul.w	r8, r2, r8
    d8dc:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d8e0:	f44f 728a 	mov.w	r2, #276	; 0x114
    d8e4:	491e      	ldr	r1, [pc, #120]	; (d960 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    d8e6:	481f      	ldr	r0, [pc, #124]	; (d964 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    d8e8:	f00c f90f 	bl	19b0a <printk>
    d8ec:	f44f 718a 	mov.w	r1, #276	; 0x114
    d8f0:	481b      	ldr	r0, [pc, #108]	; (d960 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    d8f2:	b003      	add	sp, #12
    d8f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d8f8:	f00c bbad 	b.w	1a056 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d8fc:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    d900:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d902:	d0ed      	beq.n	d8e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d904:	7819      	ldrb	r1, [r3, #0]
    d906:	42a1      	cmp	r1, r4
    d908:	ddea      	ble.n	d8e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    d90a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    d90e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    d912:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    d916:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    d91a:	f100 0108 	add.w	r1, r0, #8
    d91e:	7b00      	ldrb	r0, [r0, #12]
    d920:	f364 0004 	bfi	r0, r4, #0, #5
    d924:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d926:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    d92a:	790c      	ldrb	r4, [r1, #4]
    d92c:	0840      	lsrs	r0, r0, #1
    d92e:	f360 1447 	bfi	r4, r0, #5, #3
    d932:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    d934:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    d938:	f021 011f 	bic.w	r1, r1, #31
    d93c:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    d93e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    d942:	f021 011f 	bic.w	r1, r1, #31
    d946:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d948:	f108 0801 	add.w	r8, r8, #1
    d94c:	3514      	adds	r5, #20
    d94e:	360c      	adds	r6, #12
    d950:	e7a5      	b.n	d89e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    d952:	bf00      	nop
    d954:	2000a95c 	.word	0x2000a95c
    d958:	e000ed00 	.word	0xe000ed00
    d95c:	2000c558 	.word	0x2000c558
    d960:	0001fcba 	.word	0x0001fcba
    d964:	0001ecfc 	.word	0x0001ecfc

0000d968 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    d968:	4b01      	ldr	r3, [pc, #4]	; (d970 <__stdout_hook_install+0x8>)
    d96a:	6018      	str	r0, [r3, #0]
}
    d96c:	4770      	bx	lr
    d96e:	bf00      	nop
    d970:	20008328 	.word	0x20008328

0000d974 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    d974:	2000      	movs	r0, #0
    d976:	4b02      	ldr	r3, [pc, #8]	; (d980 <remoteproc_mgr_boot+0xc>)
    d978:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    d97c:	4770      	bx	lr
    d97e:	bf00      	nop
    d980:	40005000 	.word	0x40005000

0000d984 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    d984:	4b0e      	ldr	r3, [pc, #56]	; (d9c0 <bt_hex_real+0x3c>)
    d986:	2940      	cmp	r1, #64	; 0x40
    d988:	bf28      	it	cs
    d98a:	2140      	movcs	r1, #64	; 0x40
{
    d98c:	b570      	push	{r4, r5, r6, lr}
    d98e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    d990:	4c0c      	ldr	r4, [pc, #48]	; (d9c4 <bt_hex_real+0x40>)
    d992:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    d994:	42b0      	cmp	r0, r6
    d996:	f103 0302 	add.w	r3, r3, #2
    d99a:	d104      	bne.n	d9a6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    d99c:	2300      	movs	r3, #0
    d99e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    d9a2:	4807      	ldr	r0, [pc, #28]	; (d9c0 <bt_hex_real+0x3c>)
    d9a4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    d9a6:	7802      	ldrb	r2, [r0, #0]
    d9a8:	0912      	lsrs	r2, r2, #4
    d9aa:	5ca2      	ldrb	r2, [r4, r2]
    d9ac:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    d9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
    d9b4:	f002 020f 	and.w	r2, r2, #15
    d9b8:	5ca2      	ldrb	r2, [r4, r2]
    d9ba:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    d9be:	e7e9      	b.n	d994 <bt_hex_real+0x10>
    d9c0:	2000c577 	.word	0x2000c577
    d9c4:	0001fd23 	.word	0x0001fd23

0000d9c8 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    d9c8:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    d9ca:	7803      	ldrb	r3, [r0, #0]
    d9cc:	b08b      	sub	sp, #44	; 0x2c
    d9ce:	4604      	mov	r4, r0
    d9d0:	ad07      	add	r5, sp, #28
    d9d2:	2b03      	cmp	r3, #3
    d9d4:	d821      	bhi.n	da1a <bt_addr_le_str_real+0x52>
    d9d6:	e8df f003 	tbb	[pc, r3]
    d9da:	1a02      	.short	0x1a02
    d9dc:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    d9de:	4912      	ldr	r1, [pc, #72]	; (da28 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    d9e0:	4628      	mov	r0, r5
    d9e2:	f00d fa78 	bl	1aed6 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d9e6:	7863      	ldrb	r3, [r4, #1]
    d9e8:	211e      	movs	r1, #30
    d9ea:	9304      	str	r3, [sp, #16]
    d9ec:	78a3      	ldrb	r3, [r4, #2]
    d9ee:	4a0f      	ldr	r2, [pc, #60]	; (da2c <bt_addr_le_str_real+0x64>)
    d9f0:	9303      	str	r3, [sp, #12]
    d9f2:	78e3      	ldrb	r3, [r4, #3]
    d9f4:	9505      	str	r5, [sp, #20]
    d9f6:	9302      	str	r3, [sp, #8]
    d9f8:	7923      	ldrb	r3, [r4, #4]
    d9fa:	480d      	ldr	r0, [pc, #52]	; (da30 <bt_addr_le_str_real+0x68>)
    d9fc:	9301      	str	r3, [sp, #4]
    d9fe:	7963      	ldrb	r3, [r4, #5]
    da00:	9300      	str	r3, [sp, #0]
    da02:	79a3      	ldrb	r3, [r4, #6]
    da04:	f00c f88e 	bl	19b24 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    da08:	4809      	ldr	r0, [pc, #36]	; (da30 <bt_addr_le_str_real+0x68>)
    da0a:	b00b      	add	sp, #44	; 0x2c
    da0c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    da0e:	4909      	ldr	r1, [pc, #36]	; (da34 <bt_addr_le_str_real+0x6c>)
    da10:	e7e6      	b.n	d9e0 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    da12:	4909      	ldr	r1, [pc, #36]	; (da38 <bt_addr_le_str_real+0x70>)
    da14:	e7e4      	b.n	d9e0 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    da16:	4909      	ldr	r1, [pc, #36]	; (da3c <bt_addr_le_str_real+0x74>)
    da18:	e7e2      	b.n	d9e0 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    da1a:	210a      	movs	r1, #10
    da1c:	4628      	mov	r0, r5
    da1e:	4a08      	ldr	r2, [pc, #32]	; (da40 <bt_addr_le_str_real+0x78>)
    da20:	f00c f880 	bl	19b24 <snprintk>
		break;
    da24:	e7df      	b.n	d9e6 <bt_addr_le_str_real+0x1e>
    da26:	bf00      	nop
    da28:	0001e620 	.word	0x0001e620
    da2c:	0001e649 	.word	0x0001e649
    da30:	2000c559 	.word	0x2000c559
    da34:	0001e627 	.word	0x0001e627
    da38:	0001e62e 	.word	0x0001e62e
    da3c:	0001e638 	.word	0x0001e638
    da40:	0001e642 	.word	0x0001e642

0000da44 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    da44:	2149      	movs	r1, #73	; 0x49
{
    da46:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    da48:	4809      	ldr	r0, [pc, #36]	; (da70 <save_id+0x2c>)
    da4a:	f00c f85e 	bl	19b0a <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    da4e:	4909      	ldr	r1, [pc, #36]	; (da74 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    da50:	4809      	ldr	r0, [pc, #36]	; (da78 <save_id+0x34>)
    da52:	79ca      	ldrb	r2, [r1, #7]
    da54:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    da58:	f7fd fc40 	bl	b2dc <settings_save_one>
	if (err) {
    da5c:	4602      	mov	r2, r0
    da5e:	b128      	cbz	r0, da6c <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    da60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    da64:	2145      	movs	r1, #69	; 0x45
    da66:	4805      	ldr	r0, [pc, #20]	; (da7c <save_id+0x38>)
    da68:	f00c b84f 	b.w	19b0a <printk>
}
    da6c:	bd08      	pop	{r3, pc}
    da6e:	bf00      	nop
    da70:	0001fd34 	.word	0x0001fd34
    da74:	20008000 	.word	0x20008000
    da78:	0001fd43 	.word	0x0001fd43
    da7c:	0001fd49 	.word	0x0001fd49

0000da80 <set>:
{
    da80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    da82:	4616      	mov	r6, r2
    da84:	461f      	mov	r7, r3
	if (!name) {
    da86:	4604      	mov	r4, r0
    da88:	b930      	cbnz	r0, da98 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    da8a:	2145      	movs	r1, #69	; 0x45
    da8c:	4819      	ldr	r0, [pc, #100]	; (daf4 <set+0x74>)
    da8e:	f00c f83c 	bl	19b0a <printk>
	return -ENOENT;
    da92:	f06f 0401 	mvn.w	r4, #1
    da96:	e013      	b.n	dac0 <set+0x40>
	len = settings_name_next(name, &next);
    da98:	a901      	add	r1, sp, #4
    da9a:	f00c fb55 	bl	1a148 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    da9e:	4916      	ldr	r1, [pc, #88]	; (daf8 <set+0x78>)
	len = settings_name_next(name, &next);
    daa0:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    daa2:	4620      	mov	r0, r4
    daa4:	f00d fa4f 	bl	1af46 <strncmp>
    daa8:	4604      	mov	r4, r0
    daaa:	2800      	cmp	r0, #0
    daac:	d1f1      	bne.n	da92 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    daae:	4d13      	ldr	r5, [pc, #76]	; (dafc <set+0x7c>)
    dab0:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    dab4:	075b      	lsls	r3, r3, #29
    dab6:	d506      	bpl.n	dac6 <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    dab8:	2157      	movs	r1, #87	; 0x57
    daba:	4811      	ldr	r0, [pc, #68]	; (db00 <set+0x80>)
    dabc:	f00c f825 	bl	19b0a <printk>
}
    dac0:	4620      	mov	r0, r4
    dac2:	b003      	add	sp, #12
    dac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    dac6:	3d94      	subs	r5, #148	; 0x94
    dac8:	2207      	movs	r2, #7
    daca:	4629      	mov	r1, r5
    dacc:	4638      	mov	r0, r7
    dace:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    dad0:	2806      	cmp	r0, #6
    dad2:	d80a      	bhi.n	daea <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    dad4:	2145      	movs	r1, #69	; 0x45
    dad6:	480b      	ldr	r0, [pc, #44]	; (db04 <set+0x84>)
    dad8:	f00c f817 	bl	19b0a <printk>
			(void)memset(bt_dev.id_addr, 0,
    dadc:	2207      	movs	r2, #7
    dade:	4621      	mov	r1, r4
    dae0:	4628      	mov	r0, r5
    dae2:	f00d fa7d 	bl	1afe0 <memset>
			bt_dev.id_count = 0U;
    dae6:	71ec      	strb	r4, [r5, #7]
    dae8:	e7ea      	b.n	dac0 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    daea:	2307      	movs	r3, #7
    daec:	fbb0 f0f3 	udiv	r0, r0, r3
    daf0:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    daf2:	e7e5      	b.n	dac0 <set+0x40>
    daf4:	0001fd69 	.word	0x0001fd69
    daf8:	0001e635 	.word	0x0001e635
    dafc:	20008094 	.word	0x20008094
    db00:	0001fd8f 	.word	0x0001fd8f
    db04:	0001fdb8 	.word	0x0001fdb8

0000db08 <bt_settings_encode_key>:
{
    db08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db0c:	b088      	sub	sp, #32
    db0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    db12:	799c      	ldrb	r4, [r3, #6]
    db14:	795d      	ldrb	r5, [r3, #5]
    db16:	791e      	ldrb	r6, [r3, #4]
    db18:	78df      	ldrb	r7, [r3, #3]
    db1a:	f893 c002 	ldrb.w	ip, [r3, #2]
    db1e:	f893 e001 	ldrb.w	lr, [r3, #1]
    db22:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    db24:	f1b8 0f00 	cmp.w	r8, #0
    db28:	d00e      	beq.n	db48 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    db2a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    db2e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    db32:	4613      	mov	r3, r2
    db34:	e9cd 6702 	strd	r6, r7, [sp, #8]
    db38:	e9cd 4500 	strd	r4, r5, [sp]
    db3c:	4a08      	ldr	r2, [pc, #32]	; (db60 <bt_settings_encode_key+0x58>)
    db3e:	f00b fff1 	bl	19b24 <snprintk>
}
    db42:	b008      	add	sp, #32
    db44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    db48:	e9cd e305 	strd	lr, r3, [sp, #20]
    db4c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    db50:	4613      	mov	r3, r2
    db52:	e9cd 5601 	strd	r5, r6, [sp, #4]
    db56:	4a03      	ldr	r2, [pc, #12]	; (db64 <bt_settings_encode_key+0x5c>)
    db58:	9400      	str	r4, [sp, #0]
    db5a:	f00b ffe3 	bl	19b24 <snprintk>
}
    db5e:	e7f0      	b.n	db42 <bt_settings_encode_key+0x3a>
    db60:	0001fde2 	.word	0x0001fde2
    db64:	0001fe06 	.word	0x0001fe06

0000db68 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    db68:	4907      	ldr	r1, [pc, #28]	; (db88 <bt_settings_save_id+0x20>)
    db6a:	e8d1 3fef 	ldaex	r3, [r1]
    db6e:	f043 0201 	orr.w	r2, r3, #1
    db72:	e8c1 2fe0 	stlex	r0, r2, [r1]
    db76:	2800      	cmp	r0, #0
    db78:	d1f7      	bne.n	db6a <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    db7a:	07db      	lsls	r3, r3, #31
    db7c:	d403      	bmi.n	db86 <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    db7e:	4803      	ldr	r0, [pc, #12]	; (db8c <bt_settings_save_id+0x24>)
    db80:	3908      	subs	r1, #8
    db82:	f00f bb3f 	b.w	1d204 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    db86:	4770      	bx	lr
    db88:	20008334 	.word	0x20008334
    db8c:	2000a3b0 	.word	0x2000a3b0

0000db90 <commit>:

static int commit(void)
{
    db90:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    db92:	4c13      	ldr	r4, [pc, #76]	; (dbe0 <commit+0x50>)
    db94:	79e3      	ldrb	r3, [r4, #7]
    db96:	b96b      	cbnz	r3, dbb4 <commit+0x24>
		bt_setup_public_id_addr();
    db98:	f001 ffc0 	bl	fb1c <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    db9c:	79e3      	ldrb	r3, [r4, #7]
    db9e:	b94b      	cbnz	r3, dbb4 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    dba0:	f002 f84a 	bl	fc38 <bt_setup_random_id_addr>
		if (err) {
    dba4:	4604      	mov	r4, r0
    dba6:	b128      	cbz	r0, dbb4 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    dba8:	2145      	movs	r1, #69	; 0x45
    dbaa:	480e      	ldr	r0, [pc, #56]	; (dbe4 <commit+0x54>)
    dbac:	f00b ffad 	bl	19b0a <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    dbb0:	4620      	mov	r0, r4
    dbb2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dbb4:	4d0c      	ldr	r5, [pc, #48]	; (dbe8 <commit+0x58>)
    dbb6:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dbba:	079b      	lsls	r3, r3, #30
    dbbc:	d401      	bmi.n	dbc2 <commit+0x32>
		bt_finalize_init();
    dbbe:	f001 fc95 	bl	f4ec <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dbc2:	e8d5 4fef 	ldaex	r4, [r5]
    dbc6:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    dbca:	e8c5 3fe2 	stlex	r2, r3, [r5]
    dbce:	2a00      	cmp	r2, #0
    dbd0:	d1f7      	bne.n	dbc2 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    dbd2:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    dbd6:	d0eb      	beq.n	dbb0 <commit+0x20>
		bt_settings_save_id();
    dbd8:	f7ff ffc6 	bl	db68 <bt_settings_save_id>
	return 0;
    dbdc:	2400      	movs	r4, #0
    dbde:	e7e7      	b.n	dbb0 <commit+0x20>
    dbe0:	20008000 	.word	0x20008000
    dbe4:	0001fe27 	.word	0x0001fe27
    dbe8:	20008094 	.word	0x20008094

0000dbec <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    dbec:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    dbee:	f7fd fc3f 	bl	b470 <settings_subsys_init>
	if (err) {
    dbf2:	4604      	mov	r4, r0
    dbf4:	b120      	cbz	r0, dc00 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    dbf6:	4602      	mov	r2, r0
    dbf8:	2145      	movs	r1, #69	; 0x45
    dbfa:	4802      	ldr	r0, [pc, #8]	; (dc04 <bt_settings_init+0x18>)
    dbfc:	f00b ff85 	bl	19b0a <printk>
		return err;
	}

	return 0;
}
    dc00:	4620      	mov	r0, r4
    dc02:	bd10      	pop	{r4, pc}
    dc04:	0001fe50 	.word	0x0001fe50

0000dc08 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    dc08:	4603      	mov	r3, r0
    dc0a:	b430      	push	{r4, r5}
	switch (src->type) {
    dc0c:	781a      	ldrb	r2, [r3, #0]
{
    dc0e:	4608      	mov	r0, r1
	switch (src->type) {
    dc10:	2a01      	cmp	r2, #1
    dc12:	d013      	beq.n	dc3c <uuid_to_uuid128+0x34>
    dc14:	2a02      	cmp	r2, #2
    dc16:	d026      	beq.n	dc66 <uuid_to_uuid128+0x5e>
    dc18:	b972      	cbnz	r2, dc38 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    dc1a:	4a15      	ldr	r2, [pc, #84]	; (dc70 <uuid_to_uuid128+0x68>)
    dc1c:	f102 0410 	add.w	r4, r2, #16
    dc20:	f852 5b04 	ldr.w	r5, [r2], #4
    dc24:	42a2      	cmp	r2, r4
    dc26:	f841 5b04 	str.w	r5, [r1], #4
    dc2a:	d1f9      	bne.n	dc20 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    dc2c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    dc2e:	7812      	ldrb	r2, [r2, #0]
    dc30:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    dc32:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    dc34:	0a1b      	lsrs	r3, r3, #8
    dc36:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    dc38:	bc30      	pop	{r4, r5}
    dc3a:	4770      	bx	lr
		*dst = uuid128_base;
    dc3c:	4a0c      	ldr	r2, [pc, #48]	; (dc70 <uuid_to_uuid128+0x68>)
    dc3e:	f102 0410 	add.w	r4, r2, #16
    dc42:	f852 5b04 	ldr.w	r5, [r2], #4
    dc46:	42a2      	cmp	r2, r4
    dc48:	f841 5b04 	str.w	r5, [r1], #4
    dc4c:	d1f9      	bne.n	dc42 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    dc4e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    dc50:	7812      	ldrb	r2, [r2, #0]
    dc52:	700a      	strb	r2, [r1, #0]
    dc54:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    dc58:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    dc5a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dc5c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    dc5e:	0a1b      	lsrs	r3, r3, #8
    dc60:	7382      	strb	r2, [r0, #14]
    dc62:	7403      	strb	r3, [r0, #16]
}
    dc64:	e7e8      	b.n	dc38 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    dc66:	2211      	movs	r2, #17
}
    dc68:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    dc6a:	4619      	mov	r1, r3
    dc6c:	f00d b98d 	b.w	1af8a <memcpy>
    dc70:	0001fe89 	.word	0x0001fe89

0000dc74 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dc74:	2801      	cmp	r0, #1
{
    dc76:	b570      	push	{r4, r5, r6, lr}
    dc78:	4605      	mov	r5, r0
    dc7a:	4616      	mov	r6, r2
    dc7c:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dc7e:	d010      	beq.n	dca2 <bt_buf_get_rx+0x2e>
    dc80:	2803      	cmp	r0, #3
    dc82:	d00a      	beq.n	dc9a <bt_buf_get_rx+0x26>
    dc84:	2805      	cmp	r0, #5
    dc86:	d008      	beq.n	dc9a <bt_buf_get_rx+0x26>
    dc88:	490c      	ldr	r1, [pc, #48]	; (dcbc <bt_buf_get_rx+0x48>)
    dc8a:	480d      	ldr	r0, [pc, #52]	; (dcc0 <bt_buf_get_rx+0x4c>)
    dc8c:	2233      	movs	r2, #51	; 0x33
    dc8e:	f00b ff3c 	bl	19b0a <printk>
    dc92:	2133      	movs	r1, #51	; 0x33
    dc94:	4809      	ldr	r0, [pc, #36]	; (dcbc <bt_buf_get_rx+0x48>)
    dc96:	f00c f9de 	bl	1a056 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    dc9a:	4632      	mov	r2, r6
    dc9c:	4623      	mov	r3, r4
    dc9e:	4809      	ldr	r0, [pc, #36]	; (dcc4 <bt_buf_get_rx+0x50>)
    dca0:	e000      	b.n	dca4 <bt_buf_get_rx+0x30>
    dca2:	4809      	ldr	r0, [pc, #36]	; (dcc8 <bt_buf_get_rx+0x54>)
    dca4:	f00e fc45 	bl	1c532 <net_buf_alloc_fixed>
    dca8:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    dcaa:	b12c      	cbz	r4, dcb8 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    dcac:	2101      	movs	r1, #1
    dcae:	f104 0008 	add.w	r0, r4, #8
    dcb2:	f006 fe65 	bl	14980 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    dcb6:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    dcb8:	4620      	mov	r0, r4
    dcba:	bd70      	pop	{r4, r5, r6, pc}
    dcbc:	0001fe9a 	.word	0x0001fe9a
    dcc0:	0001ecfc 	.word	0x0001ecfc
    dcc4:	200086b0 	.word	0x200086b0
    dcc8:	2000878c 	.word	0x2000878c

0000dccc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    dccc:	4602      	mov	r2, r0
    dcce:	460b      	mov	r3, r1
    dcd0:	b570      	push	{r4, r5, r6, lr}
    dcd2:	f04f 0120 	mov.w	r1, #32
    dcd6:	f3ef 8511 	mrs	r5, BASEPRI
    dcda:	f381 8811 	msr	BASEPRI, r1
    dcde:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    dce2:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    dce4:	490b      	ldr	r1, [pc, #44]	; (dd14 <bt_buf_get_cmd_complete+0x48>)
    dce6:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    dcea:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    dcee:	f385 8811 	msr	BASEPRI, r5
    dcf2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    dcf6:	b924      	cbnz	r4, dd02 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    dcf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dcfc:	2001      	movs	r0, #1
    dcfe:	f7ff bfb9 	b.w	dc74 <bt_buf_get_rx>
    dd02:	2101      	movs	r1, #1
		buf->len = 0U;
    dd04:	81a0      	strh	r0, [r4, #12]
    dd06:	7521      	strb	r1, [r4, #20]
    dd08:	f104 0008 	add.w	r0, r4, #8
    dd0c:	f006 fe38 	bl	14980 <net_buf_simple_reserve>
}
    dd10:	4620      	mov	r0, r4
    dd12:	bd70      	pop	{r4, r5, r6, pc}
    dd14:	20008000 	.word	0x20008000

0000dd18 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    dd18:	b570      	push	{r4, r5, r6, lr}
    dd1a:	4604      	mov	r4, r0
	switch (evt) {
    dd1c:	2c0f      	cmp	r4, #15
{
    dd1e:	460d      	mov	r5, r1
    dd20:	4610      	mov	r0, r2
    dd22:	4619      	mov	r1, r3
	switch (evt) {
    dd24:	d805      	bhi.n	dd32 <bt_buf_get_evt+0x1a>
    dd26:	2c0d      	cmp	r4, #13
    dd28:	d912      	bls.n	dd50 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    dd2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    dd2e:	f7ff bfcd 	b.w	dccc <bt_buf_get_cmd_complete>
	switch (evt) {
    dd32:	2c13      	cmp	r4, #19
    dd34:	d10c      	bne.n	dd50 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    dd36:	480b      	ldr	r0, [pc, #44]	; (dd64 <bt_buf_get_evt+0x4c>)
    dd38:	f00e fbfb 	bl	1c532 <net_buf_alloc_fixed>
			if (buf) {
    dd3c:	4604      	mov	r4, r0
    dd3e:	b128      	cbz	r0, dd4c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    dd40:	2101      	movs	r1, #1
    dd42:	3008      	adds	r0, #8
    dd44:	f006 fe1c 	bl	14980 <net_buf_simple_reserve>
    dd48:	2301      	movs	r3, #1
    dd4a:	7523      	strb	r3, [r4, #20]
}
    dd4c:	4620      	mov	r0, r4
    dd4e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    dd50:	4602      	mov	r2, r0
    dd52:	460b      	mov	r3, r1
		if (discardable) {
    dd54:	b10d      	cbz	r5, dd5a <bt_buf_get_evt+0x42>
    dd56:	4804      	ldr	r0, [pc, #16]	; (dd68 <bt_buf_get_evt+0x50>)
    dd58:	e7ee      	b.n	dd38 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dd5a:	2001      	movs	r0, #1
}
    dd5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dd60:	f7ff bf88 	b.w	dc74 <bt_buf_get_rx>
    dd64:	200087b8 	.word	0x200087b8
    dd68:	20008708 	.word	0x20008708

0000dd6c <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    dd6c:	6883      	ldr	r3, [r0, #8]
    dd6e:	2157      	movs	r1, #87	; 0x57
    dd70:	781a      	ldrb	r2, [r3, #0]
    dd72:	4801      	ldr	r0, [pc, #4]	; (dd78 <hci_data_buf_overflow+0xc>)
    dd74:	f00b bec9 	b.w	19b0a <printk>
    dd78:	0001fed0 	.word	0x0001fed0

0000dd7c <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd7e:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    dd80:	2500      	movs	r5, #0
    dd82:	4f09      	ldr	r7, [pc, #36]	; (dda8 <id_find+0x2c>)
    dd84:	79fb      	ldrb	r3, [r7, #7]
    dd86:	b2ec      	uxtb	r4, r5
    dd88:	42a3      	cmp	r3, r4
    dd8a:	d802      	bhi.n	dd92 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    dd8c:	f06f 0401 	mvn.w	r4, #1
    dd90:	e008      	b.n	dda4 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    dd92:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    dd96:	4630      	mov	r0, r6
    dd98:	4439      	add	r1, r7
    dd9a:	f00d f9f4 	bl	1b186 <bt_addr_le_cmp>
    dd9e:	3501      	adds	r5, #1
    dda0:	2800      	cmp	r0, #0
    dda2:	d1ef      	bne.n	dd84 <id_find+0x8>
}
    dda4:	4620      	mov	r0, r4
    dda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dda8:	20008000 	.word	0x20008000

0000ddac <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    ddac:	6843      	ldr	r3, [r0, #4]
{
    ddae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ddb0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    ddb2:	0558      	lsls	r0, r3, #21
    ddb4:	d502      	bpl.n	ddbc <valid_adv_param+0x10>
		return false;
    ddb6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    ddb8:	b003      	add	sp, #12
    ddba:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ddbc:	6922      	ldr	r2, [r4, #16]
    ddbe:	b10a      	cbz	r2, ddc4 <valid_adv_param+0x18>
    ddc0:	07d9      	lsls	r1, r3, #31
    ddc2:	d5f8      	bpl.n	ddb6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    ddc4:	4d1a      	ldr	r5, [pc, #104]	; (de30 <valid_adv_param+0x84>)
    ddc6:	7820      	ldrb	r0, [r4, #0]
    ddc8:	79eb      	ldrb	r3, [r5, #7]
    ddca:	4283      	cmp	r3, r0
    ddcc:	d9f3      	bls.n	ddb6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    ddce:	2300      	movs	r3, #0
    ddd0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ddd4:	4669      	mov	r1, sp
    ddd6:	4428      	add	r0, r5
    ddd8:	9300      	str	r3, [sp, #0]
    ddda:	f8cd 3003 	str.w	r3, [sp, #3]
    ddde:	f00d f9d2 	bl	1b186 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    dde2:	2800      	cmp	r0, #0
    dde4:	d0e7      	beq.n	ddb6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    dde6:	6860      	ldr	r0, [r4, #4]
    dde8:	07c2      	lsls	r2, r0, #31
    ddea:	d406      	bmi.n	ddfa <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    ddec:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    ddf0:	2b08      	cmp	r3, #8
    ddf2:	d802      	bhi.n	ddfa <valid_adv_param+0x4e>
    ddf4:	68a3      	ldr	r3, [r4, #8]
    ddf6:	2b9f      	cmp	r3, #159	; 0x9f
    ddf8:	d9dd      	bls.n	ddb6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    ddfa:	f010 0f30 	tst.w	r0, #48	; 0x30
    ddfe:	d002      	beq.n	de06 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    de00:	6923      	ldr	r3, [r4, #16]
    de02:	2b00      	cmp	r3, #0
    de04:	d0d7      	beq.n	ddb6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    de06:	06c3      	lsls	r3, r0, #27
    de08:	d401      	bmi.n	de0e <valid_adv_param+0x62>
    de0a:	6923      	ldr	r3, [r4, #16]
    de0c:	b943      	cbnz	r3, de20 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    de0e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    de12:	429a      	cmp	r2, r3
    de14:	d8cf      	bhi.n	ddb6 <valid_adv_param+0xa>
    de16:	2a1f      	cmp	r2, #31
    de18:	d9cd      	bls.n	ddb6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    de1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    de1e:	d8ca      	bhi.n	ddb6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    de20:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    de24:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    de28:	bf18      	it	ne
    de2a:	2001      	movne	r0, #1
    de2c:	e7c4      	b.n	ddb8 <valid_adv_param+0xc>
    de2e:	bf00      	nop
    de30:	20008000 	.word	0x20008000

0000de34 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    de34:	6883      	ldr	r3, [r0, #8]
{
    de36:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    de38:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    de3a:	4620      	mov	r0, r4
    de3c:	f002 fd98 	bl	10970 <bt_conn_lookup_handle>
	if (!conn) {
    de40:	b930      	cbnz	r0, de50 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    de42:	4622      	mov	r2, r4
}
    de44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    de48:	2145      	movs	r1, #69	; 0x45
    de4a:	4803      	ldr	r0, [pc, #12]	; (de58 <le_data_len_change+0x24>)
    de4c:	f00b be5d 	b.w	19b0a <printk>
}
    de50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    de54:	f002 bd68 	b.w	10928 <bt_conn_unref>
    de58:	0001fefd 	.word	0x0001fefd

0000de5c <hci_disconn_complete_prio>:
{
    de5c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    de5e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    de60:	781a      	ldrb	r2, [r3, #0]
    de62:	b9aa      	cbnz	r2, de90 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    de64:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    de68:	4628      	mov	r0, r5
    de6a:	f002 fd81 	bl	10970 <bt_conn_lookup_handle>
	if (!conn) {
    de6e:	4604      	mov	r4, r0
    de70:	b930      	cbnz	r0, de80 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    de72:	462a      	mov	r2, r5
}
    de74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    de78:	2145      	movs	r1, #69	; 0x45
    de7a:	4806      	ldr	r0, [pc, #24]	; (de94 <hci_disconn_complete_prio+0x38>)
    de7c:	f00b be45 	b.w	19b0a <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    de80:	2101      	movs	r1, #1
    de82:	f002 fd7d 	bl	10980 <bt_conn_set_state>
	bt_conn_unref(conn);
    de86:	4620      	mov	r0, r4
}
    de88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    de8c:	f002 bd4c 	b.w	10928 <bt_conn_unref>
}
    de90:	bd38      	pop	{r3, r4, r5, pc}
    de92:	bf00      	nop
    de94:	0001ff26 	.word	0x0001ff26

0000de98 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    de98:	2101      	movs	r1, #1
{
    de9a:	b508      	push	{r3, lr}
    de9c:	3008      	adds	r0, #8
    de9e:	f006 feb9 	bl	14c14 <net_buf_simple_pull_mem>
}
    dea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    dea6:	7802      	ldrb	r2, [r0, #0]
    dea8:	2145      	movs	r1, #69	; 0x45
    deaa:	4801      	ldr	r0, [pc, #4]	; (deb0 <hci_hardware_error+0x18>)
    deac:	f00b be2d 	b.w	19b0a <printk>
    deb0:	0001ff51 	.word	0x0001ff51

0000deb4 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    deb4:	8981      	ldrh	r1, [r0, #12]
{
    deb6:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    deb8:	6880      	ldr	r0, [r0, #8]
    deba:	f7ff fd63 	bl	d984 <bt_hex_real>
}
    debe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    dec2:	4602      	mov	r2, r0
    dec4:	2157      	movs	r1, #87	; 0x57
    dec6:	4801      	ldr	r0, [pc, #4]	; (decc <hci_vendor_event+0x18>)
    dec8:	f00b be1f 	b.w	19b0a <printk>
    decc:	0001ff78 	.word	0x0001ff78

0000ded0 <le_conn_update_complete>:
{
    ded0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    ded2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    ded4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ded8:	4630      	mov	r0, r6
    deda:	f002 fd49 	bl	10970 <bt_conn_lookup_handle>
	if (!conn) {
    dede:	4604      	mov	r4, r0
    dee0:	b938      	cbnz	r0, def2 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dee2:	4632      	mov	r2, r6
    dee4:	2145      	movs	r1, #69	; 0x45
    dee6:	4821      	ldr	r0, [pc, #132]	; (df6c <le_conn_update_complete+0x9c>)
}
    dee8:	b002      	add	sp, #8
    deea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    deee:	f00b be0c 	b.w	19b0a <printk>
	if (!evt->status) {
    def2:	782b      	ldrb	r3, [r5, #0]
    def4:	b9cb      	cbnz	r3, df2a <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    def6:	792a      	ldrb	r2, [r5, #4]
    def8:	78eb      	ldrb	r3, [r5, #3]
    defa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    defe:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    df02:	79aa      	ldrb	r2, [r5, #6]
    df04:	796b      	ldrb	r3, [r5, #5]
    df06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    df0a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    df0e:	79eb      	ldrb	r3, [r5, #7]
    df10:	7a2a      	ldrb	r2, [r5, #8]
    df12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    df16:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    df1a:	f002 fb47 	bl	105ac <notify_le_param_updated>
	bt_conn_unref(conn);
    df1e:	4620      	mov	r0, r4
}
    df20:	b002      	add	sp, #8
    df22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    df26:	f002 bcff 	b.w	10928 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    df2a:	2b1a      	cmp	r3, #26
    df2c:	d1f7      	bne.n	df1e <le_conn_update_complete+0x4e>
    df2e:	78c3      	ldrb	r3, [r0, #3]
    df30:	2b01      	cmp	r3, #1
    df32:	d1f4      	bne.n	df1e <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    df34:	f44f 6180 	mov.w	r1, #1024	; 0x400
    df38:	3004      	adds	r0, #4
    df3a:	f00d f919 	bl	1b170 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    df3e:	0543      	lsls	r3, r0, #21
    df40:	d4ed      	bmi.n	df1e <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    df42:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    df46:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    df48:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    df4c:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    df50:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    df52:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    df56:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    df5a:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    df5e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    df62:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    df66:	f003 fb09 	bl	1157c <bt_l2cap_update_conn_param>
    df6a:	e7d8      	b.n	df1e <le_conn_update_complete+0x4e>
    df6c:	0001fefd 	.word	0x0001fefd

0000df70 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    df70:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    df72:	4c0c      	ldr	r4, [pc, #48]	; (dfa4 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    df74:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    df76:	2205      	movs	r2, #5
    df78:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    df7c:	f002 fe36 	bl	10bec <bt_conn_lookup_state_le>
		if (!conn) {
    df80:	b970      	cbnz	r0, dfa0 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    df82:	4b09      	ldr	r3, [pc, #36]	; (dfa8 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    df84:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    df86:	6818      	ldr	r0, [r3, #0]
    df88:	889a      	ldrh	r2, [r3, #4]
    df8a:	799b      	ldrb	r3, [r3, #6]
    df8c:	9000      	str	r0, [sp, #0]
    df8e:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    df92:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    df96:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    df98:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    df9c:	f002 fe26 	bl	10bec <bt_conn_lookup_state_le>
}
    dfa0:	b002      	add	sp, #8
    dfa2:	bd10      	pop	{r4, pc}
    dfa4:	20008000 	.word	0x20008000
    dfa8:	0001d9f0 	.word	0x0001d9f0

0000dfac <handle_event>:
{
    dfac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dfae:	4605      	mov	r5, r0
    dfb0:	4614      	mov	r4, r2
    dfb2:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    dfb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    dfb8:	7822      	ldrb	r2, [r4, #0]
    dfba:	42aa      	cmp	r2, r5
    dfbc:	d010      	beq.n	dfe0 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    dfbe:	3408      	adds	r4, #8
    dfc0:	429c      	cmp	r4, r3
    dfc2:	d1f9      	bne.n	dfb8 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    dfc4:	8984      	ldrh	r4, [r0, #12]
    dfc6:	6880      	ldr	r0, [r0, #8]
    dfc8:	4621      	mov	r1, r4
    dfca:	f7ff fcdb 	bl	d984 <bt_hex_real>
    dfce:	4623      	mov	r3, r4
    dfd0:	9000      	str	r0, [sp, #0]
    dfd2:	462a      	mov	r2, r5
    dfd4:	2157      	movs	r1, #87	; 0x57
    dfd6:	480b      	ldr	r0, [pc, #44]	; (e004 <handle_event+0x58>)
    dfd8:	f00b fd97 	bl	19b0a <printk>
}
    dfdc:	b003      	add	sp, #12
    dfde:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    dfe0:	8982      	ldrh	r2, [r0, #12]
    dfe2:	7863      	ldrb	r3, [r4, #1]
    dfe4:	4293      	cmp	r3, r2
    dfe6:	d907      	bls.n	dff8 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    dfe8:	462b      	mov	r3, r5
    dfea:	2145      	movs	r1, #69	; 0x45
    dfec:	4806      	ldr	r0, [pc, #24]	; (e008 <handle_event+0x5c>)
}
    dfee:	b003      	add	sp, #12
    dff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    dff4:	f00b bd89 	b.w	19b0a <printk>
		handler->handler(buf);
    dff8:	6863      	ldr	r3, [r4, #4]
}
    dffa:	b003      	add	sp, #12
    dffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    e000:	4718      	bx	r3
    e002:	bf00      	nop
    e004:	0001ffc8 	.word	0x0001ffc8
    e008:	0001ffa1 	.word	0x0001ffa1

0000e00c <hci_le_meta_event>:
{
    e00c:	b510      	push	{r4, lr}
    e00e:	2101      	movs	r1, #1
    e010:	4604      	mov	r4, r0
    e012:	3008      	adds	r0, #8
    e014:	f006 fdfe 	bl	14c14 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e018:	4621      	mov	r1, r4
}
    e01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e01e:	2308      	movs	r3, #8
    e020:	4a01      	ldr	r2, [pc, #4]	; (e028 <hci_le_meta_event+0x1c>)
    e022:	7800      	ldrb	r0, [r0, #0]
    e024:	f7ff bfc2 	b.w	dfac <handle_event>
    e028:	0001de00 	.word	0x0001de00

0000e02c <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e02c:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e02e:	4d18      	ldr	r5, [pc, #96]	; (e090 <id_create.constprop.0+0x64>)
    e030:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e034:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e036:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e038:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e03a:	b1b1      	cbz	r1, e06a <id_create.constprop.0+0x3e>
    e03c:	2300      	movs	r3, #0
    e03e:	4620      	mov	r0, r4
    e040:	a902      	add	r1, sp, #8
    e042:	9302      	str	r3, [sp, #8]
    e044:	f8cd 300b 	str.w	r3, [sp, #11]
    e048:	f00d f89d 	bl	1b186 <bt_addr_le_cmp>
    e04c:	b168      	cbz	r0, e06a <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e04e:	4621      	mov	r1, r4
    e050:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e052:	f00d f88a 	bl	1b16a <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e056:	480f      	ldr	r0, [pc, #60]	; (e094 <id_create.constprop.0+0x68>)
    e058:	f00d f884 	bl	1b164 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e05c:	0783      	lsls	r3, r0, #30
    e05e:	d515      	bpl.n	e08c <id_create.constprop.0+0x60>
}
    e060:	b005      	add	sp, #20
    e062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    e066:	f7ff bd7f 	b.w	db68 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    e06a:	4668      	mov	r0, sp
    e06c:	f00d f84b 	bl	1b106 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    e070:	4668      	mov	r0, sp
    e072:	f7ff fe83 	bl	dd7c <id_find>
    e076:	2800      	cmp	r0, #0
    e078:	daf7      	bge.n	e06a <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e07a:	4669      	mov	r1, sp
    e07c:	4628      	mov	r0, r5
    e07e:	f00d f874 	bl	1b16a <bt_addr_le_copy>
		if (addr) {
    e082:	2c00      	cmp	r4, #0
    e084:	d0e7      	beq.n	e056 <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e086:	4629      	mov	r1, r5
    e088:	4620      	mov	r0, r4
    e08a:	e7e2      	b.n	e052 <id_create.constprop.0+0x26>
}
    e08c:	b005      	add	sp, #20
    e08e:	bd30      	pop	{r4, r5, pc}
    e090:	20008000 	.word	0x20008000
    e094:	20008094 	.word	0x20008094

0000e098 <hci_rx_thread>:
{
    e098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    e09c:	4f40      	ldr	r7, [pc, #256]	; (e1a0 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    e09e:	f8df 8104 	ldr.w	r8, [pc, #260]	; e1a4 <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    e0a2:	4e41      	ldr	r6, [pc, #260]	; (e1a8 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    e0a4:	f04f 32ff 	mov.w	r2, #4294967295
    e0a8:	f04f 33ff 	mov.w	r3, #4294967295
    e0ac:	4638      	mov	r0, r7
    e0ae:	f006 fc37 	bl	14920 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e0b2:	7d02      	ldrb	r2, [r0, #20]
    e0b4:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    e0b6:	2a01      	cmp	r2, #1
    e0b8:	d041      	beq.n	e13e <hci_rx_thread+0xa6>
    e0ba:	2a03      	cmp	r2, #3
    e0bc:	d16c      	bne.n	e198 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e0be:	8983      	ldrh	r3, [r0, #12]
    e0c0:	2b03      	cmp	r3, #3
    e0c2:	d80b      	bhi.n	e0dc <hci_rx_thread+0x44>
    e0c4:	f240 42ac 	movw	r2, #1196	; 0x4ac
    e0c8:	4631      	mov	r1, r6
    e0ca:	4838      	ldr	r0, [pc, #224]	; (e1ac <hci_rx_thread+0x114>)
    e0cc:	f00b fd1d 	bl	19b0a <printk>
    e0d0:	4040      	eors	r0, r0
    e0d2:	f380 8811 	msr	BASEPRI, r0
    e0d6:	f04f 0003 	mov.w	r0, #3
    e0da:	df02      	svc	2
    e0dc:	2104      	movs	r1, #4
    e0de:	f104 0008 	add.w	r0, r4, #8
    e0e2:	f006 fd97 	bl	14c14 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e0e6:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    e0e8:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    e0ea:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e0ee:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    e0f0:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    e0f2:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    e0f6:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    e0f8:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    e0fa:	d007      	beq.n	e10c <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    e0fc:	2145      	movs	r1, #69	; 0x45
    e0fe:	482c      	ldr	r0, [pc, #176]	; (e1b0 <hci_rx_thread+0x118>)
    e100:	f00b fd03 	bl	19b0a <printk>
			net_buf_unref(buf);
    e104:	4620      	mov	r0, r4
    e106:	f006 fc8d 	bl	14a24 <net_buf_unref>
			break;
    e10a:	e015      	b.n	e138 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    e10c:	f002 fc30 	bl	10970 <bt_conn_lookup_handle>
	if (!conn) {
    e110:	4605      	mov	r5, r0
    e112:	b928      	cbnz	r0, e120 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    e114:	2145      	movs	r1, #69	; 0x45
    e116:	8ae2      	ldrh	r2, [r4, #22]
    e118:	4826      	ldr	r0, [pc, #152]	; (e1b4 <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e11a:	f00b fcf6 	bl	19b0a <printk>
    e11e:	e7f1      	b.n	e104 <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    e120:	f003 f85a 	bl	111d8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    e124:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    e126:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    e128:	ea4f 3219 	mov.w	r2, r9, lsr #12
    e12c:	4628      	mov	r0, r5
    e12e:	f002 fad5 	bl	106dc <bt_conn_recv>
	bt_conn_unref(conn);
    e132:	4628      	mov	r0, r5
    e134:	f002 fbf8 	bl	10928 <bt_conn_unref>
	z_impl_k_yield();
    e138:	f00a f9d0 	bl	184dc <z_impl_k_yield>
	while (1) {
    e13c:	e7b2      	b.n	e0a4 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e13e:	8983      	ldrh	r3, [r0, #12]
    e140:	2b01      	cmp	r3, #1
    e142:	d80b      	bhi.n	e15c <hci_rx_thread+0xc4>
    e144:	f241 32fb 	movw	r2, #5115	; 0x13fb
    e148:	4631      	mov	r1, r6
    e14a:	4818      	ldr	r0, [pc, #96]	; (e1ac <hci_rx_thread+0x114>)
    e14c:	f00b fcdd 	bl	19b0a <printk>
    e150:	4040      	eors	r0, r0
    e152:	f380 8811 	msr	BASEPRI, r0
    e156:	f04f 0003 	mov.w	r0, #3
    e15a:	df02      	svc	2
    e15c:	2102      	movs	r1, #2
    e15e:	f104 0008 	add.w	r0, r4, #8
    e162:	f006 fd57 	bl	14c14 <net_buf_simple_pull_mem>
    e166:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    e168:	7800      	ldrb	r0, [r0, #0]
    e16a:	f00c ffda 	bl	1b122 <bt_hci_evt_get_flags>
    e16e:	0783      	lsls	r3, r0, #30
    e170:	d40b      	bmi.n	e18a <hci_rx_thread+0xf2>
    e172:	f241 32ff 	movw	r2, #5119	; 0x13ff
    e176:	4631      	mov	r1, r6
    e178:	480c      	ldr	r0, [pc, #48]	; (e1ac <hci_rx_thread+0x114>)
    e17a:	f00b fcc6 	bl	19b0a <printk>
    e17e:	4040      	eors	r0, r0
    e180:	f380 8811 	msr	BASEPRI, r0
    e184:	f04f 0003 	mov.w	r0, #3
    e188:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    e18a:	2304      	movs	r3, #4
    e18c:	4642      	mov	r2, r8
    e18e:	4621      	mov	r1, r4
    e190:	7828      	ldrb	r0, [r5, #0]
    e192:	f7ff ff0b 	bl	dfac <handle_event>
	net_buf_unref(buf);
    e196:	e7b5      	b.n	e104 <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e198:	2145      	movs	r1, #69	; 0x45
    e19a:	4807      	ldr	r0, [pc, #28]	; (e1b8 <hci_rx_thread+0x120>)
    e19c:	e7bd      	b.n	e11a <hci_rx_thread+0x82>
    e19e:	bf00      	nop
    e1a0:	200080fc 	.word	0x200080fc
    e1a4:	0001de50 	.word	0x0001de50
    e1a8:	0001ffef 	.word	0x0001ffef
    e1ac:	0001ecfc 	.word	0x0001ecfc
    e1b0:	00020023 	.word	0x00020023
    e1b4:	0002004c 	.word	0x0002004c
    e1b8:	00020073 	.word	0x00020073

0000e1bc <hci_cmd_done>:
{
    e1bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e1c0:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e1c2:	7990      	ldrb	r0, [r2, #6]
{
    e1c4:	460f      	mov	r7, r1
    e1c6:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e1c8:	f006 faac 	bl	14724 <net_buf_pool_get>
    e1cc:	4d2a      	ldr	r5, [pc, #168]	; (e278 <hci_cmd_done+0xbc>)
    e1ce:	4285      	cmp	r5, r0
    e1d0:	d00e      	beq.n	e1f0 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    e1d2:	79a4      	ldrb	r4, [r4, #6]
    e1d4:	4620      	mov	r0, r4
    e1d6:	f006 faa5 	bl	14724 <net_buf_pool_get>
    e1da:	4623      	mov	r3, r4
    e1dc:	e9cd 0500 	strd	r0, r5, [sp]
    e1e0:	4632      	mov	r2, r6
    e1e2:	2157      	movs	r1, #87	; 0x57
    e1e4:	4825      	ldr	r0, [pc, #148]	; (e27c <hci_cmd_done+0xc0>)
    e1e6:	f00b fc90 	bl	19b0a <printk>
}
    e1ea:	b002      	add	sp, #8
    e1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    e1f0:	4620      	mov	r0, r4
    e1f2:	f006 fa9f 	bl	14734 <net_buf_id>
    e1f6:	f04f 080c 	mov.w	r8, #12
    e1fa:	4d21      	ldr	r5, [pc, #132]	; (e280 <hci_cmd_done+0xc4>)
    e1fc:	fb08 5000 	mla	r0, r8, r0, r5
    e200:	8843      	ldrh	r3, [r0, #2]
    e202:	42b3      	cmp	r3, r6
    e204:	d00a      	beq.n	e21c <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    e206:	4620      	mov	r0, r4
    e208:	f006 fa94 	bl	14734 <net_buf_id>
    e20c:	fb08 5000 	mla	r0, r8, r0, r5
    e210:	4632      	mov	r2, r6
    e212:	8843      	ldrh	r3, [r0, #2]
    e214:	2157      	movs	r1, #87	; 0x57
    e216:	481b      	ldr	r0, [pc, #108]	; (e284 <hci_cmd_done+0xc8>)
    e218:	f00b fc77 	bl	19b0a <printk>
	if (cmd(buf)->state && !status) {
    e21c:	4620      	mov	r0, r4
    e21e:	f006 fa89 	bl	14734 <net_buf_id>
    e222:	260c      	movs	r6, #12
    e224:	fb06 5000 	mla	r0, r6, r0, r5
    e228:	6843      	ldr	r3, [r0, #4]
    e22a:	b15b      	cbz	r3, e244 <hci_cmd_done+0x88>
    e22c:	b957      	cbnz	r7, e244 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    e22e:	4620      	mov	r0, r4
    e230:	f006 fa80 	bl	14734 <net_buf_id>
    e234:	fb06 5000 	mla	r0, r6, r0, r5
    e238:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    e23a:	7a1a      	ldrb	r2, [r3, #8]
    e23c:	e9d3 0100 	ldrd	r0, r1, [r3]
    e240:	f00c ffaf 	bl	1b1a2 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    e244:	4620      	mov	r0, r4
    e246:	f006 fa75 	bl	14734 <net_buf_id>
    e24a:	260c      	movs	r6, #12
    e24c:	fb06 5000 	mla	r0, r6, r0, r5
    e250:	6883      	ldr	r3, [r0, #8]
    e252:	2b00      	cmp	r3, #0
    e254:	d0c9      	beq.n	e1ea <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    e256:	4620      	mov	r0, r4
    e258:	f006 fa6c 	bl	14734 <net_buf_id>
    e25c:	4370      	muls	r0, r6
    e25e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    e260:	4620      	mov	r0, r4
    e262:	f006 fa67 	bl	14734 <net_buf_id>
    e266:	fb06 5500 	mla	r5, r6, r0, r5
    e26a:	68a8      	ldr	r0, [r5, #8]
}
    e26c:	b002      	add	sp, #8
    e26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    e272:	f00a ba75 	b.w	18760 <z_impl_k_sem_give>
    e276:	bf00      	nop
    e278:	20008760 	.word	0x20008760
    e27c:	0002008c 	.word	0x0002008c
    e280:	2000a970 	.word	0x2000a970
    e284:	000200c6 	.word	0x000200c6

0000e288 <hci_cmd_status>:
{
    e288:	b538      	push	{r3, r4, r5, lr}
    e28a:	2104      	movs	r1, #4
    e28c:	4604      	mov	r4, r0
    e28e:	3008      	adds	r0, #8
    e290:	f006 fcc0 	bl	14c14 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e294:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    e296:	7801      	ldrb	r1, [r0, #0]
    e298:	4622      	mov	r2, r4
    e29a:	8840      	ldrh	r0, [r0, #2]
    e29c:	f7ff ff8e 	bl	e1bc <hci_cmd_done>
	if (ncmd) {
    e2a0:	b125      	cbz	r5, e2ac <hci_cmd_status+0x24>
}
    e2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e2a6:	4802      	ldr	r0, [pc, #8]	; (e2b0 <hci_cmd_status+0x28>)
    e2a8:	f00a ba5a 	b.w	18760 <z_impl_k_sem_give>
    e2ac:	bd38      	pop	{r3, r4, r5, pc}
    e2ae:	bf00      	nop
    e2b0:	200080e0 	.word	0x200080e0

0000e2b4 <hci_cmd_complete>:
{
    e2b4:	b538      	push	{r3, r4, r5, lr}
    e2b6:	2103      	movs	r1, #3
    e2b8:	4604      	mov	r4, r0
    e2ba:	3008      	adds	r0, #8
    e2bc:	f006 fcaa 	bl	14c14 <net_buf_simple_pull_mem>
	status = buf->data[0];
    e2c0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    e2c2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    e2c4:	4622      	mov	r2, r4
    e2c6:	7819      	ldrb	r1, [r3, #0]
    e2c8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    e2cc:	f7ff ff76 	bl	e1bc <hci_cmd_done>
	if (ncmd) {
    e2d0:	b125      	cbz	r5, e2dc <hci_cmd_complete+0x28>
}
    e2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e2d6:	4802      	ldr	r0, [pc, #8]	; (e2e0 <hci_cmd_complete+0x2c>)
    e2d8:	f00a ba42 	b.w	18760 <z_impl_k_sem_give>
    e2dc:	bd38      	pop	{r3, r4, r5, pc}
    e2de:	bf00      	nop
    e2e0:	200080e0 	.word	0x200080e0

0000e2e4 <hci_num_completed_packets>:
{
    e2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    e2e8:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    e2ea:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    e2ec:	6887      	ldr	r7, [r0, #8]
    e2ee:	f8df 90dc 	ldr.w	r9, [pc, #220]	; e3cc <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    e2f2:	783b      	ldrb	r3, [r7, #0]
    e2f4:	429d      	cmp	r5, r3
    e2f6:	db01      	blt.n	e2fc <hci_num_completed_packets+0x18>
}
    e2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    e2fc:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    e300:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    e304:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    e308:	4650      	mov	r0, sl
    e30a:	f002 fb31 	bl	10970 <bt_conn_lookup_handle>
		if (!conn) {
    e30e:	4604      	mov	r4, r0
    e310:	b1d0      	cbz	r0, e348 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e312:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    e316:	b37e      	cbz	r6, e378 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    e318:	f04f 0320 	mov.w	r3, #32
    e31c:	f3ef 8211 	mrs	r2, BASEPRI
    e320:	f383 8811 	msr	BASEPRI, r3
    e324:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    e328:	69e3      	ldr	r3, [r4, #28]
    e32a:	b1a3      	cbz	r3, e356 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    e32c:	3b01      	subs	r3, #1
    e32e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    e330:	f382 8811 	msr	BASEPRI, r2
    e334:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    e338:	4620      	mov	r0, r4
    e33a:	f002 f933 	bl	105a4 <bt_conn_get_pkts>
    e33e:	3e01      	subs	r6, #1
    e340:	f00a fa0e 	bl	18760 <z_impl_k_sem_give>
    e344:	b2b6      	uxth	r6, r6
    e346:	e7e6      	b.n	e316 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    e348:	4652      	mov	r2, sl
    e34a:	2145      	movs	r1, #69	; 0x45
    e34c:	4820      	ldr	r0, [pc, #128]	; (e3d0 <hci_num_completed_packets+0xec>)
    e34e:	f00b fbdc 	bl	19b0a <printk>
	for (i = 0; i < evt->num_handles; i++) {
    e352:	3501      	adds	r5, #1
    e354:	e7cd      	b.n	e2f2 <hci_num_completed_packets+0xe>
	return list->head;
    e356:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    e358:	b12b      	cbz	r3, e366 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e35a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    e35c:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e35e:	428b      	cmp	r3, r1
	list->head = node;
    e360:	6160      	str	r0, [r4, #20]
	list->tail = node;
    e362:	bf08      	it	eq
    e364:	61a0      	streq	r0, [r4, #24]
    e366:	f382 8811 	msr	BASEPRI, r2
    e36a:	f3bf 8f6f 	isb	sy
			if (!node) {
    e36e:	b93b      	cbnz	r3, e380 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    e370:	2145      	movs	r1, #69	; 0x45
    e372:	4818      	ldr	r0, [pc, #96]	; (e3d4 <hci_num_completed_packets+0xf0>)
    e374:	f00b fbc9 	bl	19b0a <printk>
		bt_conn_unref(conn);
    e378:	4620      	mov	r0, r4
    e37a:	f002 fad5 	bl	10928 <bt_conn_unref>
    e37e:	e7e8      	b.n	e352 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    e380:	f04f 0220 	mov.w	r2, #32
    e384:	f3ef 8111 	mrs	r1, BASEPRI
    e388:	f382 8811 	msr	BASEPRI, r2
    e38c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    e390:	68da      	ldr	r2, [r3, #12]
    e392:	61e2      	str	r2, [r4, #28]
	return list->tail;
    e394:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    e396:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    e39a:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    e39e:	b98a      	cbnz	r2, e3c4 <hci_num_completed_packets+0xe0>
	list->head = node;
    e3a0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    e3a4:	f381 8811 	msr	BASEPRI, r1
    e3a8:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e3ac:	2101      	movs	r1, #1
    e3ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
    e3b2:	f00c fedd 	bl	1b170 <atomic_or>
    e3b6:	07c3      	lsls	r3, r0, #31
    e3b8:	d4be      	bmi.n	e338 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    e3ba:	4651      	mov	r1, sl
    e3bc:	4648      	mov	r0, r9
    e3be:	f00e ff21 	bl	1d204 <k_queue_append>
    e3c2:	e7b9      	b.n	e338 <hci_num_completed_packets+0x54>
	parent->next = child;
    e3c4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e3c6:	6263      	str	r3, [r4, #36]	; 0x24
}
    e3c8:	e7ec      	b.n	e3a4 <hci_num_completed_packets+0xc0>
    e3ca:	bf00      	nop
    e3cc:	2000a3b0 	.word	0x2000a3b0
    e3d0:	000200fe 	.word	0x000200fe
    e3d4:	0002011f 	.word	0x0002011f

0000e3d8 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    e3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    e3da:	7803      	ldrb	r3, [r0, #0]
{
    e3dc:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    e3de:	f88d 3004 	strb.w	r3, [sp, #4]
    e3e2:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    e3e4:	4c24      	ldr	r4, [pc, #144]	; (e478 <le_adv_start_add_conn+0xa0>)
{
    e3e6:	4605      	mov	r5, r0
    e3e8:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    e3ea:	f104 0018 	add.w	r0, r4, #24
    e3ee:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    e3f0:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    e3f4:	f00c fee6 	bl	1b1c4 <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    e3f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e3fc:	bb93      	cbnz	r3, e464 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    e3fe:	462e      	mov	r6, r5
    e400:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e404:	a902      	add	r1, sp, #8
    e406:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    e408:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e40c:	9302      	str	r3, [sp, #8]
    e40e:	f8cd 300b 	str.w	r3, [sp, #11]
    e412:	f00c feb8 	bl	1b186 <bt_addr_le_cmp>
    e416:	782a      	ldrb	r2, [r5, #0]
    e418:	4604      	mov	r4, r0
    e41a:	b9a8      	cbnz	r0, e448 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    e41c:	4b17      	ldr	r3, [pc, #92]	; (e47c <le_adv_start_add_conn+0xa4>)
    e41e:	6818      	ldr	r0, [r3, #0]
    e420:	8899      	ldrh	r1, [r3, #4]
    e422:	799b      	ldrb	r3, [r3, #6]
    e424:	9004      	str	r0, [sp, #16]
    e426:	f8ad 1014 	strh.w	r1, [sp, #20]
    e42a:	4610      	mov	r0, r2
    e42c:	a904      	add	r1, sp, #16
    e42e:	f88d 3016 	strb.w	r3, [sp, #22]
    e432:	f002 fa4d 	bl	108d0 <bt_conn_add_le>
		if (!conn) {
    e436:	4605      	mov	r5, r0
    e438:	b1d0      	cbz	r0, e470 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    e43a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e43c:	f002 faa0 	bl	10980 <bt_conn_set_state>
	*out_conn = conn;
    e440:	603d      	str	r5, [r7, #0]
	return 0;
}
    e442:	4620      	mov	r0, r4
    e444:	b007      	add	sp, #28
    e446:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    e448:	4631      	mov	r1, r6
    e44a:	4610      	mov	r0, r2
    e44c:	f002 fbb2 	bl	10bb4 <bt_conn_exists_le>
    e450:	4604      	mov	r4, r0
    e452:	b950      	cbnz	r0, e46a <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    e454:	7828      	ldrb	r0, [r5, #0]
    e456:	4631      	mov	r1, r6
    e458:	f002 fa3a 	bl	108d0 <bt_conn_add_le>
	if (!conn) {
    e45c:	4605      	mov	r5, r0
    e45e:	b138      	cbz	r0, e470 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e460:	2105      	movs	r1, #5
    e462:	e7eb      	b.n	e43c <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    e464:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e468:	e7eb      	b.n	e442 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    e46a:	f06f 0415 	mvn.w	r4, #21
    e46e:	e7e8      	b.n	e442 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    e470:	f06f 040b 	mvn.w	r4, #11
    e474:	e7e5      	b.n	e442 <le_adv_start_add_conn+0x6a>
    e476:	bf00      	nop
    e478:	20008000 	.word	0x20008000
    e47c:	0001d9f0 	.word	0x0001d9f0

0000e480 <bt_hci_cmd_create>:
{
    e480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    e484:	f04f 32ff 	mov.w	r2, #4294967295
    e488:	4606      	mov	r6, r0
    e48a:	f04f 33ff 	mov.w	r3, #4294967295
    e48e:	481d      	ldr	r0, [pc, #116]	; (e504 <bt_hci_cmd_create+0x84>)
    e490:	460f      	mov	r7, r1
    e492:	f00e f84e 	bl	1c532 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    e496:	4604      	mov	r4, r0
    e498:	b950      	cbnz	r0, e4b0 <bt_hci_cmd_create+0x30>
    e49a:	491b      	ldr	r1, [pc, #108]	; (e508 <bt_hci_cmd_create+0x88>)
    e49c:	481b      	ldr	r0, [pc, #108]	; (e50c <bt_hci_cmd_create+0x8c>)
    e49e:	f44f 7281 	mov.w	r2, #258	; 0x102
    e4a2:	f00b fb32 	bl	19b0a <printk>
    e4a6:	f44f 7181 	mov.w	r1, #258	; 0x102
    e4aa:	4817      	ldr	r0, [pc, #92]	; (e508 <bt_hci_cmd_create+0x88>)
    e4ac:	f00b fdd3 	bl	1a056 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e4b0:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    e4b4:	f104 0a08 	add.w	sl, r4, #8
    e4b8:	2101      	movs	r1, #1
    e4ba:	4650      	mov	r0, sl
    e4bc:	f006 fa60 	bl	14980 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    e4c0:	4620      	mov	r0, r4
    e4c2:	f884 8014 	strb.w	r8, [r4, #20]
    e4c6:	f006 f935 	bl	14734 <net_buf_id>
    e4ca:	f04f 090c 	mov.w	r9, #12
    e4ce:	4d10      	ldr	r5, [pc, #64]	; (e510 <bt_hci_cmd_create+0x90>)
    e4d0:	fb09 5000 	mla	r0, r9, r0, r5
    e4d4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    e4d6:	4620      	mov	r0, r4
    e4d8:	f006 f92c 	bl	14734 <net_buf_id>
    e4dc:	fb09 5000 	mla	r0, r9, r0, r5
    e4e0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    e4e4:	4620      	mov	r0, r4
    e4e6:	f006 f925 	bl	14734 <net_buf_id>
    e4ea:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    e4ee:	2103      	movs	r1, #3
    e4f0:	4650      	mov	r0, sl
    e4f2:	f8c5 8004 	str.w	r8, [r5, #4]
    e4f6:	f006 fbab 	bl	14c50 <net_buf_simple_add>
	hdr->param_len = param_len;
    e4fa:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    e4fc:	8006      	strh	r6, [r0, #0]
}
    e4fe:	4620      	mov	r0, r4
    e500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e504:	20008760 	.word	0x20008760
    e508:	0001ffef 	.word	0x0001ffef
    e50c:	0001ecfc 	.word	0x0001ecfc
    e510:	2000a970 	.word	0x2000a970

0000e514 <bt_hci_cmd_send_sync>:
{
    e514:	b5f0      	push	{r4, r5, r6, r7, lr}
    e516:	4607      	mov	r7, r0
    e518:	4615      	mov	r5, r2
	if (!buf) {
    e51a:	460c      	mov	r4, r1
{
    e51c:	b087      	sub	sp, #28
	if (!buf) {
    e51e:	b921      	cbnz	r1, e52a <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    e520:	f7ff ffae 	bl	e480 <bt_hci_cmd_create>
		if (!buf) {
    e524:	4604      	mov	r4, r0
    e526:	2800      	cmp	r0, #0
    e528:	d048      	beq.n	e5bc <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e52a:	2201      	movs	r2, #1
    e52c:	2100      	movs	r1, #0
    e52e:	4668      	mov	r0, sp
    e530:	f00e fec0 	bl	1d2b4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    e534:	4620      	mov	r0, r4
    e536:	f006 f8fd 	bl	14734 <net_buf_id>
    e53a:	230c      	movs	r3, #12
    e53c:	4e21      	ldr	r6, [pc, #132]	; (e5c4 <bt_hci_cmd_send_sync+0xb0>)
    e53e:	fb03 6000 	mla	r0, r3, r0, r6
    e542:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    e546:	4620      	mov	r0, r4
    e548:	f006 fab0 	bl	14aac <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    e54c:	4621      	mov	r1, r4
    e54e:	481e      	ldr	r0, [pc, #120]	; (e5c8 <bt_hci_cmd_send_sync+0xb4>)
    e550:	f006 fa3a 	bl	149c8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    e554:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e558:	2300      	movs	r3, #0
    e55a:	4668      	mov	r0, sp
    e55c:	f00a f93c 	bl	187d8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    e560:	b158      	cbz	r0, e57a <bt_hci_cmd_send_sync+0x66>
    e562:	f240 124d 	movw	r2, #333	; 0x14d
    e566:	4919      	ldr	r1, [pc, #100]	; (e5cc <bt_hci_cmd_send_sync+0xb8>)
    e568:	4819      	ldr	r0, [pc, #100]	; (e5d0 <bt_hci_cmd_send_sync+0xbc>)
    e56a:	f00b face 	bl	19b0a <printk>
    e56e:	4040      	eors	r0, r0
    e570:	f380 8811 	msr	BASEPRI, r0
    e574:	f04f 0003 	mov.w	r0, #3
    e578:	df02      	svc	2
	status = cmd(buf)->status;
    e57a:	4620      	mov	r0, r4
    e57c:	f006 f8da 	bl	14734 <net_buf_id>
    e580:	230c      	movs	r3, #12
    e582:	4358      	muls	r0, r3
    e584:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    e586:	b186      	cbz	r6, e5aa <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    e588:	4633      	mov	r3, r6
    e58a:	463a      	mov	r2, r7
    e58c:	2157      	movs	r1, #87	; 0x57
    e58e:	4811      	ldr	r0, [pc, #68]	; (e5d4 <bt_hci_cmd_send_sync+0xc0>)
    e590:	f00b fabb 	bl	19b0a <printk>
		net_buf_unref(buf);
    e594:	4620      	mov	r0, r4
    e596:	f006 fa45 	bl	14a24 <net_buf_unref>
			return -EIO;
    e59a:	2e09      	cmp	r6, #9
    e59c:	bf0c      	ite	eq
    e59e:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    e5a2:	f06f 0004 	mvnne.w	r0, #4
}
    e5a6:	b007      	add	sp, #28
    e5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    e5aa:	b115      	cbz	r5, e5b2 <bt_hci_cmd_send_sync+0x9e>
	return 0;
    e5ac:	4630      	mov	r0, r6
		*rsp = buf;
    e5ae:	602c      	str	r4, [r5, #0]
    e5b0:	e7f9      	b.n	e5a6 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    e5b2:	4620      	mov	r0, r4
    e5b4:	f006 fa36 	bl	14a24 <net_buf_unref>
	return 0;
    e5b8:	4628      	mov	r0, r5
    e5ba:	e7f4      	b.n	e5a6 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    e5bc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e5c0:	e7f1      	b.n	e5a6 <bt_hci_cmd_send_sync+0x92>
    e5c2:	bf00      	nop
    e5c4:	2000a970 	.word	0x2000a970
    e5c8:	20008118 	.word	0x20008118
    e5cc:	0001ffef 	.word	0x0001ffef
    e5d0:	0001ecfc 	.word	0x0001ecfc
    e5d4:	0002013b 	.word	0x0002013b

0000e5d8 <hci_le_read_max_data_len>:
{
    e5d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e5da:	4606      	mov	r6, r0
    e5dc:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    e5de:	f242 002f 	movw	r0, #8239	; 0x202f
    e5e2:	2100      	movs	r1, #0
    e5e4:	aa01      	add	r2, sp, #4
    e5e6:	f7ff ff95 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    e5ea:	4604      	mov	r4, r0
    e5ec:	b130      	cbz	r0, e5fc <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    e5ee:	2145      	movs	r1, #69	; 0x45
    e5f0:	4808      	ldr	r0, [pc, #32]	; (e614 <hci_le_read_max_data_len+0x3c>)
    e5f2:	f00b fa8a 	bl	19b0a <printk>
}
    e5f6:	4620      	mov	r0, r4
    e5f8:	b002      	add	sp, #8
    e5fa:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    e5fc:	9801      	ldr	r0, [sp, #4]
    e5fe:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    e600:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e604:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    e606:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    e60a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    e60c:	f006 fa0a 	bl	14a24 <net_buf_unref>
	return 0;
    e610:	e7f1      	b.n	e5f6 <hci_le_read_max_data_len+0x1e>
    e612:	bf00      	nop
    e614:	0002015c 	.word	0x0002015c

0000e618 <set_random_address>:
{
    e618:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    e61a:	4e15      	ldr	r6, [pc, #84]	; (e670 <set_random_address+0x58>)
    e61c:	2206      	movs	r2, #6
    e61e:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    e622:	4605      	mov	r5, r0
    e624:	f00c fca0 	bl	1af68 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e628:	4604      	mov	r4, r0
    e62a:	b1e0      	cbz	r0, e666 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e62c:	2106      	movs	r1, #6
    e62e:	f242 0005 	movw	r0, #8197	; 0x2005
    e632:	f7ff ff25 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    e636:	4604      	mov	r4, r0
    e638:	b1b8      	cbz	r0, e66a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e63a:	2206      	movs	r2, #6
    e63c:	4629      	mov	r1, r5
    e63e:	3008      	adds	r0, #8
    e640:	f00d ffa5 	bl	1c58e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e644:	4621      	mov	r1, r4
    e646:	2200      	movs	r2, #0
    e648:	f242 0005 	movw	r0, #8197	; 0x2005
    e64c:	f7ff ff62 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    e650:	4604      	mov	r4, r0
    e652:	b940      	cbnz	r0, e666 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    e654:	2206      	movs	r2, #6
    e656:	4629      	mov	r1, r5
    e658:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    e65c:	f00c fc95 	bl	1af8a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e660:	2301      	movs	r3, #1
    e662:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    e666:	4620      	mov	r0, r4
    e668:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    e66a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e66e:	e7fa      	b.n	e666 <set_random_address+0x4e>
    e670:	20008000 	.word	0x20008000

0000e674 <set_le_scan_enable_legacy>:
{
    e674:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e676:	2102      	movs	r1, #2
{
    e678:	4604      	mov	r4, r0
    e67a:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e67c:	f242 000c 	movw	r0, #8204	; 0x200c
    e680:	f7ff fefe 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    e684:	4605      	mov	r5, r0
    e686:	b348      	cbz	r0, e6dc <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    e688:	2102      	movs	r1, #2
    e68a:	3008      	adds	r0, #8
    e68c:	f006 fae0 	bl	14c50 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    e690:	2c01      	cmp	r4, #1
    e692:	4603      	mov	r3, r0
    e694:	d11f      	bne.n	e6d6 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e696:	4813      	ldr	r0, [pc, #76]	; (e6e4 <set_le_scan_enable_legacy+0x70>)
    e698:	f00c fd64 	bl	1b164 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e69c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e6a0:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    e6a2:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    e6a4:	4b0f      	ldr	r3, [pc, #60]	; (e6e4 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    e6a6:	4628      	mov	r0, r5
    e6a8:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    e6aa:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    e6ac:	f004 0401 	and.w	r4, r4, #1
    e6b0:	9302      	str	r3, [sp, #8]
    e6b2:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    e6b6:	f006 f83d 	bl	14734 <net_buf_id>
    e6ba:	220c      	movs	r2, #12
    e6bc:	4b0a      	ldr	r3, [pc, #40]	; (e6e8 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e6be:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    e6c0:	fb02 3300 	mla	r3, r2, r0, r3
    e6c4:	aa01      	add	r2, sp, #4
    e6c6:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e6c8:	f242 000c 	movw	r0, #8204	; 0x200c
    e6cc:	2200      	movs	r2, #0
    e6ce:	f7ff ff21 	bl	e514 <bt_hci_cmd_send_sync>
}
    e6d2:	b005      	add	sp, #20
    e6d4:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    e6d6:	2200      	movs	r2, #0
    e6d8:	7042      	strb	r2, [r0, #1]
    e6da:	e7e2      	b.n	e6a2 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    e6dc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e6e0:	e7f7      	b.n	e6d2 <set_le_scan_enable_legacy+0x5e>
    e6e2:	bf00      	nop
    e6e4:	20008094 	.word	0x20008094
    e6e8:	2000a970 	.word	0x2000a970

0000e6ec <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    e6ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e6f0:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e6f2:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    e6f6:	460e      	mov	r6, r1
    e6f8:	4691      	mov	r9, r2
    e6fa:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e6fc:	d02c      	beq.n	e758 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e6fe:	f8df 80e0 	ldr.w	r8, [pc, #224]	; e7e0 <le_adv_set_random_addr.isra.0+0xf4>
    e702:	b12a      	cbz	r2, e710 <le_adv_set_random_addr.isra.0+0x24>
    e704:	068c      	lsls	r4, r1, #26
    e706:	d503      	bpl.n	e710 <le_adv_set_random_addr.isra.0+0x24>
    e708:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    e70c:	0658      	lsls	r0, r3, #25
    e70e:	d563      	bpl.n	e7d8 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e710:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    e714:	f818 3003 	ldrb.w	r3, [r8, r3]
    e718:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    e71c:	2b01      	cmp	r3, #1
    e71e:	d009      	beq.n	e734 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    e720:	ebaa 0505 	sub.w	r5, sl, r5
    e724:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e728:	f1b9 0f00 	cmp.w	r9, #0
    e72c:	d10f      	bne.n	e74e <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    e72e:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e730:	703b      	strb	r3, [r7, #0]
    e732:	e008      	b.n	e746 <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    e734:	2007      	movs	r0, #7
    e736:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    e73a:	4440      	add	r0, r8
    e73c:	f7ff ff6c 	bl	e618 <set_random_address>
				if (err) {
    e740:	4604      	mov	r4, r0
    e742:	2800      	cmp	r0, #0
    e744:	d0ec      	beq.n	e720 <le_adv_set_random_addr.isra.0+0x34>
}
    e746:	4620      	mov	r0, r4
    e748:	b002      	add	sp, #8
    e74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e74e:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e750:	bf48      	it	mi
    e752:	f043 0302 	orrmi.w	r3, r3, #2
    e756:	e7ea      	b.n	e72e <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    e758:	f011 0604 	ands.w	r6, r1, #4
    e75c:	d014      	beq.n	e788 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e75e:	f8df 8080 	ldr.w	r8, [pc, #128]	; e7e0 <le_adv_set_random_addr.isra.0+0xf4>
    e762:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    e766:	f818 3003 	ldrb.w	r3, [r8, r3]
    e76a:	00ee      	lsls	r6, r5, #3
    e76c:	2b01      	cmp	r3, #1
    e76e:	d105      	bne.n	e77c <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    e770:	2007      	movs	r0, #7
    e772:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    e776:	4440      	add	r0, r8
    e778:	f7ff ff4e 	bl	e618 <set_random_address>
			*own_addr_type = id_addr->type;
    e77c:	1b75      	subs	r5, r6, r5
    e77e:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    e782:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    e784:	703b      	strb	r3, [r7, #0]
    e786:	e7de      	b.n	e746 <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e788:	4816      	ldr	r0, [pc, #88]	; (e7e4 <le_adv_set_random_addr.isra.0+0xf8>)
    e78a:	f00c fceb 	bl	1b164 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    e78e:	0682      	lsls	r2, r0, #26
    e790:	d417      	bmi.n	e7c2 <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    e792:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    e794:	2106      	movs	r1, #6
    e796:	4668      	mov	r0, sp
    e798:	f001 fe2a 	bl	103f0 <bt_rand>
	if (err) {
    e79c:	4604      	mov	r4, r0
    e79e:	b948      	cbnz	r0, e7b4 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    e7a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    e7a4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    e7a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e7aa:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    e7ae:	f7ff ff33 	bl	e618 <set_random_address>
    e7b2:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e7b4:	2001      	movs	r0, #1
    e7b6:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    e7b8:	2d00      	cmp	r5, #0
    e7ba:	d0c4      	beq.n	e746 <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    e7bc:	f7ff ff5a 	bl	e674 <set_le_scan_enable_legacy>
		if (err) {
    e7c0:	e7c1      	b.n	e746 <le_adv_set_random_addr.isra.0+0x5a>
    e7c2:	4808      	ldr	r0, [pc, #32]	; (e7e4 <le_adv_set_random_addr.isra.0+0xf8>)
    e7c4:	f00c fcce 	bl	1b164 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    e7c8:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e7ca:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    e7ce:	d5e0      	bpl.n	e792 <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    e7d0:	4630      	mov	r0, r6
    e7d2:	f7ff ff4f 	bl	e674 <set_le_scan_enable_legacy>
    e7d6:	e7dd      	b.n	e794 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    e7d8:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e7dc:	e7b3      	b.n	e746 <le_adv_set_random_addr.isra.0+0x5a>
    e7de:	bf00      	nop
    e7e0:	20008000 	.word	0x20008000
    e7e4:	20008094 	.word	0x20008094

0000e7e8 <hci_set_ad>:
{
    e7e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7ec:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e7ee:	2120      	movs	r1, #32
{
    e7f0:	4682      	mov	sl, r0
    e7f2:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e7f4:	f7ff fe44 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    e7f8:	4606      	mov	r6, r0
    e7fa:	2800      	cmp	r0, #0
    e7fc:	d056      	beq.n	e8ac <hci_set_ad+0xc4>
    e7fe:	2120      	movs	r1, #32
    e800:	3008      	adds	r0, #8
    e802:	f006 fa25 	bl	14c50 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    e806:	2220      	movs	r2, #32
    e808:	4681      	mov	r9, r0
    e80a:	2100      	movs	r1, #0
    e80c:	f00c fbe8 	bl	1afe0 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e810:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    e814:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e816:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    e81a:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    e81c:	2300      	movs	r3, #0
    e81e:	f8d4 8000 	ldr.w	r8, [r4]
    e822:	6862      	ldr	r2, [r4, #4]
    e824:	4293      	cmp	r3, r2
    e826:	d30d      	bcc.n	e844 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    e828:	9b00      	ldr	r3, [sp, #0]
    e82a:	3408      	adds	r4, #8
    e82c:	429c      	cmp	r4, r3
    e82e:	d1f5      	bne.n	e81c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e830:	2200      	movs	r2, #0
    e832:	4631      	mov	r1, r6
    e834:	4650      	mov	r0, sl
	*data_len = set_data_len;
    e836:	f889 5000 	strb.w	r5, [r9]
}
    e83a:	b003      	add	sp, #12
    e83c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e840:	f7ff be68 	b.w	e514 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    e844:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    e848:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    e84a:	1881      	adds	r1, r0, r2
    e84c:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    e84e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    e852:	d914      	bls.n	e87e <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e854:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    e858:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e85c:	d101      	bne.n	e862 <hci_set_ad+0x7a>
    e85e:	2a00      	cmp	r2, #0
    e860:	dc0b      	bgt.n	e87a <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    e862:	2145      	movs	r1, #69	; 0x45
    e864:	4813      	ldr	r0, [pc, #76]	; (e8b4 <hci_set_ad+0xcc>)
    e866:	f00b f950 	bl	19b0a <printk>
		net_buf_unref(buf);
    e86a:	4630      	mov	r0, r6
    e86c:	f006 f8da 	bl	14a24 <net_buf_unref>
					return -EINVAL;
    e870:	f06f 0015 	mvn.w	r0, #21
}
    e874:	b003      	add	sp, #12
    e876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    e87a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    e87e:	b2d7      	uxtb	r7, r2
    e880:	1c79      	adds	r1, r7, #1
    e882:	f80b 1005 	strb.w	r1, [fp, r5]
    e886:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    e888:	b2c9      	uxtb	r1, r1
    e88a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    e88e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e892:	fa5b f080 	uxtab	r0, fp, r0
    e896:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    e898:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    e89a:	f00c fb76 	bl	1af8a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    e89e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    e8a0:	443d      	add	r5, r7
    e8a2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    e8a4:	3301      	adds	r3, #1
    e8a6:	f108 0808 	add.w	r8, r8, #8
    e8aa:	e7ba      	b.n	e822 <hci_set_ad+0x3a>
		return -ENOBUFS;
    e8ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e8b0:	e7e0      	b.n	e874 <hci_set_ad+0x8c>
    e8b2:	bf00      	nop
    e8b4:	00020181 	.word	0x00020181

0000e8b8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8bc:	b087      	sub	sp, #28
    e8be:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    e8c2:	4606      	mov	r6, r0
    e8c4:	460c      	mov	r4, r1
    e8c6:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    e8c8:	2100      	movs	r1, #0
    e8ca:	2210      	movs	r2, #16
    e8cc:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    e8ce:	461d      	mov	r5, r3
    e8d0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    e8d4:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    e8d8:	f00c fb82 	bl	1afe0 <memset>
	if (use_name) {
    e8dc:	f1b8 0f00 	cmp.w	r8, #0
    e8e0:	d00e      	beq.n	e900 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    e8e2:	bbb4      	cbnz	r4, e952 <le_adv_update.constprop.0+0x9a>
    e8e4:	2d00      	cmp	r5, #0
    e8e6:	d13f      	bne.n	e968 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    e8e8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; e99c <le_adv_update.constprop.0+0xe4>
    e8ec:	4658      	mov	r0, fp
    e8ee:	f00c fb0e 	bl	1af0e <strlen>
    e8f2:	2309      	movs	r3, #9
    e8f4:	f88d 0001 	strb.w	r0, [sp, #1]
    e8f8:	f88d 3000 	strb.w	r3, [sp]
    e8fc:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    e900:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    e904:	f1b8 0f00 	cmp.w	r8, #0
    e908:	d030      	beq.n	e96c <le_adv_update.constprop.0+0xb4>
    e90a:	f1ba 0f00 	cmp.w	sl, #0
    e90e:	d12d      	bne.n	e96c <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    e910:	2301      	movs	r3, #1
			d_len = 2;
    e912:	2202      	movs	r2, #2
			d[1].data = &data;
    e914:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    e918:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    e91a:	f242 0008 	movw	r0, #8200	; 0x2008
    e91e:	a902      	add	r1, sp, #8
    e920:	f7ff ff62 	bl	e7e8 <hci_set_ad>
		if (err) {
    e924:	4604      	mov	r4, r0
    e926:	b938      	cbnz	r0, e938 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    e928:	f1ba 0f00 	cmp.w	sl, #0
    e92c:	d120      	bne.n	e970 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e92e:	2104      	movs	r1, #4
    e930:	f106 0010 	add.w	r0, r6, #16
    e934:	f00c fc1c 	bl	1b170 <atomic_or>
}
    e938:	4620      	mov	r0, r4
    e93a:	b007      	add	sp, #28
    e93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    e940:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    e944:	3a08      	subs	r2, #8
    e946:	2a01      	cmp	r2, #1
    e948:	d925      	bls.n	e996 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    e94a:	3301      	adds	r3, #1
    e94c:	429f      	cmp	r7, r3
    e94e:	d1f7      	bne.n	e940 <le_adv_update.constprop.0+0x88>
    e950:	e7c8      	b.n	e8e4 <le_adv_update.constprop.0+0x2c>
    e952:	2300      	movs	r3, #0
    e954:	e7fa      	b.n	e94c <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    e956:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    e95a:	3a08      	subs	r2, #8
    e95c:	2a01      	cmp	r2, #1
    e95e:	d91a      	bls.n	e996 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    e960:	3301      	adds	r3, #1
    e962:	4599      	cmp	r9, r3
    e964:	d1f7      	bne.n	e956 <le_adv_update.constprop.0+0x9e>
    e966:	e7bf      	b.n	e8e8 <le_adv_update.constprop.0+0x30>
    e968:	2300      	movs	r3, #0
    e96a:	e7fa      	b.n	e962 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    e96c:	2201      	movs	r2, #1
    e96e:	e7d4      	b.n	e91a <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    e970:	2201      	movs	r2, #1
		d[0].len = sd_len;
    e972:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    e976:	f1b8 0f00 	cmp.w	r8, #0
    e97a:	d003      	beq.n	e984 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    e97c:	9205      	str	r2, [sp, #20]
			d_len = 2;
    e97e:	2202      	movs	r2, #2
			d[1].data = &data;
    e980:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    e984:	f242 0009 	movw	r0, #8201	; 0x2009
    e988:	a902      	add	r1, sp, #8
    e98a:	f7ff ff2d 	bl	e7e8 <hci_set_ad>
		if (err) {
    e98e:	2800      	cmp	r0, #0
    e990:	d0cd      	beq.n	e92e <le_adv_update.constprop.0+0x76>
    e992:	4604      	mov	r4, r0
    e994:	e7d0      	b.n	e938 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    e996:	f06f 0415 	mvn.w	r4, #21
    e99a:	e7cd      	b.n	e938 <le_adv_update.constprop.0+0x80>
    e99c:	0001eb4b 	.word	0x0001eb4b

0000e9a0 <set_le_adv_enable_legacy>:
{
    e9a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e9a2:	4606      	mov	r6, r0
    e9a4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    e9a6:	f242 000a 	movw	r0, #8202	; 0x200a
    e9aa:	2101      	movs	r1, #1
    e9ac:	f7ff fd68 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    e9b0:	4604      	mov	r4, r0
    e9b2:	b1e8      	cbz	r0, e9f0 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    e9b4:	3008      	adds	r0, #8
	if (enable) {
    e9b6:	b1cd      	cbz	r5, e9ec <set_le_adv_enable_legacy+0x4c>
    e9b8:	2101      	movs	r1, #1
    e9ba:	f00d fdf4 	bl	1c5a6 <net_buf_simple_add_u8>
    e9be:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    e9c0:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    e9c2:	3610      	adds	r6, #16
    e9c4:	9302      	str	r3, [sp, #8]
	state->target = target;
    e9c6:	9601      	str	r6, [sp, #4]
	state->val = val;
    e9c8:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    e9cc:	f005 feb2 	bl	14734 <net_buf_id>
    e9d0:	220c      	movs	r2, #12
    e9d2:	4b09      	ldr	r3, [pc, #36]	; (e9f8 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    e9d4:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    e9d6:	fb02 3300 	mla	r3, r2, r0, r3
    e9da:	aa01      	add	r2, sp, #4
    e9dc:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    e9de:	f242 000a 	movw	r0, #8202	; 0x200a
    e9e2:	2200      	movs	r2, #0
    e9e4:	f7ff fd96 	bl	e514 <bt_hci_cmd_send_sync>
}
    e9e8:	b004      	add	sp, #16
    e9ea:	bd70      	pop	{r4, r5, r6, pc}
    e9ec:	4629      	mov	r1, r5
    e9ee:	e7e4      	b.n	e9ba <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    e9f0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e9f4:	e7f8      	b.n	e9e8 <set_le_adv_enable_legacy+0x48>
    e9f6:	bf00      	nop
    e9f8:	2000a970 	.word	0x2000a970

0000e9fc <start_le_scan_legacy>:
{
    e9fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e9fe:	460e      	mov	r6, r1
    ea00:	4605      	mov	r5, r0
    ea02:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    ea04:	2100      	movs	r1, #0
    ea06:	2207      	movs	r2, #7
    ea08:	4668      	mov	r0, sp
    ea0a:	f00c fae9 	bl	1afe0 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    ea0e:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    ea12:	4e26      	ldr	r6, [pc, #152]	; (eaac <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    ea14:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    ea16:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    ea18:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    ea1c:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    ea20:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    ea24:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    ea28:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ea2c:	f00c fb9a 	bl	1b164 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    ea30:	0641      	lsls	r1, r0, #25
    ea32:	d413      	bmi.n	ea5c <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    ea34:	f00c fbdb 	bl	1b1ee <le_set_private_addr.constprop.0>
			if (err) {
    ea38:	4604      	mov	r4, r0
    ea3a:	b160      	cbz	r0, ea56 <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    ea3c:	2d01      	cmp	r5, #1
    ea3e:	d02e      	beq.n	ea9e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    ea40:	f106 0028 	add.w	r0, r6, #40	; 0x28
    ea44:	f00c fb8e 	bl	1b164 <atomic_get>
    ea48:	0642      	lsls	r2, r0, #25
    ea4a:	d528      	bpl.n	ea9e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
					BT_WARN("Ignoring failure to set "
    ea4c:	4622      	mov	r2, r4
    ea4e:	2157      	movs	r1, #87	; 0x57
    ea50:	4817      	ldr	r0, [pc, #92]	; (eab0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    ea52:	f00b f85a 	bl	19b0a <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    ea56:	2301      	movs	r3, #1
    ea58:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    ea5c:	2107      	movs	r1, #7
    ea5e:	f242 000b 	movw	r0, #8203	; 0x200b
    ea62:	f7ff fd0d 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    ea66:	4604      	mov	r4, r0
    ea68:	b1e0      	cbz	r0, eaa4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ea6a:	2207      	movs	r2, #7
    ea6c:	4669      	mov	r1, sp
    ea6e:	3008      	adds	r0, #8
    ea70:	f00d fd8d 	bl	1c58e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    ea74:	4621      	mov	r1, r4
    ea76:	2200      	movs	r2, #0
    ea78:	f242 000b 	movw	r0, #8203	; 0x200b
    ea7c:	f7ff fd4a 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    ea80:	4604      	mov	r4, r0
    ea82:	b960      	cbnz	r0, ea9e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
	return set_le_scan_enable_legacy(enable);
    ea84:	2001      	movs	r0, #1
    ea86:	f7ff fdf5 	bl	e674 <set_le_scan_enable_legacy>
	if (err) {
    ea8a:	4604      	mov	r4, r0
    ea8c:	b938      	cbnz	r0, ea9e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    ea8e:	1e6b      	subs	r3, r5, #1
    ea90:	425a      	negs	r2, r3
    ea92:	f04f 0107 	mov.w	r1, #7
    ea96:	4807      	ldr	r0, [pc, #28]	; (eab4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    ea98:	415a      	adcs	r2, r3
    ea9a:	f00c fb82 	bl	1b1a2 <atomic_set_bit_to>
}
    ea9e:	4620      	mov	r0, r4
    eaa0:	b002      	add	sp, #8
    eaa2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    eaa4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    eaa8:	e7f9      	b.n	ea9e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    eaaa:	bf00      	nop
    eaac:	20008000 	.word	0x20008000
    eab0:	0002019f 	.word	0x0002019f
    eab4:	20008094 	.word	0x20008094

0000eab8 <bt_le_scan_random_addr_check>:
{
    eab8:	b508      	push	{r3, lr}
    eaba:	4802      	ldr	r0, [pc, #8]	; (eac4 <bt_le_scan_random_addr_check+0xc>)
    eabc:	f00c fb52 	bl	1b164 <atomic_get>
}
    eac0:	2001      	movs	r0, #1
    eac2:	bd08      	pop	{r3, pc}
    eac4:	20008028 	.word	0x20008028

0000eac8 <bt_le_create_conn_legacy>:
{
    eac8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    eacc:	4f2b      	ldr	r7, [pc, #172]	; (eb7c <bt_le_create_conn_legacy+0xb4>)
{
    eace:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    ead0:	783b      	ldrb	r3, [r7, #0]
    ead2:	2b01      	cmp	r3, #1
    ead4:	d00b      	beq.n	eaee <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    ead6:	2119      	movs	r1, #25
    ead8:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    eadc:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    eae0:	f7ff fcce 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    eae4:	4606      	mov	r6, r0
    eae6:	b950      	cbnz	r0, eafe <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    eae8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    eaec:	e004      	b.n	eaf8 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    eaee:	1c78      	adds	r0, r7, #1
    eaf0:	f7ff fd92 	bl	e618 <set_random_address>
			if (err) {
    eaf4:	2800      	cmp	r0, #0
    eaf6:	d0ee      	beq.n	ead6 <bt_le_create_conn_legacy+0xe>
}
    eaf8:	b004      	add	sp, #16
    eafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    eafe:	2119      	movs	r1, #25
    eb00:	3008      	adds	r0, #8
    eb02:	f006 f8a5 	bl	14c50 <net_buf_simple_add>
    eb06:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    eb08:	2219      	movs	r2, #25
    eb0a:	2100      	movs	r1, #0
    eb0c:	f00c fa68 	bl	1afe0 <memset>
	cp->own_addr_type = own_addr_type;
    eb10:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    eb14:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    eb18:	f105 0188 	add.w	r1, r5, #136	; 0x88
    eb1c:	1d60      	adds	r0, r4, #5
    eb1e:	f00c fb24 	bl	1b16a <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    eb22:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    eb26:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    eb28:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    eb2a:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    eb2c:	89fb      	ldrh	r3, [r7, #14]
    eb2e:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    eb30:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    eb34:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    eb38:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    eb3c:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    eb40:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    eb44:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    eb48:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    eb4c:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    eb50:	4b0b      	ldr	r3, [pc, #44]	; (eb80 <bt_le_create_conn_legacy+0xb8>)
    eb52:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    eb54:	230b      	movs	r3, #11
    eb56:	9302      	str	r3, [sp, #8]
	state->val = val;
    eb58:	2301      	movs	r3, #1
    eb5a:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    eb5e:	f005 fde9 	bl	14734 <net_buf_id>
    eb62:	220c      	movs	r2, #12
    eb64:	4b07      	ldr	r3, [pc, #28]	; (eb84 <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    eb66:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    eb68:	fb02 3300 	mla	r3, r2, r0, r3
    eb6c:	aa01      	add	r2, sp, #4
    eb6e:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    eb70:	f242 000d 	movw	r0, #8205	; 0x200d
    eb74:	4642      	mov	r2, r8
    eb76:	f7ff fccd 	bl	e514 <bt_hci_cmd_send_sync>
    eb7a:	e7bd      	b.n	eaf8 <bt_le_create_conn_legacy+0x30>
    eb7c:	20008000 	.word	0x20008000
    eb80:	20008094 	.word	0x20008094
    eb84:	2000a970 	.word	0x2000a970

0000eb88 <bt_le_create_conn_cancel>:
{
    eb88:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    eb8a:	2100      	movs	r1, #0
{
    eb8c:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    eb8e:	f242 000e 	movw	r0, #8206	; 0x200e
    eb92:	f7ff fc75 	bl	e480 <bt_hci_cmd_create>
	state->target = target;
    eb96:	4b0c      	ldr	r3, [pc, #48]	; (ebc8 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    eb98:	2500      	movs	r5, #0
	state->target = target;
    eb9a:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    eb9c:	230b      	movs	r3, #11
    eb9e:	4604      	mov	r4, r0
    eba0:	9302      	str	r3, [sp, #8]
	state->val = val;
    eba2:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    eba6:	f005 fdc5 	bl	14734 <net_buf_id>
    ebaa:	220c      	movs	r2, #12
    ebac:	4b07      	ldr	r3, [pc, #28]	; (ebcc <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    ebae:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    ebb0:	fb02 3300 	mla	r3, r2, r0, r3
    ebb4:	aa01      	add	r2, sp, #4
    ebb6:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    ebb8:	f242 000e 	movw	r0, #8206	; 0x200e
    ebbc:	462a      	mov	r2, r5
    ebbe:	f7ff fca9 	bl	e514 <bt_hci_cmd_send_sync>
}
    ebc2:	b005      	add	sp, #20
    ebc4:	bd30      	pop	{r4, r5, pc}
    ebc6:	bf00      	nop
    ebc8:	20008094 	.word	0x20008094
    ebcc:	2000a970 	.word	0x2000a970

0000ebd0 <bt_le_scan_update>:
{
    ebd0:	b570      	push	{r4, r5, r6, lr}
    ebd2:	4606      	mov	r6, r0
    ebd4:	481c      	ldr	r0, [pc, #112]	; (ec48 <bt_le_scan_update+0x78>)
    ebd6:	f00c fac5 	bl	1b164 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ebda:	0641      	lsls	r1, r0, #25
    ebdc:	f3c0 1380 	ubfx	r3, r0, #6, #1
    ebe0:	d501      	bpl.n	ebe6 <bt_le_scan_update+0x16>
			return 0;
    ebe2:	2000      	movs	r0, #0
    ebe4:	e02b      	b.n	ec3e <bt_le_scan_update+0x6e>
    ebe6:	4818      	ldr	r0, [pc, #96]	; (ec48 <bt_le_scan_update+0x78>)
    ebe8:	f00c fabc 	bl	1b164 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ebec:	0682      	lsls	r2, r0, #26
    ebee:	d421      	bmi.n	ec34 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ebf0:	2100      	movs	r1, #0
    ebf2:	2206      	movs	r2, #6
    ebf4:	4608      	mov	r0, r1
    ebf6:	f001 fff9 	bl	10bec <bt_conn_lookup_state_le>
		if (conn) {
    ebfa:	4604      	mov	r4, r0
    ebfc:	bb00      	cbnz	r0, ec40 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ebfe:	2202      	movs	r2, #2
    ec00:	4601      	mov	r1, r0
    ec02:	f001 fff3 	bl	10bec <bt_conn_lookup_state_le>
		if (conn) {
    ec06:	4605      	mov	r5, r0
    ec08:	2800      	cmp	r0, #0
    ec0a:	d0ea      	beq.n	ebe2 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ec0c:	f44f 7180 	mov.w	r1, #256	; 0x100
    ec10:	480d      	ldr	r0, [pc, #52]	; (ec48 <bt_le_scan_update+0x78>)
    ec12:	f00c faad 	bl	1b170 <atomic_or>
			bt_conn_unref(conn);
    ec16:	4628      	mov	r0, r5
    ec18:	f001 fe86 	bl	10928 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    ec1c:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    ec1e:	4620      	mov	r0, r4
}
    ec20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    ec24:	bf15      	itete	ne
    ec26:	2230      	movne	r2, #48	; 0x30
    ec28:	2212      	moveq	r2, #18
    ec2a:	2160      	movne	r1, #96	; 0x60
    ec2c:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    ec30:	f7ff bee4 	b.w	e9fc <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    ec34:	4618      	mov	r0, r3
    ec36:	f7ff fd1d 	bl	e674 <set_le_scan_enable_legacy>
		if (err) {
    ec3a:	2800      	cmp	r0, #0
    ec3c:	d0d8      	beq.n	ebf0 <bt_le_scan_update+0x20>
}
    ec3e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    ec40:	f001 fe72 	bl	10928 <bt_conn_unref>
    ec44:	e7cd      	b.n	ebe2 <bt_le_scan_update+0x12>
    ec46:	bf00      	nop
    ec48:	20008094 	.word	0x20008094

0000ec4c <hci_disconn_complete>:
{
    ec4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    ec4e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    ec50:	7835      	ldrb	r5, [r6, #0]
    ec52:	bb45      	cbnz	r5, eca6 <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ec54:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    ec58:	4638      	mov	r0, r7
    ec5a:	f001 fe89 	bl	10970 <bt_conn_lookup_handle>
	if (!conn) {
    ec5e:	4604      	mov	r4, r0
    ec60:	b930      	cbnz	r0, ec70 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    ec62:	463a      	mov	r2, r7
}
    ec64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    ec68:	2145      	movs	r1, #69	; 0x45
    ec6a:	480f      	ldr	r0, [pc, #60]	; (eca8 <hci_disconn_complete+0x5c>)
    ec6c:	f00a bf4d 	b.w	19b0a <printk>
	conn->err = evt->reason;
    ec70:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ec72:	4629      	mov	r1, r5
	conn->err = evt->reason;
    ec74:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ec76:	f001 fe83 	bl	10980 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    ec7a:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    ec7c:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    ec7e:	2b01      	cmp	r3, #1
    ec80:	d004      	beq.n	ec8c <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    ec82:	4620      	mov	r0, r4
}
    ec84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    ec88:	f001 be4e 	b.w	10928 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ec8c:	1d20      	adds	r0, r4, #4
    ec8e:	f00c fa69 	bl	1b164 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    ec92:	07c3      	lsls	r3, r0, #31
    ec94:	d5f5      	bpl.n	ec82 <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ec96:	4620      	mov	r0, r4
    ec98:	2102      	movs	r1, #2
    ec9a:	f001 fe71 	bl	10980 <bt_conn_set_state>
		bt_le_scan_update(false);
    ec9e:	4628      	mov	r0, r5
    eca0:	f7ff ff96 	bl	ebd0 <bt_le_scan_update>
    eca4:	e7ed      	b.n	ec82 <hci_disconn_complete+0x36>
}
    eca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eca8:	0001ff26 	.word	0x0001ff26

0000ecac <le_adv_report>:
{
    ecac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    ecb0:	f100 0708 	add.w	r7, r0, #8
    ecb4:	b08d      	sub	sp, #52	; 0x34
    ecb6:	4604      	mov	r4, r0
    ecb8:	4638      	mov	r0, r7
    ecba:	f00d fc4c 	bl	1c556 <net_buf_simple_pull_u8>
    ecbe:	f8df 81c8 	ldr.w	r8, [pc, #456]	; ee88 <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    ecc2:	f8df a1c8 	ldr.w	sl, [pc, #456]	; ee8c <le_adv_report+0x1e0>
    ecc6:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    ecc8:	9b01      	ldr	r3, [sp, #4]
    ecca:	b913      	cbnz	r3, ecd2 <le_adv_report+0x26>
}
    eccc:	b00d      	add	sp, #52	; 0x34
    ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    ecd2:	89a3      	ldrh	r3, [r4, #12]
    ecd4:	2b08      	cmp	r3, #8
    ecd6:	d806      	bhi.n	ece6 <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    ecd8:	2145      	movs	r1, #69	; 0x45
    ecda:	486d      	ldr	r0, [pc, #436]	; (ee90 <le_adv_report+0x1e4>)
}
    ecdc:	b00d      	add	sp, #52	; 0x34
    ecde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    ece2:	f00a bf12 	b.w	19b0a <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    ece6:	2109      	movs	r1, #9
    ece8:	4638      	mov	r0, r7
    ecea:	f005 ff93 	bl	14c14 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    ecee:	237f      	movs	r3, #127	; 0x7f
    ecf0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    ecf4:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    ecf6:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    ecf8:	9300      	str	r3, [sp, #0]
    ecfa:	18c3      	adds	r3, r0, r3
    ecfc:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    ecfe:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    ed02:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    ed06:	23ff      	movs	r3, #255	; 0xff
    ed08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    ed0c:	2300      	movs	r3, #0
    ed0e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    ed12:	7802      	ldrb	r2, [r0, #0]
    ed14:	4606      	mov	r6, r0
    ed16:	2a04      	cmp	r2, #4
    ed18:	bf98      	it	ls
    ed1a:	4b5e      	ldrls	r3, [pc, #376]	; (ee94 <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    ed1c:	f100 0901 	add.w	r9, r0, #1
    ed20:	bf98      	it	ls
    ed22:	5c9b      	ldrbls	r3, [r3, r2]
    ed24:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    ed26:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    ed2a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    ed2e:	f00c fa19 	bl	1b164 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    ed32:	0645      	lsls	r5, r0, #25
    ed34:	d50d      	bpl.n	ed52 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    ed36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ed3a:	0758      	lsls	r0, r3, #29
    ed3c:	d509      	bpl.n	ed52 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    ed3e:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    ed40:	4638      	mov	r0, r7
    ed42:	3101      	adds	r1, #1
    ed44:	f005 ff4a 	bl	14bdc <net_buf_simple_pull>
    ed48:	9b01      	ldr	r3, [sp, #4]
    ed4a:	1e58      	subs	r0, r3, #1
    ed4c:	b2c3      	uxtb	r3, r0
    ed4e:	9301      	str	r3, [sp, #4]
    ed50:	e7ba      	b.n	ecc8 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    ed52:	7873      	ldrb	r3, [r6, #1]
    ed54:	1e9a      	subs	r2, r3, #2
    ed56:	2a01      	cmp	r2, #1
    ed58:	d84c      	bhi.n	edf4 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    ed5a:	4649      	mov	r1, r9
    ed5c:	a804      	add	r0, sp, #16
    ed5e:	f00c fa04 	bl	1b16a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ed62:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ed66:	3b02      	subs	r3, #2
    ed68:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    ed6c:	ab04      	add	r3, sp, #16
    ed6e:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    ed70:	f8da 3000 	ldr.w	r3, [sl]
    ed74:	b1a3      	cbz	r3, eda0 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    ed76:	4638      	mov	r0, r7
    ed78:	f00d fbfd 	bl	1c576 <net_buf_simple_headroom>
    ed7c:	4683      	mov	fp, r0
		buf->len = len;
    ed7e:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    ed80:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    ed82:	a804      	add	r0, sp, #16
		buf->len = len;
    ed84:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    ed86:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    ed8a:	463b      	mov	r3, r7
    ed8c:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    ed90:	f8da c000 	ldr.w	ip, [sl]
    ed94:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    ed96:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ed98:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    ed9a:	fa10 f08b 	uxtah	r0, r0, fp
    ed9e:	60a0      	str	r0, [r4, #8]
	return list->head;
    eda0:	4b3d      	ldr	r3, [pc, #244]	; (ee98 <le_adv_report+0x1ec>)
    eda2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    eda4:	2b00      	cmp	r3, #0
    eda6:	d032      	beq.n	ee0e <le_adv_report+0x162>
    eda8:	f1b3 0208 	subs.w	r2, r3, #8
    edac:	d02f      	beq.n	ee0e <le_adv_report+0x162>
	return node->next;
    edae:	681d      	ldr	r5, [r3, #0]
    edb0:	b105      	cbz	r5, edb4 <le_adv_report+0x108>
    edb2:	3d08      	subs	r5, #8
		if (listener->recv) {
    edb4:	6813      	ldr	r3, [r2, #0]
    edb6:	9203      	str	r2, [sp, #12]
    edb8:	b193      	cbz	r3, ede0 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    edba:	4638      	mov	r0, r7
    edbc:	f00d fbdb 	bl	1c576 <net_buf_simple_headroom>
    edc0:	4683      	mov	fp, r0
	state->len = buf->len;
    edc2:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    edc4:	9a03      	ldr	r2, [sp, #12]
    edc6:	9302      	str	r3, [sp, #8]
			buf->len = len;
    edc8:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    edca:	a808      	add	r0, sp, #32
			buf->len = len;
    edcc:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    edce:	4639      	mov	r1, r7
    edd0:	6812      	ldr	r2, [r2, #0]
    edd2:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    edd4:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    edd6:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    edd8:	fa10 f08b 	uxtah	r0, r0, fp
    eddc:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    edde:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ede0:	b1ad      	cbz	r5, ee0e <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ede2:	f115 0308 	adds.w	r3, r5, #8
    ede6:	d002      	beq.n	edee <le_adv_report+0x142>
	return node->next;
    ede8:	68ab      	ldr	r3, [r5, #8]
    edea:	b103      	cbz	r3, edee <le_adv_report+0x142>
    edec:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    edee:	462a      	mov	r2, r5
    edf0:	461d      	mov	r5, r3
    edf2:	e7df      	b.n	edb4 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    edf4:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    edf6:	bf0a      	itet	eq
    edf8:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    edfa:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    edfc:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    edfe:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ee00:	bf04      	itt	eq
    ee02:	9306      	streq	r3, [sp, #24]
    ee04:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    ee08:	f00c f9af 	bl	1b16a <bt_addr_le_copy>
    ee0c:	e7ae      	b.n	ed6c <le_adv_report+0xc0>
    ee0e:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    ee10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ee14:	f00c f9a6 	bl	1b164 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ee18:	0641      	lsls	r1, r0, #25
    ee1a:	f3c0 1580 	ubfx	r5, r0, #6, #1
    ee1e:	d48e      	bmi.n	ed3e <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    ee20:	07da      	lsls	r2, r3, #31
    ee22:	d58c      	bpl.n	ed3e <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    ee24:	2202      	movs	r2, #2
    ee26:	4628      	mov	r0, r5
    ee28:	a904      	add	r1, sp, #16
    ee2a:	f001 fedf 	bl	10bec <bt_conn_lookup_state_le>
	if (!conn) {
    ee2e:	4683      	mov	fp, r0
    ee30:	2800      	cmp	r0, #0
    ee32:	d084      	beq.n	ed3e <le_adv_report+0x92>
    ee34:	4640      	mov	r0, r8
    ee36:	f00c f995 	bl	1b164 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ee3a:	0683      	lsls	r3, r0, #26
    ee3c:	d410      	bmi.n	ee60 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    ee3e:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    ee42:	4649      	mov	r1, r9
    ee44:	f00c f991 	bl	1b16a <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    ee48:	4658      	mov	r0, fp
    ee4a:	f7ff fe3d 	bl	eac8 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    ee4e:	b960      	cbnz	r0, ee6a <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    ee50:	4658      	mov	r0, fp
    ee52:	2106      	movs	r1, #6
    ee54:	f001 fd94 	bl	10980 <bt_conn_set_state>
	bt_conn_unref(conn);
    ee58:	4658      	mov	r0, fp
    ee5a:	f001 fd65 	bl	10928 <bt_conn_unref>
	return;
    ee5e:	e76e      	b.n	ed3e <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    ee60:	4628      	mov	r0, r5
    ee62:	f7ff fc07 	bl	e674 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ee66:	2800      	cmp	r0, #0
    ee68:	d0e9      	beq.n	ee3e <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    ee6a:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ee6c:	2100      	movs	r1, #0
    ee6e:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    ee70:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ee74:	f001 fd84 	bl	10980 <bt_conn_set_state>
	bt_conn_unref(conn);
    ee78:	4658      	mov	r0, fp
    ee7a:	f001 fd55 	bl	10928 <bt_conn_unref>
	bt_le_scan_update(false);
    ee7e:	2000      	movs	r0, #0
    ee80:	f7ff fea6 	bl	ebd0 <bt_le_scan_update>
    ee84:	e75b      	b.n	ed3e <le_adv_report+0x92>
    ee86:	bf00      	nop
    ee88:	20008094 	.word	0x20008094
    ee8c:	2000a994 	.word	0x2000a994
    ee90:	000201da 	.word	0x000201da
    ee94:	0002065e 	.word	0x0002065e
    ee98:	2000a98c 	.word	0x2000a98c

0000ee9c <bt_data_parse>:
{
    ee9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee9e:	4604      	mov	r4, r0
    eea0:	460e      	mov	r6, r1
    eea2:	4617      	mov	r7, r2
	while (ad->len > 1) {
    eea4:	88a3      	ldrh	r3, [r4, #4]
    eea6:	2b01      	cmp	r3, #1
    eea8:	d801      	bhi.n	eeae <bt_data_parse+0x12>
}
    eeaa:	b003      	add	sp, #12
    eeac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    eeae:	4620      	mov	r0, r4
    eeb0:	f00d fb51 	bl	1c556 <net_buf_simple_pull_u8>
		if (len == 0U) {
    eeb4:	4605      	mov	r5, r0
    eeb6:	2800      	cmp	r0, #0
    eeb8:	d0f7      	beq.n	eeaa <bt_data_parse+0xe>
		if (len > ad->len) {
    eeba:	88a2      	ldrh	r2, [r4, #4]
    eebc:	b283      	uxth	r3, r0
    eebe:	429a      	cmp	r2, r3
    eec0:	d206      	bcs.n	eed0 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    eec2:	2157      	movs	r1, #87	; 0x57
    eec4:	480c      	ldr	r0, [pc, #48]	; (eef8 <bt_data_parse+0x5c>)
}
    eec6:	b003      	add	sp, #12
    eec8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    eecc:	f00a be1d 	b.w	19b0a <printk>
		data.type = net_buf_simple_pull_u8(ad);
    eed0:	4620      	mov	r0, r4
    eed2:	f00d fb40 	bl	1c556 <net_buf_simple_pull_u8>
		data.data = ad->data;
    eed6:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    eed8:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    eedc:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    eede:	4639      	mov	r1, r7
    eee0:	4668      	mov	r0, sp
		data.data_len = len - 1;
    eee2:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    eee6:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    eee8:	47b0      	blx	r6
    eeea:	2800      	cmp	r0, #0
    eeec:	d0dd      	beq.n	eeaa <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    eeee:	4629      	mov	r1, r5
    eef0:	4620      	mov	r0, r4
    eef2:	f005 fe73 	bl	14bdc <net_buf_simple_pull>
    eef6:	e7d5      	b.n	eea4 <bt_data_parse+0x8>
    eef8:	000201f8 	.word	0x000201f8

0000eefc <bt_send>:
	return bt_dev.drv->send(buf);
    eefc:	4b02      	ldr	r3, [pc, #8]	; (ef08 <bt_send+0xc>)
    eefe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    ef02:	691b      	ldr	r3, [r3, #16]
    ef04:	4718      	bx	r3
    ef06:	bf00      	nop
    ef08:	20008000 	.word	0x20008000

0000ef0c <bt_hci_cmd_send>:
{
    ef0c:	b538      	push	{r3, r4, r5, lr}
    ef0e:	4605      	mov	r5, r0
	if (!buf) {
    ef10:	460c      	mov	r4, r1
    ef12:	b919      	cbnz	r1, ef1c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    ef14:	f7ff fab4 	bl	e480 <bt_hci_cmd_create>
		if (!buf) {
    ef18:	4604      	mov	r4, r0
    ef1a:	b1c0      	cbz	r0, ef4e <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    ef1c:	f640 4335 	movw	r3, #3125	; 0xc35
    ef20:	429d      	cmp	r5, r3
    ef22:	d10e      	bne.n	ef42 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    ef24:	4620      	mov	r0, r4
    ef26:	f7ff ffe9 	bl	eefc <bt_send>
		if (err) {
    ef2a:	4605      	mov	r5, r0
    ef2c:	b138      	cbz	r0, ef3e <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    ef2e:	4602      	mov	r2, r0
    ef30:	2145      	movs	r1, #69	; 0x45
    ef32:	4808      	ldr	r0, [pc, #32]	; (ef54 <bt_hci_cmd_send+0x48>)
    ef34:	f00a fde9 	bl	19b0a <printk>
			net_buf_unref(buf);
    ef38:	4620      	mov	r0, r4
    ef3a:	f005 fd73 	bl	14a24 <net_buf_unref>
}
    ef3e:	4628      	mov	r0, r5
    ef40:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    ef42:	4621      	mov	r1, r4
    ef44:	4804      	ldr	r0, [pc, #16]	; (ef58 <bt_hci_cmd_send+0x4c>)
    ef46:	f005 fd3f 	bl	149c8 <net_buf_put>
	return 0;
    ef4a:	2500      	movs	r5, #0
    ef4c:	e7f7      	b.n	ef3e <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    ef4e:	f06f 0536 	mvn.w	r5, #54	; 0x36
    ef52:	e7f4      	b.n	ef3e <bt_hci_cmd_send+0x32>
    ef54:	0002020c 	.word	0x0002020c
    ef58:	20008118 	.word	0x20008118

0000ef5c <bt_hci_host_num_completed_packets>:
{
    ef5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef5e:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    ef60:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ef62:	7980      	ldrb	r0, [r0, #6]
    ef64:	f005 fbde 	bl	14724 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    ef68:	4621      	mov	r1, r4
    ef6a:	f00e f956 	bl	1d21a <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    ef6e:	4b24      	ldr	r3, [pc, #144]	; (f000 <bt_hci_host_num_completed_packets+0xa4>)
    ef70:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    ef74:	069b      	lsls	r3, r3, #26
    ef76:	d541      	bpl.n	effc <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    ef78:	7d60      	ldrb	r0, [r4, #21]
    ef7a:	f002 f94d 	bl	11218 <bt_conn_lookup_index>
	if (!conn) {
    ef7e:	4605      	mov	r5, r0
    ef80:	b930      	cbnz	r0, ef90 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    ef82:	7d62      	ldrb	r2, [r4, #21]
    ef84:	2157      	movs	r1, #87	; 0x57
}
    ef86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    ef8a:	481e      	ldr	r0, [pc, #120]	; (f004 <bt_hci_host_num_completed_packets+0xa8>)
    ef8c:	f00a bdbd 	b.w	19b0a <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    ef90:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    ef92:	2b01      	cmp	r3, #1
    ef94:	d002      	beq.n	ef9c <bt_hci_host_num_completed_packets+0x40>
    ef96:	3b07      	subs	r3, #7
    ef98:	2b01      	cmp	r3, #1
    ef9a:	d80f      	bhi.n	efbc <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    ef9c:	4628      	mov	r0, r5
    ef9e:	f001 fcc3 	bl	10928 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    efa2:	2105      	movs	r1, #5
    efa4:	f640 4035 	movw	r0, #3125	; 0xc35
    efa8:	f7ff fa6a 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    efac:	4604      	mov	r4, r0
    efae:	b970      	cbnz	r0, efce <bt_hci_host_num_completed_packets+0x72>
}
    efb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    efb4:	2145      	movs	r1, #69	; 0x45
    efb6:	4814      	ldr	r0, [pc, #80]	; (f008 <bt_hci_host_num_completed_packets+0xac>)
    efb8:	f00a bda7 	b.w	19b0a <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    efbc:	4813      	ldr	r0, [pc, #76]	; (f00c <bt_hci_host_num_completed_packets+0xb0>)
    efbe:	2157      	movs	r1, #87	; 0x57
    efc0:	f00a fda3 	bl	19b0a <printk>
		bt_conn_unref(conn);
    efc4:	4628      	mov	r0, r5
}
    efc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    efca:	f001 bcad 	b.w	10928 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    efce:	f100 0708 	add.w	r7, r0, #8
    efd2:	2101      	movs	r1, #1
    efd4:	4638      	mov	r0, r7
    efd6:	f005 fe3b 	bl	14c50 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    efda:	2501      	movs	r5, #1
    efdc:	2104      	movs	r1, #4
    efde:	7005      	strb	r5, [r0, #0]
    efe0:	4638      	mov	r0, r7
    efe2:	f005 fe35 	bl	14c50 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    efe6:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    efe8:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    efea:	7085      	strb	r5, [r0, #2]
    efec:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    efee:	4621      	mov	r1, r4
}
    eff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    eff4:	f640 4035 	movw	r0, #3125	; 0xc35
    eff8:	f7ff bf88 	b.w	ef0c <bt_hci_cmd_send>
}
    effc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    effe:	bf00      	nop
    f000:	20008000 	.word	0x20008000
    f004:	00020233 	.word	0x00020233
    f008:	00020292 	.word	0x00020292
    f00c:	00020261 	.word	0x00020261

0000f010 <conn_auto_initiate>:
{
    f010:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    f012:	7a83      	ldrb	r3, [r0, #10]
{
    f014:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    f016:	2b07      	cmp	r3, #7
    f018:	d15d      	bne.n	f0d6 <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    f01a:	1d06      	adds	r6, r0, #4
    f01c:	4630      	mov	r0, r6
    f01e:	f00c f8a1 	bl	1b164 <atomic_get>
    f022:	0483      	lsls	r3, r0, #18
    f024:	d41b      	bmi.n	f05e <conn_auto_initiate+0x4e>
    f026:	78e3      	ldrb	r3, [r4, #3]
    f028:	b123      	cbz	r3, f034 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    f02a:	4b2c      	ldr	r3, [pc, #176]	; (f0dc <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    f02c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f030:	071d      	lsls	r5, r3, #28
    f032:	d514      	bpl.n	f05e <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    f034:	2102      	movs	r1, #2
    f036:	f242 0016 	movw	r0, #8214	; 0x2016
    f03a:	f7ff fa21 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    f03e:	4605      	mov	r5, r0
    f040:	b168      	cbz	r0, f05e <conn_auto_initiate+0x4e>
    f042:	2102      	movs	r1, #2
    f044:	3008      	adds	r0, #8
    f046:	f005 fe03 	bl	14c50 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    f04a:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f04c:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    f04e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f050:	f242 0016 	movw	r0, #8214	; 0x2016
}
    f054:	b004      	add	sp, #16
    f056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f05a:	f7ff bf57 	b.w	ef0c <bt_hci_cmd_send>
    f05e:	4630      	mov	r0, r6
    f060:	f00c f880 	bl	1b164 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    f064:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    f068:	4d1c      	ldr	r5, [pc, #112]	; (f0dc <conn_auto_initiate+0xcc>)
    f06a:	f3c0 3100 	ubfx	r1, r0, #12, #1
    f06e:	d116      	bne.n	f09e <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    f070:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    f074:	07d8      	lsls	r0, r3, #31
    f076:	d512      	bpl.n	f09e <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    f078:	2302      	movs	r3, #2
    f07a:	4620      	mov	r0, r4
    f07c:	461a      	mov	r2, r3
    f07e:	9100      	str	r1, [sp, #0]
    f080:	f00c f924 	bl	1b2cc <bt_le_set_phy>
		if (!err) {
    f084:	4602      	mov	r2, r0
    f086:	b930      	cbnz	r0, f096 <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f088:	2180      	movs	r1, #128	; 0x80
    f08a:	4630      	mov	r0, r6
}
    f08c:	b004      	add	sp, #16
    f08e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f092:	f00c b86d 	b.w	1b170 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    f096:	2145      	movs	r1, #69	; 0x45
    f098:	4811      	ldr	r0, [pc, #68]	; (f0e0 <conn_auto_initiate+0xd0>)
    f09a:	f00a fd36 	bl	19b0a <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    f09e:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    f0a2:	069a      	lsls	r2, r3, #26
    f0a4:	d517      	bpl.n	f0d6 <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    f0a6:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f0aa:	689b      	ldr	r3, [r3, #8]
    f0ac:	079b      	lsls	r3, r3, #30
    f0ae:	d512      	bpl.n	f0d6 <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f0b0:	f10d 010e 	add.w	r1, sp, #14
    f0b4:	a803      	add	r0, sp, #12
    f0b6:	f7ff fa8f 	bl	e5d8 <hci_le_read_max_data_len>
			if (!err) {
    f0ba:	b960      	cbnz	r0, f0d6 <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    f0bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    f0c0:	4620      	mov	r0, r4
    f0c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f0c6:	f00c f8e4 	bl	1b292 <bt_le_set_data_len>
				if (err) {
    f0ca:	4602      	mov	r2, r0
    f0cc:	b118      	cbz	r0, f0d6 <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    f0ce:	2145      	movs	r1, #69	; 0x45
    f0d0:	4804      	ldr	r0, [pc, #16]	; (f0e4 <conn_auto_initiate+0xd4>)
    f0d2:	f00a fd1a 	bl	19b0a <printk>
}
    f0d6:	b004      	add	sp, #16
    f0d8:	bd70      	pop	{r4, r5, r6, pc}
    f0da:	bf00      	nop
    f0dc:	20008000 	.word	0x20008000
    f0e0:	000202ba 	.word	0x000202ba
    f0e4:	000202d9 	.word	0x000202d9

0000f0e8 <le_phy_update_complete>:
{
    f0e8:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f0ea:	6883      	ldr	r3, [r0, #8]
    f0ec:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    f0f0:	4628      	mov	r0, r5
    f0f2:	f001 fc3d 	bl	10970 <bt_conn_lookup_handle>
	if (!conn) {
    f0f6:	4604      	mov	r4, r0
    f0f8:	b930      	cbnz	r0, f108 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f0fa:	462a      	mov	r2, r5
}
    f0fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f100:	2145      	movs	r1, #69	; 0x45
    f102:	480c      	ldr	r0, [pc, #48]	; (f134 <le_phy_update_complete+0x4c>)
    f104:	f00a bd01 	b.w	19b0a <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    f108:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f10a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    f10e:	4628      	mov	r0, r5
    f110:	f00c f83c 	bl	1b18c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    f114:	0603      	lsls	r3, r0, #24
    f116:	d507      	bpl.n	f128 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    f11c:	4628      	mov	r0, r5
    f11e:	f00c f827 	bl	1b170 <atomic_or>
		conn_auto_initiate(conn);
    f122:	4620      	mov	r0, r4
    f124:	f7ff ff74 	bl	f010 <conn_auto_initiate>
	bt_conn_unref(conn);
    f128:	4620      	mov	r0, r4
}
    f12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    f12e:	f001 bbfb 	b.w	10928 <bt_conn_unref>
    f132:	bf00      	nop
    f134:	0001fefd 	.word	0x0001fefd

0000f138 <le_remote_feat_complete>:
{
    f138:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    f13a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f13c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    f140:	4630      	mov	r0, r6
    f142:	f001 fc15 	bl	10970 <bt_conn_lookup_handle>
	if (!conn) {
    f146:	4604      	mov	r4, r0
    f148:	b930      	cbnz	r0, f158 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f14a:	4632      	mov	r2, r6
}
    f14c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f150:	2145      	movs	r1, #69	; 0x45
    f152:	480b      	ldr	r0, [pc, #44]	; (f180 <le_remote_feat_complete+0x48>)
    f154:	f00a bcd9 	b.w	19b0a <printk>
	if (!evt->status) {
    f158:	782b      	ldrb	r3, [r5, #0]
    f15a:	b923      	cbnz	r3, f166 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    f15c:	2208      	movs	r2, #8
    f15e:	1ce9      	adds	r1, r5, #3
    f160:	30ac      	adds	r0, #172	; 0xac
    f162:	f00b ff12 	bl	1af8a <memcpy>
    f166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    f16a:	1d20      	adds	r0, r4, #4
    f16c:	f00c f800 	bl	1b170 <atomic_or>
	conn_auto_initiate(conn);
    f170:	4620      	mov	r0, r4
    f172:	f7ff ff4d 	bl	f010 <conn_auto_initiate>
	bt_conn_unref(conn);
    f176:	4620      	mov	r0, r4
}
    f178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f17c:	f001 bbd4 	b.w	10928 <bt_conn_unref>
    f180:	0001fefd 	.word	0x0001fefd

0000f184 <le_conn_param_neg_reply>:
{
    f184:	b570      	push	{r4, r5, r6, lr}
    f186:	4606      	mov	r6, r0
    f188:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    f18a:	f242 0021 	movw	r0, #8225	; 0x2021
    f18e:	2103      	movs	r1, #3
    f190:	f7ff f976 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    f194:	4604      	mov	r4, r0
    f196:	b928      	cbnz	r0, f1a4 <le_conn_param_neg_reply+0x20>
}
    f198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    f19c:	2145      	movs	r1, #69	; 0x45
    f19e:	4808      	ldr	r0, [pc, #32]	; (f1c0 <le_conn_param_neg_reply+0x3c>)
    f1a0:	f00a bcb3 	b.w	19b0a <printk>
    f1a4:	2103      	movs	r1, #3
    f1a6:	3008      	adds	r0, #8
    f1a8:	f005 fd52 	bl	14c50 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    f1ac:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    f1ae:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    f1b0:	4621      	mov	r1, r4
}
    f1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    f1b6:	f242 0021 	movw	r0, #8225	; 0x2021
    f1ba:	f7ff bea7 	b.w	ef0c <bt_hci_cmd_send>
    f1be:	bf00      	nop
    f1c0:	000202fa 	.word	0x000202fa

0000f1c4 <le_conn_param_req>:
{
    f1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    f1c6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    f1c8:	78d9      	ldrb	r1, [r3, #3]
    f1ca:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    f1cc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    f1ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f1d2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    f1d6:	7959      	ldrb	r1, [r3, #5]
    f1d8:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    f1da:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    f1dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f1e0:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    f1e4:	799a      	ldrb	r2, [r3, #6]
    f1e6:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    f1e8:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    f1ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f1ee:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    f1f2:	7a1a      	ldrb	r2, [r3, #8]
    f1f4:	7a5b      	ldrb	r3, [r3, #9]
    f1f6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f1fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    f1fe:	f001 fbb7 	bl	10970 <bt_conn_lookup_handle>
	if (!conn) {
    f202:	4606      	mov	r6, r0
    f204:	b950      	cbnz	r0, f21c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f206:	2145      	movs	r1, #69	; 0x45
    f208:	481c      	ldr	r0, [pc, #112]	; (f27c <le_conn_param_req+0xb8>)
    f20a:	4622      	mov	r2, r4
    f20c:	f00a fc7d 	bl	19b0a <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    f210:	2102      	movs	r1, #2
    f212:	4620      	mov	r0, r4
    f214:	f7ff ffb6 	bl	f184 <le_conn_param_neg_reply>
}
    f218:	b003      	add	sp, #12
    f21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    f21c:	4669      	mov	r1, sp
    f21e:	f001 f9f5 	bl	1060c <le_param_req>
    f222:	b938      	cbnz	r0, f234 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    f224:	211e      	movs	r1, #30
    f226:	4620      	mov	r0, r4
    f228:	f7ff ffac 	bl	f184 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    f22c:	4630      	mov	r0, r6
    f22e:	f001 fb7b 	bl	10928 <bt_conn_unref>
    f232:	e7f1      	b.n	f218 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    f234:	210e      	movs	r1, #14
    f236:	f242 0020 	movw	r0, #8224	; 0x2020
    f23a:	f7ff f921 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    f23e:	4605      	mov	r5, r0
    f240:	2800      	cmp	r0, #0
    f242:	d0f3      	beq.n	f22c <le_conn_param_req+0x68>
    f244:	210e      	movs	r1, #14
    f246:	3008      	adds	r0, #8
    f248:	f005 fd02 	bl	14c50 <net_buf_simple_add>
    f24c:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    f24e:	220e      	movs	r2, #14
    f250:	2100      	movs	r1, #0
    f252:	f00b fec5 	bl	1afe0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    f256:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f25a:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    f25c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    f25e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    f262:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    f264:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    f266:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f26a:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    f26e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    f270:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f274:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f276:	f7ff fe49 	bl	ef0c <bt_hci_cmd_send>
    f27a:	e7d7      	b.n	f22c <le_conn_param_req+0x68>
    f27c:	0001fefd 	.word	0x0001fefd

0000f280 <hci_tx_thread>:
{
    f280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    f284:	f8df 8128 	ldr.w	r8, [pc, #296]	; f3b0 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    f288:	f8df 9128 	ldr.w	r9, [pc, #296]	; f3b4 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
    f28c:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    f290:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    f294:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    f296:	f36f 3310 	bfc	r3, #12, #5
    f29a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    f29e:	f001 fad7 	bl	10850 <bt_conn_prepare_events>
    f2a2:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    f2a4:	f04f 32ff 	mov.w	r2, #4294967295
    f2a8:	f04f 33ff 	mov.w	r3, #4294967295
    f2ac:	4631      	mov	r1, r6
    f2ae:	4840      	ldr	r0, [pc, #256]	; (f3b0 <hci_tx_thread+0x130>)
    f2b0:	f00a fa12 	bl	196d8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    f2b4:	b158      	cbz	r0, f2ce <hci_tx_thread+0x4e>
    f2b6:	f241 4271 	movw	r2, #5233	; 0x1471
    f2ba:	4649      	mov	r1, r9
    f2bc:	483e      	ldr	r0, [pc, #248]	; (f3b8 <hci_tx_thread+0x138>)
    f2be:	f00a fc24 	bl	19b0a <printk>
    f2c2:	4040      	eors	r0, r0
    f2c4:	f380 8811 	msr	BASEPRI, r0
    f2c8:	f04f 0003 	mov.w	r0, #3
    f2cc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    f2ce:	4d3b      	ldr	r5, [pc, #236]	; (f3bc <hci_tx_thread+0x13c>)
{
    f2d0:	4f37      	ldr	r7, [pc, #220]	; (f3b0 <hci_tx_thread+0x130>)
    f2d2:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
    f2d6:	b916      	cbnz	r6, f2de <hci_tx_thread+0x5e>
	z_impl_k_yield();
    f2d8:	f009 f900 	bl	184dc <z_impl_k_yield>
	while (1) {
    f2dc:	e7d8      	b.n	f290 <hci_tx_thread+0x10>
		switch (ev->state) {
    f2de:	68fa      	ldr	r2, [r7, #12]
    f2e0:	f3c2 3204 	ubfx	r2, r2, #12, #5
    f2e4:	2a01      	cmp	r2, #1
    f2e6:	d953      	bls.n	f390 <hci_tx_thread+0x110>
    f2e8:	2a04      	cmp	r2, #4
    f2ea:	d15b      	bne.n	f3a4 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    f2ec:	7b3b      	ldrb	r3, [r7, #12]
    f2ee:	2b00      	cmp	r3, #0
    f2f0:	d151      	bne.n	f396 <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    f2f2:	2200      	movs	r2, #0
    f2f4:	2300      	movs	r3, #0
    f2f6:	4832      	ldr	r0, [pc, #200]	; (f3c0 <hci_tx_thread+0x140>)
    f2f8:	f005 fb12 	bl	14920 <net_buf_get>
	BT_ASSERT(buf);
    f2fc:	4604      	mov	r4, r0
    f2fe:	b958      	cbnz	r0, f318 <hci_tx_thread+0x98>
    f300:	f241 420e 	movw	r2, #5134	; 0x140e
    f304:	4649      	mov	r1, r9
    f306:	482c      	ldr	r0, [pc, #176]	; (f3b8 <hci_tx_thread+0x138>)
    f308:	f00a fbff 	bl	19b0a <printk>
    f30c:	4040      	eors	r0, r0
    f30e:	f380 8811 	msr	BASEPRI, r0
    f312:	f04f 0003 	mov.w	r0, #3
    f316:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    f318:	f04f 33ff 	mov.w	r3, #4294967295
    f31c:	f04f 32ff 	mov.w	r2, #4294967295
    f320:	4658      	mov	r0, fp
    f322:	f009 fa59 	bl	187d8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    f326:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    f32a:	b153      	cbz	r3, f342 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    f32c:	2145      	movs	r1, #69	; 0x45
    f32e:	4825      	ldr	r0, [pc, #148]	; (f3c4 <hci_tx_thread+0x144>)
    f330:	f00a fbeb 	bl	19b0a <printk>
		net_buf_unref(bt_dev.sent_cmd);
    f334:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    f338:	f005 fb74 	bl	14a24 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    f33c:	2300      	movs	r3, #0
    f33e:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    f342:	4620      	mov	r0, r4
    f344:	f005 fbb2 	bl	14aac <net_buf_ref>
    f348:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
    f34c:	4620      	mov	r0, r4
    f34e:	f7ff fdd5 	bl	eefc <bt_send>
	if (err) {
    f352:	4602      	mov	r2, r0
    f354:	b1e0      	cbz	r0, f390 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    f356:	2145      	movs	r1, #69	; 0x45
    f358:	481b      	ldr	r0, [pc, #108]	; (f3c8 <hci_tx_thread+0x148>)
    f35a:	f00a fbd6 	bl	19b0a <printk>
	z_impl_k_sem_give(sem);
    f35e:	481b      	ldr	r0, [pc, #108]	; (f3cc <hci_tx_thread+0x14c>)
    f360:	f009 f9fe 	bl	18760 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    f364:	4620      	mov	r0, r4
    f366:	f005 f9e5 	bl	14734 <net_buf_id>
    f36a:	220c      	movs	r2, #12
    f36c:	4b18      	ldr	r3, [pc, #96]	; (f3d0 <hci_tx_thread+0x150>)
    f36e:	211f      	movs	r1, #31
    f370:	fb02 3000 	mla	r0, r2, r0, r3
    f374:	4622      	mov	r2, r4
    f376:	8840      	ldrh	r0, [r0, #2]
    f378:	f7fe ff20 	bl	e1bc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    f37c:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    f380:	f005 fb50 	bl	14a24 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    f384:	2300      	movs	r3, #0
		net_buf_unref(buf);
    f386:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    f388:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
    f38c:	f005 fb4a 	bl	14a24 <net_buf_unref>
	for (; count; ev++, count--) {
    f390:	3714      	adds	r7, #20
    f392:	3e01      	subs	r6, #1
    f394:	e79f      	b.n	f2d6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    f396:	2b01      	cmp	r3, #1
    f398:	d1fa      	bne.n	f390 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    f39a:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    f39c:	3834      	subs	r0, #52	; 0x34
    f39e:	f001 febb 	bl	11118 <bt_conn_process_tx>
    f3a2:	e7f5      	b.n	f390 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    f3a4:	2157      	movs	r1, #87	; 0x57
    f3a6:	480b      	ldr	r0, [pc, #44]	; (f3d4 <hci_tx_thread+0x154>)
    f3a8:	f00a fbaf 	bl	19b0a <printk>
    f3ac:	e7f0      	b.n	f390 <hci_tx_thread+0x110>
    f3ae:	bf00      	nop
    f3b0:	20008338 	.word	0x20008338
    f3b4:	0001ffef 	.word	0x0001ffef
    f3b8:	0001ecfc 	.word	0x0001ecfc
    f3bc:	20008000 	.word	0x20008000
    f3c0:	20008118 	.word	0x20008118
    f3c4:	00020319 	.word	0x00020319
    f3c8:	0002020c 	.word	0x0002020c
    f3cc:	200080e0 	.word	0x200080e0
    f3d0:	2000a970 	.word	0x2000a970
    f3d4:	00020339 	.word	0x00020339

0000f3d8 <hci_event_prio>:
{
    f3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3dc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    f3de:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    f3e2:	4630      	mov	r0, r6
    f3e4:	f00d f8c7 	bl	1c576 <net_buf_simple_headroom>
	state->len = buf->len;
    f3e8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f3ec:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    f3ee:	f1b8 0f01 	cmp.w	r8, #1
    f3f2:	d80b      	bhi.n	f40c <hci_event_prio+0x34>
    f3f4:	f641 02ae 	movw	r2, #6318	; 0x18ae
    f3f8:	491a      	ldr	r1, [pc, #104]	; (f464 <hci_event_prio+0x8c>)
    f3fa:	481b      	ldr	r0, [pc, #108]	; (f468 <hci_event_prio+0x90>)
    f3fc:	f00a fb85 	bl	19b0a <printk>
    f400:	4040      	eors	r0, r0
    f402:	f380 8811 	msr	BASEPRI, r0
    f406:	f04f 0003 	mov.w	r0, #3
    f40a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    f40c:	4630      	mov	r0, r6
    f40e:	2102      	movs	r1, #2
    f410:	f005 fc00 	bl	14c14 <net_buf_simple_pull_mem>
    f414:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f416:	7800      	ldrb	r0, [r0, #0]
    f418:	f00b fe83 	bl	1b122 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f41c:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f41e:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f420:	d40b      	bmi.n	f43a <hci_event_prio+0x62>
    f422:	f641 02b2 	movw	r2, #6322	; 0x18b2
    f426:	490f      	ldr	r1, [pc, #60]	; (f464 <hci_event_prio+0x8c>)
    f428:	480f      	ldr	r0, [pc, #60]	; (f468 <hci_event_prio+0x90>)
    f42a:	f00a fb6e 	bl	19b0a <printk>
    f42e:	4040      	eors	r0, r0
    f430:	f380 8811 	msr	BASEPRI, r0
    f434:	f04f 0003 	mov.w	r0, #3
    f438:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    f43a:	2305      	movs	r3, #5
    f43c:	4621      	mov	r1, r4
    f43e:	4a0b      	ldr	r2, [pc, #44]	; (f46c <hci_event_prio+0x94>)
    f440:	7838      	ldrb	r0, [r7, #0]
    f442:	f7fe fdb3 	bl	dfac <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f446:	07b3      	lsls	r3, r6, #30
    f448:	d507      	bpl.n	f45a <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    f44a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f44c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f450:	fa10 f585 	uxtah	r5, r0, r5
    f454:	60a5      	str	r5, [r4, #8]
}
    f456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    f45a:	4620      	mov	r0, r4
}
    f45c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    f460:	f005 bae0 	b.w	14a24 <net_buf_unref>
    f464:	0001ffef 	.word	0x0001ffef
    f468:	0001ecfc 	.word	0x0001ecfc
    f46c:	0001de70 	.word	0x0001de70

0000f470 <bt_recv>:
{
    f470:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    f472:	7d02      	ldrb	r2, [r0, #20]
    f474:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    f476:	2a01      	cmp	r2, #1
    f478:	d007      	beq.n	f48a <bt_recv+0x1a>
    f47a:	2a03      	cmp	r2, #3
    f47c:	d113      	bne.n	f4a6 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    f47e:	480f      	ldr	r0, [pc, #60]	; (f4bc <bt_recv+0x4c>)
    f480:	4629      	mov	r1, r5
    f482:	f005 faa1 	bl	149c8 <net_buf_put>
		return 0;
    f486:	2000      	movs	r0, #0
    f488:	e00c      	b.n	f4a4 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f48a:	6883      	ldr	r3, [r0, #8]
    f48c:	7818      	ldrb	r0, [r3, #0]
    f48e:	f00b fe48 	bl	1b122 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f492:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f494:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f496:	d502      	bpl.n	f49e <bt_recv+0x2e>
			hci_event_prio(buf);
    f498:	4628      	mov	r0, r5
    f49a:	f7ff ff9d 	bl	f3d8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f49e:	f014 0002 	ands.w	r0, r4, #2
    f4a2:	d1ec      	bne.n	f47e <bt_recv+0xe>
}
    f4a4:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    f4a6:	2145      	movs	r1, #69	; 0x45
    f4a8:	4805      	ldr	r0, [pc, #20]	; (f4c0 <bt_recv+0x50>)
    f4aa:	f00a fb2e 	bl	19b0a <printk>
		net_buf_unref(buf);
    f4ae:	4628      	mov	r0, r5
    f4b0:	f005 fab8 	bl	14a24 <net_buf_unref>
		return -EINVAL;
    f4b4:	f06f 0015 	mvn.w	r0, #21
    f4b8:	e7f4      	b.n	f4a4 <bt_recv+0x34>
    f4ba:	bf00      	nop
    f4bc:	200080fc 	.word	0x200080fc
    f4c0:	0002035f 	.word	0x0002035f

0000f4c4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    f4c4:	4a08      	ldr	r2, [pc, #32]	; (f4e8 <bt_hci_driver_register+0x24>)
{
    f4c6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    f4c8:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
    f4cc:	b930      	cbnz	r0, f4dc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    f4ce:	68d9      	ldr	r1, [r3, #12]
    f4d0:	b139      	cbz	r1, f4e2 <bt_hci_driver_register+0x1e>
    f4d2:	6919      	ldr	r1, [r3, #16]
    f4d4:	b129      	cbz	r1, f4e2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    f4d6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
    f4da:	4770      	bx	lr
		return -EALREADY;
    f4dc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    f4e0:	4770      	bx	lr
		return -EINVAL;
    f4e2:	f06f 0015 	mvn.w	r0, #21
}
    f4e6:	4770      	bx	lr
    f4e8:	20008000 	.word	0x20008000

0000f4ec <bt_finalize_init>:
{
    f4ec:	b508      	push	{r3, lr}
    f4ee:	2102      	movs	r1, #2
    f4f0:	4803      	ldr	r0, [pc, #12]	; (f500 <bt_finalize_init+0x14>)
    f4f2:	f00b fe3d 	bl	1b170 <atomic_or>
}
    f4f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    f4fa:	2000      	movs	r0, #0
    f4fc:	f7ff bb68 	b.w	ebd0 <bt_le_scan_update>
    f500:	20008094 	.word	0x20008094

0000f504 <bt_init>:
{
    f504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f506:	4d60      	ldr	r5, [pc, #384]	; (f688 <bt_init+0x184>)
    f508:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f50c:	6899      	ldr	r1, [r3, #8]
    f50e:	f011 0101 	ands.w	r1, r1, #1
    f512:	d11e      	bne.n	f552 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f514:	f640 4003 	movw	r0, #3075	; 0xc03
    f518:	aa01      	add	r2, sp, #4
    f51a:	f7fe fffb 	bl	e514 <bt_hci_cmd_send_sync>
		if (err) {
    f51e:	4604      	mov	r4, r0
    f520:	2800      	cmp	r0, #0
    f522:	f040 80ad 	bne.w	f680 <bt_init+0x17c>
	uint8_t status = buf->data[0];
    f526:	9b01      	ldr	r3, [sp, #4]
    f528:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f52a:	781b      	ldrb	r3, [r3, #0]
    f52c:	b973      	cbnz	r3, f54c <bt_init+0x48>
	scan_dev_found_cb = NULL;
    f52e:	4a57      	ldr	r2, [pc, #348]	; (f68c <bt_init+0x188>)
    f530:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f532:	f105 0394 	add.w	r3, r5, #148	; 0x94
    f536:	4618      	mov	r0, r3
    f538:	f00b fe14 	bl	1b164 <atomic_get>
    f53c:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f540:	e8d3 2fef 	ldaex	r2, [r3]
    f544:	e8c3 0fe1 	stlex	r1, r0, [r3]
    f548:	2900      	cmp	r1, #0
    f54a:	d1f9      	bne.n	f540 <bt_init+0x3c>
		net_buf_unref(rsp);
    f54c:	9801      	ldr	r0, [sp, #4]
    f54e:	f005 fa69 	bl	14a24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f552:	2100      	movs	r1, #0
    f554:	f241 0003 	movw	r0, #4099	; 0x1003
    f558:	aa01      	add	r2, sp, #4
    f55a:	f7fe ffdb 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f55e:	4604      	mov	r4, r0
    f560:	2800      	cmp	r0, #0
    f562:	f040 808d 	bne.w	f680 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f566:	9b01      	ldr	r3, [sp, #4]
    f568:	2208      	movs	r2, #8
    f56a:	6899      	ldr	r1, [r3, #8]
    f56c:	4848      	ldr	r0, [pc, #288]	; (f690 <bt_init+0x18c>)
    f56e:	3101      	adds	r1, #1
    f570:	f00b fd0b 	bl	1af8a <memcpy>
	net_buf_unref(rsp);
    f574:	9801      	ldr	r0, [sp, #4]
    f576:	f005 fa55 	bl	14a24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f57a:	4621      	mov	r1, r4
    f57c:	f241 0001 	movw	r0, #4097	; 0x1001
    f580:	aa01      	add	r2, sp, #4
    f582:	f7fe ffc7 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f586:	4604      	mov	r4, r0
    f588:	2800      	cmp	r0, #0
    f58a:	d179      	bne.n	f680 <bt_init+0x17c>
	read_local_ver_complete(rsp);
    f58c:	9801      	ldr	r0, [sp, #4]
    f58e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f590:	785a      	ldrb	r2, [r3, #1]
    f592:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f596:	78d9      	ldrb	r1, [r3, #3]
    f598:	789a      	ldrb	r2, [r3, #2]
    f59a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f59e:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    f5a0:	791a      	ldrb	r2, [r3, #4]
    f5a2:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f5a6:	7a19      	ldrb	r1, [r3, #8]
    f5a8:	79da      	ldrb	r2, [r3, #7]
    f5aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f5ae:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f5b0:	795a      	ldrb	r2, [r3, #5]
    f5b2:	799b      	ldrb	r3, [r3, #6]
    f5b4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f5b8:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    f5ba:	f005 fa33 	bl	14a24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f5be:	4621      	mov	r1, r4
    f5c0:	f241 0002 	movw	r0, #4098	; 0x1002
    f5c4:	aa01      	add	r2, sp, #4
    f5c6:	f7fe ffa5 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f5ca:	4604      	mov	r4, r0
    f5cc:	2800      	cmp	r0, #0
    f5ce:	d157      	bne.n	f680 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
    f5d0:	9b01      	ldr	r3, [sp, #4]
    f5d2:	2240      	movs	r2, #64	; 0x40
    f5d4:	6899      	ldr	r1, [r3, #8]
    f5d6:	482f      	ldr	r0, [pc, #188]	; (f694 <bt_init+0x190>)
    f5d8:	3101      	adds	r1, #1
    f5da:	f00b fcd6 	bl	1af8a <memcpy>
	net_buf_unref(rsp);
    f5de:	9801      	ldr	r0, [sp, #4]
    f5e0:	f005 fa20 	bl	14a24 <net_buf_unref>
		err = prng_init();
    f5e4:	f000 fed6 	bl	10394 <prng_init>
		if (err) {
    f5e8:	4604      	mov	r4, r0
    f5ea:	2800      	cmp	r0, #0
    f5ec:	d148      	bne.n	f680 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f5ee:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    f5f2:	069f      	lsls	r7, r3, #26
    f5f4:	d40e      	bmi.n	f614 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    f5f6:	2157      	movs	r1, #87	; 0x57
    f5f8:	4827      	ldr	r0, [pc, #156]	; (f698 <bt_init+0x194>)
    f5fa:	f00a fa86 	bl	19b0a <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f5fe:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f602:	065e      	lsls	r6, r3, #25
    f604:	d44c      	bmi.n	f6a0 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
    f606:	2145      	movs	r1, #69	; 0x45
    f608:	4824      	ldr	r0, [pc, #144]	; (f69c <bt_init+0x198>)
    f60a:	f00a fa7e 	bl	19b0a <printk>
		return -ENODEV;
    f60e:	f06f 0412 	mvn.w	r4, #18
    f612:	e035      	b.n	f680 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    f614:	2107      	movs	r1, #7
    f616:	f640 4033 	movw	r0, #3123	; 0xc33
    f61a:	f7fe ff31 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    f61e:	4607      	mov	r7, r0
    f620:	b910      	cbnz	r0, f628 <bt_init+0x124>
		return -ENOBUFS;
    f622:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f626:	e02b      	b.n	f680 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
    f628:	2107      	movs	r1, #7
    f62a:	3008      	adds	r0, #8
    f62c:	f005 fb10 	bl	14c50 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    f630:	4621      	mov	r1, r4
    f632:	2207      	movs	r2, #7
    f634:	4606      	mov	r6, r0
    f636:	f00b fcd3 	bl	1afe0 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    f63a:	231b      	movs	r3, #27
    f63c:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f63e:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f640:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    f642:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f644:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f646:	4639      	mov	r1, r7
    f648:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f64c:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f64e:	f7fe ff61 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f652:	4604      	mov	r4, r0
    f654:	b9a0      	cbnz	r0, f680 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    f656:	2101      	movs	r1, #1
    f658:	f640 4031 	movw	r0, #3121	; 0xc31
    f65c:	f7fe ff10 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    f660:	4606      	mov	r6, r0
    f662:	2800      	cmp	r0, #0
    f664:	d0dd      	beq.n	f622 <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
    f666:	2101      	movs	r1, #1
    f668:	3008      	adds	r0, #8
    f66a:	f00c ff9c 	bl	1c5a6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    f66e:	4622      	mov	r2, r4
    f670:	4631      	mov	r1, r6
    f672:	f640 4031 	movw	r0, #3121	; 0xc31
    f676:	f7fe ff4d 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f67a:	4604      	mov	r4, r0
    f67c:	2800      	cmp	r0, #0
    f67e:	d0be      	beq.n	f5fe <bt_init+0xfa>
}
    f680:	4620      	mov	r0, r4
    f682:	b003      	add	sp, #12
    f684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f686:	bf00      	nop
    f688:	20008000 	.word	0x20008000
    f68c:	2000a994 	.word	0x2000a994
    f690:	2000803c 	.word	0x2000803c
    f694:	20008044 	.word	0x20008044
    f698:	00020378 	.word	0x00020378
    f69c:	000203ab 	.word	0x000203ab
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f6a0:	2100      	movs	r1, #0
    f6a2:	f242 0003 	movw	r0, #8195	; 0x2003
    f6a6:	aa01      	add	r2, sp, #4
    f6a8:	f7fe ff34 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f6ac:	4604      	mov	r4, r0
    f6ae:	2800      	cmp	r0, #0
    f6b0:	d1e6      	bne.n	f680 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f6b2:	9b01      	ldr	r3, [sp, #4]
    f6b4:	2208      	movs	r2, #8
    f6b6:	6899      	ldr	r1, [r3, #8]
    f6b8:	48a6      	ldr	r0, [pc, #664]	; (f954 <bt_init+0x450>)
    f6ba:	3101      	adds	r1, #1
    f6bc:	f00b fc65 	bl	1af8a <memcpy>
	net_buf_unref(rsp);
    f6c0:	9801      	ldr	r0, [sp, #4]
    f6c2:	f005 f9af 	bl	14a24 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f6c6:	4621      	mov	r1, r4
    f6c8:	f242 0002 	movw	r0, #8194	; 0x2002
    f6cc:	aa01      	add	r2, sp, #4
    f6ce:	f7fe ff21 	bl	e514 <bt_hci_cmd_send_sync>
		if (err) {
    f6d2:	4604      	mov	r4, r0
    f6d4:	2800      	cmp	r0, #0
    f6d6:	d1d3      	bne.n	f680 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
    f6d8:	9b01      	ldr	r3, [sp, #4]
    f6da:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f6dc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f6e0:	b291      	uxth	r1, r2
    f6e2:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    f6e6:	b121      	cbz	r1, f6f2 <bt_init+0x1ee>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f6e8:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f6ea:	489b      	ldr	r0, [pc, #620]	; (f958 <bt_init+0x454>)
    f6ec:	4611      	mov	r1, r2
    f6ee:	f00d fde1 	bl	1d2b4 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f6f2:	9801      	ldr	r0, [sp, #4]
    f6f4:	f005 f996 	bl	14a24 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f6f8:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    f6fc:	f016 0620 	ands.w	r6, r6, #32
    f700:	f000 80d4 	beq.w	f8ac <bt_init+0x3a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f704:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    f708:	071c      	lsls	r4, r3, #28
    f70a:	d512      	bpl.n	f732 <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f70c:	2100      	movs	r1, #0
    f70e:	f242 001c 	movw	r0, #8220	; 0x201c
    f712:	aa01      	add	r2, sp, #4
    f714:	f7fe fefe 	bl	e514 <bt_hci_cmd_send_sync>
		if (err) {
    f718:	4604      	mov	r4, r0
    f71a:	2800      	cmp	r0, #0
    f71c:	d1b0      	bne.n	f680 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
    f71e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f720:	6883      	ldr	r3, [r0, #8]
    f722:	f8d3 2001 	ldr.w	r2, [r3, #1]
    f726:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f72a:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    f72e:	f005 f979 	bl	14a24 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f732:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    f736:	0698      	lsls	r0, r3, #26
    f738:	d524      	bpl.n	f784 <bt_init+0x280>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f73a:	4668      	mov	r0, sp
    f73c:	f10d 0102 	add.w	r1, sp, #2
    f740:	f7fe ff4a 	bl	e5d8 <hci_le_read_max_data_len>
		if (err) {
    f744:	4604      	mov	r4, r0
    f746:	2800      	cmp	r0, #0
    f748:	d19a      	bne.n	f680 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f74a:	2104      	movs	r1, #4
    f74c:	f242 0024 	movw	r0, #8228	; 0x2024
    f750:	f7fe fe96 	bl	e480 <bt_hci_cmd_create>
		if (!buf) {
    f754:	4606      	mov	r6, r0
    f756:	2800      	cmp	r0, #0
    f758:	f43f af63 	beq.w	f622 <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
    f75c:	2104      	movs	r1, #4
    f75e:	3008      	adds	r0, #8
    f760:	f005 fa76 	bl	14c50 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f764:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f768:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f76a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f76c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f770:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f772:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f774:	f242 0024 	movw	r0, #8228	; 0x2024
    f778:	f7fe fecc 	bl	e514 <bt_hci_cmd_send_sync>
		if (err) {
    f77c:	4604      	mov	r4, r0
    f77e:	2800      	cmp	r0, #0
    f780:	f47f af7e 	bne.w	f680 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f784:	2108      	movs	r1, #8
    f786:	f242 0001 	movw	r0, #8193	; 0x2001
    f78a:	f7fe fe79 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    f78e:	4604      	mov	r4, r0
    f790:	2800      	cmp	r0, #0
    f792:	f43f af46 	beq.w	f622 <bt_init+0x11e>
    f796:	2108      	movs	r1, #8
    f798:	4408      	add	r0, r1
    f79a:	f005 fa59 	bl	14c50 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f79e:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    f7a2:	f012 0f02 	tst.w	r2, #2
    f7a6:	bf14      	ite	ne
    f7a8:	232f      	movne	r3, #47	; 0x2f
    f7aa:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    f7ac:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f7ae:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    f7b2:	bf48      	it	mi
    f7b4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f7b8:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    f7bc:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    f7c0:	bf18      	it	ne
    f7c2:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    f7c6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f7c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f7cc:	4621      	mov	r1, r4
    f7ce:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    f7d0:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f7d2:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    f7d4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f7d6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f7d8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f7da:	71c2      	strb	r2, [r0, #7]
    f7dc:	f242 0001 	movw	r0, #8193	; 0x2001
    f7e0:	f7fe fe98 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f7e4:	4604      	mov	r4, r0
    f7e6:	2800      	cmp	r0, #0
    f7e8:	f47f af4a 	bne.w	f680 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f7ec:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f7f0:	069a      	lsls	r2, r3, #26
    f7f2:	d41e      	bmi.n	f832 <bt_init+0x32e>
	if (bt_dev.le.acl_mtu) {
    f7f4:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    f7f8:	b9d9      	cbnz	r1, f832 <bt_init+0x32e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f7fa:	f241 0005 	movw	r0, #4101	; 0x1005
    f7fe:	aa01      	add	r2, sp, #4
    f800:	f7fe fe88 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f804:	4604      	mov	r4, r0
    f806:	2800      	cmp	r0, #0
    f808:	f47f af3a 	bne.w	f680 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
    f80c:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    f810:	b963      	cbnz	r3, f82c <bt_init+0x328>
    f812:	9b01      	ldr	r3, [sp, #4]
    f814:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f816:	785a      	ldrb	r2, [r3, #1]
    f818:	7899      	ldrb	r1, [r3, #2]
    f81a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f81e:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f822:	889a      	ldrh	r2, [r3, #4]
    f824:	484c      	ldr	r0, [pc, #304]	; (f958 <bt_init+0x454>)
    f826:	4611      	mov	r1, r2
    f828:	f00d fd44 	bl	1d2b4 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f82c:	9801      	ldr	r0, [sp, #4]
    f82e:	f005 f8f9 	bl	14a24 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f832:	2108      	movs	r1, #8
    f834:	f640 4001 	movw	r0, #3073	; 0xc01
    f838:	f7fe fe22 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    f83c:	4604      	mov	r4, r0
    f83e:	2800      	cmp	r0, #0
    f840:	f43f aeef 	beq.w	f622 <bt_init+0x11e>
    f844:	2108      	movs	r1, #8
    f846:	4408      	add	r0, r1
    f848:	f005 fa02 	bl	14c50 <net_buf_simple_add>
	dst[0] = val;
    f84c:	2310      	movs	r3, #16
    f84e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f850:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    f852:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    f854:	7043      	strb	r3, [r0, #1]
    f856:	2602      	movs	r6, #2
    f858:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f85a:	4621      	mov	r1, r4
	dst[0] = val;
    f85c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f85e:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    f860:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f862:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f864:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f866:	71c3      	strb	r3, [r0, #7]
    f868:	f640 4001 	movw	r0, #3073	; 0xc01
    f86c:	f7fe fe52 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f870:	4604      	mov	r4, r0
    f872:	2800      	cmp	r0, #0
    f874:	f47f af04 	bne.w	f680 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f878:	4601      	mov	r1, r0
    f87a:	aa01      	add	r2, sp, #4
    f87c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f880:	f7fe fe48 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f884:	4604      	mov	r4, r0
    f886:	b360      	cbz	r0, f8e2 <bt_init+0x3de>
		BT_WARN("Vendor HCI extensions not available");
    f888:	2157      	movs	r1, #87	; 0x57
    f88a:	4834      	ldr	r0, [pc, #208]	; (f95c <bt_init+0x458>)
			BT_WARN("Failed to read supported vendor features");
    f88c:	f00a f93d 	bl	19b0a <printk>
		err = bt_conn_init();
    f890:	f001 fcd0 	bl	11234 <bt_conn_init>
		if (err) {
    f894:	4604      	mov	r4, r0
    f896:	2800      	cmp	r0, #0
    f898:	f47f aef2 	bne.w	f680 <bt_init+0x17c>
		if (!bt_dev.id_count) {
    f89c:	79eb      	ldrb	r3, [r5, #7]
    f89e:	2b00      	cmp	r3, #0
    f8a0:	d150      	bne.n	f944 <bt_init+0x440>
			BT_INFO("No ID address. App must call settings_load()");
    f8a2:	2149      	movs	r1, #73	; 0x49
    f8a4:	482e      	ldr	r0, [pc, #184]	; (f960 <bt_init+0x45c>)
    f8a6:	f00a f930 	bl	19b0a <printk>
			return 0;
    f8aa:	e6e9      	b.n	f680 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f8ac:	2102      	movs	r1, #2
    f8ae:	f640 406d 	movw	r0, #3181	; 0xc6d
    f8b2:	f7fe fde5 	bl	e480 <bt_hci_cmd_create>
		if (!buf) {
    f8b6:	4604      	mov	r4, r0
    f8b8:	2800      	cmp	r0, #0
    f8ba:	f43f aeb2 	beq.w	f622 <bt_init+0x11e>
    f8be:	2102      	movs	r1, #2
    f8c0:	3008      	adds	r0, #8
    f8c2:	f005 f9c5 	bl	14c50 <net_buf_simple_add>
		cp_le->le = 0x01;
    f8c6:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f8c8:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    f8ca:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f8cc:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f8ce:	4632      	mov	r2, r6
    f8d0:	f640 406d 	movw	r0, #3181	; 0xc6d
    f8d4:	f7fe fe1e 	bl	e514 <bt_hci_cmd_send_sync>
		if (err) {
    f8d8:	4604      	mov	r4, r0
    f8da:	2800      	cmp	r0, #0
    f8dc:	f43f af12 	beq.w	f704 <bt_init+0x200>
    f8e0:	e6ce      	b.n	f680 <bt_init+0x17c>
	net_buf_unref(rsp);
    f8e2:	9801      	ldr	r0, [sp, #4]
    f8e4:	f005 f89e 	bl	14a24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f8e8:	4621      	mov	r1, r4
    f8ea:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f8ee:	aa01      	add	r2, sp, #4
    f8f0:	f7fe fe10 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    f8f4:	4604      	mov	r4, r0
    f8f6:	b110      	cbz	r0, f8fe <bt_init+0x3fa>
		BT_WARN("Failed to read supported vendor commands");
    f8f8:	2157      	movs	r1, #87	; 0x57
    f8fa:	481a      	ldr	r0, [pc, #104]	; (f964 <bt_init+0x460>)
    f8fc:	e7c6      	b.n	f88c <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
    f8fe:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f900:	4632      	mov	r2, r6
    f902:	6899      	ldr	r1, [r3, #8]
    f904:	4818      	ldr	r0, [pc, #96]	; (f968 <bt_init+0x464>)
    f906:	3101      	adds	r1, #1
    f908:	f00b fb3f 	bl	1af8a <memcpy>
	net_buf_unref(rsp);
    f90c:	9801      	ldr	r0, [sp, #4]
    f90e:	f005 f889 	bl	14a24 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f912:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    f916:	075b      	lsls	r3, r3, #29
    f918:	d5ba      	bpl.n	f890 <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f91a:	4621      	mov	r1, r4
    f91c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f920:	aa01      	add	r2, sp, #4
    f922:	f7fe fdf7 	bl	e514 <bt_hci_cmd_send_sync>
		if (err) {
    f926:	b110      	cbz	r0, f92e <bt_init+0x42a>
			BT_WARN("Failed to read supported vendor features");
    f928:	2157      	movs	r1, #87	; 0x57
    f92a:	4810      	ldr	r0, [pc, #64]	; (f96c <bt_init+0x468>)
    f92c:	e7ae      	b.n	f88c <bt_init+0x388>
		memcpy(bt_dev.vs_features, rp.feat->features,
    f92e:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    f930:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f932:	480f      	ldr	r0, [pc, #60]	; (f970 <bt_init+0x46c>)
    f934:	6899      	ldr	r1, [r3, #8]
    f936:	4411      	add	r1, r2
    f938:	f00b fb27 	bl	1af8a <memcpy>
		net_buf_unref(rsp);
    f93c:	9801      	ldr	r0, [sp, #4]
    f93e:	f005 f871 	bl	14a24 <net_buf_unref>
    f942:	e7a5      	b.n	f890 <bt_init+0x38c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f944:	2104      	movs	r1, #4
    f946:	480b      	ldr	r0, [pc, #44]	; (f974 <bt_init+0x470>)
    f948:	f00b fc12 	bl	1b170 <atomic_or>
	bt_finalize_init();
    f94c:	f7ff fdce 	bl	f4ec <bt_finalize_init>
	return 0;
    f950:	e696      	b.n	f680 <bt_init+0x17c>
    f952:	bf00      	nop
    f954:	20008098 	.word	0x20008098
    f958:	200080c8 	.word	0x200080c8
    f95c:	000203d4 	.word	0x000203d4
    f960:	00020459 	.word	0x00020459
    f964:	000203fd 	.word	0x000203fd
    f968:	20008085 	.word	0x20008085
    f96c:	0002042b 	.word	0x0002042b
    f970:	20008084 	.word	0x20008084
    f974:	20008094 	.word	0x20008094

0000f978 <init_work>:
{
    f978:	b510      	push	{r4, lr}
	err = bt_init();
    f97a:	f7ff fdc3 	bl	f504 <bt_init>
	if (ready_cb) {
    f97e:	4b03      	ldr	r3, [pc, #12]	; (f98c <init_work+0x14>)
    f980:	681b      	ldr	r3, [r3, #0]
    f982:	b113      	cbz	r3, f98a <init_work+0x12>
}
    f984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    f988:	4718      	bx	r3
}
    f98a:	bd10      	pop	{r4, pc}
    f98c:	2000a988 	.word	0x2000a988

0000f990 <bt_enable>:
{
    f990:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    f994:	4d35      	ldr	r5, [pc, #212]	; (fa6c <bt_enable+0xdc>)
{
    f996:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    f998:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
    f99c:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    f99e:	b94b      	cbnz	r3, f9b4 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
    f9a0:	2145      	movs	r1, #69	; 0x45
    f9a2:	4833      	ldr	r0, [pc, #204]	; (fa70 <bt_enable+0xe0>)
    f9a4:	f00a f8b1 	bl	19b0a <printk>
		return -ENODEV;
    f9a8:	f06f 0412 	mvn.w	r4, #18
}
    f9ac:	4620      	mov	r0, r4
    f9ae:	b008      	add	sp, #32
    f9b0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f9b4:	2101      	movs	r1, #1
    f9b6:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f9ba:	f00b fbd9 	bl	1b170 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f9be:	07c2      	lsls	r2, r0, #31
    f9c0:	d451      	bmi.n	fa66 <bt_enable+0xd6>
		err = bt_settings_init();
    f9c2:	f7fe f913 	bl	dbec <bt_settings_init>
		if (err) {
    f9c6:	4604      	mov	r4, r0
    f9c8:	2800      	cmp	r0, #0
    f9ca:	d1ef      	bne.n	f9ac <bt_enable+0x1c>
	ready_cb = cb;
    f9cc:	4b29      	ldr	r3, [pc, #164]	; (fa74 <bt_enable+0xe4>)
    f9ce:	f04f 0800 	mov.w	r8, #0
    f9d2:	f04f 0900 	mov.w	r9, #0
    f9d6:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f9d8:	f06f 0308 	mvn.w	r3, #8
    f9dc:	e9cd 0000 	strd	r0, r0, [sp]
    f9e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
    f9e4:	9004      	str	r0, [sp, #16]
    f9e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f9ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f9ee:	4b22      	ldr	r3, [pc, #136]	; (fa78 <bt_enable+0xe8>)
    f9f0:	4922      	ldr	r1, [pc, #136]	; (fa7c <bt_enable+0xec>)
    f9f2:	4823      	ldr	r0, [pc, #140]	; (fa80 <bt_enable+0xf0>)
    f9f4:	f008 ffdc 	bl	189b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f9f8:	4922      	ldr	r1, [pc, #136]	; (fa84 <bt_enable+0xf4>)
    f9fa:	4821      	ldr	r0, [pc, #132]	; (fa80 <bt_enable+0xf0>)
    f9fc:	f00d fc74 	bl	1d2e8 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    fa00:	f06f 0307 	mvn.w	r3, #7
    fa04:	f640 0298 	movw	r2, #2200	; 0x898
    fa08:	e9cd 4302 	strd	r4, r3, [sp, #8]
    fa0c:	e9cd 8906 	strd	r8, r9, [sp, #24]
    fa10:	e9cd 4400 	strd	r4, r4, [sp]
    fa14:	4b1c      	ldr	r3, [pc, #112]	; (fa88 <bt_enable+0xf8>)
    fa16:	491d      	ldr	r1, [pc, #116]	; (fa8c <bt_enable+0xfc>)
    fa18:	9404      	str	r4, [sp, #16]
    fa1a:	481d      	ldr	r0, [pc, #116]	; (fa90 <bt_enable+0x100>)
    fa1c:	f008 ffc8 	bl	189b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    fa20:	491c      	ldr	r1, [pc, #112]	; (fa94 <bt_enable+0x104>)
    fa22:	481b      	ldr	r0, [pc, #108]	; (fa90 <bt_enable+0x100>)
    fa24:	f00d fc60 	bl	1d2e8 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    fa28:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    fa2c:	68db      	ldr	r3, [r3, #12]
    fa2e:	4798      	blx	r3
	if (err) {
    fa30:	4604      	mov	r4, r0
    fa32:	b128      	cbz	r0, fa40 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
    fa34:	4602      	mov	r2, r0
    fa36:	2145      	movs	r1, #69	; 0x45
    fa38:	4817      	ldr	r0, [pc, #92]	; (fa98 <bt_enable+0x108>)
    fa3a:	f00a f866 	bl	19b0a <printk>
		return err;
    fa3e:	e7b5      	b.n	f9ac <bt_enable+0x1c>
	if (!cb) {
    fa40:	b926      	cbnz	r6, fa4c <bt_enable+0xbc>
}
    fa42:	b008      	add	sp, #32
    fa44:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
    fa48:	f7ff bd5c 	b.w	f504 <bt_init>
    fa4c:	2101      	movs	r1, #1
    fa4e:	f105 0090 	add.w	r0, r5, #144	; 0x90
    fa52:	f00b fb8d 	bl	1b170 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    fa56:	07c3      	lsls	r3, r0, #31
    fa58:	d4a8      	bmi.n	f9ac <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    fa5a:	4810      	ldr	r0, [pc, #64]	; (fa9c <bt_enable+0x10c>)
    fa5c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    fa60:	f00d fbd0 	bl	1d204 <k_queue_append>
    fa64:	e7a2      	b.n	f9ac <bt_enable+0x1c>
		return -EALREADY;
    fa66:	f06f 0444 	mvn.w	r4, #68	; 0x44
    fa6a:	e79f      	b.n	f9ac <bt_enable+0x1c>
    fa6c:	20008000 	.word	0x20008000
    fa70:	0002048b 	.word	0x0002048b
    fa74:	2000a988 	.word	0x2000a988
    fa78:	0000f281 	.word	0x0000f281
    fa7c:	2000d6d8 	.word	0x2000d6d8
    fa80:	20008990 	.word	0x20008990
    fa84:	000204a9 	.word	0x000204a9
    fa88:	0000e099 	.word	0x0000e099
    fa8c:	2000ce40 	.word	0x2000ce40
    fa90:	20008900 	.word	0x20008900
    fa94:	000204af 	.word	0x000204af
    fa98:	000204b5 	.word	0x000204b5
    fa9c:	2000a3b0 	.word	0x2000a3b0

0000faa0 <bt_get_name>:
}
    faa0:	4800      	ldr	r0, [pc, #0]	; (faa4 <bt_get_name+0x4>)
    faa2:	4770      	bx	lr
    faa4:	0001eb4b 	.word	0x0001eb4b

0000faa8 <bt_id_create>:
{
    faa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    faaa:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    faac:	4605      	mov	r5, r0
    faae:	b918      	cbnz	r0, fab8 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    fab0:	b314      	cbz	r4, faf8 <bt_id_create+0x50>
		return -EINVAL;
    fab2:	f06f 0415 	mvn.w	r4, #21
    fab6:	e01c      	b.n	faf2 <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    fab8:	2300      	movs	r3, #0
    faba:	4669      	mov	r1, sp
    fabc:	9300      	str	r3, [sp, #0]
    fabe:	f8cd 3003 	str.w	r3, [sp, #3]
    fac2:	f00b fb60 	bl	1b186 <bt_addr_le_cmp>
    fac6:	2800      	cmp	r0, #0
    fac8:	d0f2      	beq.n	fab0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    faca:	782b      	ldrb	r3, [r5, #0]
    facc:	2b01      	cmp	r3, #1
    face:	d104      	bne.n	fada <bt_id_create+0x32>
    fad0:	79ab      	ldrb	r3, [r5, #6]
    fad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fad6:	2bc0      	cmp	r3, #192	; 0xc0
    fad8:	d004      	beq.n	fae4 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    fada:	2145      	movs	r1, #69	; 0x45
    fadc:	480d      	ldr	r0, [pc, #52]	; (fb14 <bt_id_create+0x6c>)
    fade:	f00a f814 	bl	19b0a <printk>
			return -EINVAL;
    fae2:	e7e6      	b.n	fab2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    fae4:	4628      	mov	r0, r5
    fae6:	f7fe f949 	bl	dd7c <id_find>
    faea:	2800      	cmp	r0, #0
    faec:	dbe0      	blt.n	fab0 <bt_id_create+0x8>
			return -EALREADY;
    faee:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    faf2:	4620      	mov	r0, r4
    faf4:	b003      	add	sp, #12
    faf6:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    faf8:	4b07      	ldr	r3, [pc, #28]	; (fb18 <bt_id_create+0x70>)
    fafa:	79dc      	ldrb	r4, [r3, #7]
    fafc:	2c01      	cmp	r4, #1
    fafe:	d006      	beq.n	fb0e <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    fb00:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    fb02:	4629      	mov	r1, r5
    fb04:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    fb06:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    fb08:	f7fe fa90 	bl	e02c <id_create.constprop.0>
	return new_id;
    fb0c:	e7f1      	b.n	faf2 <bt_id_create+0x4a>
		return -ENOMEM;
    fb0e:	f06f 040b 	mvn.w	r4, #11
    fb12:	e7ee      	b.n	faf2 <bt_id_create+0x4a>
    fb14:	000204d6 	.word	0x000204d6
    fb18:	20008000 	.word	0x20008000

0000fb1c <bt_setup_public_id_addr>:
{
    fb1c:	b570      	push	{r4, r5, r6, lr}
    fb1e:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    fb20:	2100      	movs	r1, #0
    fb22:	f241 0009 	movw	r0, #4105	; 0x1009
    fb26:	aa01      	add	r2, sp, #4
    fb28:	f7fe fcf4 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    fb2c:	4e1d      	ldr	r6, [pc, #116]	; (fba4 <bt_setup_public_id_addr+0x88>)
    fb2e:	4604      	mov	r4, r0
    fb30:	b138      	cbz	r0, fb42 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    fb32:	2157      	movs	r1, #87	; 0x57
    fb34:	481c      	ldr	r0, [pc, #112]	; (fba8 <bt_setup_public_id_addr+0x8c>)
    fb36:	f009 ffe8 	bl	19b0a <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    fb3a:	2300      	movs	r3, #0
    fb3c:	71f3      	strb	r3, [r6, #7]
}
    fb3e:	b006      	add	sp, #24
    fb40:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    fb42:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    fb44:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    fb46:	689d      	ldr	r5, [r3, #8]
    fb48:	a904      	add	r1, sp, #16
    fb4a:	3501      	adds	r5, #1
    fb4c:	9004      	str	r0, [sp, #16]
    fb4e:	f8ad 0014 	strh.w	r0, [sp, #20]
    fb52:	4628      	mov	r0, r5
    fb54:	f00b fa08 	bl	1af68 <memcmp>
    fb58:	b918      	cbnz	r0, fb62 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    fb5a:	9801      	ldr	r0, [sp, #4]
    fb5c:	f004 ff62 	bl	14a24 <net_buf_unref>
    fb60:	e7eb      	b.n	fb3a <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    fb62:	4b12      	ldr	r3, [pc, #72]	; (fbac <bt_setup_public_id_addr+0x90>)
    fb64:	2206      	movs	r2, #6
    fb66:	f8d3 0007 	ldr.w	r0, [r3, #7]
    fb6a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
    fb6e:	9002      	str	r0, [sp, #8]
    fb70:	a902      	add	r1, sp, #8
    fb72:	4628      	mov	r0, r5
    fb74:	f8ad 300c 	strh.w	r3, [sp, #12]
    fb78:	f00b f9f6 	bl	1af68 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    fb7c:	2800      	cmp	r0, #0
    fb7e:	d0ec      	beq.n	fb5a <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    fb80:	4629      	mov	r1, r5
    fb82:	2206      	movs	r2, #6
    fb84:	f10d 0011 	add.w	r0, sp, #17
    fb88:	f00b f9ff 	bl	1af8a <memcpy>
	net_buf_unref(rsp);
    fb8c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    fb8e:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    fb92:	f004 ff47 	bl	14a24 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    fb96:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    fb98:	4620      	mov	r0, r4
    fb9a:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    fb9c:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    fb9e:	f7fe fa45 	bl	e02c <id_create.constprop.0>
    fba2:	e7cc      	b.n	fb3e <bt_setup_public_id_addr+0x22>
    fba4:	20008000 	.word	0x20008000
    fba8:	00020509 	.word	0x00020509
    fbac:	0001d9f0 	.word	0x0001d9f0

0000fbb0 <bt_read_static_addr>:
{
    fbb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fbb4:	4b1c      	ldr	r3, [pc, #112]	; (fc28 <bt_read_static_addr+0x78>)
{
    fbb6:	4607      	mov	r7, r0
    fbb8:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    fbbc:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fbbe:	f014 0401 	ands.w	r4, r4, #1
    fbc2:	d104      	bne.n	fbce <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    fbc4:	2157      	movs	r1, #87	; 0x57
    fbc6:	4819      	ldr	r0, [pc, #100]	; (fc2c <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
    fbc8:	f009 ff9f 	bl	19b0a <printk>
    fbcc:	e00c      	b.n	fbe8 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    fbce:	2100      	movs	r1, #0
    fbd0:	f64f 4009 	movw	r0, #64521	; 0xfc09
    fbd4:	aa01      	add	r2, sp, #4
    fbd6:	f7fe fc9d 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    fbda:	4605      	mov	r5, r0
    fbdc:	b140      	cbz	r0, fbf0 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    fbde:	2157      	movs	r1, #87	; 0x57
    fbe0:	4813      	ldr	r0, [pc, #76]	; (fc30 <bt_read_static_addr+0x80>)
    fbe2:	f009 ff92 	bl	19b0a <printk>
		return 0;
    fbe6:	2400      	movs	r4, #0
}
    fbe8:	4620      	mov	r0, r4
    fbea:	b002      	add	sp, #8
    fbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fbf0:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    fbf4:	9b01      	ldr	r3, [sp, #4]
    fbf6:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    fbf8:	785c      	ldrb	r4, [r3, #1]
    fbfa:	42b4      	cmp	r4, r6
    fbfc:	bf28      	it	cs
    fbfe:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fc00:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    fc02:	42a5      	cmp	r5, r4
    fc04:	db07      	blt.n	fc16 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    fc06:	9801      	ldr	r0, [sp, #4]
    fc08:	f004 ff0c 	bl	14a24 <net_buf_unref>
	if (!cnt) {
    fc0c:	2c00      	cmp	r4, #0
    fc0e:	d1eb      	bne.n	fbe8 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    fc10:	2157      	movs	r1, #87	; 0x57
    fc12:	4808      	ldr	r0, [pc, #32]	; (fc34 <bt_read_static_addr+0x84>)
    fc14:	e7d8      	b.n	fbc8 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fc16:	fb08 7005 	mla	r0, r8, r5, r7
    fc1a:	2216      	movs	r2, #22
    fc1c:	4631      	mov	r1, r6
    fc1e:	f00b f9b4 	bl	1af8a <memcpy>
	for (i = 0; i < cnt; i++) {
    fc22:	3501      	adds	r5, #1
    fc24:	e7ed      	b.n	fc02 <bt_read_static_addr+0x52>
    fc26:	bf00      	nop
    fc28:	20008000 	.word	0x20008000
    fc2c:	0002052c 	.word	0x0002052c
    fc30:	0002055d 	.word	0x0002055d
    fc34:	00020582 	.word	0x00020582

0000fc38 <bt_setup_random_id_addr>:
{
    fc38:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    fc3a:	4d15      	ldr	r5, [pc, #84]	; (fc90 <bt_setup_random_id_addr+0x58>)
{
    fc3c:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    fc3e:	79ec      	ldrb	r4, [r5, #7]
    fc40:	b9f4      	cbnz	r4, fc80 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    fc42:	2101      	movs	r1, #1
    fc44:	a802      	add	r0, sp, #8
    fc46:	f7ff ffb3 	bl	fbb0 <bt_read_static_addr>
    fc4a:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    fc4c:	b1c0      	cbz	r0, fc80 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    fc4e:	2716      	movs	r7, #22
    fc50:	b2e6      	uxtb	r6, r4
    fc52:	ab02      	add	r3, sp, #8
    fc54:	2206      	movs	r2, #6
    fc56:	fb07 3106 	mla	r1, r7, r6, r3
    fc5a:	f10d 0001 	add.w	r0, sp, #1
    fc5e:	f00b f994 	bl	1af8a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    fc62:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    fc64:	4669      	mov	r1, sp
    fc66:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    fc68:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    fc6c:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    fc6e:	f7fe f9dd 	bl	e02c <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    fc72:	79ea      	ldrb	r2, [r5, #7]
    fc74:	b2e3      	uxtb	r3, r4
    fc76:	429a      	cmp	r2, r3
    fc78:	d8ea      	bhi.n	fc50 <bt_setup_random_id_addr+0x18>
}
    fc7a:	2000      	movs	r0, #0
    fc7c:	b009      	add	sp, #36	; 0x24
    fc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    fc80:	2100      	movs	r1, #0
    fc82:	4608      	mov	r0, r1
}
    fc84:	b009      	add	sp, #36	; 0x24
    fc86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    fc8a:	f7ff bf0d 	b.w	faa8 <bt_id_create>
    fc8e:	bf00      	nop
    fc90:	20008000 	.word	0x20008000

0000fc94 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    fc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc98:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    fc9a:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    fc9c:	690d      	ldr	r5, [r1, #16]
{
    fc9e:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
    fca0:	ebb5 0b03 	subs.w	fp, r5, r3
{
    fca4:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fca6:	4884      	ldr	r0, [pc, #528]	; (feb8 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
    fca8:	bf18      	it	ne
    fcaa:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
    fcae:	9307      	str	r3, [sp, #28]
    fcb0:	f00b fa58 	bl	1b164 <atomic_get>
{
    fcb4:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fcb6:	0782      	lsls	r2, r0, #30
{
    fcb8:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fcba:	f140 80ef 	bpl.w	fe9c <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    fcbe:	4608      	mov	r0, r1
    fcc0:	f7fe f874 	bl	ddac <valid_adv_param>
    fcc4:	4607      	mov	r7, r0
    fcc6:	2800      	cmp	r0, #0
    fcc8:	f000 80eb 	beq.w	fea2 <bt_le_adv_start_legacy+0x20e>
    fccc:	487a      	ldr	r0, [pc, #488]	; (feb8 <bt_le_adv_start_legacy+0x224>)
    fcce:	f00b fa49 	bl	1b164 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    fcd2:	0503      	lsls	r3, r0, #20
    fcd4:	d402      	bmi.n	fcdc <bt_le_adv_start_legacy+0x48>
    fcd6:	4878      	ldr	r0, [pc, #480]	; (feb8 <bt_le_adv_start_legacy+0x224>)
    fcd8:	f00b fa44 	bl	1b164 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fcdc:	f106 0810 	add.w	r8, r6, #16
    fce0:	4640      	mov	r0, r8
    fce2:	f00b fa3f 	bl	1b164 <atomic_get>
    fce6:	f3c0 1180 	ubfx	r1, r0, #6, #1
    fcea:	0640      	lsls	r0, r0, #25
    fcec:	f100 80dc 	bmi.w	fea8 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    fcf0:	220f      	movs	r2, #15
    fcf2:	a80a      	add	r0, sp, #40	; 0x28
    fcf4:	9105      	str	r1, [sp, #20]
    fcf6:	f00b f973 	bl	1afe0 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fcfa:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    fcfc:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fcfe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    fd02:	68e3      	ldr	r3, [r4, #12]
    fd04:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    fd08:	f00b fa1d 	bl	1b146 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    fd0c:	7832      	ldrb	r2, [r6, #0]
    fd0e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    fd10:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
    fd12:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
    fd14:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
    fd18:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    fd1c:	d004      	beq.n	fd28 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fd1e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fd22:	4865      	ldr	r0, [pc, #404]	; (feb8 <bt_le_adv_start_legacy+0x224>)
    fd24:	f00b fa32 	bl	1b18c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    fd28:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
    fd2a:	4b64      	ldr	r3, [pc, #400]	; (febc <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
    fd2c:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    fd2e:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    fd32:	465a      	mov	r2, fp
    fd34:	6861      	ldr	r1, [r4, #4]
    fd36:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    fd3a:	f7fe fcd7 	bl	e6ec <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    fd3e:	4683      	mov	fp, r0
    fd40:	2800      	cmp	r0, #0
    fd42:	d169      	bne.n	fe18 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fd44:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    fd48:	2d00      	cmp	r5, #0
    fd4a:	d042      	beq.n	fdd2 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fd4c:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fd4e:	f00b fa0c 	bl	1b16a <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fd52:	6860      	ldr	r0, [r4, #4]
    fd54:	07c1      	lsls	r1, r0, #31
    fd56:	d544      	bpl.n	fde2 <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
    fd58:	2d00      	cmp	r5, #0
    fd5a:	d03f      	beq.n	fddc <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    fd5c:	f010 0f10 	tst.w	r0, #16
    fd60:	bf14      	ite	ne
    fd62:	2304      	movne	r3, #4
    fd64:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    fd66:	6921      	ldr	r1, [r4, #16]
    fd68:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    fd6c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    fd70:	f00b f9fb 	bl	1b16a <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    fd74:	210f      	movs	r1, #15
    fd76:	f242 0006 	movw	r0, #8198	; 0x2006
    fd7a:	f7fe fb81 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
    fd7e:	4683      	mov	fp, r0
    fd80:	2800      	cmp	r0, #0
    fd82:	f000 8094 	beq.w	feae <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    fd86:	220f      	movs	r2, #15
    fd88:	a90a      	add	r1, sp, #40	; 0x28
    fd8a:	3008      	adds	r0, #8
    fd8c:	f00c fbff 	bl	1c58e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    fd90:	2200      	movs	r2, #0
    fd92:	4659      	mov	r1, fp
    fd94:	f242 0006 	movw	r0, #8198	; 0x2006
    fd98:	f7fe fbbc 	bl	e514 <bt_hci_cmd_send_sync>
	if (err) {
    fd9c:	2800      	cmp	r0, #0
    fd9e:	f040 8089 	bne.w	feb4 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
    fda2:	b34d      	cbz	r5, fdf8 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fda4:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fda6:	07da      	lsls	r2, r3, #31
    fda8:	d43a      	bmi.n	fe20 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
    fdaa:	2101      	movs	r1, #1
    fdac:	4630      	mov	r0, r6
    fdae:	f7fe fdf7 	bl	e9a0 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    fdb2:	4683      	mov	fp, r0
    fdb4:	2800      	cmp	r0, #0
    fdb6:	d06a      	beq.n	fe8e <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
    fdb8:	4841      	ldr	r0, [pc, #260]	; (fec0 <bt_le_adv_start_legacy+0x22c>)
    fdba:	2145      	movs	r1, #69	; 0x45
    fdbc:	f009 fea5 	bl	19b0a <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fdc0:	9807      	ldr	r0, [sp, #28]
    fdc2:	b348      	cbz	r0, fe18 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fdc4:	2100      	movs	r1, #0
    fdc6:	f000 fddb 	bl	10980 <bt_conn_set_state>
			bt_conn_unref(conn);
    fdca:	9807      	ldr	r0, [sp, #28]
    fdcc:	f000 fdac 	bl	10928 <bt_conn_unref>
    fdd0:	e022      	b.n	fe18 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fdd2:	9508      	str	r5, [sp, #32]
    fdd4:	a908      	add	r1, sp, #32
    fdd6:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    fdda:	e7b8      	b.n	fd4e <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
    fddc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    fde0:	e7c8      	b.n	fd74 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    fde2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fde4:	b933      	cbnz	r3, fdf4 <bt_le_adv_start_legacy+0x160>
    fde6:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    fdea:	f1c7 0303 	rsb	r3, r7, #3
    fdee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    fdf2:	e7bf      	b.n	fd74 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    fdf4:	2701      	movs	r7, #1
    fdf6:	e7f8      	b.n	fdea <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    fdf8:	6863      	ldr	r3, [r4, #4]
    fdfa:	4652      	mov	r2, sl
    fdfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    fe00:	e9cd 7301 	strd	r7, r3, [sp, #4]
    fe04:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fe06:	4649      	mov	r1, r9
    fe08:	9300      	str	r3, [sp, #0]
    fe0a:	4630      	mov	r0, r6
    fe0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fe0e:	f7fe fd53 	bl	e8b8 <le_adv_update.constprop.0>
		if (err) {
    fe12:	4683      	mov	fp, r0
    fe14:	2800      	cmp	r0, #0
    fe16:	d0c5      	beq.n	fda4 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    fe18:	4658      	mov	r0, fp
    fe1a:	b00f      	add	sp, #60	; 0x3c
    fe1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    fe20:	4630      	mov	r0, r6
    fe22:	a907      	add	r1, sp, #28
    fe24:	f7fe fad8 	bl	e3d8 <le_adv_start_add_conn>
		if (err) {
    fe28:	4683      	mov	fp, r0
    fe2a:	2800      	cmp	r0, #0
    fe2c:	d0bd      	beq.n	fdaa <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
    fe2e:	f110 0f0c 	cmn.w	r0, #12
    fe32:	d1f1      	bne.n	fe18 <bt_le_adv_start_legacy+0x184>
    fe34:	2d00      	cmp	r5, #0
    fe36:	d1ef      	bne.n	fe18 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    fe38:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    fe3a:	079b      	lsls	r3, r3, #30
    fe3c:	d4ec      	bmi.n	fe18 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fe3e:	6860      	ldr	r0, [r4, #4]
    fe40:	f080 0002 	eor.w	r0, r0, #2
    fe44:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    fe48:	f00b 0201 	and.w	r2, fp, #1
    fe4c:	210c      	movs	r1, #12
    fe4e:	4640      	mov	r0, r8
    fe50:	f00b f9a7 	bl	1b1a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    fe54:	6862      	ldr	r2, [r4, #4]
    fe56:	2107      	movs	r1, #7
    fe58:	4640      	mov	r0, r8
    fe5a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fe5e:	f00b f9a0 	bl	1b1a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    fe62:	6862      	ldr	r2, [r4, #4]
    fe64:	2108      	movs	r1, #8
    fe66:	4640      	mov	r0, r8
    fe68:	f002 0201 	and.w	r2, r2, #1
    fe6c:	f00b f999 	bl	1b1a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    fe70:	463a      	mov	r2, r7
    fe72:	2109      	movs	r1, #9
    fe74:	4640      	mov	r0, r8
    fe76:	f00b f994 	bl	1b1a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    fe7a:	6862      	ldr	r2, [r4, #4]
    fe7c:	210b      	movs	r1, #11
    fe7e:	4640      	mov	r0, r8
    fe80:	f3c2 0280 	ubfx	r2, r2, #2, #1
    fe84:	f00b f98d 	bl	1b1a2 <atomic_set_bit_to>
	return 0;
    fe88:	f04f 0b00 	mov.w	fp, #0
    fe8c:	e7c4      	b.n	fe18 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fe8e:	9807      	ldr	r0, [sp, #28]
    fe90:	b108      	cbz	r0, fe96 <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
    fe92:	f000 fd49 	bl	10928 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fe96:	2d00      	cmp	r5, #0
    fe98:	d1d6      	bne.n	fe48 <bt_le_adv_start_legacy+0x1b4>
    fe9a:	e7d0      	b.n	fe3e <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
    fe9c:	f06f 0b0a 	mvn.w	fp, #10
    fea0:	e7ba      	b.n	fe18 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
    fea2:	f06f 0b15 	mvn.w	fp, #21
    fea6:	e7b7      	b.n	fe18 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
    fea8:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    feac:	e7b4      	b.n	fe18 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
    feae:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    feb2:	e7b1      	b.n	fe18 <bt_le_adv_start_legacy+0x184>
    feb4:	4683      	mov	fp, r0
    feb6:	e7af      	b.n	fe18 <bt_le_adv_start_legacy+0x184>
    feb8:	20008094 	.word	0x20008094
    febc:	20008000 	.word	0x20008000
    fec0:	000205b0 	.word	0x000205b0

0000fec4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    fec4:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    fec6:	9c04      	ldr	r4, [sp, #16]
    fec8:	e9cd 3400 	strd	r3, r4, [sp]
    fecc:	4613      	mov	r3, r2
    fece:	460a      	mov	r2, r1
    fed0:	4601      	mov	r1, r0
    fed2:	4802      	ldr	r0, [pc, #8]	; (fedc <bt_le_adv_start+0x18>)
    fed4:	f7ff fede 	bl	fc94 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    fed8:	b002      	add	sp, #8
    feda:	bd10      	pop	{r4, pc}
    fedc:	20008018 	.word	0x20008018

0000fee0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    fee0:	b530      	push	{r4, r5, lr}
    fee2:	4c29      	ldr	r4, [pc, #164]	; (ff88 <bt_le_adv_stop+0xa8>)
    fee4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fee8:	b085      	sub	sp, #20
    feea:	f104 0028 	add.w	r0, r4, #40	; 0x28
    feee:	f00b f94d 	bl	1b18c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fef2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fef6:	f00b f935 	bl	1b164 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fefa:	0641      	lsls	r1, r0, #25
    fefc:	d403      	bmi.n	ff06 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    fefe:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    ff00:	4620      	mov	r0, r4
    ff02:	b005      	add	sp, #20
    ff04:	bd30      	pop	{r4, r5, pc}
    ff06:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ff0a:	f00b f92b 	bl	1b164 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ff0e:	05c2      	lsls	r2, r0, #23
    ff10:	d521      	bpl.n	ff56 <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ff12:	2300      	movs	r3, #0
    ff14:	4669      	mov	r1, sp
    ff16:	f104 0021 	add.w	r0, r4, #33	; 0x21
    ff1a:	9300      	str	r3, [sp, #0]
    ff1c:	f8cd 3003 	str.w	r3, [sp, #3]
    ff20:	f00b f931 	bl	1b186 <bt_addr_le_cmp>
    ff24:	7e25      	ldrb	r5, [r4, #24]
    ff26:	bb58      	cbnz	r0, ff80 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    ff28:	4b18      	ldr	r3, [pc, #96]	; (ff8c <bt_le_adv_stop+0xac>)
    ff2a:	a902      	add	r1, sp, #8
    ff2c:	889a      	ldrh	r2, [r3, #4]
    ff2e:	6818      	ldr	r0, [r3, #0]
    ff30:	f8ad 200c 	strh.w	r2, [sp, #12]
    ff34:	2204      	movs	r2, #4
    ff36:	799b      	ldrb	r3, [r3, #6]
    ff38:	9002      	str	r0, [sp, #8]
    ff3a:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    ff3e:	4628      	mov	r0, r5
    ff40:	f000 fe54 	bl	10bec <bt_conn_lookup_state_le>
    ff44:	4604      	mov	r4, r0
	if (conn) {
    ff46:	b130      	cbz	r0, ff56 <bt_le_adv_stop+0x76>
		conn->err = status;
    ff48:	2100      	movs	r1, #0
    ff4a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ff4c:	f000 fd18 	bl	10980 <bt_conn_set_state>
		bt_conn_unref(conn);
    ff50:	4620      	mov	r0, r4
    ff52:	f000 fce9 	bl	10928 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    ff56:	2100      	movs	r1, #0
    ff58:	480d      	ldr	r0, [pc, #52]	; (ff90 <bt_le_adv_stop+0xb0>)
    ff5a:	f7fe fd21 	bl	e9a0 <set_le_adv_enable_legacy>
		if (err) {
    ff5e:	4604      	mov	r4, r0
    ff60:	2800      	cmp	r0, #0
    ff62:	d1cd      	bne.n	ff00 <bt_le_adv_stop+0x20>
    ff64:	480b      	ldr	r0, [pc, #44]	; (ff94 <bt_le_adv_stop+0xb4>)
    ff66:	f00b f8fd 	bl	1b164 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ff6a:	0683      	lsls	r3, r0, #26
    ff6c:	d5c7      	bpl.n	fefe <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
    ff6e:	4620      	mov	r0, r4
    ff70:	f7fe fb80 	bl	e674 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    ff74:	f00b f93b 	bl	1b1ee <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
    ff78:	2001      	movs	r0, #1
    ff7a:	f7fe fb7b 	bl	e674 <set_le_scan_enable_legacy>
    ff7e:	e7bf      	b.n	ff00 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    ff80:	2205      	movs	r2, #5
    ff82:	f104 0121 	add.w	r1, r4, #33	; 0x21
    ff86:	e7da      	b.n	ff3e <bt_le_adv_stop+0x5e>
    ff88:	20008000 	.word	0x20008000
    ff8c:	0001d9f0 	.word	0x0001d9f0
    ff90:	20008018 	.word	0x20008018
    ff94:	20008094 	.word	0x20008094

0000ff98 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    ff98:	b513      	push	{r0, r1, r4, lr}
    ff9a:	4818      	ldr	r0, [pc, #96]	; (fffc <bt_le_adv_resume+0x64>)
    ff9c:	f00b f8e2 	bl	1b164 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    ffa0:	04c1      	lsls	r1, r0, #19
    ffa2:	d529      	bpl.n	fff8 <bt_le_adv_resume+0x60>
    ffa4:	4815      	ldr	r0, [pc, #84]	; (fffc <bt_le_adv_resume+0x64>)
    ffa6:	f00b f8dd 	bl	1b164 <atomic_get>
    ffaa:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ffac:	f3c0 1480 	ubfx	r4, r0, #6, #1
    ffb0:	d422      	bmi.n	fff8 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ffb2:	4812      	ldr	r0, [pc, #72]	; (fffc <bt_le_adv_resume+0x64>)
    ffb4:	f00b f8d6 	bl	1b164 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    ffb8:	05c3      	lsls	r3, r0, #23
    ffba:	d51d      	bpl.n	fff8 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    ffbc:	4810      	ldr	r0, [pc, #64]	; (10000 <CONFIG_RPMSG_NRF53_SRAM_SIZE>)
    ffbe:	a901      	add	r1, sp, #4
    ffc0:	f7fe fa0a 	bl	e3d8 <le_adv_start_add_conn>
	if (err) {
    ffc4:	b9c0      	cbnz	r0, fff8 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    ffc6:	2101      	movs	r1, #1
    ffc8:	480d      	ldr	r0, [pc, #52]	; (10000 <CONFIG_RPMSG_NRF53_SRAM_SIZE>)
    ffca:	f7fe fce9 	bl	e9a0 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    ffce:	b150      	cbz	r0, ffe6 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ffd0:	4621      	mov	r1, r4
    ffd2:	9801      	ldr	r0, [sp, #4]
    ffd4:	f000 fcd4 	bl	10980 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ffd8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    ffdc:	4807      	ldr	r0, [pc, #28]	; (fffc <bt_le_adv_resume+0x64>)
    ffde:	f00b f8d5 	bl	1b18c <atomic_and>
	return (old & mask) != 0;
    ffe2:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    ffe6:	9801      	ldr	r0, [sp, #4]
    ffe8:	f000 fc9e 	bl	10928 <bt_conn_unref>
	if (persist_paused) {
    ffec:	b124      	cbz	r4, fff8 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ffee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fff2:	4802      	ldr	r0, [pc, #8]	; (fffc <bt_le_adv_resume+0x64>)
    fff4:	f00b f8bc 	bl	1b170 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    fff8:	b002      	add	sp, #8
    fffa:	bd10      	pop	{r4, pc}
    fffc:	20008028 	.word	0x20008028
   10000:	20008018 	.word	0x20008018

00010004 <enh_conn_complete>:
{
   10004:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   10008:	7804      	ldrb	r4, [r0, #0]
{
   1000a:	4605      	mov	r5, r0
	if (evt->status) {
   1000c:	2c00      	cmp	r4, #0
   1000e:	d048      	beq.n	100a2 <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10010:	2c3c      	cmp	r4, #60	; 0x3c
   10012:	d11a      	bne.n	1004a <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10014:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10018:	4872      	ldr	r0, [pc, #456]	; (101e4 <enh_conn_complete+0x1e0>)
   1001a:	f00b f8b7 	bl	1b18c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1001e:	2000      	movs	r0, #0
   10020:	f7fd ffa6 	bl	df70 <find_pending_connect.part.0>
		if (!conn) {
   10024:	4605      	mov	r5, r0
   10026:	b930      	cbnz	r0, 10036 <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
   10028:	2145      	movs	r1, #69	; 0x45
   1002a:	486f      	ldr	r0, [pc, #444]	; (101e8 <enh_conn_complete+0x1e4>)
}
   1002c:	b004      	add	sp, #16
   1002e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   10032:	f009 bd6a 	b.w	19b0a <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10036:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10038:	2100      	movs	r1, #0
   1003a:	f000 fca1 	bl	10980 <bt_conn_set_state>
		bt_conn_unref(conn);
   1003e:	4628      	mov	r0, r5
}
   10040:	b004      	add	sp, #16
   10042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10046:	f000 bc6f 	b.w	10928 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1004a:	2c02      	cmp	r4, #2
   1004c:	d121      	bne.n	10092 <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1004e:	2100      	movs	r1, #0
   10050:	2206      	movs	r2, #6
   10052:	4608      	mov	r0, r1
   10054:	f000 fdca 	bl	10bec <bt_conn_lookup_state_le>
	if (!conn) {
   10058:	4605      	mov	r5, r0
   1005a:	b948      	cbnz	r0, 10070 <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
   1005c:	2145      	movs	r1, #69	; 0x45
   1005e:	4863      	ldr	r0, [pc, #396]	; (101ec <enh_conn_complete+0x1e8>)
   10060:	f009 fd53 	bl	19b0a <printk>
			bt_le_scan_update(false);
   10064:	2000      	movs	r0, #0
   10066:	f7fe fdb3 	bl	ebd0 <bt_le_scan_update>
}
   1006a:	b004      	add	sp, #16
   1006c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   10070:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10072:	2100      	movs	r1, #0
   10074:	f000 fc84 	bl	10980 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10078:	1d28      	adds	r0, r5, #4
   1007a:	f00b f873 	bl	1b164 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1007e:	07c2      	lsls	r2, r0, #31
   10080:	d503      	bpl.n	1008a <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10082:	4621      	mov	r1, r4
   10084:	4628      	mov	r0, r5
   10086:	f000 fc7b 	bl	10980 <bt_conn_set_state>
	bt_conn_unref(conn);
   1008a:	4628      	mov	r0, r5
   1008c:	f000 fc4c 	bl	10928 <bt_conn_unref>
   10090:	e7e8      	b.n	10064 <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10092:	4622      	mov	r2, r4
   10094:	2157      	movs	r1, #87	; 0x57
   10096:	4856      	ldr	r0, [pc, #344]	; (101f0 <enh_conn_complete+0x1ec>)
}
   10098:	b004      	add	sp, #16
   1009a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1009e:	f009 bd34 	b.w	19b0a <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   100a2:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   100a4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   100a8:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   100aa:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   100ac:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   100ae:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   100b0:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   100b4:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   100b6:	d834      	bhi.n	10122 <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   100b8:	f00b f857 	bl	1b16a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   100bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   100c0:	2206      	movs	r2, #6
   100c2:	3b02      	subs	r3, #2
   100c4:	f105 0111 	add.w	r1, r5, #17
   100c8:	f10d 0001 	add.w	r0, sp, #1
   100cc:	f88d 3008 	strb.w	r3, [sp, #8]
   100d0:	f00a ff5b 	bl	1af8a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   100d4:	2301      	movs	r3, #1
   100d6:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   100da:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   100dc:	bb40      	cbnz	r0, 10130 <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   100de:	2206      	movs	r2, #6
   100e0:	a902      	add	r1, sp, #8
   100e2:	f000 fd83 	bl	10bec <bt_conn_lookup_state_le>
   100e6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   100e8:	78eb      	ldrb	r3, [r5, #3]
   100ea:	2b01      	cmp	r3, #1
   100ec:	d104      	bne.n	100f8 <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   100ee:	f06f 0140 	mvn.w	r1, #64	; 0x40
   100f2:	483c      	ldr	r0, [pc, #240]	; (101e4 <enh_conn_complete+0x1e0>)
   100f4:	f00b f84a 	bl	1b18c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   100f8:	78eb      	ldrb	r3, [r5, #3]
   100fa:	b923      	cbnz	r3, 10106 <enh_conn_complete+0x102>
   100fc:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10100:	483c      	ldr	r0, [pc, #240]	; (101f4 <enh_conn_complete+0x1f0>)
   10102:	f00b f843 	bl	1b18c <atomic_and>
	if (!conn) {
   10106:	b9dc      	cbnz	r4, 10140 <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
   10108:	4630      	mov	r0, r6
   1010a:	f7fd fc5d 	bl	d9c8 <bt_addr_le_str_real>
   1010e:	2145      	movs	r1, #69	; 0x45
   10110:	4602      	mov	r2, r0
   10112:	4839      	ldr	r0, [pc, #228]	; (101f8 <enh_conn_complete+0x1f4>)
   10114:	f009 fcf9 	bl	19b0a <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10118:	211f      	movs	r1, #31
   1011a:	4640      	mov	r0, r8
   1011c:	f00b f87d 	bl	1b21a <bt_hci_disconnect>
		return;
   10120:	e7a3      	b.n	1006a <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
   10122:	f00b f822 	bl	1b16a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10126:	4631      	mov	r1, r6
   10128:	4668      	mov	r0, sp
   1012a:	f00b f81e 	bl	1b16a <bt_addr_le_copy>
   1012e:	e7d4      	b.n	100da <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10130:	2801      	cmp	r0, #1
   10132:	d103      	bne.n	1013c <enh_conn_complete+0x138>
   10134:	a802      	add	r0, sp, #8
   10136:	f7fd ff1b 	bl	df70 <find_pending_connect.part.0>
   1013a:	e7d4      	b.n	100e6 <enh_conn_complete+0xe2>
	return NULL;
   1013c:	2400      	movs	r4, #0
   1013e:	e7d3      	b.n	100e8 <enh_conn_complete+0xe4>
	conn->handle = handle;
   10140:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10142:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10144:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10148:	f00b f80f 	bl	1b16a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1014c:	7e2a      	ldrb	r2, [r5, #24]
   1014e:	7deb      	ldrb	r3, [r5, #23]
   10150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10154:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10158:	7eaa      	ldrb	r2, [r5, #26]
   1015a:	7e6b      	ldrb	r3, [r5, #25]
   1015c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10160:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10164:	7f2a      	ldrb	r2, [r5, #28]
   10166:	7eeb      	ldrb	r3, [r5, #27]
   10168:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   1016c:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1016e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10172:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10174:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10176:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10178:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1017a:	d113      	bne.n	101a4 <enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   1017c:	4669      	mov	r1, sp
   1017e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10182:	f00a fff2 	bl	1b16a <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10186:	7a21      	ldrb	r1, [r4, #8]
   10188:	4d1c      	ldr	r5, [pc, #112]	; (101fc <enh_conn_complete+0x1f8>)
   1018a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   1018e:	4429      	add	r1, r5
   10190:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10194:	f00a ffe9 	bl	1b16a <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10198:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   1019c:	065b      	lsls	r3, r3, #25
   1019e:	d501      	bpl.n	101a4 <enh_conn_complete+0x1a0>
			bt_le_adv_resume();
   101a0:	f7ff fefa 	bl	ff98 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   101a4:	78e3      	ldrb	r3, [r4, #3]
   101a6:	b96b      	cbnz	r3, 101c4 <enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   101a8:	4669      	mov	r1, sp
   101aa:	f104 0096 	add.w	r0, r4, #150	; 0x96
   101ae:	f00a ffdc 	bl	1b16a <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   101b2:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   101b4:	4b11      	ldr	r3, [pc, #68]	; (101fc <enh_conn_complete+0x1f8>)
					&bt_dev.id_addr[conn->id]);
   101b6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   101ba:	4419      	add	r1, r3
   101bc:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   101c0:	f00a ffd3 	bl	1b16a <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   101c4:	2107      	movs	r1, #7
   101c6:	4620      	mov	r0, r4
   101c8:	f000 fbda 	bl	10980 <bt_conn_set_state>
	conn_auto_initiate(conn);
   101cc:	4620      	mov	r0, r4
   101ce:	f7fe ff1f 	bl	f010 <conn_auto_initiate>
	bt_conn_unref(conn);
   101d2:	4620      	mov	r0, r4
   101d4:	f000 fba8 	bl	10928 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   101d8:	78e3      	ldrb	r3, [r4, #3]
   101da:	2b00      	cmp	r3, #0
   101dc:	f47f af45 	bne.w	1006a <enh_conn_complete+0x66>
   101e0:	e740      	b.n	10064 <enh_conn_complete+0x60>
   101e2:	bf00      	nop
   101e4:	20008028 	.word	0x20008028
   101e8:	000205d0 	.word	0x000205d0
   101ec:	000205f1 	.word	0x000205f1
   101f0:	00020613 	.word	0x00020613
   101f4:	20008094 	.word	0x20008094
   101f8:	00020631 	.word	0x00020631
   101fc:	20008000 	.word	0x20008000

00010200 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10200:	b570      	push	{r4, r5, r6, lr}
   10202:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10204:	482e      	ldr	r0, [pc, #184]	; (102c0 <bt_le_scan_start+0xc0>)
   10206:	f00a ffad 	bl	1b164 <atomic_get>
   1020a:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1020c:	0781      	lsls	r1, r0, #30
   1020e:	d554      	bpl.n	102ba <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10210:	782a      	ldrb	r2, [r5, #0]
   10212:	2a01      	cmp	r2, #1
   10214:	d903      	bls.n	1021e <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10216:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   1021a:	4620      	mov	r0, r4
   1021c:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1021e:	686b      	ldr	r3, [r5, #4]
   10220:	f033 030f 	bics.w	r3, r3, #15
   10224:	d1f7      	bne.n	10216 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10226:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1022a:	8928      	ldrh	r0, [r5, #8]
   1022c:	1f03      	subs	r3, r0, #4
   1022e:	b29b      	uxth	r3, r3
   10230:	42a3      	cmp	r3, r4
   10232:	d8f0      	bhi.n	10216 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10234:	8969      	ldrh	r1, [r5, #10]
   10236:	1f0b      	subs	r3, r1, #4
   10238:	b29b      	uxth	r3, r3
   1023a:	42a3      	cmp	r3, r4
   1023c:	d8eb      	bhi.n	10216 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   1023e:	4288      	cmp	r0, r1
   10240:	d3e9      	bcc.n	10216 <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10242:	b94a      	cbnz	r2, 10258 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10244:	2140      	movs	r1, #64	; 0x40
   10246:	481e      	ldr	r0, [pc, #120]	; (102c0 <bt_le_scan_start+0xc0>)
   10248:	f00a ff92 	bl	1b170 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1024c:	ea10 0301 	ands.w	r3, r0, r1
   10250:	d007      	beq.n	10262 <bt_le_scan_start+0x62>
		return -EALREADY;
   10252:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10256:	e7e0      	b.n	1021a <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10258:	f7fe fc2e 	bl	eab8 <bt_le_scan_random_addr_check>
   1025c:	2800      	cmp	r0, #0
   1025e:	d1f1      	bne.n	10244 <bt_le_scan_start+0x44>
   10260:	e7d9      	b.n	10216 <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10262:	4817      	ldr	r0, [pc, #92]	; (102c0 <bt_le_scan_start+0xc0>)
   10264:	f00a ff7e 	bl	1b164 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10268:	0682      	lsls	r2, r0, #26
   1026a:	d50a      	bpl.n	10282 <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   1026c:	4618      	mov	r0, r3
   1026e:	f7fe fa01 	bl	e674 <set_le_scan_enable_legacy>
		if (err) {
   10272:	4604      	mov	r4, r0
   10274:	b128      	cbz	r0, 10282 <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10276:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1027a:	4811      	ldr	r0, [pc, #68]	; (102c0 <bt_le_scan_start+0xc0>)
   1027c:	f00a ff86 	bl	1b18c <atomic_and>
		return err;
   10280:	e7cb      	b.n	1021a <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10282:	686a      	ldr	r2, [r5, #4]
   10284:	2108      	movs	r1, #8
   10286:	480e      	ldr	r0, [pc, #56]	; (102c0 <bt_le_scan_start+0xc0>)
   10288:	f002 0201 	and.w	r2, r2, #1
   1028c:	f00a ff89 	bl	1b1a2 <atomic_set_bit_to>
		if (param->timeout) {
   10290:	89ab      	ldrh	r3, [r5, #12]
   10292:	b13b      	cbz	r3, 102a4 <bt_le_scan_start+0xa4>
   10294:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10298:	4809      	ldr	r0, [pc, #36]	; (102c0 <bt_le_scan_start+0xc0>)
   1029a:	f00a ff77 	bl	1b18c <atomic_and>
			return -ENOTSUP;
   1029e:	f06f 0422 	mvn.w	r4, #34	; 0x22
   102a2:	e7ba      	b.n	1021a <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   102a4:	896a      	ldrh	r2, [r5, #10]
   102a6:	8929      	ldrh	r1, [r5, #8]
   102a8:	7828      	ldrb	r0, [r5, #0]
   102aa:	f7fe fba7 	bl	e9fc <start_le_scan_legacy>
	if (err) {
   102ae:	4604      	mov	r4, r0
   102b0:	2800      	cmp	r0, #0
   102b2:	d1e0      	bne.n	10276 <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   102b4:	4b03      	ldr	r3, [pc, #12]	; (102c4 <bt_le_scan_start+0xc4>)
   102b6:	601e      	str	r6, [r3, #0]
	return 0;
   102b8:	e7af      	b.n	1021a <bt_le_scan_start+0x1a>
		return -EAGAIN;
   102ba:	f06f 040a 	mvn.w	r4, #10
   102be:	e7ac      	b.n	1021a <bt_le_scan_start+0x1a>
   102c0:	20008094 	.word	0x20008094
   102c4:	2000a994 	.word	0x2000a994

000102c8 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   102c8:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   102ca:	f06f 0140 	mvn.w	r1, #64	; 0x40
   102ce:	4807      	ldr	r0, [pc, #28]	; (102ec <bt_le_scan_stop+0x24>)
   102d0:	f00a ff5c 	bl	1b18c <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   102d4:	0643      	lsls	r3, r0, #25
   102d6:	d506      	bpl.n	102e6 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   102d8:	2000      	movs	r0, #0
   102da:	4b05      	ldr	r3, [pc, #20]	; (102f0 <bt_le_scan_stop+0x28>)
   102dc:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   102de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   102e2:	f7fe bc75 	b.w	ebd0 <bt_le_scan_update>
}
   102e6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   102ea:	bd08      	pop	{r3, pc}
   102ec:	20008094 	.word	0x20008094
   102f0:	2000a994 	.word	0x2000a994

000102f4 <bt_le_scan_cb_register>:
	parent->next = child;
   102f4:	2300      	movs	r3, #0
   102f6:	6083      	str	r3, [r0, #8]
	return list->tail;
   102f8:	4b05      	ldr	r3, [pc, #20]	; (10310 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   102fa:	f100 0208 	add.w	r2, r0, #8
   102fe:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10300:	b911      	cbnz	r1, 10308 <bt_le_scan_cb_register+0x14>
	list->head = node;
   10302:	e9c3 2200 	strd	r2, r2, [r3]
}
   10306:	4770      	bx	lr
	parent->next = child;
   10308:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1030a:	605a      	str	r2, [r3, #4]
}
   1030c:	4770      	bx	lr
   1030e:	bf00      	nop
   10310:	2000a98c 	.word	0x2000a98c

00010314 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10314:	b5f0      	push	{r4, r5, r6, r7, lr}
   10316:	b08d      	sub	sp, #52	; 0x34
   10318:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1031a:	2700      	movs	r7, #0
   1031c:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1031e:	2100      	movs	r1, #0
   10320:	f242 0018 	movw	r0, #8216	; 0x2018
   10324:	aa02      	add	r2, sp, #8
   10326:	f7fe f8f5 	bl	e514 <bt_hci_cmd_send_sync>
		if (ret) {
   1032a:	4604      	mov	r4, r0
   1032c:	bb58      	cbnz	r0, 10386 <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   1032e:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10330:	2208      	movs	r2, #8
   10332:	6899      	ldr	r1, [r3, #8]
   10334:	4630      	mov	r0, r6
   10336:	3101      	adds	r1, #1
   10338:	f00a fe27 	bl	1af8a <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1033c:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   1033e:	9802      	ldr	r0, [sp, #8]
   10340:	f004 fb70 	bl	14a24 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10344:	2f04      	cmp	r7, #4
   10346:	f106 0608 	add.w	r6, r6, #8
   1034a:	d1e8      	bne.n	1031e <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   1034c:	f00d f82e 	bl	1d3ac <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   10350:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   10354:	fba0 3206 	umull	r3, r2, r0, r6
   10358:	fb06 2101 	mla	r1, r6, r1, r2
   1035c:	0bdb      	lsrs	r3, r3, #15
   1035e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10362:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   10364:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10368:	2308      	movs	r3, #8
   1036a:	2220      	movs	r2, #32
   1036c:	9300      	str	r3, [sp, #0]
   1036e:	4629      	mov	r1, r5
   10370:	4806      	ldr	r0, [pc, #24]	; (1038c <prng_reseed.constprop.0+0x78>)
   10372:	446b      	add	r3, sp
   10374:	f00a fcbf 	bl	1acf6 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   10378:	b928      	cbnz	r0, 10386 <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   1037a:	2145      	movs	r1, #69	; 0x45
   1037c:	4804      	ldr	r0, [pc, #16]	; (10390 <prng_reseed.constprop.0+0x7c>)
   1037e:	f009 fbc4 	bl	19b0a <printk>
		return -EIO;
   10382:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   10386:	4620      	mov	r0, r4
   10388:	b00d      	add	sp, #52	; 0x34
   1038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1038c:	20008a20 	.word	0x20008a20
   10390:	00020663 	.word	0x00020663

00010394 <prng_init>:

int prng_init(void)
{
   10394:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10396:	4b13      	ldr	r3, [pc, #76]	; (103e4 <prng_init+0x50>)
   10398:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   1039c:	2b00      	cmp	r3, #0
   1039e:	da1d      	bge.n	103dc <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   103a0:	2100      	movs	r1, #0
   103a2:	f242 0018 	movw	r0, #8216	; 0x2018
   103a6:	aa01      	add	r2, sp, #4
   103a8:	f7fe f8b4 	bl	e514 <bt_hci_cmd_send_sync>
	if (ret) {
   103ac:	b988      	cbnz	r0, 103d2 <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   103ae:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   103b0:	2208      	movs	r2, #8
   103b2:	6899      	ldr	r1, [r3, #8]
   103b4:	480c      	ldr	r0, [pc, #48]	; (103e8 <prng_init+0x54>)
   103b6:	3101      	adds	r1, #1
   103b8:	f00a fc7d 	bl	1acb6 <tc_hmac_prng_init>
   103bc:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   103be:	9801      	ldr	r0, [sp, #4]
   103c0:	f004 fb30 	bl	14a24 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   103c4:	b93c      	cbnz	r4, 103d6 <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   103c6:	4809      	ldr	r0, [pc, #36]	; (103ec <prng_init+0x58>)
   103c8:	2145      	movs	r1, #69	; 0x45
   103ca:	f009 fb9e 	bl	19b0a <printk>
		return -EIO;
   103ce:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   103d2:	b002      	add	sp, #8
   103d4:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   103d6:	f7ff ff9d 	bl	10314 <prng_reseed.constprop.0>
   103da:	e7fa      	b.n	103d2 <prng_init+0x3e>
		return -ENOTSUP;
   103dc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   103e0:	e7f7      	b.n	103d2 <prng_init+0x3e>
   103e2:	bf00      	nop
   103e4:	20008000 	.word	0x20008000
   103e8:	20008a20 	.word	0x20008a20
   103ec:	0002067f 	.word	0x0002067f

000103f0 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   103f0:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   103f2:	4a0a      	ldr	r2, [pc, #40]	; (1041c <bt_rand+0x2c>)
{
   103f4:	4604      	mov	r4, r0
   103f6:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   103f8:	f00a fc96 	bl	1ad28 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   103fc:	1c43      	adds	r3, r0, #1
   103fe:	d107      	bne.n	10410 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   10400:	f7ff ff88 	bl	10314 <prng_reseed.constprop.0>
		if (ret) {
   10404:	b948      	cbnz	r0, 1041a <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   10406:	4629      	mov	r1, r5
   10408:	4620      	mov	r0, r4
   1040a:	4a04      	ldr	r2, [pc, #16]	; (1041c <bt_rand+0x2c>)
   1040c:	f00a fc8c 	bl	1ad28 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   10410:	2801      	cmp	r0, #1
   10412:	bf14      	ite	ne
   10414:	f06f 0004 	mvnne.w	r0, #4
   10418:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   1041a:	bd38      	pop	{r3, r4, r5, pc}
   1041c:	20008a20 	.word	0x20008a20

00010420 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10420:	2300      	movs	r3, #0
{
   10422:	4601      	mov	r1, r0
	tx->user_data = NULL;
   10424:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   10428:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1042a:	4801      	ldr	r0, [pc, #4]	; (10430 <tx_free+0x10>)
   1042c:	f00c beea 	b.w	1d204 <k_queue_append>
   10430:	20008694 	.word	0x20008694

00010434 <notify_connected>:
{
   10434:	b538      	push	{r3, r4, r5, lr}
   10436:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   10438:	4b08      	ldr	r3, [pc, #32]	; (1045c <notify_connected+0x28>)
   1043a:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   1043c:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   1043e:	b92d      	cbnz	r5, 1044c <notify_connected+0x18>
	if (!conn->err) {
   10440:	b951      	cbnz	r1, 10458 <notify_connected+0x24>
		bt_gatt_connected(conn);
   10442:	4620      	mov	r0, r4
}
   10444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   10448:	f003 bfe6 	b.w	14418 <bt_gatt_connected>
		if (cb->connected) {
   1044c:	682b      	ldr	r3, [r5, #0]
   1044e:	b10b      	cbz	r3, 10454 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   10450:	4620      	mov	r0, r4
   10452:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10454:	692d      	ldr	r5, [r5, #16]
   10456:	e7f1      	b.n	1043c <notify_connected+0x8>
}
   10458:	bd38      	pop	{r3, r4, r5, pc}
   1045a:	bf00      	nop
   1045c:	2000a998 	.word	0x2000a998

00010460 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   10460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10464:	4604      	mov	r4, r0
   10466:	460e      	mov	r6, r1
   10468:	4691      	mov	r9, r2
   1046a:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1046c:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   1046e:	f04f 33ff 	mov.w	r3, #4294967295
   10472:	f04f 32ff 	mov.w	r2, #4294967295
   10476:	4847      	ldr	r0, [pc, #284]	; (10594 <send_frag+0x134>)
   10478:	f008 f9ae 	bl	187d8 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   1047c:	7aa3      	ldrb	r3, [r4, #10]
   1047e:	2b07      	cmp	r3, #7
   10480:	d14b      	bne.n	1051a <send_frag+0xba>
	__asm__ volatile(
   10482:	f04f 0320 	mov.w	r3, #32
   10486:	f3ef 8211 	mrs	r2, BASEPRI
   1048a:	f383 8811 	msr	BASEPRI, r3
   1048e:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   10492:	69a3      	ldr	r3, [r4, #24]
   10494:	2d00      	cmp	r5, #0
   10496:	d052      	beq.n	1053e <send_frag+0xde>
	parent->next = child;
   10498:	2100      	movs	r1, #0
   1049a:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1049c:	2b00      	cmp	r3, #0
   1049e:	d14b      	bne.n	10538 <send_frag+0xd8>
	list->head = node;
   104a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   104a4:	f382 8811 	msr	BASEPRI, r2
   104a8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   104ac:	2104      	movs	r1, #4
   104ae:	f106 0008 	add.w	r0, r6, #8
   104b2:	f004 fb75 	bl	14ba0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   104b6:	8823      	ldrh	r3, [r4, #0]
   104b8:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   104bc:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   104c0:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   104c2:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   104c6:	3b04      	subs	r3, #4
   104c8:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   104ca:	2302      	movs	r3, #2
	return bt_send(buf);
   104cc:	4630      	mov	r0, r6
   104ce:	7533      	strb	r3, [r6, #20]
   104d0:	f7fe fd14 	bl	eefc <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   104d4:	4602      	mov	r2, r0
   104d6:	2800      	cmp	r0, #0
   104d8:	d059      	beq.n	1058e <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   104da:	2145      	movs	r1, #69	; 0x45
   104dc:	482e      	ldr	r0, [pc, #184]	; (10598 <send_frag+0x138>)
   104de:	f009 fb14 	bl	19b0a <printk>
	__asm__ volatile(
   104e2:	f04f 0320 	mov.w	r3, #32
   104e6:	f3ef 8911 	mrs	r9, BASEPRI
   104ea:	f383 8811 	msr	BASEPRI, r3
   104ee:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   104f2:	2d00      	cmp	r5, #0
   104f4:	d037      	beq.n	10566 <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   104f6:	2200      	movs	r2, #0
	return list->head;
   104f8:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   104fa:	b153      	cbz	r3, 10512 <send_frag+0xb2>
   104fc:	429d      	cmp	r5, r3
   104fe:	d12f      	bne.n	10560 <send_frag+0x100>
	return node->next;
   10500:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   10502:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   10504:	bb3a      	cbnz	r2, 10556 <send_frag+0xf6>
   10506:	42a9      	cmp	r1, r5
	list->head = node;
   10508:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1050a:	d100      	bne.n	1050e <send_frag+0xae>
	list->tail = node;
   1050c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1050e:	2300      	movs	r3, #0
   10510:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   10512:	f389 8811 	msr	BASEPRI, r9
   10516:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1051a:	481e      	ldr	r0, [pc, #120]	; (10594 <send_frag+0x134>)
   1051c:	f008 f920 	bl	18760 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   10520:	b115      	cbz	r5, 10528 <send_frag+0xc8>
		tx_free(tx);
   10522:	4628      	mov	r0, r5
   10524:	f7ff ff7c 	bl	10420 <tx_free>
	}

	if (always_consume) {
   10528:	b11f      	cbz	r7, 10532 <send_frag+0xd2>
		net_buf_unref(buf);
   1052a:	4630      	mov	r0, r6
   1052c:	f004 fa7a 	bl	14a24 <net_buf_unref>
	}
	return false;
   10530:	2700      	movs	r7, #0
}
   10532:	4638      	mov	r0, r7
   10534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10538:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1053a:	61a5      	str	r5, [r4, #24]
}
   1053c:	e7b2      	b.n	104a4 <send_frag+0x44>
		if (tail_tx) {
   1053e:	b133      	cbz	r3, 1054e <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   10540:	f103 080c 	add.w	r8, r3, #12
   10544:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   10546:	3301      	adds	r3, #1
   10548:	f8c8 3000 	str.w	r3, [r8]
   1054c:	e7aa      	b.n	104a4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1054e:	69e3      	ldr	r3, [r4, #28]
   10550:	f104 081c 	add.w	r8, r4, #28
   10554:	e7f7      	b.n	10546 <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   10556:	42a9      	cmp	r1, r5
	parent->next = child;
   10558:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1055a:	bf08      	it	eq
   1055c:	61a2      	streq	r2, [r4, #24]
}
   1055e:	e7d6      	b.n	1050e <send_frag+0xae>
	return node->next;
   10560:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10562:	681b      	ldr	r3, [r3, #0]
   10564:	e7c9      	b.n	104fa <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   10566:	f8d8 3000 	ldr.w	r3, [r8]
   1056a:	b953      	cbnz	r3, 10582 <send_frag+0x122>
   1056c:	490b      	ldr	r1, [pc, #44]	; (1059c <send_frag+0x13c>)
   1056e:	480c      	ldr	r0, [pc, #48]	; (105a0 <send_frag+0x140>)
   10570:	f240 4292 	movw	r2, #1170	; 0x492
   10574:	f009 fac9 	bl	19b0a <printk>
   10578:	f240 4192 	movw	r1, #1170	; 0x492
   1057c:	4807      	ldr	r0, [pc, #28]	; (1059c <send_frag+0x13c>)
   1057e:	f009 fd6a 	bl	1a056 <assert_post_action>
			(*pending_no_cb)--;
   10582:	f8d8 3000 	ldr.w	r3, [r8]
   10586:	3b01      	subs	r3, #1
   10588:	f8c8 3000 	str.w	r3, [r8]
   1058c:	e7c1      	b.n	10512 <send_frag+0xb2>
	return true;
   1058e:	2701      	movs	r7, #1
   10590:	e7cf      	b.n	10532 <send_frag+0xd2>
   10592:	bf00      	nop
   10594:	200080c8 	.word	0x200080c8
   10598:	0002020c 	.word	0x0002020c
   1059c:	000206a8 	.word	0x000206a8
   105a0:	0001ecfc 	.word	0x0001ecfc

000105a4 <bt_conn_get_pkts>:
}
   105a4:	4800      	ldr	r0, [pc, #0]	; (105a8 <bt_conn_get_pkts+0x4>)
   105a6:	4770      	bx	lr
   105a8:	200080c8 	.word	0x200080c8

000105ac <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   105ac:	1d03      	adds	r3, r0, #4
{
   105ae:	b570      	push	{r4, r5, r6, lr}
   105b0:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   105b2:	4618      	mov	r0, r3
   105b4:	f00a feee 	bl	1b394 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   105b8:	0582      	lsls	r2, r0, #22
   105ba:	d515      	bpl.n	105e8 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   105bc:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   105c0:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   105c4:	4291      	cmp	r1, r2
   105c6:	d80f      	bhi.n	105e8 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   105c8:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   105cc:	4291      	cmp	r1, r2
   105ce:	d30b      	bcc.n	105e8 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   105d0:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   105d4:	4291      	cmp	r1, r2
   105d6:	d107      	bne.n	105e8 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   105d8:	e8d3 2fef 	ldaex	r2, [r3]
   105dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   105e0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   105e4:	2900      	cmp	r1, #0
   105e6:	d1f7      	bne.n	105d8 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   105e8:	4b07      	ldr	r3, [pc, #28]	; (10608 <notify_le_param_updated+0x5c>)
   105ea:	681d      	ldr	r5, [r3, #0]
   105ec:	b905      	cbnz	r5, 105f0 <notify_le_param_updated+0x44>
}
   105ee:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   105f0:	68ee      	ldr	r6, [r5, #12]
   105f2:	b13e      	cbz	r6, 10604 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   105f4:	4620      	mov	r0, r4
   105f6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   105fa:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   105fe:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   10602:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   10604:	692d      	ldr	r5, [r5, #16]
   10606:	e7f1      	b.n	105ec <notify_le_param_updated+0x40>
   10608:	2000a998 	.word	0x2000a998

0001060c <le_param_req>:
{
   1060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1060e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   10610:	4608      	mov	r0, r1
{
   10612:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10614:	f00a fe1c 	bl	1b250 <bt_le_conn_params_valid>
   10618:	4604      	mov	r4, r0
   1061a:	b910      	cbnz	r0, 10622 <le_param_req+0x16>
		return false;
   1061c:	2400      	movs	r4, #0
}
   1061e:	4620      	mov	r0, r4
   10620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   10622:	4b09      	ldr	r3, [pc, #36]	; (10648 <le_param_req+0x3c>)
   10624:	681e      	ldr	r6, [r3, #0]
   10626:	2e00      	cmp	r6, #0
   10628:	d0f9      	beq.n	1061e <le_param_req+0x12>
		if (!cb->le_param_req) {
   1062a:	68b3      	ldr	r3, [r6, #8]
   1062c:	b90b      	cbnz	r3, 10632 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1062e:	6936      	ldr	r6, [r6, #16]
   10630:	e7f9      	b.n	10626 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   10632:	4629      	mov	r1, r5
   10634:	4638      	mov	r0, r7
   10636:	4798      	blx	r3
   10638:	2800      	cmp	r0, #0
   1063a:	d0ef      	beq.n	1061c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   1063c:	4628      	mov	r0, r5
   1063e:	f00a fe07 	bl	1b250 <bt_le_conn_params_valid>
   10642:	2800      	cmp	r0, #0
   10644:	d1f3      	bne.n	1062e <le_param_req+0x22>
   10646:	e7e9      	b.n	1061c <le_param_req+0x10>
   10648:	2000a998 	.word	0x2000a998

0001064c <bt_conn_cb_register>:
	cb->_next = callback_list;
   1064c:	4b02      	ldr	r3, [pc, #8]	; (10658 <bt_conn_cb_register+0xc>)
   1064e:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   10650:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   10652:	6102      	str	r2, [r0, #16]
}
   10654:	4770      	bx	lr
   10656:	bf00      	nop
   10658:	2000a998 	.word	0x2000a998

0001065c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   1065c:	b570      	push	{r4, r5, r6, lr}
   1065e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   10660:	f100 0634 	add.w	r6, r0, #52	; 0x34
   10664:	2200      	movs	r2, #0
   10666:	2300      	movs	r3, #0
   10668:	4630      	mov	r0, r6
   1066a:	f004 f959 	bl	14920 <net_buf_get>
   1066e:	4605      	mov	r5, r0
   10670:	bb28      	cbnz	r0, 106be <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   10672:	6963      	ldr	r3, [r4, #20]
   10674:	b153      	cbz	r3, 1068c <conn_cleanup+0x30>
   10676:	4916      	ldr	r1, [pc, #88]	; (106d0 <conn_cleanup+0x74>)
   10678:	4816      	ldr	r0, [pc, #88]	; (106d4 <conn_cleanup+0x78>)
   1067a:	f240 520c 	movw	r2, #1292	; 0x50c
   1067e:	f009 fa44 	bl	19b0a <printk>
   10682:	f240 510c 	movw	r1, #1292	; 0x50c
   10686:	4812      	ldr	r0, [pc, #72]	; (106d0 <conn_cleanup+0x74>)
   10688:	f009 fce5 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1068c:	69e3      	ldr	r3, [r4, #28]
   1068e:	b153      	cbz	r3, 106a6 <conn_cleanup+0x4a>
   10690:	490f      	ldr	r1, [pc, #60]	; (106d0 <conn_cleanup+0x74>)
   10692:	4810      	ldr	r0, [pc, #64]	; (106d4 <conn_cleanup+0x78>)
   10694:	f240 520d 	movw	r2, #1293	; 0x50d
   10698:	f009 fa37 	bl	19b0a <printk>
   1069c:	f240 510d 	movw	r1, #1293	; 0x50d
   106a0:	480b      	ldr	r0, [pc, #44]	; (106d0 <conn_cleanup+0x74>)
   106a2:	f009 fcd8 	bl	1a056 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   106a6:	4620      	mov	r0, r4
   106a8:	f00a fec1 	bl	1b42e <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   106ac:	f104 0158 	add.w	r1, r4, #88	; 0x58
   106b0:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   106b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106b6:	2300      	movs	r3, #0
   106b8:	4807      	ldr	r0, [pc, #28]	; (106d8 <conn_cleanup+0x7c>)
   106ba:	f008 bab3 	b.w	18c24 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   106be:	6968      	ldr	r0, [r5, #20]
   106c0:	b108      	cbz	r0, 106c6 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   106c2:	f7ff fead 	bl	10420 <tx_free>
		net_buf_unref(buf);
   106c6:	4628      	mov	r0, r5
   106c8:	f004 f9ac 	bl	14a24 <net_buf_unref>
   106cc:	e7ca      	b.n	10664 <conn_cleanup+0x8>
   106ce:	bf00      	nop
   106d0:	000206a8 	.word	0x000206a8
   106d4:	0001ecfc 	.word	0x0001ecfc
   106d8:	2000a3b0 	.word	0x2000a3b0

000106dc <bt_conn_recv>:
{
   106dc:	b570      	push	{r4, r5, r6, lr}
   106de:	4616      	mov	r6, r2
   106e0:	4604      	mov	r4, r0
   106e2:	460d      	mov	r5, r1
	tx_notify(conn);
   106e4:	f00a fe59 	bl	1b39a <tx_notify>
	switch (flags) {
   106e8:	2e01      	cmp	r6, #1
   106ea:	d01f      	beq.n	1072c <bt_conn_recv+0x50>
   106ec:	2e02      	cmp	r6, #2
   106ee:	d140      	bne.n	10772 <bt_conn_recv+0x96>
		if (conn->rx) {
   106f0:	6923      	ldr	r3, [r4, #16]
   106f2:	b133      	cbz	r3, 10702 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   106f4:	4826      	ldr	r0, [pc, #152]	; (10790 <bt_conn_recv+0xb4>)
   106f6:	2145      	movs	r1, #69	; 0x45
   106f8:	f009 fa07 	bl	19b0a <printk>
			bt_conn_reset_rx_state(conn);
   106fc:	4620      	mov	r0, r4
   106fe:	f00a fe96 	bl	1b42e <bt_conn_reset_rx_state>
		conn->rx = buf;
   10702:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   10704:	6921      	ldr	r1, [r4, #16]
   10706:	898a      	ldrh	r2, [r1, #12]
   10708:	2a01      	cmp	r2, #1
   1070a:	d93f      	bls.n	1078c <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1070c:	688b      	ldr	r3, [r1, #8]
   1070e:	881b      	ldrh	r3, [r3, #0]
   10710:	3304      	adds	r3, #4
   10712:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   10714:	429a      	cmp	r2, r3
   10716:	d339      	bcc.n	1078c <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   10718:	d931      	bls.n	1077e <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   1071a:	481e      	ldr	r0, [pc, #120]	; (10794 <bt_conn_recv+0xb8>)
   1071c:	2145      	movs	r1, #69	; 0x45
   1071e:	f009 f9f4 	bl	19b0a <printk>
		bt_conn_reset_rx_state(conn);
   10722:	4620      	mov	r0, r4
}
   10724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   10728:	f00a be81 	b.w	1b42e <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1072c:	6920      	ldr	r0, [r4, #16]
   1072e:	b938      	cbnz	r0, 10740 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   10730:	2145      	movs	r1, #69	; 0x45
   10732:	4819      	ldr	r0, [pc, #100]	; (10798 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   10734:	f009 f9e9 	bl	19b0a <printk>
			bt_conn_reset_rx_state(conn);
   10738:	4620      	mov	r0, r4
   1073a:	f00a fe78 	bl	1b42e <bt_conn_reset_rx_state>
   1073e:	e001      	b.n	10744 <bt_conn_recv+0x68>
		if (!buf->len) {
   10740:	89ae      	ldrh	r6, [r5, #12]
   10742:	b926      	cbnz	r6, 1074e <bt_conn_recv+0x72>
			net_buf_unref(buf);
   10744:	4628      	mov	r0, r5
}
   10746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1074a:	f004 b96b 	b.w	14a24 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1074e:	3008      	adds	r0, #8
   10750:	f00b ff15 	bl	1c57e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   10754:	4286      	cmp	r6, r0
   10756:	d902      	bls.n	1075e <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   10758:	2145      	movs	r1, #69	; 0x45
   1075a:	4810      	ldr	r0, [pc, #64]	; (1079c <bt_conn_recv+0xc0>)
   1075c:	e7ea      	b.n	10734 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1075e:	6920      	ldr	r0, [r4, #16]
   10760:	89aa      	ldrh	r2, [r5, #12]
   10762:	68a9      	ldr	r1, [r5, #8]
   10764:	3008      	adds	r0, #8
   10766:	f00b ff12 	bl	1c58e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1076a:	4628      	mov	r0, r5
   1076c:	f004 f95a 	bl	14a24 <net_buf_unref>
		break;
   10770:	e7c8      	b.n	10704 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   10772:	4632      	mov	r2, r6
   10774:	2145      	movs	r1, #69	; 0x45
   10776:	480a      	ldr	r0, [pc, #40]	; (107a0 <bt_conn_recv+0xc4>)
   10778:	f009 f9c7 	bl	19b0a <printk>
		bt_conn_reset_rx_state(conn);
   1077c:	e7dc      	b.n	10738 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   1077e:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   10780:	4620      	mov	r0, r4
	conn->rx = NULL;
   10782:	6123      	str	r3, [r4, #16]
}
   10784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   10788:	f000 bed0 	b.w	1152c <bt_l2cap_recv>
}
   1078c:	bd70      	pop	{r4, r5, r6, pc}
   1078e:	bf00      	nop
   10790:	000206d8 	.word	0x000206d8
   10794:	0002076c 	.word	0x0002076c
   10798:	000206fa 	.word	0x000206fa
   1079c:	0002071d 	.word	0x0002071d
   107a0:	00020749 	.word	0x00020749

000107a4 <bt_conn_send_cb>:
{
   107a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107a8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   107aa:	7a83      	ldrb	r3, [r0, #10]
{
   107ac:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   107ae:	2b07      	cmp	r3, #7
{
   107b0:	460d      	mov	r5, r1
   107b2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   107b4:	d009      	beq.n	107ca <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   107b6:	4821      	ldr	r0, [pc, #132]	; (1083c <bt_conn_send_cb+0x98>)
   107b8:	2145      	movs	r1, #69	; 0x45
   107ba:	f009 f9a6 	bl	19b0a <printk>
		net_buf_unref(buf);
   107be:	4628      	mov	r0, r5
   107c0:	f004 f930 	bl	14a24 <net_buf_unref>
			return -ENOTCONN;
   107c4:	f06f 0038 	mvn.w	r0, #56	; 0x38
   107c8:	e01a      	b.n	10800 <bt_conn_send_cb+0x5c>
	if (cb) {
   107ca:	2a00      	cmp	r2, #0
   107cc:	d034      	beq.n	10838 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   107ce:	f007 ffc1 	bl	18754 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   107d2:	4b1b      	ldr	r3, [pc, #108]	; (10840 <bt_conn_send_cb+0x9c>)
   107d4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   107d6:	481b      	ldr	r0, [pc, #108]	; (10844 <bt_conn_send_cb+0xa0>)
   107d8:	bf07      	ittee	eq
   107da:	2200      	moveq	r2, #0
   107dc:	2300      	moveq	r3, #0
   107de:	f04f 32ff 	movne.w	r2, #4294967295
   107e2:	f04f 33ff 	movne.w	r3, #4294967295
   107e6:	f006 ff4f 	bl	17688 <z_impl_k_queue_get>
   107ea:	4604      	mov	r4, r0
		if (!tx) {
   107ec:	b950      	cbnz	r0, 10804 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   107ee:	2145      	movs	r1, #69	; 0x45
   107f0:	4815      	ldr	r0, [pc, #84]	; (10848 <bt_conn_send_cb+0xa4>)
   107f2:	f009 f98a 	bl	19b0a <printk>
			net_buf_unref(buf);
   107f6:	4628      	mov	r0, r5
   107f8:	f004 f914 	bl	14a24 <net_buf_unref>
			return -ENOBUFS;
   107fc:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   10800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   10804:	7ab3      	ldrb	r3, [r6, #10]
   10806:	2b07      	cmp	r3, #7
   10808:	d00a      	beq.n	10820 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   1080a:	2157      	movs	r1, #87	; 0x57
   1080c:	480f      	ldr	r0, [pc, #60]	; (1084c <bt_conn_send_cb+0xa8>)
   1080e:	f009 f97c 	bl	19b0a <printk>
			net_buf_unref(buf);
   10812:	4628      	mov	r0, r5
   10814:	f004 f906 	bl	14a24 <net_buf_unref>
			tx_free(tx);
   10818:	4620      	mov	r0, r4
   1081a:	f7ff fe01 	bl	10420 <tx_free>
   1081e:	e7d1      	b.n	107c4 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   10820:	2300      	movs	r3, #0
		tx->user_data = user_data;
   10822:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   10826:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   10828:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1082a:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1082e:	4629      	mov	r1, r5
   10830:	f004 f8ca 	bl	149c8 <net_buf_put>
	return 0;
   10834:	2000      	movs	r0, #0
   10836:	e7e3      	b.n	10800 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   10838:	614a      	str	r2, [r1, #20]
   1083a:	e7f6      	b.n	1082a <bt_conn_send_cb+0x86>
   1083c:	0002078c 	.word	0x0002078c
   10840:	2000a3d0 	.word	0x2000a3d0
   10844:	20008694 	.word	0x20008694
   10848:	000207a0 	.word	0x000207a0
   1084c:	000207c3 	.word	0x000207c3

00010850 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   10850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   10854:	2500      	movs	r5, #0
   10856:	4b1c      	ldr	r3, [pc, #112]	; (108c8 <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10858:	462a      	mov	r2, r5
   1085a:	2101      	movs	r1, #1
{
   1085c:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   1085e:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10860:	2601      	movs	r6, #1
   10862:	f008 ff03 	bl	1966c <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   10866:	f04f 0914 	mov.w	r9, #20
   1086a:	4c18      	ldr	r4, [pc, #96]	; (108cc <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   1086c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   10870:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   10874:	f00a fd8e 	bl	1b394 <atomic_get>
   10878:	b178      	cbz	r0, 1089a <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1087a:	7aa3      	ldrb	r3, [r4, #10]
   1087c:	b9ab      	cbnz	r3, 108aa <bt_conn_prepare_events+0x5a>
   1087e:	1d23      	adds	r3, r4, #4
   10880:	e8d3 2fef 	ldaex	r2, [r3]
   10884:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   10888:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1088c:	2800      	cmp	r0, #0
   1088e:	d1f7      	bne.n	10880 <bt_conn_prepare_events+0x30>
   10890:	0653      	lsls	r3, r2, #25
   10892:	d50a      	bpl.n	108aa <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   10894:	4620      	mov	r0, r4
   10896:	f7ff fee1 	bl	1065c <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1089a:	3501      	adds	r5, #1
   1089c:	2d0a      	cmp	r5, #10
   1089e:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   108a2:	d1e3      	bne.n	1086c <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   108a4:	4630      	mov	r0, r6
   108a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   108aa:	7aa3      	ldrb	r3, [r4, #10]
   108ac:	2b07      	cmp	r3, #7
   108ae:	d1f4      	bne.n	1089a <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   108b0:	f104 0334 	add.w	r3, r4, #52	; 0x34
   108b4:	2200      	movs	r2, #0
   108b6:	2104      	movs	r1, #4
   108b8:	4640      	mov	r0, r8
   108ba:	f008 fed7 	bl	1966c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   108be:	2301      	movs	r3, #1
   108c0:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   108c4:	441e      	add	r6, r3
   108c6:	e7e8      	b.n	1089a <bt_conn_prepare_events+0x4a>
   108c8:	20008428 	.word	0x20008428
   108cc:	20008b58 	.word	0x20008b58

000108d0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   108d0:	b570      	push	{r4, r5, r6, lr}
   108d2:	4606      	mov	r6, r0
   108d4:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   108d6:	4810      	ldr	r0, [pc, #64]	; (10918 <bt_conn_add_le+0x48>)
   108d8:	210a      	movs	r1, #10
   108da:	f00a fd84 	bl	1b3e6 <bt_conn_new>
	if (!conn) {
   108de:	4604      	mov	r4, r0
   108e0:	b1b8      	cbz	r0, 10912 <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   108e2:	2230      	movs	r2, #48	; 0x30
   108e4:	2100      	movs	r1, #0
   108e6:	3058      	adds	r0, #88	; 0x58
   108e8:	f00a fb7a 	bl	1afe0 <memset>
   108ec:	4b0b      	ldr	r3, [pc, #44]	; (1091c <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   108ee:	4a0c      	ldr	r2, [pc, #48]	; (10920 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   108f0:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   108f2:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   108f4:	4629      	mov	r1, r5
   108f6:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   108fa:	62a3      	str	r3, [r4, #40]	; 0x28
   108fc:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   108fe:	7226      	strb	r6, [r4, #8]
   10900:	f104 0088 	add.w	r0, r4, #136	; 0x88
   10904:	f00a fb41 	bl	1af8a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   10908:	2301      	movs	r3, #1
   1090a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1090c:	4b05      	ldr	r3, [pc, #20]	; (10924 <bt_conn_add_le+0x54>)
   1090e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   10912:	4620      	mov	r0, r4
   10914:	bd70      	pop	{r4, r5, r6, pc}
   10916:	bf00      	nop
   10918:	20008b58 	.word	0x20008b58
   1091c:	00010f89 	.word	0x00010f89
   10920:	0001b3e1 	.word	0x0001b3e1
   10924:	00280018 	.word	0x00280018

00010928 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   10928:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1092a:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1092e:	e8d4 3fef 	ldaex	r3, [r4]
   10932:	1e5a      	subs	r2, r3, #1
   10934:	e8c4 2fe1 	stlex	r1, r2, [r4]
   10938:	2900      	cmp	r1, #0
   1093a:	d1f8      	bne.n	1092e <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   1093c:	2b00      	cmp	r3, #0
   1093e:	dc0a      	bgt.n	10956 <bt_conn_unref+0x2e>
   10940:	4909      	ldr	r1, [pc, #36]	; (10968 <bt_conn_unref+0x40>)
   10942:	480a      	ldr	r0, [pc, #40]	; (1096c <bt_conn_unref+0x44>)
   10944:	f240 7265 	movw	r2, #1893	; 0x765
   10948:	f009 f8df 	bl	19b0a <printk>
   1094c:	f240 7165 	movw	r1, #1893	; 0x765
   10950:	4805      	ldr	r0, [pc, #20]	; (10968 <bt_conn_unref+0x40>)
   10952:	f009 fb80 	bl	1a056 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   10956:	4620      	mov	r0, r4
   10958:	f00a fd1c 	bl	1b394 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1095c:	b918      	cbnz	r0, 10966 <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   1095e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   10962:	f7ff bb19 	b.w	ff98 <bt_le_adv_resume>
}
   10966:	bd10      	pop	{r4, pc}
   10968:	000206a8 	.word	0x000206a8
   1096c:	0001ecfc 	.word	0x0001ecfc

00010970 <bt_conn_lookup_handle>:
{
   10970:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   10972:	210a      	movs	r1, #10
   10974:	4801      	ldr	r0, [pc, #4]	; (1097c <bt_conn_lookup_handle+0xc>)
   10976:	f00a bd9a 	b.w	1b4ae <conn_lookup_handle>
   1097a:	bf00      	nop
   1097c:	20008b58 	.word	0x20008b58

00010980 <bt_conn_set_state>:
{
   10980:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   10982:	7a85      	ldrb	r5, [r0, #10]
{
   10984:	4604      	mov	r4, r0
	if (conn->state == state) {
   10986:	428d      	cmp	r5, r1
{
   10988:	460e      	mov	r6, r1
	if (conn->state == state) {
   1098a:	d10b      	bne.n	109a4 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   1098c:	2157      	movs	r1, #87	; 0x57
   1098e:	2d08      	cmp	r5, #8
   10990:	bf96      	itet	ls
   10992:	4b6d      	ldrls	r3, [pc, #436]	; (10b48 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   10994:	4a6d      	ldrhi	r2, [pc, #436]	; (10b4c <bt_conn_set_state+0x1cc>)
   10996:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   1099a:	486d      	ldr	r0, [pc, #436]	; (10b50 <bt_conn_set_state+0x1d0>)
}
   1099c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   109a0:	f009 b8b3 	b.w	19b0a <printk>
	conn->state = state;
   109a4:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   109a6:	b165      	cbz	r5, 109c2 <bt_conn_set_state+0x42>
   109a8:	2d06      	cmp	r5, #6
   109aa:	d00d      	beq.n	109c8 <bt_conn_set_state+0x48>
	switch (conn->state) {
   109ac:	7aa3      	ldrb	r3, [r4, #10]
   109ae:	2b08      	cmp	r3, #8
   109b0:	f200 80c5 	bhi.w	10b3e <bt_conn_set_state+0x1be>
   109b4:	e8df f003 	tbb	[pc, r3]
   109b8:	c7c70f4a 	.word	0xc7c70f4a
   109bc:	278ec7c7 	.word	0x278ec7c7
   109c0:	c7          	.byte	0xc7
   109c1:	00          	.byte	0x00
		bt_conn_ref(conn);
   109c2:	f00a fd5d 	bl	1b480 <bt_conn_ref>
		break;
   109c6:	e7f1      	b.n	109ac <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   109c8:	7883      	ldrb	r3, [r0, #2]
   109ca:	2b01      	cmp	r3, #1
   109cc:	d1ee      	bne.n	109ac <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   109ce:	3058      	adds	r0, #88	; 0x58
   109d0:	f008 f998 	bl	18d04 <k_delayed_work_cancel>
   109d4:	e7ea      	b.n	109ac <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   109d6:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   109d8:	4d5e      	ldr	r5, [pc, #376]	; (10b54 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   109da:	f04f 0320 	mov.w	r3, #32
   109de:	f3ef 8211 	mrs	r2, BASEPRI
   109e2:	f383 8811 	msr	BASEPRI, r3
   109e6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   109ea:	69e3      	ldr	r3, [r4, #28]
   109ec:	2b00      	cmp	r3, #0
   109ee:	f000 8087 	beq.w	10b00 <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   109f2:	3b01      	subs	r3, #1
   109f4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   109f6:	f382 8811 	msr	BASEPRI, r2
   109fa:	f3bf 8f6f 	isb	sy
   109fe:	4628      	mov	r0, r5
   10a00:	f007 feae 	bl	18760 <z_impl_k_sem_give>
}
   10a04:	e7e9      	b.n	109da <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   10a06:	78a3      	ldrb	r3, [r4, #2]
   10a08:	2b04      	cmp	r3, #4
   10a0a:	f000 809c 	beq.w	10b46 <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   10a0e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10a12:	f00c fbea 	bl	1d1ea <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   10a16:	2100      	movs	r1, #0
   10a18:	484f      	ldr	r0, [pc, #316]	; (10b58 <bt_conn_set_state+0x1d8>)
   10a1a:	f008 ff33 	bl	19884 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   10a1e:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   10a20:	4620      	mov	r0, r4
	list->tail = NULL;
   10a22:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   10a26:	f000 fc8f 	bl	11348 <bt_l2cap_connected>
		notify_connected(conn);
   10a2a:	4620      	mov	r0, r4
   10a2c:	f7ff fd02 	bl	10434 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10a30:	78e3      	ldrb	r3, [r4, #3]
   10a32:	2b01      	cmp	r3, #1
   10a34:	f040 8087 	bne.w	10b46 <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10a38:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   10a3c:	2300      	movs	r3, #0
   10a3e:	f104 0158 	add.w	r1, r4, #88	; 0x58
   10a42:	4846      	ldr	r0, [pc, #280]	; (10b5c <bt_conn_set_state+0x1dc>)
}
   10a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10a48:	f008 b8ec 	b.w	18c24 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   10a4c:	78a3      	ldrb	r3, [r4, #2]
   10a4e:	2b04      	cmp	r3, #4
   10a50:	d104      	bne.n	10a5c <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   10a52:	4620      	mov	r0, r4
}
   10a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   10a58:	f7ff bf66 	b.w	10928 <bt_conn_unref>
		switch (old_state) {
   10a5c:	2d08      	cmp	r5, #8
   10a5e:	d872      	bhi.n	10b46 <bt_conn_set_state+0x1c6>
   10a60:	a301      	add	r3, pc, #4	; (adr r3, 10a68 <bt_conn_set_state+0xe8>)
   10a62:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   10a66:	bf00      	nop
   10a68:	00010acd 	.word	0x00010acd
   10a6c:	00010a8d 	.word	0x00010a8d
   10a70:	00010abf 	.word	0x00010abf
   10a74:	00010a53 	.word	0x00010a53
   10a78:	00010a53 	.word	0x00010a53
   10a7c:	00010abf 	.word	0x00010abf
   10a80:	00010abf 	.word	0x00010abf
   10a84:	00010acd 	.word	0x00010acd
   10a88:	00010acd 	.word	0x00010acd
			tx_notify(conn);
   10a8c:	4620      	mov	r0, r4
   10a8e:	f00a fc84 	bl	1b39a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   10a92:	78a3      	ldrb	r3, [r4, #2]
   10a94:	2b01      	cmp	r3, #1
   10a96:	d103      	bne.n	10aa0 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   10a98:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10a9c:	f008 f932 	bl	18d04 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10aa0:	3404      	adds	r4, #4
   10aa2:	e8d4 3fef 	ldaex	r3, [r4]
   10aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10aaa:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10aae:	2a00      	cmp	r2, #0
   10ab0:	d1f7      	bne.n	10aa2 <bt_conn_set_state+0x122>
}
   10ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10ab6:	2100      	movs	r1, #0
   10ab8:	4827      	ldr	r0, [pc, #156]	; (10b58 <bt_conn_set_state+0x1d8>)
   10aba:	f008 bee3 	b.w	19884 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   10abe:	7a63      	ldrb	r3, [r4, #9]
   10ac0:	2b00      	cmp	r3, #0
   10ac2:	d0c6      	beq.n	10a52 <bt_conn_set_state+0xd2>
				notify_connected(conn);
   10ac4:	4620      	mov	r0, r4
   10ac6:	f7ff fcb5 	bl	10434 <notify_connected>
   10aca:	e7c2      	b.n	10a52 <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   10acc:	4632      	mov	r2, r6
   10ace:	2157      	movs	r1, #87	; 0x57
   10ad0:	4823      	ldr	r0, [pc, #140]	; (10b60 <bt_conn_set_state+0x1e0>)
   10ad2:	e763      	b.n	1099c <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ad4:	78a3      	ldrb	r3, [r4, #2]
   10ad6:	2b01      	cmp	r3, #1
   10ad8:	d135      	bne.n	10b46 <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   10ada:	4b22      	ldr	r3, [pc, #136]	; (10b64 <bt_conn_set_state+0x1e4>)
   10adc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10ae0:	8a9d      	ldrh	r5, [r3, #20]
   10ae2:	230a      	movs	r3, #10
   10ae4:	f240 30e7 	movw	r0, #999	; 0x3e7
   10ae8:	2100      	movs	r1, #0
   10aea:	435d      	muls	r5, r3
   10aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10af0:	2300      	movs	r3, #0
   10af2:	fbc5 0106 	smlal	r0, r1, r5, r6
   10af6:	f7f8 f819 	bl	8b2c <__aeabi_uldivmod>
   10afa:	4602      	mov	r2, r0
   10afc:	460b      	mov	r3, r1
   10afe:	e79e      	b.n	10a3e <bt_conn_set_state+0xbe>
	return list->head;
   10b00:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   10b02:	b128      	cbz	r0, 10b10 <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10b04:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   10b06:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10b08:	4288      	cmp	r0, r1
	list->head = node;
   10b0a:	6163      	str	r3, [r4, #20]
	list->tail = node;
   10b0c:	bf08      	it	eq
   10b0e:	61a3      	streq	r3, [r4, #24]
   10b10:	f382 8811 	msr	BASEPRI, r2
   10b14:	f3bf 8f6f 	isb	sy
		if (!node) {
   10b18:	b1a8      	cbz	r0, 10b46 <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   10b1a:	f04f 0220 	mov.w	r2, #32
   10b1e:	f3ef 8311 	mrs	r3, BASEPRI
   10b22:	f382 8811 	msr	BASEPRI, r2
   10b26:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   10b2a:	68c2      	ldr	r2, [r0, #12]
   10b2c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   10b2e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   10b30:	f383 8811 	msr	BASEPRI, r3
   10b34:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   10b38:	f7ff fc72 	bl	10420 <tx_free>
   10b3c:	e75f      	b.n	109fe <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   10b3e:	4632      	mov	r2, r6
   10b40:	2157      	movs	r1, #87	; 0x57
   10b42:	4809      	ldr	r0, [pc, #36]	; (10b68 <bt_conn_set_state+0x1e8>)
   10b44:	e72a      	b.n	1099c <bt_conn_set_state+0x1c>
}
   10b46:	bd70      	pop	{r4, r5, r6, pc}
   10b48:	0001de98 	.word	0x0001de98
   10b4c:	000207ee 	.word	0x000207ee
   10b50:	000207f8 	.word	0x000207f8
   10b54:	200080c8 	.word	0x200080c8
   10b58:	20008428 	.word	0x20008428
   10b5c:	2000a3b0 	.word	0x2000a3b0
   10b60:	0002080e 	.word	0x0002080e
   10b64:	20008000 	.word	0x20008000
   10b68:	0002082a 	.word	0x0002082a

00010b6c <bt_conn_lookup_addr_le>:
{
   10b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b70:	4607      	mov	r7, r0
   10b72:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10b74:	2500      	movs	r5, #0
   10b76:	4e0e      	ldr	r6, [pc, #56]	; (10bb0 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10b78:	4630      	mov	r0, r6
   10b7a:	f00a fc81 	bl	1b480 <bt_conn_ref>
		if (!conn) {
   10b7e:	4604      	mov	r4, r0
   10b80:	b120      	cbz	r0, 10b8c <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   10b82:	7883      	ldrb	r3, [r0, #2]
   10b84:	2b01      	cmp	r3, #1
   10b86:	d00a      	beq.n	10b9e <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   10b88:	f7ff fece 	bl	10928 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10b8c:	3501      	adds	r5, #1
   10b8e:	2d0a      	cmp	r5, #10
   10b90:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   10b94:	d1f0      	bne.n	10b78 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   10b96:	2400      	movs	r4, #0
}
   10b98:	4620      	mov	r0, r4
   10b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   10b9e:	4642      	mov	r2, r8
   10ba0:	4639      	mov	r1, r7
   10ba2:	f00a fc4d 	bl	1b440 <bt_conn_is_peer_addr_le>
   10ba6:	2800      	cmp	r0, #0
   10ba8:	d1f6      	bne.n	10b98 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   10baa:	4620      	mov	r0, r4
   10bac:	e7ec      	b.n	10b88 <bt_conn_lookup_addr_le+0x1c>
   10bae:	bf00      	nop
   10bb0:	20008b58 	.word	0x20008b58

00010bb4 <bt_conn_exists_le>:
{
   10bb4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   10bb6:	f7ff ffd9 	bl	10b6c <bt_conn_lookup_addr_le>
	if (conn) {
   10bba:	4604      	mov	r4, r0
   10bbc:	b170      	cbz	r0, 10bdc <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   10bbe:	7a83      	ldrb	r3, [r0, #10]
   10bc0:	2157      	movs	r1, #87	; 0x57
   10bc2:	2b08      	cmp	r3, #8
   10bc4:	bf96      	itet	ls
   10bc6:	4a06      	ldrls	r2, [pc, #24]	; (10be0 <bt_conn_exists_le+0x2c>)
   10bc8:	4a06      	ldrhi	r2, [pc, #24]	; (10be4 <bt_conn_exists_le+0x30>)
   10bca:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   10bce:	4806      	ldr	r0, [pc, #24]	; (10be8 <bt_conn_exists_le+0x34>)
   10bd0:	f008 ff9b 	bl	19b0a <printk>
		bt_conn_unref(conn);
   10bd4:	4620      	mov	r0, r4
   10bd6:	f7ff fea7 	bl	10928 <bt_conn_unref>
		return true;
   10bda:	2001      	movs	r0, #1
}
   10bdc:	bd10      	pop	{r4, pc}
   10bde:	bf00      	nop
   10be0:	0001de98 	.word	0x0001de98
   10be4:	000207ee 	.word	0x000207ee
   10be8:	0002084b 	.word	0x0002084b

00010bec <bt_conn_lookup_state_le>:
{
   10bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10bf0:	4606      	mov	r6, r0
   10bf2:	460f      	mov	r7, r1
   10bf4:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10bf6:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10bf8:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   10bfc:	f8df a048 	ldr.w	sl, [pc, #72]	; 10c48 <bt_conn_lookup_state_le+0x5c>
   10c00:	fb09 a005 	mla	r0, r9, r5, sl
   10c04:	f00a fc3c 	bl	1b480 <bt_conn_ref>
		if (!conn) {
   10c08:	4604      	mov	r4, r0
   10c0a:	b120      	cbz	r0, 10c16 <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   10c0c:	7883      	ldrb	r3, [r0, #2]
   10c0e:	2b01      	cmp	r3, #1
   10c10:	d006      	beq.n	10c20 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   10c12:	f00a fc35 	bl	1b480 <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10c16:	3501      	adds	r5, #1
   10c18:	2d0a      	cmp	r5, #10
   10c1a:	d1f1      	bne.n	10c00 <bt_conn_lookup_state_le+0x14>
	return NULL;
   10c1c:	2400      	movs	r4, #0
   10c1e:	e00f      	b.n	10c40 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   10c20:	b147      	cbz	r7, 10c34 <bt_conn_lookup_state_le+0x48>
   10c22:	463a      	mov	r2, r7
   10c24:	4631      	mov	r1, r6
   10c26:	f00a fc0b 	bl	1b440 <bt_conn_is_peer_addr_le>
   10c2a:	b918      	cbnz	r0, 10c34 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   10c2c:	4620      	mov	r0, r4
   10c2e:	f7ff fe7b 	bl	10928 <bt_conn_unref>
			continue;
   10c32:	e7f0      	b.n	10c16 <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   10c34:	7aa3      	ldrb	r3, [r4, #10]
   10c36:	4543      	cmp	r3, r8
   10c38:	d1f8      	bne.n	10c2c <bt_conn_lookup_state_le+0x40>
   10c3a:	7a23      	ldrb	r3, [r4, #8]
   10c3c:	42b3      	cmp	r3, r6
   10c3e:	d1f5      	bne.n	10c2c <bt_conn_lookup_state_le+0x40>
}
   10c40:	4620      	mov	r0, r4
   10c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c46:	bf00      	nop
   10c48:	20008b58 	.word	0x20008b58

00010c4c <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   10c4c:	b510      	push	{r4, lr}
	info->type = conn->type;
   10c4e:	7882      	ldrb	r2, [r0, #2]
   10c50:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   10c52:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   10c54:	2a01      	cmp	r2, #1
	info->role = conn->role;
   10c56:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   10c58:	7a03      	ldrb	r3, [r0, #8]
   10c5a:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   10c5c:	d11c      	bne.n	10c98 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   10c5e:	f100 0288 	add.w	r2, r0, #136	; 0x88
   10c62:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   10c64:	4a0e      	ldr	r2, [pc, #56]	; (10ca0 <bt_conn_get_info+0x54>)
   10c66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   10c6a:	4413      	add	r3, r2
   10c6c:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   10c6e:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   10c72:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   10c76:	b964      	cbnz	r4, 10c92 <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   10c78:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   10c7c:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   10c80:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   10c82:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   10c86:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   10c88:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   10c8c:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   10c8e:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   10c90:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   10c92:	e9c1 2303 	strd	r2, r3, [r1, #12]
   10c96:	e7f1      	b.n	10c7c <bt_conn_get_info+0x30>
	return -EINVAL;
   10c98:	f06f 0015 	mvn.w	r0, #21
   10c9c:	e7f8      	b.n	10c90 <bt_conn_get_info+0x44>
   10c9e:	bf00      	nop
   10ca0:	20008000 	.word	0x20008000

00010ca4 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   10ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10ca8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10caa:	4844      	ldr	r0, [pc, #272]	; (10dbc <bt_conn_le_create+0x118>)
   10cac:	f00a fb72 	bl	1b394 <atomic_get>
   10cb0:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10cb2:	0781      	lsls	r1, r0, #30
{
   10cb4:	4615      	mov	r5, r2
   10cb6:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10cb8:	d576      	bpl.n	10da8 <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   10cba:	4610      	mov	r0, r2
   10cbc:	f00a fac8 	bl	1b250 <bt_le_conn_params_valid>
   10cc0:	b928      	cbnz	r0, 10cce <bt_conn_le_create+0x2a>
		return -EINVAL;
   10cc2:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   10cc6:	4628      	mov	r0, r5
   10cc8:	b002      	add	sp, #8
   10cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cce:	483b      	ldr	r0, [pc, #236]	; (10dbc <bt_conn_le_create+0x118>)
   10cd0:	f00a fb60 	bl	1b394 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10cd4:	0642      	lsls	r2, r0, #25
   10cd6:	d4f4      	bmi.n	10cc2 <bt_conn_le_create+0x1e>
   10cd8:	4838      	ldr	r0, [pc, #224]	; (10dbc <bt_conn_le_create+0x118>)
   10cda:	f00a fb5b 	bl	1b394 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   10cde:	0503      	lsls	r3, r0, #20
   10ce0:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   10ce4:	d463      	bmi.n	10dae <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   10ce6:	f7fd fee7 	bl	eab8 <bt_le_scan_random_addr_check>
   10cea:	2800      	cmp	r0, #0
   10cec:	d0e9      	beq.n	10cc2 <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   10cee:	4621      	mov	r1, r4
   10cf0:	4640      	mov	r0, r8
   10cf2:	f7ff ff5f 	bl	10bb4 <bt_conn_exists_le>
   10cf6:	2800      	cmp	r0, #0
   10cf8:	d1e3      	bne.n	10cc2 <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   10cfa:	7823      	ldrb	r3, [r4, #0]
   10cfc:	3b02      	subs	r3, #2
   10cfe:	2b01      	cmp	r3, #1
   10d00:	d847      	bhi.n	10d92 <bt_conn_le_create+0xee>
   10d02:	2207      	movs	r2, #7
   10d04:	4621      	mov	r1, r4
   10d06:	4668      	mov	r0, sp
   10d08:	f00a f93f 	bl	1af8a <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   10d0c:	f89d 3000 	ldrb.w	r3, [sp]
   10d10:	3b02      	subs	r3, #2
   10d12:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   10d16:	4669      	mov	r1, sp
   10d18:	2000      	movs	r0, #0
   10d1a:	f7ff fdd9 	bl	108d0 <bt_conn_add_le>
	if (!conn) {
   10d1e:	4604      	mov	r4, r0
   10d20:	2800      	cmp	r0, #0
   10d22:	d047      	beq.n	10db4 <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   10d24:	882b      	ldrh	r3, [r5, #0]
   10d26:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   10d2a:	886b      	ldrh	r3, [r5, #2]
   10d2c:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   10d30:	88ab      	ldrh	r3, [r5, #4]
   10d32:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   10d36:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   10d38:	4d21      	ldr	r5, [pc, #132]	; (10dc0 <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   10d3a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   10d3e:	f105 0c08 	add.w	ip, r5, #8
   10d42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   10d46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   10d4a:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   10d4c:	2b00      	cmp	r3, #0
   10d4e:	bf08      	it	eq
   10d50:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   10d54:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   10d56:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   10d58:	b903      	cbnz	r3, 10d5c <bt_conn_le_create+0xb8>
   10d5a:	89ab      	ldrh	r3, [r5, #12]
   10d5c:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   10d5e:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   10d60:	b903      	cbnz	r3, 10d64 <bt_conn_le_create+0xc0>
   10d62:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   10d64:	2106      	movs	r1, #6
   10d66:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   10d68:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   10d6a:	f7ff fe09 	bl	10980 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   10d6e:	4620      	mov	r0, r4
   10d70:	f00a fa51 	bl	1b216 <bt_le_create_conn>
	if (err) {
   10d74:	4605      	mov	r5, r0
   10d76:	b1a8      	cbz	r0, 10da4 <bt_conn_le_create+0x100>
		conn->err = 0;
   10d78:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d7a:	4620      	mov	r0, r4
   10d7c:	4631      	mov	r1, r6
		conn->err = 0;
   10d7e:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d80:	f7ff fdfe 	bl	10980 <bt_conn_set_state>
		bt_conn_unref(conn);
   10d84:	4620      	mov	r0, r4
   10d86:	f7ff fdcf 	bl	10928 <bt_conn_unref>
		bt_le_scan_update(false);
   10d8a:	4630      	mov	r0, r6
   10d8c:	f7fd ff20 	bl	ebd0 <bt_le_scan_update>
		return err;
   10d90:	e799      	b.n	10cc6 <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   10d92:	4621      	mov	r1, r4
   10d94:	f00a fa3d 	bl	1b212 <bt_lookup_id_addr>
   10d98:	2207      	movs	r2, #7
   10d9a:	4601      	mov	r1, r0
   10d9c:	4668      	mov	r0, sp
   10d9e:	f00a f8f4 	bl	1af8a <memcpy>
}
   10da2:	e7b8      	b.n	10d16 <bt_conn_le_create+0x72>
	*ret_conn = conn;
   10da4:	603c      	str	r4, [r7, #0]
	return 0;
   10da6:	e78e      	b.n	10cc6 <bt_conn_le_create+0x22>
		return -EAGAIN;
   10da8:	f06f 050a 	mvn.w	r5, #10
   10dac:	e78b      	b.n	10cc6 <bt_conn_le_create+0x22>
		return -EALREADY;
   10dae:	f06f 0544 	mvn.w	r5, #68	; 0x44
   10db2:	e788      	b.n	10cc6 <bt_conn_le_create+0x22>
		return -ENOMEM;
   10db4:	f06f 050b 	mvn.w	r5, #11
   10db8:	e785      	b.n	10cc6 <bt_conn_le_create+0x22>
   10dba:	bf00      	nop
   10dbc:	20008094 	.word	0x20008094
   10dc0:	20008000 	.word	0x20008000

00010dc4 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   10dc4:	b570      	push	{r4, r5, r6, lr}
   10dc6:	4606      	mov	r6, r0
   10dc8:	4834      	ldr	r0, [pc, #208]	; (10e9c <bt_le_set_auto_conn+0xd8>)
   10dca:	f00a fae3 	bl	1b394 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10dce:	0780      	lsls	r0, r0, #30
{
   10dd0:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10dd2:	d55c      	bpl.n	10e8e <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   10dd4:	b929      	cbnz	r1, 10de2 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   10dd6:	f7fd fe6f 	bl	eab8 <bt_le_scan_random_addr_check>
   10dda:	b940      	cbnz	r0, 10dee <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   10ddc:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   10de0:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   10de2:	4608      	mov	r0, r1
   10de4:	f00a fa34 	bl	1b250 <bt_le_conn_params_valid>
   10de8:	2800      	cmp	r0, #0
   10dea:	d1f4      	bne.n	10dd6 <bt_le_set_auto_conn+0x12>
   10dec:	e7f6      	b.n	10ddc <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   10dee:	4631      	mov	r1, r6
   10df0:	2000      	movs	r0, #0
   10df2:	f7ff febb 	bl	10b6c <bt_conn_lookup_addr_le>
	if (!conn) {
   10df6:	4604      	mov	r4, r0
   10df8:	b928      	cbnz	r0, 10e06 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   10dfa:	4631      	mov	r1, r6
   10dfc:	f7ff fd68 	bl	108d0 <bt_conn_add_le>
		if (!conn) {
   10e00:	4604      	mov	r4, r0
   10e02:	2800      	cmp	r0, #0
   10e04:	d046      	beq.n	10e94 <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   10e06:	1d23      	adds	r3, r4, #4
	if (param) {
   10e08:	b365      	cbz	r5, 10e64 <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   10e0a:	882a      	ldrh	r2, [r5, #0]
   10e0c:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   10e10:	886a      	ldrh	r2, [r5, #2]
   10e12:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   10e16:	88aa      	ldrh	r2, [r5, #4]
   10e18:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   10e1c:	88ea      	ldrh	r2, [r5, #6]
   10e1e:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10e22:	e8d3 2fef 	ldaex	r2, [r3]
   10e26:	f042 0101 	orr.w	r1, r2, #1
   10e2a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10e2e:	2800      	cmp	r0, #0
   10e30:	d1f7      	bne.n	10e22 <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   10e32:	07d1      	lsls	r1, r2, #31
   10e34:	d402      	bmi.n	10e3c <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   10e36:	4620      	mov	r0, r4
   10e38:	f00a fb22 	bl	1b480 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   10e3c:	7aa3      	ldrb	r3, [r4, #10]
   10e3e:	b963      	cbnz	r3, 10e5a <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10e40:	4816      	ldr	r0, [pc, #88]	; (10e9c <bt_le_set_auto_conn+0xd8>)
   10e42:	f00a faa7 	bl	1b394 <atomic_get>
   10e46:	0783      	lsls	r3, r0, #30
   10e48:	d507      	bpl.n	10e5a <bt_le_set_auto_conn+0x96>
		if (param) {
   10e4a:	b11d      	cbz	r5, 10e54 <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10e4c:	2102      	movs	r1, #2
   10e4e:	4620      	mov	r0, r4
   10e50:	f7ff fd96 	bl	10980 <bt_conn_set_state>
		bt_le_scan_update(false);
   10e54:	2000      	movs	r0, #0
   10e56:	f7fd febb 	bl	ebd0 <bt_le_scan_update>
	bt_conn_unref(conn);
   10e5a:	4620      	mov	r0, r4
   10e5c:	f7ff fd64 	bl	10928 <bt_conn_unref>
	return 0;
   10e60:	2000      	movs	r0, #0
   10e62:	e7bd      	b.n	10de0 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10e64:	e8d3 2fef 	ldaex	r2, [r3]
   10e68:	f022 0101 	bic.w	r1, r2, #1
   10e6c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10e70:	2800      	cmp	r0, #0
   10e72:	d1f7      	bne.n	10e64 <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   10e74:	07d2      	lsls	r2, r2, #31
   10e76:	d5e1      	bpl.n	10e3c <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   10e78:	4620      	mov	r0, r4
   10e7a:	f7ff fd55 	bl	10928 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   10e7e:	7aa3      	ldrb	r3, [r4, #10]
   10e80:	2b02      	cmp	r3, #2
   10e82:	d1db      	bne.n	10e3c <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10e84:	4629      	mov	r1, r5
   10e86:	4620      	mov	r0, r4
   10e88:	f7ff fd7a 	bl	10980 <bt_conn_set_state>
   10e8c:	e7d6      	b.n	10e3c <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   10e8e:	f06f 000a 	mvn.w	r0, #10
   10e92:	e7a5      	b.n	10de0 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   10e94:	f06f 000b 	mvn.w	r0, #11
   10e98:	e7a2      	b.n	10de0 <bt_le_set_auto_conn+0x1c>
   10e9a:	bf00      	nop
   10e9c:	20008094 	.word	0x20008094

00010ea0 <bt_conn_disconnect>:
{
   10ea0:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ea2:	7883      	ldrb	r3, [r0, #2]
{
   10ea4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ea6:	2b01      	cmp	r3, #1
{
   10ea8:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10eaa:	d103      	bne.n	10eb4 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   10eac:	2100      	movs	r1, #0
   10eae:	3088      	adds	r0, #136	; 0x88
   10eb0:	f7ff ff88 	bl	10dc4 <bt_le_set_auto_conn>
	switch (conn->state) {
   10eb4:	7aa3      	ldrb	r3, [r4, #10]
   10eb6:	3b02      	subs	r3, #2
   10eb8:	2b06      	cmp	r3, #6
   10eba:	d805      	bhi.n	10ec8 <bt_conn_disconnect+0x28>
   10ebc:	e8df f003 	tbb	[pc, r3]
   10ec0:	12040408 	.word	0x12040408
   10ec4:	271f      	.short	0x271f
   10ec6:	10          	.byte	0x10
   10ec7:	00          	.byte	0x00
   10ec8:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   10ecc:	4628      	mov	r0, r5
   10ece:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ed0:	4620      	mov	r0, r4
   10ed2:	2100      	movs	r1, #0
		conn->err = reason;
   10ed4:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ed6:	f7ff fd53 	bl	10980 <bt_conn_set_state>
			bt_le_scan_update(false);
   10eda:	2000      	movs	r0, #0
   10edc:	f7fd fe78 	bl	ebd0 <bt_le_scan_update>
		return 0;
   10ee0:	2500      	movs	r5, #0
   10ee2:	e7f3      	b.n	10ecc <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   10ee4:	2157      	movs	r1, #87	; 0x57
   10ee6:	4810      	ldr	r0, [pc, #64]	; (10f28 <bt_conn_disconnect+0x88>)
   10ee8:	f008 fe0f 	bl	19b0a <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10eec:	4620      	mov	r0, r4
		conn->err = reason;
   10eee:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ef0:	2100      	movs	r1, #0
   10ef2:	f7ff fd45 	bl	10980 <bt_conn_set_state>
}
   10ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   10efa:	f7fe bff1 	b.w	fee0 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   10efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10f02:	f007 feff 	bl	18d04 <k_delayed_work_cancel>
}
   10f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   10f0a:	f7fd be3d 	b.w	eb88 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   10f0e:	4629      	mov	r1, r5
   10f10:	8820      	ldrh	r0, [r4, #0]
   10f12:	f00a f982 	bl	1b21a <bt_hci_disconnect>
	if (err) {
   10f16:	4605      	mov	r5, r0
   10f18:	2800      	cmp	r0, #0
   10f1a:	d1d7      	bne.n	10ecc <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   10f1c:	2108      	movs	r1, #8
   10f1e:	4620      	mov	r0, r4
   10f20:	f7ff fd2e 	bl	10980 <bt_conn_set_state>
	return 0;
   10f24:	e7d2      	b.n	10ecc <bt_conn_disconnect+0x2c>
   10f26:	bf00      	nop
   10f28:	00020873 	.word	0x00020873

00010f2c <send_conn_le_param_update>:
{
   10f2c:	b538      	push	{r3, r4, r5, lr}
   10f2e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   10f30:	4608      	mov	r0, r1
{
   10f32:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10f34:	f00a f98c 	bl	1b250 <bt_le_conn_params_valid>
   10f38:	b308      	cbz	r0, 10f7e <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10f3a:	4b12      	ldr	r3, [pc, #72]	; (10f84 <send_conn_le_param_update+0x58>)
   10f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   10f40:	0799      	lsls	r1, r3, #30
   10f42:	d407      	bmi.n	10f54 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   10f44:	78e3      	ldrb	r3, [r4, #3]
   10f46:	b173      	cbz	r3, 10f66 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   10f48:	4629      	mov	r1, r5
   10f4a:	4620      	mov	r0, r4
}
   10f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   10f50:	f000 bb14 	b.w	1157c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10f54:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   10f58:	079a      	lsls	r2, r3, #30
   10f5a:	d5f3      	bpl.n	10f44 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10f5c:	1d20      	adds	r0, r4, #4
   10f5e:	f00a fa19 	bl	1b394 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   10f62:	0543      	lsls	r3, r0, #21
   10f64:	d4ee      	bmi.n	10f44 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   10f66:	4629      	mov	r1, r5
   10f68:	4620      	mov	r0, r4
   10f6a:	f00a fac4 	bl	1b4f6 <bt_conn_le_conn_update>
		if (rc == 0) {
   10f6e:	b928      	cbnz	r0, 10f7c <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   10f70:	88ab      	ldrh	r3, [r5, #4]
   10f72:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   10f76:	88eb      	ldrh	r3, [r5, #6]
   10f78:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   10f7c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10f7e:	f06f 0015 	mvn.w	r0, #21
   10f82:	e7fb      	b.n	10f7c <send_conn_le_param_update+0x50>
   10f84:	20008000 	.word	0x20008000

00010f88 <deferred_work>:
{
   10f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   10f8a:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   10f8e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   10f90:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   10f94:	b99b      	cbnz	r3, 10fbe <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   10f96:	4630      	mov	r0, r6
   10f98:	f00a fb0d 	bl	1b5b6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   10f9c:	4b26      	ldr	r3, [pc, #152]	; (11038 <deferred_work+0xb0>)
   10f9e:	681d      	ldr	r5, [r3, #0]
   10fa0:	b92d      	cbnz	r5, 10fae <deferred_work+0x26>
		bt_conn_unref(conn);
   10fa2:	4630      	mov	r0, r6
}
   10fa4:	b002      	add	sp, #8
   10fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   10faa:	f7ff bcbd 	b.w	10928 <bt_conn_unref>
		if (cb->disconnected) {
   10fae:	686b      	ldr	r3, [r5, #4]
   10fb0:	b11b      	cbz	r3, 10fba <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   10fb2:	4630      	mov	r0, r6
   10fb4:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   10fb8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10fba:	692d      	ldr	r5, [r5, #16]
   10fbc:	e7f0      	b.n	10fa0 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   10fbe:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   10fc2:	2b01      	cmp	r3, #1
   10fc4:	d12f      	bne.n	11026 <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10fc6:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   10fca:	b923      	cbnz	r3, 10fd6 <deferred_work+0x4e>
}
   10fcc:	b002      	add	sp, #8
   10fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   10fd2:	f7fd bdd9 	b.w	eb88 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   10fd6:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10fda:	e8d5 3fef 	ldaex	r3, [r5]
   10fde:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   10fe2:	e8c5 2fe1 	stlex	r1, r2, [r5]
   10fe6:	2900      	cmp	r1, #0
   10fe8:	d1f7      	bne.n	10fda <deferred_work+0x52>
   10fea:	059b      	lsls	r3, r3, #22
   10fec:	d51d      	bpl.n	1102a <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   10fee:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   10ff2:	f8ad 3000 	strh.w	r3, [sp]
   10ff6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   10ffa:	f8ad 3002 	strh.w	r3, [sp, #2]
   10ffe:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11002:	f8ad 3004 	strh.w	r3, [sp, #4]
   11006:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1100a:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1100e:	4669      	mov	r1, sp
   11010:	4630      	mov	r0, r6
   11012:	f7ff ff8b 	bl	10f2c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11016:	e8d5 3fef 	ldaex	r3, [r5]
   1101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1101e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11022:	2a00      	cmp	r2, #0
   11024:	d1f7      	bne.n	11016 <deferred_work+0x8e>
}
   11026:	b002      	add	sp, #8
   11028:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   1102a:	466b      	mov	r3, sp
   1102c:	4a03      	ldr	r2, [pc, #12]	; (1103c <deferred_work+0xb4>)
   1102e:	6810      	ldr	r0, [r2, #0]
   11030:	6851      	ldr	r1, [r2, #4]
   11032:	c303      	stmia	r3!, {r0, r1}
   11034:	e7eb      	b.n	1100e <deferred_work+0x86>
   11036:	bf00      	nop
   11038:	2000a998 	.word	0x2000a998
   1103c:	0001d9e8 	.word	0x0001d9e8

00011040 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11042:	4604      	mov	r4, r0
   11044:	460d      	mov	r5, r1
   11046:	4617      	mov	r7, r2
   11048:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   1104a:	f00c f943 	bl	1d2d4 <k_is_in_isr>
   1104e:	b150      	cbz	r0, 11066 <bt_conn_create_pdu_timeout+0x26>
   11050:	490f      	ldr	r1, [pc, #60]	; (11090 <bt_conn_create_pdu_timeout+0x50>)
   11052:	4810      	ldr	r0, [pc, #64]	; (11094 <bt_conn_create_pdu_timeout+0x54>)
   11054:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11058:	f008 fd57 	bl	19b0a <printk>
   1105c:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11060:	480b      	ldr	r0, [pc, #44]	; (11090 <bt_conn_create_pdu_timeout+0x50>)
   11062:	f008 fff8 	bl	1a056 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11066:	480c      	ldr	r0, [pc, #48]	; (11098 <bt_conn_create_pdu_timeout+0x58>)
   11068:	463a      	mov	r2, r7
   1106a:	2c00      	cmp	r4, #0
   1106c:	bf18      	it	ne
   1106e:	4620      	movne	r0, r4
   11070:	4633      	mov	r3, r6
   11072:	f00b fa5e 	bl	1c532 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   11076:	4604      	mov	r4, r0
   11078:	b928      	cbnz	r0, 11086 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   1107a:	2157      	movs	r1, #87	; 0x57
   1107c:	4807      	ldr	r0, [pc, #28]	; (1109c <bt_conn_create_pdu_timeout+0x5c>)
   1107e:	f008 fd44 	bl	19b0a <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11082:	4620      	mov	r0, r4
   11084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   11086:	1d69      	adds	r1, r5, #5
   11088:	3008      	adds	r0, #8
   1108a:	f003 fc79 	bl	14980 <net_buf_simple_reserve>
	return buf;
   1108e:	e7f8      	b.n	11082 <bt_conn_create_pdu_timeout+0x42>
   11090:	000206a8 	.word	0x000206a8
   11094:	0001ecfc 	.word	0x0001ecfc
   11098:	200086dc 	.word	0x200086dc
   1109c:	0002089f 	.word	0x0002089f

000110a0 <bt_conn_create_frag_timeout>:
{
   110a0:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   110a2:	4801      	ldr	r0, [pc, #4]	; (110a8 <bt_conn_create_frag_timeout+0x8>)
   110a4:	f7ff bfcc 	b.w	11040 <bt_conn_create_pdu_timeout>
   110a8:	20008734 	.word	0x20008734

000110ac <create_frag>:
{
   110ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110b0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   110b2:	f04f 33ff 	mov.w	r3, #4294967295
   110b6:	f04f 32ff 	mov.w	r2, #4294967295
   110ba:	2000      	movs	r0, #0
{
   110bc:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   110be:	f7ff ffef 	bl	110a0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   110c2:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   110c4:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   110c6:	2b07      	cmp	r3, #7
   110c8:	f04f 0600 	mov.w	r6, #0
   110cc:	d005      	beq.n	110da <create_frag+0x2e>
		net_buf_unref(frag);
   110ce:	f003 fca9 	bl	14a24 <net_buf_unref>
		return NULL;
   110d2:	4635      	mov	r5, r6
}
   110d4:	4628      	mov	r0, r5
   110d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   110da:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   110dc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   110e0:	4e0c      	ldr	r6, [pc, #48]	; (11114 <create_frag+0x68>)
   110e2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   110e4:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   110e8:	f00b fa49 	bl	1c57e <net_buf_simple_tailroom>
   110ec:	4580      	cmp	r8, r0
   110ee:	d20c      	bcs.n	1110a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   110f0:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   110f4:	f854 1f08 	ldr.w	r1, [r4, #8]!
   110f8:	4632      	mov	r2, r6
   110fa:	4638      	mov	r0, r7
   110fc:	f00b fa47 	bl	1c58e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11100:	4631      	mov	r1, r6
   11102:	4620      	mov	r0, r4
   11104:	f003 fd6a 	bl	14bdc <net_buf_simple_pull>
   11108:	e7e4      	b.n	110d4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1110a:	4638      	mov	r0, r7
   1110c:	f00b fa37 	bl	1c57e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11110:	b286      	uxth	r6, r0
   11112:	e7ef      	b.n	110f4 <create_frag+0x48>
   11114:	20008000 	.word	0x20008000

00011118 <bt_conn_process_tx>:
{
   11118:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1111a:	7a83      	ldrb	r3, [r0, #10]
{
   1111c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1111e:	b973      	cbnz	r3, 1113e <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11120:	1d03      	adds	r3, r0, #4
   11122:	e8d3 2fef 	ldaex	r2, [r3]
   11126:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1112a:	e8c3 1fe5 	stlex	r5, r1, [r3]
   1112e:	2d00      	cmp	r5, #0
   11130:	d1f7      	bne.n	11122 <bt_conn_process_tx+0xa>
   11132:	0653      	lsls	r3, r2, #25
   11134:	d503      	bpl.n	1113e <bt_conn_process_tx+0x26>
}
   11136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1113a:	f7ff ba8f 	b.w	1065c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1113e:	2200      	movs	r2, #0
   11140:	2300      	movs	r3, #0
   11142:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11146:	f003 fbeb 	bl	14920 <net_buf_get>
	BT_ASSERT(buf);
   1114a:	4605      	mov	r5, r0
   1114c:	b958      	cbnz	r0, 11166 <bt_conn_process_tx+0x4e>
   1114e:	f240 525f 	movw	r2, #1375	; 0x55f
   11152:	491e      	ldr	r1, [pc, #120]	; (111cc <bt_conn_process_tx+0xb4>)
   11154:	481e      	ldr	r0, [pc, #120]	; (111d0 <bt_conn_process_tx+0xb8>)
   11156:	f008 fcd8 	bl	19b0a <printk>
   1115a:	4040      	eors	r0, r0
   1115c:	f380 8811 	msr	BASEPRI, r0
   11160:	f04f 0003 	mov.w	r0, #3
   11164:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11166:	4e1b      	ldr	r6, [pc, #108]	; (111d4 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   11168:	89aa      	ldrh	r2, [r5, #12]
   1116a:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   1116e:	429a      	cmp	r2, r3
   11170:	d807      	bhi.n	11182 <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11172:	2300      	movs	r3, #0
   11174:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11176:	4629      	mov	r1, r5
   11178:	4620      	mov	r0, r4
   1117a:	f7ff f971 	bl	10460 <send_frag>
	if (!send_buf(conn, buf)) {
   1117e:	b130      	cbz	r0, 1118e <bt_conn_process_tx+0x76>
}
   11180:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11182:	4629      	mov	r1, r5
   11184:	4620      	mov	r0, r4
   11186:	f7ff ff91 	bl	110ac <create_frag>
	if (!frag) {
   1118a:	4601      	mov	r1, r0
   1118c:	b920      	cbnz	r0, 11198 <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   1118e:	4628      	mov	r0, r5
}
   11190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11194:	f003 bc46 	b.w	14a24 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11198:	2301      	movs	r3, #1
   1119a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1119c:	4620      	mov	r0, r4
   1119e:	f7ff f95f 	bl	10460 <send_frag>
   111a2:	2800      	cmp	r0, #0
   111a4:	d0f3      	beq.n	1118e <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   111a6:	89aa      	ldrh	r2, [r5, #12]
   111a8:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   111ac:	429a      	cmp	r2, r3
   111ae:	d802      	bhi.n	111b6 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   111b0:	2300      	movs	r3, #0
   111b2:	2203      	movs	r2, #3
   111b4:	e7df      	b.n	11176 <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   111b6:	4629      	mov	r1, r5
   111b8:	4620      	mov	r0, r4
   111ba:	f7ff ff77 	bl	110ac <create_frag>
		if (!frag) {
   111be:	4601      	mov	r1, r0
   111c0:	2800      	cmp	r0, #0
   111c2:	d0e4      	beq.n	1118e <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   111c4:	2301      	movs	r3, #1
   111c6:	461a      	mov	r2, r3
   111c8:	e7e8      	b.n	1119c <bt_conn_process_tx+0x84>
   111ca:	bf00      	nop
   111cc:	000206a8 	.word	0x000206a8
   111d0:	0001ecfc 	.word	0x0001ecfc
   111d4:	20008000 	.word	0x20008000

000111d8 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   111d8:	4b0b      	ldr	r3, [pc, #44]	; (11208 <bt_conn_index+0x30>)
{
   111da:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   111dc:	1ac0      	subs	r0, r0, r3
   111de:	4b0b      	ldr	r3, [pc, #44]	; (1120c <bt_conn_index+0x34>)
   111e0:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   111e2:	f5b0 6fd8 	cmp.w	r0, #1728	; 0x6c0
		index = conn - acl_conns;
   111e6:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   111ea:	d90a      	bls.n	11202 <bt_conn_index+0x2a>
   111ec:	4908      	ldr	r1, [pc, #32]	; (11210 <bt_conn_index+0x38>)
   111ee:	4809      	ldr	r0, [pc, #36]	; (11214 <bt_conn_index+0x3c>)
   111f0:	f640 2295 	movw	r2, #2709	; 0xa95
   111f4:	f008 fc89 	bl	19b0a <printk>
   111f8:	f640 2195 	movw	r1, #2709	; 0xa95
   111fc:	4804      	ldr	r0, [pc, #16]	; (11210 <bt_conn_index+0x38>)
   111fe:	f008 ff2a 	bl	1a056 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11202:	b2e0      	uxtb	r0, r4
   11204:	bd10      	pop	{r4, pc}
   11206:	bf00      	nop
   11208:	20008b58 	.word	0x20008b58
   1120c:	aaaaaaab 	.word	0xaaaaaaab
   11210:	000206a8 	.word	0x000206a8
   11214:	0001ecfc 	.word	0x0001ecfc

00011218 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11218:	2809      	cmp	r0, #9
   1121a:	d806      	bhi.n	1122a <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1121c:	4b04      	ldr	r3, [pc, #16]	; (11230 <bt_conn_lookup_index+0x18>)
   1121e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11222:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11226:	f00a b92b 	b.w	1b480 <bt_conn_ref>
}
   1122a:	2000      	movs	r0, #0
   1122c:	4770      	bx	lr
   1122e:	bf00      	nop
   11230:	20008b58 	.word	0x20008b58

00011234 <bt_conn_init>:

int bt_conn_init(void)
{
   11234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11236:	4917      	ldr	r1, [pc, #92]	; (11294 <bt_conn_init+0x60>)
   11238:	4817      	ldr	r0, [pc, #92]	; (11298 <bt_conn_init+0x64>)
   1123a:	f00b ffe3 	bl	1d204 <k_queue_append>
   1123e:	4917      	ldr	r1, [pc, #92]	; (1129c <bt_conn_init+0x68>)
   11240:	4815      	ldr	r0, [pc, #84]	; (11298 <bt_conn_init+0x64>)
   11242:	f00b ffdf 	bl	1d204 <k_queue_append>
   11246:	4916      	ldr	r1, [pc, #88]	; (112a0 <bt_conn_init+0x6c>)
   11248:	4813      	ldr	r0, [pc, #76]	; (11298 <bt_conn_init+0x64>)
   1124a:	f00b ffdb 	bl	1d204 <k_queue_append>
	}

	bt_att_init();
   1124e:	f00a fd32 	bl	1bcb6 <bt_att_init>

	err = bt_smp_init();
   11252:	f00b f96b 	bl	1c52c <bt_smp_init>
	if (err) {
   11256:	4605      	mov	r5, r0
   11258:	b9d0      	cbnz	r0, 11290 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   1125a:	f00a fa15 	bl	1b688 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1125e:	462e      	mov	r6, r5
   11260:	4f10      	ldr	r7, [pc, #64]	; (112a4 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11262:	4638      	mov	r0, r7
   11264:	f00a f90c 	bl	1b480 <bt_conn_ref>

			if (!conn) {
   11268:	4604      	mov	r4, r0
   1126a:	b160      	cbz	r0, 11286 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1126c:	3004      	adds	r0, #4
   1126e:	f00a f891 	bl	1b394 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11272:	07c3      	lsls	r3, r0, #31
   11274:	d504      	bpl.n	11280 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11276:	2102      	movs	r1, #2
   11278:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   1127a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1127c:	f7ff fb80 	bl	10980 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11280:	4620      	mov	r0, r4
   11282:	f7ff fb51 	bl	10928 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11286:	3601      	adds	r6, #1
   11288:	2e0a      	cmp	r6, #10
   1128a:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   1128e:	d1e8      	bne.n	11262 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11290:	4628      	mov	r0, r5
   11292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11294:	2000a99c 	.word	0x2000a99c
   11298:	20008694 	.word	0x20008694
   1129c:	2000a9ac 	.word	0x2000a9ac
   112a0:	2000a9bc 	.word	0x2000a9bc
   112a4:	20008b58 	.word	0x20008b58

000112a8 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   112a8:	b570      	push	{r4, r5, r6, lr}
   112aa:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   112ac:	2400      	movs	r4, #0
   112ae:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   112b0:	4b09      	ldr	r3, [pc, #36]	; (112d8 <l2cap_accept+0x30>)
   112b2:	fb06 f504 	mul.w	r5, r6, r4
   112b6:	58e8      	ldr	r0, [r5, r3]
   112b8:	b148      	cbz	r0, 112ce <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   112ba:	3401      	adds	r4, #1
   112bc:	2c0a      	cmp	r4, #10
   112be:	d1f8      	bne.n	112b2 <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   112c0:	4806      	ldr	r0, [pc, #24]	; (112dc <l2cap_accept+0x34>)
   112c2:	2145      	movs	r1, #69	; 0x45
   112c4:	f008 fc21 	bl	19b0a <printk>
   112c8:	f06f 000b 	mvn.w	r0, #11
   112cc:	e003      	b.n	112d6 <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   112ce:	4a04      	ldr	r2, [pc, #16]	; (112e0 <l2cap_accept+0x38>)
   112d0:	442b      	add	r3, r5
   112d2:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   112d4:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   112d6:	bd70      	pop	{r4, r5, r6, pc}
   112d8:	200092d8 	.word	0x200092d8
   112dc:	00020937 	.word	0x00020937
   112e0:	0001dedc 	.word	0x0001dedc

000112e4 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   112e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112e6:	4605      	mov	r5, r0
   112e8:	460f      	mov	r7, r1
   112ea:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   112ec:	2300      	movs	r3, #0
   112ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   112f2:	2104      	movs	r1, #4
   112f4:	2000      	movs	r0, #0
   112f6:	f7ff fea3 	bl	11040 <bt_conn_create_pdu_timeout>
	if (!buf) {
   112fa:	4604      	mov	r4, r0
   112fc:	b930      	cbnz	r0, 1130c <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   112fe:	462a      	mov	r2, r5
   11300:	2145      	movs	r1, #69	; 0x45
   11302:	4806      	ldr	r0, [pc, #24]	; (1131c <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   11304:	f008 fc01 	bl	19b0a <printk>
}
   11308:	4620      	mov	r0, r4
   1130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1130c:	2104      	movs	r1, #4
   1130e:	3008      	adds	r0, #8
   11310:	f003 fc9e 	bl	14c50 <net_buf_simple_add>
	hdr->code = code;
   11314:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   11316:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   11318:	8046      	strh	r6, [r0, #2]
	return buf;
   1131a:	e7f5      	b.n	11308 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1131c:	00020963 	.word	0x00020963

00011320 <l2cap_rtx_timeout>:
{
   11320:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11322:	4604      	mov	r4, r0
   11324:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   11328:	2145      	movs	r1, #69	; 0x45
   1132a:	4622      	mov	r2, r4
   1132c:	4805      	ldr	r0, [pc, #20]	; (11344 <l2cap_rtx_timeout+0x24>)
   1132e:	f008 fbec 	bl	19b0a <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11332:	4628      	mov	r0, r5
   11334:	4621      	mov	r1, r4
   11336:	f00a f908 	bl	1b54a <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1133a:	4620      	mov	r0, r4
}
   1133c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   11340:	f00a b924 	b.w	1b58c <bt_l2cap_chan_del>
   11344:	00020990 	.word	0x00020990

00011348 <bt_l2cap_connected>:
{
   11348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1134c:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1134e:	4e2d      	ldr	r6, [pc, #180]	; (11404 <bt_l2cap_connected+0xbc>)
   11350:	4f2d      	ldr	r7, [pc, #180]	; (11408 <bt_l2cap_connected+0xc0>)
   11352:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1140c <bt_l2cap_connected+0xc4>
   11356:	42be      	cmp	r6, r7
   11358:	d90a      	bls.n	11370 <bt_l2cap_connected+0x28>
   1135a:	4641      	mov	r1, r8
   1135c:	482c      	ldr	r0, [pc, #176]	; (11410 <bt_l2cap_connected+0xc8>)
   1135e:	f240 1267 	movw	r2, #359	; 0x167
   11362:	f008 fbd2 	bl	19b0a <printk>
   11366:	f240 1167 	movw	r1, #359	; 0x167
   1136a:	4640      	mov	r0, r8
   1136c:	f008 fe73 	bl	1a056 <assert_post_action>
   11370:	42be      	cmp	r6, r7
   11372:	d302      	bcc.n	1137a <bt_l2cap_connected+0x32>
}
   11374:	b003      	add	sp, #12
   11376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1137a:	4628      	mov	r0, r5
   1137c:	6873      	ldr	r3, [r6, #4]
   1137e:	a901      	add	r1, sp, #4
   11380:	4798      	blx	r3
   11382:	2800      	cmp	r0, #0
   11384:	db38      	blt.n	113f8 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   11386:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   11388:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1138a:	2230      	movs	r2, #48	; 0x30
   1138c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   11390:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   11394:	2100      	movs	r1, #0
   11396:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1139a:	f8d6 9008 	ldr.w	r9, [r6, #8]
   1139e:	f009 fe1f 	bl	1afe0 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   113a2:	2200      	movs	r2, #0
   113a4:	4b1b      	ldr	r3, [pc, #108]	; (11414 <bt_l2cap_connected+0xcc>)
   113a6:	6163      	str	r3, [r4, #20]
   113a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   113ac:	e8d3 1fef 	ldaex	r1, [r3]
   113b0:	e8c3 2fe0 	stlex	r0, r2, [r3]
   113b4:	2800      	cmp	r0, #0
   113b6:	d1f9      	bne.n	113ac <bt_l2cap_connected+0x64>
	parent->next = child;
   113b8:	60a2      	str	r2, [r4, #8]
	return list->tail;
   113ba:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   113bc:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   113c0:	b9e2      	cbnz	r2, 113fc <bt_l2cap_connected+0xb4>
	list->head = node;
   113c2:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   113c6:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   113c8:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   113ca:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   113cc:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   113d0:	681b      	ldr	r3, [r3, #0]
   113d2:	b103      	cbz	r3, 113d6 <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   113d4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   113d6:	9b01      	ldr	r3, [sp, #4]
   113d8:	3340      	adds	r3, #64	; 0x40
   113da:	e8d3 2fef 	ldaex	r2, [r3]
   113de:	f042 0201 	orr.w	r2, r2, #1
   113e2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   113e6:	2900      	cmp	r1, #0
   113e8:	d1f7      	bne.n	113da <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   113ea:	9801      	ldr	r0, [sp, #4]
   113ec:	6843      	ldr	r3, [r0, #4]
   113ee:	699b      	ldr	r3, [r3, #24]
   113f0:	b113      	cbz	r3, 113f8 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   113f2:	f100 0140 	add.w	r1, r0, #64	; 0x40
   113f6:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   113f8:	360c      	adds	r6, #12
   113fa:	e7ac      	b.n	11356 <bt_l2cap_connected+0xe>
	parent->next = child;
   113fc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   113fe:	656b      	str	r3, [r5, #84]	; 0x54
}
   11400:	e7e1      	b.n	113c6 <bt_l2cap_connected+0x7e>
   11402:	bf00      	nop
   11404:	0001d7c8 	.word	0x0001d7c8
   11408:	0001d7ec 	.word	0x0001d7ec
   1140c:	000209a5 	.word	0x000209a5
   11410:	0001ecfc 	.word	0x0001ecfc
   11414:	00011321 	.word	0x00011321

00011418 <l2cap_recv>:
{
   11418:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1141a:	898b      	ldrh	r3, [r1, #12]
{
   1141c:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1141e:	2b03      	cmp	r3, #3
{
   11420:	460d      	mov	r5, r1
   11422:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   11424:	d804      	bhi.n	11430 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   11426:	2145      	movs	r1, #69	; 0x45
   11428:	483a      	ldr	r0, [pc, #232]	; (11514 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1142a:	f008 fb6e 	bl	19b0a <printk>
		return 0;
   1142e:	e00d      	b.n	1144c <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   11430:	2104      	movs	r1, #4
   11432:	f105 0008 	add.w	r0, r5, #8
   11436:	f003 fbed 	bl	14c14 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1143a:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1143c:	8843      	ldrh	r3, [r0, #2]
   1143e:	4604      	mov	r4, r0
	if (buf->len != len) {
   11440:	4293      	cmp	r3, r2
   11442:	d006      	beq.n	11452 <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   11444:	2145      	movs	r1, #69	; 0x45
   11446:	4834      	ldr	r0, [pc, #208]	; (11518 <l2cap_recv+0x100>)
   11448:	f008 fb5f 	bl	19b0a <printk>
}
   1144c:	2000      	movs	r0, #0
   1144e:	b005      	add	sp, #20
   11450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   11452:	7841      	ldrb	r1, [r0, #1]
   11454:	b911      	cbnz	r1, 1145c <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   11456:	2145      	movs	r1, #69	; 0x45
   11458:	4830      	ldr	r0, [pc, #192]	; (1151c <l2cap_recv+0x104>)
   1145a:	e7e6      	b.n	1142a <l2cap_recv+0x12>
	switch (hdr->code) {
   1145c:	7802      	ldrb	r2, [r0, #0]
   1145e:	2a12      	cmp	r2, #18
   11460:	d00f      	beq.n	11482 <l2cap_recv+0x6a>
   11462:	2a13      	cmp	r2, #19
   11464:	d008      	beq.n	11478 <l2cap_recv+0x60>
   11466:	2a01      	cmp	r2, #1
   11468:	d0f0      	beq.n	1144c <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1146a:	2157      	movs	r1, #87	; 0x57
   1146c:	482c      	ldr	r0, [pc, #176]	; (11520 <l2cap_recv+0x108>)
   1146e:	f008 fb4c 	bl	19b0a <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   11472:	7861      	ldrb	r1, [r4, #1]
   11474:	6830      	ldr	r0, [r6, #0]
   11476:	e00d      	b.n	11494 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   11478:	2b01      	cmp	r3, #1
   1147a:	d8e7      	bhi.n	1144c <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   1147c:	2145      	movs	r1, #69	; 0x45
   1147e:	4829      	ldr	r0, [pc, #164]	; (11524 <l2cap_recv+0x10c>)
   11480:	e7d3      	b.n	1142a <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   11482:	2b07      	cmp	r3, #7
   11484:	d802      	bhi.n	1148c <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   11486:	2145      	movs	r1, #69	; 0x45
   11488:	4827      	ldr	r0, [pc, #156]	; (11528 <l2cap_recv+0x110>)
   1148a:	e7ce      	b.n	1142a <l2cap_recv+0x12>
   1148c:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   1148e:	78e7      	ldrb	r7, [r4, #3]
   11490:	b11f      	cbz	r7, 1149a <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   11492:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   11494:	f00a f8c1 	bl	1b61a <l2cap_send_reject.constprop.0>
		break;
   11498:	e7d8      	b.n	1144c <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1149a:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1149c:	7850      	ldrb	r0, [r2, #1]
   1149e:	7813      	ldrb	r3, [r2, #0]
   114a0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   114a4:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   114a8:	78d0      	ldrb	r0, [r2, #3]
   114aa:	7893      	ldrb	r3, [r2, #2]
   114ac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   114b0:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   114b4:	7950      	ldrb	r0, [r2, #5]
   114b6:	7913      	ldrb	r3, [r2, #4]
   114b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   114bc:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   114c0:	7993      	ldrb	r3, [r2, #6]
   114c2:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   114c4:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   114c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   114ca:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   114cc:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   114d0:	f7ff ff08 	bl	112e4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   114d4:	4605      	mov	r5, r0
   114d6:	2800      	cmp	r0, #0
   114d8:	d0b8      	beq.n	1144c <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   114da:	a902      	add	r1, sp, #8
   114dc:	4620      	mov	r0, r4
   114de:	f7ff f895 	bl	1060c <le_param_req>
   114e2:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   114e4:	2102      	movs	r1, #2
   114e6:	f105 0008 	add.w	r0, r5, #8
   114ea:	f003 fbb1 	bl	14c50 <net_buf_simple_add>
	if (accepted) {
   114ee:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   114f2:	b2db      	uxtb	r3, r3
   114f4:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   114f6:	462a      	mov	r2, r5
   114f8:	463b      	mov	r3, r7
   114fa:	2105      	movs	r1, #5
   114fc:	4620      	mov	r0, r4
   114fe:	9700      	str	r7, [sp, #0]
   11500:	f00a f872 	bl	1b5e8 <bt_l2cap_send_cb>
	if (accepted) {
   11504:	2e00      	cmp	r6, #0
   11506:	d0a1      	beq.n	1144c <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   11508:	4620      	mov	r0, r4
   1150a:	a902      	add	r1, sp, #8
   1150c:	f009 fff3 	bl	1b4f6 <bt_conn_le_conn_update>
   11510:	e79c      	b.n	1144c <l2cap_recv+0x34>
   11512:	bf00      	nop
   11514:	000209d6 	.word	0x000209d6
   11518:	000209f9 	.word	0x000209f9
   1151c:	00020a1f 	.word	0x00020a1f
   11520:	00020a8e 	.word	0x00020a8e
   11524:	00020a45 	.word	0x00020a45
   11528:	00020a66 	.word	0x00020a66

0001152c <bt_l2cap_recv>:
{
   1152c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1152e:	898b      	ldrh	r3, [r1, #12]
{
   11530:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   11532:	2b03      	cmp	r3, #3
{
   11534:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   11536:	d808      	bhi.n	1154a <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   11538:	2145      	movs	r1, #69	; 0x45
   1153a:	480e      	ldr	r0, [pc, #56]	; (11574 <bt_l2cap_recv+0x48>)
   1153c:	f008 fae5 	bl	19b0a <printk>
	net_buf_unref(buf);
   11540:	4620      	mov	r0, r4
}
   11542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   11546:	f003 ba6d 	b.w	14a24 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1154a:	2104      	movs	r1, #4
   1154c:	f104 0008 	add.w	r0, r4, #8
   11550:	f003 fb60 	bl	14c14 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   11554:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   11556:	4628      	mov	r0, r5
   11558:	4611      	mov	r1, r2
   1155a:	f00a f885 	bl	1b668 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1155e:	b920      	cbnz	r0, 1156a <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   11560:	2157      	movs	r1, #87	; 0x57
   11562:	4805      	ldr	r0, [pc, #20]	; (11578 <bt_l2cap_recv+0x4c>)
   11564:	f008 fad1 	bl	19b0a <printk>
		net_buf_unref(buf);
   11568:	e7ea      	b.n	11540 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   1156a:	6843      	ldr	r3, [r0, #4]
   1156c:	4621      	mov	r1, r4
   1156e:	691b      	ldr	r3, [r3, #16]
   11570:	4798      	blx	r3
   11572:	e7e5      	b.n	11540 <bt_l2cap_recv+0x14>
   11574:	00020ab1 	.word	0x00020ab1
   11578:	00020ad3 	.word	0x00020ad3

0001157c <bt_l2cap_update_conn_param>:
{
   1157c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1157e:	460c      	mov	r4, r1
	ident++;
   11580:	4914      	ldr	r1, [pc, #80]	; (115d4 <bt_l2cap_update_conn_param+0x58>)
{
   11582:	4605      	mov	r5, r0
	ident++;
   11584:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11586:	2208      	movs	r2, #8
	ident++;
   11588:	3301      	adds	r3, #1
	if (!ident) {
   1158a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1158e:	bf08      	it	eq
   11590:	2301      	moveq	r3, #1
   11592:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11594:	2012      	movs	r0, #18
   11596:	7809      	ldrb	r1, [r1, #0]
   11598:	f7ff fea4 	bl	112e4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1159c:	4606      	mov	r6, r0
   1159e:	b1b0      	cbz	r0, 115ce <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   115a0:	2108      	movs	r1, #8
   115a2:	4408      	add	r0, r1
   115a4:	f003 fb54 	bl	14c50 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   115a8:	8822      	ldrh	r2, [r4, #0]
   115aa:	2105      	movs	r1, #5
   115ac:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   115ae:	8862      	ldrh	r2, [r4, #2]
   115b0:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   115b2:	88a2      	ldrh	r2, [r4, #4]
   115b4:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   115b6:	88e2      	ldrh	r2, [r4, #6]
   115b8:	2400      	movs	r4, #0
   115ba:	80c2      	strh	r2, [r0, #6]
   115bc:	4623      	mov	r3, r4
   115be:	4632      	mov	r2, r6
   115c0:	4628      	mov	r0, r5
   115c2:	9400      	str	r4, [sp, #0]
   115c4:	f00a f810 	bl	1b5e8 <bt_l2cap_send_cb>
	return 0;
   115c8:	4620      	mov	r0, r4
}
   115ca:	b002      	add	sp, #8
   115cc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   115ce:	f06f 000b 	mvn.w	r0, #11
   115d2:	e7fa      	b.n	115ca <bt_l2cap_update_conn_param+0x4e>
   115d4:	2000c5f8 	.word	0x2000c5f8

000115d8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   115d8:	4b02      	ldr	r3, [pc, #8]	; (115e4 <att_cfm_sent+0xc>)
   115da:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   115de:	f00a b866 	b.w	1b6ae <att_sent>
   115e2:	bf00      	nop
   115e4:	0001babd 	.word	0x0001babd

000115e8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   115e8:	4b02      	ldr	r3, [pc, #8]	; (115f4 <att_rsp_sent+0xc>)
   115ea:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   115ee:	f00a b85e 	b.w	1b6ae <att_sent>
   115f2:	bf00      	nop
   115f4:	0001baa9 	.word	0x0001baa9

000115f8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   115f8:	4b02      	ldr	r3, [pc, #8]	; (11604 <att_req_sent+0xc>)
   115fa:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   115fe:	f00a b856 	b.w	1b6ae <att_sent>
   11602:	bf00      	nop
   11604:	000117b5 	.word	0x000117b5

00011608 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   11608:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1160a:	7a83      	ldrb	r3, [r0, #10]
   1160c:	2b07      	cmp	r3, #7
   1160e:	d005      	beq.n	1161c <att_get+0x14>
		BT_WARN("Not connected");
   11610:	2157      	movs	r1, #87	; 0x57
   11612:	480e      	ldr	r0, [pc, #56]	; (1164c <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   11614:	f008 fa79 	bl	19b0a <printk>
		return NULL;
   11618:	2400      	movs	r4, #0
   1161a:	e008      	b.n	1162e <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1161c:	2104      	movs	r1, #4
   1161e:	f00a f823 	bl	1b668 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11622:	4604      	mov	r4, r0
   11624:	b928      	cbnz	r0, 11632 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   11626:	2145      	movs	r1, #69	; 0x45
   11628:	4809      	ldr	r0, [pc, #36]	; (11650 <att_get+0x48>)
   1162a:	f008 fa6e 	bl	19b0a <printk>
	}

	return att_chan->att;
}
   1162e:	4620      	mov	r0, r4
   11630:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11632:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   11636:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1163a:	075b      	lsls	r3, r3, #29
   1163c:	d502      	bpl.n	11644 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   1163e:	2157      	movs	r1, #87	; 0x57
   11640:	4804      	ldr	r0, [pc, #16]	; (11654 <att_get+0x4c>)
   11642:	e7e7      	b.n	11614 <att_get+0xc>
	return att_chan->att;
   11644:	f850 4c08 	ldr.w	r4, [r0, #-8]
   11648:	e7f1      	b.n	1162e <att_get+0x26>
   1164a:	bf00      	nop
   1164c:	00020b0d 	.word	0x00020b0d
   11650:	00020b20 	.word	0x00020b20
   11654:	00020b40 	.word	0x00020b40

00011658 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   11658:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1165a:	3808      	subs	r0, #8
   1165c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1165e:	a901      	add	r1, sp, #4
   11660:	4802      	ldr	r0, [pc, #8]	; (1166c <bt_att_released+0x14>)
   11662:	f005 fd7b 	bl	1715c <k_mem_slab_free>
}
   11666:	b003      	add	sp, #12
   11668:	f85d fb04 	ldr.w	pc, [sp], #4
   1166c:	20008608 	.word	0x20008608

00011670 <find_type_cb>:
{
   11670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11674:	f642 0301 	movw	r3, #10241	; 0x2801
   11678:	2500      	movs	r5, #0
{
   1167a:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   1167c:	f8d2 9000 	ldr.w	r9, [r2]
{
   11680:	4607      	mov	r7, r0
   11682:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11684:	6800      	ldr	r0, [r0, #0]
   11686:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   11688:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   1168c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1168e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   11692:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   11696:	f009 fced 	bl	1b074 <bt_uuid_cmp>
   1169a:	2800      	cmp	r0, #0
   1169c:	d060      	beq.n	11760 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1169e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   116a2:	6838      	ldr	r0, [r7, #0]
   116a4:	a90b      	add	r1, sp, #44	; 0x2c
   116a6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   116aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   116ae:	f009 fce1 	bl	1b074 <bt_uuid_cmp>
   116b2:	b138      	cbz	r0, 116c4 <find_type_cb+0x54>
		if (data->group &&
   116b4:	68a3      	ldr	r3, [r4, #8]
   116b6:	b11b      	cbz	r3, 116c0 <find_type_cb+0x50>
   116b8:	885a      	ldrh	r2, [r3, #2]
   116ba:	42b2      	cmp	r2, r6
   116bc:	d200      	bcs.n	116c0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   116be:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   116c0:	2001      	movs	r0, #1
   116c2:	e009      	b.n	116d8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   116c4:	6861      	ldr	r1, [r4, #4]
   116c6:	4608      	mov	r0, r1
   116c8:	f009 ffe9 	bl	1b69e <net_buf_frags_len>
   116cc:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   116d0:	1a1b      	subs	r3, r3, r0
   116d2:	2b03      	cmp	r3, #3
   116d4:	d803      	bhi.n	116de <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   116d6:	2000      	movs	r0, #0
}
   116d8:	b011      	add	sp, #68	; 0x44
   116da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   116de:	4608      	mov	r0, r1
   116e0:	f003 f9fc 	bl	14adc <net_buf_frag_last>
   116e4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   116e6:	6860      	ldr	r0, [r4, #4]
   116e8:	f009 ffd9 	bl	1b69e <net_buf_frags_len>
   116ec:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   116f0:	f105 0b08 	add.w	fp, r5, #8
   116f4:	ebaa 0a00 	sub.w	sl, sl, r0
   116f8:	4658      	mov	r0, fp
   116fa:	f00a ff40 	bl	1c57e <net_buf_simple_tailroom>
   116fe:	4582      	cmp	sl, r0
   11700:	d231      	bcs.n	11766 <find_type_cb+0xf6>
   11702:	6860      	ldr	r0, [r4, #4]
   11704:	f009 ffcb 	bl	1b69e <net_buf_frags_len>
   11708:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1170c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1170e:	b970      	cbnz	r0, 1172e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   11710:	6863      	ldr	r3, [r4, #4]
   11712:	7998      	ldrb	r0, [r3, #6]
   11714:	f003 f806 	bl	14724 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   11718:	2200      	movs	r2, #0
   1171a:	2300      	movs	r3, #0
   1171c:	f00a ff09 	bl	1c532 <net_buf_alloc_fixed>
		if (!frag) {
   11720:	4605      	mov	r5, r0
   11722:	2800      	cmp	r0, #0
   11724:	d0d7      	beq.n	116d6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   11726:	4601      	mov	r1, r0
   11728:	6860      	ldr	r0, [r4, #4]
   1172a:	f003 fa17 	bl	14b5c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1172e:	2300      	movs	r3, #0
   11730:	9300      	str	r3, [sp, #0]
   11732:	4639      	mov	r1, r7
   11734:	f8d7 9004 	ldr.w	r9, [r7, #4]
   11738:	2310      	movs	r3, #16
   1173a:	4640      	mov	r0, r8
   1173c:	aa02      	add	r2, sp, #8
   1173e:	47c8      	blx	r9
	if (read < 0) {
   11740:	1e07      	subs	r7, r0, #0
   11742:	db0d      	blt.n	11760 <find_type_cb+0xf0>
	if (read != data->value_len) {
   11744:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   11746:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   11748:	42ba      	cmp	r2, r7
   1174a:	d02b      	beq.n	117a4 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1174c:	4601      	mov	r1, r0
   1174e:	a80b      	add	r0, sp, #44	; 0x2c
   11750:	f009 fcbe 	bl	1b0d0 <bt_uuid_create>
   11754:	b958      	cbnz	r0, 1176e <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   11756:	2157      	movs	r1, #87	; 0x57
   11758:	7c22      	ldrb	r2, [r4, #16]
   1175a:	4814      	ldr	r0, [pc, #80]	; (117ac <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   1175c:	f008 f9d5 	bl	19b0a <printk>
	data->group = NULL;
   11760:	2300      	movs	r3, #0
   11762:	60a3      	str	r3, [r4, #8]
   11764:	e7ac      	b.n	116c0 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   11766:	4658      	mov	r0, fp
   11768:	f00a ff09 	bl	1c57e <net_buf_simple_tailroom>
   1176c:	e7cf      	b.n	1170e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1176e:	b2fa      	uxtb	r2, r7
   11770:	a902      	add	r1, sp, #8
   11772:	a806      	add	r0, sp, #24
   11774:	f009 fcac 	bl	1b0d0 <bt_uuid_create>
   11778:	b918      	cbnz	r0, 11782 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   1177a:	463a      	mov	r2, r7
   1177c:	2157      	movs	r1, #87	; 0x57
   1177e:	480c      	ldr	r0, [pc, #48]	; (117b0 <find_type_cb+0x140>)
   11780:	e7ec      	b.n	1175c <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   11782:	a906      	add	r1, sp, #24
   11784:	a80b      	add	r0, sp, #44	; 0x2c
   11786:	f009 fc75 	bl	1b074 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1178a:	2800      	cmp	r0, #0
   1178c:	d1e8      	bne.n	11760 <find_type_cb+0xf0>
	data->err = 0x00;
   1178e:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   11790:	2104      	movs	r1, #4
   11792:	7463      	strb	r3, [r4, #17]
   11794:	f105 0008 	add.w	r0, r5, #8
   11798:	f003 fa5a 	bl	14c50 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1179c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1179e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   117a0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   117a2:	e78d      	b.n	116c0 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   117a4:	a902      	add	r1, sp, #8
   117a6:	f009 fbdf 	bl	1af68 <memcmp>
   117aa:	e7ee      	b.n	1178a <find_type_cb+0x11a>
   117ac:	00020b69 	.word	0x00020b69
   117b0:	00020b8d 	.word	0x00020b8d

000117b4 <chan_req_sent>:
	if (chan->req) {
   117b4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   117b8:	b13b      	cbz	r3, 117ca <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   117ba:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   117be:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   117c2:	2300      	movs	r3, #0
   117c4:	4801      	ldr	r0, [pc, #4]	; (117cc <chan_req_sent+0x18>)
   117c6:	f007 ba2d 	b.w	18c24 <k_delayed_work_submit_to_queue>
}
   117ca:	4770      	bx	lr
   117cc:	2000a3b0 	.word	0x2000a3b0

000117d0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   117d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   117d2:	2300      	movs	r3, #0
{
   117d4:	4606      	mov	r6, r0
   117d6:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   117d8:	2200      	movs	r2, #0
   117da:	4669      	mov	r1, sp
   117dc:	4823      	ldr	r0, [pc, #140]	; (1186c <bt_att_accept+0x9c>)
   117de:	f005 fc63 	bl	170a8 <k_mem_slab_alloc>
   117e2:	4604      	mov	r4, r0
   117e4:	b148      	cbz	r0, 117fa <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   117e6:	4632      	mov	r2, r6
   117e8:	2145      	movs	r1, #69	; 0x45
   117ea:	4821      	ldr	r0, [pc, #132]	; (11870 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   117ec:	f008 f98d 	bl	19b0a <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   117f0:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   117f4:	4620      	mov	r0, r4
   117f6:	b003      	add	sp, #12
   117f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   117fa:	4601      	mov	r1, r0
   117fc:	2230      	movs	r2, #48	; 0x30
   117fe:	9800      	ldr	r0, [sp, #0]
   11800:	f009 fbee 	bl	1afe0 <memset>
	att->conn = conn;
   11804:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11806:	2200      	movs	r2, #0
	list->head = NULL;
   11808:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1180c:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   11810:	60ac      	str	r4, [r5, #8]
   11812:	2300      	movs	r3, #0
   11814:	4817      	ldr	r0, [pc, #92]	; (11874 <bt_att_accept+0xa4>)
   11816:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   11818:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1181a:	f005 fc45 	bl	170a8 <k_mem_slab_alloc>
   1181e:	4604      	mov	r4, r0
   11820:	b118      	cbz	r0, 1182a <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   11822:	2145      	movs	r1, #69	; 0x45
   11824:	682a      	ldr	r2, [r5, #0]
   11826:	4814      	ldr	r0, [pc, #80]	; (11878 <bt_att_accept+0xa8>)
   11828:	e7e0      	b.n	117ec <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   1182a:	4601      	mov	r1, r0
   1182c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11830:	9801      	ldr	r0, [sp, #4]
   11832:	f009 fbd5 	bl	1afe0 <memset>
	chan->chan.chan.ops = &ops;
   11836:	9801      	ldr	r0, [sp, #4]
   11838:	4b10      	ldr	r3, [pc, #64]	; (1187c <bt_att_accept+0xac>)
   1183a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1183c:	30d0      	adds	r0, #208	; 0xd0
   1183e:	f00b fcd4 	bl	1d1ea <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   11842:	9801      	ldr	r0, [sp, #4]
   11844:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   11848:	2203      	movs	r2, #3
   1184a:	4611      	mov	r1, r2
   1184c:	f00b fd32 	bl	1d2b4 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11850:	9b01      	ldr	r3, [sp, #4]
   11852:	33c8      	adds	r3, #200	; 0xc8
   11854:	e8d3 2fef 	ldaex	r2, [r3]
   11858:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1185c:	2900      	cmp	r1, #0
   1185e:	d1f9      	bne.n	11854 <bt_att_accept+0x84>
	chan->att = att;
   11860:	9b01      	ldr	r3, [sp, #4]
   11862:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   11866:	603b      	str	r3, [r7, #0]
	return 0;
   11868:	e7c4      	b.n	117f4 <bt_att_accept+0x24>
   1186a:	bf00      	nop
   1186c:	200085ec 	.word	0x200085ec
   11870:	00020bb1 	.word	0x00020bb1
   11874:	20008608 	.word	0x20008608
   11878:	00020bdb 	.word	0x00020bdb
   1187c:	20008438 	.word	0x20008438

00011880 <read_group_cb>:
{
   11880:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11884:	f04f 0800 	mov.w	r8, #0
   11888:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1188c:	4605      	mov	r5, r0
   1188e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11890:	6800      	ldr	r0, [r0, #0]
   11892:	a902      	add	r1, sp, #8
{
   11894:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   11896:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11898:	f88d 8008 	strb.w	r8, [sp, #8]
   1189c:	f8ad 300a 	strh.w	r3, [sp, #10]
   118a0:	f009 fbe8 	bl	1b074 <bt_uuid_cmp>
   118a4:	b1a0      	cbz	r0, 118d0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   118a6:	f642 0301 	movw	r3, #10241	; 0x2801
   118aa:	6828      	ldr	r0, [r5, #0]
   118ac:	a903      	add	r1, sp, #12
   118ae:	f88d 800c 	strb.w	r8, [sp, #12]
   118b2:	f8ad 300e 	strh.w	r3, [sp, #14]
   118b6:	f009 fbdd 	bl	1b074 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   118ba:	b148      	cbz	r0, 118d0 <read_group_cb+0x50>
		if (data->group &&
   118bc:	6923      	ldr	r3, [r4, #16]
   118be:	b11b      	cbz	r3, 118c8 <read_group_cb+0x48>
   118c0:	885a      	ldrh	r2, [r3, #2]
   118c2:	42b2      	cmp	r2, r6
   118c4:	d200      	bcs.n	118c8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   118c6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   118c8:	2001      	movs	r0, #1
}
   118ca:	b004      	add	sp, #16
   118cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   118d0:	6861      	ldr	r1, [r4, #4]
   118d2:	6828      	ldr	r0, [r5, #0]
   118d4:	f009 fbce 	bl	1b074 <bt_uuid_cmp>
   118d8:	b110      	cbz	r0, 118e0 <read_group_cb+0x60>
		data->group = NULL;
   118da:	2300      	movs	r3, #0
   118dc:	6123      	str	r3, [r4, #16]
   118de:	e7f3      	b.n	118c8 <read_group_cb+0x48>
	if (data->rsp->len &&
   118e0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   118e2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   118e4:	781a      	ldrb	r2, [r3, #0]
   118e6:	b13a      	cbz	r2, 118f8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   118e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   118ec:	8981      	ldrh	r1, [r0, #12]
   118ee:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   118f0:	4293      	cmp	r3, r2
   118f2:	da01      	bge.n	118f8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   118f4:	2000      	movs	r0, #0
   118f6:	e7e8      	b.n	118ca <read_group_cb+0x4a>
   118f8:	2104      	movs	r1, #4
   118fa:	3008      	adds	r0, #8
   118fc:	f003 f9a8 	bl	14c50 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11900:	4b09      	ldr	r3, [pc, #36]	; (11928 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   11902:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11904:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   11906:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11908:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1190a:	68a2      	ldr	r2, [r4, #8]
   1190c:	9300      	str	r3, [sp, #0]
   1190e:	4638      	mov	r0, r7
   11910:	2300      	movs	r3, #0
   11912:	9401      	str	r4, [sp, #4]
   11914:	f009 ffbe 	bl	1b894 <att_chan_read>
	if (read < 0) {
   11918:	2800      	cmp	r0, #0
   1191a:	dbeb      	blt.n	118f4 <read_group_cb+0x74>
	if (!data->group) {
   1191c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1191e:	3800      	subs	r0, #0
   11920:	bf18      	it	ne
   11922:	2001      	movne	r0, #1
   11924:	e7d1      	b.n	118ca <read_group_cb+0x4a>
   11926:	bf00      	nop
   11928:	0001b819 	.word	0x0001b819

0001192c <chan_send>:
{
   1192c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11930:	688b      	ldr	r3, [r1, #8]
{
   11932:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11934:	781b      	ldrb	r3, [r3, #0]
{
   11936:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11938:	2bd2      	cmp	r3, #210	; 0xd2
{
   1193a:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1193c:	d110      	bne.n	11960 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   1193e:	6803      	ldr	r3, [r0, #0]
   11940:	6818      	ldr	r0, [r3, #0]
   11942:	f00a fdf0 	bl	1c526 <bt_smp_sign>
		if (err) {
   11946:	4606      	mov	r6, r0
   11948:	b150      	cbz	r0, 11960 <chan_send+0x34>
			BT_ERR("Error signing data");
   1194a:	2145      	movs	r1, #69	; 0x45
   1194c:	4824      	ldr	r0, [pc, #144]	; (119e0 <chan_send+0xb4>)
   1194e:	f008 f8dc 	bl	19b0a <printk>
		net_buf_unref(buf);
   11952:	4620      	mov	r0, r4
   11954:	f003 f866 	bl	14a24 <net_buf_unref>
}
   11958:	4630      	mov	r0, r6
   1195a:	b003      	add	sp, #12
   1195c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   11960:	f104 0008 	add.w	r0, r4, #8
   11964:	f00a fe07 	bl	1c576 <net_buf_simple_headroom>
	state->len = buf->len;
   11968:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1196c:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1196e:	f1b9 0f00 	cmp.w	r9, #0
   11972:	d10a      	bne.n	1198a <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   11974:	68a3      	ldr	r3, [r4, #8]
   11976:	7818      	ldrb	r0, [r3, #0]
   11978:	f009 feb1 	bl	1b6de <att_op_get_type>
   1197c:	1e43      	subs	r3, r0, #1
   1197e:	b2db      	uxtb	r3, r3
   11980:	2b04      	cmp	r3, #4
   11982:	bf9c      	itt	ls
   11984:	4a17      	ldrls	r2, [pc, #92]	; (119e4 <chan_send+0xb8>)
   11986:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1198a:	682b      	ldr	r3, [r5, #0]
   1198c:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   1198e:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11992:	681e      	ldr	r6, [r3, #0]
   11994:	f003 f88a 	bl	14aac <net_buf_ref>
   11998:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   1199c:	4b12      	ldr	r3, [pc, #72]	; (119e8 <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1199e:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   119a0:	4299      	cmp	r1, r3
   119a2:	d019      	beq.n	119d8 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   119a4:	4b11      	ldr	r3, [pc, #68]	; (119ec <chan_send+0xc0>)
   119a6:	4299      	cmp	r1, r3
   119a8:	d018      	beq.n	119dc <chan_send+0xb0>
		return att_sent;
   119aa:	f8df c044 	ldr.w	ip, [pc, #68]	; 119f0 <chan_send+0xc4>
   119ae:	4b11      	ldr	r3, [pc, #68]	; (119f4 <chan_send+0xc8>)
   119b0:	4811      	ldr	r0, [pc, #68]	; (119f8 <chan_send+0xcc>)
   119b2:	4561      	cmp	r1, ip
   119b4:	bf18      	it	ne
   119b6:	4603      	movne	r3, r0
				&chan->chan.chan);
   119b8:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   119ba:	4630      	mov	r0, r6
   119bc:	2104      	movs	r1, #4
   119be:	9500      	str	r5, [sp, #0]
   119c0:	f009 fe12 	bl	1b5e8 <bt_l2cap_send_cb>
	if (!err) {
   119c4:	4606      	mov	r6, r0
   119c6:	2800      	cmp	r0, #0
   119c8:	d0c3      	beq.n	11952 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   119ca:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   119cc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   119d0:	fa10 f787 	uxtah	r7, r0, r7
   119d4:	60a7      	str	r7, [r4, #8]
}
   119d6:	e7bf      	b.n	11958 <chan_send+0x2c>
		return att_rsp_sent;
   119d8:	4b08      	ldr	r3, [pc, #32]	; (119fc <chan_send+0xd0>)
   119da:	e7ed      	b.n	119b8 <chan_send+0x8c>
		return att_cfm_sent;
   119dc:	4b08      	ldr	r3, [pc, #32]	; (11a00 <chan_send+0xd4>)
   119de:	e7eb      	b.n	119b8 <chan_send+0x8c>
   119e0:	00020c05 	.word	0x00020c05
   119e4:	0001defc 	.word	0x0001defc
   119e8:	0001baa9 	.word	0x0001baa9
   119ec:	0001babd 	.word	0x0001babd
   119f0:	000117b5 	.word	0x000117b5
   119f4:	000115f9 	.word	0x000115f9
   119f8:	0001b6af 	.word	0x0001b6af
   119fc:	000115e9 	.word	0x000115e9
   11a00:	000115d9 	.word	0x000115d9

00011a04 <bt_att_chan_req_send>:
{
   11a04:	b570      	push	{r4, r5, r6, lr}
   11a06:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   11a08:	4604      	mov	r4, r0
   11a0a:	b950      	cbnz	r0, 11a22 <bt_att_chan_req_send+0x1e>
   11a0c:	4924      	ldr	r1, [pc, #144]	; (11aa0 <bt_att_chan_req_send+0x9c>)
   11a0e:	4825      	ldr	r0, [pc, #148]	; (11aa4 <bt_att_chan_req_send+0xa0>)
   11a10:	f240 224f 	movw	r2, #591	; 0x24f
   11a14:	f008 f879 	bl	19b0a <printk>
   11a18:	f240 214f 	movw	r1, #591	; 0x24f
   11a1c:	4820      	ldr	r0, [pc, #128]	; (11aa0 <bt_att_chan_req_send+0x9c>)
   11a1e:	f008 fb1a 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(req);
   11a22:	b955      	cbnz	r5, 11a3a <bt_att_chan_req_send+0x36>
   11a24:	491e      	ldr	r1, [pc, #120]	; (11aa0 <bt_att_chan_req_send+0x9c>)
   11a26:	481f      	ldr	r0, [pc, #124]	; (11aa4 <bt_att_chan_req_send+0xa0>)
   11a28:	f44f 7214 	mov.w	r2, #592	; 0x250
   11a2c:	f008 f86d 	bl	19b0a <printk>
   11a30:	f44f 7114 	mov.w	r1, #592	; 0x250
   11a34:	481a      	ldr	r0, [pc, #104]	; (11aa0 <bt_att_chan_req_send+0x9c>)
   11a36:	f008 fb0e 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   11a3a:	686b      	ldr	r3, [r5, #4]
   11a3c:	b953      	cbnz	r3, 11a54 <bt_att_chan_req_send+0x50>
   11a3e:	4918      	ldr	r1, [pc, #96]	; (11aa0 <bt_att_chan_req_send+0x9c>)
   11a40:	4818      	ldr	r0, [pc, #96]	; (11aa4 <bt_att_chan_req_send+0xa0>)
   11a42:	f240 2251 	movw	r2, #593	; 0x251
   11a46:	f008 f860 	bl	19b0a <printk>
   11a4a:	f240 2151 	movw	r1, #593	; 0x251
   11a4e:	4814      	ldr	r0, [pc, #80]	; (11aa0 <bt_att_chan_req_send+0x9c>)
   11a50:	f008 fb01 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   11a54:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   11a58:	b153      	cbz	r3, 11a70 <bt_att_chan_req_send+0x6c>
   11a5a:	4911      	ldr	r1, [pc, #68]	; (11aa0 <bt_att_chan_req_send+0x9c>)
   11a5c:	4811      	ldr	r0, [pc, #68]	; (11aa4 <bt_att_chan_req_send+0xa0>)
   11a5e:	f240 2252 	movw	r2, #594	; 0x252
   11a62:	f008 f852 	bl	19b0a <printk>
   11a66:	f240 2152 	movw	r1, #594	; 0x252
   11a6a:	480d      	ldr	r0, [pc, #52]	; (11aa0 <bt_att_chan_req_send+0x9c>)
   11a6c:	f008 faf3 	bl	1a056 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   11a70:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   11a74:	2200      	movs	r2, #0
   11a76:	2300      	movs	r3, #0
   11a78:	4630      	mov	r0, r6
   11a7a:	f006 fead 	bl	187d8 <z_impl_k_sem_take>
   11a7e:	2800      	cmp	r0, #0
   11a80:	db0a      	blt.n	11a98 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   11a82:	4620      	mov	r0, r4
   11a84:	4629      	mov	r1, r5
   11a86:	f009 ffe9 	bl	1ba5c <chan_req_send>
	if (err < 0) {
   11a8a:	1e04      	subs	r4, r0, #0
   11a8c:	da02      	bge.n	11a94 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   11a8e:	4630      	mov	r0, r6
   11a90:	f006 fe66 	bl	18760 <z_impl_k_sem_give>
}
   11a94:	4620      	mov	r0, r4
   11a96:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   11a98:	f06f 040a 	mvn.w	r4, #10
   11a9c:	e7fa      	b.n	11a94 <bt_att_chan_req_send+0x90>
   11a9e:	bf00      	nop
   11aa0:	00020c1d 	.word	0x00020c1d
   11aa4:	0001ecfc 	.word	0x0001ecfc

00011aa8 <read_type_cb>:
{
   11aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   11aac:	f8d2 8000 	ldr.w	r8, [r2]
{
   11ab0:	4606      	mov	r6, r0
   11ab2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11ab4:	6800      	ldr	r0, [r0, #0]
   11ab6:	6851      	ldr	r1, [r2, #4]
{
   11ab8:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   11aba:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11abe:	f009 fad9 	bl	1b074 <bt_uuid_cmp>
   11ac2:	4607      	mov	r7, r0
   11ac4:	2800      	cmp	r0, #0
   11ac6:	d13e      	bne.n	11b46 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   11ac8:	4628      	mov	r0, r5
   11aca:	2215      	movs	r2, #21
   11acc:	4631      	mov	r1, r6
   11ace:	f00a fc23 	bl	1c318 <bt_gatt_check_perm>
   11ad2:	4605      	mov	r5, r0
   11ad4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   11ad6:	b148      	cbz	r0, 11aec <read_type_cb+0x44>
		if (data->rsp->len) {
   11ad8:	68e3      	ldr	r3, [r4, #12]
   11ada:	781b      	ldrb	r3, [r3, #0]
   11adc:	b923      	cbnz	r3, 11ae8 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   11ade:	2500      	movs	r5, #0
}
   11ae0:	4628      	mov	r0, r5
   11ae2:	b003      	add	sp, #12
   11ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   11ae8:	7527      	strb	r7, [r4, #20]
   11aea:	e7f8      	b.n	11ade <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   11aec:	68a0      	ldr	r0, [r4, #8]
   11aee:	f002 fff5 	bl	14adc <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   11af2:	2102      	movs	r1, #2
   11af4:	3008      	adds	r0, #8
   11af6:	f003 f8ab 	bl	14c50 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11afa:	4b14      	ldr	r3, [pc, #80]	; (11b4c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   11afc:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11afe:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   11b00:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11b04:	68a2      	ldr	r2, [r4, #8]
   11b06:	9300      	str	r3, [sp, #0]
   11b08:	4640      	mov	r0, r8
   11b0a:	462b      	mov	r3, r5
   11b0c:	9401      	str	r4, [sp, #4]
   11b0e:	f009 fec1 	bl	1b894 <att_chan_read>
	if (read < 0) {
   11b12:	2800      	cmp	r0, #0
   11b14:	da07      	bge.n	11b26 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   11b16:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   11b1a:	bf32      	itee	cc
   11b1c:	200e      	movcc	r0, #14
		return -err;
   11b1e:	4240      	negcs	r0, r0
   11b20:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   11b22:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   11b24:	e7dc      	b.n	11ae0 <read_type_cb+0x38>
	if (!data->item) {
   11b26:	6923      	ldr	r3, [r4, #16]
   11b28:	2b00      	cmp	r3, #0
   11b2a:	d0d8      	beq.n	11ade <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11b2c:	68a0      	ldr	r0, [r4, #8]
   11b2e:	f009 fdb6 	bl	1b69e <net_buf_frags_len>
   11b32:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   11b36:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11b38:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   11b3a:	7818      	ldrb	r0, [r3, #0]
   11b3c:	4285      	cmp	r5, r0
   11b3e:	bf94      	ite	ls
   11b40:	2500      	movls	r5, #0
   11b42:	2501      	movhi	r5, #1
   11b44:	e7cc      	b.n	11ae0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   11b46:	2501      	movs	r5, #1
   11b48:	e7ca      	b.n	11ae0 <read_type_cb+0x38>
   11b4a:	bf00      	nop
   11b4c:	0001b6bb 	.word	0x0001b6bb

00011b50 <bt_att_connected>:
{
   11b50:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   11b52:	2104      	movs	r1, #4
{
   11b54:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   11b56:	6800      	ldr	r0, [r0, #0]
   11b58:	f009 fd76 	bl	1b648 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   11b5c:	4605      	mov	r5, r0
   11b5e:	b950      	cbnz	r0, 11b76 <bt_att_connected+0x26>
   11b60:	4919      	ldr	r1, [pc, #100]	; (11bc8 <bt_att_connected+0x78>)
   11b62:	481a      	ldr	r0, [pc, #104]	; (11bcc <bt_att_connected+0x7c>)
   11b64:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   11b68:	f007 ffcf 	bl	19b0a <printk>
   11b6c:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   11b70:	4815      	ldr	r0, [pc, #84]	; (11bc8 <bt_att_connected+0x78>)
   11b72:	f008 fa70 	bl	1a056 <assert_post_action>
	struct bt_att *att = att_chan->att;
   11b76:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   11b7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11b7c:	b91b      	cbnz	r3, 11b86 <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   11b7e:	f105 000c 	add.w	r0, r5, #12
   11b82:	f00b fb32 	bl	1d1ea <z_impl_k_queue_init>
	parent->next = child;
   11b86:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   11b88:	f504 739a 	add.w	r3, r4, #308	; 0x134
   11b8c:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   11b90:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   11b92:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   11b94:	b902      	cbnz	r2, 11b98 <bt_att_connected+0x48>
	list->tail = node;
   11b96:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11b98:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   11b9c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   11ba0:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11ba2:	bf58      	it	pl
   11ba4:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11ba6:	f04f 0230 	mov.w	r2, #48	; 0x30
   11baa:	bf5c      	itt	pl
   11bac:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11bb0:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   11bb4:	2100      	movs	r1, #0
   11bb6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   11bba:	f009 fa11 	bl	1afe0 <memset>
   11bbe:	4b04      	ldr	r3, [pc, #16]	; (11bd0 <bt_att_connected+0x80>)
   11bc0:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   11bc4:	bd38      	pop	{r3, r4, r5, pc}
   11bc6:	bf00      	nop
   11bc8:	00020c1d 	.word	0x00020c1d
   11bcc:	0001ecfc 	.word	0x0001ecfc
   11bd0:	000124dd 	.word	0x000124dd

00011bd4 <bt_att_chan_create_pdu>:
{
   11bd4:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11bd6:	1c53      	adds	r3, r2, #1
   11bd8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   11bdc:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11bde:	4293      	cmp	r3, r2
   11be0:	d906      	bls.n	11bf0 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   11be2:	2157      	movs	r1, #87	; 0x57
   11be4:	4813      	ldr	r0, [pc, #76]	; (11c34 <bt_att_chan_create_pdu+0x60>)
   11be6:	f007 ff90 	bl	19b0a <printk>
		return NULL;
   11bea:	2400      	movs	r4, #0
}
   11bec:	4620      	mov	r0, r4
   11bee:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   11bf0:	4608      	mov	r0, r1
   11bf2:	f009 fd74 	bl	1b6de <att_op_get_type>
   11bf6:	2802      	cmp	r0, #2
   11bf8:	d001      	beq.n	11bfe <bt_att_chan_create_pdu+0x2a>
   11bfa:	2804      	cmp	r0, #4
   11bfc:	d10e      	bne.n	11c1c <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   11bfe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   11c02:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   11c04:	2100      	movs	r1, #0
   11c06:	4608      	mov	r0, r1
   11c08:	f009 fceb 	bl	1b5e2 <bt_l2cap_create_pdu_timeout>
   11c0c:	4604      	mov	r4, r0
	if (!buf) {
   11c0e:	b950      	cbnz	r0, 11c26 <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11c10:	462a      	mov	r2, r5
   11c12:	2145      	movs	r1, #69	; 0x45
   11c14:	4808      	ldr	r0, [pc, #32]	; (11c38 <bt_att_chan_create_pdu+0x64>)
   11c16:	f007 ff78 	bl	19b0a <printk>
		return NULL;
   11c1a:	e7e7      	b.n	11bec <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   11c1c:	f04f 32ff 	mov.w	r2, #4294967295
   11c20:	f04f 33ff 	mov.w	r3, #4294967295
   11c24:	e7ee      	b.n	11c04 <bt_att_chan_create_pdu+0x30>
   11c26:	2101      	movs	r1, #1
   11c28:	3008      	adds	r0, #8
   11c2a:	f003 f811 	bl	14c50 <net_buf_simple_add>
	hdr->code = op;
   11c2e:	7005      	strb	r5, [r0, #0]
	return buf;
   11c30:	e7dc      	b.n	11bec <bt_att_chan_create_pdu+0x18>
   11c32:	bf00      	nop
   11c34:	00020c4c 	.word	0x00020c4c
   11c38:	00020963 	.word	0x00020963

00011c3c <att_indicate>:
{
   11c3c:	b570      	push	{r4, r5, r6, lr}
   11c3e:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   11c40:	f101 0008 	add.w	r0, r1, #8
   11c44:	460d      	mov	r5, r1
   11c46:	f00a fc8e 	bl	1c566 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   11c4a:	6826      	ldr	r6, [r4, #0]
   11c4c:	4601      	mov	r1, r0
   11c4e:	89ab      	ldrh	r3, [r5, #12]
   11c50:	68aa      	ldr	r2, [r5, #8]
   11c52:	6830      	ldr	r0, [r6, #0]
   11c54:	f00a fbef 	bl	1c436 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   11c58:	211e      	movs	r1, #30
   11c5a:	2200      	movs	r2, #0
   11c5c:	4620      	mov	r0, r4
   11c5e:	f7ff ffb9 	bl	11bd4 <bt_att_chan_create_pdu>
	if (!buf) {
   11c62:	4601      	mov	r1, r0
   11c64:	b118      	cbz	r0, 11c6e <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   11c66:	4620      	mov	r0, r4
   11c68:	4a02      	ldr	r2, [pc, #8]	; (11c74 <att_indicate+0x38>)
   11c6a:	f009 feb5 	bl	1b9d8 <bt_att_chan_send_rsp>
}
   11c6e:	2000      	movs	r0, #0
   11c70:	bd70      	pop	{r4, r5, r6, pc}
   11c72:	bf00      	nop
   11c74:	0001babd 	.word	0x0001babd

00011c78 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   11c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c7c:	4688      	mov	r8, r1
   11c7e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   11c80:	2101      	movs	r1, #1
   11c82:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   11c84:	4605      	mov	r5, r0
   11c86:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   11c88:	f7ff ffa4 	bl	11bd4 <bt_att_chan_create_pdu>
	if (!buf) {
   11c8c:	4604      	mov	r4, r0
   11c8e:	b178      	cbz	r0, 11cb0 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   11c90:	2104      	movs	r1, #4
   11c92:	3008      	adds	r0, #8
   11c94:	f002 ffdc 	bl	14c50 <net_buf_simple_add>
	rsp->request = req;
   11c98:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   11c9c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   11c9e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   11ca2:	4621      	mov	r1, r4
   11ca4:	4628      	mov	r0, r5
}
   11ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   11caa:	4a02      	ldr	r2, [pc, #8]	; (11cb4 <send_err_rsp.part.0+0x3c>)
   11cac:	f009 be94 	b.w	1b9d8 <bt_att_chan_send_rsp>
}
   11cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11cb4:	0001baa9 	.word	0x0001baa9

00011cb8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   11cb8:	898b      	ldrh	r3, [r1, #12]
{
   11cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cbe:	4604      	mov	r4, r0
   11cc0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   11cc2:	b933      	cbnz	r3, 11cd2 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   11cc4:	2145      	movs	r1, #69	; 0x45
   11cc6:	4838      	ldr	r0, [pc, #224]	; (11da8 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   11cc8:	f007 ff1f 	bl	19b0a <printk>
}
   11ccc:	2000      	movs	r0, #0
   11cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   11cd2:	2101      	movs	r1, #1
   11cd4:	f108 0008 	add.w	r0, r8, #8
   11cd8:	f002 ff9c 	bl	14c14 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   11cdc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   11ce0:	4605      	mov	r5, r0
   11ce2:	2b00      	cmp	r3, #0
   11ce4:	d0f2      	beq.n	11ccc <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11ce6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   11ce8:	7802      	ldrb	r2, [r0, #0]
   11cea:	4930      	ldr	r1, [pc, #192]	; (11dac <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   11cec:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   11cf0:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   11cf4:	4290      	cmp	r0, r2
   11cf6:	d114      	bne.n	11d22 <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   11cf8:	00d8      	lsls	r0, r3, #3
   11cfa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11cfe:	789f      	ldrb	r7, [r3, #2]
   11d00:	2f01      	cmp	r7, #1
   11d02:	d123      	bne.n	11d4c <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11d04:	34c0      	adds	r4, #192	; 0xc0
   11d06:	e8d4 3fef 	ldaex	r3, [r4]
   11d0a:	f043 0201 	orr.w	r2, r3, #1
   11d0e:	e8c4 2fec 	stlex	ip, r2, [r4]
   11d12:	f1bc 0f00 	cmp.w	ip, #0
   11d16:	d1f6      	bne.n	11d06 <bt_att_recv+0x4e>
   11d18:	07da      	lsls	r2, r3, #31
   11d1a:	d528      	bpl.n	11d6e <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   11d1c:	2157      	movs	r1, #87	; 0x57
   11d1e:	4824      	ldr	r0, [pc, #144]	; (11db0 <bt_att_recv+0xf8>)
   11d20:	e7d2      	b.n	11cc8 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11d22:	3301      	adds	r3, #1
   11d24:	2b1c      	cmp	r3, #28
   11d26:	d1e3      	bne.n	11cf0 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   11d28:	2157      	movs	r1, #87	; 0x57
   11d2a:	4822      	ldr	r0, [pc, #136]	; (11db4 <bt_att_recv+0xfc>)
   11d2c:	f007 feed 	bl	19b0a <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   11d30:	7829      	ldrb	r1, [r5, #0]
   11d32:	4608      	mov	r0, r1
   11d34:	f009 fcd3 	bl	1b6de <att_op_get_type>
   11d38:	2800      	cmp	r0, #0
   11d3a:	d0c7      	beq.n	11ccc <bt_att_recv+0x14>
	if (!req) {
   11d3c:	2900      	cmp	r1, #0
   11d3e:	d0c5      	beq.n	11ccc <bt_att_recv+0x14>
   11d40:	2306      	movs	r3, #6
   11d42:	2200      	movs	r2, #0
   11d44:	4630      	mov	r0, r6
   11d46:	f7ff ff97 	bl	11c78 <send_err_rsp.part.0>
   11d4a:	e7bf      	b.n	11ccc <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   11d4c:	2f05      	cmp	r7, #5
   11d4e:	d10e      	bne.n	11d6e <bt_att_recv+0xb6>
   11d50:	34c0      	adds	r4, #192	; 0xc0
   11d52:	e8d4 3fef 	ldaex	r3, [r4]
   11d56:	f043 0202 	orr.w	r2, r3, #2
   11d5a:	e8c4 2fec 	stlex	ip, r2, [r4]
   11d5e:	f1bc 0f00 	cmp.w	ip, #0
   11d62:	d1f6      	bne.n	11d52 <bt_att_recv+0x9a>
   11d64:	079b      	lsls	r3, r3, #30
   11d66:	d502      	bpl.n	11d6e <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   11d68:	2157      	movs	r1, #87	; 0x57
   11d6a:	4813      	ldr	r0, [pc, #76]	; (11db8 <bt_att_recv+0x100>)
   11d6c:	e7ac      	b.n	11cc8 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   11d6e:	180b      	adds	r3, r1, r0
   11d70:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   11d74:	7859      	ldrb	r1, [r3, #1]
   11d76:	4291      	cmp	r1, r2
   11d78:	d908      	bls.n	11d8c <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   11d7a:	2145      	movs	r1, #69	; 0x45
   11d7c:	782b      	ldrb	r3, [r5, #0]
   11d7e:	480f      	ldr	r0, [pc, #60]	; (11dbc <bt_att_recv+0x104>)
   11d80:	f007 fec3 	bl	19b0a <printk>
	if (handler->type == ATT_REQUEST && err) {
   11d84:	2f01      	cmp	r7, #1
   11d86:	d1a1      	bne.n	11ccc <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   11d88:	2304      	movs	r3, #4
   11d8a:	e008      	b.n	11d9e <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   11d8c:	685b      	ldr	r3, [r3, #4]
   11d8e:	4641      	mov	r1, r8
   11d90:	4630      	mov	r0, r6
   11d92:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   11d94:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   11d96:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   11d98:	d198      	bne.n	11ccc <bt_att_recv+0x14>
   11d9a:	2800      	cmp	r0, #0
   11d9c:	d096      	beq.n	11ccc <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   11d9e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   11da0:	2900      	cmp	r1, #0
   11da2:	d093      	beq.n	11ccc <bt_att_recv+0x14>
   11da4:	e7cd      	b.n	11d42 <bt_att_recv+0x8a>
   11da6:	bf00      	nop
   11da8:	00020c76 	.word	0x00020c76
   11dac:	0001df10 	.word	0x0001df10
   11db0:	00020c96 	.word	0x00020c96
   11db4:	00020cff 	.word	0x00020cff
   11db8:	00020cb7 	.word	0x00020cb7
   11dbc:	00020cdb 	.word	0x00020cdb

00011dc0 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11dc4:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11dc6:	6803      	ldr	r3, [r0, #0]
   11dc8:	460e      	mov	r6, r1
   11dca:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11dcc:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11dce:	bf18      	it	ne
   11dd0:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11dd2:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11dd4:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11dd6:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11dd8:	f00a fb58 	bl	1c48c <bt_gatt_change_aware>
   11ddc:	2800      	cmp	r0, #0
   11dde:	d04b      	beq.n	11e78 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   11de0:	2f00      	cmp	r7, #0
   11de2:	d04b      	beq.n	11e7c <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   11de4:	2218      	movs	r2, #24
   11de6:	2100      	movs	r1, #0
   11de8:	4668      	mov	r0, sp
   11dea:	f009 f8f9 	bl	1afe0 <memset>
	if (rsp) {
   11dee:	f1b8 0f00 	cmp.w	r8, #0
   11df2:	d122      	bne.n	11e3a <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   11df4:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   11df6:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   11dfa:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11dfc:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   11dfe:	9300      	str	r3, [sp, #0]
	data.value = value;
   11e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11e02:	4638      	mov	r0, r7
	data.value = value;
   11e04:	9303      	str	r3, [sp, #12]
	data.len = len;
   11e06:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11e0a:	4a1d      	ldr	r2, [pc, #116]	; (11e80 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   11e0c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11e10:	2301      	movs	r3, #1
   11e12:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11e16:	466b      	mov	r3, sp
	data.req = req;
   11e18:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   11e1c:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11e20:	f009 fca3 	bl	1b76a <bt_gatt_foreach_attr>
	if (data.err) {
   11e24:	f89d 4014 	ldrb.w	r4, [sp, #20]
   11e28:	b1f4      	cbz	r4, 11e68 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   11e2a:	f1b8 0f00 	cmp.w	r8, #0
   11e2e:	d10e      	bne.n	11e4e <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   11e30:	2400      	movs	r4, #0
}
   11e32:	4620      	mov	r0, r4
   11e34:	b007      	add	sp, #28
   11e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   11e3a:	2200      	movs	r2, #0
   11e3c:	4641      	mov	r1, r8
   11e3e:	4628      	mov	r0, r5
   11e40:	f7ff fec8 	bl	11bd4 <bt_att_chan_create_pdu>
   11e44:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   11e46:	2800      	cmp	r0, #0
   11e48:	d1d4      	bne.n	11df4 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   11e4a:	240e      	movs	r4, #14
   11e4c:	e7f1      	b.n	11e32 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   11e4e:	9801      	ldr	r0, [sp, #4]
   11e50:	f002 fde8 	bl	14a24 <net_buf_unref>
	if (!req) {
   11e54:	2e00      	cmp	r6, #0
   11e56:	d0eb      	beq.n	11e30 <att_write_rsp.constprop.0+0x70>
   11e58:	463a      	mov	r2, r7
   11e5a:	4631      	mov	r1, r6
   11e5c:	4628      	mov	r0, r5
   11e5e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11e62:	f7ff ff09 	bl	11c78 <send_err_rsp.part.0>
   11e66:	e7e3      	b.n	11e30 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   11e68:	9901      	ldr	r1, [sp, #4]
   11e6a:	2900      	cmp	r1, #0
   11e6c:	d0e0      	beq.n	11e30 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11e6e:	4628      	mov	r0, r5
   11e70:	4a04      	ldr	r2, [pc, #16]	; (11e84 <att_write_rsp.constprop.0+0xc4>)
   11e72:	f009 fdb1 	bl	1b9d8 <bt_att_chan_send_rsp>
   11e76:	e7dc      	b.n	11e32 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11e78:	2412      	movs	r4, #18
   11e7a:	e7da      	b.n	11e32 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   11e7c:	2401      	movs	r4, #1
   11e7e:	e7d8      	b.n	11e32 <att_write_rsp.constprop.0+0x72>
   11e80:	0001b839 	.word	0x0001b839
   11e84:	0001baa9 	.word	0x0001baa9

00011e88 <bt_att_create_pdu>:
{
   11e88:	b570      	push	{r4, r5, r6, lr}
   11e8a:	460e      	mov	r6, r1
   11e8c:	4615      	mov	r5, r2
	att = att_get(conn);
   11e8e:	f7ff fbbb 	bl	11608 <att_get>
	if (!att) {
   11e92:	b190      	cbz	r0, 11eba <bt_att_create_pdu+0x32>
	return list->head;
   11e94:	6a83      	ldr	r3, [r0, #40]	; 0x28
   11e96:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11e98:	b15b      	cbz	r3, 11eb2 <bt_att_create_pdu+0x2a>
   11e9a:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   11e9e:	d008      	beq.n	11eb2 <bt_att_create_pdu+0x2a>
	return node->next;
   11ea0:	681b      	ldr	r3, [r3, #0]
   11ea2:	b10b      	cbz	r3, 11ea8 <bt_att_create_pdu+0x20>
   11ea4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11ea8:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   11eac:	428a      	cmp	r2, r1
   11eae:	d906      	bls.n	11ebe <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11eb0:	b95b      	cbnz	r3, 11eca <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   11eb2:	2157      	movs	r1, #87	; 0x57
   11eb4:	480a      	ldr	r0, [pc, #40]	; (11ee0 <bt_att_create_pdu+0x58>)
   11eb6:	f007 fe28 	bl	19b0a <printk>
}
   11eba:	2000      	movs	r0, #0
   11ebc:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   11ebe:	462a      	mov	r2, r5
   11ec0:	4631      	mov	r1, r6
}
   11ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   11ec6:	f7ff be85 	b.w	11bd4 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   11eca:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   11ece:	d004      	beq.n	11eda <bt_att_create_pdu+0x52>
	return node->next;
   11ed0:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11ed4:	b10c      	cbz	r4, 11eda <bt_att_create_pdu+0x52>
   11ed6:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   11eda:	4618      	mov	r0, r3
   11edc:	4623      	mov	r3, r4
   11ede:	e7e3      	b.n	11ea8 <bt_att_create_pdu+0x20>
   11ee0:	00020d1e 	.word	0x00020d1e

00011ee4 <att_read_group_req>:
{
   11ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11ee8:	898c      	ldrh	r4, [r1, #12]
{
   11eea:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11eec:	3c04      	subs	r4, #4
   11eee:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   11ef0:	2c02      	cmp	r4, #2
{
   11ef2:	4608      	mov	r0, r1
   11ef4:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11ef6:	d001      	beq.n	11efc <att_read_group_req+0x18>
   11ef8:	2c10      	cmp	r4, #16
   11efa:	d16f      	bne.n	11fdc <att_read_group_req+0xf8>
   11efc:	2104      	movs	r1, #4
   11efe:	3008      	adds	r0, #8
   11f00:	f002 fe88 	bl	14c14 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11f04:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   11f08:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11f0a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11f0c:	1d01      	adds	r1, r0, #4
   11f0e:	4622      	mov	r2, r4
   11f10:	4640      	mov	r0, r8
   11f12:	f009 f8dd 	bl	1b0d0 <bt_uuid_create>
   11f16:	2800      	cmp	r0, #0
   11f18:	d062      	beq.n	11fe0 <att_read_group_req+0xfc>
	if (!start || !end) {
   11f1a:	2e00      	cmp	r6, #0
   11f1c:	d03a      	beq.n	11f94 <att_read_group_req+0xb0>
   11f1e:	2400      	movs	r4, #0
   11f20:	2f00      	cmp	r7, #0
   11f22:	d036      	beq.n	11f92 <att_read_group_req+0xae>
	if (start > end) {
   11f24:	42be      	cmp	r6, r7
   11f26:	d835      	bhi.n	11f94 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11f28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11f2c:	4640      	mov	r0, r8
   11f2e:	a901      	add	r1, sp, #4
   11f30:	f88d 4004 	strb.w	r4, [sp, #4]
   11f34:	f8ad 3006 	strh.w	r3, [sp, #6]
   11f38:	f009 f89c 	bl	1b074 <bt_uuid_cmp>
   11f3c:	2800      	cmp	r0, #0
   11f3e:	d134      	bne.n	11faa <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   11f40:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   11f42:	2214      	movs	r2, #20
   11f44:	2100      	movs	r1, #0
   11f46:	a807      	add	r0, sp, #28
   11f48:	f009 f84a 	bl	1afe0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   11f4c:	2201      	movs	r2, #1
   11f4e:	2111      	movs	r1, #17
   11f50:	4620      	mov	r0, r4
   11f52:	f7ff ff99 	bl	11e88 <bt_att_create_pdu>
   11f56:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   11f58:	2800      	cmp	r0, #0
   11f5a:	d041      	beq.n	11fe0 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   11f5c:	2101      	movs	r1, #1
   11f5e:	3008      	adds	r0, #8
	data.uuid = uuid;
   11f60:	e9cd 5807 	strd	r5, r8, [sp, #28]
   11f64:	f002 fe74 	bl	14c50 <net_buf_simple_add>
	data.rsp->len = 0U;
   11f68:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   11f6c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11f6e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   11f70:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11f74:	4639      	mov	r1, r7
   11f76:	4630      	mov	r0, r6
   11f78:	4a1a      	ldr	r2, [pc, #104]	; (11fe4 <att_read_group_req+0x100>)
	data.group = NULL;
   11f7a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11f7e:	f009 fbf4 	bl	1b76a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   11f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f84:	781c      	ldrb	r4, [r3, #0]
   11f86:	bb1c      	cbnz	r4, 11fd0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   11f88:	9809      	ldr	r0, [sp, #36]	; 0x24
   11f8a:	f002 fd4b 	bl	14a24 <net_buf_unref>
	if (!req) {
   11f8e:	230a      	movs	r3, #10
   11f90:	e018      	b.n	11fc4 <att_read_group_req+0xe0>
			*err = 0U;
   11f92:	463e      	mov	r6, r7
	if (!req) {
   11f94:	2301      	movs	r3, #1
   11f96:	4632      	mov	r2, r6
   11f98:	2110      	movs	r1, #16
   11f9a:	4628      	mov	r0, r5
   11f9c:	f7ff fe6c 	bl	11c78 <send_err_rsp.part.0>
		return 0;
   11fa0:	2400      	movs	r4, #0
}
   11fa2:	4620      	mov	r0, r4
   11fa4:	b00c      	add	sp, #48	; 0x30
   11fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   11faa:	f642 0301 	movw	r3, #10241	; 0x2801
   11fae:	4640      	mov	r0, r8
   11fb0:	a907      	add	r1, sp, #28
   11fb2:	f88d 401c 	strb.w	r4, [sp, #28]
   11fb6:	f8ad 301e 	strh.w	r3, [sp, #30]
   11fba:	f009 f85b 	bl	1b074 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11fbe:	2800      	cmp	r0, #0
   11fc0:	d0be      	beq.n	11f40 <att_read_group_req+0x5c>
	if (!req) {
   11fc2:	2310      	movs	r3, #16
   11fc4:	4632      	mov	r2, r6
   11fc6:	2110      	movs	r1, #16
   11fc8:	4628      	mov	r0, r5
   11fca:	f7ff fe55 	bl	11c78 <send_err_rsp.part.0>
		return 0;
   11fce:	e7e8      	b.n	11fa2 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11fd0:	4628      	mov	r0, r5
   11fd2:	4a05      	ldr	r2, [pc, #20]	; (11fe8 <att_read_group_req+0x104>)
   11fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
   11fd6:	f009 fcff 	bl	1b9d8 <bt_att_chan_send_rsp>
	return 0;
   11fda:	e7e1      	b.n	11fa0 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   11fdc:	2404      	movs	r4, #4
   11fde:	e7e0      	b.n	11fa2 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   11fe0:	240e      	movs	r4, #14
   11fe2:	e7de      	b.n	11fa2 <att_read_group_req+0xbe>
   11fe4:	00011881 	.word	0x00011881
   11fe8:	0001baa9 	.word	0x0001baa9

00011fec <att_read_mult_req>:
{
   11fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11ff0:	6886      	ldr	r6, [r0, #8]
{
   11ff2:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   11ff4:	2210      	movs	r2, #16
{
   11ff6:	4604      	mov	r4, r0
   11ff8:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   11ffa:	4668      	mov	r0, sp
   11ffc:	2100      	movs	r1, #0
   11ffe:	f008 ffef 	bl	1afe0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12002:	2200      	movs	r2, #0
   12004:	210f      	movs	r1, #15
   12006:	4630      	mov	r0, r6
   12008:	f7ff ff3e 	bl	11e88 <bt_att_create_pdu>
   1200c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1200e:	b360      	cbz	r0, 1206a <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12010:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12014:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12070 <att_read_mult_req+0x84>
	data.chan = chan;
   12018:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1201a:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   1201e:	89ab      	ldrh	r3, [r5, #12]
   12020:	2b01      	cmp	r3, #1
   12022:	d805      	bhi.n	12030 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12024:	4620      	mov	r0, r4
   12026:	4a13      	ldr	r2, [pc, #76]	; (12074 <att_read_mult_req+0x88>)
   12028:	9902      	ldr	r1, [sp, #8]
   1202a:	f009 fcd5 	bl	1b9d8 <bt_att_chan_send_rsp>
   1202e:	e018      	b.n	12062 <att_read_mult_req+0x76>
   12030:	4638      	mov	r0, r7
   12032:	f00a fa98 	bl	1c566 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12036:	466b      	mov	r3, sp
   12038:	464a      	mov	r2, r9
   1203a:	4601      	mov	r1, r0
   1203c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1203e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12042:	f009 fb92 	bl	1b76a <bt_gatt_foreach_attr>
		if (data.err) {
   12046:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1204a:	2b00      	cmp	r3, #0
   1204c:	d0e7      	beq.n	1201e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   1204e:	9802      	ldr	r0, [sp, #8]
   12050:	f002 fce8 	bl	14a24 <net_buf_unref>
	if (!req) {
   12054:	4632      	mov	r2, r6
   12056:	210e      	movs	r1, #14
   12058:	4620      	mov	r0, r4
   1205a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1205e:	f7ff fe0b 	bl	11c78 <send_err_rsp.part.0>
	return 0;
   12062:	2000      	movs	r0, #0
}
   12064:	b005      	add	sp, #20
   12066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   1206a:	200e      	movs	r0, #14
   1206c:	e7fa      	b.n	12064 <att_read_mult_req+0x78>
   1206e:	bf00      	nop
   12070:	0001bad1 	.word	0x0001bad1
   12074:	0001baa9 	.word	0x0001baa9

00012078 <att_read_rsp>:
{
   12078:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1207c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12080:	4605      	mov	r5, r0
   12082:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12084:	4640      	mov	r0, r8
   12086:	2101      	movs	r1, #1
{
   12088:	4614      	mov	r4, r2
   1208a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1208c:	f00a f9fe 	bl	1c48c <bt_gatt_change_aware>
   12090:	b390      	cbz	r0, 120f8 <att_read_rsp+0x80>
	if (!handle) {
   12092:	b39e      	cbz	r6, 120fc <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12094:	2210      	movs	r2, #16
   12096:	2100      	movs	r1, #0
   12098:	4668      	mov	r0, sp
   1209a:	f008 ffa1 	bl	1afe0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1209e:	2200      	movs	r2, #0
   120a0:	4621      	mov	r1, r4
   120a2:	4640      	mov	r0, r8
   120a4:	f7ff fef0 	bl	11e88 <bt_att_create_pdu>
   120a8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   120aa:	b348      	cbz	r0, 12100 <att_read_rsp+0x88>
	data.offset = offset;
   120ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   120b0:	4631      	mov	r1, r6
	data.offset = offset;
   120b2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   120b6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   120b8:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   120ba:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   120be:	4a11      	ldr	r2, [pc, #68]	; (12104 <att_read_rsp+0x8c>)
   120c0:	466b      	mov	r3, sp
	data.chan = chan;
   120c2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   120c4:	f009 fb51 	bl	1b76a <bt_gatt_foreach_attr>
	if (data.err) {
   120c8:	f89d 400c 	ldrb.w	r4, [sp, #12]
   120cc:	b174      	cbz	r4, 120ec <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   120ce:	9802      	ldr	r0, [sp, #8]
   120d0:	f002 fca8 	bl	14a24 <net_buf_unref>
	if (!req) {
   120d4:	4632      	mov	r2, r6
   120d6:	4639      	mov	r1, r7
   120d8:	4628      	mov	r0, r5
   120da:	f89d 300c 	ldrb.w	r3, [sp, #12]
   120de:	f7ff fdcb 	bl	11c78 <send_err_rsp.part.0>
		return 0;
   120e2:	2400      	movs	r4, #0
}
   120e4:	4620      	mov	r0, r4
   120e6:	b004      	add	sp, #16
   120e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   120ec:	4628      	mov	r0, r5
   120ee:	4a06      	ldr	r2, [pc, #24]	; (12108 <att_read_rsp+0x90>)
   120f0:	9902      	ldr	r1, [sp, #8]
   120f2:	f009 fc71 	bl	1b9d8 <bt_att_chan_send_rsp>
	return 0;
   120f6:	e7f5      	b.n	120e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   120f8:	2412      	movs	r4, #18
   120fa:	e7f3      	b.n	120e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   120fc:	2401      	movs	r4, #1
   120fe:	e7f1      	b.n	120e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12100:	240e      	movs	r4, #14
   12102:	e7ef      	b.n	120e4 <att_read_rsp+0x6c>
   12104:	0001bad1 	.word	0x0001bad1
   12108:	0001baa9 	.word	0x0001baa9

0001210c <att_read_type_req>:
{
   1210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12110:	898c      	ldrh	r4, [r1, #12]
{
   12112:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12114:	3c04      	subs	r4, #4
   12116:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12118:	2c02      	cmp	r4, #2
{
   1211a:	4608      	mov	r0, r1
   1211c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1211e:	d001      	beq.n	12124 <att_read_type_req+0x18>
   12120:	2c10      	cmp	r4, #16
   12122:	d150      	bne.n	121c6 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12124:	2104      	movs	r1, #4
   12126:	3008      	adds	r0, #8
   12128:	f002 fd74 	bl	14c14 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1212c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12130:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12132:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12134:	1d01      	adds	r1, r0, #4
   12136:	4622      	mov	r2, r4
   12138:	4640      	mov	r0, r8
   1213a:	f008 ffc9 	bl	1b0d0 <bt_uuid_create>
   1213e:	b188      	cbz	r0, 12164 <att_read_type_req+0x58>
	if (!start || !end) {
   12140:	b19e      	cbz	r6, 1216a <att_read_type_req+0x5e>
   12142:	b18f      	cbz	r7, 12168 <att_read_type_req+0x5c>
	if (start > end) {
   12144:	42b7      	cmp	r7, r6
   12146:	d310      	bcc.n	1216a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12148:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1214a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1214c:	2100      	movs	r1, #0
   1214e:	eb0d 0002 	add.w	r0, sp, r2
   12152:	f008 ff45 	bl	1afe0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12156:	2201      	movs	r2, #1
   12158:	2109      	movs	r1, #9
   1215a:	4620      	mov	r0, r4
   1215c:	f7ff fe94 	bl	11e88 <bt_att_create_pdu>
   12160:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12162:	b968      	cbnz	r0, 12180 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12164:	240e      	movs	r4, #14
   12166:	e007      	b.n	12178 <att_read_type_req+0x6c>
			*err = 0U;
   12168:	463e      	mov	r6, r7
	if (!req) {
   1216a:	2301      	movs	r3, #1
   1216c:	4632      	mov	r2, r6
   1216e:	2108      	movs	r1, #8
   12170:	4628      	mov	r0, r5
   12172:	f7ff fd81 	bl	11c78 <send_err_rsp.part.0>
		return 0;
   12176:	2400      	movs	r4, #0
}
   12178:	4620      	mov	r0, r4
   1217a:	b00c      	add	sp, #48	; 0x30
   1217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12180:	2101      	movs	r1, #1
   12182:	3008      	adds	r0, #8
	data.uuid = uuid;
   12184:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12188:	f002 fd62 	bl	14c50 <net_buf_simple_add>
	data.rsp->len = 0U;
   1218c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12190:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12192:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12194:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12196:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1219a:	4a0c      	ldr	r2, [pc, #48]	; (121cc <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1219c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   121a0:	4630      	mov	r0, r6
   121a2:	ab06      	add	r3, sp, #24
   121a4:	f009 fae1 	bl	1b76a <bt_gatt_foreach_attr>
	if (data.err) {
   121a8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   121ac:	b12c      	cbz	r4, 121ba <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   121ae:	9808      	ldr	r0, [sp, #32]
   121b0:	f002 fc38 	bl	14a24 <net_buf_unref>
	if (!req) {
   121b4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   121b8:	e7d8      	b.n	1216c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   121ba:	4628      	mov	r0, r5
   121bc:	4a04      	ldr	r2, [pc, #16]	; (121d0 <att_read_type_req+0xc4>)
   121be:	9908      	ldr	r1, [sp, #32]
   121c0:	f009 fc0a 	bl	1b9d8 <bt_att_chan_send_rsp>
	return 0;
   121c4:	e7d8      	b.n	12178 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   121c6:	2404      	movs	r4, #4
   121c8:	e7d6      	b.n	12178 <att_read_type_req+0x6c>
   121ca:	bf00      	nop
   121cc:	00011aa9 	.word	0x00011aa9
   121d0:	0001baa9 	.word	0x0001baa9

000121d4 <att_find_type_req>:
{
   121d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   121d8:	4688      	mov	r8, r1
   121da:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   121dc:	2106      	movs	r1, #6
   121de:	b086      	sub	sp, #24
   121e0:	f108 0008 	add.w	r0, r8, #8
   121e4:	f002 fd16 	bl	14c14 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   121e8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   121ea:	b317      	cbz	r7, 12232 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   121ec:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   121f0:	f1b9 0f00 	cmp.w	r9, #0
   121f4:	d01c      	beq.n	12230 <att_find_type_req+0x5c>
	if (start > end) {
   121f6:	454f      	cmp	r7, r9
   121f8:	d81b      	bhi.n	12232 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   121fa:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   121fc:	2400      	movs	r4, #0
   121fe:	f8ad 3002 	strh.w	r3, [sp, #2]
   12202:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12206:	4668      	mov	r0, sp
   12208:	a901      	add	r1, sp, #4
	value = buf->data;
   1220a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1220e:	f88d 4000 	strb.w	r4, [sp]
   12212:	f88d 4004 	strb.w	r4, [sp, #4]
   12216:	f8ad 3006 	strh.w	r3, [sp, #6]
   1221a:	f008 ff2b 	bl	1b074 <bt_uuid_cmp>
   1221e:	4606      	mov	r6, r0
   12220:	b190      	cbz	r0, 12248 <att_find_type_req+0x74>
	if (!req) {
   12222:	230a      	movs	r3, #10
   12224:	463a      	mov	r2, r7
   12226:	2106      	movs	r1, #6
   12228:	4628      	mov	r0, r5
   1222a:	f7ff fd25 	bl	11c78 <send_err_rsp.part.0>
		return 0;
   1222e:	e007      	b.n	12240 <att_find_type_req+0x6c>
			*err = 0U;
   12230:	464f      	mov	r7, r9
	if (!req) {
   12232:	2301      	movs	r3, #1
   12234:	463a      	mov	r2, r7
   12236:	2106      	movs	r1, #6
   12238:	4628      	mov	r0, r5
   1223a:	f7ff fd1d 	bl	11c78 <send_err_rsp.part.0>
		return 0;
   1223e:	2400      	movs	r4, #0
}
   12240:	4620      	mov	r0, r4
   12242:	b006      	add	sp, #24
   12244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12248:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1224c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12250:	4601      	mov	r1, r0
   12252:	2214      	movs	r2, #20
   12254:	a801      	add	r0, sp, #4
   12256:	f008 fec3 	bl	1afe0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1225a:	4632      	mov	r2, r6
   1225c:	2107      	movs	r1, #7
   1225e:	4640      	mov	r0, r8
   12260:	f7ff fe12 	bl	11e88 <bt_att_create_pdu>
   12264:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12266:	b1e0      	cbz	r0, 122a2 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12268:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1226a:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1226c:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12270:	4638      	mov	r0, r7
   12272:	4a0d      	ldr	r2, [pc, #52]	; (122a8 <att_find_type_req+0xd4>)
   12274:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   12276:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   1227a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1227e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12280:	f009 fa73 	bl	1b76a <bt_gatt_foreach_attr>
	if (data.err) {
   12284:	f89d 4015 	ldrb.w	r4, [sp, #21]
   12288:	b12c      	cbz	r4, 12296 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1228a:	9802      	ldr	r0, [sp, #8]
   1228c:	f002 fbca 	bl	14a24 <net_buf_unref>
	if (!req) {
   12290:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12294:	e7ce      	b.n	12234 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12296:	4628      	mov	r0, r5
   12298:	4a04      	ldr	r2, [pc, #16]	; (122ac <att_find_type_req+0xd8>)
   1229a:	9902      	ldr	r1, [sp, #8]
   1229c:	f009 fb9c 	bl	1b9d8 <bt_att_chan_send_rsp>
	return 0;
   122a0:	e7ce      	b.n	12240 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   122a2:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   122a4:	e7cc      	b.n	12240 <att_find_type_req+0x6c>
   122a6:	bf00      	nop
   122a8:	00011671 	.word	0x00011671
   122ac:	0001baa9 	.word	0x0001baa9

000122b0 <att_find_info_req>:
{
   122b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   122b2:	688b      	ldr	r3, [r1, #8]
{
   122b4:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   122b6:	881e      	ldrh	r6, [r3, #0]
{
   122b8:	b085      	sub	sp, #20
	if (!start || !end) {
   122ba:	b19e      	cbz	r6, 122e4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   122bc:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   122be:	b184      	cbz	r4, 122e2 <att_find_info_req+0x32>
	if (start > end) {
   122c0:	42b4      	cmp	r4, r6
   122c2:	d30f      	bcc.n	122e4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   122c4:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   122c6:	2210      	movs	r2, #16
   122c8:	2100      	movs	r1, #0
   122ca:	4668      	mov	r0, sp
   122cc:	f008 fe88 	bl	1afe0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   122d0:	2200      	movs	r2, #0
   122d2:	2105      	movs	r1, #5
   122d4:	4638      	mov	r0, r7
   122d6:	f7ff fdd7 	bl	11e88 <bt_att_create_pdu>
   122da:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   122dc:	b958      	cbnz	r0, 122f6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   122de:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   122e0:	e007      	b.n	122f2 <att_find_info_req+0x42>
			*err = 0U;
   122e2:	4626      	mov	r6, r4
	if (!req) {
   122e4:	2301      	movs	r3, #1
   122e6:	4632      	mov	r2, r6
   122e8:	2104      	movs	r1, #4
   122ea:	4628      	mov	r0, r5
   122ec:	f7ff fcc4 	bl	11c78 <send_err_rsp.part.0>
	return 0;
   122f0:	2000      	movs	r0, #0
}
   122f2:	b005      	add	sp, #20
   122f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   122f6:	4621      	mov	r1, r4
   122f8:	466b      	mov	r3, sp
   122fa:	4630      	mov	r0, r6
   122fc:	4a08      	ldr	r2, [pc, #32]	; (12320 <att_find_info_req+0x70>)
	data.chan = chan;
   122fe:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12300:	f009 fa33 	bl	1b76a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12304:	9c02      	ldr	r4, [sp, #8]
   12306:	b924      	cbnz	r4, 12312 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   12308:	9801      	ldr	r0, [sp, #4]
   1230a:	f002 fb8b 	bl	14a24 <net_buf_unref>
	if (!req) {
   1230e:	230a      	movs	r3, #10
   12310:	e7e9      	b.n	122e6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12312:	4628      	mov	r0, r5
   12314:	4a03      	ldr	r2, [pc, #12]	; (12324 <att_find_info_req+0x74>)
   12316:	9901      	ldr	r1, [sp, #4]
   12318:	f009 fb5e 	bl	1b9d8 <bt_att_chan_send_rsp>
   1231c:	e7e8      	b.n	122f0 <att_find_info_req+0x40>
   1231e:	bf00      	nop
   12320:	0001b781 	.word	0x0001b781
   12324:	0001baa9 	.word	0x0001baa9

00012328 <att_mtu_req>:
{
   12328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1232a:	4603      	mov	r3, r0
   1232c:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12330:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12332:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12334:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   12338:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1233c:	071b      	lsls	r3, r3, #28
   1233e:	d41b      	bmi.n	12378 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   12340:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   12342:	881b      	ldrh	r3, [r3, #0]
   12344:	2b16      	cmp	r3, #22
   12346:	d919      	bls.n	1237c <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   12348:	2202      	movs	r2, #2
   1234a:	2103      	movs	r1, #3
   1234c:	f7ff fd9c 	bl	11e88 <bt_att_create_pdu>
	if (!pdu) {
   12350:	4606      	mov	r6, r0
   12352:	b1a8      	cbz	r0, 12380 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   12354:	2102      	movs	r1, #2
   12356:	3008      	adds	r0, #8
   12358:	f002 fc7a 	bl	14c50 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1235c:	2717      	movs	r7, #23
   1235e:	7044      	strb	r4, [r0, #1]
   12360:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   12362:	4631      	mov	r1, r6
   12364:	4628      	mov	r0, r5
   12366:	4a07      	ldr	r2, [pc, #28]	; (12384 <att_mtu_req+0x5c>)
   12368:	f009 fb36 	bl	1b9d8 <bt_att_chan_send_rsp>
	return 0;
   1236c:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1236e:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   12372:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   12376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   12378:	2006      	movs	r0, #6
   1237a:	e7fc      	b.n	12376 <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   1237c:	2004      	movs	r0, #4
   1237e:	e7fa      	b.n	12376 <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   12380:	200e      	movs	r0, #14
   12382:	e7f8      	b.n	12376 <att_mtu_req+0x4e>
   12384:	0001baa9 	.word	0x0001baa9

00012388 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   12388:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   1238a:	2400      	movs	r4, #0
{
   1238c:	4602      	mov	r2, r0
   1238e:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12390:	4807      	ldr	r0, [pc, #28]	; (123b0 <bt_att_req_alloc+0x28>)
   12392:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   12394:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12396:	f004 fe87 	bl	170a8 <k_mem_slab_alloc>
   1239a:	4601      	mov	r1, r0
   1239c:	b930      	cbnz	r0, 123ac <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1239e:	2218      	movs	r2, #24
   123a0:	9801      	ldr	r0, [sp, #4]
   123a2:	f008 fe1d 	bl	1afe0 <memset>

	return req;
   123a6:	9801      	ldr	r0, [sp, #4]
}
   123a8:	b002      	add	sp, #8
   123aa:	bd10      	pop	{r4, pc}
		return NULL;
   123ac:	4620      	mov	r0, r4
   123ae:	e7fb      	b.n	123a8 <bt_att_req_alloc+0x20>
   123b0:	20008624 	.word	0x20008624

000123b4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   123b4:	b507      	push	{r0, r1, r2, lr}
   123b6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   123b8:	a901      	add	r1, sp, #4
   123ba:	4803      	ldr	r0, [pc, #12]	; (123c8 <bt_att_req_free+0x14>)
   123bc:	f004 fece 	bl	1715c <k_mem_slab_free>
}
   123c0:	b003      	add	sp, #12
   123c2:	f85d fb04 	ldr.w	pc, [sp], #4
   123c6:	bf00      	nop
   123c8:	20008624 	.word	0x20008624

000123cc <att_handle_rsp>:
{
   123cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   123d0:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   123d2:	30f0      	adds	r0, #240	; 0xf0
{
   123d4:	460f      	mov	r7, r1
   123d6:	4690      	mov	r8, r2
   123d8:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   123da:	f006 fc93 	bl	18d04 <k_delayed_work_cancel>
	if (!chan->req) {
   123de:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   123e2:	f04f 0a00 	mov.w	sl, #0
   123e6:	b99d      	cbnz	r5, 12410 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   123e8:	2157      	movs	r1, #87	; 0x57
   123ea:	4818      	ldr	r0, [pc, #96]	; (1244c <att_handle_rsp+0x80>)
   123ec:	f007 fb8d 	bl	19b0a <printk>
	att_req_send_process(chan->att);
   123f0:	6820      	ldr	r0, [r4, #0]
   123f2:	f009 fbd5 	bl	1bba0 <att_req_send_process>
	if (func) {
   123f6:	b13d      	cbz	r5, 12408 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   123f8:	6820      	ldr	r0, [r4, #0]
   123fa:	f8cd 9000 	str.w	r9, [sp]
   123fe:	4643      	mov	r3, r8
   12400:	463a      	mov	r2, r7
   12402:	4631      	mov	r1, r6
   12404:	6800      	ldr	r0, [r0, #0]
   12406:	47a8      	blx	r5
}
   12408:	2000      	movs	r0, #0
   1240a:	b002      	add	sp, #8
   1240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12410:	4b0f      	ldr	r3, [pc, #60]	; (12450 <att_handle_rsp+0x84>)
   12412:	429d      	cmp	r5, r3
   12414:	d103      	bne.n	1241e <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   12416:	4655      	mov	r5, sl
		chan->req = NULL;
   12418:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   1241c:	e7e8      	b.n	123f0 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   1241e:	6928      	ldr	r0, [r5, #16]
   12420:	b128      	cbz	r0, 1242e <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   12422:	f002 faff 	bl	14a24 <net_buf_unref>
		chan->req->buf = NULL;
   12426:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1242a:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   1242e:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   12432:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   12436:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   12438:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1243c:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   12440:	f009 fc3b 	bl	1bcba <att_req_destroy>
	chan->req = NULL;
   12444:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   12448:	e7d2      	b.n	123f0 <att_handle_rsp+0x24>
   1244a:	bf00      	nop
   1244c:	00020d3e 	.word	0x00020d3e
   12450:	2000a9cc 	.word	0x2000a9cc

00012454 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   12454:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   12458:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   1245a:	b18b      	cbz	r3, 12480 <att_error_rsp+0x2c>
   1245c:	4a09      	ldr	r2, [pc, #36]	; (12484 <att_error_rsp+0x30>)
   1245e:	4293      	cmp	r3, r2
   12460:	d00e      	beq.n	12480 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   12462:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   12464:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   12466:	b12a      	cbz	r2, 12474 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   12468:	899d      	ldrh	r5, [r3, #12]
   1246a:	89dc      	ldrh	r4, [r3, #14]
   1246c:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   1246e:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   12470:	442b      	add	r3, r5
   12472:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   12474:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   12476:	2200      	movs	r2, #0
}
   12478:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   1247a:	4611      	mov	r1, r2
   1247c:	f7ff bfa6 	b.w	123cc <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   12480:	230e      	movs	r3, #14
   12482:	e7f8      	b.n	12476 <att_error_rsp+0x22>
   12484:	2000a9cc 	.word	0x2000a9cc

00012488 <att_reset>:
{
   12488:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1248a:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1248c:	9803      	ldr	r0, [sp, #12]
   1248e:	2200      	movs	r2, #0
   12490:	2300      	movs	r3, #0
   12492:	300c      	adds	r0, #12
   12494:	f002 fa44 	bl	14920 <net_buf_get>
   12498:	b948      	cbnz	r0, 124ae <att_reset+0x26>
	att->conn = NULL;
   1249a:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   1249c:	6854      	ldr	r4, [r2, #4]
   1249e:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   124a0:	b944      	cbnz	r4, 124b4 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   124a2:	480d      	ldr	r0, [pc, #52]	; (124d8 <att_reset+0x50>)
   124a4:	a903      	add	r1, sp, #12
   124a6:	f004 fe59 	bl	1715c <k_mem_slab_free>
}
   124aa:	b004      	add	sp, #16
   124ac:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   124ae:	f002 fab9 	bl	14a24 <net_buf_unref>
   124b2:	e7eb      	b.n	1248c <att_reset+0x4>
	return node->next;
   124b4:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   124b6:	6866      	ldr	r6, [r4, #4]
   124b8:	b136      	cbz	r6, 124c8 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   124ba:	6963      	ldr	r3, [r4, #20]
   124bc:	210e      	movs	r1, #14
   124be:	9300      	str	r3, [sp, #0]
   124c0:	2300      	movs	r3, #0
   124c2:	461a      	mov	r2, r3
   124c4:	4618      	mov	r0, r3
   124c6:	47b0      	blx	r6
		att_req_destroy(req);
   124c8:	4620      	mov	r0, r4
   124ca:	f009 fbf6 	bl	1bcba <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   124ce:	2d00      	cmp	r5, #0
   124d0:	d0e7      	beq.n	124a2 <att_reset+0x1a>
   124d2:	462c      	mov	r4, r5
   124d4:	682d      	ldr	r5, [r5, #0]
   124d6:	e7ee      	b.n	124b6 <att_reset+0x2e>
   124d8:	200085ec 	.word	0x200085ec

000124dc <att_timeout>:
{
   124dc:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   124de:	4605      	mov	r5, r0
   124e0:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   124e4:	2145      	movs	r1, #69	; 0x45
{
   124e6:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   124e8:	4808      	ldr	r0, [pc, #32]	; (1250c <att_timeout+0x30>)
   124ea:	f007 fb0e 	bl	19b0a <printk>
	att_chan_detach(chan);
   124ee:	4628      	mov	r0, r5
   124f0:	f009 fc20 	bl	1bd34 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   124f4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   124f6:	b945      	cbnz	r5, 1250a <att_timeout+0x2e>
	att_reset(att);
   124f8:	4630      	mov	r0, r6
   124fa:	f7ff ffc5 	bl	12488 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   124fe:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   12502:	f002 f83b 	bl	1457c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   12506:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   1250a:	bd70      	pop	{r4, r5, r6, pc}
   1250c:	00020d5a 	.word	0x00020d5a

00012510 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   12510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12514:	460c      	mov	r4, r1
   12516:	4617      	mov	r7, r2
   12518:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1251a:	4605      	mov	r5, r0
   1251c:	b950      	cbnz	r0, 12534 <bt_att_send+0x24>
   1251e:	492e      	ldr	r1, [pc, #184]	; (125d8 <bt_att_send+0xc8>)
   12520:	482e      	ldr	r0, [pc, #184]	; (125dc <bt_att_send+0xcc>)
   12522:	f640 32ce 	movw	r2, #3022	; 0xbce
   12526:	f007 faf0 	bl	19b0a <printk>
   1252a:	f640 31ce 	movw	r1, #3022	; 0xbce
   1252e:	482a      	ldr	r0, [pc, #168]	; (125d8 <bt_att_send+0xc8>)
   12530:	f007 fd91 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   12534:	b954      	cbnz	r4, 1254c <bt_att_send+0x3c>
   12536:	4928      	ldr	r1, [pc, #160]	; (125d8 <bt_att_send+0xc8>)
   12538:	4828      	ldr	r0, [pc, #160]	; (125dc <bt_att_send+0xcc>)
   1253a:	f640 32cf 	movw	r2, #3023	; 0xbcf
   1253e:	f007 fae4 	bl	19b0a <printk>
   12542:	f640 31cf 	movw	r1, #3023	; 0xbcf
   12546:	4824      	ldr	r0, [pc, #144]	; (125d8 <bt_att_send+0xc8>)
   12548:	f007 fd85 	bl	1a056 <assert_post_action>

	att = att_get(conn);
   1254c:	4628      	mov	r0, r5
   1254e:	f7ff f85b 	bl	11608 <att_get>
	if (!att) {
   12552:	4606      	mov	r6, r0
   12554:	b938      	cbnz	r0, 12566 <bt_att_send+0x56>
		net_buf_unref(buf);
   12556:	4620      	mov	r0, r4
   12558:	f002 fa64 	bl	14a24 <net_buf_unref>
		return -ENOTCONN;
   1255c:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   12560:	b002      	add	sp, #8
   12562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   12566:	b147      	cbz	r7, 1257a <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   12568:	463b      	mov	r3, r7
   1256a:	4622      	mov	r2, r4
   1256c:	2104      	movs	r1, #4
   1256e:	4628      	mov	r0, r5
   12570:	f8cd 8000 	str.w	r8, [sp]
   12574:	f009 f838 	bl	1b5e8 <bt_l2cap_send_cb>
   12578:	e7f2      	b.n	12560 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   1257a:	f100 070c 	add.w	r7, r0, #12
   1257e:	4621      	mov	r1, r4
   12580:	4638      	mov	r0, r7
   12582:	f002 fa21 	bl	149c8 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   12586:	2200      	movs	r2, #0
   12588:	2300      	movs	r3, #0
   1258a:	4638      	mov	r0, r7
   1258c:	f002 f9c8 	bl	14920 <net_buf_get>
	if (!buf) {
   12590:	4605      	mov	r5, r0
   12592:	b908      	cbnz	r0, 12598 <bt_att_send+0x88>
	return 0;
   12594:	2000      	movs	r0, #0
   12596:	e7e3      	b.n	12560 <bt_att_send+0x50>
	return list->head;
   12598:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1259a:	b1c3      	cbz	r3, 125ce <bt_att_send+0xbe>
   1259c:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   125a0:	d015      	beq.n	125ce <bt_att_send+0xbe>
	return node->next;
   125a2:	681c      	ldr	r4, [r3, #0]
   125a4:	b10c      	cbz	r4, 125aa <bt_att_send+0x9a>
   125a6:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   125aa:	2200      	movs	r2, #0
   125ac:	4629      	mov	r1, r5
   125ae:	f009 f9fc 	bl	1b9aa <bt_att_chan_send>
		if (err >= 0) {
   125b2:	2800      	cmp	r0, #0
   125b4:	daee      	bge.n	12594 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   125b6:	b154      	cbz	r4, 125ce <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   125b8:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   125bc:	d004      	beq.n	125c8 <bt_att_send+0xb8>
	return node->next;
   125be:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   125c2:	b10b      	cbz	r3, 125c8 <bt_att_send+0xb8>
   125c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   125c8:	4620      	mov	r0, r4
   125ca:	461c      	mov	r4, r3
   125cc:	e7ed      	b.n	125aa <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   125ce:	4629      	mov	r1, r5
   125d0:	4638      	mov	r0, r7
   125d2:	f00a fe22 	bl	1d21a <k_queue_prepend>
   125d6:	e7dd      	b.n	12594 <bt_att_send+0x84>
   125d8:	00020c1d 	.word	0x00020c1d
   125dc:	0001ecfc 	.word	0x0001ecfc

000125e0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   125e0:	b538      	push	{r3, r4, r5, lr}
   125e2:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   125e4:	4605      	mov	r5, r0
   125e6:	b950      	cbnz	r0, 125fe <bt_att_req_send+0x1e>
   125e8:	4918      	ldr	r1, [pc, #96]	; (1264c <bt_att_req_send+0x6c>)
   125ea:	4819      	ldr	r0, [pc, #100]	; (12650 <bt_att_req_send+0x70>)
   125ec:	f640 32eb 	movw	r2, #3051	; 0xbeb
   125f0:	f007 fa8b 	bl	19b0a <printk>
   125f4:	f640 31eb 	movw	r1, #3051	; 0xbeb
   125f8:	4814      	ldr	r0, [pc, #80]	; (1264c <bt_att_req_send+0x6c>)
   125fa:	f007 fd2c 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(req);
   125fe:	b954      	cbnz	r4, 12616 <bt_att_req_send+0x36>
   12600:	4912      	ldr	r1, [pc, #72]	; (1264c <bt_att_req_send+0x6c>)
   12602:	4813      	ldr	r0, [pc, #76]	; (12650 <bt_att_req_send+0x70>)
   12604:	f640 32ec 	movw	r2, #3052	; 0xbec
   12608:	f007 fa7f 	bl	19b0a <printk>
   1260c:	f640 31ec 	movw	r1, #3052	; 0xbec
   12610:	480e      	ldr	r0, [pc, #56]	; (1264c <bt_att_req_send+0x6c>)
   12612:	f007 fd20 	bl	1a056 <assert_post_action>

	att = att_get(conn);
   12616:	4628      	mov	r0, r5
   12618:	f7fe fff6 	bl	11608 <att_get>
	if (!att) {
   1261c:	4605      	mov	r5, r0
   1261e:	b930      	cbnz	r0, 1262e <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   12620:	6920      	ldr	r0, [r4, #16]
   12622:	f002 f9ff 	bl	14a24 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   12626:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   1262a:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   1262c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1262e:	2300      	movs	r3, #0
   12630:	6023      	str	r3, [r4, #0]
	return list->tail;
   12632:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   12634:	b933      	cbnz	r3, 12644 <bt_att_req_send+0x64>
	list->head = node;
   12636:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   1263a:	4628      	mov	r0, r5
   1263c:	f009 fab0 	bl	1bba0 <att_req_send_process>
	return 0;
   12640:	2000      	movs	r0, #0
   12642:	e7f3      	b.n	1262c <bt_att_req_send+0x4c>
	parent->next = child;
   12644:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12646:	6084      	str	r4, [r0, #8]
}
   12648:	e7f7      	b.n	1263a <bt_att_req_send+0x5a>
   1264a:	bf00      	nop
   1264c:	00020c1d 	.word	0x00020c1d
   12650:	0001ecfc 	.word	0x0001ecfc

00012654 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   12654:	b510      	push	{r4, lr}
   12656:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   12658:	b350      	cbz	r0, 126b0 <bt_att_req_cancel+0x5c>
   1265a:	b349      	cbz	r1, 126b0 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   1265c:	f7fe ffd4 	bl	11608 <att_get>
	if (!att) {
   12660:	b330      	cbz	r0, 126b0 <bt_att_req_cancel+0x5c>
	return list->head;
   12662:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12664:	b15b      	cbz	r3, 1267e <bt_att_req_cancel+0x2a>
   12666:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   1266a:	d008      	beq.n	1267e <bt_att_req_cancel+0x2a>
	return node->next;
   1266c:	681b      	ldr	r3, [r3, #0]
   1266e:	b10b      	cbz	r3, 12674 <bt_att_req_cancel+0x20>
   12670:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   12674:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   12678:	4294      	cmp	r4, r2
   1267a:	d006      	beq.n	1268a <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1267c:	b96b      	cbnz	r3, 1269a <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1267e:	3004      	adds	r0, #4
   12680:	4621      	mov	r1, r4
   12682:	f009 f9d1 	bl	1ba28 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   12686:	4620      	mov	r0, r4
   12688:	e003      	b.n	12692 <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   1268a:	4620      	mov	r0, r4
	chan->req = &cancel;
   1268c:	4b09      	ldr	r3, [pc, #36]	; (126b4 <bt_att_req_cancel+0x60>)
   1268e:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   12692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   12696:	f009 bb10 	b.w	1bcba <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1269a:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1269e:	d004      	beq.n	126aa <bt_att_req_cancel+0x56>
	return node->next;
   126a0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   126a4:	b10a      	cbz	r2, 126aa <bt_att_req_cancel+0x56>
   126a6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   126aa:	4619      	mov	r1, r3
   126ac:	4613      	mov	r3, r2
   126ae:	e7e1      	b.n	12674 <bt_att_req_cancel+0x20>
}
   126b0:	bd10      	pop	{r4, pc}
   126b2:	bf00      	nop
   126b4:	2000a9cc 	.word	0x2000a9cc

000126b8 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   126b8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   126ba:	4618      	mov	r0, r3
{
   126bc:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   126be:	4907      	ldr	r1, [pc, #28]	; (126dc <db_hash_set+0x24>)
   126c0:	2210      	movs	r2, #16
   126c2:	47a0      	blx	r4
	if (len < 0) {
   126c4:	1e04      	subs	r4, r0, #0
   126c6:	da06      	bge.n	126d6 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   126c8:	4622      	mov	r2, r4
   126ca:	2145      	movs	r1, #69	; 0x45
   126cc:	4804      	ldr	r0, [pc, #16]	; (126e0 <db_hash_set+0x28>)
   126ce:	f007 fa1c 	bl	19b0a <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   126d2:	4620      	mov	r0, r4
   126d4:	bd10      	pop	{r4, pc}
	return 0;
   126d6:	2400      	movs	r4, #0
   126d8:	e7fb      	b.n	126d2 <db_hash_set+0x1a>
   126da:	bf00      	nop
   126dc:	2000c609 	.word	0x2000c609
   126e0:	00020d72 	.word	0x00020d72

000126e4 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   126e4:	2210      	movs	r2, #16
{
   126e6:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   126e8:	4906      	ldr	r1, [pc, #24]	; (12704 <db_hash_store+0x20>)
   126ea:	4807      	ldr	r0, [pc, #28]	; (12708 <db_hash_store+0x24>)
   126ec:	f7f8 fdf6 	bl	b2dc <settings_save_one>
	if (err) {
   126f0:	4602      	mov	r2, r0
   126f2:	b128      	cbz	r0, 12700 <db_hash_store+0x1c>
}
   126f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   126f8:	2145      	movs	r1, #69	; 0x45
   126fa:	4804      	ldr	r0, [pc, #16]	; (1270c <db_hash_store+0x28>)
   126fc:	f007 ba05 	b.w	19b0a <printk>
}
   12700:	bd08      	pop	{r3, pc}
   12702:	bf00      	nop
   12704:	2000c5f9 	.word	0x2000c5f9
   12708:	00020d98 	.word	0x00020d98
   1270c:	00020da0 	.word	0x00020da0

00012710 <find_cf_cfg>:
{
   12710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12712:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12714:	2600      	movs	r6, #0
   12716:	4d0e      	ldr	r5, [pc, #56]	; (12750 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   12718:	462f      	mov	r7, r5
		if (!conn) {
   1271a:	1c6a      	adds	r2, r5, #1
   1271c:	b954      	cbnz	r4, 12734 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1271e:	4669      	mov	r1, sp
   12720:	4610      	mov	r0, r2
   12722:	9400      	str	r4, [sp, #0]
   12724:	f8cd 4003 	str.w	r4, [sp, #3]
   12728:	f009 fbc9 	bl	1bebe <bt_addr_le_cmp>
   1272c:	b940      	cbnz	r0, 12740 <find_cf_cfg+0x30>
}
   1272e:	4638      	mov	r0, r7
   12730:	b003      	add	sp, #12
   12732:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12734:	4620      	mov	r0, r4
   12736:	7829      	ldrb	r1, [r5, #0]
   12738:	f008 fe82 	bl	1b440 <bt_conn_is_peer_addr_le>
   1273c:	2800      	cmp	r0, #0
   1273e:	d1f6      	bne.n	1272e <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12740:	3601      	adds	r6, #1
   12742:	2e0a      	cmp	r6, #10
   12744:	f105 0510 	add.w	r5, r5, #16
   12748:	d1e6      	bne.n	12718 <find_cf_cfg+0x8>
	return NULL;
   1274a:	2700      	movs	r7, #0
   1274c:	e7ef      	b.n	1272e <find_cf_cfg+0x1e>
   1274e:	bf00      	nop
   12750:	2000a9e4 	.word	0x2000a9e4

00012754 <find_sc_cfg>:
{
   12754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12756:	4606      	mov	r6, r0
   12758:	460f      	mov	r7, r1
   1275a:	2400      	movs	r4, #0
   1275c:	4d09      	ldr	r5, [pc, #36]	; (12784 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   1275e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   12762:	42b3      	cmp	r3, r6
   12764:	d107      	bne.n	12776 <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   12766:	4639      	mov	r1, r7
   12768:	4628      	mov	r0, r5
   1276a:	f009 fba8 	bl	1bebe <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1276e:	b910      	cbnz	r0, 12776 <find_sc_cfg+0x22>
			return &sc_cfg[i];
   12770:	4805      	ldr	r0, [pc, #20]	; (12788 <find_sc_cfg+0x34>)
   12772:	4420      	add	r0, r4
}
   12774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12776:	340c      	adds	r4, #12
   12778:	2c78      	cmp	r4, #120	; 0x78
   1277a:	f105 050c 	add.w	r5, r5, #12
   1277e:	d1ee      	bne.n	1275e <find_sc_cfg+0xa>
	return NULL;
   12780:	2000      	movs	r0, #0
   12782:	e7f7      	b.n	12774 <find_sc_cfg+0x20>
   12784:	2000be77 	.word	0x2000be77
   12788:	2000be76 	.word	0x2000be76

0001278c <gatt_sub_find>:
{
   1278c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1278e:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   12790:	2600      	movs	r6, #0
   12792:	4d0e      	ldr	r5, [pc, #56]	; (127cc <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   12794:	462f      	mov	r7, r5
		if (!conn) {
   12796:	1c6a      	adds	r2, r5, #1
   12798:	b954      	cbnz	r4, 127b0 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1279a:	4669      	mov	r1, sp
   1279c:	4610      	mov	r0, r2
   1279e:	9400      	str	r4, [sp, #0]
   127a0:	f8cd 4003 	str.w	r4, [sp, #3]
   127a4:	f009 fb8b 	bl	1bebe <bt_addr_le_cmp>
   127a8:	b940      	cbnz	r0, 127bc <gatt_sub_find+0x30>
}
   127aa:	4638      	mov	r0, r7
   127ac:	b003      	add	sp, #12
   127ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   127b0:	4620      	mov	r0, r4
   127b2:	7829      	ldrb	r1, [r5, #0]
   127b4:	f008 fe44 	bl	1b440 <bt_conn_is_peer_addr_le>
   127b8:	2800      	cmp	r0, #0
   127ba:	d1f6      	bne.n	127aa <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   127bc:	3601      	adds	r6, #1
   127be:	2e0a      	cmp	r6, #10
   127c0:	f105 0510 	add.w	r5, r5, #16
   127c4:	d1e6      	bne.n	12794 <gatt_sub_find+0x8>
	return NULL;
   127c6:	2700      	movs	r7, #0
   127c8:	e7ef      	b.n	127aa <gatt_sub_find+0x1e>
   127ca:	bf00      	nop
   127cc:	2000ab7c 	.word	0x2000ab7c

000127d0 <find_cf_cfg_by_addr>:
{
   127d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127d2:	4606      	mov	r6, r0
   127d4:	460f      	mov	r7, r1
   127d6:	2400      	movs	r4, #0
   127d8:	4d09      	ldr	r5, [pc, #36]	; (12800 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   127da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   127de:	42b3      	cmp	r3, r6
   127e0:	d107      	bne.n	127f2 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   127e2:	4629      	mov	r1, r5
   127e4:	4638      	mov	r0, r7
   127e6:	f009 fb6a 	bl	1bebe <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   127ea:	b910      	cbnz	r0, 127f2 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   127ec:	4805      	ldr	r0, [pc, #20]	; (12804 <find_cf_cfg_by_addr+0x34>)
   127ee:	4420      	add	r0, r4
}
   127f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   127f2:	3410      	adds	r4, #16
   127f4:	2ca0      	cmp	r4, #160	; 0xa0
   127f6:	f105 0510 	add.w	r5, r5, #16
   127fa:	d1ee      	bne.n	127da <find_cf_cfg_by_addr+0xa>
	return NULL;
   127fc:	2000      	movs	r0, #0
   127fe:	e7f7      	b.n	127f0 <find_cf_cfg_by_addr+0x20>
   12800:	2000a9e5 	.word	0x2000a9e5
   12804:	2000a9e4 	.word	0x2000a9e4

00012808 <bt_gatt_attr_write_ccc>:
{
   12808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1280c:	461f      	mov	r7, r3
   1280e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12812:	4604      	mov	r4, r0
   12814:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   12816:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1281a:	2b00      	cmp	r3, #0
   1281c:	d141      	bne.n	128a2 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   1281e:	1e7b      	subs	r3, r7, #1
   12820:	2b01      	cmp	r3, #1
   12822:	d841      	bhi.n	128a8 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   12824:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   12826:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   12828:	4649      	mov	r1, r9
   1282a:	bf14      	ite	ne
   1282c:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   1282e:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   12830:	f009 fb48 	bl	1bec4 <find_ccc_cfg>
	if (!cfg) {
   12834:	4605      	mov	r5, r0
   12836:	b9b0      	cbnz	r0, 12866 <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   12838:	b916      	cbnz	r6, 12840 <bt_gatt_attr_write_ccc+0x38>
			return len;
   1283a:	4638      	mov	r0, r7
}
   1283c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   12840:	4649      	mov	r1, r9
   12842:	f009 fb3f 	bl	1bec4 <find_ccc_cfg>
		if (!cfg) {
   12846:	4605      	mov	r5, r0
   12848:	b930      	cbnz	r0, 12858 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   1284a:	4819      	ldr	r0, [pc, #100]	; (128b0 <bt_gatt_attr_write_ccc+0xa8>)
   1284c:	2157      	movs	r1, #87	; 0x57
   1284e:	f007 f95c 	bl	19b0a <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   12852:	f06f 0010 	mvn.w	r0, #16
   12856:	e7f1      	b.n	1283c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12858:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1285c:	3001      	adds	r0, #1
   1285e:	f009 fb6a 	bl	1bf36 <bt_addr_le_copy>
		cfg->id = conn->id;
   12862:	7a23      	ldrb	r3, [r4, #8]
   12864:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   12866:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
   1286a:	b973      	cbnz	r3, 1288a <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   1286c:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
	cfg->value = value;
   12870:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   12872:	42b3      	cmp	r3, r6
   12874:	d003      	beq.n	1287e <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   12876:	4649      	mov	r1, r9
   12878:	4640      	mov	r0, r8
   1287a:	f009 fa99 	bl	1bdb0 <gatt_ccc_changed>
	if (!value) {
   1287e:	2e00      	cmp	r6, #0
   12880:	d1db      	bne.n	1283a <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   12882:	4628      	mov	r0, r5
   12884:	f009 fb5a 	bl	1bf3c <clear_ccc_cfg>
   12888:	e7d7      	b.n	1283a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1288a:	4632      	mov	r2, r6
   1288c:	4641      	mov	r1, r8
   1288e:	4620      	mov	r0, r4
   12890:	4798      	blx	r3
		if (write < 0) {
   12892:	2800      	cmp	r0, #0
   12894:	dbd2      	blt.n	1283c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   12896:	1e44      	subs	r4, r0, #1
   12898:	2c01      	cmp	r4, #1
   1289a:	d9e7      	bls.n	1286c <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1289c:	f06f 000d 	mvn.w	r0, #13
   128a0:	e7cc      	b.n	1283c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   128a2:	f06f 0006 	mvn.w	r0, #6
   128a6:	e7c9      	b.n	1283c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   128a8:	f06f 000c 	mvn.w	r0, #12
   128ac:	e7c6      	b.n	1283c <bt_gatt_attr_write_ccc+0x34>
   128ae:	bf00      	nop
   128b0:	00020dcb 	.word	0x00020dcb

000128b4 <cf_write>:
{
   128b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   128b8:	461f      	mov	r7, r3
   128ba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   128be:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   128c0:	2b01      	cmp	r3, #1
{
   128c2:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   128c4:	d845      	bhi.n	12952 <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   128c6:	443b      	add	r3, r7
   128c8:	2b01      	cmp	r3, #1
   128ca:	463d      	mov	r5, r7
   128cc:	dc44      	bgt.n	12958 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   128ce:	f7ff ff1f 	bl	12710 <find_cf_cfg>
	if (!cfg) {
   128d2:	4604      	mov	r4, r0
   128d4:	b918      	cbnz	r0, 128de <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   128d6:	f7ff ff1b 	bl	12710 <find_cf_cfg>
	if (!cfg) {
   128da:	4604      	mov	r4, r0
   128dc:	b1d8      	cbz	r0, 12916 <cf_write+0x62>
   128de:	4632      	mov	r2, r6
   128e0:	f104 0008 	add.w	r0, r4, #8
   128e4:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   128e8:	4596      	cmp	lr, r2
   128ea:	d11d      	bne.n	12928 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   128ec:	b12f      	cbz	r7, 128fa <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   128ee:	7833      	ldrb	r3, [r6, #0]
   128f0:	7a22      	ldrb	r2, [r4, #8]
   128f2:	f003 0307 	and.w	r3, r3, #7
   128f6:	4313      	orrs	r3, r2
   128f8:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   128fa:	f108 0188 	add.w	r1, r8, #136	; 0x88
   128fe:	1c60      	adds	r0, r4, #1
   12900:	f009 fb19 	bl	1bf36 <bt_addr_le_copy>
	cfg->id = conn->id;
   12904:	4620      	mov	r0, r4
   12906:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1290a:	2101      	movs	r1, #1
   1290c:	f800 3b0c 	strb.w	r3, [r0], #12
   12910:	f009 fb22 	bl	1bf58 <atomic_or>
}
   12914:	e005      	b.n	12922 <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   12916:	2157      	movs	r1, #87	; 0x57
   12918:	4812      	ldr	r0, [pc, #72]	; (12964 <cf_write+0xb0>)
   1291a:	f007 f8f6 	bl	19b0a <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1291e:	f06f 0510 	mvn.w	r5, #16
}
   12922:	4628      	mov	r0, r5
   12924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   12928:	2300      	movs	r3, #0
   1292a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1292e:	f810 cb01 	ldrb.w	ip, [r0], #1
   12932:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   12936:	fa21 f903 	lsr.w	r9, r1, r3
   1293a:	f019 0f01 	tst.w	r9, #1
   1293e:	d004      	beq.n	1294a <cf_write+0x96>
   12940:	fa2c f903 	lsr.w	r9, ip, r3
   12944:	f019 0f01 	tst.w	r9, #1
   12948:	d109      	bne.n	1295e <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   1294a:	3301      	adds	r3, #1
   1294c:	2b03      	cmp	r3, #3
   1294e:	d1f2      	bne.n	12936 <cf_write+0x82>
   12950:	e7ca      	b.n	128e8 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12952:	f06f 0506 	mvn.w	r5, #6
   12956:	e7e4      	b.n	12922 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12958:	f06f 050c 	mvn.w	r5, #12
   1295c:	e7e1      	b.n	12922 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1295e:	f06f 0512 	mvn.w	r5, #18
   12962:	e7de      	b.n	12922 <cf_write+0x6e>
   12964:	00020dea 	.word	0x00020dea

00012968 <sc_store>:
{
   12968:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1296a:	4605      	mov	r5, r0
   1296c:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   12970:	4604      	mov	r4, r0
   12972:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   12974:	b1ca      	cbz	r2, 129aa <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   12976:	ae02      	add	r6, sp, #8
   12978:	2104      	movs	r1, #4
   1297a:	4630      	mov	r0, r6
   1297c:	f007 f82b 	bl	199d6 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   12980:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   12982:	462b      	mov	r3, r5
   12984:	2124      	movs	r1, #36	; 0x24
   12986:	4a0a      	ldr	r2, [pc, #40]	; (129b0 <sc_store+0x48>)
   12988:	a803      	add	r0, sp, #12
   1298a:	f7fb f8bd 	bl	db08 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1298e:	2204      	movs	r2, #4
   12990:	f104 0108 	add.w	r1, r4, #8
   12994:	a803      	add	r0, sp, #12
   12996:	f7f8 fca1 	bl	b2dc <settings_save_one>
	if (err) {
   1299a:	4602      	mov	r2, r0
   1299c:	b118      	cbz	r0, 129a6 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   1299e:	2145      	movs	r1, #69	; 0x45
   129a0:	4804      	ldr	r0, [pc, #16]	; (129b4 <sc_store+0x4c>)
   129a2:	f007 f8b2 	bl	19b0a <printk>
}
   129a6:	b00c      	add	sp, #48	; 0x30
   129a8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   129aa:	9200      	str	r2, [sp, #0]
   129ac:	e7e9      	b.n	12982 <sc_store+0x1a>
   129ae:	bf00      	nop
   129b0:	00021126 	.word	0x00021126
   129b4:	00020e1b 	.word	0x00020e1b

000129b8 <sc_save>:
{
   129b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   129bc:	4680      	mov	r8, r0
   129be:	460f      	mov	r7, r1
   129c0:	4616      	mov	r6, r2
   129c2:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   129c4:	f7ff fec6 	bl	12754 <find_sc_cfg>
	if (!cfg) {
   129c8:	4604      	mov	r4, r0
   129ca:	b998      	cbnz	r0, 129f4 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   129cc:	4669      	mov	r1, sp
   129ce:	9000      	str	r0, [sp, #0]
   129d0:	f8cd 0003 	str.w	r0, [sp, #3]
   129d4:	f7ff febe 	bl	12754 <find_sc_cfg>
		if (!cfg) {
   129d8:	4604      	mov	r4, r0
   129da:	b930      	cbnz	r0, 129ea <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   129dc:	2145      	movs	r1, #69	; 0x45
   129de:	4813      	ldr	r0, [pc, #76]	; (12a2c <sc_save+0x74>)
   129e0:	f007 f893 	bl	19b0a <printk>
}
   129e4:	b002      	add	sp, #8
   129e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   129ea:	4639      	mov	r1, r7
		cfg->id = id;
   129ec:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   129f0:	f009 faa1 	bl	1bf36 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   129f4:	8922      	ldrh	r2, [r4, #8]
   129f6:	8963      	ldrh	r3, [r4, #10]
   129f8:	b97a      	cbnz	r2, 12a1a <sc_save+0x62>
   129fa:	b983      	cbnz	r3, 12a1e <sc_save+0x66>
		cfg->data.start = start;
   129fc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   129fe:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   12a00:	4621      	mov	r1, r4
   12a02:	f811 0b01 	ldrb.w	r0, [r1], #1
   12a06:	f008 fc87 	bl	1b318 <bt_addr_le_is_bonded>
   12a0a:	2800      	cmp	r0, #0
   12a0c:	d0ea      	beq.n	129e4 <sc_save+0x2c>
		sc_store(cfg);
   12a0e:	4620      	mov	r0, r4
}
   12a10:	b002      	add	sp, #8
   12a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   12a16:	f7ff bfa7 	b.w	12968 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   12a1a:	4296      	cmp	r6, r2
   12a1c:	d302      	bcc.n	12a24 <sc_save+0x6c>
   12a1e:	429d      	cmp	r5, r3
   12a20:	d8ed      	bhi.n	129fe <sc_save+0x46>
   12a22:	e7df      	b.n	129e4 <sc_save+0x2c>
	if (*end < new_end) {
   12a24:	429d      	cmp	r5, r3
		*start = new_start;
   12a26:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   12a28:	d9ea      	bls.n	12a00 <sc_save+0x48>
   12a2a:	e7e8      	b.n	129fe <sc_save+0x46>
   12a2c:	00020e3c 	.word	0x00020e3c

00012a30 <sc_set>:
{
   12a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a34:	460e      	mov	r6, r1
   12a36:	4690      	mov	r8, r2
   12a38:	4699      	mov	r9, r3
	if (!name) {
   12a3a:	4604      	mov	r4, r0
{
   12a3c:	b087      	sub	sp, #28
	if (!name) {
   12a3e:	b948      	cbnz	r0, 12a54 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   12a40:	2145      	movs	r1, #69	; 0x45
   12a42:	4829      	ldr	r0, [pc, #164]	; (12ae8 <sc_set+0xb8>)
   12a44:	f007 f861 	bl	19b0a <printk>
		return -EINVAL;
   12a48:	f06f 0515 	mvn.w	r5, #21
}
   12a4c:	4628      	mov	r0, r5
   12a4e:	b007      	add	sp, #28
   12a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   12a54:	a902      	add	r1, sp, #8
   12a56:	f008 fae9 	bl	1b02c <bt_settings_decode_key>
	if (err) {
   12a5a:	4605      	mov	r5, r0
   12a5c:	b128      	cbz	r0, 12a6a <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   12a5e:	4622      	mov	r2, r4
   12a60:	2145      	movs	r1, #69	; 0x45
   12a62:	4822      	ldr	r0, [pc, #136]	; (12aec <sc_set+0xbc>)
   12a64:	f007 f851 	bl	19b0a <printk>
   12a68:	e7ee      	b.n	12a48 <sc_set+0x18>
	settings_name_next(name, &next);
   12a6a:	4620      	mov	r0, r4
   12a6c:	a901      	add	r1, sp, #4
   12a6e:	f007 fb6b 	bl	1a148 <settings_name_next>
	if (!next) {
   12a72:	9801      	ldr	r0, [sp, #4]
   12a74:	b1d8      	cbz	r0, 12aae <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   12a76:	220a      	movs	r2, #10
   12a78:	4629      	mov	r1, r5
   12a7a:	f008 f9b8 	bl	1adee <strtol>
   12a7e:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   12a80:	4638      	mov	r0, r7
   12a82:	a902      	add	r1, sp, #8
   12a84:	f7ff fe66 	bl	12754 <find_sc_cfg>
	if (!cfg && len_rd) {
   12a88:	4604      	mov	r4, r0
   12a8a:	bb28      	cbnz	r0, 12ad8 <sc_set+0xa8>
   12a8c:	2e00      	cmp	r6, #0
   12a8e:	d0dd      	beq.n	12a4c <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   12a90:	a904      	add	r1, sp, #16
   12a92:	9004      	str	r0, [sp, #16]
   12a94:	f8cd 0013 	str.w	r0, [sp, #19]
   12a98:	f7ff fe5c 	bl	12754 <find_sc_cfg>
		if (!cfg) {
   12a9c:	4604      	mov	r4, r0
   12a9e:	b940      	cbnz	r0, 12ab2 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   12aa0:	2145      	movs	r1, #69	; 0x45
   12aa2:	4813      	ldr	r0, [pc, #76]	; (12af0 <sc_set+0xc0>)
   12aa4:	f007 f831 	bl	19b0a <printk>
			return -ENOMEM;
   12aa8:	f06f 050b 	mvn.w	r5, #11
   12aac:	e7ce      	b.n	12a4c <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   12aae:	462f      	mov	r7, r5
   12ab0:	e7e6      	b.n	12a80 <sc_set+0x50>
		cfg->id = id;
   12ab2:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   12ab6:	a902      	add	r1, sp, #8
   12ab8:	f009 fa3d 	bl	1bf36 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   12abc:	f104 0108 	add.w	r1, r4, #8
   12ac0:	2204      	movs	r2, #4
   12ac2:	4648      	mov	r0, r9
   12ac4:	47c0      	blx	r8
		if (len < 0) {
   12ac6:	1e04      	subs	r4, r0, #0
   12ac8:	dac0      	bge.n	12a4c <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   12aca:	4622      	mov	r2, r4
   12acc:	2145      	movs	r1, #69	; 0x45
   12ace:	4809      	ldr	r0, [pc, #36]	; (12af4 <sc_set+0xc4>)
   12ad0:	f007 f81b 	bl	19b0a <printk>
			return len;
   12ad4:	4625      	mov	r5, r4
   12ad6:	e7b9      	b.n	12a4c <sc_set+0x1c>
	if (len_rd) {
   12ad8:	2e00      	cmp	r6, #0
   12ada:	d1ef      	bne.n	12abc <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   12adc:	220c      	movs	r2, #12
   12ade:	4631      	mov	r1, r6
   12ae0:	f008 fa7e 	bl	1afe0 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   12ae4:	e7b2      	b.n	12a4c <sc_set+0x1c>
   12ae6:	bf00      	nop
   12ae8:	0001fd69 	.word	0x0001fd69
   12aec:	00020e60 	.word	0x00020e60
   12af0:	00020e81 	.word	0x00020e81
   12af4:	00020d72 	.word	0x00020d72

00012af8 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   12af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12afc:	4606      	mov	r6, r0
   12afe:	4688      	mov	r8, r1
   12b00:	4617      	mov	r7, r2
	if (params) {
   12b02:	461c      	mov	r4, r3
   12b04:	b31b      	cbz	r3, 12b4e <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   12b06:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   12b0a:	2100      	movs	r1, #0
   12b0c:	f7ff fc3c 	bl	12388 <bt_att_req_alloc>
		if (!req) {
   12b10:	4605      	mov	r5, r0
   12b12:	b920      	cbnz	r0, 12b1e <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   12b14:	f06f 040b 	mvn.w	r4, #11
}
   12b18:	4620      	mov	r0, r4
   12b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   12b1e:	2300      	movs	r3, #0
		req->user_data = params;
   12b20:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   12b22:	4601      	mov	r1, r0
		req->buf = buf;
   12b24:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   12b28:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   12b2a:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   12b2c:	4630      	mov	r0, r6
   12b2e:	f7ff fd57 	bl	125e0 <bt_att_req_send>
		if (err) {
   12b32:	4604      	mov	r4, r0
   12b34:	2800      	cmp	r0, #0
   12b36:	d0ef      	beq.n	12b18 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   12b38:	4628      	mov	r0, r5
   12b3a:	f7ff fc3b 	bl	123b4 <bt_att_req_free>
	if (err) {
   12b3e:	2c00      	cmp	r4, #0
   12b40:	d0ea      	beq.n	12b18 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   12b42:	4622      	mov	r2, r4
   12b44:	2145      	movs	r1, #69	; 0x45
   12b46:	4804      	ldr	r0, [pc, #16]	; (12b58 <gatt_send.constprop.0+0x60>)
   12b48:	f006 ffdf 	bl	19b0a <printk>
   12b4c:	e7e4      	b.n	12b18 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   12b4e:	461a      	mov	r2, r3
   12b50:	f7ff fcde 	bl	12510 <bt_att_send>
   12b54:	4604      	mov	r4, r0
   12b56:	e7f2      	b.n	12b3e <gatt_send.constprop.0+0x46>
   12b58:	00020ea8 	.word	0x00020ea8

00012b5c <cf_set>:
{
   12b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b60:	4689      	mov	r9, r1
   12b62:	4617      	mov	r7, r2
   12b64:	4698      	mov	r8, r3
	if (!name) {
   12b66:	4605      	mov	r5, r0
{
   12b68:	b085      	sub	sp, #20
	if (!name) {
   12b6a:	b948      	cbnz	r0, 12b80 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   12b6c:	2145      	movs	r1, #69	; 0x45
   12b6e:	4826      	ldr	r0, [pc, #152]	; (12c08 <cf_set+0xac>)
   12b70:	f006 ffcb 	bl	19b0a <printk>
		return -EINVAL;
   12b74:	f06f 0415 	mvn.w	r4, #21
}
   12b78:	4620      	mov	r0, r4
   12b7a:	b005      	add	sp, #20
   12b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   12b80:	a902      	add	r1, sp, #8
   12b82:	f008 fa53 	bl	1b02c <bt_settings_decode_key>
	if (err) {
   12b86:	4604      	mov	r4, r0
   12b88:	b128      	cbz	r0, 12b96 <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   12b8a:	462a      	mov	r2, r5
   12b8c:	2145      	movs	r1, #69	; 0x45
   12b8e:	481f      	ldr	r0, [pc, #124]	; (12c0c <cf_set+0xb0>)
   12b90:	f006 ffbb 	bl	19b0a <printk>
   12b94:	e7ee      	b.n	12b74 <cf_set+0x18>
	settings_name_next(name, &next);
   12b96:	4628      	mov	r0, r5
   12b98:	a901      	add	r1, sp, #4
   12b9a:	f007 fad5 	bl	1a148 <settings_name_next>
	if (!next) {
   12b9e:	9801      	ldr	r0, [sp, #4]
   12ba0:	b1a8      	cbz	r0, 12bce <cf_set+0x72>
		id = strtol(next, NULL, 10);
   12ba2:	220a      	movs	r2, #10
   12ba4:	4621      	mov	r1, r4
   12ba6:	f008 f922 	bl	1adee <strtol>
   12baa:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   12bac:	4630      	mov	r0, r6
   12bae:	a902      	add	r1, sp, #8
   12bb0:	f7ff fe0e 	bl	127d0 <find_cf_cfg_by_addr>
	if (!cfg) {
   12bb4:	4605      	mov	r5, r0
   12bb6:	b988      	cbnz	r0, 12bdc <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   12bb8:	f7ff fdaa 	bl	12710 <find_cf_cfg>
		if (!cfg) {
   12bbc:	4605      	mov	r5, r0
   12bbe:	b940      	cbnz	r0, 12bd2 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   12bc0:	2145      	movs	r1, #69	; 0x45
   12bc2:	4813      	ldr	r0, [pc, #76]	; (12c10 <cf_set+0xb4>)
   12bc4:	f006 ffa1 	bl	19b0a <printk>
			return -ENOMEM;
   12bc8:	f06f 040b 	mvn.w	r4, #11
   12bcc:	e7d4      	b.n	12b78 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   12bce:	4626      	mov	r6, r4
   12bd0:	e7ec      	b.n	12bac <cf_set+0x50>
		cfg->id = id;
   12bd2:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   12bd6:	a902      	add	r1, sp, #8
   12bd8:	f009 f9ad 	bl	1bf36 <bt_addr_le_copy>
	if (len_rd) {
   12bdc:	f1b9 0f00 	cmp.w	r9, #0
   12be0:	d00d      	beq.n	12bfe <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   12be2:	f105 0108 	add.w	r1, r5, #8
   12be6:	2201      	movs	r2, #1
   12be8:	4640      	mov	r0, r8
   12bea:	47b8      	blx	r7
		if (len < 0) {
   12bec:	1e05      	subs	r5, r0, #0
   12bee:	dac3      	bge.n	12b78 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   12bf0:	462a      	mov	r2, r5
   12bf2:	2145      	movs	r1, #69	; 0x45
   12bf4:	4807      	ldr	r0, [pc, #28]	; (12c14 <cf_set+0xb8>)
   12bf6:	f006 ff88 	bl	19b0a <printk>
			return len;
   12bfa:	462c      	mov	r4, r5
   12bfc:	e7bc      	b.n	12b78 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   12bfe:	4628      	mov	r0, r5
   12c00:	f009 f9c4 	bl	1bf8c <clear_cf_cfg>
   12c04:	e7b8      	b.n	12b78 <cf_set+0x1c>
   12c06:	bf00      	nop
   12c08:	0001fd69 	.word	0x0001fd69
   12c0c:	00020e60 	.word	0x00020e60
   12c10:	00020ec7 	.word	0x00020ec7
   12c14:	00020d72 	.word	0x00020d72

00012c18 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   12c18:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   12c1a:	6881      	ldr	r1, [r0, #8]
{
   12c1c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12c1e:	4a07      	ldr	r2, [pc, #28]	; (12c3c <remove_peer_from_attr+0x24>)
   12c20:	4291      	cmp	r1, r2
   12c22:	d109      	bne.n	12c38 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   12c24:	791a      	ldrb	r2, [r3, #4]
   12c26:	6819      	ldr	r1, [r3, #0]
   12c28:	68c0      	ldr	r0, [r0, #12]
   12c2a:	f009 f96a 	bl	1bf02 <ccc_find_cfg>
	if (cfg) {
   12c2e:	b118      	cbz	r0, 12c38 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   12c30:	220a      	movs	r2, #10
   12c32:	2100      	movs	r1, #0
   12c34:	f008 f9d4 	bl	1afe0 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   12c38:	2001      	movs	r0, #1
   12c3a:	bd08      	pop	{r3, pc}
   12c3c:	00012809 	.word	0x00012809

00012c40 <ccc_load>:
{
   12c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12c42:	4b21      	ldr	r3, [pc, #132]	; (12cc8 <ccc_load+0x88>)
{
   12c44:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12c46:	6882      	ldr	r2, [r0, #8]
   12c48:	429a      	cmp	r2, r3
   12c4a:	d002      	beq.n	12c52 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   12c4c:	2001      	movs	r0, #1
}
   12c4e:	b002      	add	sp, #8
   12c50:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   12c52:	68a3      	ldr	r3, [r4, #8]
   12c54:	68c6      	ldr	r6, [r0, #12]
   12c56:	b94b      	cbnz	r3, 12c6c <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   12c58:	4630      	mov	r0, r6
   12c5a:	7922      	ldrb	r2, [r4, #4]
   12c5c:	6821      	ldr	r1, [r4, #0]
   12c5e:	f009 f950 	bl	1bf02 <ccc_find_cfg>
	if (!cfg) {
   12c62:	2800      	cmp	r0, #0
   12c64:	d0f2      	beq.n	12c4c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   12c66:	f009 f969 	bl	1bf3c <clear_ccc_cfg>
   12c6a:	e7ef      	b.n	12c4c <ccc_load+0xc>
	} else if (!load->count) {
   12c6c:	68e0      	ldr	r0, [r4, #12]
   12c6e:	2800      	cmp	r0, #0
   12c70:	d0ed      	beq.n	12c4e <ccc_load+0xe>
	if (load->entry->handle != handle) {
   12c72:	881b      	ldrh	r3, [r3, #0]
   12c74:	4299      	cmp	r1, r3
   12c76:	d00a      	beq.n	12c8e <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   12c78:	d9e8      	bls.n	12c4c <ccc_load+0xc>
	load->count--;
   12c7a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   12c7c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   12c7e:	3801      	subs	r0, #1
	load->entry++;
   12c80:	3304      	adds	r3, #4
	load->count--;
   12c82:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12c84:	3800      	subs	r0, #0
   12c86:	bf18      	it	ne
   12c88:	2001      	movne	r0, #1
	load->entry++;
   12c8a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12c8c:	e7df      	b.n	12c4e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   12c8e:	4630      	mov	r0, r6
   12c90:	7922      	ldrb	r2, [r4, #4]
   12c92:	6821      	ldr	r1, [r4, #0]
   12c94:	f009 f935 	bl	1bf02 <ccc_find_cfg>
	if (!cfg) {
   12c98:	4605      	mov	r5, r0
   12c9a:	b980      	cbnz	r0, 12cbe <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   12c9c:	9000      	str	r0, [sp, #0]
   12c9e:	4602      	mov	r2, r0
   12ca0:	f8cd 0003 	str.w	r0, [sp, #3]
   12ca4:	4669      	mov	r1, sp
   12ca6:	4630      	mov	r0, r6
   12ca8:	f009 f92b 	bl	1bf02 <ccc_find_cfg>
		if (!cfg) {
   12cac:	4605      	mov	r5, r0
   12cae:	2800      	cmp	r0, #0
   12cb0:	d0e3      	beq.n	12c7a <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   12cb2:	6821      	ldr	r1, [r4, #0]
   12cb4:	3001      	adds	r0, #1
   12cb6:	f009 f93e 	bl	1bf36 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   12cba:	7923      	ldrb	r3, [r4, #4]
   12cbc:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   12cbe:	68a3      	ldr	r3, [r4, #8]
   12cc0:	885b      	ldrh	r3, [r3, #2]
   12cc2:	812b      	strh	r3, [r5, #8]
   12cc4:	e7d9      	b.n	12c7a <ccc_load+0x3a>
   12cc6:	bf00      	nop
   12cc8:	00012809 	.word	0x00012809

00012ccc <ccc_save>:
{
   12ccc:	b538      	push	{r3, r4, r5, lr}
   12cce:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12cd0:	4b0b      	ldr	r3, [pc, #44]	; (12d00 <ccc_save+0x34>)
   12cd2:	6882      	ldr	r2, [r0, #8]
{
   12cd4:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   12cd6:	429a      	cmp	r2, r3
   12cd8:	d10f      	bne.n	12cfa <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   12cda:	7922      	ldrb	r2, [r4, #4]
   12cdc:	6821      	ldr	r1, [r4, #0]
   12cde:	68c0      	ldr	r0, [r0, #12]
   12ce0:	f009 f90f 	bl	1bf02 <ccc_find_cfg>
	if (!cfg) {
   12ce4:	b148      	cbz	r0, 12cfa <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   12ce6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   12cea:	8901      	ldrh	r1, [r0, #8]
   12cec:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   12cf0:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   12cf2:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   12cf4:	8151      	strh	r1, [r2, #10]
	save->count++;
   12cf6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   12cfa:	2001      	movs	r0, #1
   12cfc:	bd38      	pop	{r3, r4, r5, pc}
   12cfe:	bf00      	nop
   12d00:	00012809 	.word	0x00012809

00012d04 <gatt_indicate>:
{
   12d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d08:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   12d0a:	8a92      	ldrh	r2, [r2, #20]
{
   12d0c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   12d0e:	3202      	adds	r2, #2
   12d10:	211d      	movs	r1, #29
{
   12d12:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   12d14:	f7ff f8b8 	bl	11e88 <bt_att_create_pdu>
	if (!buf) {
   12d18:	4605      	mov	r5, r0
   12d1a:	b1e8      	cbz	r0, 12d58 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   12d1c:	f100 0808 	add.w	r8, r0, #8
   12d20:	2102      	movs	r1, #2
   12d22:	4640      	mov	r0, r8
   12d24:	f001 ff94 	bl	14c50 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   12d28:	4606      	mov	r6, r0
   12d2a:	8aa1      	ldrh	r1, [r4, #20]
   12d2c:	f826 9b02 	strh.w	r9, [r6], #2
   12d30:	4640      	mov	r0, r8
   12d32:	f001 ff8d 	bl	14c50 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   12d36:	4630      	mov	r0, r6
   12d38:	8aa2      	ldrh	r2, [r4, #20]
   12d3a:	6921      	ldr	r1, [r4, #16]
   12d3c:	f008 f925 	bl	1af8a <memcpy>
	if (!params->func) {
   12d40:	68a3      	ldr	r3, [r4, #8]
   12d42:	b933      	cbnz	r3, 12d52 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   12d44:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   12d46:	4629      	mov	r1, r5
   12d48:	4638      	mov	r0, r7
}
   12d4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   12d4e:	f7ff bed3 	b.w	12af8 <gatt_send.constprop.0>
   12d52:	4623      	mov	r3, r4
   12d54:	4a04      	ldr	r2, [pc, #16]	; (12d68 <gatt_indicate+0x64>)
   12d56:	e7f6      	b.n	12d46 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   12d58:	2157      	movs	r1, #87	; 0x57
   12d5a:	4804      	ldr	r0, [pc, #16]	; (12d6c <gatt_indicate+0x68>)
   12d5c:	f006 fed5 	bl	19b0a <printk>
}
   12d60:	f06f 000b 	mvn.w	r0, #11
   12d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12d68:	0001bde3 	.word	0x0001bde3
   12d6c:	00020eee 	.word	0x00020eee

00012d70 <gatt_notify>:
{
   12d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d74:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   12d76:	8992      	ldrh	r2, [r2, #12]
{
   12d78:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   12d7a:	3202      	adds	r2, #2
   12d7c:	211b      	movs	r1, #27
{
   12d7e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   12d80:	f7ff f882 	bl	11e88 <bt_att_create_pdu>
	if (!buf) {
   12d84:	4605      	mov	r5, r0
   12d86:	b1c8      	cbz	r0, 12dbc <gatt_notify+0x4c>
   12d88:	f100 0908 	add.w	r9, r0, #8
   12d8c:	2102      	movs	r1, #2
   12d8e:	4648      	mov	r0, r9
   12d90:	f001 ff5e 	bl	14c50 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   12d94:	4606      	mov	r6, r0
   12d96:	89a1      	ldrh	r1, [r4, #12]
   12d98:	f826 8b02 	strh.w	r8, [r6], #2
   12d9c:	4648      	mov	r0, r9
   12d9e:	f001 ff57 	bl	14c50 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   12da2:	89a2      	ldrh	r2, [r4, #12]
   12da4:	68a1      	ldr	r1, [r4, #8]
   12da6:	4630      	mov	r0, r6
   12da8:	f008 f8ef 	bl	1af8a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   12dac:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   12db0:	4629      	mov	r1, r5
   12db2:	4638      	mov	r0, r7
}
   12db4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   12db8:	f7ff bbaa 	b.w	12510 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   12dbc:	2157      	movs	r1, #87	; 0x57
   12dbe:	4803      	ldr	r0, [pc, #12]	; (12dcc <gatt_notify+0x5c>)
   12dc0:	f006 fea3 	bl	19b0a <printk>
}
   12dc4:	f06f 000b 	mvn.w	r0, #11
   12dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12dcc:	00020f1a 	.word	0x00020f1a

00012dd0 <notify_cb>:
{
   12dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12dd4:	4b38      	ldr	r3, [pc, #224]	; (12eb8 <notify_cb+0xe8>)
{
   12dd6:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12dd8:	6882      	ldr	r2, [r0, #8]
{
   12dda:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12ddc:	429a      	cmp	r2, r3
   12dde:	d003      	beq.n	12de8 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   12de0:	2001      	movs	r0, #1
}
   12de2:	b003      	add	sp, #12
   12de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   12de8:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   12dec:	4b33      	ldr	r3, [pc, #204]	; (12ebc <notify_cb+0xec>)
   12dee:	4599      	cmp	r9, r3
   12df0:	d01a      	beq.n	12e28 <notify_cb+0x58>
   12df2:	f04f 0b00 	mov.w	fp, #0
   12df6:	f109 0701 	add.w	r7, r9, #1
   12dfa:	f109 0a65 	add.w	sl, r9, #101	; 0x65
		if (cfg->value != data->type) {
   12dfe:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   12e02:	89a3      	ldrh	r3, [r4, #12]
   12e04:	429a      	cmp	r2, r3
   12e06:	d10b      	bne.n	12e20 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12e08:	4639      	mov	r1, r7
   12e0a:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   12e0e:	f7fd fead 	bl	10b6c <bt_conn_lookup_addr_le>
		if (!conn) {
   12e12:	4605      	mov	r5, r0
   12e14:	b120      	cbz	r0, 12e20 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   12e16:	7a83      	ldrb	r3, [r0, #10]
   12e18:	2b07      	cmp	r3, #7
   12e1a:	d029      	beq.n	12e70 <notify_cb+0xa0>
			bt_conn_unref(conn);
   12e1c:	f7fd fd84 	bl	10928 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12e20:	370a      	adds	r7, #10
   12e22:	4557      	cmp	r7, sl
   12e24:	d1eb      	bne.n	12dfe <notify_cb+0x2e>
   12e26:	e7db      	b.n	12de0 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12e28:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   12e2a:	4637      	mov	r7, r6
   12e2c:	4d24      	ldr	r5, [pc, #144]	; (12ec0 <notify_cb+0xf0>)
   12e2e:	4669      	mov	r1, sp
   12e30:	4628      	mov	r0, r5
   12e32:	9700      	str	r7, [sp, #0]
   12e34:	f8cd 7003 	str.w	r7, [sp, #3]
   12e38:	f009 f841 	bl	1bebe <bt_addr_le_cmp>
   12e3c:	b178      	cbz	r0, 12e5e <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   12e3e:	2207      	movs	r2, #7
   12e40:	4629      	mov	r1, r5
   12e42:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   12e46:	f7fd fed1 	bl	10bec <bt_conn_lookup_state_le>
			if (!conn) {
   12e4a:	b970      	cbnz	r0, 12e6a <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   12e4c:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   12e4e:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   12e50:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   12e52:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   12e56:	8853      	ldrh	r3, [r2, #2]
   12e58:	8812      	ldrh	r2, [r2, #0]
   12e5a:	f7ff fdad 	bl	129b8 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12e5e:	3601      	adds	r6, #1
   12e60:	2e0a      	cmp	r6, #10
   12e62:	f105 050c 	add.w	r5, r5, #12
   12e66:	d1e2      	bne.n	12e2e <notify_cb+0x5e>
   12e68:	e7c3      	b.n	12df2 <notify_cb+0x22>
			bt_conn_unref(conn);
   12e6a:	f7fd fd5d 	bl	10928 <bt_conn_unref>
   12e6e:	e7f6      	b.n	12e5e <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   12e70:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
   12e74:	b123      	cbz	r3, 12e80 <notify_cb+0xb0>
   12e76:	4641      	mov	r1, r8
   12e78:	4798      	blx	r3
   12e7a:	b908      	cbnz	r0, 12e80 <notify_cb+0xb0>
			bt_conn_unref(conn);
   12e7c:	4628      	mov	r0, r5
   12e7e:	e7cd      	b.n	12e1c <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   12e80:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   12e82:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   12e84:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   12e86:	88a1      	ldrh	r1, [r4, #4]
   12e88:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   12e8a:	d10f      	bne.n	12eac <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   12e8c:	f7ff ff3a 	bl	12d04 <gatt_indicate>
			if (err == 0) {
   12e90:	4606      	mov	r6, r0
   12e92:	b918      	cbnz	r0, 12e9c <notify_cb+0xcc>
				data->ind_params->_ref++;
   12e94:	6922      	ldr	r2, [r4, #16]
   12e96:	7d93      	ldrb	r3, [r2, #22]
   12e98:	3301      	adds	r3, #1
   12e9a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   12e9c:	4628      	mov	r0, r5
   12e9e:	f7fd fd43 	bl	10928 <bt_conn_unref>
		if (err < 0) {
   12ea2:	2e00      	cmp	r6, #0
   12ea4:	db06      	blt.n	12eb4 <notify_cb+0xe4>
		data->err = 0;
   12ea6:	f8c4 b008 	str.w	fp, [r4, #8]
   12eaa:	e7b9      	b.n	12e20 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   12eac:	f7ff ff60 	bl	12d70 <gatt_notify>
   12eb0:	4606      	mov	r6, r0
   12eb2:	e7f3      	b.n	12e9c <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   12eb4:	2000      	movs	r0, #0
   12eb6:	e794      	b.n	12de2 <notify_cb+0x12>
   12eb8:	00012809 	.word	0x00012809
   12ebc:	20008488 	.word	0x20008488
   12ec0:	2000be77 	.word	0x2000be77

00012ec4 <bt_gatt_clear_sc>:
{
   12ec4:	b570      	push	{r4, r5, r6, lr}
   12ec6:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   12ec8:	f7ff fc44 	bl	12754 <find_sc_cfg>
	if (!cfg) {
   12ecc:	4604      	mov	r4, r0
   12ece:	b1e8      	cbz	r0, 12f0c <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   12ed0:	4605      	mov	r5, r0
   12ed2:	f815 2b01 	ldrb.w	r2, [r5], #1
   12ed6:	b1e2      	cbz	r2, 12f12 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   12ed8:	ae02      	add	r6, sp, #8
   12eda:	2104      	movs	r1, #4
   12edc:	4630      	mov	r0, r6
   12ede:	f006 fd7a 	bl	199d6 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   12ee2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   12ee4:	4a0c      	ldr	r2, [pc, #48]	; (12f18 <bt_gatt_clear_sc+0x54>)
   12ee6:	462b      	mov	r3, r5
   12ee8:	2124      	movs	r1, #36	; 0x24
   12eea:	a803      	add	r0, sp, #12
   12eec:	f7fa fe0c 	bl	db08 <bt_settings_encode_key>
		err = settings_delete(key);
   12ef0:	a803      	add	r0, sp, #12
   12ef2:	f007 f902 	bl	1a0fa <settings_delete>
		if (err) {
   12ef6:	4602      	mov	r2, r0
   12ef8:	b118      	cbz	r0, 12f02 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   12efa:	2145      	movs	r1, #69	; 0x45
   12efc:	4807      	ldr	r0, [pc, #28]	; (12f1c <bt_gatt_clear_sc+0x58>)
   12efe:	f006 fe04 	bl	19b0a <printk>
	memset(cfg, 0, sizeof(*cfg));
   12f02:	220c      	movs	r2, #12
   12f04:	2100      	movs	r1, #0
   12f06:	4620      	mov	r0, r4
   12f08:	f008 f86a 	bl	1afe0 <memset>
}
   12f0c:	2000      	movs	r0, #0
   12f0e:	b00c      	add	sp, #48	; 0x30
   12f10:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   12f12:	9200      	str	r2, [sp, #0]
   12f14:	e7e6      	b.n	12ee4 <bt_gatt_clear_sc+0x20>
   12f16:	bf00      	nop
   12f18:	00021126 	.word	0x00021126
   12f1c:	00020f48 	.word	0x00020f48

00012f20 <sc_clear>:
{
   12f20:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12f22:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   12f26:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12f28:	4631      	mov	r1, r6
   12f2a:	7a00      	ldrb	r0, [r0, #8]
   12f2c:	f008 f9f4 	bl	1b318 <bt_addr_le_is_bonded>
   12f30:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   12f32:	4631      	mov	r1, r6
   12f34:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12f36:	b14d      	cbz	r5, 12f4c <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   12f38:	f7ff ffc4 	bl	12ec4 <bt_gatt_clear_sc>
		if (err) {
   12f3c:	4602      	mov	r2, r0
   12f3e:	b170      	cbz	r0, 12f5e <sc_clear+0x3e>
}
   12f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   12f44:	2145      	movs	r1, #69	; 0x45
   12f46:	4806      	ldr	r0, [pc, #24]	; (12f60 <sc_clear+0x40>)
   12f48:	f006 bddf 	b.w	19b0a <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   12f4c:	f7ff fc02 	bl	12754 <find_sc_cfg>
		if (cfg) {
   12f50:	b128      	cbz	r0, 12f5e <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   12f52:	4629      	mov	r1, r5
}
   12f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   12f58:	220c      	movs	r2, #12
   12f5a:	f008 b841 	b.w	1afe0 <memset>
}
   12f5e:	bd70      	pop	{r4, r5, r6, pc}
   12f60:	00020f6a 	.word	0x00020f6a

00012f64 <disconnected_cb>:
{
   12f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f68:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12f6a:	4b26      	ldr	r3, [pc, #152]	; (13004 <disconnected_cb+0xa0>)
   12f6c:	6882      	ldr	r2, [r0, #8]
{
   12f6e:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12f70:	429a      	cmp	r2, r3
   12f72:	d130      	bne.n	12fd6 <disconnected_cb+0x72>
	ccc = attr->user_data;
   12f74:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   12f76:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   12f7a:	b363      	cbz	r3, 12fd6 <disconnected_cb+0x72>
	value_used = false;
   12f7c:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   12f80:	f8df b084 	ldr.w	fp, [pc, #132]	; 13008 <disconnected_cb+0xa4>
   12f84:	1c6c      	adds	r4, r5, #1
   12f86:	f105 0a65 	add.w	sl, r5, #101	; 0x65
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12f8a:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   12f8e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   12f92:	b19b      	cbz	r3, 12fbc <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12f94:	4622      	mov	r2, r4
   12f96:	4630      	mov	r0, r6
   12f98:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   12f9c:	f008 fa50 	bl	1b440 <bt_conn_is_peer_addr_le>
   12fa0:	b9e0      	cbnz	r0, 12fdc <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12fa2:	4621      	mov	r1, r4
   12fa4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   12fa8:	f7fd fde0 	bl	10b6c <bt_conn_lookup_addr_le>
			if (tmp) {
   12fac:	b130      	cbz	r0, 12fbc <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   12fae:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   12fb0:	2b07      	cmp	r3, #7
   12fb2:	bf08      	it	eq
   12fb4:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   12fb8:	f7fd fcb6 	bl	10928 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12fbc:	340a      	adds	r4, #10
   12fbe:	45a2      	cmp	sl, r4
   12fc0:	d1e5      	bne.n	12f8e <disconnected_cb+0x2a>
	if (!value_used) {
   12fc2:	f1b8 0f00 	cmp.w	r8, #0
   12fc6:	d106      	bne.n	12fd6 <disconnected_cb+0x72>
		if (ccc->cfg_changed) {
   12fc8:	6eab      	ldr	r3, [r5, #104]	; 0x68
		ccc->value = 0U;
   12fca:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
		if (ccc->cfg_changed) {
   12fce:	b113      	cbz	r3, 12fd6 <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   12fd0:	4641      	mov	r1, r8
   12fd2:	4638      	mov	r0, r7
   12fd4:	4798      	blx	r3
}
   12fd6:	2001      	movs	r0, #1
   12fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12fdc:	4649      	mov	r1, r9
   12fde:	7a30      	ldrb	r0, [r6, #8]
   12fe0:	f008 f99a 	bl	1b318 <bt_addr_le_is_bonded>
   12fe4:	b940      	cbnz	r0, 12ff8 <disconnected_cb+0x94>
				if (ccc == &sc_ccc) {
   12fe6:	455d      	cmp	r5, fp
   12fe8:	d102      	bne.n	12ff0 <disconnected_cb+0x8c>
					sc_clear(conn);
   12fea:	4630      	mov	r0, r6
   12fec:	f7ff ff98 	bl	12f20 <sc_clear>
				clear_ccc_cfg(cfg);
   12ff0:	1e60      	subs	r0, r4, #1
   12ff2:	f008 ffa3 	bl	1bf3c <clear_ccc_cfg>
   12ff6:	e7e1      	b.n	12fbc <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12ff8:	4649      	mov	r1, r9
   12ffa:	4620      	mov	r0, r4
   12ffc:	f008 ff9b 	bl	1bf36 <bt_addr_le_copy>
   13000:	e7dc      	b.n	12fbc <disconnected_cb+0x58>
   13002:	bf00      	nop
   13004:	00012809 	.word	0x00012809
   13008:	20008488 	.word	0x20008488

0001300c <sc_commit>:
{
   1300c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1300e:	490b      	ldr	r1, [pc, #44]	; (1303c <sc_commit+0x30>)
   13010:	e8d1 3fef 	ldaex	r3, [r1]
   13014:	f023 0302 	bic.w	r3, r3, #2
   13018:	e8c1 3fe2 	stlex	r2, r3, [r1]
   1301c:	2a00      	cmp	r2, #0
   1301e:	d1f7      	bne.n	13010 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13020:	4608      	mov	r0, r1
   13022:	f008 ffa4 	bl	1bf6e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13026:	07c3      	lsls	r3, r0, #31
   13028:	d506      	bpl.n	13038 <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1302a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1302e:	2300      	movs	r3, #0
   13030:	4803      	ldr	r0, [pc, #12]	; (13040 <sc_commit+0x34>)
   13032:	3930      	subs	r1, #48	; 0x30
   13034:	f005 fdf6 	bl	18c24 <k_delayed_work_submit_to_queue>
}
   13038:	2000      	movs	r0, #0
   1303a:	bd08      	pop	{r3, pc}
   1303c:	20009ad8 	.word	0x20009ad8
   13040:	2000a3b0 	.word	0x2000a3b0

00013044 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13048:	4688      	mov	r8, r1
   1304a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   1304c:	2112      	movs	r1, #18
   1304e:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13050:	4606      	mov	r6, r0
   13052:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13054:	f7fe ff18 	bl	11e88 <bt_att_create_pdu>
	if (!buf) {
   13058:	4604      	mov	r4, r0
   1305a:	b1c0      	cbz	r0, 1308e <gatt_write_ccc.constprop.0+0x4a>
   1305c:	f100 0908 	add.w	r9, r0, #8
   13060:	2102      	movs	r1, #2
   13062:	4648      	mov	r0, r9
   13064:	f001 fdf4 	bl	14c50 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   13068:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   1306a:	f8a0 8000 	strh.w	r8, [r0]
   1306e:	4648      	mov	r0, r9
   13070:	f009 faa0 	bl	1c5b4 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13074:	2104      	movs	r1, #4
   13076:	f105 0010 	add.w	r0, r5, #16
   1307a:	f008 ff6d 	bl	1bf58 <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   1307e:	462b      	mov	r3, r5
   13080:	4621      	mov	r1, r4
   13082:	4630      	mov	r0, r6
}
   13084:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   13088:	4a03      	ldr	r2, [pc, #12]	; (13098 <gatt_write_ccc.constprop.0+0x54>)
   1308a:	f7ff bd35 	b.w	12af8 <gatt_send.constprop.0>
}
   1308e:	f06f 000b 	mvn.w	r0, #11
   13092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13096:	bf00      	nop
   13098:	0001c01b 	.word	0x0001c01b

0001309c <sc_indicate_rsp>:
{
   1309c:	b510      	push	{r4, lr}
   1309e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   130a0:	4910      	ldr	r1, [pc, #64]	; (130e4 <sc_indicate_rsp+0x48>)
   130a2:	e8d1 3fef 	ldaex	r3, [r1]
   130a6:	f023 0302 	bic.w	r3, r3, #2
   130aa:	e8c1 3fe2 	stlex	r2, r3, [r1]
   130ae:	2a00      	cmp	r2, #0
   130b0:	d1f7      	bne.n	130a2 <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   130b2:	4608      	mov	r0, r1
   130b4:	f008 ff5b 	bl	1bf6e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   130b8:	07c2      	lsls	r2, r0, #31
   130ba:	d505      	bpl.n	130c8 <sc_indicate_rsp+0x2c>
   130bc:	2200      	movs	r2, #0
   130be:	2300      	movs	r3, #0
   130c0:	4809      	ldr	r0, [pc, #36]	; (130e8 <sc_indicate_rsp+0x4c>)
   130c2:	3930      	subs	r1, #48	; 0x30
   130c4:	f005 fdae 	bl	18c24 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   130c8:	4620      	mov	r0, r4
   130ca:	f7ff fb21 	bl	12710 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   130ce:	b140      	cbz	r0, 130e2 <sc_indicate_rsp+0x46>
   130d0:	7a03      	ldrb	r3, [r0, #8]
   130d2:	07db      	lsls	r3, r3, #31
   130d4:	d505      	bpl.n	130e2 <sc_indicate_rsp+0x46>
}
   130d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   130da:	2101      	movs	r1, #1
   130dc:	300c      	adds	r0, #12
   130de:	f008 bf3b 	b.w	1bf58 <atomic_or>
   130e2:	bd10      	pop	{r4, pc}
   130e4:	20009ad8 	.word	0x20009ad8
   130e8:	2000a3b0 	.word	0x2000a3b0

000130ec <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   130ec:	2201      	movs	r2, #1
{
   130ee:	b570      	push	{r4, r5, r6, lr}
   130f0:	4b26      	ldr	r3, [pc, #152]	; (1318c <bt_gatt_init+0xa0>)
   130f2:	e8d3 1fef 	ldaex	r1, [r3]
   130f6:	2900      	cmp	r1, #0
   130f8:	d103      	bne.n	13102 <bt_gatt_init+0x16>
   130fa:	e8c3 2fe0 	stlex	r0, r2, [r3]
   130fe:	2800      	cmp	r0, #0
   13100:	d1f7      	bne.n	130f2 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13102:	d142      	bne.n	1318a <bt_gatt_init+0x9e>
   13104:	4b22      	ldr	r3, [pc, #136]	; (13190 <bt_gatt_init+0xa4>)
   13106:	e8d3 1fef 	ldaex	r1, [r3]
   1310a:	2900      	cmp	r1, #0
   1310c:	d103      	bne.n	13116 <bt_gatt_init+0x2a>
   1310e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13112:	2800      	cmp	r0, #0
   13114:	d1f7      	bne.n	13106 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13116:	d034      	beq.n	13182 <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13118:	4c1e      	ldr	r4, [pc, #120]	; (13194 <bt_gatt_init+0xa8>)
   1311a:	2230      	movs	r2, #48	; 0x30
   1311c:	2100      	movs	r1, #0
   1311e:	4620      	mov	r0, r4
   13120:	f007 ff5e 	bl	1afe0 <memset>
   13124:	4b1c      	ldr	r3, [pc, #112]	; (13198 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13126:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13128:	6063      	str	r3, [r4, #4]
   1312a:	4c1c      	ldr	r4, [pc, #112]	; (1319c <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1312c:	2300      	movs	r3, #0
   1312e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13132:	481b      	ldr	r0, [pc, #108]	; (131a0 <bt_gatt_init+0xb4>)
   13134:	f005 fd76 	bl	18c24 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13138:	2100      	movs	r1, #0
   1313a:	f104 0020 	add.w	r0, r4, #32
   1313e:	2230      	movs	r2, #48	; 0x30
   13140:	f007 ff4e 	bl	1afe0 <memset>
   13144:	4b17      	ldr	r3, [pc, #92]	; (131a4 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13146:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1314a:	6263      	str	r3, [r4, #36]	; 0x24
   1314c:	2102      	movs	r1, #2
}
   1314e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13152:	f008 bf01 	b.w	1bf58 <atomic_or>
		last_static_handle += svc->attr_count;
   13156:	4a14      	ldr	r2, [pc, #80]	; (131a8 <bt_gatt_init+0xbc>)
   13158:	6863      	ldr	r3, [r4, #4]
   1315a:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1315c:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   1315e:	440b      	add	r3, r1
   13160:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13162:	42ac      	cmp	r4, r5
   13164:	d90a      	bls.n	1317c <bt_gatt_init+0x90>
   13166:	4631      	mov	r1, r6
   13168:	4810      	ldr	r0, [pc, #64]	; (131ac <bt_gatt_init+0xc0>)
   1316a:	f44f 6283 	mov.w	r2, #1048	; 0x418
   1316e:	f006 fccc 	bl	19b0a <printk>
   13172:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13176:	4630      	mov	r0, r6
   13178:	f006 ff6d 	bl	1a056 <assert_post_action>
   1317c:	42ac      	cmp	r4, r5
   1317e:	d3ea      	bcc.n	13156 <bt_gatt_init+0x6a>
   13180:	e7ca      	b.n	13118 <bt_gatt_init+0x2c>
   13182:	4c0b      	ldr	r4, [pc, #44]	; (131b0 <bt_gatt_init+0xc4>)
   13184:	4d0b      	ldr	r5, [pc, #44]	; (131b4 <bt_gatt_init+0xc8>)
   13186:	4e0c      	ldr	r6, [pc, #48]	; (131b8 <bt_gatt_init+0xcc>)
   13188:	e7eb      	b.n	13162 <bt_gatt_init+0x76>
}
   1318a:	bd70      	pop	{r4, r5, r6, pc}
   1318c:	2000aa84 	.word	0x2000aa84
   13190:	2000ab78 	.word	0x2000ab78
   13194:	20009a58 	.word	0x20009a58
   13198:	0001c313 	.word	0x0001c313
   1319c:	20009a88 	.word	0x20009a88
   131a0:	2000a3b0 	.word	0x2000a3b0
   131a4:	0001377d 	.word	0x0001377d
   131a8:	2000be74 	.word	0x2000be74
   131ac:	0001ecfc 	.word	0x0001ecfc
   131b0:	0001d7ec 	.word	0x0001d7ec
   131b4:	0001d81c 	.word	0x0001d81c
   131b8:	00020f85 	.word	0x00020f85

000131bc <bt_gatt_attr_get_handle>:
{
   131bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   131c0:	4604      	mov	r4, r0
   131c2:	b910      	cbnz	r0, 131ca <bt_gatt_attr_get_handle+0xe>
		return 0;
   131c4:	2000      	movs	r0, #0
}
   131c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   131ca:	8a00      	ldrh	r0, [r0, #16]
   131cc:	2800      	cmp	r0, #0
   131ce:	d1fa      	bne.n	131c6 <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   131d0:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   131d4:	4d17      	ldr	r5, [pc, #92]	; (13234 <bt_gatt_attr_get_handle+0x78>)
   131d6:	4e18      	ldr	r6, [pc, #96]	; (13238 <bt_gatt_attr_get_handle+0x7c>)
   131d8:	4f18      	ldr	r7, [pc, #96]	; (1323c <bt_gatt_attr_get_handle+0x80>)
   131da:	42b5      	cmp	r5, r6
   131dc:	d90a      	bls.n	131f4 <bt_gatt_attr_get_handle+0x38>
   131de:	4639      	mov	r1, r7
   131e0:	4817      	ldr	r0, [pc, #92]	; (13240 <bt_gatt_attr_get_handle+0x84>)
   131e2:	f240 522d 	movw	r2, #1325	; 0x52d
   131e6:	f006 fc90 	bl	19b0a <printk>
   131ea:	f240 512d 	movw	r1, #1325	; 0x52d
   131ee:	4638      	mov	r0, r7
   131f0:	f006 ff31 	bl	1a056 <assert_post_action>
   131f4:	42b5      	cmp	r5, r6
   131f6:	d2e5      	bcs.n	131c4 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   131f8:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   131fc:	4564      	cmp	r4, ip
   131fe:	d306      	bcc.n	1320e <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13200:	f04f 0e14 	mov.w	lr, #20
   13204:	fb0e c301 	mla	r3, lr, r1, ip
   13208:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1320a:	429c      	cmp	r4, r3
   1320c:	d910      	bls.n	13230 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   1320e:	eb08 0001 	add.w	r0, r8, r1
   13212:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13214:	4680      	mov	r8, r0
   13216:	3508      	adds	r5, #8
   13218:	e7df      	b.n	131da <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   1321a:	fb0e c302 	mla	r3, lr, r2, ip
   1321e:	429c      	cmp	r4, r3
   13220:	d0d1      	beq.n	131c6 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13222:	3201      	adds	r2, #1
   13224:	eb08 0302 	add.w	r3, r8, r2
   13228:	4291      	cmp	r1, r2
   1322a:	b298      	uxth	r0, r3
   1322c:	d1f5      	bne.n	1321a <bt_gatt_attr_get_handle+0x5e>
   1322e:	e7f1      	b.n	13214 <bt_gatt_attr_get_handle+0x58>
   13230:	2200      	movs	r2, #0
   13232:	e7f7      	b.n	13224 <bt_gatt_attr_get_handle+0x68>
   13234:	0001d7ec 	.word	0x0001d7ec
   13238:	0001d81c 	.word	0x0001d81c
   1323c:	00020f85 	.word	0x00020f85
   13240:	0001ecfc 	.word	0x0001ecfc

00013244 <bt_gatt_foreach_attr_type>:
{
   13244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13248:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1324a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1324e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13252:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13254:	2d00      	cmp	r5, #0
   13256:	bf08      	it	eq
   13258:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1325a:	4b2b      	ldr	r3, [pc, #172]	; (13308 <bt_gatt_foreach_attr_type+0xc4>)
{
   1325c:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1325e:	881b      	ldrh	r3, [r3, #0]
{
   13260:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13262:	4283      	cmp	r3, r0
   13264:	d24b      	bcs.n	132fe <bt_gatt_foreach_attr_type+0xba>
}
   13266:	b003      	add	sp, #12
   13268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1326c:	6873      	ldr	r3, [r6, #4]
   1326e:	4423      	add	r3, r4
   13270:	42bb      	cmp	r3, r7
   13272:	d241      	bcs.n	132f8 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13274:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13276:	3608      	adds	r6, #8
   13278:	4b24      	ldr	r3, [pc, #144]	; (1330c <bt_gatt_foreach_attr_type+0xc8>)
   1327a:	429e      	cmp	r6, r3
   1327c:	d90a      	bls.n	13294 <bt_gatt_foreach_attr_type+0x50>
   1327e:	4659      	mov	r1, fp
   13280:	4823      	ldr	r0, [pc, #140]	; (13310 <bt_gatt_foreach_attr_type+0xcc>)
   13282:	f240 52f1 	movw	r2, #1521	; 0x5f1
   13286:	f006 fc40 	bl	19b0a <printk>
   1328a:	f240 51f1 	movw	r1, #1521	; 0x5f1
   1328e:	4658      	mov	r0, fp
   13290:	f006 fee1 	bl	1a056 <assert_post_action>
   13294:	4b1d      	ldr	r3, [pc, #116]	; (1330c <bt_gatt_foreach_attr_type+0xc8>)
   13296:	429e      	cmp	r6, r3
   13298:	d3e8      	bcc.n	1326c <bt_gatt_foreach_attr_type+0x28>
   1329a:	e7e4      	b.n	13266 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1329c:	4640      	mov	r0, r8
   1329e:	5889      	ldr	r1, [r1, r2]
   132a0:	9301      	str	r3, [sp, #4]
   132a2:	f007 fee7 	bl	1b074 <bt_uuid_cmp>
   132a6:	9b01      	ldr	r3, [sp, #4]
   132a8:	b198      	cbz	r0, 132d2 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   132aa:	3401      	adds	r4, #1
   132ac:	f10a 0a01 	add.w	sl, sl, #1
   132b0:	b2a4      	uxth	r4, r4
   132b2:	6873      	ldr	r3, [r6, #4]
   132b4:	4553      	cmp	r3, sl
   132b6:	d9de      	bls.n	13276 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   132b8:	9b00      	ldr	r3, [sp, #0]
   132ba:	429c      	cmp	r4, r3
   132bc:	d8d3      	bhi.n	13266 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   132be:	42bc      	cmp	r4, r7
   132c0:	d3f3      	bcc.n	132aa <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   132c2:	2314      	movs	r3, #20
   132c4:	fb03 f20a 	mul.w	r2, r3, sl
   132c8:	6831      	ldr	r1, [r6, #0]
   132ca:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   132cc:	f1b8 0f00 	cmp.w	r8, #0
   132d0:	d1e4      	bne.n	1329c <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   132d2:	f1b9 0f00 	cmp.w	r9, #0
   132d6:	d10b      	bne.n	132f0 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   132d8:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   132da:	4618      	mov	r0, r3
	*num_matches -= 1;
   132dc:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   132de:	4621      	mov	r1, r4
   132e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   132e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132e4:	4798      	blx	r3
	if (!*num_matches) {
   132e6:	2d00      	cmp	r5, #0
   132e8:	d0bd      	beq.n	13266 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   132ea:	2800      	cmp	r0, #0
   132ec:	d1dd      	bne.n	132aa <bt_gatt_foreach_attr_type+0x66>
   132ee:	e7ba      	b.n	13266 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   132f0:	68da      	ldr	r2, [r3, #12]
   132f2:	4591      	cmp	r9, r2
   132f4:	d1d9      	bne.n	132aa <bt_gatt_foreach_attr_type+0x66>
   132f6:	e7ef      	b.n	132d8 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   132f8:	f04f 0a00 	mov.w	sl, #0
   132fc:	e7d9      	b.n	132b2 <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   132fe:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13300:	4e04      	ldr	r6, [pc, #16]	; (13314 <bt_gatt_foreach_attr_type+0xd0>)
   13302:	f8df b014 	ldr.w	fp, [pc, #20]	; 13318 <bt_gatt_foreach_attr_type+0xd4>
   13306:	e7b7      	b.n	13278 <bt_gatt_foreach_attr_type+0x34>
   13308:	2000be74 	.word	0x2000be74
   1330c:	0001d81c 	.word	0x0001d81c
   13310:	0001ecfc 	.word	0x0001ecfc
   13314:	0001d7ec 	.word	0x0001d7ec
   13318:	00020f85 	.word	0x00020f85

0001331c <db_hash_gen>:
	uint8_t key[16] = {};
   1331c:	2300      	movs	r3, #0
{
   1331e:	b530      	push	{r4, r5, lr}
   13320:	b0c9      	sub	sp, #292	; 0x124
   13322:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13324:	4669      	mov	r1, sp
   13326:	aa1c      	add	r2, sp, #112	; 0x70
   13328:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1332a:	e9cd 3300 	strd	r3, r3, [sp]
   1332e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13332:	f007 fa53 	bl	1a7dc <tc_cmac_setup>
   13336:	b928      	cbnz	r0, 13344 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   13338:	2145      	movs	r1, #69	; 0x45
   1333a:	4812      	ldr	r0, [pc, #72]	; (13384 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   1333c:	f006 fbe5 	bl	19b0a <printk>
}
   13340:	b049      	add	sp, #292	; 0x124
   13342:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13344:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13348:	2001      	movs	r0, #1
   1334a:	4a0f      	ldr	r2, [pc, #60]	; (13388 <db_hash_gen+0x6c>)
   1334c:	ab04      	add	r3, sp, #16
   1334e:	f008 ffd5 	bl	1c2fc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13352:	480e      	ldr	r0, [pc, #56]	; (1338c <db_hash_gen+0x70>)
   13354:	a904      	add	r1, sp, #16
   13356:	f007 fad7 	bl	1a908 <tc_cmac_final>
   1335a:	b910      	cbnz	r0, 13362 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   1335c:	2145      	movs	r1, #69	; 0x45
   1335e:	480c      	ldr	r0, [pc, #48]	; (13390 <db_hash_gen+0x74>)
   13360:	e7ec      	b.n	1333c <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13362:	2208      	movs	r2, #8
   13364:	4b09      	ldr	r3, [pc, #36]	; (1338c <db_hash_gen+0x70>)
   13366:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1336a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1336c:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   13370:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13372:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   13376:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   13378:	d1f7      	bne.n	1336a <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1337a:	2c00      	cmp	r4, #0
   1337c:	d0e0      	beq.n	13340 <db_hash_gen+0x24>
		db_hash_store();
   1337e:	f7ff f9b1 	bl	126e4 <db_hash_store>
   13382:	e7dd      	b.n	13340 <db_hash_gen+0x24>
   13384:	00020fb5 	.word	0x00020fb5
   13388:	0001be13 	.word	0x0001be13
   1338c:	2000c5f9 	.word	0x2000c5f9
   13390:	00020fd3 	.word	0x00020fd3

00013394 <db_hash_commit>:
{
   13394:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   13396:	4821      	ldr	r0, [pc, #132]	; (1341c <db_hash_commit+0x88>)
   13398:	f005 fcb4 	bl	18d04 <k_delayed_work_cancel>
	if (!err) {
   1339c:	b908      	cbnz	r0, 133a2 <db_hash_commit+0xe>
		db_hash_gen(false);
   1339e:	f7ff ffbd 	bl	1331c <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   133a2:	2210      	movs	r2, #16
   133a4:	491e      	ldr	r1, [pc, #120]	; (13420 <db_hash_commit+0x8c>)
   133a6:	481f      	ldr	r0, [pc, #124]	; (13424 <db_hash_commit+0x90>)
   133a8:	f007 fdde 	bl	1af68 <memcmp>
   133ac:	b968      	cbnz	r0, 133ca <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   133ae:	481e      	ldr	r0, [pc, #120]	; (13428 <db_hash_commit+0x94>)
   133b0:	f005 fca8 	bl	18d04 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133b4:	4b1d      	ldr	r3, [pc, #116]	; (1342c <db_hash_commit+0x98>)
   133b6:	e8d3 2fef 	ldaex	r2, [r3]
   133ba:	f022 0201 	bic.w	r2, r2, #1
   133be:	e8c3 2fe1 	stlex	r1, r2, [r3]
   133c2:	2900      	cmp	r1, #0
   133c4:	d1f7      	bne.n	133b6 <db_hash_commit+0x22>
}
   133c6:	2000      	movs	r0, #0
   133c8:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   133ca:	4c19      	ldr	r4, [pc, #100]	; (13430 <db_hash_commit+0x9c>)
   133cc:	2101      	movs	r1, #1
   133ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
   133d2:	f008 fdc1 	bl	1bf58 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   133d6:	07c2      	lsls	r2, r0, #31
   133d8:	d410      	bmi.n	133fc <db_hash_commit+0x68>
		gatt_sc.start = start;
   133da:	4b16      	ldr	r3, [pc, #88]	; (13434 <db_hash_commit+0xa0>)
   133dc:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   133de:	4813      	ldr	r0, [pc, #76]	; (1342c <db_hash_commit+0x98>)
   133e0:	f008 fdc5 	bl	1bf6e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   133e4:	0783      	lsls	r3, r0, #30
   133e6:	d406      	bmi.n	133f6 <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   133e8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   133ec:	2300      	movs	r3, #0
   133ee:	490e      	ldr	r1, [pc, #56]	; (13428 <db_hash_commit+0x94>)
   133f0:	4811      	ldr	r0, [pc, #68]	; (13438 <db_hash_commit+0xa4>)
   133f2:	f005 fc17 	bl	18c24 <k_delayed_work_submit_to_queue>
	db_hash_store();
   133f6:	f7ff f975 	bl	126e4 <db_hash_store>
	return 0;
   133fa:	e7e4      	b.n	133c6 <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   133fc:	8b23      	ldrh	r3, [r4, #24]
   133fe:	8b62      	ldrh	r2, [r4, #26]
   13400:	2b01      	cmp	r3, #1
   13402:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13406:	d805      	bhi.n	13414 <db_hash_commit+0x80>
   13408:	429a      	cmp	r2, r3
   1340a:	d0f4      	beq.n	133f6 <db_hash_commit+0x62>
		*end = new_end;
   1340c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13410:	8363      	strh	r3, [r4, #26]
   13412:	e7e4      	b.n	133de <db_hash_commit+0x4a>
	if (*end < new_end) {
   13414:	429a      	cmp	r2, r3
		*start = new_start;
   13416:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   13418:	d0e1      	beq.n	133de <db_hash_commit+0x4a>
   1341a:	e7f7      	b.n	1340c <db_hash_commit+0x78>
   1341c:	20009a58 	.word	0x20009a58
   13420:	2000c5f9 	.word	0x2000c5f9
   13424:	2000c609 	.word	0x2000c609
   13428:	20009aa8 	.word	0x20009aa8
   1342c:	20009ad8 	.word	0x20009ad8
   13430:	20009a88 	.word	0x20009a88
   13434:	ffff0001 	.word	0xffff0001
   13438:	2000a3b0 	.word	0x2000a3b0

0001343c <ccc_set_direct>:
{
   1343c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13440:	b0b9      	sub	sp, #228	; 0xe4
   13442:	4688      	mov	r8, r1
   13444:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13446:	492c      	ldr	r1, [pc, #176]	; (134f8 <ccc_set_direct+0xbc>)
   13448:	466a      	mov	r2, sp
   1344a:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   1344c:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1344e:	f006 fe58 	bl	1a102 <settings_name_steq>
   13452:	b948      	cbnz	r0, 13468 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   13454:	2145      	movs	r1, #69	; 0x45
   13456:	4829      	ldr	r0, [pc, #164]	; (134fc <ccc_set_direct+0xc0>)
   13458:	f006 fb57 	bl	19b0a <printk>
   1345c:	f06f 0515 	mvn.w	r5, #21
}
   13460:	4628      	mov	r0, r5
   13462:	b039      	add	sp, #228	; 0xe4
   13464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   13468:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   1346a:	a901      	add	r1, sp, #4
   1346c:	4620      	mov	r0, r4
   1346e:	f006 fe6b 	bl	1a148 <settings_name_next>
		if (!name) {
   13472:	b93c      	cbnz	r4, 13484 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   13474:	2145      	movs	r1, #69	; 0x45
   13476:	4822      	ldr	r0, [pc, #136]	; (13500 <ccc_set_direct+0xc4>)
   13478:	f006 fb47 	bl	19b0a <printk>
			return -EINVAL;
   1347c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   13480:	4625      	mov	r5, r4
   13482:	e7ed      	b.n	13460 <ccc_set_direct+0x24>
		} else if (!next) {
   13484:	9801      	ldr	r0, [sp, #4]
   13486:	b978      	cbnz	r0, 134a8 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   13488:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   1348c:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   13490:	4649      	mov	r1, r9
   13492:	4620      	mov	r0, r4
   13494:	f007 fdca 	bl	1b02c <bt_settings_decode_key>
		if (err) {
   13498:	4605      	mov	r5, r0
   1349a:	b150      	cbz	r0, 134b2 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   1349c:	4622      	mov	r2, r4
   1349e:	2145      	movs	r1, #69	; 0x45
   134a0:	4818      	ldr	r0, [pc, #96]	; (13504 <ccc_set_direct+0xc8>)
   134a2:	f006 fb32 	bl	19b0a <printk>
   134a6:	e7e9      	b.n	1347c <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   134a8:	220a      	movs	r2, #10
   134aa:	2100      	movs	r1, #0
   134ac:	f007 fc9f 	bl	1adee <strtol>
   134b0:	e7ea      	b.n	13488 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   134b2:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   134b6:	f1b8 0f00 	cmp.w	r8, #0
   134ba:	d019      	beq.n	134f0 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   134bc:	f10d 0820 	add.w	r8, sp, #32
   134c0:	22c0      	movs	r2, #192	; 0xc0
   134c2:	4641      	mov	r1, r8
   134c4:	4638      	mov	r0, r7
   134c6:	47b0      	blx	r6
			if (len < 0) {
   134c8:	1e04      	subs	r4, r0, #0
   134ca:	da05      	bge.n	134d8 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   134cc:	4622      	mov	r2, r4
   134ce:	2145      	movs	r1, #69	; 0x45
   134d0:	480d      	ldr	r0, [pc, #52]	; (13508 <ccc_set_direct+0xcc>)
   134d2:	f006 fb1a 	bl	19b0a <printk>
				return len;
   134d6:	e7d3      	b.n	13480 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   134d8:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   134da:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   134de:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   134e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   134e4:	2001      	movs	r0, #1
   134e6:	4a09      	ldr	r2, [pc, #36]	; (1350c <ccc_set_direct+0xd0>)
   134e8:	ab04      	add	r3, sp, #16
   134ea:	f008 ff07 	bl	1c2fc <bt_gatt_foreach_attr>
	return 0;
   134ee:	e7b7      	b.n	13460 <ccc_set_direct+0x24>
			load.count = 0;
   134f0:	e9cd 0006 	strd	r0, r0, [sp, #24]
   134f4:	e7f4      	b.n	134e0 <ccc_set_direct+0xa4>
   134f6:	bf00      	nop
   134f8:	00020ff1 	.word	0x00020ff1
   134fc:	00020ff8 	.word	0x00020ff8
   13500:	0001fd69 	.word	0x0001fd69
   13504:	00020e60 	.word	0x00020e60
   13508:	00020d72 	.word	0x00020d72
   1350c:	00012c41 	.word	0x00012c41

00013510 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   13510:	2300      	movs	r3, #0
{
   13512:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   13514:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   13516:	f7ff fe51 	bl	131bc <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1351a:	1c41      	adds	r1, r0, #1
   1351c:	b289      	uxth	r1, r1
   1351e:	4608      	mov	r0, r1
   13520:	4a03      	ldr	r2, [pc, #12]	; (13530 <bt_gatt_attr_next+0x20>)
   13522:	ab01      	add	r3, sp, #4
   13524:	f008 feea 	bl	1c2fc <bt_gatt_foreach_attr>
}
   13528:	9801      	ldr	r0, [sp, #4]
   1352a:	b003      	add	sp, #12
   1352c:	f85d fb04 	ldr.w	pc, [sp], #4
   13530:	0001bdab 	.word	0x0001bdab

00013534 <bt_gatt_notify_cb>:
{
   13534:	b530      	push	{r4, r5, lr}
   13536:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   13538:	460d      	mov	r5, r1
{
   1353a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1353c:	b951      	cbnz	r1, 13554 <bt_gatt_notify_cb+0x20>
   1353e:	4940      	ldr	r1, [pc, #256]	; (13640 <bt_gatt_notify_cb+0x10c>)
   13540:	4840      	ldr	r0, [pc, #256]	; (13644 <bt_gatt_notify_cb+0x110>)
   13542:	f640 023d 	movw	r2, #2109	; 0x83d
   13546:	f006 fae0 	bl	19b0a <printk>
   1354a:	f640 013d 	movw	r1, #2109	; 0x83d
   1354e:	483c      	ldr	r0, [pc, #240]	; (13640 <bt_gatt_notify_cb+0x10c>)
   13550:	f006 fd81 	bl	1a056 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   13554:	686b      	ldr	r3, [r5, #4]
   13556:	b953      	cbnz	r3, 1356e <bt_gatt_notify_cb+0x3a>
   13558:	4939      	ldr	r1, [pc, #228]	; (13640 <bt_gatt_notify_cb+0x10c>)
   1355a:	483a      	ldr	r0, [pc, #232]	; (13644 <bt_gatt_notify_cb+0x110>)
   1355c:	f640 023e 	movw	r2, #2110	; 0x83e
   13560:	f006 fad3 	bl	19b0a <printk>
   13564:	f640 013e 	movw	r1, #2110	; 0x83e
   13568:	4835      	ldr	r0, [pc, #212]	; (13640 <bt_gatt_notify_cb+0x10c>)
   1356a:	f006 fd74 	bl	1a056 <assert_post_action>
   1356e:	4836      	ldr	r0, [pc, #216]	; (13648 <bt_gatt_notify_cb+0x114>)
   13570:	f008 fcfd 	bl	1bf6e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13574:	0782      	lsls	r2, r0, #30
   13576:	d55d      	bpl.n	13634 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   13578:	6868      	ldr	r0, [r5, #4]
   1357a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1357c:	b114      	cbz	r4, 13584 <bt_gatt_notify_cb+0x50>
   1357e:	7aa3      	ldrb	r3, [r4, #10]
   13580:	2b07      	cmp	r3, #7
   13582:	d15a      	bne.n	1363a <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13584:	f7ff fe1a 	bl	131bc <bt_gatt_attr_get_handle>
   13588:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1358c:	b918      	cbnz	r0, 13596 <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   1358e:	f06f 0001 	mvn.w	r0, #1
}
   13592:	b00b      	add	sp, #44	; 0x2c
   13594:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   13596:	682a      	ldr	r2, [r5, #0]
   13598:	b9aa      	cbnz	r2, 135c6 <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1359a:	9b05      	ldr	r3, [sp, #20]
   1359c:	a904      	add	r1, sp, #16
   1359e:	6818      	ldr	r0, [r3, #0]
   135a0:	2300      	movs	r3, #0
   135a2:	f88d 3010 	strb.w	r3, [sp, #16]
   135a6:	f642 0303 	movw	r3, #10243	; 0x2803
   135aa:	f8ad 3012 	strh.w	r3, [sp, #18]
   135ae:	f007 fd61 	bl	1b074 <bt_uuid_cmp>
   135b2:	b1c0      	cbz	r0, 135e6 <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   135b4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   135b8:	b314      	cbz	r4, 13600 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   135ba:	4601      	mov	r1, r0
   135bc:	462a      	mov	r2, r5
   135be:	4620      	mov	r0, r4
   135c0:	f7ff fbd6 	bl	12d70 <gatt_notify>
   135c4:	e7e5      	b.n	13592 <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   135c6:	a905      	add	r1, sp, #20
   135c8:	9102      	str	r1, [sp, #8]
   135ca:	4920      	ldr	r1, [pc, #128]	; (1364c <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   135cc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   135ce:	9101      	str	r1, [sp, #4]
   135d0:	2101      	movs	r1, #1
   135d2:	9100      	str	r1, [sp, #0]
   135d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   135d8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   135da:	f7ff fe33 	bl	13244 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   135de:	9b05      	ldr	r3, [sp, #20]
   135e0:	2b00      	cmp	r3, #0
   135e2:	d1da      	bne.n	1359a <bt_gatt_notify_cb+0x66>
   135e4:	e7d3      	b.n	1358e <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   135e6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   135e8:	68c3      	ldr	r3, [r0, #12]
   135ea:	799b      	ldrb	r3, [r3, #6]
   135ec:	06db      	lsls	r3, r3, #27
   135ee:	d402      	bmi.n	135f6 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   135f0:	f06f 0015 	mvn.w	r0, #21
   135f4:	e7cd      	b.n	13592 <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   135f6:	f008 fe33 	bl	1c260 <bt_gatt_attr_value_handle>
   135fa:	f8ad 0018 	strh.w	r0, [sp, #24]
   135fe:	e7d9      	b.n	135b4 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   13600:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13604:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   13608:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1360a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1360c:	f8ad 2012 	strh.w	r2, [sp, #18]
   13610:	aa05      	add	r2, sp, #20
   13612:	9202      	str	r2, [sp, #8]
   13614:	4a0e      	ldr	r2, [pc, #56]	; (13650 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   13616:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1361a:	e9cd 3200 	strd	r3, r2, [sp]
   1361e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13622:	4623      	mov	r3, r4
   13624:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   13626:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13628:	f88d 4010 	strb.w	r4, [sp, #16]
   1362c:	f7ff fe0a 	bl	13244 <bt_gatt_foreach_attr_type>
	return data.err;
   13630:	9807      	ldr	r0, [sp, #28]
   13632:	e7ae      	b.n	13592 <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   13634:	f06f 000a 	mvn.w	r0, #10
   13638:	e7ab      	b.n	13592 <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   1363a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1363e:	e7a8      	b.n	13592 <bt_gatt_notify_cb+0x5e>
   13640:	00020f85 	.word	0x00020f85
   13644:	0001ecfc 	.word	0x0001ecfc
   13648:	20008094 	.word	0x20008094
   1364c:	0001be07 	.word	0x0001be07
   13650:	00012dd1 	.word	0x00012dd1

00013654 <bt_gatt_indicate>:
{
   13654:	b530      	push	{r4, r5, lr}
   13656:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   13658:	460c      	mov	r4, r1
{
   1365a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1365c:	b951      	cbnz	r1, 13674 <bt_gatt_indicate+0x20>
   1365e:	4942      	ldr	r1, [pc, #264]	; (13768 <bt_gatt_indicate+0x114>)
   13660:	4842      	ldr	r0, [pc, #264]	; (1376c <bt_gatt_indicate+0x118>)
   13662:	f640 0289 	movw	r2, #2185	; 0x889
   13666:	f006 fa50 	bl	19b0a <printk>
   1366a:	f640 0189 	movw	r1, #2185	; 0x889
   1366e:	483e      	ldr	r0, [pc, #248]	; (13768 <bt_gatt_indicate+0x114>)
   13670:	f006 fcf1 	bl	1a056 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   13674:	6863      	ldr	r3, [r4, #4]
   13676:	b953      	cbnz	r3, 1368e <bt_gatt_indicate+0x3a>
   13678:	493b      	ldr	r1, [pc, #236]	; (13768 <bt_gatt_indicate+0x114>)
   1367a:	483c      	ldr	r0, [pc, #240]	; (1376c <bt_gatt_indicate+0x118>)
   1367c:	f640 028a 	movw	r2, #2186	; 0x88a
   13680:	f006 fa43 	bl	19b0a <printk>
   13684:	f640 018a 	movw	r1, #2186	; 0x88a
   13688:	4837      	ldr	r0, [pc, #220]	; (13768 <bt_gatt_indicate+0x114>)
   1368a:	f006 fce4 	bl	1a056 <assert_post_action>
   1368e:	4838      	ldr	r0, [pc, #224]	; (13770 <bt_gatt_indicate+0x11c>)
   13690:	f008 fc6d 	bl	1bf6e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13694:	0782      	lsls	r2, r0, #30
   13696:	d561      	bpl.n	1375c <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   13698:	6860      	ldr	r0, [r4, #4]
   1369a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1369c:	b115      	cbz	r5, 136a4 <bt_gatt_indicate+0x50>
   1369e:	7aab      	ldrb	r3, [r5, #10]
   136a0:	2b07      	cmp	r3, #7
   136a2:	d15e      	bne.n	13762 <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   136a4:	f7ff fd8a 	bl	131bc <bt_gatt_attr_get_handle>
   136a8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   136ac:	b918      	cbnz	r0, 136b6 <bt_gatt_indicate+0x62>
		return -ENOENT;
   136ae:	f06f 0001 	mvn.w	r0, #1
}
   136b2:	b00b      	add	sp, #44	; 0x2c
   136b4:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   136b6:	6822      	ldr	r2, [r4, #0]
   136b8:	b9ba      	cbnz	r2, 136ea <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   136ba:	9b05      	ldr	r3, [sp, #20]
   136bc:	a904      	add	r1, sp, #16
   136be:	6818      	ldr	r0, [r3, #0]
   136c0:	2300      	movs	r3, #0
   136c2:	f88d 3010 	strb.w	r3, [sp, #16]
   136c6:	f642 0303 	movw	r3, #10243	; 0x2803
   136ca:	f8ad 3012 	strh.w	r3, [sp, #18]
   136ce:	f007 fcd1 	bl	1b074 <bt_uuid_cmp>
   136d2:	b1d0      	cbz	r0, 1370a <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   136d4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   136d8:	b325      	cbz	r5, 13724 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   136da:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   136dc:	4601      	mov	r1, r0
   136de:	4622      	mov	r2, r4
   136e0:	4628      	mov	r0, r5
		params->_ref = 1;
   136e2:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   136e4:	f7ff fb0e 	bl	12d04 <gatt_indicate>
   136e8:	e7e3      	b.n	136b2 <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   136ea:	a905      	add	r1, sp, #20
   136ec:	9102      	str	r1, [sp, #8]
   136ee:	4921      	ldr	r1, [pc, #132]	; (13774 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   136f0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   136f2:	9101      	str	r1, [sp, #4]
   136f4:	2101      	movs	r1, #1
   136f6:	9100      	str	r1, [sp, #0]
   136f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   136fc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   136fe:	f7ff fda1 	bl	13244 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13702:	9b05      	ldr	r3, [sp, #20]
   13704:	2b00      	cmp	r3, #0
   13706:	d1d8      	bne.n	136ba <bt_gatt_indicate+0x66>
   13708:	e7d1      	b.n	136ae <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1370a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1370c:	68c3      	ldr	r3, [r0, #12]
   1370e:	799b      	ldrb	r3, [r3, #6]
   13710:	069b      	lsls	r3, r3, #26
   13712:	d402      	bmi.n	1371a <bt_gatt_indicate+0xc6>
			return -EINVAL;
   13714:	f06f 0015 	mvn.w	r0, #21
   13718:	e7cb      	b.n	136b2 <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1371a:	f008 fda1 	bl	1c260 <bt_gatt_attr_value_handle>
   1371e:	f8ad 0018 	strh.w	r0, [sp, #24]
   13722:	e7d7      	b.n	136d4 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   13724:	f06f 0338 	mvn.w	r3, #56	; 0x38
   13728:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1372a:	2302      	movs	r3, #2
   1372c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13730:	f642 1302 	movw	r3, #10498	; 0x2902
   13734:	f8ad 3012 	strh.w	r3, [sp, #18]
   13738:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1373a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1373c:	9302      	str	r3, [sp, #8]
   1373e:	4b0e      	ldr	r3, [pc, #56]	; (13778 <bt_gatt_indicate+0x124>)
   13740:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13744:	9301      	str	r3, [sp, #4]
   13746:	2301      	movs	r3, #1
   13748:	aa04      	add	r2, sp, #16
   1374a:	9300      	str	r3, [sp, #0]
   1374c:	462b      	mov	r3, r5
	data.ind_params = params;
   1374e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13750:	f88d 5010 	strb.w	r5, [sp, #16]
   13754:	f7ff fd76 	bl	13244 <bt_gatt_foreach_attr_type>
	return data.err;
   13758:	9807      	ldr	r0, [sp, #28]
   1375a:	e7aa      	b.n	136b2 <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   1375c:	f06f 000a 	mvn.w	r0, #10
   13760:	e7a7      	b.n	136b2 <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   13762:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13766:	e7a4      	b.n	136b2 <bt_gatt_indicate+0x5e>
   13768:	00020f85 	.word	0x00020f85
   1376c:	0001ecfc 	.word	0x0001ecfc
   13770:	20008094 	.word	0x20008094
   13774:	0001be07 	.word	0x0001be07
   13778:	00012dd1 	.word	0x00012dd1

0001377c <sc_process>:
{
   1377c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1377e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   13782:	4604      	mov	r4, r0
   13784:	4628      	mov	r0, r5
   13786:	f008 fbf2 	bl	1bf6e <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1378a:	0783      	lsls	r3, r0, #30
   1378c:	d50a      	bpl.n	137a4 <sc_process+0x28>
   1378e:	491b      	ldr	r1, [pc, #108]	; (137fc <sc_process+0x80>)
   13790:	481b      	ldr	r0, [pc, #108]	; (13800 <sc_process+0x84>)
   13792:	f240 32ae 	movw	r2, #942	; 0x3ae
   13796:	f006 f9b8 	bl	19b0a <printk>
   1379a:	f240 31ae 	movw	r1, #942	; 0x3ae
   1379e:	4817      	ldr	r0, [pc, #92]	; (137fc <sc_process+0x80>)
   137a0:	f006 fc59 	bl	1a056 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   137a4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   137a8:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   137ac:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   137b0:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   137b4:	e8d5 3fef 	ldaex	r3, [r5]
   137b8:	f023 0301 	bic.w	r3, r3, #1
   137bc:	e8c5 3fe2 	stlex	r2, r3, [r5]
   137c0:	2a00      	cmp	r2, #0
   137c2:	d1f7      	bne.n	137b4 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   137c4:	4b0f      	ldr	r3, [pc, #60]	; (13804 <sc_process+0x88>)
	sc->start = 0U;
   137c6:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   137c8:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   137cc:	4b0e      	ldr	r3, [pc, #56]	; (13808 <sc_process+0x8c>)
	sc->start = 0U;
   137ce:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   137d2:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   137d6:	ab01      	add	r3, sp, #4
   137d8:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   137dc:	2304      	movs	r3, #4
	sc->end = 0U;
   137de:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   137e2:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   137e6:	f1a4 0120 	sub.w	r1, r4, #32
   137ea:	f7ff ff33 	bl	13654 <bt_gatt_indicate>
   137ee:	b918      	cbnz	r0, 137f8 <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   137f0:	2102      	movs	r1, #2
   137f2:	4628      	mov	r0, r5
   137f4:	f008 fbb0 	bl	1bf58 <atomic_or>
}
   137f8:	b003      	add	sp, #12
   137fa:	bd30      	pop	{r4, r5, pc}
   137fc:	00020f85 	.word	0x00020f85
   13800:	0001ecfc 	.word	0x0001ecfc
   13804:	0001e018 	.word	0x0001e018
   13808:	0001309d 	.word	0x0001309d

0001380c <update_ccc>:
{
   1380c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13810:	4b32      	ldr	r3, [pc, #200]	; (138dc <update_ccc+0xd0>)
   13812:	6881      	ldr	r1, [r0, #8]
{
   13814:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13816:	4299      	cmp	r1, r3
   13818:	d15c      	bne.n	138d4 <update_ccc+0xc8>
	ccc = attr->user_data;
   1381a:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   1381c:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   1381e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 138e0 <update_ccc+0xd4>
   13822:	1c7d      	adds	r5, r7, #1
   13824:	f107 0865 	add.w	r8, r7, #101	; 0x65
		if (!cfg->value ||
   13828:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1382c:	b193      	cbz	r3, 13854 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1382e:	462a      	mov	r2, r5
   13830:	4630      	mov	r0, r6
   13832:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   13836:	f007 fe03 	bl	1b440 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1383a:	b158      	cbz	r0, 13854 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1383c:	222a      	movs	r2, #42	; 0x2a
   1383e:	4621      	mov	r1, r4
   13840:	4630      	mov	r0, r6
   13842:	f008 fd69 	bl	1c318 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   13846:	2803      	cmp	r0, #3
   13848:	d108      	bne.n	1385c <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   1384a:	4622      	mov	r2, r4
   1384c:	2157      	movs	r1, #87	; 0x57
   1384e:	4648      	mov	r0, r9
   13850:	f006 f95b 	bl	19b0a <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13854:	350a      	adds	r5, #10
   13856:	4545      	cmp	r5, r8
   13858:	d1e6      	bne.n	13828 <update_ccc+0x1c>
   1385a:	e03b      	b.n	138d4 <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   1385c:	4639      	mov	r1, r7
   1385e:	4620      	mov	r0, r4
   13860:	f008 faa6 	bl	1bdb0 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   13864:	4b1f      	ldr	r3, [pc, #124]	; (138e4 <update_ccc+0xd8>)
   13866:	429f      	cmp	r7, r3
   13868:	d134      	bne.n	138d4 <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1386a:	7a30      	ldrb	r0, [r6, #8]
   1386c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   13870:	f7fe ff70 	bl	12754 <find_sc_cfg>
	if (!cfg) {
   13874:	4604      	mov	r4, r0
   13876:	b368      	cbz	r0, 138d4 <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   13878:	8902      	ldrh	r2, [r0, #8]
   1387a:	8943      	ldrh	r3, [r0, #10]
   1387c:	ea52 0103 	orrs.w	r1, r2, r3
   13880:	d028      	beq.n	138d4 <update_ccc+0xc8>
	index = bt_conn_index(conn);
   13882:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   13884:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   13888:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1388c:	f7fd fca4 	bl	111d8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   13890:	2318      	movs	r3, #24
   13892:	4915      	ldr	r1, [pc, #84]	; (138e8 <update_ccc+0xdc>)
   13894:	4a15      	ldr	r2, [pc, #84]	; (138ec <update_ccc+0xe0>)
   13896:	fb03 1300 	mla	r3, r3, r0, r1
   1389a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1389c:	4a14      	ldr	r2, [pc, #80]	; (138f0 <update_ccc+0xe4>)
   1389e:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   138a0:	aa01      	add	r2, sp, #4
   138a2:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   138a4:	2204      	movs	r2, #4
   138a6:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   138a8:	b203      	sxth	r3, r0
   138aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   138ae:	4630      	mov	r0, r6
   138b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   138b4:	f7ff fece 	bl	13654 <bt_gatt_indicate>
   138b8:	b118      	cbz	r0, 138c2 <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   138ba:	2145      	movs	r1, #69	; 0x45
   138bc:	480d      	ldr	r0, [pc, #52]	; (138f4 <update_ccc+0xe8>)
   138be:	f006 f924 	bl	19b0a <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   138c2:	2204      	movs	r2, #4
   138c4:	2100      	movs	r1, #0
   138c6:	f104 0008 	add.w	r0, r4, #8
   138ca:	f007 fb89 	bl	1afe0 <memset>
		sc_store(cfg);
   138ce:	4620      	mov	r0, r4
   138d0:	f7ff f84a 	bl	12968 <sc_store>
}
   138d4:	2001      	movs	r0, #1
   138d6:	b003      	add	sp, #12
   138d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   138dc:	00012809 	.word	0x00012809
   138e0:	00021009 	.word	0x00021009
   138e4:	20008488 	.word	0x20008488
   138e8:	2000aa88 	.word	0x2000aa88
   138ec:	0001e018 	.word	0x0001e018
   138f0:	0001c217 	.word	0x0001c217
   138f4:	00021022 	.word	0x00021022

000138f8 <bt_gatt_is_subscribed>:
{
   138f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   138fa:	460c      	mov	r4, r1
   138fc:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   138fe:	4606      	mov	r6, r0
   13900:	b950      	cbnz	r0, 13918 <bt_gatt_is_subscribed+0x20>
   13902:	4930      	ldr	r1, [pc, #192]	; (139c4 <bt_gatt_is_subscribed+0xcc>)
   13904:	4830      	ldr	r0, [pc, #192]	; (139c8 <bt_gatt_is_subscribed+0xd0>)
   13906:	f640 12b5 	movw	r2, #2485	; 0x9b5
   1390a:	f006 f8fe 	bl	19b0a <printk>
   1390e:	f640 11b5 	movw	r1, #2485	; 0x9b5
   13912:	482c      	ldr	r0, [pc, #176]	; (139c4 <bt_gatt_is_subscribed+0xcc>)
   13914:	f006 fb9f 	bl	1a056 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   13918:	b954      	cbnz	r4, 13930 <bt_gatt_is_subscribed+0x38>
   1391a:	492a      	ldr	r1, [pc, #168]	; (139c4 <bt_gatt_is_subscribed+0xcc>)
   1391c:	482a      	ldr	r0, [pc, #168]	; (139c8 <bt_gatt_is_subscribed+0xd0>)
   1391e:	f640 12b6 	movw	r2, #2486	; 0x9b6
   13922:	f006 f8f2 	bl	19b0a <printk>
   13926:	f640 11b6 	movw	r1, #2486	; 0x9b6
   1392a:	4826      	ldr	r0, [pc, #152]	; (139c4 <bt_gatt_is_subscribed+0xcc>)
   1392c:	f006 fb93 	bl	1a056 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13930:	7ab3      	ldrb	r3, [r6, #10]
   13932:	2b07      	cmp	r3, #7
   13934:	d130      	bne.n	13998 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   13936:	2300      	movs	r3, #0
   13938:	f88d 3004 	strb.w	r3, [sp, #4]
   1393c:	f642 0303 	movw	r3, #10243	; 0x2803
   13940:	6820      	ldr	r0, [r4, #0]
   13942:	a901      	add	r1, sp, #4
   13944:	f8ad 3006 	strh.w	r3, [sp, #6]
   13948:	f007 fb94 	bl	1b074 <bt_uuid_cmp>
   1394c:	b940      	cbnz	r0, 13960 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   1394e:	68e3      	ldr	r3, [r4, #12]
   13950:	799b      	ldrb	r3, [r3, #6]
   13952:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   13956:	d020      	beq.n	1399a <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   13958:	4620      	mov	r0, r4
   1395a:	f7ff fdd9 	bl	13510 <bt_gatt_attr_next>
   1395e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   13960:	2300      	movs	r3, #0
   13962:	6820      	ldr	r0, [r4, #0]
   13964:	f88d 3004 	strb.w	r3, [sp, #4]
   13968:	f642 1302 	movw	r3, #10498	; 0x2902
   1396c:	a901      	add	r1, sp, #4
   1396e:	f8ad 3006 	strh.w	r3, [sp, #6]
   13972:	f007 fb7f 	bl	1b074 <bt_uuid_cmp>
   13976:	b118      	cbz	r0, 13980 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   13978:	4620      	mov	r0, r4
   1397a:	f7ff fdc9 	bl	13510 <bt_gatt_attr_next>
   1397e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   13980:	2500      	movs	r5, #0
   13982:	f642 1302 	movw	r3, #10498	; 0x2902
   13986:	6820      	ldr	r0, [r4, #0]
   13988:	a901      	add	r1, sp, #4
   1398a:	f88d 5004 	strb.w	r5, [sp, #4]
   1398e:	f8ad 3006 	strh.w	r3, [sp, #6]
   13992:	f007 fb6f 	bl	1b074 <bt_uuid_cmp>
   13996:	b110      	cbz	r0, 1399e <bt_gatt_is_subscribed+0xa6>
		return false;
   13998:	2000      	movs	r0, #0
}
   1399a:	b003      	add	sp, #12
   1399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1399e:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   139a0:	1c6c      	adds	r4, r5, #1
   139a2:	3565      	adds	r5, #101	; 0x65
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   139a4:	4622      	mov	r2, r4
   139a6:	4630      	mov	r0, r6
   139a8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   139ac:	f007 fd48 	bl	1b440 <bt_conn_is_peer_addr_le>
   139b0:	b118      	cbz	r0, 139ba <bt_gatt_is_subscribed+0xc2>
   139b2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   139b6:	421f      	tst	r7, r3
   139b8:	d1ef      	bne.n	1399a <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   139ba:	340a      	adds	r4, #10
   139bc:	42ac      	cmp	r4, r5
   139be:	d1f1      	bne.n	139a4 <bt_gatt_is_subscribed+0xac>
   139c0:	e7ea      	b.n	13998 <bt_gatt_is_subscribed+0xa0>
   139c2:	bf00      	nop
   139c4:	00020f85 	.word	0x00020f85
   139c8:	0001ecfc 	.word	0x0001ecfc

000139cc <bt_gatt_discover>:
{
   139cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   139ce:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   139d0:	4605      	mov	r5, r0
{
   139d2:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   139d4:	b950      	cbnz	r0, 139ec <bt_gatt_discover+0x20>
   139d6:	4989      	ldr	r1, [pc, #548]	; (13bfc <bt_gatt_discover+0x230>)
   139d8:	4889      	ldr	r0, [pc, #548]	; (13c00 <bt_gatt_discover+0x234>)
   139da:	f640 5277 	movw	r2, #3447	; 0xd77
   139de:	f006 f894 	bl	19b0a <printk>
   139e2:	f640 5177 	movw	r1, #3447	; 0xd77
   139e6:	4885      	ldr	r0, [pc, #532]	; (13bfc <bt_gatt_discover+0x230>)
   139e8:	f006 fb35 	bl	1a056 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   139ec:	b10c      	cbz	r4, 139f2 <bt_gatt_discover+0x26>
   139ee:	6863      	ldr	r3, [r4, #4]
   139f0:	b953      	cbnz	r3, 13a08 <bt_gatt_discover+0x3c>
   139f2:	4982      	ldr	r1, [pc, #520]	; (13bfc <bt_gatt_discover+0x230>)
   139f4:	4882      	ldr	r0, [pc, #520]	; (13c00 <bt_gatt_discover+0x234>)
   139f6:	f640 5278 	movw	r2, #3448	; 0xd78
   139fa:	f006 f886 	bl	19b0a <printk>
   139fe:	f640 5178 	movw	r1, #3448	; 0xd78
   13a02:	487e      	ldr	r0, [pc, #504]	; (13bfc <bt_gatt_discover+0x230>)
   13a04:	f006 fb27 	bl	1a056 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   13a08:	8923      	ldrh	r3, [r4, #8]
   13a0a:	b10b      	cbz	r3, 13a10 <bt_gatt_discover+0x44>
   13a0c:	89e3      	ldrh	r3, [r4, #14]
   13a0e:	b953      	cbnz	r3, 13a26 <bt_gatt_discover+0x5a>
   13a10:	497a      	ldr	r1, [pc, #488]	; (13bfc <bt_gatt_discover+0x230>)
   13a12:	487b      	ldr	r0, [pc, #492]	; (13c00 <bt_gatt_discover+0x234>)
   13a14:	f640 5279 	movw	r2, #3449	; 0xd79
   13a18:	f006 f877 	bl	19b0a <printk>
   13a1c:	f640 5179 	movw	r1, #3449	; 0xd79
   13a20:	4876      	ldr	r0, [pc, #472]	; (13bfc <bt_gatt_discover+0x230>)
   13a22:	f006 fb18 	bl	1a056 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   13a26:	8922      	ldrh	r2, [r4, #8]
   13a28:	89e3      	ldrh	r3, [r4, #14]
   13a2a:	429a      	cmp	r2, r3
   13a2c:	d90a      	bls.n	13a44 <bt_gatt_discover+0x78>
   13a2e:	4973      	ldr	r1, [pc, #460]	; (13bfc <bt_gatt_discover+0x230>)
   13a30:	4873      	ldr	r0, [pc, #460]	; (13c00 <bt_gatt_discover+0x234>)
   13a32:	f640 527b 	movw	r2, #3451	; 0xd7b
   13a36:	f006 f868 	bl	19b0a <printk>
   13a3a:	f640 517b 	movw	r1, #3451	; 0xd7b
   13a3e:	486f      	ldr	r0, [pc, #444]	; (13bfc <bt_gatt_discover+0x230>)
   13a40:	f006 fb09 	bl	1a056 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13a44:	7aab      	ldrb	r3, [r5, #10]
   13a46:	2b07      	cmp	r3, #7
   13a48:	f040 80d5 	bne.w	13bf6 <bt_gatt_discover+0x22a>
	switch (params->type) {
   13a4c:	7c22      	ldrb	r2, [r4, #16]
   13a4e:	2a05      	cmp	r2, #5
   13a50:	f200 80cc 	bhi.w	13bec <bt_gatt_discover+0x220>
   13a54:	e8df f002 	tbb	[pc, r2]
   13a58:	64640303 	.word	0x64640303
   13a5c:	b683      	.short	0xb683
		if (params->uuid) {
   13a5e:	6823      	ldr	r3, [r4, #0]
   13a60:	2b00      	cmp	r3, #0
   13a62:	d03e      	beq.n	13ae2 <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   13a64:	2206      	movs	r2, #6
   13a66:	4628      	mov	r0, r5
   13a68:	4611      	mov	r1, r2
   13a6a:	f7fe fa0d 	bl	11e88 <bt_att_create_pdu>
	if (!buf) {
   13a6e:	4606      	mov	r6, r0
   13a70:	b918      	cbnz	r0, 13a7a <bt_gatt_discover+0xae>
		return -ENOMEM;
   13a72:	f06f 000b 	mvn.w	r0, #11
}
   13a76:	b005      	add	sp, #20
   13a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   13a7a:	f100 0708 	add.w	r7, r0, #8
   13a7e:	2106      	movs	r1, #6
   13a80:	4638      	mov	r0, r7
   13a82:	f001 f8e5 	bl	14c50 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13a86:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   13a88:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13a8a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13a8c:	89e3      	ldrh	r3, [r4, #14]
   13a8e:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   13a90:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   13a92:	2b00      	cmp	r3, #0
   13a94:	f642 0301 	movw	r3, #10241	; 0x2801
   13a98:	bf08      	it	eq
   13a9a:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   13a9e:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   13aa0:	780a      	ldrb	r2, [r1, #0]
   13aa2:	b15a      	cbz	r2, 13abc <bt_gatt_discover+0xf0>
   13aa4:	2a02      	cmp	r2, #2
   13aa6:	d016      	beq.n	13ad6 <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   13aa8:	4856      	ldr	r0, [pc, #344]	; (13c04 <bt_gatt_discover+0x238>)
   13aaa:	2145      	movs	r1, #69	; 0x45
   13aac:	f006 f82d 	bl	19b0a <printk>
		net_buf_unref(buf);
   13ab0:	4630      	mov	r0, r6
   13ab2:	f000 ffb7 	bl	14a24 <net_buf_unref>
	return -EINVAL;
   13ab6:	f06f 0015 	mvn.w	r0, #21
   13aba:	e7dc      	b.n	13a76 <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   13abc:	4638      	mov	r0, r7
   13abe:	8849      	ldrh	r1, [r1, #2]
   13ac0:	f008 fd78 	bl	1c5b4 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   13ac4:	4623      	mov	r3, r4
   13ac6:	4a50      	ldr	r2, [pc, #320]	; (13c08 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13ac8:	4631      	mov	r1, r6
   13aca:	4628      	mov	r0, r5
}
   13acc:	b005      	add	sp, #20
   13ace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13ad2:	f7ff b811 	b.w	12af8 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13ad6:	2210      	movs	r2, #16
   13ad8:	4638      	mov	r0, r7
   13ada:	3101      	adds	r1, #1
   13adc:	f008 fd57 	bl	1c58e <net_buf_simple_add_mem>
   13ae0:	e7f0      	b.n	13ac4 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   13ae2:	2204      	movs	r2, #4
   13ae4:	2110      	movs	r1, #16
   13ae6:	4628      	mov	r0, r5
   13ae8:	f7fe f9ce 	bl	11e88 <bt_att_create_pdu>
	if (!buf) {
   13aec:	4606      	mov	r6, r0
   13aee:	2800      	cmp	r0, #0
   13af0:	d0bf      	beq.n	13a72 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13af2:	f100 0708 	add.w	r7, r0, #8
   13af6:	2104      	movs	r1, #4
   13af8:	4638      	mov	r0, r7
   13afa:	f001 f8a9 	bl	14c50 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13afe:	8923      	ldrh	r3, [r4, #8]
   13b00:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13b02:	89e3      	ldrh	r3, [r4, #14]
   13b04:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   13b06:	7c23      	ldrb	r3, [r4, #16]
   13b08:	b93b      	cbnz	r3, 13b1a <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   13b0a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   13b0e:	4638      	mov	r0, r7
   13b10:	f008 fd50 	bl	1c5b4 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   13b14:	4623      	mov	r3, r4
   13b16:	4a3d      	ldr	r2, [pc, #244]	; (13c0c <bt_gatt_discover+0x240>)
   13b18:	e7d6      	b.n	13ac8 <bt_gatt_discover+0xfc>
   13b1a:	f642 0101 	movw	r1, #10241	; 0x2801
   13b1e:	e7f6      	b.n	13b0e <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   13b20:	2204      	movs	r2, #4
   13b22:	2108      	movs	r1, #8
   13b24:	4628      	mov	r0, r5
   13b26:	f7fe f9af 	bl	11e88 <bt_att_create_pdu>
	if (!buf) {
   13b2a:	4606      	mov	r6, r0
   13b2c:	2800      	cmp	r0, #0
   13b2e:	d0a0      	beq.n	13a72 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13b30:	f100 0708 	add.w	r7, r0, #8
   13b34:	2104      	movs	r1, #4
   13b36:	4638      	mov	r0, r7
   13b38:	f001 f88a 	bl	14c50 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13b3c:	8923      	ldrh	r3, [r4, #8]
   13b3e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13b40:	89e3      	ldrh	r3, [r4, #14]
   13b42:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13b44:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   13b46:	4638      	mov	r0, r7
   13b48:	2b02      	cmp	r3, #2
   13b4a:	bf0c      	ite	eq
   13b4c:	f642 0102 	movweq	r1, #10242	; 0x2802
   13b50:	f642 0103 	movwne	r1, #10243	; 0x2803
   13b54:	f008 fd2e 	bl	1c5b4 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   13b58:	4623      	mov	r3, r4
   13b5a:	4a2d      	ldr	r2, [pc, #180]	; (13c10 <bt_gatt_discover+0x244>)
   13b5c:	e7b4      	b.n	13ac8 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   13b5e:	6820      	ldr	r0, [r4, #0]
   13b60:	b380      	cbz	r0, 13bc4 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   13b62:	2600      	movs	r6, #0
   13b64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13b68:	4669      	mov	r1, sp
   13b6a:	f88d 6000 	strb.w	r6, [sp]
   13b6e:	f8ad 3002 	strh.w	r3, [sp, #2]
   13b72:	f007 fa7f 	bl	1b074 <bt_uuid_cmp>
		if (params->uuid &&
   13b76:	2800      	cmp	r0, #0
   13b78:	d09d      	beq.n	13ab6 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   13b7a:	f642 0301 	movw	r3, #10241	; 0x2801
   13b7e:	6820      	ldr	r0, [r4, #0]
   13b80:	a901      	add	r1, sp, #4
   13b82:	f88d 6004 	strb.w	r6, [sp, #4]
   13b86:	f8ad 3006 	strh.w	r3, [sp, #6]
   13b8a:	f007 fa73 	bl	1b074 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   13b8e:	2800      	cmp	r0, #0
   13b90:	d091      	beq.n	13ab6 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   13b92:	f642 0302 	movw	r3, #10242	; 0x2802
   13b96:	6820      	ldr	r0, [r4, #0]
   13b98:	a902      	add	r1, sp, #8
   13b9a:	f88d 6008 	strb.w	r6, [sp, #8]
   13b9e:	f8ad 300a 	strh.w	r3, [sp, #10]
   13ba2:	f007 fa67 	bl	1b074 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   13ba6:	2800      	cmp	r0, #0
   13ba8:	d085      	beq.n	13ab6 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   13baa:	f642 0303 	movw	r3, #10243	; 0x2803
   13bae:	6820      	ldr	r0, [r4, #0]
   13bb0:	a903      	add	r1, sp, #12
   13bb2:	f88d 600c 	strb.w	r6, [sp, #12]
   13bb6:	f8ad 300e 	strh.w	r3, [sp, #14]
   13bba:	f007 fa5b 	bl	1b074 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   13bbe:	2800      	cmp	r0, #0
   13bc0:	f43f af79 	beq.w	13ab6 <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   13bc4:	2204      	movs	r2, #4
   13bc6:	4628      	mov	r0, r5
   13bc8:	4611      	mov	r1, r2
   13bca:	f7fe f95d 	bl	11e88 <bt_att_create_pdu>
	if (!buf) {
   13bce:	4606      	mov	r6, r0
   13bd0:	2800      	cmp	r0, #0
   13bd2:	f43f af4e 	beq.w	13a72 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13bd6:	2104      	movs	r1, #4
   13bd8:	3008      	adds	r0, #8
   13bda:	f001 f839 	bl	14c50 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13bde:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13be0:	4a0c      	ldr	r2, [pc, #48]	; (13c14 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13be2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13be4:	89e3      	ldrh	r3, [r4, #14]
   13be6:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13be8:	4623      	mov	r3, r4
   13bea:	e76d      	b.n	13ac8 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   13bec:	2145      	movs	r1, #69	; 0x45
   13bee:	480a      	ldr	r0, [pc, #40]	; (13c18 <bt_gatt_discover+0x24c>)
   13bf0:	f005 ff8b 	bl	19b0a <printk>
   13bf4:	e75f      	b.n	13ab6 <bt_gatt_discover+0xea>
		return -ENOTCONN;
   13bf6:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13bfa:	e73c      	b.n	13a76 <bt_gatt_discover+0xaa>
   13bfc:	00020f85 	.word	0x00020f85
   13c00:	0001ecfc 	.word	0x0001ecfc
   13c04:	00021044 	.word	0x00021044
   13c08:	0001c399 	.word	0x0001c399
   13c0c:	00013c1d 	.word	0x00013c1d
   13c10:	00013d25 	.word	0x00013d25
   13c14:	00013fd5 	.word	0x00013fd5
   13c18:	0002105e 	.word	0x0002105e

00013c1c <gatt_read_group_rsp>:
{
   13c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c20:	b08f      	sub	sp, #60	; 0x3c
   13c22:	4681      	mov	r9, r0
   13c24:	4617      	mov	r7, r2
   13c26:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   13c28:	b131      	cbz	r1, 13c38 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   13c2a:	462a      	mov	r2, r5
   13c2c:	2100      	movs	r1, #0
   13c2e:	686b      	ldr	r3, [r5, #4]
}
   13c30:	b00f      	add	sp, #60	; 0x3c
   13c32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   13c36:	4718      	bx	r3
	switch (rsp->len) {
   13c38:	7812      	ldrb	r2, [r2, #0]
   13c3a:	2a06      	cmp	r2, #6
   13c3c:	d00d      	beq.n	13c5a <gatt_read_group_rsp+0x3e>
   13c3e:	2a14      	cmp	r2, #20
   13c40:	d021      	beq.n	13c86 <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   13c42:	2145      	movs	r1, #69	; 0x45
   13c44:	4836      	ldr	r0, [pc, #216]	; (13d20 <gatt_read_group_rsp+0x104>)
   13c46:	f005 ff60 	bl	19b0a <printk>
	params->func(conn, NULL, params);
   13c4a:	462a      	mov	r2, r5
   13c4c:	2100      	movs	r1, #0
   13c4e:	4648      	mov	r0, r9
   13c50:	686b      	ldr	r3, [r5, #4]
   13c52:	4798      	blx	r3
}
   13c54:	b00f      	add	sp, #60	; 0x3c
   13c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   13c5a:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   13c5e:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   13c60:	3b01      	subs	r3, #1
   13c62:	b29c      	uxth	r4, r3
   13c64:	f107 0801 	add.w	r8, r7, #1
   13c68:	783b      	ldrb	r3, [r7, #0]
   13c6a:	42a3      	cmp	r3, r4
   13c6c:	d90f      	bls.n	13c8e <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   13c6e:	2c00      	cmp	r4, #0
   13c70:	d1eb      	bne.n	13c4a <gatt_read_group_rsp+0x2e>
   13c72:	2e00      	cmp	r6, #0
   13c74:	d0e9      	beq.n	13c4a <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   13c76:	462a      	mov	r2, r5
   13c78:	4631      	mov	r1, r6
   13c7a:	4648      	mov	r0, r9
}
   13c7c:	b00f      	add	sp, #60	; 0x3c
   13c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   13c82:	f008 bb6c 	b.w	1c35e <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   13c86:	2202      	movs	r2, #2
   13c88:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   13c8c:	e7e7      	b.n	13c5e <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   13c8e:	2214      	movs	r2, #20
   13c90:	2100      	movs	r1, #0
   13c92:	a809      	add	r0, sp, #36	; 0x24
   13c94:	f007 f9a4 	bl	1afe0 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   13c98:	f8b8 a000 	ldrh.w	sl, [r8]
   13c9c:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   13ca0:	2b00      	cmp	r3, #0
   13ca2:	d0d2      	beq.n	13c4a <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   13ca4:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   13ca8:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   13cac:	2e00      	cmp	r6, #0
   13cae:	d0cc      	beq.n	13c4a <gatt_read_group_rsp+0x2e>
   13cb0:	42b3      	cmp	r3, r6
   13cb2:	d8ca      	bhi.n	13c4a <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   13cb4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13cb8:	b323      	cbz	r3, 13d04 <gatt_read_group_rsp+0xe8>
   13cba:	2b02      	cmp	r3, #2
   13cbc:	d02a      	beq.n	13d14 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   13cbe:	f04f 0300 	mov.w	r3, #0
   13cc2:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   13cc6:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13cc8:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   13cca:	2b00      	cmp	r3, #0
   13ccc:	f642 0301 	movw	r3, #10241	; 0x2801
   13cd0:	bf08      	it	eq
   13cd2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   13cd6:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   13cda:	ab04      	add	r3, sp, #16
   13cdc:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   13cde:	ab01      	add	r3, sp, #4
   13ce0:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   13ce2:	ab02      	add	r3, sp, #8
   13ce4:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13ce6:	4648      	mov	r0, r9
   13ce8:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   13cea:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   13cee:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13cf2:	a909      	add	r1, sp, #36	; 0x24
   13cf4:	4798      	blx	r3
   13cf6:	2800      	cmp	r0, #0
   13cf8:	d0ac      	beq.n	13c54 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13cfa:	783a      	ldrb	r2, [r7, #0]
   13cfc:	1aa4      	subs	r4, r4, r2
   13cfe:	b2a4      	uxth	r4, r4
   13d00:	4490      	add	r8, r2
   13d02:	e7b1      	b.n	13c68 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   13d04:	2202      	movs	r2, #2
   13d06:	f108 0104 	add.w	r1, r8, #4
   13d0a:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   13d0e:	f007 f93c 	bl	1af8a <memcpy>
			break;
   13d12:	e7d4      	b.n	13cbe <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   13d14:	2210      	movs	r2, #16
   13d16:	f108 0104 	add.w	r1, r8, #4
   13d1a:	f10d 0011 	add.w	r0, sp, #17
   13d1e:	e7f6      	b.n	13d0e <gatt_read_group_rsp+0xf2>
   13d20:	0002107e 	.word	0x0002107e

00013d24 <gatt_read_type_rsp>:
{
   13d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d28:	b091      	sub	sp, #68	; 0x44
   13d2a:	4607      	mov	r7, r0
   13d2c:	4690      	mov	r8, r2
   13d2e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   13d30:	b131      	cbz	r1, 13d40 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   13d32:	462a      	mov	r2, r5
   13d34:	2100      	movs	r1, #0
   13d36:	686b      	ldr	r3, [r5, #4]
}
   13d38:	b011      	add	sp, #68	; 0x44
   13d3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   13d3e:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13d40:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   13d42:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13d44:	2802      	cmp	r0, #2
   13d46:	f040 8089 	bne.w	13e5c <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   13d4a:	2a06      	cmp	r2, #6
   13d4c:	d01c      	beq.n	13d88 <gatt_read_type_rsp+0x64>
   13d4e:	2a08      	cmp	r2, #8
   13d50:	f040 8088 	bne.w	13e64 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   13d54:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   13d58:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13d5a:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   13d5c:	1e5c      	subs	r4, r3, #1
   13d5e:	b2a4      	uxth	r4, r4
   13d60:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   13d64:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   13d68:	f898 3000 	ldrb.w	r3, [r8]
   13d6c:	42a3      	cmp	r3, r4
   13d6e:	d90e      	bls.n	13d8e <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   13d70:	2c00      	cmp	r4, #0
   13d72:	d17b      	bne.n	13e6c <gatt_read_type_rsp+0x148>
   13d74:	2e00      	cmp	r6, #0
   13d76:	d079      	beq.n	13e6c <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   13d78:	462a      	mov	r2, r5
   13d7a:	4631      	mov	r1, r6
   13d7c:	4638      	mov	r0, r7
}
   13d7e:	b011      	add	sp, #68	; 0x44
   13d80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   13d84:	f008 baeb 	b.w	1c35e <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   13d88:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   13d8c:	e7e4      	b.n	13d58 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   13d8e:	f8b9 3000 	ldrh.w	r3, [r9]
   13d92:	b29e      	uxth	r6, r3
		if (!handle) {
   13d94:	2e00      	cmp	r6, #0
   13d96:	d069      	beq.n	13e6c <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   13d98:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   13d9c:	f8ad 2014 	strh.w	r2, [sp, #20]
   13da0:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   13da2:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   13da6:	b291      	uxth	r1, r2
   13da8:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   13dac:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13db0:	b182      	cbz	r2, 13dd4 <gatt_read_type_rsp+0xb0>
   13db2:	2a02      	cmp	r2, #2
   13db4:	d019      	beq.n	13dea <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13db6:	6829      	ldr	r1, [r5, #0]
   13db8:	2900      	cmp	r1, #0
   13dba:	d036      	beq.n	13e2a <gatt_read_type_rsp+0x106>
   13dbc:	4650      	mov	r0, sl
   13dbe:	9301      	str	r3, [sp, #4]
   13dc0:	f007 f958 	bl	1b074 <bt_uuid_cmp>
   13dc4:	9b01      	ldr	r3, [sp, #4]
   13dc6:	b380      	cbz	r0, 13e2a <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13dc8:	f898 2000 	ldrb.w	r2, [r8]
   13dcc:	1aa4      	subs	r4, r4, r2
   13dce:	b2a4      	uxth	r4, r4
   13dd0:	4491      	add	r9, r2
   13dd2:	e7c9      	b.n	13d68 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   13dd4:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   13dd8:	f899 2006 	ldrb.w	r2, [r9, #6]
   13ddc:	f899 1007 	ldrb.w	r1, [r9, #7]
   13de0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13de4:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   13de8:	e7e5      	b.n	13db6 <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   13dea:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   13dec:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   13dee:	4638      	mov	r0, r7
   13df0:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   13df2:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   13df4:	9201      	str	r2, [sp, #4]
   13df6:	f7fe f847 	bl	11e88 <bt_att_create_pdu>
	if (!buf) {
   13dfa:	4604      	mov	r4, r0
   13dfc:	b190      	cbz	r0, 13e24 <gatt_read_type_rsp+0x100>
   13dfe:	9a01      	ldr	r2, [sp, #4]
   13e00:	3008      	adds	r0, #8
   13e02:	4611      	mov	r1, r2
   13e04:	f000 ff24 	bl	14c50 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   13e08:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   13e0a:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   13e0c:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   13e0e:	4a49      	ldr	r2, [pc, #292]	; (13f34 <gatt_read_type_rsp+0x210>)
   13e10:	462b      	mov	r3, r5
   13e12:	4638      	mov	r0, r7
   13e14:	f7fe fe70 	bl	12af8 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   13e18:	b286      	uxth	r6, r0
	if (!handle) {
   13e1a:	2e00      	cmp	r6, #0
   13e1c:	d1ac      	bne.n	13d78 <gatt_read_type_rsp+0x54>
}
   13e1e:	b011      	add	sp, #68	; 0x44
   13e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   13e24:	f06f 000b 	mvn.w	r0, #11
   13e28:	e7f6      	b.n	13e18 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13e2a:	f642 0202 	movw	r2, #10242	; 0x2802
   13e2e:	f8ad 200e 	strh.w	r2, [sp, #14]
   13e32:	aa03      	add	r2, sp, #12
   13e34:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   13e38:	aa04      	add	r2, sp, #16
   13e3a:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   13e3c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13e40:	462a      	mov	r2, r5
   13e42:	4638      	mov	r0, r7
   13e44:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13e46:	f88d b00c 	strb.w	fp, [sp, #12]
   13e4a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   13e4e:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13e52:	a90b      	add	r1, sp, #44	; 0x2c
   13e54:	4798      	blx	r3
   13e56:	2800      	cmp	r0, #0
   13e58:	d1b6      	bne.n	13dc8 <gatt_read_type_rsp+0xa4>
   13e5a:	e7e0      	b.n	13e1e <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   13e5c:	2a07      	cmp	r2, #7
   13e5e:	d00b      	beq.n	13e78 <gatt_read_type_rsp+0x154>
   13e60:	2a15      	cmp	r2, #21
   13e62:	d02e      	beq.n	13ec2 <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   13e64:	2145      	movs	r1, #69	; 0x45
   13e66:	4834      	ldr	r0, [pc, #208]	; (13f38 <gatt_read_type_rsp+0x214>)
   13e68:	f005 fe4f 	bl	19b0a <printk>
	params->func(conn, NULL, params);
   13e6c:	462a      	mov	r2, r5
   13e6e:	2100      	movs	r1, #0
   13e70:	4638      	mov	r0, r7
   13e72:	686b      	ldr	r3, [r5, #4]
   13e74:	4798      	blx	r3
	if (!handle) {
   13e76:	e7d2      	b.n	13e1e <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   13e78:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   13e7c:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   13e7e:	1e5c      	subs	r4, r3, #1
   13e80:	b2a4      	uxth	r4, r4
   13e82:	f108 0901 	add.w	r9, r8, #1
   13e86:	f10d 0a18 	add.w	sl, sp, #24
   13e8a:	f898 3000 	ldrb.w	r3, [r8]
   13e8e:	42a3      	cmp	r3, r4
   13e90:	f63f af6e 	bhi.w	13d70 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   13e94:	f8b9 b000 	ldrh.w	fp, [r9]
   13e98:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   13e9c:	2e00      	cmp	r6, #0
   13e9e:	d0e5      	beq.n	13e6c <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   13ea0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13ea4:	b18b      	cbz	r3, 13eca <gatt_read_type_rsp+0x1a6>
   13ea6:	2b02      	cmp	r3, #2
   13ea8:	d018      	beq.n	13edc <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13eaa:	6829      	ldr	r1, [r5, #0]
   13eac:	b1f1      	cbz	r1, 13eec <gatt_read_type_rsp+0x1c8>
   13eae:	4650      	mov	r0, sl
   13eb0:	f007 f8e0 	bl	1b074 <bt_uuid_cmp>
   13eb4:	b1d0      	cbz	r0, 13eec <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13eb6:	f898 2000 	ldrb.w	r2, [r8]
   13eba:	1aa4      	subs	r4, r4, r2
   13ebc:	b2a4      	uxth	r4, r4
   13ebe:	4491      	add	r9, r2
   13ec0:	e7e3      	b.n	13e8a <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   13ec2:	2202      	movs	r2, #2
   13ec4:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   13ec8:	e7d8      	b.n	13e7c <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   13eca:	f899 3005 	ldrb.w	r3, [r9, #5]
   13ece:	f899 2006 	ldrb.w	r2, [r9, #6]
   13ed2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13ed6:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   13eda:	e7e6      	b.n	13eaa <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   13edc:	2210      	movs	r2, #16
   13ede:	f109 0105 	add.w	r1, r9, #5
   13ee2:	f10d 0019 	add.w	r0, sp, #25
   13ee6:	f007 f850 	bl	1af8a <memcpy>
			break;
   13eea:	e7de      	b.n	13eaa <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13eec:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   13ef0:	f899 3002 	ldrb.w	r3, [r9, #2]
   13ef4:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13ef8:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13efc:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13f00:	2300      	movs	r3, #0
   13f02:	f8ad 200e 	strh.w	r2, [sp, #14]
   13f06:	aa03      	add	r2, sp, #12
   13f08:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   13f0c:	aa04      	add	r2, sp, #16
   13f0e:	f88d 300c 	strb.w	r3, [sp, #12]
   13f12:	930d      	str	r3, [sp, #52]	; 0x34
   13f14:	920e      	str	r2, [sp, #56]	; 0x38
   13f16:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13f1a:	462a      	mov	r2, r5
   13f1c:	4638      	mov	r0, r7
   13f1e:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13f20:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   13f24:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13f28:	a90b      	add	r1, sp, #44	; 0x2c
   13f2a:	4798      	blx	r3
   13f2c:	2800      	cmp	r0, #0
   13f2e:	d1c2      	bne.n	13eb6 <gatt_read_type_rsp+0x192>
   13f30:	e775      	b.n	13e1e <gatt_read_type_rsp+0xfa>
   13f32:	bf00      	nop
   13f34:	00013f3d 	.word	0x00013f3d
   13f38:	0002107e 	.word	0x0002107e

00013f3c <read_included_uuid_cb>:
{
   13f3c:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   13f3e:	2b10      	cmp	r3, #16
{
   13f40:	b08e      	sub	sp, #56	; 0x38
   13f42:	4611      	mov	r1, r2
   13f44:	4605      	mov	r5, r0
   13f46:	461a      	mov	r2, r3
   13f48:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   13f4a:	d00b      	beq.n	13f64 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   13f4c:	2145      	movs	r1, #69	; 0x45
   13f4e:	4820      	ldr	r0, [pc, #128]	; (13fd0 <read_included_uuid_cb+0x94>)
   13f50:	f005 fddb 	bl	19b0a <printk>
		params->func(conn, NULL, params);
   13f54:	4622      	mov	r2, r4
   13f56:	2100      	movs	r1, #0
   13f58:	4628      	mov	r0, r5
   13f5a:	6863      	ldr	r3, [r4, #4]
}
   13f5c:	b00e      	add	sp, #56	; 0x38
   13f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   13f62:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   13f64:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   13f66:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   13f68:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   13f6c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   13f6e:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   13f72:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   13f76:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   13f78:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   13f7a:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   13f7e:	f007 f804 	bl	1af8a <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13f82:	6821      	ldr	r1, [r4, #0]
   13f84:	b9c9      	cbnz	r1, 13fba <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13f86:	f642 0202 	movw	r2, #10242	; 0x2802
   13f8a:	2300      	movs	r3, #0
   13f8c:	f8ad 2006 	strh.w	r2, [sp, #6]
   13f90:	aa01      	add	r2, sp, #4
   13f92:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   13f96:	f88d 3004 	strb.w	r3, [sp, #4]
   13f9a:	930b      	str	r3, [sp, #44]	; 0x2c
   13f9c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   13fa0:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13fa2:	aa02      	add	r2, sp, #8
   13fa4:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   13fa6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13faa:	4622      	mov	r2, r4
   13fac:	4628      	mov	r0, r5
   13fae:	6863      	ldr	r3, [r4, #4]
   13fb0:	a909      	add	r1, sp, #36	; 0x24
   13fb2:	4798      	blx	r3
   13fb4:	b930      	cbnz	r0, 13fc4 <read_included_uuid_cb+0x88>
}
   13fb6:	b00e      	add	sp, #56	; 0x38
   13fb8:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13fba:	4630      	mov	r0, r6
   13fbc:	f007 f85a 	bl	1b074 <bt_uuid_cmp>
   13fc0:	2800      	cmp	r0, #0
   13fc2:	d0e0      	beq.n	13f86 <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   13fc4:	4622      	mov	r2, r4
   13fc6:	4628      	mov	r0, r5
   13fc8:	8921      	ldrh	r1, [r4, #8]
   13fca:	f008 f9c8 	bl	1c35e <gatt_discover_next>
	return;
   13fce:	e7f2      	b.n	13fb6 <read_included_uuid_cb+0x7a>
   13fd0:	0002107e 	.word	0x0002107e

00013fd4 <gatt_find_info_rsp>:
{
   13fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fd8:	b08f      	sub	sp, #60	; 0x3c
   13fda:	4680      	mov	r8, r0
   13fdc:	4614      	mov	r4, r2
   13fde:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   13fe0:	b941      	cbnz	r1, 13ff4 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   13fe2:	7812      	ldrb	r2, [r2, #0]
   13fe4:	2a01      	cmp	r2, #1
   13fe6:	d00b      	beq.n	14000 <gatt_find_info_rsp+0x2c>
   13fe8:	2a02      	cmp	r2, #2
   13fea:	d022      	beq.n	14032 <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   13fec:	2145      	movs	r1, #69	; 0x45
   13fee:	484b      	ldr	r0, [pc, #300]	; (1411c <gatt_find_info_rsp+0x148>)
   13ff0:	f005 fd8b 	bl	19b0a <printk>
	params->func(conn, NULL, params);
   13ff4:	4632      	mov	r2, r6
   13ff6:	2100      	movs	r1, #0
   13ff8:	4640      	mov	r0, r8
   13ffa:	6873      	ldr	r3, [r6, #4]
   13ffc:	4798      	blx	r3
   13ffe:	e08a      	b.n	14116 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14000:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14004:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   14008:	3b01      	subs	r3, #1
   1400a:	b29b      	uxth	r3, r3
	if (length < len) {
   1400c:	4553      	cmp	r3, sl
   1400e:	d3f1      	bcc.n	13ff4 <gatt_find_info_rsp+0x20>
	bool skip = false;
   14010:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14014:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   14018:	46cb      	mov	fp, r9
			skip = false;
   1401a:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   1401c:	9300      	str	r3, [sp, #0]
   1401e:	3401      	adds	r4, #1
   14020:	af04      	add	r7, sp, #16
   14022:	9b00      	ldr	r3, [sp, #0]
   14024:	b953      	cbnz	r3, 1403c <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   14026:	4632      	mov	r2, r6
   14028:	4659      	mov	r1, fp
   1402a:	4640      	mov	r0, r8
   1402c:	f008 f997 	bl	1c35e <gatt_discover_next>
	return;
   14030:	e071      	b.n	14116 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14032:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   14036:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   1403a:	e7e5      	b.n	14008 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   1403c:	8823      	ldrh	r3, [r4, #0]
   1403e:	9301      	str	r3, [sp, #4]
   14040:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14044:	f1b9 0f00 	cmp.w	r9, #0
   14048:	d151      	bne.n	140ee <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   1404a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1404e:	2b00      	cmp	r3, #0
   14050:	d03a      	beq.n	140c8 <gatt_find_info_rsp+0xf4>
   14052:	2b02      	cmp	r3, #2
   14054:	d03f      	beq.n	140d6 <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14056:	6831      	ldr	r1, [r6, #0]
   14058:	2900      	cmp	r1, #0
   1405a:	d143      	bne.n	140e4 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1405c:	7c33      	ldrb	r3, [r6, #16]
   1405e:	2b04      	cmp	r3, #4
   14060:	d148      	bne.n	140f4 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14062:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14066:	4638      	mov	r0, r7
   14068:	a902      	add	r1, sp, #8
   1406a:	f88d 5008 	strb.w	r5, [sp, #8]
   1406e:	f8ad 300a 	strh.w	r3, [sp, #10]
   14072:	f006 ffff 	bl	1b074 <bt_uuid_cmp>
   14076:	b310      	cbz	r0, 140be <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14078:	f642 0301 	movw	r3, #10241	; 0x2801
   1407c:	4638      	mov	r0, r7
   1407e:	a903      	add	r1, sp, #12
   14080:	f88d 500c 	strb.w	r5, [sp, #12]
   14084:	f8ad 300e 	strh.w	r3, [sp, #14]
   14088:	f006 fff4 	bl	1b074 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1408c:	b1b8      	cbz	r0, 140be <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1408e:	f642 0302 	movw	r3, #10242	; 0x2802
   14092:	4638      	mov	r0, r7
   14094:	a909      	add	r1, sp, #36	; 0x24
   14096:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   1409a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1409e:	f006 ffe9 	bl	1b074 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   140a2:	b160      	cbz	r0, 140be <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   140a4:	f642 0303 	movw	r3, #10243	; 0x2803
   140a8:	4638      	mov	r0, r7
   140aa:	a909      	add	r1, sp, #36	; 0x24
   140ac:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   140b0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   140b4:	f006 ffde 	bl	1b074 <bt_uuid_cmp>
   140b8:	b9e0      	cbnz	r0, 140f4 <gatt_find_info_rsp+0x120>
				skip = true;
   140ba:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   140be:	9b00      	ldr	r3, [sp, #0]
   140c0:	4454      	add	r4, sl
   140c2:	3b01      	subs	r3, #1
   140c4:	9300      	str	r3, [sp, #0]
   140c6:	e7ac      	b.n	14022 <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   140c8:	78a3      	ldrb	r3, [r4, #2]
   140ca:	78e2      	ldrb	r2, [r4, #3]
   140cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   140d0:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   140d4:	e7bf      	b.n	14056 <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   140d6:	2210      	movs	r2, #16
   140d8:	1ca1      	adds	r1, r4, #2
   140da:	f10d 0011 	add.w	r0, sp, #17
   140de:	f006 ff54 	bl	1af8a <memcpy>
			break;
   140e2:	e7b8      	b.n	14056 <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   140e4:	4638      	mov	r0, r7
   140e6:	f006 ffc5 	bl	1b074 <bt_uuid_cmp>
   140ea:	2800      	cmp	r0, #0
   140ec:	d0b6      	beq.n	1405c <gatt_find_info_rsp+0x88>
			skip = false;
   140ee:	f04f 0900 	mov.w	r9, #0
   140f2:	e7e4      	b.n	140be <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   140f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   140f8:	4632      	mov	r2, r6
		attr.handle = handle;
   140fa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   140fe:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14100:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14104:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14108:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1410a:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1410e:	a909      	add	r1, sp, #36	; 0x24
   14110:	4798      	blx	r3
   14112:	2800      	cmp	r0, #0
   14114:	d1d3      	bne.n	140be <gatt_find_info_rsp+0xea>
}
   14116:	b00f      	add	sp, #60	; 0x3c
   14118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1411c:	00021097 	.word	0x00021097

00014120 <bt_gatt_subscribe>:
{
   14120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14122:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14124:	4606      	mov	r6, r0
   14126:	b950      	cbnz	r0, 1413e <bt_gatt_subscribe+0x1e>
   14128:	4944      	ldr	r1, [pc, #272]	; (1423c <bt_gatt_subscribe+0x11c>)
   1412a:	4845      	ldr	r0, [pc, #276]	; (14240 <bt_gatt_subscribe+0x120>)
   1412c:	f640 72fb 	movw	r2, #4091	; 0xffb
   14130:	f005 fceb 	bl	19b0a <printk>
   14134:	f640 71fb 	movw	r1, #4091	; 0xffb
   14138:	4840      	ldr	r0, [pc, #256]	; (1423c <bt_gatt_subscribe+0x11c>)
   1413a:	f005 ff8c 	bl	1a056 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1413e:	b10d      	cbz	r5, 14144 <bt_gatt_subscribe+0x24>
   14140:	682b      	ldr	r3, [r5, #0]
   14142:	b953      	cbnz	r3, 1415a <bt_gatt_subscribe+0x3a>
   14144:	493d      	ldr	r1, [pc, #244]	; (1423c <bt_gatt_subscribe+0x11c>)
   14146:	483e      	ldr	r0, [pc, #248]	; (14240 <bt_gatt_subscribe+0x120>)
   14148:	f640 72fc 	movw	r2, #4092	; 0xffc
   1414c:	f005 fcdd 	bl	19b0a <printk>
   14150:	f640 71fc 	movw	r1, #4092	; 0xffc
   14154:	4839      	ldr	r0, [pc, #228]	; (1423c <bt_gatt_subscribe+0x11c>)
   14156:	f005 ff7e 	bl	1a056 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1415a:	89ab      	ldrh	r3, [r5, #12]
   1415c:	b953      	cbnz	r3, 14174 <bt_gatt_subscribe+0x54>
   1415e:	4937      	ldr	r1, [pc, #220]	; (1423c <bt_gatt_subscribe+0x11c>)
   14160:	4837      	ldr	r0, [pc, #220]	; (14240 <bt_gatt_subscribe+0x120>)
   14162:	f640 72fd 	movw	r2, #4093	; 0xffd
   14166:	f005 fcd0 	bl	19b0a <printk>
   1416a:	f640 71fd 	movw	r1, #4093	; 0xffd
   1416e:	4833      	ldr	r0, [pc, #204]	; (1423c <bt_gatt_subscribe+0x11c>)
   14170:	f005 ff71 	bl	1a056 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   14174:	896b      	ldrh	r3, [r5, #10]
   14176:	b953      	cbnz	r3, 1418e <bt_gatt_subscribe+0x6e>
   14178:	4930      	ldr	r1, [pc, #192]	; (1423c <bt_gatt_subscribe+0x11c>)
   1417a:	4831      	ldr	r0, [pc, #196]	; (14240 <bt_gatt_subscribe+0x120>)
   1417c:	f241 0203 	movw	r2, #4099	; 0x1003
   14180:	f005 fcc3 	bl	19b0a <printk>
   14184:	f241 0103 	movw	r1, #4099	; 0x1003
   14188:	482c      	ldr	r0, [pc, #176]	; (1423c <bt_gatt_subscribe+0x11c>)
   1418a:	f005 ff64 	bl	1a056 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1418e:	7ab3      	ldrb	r3, [r6, #10]
   14190:	2b07      	cmp	r3, #7
   14192:	d14b      	bne.n	1422c <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   14194:	4630      	mov	r0, r6
   14196:	f7fe faf9 	bl	1278c <gatt_sub_find>
	if (!sub) {
   1419a:	4604      	mov	r4, r0
   1419c:	b958      	cbnz	r0, 141b6 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   1419e:	f7fe faf5 	bl	1278c <gatt_sub_find>
		if (sub) {
   141a2:	4604      	mov	r4, r0
   141a4:	2800      	cmp	r0, #0
   141a6:	d044      	beq.n	14232 <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   141a8:	f106 0188 	add.w	r1, r6, #136	; 0x88
   141ac:	3001      	adds	r0, #1
   141ae:	f007 fec2 	bl	1bf36 <bt_addr_le_copy>
			sub->id = conn->id;
   141b2:	7a33      	ldrb	r3, [r6, #8]
   141b4:	7023      	strb	r3, [r4, #0]
	return list->head;
   141b6:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   141b8:	b90a      	cbnz	r2, 141be <bt_gatt_subscribe+0x9e>
   141ba:	4613      	mov	r3, r2
   141bc:	e001      	b.n	141c2 <bt_gatt_subscribe+0xa2>
   141be:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   141c2:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   141c4:	b97b      	cbnz	r3, 141e6 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   141c6:	bb41      	cbnz	r1, 1421a <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   141c8:	4630      	mov	r0, r6
   141ca:	462b      	mov	r3, r5
   141cc:	89aa      	ldrh	r2, [r5, #12]
   141ce:	8969      	ldrh	r1, [r5, #10]
   141d0:	f7fe ff38 	bl	13044 <gatt_write_ccc.constprop.0>
		if (err) {
   141d4:	4606      	mov	r6, r0
   141d6:	b300      	cbz	r0, 1421a <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   141d8:	68a3      	ldr	r3, [r4, #8]
   141da:	b913      	cbnz	r3, 141e2 <bt_gatt_subscribe+0xc2>
   141dc:	4620      	mov	r0, r4
   141de:	f007 fec9 	bl	1bf74 <gatt_sub_remove.part.0>
}
   141e2:	4630      	mov	r0, r6
   141e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   141e6:	42ab      	cmp	r3, r5
   141e8:	d106      	bne.n	141f8 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   141ea:	b912      	cbnz	r2, 141f2 <bt_gatt_subscribe+0xd2>
   141ec:	4620      	mov	r0, r4
   141ee:	f007 fec1 	bl	1bf74 <gatt_sub_remove.part.0>
			return -EALREADY;
   141f2:	f06f 0644 	mvn.w	r6, #68	; 0x44
   141f6:	e7f4      	b.n	141e2 <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   141f8:	891f      	ldrh	r7, [r3, #8]
   141fa:	8928      	ldrh	r0, [r5, #8]
   141fc:	4287      	cmp	r7, r0
   141fe:	d104      	bne.n	1420a <bt_gatt_subscribe+0xea>
   14200:	899f      	ldrh	r7, [r3, #12]
   14202:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   14204:	4287      	cmp	r7, r0
   14206:	bf28      	it	cs
   14208:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1420a:	f113 0f14 	cmn.w	r3, #20
   1420e:	d0da      	beq.n	141c6 <bt_gatt_subscribe+0xa6>
	return node->next;
   14210:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14212:	2b00      	cmp	r3, #0
   14214:	d0d7      	beq.n	141c6 <bt_gatt_subscribe+0xa6>
   14216:	3b14      	subs	r3, #20
   14218:	e7d4      	b.n	141c4 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   1421a:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1421c:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1421e:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   14222:	616a      	str	r2, [r5, #20]
	list->head = node;
   14224:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14226:	b93e      	cbnz	r6, 14238 <bt_gatt_subscribe+0x118>
	list->tail = node;
   14228:	60e3      	str	r3, [r4, #12]
}
   1422a:	e7da      	b.n	141e2 <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   1422c:	f06f 0638 	mvn.w	r6, #56	; 0x38
   14230:	e7d7      	b.n	141e2 <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   14232:	f06f 060b 	mvn.w	r6, #11
   14236:	e7d4      	b.n	141e2 <bt_gatt_subscribe+0xc2>
	return 0;
   14238:	2600      	movs	r6, #0
   1423a:	e7d2      	b.n	141e2 <bt_gatt_subscribe+0xc2>
   1423c:	00020f85 	.word	0x00020f85
   14240:	0001ecfc 	.word	0x0001ecfc

00014244 <bt_gatt_unsubscribe>:
{
   14244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14248:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   1424a:	4607      	mov	r7, r0
   1424c:	b950      	cbnz	r0, 14264 <bt_gatt_unsubscribe+0x20>
   1424e:	4947      	ldr	r1, [pc, #284]	; (1436c <bt_gatt_unsubscribe+0x128>)
   14250:	4847      	ldr	r0, [pc, #284]	; (14370 <bt_gatt_unsubscribe+0x12c>)
   14252:	f241 025c 	movw	r2, #4188	; 0x105c
   14256:	f005 fc58 	bl	19b0a <printk>
   1425a:	f241 015c 	movw	r1, #4188	; 0x105c
   1425e:	4843      	ldr	r0, [pc, #268]	; (1436c <bt_gatt_unsubscribe+0x128>)
   14260:	f005 fef9 	bl	1a056 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   14264:	b956      	cbnz	r6, 1427c <bt_gatt_unsubscribe+0x38>
   14266:	4941      	ldr	r1, [pc, #260]	; (1436c <bt_gatt_unsubscribe+0x128>)
   14268:	4841      	ldr	r0, [pc, #260]	; (14370 <bt_gatt_unsubscribe+0x12c>)
   1426a:	f241 025d 	movw	r2, #4189	; 0x105d
   1426e:	f005 fc4c 	bl	19b0a <printk>
   14272:	f241 015d 	movw	r1, #4189	; 0x105d
   14276:	483d      	ldr	r0, [pc, #244]	; (1436c <bt_gatt_unsubscribe+0x128>)
   14278:	f005 feed 	bl	1a056 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1427c:	7abb      	ldrb	r3, [r7, #10]
   1427e:	2b07      	cmp	r3, #7
   14280:	d170      	bne.n	14364 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   14282:	4638      	mov	r0, r7
   14284:	f7fe fa82 	bl	1278c <gatt_sub_find>
	if (!sub) {
   14288:	4680      	mov	r8, r0
   1428a:	b920      	cbnz	r0, 14296 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   1428c:	f06f 0015 	mvn.w	r0, #21
}
   14290:	b003      	add	sp, #12
   14292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14296:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14298:	b1cc      	cbz	r4, 142ce <bt_gatt_unsubscribe+0x8a>
   1429a:	f1b4 0514 	subs.w	r5, r4, #20
   1429e:	d018      	beq.n	142d2 <bt_gatt_unsubscribe+0x8e>
	return node->next;
   142a0:	6824      	ldr	r4, [r4, #0]
   142a2:	b104      	cbz	r4, 142a6 <bt_gatt_unsubscribe+0x62>
   142a4:	3c14      	subs	r4, #20
   142a6:	f04f 0900 	mov.w	r9, #0
   142aa:	464b      	mov	r3, r9
   142ac:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   142ae:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   142b2:	b985      	cbnz	r5, 142d6 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   142b4:	2b00      	cmp	r3, #0
   142b6:	d0e9      	beq.n	1428c <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   142b8:	f1ba 0f00 	cmp.w	sl, #0
   142bc:	d047      	beq.n	1434e <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   142be:	462b      	mov	r3, r5
   142c0:	462a      	mov	r2, r5
   142c2:	4631      	mov	r1, r6
   142c4:	4638      	mov	r0, r7
   142c6:	6834      	ldr	r4, [r6, #0]
   142c8:	47a0      	blx	r4
		return 0;
   142ca:	4628      	mov	r0, r5
   142cc:	e7e0      	b.n	14290 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   142ce:	4625      	mov	r5, r4
   142d0:	e7e9      	b.n	142a6 <bt_gatt_unsubscribe+0x62>
   142d2:	462c      	mov	r4, r5
   142d4:	e7e7      	b.n	142a6 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   142d6:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   142d8:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   142dc:	d12b      	bne.n	14336 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   142de:	696b      	ldr	r3, [r5, #20]
   142e0:	f8d8 000c 	ldr.w	r0, [r8, #12]
   142e4:	f1b9 0f00 	cmp.w	r9, #0
   142e8:	d11e      	bne.n	14328 <bt_gatt_unsubscribe+0xe4>
   142ea:	4281      	cmp	r1, r0
	list->head = node;
   142ec:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   142f0:	d101      	bne.n	142f6 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   142f2:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   142f6:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   142f8:	4658      	mov	r0, fp
   142fa:	616b      	str	r3, [r5, #20]
   142fc:	f007 fe37 	bl	1bf6e <atomic_get>
			if (atomic_test_bit(params->flags,
   14300:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14302:	f3c0 0380 	ubfx	r3, r0, #2, #1
   14306:	d51e      	bpl.n	14346 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   14308:	4631      	mov	r1, r6
   1430a:	4638      	mov	r0, r7
   1430c:	9301      	str	r3, [sp, #4]
   1430e:	f7fe f9a1 	bl	12654 <bt_att_req_cancel>
}
   14312:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14314:	b1cc      	cbz	r4, 1434a <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14316:	f114 0114 	adds.w	r1, r4, #20
   1431a:	d002      	beq.n	14322 <bt_gatt_unsubscribe+0xde>
	return node->next;
   1431c:	6961      	ldr	r1, [r4, #20]
   1431e:	b101      	cbz	r1, 14322 <bt_gatt_unsubscribe+0xde>
   14320:	3914      	subs	r1, #20
   14322:	4625      	mov	r5, r4
   14324:	460c      	mov	r4, r1
   14326:	e7c4      	b.n	142b2 <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   14328:	4288      	cmp	r0, r1
	parent->next = child;
   1432a:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   1432e:	bf08      	it	eq
   14330:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   14334:	e7df      	b.n	142f6 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   14336:	892d      	ldrh	r5, [r5, #8]
   14338:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   1433a:	4689      	mov	r9, r1
   1433c:	4285      	cmp	r5, r0
   1433e:	bf08      	it	eq
   14340:	f04f 0a01 	moveq.w	sl, #1
   14344:	e7e6      	b.n	14314 <bt_gatt_unsubscribe+0xd0>
			found = true;
   14346:	2301      	movs	r3, #1
   14348:	e7e4      	b.n	14314 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1434a:	4621      	mov	r1, r4
   1434c:	e7e9      	b.n	14322 <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   1434e:	4633      	mov	r3, r6
   14350:	4652      	mov	r2, sl
   14352:	4638      	mov	r0, r7
   14354:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   14356:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   1435a:	b003      	add	sp, #12
   1435c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14360:	f7fe be70 	b.w	13044 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   14364:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14368:	e792      	b.n	14290 <bt_gatt_unsubscribe+0x4c>
   1436a:	bf00      	nop
   1436c:	00020f85 	.word	0x00020f85
   14370:	0001ecfc 	.word	0x0001ecfc

00014374 <bt_gatt_mult_notification>:
{
   14374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14378:	b085      	sub	sp, #20
   1437a:	4680      	mov	r8, r0
   1437c:	460c      	mov	r4, r1
   1437e:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   14380:	f7fe fa04 	bl	1278c <gatt_sub_find>
	if (!sub) {
   14384:	4606      	mov	r6, r0
   14386:	b1d0      	cbz	r0, 143be <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   14388:	464a      	mov	r2, r9
   1438a:	4621      	mov	r1, r4
   1438c:	a801      	add	r0, sp, #4
   1438e:	f008 f8d5 	bl	1c53c <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   14392:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14396:	2b04      	cmp	r3, #4
   14398:	d911      	bls.n	143be <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1439a:	2104      	movs	r1, #4
   1439c:	eb0d 0001 	add.w	r0, sp, r1
   143a0:	f000 fc38 	bl	14c14 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   143a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   143a8:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   143ac:	4605      	mov	r5, r0
		if (len > buf.len) {
   143ae:	4553      	cmp	r3, sl
   143b0:	d208      	bcs.n	143c4 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   143b2:	464b      	mov	r3, r9
   143b4:	4652      	mov	r2, sl
   143b6:	2145      	movs	r1, #69	; 0x45
   143b8:	4816      	ldr	r0, [pc, #88]	; (14414 <bt_gatt_mult_notification+0xa0>)
   143ba:	f005 fba6 	bl	19b0a <printk>
}
   143be:	b005      	add	sp, #20
   143c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   143c4:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   143c6:	b303      	cbz	r3, 1440a <bt_gatt_mult_notification+0x96>
   143c8:	f1b3 0714 	subs.w	r7, r3, #20
   143cc:	d01d      	beq.n	1440a <bt_gatt_mult_notification+0x96>
	return node->next;
   143ce:	681c      	ldr	r4, [r3, #0]
   143d0:	b104      	cbz	r4, 143d4 <bt_gatt_mult_notification+0x60>
   143d2:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   143d4:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   143d8:	893b      	ldrh	r3, [r7, #8]
   143da:	455b      	cmp	r3, fp
   143dc:	d10b      	bne.n	143f6 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   143de:	4653      	mov	r3, sl
   143e0:	462a      	mov	r2, r5
   143e2:	4639      	mov	r1, r7
   143e4:	4640      	mov	r0, r8
   143e6:	f8d7 c000 	ldr.w	ip, [r7]
   143ea:	47e0      	blx	ip
   143ec:	b918      	cbnz	r0, 143f6 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   143ee:	4639      	mov	r1, r7
   143f0:	4640      	mov	r0, r8
   143f2:	f7ff ff27 	bl	14244 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   143f6:	b144      	cbz	r4, 1440a <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   143f8:	f114 0314 	adds.w	r3, r4, #20
   143fc:	d002      	beq.n	14404 <bt_gatt_mult_notification+0x90>
	return node->next;
   143fe:	6963      	ldr	r3, [r4, #20]
   14400:	b103      	cbz	r3, 14404 <bt_gatt_mult_notification+0x90>
   14402:	3b14      	subs	r3, #20
{
   14404:	4627      	mov	r7, r4
   14406:	461c      	mov	r4, r3
   14408:	e7e6      	b.n	143d8 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   1440a:	4651      	mov	r1, sl
   1440c:	a801      	add	r0, sp, #4
   1440e:	f000 fc01 	bl	14c14 <net_buf_simple_pull_mem>
   14412:	e7be      	b.n	14392 <bt_gatt_mult_notification+0x1e>
   14414:	000210ae 	.word	0x000210ae

00014418 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   14418:	2301      	movs	r3, #1
{
   1441a:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1441c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   14420:	b08e      	sub	sp, #56	; 0x38
   14422:	4605      	mov	r5, r0
	data.conn = conn;
   14424:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14426:	4631      	mov	r1, r6
   14428:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1442a:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1442e:	f006 ff73 	bl	1b318 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14432:	b190      	cbz	r0, 1445a <bt_gatt_connected+0x42>
		if (conn->id) {
   14434:	7a2a      	ldrb	r2, [r5, #8]
   14436:	b30a      	cbz	r2, 1447c <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14438:	ac02      	add	r4, sp, #8
   1443a:	2104      	movs	r1, #4
   1443c:	4620      	mov	r0, r4
   1443e:	f005 faca 	bl	199d6 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14442:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14444:	2124      	movs	r1, #36	; 0x24
   14446:	4a19      	ldr	r2, [pc, #100]	; (144ac <bt_gatt_connected+0x94>)
   14448:	a805      	add	r0, sp, #20
   1444a:	4633      	mov	r3, r6
   1444c:	f7f9 fb5c 	bl	db08 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   14450:	aa05      	add	r2, sp, #20
   14452:	4610      	mov	r0, r2
   14454:	4916      	ldr	r1, [pc, #88]	; (144b0 <bt_gatt_connected+0x98>)
   14456:	f7f6 ff8d 	bl	b374 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1445a:	2001      	movs	r0, #1
   1445c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14460:	4a14      	ldr	r2, [pc, #80]	; (144b4 <bt_gatt_connected+0x9c>)
   14462:	ab03      	add	r3, sp, #12
   14464:	f007 ff4a 	bl	1c2fc <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   14468:	4628      	mov	r0, r5
   1446a:	f7fe f98f 	bl	1278c <gatt_sub_find>
	if (!sub) {
   1446e:	b118      	cbz	r0, 14478 <bt_gatt_connected+0x60>
	return list->head;
   14470:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   14472:	b10c      	cbz	r4, 14478 <bt_gatt_connected+0x60>
   14474:	3c14      	subs	r4, #20
   14476:	b91c      	cbnz	r4, 14480 <bt_gatt_connected+0x68>
}
   14478:	b00e      	add	sp, #56	; 0x38
   1447a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1447c:	9200      	str	r2, [sp, #0]
   1447e:	e7e1      	b.n	14444 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   14480:	4631      	mov	r1, r6
   14482:	7a28      	ldrb	r0, [r5, #8]
   14484:	f006 ff48 	bl	1b318 <bt_addr_le_is_bonded>
   14488:	b158      	cbz	r0, 144a2 <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1448a:	f104 0010 	add.w	r0, r4, #16
   1448e:	f007 fd6e 	bl	1bf6e <atomic_get>
   14492:	0783      	lsls	r3, r0, #30
   14494:	d405      	bmi.n	144a2 <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   14496:	4623      	mov	r3, r4
   14498:	4628      	mov	r0, r5
   1449a:	89a2      	ldrh	r2, [r4, #12]
   1449c:	8961      	ldrh	r1, [r4, #10]
   1449e:	f7fe fdd1 	bl	13044 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   144a2:	f114 0f14 	cmn.w	r4, #20
   144a6:	d0e7      	beq.n	14478 <bt_gatt_connected+0x60>
	return node->next;
   144a8:	6964      	ldr	r4, [r4, #20]
   144aa:	e7e2      	b.n	14472 <bt_gatt_connected+0x5a>
   144ac:	00020ff4 	.word	0x00020ff4
   144b0:	0001343d 	.word	0x0001343d
   144b4:	0001380d 	.word	0x0001380d

000144b8 <db_hash_read>:
{
   144b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144ba:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   144bc:	4810      	ldr	r0, [pc, #64]	; (14500 <db_hash_read+0x48>)
{
   144be:	4615      	mov	r5, r2
   144c0:	461f      	mov	r7, r3
   144c2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   144c6:	f004 fc1d 	bl	18d04 <k_delayed_work_cancel>
	if (!err) {
   144ca:	b910      	cbnz	r0, 144d2 <db_hash_read+0x1a>
		db_hash_gen(true);
   144cc:	2001      	movs	r0, #1
   144ce:	f7fe ff25 	bl	1331c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   144d2:	2101      	movs	r1, #1
   144d4:	4620      	mov	r0, r4
   144d6:	f007 ffd9 	bl	1c48c <bt_gatt_change_aware>
	if (offset > value_len) {
   144da:	2e10      	cmp	r6, #16
   144dc:	d80c      	bhi.n	144f8 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   144de:	f1c6 0410 	rsb	r4, r6, #16
   144e2:	42bc      	cmp	r4, r7
   144e4:	bfa8      	it	ge
   144e6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   144e8:	4906      	ldr	r1, [pc, #24]	; (14504 <db_hash_read+0x4c>)
   144ea:	4622      	mov	r2, r4
   144ec:	4628      	mov	r0, r5
   144ee:	4431      	add	r1, r6
   144f0:	f006 fd4b 	bl	1af8a <memcpy>
}
   144f4:	4620      	mov	r0, r4
   144f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   144f8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   144fc:	e7fa      	b.n	144f4 <db_hash_read+0x3c>
   144fe:	bf00      	nop
   14500:	20009a58 	.word	0x20009a58
   14504:	2000c5f9 	.word	0x2000c5f9

00014508 <bt_gatt_store_ccc>:
	save.count = 0;
   14508:	2300      	movs	r3, #0
{
   1450a:	b570      	push	{r4, r5, r6, lr}
   1450c:	4604      	mov	r4, r0
   1450e:	b0c0      	sub	sp, #256	; 0x100
   14510:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   14512:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   14514:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   14518:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1451a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1451e:	2001      	movs	r0, #1
   14520:	4a13      	ldr	r2, [pc, #76]	; (14570 <bt_gatt_store_ccc+0x68>)
   14522:	ab0d      	add	r3, sp, #52	; 0x34
   14524:	f007 feea 	bl	1c2fc <bt_gatt_foreach_attr>
	if (id) {
   14528:	b1ec      	cbz	r4, 14566 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1452a:	ae03      	add	r6, sp, #12
   1452c:	4622      	mov	r2, r4
   1452e:	2104      	movs	r1, #4
   14530:	4630      	mov	r0, r6
   14532:	f005 fa50 	bl	199d6 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   14536:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   14538:	4a0e      	ldr	r2, [pc, #56]	; (14574 <bt_gatt_store_ccc+0x6c>)
   1453a:	462b      	mov	r3, r5
   1453c:	2124      	movs	r1, #36	; 0x24
   1453e:	a804      	add	r0, sp, #16
   14540:	f7f9 fae2 	bl	db08 <bt_settings_encode_key>
	if (save.count) {
   14544:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   14546:	b182      	cbz	r2, 1456a <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   14548:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1454a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1454c:	a804      	add	r0, sp, #16
   1454e:	f7f6 fec5 	bl	b2dc <settings_save_one>
	if (err) {
   14552:	4604      	mov	r4, r0
   14554:	b120      	cbz	r0, 14560 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   14556:	4602      	mov	r2, r0
   14558:	2145      	movs	r1, #69	; 0x45
   1455a:	4807      	ldr	r0, [pc, #28]	; (14578 <bt_gatt_store_ccc+0x70>)
   1455c:	f005 fad5 	bl	19b0a <printk>
}
   14560:	4620      	mov	r0, r4
   14562:	b040      	add	sp, #256	; 0x100
   14564:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   14566:	9400      	str	r4, [sp, #0]
   14568:	e7e6      	b.n	14538 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1456a:	4611      	mov	r1, r2
   1456c:	e7ee      	b.n	1454c <bt_gatt_store_ccc+0x44>
   1456e:	bf00      	nop
   14570:	00012ccd 	.word	0x00012ccd
   14574:	00020ff4 	.word	0x00020ff4
   14578:	000210cc 	.word	0x000210cc

0001457c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14580:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14582:	4603      	mov	r3, r0
   14584:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14588:	2001      	movs	r0, #1
{
   1458a:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1458c:	4a52      	ldr	r2, [pc, #328]	; (146d8 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1458e:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14592:	f007 feb3 	bl	1c2fc <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14596:	4629      	mov	r1, r5
   14598:	7a20      	ldrb	r0, [r4, #8]
   1459a:	f006 febd 	bl	1b318 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1459e:	b378      	cbz	r0, 14600 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   145a0:	4629      	mov	r1, r5
   145a2:	7a20      	ldrb	r0, [r4, #8]
   145a4:	f7ff ffb0 	bl	14508 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   145a8:	4620      	mov	r0, r4
   145aa:	f7fe f8b1 	bl	12710 <find_cf_cfg>
	if (!cfg) {
   145ae:	4606      	mov	r6, r0
   145b0:	2800      	cmp	r0, #0
   145b2:	d05e      	beq.n	14672 <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   145b4:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   145b6:	3608      	adds	r6, #8
		if (conn->id) {
   145b8:	2a00      	cmp	r2, #0
   145ba:	d05c      	beq.n	14676 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   145bc:	af02      	add	r7, sp, #8
   145be:	2104      	movs	r1, #4
   145c0:	4638      	mov	r0, r7
   145c2:	f005 fa08 	bl	199d6 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   145c6:	462b      	mov	r3, r5
   145c8:	9700      	str	r7, [sp, #0]
   145ca:	2124      	movs	r1, #36	; 0x24
   145cc:	4a43      	ldr	r2, [pc, #268]	; (146dc <bt_gatt_disconnected+0x160>)
   145ce:	a803      	add	r0, sp, #12
   145d0:	f7f9 fa9a 	bl	db08 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   145d4:	7a23      	ldrb	r3, [r4, #8]
   145d6:	2701      	movs	r7, #1
   145d8:	b93b      	cbnz	r3, 145ea <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   145da:	2300      	movs	r3, #0
   145dc:	2124      	movs	r1, #36	; 0x24
   145de:	9300      	str	r3, [sp, #0]
   145e0:	4a3e      	ldr	r2, [pc, #248]	; (146dc <bt_gatt_disconnected+0x160>)
   145e2:	462b      	mov	r3, r5
   145e4:	a803      	add	r0, sp, #12
   145e6:	f7f9 fa8f 	bl	db08 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   145ea:	463a      	mov	r2, r7
   145ec:	4631      	mov	r1, r6
   145ee:	a803      	add	r0, sp, #12
   145f0:	f7f6 fe74 	bl	b2dc <settings_save_one>
	if (err) {
   145f4:	4602      	mov	r2, r0
   145f6:	b118      	cbz	r0, 14600 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   145f8:	2145      	movs	r1, #69	; 0x45
   145fa:	4839      	ldr	r0, [pc, #228]	; (146e0 <bt_gatt_disconnected+0x164>)
   145fc:	f005 fa85 	bl	19b0a <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14600:	4629      	mov	r1, r5
   14602:	7a20      	ldrb	r0, [r4, #8]
   14604:	f006 fe88 	bl	1b318 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14608:	b150      	cbz	r0, 14620 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   1460a:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1460c:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   14610:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14614:	2001      	movs	r0, #1
   14616:	4a33      	ldr	r2, [pc, #204]	; (146e4 <bt_gatt_disconnected+0x168>)
   14618:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   1461a:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1461c:	f007 fe6e 	bl	1c2fc <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   14620:	4620      	mov	r0, r4
   14622:	f7fe f8b3 	bl	1278c <gatt_sub_find>
	if (!sub) {
   14626:	4607      	mov	r7, r0
   14628:	b3b0      	cbz	r0, 14698 <bt_gatt_disconnected+0x11c>
	return list->head;
   1462a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1462c:	b3a3      	cbz	r3, 14698 <bt_gatt_disconnected+0x11c>
   1462e:	f1b3 0b14 	subs.w	fp, r3, #20
   14632:	d031      	beq.n	14698 <bt_gatt_disconnected+0x11c>
	return node->next;
   14634:	681e      	ldr	r6, [r3, #0]
   14636:	b106      	cbz	r6, 1463a <bt_gatt_disconnected+0xbe>
   14638:	3e14      	subs	r6, #20
   1463a:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   1463e:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14640:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   14644:	4629      	mov	r1, r5
   14646:	7a20      	ldrb	r0, [r4, #8]
   14648:	f006 fe66 	bl	1b318 <bt_addr_le_is_bonded>
   1464c:	b9a8      	cbnz	r0, 1467a <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   1464e:	465b      	mov	r3, fp
   14650:	4642      	mov	r2, r8
   14652:	4639      	mov	r1, r7
   14654:	4620      	mov	r0, r4
			params->value = 0U;
   14656:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1465a:	f007 fcb0 	bl	1bfbe <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1465e:	b1de      	cbz	r6, 14698 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14660:	f116 0214 	adds.w	r2, r6, #20
   14664:	d002      	beq.n	1466c <bt_gatt_disconnected+0xf0>
	return node->next;
   14666:	6972      	ldr	r2, [r6, #20]
   14668:	b102      	cbz	r2, 1466c <bt_gatt_disconnected+0xf0>
   1466a:	3a14      	subs	r2, #20
   1466c:	46b3      	mov	fp, r6
   1466e:	4616      	mov	r6, r2
   14670:	e7e8      	b.n	14644 <bt_gatt_disconnected+0xc8>
		len = 0;
   14672:	4607      	mov	r7, r0
   14674:	e7b1      	b.n	145da <bt_gatt_disconnected+0x5e>
   14676:	2701      	movs	r7, #1
   14678:	e7af      	b.n	145da <bt_gatt_disconnected+0x5e>
   1467a:	f10b 0010 	add.w	r0, fp, #16
   1467e:	f007 fc76 	bl	1bf6e <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   14682:	07c3      	lsls	r3, r0, #31
   14684:	d4e3      	bmi.n	1464e <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   14686:	787b      	ldrb	r3, [r7, #1]
   14688:	b11b      	cbz	r3, 14692 <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1468a:	4629      	mov	r1, r5
   1468c:	4648      	mov	r0, r9
   1468e:	f007 fc52 	bl	1bf36 <bt_addr_le_copy>
			prev = &params->node;
   14692:	f10b 0814 	add.w	r8, fp, #20
   14696:	e7e2      	b.n	1465e <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   14698:	4620      	mov	r0, r4
   1469a:	f7fe f839 	bl	12710 <find_cf_cfg>
	if (!cfg) {
   1469e:	4606      	mov	r6, r0
   146a0:	b1b8      	cbz	r0, 146d2 <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   146a2:	4629      	mov	r1, r5
   146a4:	7a20      	ldrb	r0, [r4, #8]
   146a6:	f006 fe37 	bl	1b318 <bt_addr_le_is_bonded>
   146aa:	b928      	cbnz	r0, 146b8 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   146ac:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   146ae:	b00d      	add	sp, #52	; 0x34
   146b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   146b4:	f007 bc6a 	b.w	1bf8c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   146b8:	1c70      	adds	r0, r6, #1
   146ba:	4629      	mov	r1, r5
   146bc:	f007 fc3b 	bl	1bf36 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   146c0:	360c      	adds	r6, #12
   146c2:	e8d6 3fef 	ldaex	r3, [r6]
   146c6:	f023 0302 	bic.w	r3, r3, #2
   146ca:	e8c6 3fe2 	stlex	r2, r3, [r6]
   146ce:	2a00      	cmp	r2, #0
   146d0:	d1f7      	bne.n	146c2 <bt_gatt_disconnected+0x146>
}
   146d2:	b00d      	add	sp, #52	; 0x34
   146d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d8:	00012f65 	.word	0x00012f65
   146dc:	00021120 	.word	0x00021120
   146e0:	000210ef 	.word	0x000210ef
   146e4:	00012c19 	.word	0x00012c19

000146e8 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   146e8:	b570      	push	{r4, r5, r6, lr}
   146ea:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   146ec:	2400      	movs	r4, #0
   146ee:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   146f0:	4b09      	ldr	r3, [pc, #36]	; (14718 <bt_smp_accept+0x30>)
   146f2:	fb06 f504 	mul.w	r5, r6, r4
   146f6:	58e8      	ldr	r0, [r5, r3]
   146f8:	b148      	cbz	r0, 1470e <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   146fa:	3401      	adds	r4, #1
   146fc:	2c0a      	cmp	r4, #10
   146fe:	d1f8      	bne.n	146f2 <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   14700:	4806      	ldr	r0, [pc, #24]	; (1471c <bt_smp_accept+0x34>)
   14702:	2145      	movs	r1, #69	; 0x45
   14704:	f005 fa01 	bl	19b0a <printk>
   14708:	f06f 000b 	mvn.w	r0, #11
   1470c:	e003      	b.n	14716 <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   1470e:	4a04      	ldr	r2, [pc, #16]	; (14720 <bt_smp_accept+0x38>)
   14710:	442b      	add	r3, r5
   14712:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   14714:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   14716:	bd70      	pop	{r4, r5, r6, pc}
   14718:	20009ae0 	.word	0x20009ae0
   1471c:	00021131 	.word	0x00021131
   14720:	0001e11c 	.word	0x0001e11c

00014724 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   14724:	222c      	movs	r2, #44	; 0x2c
   14726:	4b02      	ldr	r3, [pc, #8]	; (14730 <net_buf_pool_get+0xc>)
   14728:	fb02 3000 	mla	r0, r2, r0, r3
   1472c:	4770      	bx	lr
   1472e:	bf00      	nop
   14730:	200086b0 	.word	0x200086b0

00014734 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   14734:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14736:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   14738:	4b04      	ldr	r3, [pc, #16]	; (1474c <net_buf_id+0x18>)
   1473a:	fb01 3302 	mla	r3, r1, r2, r3
   1473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14740:	1ac0      	subs	r0, r0, r3
}
   14742:	4b03      	ldr	r3, [pc, #12]	; (14750 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   14744:	10c0      	asrs	r0, r0, #3
}
   14746:	4358      	muls	r0, r3
   14748:	4770      	bx	lr
   1474a:	bf00      	nop
   1474c:	200086b0 	.word	0x200086b0
   14750:	aaaaaaab 	.word	0xaaaaaaab

00014754 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   14754:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14756:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14758:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1475a:	4b09      	ldr	r3, [pc, #36]	; (14780 <fixed_data_alloc+0x2c>)
   1475c:	fb04 3302 	mla	r3, r4, r2, r3
   14760:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   14762:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14764:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   14766:	6823      	ldr	r3, [r4, #0]
   14768:	429a      	cmp	r2, r3
   1476a:	bf94      	ite	ls
   1476c:	600a      	strls	r2, [r1, #0]
   1476e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   14770:	f7ff ffe0 	bl	14734 <net_buf_id>
   14774:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   14778:	fb02 3000 	mla	r0, r2, r0, r3
   1477c:	bd10      	pop	{r4, pc}
   1477e:	bf00      	nop
   14780:	200086b0 	.word	0x200086b0

00014784 <net_buf_reset>:
{
   14784:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   14786:	7943      	ldrb	r3, [r0, #5]
{
   14788:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1478a:	b143      	cbz	r3, 1479e <net_buf_reset+0x1a>
   1478c:	490c      	ldr	r1, [pc, #48]	; (147c0 <net_buf_reset+0x3c>)
   1478e:	480d      	ldr	r0, [pc, #52]	; (147c4 <net_buf_reset+0x40>)
   14790:	224f      	movs	r2, #79	; 0x4f
   14792:	f005 f9ba 	bl	19b0a <printk>
   14796:	214f      	movs	r1, #79	; 0x4f
   14798:	4809      	ldr	r0, [pc, #36]	; (147c0 <net_buf_reset+0x3c>)
   1479a:	f005 fc5c 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1479e:	6823      	ldr	r3, [r4, #0]
   147a0:	b143      	cbz	r3, 147b4 <net_buf_reset+0x30>
   147a2:	4907      	ldr	r1, [pc, #28]	; (147c0 <net_buf_reset+0x3c>)
   147a4:	4807      	ldr	r0, [pc, #28]	; (147c4 <net_buf_reset+0x40>)
   147a6:	2250      	movs	r2, #80	; 0x50
   147a8:	f005 f9af 	bl	19b0a <printk>
   147ac:	2150      	movs	r1, #80	; 0x50
   147ae:	4804      	ldr	r0, [pc, #16]	; (147c0 <net_buf_reset+0x3c>)
   147b0:	f005 fc51 	bl	1a056 <assert_post_action>
	buf->len  = 0U;
   147b4:	2300      	movs	r3, #0
   147b6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   147b8:	6923      	ldr	r3, [r4, #16]
   147ba:	60a3      	str	r3, [r4, #8]
}
   147bc:	bd10      	pop	{r4, pc}
   147be:	bf00      	nop
   147c0:	00021162 	.word	0x00021162
   147c4:	0001ecfc 	.word	0x0001ecfc

000147c8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   147c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147cc:	4605      	mov	r5, r0
   147ce:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   147d0:	4610      	mov	r0, r2
   147d2:	4619      	mov	r1, r3
{
   147d4:	4691      	mov	r9, r2
   147d6:	4698      	mov	r8, r3
   147d8:	4617      	mov	r7, r2
   147da:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   147dc:	f008 fde8 	bl	1d3b0 <z_timeout_end_calc>
   147e0:	4682      	mov	sl, r0
   147e2:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   147e4:	b945      	cbnz	r5, 147f8 <net_buf_alloc_len+0x30>
   147e6:	494a      	ldr	r1, [pc, #296]	; (14910 <net_buf_alloc_len+0x148>)
   147e8:	484a      	ldr	r0, [pc, #296]	; (14914 <net_buf_alloc_len+0x14c>)
   147ea:	22ed      	movs	r2, #237	; 0xed
   147ec:	f005 f98d 	bl	19b0a <printk>
   147f0:	21ed      	movs	r1, #237	; 0xed
   147f2:	4847      	ldr	r0, [pc, #284]	; (14910 <net_buf_alloc_len+0x148>)
   147f4:	f005 fc2f 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   147f8:	f04f 0320 	mov.w	r3, #32
   147fc:	f3ef 8111 	mrs	r1, BASEPRI
   14800:	f383 8811 	msr	BASEPRI, r3
   14804:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   14808:	8beb      	ldrh	r3, [r5, #30]
   1480a:	2b00      	cmp	r3, #0
   1480c:	d055      	beq.n	148ba <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1480e:	8baa      	ldrh	r2, [r5, #28]
   14810:	429a      	cmp	r2, r3
   14812:	d93e      	bls.n	14892 <net_buf_alloc_len+0xca>
   14814:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   14816:	2200      	movs	r2, #0
   14818:	2300      	movs	r3, #0
   1481a:	4628      	mov	r0, r5
   1481c:	f002 ff34 	bl	17688 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   14820:	9900      	ldr	r1, [sp, #0]
   14822:	4604      	mov	r4, r0
   14824:	2800      	cmp	r0, #0
   14826:	d034      	beq.n	14892 <net_buf_alloc_len+0xca>
	__asm__ volatile(
   14828:	f381 8811 	msr	BASEPRI, r1
   1482c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   14830:	9d01      	ldr	r5, [sp, #4]
   14832:	2d00      	cmp	r5, #0
   14834:	d069      	beq.n	1490a <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   14836:	ea58 0309 	orrs.w	r3, r8, r9
   1483a:	d00f      	beq.n	1485c <net_buf_alloc_len+0x94>
   1483c:	f1b8 3fff 	cmp.w	r8, #4294967295
   14840:	bf08      	it	eq
   14842:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   14846:	d009      	beq.n	1485c <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   14848:	f004 fd08 	bl	1925c <z_tick_get>
   1484c:	ebba 0700 	subs.w	r7, sl, r0
   14850:	eb6b 0601 	sbc.w	r6, fp, r1
   14854:	2e00      	cmp	r6, #0
   14856:	bfbc      	itt	lt
   14858:	2700      	movlt	r7, #0
   1485a:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   1485c:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14860:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   14862:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14918 <net_buf_alloc_len+0x150>
   14866:	463a      	mov	r2, r7
   14868:	fb09 8303 	mla	r3, r9, r3, r8
   1486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1486e:	4620      	mov	r0, r4
   14870:	681b      	ldr	r3, [r3, #0]
   14872:	a901      	add	r1, sp, #4
   14874:	f8d3 a000 	ldr.w	sl, [r3]
   14878:	4633      	mov	r3, r6
   1487a:	47d0      	blx	sl
   1487c:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1487e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   14880:	bb58      	cbnz	r0, 148da <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   14882:	79a0      	ldrb	r0, [r4, #6]
   14884:	4621      	mov	r1, r4
   14886:	fb00 8009 	mla	r0, r0, r9, r8
   1488a:	f008 fcc6 	bl	1d21a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1488e:	4634      	mov	r4, r6
}
   14890:	e01f      	b.n	148d2 <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   14892:	8beb      	ldrh	r3, [r5, #30]
   14894:	1e5a      	subs	r2, r3, #1
   14896:	83ea      	strh	r2, [r5, #30]
   14898:	f381 8811 	msr	BASEPRI, r1
   1489c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   148a0:	2018      	movs	r0, #24
   148a2:	8bac      	ldrh	r4, [r5, #28]
   148a4:	1ae3      	subs	r3, r4, r3
   148a6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   148a8:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   148ac:	481a      	ldr	r0, [pc, #104]	; (14918 <net_buf_alloc_len+0x150>)
   148ae:	4b1b      	ldr	r3, [pc, #108]	; (1491c <net_buf_alloc_len+0x154>)
   148b0:	1a2d      	subs	r5, r5, r0
   148b2:	10ad      	asrs	r5, r5, #2
   148b4:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   148b6:	71a5      	strb	r5, [r4, #6]
		goto success;
   148b8:	e7ba      	b.n	14830 <net_buf_alloc_len+0x68>
   148ba:	f381 8811 	msr	BASEPRI, r1
   148be:	f3bf 8f6f 	isb	sy
   148c2:	464a      	mov	r2, r9
   148c4:	4643      	mov	r3, r8
   148c6:	4628      	mov	r0, r5
   148c8:	f002 fede 	bl	17688 <z_impl_k_queue_get>
	if (!buf) {
   148cc:	4604      	mov	r4, r0
   148ce:	2800      	cmp	r0, #0
   148d0:	d1ae      	bne.n	14830 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   148d2:	4620      	mov	r0, r4
   148d4:	b003      	add	sp, #12
   148d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   148da:	9b01      	ldr	r3, [sp, #4]
   148dc:	429d      	cmp	r5, r3
   148de:	d90a      	bls.n	148f6 <net_buf_alloc_len+0x12e>
   148e0:	490b      	ldr	r1, [pc, #44]	; (14910 <net_buf_alloc_len+0x148>)
   148e2:	480c      	ldr	r0, [pc, #48]	; (14914 <net_buf_alloc_len+0x14c>)
   148e4:	f240 124d 	movw	r2, #333	; 0x14d
   148e8:	f005 f90f 	bl	19b0a <printk>
   148ec:	f240 114d 	movw	r1, #333	; 0x14d
   148f0:	4807      	ldr	r0, [pc, #28]	; (14910 <net_buf_alloc_len+0x148>)
   148f2:	f005 fbb0 	bl	1a056 <assert_post_action>
	buf->frags = NULL;
   148f6:	2300      	movs	r3, #0
   148f8:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   148fa:	2301      	movs	r3, #1
   148fc:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   148fe:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   14900:	4620      	mov	r0, r4
	buf->size  = size;
   14902:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   14904:	f7ff ff3e 	bl	14784 <net_buf_reset>
	return buf;
   14908:	e7e3      	b.n	148d2 <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   1490a:	6125      	str	r5, [r4, #16]
   1490c:	e7f3      	b.n	148f6 <net_buf_alloc_len+0x12e>
   1490e:	bf00      	nop
   14910:	00021162 	.word	0x00021162
   14914:	0001ecfc 	.word	0x0001ecfc
   14918:	200086b0 	.word	0x200086b0
   1491c:	ba2e8ba3 	.word	0xba2e8ba3

00014920 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   14920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14924:	4606      	mov	r6, r0
   14926:	f002 feaf 	bl	17688 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1492a:	4605      	mov	r5, r0
   1492c:	b140      	cbz	r0, 14940 <net_buf_get+0x20>
   1492e:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   14930:	4f11      	ldr	r7, [pc, #68]	; (14978 <net_buf_get+0x58>)
   14932:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1497c <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   14936:	7963      	ldrb	r3, [r4, #5]
   14938:	f013 0301 	ands.w	r3, r3, #1
   1493c:	d103      	bne.n	14946 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1493e:	6023      	str	r3, [r4, #0]

	return buf;
}
   14940:	4628      	mov	r0, r5
   14942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14946:	2200      	movs	r2, #0
   14948:	2300      	movs	r3, #0
   1494a:	4630      	mov	r0, r6
   1494c:	f002 fe9c 	bl	17688 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   14950:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   14952:	b950      	cbnz	r0, 1496a <net_buf_get+0x4a>
   14954:	4639      	mov	r1, r7
   14956:	4640      	mov	r0, r8
   14958:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1495c:	f005 f8d5 	bl	19b0a <printk>
   14960:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   14964:	4638      	mov	r0, r7
   14966:	f005 fb76 	bl	1a056 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1496a:	7963      	ldrb	r3, [r4, #5]
   1496c:	f023 0301 	bic.w	r3, r3, #1
   14970:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   14972:	6824      	ldr	r4, [r4, #0]
   14974:	e7df      	b.n	14936 <net_buf_get+0x16>
   14976:	bf00      	nop
   14978:	00021162 	.word	0x00021162
   1497c:	0001ecfc 	.word	0x0001ecfc

00014980 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   14980:	b538      	push	{r3, r4, r5, lr}
   14982:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   14984:	4604      	mov	r4, r0
   14986:	b950      	cbnz	r0, 1499e <net_buf_simple_reserve+0x1e>
   14988:	490d      	ldr	r1, [pc, #52]	; (149c0 <net_buf_simple_reserve+0x40>)
   1498a:	480e      	ldr	r0, [pc, #56]	; (149c4 <net_buf_simple_reserve+0x44>)
   1498c:	f240 12bb 	movw	r2, #443	; 0x1bb
   14990:	f005 f8bb 	bl	19b0a <printk>
   14994:	f240 11bb 	movw	r1, #443	; 0x1bb
   14998:	4809      	ldr	r0, [pc, #36]	; (149c0 <net_buf_simple_reserve+0x40>)
   1499a:	f005 fb5c 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1499e:	88a3      	ldrh	r3, [r4, #4]
   149a0:	b153      	cbz	r3, 149b8 <net_buf_simple_reserve+0x38>
   149a2:	4907      	ldr	r1, [pc, #28]	; (149c0 <net_buf_simple_reserve+0x40>)
   149a4:	4807      	ldr	r0, [pc, #28]	; (149c4 <net_buf_simple_reserve+0x44>)
   149a6:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   149aa:	f005 f8ae 	bl	19b0a <printk>
   149ae:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   149b2:	4803      	ldr	r0, [pc, #12]	; (149c0 <net_buf_simple_reserve+0x40>)
   149b4:	f005 fb4f 	bl	1a056 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   149b8:	68a3      	ldr	r3, [r4, #8]
   149ba:	442b      	add	r3, r5
   149bc:	6023      	str	r3, [r4, #0]
}
   149be:	bd38      	pop	{r3, r4, r5, pc}
   149c0:	00021162 	.word	0x00021162
   149c4:	0001ecfc 	.word	0x0001ecfc

000149c8 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   149c8:	b538      	push	{r3, r4, r5, lr}
   149ca:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   149cc:	4605      	mov	r5, r0
   149ce:	b950      	cbnz	r0, 149e6 <net_buf_put+0x1e>
   149d0:	4912      	ldr	r1, [pc, #72]	; (14a1c <net_buf_put+0x54>)
   149d2:	4813      	ldr	r0, [pc, #76]	; (14a20 <net_buf_put+0x58>)
   149d4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   149d8:	f005 f897 	bl	19b0a <printk>
   149dc:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   149e0:	480e      	ldr	r0, [pc, #56]	; (14a1c <net_buf_put+0x54>)
   149e2:	f005 fb38 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   149e6:	b954      	cbnz	r4, 149fe <net_buf_put+0x36>
   149e8:	490c      	ldr	r1, [pc, #48]	; (14a1c <net_buf_put+0x54>)
   149ea:	480d      	ldr	r0, [pc, #52]	; (14a20 <net_buf_put+0x58>)
   149ec:	f240 12f9 	movw	r2, #505	; 0x1f9
   149f0:	f005 f88b 	bl	19b0a <printk>
   149f4:	f240 11f9 	movw	r1, #505	; 0x1f9
   149f8:	4808      	ldr	r0, [pc, #32]	; (14a1c <net_buf_put+0x54>)
   149fa:	f005 fb2c 	bl	1a056 <assert_post_action>
{
   149fe:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   14a00:	6811      	ldr	r1, [r2, #0]
   14a02:	b929      	cbnz	r1, 14a10 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   14a04:	4621      	mov	r1, r4
   14a06:	4628      	mov	r0, r5
}
   14a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   14a0c:	f002 bde8 	b.w	175e0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   14a10:	7953      	ldrb	r3, [r2, #5]
   14a12:	f043 0301 	orr.w	r3, r3, #1
   14a16:	7153      	strb	r3, [r2, #5]
   14a18:	460a      	mov	r2, r1
   14a1a:	e7f1      	b.n	14a00 <net_buf_put+0x38>
   14a1c:	00021162 	.word	0x00021162
   14a20:	0001ecfc 	.word	0x0001ecfc

00014a24 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   14a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   14a28:	4605      	mov	r5, r0
   14a2a:	b328      	cbz	r0, 14a78 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   14a2c:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   14a2e:	f04f 082c 	mov.w	r8, #44	; 0x2c
   14a32:	4e1b      	ldr	r6, [pc, #108]	; (14aa0 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   14a34:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   14a36:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   14a38:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   14a3a:	3b01      	subs	r3, #1
   14a3c:	b2db      	uxtb	r3, r3
   14a3e:	7123      	strb	r3, [r4, #4]
   14a40:	b9c3      	cbnz	r3, 14a74 <net_buf_unref+0x50>
		if (buf->__buf) {
   14a42:	6921      	ldr	r1, [r4, #16]
   14a44:	b159      	cbz	r1, 14a5e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   14a46:	7963      	ldrb	r3, [r4, #5]
   14a48:	079b      	lsls	r3, r3, #30
   14a4a:	d407      	bmi.n	14a5c <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14a4c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   14a4e:	4620      	mov	r0, r4
   14a50:	fb08 6303 	mla	r3, r8, r3, r6
   14a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14a56:	681b      	ldr	r3, [r3, #0]
   14a58:	689b      	ldr	r3, [r3, #8]
   14a5a:	4798      	blx	r3
			buf->__buf = NULL;
   14a5c:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   14a5e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   14a60:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   14a62:	fb08 6300 	mla	r3, r8, r0, r6
   14a66:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   14a68:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   14a6a:	b193      	cbz	r3, 14a92 <net_buf_unref+0x6e>
			pool->destroy(buf);
   14a6c:	4620      	mov	r0, r4
   14a6e:	4798      	blx	r3
	while (buf) {
   14a70:	2d00      	cmp	r5, #0
   14a72:	d1df      	bne.n	14a34 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   14a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   14a78:	490a      	ldr	r1, [pc, #40]	; (14aa4 <net_buf_unref+0x80>)
   14a7a:	480b      	ldr	r0, [pc, #44]	; (14aa8 <net_buf_unref+0x84>)
   14a7c:	f44f 7202 	mov.w	r2, #520	; 0x208
   14a80:	f005 f843 	bl	19b0a <printk>
}
   14a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   14a88:	f44f 7102 	mov.w	r1, #520	; 0x208
   14a8c:	4805      	ldr	r0, [pc, #20]	; (14aa4 <net_buf_unref+0x80>)
   14a8e:	f005 bae2 	b.w	1a056 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   14a92:	4621      	mov	r1, r4
   14a94:	fb00 6008 	mla	r0, r0, r8, r6
   14a98:	f008 fbbf 	bl	1d21a <k_queue_prepend>
}
   14a9c:	e7e8      	b.n	14a70 <net_buf_unref+0x4c>
   14a9e:	bf00      	nop
   14aa0:	200086b0 	.word	0x200086b0
   14aa4:	00021162 	.word	0x00021162
   14aa8:	0001ecfc 	.word	0x0001ecfc

00014aac <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   14aac:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   14aae:	4604      	mov	r4, r0
   14ab0:	b950      	cbnz	r0, 14ac8 <net_buf_ref+0x1c>
   14ab2:	4908      	ldr	r1, [pc, #32]	; (14ad4 <net_buf_ref+0x28>)
   14ab4:	4808      	ldr	r0, [pc, #32]	; (14ad8 <net_buf_ref+0x2c>)
   14ab6:	f240 2237 	movw	r2, #567	; 0x237
   14aba:	f005 f826 	bl	19b0a <printk>
   14abe:	f240 2137 	movw	r1, #567	; 0x237
   14ac2:	4804      	ldr	r0, [pc, #16]	; (14ad4 <net_buf_ref+0x28>)
   14ac4:	f005 fac7 	bl	1a056 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   14ac8:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   14aca:	4620      	mov	r0, r4
	buf->ref++;
   14acc:	3301      	adds	r3, #1
   14ace:	7123      	strb	r3, [r4, #4]
}
   14ad0:	bd10      	pop	{r4, pc}
   14ad2:	bf00      	nop
   14ad4:	00021162 	.word	0x00021162
   14ad8:	0001ecfc 	.word	0x0001ecfc

00014adc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   14adc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   14ade:	4604      	mov	r4, r0
   14ae0:	b950      	cbnz	r0, 14af8 <net_buf_frag_last+0x1c>
   14ae2:	4908      	ldr	r1, [pc, #32]	; (14b04 <net_buf_frag_last+0x28>)
   14ae4:	4808      	ldr	r0, [pc, #32]	; (14b08 <net_buf_frag_last+0x2c>)
   14ae6:	f44f 721d 	mov.w	r2, #628	; 0x274
   14aea:	f005 f80e 	bl	19b0a <printk>
   14aee:	f44f 711d 	mov.w	r1, #628	; 0x274
   14af2:	4804      	ldr	r0, [pc, #16]	; (14b04 <net_buf_frag_last+0x28>)
   14af4:	f005 faaf 	bl	1a056 <assert_post_action>

	while (buf->frags) {
   14af8:	4620      	mov	r0, r4
   14afa:	6824      	ldr	r4, [r4, #0]
   14afc:	2c00      	cmp	r4, #0
   14afe:	d1fb      	bne.n	14af8 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   14b00:	bd10      	pop	{r4, pc}
   14b02:	bf00      	nop
   14b04:	00021162 	.word	0x00021162
   14b08:	0001ecfc 	.word	0x0001ecfc

00014b0c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   14b0c:	b538      	push	{r3, r4, r5, lr}
   14b0e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   14b10:	4604      	mov	r4, r0
   14b12:	b950      	cbnz	r0, 14b2a <net_buf_frag_insert+0x1e>
   14b14:	490f      	ldr	r1, [pc, #60]	; (14b54 <net_buf_frag_insert+0x48>)
   14b16:	4810      	ldr	r0, [pc, #64]	; (14b58 <net_buf_frag_insert+0x4c>)
   14b18:	f240 227f 	movw	r2, #639	; 0x27f
   14b1c:	f004 fff5 	bl	19b0a <printk>
   14b20:	f240 217f 	movw	r1, #639	; 0x27f
   14b24:	480b      	ldr	r0, [pc, #44]	; (14b54 <net_buf_frag_insert+0x48>)
   14b26:	f005 fa96 	bl	1a056 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   14b2a:	b955      	cbnz	r5, 14b42 <net_buf_frag_insert+0x36>
   14b2c:	4909      	ldr	r1, [pc, #36]	; (14b54 <net_buf_frag_insert+0x48>)
   14b2e:	480a      	ldr	r0, [pc, #40]	; (14b58 <net_buf_frag_insert+0x4c>)
   14b30:	f44f 7220 	mov.w	r2, #640	; 0x280
   14b34:	f004 ffe9 	bl	19b0a <printk>
   14b38:	f44f 7120 	mov.w	r1, #640	; 0x280
   14b3c:	4805      	ldr	r0, [pc, #20]	; (14b54 <net_buf_frag_insert+0x48>)
   14b3e:	f005 fa8a 	bl	1a056 <assert_post_action>

	if (parent->frags) {
   14b42:	6823      	ldr	r3, [r4, #0]
   14b44:	b123      	cbz	r3, 14b50 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   14b46:	4628      	mov	r0, r5
   14b48:	f7ff ffc8 	bl	14adc <net_buf_frag_last>
   14b4c:	6823      	ldr	r3, [r4, #0]
   14b4e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   14b50:	6025      	str	r5, [r4, #0]
}
   14b52:	bd38      	pop	{r3, r4, r5, pc}
   14b54:	00021162 	.word	0x00021162
   14b58:	0001ecfc 	.word	0x0001ecfc

00014b5c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   14b5c:	b538      	push	{r3, r4, r5, lr}
   14b5e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   14b60:	460d      	mov	r5, r1
   14b62:	b951      	cbnz	r1, 14b7a <net_buf_frag_add+0x1e>
   14b64:	490c      	ldr	r1, [pc, #48]	; (14b98 <net_buf_frag_add+0x3c>)
   14b66:	480d      	ldr	r0, [pc, #52]	; (14b9c <net_buf_frag_add+0x40>)
   14b68:	f240 228b 	movw	r2, #651	; 0x28b
   14b6c:	f004 ffcd 	bl	19b0a <printk>
   14b70:	f240 218b 	movw	r1, #651	; 0x28b
   14b74:	4808      	ldr	r0, [pc, #32]	; (14b98 <net_buf_frag_add+0x3c>)
   14b76:	f005 fa6e 	bl	1a056 <assert_post_action>

	if (!head) {
   14b7a:	b924      	cbnz	r4, 14b86 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   14b7c:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   14b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   14b82:	f7ff bf93 	b.w	14aac <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   14b86:	4620      	mov	r0, r4
   14b88:	f7ff ffa8 	bl	14adc <net_buf_frag_last>
   14b8c:	4629      	mov	r1, r5
   14b8e:	f7ff ffbd 	bl	14b0c <net_buf_frag_insert>
}
   14b92:	4620      	mov	r0, r4
   14b94:	bd38      	pop	{r3, r4, r5, pc}
   14b96:	bf00      	nop
   14b98:	00021162 	.word	0x00021162
   14b9c:	0001ecfc 	.word	0x0001ecfc

00014ba0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   14ba0:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   14ba2:	6882      	ldr	r2, [r0, #8]
   14ba4:	6803      	ldr	r3, [r0, #0]
{
   14ba6:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   14ba8:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   14baa:	4299      	cmp	r1, r3
{
   14bac:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   14bae:	d90a      	bls.n	14bc6 <net_buf_simple_push+0x26>
   14bb0:	4908      	ldr	r1, [pc, #32]	; (14bd4 <net_buf_simple_push+0x34>)
   14bb2:	4809      	ldr	r0, [pc, #36]	; (14bd8 <net_buf_simple_push+0x38>)
   14bb4:	f240 4204 	movw	r2, #1028	; 0x404
   14bb8:	f004 ffa7 	bl	19b0a <printk>
   14bbc:	f240 4104 	movw	r1, #1028	; 0x404
   14bc0:	4804      	ldr	r0, [pc, #16]	; (14bd4 <net_buf_simple_push+0x34>)
   14bc2:	f005 fa48 	bl	1a056 <assert_post_action>
	buf->data -= len;
   14bc6:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   14bc8:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   14bca:	1b40      	subs	r0, r0, r5
	buf->len += len;
   14bcc:	440d      	add	r5, r1
	buf->data -= len;
   14bce:	6020      	str	r0, [r4, #0]
	buf->len += len;
   14bd0:	80a5      	strh	r5, [r4, #4]
}
   14bd2:	bd38      	pop	{r3, r4, r5, pc}
   14bd4:	00021162 	.word	0x00021162
   14bd8:	0001ecfc 	.word	0x0001ecfc

00014bdc <net_buf_simple_pull>:
{
   14bdc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   14bde:	8883      	ldrh	r3, [r0, #4]
{
   14be0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   14be2:	428b      	cmp	r3, r1
{
   14be4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   14be6:	d20a      	bcs.n	14bfe <net_buf_simple_pull+0x22>
   14be8:	4908      	ldr	r1, [pc, #32]	; (14c0c <net_buf_simple_pull+0x30>)
   14bea:	4809      	ldr	r0, [pc, #36]	; (14c10 <net_buf_simple_pull+0x34>)
   14bec:	f240 4264 	movw	r2, #1124	; 0x464
   14bf0:	f004 ff8b 	bl	19b0a <printk>
   14bf4:	f240 4164 	movw	r1, #1124	; 0x464
   14bf8:	4804      	ldr	r0, [pc, #16]	; (14c0c <net_buf_simple_pull+0x30>)
   14bfa:	f005 fa2c 	bl	1a056 <assert_post_action>
	buf->len -= len;
   14bfe:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   14c00:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   14c02:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   14c04:	4428      	add	r0, r5
	buf->len -= len;
   14c06:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   14c08:	6020      	str	r0, [r4, #0]
}
   14c0a:	bd38      	pop	{r3, r4, r5, pc}
   14c0c:	00021162 	.word	0x00021162
   14c10:	0001ecfc 	.word	0x0001ecfc

00014c14 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   14c14:	8883      	ldrh	r3, [r0, #4]
{
   14c16:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   14c18:	428b      	cmp	r3, r1
{
   14c1a:	4604      	mov	r4, r0
   14c1c:	460d      	mov	r5, r1
	void *data = buf->data;
   14c1e:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   14c20:	d20a      	bcs.n	14c38 <net_buf_simple_pull_mem+0x24>
   14c22:	4909      	ldr	r1, [pc, #36]	; (14c48 <net_buf_simple_pull_mem+0x34>)
   14c24:	4809      	ldr	r0, [pc, #36]	; (14c4c <net_buf_simple_pull_mem+0x38>)
   14c26:	f44f 628e 	mov.w	r2, #1136	; 0x470
   14c2a:	f004 ff6e 	bl	19b0a <printk>
   14c2e:	f44f 618e 	mov.w	r1, #1136	; 0x470
   14c32:	4805      	ldr	r0, [pc, #20]	; (14c48 <net_buf_simple_pull_mem+0x34>)
   14c34:	f005 fa0f 	bl	1a056 <assert_post_action>
	buf->len -= len;
   14c38:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   14c3a:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   14c3c:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   14c3e:	4429      	add	r1, r5
}
   14c40:	4630      	mov	r0, r6
	buf->len -= len;
   14c42:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   14c44:	6021      	str	r1, [r4, #0]
}
   14c46:	bd70      	pop	{r4, r5, r6, pc}
   14c48:	00021162 	.word	0x00021162
   14c4c:	0001ecfc 	.word	0x0001ecfc

00014c50 <net_buf_simple_add>:
{
   14c50:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   14c52:	6803      	ldr	r3, [r0, #0]
   14c54:	8886      	ldrh	r6, [r0, #4]
   14c56:	4604      	mov	r4, r0
   14c58:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   14c5a:	f007 fc90 	bl	1c57e <net_buf_simple_tailroom>
   14c5e:	4288      	cmp	r0, r1
{
   14c60:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   14c62:	d20a      	bcs.n	14c7a <net_buf_simple_add+0x2a>
   14c64:	4907      	ldr	r1, [pc, #28]	; (14c84 <net_buf_simple_add+0x34>)
   14c66:	4808      	ldr	r0, [pc, #32]	; (14c88 <net_buf_simple_add+0x38>)
   14c68:	f240 3215 	movw	r2, #789	; 0x315
   14c6c:	f004 ff4d 	bl	19b0a <printk>
   14c70:	f240 3115 	movw	r1, #789	; 0x315
   14c74:	4803      	ldr	r0, [pc, #12]	; (14c84 <net_buf_simple_add+0x34>)
   14c76:	f005 f9ee 	bl	1a056 <assert_post_action>
	buf->len += len;
   14c7a:	88a1      	ldrh	r1, [r4, #4]
}
   14c7c:	4630      	mov	r0, r6
	buf->len += len;
   14c7e:	440d      	add	r5, r1
   14c80:	80a5      	strh	r5, [r4, #4]
}
   14c82:	bd70      	pop	{r4, r5, r6, pc}
   14c84:	00021162 	.word	0x00021162
   14c88:	0001ecfc 	.word	0x0001ecfc

00014c8c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   14c8c:	b570      	push	{r4, r5, r6, lr}
   14c8e:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   14c90:	460c      	mov	r4, r1
	return port->data;
   14c92:	68c5      	ldr	r5, [r0, #12]
   14c94:	b941      	cbnz	r1, 14ca8 <gpio_nrfx_manage_callback+0x1c>
   14c96:	491e      	ldr	r1, [pc, #120]	; (14d10 <gpio_nrfx_manage_callback+0x84>)
   14c98:	481e      	ldr	r0, [pc, #120]	; (14d14 <gpio_nrfx_manage_callback+0x88>)
   14c9a:	2224      	movs	r2, #36	; 0x24
   14c9c:	f004 ff35 	bl	19b0a <printk>
   14ca0:	2124      	movs	r1, #36	; 0x24
   14ca2:	481b      	ldr	r0, [pc, #108]	; (14d10 <gpio_nrfx_manage_callback+0x84>)
   14ca4:	f005 f9d7 	bl	1a056 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   14ca8:	6863      	ldr	r3, [r4, #4]
   14caa:	b943      	cbnz	r3, 14cbe <gpio_nrfx_manage_callback+0x32>
   14cac:	4918      	ldr	r1, [pc, #96]	; (14d10 <gpio_nrfx_manage_callback+0x84>)
   14cae:	4819      	ldr	r0, [pc, #100]	; (14d14 <gpio_nrfx_manage_callback+0x88>)
   14cb0:	2225      	movs	r2, #37	; 0x25
   14cb2:	f004 ff2a 	bl	19b0a <printk>
   14cb6:	2125      	movs	r1, #37	; 0x25
   14cb8:	4815      	ldr	r0, [pc, #84]	; (14d10 <gpio_nrfx_manage_callback+0x84>)
   14cba:	f005 f9cc 	bl	1a056 <assert_post_action>
	return list->head;
   14cbe:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   14cc0:	b15b      	cbz	r3, 14cda <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14cc2:	2200      	movs	r2, #0
   14cc4:	429c      	cmp	r4, r3
   14cc6:	d112      	bne.n	14cee <gpio_nrfx_manage_callback+0x62>
	return node->next;
   14cc8:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   14cca:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   14ccc:	b952      	cbnz	r2, 14ce4 <gpio_nrfx_manage_callback+0x58>
   14cce:	42a1      	cmp	r1, r4
	list->head = node;
   14cd0:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14cd2:	d100      	bne.n	14cd6 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   14cd4:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   14cd6:	2300      	movs	r3, #0
   14cd8:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   14cda:	b96e      	cbnz	r6, 14cf8 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   14cdc:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   14cde:	bd70      	pop	{r4, r5, r6, pc}
   14ce0:	460b      	mov	r3, r1
   14ce2:	e7ef      	b.n	14cc4 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   14ce4:	42a1      	cmp	r1, r4
	parent->next = child;
   14ce6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14ce8:	bf08      	it	eq
   14cea:	60aa      	streq	r2, [r5, #8]
}
   14cec:	e7f3      	b.n	14cd6 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   14cee:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14cf0:	461a      	mov	r2, r3
   14cf2:	2900      	cmp	r1, #0
   14cf4:	d1f4      	bne.n	14ce0 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   14cf6:	b13e      	cbz	r6, 14d08 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   14cf8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14cfa:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   14cfc:	6023      	str	r3, [r4, #0]
	list->head = node;
   14cfe:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14d00:	2800      	cmp	r0, #0
   14d02:	d1eb      	bne.n	14cdc <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   14d04:	60ac      	str	r4, [r5, #8]
}
   14d06:	e7ea      	b.n	14cde <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   14d08:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14d0c:	e7e7      	b.n	14cde <gpio_nrfx_manage_callback+0x52>
   14d0e:	bf00      	nop
   14d10:	0002118e 	.word	0x0002118e
   14d14:	0001ecfc 	.word	0x0001ecfc

00014d18 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14d18:	6802      	ldr	r2, [r0, #0]
{
   14d1a:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   14d1c:	0953      	lsrs	r3, r2, #5
{
   14d1e:	4604      	mov	r4, r0
    switch (port)
   14d20:	d029      	beq.n	14d76 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   14d22:	2b01      	cmp	r3, #1
   14d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14d28:	bf18      	it	ne
   14d2a:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   14d2c:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   14d30:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14d32:	07db      	lsls	r3, r3, #31
   14d34:	d40a      	bmi.n	14d4c <nrf_gpio_pin_port_decode+0x34>
   14d36:	4912      	ldr	r1, [pc, #72]	; (14d80 <nrf_gpio_pin_port_decode+0x68>)
   14d38:	4812      	ldr	r0, [pc, #72]	; (14d84 <nrf_gpio_pin_port_decode+0x6c>)
   14d3a:	f240 221a 	movw	r2, #538	; 0x21a
   14d3e:	f004 fee4 	bl	19b0a <printk>
   14d42:	f240 211a 	movw	r1, #538	; 0x21a
   14d46:	480e      	ldr	r0, [pc, #56]	; (14d80 <nrf_gpio_pin_port_decode+0x68>)
   14d48:	f005 f985 	bl	1a056 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   14d4c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   14d4e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14d52:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   14d54:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14d56:	d00c      	beq.n	14d72 <nrf_gpio_pin_port_decode+0x5a>
   14d58:	2b01      	cmp	r3, #1
   14d5a:	d00f      	beq.n	14d7c <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   14d5c:	4908      	ldr	r1, [pc, #32]	; (14d80 <nrf_gpio_pin_port_decode+0x68>)
   14d5e:	4809      	ldr	r0, [pc, #36]	; (14d84 <nrf_gpio_pin_port_decode+0x6c>)
   14d60:	f240 221f 	movw	r2, #543	; 0x21f
   14d64:	f004 fed1 	bl	19b0a <printk>
   14d68:	f240 211f 	movw	r1, #543	; 0x21f
   14d6c:	4804      	ldr	r0, [pc, #16]	; (14d80 <nrf_gpio_pin_port_decode+0x68>)
   14d6e:	f005 f972 	bl	1a056 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14d72:	4805      	ldr	r0, [pc, #20]	; (14d88 <nrf_gpio_pin_port_decode+0x70>)
}
   14d74:	bd10      	pop	{r4, pc}
    switch (port)
   14d76:	f04f 33ff 	mov.w	r3, #4294967295
   14d7a:	e7d7      	b.n	14d2c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   14d7c:	4803      	ldr	r0, [pc, #12]	; (14d8c <nrf_gpio_pin_port_decode+0x74>)
   14d7e:	e7f9      	b.n	14d74 <nrf_gpio_pin_port_decode+0x5c>
   14d80:	000211bb 	.word	0x000211bb
   14d84:	0001ecfc 	.word	0x0001ecfc
   14d88:	40842500 	.word	0x40842500
   14d8c:	40842800 	.word	0x40842800

00014d90 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14d90:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   14d92:	4b09      	ldr	r3, [pc, #36]	; (14db8 <gpio_nrfx_init+0x28>)
   14d94:	781a      	ldrb	r2, [r3, #0]
   14d96:	b96a      	cbnz	r2, 14db4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   14d98:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14d9a:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   14d9c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14d9e:	2105      	movs	r1, #5
   14da0:	f7f8 f89c 	bl	cedc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   14da4:	202f      	movs	r0, #47	; 0x2f
   14da6:	f7f8 f87b 	bl	cea0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14daa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14dae:	4b03      	ldr	r3, [pc, #12]	; (14dbc <gpio_nrfx_init+0x2c>)
   14db0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   14db4:	2000      	movs	r0, #0
   14db6:	bd08      	pop	{r3, pc}
   14db8:	2000c619 	.word	0x2000c619
   14dbc:	4002f000 	.word	0x4002f000

00014dc0 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14dc0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   14dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14dc8:	4680      	mov	r8, r0
   14dca:	460e      	mov	r6, r1
   14dcc:	4617      	mov	r7, r2
   14dce:	4699      	mov	r9, r3
	return port->data;
   14dd0:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   14dd2:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14dd6:	f040 80ab 	bne.w	14f30 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14dda:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14ddc:	a801      	add	r0, sp, #4
   14dde:	7a1b      	ldrb	r3, [r3, #8]
   14de0:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   14de4:	9301      	str	r3, [sp, #4]
   14de6:	f7ff ff97 	bl	14d18 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14dea:	9b01      	ldr	r3, [sp, #4]
   14dec:	3380      	adds	r3, #128	; 0x80
   14dee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14df2:	07d8      	lsls	r0, r3, #31
   14df4:	f100 80bb 	bmi.w	14f6e <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14df8:	2101      	movs	r1, #1
   14dfa:	68e3      	ldr	r3, [r4, #12]
   14dfc:	40b1      	lsls	r1, r6
   14dfe:	4319      	orrs	r1, r3
   14e00:	60e1      	str	r1, [r4, #12]
   14e02:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14e04:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14e06:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14e08:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14e0a:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   14e0e:	bf0c      	ite	eq
   14e10:	430b      	orreq	r3, r1
   14e12:	438b      	bicne	r3, r1
   14e14:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14e16:	69a3      	ldr	r3, [r4, #24]
   14e18:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   14e1c:	bf0c      	ite	eq
   14e1e:	430b      	orreq	r3, r1
   14e20:	438b      	bicne	r3, r1
   14e22:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14e24:	6923      	ldr	r3, [r4, #16]
   14e26:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   14e2a:	bf0c      	ite	eq
   14e2c:	4319      	orreq	r1, r3
   14e2e:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14e32:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14e36:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14e38:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   14e3a:	4a4e      	ldr	r2, [pc, #312]	; (14f74 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   14e3c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   14e40:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   14e44:	f8d8 700c 	ldr.w	r7, [r8, #12]
   14e48:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14e4a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   14e4e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   14e52:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   14e56:	428d      	cmp	r5, r1
   14e58:	d175      	bne.n	14f46 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   14e5a:	fa23 f100 	lsr.w	r1, r3, r0
   14e5e:	07c9      	lsls	r1, r1, #31
   14e60:	d571      	bpl.n	14f46 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   14e62:	0083      	lsls	r3, r0, #2
   14e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14e68:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14e6c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   14e70:	f021 0101 	bic.w	r1, r1, #1
   14e74:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   14e78:	2301      	movs	r3, #1
   14e7a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   14e7c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   14e80:	b2c0      	uxtb	r0, r0
   14e82:	f001 f9bf 	bl	16204 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   14e86:	4628      	mov	r0, r5
   14e88:	2100      	movs	r1, #0
   14e8a:	f007 fbbc 	bl	1c606 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   14e8e:	68f8      	ldr	r0, [r7, #12]
   14e90:	40f0      	lsrs	r0, r6
   14e92:	f010 0001 	ands.w	r0, r0, #1
   14e96:	d048      	beq.n	14f2a <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   14e98:	6978      	ldr	r0, [r7, #20]
   14e9a:	40f0      	lsrs	r0, r6
   14e9c:	f010 0401 	ands.w	r4, r0, #1
   14ea0:	d059      	beq.n	14f56 <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   14ea2:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14ea4:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   14ea6:	40f3      	lsrs	r3, r6
   14ea8:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14eaa:	bf57      	itett	pl
   14eac:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14eae:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14eb0:	fa21 f606 	lsrpl.w	r6, r1, r6
   14eb4:	f006 0601 	andpl.w	r6, r6, #1
   14eb8:	bf5c      	itt	pl
   14eba:	f1c6 0602 	rsbpl	r6, r6, #2
   14ebe:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14ec0:	f001 f9c0 	bl	16244 <nrfx_gpiote_channel_alloc>
   14ec4:	4b2c      	ldr	r3, [pc, #176]	; (14f78 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   14ec6:	4298      	cmp	r0, r3
   14ec8:	d142      	bne.n	14f50 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14eca:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   14ecc:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14ed0:	022d      	lsls	r5, r5, #8
   14ed2:	008b      	lsls	r3, r1, #2
   14ed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14ed8:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14edc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14ee0:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14ee4:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   14ee8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   14eec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14ef0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14ef4:	4315      	orrs	r5, r2
   14ef6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   14efa:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   14efe:	4b1f      	ldr	r3, [pc, #124]	; (14f7c <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   14f00:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14f02:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   14f04:	f89d 1004 	ldrb.w	r1, [sp, #4]
   14f08:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14f0a:	008b      	lsls	r3, r1, #2
   14f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14f10:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14f14:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14f18:	f042 0201 	orr.w	r2, r2, #1
   14f1c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   14f20:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   14f22:	4a14      	ldr	r2, [pc, #80]	; (14f74 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   14f24:	408b      	lsls	r3, r1
   14f26:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14f2a:	b003      	add	sp, #12
   14f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14f30:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14f34:	f47f af60 	bne.w	14df8 <gpio_nrfx_pin_interrupt_configure+0x38>
   14f38:	2101      	movs	r1, #1
   14f3a:	fa01 f306 	lsl.w	r3, r1, r6
   14f3e:	68e1      	ldr	r1, [r4, #12]
   14f40:	ea21 0103 	bic.w	r1, r1, r3
   14f44:	e75c      	b.n	14e00 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14f46:	3001      	adds	r0, #1
   14f48:	2808      	cmp	r0, #8
   14f4a:	f47f af7e 	bne.w	14e4a <gpio_nrfx_pin_interrupt_configure+0x8a>
   14f4e:	e79a      	b.n	14e86 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   14f50:	f06f 0012 	mvn.w	r0, #18
   14f54:	e7e9      	b.n	14f2a <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14f56:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14f58:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14f5a:	40f1      	lsrs	r1, r6
   14f5c:	f001 0101 	and.w	r1, r1, #1
   14f60:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14f64:	b2c9      	uxtb	r1, r1
   14f66:	f007 fb4e 	bl	1c606 <nrf_gpio_cfg_sense_set>
	int res = 0;
   14f6a:	4620      	mov	r0, r4
   14f6c:	e7dd      	b.n	14f2a <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   14f6e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14f72:	e7da      	b.n	14f2a <gpio_nrfx_pin_interrupt_configure+0x16a>
   14f74:	4002f000 	.word	0x4002f000
   14f78:	0bad0000 	.word	0x0bad0000
   14f7c:	4002f100 	.word	0x4002f100

00014f80 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14f80:	4b2e      	ldr	r3, [pc, #184]	; (1503c <gpio_nrfx_config+0xbc>)
{
   14f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14f84:	4c2e      	ldr	r4, [pc, #184]	; (15040 <gpio_nrfx_config+0xc0>)
   14f86:	4013      	ands	r3, r2
   14f88:	42a3      	cmp	r3, r4
	return port->config;
   14f8a:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14f8c:	d044      	beq.n	15018 <gpio_nrfx_config+0x98>
   14f8e:	d80e      	bhi.n	14fae <gpio_nrfx_config+0x2e>
   14f90:	2b06      	cmp	r3, #6
   14f92:	d043      	beq.n	1501c <gpio_nrfx_config+0x9c>
   14f94:	d806      	bhi.n	14fa4 <gpio_nrfx_config+0x24>
   14f96:	2b00      	cmp	r3, #0
   14f98:	d040      	beq.n	1501c <gpio_nrfx_config+0x9c>
   14f9a:	2b02      	cmp	r3, #2
   14f9c:	d040      	beq.n	15020 <gpio_nrfx_config+0xa0>
   14f9e:	f06f 0015 	mvn.w	r0, #21
   14fa2:	e037      	b.n	15014 <gpio_nrfx_config+0x94>
   14fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14fa8:	d1f9      	bne.n	14f9e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   14faa:	2401      	movs	r4, #1
   14fac:	e009      	b.n	14fc2 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14fae:	4c25      	ldr	r4, [pc, #148]	; (15044 <gpio_nrfx_config+0xc4>)
   14fb0:	42a3      	cmp	r3, r4
   14fb2:	d037      	beq.n	15024 <gpio_nrfx_config+0xa4>
   14fb4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14fb8:	d036      	beq.n	15028 <gpio_nrfx_config+0xa8>
   14fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14fbe:	d1ee      	bne.n	14f9e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   14fc0:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   14fc2:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14fc4:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   14fc8:	bf4c      	ite	mi
   14fca:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   14fcc:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14fd0:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14fd4:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   14fd6:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14fda:	d507      	bpl.n	14fec <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14fdc:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14fde:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14fe2:	d523      	bpl.n	1502c <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   14fe4:	2301      	movs	r3, #1
   14fe6:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   14fe8:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   14fec:	7a03      	ldrb	r3, [r0, #8]
   14fee:	f001 011f 	and.w	r1, r1, #31
   14ff2:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14ff6:	a801      	add	r0, sp, #4
   14ff8:	9101      	str	r1, [sp, #4]
   14ffa:	f7ff fe8d 	bl	14d18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14ffe:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15000:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15004:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15008:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1500c:	3280      	adds	r2, #128	; 0x80
   1500e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15012:	2000      	movs	r0, #0
}
   15014:	b003      	add	sp, #12
   15016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15018:	2407      	movs	r4, #7
   1501a:	e7d2      	b.n	14fc2 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1501c:	461c      	mov	r4, r3
   1501e:	e7d0      	b.n	14fc2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15020:	2404      	movs	r4, #4
   15022:	e7ce      	b.n	14fc2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15024:	2405      	movs	r4, #5
   15026:	e7cc      	b.n	14fc2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15028:	2403      	movs	r4, #3
   1502a:	e7ca      	b.n	14fc2 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1502c:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1502e:	bf42      	ittt	mi
   15030:	2301      	movmi	r3, #1
   15032:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15034:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15038:	e7d8      	b.n	14fec <gpio_nrfx_config+0x6c>
   1503a:	bf00      	nop
   1503c:	00f00006 	.word	0x00f00006
   15040:	00100006 	.word	0x00100006
   15044:	00400002 	.word	0x00400002

00015048 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   15048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1504c:	460f      	mov	r7, r1
   1504e:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15050:	4604      	mov	r4, r0
   15052:	b1e0      	cbz	r0, 1508e <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   15054:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   15056:	f8df 803c 	ldr.w	r8, [pc, #60]	; 15094 <gpio_fire_callbacks.isra.0+0x4c>
   1505a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 15098 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   1505e:	68a3      	ldr	r3, [r4, #8]
   15060:	421e      	tst	r6, r3
   15062:	d010      	beq.n	15086 <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   15064:	6863      	ldr	r3, [r4, #4]
   15066:	b943      	cbnz	r3, 1507a <gpio_fire_callbacks.isra.0+0x32>
   15068:	4641      	mov	r1, r8
   1506a:	4648      	mov	r0, r9
   1506c:	2245      	movs	r2, #69	; 0x45
   1506e:	f004 fd4c 	bl	19b0a <printk>
   15072:	2145      	movs	r1, #69	; 0x45
   15074:	4640      	mov	r0, r8
   15076:	f004 ffee 	bl	1a056 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1507a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1507e:	4621      	mov	r1, r4
   15080:	4638      	mov	r0, r7
   15082:	4032      	ands	r2, r6
   15084:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15086:	b115      	cbz	r5, 1508e <gpio_fire_callbacks.isra.0+0x46>
   15088:	462c      	mov	r4, r5
   1508a:	682d      	ldr	r5, [r5, #0]
   1508c:	e7e7      	b.n	1505e <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   1508e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15092:	bf00      	nop
   15094:	0002118e 	.word	0x0002118e
   15098:	0001ecfc 	.word	0x0001ecfc

0001509c <gpiote_event_handler>:
{
   1509c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1509e:	2600      	movs	r6, #0
   150a0:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150a4:	4d28      	ldr	r5, [pc, #160]	; (15148 <gpiote_event_handler+0xac>)
   150a6:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   150aa:	b15c      	cbz	r4, 150c4 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   150ac:	4827      	ldr	r0, [pc, #156]	; (1514c <gpiote_event_handler+0xb0>)
   150ae:	f007 fae3 	bl	1c678 <check_level_trigger_pins>
		fired_triggers[0] =
   150b2:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   150b4:	4826      	ldr	r0, [pc, #152]	; (15150 <gpiote_event_handler+0xb4>)
   150b6:	f007 fadf 	bl	1c678 <check_level_trigger_pins>
		fired_triggers[1] =
   150ba:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   150bc:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   150c0:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   150c4:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   150c6:	2601      	movs	r6, #1
   150c8:	4694      	mov	ip, r2
{
   150ca:	4922      	ldr	r1, [pc, #136]	; (15154 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   150cc:	4d1e      	ldr	r5, [pc, #120]	; (15148 <gpiote_event_handler+0xac>)
   150ce:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   150d2:	fa06 f002 	lsl.w	r0, r6, r2
   150d6:	4218      	tst	r0, r3
   150d8:	d016      	beq.n	15108 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150da:	680b      	ldr	r3, [r1, #0]
   150dc:	b1a3      	cbz	r3, 15108 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   150de:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   150e2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   150e6:	af02      	add	r7, sp, #8
   150e8:	f3c3 3040 	ubfx	r0, r3, #13, #1
   150ec:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   150f0:	f850 7c08 	ldr.w	r7, [r0, #-8]
   150f4:	f3c3 2304 	ubfx	r3, r3, #8, #5
   150f8:	fa06 f303 	lsl.w	r3, r6, r3
   150fc:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   150fe:	f8c1 c000 	str.w	ip, [r1]
   15102:	f840 3c08 	str.w	r3, [r0, #-8]
   15106:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15108:	3201      	adds	r2, #1
   1510a:	2a08      	cmp	r2, #8
   1510c:	f101 0104 	add.w	r1, r1, #4
   15110:	d1dd      	bne.n	150ce <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   15112:	9a00      	ldr	r2, [sp, #0]
   15114:	b122      	cbz	r2, 15120 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   15116:	4b10      	ldr	r3, [pc, #64]	; (15158 <gpiote_event_handler+0xbc>)
   15118:	490c      	ldr	r1, [pc, #48]	; (1514c <gpiote_event_handler+0xb0>)
   1511a:	6858      	ldr	r0, [r3, #4]
   1511c:	f7ff ff94 	bl	15048 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   15120:	9a01      	ldr	r2, [sp, #4]
   15122:	b122      	cbz	r2, 1512e <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   15124:	4b0d      	ldr	r3, [pc, #52]	; (1515c <gpiote_event_handler+0xc0>)
   15126:	490a      	ldr	r1, [pc, #40]	; (15150 <gpiote_event_handler+0xb4>)
   15128:	6858      	ldr	r0, [r3, #4]
   1512a:	f7ff ff8d 	bl	15048 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   1512e:	b144      	cbz	r4, 15142 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   15130:	4806      	ldr	r0, [pc, #24]	; (1514c <gpiote_event_handler+0xb0>)
   15132:	f007 fa7b 	bl	1c62c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   15136:	4806      	ldr	r0, [pc, #24]	; (15150 <gpiote_event_handler+0xb4>)
}
   15138:	b003      	add	sp, #12
   1513a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1513e:	f007 ba75 	b.w	1c62c <cfg_level_pins>
}
   15142:	b003      	add	sp, #12
   15144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15146:	bf00      	nop
   15148:	4002f000 	.word	0x4002f000
   1514c:	200085c8 	.word	0x200085c8
   15150:	200085d8 	.word	0x200085d8
   15154:	4002f100 	.word	0x4002f100
   15158:	2000ac1c 	.word	0x2000ac1c
   1515c:	2000ac38 	.word	0x2000ac38

00015160 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15160:	4b02      	ldr	r3, [pc, #8]	; (1516c <vipm_nrf_1_register_callback+0xc>)
   15162:	6059      	str	r1, [r3, #4]
   15164:	645a      	str	r2, [r3, #68]	; 0x44
   15166:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   1516a:	4770      	bx	lr
   1516c:	2000ac5c 	.word	0x2000ac5c

00015170 <vipm_nrf_0_set_enabled>:
   15170:	b508      	push	{r3, lr}
   15172:	2145      	movs	r1, #69	; 0x45
   15174:	4802      	ldr	r0, [pc, #8]	; (15180 <vipm_nrf_0_set_enabled+0x10>)
   15176:	f004 fcc8 	bl	19b0a <printk>
   1517a:	f06f 0015 	mvn.w	r0, #21
   1517e:	bd08      	pop	{r3, pc}
   15180:	000211fc 	.word	0x000211fc

00015184 <vipm_nrf_0_register_callback>:
   15184:	2157      	movs	r1, #87	; 0x57
   15186:	4801      	ldr	r0, [pc, #4]	; (1518c <vipm_nrf_0_register_callback+0x8>)
   15188:	f004 bcbf 	b.w	19b0a <printk>
   1518c:	0002121d 	.word	0x0002121d

00015190 <vipm_nrf_1_send>:
   15190:	b508      	push	{r3, lr}
   15192:	2145      	movs	r1, #69	; 0x45
   15194:	4802      	ldr	r0, [pc, #8]	; (151a0 <vipm_nrf_1_send+0x10>)
   15196:	f004 fcb8 	bl	19b0a <printk>
   1519a:	f06f 0015 	mvn.w	r0, #21
   1519e:	bd08      	pop	{r3, pc}
   151a0:	00021254 	.word	0x00021254

000151a4 <vipm_nrf_init>:
{
   151a4:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   151a6:	4d0b      	ldr	r5, [pc, #44]	; (151d4 <vipm_nrf_init+0x30>)
   151a8:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   151ac:	b97c      	cbnz	r4, 151ce <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   151ae:	4a0a      	ldr	r2, [pc, #40]	; (151d8 <vipm_nrf_init+0x34>)
   151b0:	490a      	ldr	r1, [pc, #40]	; (151dc <vipm_nrf_init+0x38>)
   151b2:	4620      	mov	r0, r4
   151b4:	f001 f87e 	bl	162b4 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   151b8:	4622      	mov	r2, r4
   151ba:	2101      	movs	r1, #1
   151bc:	202a      	movs	r0, #42	; 0x2a
   151be:	f7f7 fe8d 	bl	cedc <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   151c2:	4807      	ldr	r0, [pc, #28]	; (151e0 <vipm_nrf_init+0x3c>)
   151c4:	f001 f89c 	bl	16300 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   151c8:	2301      	movs	r3, #1
   151ca:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   151ce:	2000      	movs	r0, #0
   151d0:	bd38      	pop	{r3, r4, r5, pc}
   151d2:	bf00      	nop
   151d4:	2000ac5c 	.word	0x2000ac5c
   151d8:	2000ac54 	.word	0x2000ac54
   151dc:	000151e5 	.word	0x000151e5
   151e0:	0001e184 	.word	0x0001e184

000151e4 <vipm_dispatcher>:
{
   151e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   151e8:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   151ea:	4f17      	ldr	r7, [pc, #92]	; (15248 <vipm_dispatcher+0x64>)
   151ec:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1524c <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   151f0:	4e17      	ldr	r6, [pc, #92]	; (15250 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   151f2:	b90d      	cbnz	r5, 151f8 <vipm_dispatcher+0x14>
}
   151f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   151f8:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   151fc:	b30c      	cbz	r4, 15242 <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   151fe:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   15202:	2b0f      	cmp	r3, #15
   15204:	461c      	mov	r4, r3
   15206:	dd08      	ble.n	1521a <vipm_dispatcher+0x36>
   15208:	4639      	mov	r1, r7
   1520a:	4640      	mov	r0, r8
   1520c:	2283      	movs	r2, #131	; 0x83
   1520e:	f004 fc7c 	bl	19b0a <printk>
   15212:	2183      	movs	r1, #131	; 0x83
   15214:	4638      	mov	r0, r7
   15216:	f004 ff1e 	bl	1a056 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   1521a:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   1521c:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   15220:	40a3      	lsls	r3, r4
   15222:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15226:	f1b9 0f00 	cmp.w	r9, #0
   1522a:	d0e2      	beq.n	151f2 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   1522c:	2300      	movs	r3, #0
   1522e:	f104 0110 	add.w	r1, r4, #16
   15232:	3420      	adds	r4, #32
   15234:	461a      	mov	r2, r3
   15236:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1523a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1523e:	47c8      	blx	r9
   15240:	e7d7      	b.n	151f2 <vipm_dispatcher+0xe>
    return 32U;
   15242:	2420      	movs	r4, #32
   15244:	e7e0      	b.n	15208 <vipm_dispatcher+0x24>
   15246:	bf00      	nop
   15248:	00021275 	.word	0x00021275
   1524c:	0001ecfc 	.word	0x0001ecfc
   15250:	2000ac5c 	.word	0x2000ac5c

00015254 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15254:	2a10      	cmp	r2, #16
   15256:	b508      	push	{r3, lr}
   15258:	d810      	bhi.n	1527c <vipm_nrf_0_send+0x28>
   1525a:	b11a      	cbz	r2, 15264 <vipm_nrf_0_send+0x10>
   1525c:	2157      	movs	r1, #87	; 0x57
   1525e:	4809      	ldr	r0, [pc, #36]	; (15284 <vipm_nrf_0_send+0x30>)
   15260:	f004 fc53 	bl	19b0a <printk>
   15264:	9b02      	ldr	r3, [sp, #8]
   15266:	2b00      	cmp	r3, #0
   15268:	dd03      	ble.n	15272 <vipm_nrf_0_send+0x1e>
   1526a:	2157      	movs	r1, #87	; 0x57
   1526c:	4806      	ldr	r0, [pc, #24]	; (15288 <vipm_nrf_0_send+0x34>)
   1526e:	f004 fc4c 	bl	19b0a <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15272:	2201      	movs	r2, #1
   15274:	2000      	movs	r0, #0
   15276:	4b05      	ldr	r3, [pc, #20]	; (1528c <vipm_nrf_0_send+0x38>)
   15278:	601a      	str	r2, [r3, #0]
   1527a:	bd08      	pop	{r3, pc}
   1527c:	f06f 0015 	mvn.w	r0, #21
   15280:	e7fb      	b.n	1527a <vipm_nrf_0_send+0x26>
   15282:	bf00      	nop
   15284:	000212a3 	.word	0x000212a3
   15288:	000212dc 	.word	0x000212dc
   1528c:	4002a000 	.word	0x4002a000

00015290 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15290:	6802      	ldr	r2, [r0, #0]
{
   15292:	b510      	push	{r4, lr}
    switch (port)
   15294:	0953      	lsrs	r3, r2, #5
{
   15296:	4604      	mov	r4, r0
    switch (port)
   15298:	d029      	beq.n	152ee <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1529a:	2b01      	cmp	r3, #1
   1529c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   152a0:	bf18      	it	ne
   152a2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   152a4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   152a8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   152aa:	07db      	lsls	r3, r3, #31
   152ac:	d40a      	bmi.n	152c4 <nrf_gpio_pin_port_decode+0x34>
   152ae:	4912      	ldr	r1, [pc, #72]	; (152f8 <nrf_gpio_pin_port_decode+0x68>)
   152b0:	4812      	ldr	r0, [pc, #72]	; (152fc <nrf_gpio_pin_port_decode+0x6c>)
   152b2:	f240 221a 	movw	r2, #538	; 0x21a
   152b6:	f004 fc28 	bl	19b0a <printk>
   152ba:	f240 211a 	movw	r1, #538	; 0x21a
   152be:	480e      	ldr	r0, [pc, #56]	; (152f8 <nrf_gpio_pin_port_decode+0x68>)
   152c0:	f004 fec9 	bl	1a056 <assert_post_action>
    uint32_t pin_number = *p_pin;
   152c4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   152c6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   152ca:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   152cc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   152ce:	d00c      	beq.n	152ea <nrf_gpio_pin_port_decode+0x5a>
   152d0:	2b01      	cmp	r3, #1
   152d2:	d00f      	beq.n	152f4 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   152d4:	4908      	ldr	r1, [pc, #32]	; (152f8 <nrf_gpio_pin_port_decode+0x68>)
   152d6:	4809      	ldr	r0, [pc, #36]	; (152fc <nrf_gpio_pin_port_decode+0x6c>)
   152d8:	f240 221f 	movw	r2, #543	; 0x21f
   152dc:	f004 fc15 	bl	19b0a <printk>
   152e0:	f240 211f 	movw	r1, #543	; 0x21f
   152e4:	4804      	ldr	r0, [pc, #16]	; (152f8 <nrf_gpio_pin_port_decode+0x68>)
   152e6:	f004 feb6 	bl	1a056 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   152ea:	4805      	ldr	r0, [pc, #20]	; (15300 <nrf_gpio_pin_port_decode+0x70>)
}
   152ec:	bd10      	pop	{r4, pc}
    switch (port)
   152ee:	f04f 33ff 	mov.w	r3, #4294967295
   152f2:	e7d7      	b.n	152a4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   152f4:	4803      	ldr	r0, [pc, #12]	; (15304 <nrf_gpio_pin_port_decode+0x74>)
   152f6:	e7f9      	b.n	152ec <nrf_gpio_pin_port_decode+0x5c>
   152f8:	000211bb 	.word	0x000211bb
   152fc:	0001ecfc 	.word	0x0001ecfc
   15300:	40842500 	.word	0x40842500
   15304:	40842800 	.word	0x40842800

00015308 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15308:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1530a:	794b      	ldrb	r3, [r1, #5]
   1530c:	2b01      	cmp	r3, #1
   1530e:	d02b      	beq.n	15368 <uarte_nrfx_configure+0x60>
   15310:	2b03      	cmp	r3, #3
   15312:	d126      	bne.n	15362 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15314:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15316:	798b      	ldrb	r3, [r1, #6]
   15318:	2b03      	cmp	r3, #3
   1531a:	d122      	bne.n	15362 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1531c:	79cd      	ldrb	r5, [r1, #7]
   1531e:	b125      	cbz	r5, 1532a <uarte_nrfx_configure+0x22>
   15320:	2d01      	cmp	r5, #1
   15322:	d11e      	bne.n	15362 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15324:	6843      	ldr	r3, [r0, #4]
   15326:	791b      	ldrb	r3, [r3, #4]
   15328:	b1db      	cbz	r3, 15362 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1532a:	790a      	ldrb	r2, [r1, #4]
   1532c:	2a01      	cmp	r2, #1
   1532e:	d01d      	beq.n	1536c <uarte_nrfx_configure+0x64>
   15330:	2a02      	cmp	r2, #2
   15332:	d01f      	beq.n	15374 <uarte_nrfx_configure+0x6c>
   15334:	b9aa      	cbnz	r2, 15362 <uarte_nrfx_configure+0x5a>
   15336:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15338:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1533a:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   1533c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15340:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   15342:	d06e      	beq.n	15422 <uarte_nrfx_configure+0x11a>
   15344:	d833      	bhi.n	153ae <uarte_nrfx_configure+0xa6>
   15346:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1534a:	d06d      	beq.n	15428 <uarte_nrfx_configure+0x120>
   1534c:	d81c      	bhi.n	15388 <uarte_nrfx_configure+0x80>
   1534e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15352:	d06b      	beq.n	1542c <uarte_nrfx_configure+0x124>
   15354:	d810      	bhi.n	15378 <uarte_nrfx_configure+0x70>
   15356:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1535a:	d06a      	beq.n	15432 <uarte_nrfx_configure+0x12a>
   1535c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15360:	d06a      	beq.n	15438 <uarte_nrfx_configure+0x130>
   15362:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15366:	e05b      	b.n	15420 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   15368:	2700      	movs	r7, #0
   1536a:	e7d4      	b.n	15316 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1536c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15370:	220e      	movs	r2, #14
   15372:	e7e1      	b.n	15338 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   15374:	2400      	movs	r4, #0
   15376:	e7fb      	b.n	15370 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   15378:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1537c:	d05f      	beq.n	1543e <uarte_nrfx_configure+0x136>
   1537e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15382:	d1ee      	bne.n	15362 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15384:	4b38      	ldr	r3, [pc, #224]	; (15468 <uarte_nrfx_configure+0x160>)
   15386:	e03e      	b.n	15406 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15388:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1538c:	d05a      	beq.n	15444 <uarte_nrfx_configure+0x13c>
   1538e:	d807      	bhi.n	153a0 <uarte_nrfx_configure+0x98>
   15390:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15394:	d058      	beq.n	15448 <uarte_nrfx_configure+0x140>
   15396:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1539a:	d1e2      	bne.n	15362 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1539c:	4b33      	ldr	r3, [pc, #204]	; (1546c <uarte_nrfx_configure+0x164>)
   1539e:	e032      	b.n	15406 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   153a0:	f647 2c12 	movw	ip, #31250	; 0x7a12
   153a4:	4563      	cmp	r3, ip
   153a6:	d1dc      	bne.n	15362 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   153a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   153ac:	e02b      	b.n	15406 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   153ae:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   153b2:	d04b      	beq.n	1544c <uarte_nrfx_configure+0x144>
   153b4:	d813      	bhi.n	153de <uarte_nrfx_configure+0xd6>
   153b6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   153ba:	d04a      	beq.n	15452 <uarte_nrfx_configure+0x14a>
   153bc:	d809      	bhi.n	153d2 <uarte_nrfx_configure+0xca>
   153be:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   153c2:	4563      	cmp	r3, ip
   153c4:	d047      	beq.n	15456 <uarte_nrfx_configure+0x14e>
   153c6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   153ca:	d1ca      	bne.n	15362 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   153cc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   153d0:	e019      	b.n	15406 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   153d2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   153d6:	d1c4      	bne.n	15362 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   153d8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   153dc:	e013      	b.n	15406 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   153de:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   153e2:	d03b      	beq.n	1545c <uarte_nrfx_configure+0x154>
   153e4:	d809      	bhi.n	153fa <uarte_nrfx_configure+0xf2>
   153e6:	f8df c088 	ldr.w	ip, [pc, #136]	; 15470 <uarte_nrfx_configure+0x168>
   153ea:	4563      	cmp	r3, ip
   153ec:	d039      	beq.n	15462 <uarte_nrfx_configure+0x15a>
   153ee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   153f2:	d1b6      	bne.n	15362 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   153f4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   153f8:	e005      	b.n	15406 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   153fa:	f8df c078 	ldr.w	ip, [pc, #120]	; 15474 <uarte_nrfx_configure+0x16c>
   153fe:	4563      	cmp	r3, ip
   15400:	d1af      	bne.n	15362 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15406:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1540a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   1540c:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   1540e:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   15410:	4322      	orrs	r2, r4
   15412:	3304      	adds	r3, #4
   15414:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   15416:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   1541a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1541e:	2000      	movs	r0, #0
}
   15420:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15422:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15426:	e7ee      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15428:	4b13      	ldr	r3, [pc, #76]	; (15478 <uarte_nrfx_configure+0x170>)
   1542a:	e7ec      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1542c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15430:	e7e9      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   15432:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15436:	e7e6      	b.n	15406 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15438:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1543c:	e7e3      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1543e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15442:	e7e0      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15444:	4b0d      	ldr	r3, [pc, #52]	; (1547c <uarte_nrfx_configure+0x174>)
   15446:	e7de      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15448:	4b0d      	ldr	r3, [pc, #52]	; (15480 <uarte_nrfx_configure+0x178>)
   1544a:	e7dc      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1544c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15450:	e7d9      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   15452:	4b0c      	ldr	r3, [pc, #48]	; (15484 <uarte_nrfx_configure+0x17c>)
   15454:	e7d7      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   15456:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1545a:	e7d4      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1545c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15460:	e7d1      	b.n	15406 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   15462:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15466:	e7ce      	b.n	15406 <uarte_nrfx_configure+0xfe>
   15468:	0013b000 	.word	0x0013b000
   1546c:	004ea000 	.word	0x004ea000
   15470:	0003d090 	.word	0x0003d090
   15474:	000f4240 	.word	0x000f4240
   15478:	00275000 	.word	0x00275000
   1547c:	0075c000 	.word	0x0075c000
   15480:	003af000 	.word	0x003af000
   15484:	013a9000 	.word	0x013a9000

00015488 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   15488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1548c:	4606      	mov	r6, r0
   1548e:	4688      	mov	r8, r1
	return dev->data;
   15490:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15492:	f007 ff1f 	bl	1d2d4 <k_is_in_isr>
   15496:	b9b8      	cbnz	r0, 154c8 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   15498:	4b28      	ldr	r3, [pc, #160]	; (1553c <uarte_nrfx_poll_out+0xb4>)
   1549a:	781b      	ldrb	r3, [r3, #0]
   1549c:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   154a0:	6872      	ldr	r2, [r6, #4]
   154a2:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   154a4:	b193      	cbz	r3, 154cc <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   154a6:	f04f 0320 	mov.w	r3, #32
   154aa:	f3ef 8411 	mrs	r4, BASEPRI
   154ae:	f383 8811 	msr	BASEPRI, r3
   154b2:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   154b6:	6870      	ldr	r0, [r6, #4]
   154b8:	f007 f9c1 	bl	1c83e <is_tx_ready.isra.0>
   154bc:	bb38      	cbnz	r0, 1550e <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   154be:	f384 8811 	msr	BASEPRI, r4
   154c2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   154c6:	e7ee      	b.n	154a6 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   154c8:	2301      	movs	r3, #1
   154ca:	e7e9      	b.n	154a0 <uarte_nrfx_poll_out+0x18>
   154cc:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   154ce:	6870      	ldr	r0, [r6, #4]
   154d0:	f007 f9b5 	bl	1c83e <is_tx_ready.isra.0>
   154d4:	b970      	cbnz	r0, 154f4 <uarte_nrfx_poll_out+0x6c>
   154d6:	2001      	movs	r0, #1
   154d8:	f007 fa51 	bl	1c97e <nrfx_busy_wait>
   154dc:	3c01      	subs	r4, #1
   154de:	d1f6      	bne.n	154ce <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   154e0:	2100      	movs	r1, #0
   154e2:	2021      	movs	r0, #33	; 0x21
   154e4:	f003 f906 	bl	186f4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   154e8:	e7f0      	b.n	154cc <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   154ea:	f384 8811 	msr	BASEPRI, r4
   154ee:	f3bf 8f6f 	isb	sy
}
   154f2:	e7f5      	b.n	154e0 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   154f4:	f04f 0320 	mov.w	r3, #32
   154f8:	f3ef 8411 	mrs	r4, BASEPRI
   154fc:	f383 8811 	msr	BASEPRI, r3
   15500:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   15504:	6870      	ldr	r0, [r6, #4]
   15506:	f007 f99a 	bl	1c83e <is_tx_ready.isra.0>
   1550a:	2800      	cmp	r0, #0
   1550c:	d0ed      	beq.n	154ea <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1550e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15510:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   15512:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15516:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1551a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1551e:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   15522:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   15526:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1552a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1552e:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   15530:	f384 8811 	msr	BASEPRI, r4
   15534:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   15538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1553c:	2000c63b 	.word	0x2000c63b

00015540 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15544:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15546:	f04f 0800 	mov.w	r8, #0
   1554a:	f04f 0914 	mov.w	r9, #20
   1554e:	2200      	movs	r2, #0
   15550:	2101      	movs	r1, #1
   15552:	2008      	movs	r0, #8
   15554:	f7f7 fcc2 	bl	cedc <z_arm_irq_priority_set>
   15558:	2008      	movs	r0, #8
   1555a:	f7f7 fca1 	bl	cea0 <arch_irq_enable>
	return config->uarte_regs;
   1555e:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   15560:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   15562:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15564:	2701      	movs	r7, #1
   15566:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1556a:	a801      	add	r0, sp, #4
	data->dev = dev;
   1556c:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   1556e:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15572:	f7ff fe8d 	bl	15290 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15576:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15578:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1557c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   15580:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15582:	a801      	add	r0, sp, #4
   15584:	f8cd 9004 	str.w	r9, [sp, #4]
   15588:	f7ff fe82 	bl	15290 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1558c:	f04f 0b16 	mov.w	fp, #22
   15590:	9b01      	ldr	r3, [sp, #4]
   15592:	3380      	adds	r3, #128	; 0x80
   15594:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15598:	a801      	add	r0, sp, #4
   1559a:	f8cd b004 	str.w	fp, [sp, #4]
   1559e:	f7ff fe77 	bl	15290 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   155a2:	9b01      	ldr	r3, [sp, #4]
   155a4:	3380      	adds	r3, #128	; 0x80
   155a6:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   155aa:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   155ae:	f04f 0915 	mov.w	r9, #21
   155b2:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   155b6:	a801      	add	r0, sp, #4
   155b8:	f8cd 9004 	str.w	r9, [sp, #4]
   155bc:	f7ff fe68 	bl	15290 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   155c0:	9b01      	ldr	r3, [sp, #4]
   155c2:	3380      	adds	r3, #128	; 0x80
   155c4:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   155c8:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   155cc:	a801      	add	r0, sp, #4
   155ce:	f8cd 8004 	str.w	r8, [sp, #4]
   155d2:	f7ff fe5d 	bl	15290 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   155d6:	9b01      	ldr	r3, [sp, #4]
   155d8:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   155da:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   155dc:	a801      	add	r0, sp, #4
   155de:	f8cd 8004 	str.w	r8, [sp, #4]
   155e2:	f7ff fe55 	bl	15290 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   155e6:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   155e8:	68e9      	ldr	r1, [r5, #12]
   155ea:	3380      	adds	r3, #128	; 0x80
   155ec:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   155f0:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   155f2:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   155f6:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   155f8:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   155fc:	f7ff fe84 	bl	15308 <uarte_nrfx_configure>
	if (err) {
   15600:	4607      	mov	r7, r0
   15602:	b980      	cbnz	r0, 15626 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   15604:	686b      	ldr	r3, [r5, #4]
   15606:	799b      	ldrb	r3, [r3, #6]
   15608:	2b00      	cmp	r3, #0
   1560a:	d03a      	beq.n	15682 <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1560c:	eb06 000b 	add.w	r0, r6, fp
   15610:	f000 fddc 	bl	161cc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   15614:	4b2b      	ldr	r3, [pc, #172]	; (156c4 <uarte_0_init+0x184>)
   15616:	4298      	cmp	r0, r3
   15618:	d009      	beq.n	1562e <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   1561a:	2145      	movs	r1, #69	; 0x45
   1561c:	482a      	ldr	r0, [pc, #168]	; (156c8 <uarte_0_init+0x188>)
   1561e:	f004 fa74 	bl	19b0a <printk>
		return -EIO;
   15622:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   15626:	4638      	mov	r0, r7
   15628:	b003      	add	sp, #12
   1562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   1562e:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   15632:	f896 8016 	ldrb.w	r8, [r6, #22]
   15636:	d10a      	bne.n	1564e <uarte_0_init+0x10e>
   15638:	4924      	ldr	r1, [pc, #144]	; (156cc <uarte_0_init+0x18c>)
   1563a:	4825      	ldr	r0, [pc, #148]	; (156d0 <uarte_0_init+0x190>)
   1563c:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   15640:	f004 fa63 	bl	19b0a <printk>
   15644:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   15648:	4820      	ldr	r0, [pc, #128]	; (156cc <uarte_0_init+0x18c>)
   1564a:	f004 fd04 	bl	1a056 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1564e:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   15652:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15656:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   1565a:	d10a      	bne.n	15672 <uarte_0_init+0x132>
   1565c:	491b      	ldr	r1, [pc, #108]	; (156cc <uarte_0_init+0x18c>)
   1565e:	481c      	ldr	r0, [pc, #112]	; (156d0 <uarte_0_init+0x190>)
   15660:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   15664:	f004 fa51 	bl	19b0a <printk>
   15668:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   1566c:	4817      	ldr	r0, [pc, #92]	; (156cc <uarte_0_init+0x18c>)
   1566e:	f004 fcf2 	bl	1a056 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   15672:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15674:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   15678:	7db2      	ldrb	r2, [r6, #22]
   1567a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1567c:	4a15      	ldr	r2, [pc, #84]	; (156d4 <uarte_0_init+0x194>)
   1567e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15682:	2308      	movs	r3, #8
   15684:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15688:	2300      	movs	r3, #0
   1568a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1568e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   15692:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15696:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1569a:	2301      	movs	r3, #1
   1569c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   156a0:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   156a2:	686b      	ldr	r3, [r5, #4]
   156a4:	799b      	ldrb	r3, [r3, #6]
   156a6:	b91b      	cbnz	r3, 156b0 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   156a8:	f44f 7380 	mov.w	r3, #256	; 0x100
   156ac:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   156b0:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   156b2:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   156b4:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   156b8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   156bc:	2301      	movs	r3, #1
   156be:	60a3      	str	r3, [r4, #8]
   156c0:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   156c2:	e7b0      	b.n	15626 <uarte_0_init+0xe6>
   156c4:	0bad0000 	.word	0x0bad0000
   156c8:	0002131f 	.word	0x0002131f
   156cc:	00021343 	.word	0x00021343
   156d0:	0001ecfc 	.word	0x0001ecfc
   156d4:	40017000 	.word	0x40017000

000156d8 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   156d8:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   156dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   156e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   156e4:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   156e8:	4605      	mov	r5, r0
   156ea:	460e      	mov	r6, r1
   156ec:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   156ee:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   156f2:	d14f      	bne.n	15794 <z_impl_gpio_pin_interrupt_configure+0xbc>
   156f4:	492d      	ldr	r1, [pc, #180]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   156f6:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   156fa:	482d      	ldr	r0, [pc, #180]	; (157b0 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   156fc:	f004 fa05 	bl	19b0a <printk>
   15700:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   15704:	4829      	ldr	r0, [pc, #164]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15706:	f004 fca6 	bl	1a056 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1570a:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1570e:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   15712:	d10a      	bne.n	1572a <z_impl_gpio_pin_interrupt_configure+0x52>
   15714:	4925      	ldr	r1, [pc, #148]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15716:	4826      	ldr	r0, [pc, #152]	; (157b0 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15718:	f240 12f1 	movw	r2, #497	; 0x1f1
   1571c:	f004 f9f5 	bl	19b0a <printk>
   15720:	f240 11f1 	movw	r1, #497	; 0x1f1
   15724:	4821      	ldr	r0, [pc, #132]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15726:	f004 fc96 	bl	1a056 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1572a:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1572e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15732:	d10a      	bne.n	1574a <z_impl_gpio_pin_interrupt_configure+0x72>
   15734:	491d      	ldr	r1, [pc, #116]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15736:	481e      	ldr	r0, [pc, #120]	; (157b0 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15738:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1573c:	f004 f9e5 	bl	19b0a <printk>
   15740:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   15744:	4819      	ldr	r0, [pc, #100]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15746:	f004 fc86 	bl	1a056 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1574a:	2701      	movs	r7, #1
   1574c:	f8da 3000 	ldr.w	r3, [sl]
   15750:	40b7      	lsls	r7, r6
   15752:	421f      	tst	r7, r3
   15754:	d10a      	bne.n	1576c <z_impl_gpio_pin_interrupt_configure+0x94>
   15756:	4915      	ldr	r1, [pc, #84]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15758:	4815      	ldr	r0, [pc, #84]	; (157b0 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1575a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   1575e:	f004 f9d4 	bl	19b0a <printk>
   15762:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   15766:	4811      	ldr	r0, [pc, #68]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15768:	f004 fc75 	bl	1a056 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1576c:	0423      	lsls	r3, r4, #16
   1576e:	d505      	bpl.n	1577c <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   15770:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   15774:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   15776:	bf18      	it	ne
   15778:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   1577c:	f8d8 7018 	ldr.w	r7, [r8, #24]
   15780:	4631      	mov	r1, r6
   15782:	4628      	mov	r0, r5
   15784:	46bc      	mov	ip, r7
   15786:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1578a:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   1578e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   15792:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   15794:	2b00      	cmp	r3, #0
   15796:	d1b8      	bne.n	1570a <z_impl_gpio_pin_interrupt_configure+0x32>
   15798:	4904      	ldr	r1, [pc, #16]	; (157ac <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1579a:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   1579e:	4804      	ldr	r0, [pc, #16]	; (157b0 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   157a0:	f004 f9b3 	bl	19b0a <printk>
   157a4:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   157a8:	e7ac      	b.n	15704 <z_impl_gpio_pin_interrupt_configure+0x2c>
   157aa:	bf00      	nop
   157ac:	00021392 	.word	0x00021392
   157b0:	0001ecfc 	.word	0x0001ecfc

000157b4 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   157b4:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   157b6:	2501      	movs	r5, #1
   157b8:	6843      	ldr	r3, [r0, #4]
   157ba:	408d      	lsls	r5, r1
   157bc:	681b      	ldr	r3, [r3, #0]
{
   157be:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   157c0:	421d      	tst	r5, r3
{
   157c2:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   157c4:	d10a      	bne.n	157dc <gpio_pin_set_raw+0x28>
   157c6:	490b      	ldr	r1, [pc, #44]	; (157f4 <gpio_pin_set_raw+0x40>)
   157c8:	480b      	ldr	r0, [pc, #44]	; (157f8 <gpio_pin_set_raw+0x44>)
   157ca:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   157ce:	f004 f99c 	bl	19b0a <printk>
   157d2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   157d6:	4807      	ldr	r0, [pc, #28]	; (157f4 <gpio_pin_set_raw+0x40>)
   157d8:	f004 fc3d 	bl	1a056 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   157dc:	b136      	cbz	r6, 157ec <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   157de:	68a3      	ldr	r3, [r4, #8]
   157e0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   157e2:	4629      	mov	r1, r5
   157e4:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   157e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   157ea:	4718      	bx	r3
   157ec:	68a3      	ldr	r3, [r4, #8]
   157ee:	691b      	ldr	r3, [r3, #16]
   157f0:	e7f7      	b.n	157e2 <gpio_pin_set_raw+0x2e>
   157f2:	bf00      	nop
   157f4:	00021392 	.word	0x00021392
   157f8:	0001ecfc 	.word	0x0001ecfc

000157fc <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   157fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15800:	4606      	mov	r6, r0
   15802:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15804:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   15806:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1584c <dk_set_leds_state.part.0+0x50>
   1580a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 15850 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1580e:	fa26 f204 	lsr.w	r2, r6, r4
   15812:	fa27 f304 	lsr.w	r3, r7, r4
   15816:	4313      	orrs	r3, r2
   15818:	07db      	lsls	r3, r3, #31
   1581a:	d512      	bpl.n	15842 <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   1581c:	43d2      	mvns	r2, r2
   1581e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   15822:	7919      	ldrb	r1, [r3, #4]
   15824:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   15828:	f002 0201 	and.w	r2, r2, #1
   1582c:	f7ff ffc2 	bl	157b4 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   15830:	4605      	mov	r5, r0
   15832:	b130      	cbz	r0, 15842 <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   15834:	2145      	movs	r1, #69	; 0x45
   15836:	4807      	ldr	r0, [pc, #28]	; (15854 <dk_set_leds_state.part.0+0x58>)
   15838:	f004 f967 	bl	19b0a <printk>
			}
		}
	}

	return 0;
}
   1583c:	4628      	mov	r0, r5
   1583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15842:	3401      	adds	r4, #1
   15844:	2c04      	cmp	r4, #4
   15846:	d1e2      	bne.n	1580e <dk_set_leds_state.part.0+0x12>
	return 0;
   15848:	2500      	movs	r5, #0
   1584a:	e7f7      	b.n	1583c <dk_set_leds_state.part.0+0x40>
   1584c:	0001e2a4 	.word	0x0001e2a4
   15850:	2000ad64 	.word	0x2000ad64
   15854:	000213bc 	.word	0x000213bc

00015858 <buttons_scan_fn>:
{
   15858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   1585c:	2400      	movs	r4, #0
   1585e:	4e6c      	ldr	r6, [pc, #432]	; (15a10 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15860:	4625      	mov	r5, r4
{
   15862:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   15864:	4f6b      	ldr	r7, [pc, #428]	; (15a14 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15866:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 15a18 <buttons_scan_fn+0x1c0>
   1586a:	f04f 0801 	mov.w	r8, #1
   1586e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   15872:	791b      	ldrb	r3, [r3, #4]
   15874:	f859 bb04 	ldr.w	fp, [r9], #4
   15878:	fa08 f803 	lsl.w	r8, r8, r3
   1587c:	f8db 3004 	ldr.w	r3, [fp, #4]
   15880:	681b      	ldr	r3, [r3, #0]
   15882:	ea18 0f03 	tst.w	r8, r3
   15886:	d10a      	bne.n	1589e <buttons_scan_fn+0x46>
   15888:	4651      	mov	r1, sl
   1588a:	4864      	ldr	r0, [pc, #400]	; (15a1c <buttons_scan_fn+0x1c4>)
   1588c:	f44f 725e 	mov.w	r2, #888	; 0x378
   15890:	f004 f93b 	bl	19b0a <printk>
   15894:	f44f 715e 	mov.w	r1, #888	; 0x378
   15898:	4650      	mov	r0, sl
   1589a:	f004 fbdc 	bl	1a056 <assert_post_action>
	return api->port_get_raw(port, value);
   1589e:	f8db 3008 	ldr.w	r3, [fp, #8]
   158a2:	4658      	mov	r0, fp
   158a4:	685b      	ldr	r3, [r3, #4]
   158a6:	a901      	add	r1, sp, #4
   158a8:	4798      	blx	r3
	if (ret == 0) {
   158aa:	2800      	cmp	r0, #0
   158ac:	d16b      	bne.n	15986 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   158ae:	9b01      	ldr	r3, [sp, #4]
   158b0:	ea18 0f03 	tst.w	r8, r3
   158b4:	d003      	beq.n	158be <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   158b6:	3501      	adds	r5, #1
   158b8:	2d04      	cmp	r5, #4
   158ba:	d1d6      	bne.n	1586a <buttons_scan_fn+0x12>
   158bc:	e069      	b.n	15992 <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   158be:	2301      	movs	r3, #1
   158c0:	40ab      	lsls	r3, r5
   158c2:	431c      	orrs	r4, r3
   158c4:	e7f7      	b.n	158b6 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   158c6:	3d04      	subs	r5, #4
   158c8:	2d00      	cmp	r5, #0
   158ca:	f000 8087 	beq.w	159dc <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   158ce:	46aa      	mov	sl, r5
   158d0:	f85a 3b04 	ldr.w	r3, [sl], #4
   158d4:	4641      	mov	r1, r8
   158d6:	4620      	mov	r0, r4
   158d8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   158da:	f1ba 0f00 	cmp.w	sl, #0
   158de:	d07d      	beq.n	159dc <buttons_scan_fn+0x184>
	return node->next;
   158e0:	686d      	ldr	r5, [r5, #4]
   158e2:	e078      	b.n	159d6 <buttons_scan_fn+0x17e>
		initial_run = false;
   158e4:	2200      	movs	r2, #0
   158e6:	701a      	strb	r2, [r3, #0]
   158e8:	e07b      	b.n	159e2 <buttons_scan_fn+0x18a>
	__asm__ volatile(
   158ea:	f04f 0320 	mov.w	r3, #32
   158ee:	f3ef 8811 	mrs	r8, BASEPRI
   158f2:	f383 8811 	msr	BASEPRI, r3
   158f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   158fa:	4849      	ldr	r0, [pc, #292]	; (15a20 <buttons_scan_fn+0x1c8>)
   158fc:	f003 f91c 	bl	18b38 <z_spin_lock_valid>
   15900:	b940      	cbnz	r0, 15914 <buttons_scan_fn+0xbc>
   15902:	4948      	ldr	r1, [pc, #288]	; (15a24 <buttons_scan_fn+0x1cc>)
   15904:	4845      	ldr	r0, [pc, #276]	; (15a1c <buttons_scan_fn+0x1c4>)
   15906:	227c      	movs	r2, #124	; 0x7c
   15908:	f004 f8ff 	bl	19b0a <printk>
   1590c:	217c      	movs	r1, #124	; 0x7c
   1590e:	4845      	ldr	r0, [pc, #276]	; (15a24 <buttons_scan_fn+0x1cc>)
   15910:	f004 fba1 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   15914:	4842      	ldr	r0, [pc, #264]	; (15a20 <buttons_scan_fn+0x1c8>)
   15916:	f003 f92b 	bl	18b70 <z_spin_lock_set_owner>
		switch (state) {
   1591a:	4b43      	ldr	r3, [pc, #268]	; (15a28 <buttons_scan_fn+0x1d0>)
   1591c:	781a      	ldrb	r2, [r3, #0]
   1591e:	2a01      	cmp	r2, #1
   15920:	d126      	bne.n	15970 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   15922:	2200      	movs	r2, #0
   15924:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   15926:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1592a:	f856 0b04 	ldr.w	r0, [r6], #4
   1592e:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   15930:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   15934:	f7ff fed0 	bl	156d8 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15938:	3401      	adds	r4, #1
   1593a:	2c04      	cmp	r4, #4
   1593c:	4605      	mov	r5, r0
   1593e:	d001      	beq.n	15944 <buttons_scan_fn+0xec>
   15940:	2800      	cmp	r0, #0
   15942:	d0f0      	beq.n	15926 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15944:	4836      	ldr	r0, [pc, #216]	; (15a20 <buttons_scan_fn+0x1c8>)
   15946:	f003 f905 	bl	18b54 <z_spin_unlock_valid>
   1594a:	b940      	cbnz	r0, 1595e <buttons_scan_fn+0x106>
   1594c:	4935      	ldr	r1, [pc, #212]	; (15a24 <buttons_scan_fn+0x1cc>)
   1594e:	4833      	ldr	r0, [pc, #204]	; (15a1c <buttons_scan_fn+0x1c4>)
   15950:	22a7      	movs	r2, #167	; 0xa7
   15952:	f004 f8da 	bl	19b0a <printk>
   15956:	21a7      	movs	r1, #167	; 0xa7
   15958:	4832      	ldr	r0, [pc, #200]	; (15a24 <buttons_scan_fn+0x1cc>)
   1595a:	f004 fb7c 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   1595e:	f388 8811 	msr	BASEPRI, r8
   15962:	f3bf 8f6f 	isb	sy
		if (err) {
   15966:	2d00      	cmp	r5, #0
   15968:	d04f      	beq.n	15a0a <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   1596a:	2145      	movs	r1, #69	; 0x45
   1596c:	482f      	ldr	r0, [pc, #188]	; (15a2c <buttons_scan_fn+0x1d4>)
   1596e:	e047      	b.n	15a00 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   15970:	22b4      	movs	r2, #180	; 0xb4
   15972:	492f      	ldr	r1, [pc, #188]	; (15a30 <buttons_scan_fn+0x1d8>)
   15974:	4829      	ldr	r0, [pc, #164]	; (15a1c <buttons_scan_fn+0x1c4>)
   15976:	f004 f8c8 	bl	19b0a <printk>
   1597a:	21b4      	movs	r1, #180	; 0xb4
   1597c:	482c      	ldr	r0, [pc, #176]	; (15a30 <buttons_scan_fn+0x1d8>)
   1597e:	f004 fb6a 	bl	1a056 <assert_post_action>
		int err = 0;
   15982:	2500      	movs	r5, #0
			break;
   15984:	e7de      	b.n	15944 <buttons_scan_fn+0xec>
		if (val < 0) {
   15986:	da96      	bge.n	158b6 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   15988:	2145      	movs	r1, #69	; 0x45
   1598a:	482a      	ldr	r0, [pc, #168]	; (15a34 <buttons_scan_fn+0x1dc>)
   1598c:	f004 f8bd 	bl	19b0a <printk>
			return 0;
   15990:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15992:	4b29      	ldr	r3, [pc, #164]	; (15a38 <buttons_scan_fn+0x1e0>)
   15994:	e8d3 2fef 	ldaex	r2, [r3]
   15998:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1599c:	2900      	cmp	r1, #0
   1599e:	d1f9      	bne.n	15994 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   159a0:	4b26      	ldr	r3, [pc, #152]	; (15a3c <buttons_scan_fn+0x1e4>)
   159a2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 15a40 <buttons_scan_fn+0x1e8>
   159a6:	781a      	ldrb	r2, [r3, #0]
   159a8:	2a00      	cmp	r2, #0
   159aa:	d19b      	bne.n	158e4 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   159ac:	f8d9 3000 	ldr.w	r3, [r9]
   159b0:	42a3      	cmp	r3, r4
   159b2:	d016      	beq.n	159e2 <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   159b4:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   159b8:	4b22      	ldr	r3, [pc, #136]	; (15a44 <buttons_scan_fn+0x1ec>)
   159ba:	681b      	ldr	r3, [r3, #0]
   159bc:	b113      	cbz	r3, 159c4 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   159be:	4641      	mov	r1, r8
   159c0:	4620      	mov	r0, r4
   159c2:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   159c4:	f04f 33ff 	mov.w	r3, #4294967295
   159c8:	f04f 32ff 	mov.w	r2, #4294967295
   159cc:	481e      	ldr	r0, [pc, #120]	; (15a48 <buttons_scan_fn+0x1f0>)
   159ce:	f001 fc13 	bl	171f8 <z_impl_k_mutex_lock>
	return list->head;
   159d2:	4b1e      	ldr	r3, [pc, #120]	; (15a4c <buttons_scan_fn+0x1f4>)
   159d4:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   159d6:	2d00      	cmp	r5, #0
   159d8:	f47f af75 	bne.w	158c6 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   159dc:	481a      	ldr	r0, [pc, #104]	; (15a48 <buttons_scan_fn+0x1f0>)
   159de:	f001 fcd7 	bl	17390 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   159e2:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   159e6:	2c00      	cmp	r4, #0
   159e8:	f43f af7f 	beq.w	158ea <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   159ec:	f44f 72a4 	mov.w	r2, #328	; 0x148
   159f0:	2300      	movs	r3, #0
   159f2:	4917      	ldr	r1, [pc, #92]	; (15a50 <buttons_scan_fn+0x1f8>)
   159f4:	4817      	ldr	r0, [pc, #92]	; (15a54 <buttons_scan_fn+0x1fc>)
   159f6:	f003 f915 	bl	18c24 <k_delayed_work_submit_to_queue>
		if (err) {
   159fa:	b130      	cbz	r0, 15a0a <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   159fc:	2145      	movs	r1, #69	; 0x45
   159fe:	4816      	ldr	r0, [pc, #88]	; (15a58 <buttons_scan_fn+0x200>)
}
   15a00:	b003      	add	sp, #12
   15a02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   15a06:	f004 b880 	b.w	19b0a <printk>
}
   15a0a:	b003      	add	sp, #12
   15a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a10:	2000ad20 	.word	0x2000ad20
   15a14:	0001e284 	.word	0x0001e284
   15a18:	00021392 	.word	0x00021392
   15a1c:	0001ecfc 	.word	0x0001ecfc
   15a20:	2000ad74 	.word	0x2000ad74
   15a24:	0001ed36 	.word	0x0001ed36
   15a28:	2000c63a 	.word	0x2000c63a
   15a2c:	00021451 	.word	0x00021451
   15a30:	00021413 	.word	0x00021413
   15a34:	000213d7 	.word	0x000213d7
   15a38:	2000ad78 	.word	0x2000ad78
   15a3c:	20008575 	.word	0x20008575
   15a40:	2000ad5c 	.word	0x2000ad5c
   15a44:	2000ad30 	.word	0x2000ad30
   15a48:	2000ad34 	.word	0x2000ad34
   15a4c:	2000ad48 	.word	0x2000ad48
   15a50:	2000a260 	.word	0x2000a260
   15a54:	2000a3b0 	.word	0x2000a3b0
   15a58:	000213f1 	.word	0x000213f1

00015a5c <button_pressed>:
{
   15a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15a5e:	f04f 0320 	mov.w	r3, #32
   15a62:	f3ef 8611 	mrs	r6, BASEPRI
   15a66:	f383 8811 	msr	BASEPRI, r3
   15a6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15a6e:	4827      	ldr	r0, [pc, #156]	; (15b0c <button_pressed+0xb0>)
   15a70:	f003 f862 	bl	18b38 <z_spin_lock_valid>
   15a74:	b940      	cbnz	r0, 15a88 <button_pressed+0x2c>
   15a76:	4926      	ldr	r1, [pc, #152]	; (15b10 <button_pressed+0xb4>)
   15a78:	4826      	ldr	r0, [pc, #152]	; (15b14 <button_pressed+0xb8>)
   15a7a:	227c      	movs	r2, #124	; 0x7c
   15a7c:	f004 f845 	bl	19b0a <printk>
   15a80:	217c      	movs	r1, #124	; 0x7c
   15a82:	4823      	ldr	r0, [pc, #140]	; (15b10 <button_pressed+0xb4>)
   15a84:	f004 fae7 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   15a88:	4820      	ldr	r0, [pc, #128]	; (15b0c <button_pressed+0xb0>)
   15a8a:	f003 f871 	bl	18b70 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15a8e:	2400      	movs	r4, #0
   15a90:	4d21      	ldr	r5, [pc, #132]	; (15b18 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   15a92:	4f22      	ldr	r7, [pc, #136]	; (15b1c <button_pressed+0xc0>)
   15a94:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   15a98:	f855 0b04 	ldr.w	r0, [r5], #4
   15a9c:	7919      	ldrb	r1, [r3, #4]
   15a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15aa2:	3401      	adds	r4, #1
   15aa4:	f7ff fe18 	bl	156d8 <z_impl_gpio_pin_interrupt_configure>
   15aa8:	2c04      	cmp	r4, #4
   15aaa:	d006      	beq.n	15aba <button_pressed+0x5e>
   15aac:	2800      	cmp	r0, #0
   15aae:	d0f1      	beq.n	15a94 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   15ab0:	2145      	movs	r1, #69	; 0x45
   15ab2:	481b      	ldr	r0, [pc, #108]	; (15b20 <button_pressed+0xc4>)
   15ab4:	f004 f829 	bl	19b0a <printk>
   15ab8:	e001      	b.n	15abe <button_pressed+0x62>
	if (err) {
   15aba:	2800      	cmp	r0, #0
   15abc:	d1f8      	bne.n	15ab0 <button_pressed+0x54>
	switch (state) {
   15abe:	4b19      	ldr	r3, [pc, #100]	; (15b24 <button_pressed+0xc8>)
   15ac0:	781a      	ldrb	r2, [r3, #0]
   15ac2:	b9ca      	cbnz	r2, 15af8 <button_pressed+0x9c>
		state = STATE_SCANNING;
   15ac4:	2201      	movs	r2, #1
   15ac6:	4918      	ldr	r1, [pc, #96]	; (15b28 <button_pressed+0xcc>)
   15ac8:	701a      	strb	r2, [r3, #0]
   15aca:	4818      	ldr	r0, [pc, #96]	; (15b2c <button_pressed+0xd0>)
   15acc:	2221      	movs	r2, #33	; 0x21
   15ace:	2300      	movs	r3, #0
   15ad0:	f003 f8a8 	bl	18c24 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15ad4:	480d      	ldr	r0, [pc, #52]	; (15b0c <button_pressed+0xb0>)
   15ad6:	f003 f83d 	bl	18b54 <z_spin_unlock_valid>
   15ada:	b940      	cbnz	r0, 15aee <button_pressed+0x92>
   15adc:	490c      	ldr	r1, [pc, #48]	; (15b10 <button_pressed+0xb4>)
   15ade:	480d      	ldr	r0, [pc, #52]	; (15b14 <button_pressed+0xb8>)
   15ae0:	22a7      	movs	r2, #167	; 0xa7
   15ae2:	f004 f812 	bl	19b0a <printk>
   15ae6:	21a7      	movs	r1, #167	; 0xa7
   15ae8:	4809      	ldr	r0, [pc, #36]	; (15b10 <button_pressed+0xb4>)
   15aea:	f004 fab4 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   15aee:	f386 8811 	msr	BASEPRI, r6
   15af2:	f3bf 8f6f 	isb	sy
}
   15af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   15af8:	22eb      	movs	r2, #235	; 0xeb
   15afa:	490d      	ldr	r1, [pc, #52]	; (15b30 <button_pressed+0xd4>)
   15afc:	4805      	ldr	r0, [pc, #20]	; (15b14 <button_pressed+0xb8>)
   15afe:	f004 f804 	bl	19b0a <printk>
   15b02:	21eb      	movs	r1, #235	; 0xeb
   15b04:	480a      	ldr	r0, [pc, #40]	; (15b30 <button_pressed+0xd4>)
   15b06:	f004 faa6 	bl	1a056 <assert_post_action>
		break;
   15b0a:	e7e3      	b.n	15ad4 <button_pressed+0x78>
   15b0c:	2000ad74 	.word	0x2000ad74
   15b10:	0001ed36 	.word	0x0001ed36
   15b14:	0001ecfc 	.word	0x0001ecfc
   15b18:	2000ad20 	.word	0x2000ad20
   15b1c:	0001e284 	.word	0x0001e284
   15b20:	0002146e 	.word	0x0002146e
   15b24:	2000c63a 	.word	0x2000c63a
   15b28:	2000a260 	.word	0x2000a260
   15b2c:	2000a3b0 	.word	0x2000a3b0
   15b30:	00021413 	.word	0x00021413

00015b34 <dk_leds_init>:
{
   15b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15b38:	2600      	movs	r6, #0
   15b3a:	4d23      	ldr	r5, [pc, #140]	; (15bc8 <dk_leds_init+0x94>)
   15b3c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 15bcc <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15b40:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15bd0 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   15b44:	6828      	ldr	r0, [r5, #0]
   15b46:	f001 f835 	bl	16bb4 <z_impl_device_get_binding>
   15b4a:	4604      	mov	r4, r0
   15b4c:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   15b50:	b940      	cbnz	r0, 15b64 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   15b52:	2145      	movs	r1, #69	; 0x45
   15b54:	481f      	ldr	r0, [pc, #124]	; (15bd4 <dk_leds_init+0xa0>)
   15b56:	f003 ffd8 	bl	19b0a <printk>
			return -ENODEV;
   15b5a:	f06f 0412 	mvn.w	r4, #18
}
   15b5e:	4620      	mov	r0, r4
   15b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b64:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   15b66:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   15b6a:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15b6c:	fa03 f80b 	lsl.w	r8, r3, fp
   15b70:	6843      	ldr	r3, [r0, #4]
   15b72:	681b      	ldr	r3, [r3, #0]
   15b74:	ea18 0f03 	tst.w	r8, r3
   15b78:	d10a      	bne.n	15b90 <dk_leds_init+0x5c>
   15b7a:	4651      	mov	r1, sl
   15b7c:	4816      	ldr	r0, [pc, #88]	; (15bd8 <dk_leds_init+0xa4>)
   15b7e:	f44f 7211 	mov.w	r2, #580	; 0x244
   15b82:	f003 ffc2 	bl	19b0a <printk>
   15b86:	f44f 7111 	mov.w	r1, #580	; 0x244
   15b8a:	4650      	mov	r0, sl
   15b8c:	f004 fa63 	bl	1a056 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   15b90:	68a3      	ldr	r3, [r4, #8]
   15b92:	4620      	mov	r0, r4
   15b94:	f44f 7200 	mov.w	r2, #512	; 0x200
   15b98:	4659      	mov	r1, fp
   15b9a:	681b      	ldr	r3, [r3, #0]
   15b9c:	4798      	blx	r3
	if (ret != 0) {
   15b9e:	4604      	mov	r4, r0
   15ba0:	b968      	cbnz	r0, 15bbe <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15ba2:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15ba4:	3601      	adds	r6, #1
   15ba6:	ea23 0308 	bic.w	r3, r3, r8
   15baa:	2e04      	cmp	r6, #4
   15bac:	603b      	str	r3, [r7, #0]
   15bae:	f105 0508 	add.w	r5, r5, #8
   15bb2:	d1c7      	bne.n	15b44 <dk_leds_init+0x10>
}
   15bb4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bb8:	210f      	movs	r1, #15
   15bba:	f7ff be1f 	b.w	157fc <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   15bbe:	2145      	movs	r1, #69	; 0x45
   15bc0:	4806      	ldr	r0, [pc, #24]	; (15bdc <dk_leds_init+0xa8>)
   15bc2:	f003 ffa2 	bl	19b0a <printk>
			return err;
   15bc6:	e7ca      	b.n	15b5e <dk_leds_init+0x2a>
   15bc8:	0001e2a4 	.word	0x0001e2a4
   15bcc:	2000ad64 	.word	0x2000ad64
   15bd0:	00021392 	.word	0x00021392
   15bd4:	0002148c 	.word	0x0002148c
   15bd8:	0001ecfc 	.word	0x0001ecfc
   15bdc:	000214a9 	.word	0x000214a9

00015be0 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15be0:	4b05      	ldr	r3, [pc, #20]	; (15bf8 <dk_read_buttons+0x18>)
   15be2:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   15be6:	b100      	cbz	r0, 15bea <dk_read_buttons+0xa>
		*button_state = current_state;
   15be8:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   15bea:	4804      	ldr	r0, [pc, #16]	; (15bfc <dk_read_buttons+0x1c>)
   15bec:	b111      	cbz	r1, 15bf4 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   15bee:	6802      	ldr	r2, [r0, #0]
   15bf0:	405a      	eors	r2, r3
   15bf2:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   15bf4:	6003      	str	r3, [r0, #0]
}
   15bf6:	4770      	bx	lr
   15bf8:	2000ad78 	.word	0x2000ad78
   15bfc:	2000ad60 	.word	0x2000ad60

00015c00 <dk_buttons_init>:
	button_handler_cb = button_handler;
   15c00:	4b4f      	ldr	r3, [pc, #316]	; (15d40 <dk_buttons_init+0x140>)
{
   15c02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   15c06:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   15c08:	4e4e      	ldr	r6, [pc, #312]	; (15d44 <dk_buttons_init+0x144>)
   15c0a:	484f      	ldr	r0, [pc, #316]	; (15d48 <dk_buttons_init+0x148>)
   15c0c:	f007 fada 	bl	1d1c4 <z_impl_k_mutex_init>
   15c10:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15c12:	2700      	movs	r7, #0
   15c14:	4d4d      	ldr	r5, [pc, #308]	; (15d4c <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15c16:	f8df a138 	ldr.w	sl, [pc, #312]	; 15d50 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   15c1a:	6828      	ldr	r0, [r5, #0]
   15c1c:	f000 ffca 	bl	16bb4 <z_impl_device_get_binding>
   15c20:	4604      	mov	r4, r0
   15c22:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   15c26:	b948      	cbnz	r0, 15c3c <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   15c28:	2145      	movs	r1, #69	; 0x45
   15c2a:	484a      	ldr	r0, [pc, #296]	; (15d54 <dk_buttons_init+0x154>)
   15c2c:	f003 ff6d 	bl	19b0a <printk>
			return -ENODEV;
   15c30:	f06f 0412 	mvn.w	r4, #18
}
   15c34:	4620      	mov	r0, r4
   15c36:	b003      	add	sp, #12
   15c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c3c:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   15c3e:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   15c42:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15c46:	fa03 f30b 	lsl.w	r3, r3, fp
   15c4a:	9301      	str	r3, [sp, #4]
   15c4c:	6843      	ldr	r3, [r0, #4]
   15c4e:	9a01      	ldr	r2, [sp, #4]
   15c50:	681b      	ldr	r3, [r3, #0]
   15c52:	421a      	tst	r2, r3
   15c54:	d10a      	bne.n	15c6c <dk_buttons_init+0x6c>
   15c56:	4651      	mov	r1, sl
   15c58:	483f      	ldr	r0, [pc, #252]	; (15d58 <dk_buttons_init+0x158>)
   15c5a:	f44f 7211 	mov.w	r2, #580	; 0x244
   15c5e:	f003 ff54 	bl	19b0a <printk>
   15c62:	f44f 7111 	mov.w	r1, #580	; 0x244
   15c66:	4650      	mov	r0, sl
   15c68:	f004 f9f5 	bl	1a056 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   15c6c:	68a3      	ldr	r3, [r4, #8]
   15c6e:	4620      	mov	r0, r4
   15c70:	f44f 7288 	mov.w	r2, #272	; 0x110
   15c74:	4659      	mov	r1, fp
   15c76:	681b      	ldr	r3, [r3, #0]
   15c78:	4798      	blx	r3
	if (ret != 0) {
   15c7a:	4604      	mov	r4, r0
   15c7c:	bb08      	cbnz	r0, 15cc2 <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15c7e:	f8d8 3000 	ldr.w	r3, [r8]
   15c82:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15c84:	3701      	adds	r7, #1
   15c86:	ea23 0302 	bic.w	r3, r3, r2
   15c8a:	2f04      	cmp	r7, #4
   15c8c:	f8c8 3000 	str.w	r3, [r8]
   15c90:	f105 0508 	add.w	r5, r5, #8
   15c94:	d1c1      	bne.n	15c1a <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15c96:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   15c98:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   15c9a:	f04f 0a01 	mov.w	sl, #1
   15c9e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 15d44 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   15ca2:	4b2a      	ldr	r3, [pc, #168]	; (15d4c <dk_buttons_init+0x14c>)
   15ca4:	f859 0b04 	ldr.w	r0, [r9], #4
   15ca8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   15cac:	791f      	ldrb	r7, [r3, #4]
   15cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15cb2:	4639      	mov	r1, r7
   15cb4:	f7ff fd10 	bl	156d8 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   15cb8:	4604      	mov	r4, r0
   15cba:	b138      	cbz	r0, 15ccc <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   15cbc:	2145      	movs	r1, #69	; 0x45
   15cbe:	4827      	ldr	r0, [pc, #156]	; (15d5c <dk_buttons_init+0x15c>)
   15cc0:	e001      	b.n	15cc6 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   15cc2:	2145      	movs	r1, #69	; 0x45
   15cc4:	4826      	ldr	r0, [pc, #152]	; (15d60 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   15cc6:	f003 ff20 	bl	19b0a <printk>
		return err;
   15cca:	e7b3      	b.n	15c34 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15ccc:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   15cce:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15cd2:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   15cd4:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15cd8:	d1e3      	bne.n	15ca2 <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15cda:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   15cdc:	4f21      	ldr	r7, [pc, #132]	; (15d64 <dk_buttons_init+0x164>)
   15cde:	4b22      	ldr	r3, [pc, #136]	; (15d68 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   15ce0:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   15ce4:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   15ce8:	6883      	ldr	r3, [r0, #8]
   15cea:	69db      	ldr	r3, [r3, #28]
   15cec:	b13b      	cbz	r3, 15cfe <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   15cee:	2201      	movs	r2, #1
   15cf0:	4639      	mov	r1, r7
   15cf2:	4798      	blx	r3
		if (err) {
   15cf4:	4604      	mov	r4, r0
   15cf6:	b128      	cbz	r0, 15d04 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   15cf8:	2145      	movs	r1, #69	; 0x45
   15cfa:	481c      	ldr	r0, [pc, #112]	; (15d6c <dk_buttons_init+0x16c>)
   15cfc:	e7e3      	b.n	15cc6 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   15cfe:	f06f 0422 	mvn.w	r4, #34	; 0x22
   15d02:	e7f9      	b.n	15cf8 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15d04:	3501      	adds	r5, #1
   15d06:	2d04      	cmp	r5, #4
   15d08:	d1ec      	bne.n	15ce4 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15d0a:	4d19      	ldr	r5, [pc, #100]	; (15d70 <dk_buttons_init+0x170>)
   15d0c:	4601      	mov	r1, r0
   15d0e:	2230      	movs	r2, #48	; 0x30
   15d10:	4628      	mov	r0, r5
   15d12:	f005 f965 	bl	1afe0 <memset>
	state = STATE_SCANNING;
   15d16:	2201      	movs	r2, #1
   15d18:	4b16      	ldr	r3, [pc, #88]	; (15d74 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15d1a:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15d1c:	606b      	str	r3, [r5, #4]
   15d1e:	4b16      	ldr	r3, [pc, #88]	; (15d78 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15d20:	4816      	ldr	r0, [pc, #88]	; (15d7c <dk_buttons_init+0x17c>)
   15d22:	701a      	strb	r2, [r3, #0]
   15d24:	2200      	movs	r2, #0
   15d26:	2300      	movs	r3, #0
   15d28:	f002 ff7c 	bl	18c24 <k_delayed_work_submit_to_queue>
	if (err) {
   15d2c:	4604      	mov	r4, r0
   15d2e:	b110      	cbz	r0, 15d36 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   15d30:	2145      	movs	r1, #69	; 0x45
   15d32:	4813      	ldr	r0, [pc, #76]	; (15d80 <dk_buttons_init+0x180>)
   15d34:	e7c7      	b.n	15cc6 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   15d36:	4601      	mov	r1, r0
   15d38:	f7ff ff52 	bl	15be0 <dk_read_buttons>
	return 0;
   15d3c:	e77a      	b.n	15c34 <dk_buttons_init+0x34>
   15d3e:	bf00      	nop
   15d40:	2000ad30 	.word	0x2000ad30
   15d44:	2000ad20 	.word	0x2000ad20
   15d48:	2000ad34 	.word	0x2000ad34
   15d4c:	0001e284 	.word	0x0001e284
   15d50:	00021392 	.word	0x00021392
   15d54:	0002148c 	.word	0x0002148c
   15d58:	0001ecfc 	.word	0x0001ecfc
   15d5c:	000214ea 	.word	0x000214ea
   15d60:	000214c8 	.word	0x000214c8
   15d64:	2000ad50 	.word	0x2000ad50
   15d68:	00015a5d 	.word	0x00015a5d
   15d6c:	0002150a 	.word	0x0002150a
   15d70:	2000a260 	.word	0x2000a260
   15d74:	00015859 	.word	0x00015859
   15d78:	2000c63a 	.word	0x2000c63a
   15d7c:	2000a3b0 	.word	0x2000a3b0
   15d80:	000213f1 	.word	0x000213f1

00015d84 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   15d84:	2804      	cmp	r0, #4
{
   15d86:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   15d88:	d907      	bls.n	15d9a <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   15d8a:	2145      	movs	r1, #69	; 0x45
   15d8c:	480d      	ldr	r0, [pc, #52]	; (15dc4 <dk_set_led+0x40>)
   15d8e:	f003 febc 	bl	19b0a <printk>
   15d92:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   15d96:	4620      	mov	r0, r4
   15d98:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   15d9a:	fab1 f281 	clz	r2, r1
   15d9e:	4b0a      	ldr	r3, [pc, #40]	; (15dc8 <dk_set_led+0x44>)
   15da0:	0952      	lsrs	r2, r2, #5
   15da2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   15da6:	7919      	ldrb	r1, [r3, #4]
   15da8:	4b08      	ldr	r3, [pc, #32]	; (15dcc <dk_set_led+0x48>)
   15daa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   15dae:	f7ff fd01 	bl	157b4 <gpio_pin_set_raw>
	if (err) {
   15db2:	4604      	mov	r4, r0
   15db4:	2800      	cmp	r0, #0
   15db6:	d0ee      	beq.n	15d96 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   15db8:	2145      	movs	r1, #69	; 0x45
   15dba:	4805      	ldr	r0, [pc, #20]	; (15dd0 <dk_set_led+0x4c>)
   15dbc:	f003 fea5 	bl	19b0a <printk>
   15dc0:	e7e9      	b.n	15d96 <dk_set_led+0x12>
   15dc2:	bf00      	nop
   15dc4:	00021523 	.word	0x00021523
   15dc8:	0001e2a4 	.word	0x0001e2a4
   15dcc:	2000ad64 	.word	0x2000ad64
   15dd0:	000213bc 	.word	0x000213bc

00015dd4 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   15dd4:	4803      	ldr	r0, [pc, #12]	; (15de4 <k_sys_fatal_error_handler+0x10>)
   15dd6:	2145      	movs	r1, #69	; 0x45
{
   15dd8:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   15dda:	f003 fe96 	bl	19b0a <printk>
	sys_arch_reboot(0);
   15dde:	2000      	movs	r0, #0
   15de0:	f7f7 fb7a 	bl	d4d8 <sys_arch_reboot>

	CODE_UNREACHABLE;
   15de4:	00021557 	.word	0x00021557

00015de8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   15de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15dec:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   15dee:	4c21      	ldr	r4, [pc, #132]	; (15e74 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   15df0:	4e21      	ldr	r6, [pc, #132]	; (15e78 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15df2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   15df6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 15e7c <check_ext_api_requests+0x94>
{
   15dfa:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15dfc:	45a8      	cmp	r8, r5
   15dfe:	d803      	bhi.n	15e08 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   15e00:	2000      	movs	r0, #0
   15e02:	b005      	add	sp, #20
   15e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   15e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15e0a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15e0e:	681f      	ldr	r7, [r3, #0]
   15e10:	ab01      	add	r3, sp, #4
   15e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   15e16:	220c      	movs	r2, #12
   15e18:	4619      	mov	r1, r3
   15e1a:	4638      	mov	r0, r7
   15e1c:	f005 f8a4 	bl	1af68 <memcmp>
   15e20:	b990      	cbnz	r0, 15e48 <check_ext_api_requests+0x60>
   15e22:	b18f      	cbz	r7, 15e48 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   15e26:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15e28:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   15e2a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15e2c:	4291      	cmp	r1, r2
   15e2e:	d10b      	bne.n	15e48 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   15e30:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   15e32:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   15e34:	4291      	cmp	r1, r2
   15e36:	d807      	bhi.n	15e48 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   15e38:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   15e3a:	4291      	cmp	r1, r2
   15e3c:	d904      	bls.n	15e48 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   15e3e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15e40:	695b      	ldr	r3, [r3, #20]
   15e42:	ea32 0303 	bics.w	r3, r2, r3
   15e46:	d00a      	beq.n	15e5e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   15e48:	6a27      	ldr	r7, [r4, #32]
   15e4a:	b167      	cbz	r7, 15e66 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   15e4c:	480c      	ldr	r0, [pc, #48]	; (15e80 <check_ext_api_requests+0x98>)
   15e4e:	f003 fe5c 	bl	19b0a <printk>
			k_panic();
   15e52:	4040      	eors	r0, r0
   15e54:	f380 8811 	msr	BASEPRI, r0
   15e58:	f04f 0004 	mov.w	r0, #4
   15e5c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   15e5e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15e60:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   15e62:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15e64:	e7ca      	b.n	15dfc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   15e66:	4648      	mov	r0, r9
   15e68:	f003 fe4f 	bl	19b0a <printk>
			*ext_api_req->ext_api = NULL;
   15e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15e6e:	601f      	str	r7, [r3, #0]
   15e70:	e7f5      	b.n	15e5e <check_ext_api_requests+0x76>
   15e72:	bf00      	nop
   15e74:	0000823c 	.word	0x0000823c
   15e78:	0001d9d0 	.word	0x0001d9d0
   15e7c:	000215a2 	.word	0x000215a2
   15e80:	00021579 	.word	0x00021579

00015e84 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   15e84:	4b04      	ldr	r3, [pc, #16]	; (15e98 <SystemCoreClockUpdate+0x14>)
   15e86:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   15e8a:	4b04      	ldr	r3, [pc, #16]	; (15e9c <SystemCoreClockUpdate+0x18>)
   15e8c:	f002 0203 	and.w	r2, r2, #3
   15e90:	40d3      	lsrs	r3, r2
   15e92:	4a03      	ldr	r2, [pc, #12]	; (15ea0 <SystemCoreClockUpdate+0x1c>)
   15e94:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   15e96:	4770      	bx	lr
   15e98:	40005000 	.word	0x40005000
   15e9c:	07a12000 	.word	0x07a12000
   15ea0:	20008528 	.word	0x20008528

00015ea4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   15ea4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   15ea6:	4604      	mov	r4, r0
   15ea8:	b940      	cbnz	r0, 15ebc <nrfx_clock_init+0x18>
   15eaa:	4909      	ldr	r1, [pc, #36]	; (15ed0 <nrfx_clock_init+0x2c>)
   15eac:	4809      	ldr	r0, [pc, #36]	; (15ed4 <nrfx_clock_init+0x30>)
   15eae:	22b3      	movs	r2, #179	; 0xb3
   15eb0:	f003 fe2b 	bl	19b0a <printk>
   15eb4:	21b3      	movs	r1, #179	; 0xb3
   15eb6:	4806      	ldr	r0, [pc, #24]	; (15ed0 <nrfx_clock_init+0x2c>)
   15eb8:	f004 f8cd 	bl	1a056 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15ebc:	4b06      	ldr	r3, [pc, #24]	; (15ed8 <nrfx_clock_init+0x34>)
   15ebe:	791a      	ldrb	r2, [r3, #4]
   15ec0:	b922      	cbnz	r2, 15ecc <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   15ec2:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   15ec4:	4805      	ldr	r0, [pc, #20]	; (15edc <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   15ec6:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   15ec8:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15eca:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15ecc:	4804      	ldr	r0, [pc, #16]	; (15ee0 <nrfx_clock_init+0x3c>)
    return err_code;
   15ece:	e7fc      	b.n	15eca <nrfx_clock_init+0x26>
   15ed0:	000215d5 	.word	0x000215d5
   15ed4:	0001ecfc 	.word	0x0001ecfc
   15ed8:	2000ad7c 	.word	0x2000ad7c
   15edc:	0bad0000 	.word	0x0bad0000
   15ee0:	0bad000c 	.word	0x0bad000c

00015ee4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15ee4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15ee6:	4b0d      	ldr	r3, [pc, #52]	; (15f1c <nrfx_clock_enable+0x38>)
   15ee8:	791b      	ldrb	r3, [r3, #4]
   15eea:	b943      	cbnz	r3, 15efe <nrfx_clock_enable+0x1a>
   15eec:	490c      	ldr	r1, [pc, #48]	; (15f20 <nrfx_clock_enable+0x3c>)
   15eee:	480d      	ldr	r0, [pc, #52]	; (15f24 <nrfx_clock_enable+0x40>)
   15ef0:	22cc      	movs	r2, #204	; 0xcc
   15ef2:	f003 fe0a 	bl	19b0a <printk>
   15ef6:	21cc      	movs	r1, #204	; 0xcc
   15ef8:	4809      	ldr	r0, [pc, #36]	; (15f20 <nrfx_clock_enable+0x3c>)
   15efa:	f004 f8ac 	bl	1a056 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15efe:	2005      	movs	r0, #5
   15f00:	f7f6 ffde 	bl	cec0 <arch_irq_is_enabled>
   15f04:	b910      	cbnz	r0, 15f0c <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15f06:	2005      	movs	r0, #5
   15f08:	f7f6 ffca 	bl	cea0 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   15f0c:	2201      	movs	r2, #1
   15f0e:	4b06      	ldr	r3, [pc, #24]	; (15f28 <nrfx_clock_enable+0x44>)
   15f10:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15f14:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15f18:	bd08      	pop	{r3, pc}
   15f1a:	bf00      	nop
   15f1c:	2000ad7c 	.word	0x2000ad7c
   15f20:	000215d5 	.word	0x000215d5
   15f24:	0001ecfc 	.word	0x0001ecfc
   15f28:	40005000 	.word	0x40005000

00015f2c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15f2c:	4b30      	ldr	r3, [pc, #192]	; (15ff0 <nrfx_clock_start+0xc4>)
{
   15f2e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15f30:	791b      	ldrb	r3, [r3, #4]
{
   15f32:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15f34:	b953      	cbnz	r3, 15f4c <nrfx_clock_start+0x20>
   15f36:	492f      	ldr	r1, [pc, #188]	; (15ff4 <nrfx_clock_start+0xc8>)
   15f38:	482f      	ldr	r0, [pc, #188]	; (15ff8 <nrfx_clock_start+0xcc>)
   15f3a:	f44f 7284 	mov.w	r2, #264	; 0x108
   15f3e:	f003 fde4 	bl	19b0a <printk>
   15f42:	f44f 7184 	mov.w	r1, #264	; 0x108
   15f46:	482b      	ldr	r0, [pc, #172]	; (15ff4 <nrfx_clock_start+0xc8>)
   15f48:	f004 f885 	bl	1a056 <assert_post_action>
    switch (domain)
   15f4c:	2c03      	cmp	r4, #3
   15f4e:	d842      	bhi.n	15fd6 <nrfx_clock_start+0xaa>
   15f50:	e8df f004 	tbb	[pc, r4]
   15f54:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15f58:	4b28      	ldr	r3, [pc, #160]	; (15ffc <nrfx_clock_start+0xd0>)
   15f5a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15f5e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   15f62:	03c9      	lsls	r1, r1, #15
   15f64:	d510      	bpl.n	15f88 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   15f66:	f002 0203 	and.w	r2, r2, #3
   15f6a:	2a02      	cmp	r2, #2
   15f6c:	d10c      	bne.n	15f88 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15f6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f72:	2200      	movs	r2, #0
   15f74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15f78:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   15f7c:	2202      	movs	r2, #2
   15f7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f82:	2201      	movs	r2, #1
   15f84:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15f86:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   15f88:	2201      	movs	r2, #1
   15f8a:	e7f0      	b.n	15f6e <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f8c:	2200      	movs	r2, #0
   15f8e:	4b1b      	ldr	r3, [pc, #108]	; (15ffc <nrfx_clock_start+0xd0>)
   15f90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15f94:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15f98:	2201      	movs	r2, #1
   15f9a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f9e:	601a      	str	r2, [r3, #0]
}
   15fa0:	e7f1      	b.n	15f86 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fa2:	2200      	movs	r2, #0
   15fa4:	4b15      	ldr	r3, [pc, #84]	; (15ffc <nrfx_clock_start+0xd0>)
   15fa6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15faa:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   15fae:	f44f 7200 	mov.w	r2, #512	; 0x200
   15fb2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15fb6:	2201      	movs	r2, #1
   15fb8:	621a      	str	r2, [r3, #32]
}
   15fba:	e7e4      	b.n	15f86 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fbc:	2200      	movs	r2, #0
   15fbe:	4b0f      	ldr	r3, [pc, #60]	; (15ffc <nrfx_clock_start+0xd0>)
   15fc0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15fc4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   15fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
   15fcc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15fd0:	2201      	movs	r2, #1
   15fd2:	619a      	str	r2, [r3, #24]
}
   15fd4:	e7d7      	b.n	15f86 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   15fd6:	4907      	ldr	r1, [pc, #28]	; (15ff4 <nrfx_clock_start+0xc8>)
   15fd8:	4807      	ldr	r0, [pc, #28]	; (15ff8 <nrfx_clock_start+0xcc>)
   15fda:	f44f 729d 	mov.w	r2, #314	; 0x13a
   15fde:	f003 fd94 	bl	19b0a <printk>
}
   15fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   15fe6:	f44f 719d 	mov.w	r1, #314	; 0x13a
   15fea:	4802      	ldr	r0, [pc, #8]	; (15ff4 <nrfx_clock_start+0xc8>)
   15fec:	f004 b833 	b.w	1a056 <assert_post_action>
   15ff0:	2000ad7c 	.word	0x2000ad7c
   15ff4:	000215d5 	.word	0x000215d5
   15ff8:	0001ecfc 	.word	0x0001ecfc
   15ffc:	40005000 	.word	0x40005000

00016000 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16000:	4b42      	ldr	r3, [pc, #264]	; (1610c <nrfx_clock_stop+0x10c>)
{
   16002:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16004:	791b      	ldrb	r3, [r3, #4]
{
   16006:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16008:	b953      	cbnz	r3, 16020 <nrfx_clock_stop+0x20>
   1600a:	4941      	ldr	r1, [pc, #260]	; (16110 <nrfx_clock_stop+0x110>)
   1600c:	4841      	ldr	r0, [pc, #260]	; (16114 <nrfx_clock_stop+0x114>)
   1600e:	f240 1241 	movw	r2, #321	; 0x141
   16012:	f003 fd7a 	bl	19b0a <printk>
   16016:	f240 1141 	movw	r1, #321	; 0x141
   1601a:	483d      	ldr	r0, [pc, #244]	; (16110 <nrfx_clock_stop+0x110>)
   1601c:	f004 f81b 	bl	1a056 <assert_post_action>
    switch (domain)
   16020:	2c03      	cmp	r4, #3
   16022:	d856      	bhi.n	160d2 <nrfx_clock_stop+0xd2>
   16024:	e8df f004 	tbb	[pc, r4]
   16028:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   1602c:	2202      	movs	r2, #2
   1602e:	4b3a      	ldr	r3, [pc, #232]	; (16118 <nrfx_clock_stop+0x118>)
   16030:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16034:	2200      	movs	r2, #0
   16036:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1603a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1603e:	2201      	movs	r2, #1
   16040:	60da      	str	r2, [r3, #12]
   16042:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16046:	4e34      	ldr	r6, [pc, #208]	; (16118 <nrfx_clock_stop+0x118>)
    switch (domain)
   16048:	2c02      	cmp	r4, #2
   1604a:	d04f      	beq.n	160ec <nrfx_clock_stop+0xec>
   1604c:	2c03      	cmp	r4, #3
   1604e:	d050      	beq.n	160f2 <nrfx_clock_stop+0xf2>
   16050:	2c00      	cmp	r4, #0
   16052:	d151      	bne.n	160f8 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16054:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16058:	03db      	lsls	r3, r3, #15
   1605a:	d51f      	bpl.n	1609c <nrfx_clock_stop+0x9c>
   1605c:	2001      	movs	r0, #1
   1605e:	f006 fc8e 	bl	1c97e <nrfx_busy_wait>
   16062:	3d01      	subs	r5, #1
   16064:	d1f0      	bne.n	16048 <nrfx_clock_stop+0x48>
   16066:	e019      	b.n	1609c <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   16068:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1606a:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1606c:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   16070:	4c29      	ldr	r4, [pc, #164]	; (16118 <nrfx_clock_stop+0x118>)
   16072:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16076:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1607a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1607e:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16080:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16084:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16088:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1608c:	03d2      	lsls	r2, r2, #15
   1608e:	d505      	bpl.n	1609c <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   16090:	b123      	cbz	r3, 1609c <nrfx_clock_stop+0x9c>
   16092:	2001      	movs	r0, #1
   16094:	f006 fc73 	bl	1c97e <nrfx_busy_wait>
   16098:	3d01      	subs	r5, #1
   1609a:	d1f1      	bne.n	16080 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1609c:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   1609e:	f44f 7200 	mov.w	r2, #512	; 0x200
   160a2:	4b1d      	ldr	r3, [pc, #116]	; (16118 <nrfx_clock_stop+0x118>)
   160a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   160a8:	2200      	movs	r2, #0
   160aa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   160ae:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   160b2:	2201      	movs	r2, #1
   160b4:	625a      	str	r2, [r3, #36]	; 0x24
}
   160b6:	e7c4      	b.n	16042 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   160b8:	f44f 7280 	mov.w	r2, #256	; 0x100
   160bc:	4b16      	ldr	r3, [pc, #88]	; (16118 <nrfx_clock_stop+0x118>)
   160be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   160c2:	2200      	movs	r2, #0
   160c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   160c8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   160cc:	2201      	movs	r2, #1
   160ce:	61da      	str	r2, [r3, #28]
}
   160d0:	e7b7      	b.n	16042 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   160d2:	490f      	ldr	r1, [pc, #60]	; (16110 <nrfx_clock_stop+0x110>)
   160d4:	480f      	ldr	r0, [pc, #60]	; (16114 <nrfx_clock_stop+0x114>)
   160d6:	f240 125d 	movw	r2, #349	; 0x15d
   160da:	f003 fd16 	bl	19b0a <printk>
   160de:	f240 115d 	movw	r1, #349	; 0x15d
   160e2:	480b      	ldr	r0, [pc, #44]	; (16110 <nrfx_clock_stop+0x110>)
}
   160e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   160e8:	f003 bfb5 	b.w	1a056 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   160ec:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   160f0:	e7b2      	b.n	16058 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   160f2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   160f6:	e7af      	b.n	16058 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   160f8:	4908      	ldr	r1, [pc, #32]	; (1611c <nrfx_clock_stop+0x11c>)
   160fa:	4806      	ldr	r0, [pc, #24]	; (16114 <nrfx_clock_stop+0x114>)
   160fc:	f240 3242 	movw	r2, #834	; 0x342
   16100:	f003 fd03 	bl	19b0a <printk>
   16104:	f240 3142 	movw	r1, #834	; 0x342
   16108:	4804      	ldr	r0, [pc, #16]	; (1611c <nrfx_clock_stop+0x11c>)
   1610a:	e7eb      	b.n	160e4 <nrfx_clock_stop+0xe4>
   1610c:	2000ad7c 	.word	0x2000ad7c
   16110:	000215d5 	.word	0x000215d5
   16114:	0001ecfc 	.word	0x0001ecfc
   16118:	40005000 	.word	0x40005000
   1611c:	00021612 	.word	0x00021612

00016120 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16120:	4b28      	ldr	r3, [pc, #160]	; (161c4 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16122:	b510      	push	{r4, lr}
   16124:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   16128:	b152      	cbz	r2, 16140 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1612a:	2000      	movs	r0, #0
   1612c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   16130:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   16134:	2201      	movs	r2, #1
   16136:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1613a:	4b23      	ldr	r3, [pc, #140]	; (161c8 <nrfx_power_clock_irq_handler+0xa8>)
   1613c:	681b      	ldr	r3, [r3, #0]
   1613e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16140:	4b20      	ldr	r3, [pc, #128]	; (161c4 <nrfx_power_clock_irq_handler+0xa4>)
   16142:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   16146:	b18a      	cbz	r2, 1616c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16148:	2200      	movs	r2, #0
   1614a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1614e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16152:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16156:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1615a:	f002 0203 	and.w	r2, r2, #3
   1615e:	2a01      	cmp	r2, #1
   16160:	f04f 0102 	mov.w	r1, #2
   16164:	d126      	bne.n	161b4 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16166:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1616a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1616c:	4b15      	ldr	r3, [pc, #84]	; (161c4 <nrfx_power_clock_irq_handler+0xa4>)
   1616e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   16172:	b162      	cbz	r2, 1618e <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16174:	2200      	movs	r2, #0
   16176:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1617a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1617e:	f44f 7280 	mov.w	r2, #256	; 0x100
   16182:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   16186:	4b10      	ldr	r3, [pc, #64]	; (161c8 <nrfx_power_clock_irq_handler+0xa8>)
   16188:	2004      	movs	r0, #4
   1618a:	681b      	ldr	r3, [r3, #0]
   1618c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1618e:	4b0d      	ldr	r3, [pc, #52]	; (161c4 <nrfx_power_clock_irq_handler+0xa4>)
   16190:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   16194:	b1aa      	cbz	r2, 161c2 <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   16196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1619a:	2200      	movs	r2, #0
   1619c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   161a0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   161a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   161a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   161ac:	4b06      	ldr	r3, [pc, #24]	; (161c8 <nrfx_power_clock_irq_handler+0xa8>)
   161ae:	2005      	movs	r0, #5
   161b0:	681b      	ldr	r3, [r3, #0]
   161b2:	4718      	bx	r3
   161b4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   161b8:	4b03      	ldr	r3, [pc, #12]	; (161c8 <nrfx_power_clock_irq_handler+0xa8>)
   161ba:	2001      	movs	r0, #1
   161bc:	681b      	ldr	r3, [r3, #0]
   161be:	4798      	blx	r3
   161c0:	e7d4      	b.n	1616c <nrfx_power_clock_irq_handler+0x4c>
}
   161c2:	bd10      	pop	{r4, pc}
   161c4:	40005000 	.word	0x40005000
   161c8:	2000ad7c 	.word	0x2000ad7c

000161cc <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   161cc:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   161ce:	4c0a      	ldr	r4, [pc, #40]	; (161f8 <nrfx_dppi_channel_alloc+0x2c>)
   161d0:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   161d2:	43ce      	mvns	r6, r1
   161d4:	d00e      	beq.n	161f4 <nrfx_dppi_channel_alloc+0x28>
   161d6:	2300      	movs	r3, #0
   161d8:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   161da:	fa26 f502 	lsr.w	r5, r6, r2
   161de:	07ed      	lsls	r5, r5, #31
   161e0:	f103 0301 	add.w	r3, r3, #1
   161e4:	d5f8      	bpl.n	161d8 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   161e6:	2301      	movs	r3, #1
   161e8:	4093      	lsls	r3, r2
   161ea:	430b      	orrs	r3, r1
    *p_channel = channel;
   161ec:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   161ee:	4803      	ldr	r0, [pc, #12]	; (161fc <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   161f0:	6023      	str	r3, [r4, #0]
}
   161f2:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   161f4:	4802      	ldr	r0, [pc, #8]	; (16200 <nrfx_dppi_channel_alloc+0x34>)
   161f6:	e7fc      	b.n	161f2 <nrfx_dppi_channel_alloc+0x26>
   161f8:	2000ad84 	.word	0x2000ad84
   161fc:	0bad0000 	.word	0x0bad0000
   16200:	0bad0002 	.word	0x0bad0002

00016204 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   16204:	2301      	movs	r3, #1
   16206:	fa03 f000 	lsl.w	r0, r3, r0
   1620a:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1620c:	b193      	cbz	r3, 16234 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1620e:	f04f 0320 	mov.w	r3, #32
   16212:	f3ef 8111 	mrs	r1, BASEPRI
   16216:	f383 8811 	msr	BASEPRI, r3
   1621a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1621e:	4a06      	ldr	r2, [pc, #24]	; (16238 <nrfx_gpiote_channel_free+0x34>)
   16220:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   16222:	ea23 0000 	bic.w	r0, r3, r0
   16226:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   16228:	f381 8811 	msr	BASEPRI, r1
   1622c:	f3bf 8f6f 	isb	sy
   16230:	4802      	ldr	r0, [pc, #8]	; (1623c <nrfx_gpiote_channel_free+0x38>)
   16232:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   16234:	4802      	ldr	r0, [pc, #8]	; (16240 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16236:	4770      	bx	lr
   16238:	2000ad88 	.word	0x2000ad88
   1623c:	0bad0000 	.word	0x0bad0000
   16240:	0bad0004 	.word	0x0bad0004

00016244 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   16244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   16248:	22ff      	movs	r2, #255	; 0xff
{
   1624a:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   1624c:	2601      	movs	r6, #1
{
   1624e:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   16250:	f8df e054 	ldr.w	lr, [pc, #84]	; 162a8 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   16254:	4815      	ldr	r0, [pc, #84]	; (162ac <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   16256:	f8df 8058 	ldr.w	r8, [pc, #88]	; 162b0 <nrfx_gpiote_channel_alloc+0x6c>
   1625a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1625c:	f04f 0120 	mov.w	r1, #32
   16260:	f3ef 8c11 	mrs	ip, BASEPRI
   16264:	f381 8811 	msr	BASEPRI, r1
   16268:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1626c:	fa22 f103 	lsr.w	r1, r2, r3
   16270:	07c9      	lsls	r1, r1, #31
   16272:	d50a      	bpl.n	1628a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   16274:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   16278:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1627c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   1627e:	bf01      	itttt	eq
   16280:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   16282:	4339      	orreq	r1, r7
   16284:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   16288:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1628a:	f38c 8811 	msr	BASEPRI, ip
   1628e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   16292:	4540      	cmp	r0, r8
   16294:	d005      	beq.n	162a2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   16296:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1629a:	439a      	bics	r2, r3
   1629c:	f104 0401 	add.w	r4, r4, #1
   162a0:	d1db      	bne.n	1625a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   162a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   162a6:	bf00      	nop
   162a8:	2000ad88 	.word	0x2000ad88
   162ac:	0bad0002 	.word	0x0bad0002
   162b0:	0bad0000 	.word	0x0bad0000

000162b4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   162b4:	b570      	push	{r4, r5, r6, lr}
   162b6:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   162b8:	460d      	mov	r5, r1
   162ba:	b941      	cbnz	r1, 162ce <nrfx_ipc_init+0x1a>
   162bc:	490b      	ldr	r1, [pc, #44]	; (162ec <nrfx_ipc_init+0x38>)
   162be:	480c      	ldr	r0, [pc, #48]	; (162f0 <nrfx_ipc_init+0x3c>)
   162c0:	2232      	movs	r2, #50	; 0x32
   162c2:	f003 fc22 	bl	19b0a <printk>
   162c6:	2132      	movs	r1, #50	; 0x32
   162c8:	4808      	ldr	r0, [pc, #32]	; (162ec <nrfx_ipc_init+0x38>)
   162ca:	f003 fec4 	bl	1a056 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   162ce:	4c09      	ldr	r4, [pc, #36]	; (162f4 <nrfx_ipc_init+0x40>)
   162d0:	7923      	ldrb	r3, [r4, #4]
   162d2:	b943      	cbnz	r3, 162e6 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   162d4:	202a      	movs	r0, #42	; 0x2a
   162d6:	f7f6 fde3 	bl	cea0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   162da:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   162dc:	4806      	ldr	r0, [pc, #24]	; (162f8 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   162de:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   162e0:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   162e2:	60a6      	str	r6, [r4, #8]
}
   162e4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   162e6:	4805      	ldr	r0, [pc, #20]	; (162fc <nrfx_ipc_init+0x48>)
   162e8:	e7fc      	b.n	162e4 <nrfx_ipc_init+0x30>
   162ea:	bf00      	nop
   162ec:	00021646 	.word	0x00021646
   162f0:	0001ecfc 	.word	0x0001ecfc
   162f4:	2000ade8 	.word	0x2000ade8
   162f8:	0bad0000 	.word	0x0bad0000
   162fc:	0bad000c 	.word	0x0bad000c

00016300 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   16300:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   16302:	4604      	mov	r4, r0
   16304:	b940      	cbnz	r0, 16318 <nrfx_ipc_config_load+0x18>
   16306:	4919      	ldr	r1, [pc, #100]	; (1636c <nrfx_ipc_config_load+0x6c>)
   16308:	4819      	ldr	r0, [pc, #100]	; (16370 <nrfx_ipc_config_load+0x70>)
   1630a:	2244      	movs	r2, #68	; 0x44
   1630c:	f003 fbfd 	bl	19b0a <printk>
   16310:	2144      	movs	r1, #68	; 0x44
   16312:	4816      	ldr	r0, [pc, #88]	; (1636c <nrfx_ipc_config_load+0x6c>)
   16314:	f003 fe9f 	bl	1a056 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16318:	4b16      	ldr	r3, [pc, #88]	; (16374 <nrfx_ipc_config_load+0x74>)
   1631a:	791b      	ldrb	r3, [r3, #4]
   1631c:	2b01      	cmp	r3, #1
   1631e:	d008      	beq.n	16332 <nrfx_ipc_config_load+0x32>
   16320:	4912      	ldr	r1, [pc, #72]	; (1636c <nrfx_ipc_config_load+0x6c>)
   16322:	4813      	ldr	r0, [pc, #76]	; (16370 <nrfx_ipc_config_load+0x70>)
   16324:	2245      	movs	r2, #69	; 0x45
   16326:	f003 fbf0 	bl	19b0a <printk>
   1632a:	2145      	movs	r1, #69	; 0x45
   1632c:	480f      	ldr	r0, [pc, #60]	; (1636c <nrfx_ipc_config_load+0x6c>)
   1632e:	f003 fe92 	bl	1a056 <assert_post_action>
{
   16332:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   16334:	4a10      	ldr	r2, [pc, #64]	; (16378 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   16336:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1633a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1633e:	3301      	adds	r3, #1
   16340:	2b10      	cmp	r3, #16
   16342:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   16346:	d1f6      	bne.n	16336 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   16348:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1634a:	4a0b      	ldr	r2, [pc, #44]	; (16378 <nrfx_ipc_config_load+0x78>)
   1634c:	f104 0140 	add.w	r1, r4, #64	; 0x40
   16350:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   16354:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16358:	3301      	adds	r3, #1
   1635a:	2b10      	cmp	r3, #16
   1635c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   16360:	d1f6      	bne.n	16350 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   16362:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   16366:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1636a:	bd38      	pop	{r3, r4, r5, pc}
   1636c:	00021646 	.word	0x00021646
   16370:	0001ecfc 	.word	0x0001ecfc
   16374:	2000ade8 	.word	0x2000ade8
   16378:	4002a000 	.word	0x4002a000

0001637c <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1637c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1637e:	4b0a      	ldr	r3, [pc, #40]	; (163a8 <nrfx_ipc_receive_event_enable+0x2c>)
{
   16380:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16382:	791b      	ldrb	r3, [r3, #4]
   16384:	2b01      	cmp	r3, #1
   16386:	d008      	beq.n	1639a <nrfx_ipc_receive_event_enable+0x1e>
   16388:	4908      	ldr	r1, [pc, #32]	; (163ac <nrfx_ipc_receive_event_enable+0x30>)
   1638a:	4809      	ldr	r0, [pc, #36]	; (163b0 <nrfx_ipc_receive_event_enable+0x34>)
   1638c:	226a      	movs	r2, #106	; 0x6a
   1638e:	f003 fbbc 	bl	19b0a <printk>
   16392:	216a      	movs	r1, #106	; 0x6a
   16394:	4805      	ldr	r0, [pc, #20]	; (163ac <nrfx_ipc_receive_event_enable+0x30>)
   16396:	f003 fe5e 	bl	1a056 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1639a:	2301      	movs	r3, #1
   1639c:	fa03 f404 	lsl.w	r4, r3, r4
   163a0:	4b04      	ldr	r3, [pc, #16]	; (163b4 <nrfx_ipc_receive_event_enable+0x38>)
   163a2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   163a6:	bd10      	pop	{r4, pc}
   163a8:	2000ade8 	.word	0x2000ade8
   163ac:	00021646 	.word	0x00021646
   163b0:	0001ecfc 	.word	0x0001ecfc
   163b4:	4002a000 	.word	0x4002a000

000163b8 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   163b8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   163ba:	4b0a      	ldr	r3, [pc, #40]	; (163e4 <nrfx_ipc_receive_event_disable+0x2c>)
{
   163bc:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   163be:	791b      	ldrb	r3, [r3, #4]
   163c0:	2b01      	cmp	r3, #1
   163c2:	d008      	beq.n	163d6 <nrfx_ipc_receive_event_disable+0x1e>
   163c4:	4908      	ldr	r1, [pc, #32]	; (163e8 <nrfx_ipc_receive_event_disable+0x30>)
   163c6:	4809      	ldr	r0, [pc, #36]	; (163ec <nrfx_ipc_receive_event_disable+0x34>)
   163c8:	2270      	movs	r2, #112	; 0x70
   163ca:	f003 fb9e 	bl	19b0a <printk>
   163ce:	2170      	movs	r1, #112	; 0x70
   163d0:	4805      	ldr	r0, [pc, #20]	; (163e8 <nrfx_ipc_receive_event_disable+0x30>)
   163d2:	f003 fe40 	bl	1a056 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   163d6:	2301      	movs	r3, #1
   163d8:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   163dc:	4b04      	ldr	r3, [pc, #16]	; (163f0 <nrfx_ipc_receive_event_disable+0x38>)
   163de:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   163e2:	bd10      	pop	{r4, pc}
   163e4:	2000ade8 	.word	0x2000ade8
   163e8:	00021646 	.word	0x00021646
   163ec:	0001ecfc 	.word	0x0001ecfc
   163f0:	4002a000 	.word	0x4002a000

000163f4 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   163f4:	4b15      	ldr	r3, [pc, #84]	; (1644c <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   163f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163fa:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   163fe:	4f14      	ldr	r7, [pc, #80]	; (16450 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   16400:	4635      	mov	r5, r6
   16402:	f8df 8050 	ldr.w	r8, [pc, #80]	; 16454 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   16406:	b935      	cbnz	r5, 16416 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16408:	4b13      	ldr	r3, [pc, #76]	; (16458 <nrfx_ipc_irq_handler+0x64>)
   1640a:	4630      	mov	r0, r6
}
   1640c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16410:	681a      	ldr	r2, [r3, #0]
   16412:	6899      	ldr	r1, [r3, #8]
   16414:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   16416:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   1641a:	2301      	movs	r3, #1
  return __builtin_clz(value);
   1641c:	fab4 f484 	clz	r4, r4
   16420:	40a3      	lsls	r3, r4
   16422:	2c0f      	cmp	r4, #15
   16424:	ea25 0503 	bic.w	r5, r5, r3
   16428:	d90a      	bls.n	16440 <nrfx_ipc_irq_handler+0x4c>
   1642a:	4639      	mov	r1, r7
   1642c:	4640      	mov	r0, r8
   1642e:	f240 12e5 	movw	r2, #485	; 0x1e5
   16432:	f003 fb6a 	bl	19b0a <printk>
   16436:	f240 11e5 	movw	r1, #485	; 0x1e5
   1643a:	4638      	mov	r0, r7
   1643c:	f003 fe0b 	bl	1a056 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16440:	2200      	movs	r2, #0
   16442:	4b06      	ldr	r3, [pc, #24]	; (1645c <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   16444:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16446:	511a      	str	r2, [r3, r4]
}
   16448:	e7dd      	b.n	16406 <nrfx_ipc_irq_handler+0x12>
   1644a:	bf00      	nop
   1644c:	4002a000 	.word	0x4002a000
   16450:	00021681 	.word	0x00021681
   16454:	0001ecfc 	.word	0x0001ecfc
   16458:	2000ade8 	.word	0x2000ade8
   1645c:	4002a100 	.word	0x4002a100

00016460 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   16460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16464:	460e      	mov	r6, r1
   16466:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   16468:	4d0c      	ldr	r5, [pc, #48]	; (1649c <metal_generic_dev_open+0x3c>)
   1646a:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1646e:	42ac      	cmp	r4, r5
   16470:	d103      	bne.n	1647a <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   16472:	f06f 0012 	mvn.w	r0, #18
   16476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1647a:	4631      	mov	r1, r6
   1647c:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   16480:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   16484:	f004 fd53 	bl	1af2e <strcmp>
   16488:	b930      	cbnz	r0, 16498 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   1648a:	4640      	mov	r0, r8
			*device = dev;
   1648c:	f8c7 8000 	str.w	r8, [r7]
}
   16490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   16494:	f006 bb4c 	b.w	1cb30 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   16498:	6824      	ldr	r4, [r4, #0]
   1649a:	e7e8      	b.n	1646e <metal_generic_dev_open+0xe>
   1649c:	2000adf4 	.word	0x2000adf4

000164a0 <metal_bus_find>:
{
   164a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164a4:	4607      	mov	r7, r0
   164a6:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   164a8:	4e0b      	ldr	r6, [pc, #44]	; (164d8 <metal_bus_find+0x38>)
   164aa:	f856 4f08 	ldr.w	r4, [r6, #8]!
   164ae:	42b4      	cmp	r4, r6
   164b0:	d102      	bne.n	164b8 <metal_bus_find+0x18>
	return -ENOENT;
   164b2:	f06f 0001 	mvn.w	r0, #1
   164b6:	e00a      	b.n	164ce <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   164b8:	4639      	mov	r1, r7
   164ba:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   164be:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   164c2:	f004 fd34 	bl	1af2e <strcmp>
   164c6:	b920      	cbnz	r0, 164d2 <metal_bus_find+0x32>
   164c8:	b11d      	cbz	r5, 164d2 <metal_bus_find+0x32>
			*result = bus;
   164ca:	f8c5 8000 	str.w	r8, [r5]
}
   164ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   164d2:	6824      	ldr	r4, [r4, #0]
   164d4:	e7eb      	b.n	164ae <metal_bus_find+0xe>
   164d6:	bf00      	nop
   164d8:	2000adf4 	.word	0x2000adf4

000164dc <metal_bus_register>:
{
   164dc:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   164de:	4604      	mov	r4, r0
   164e0:	b910      	cbnz	r0, 164e8 <metal_bus_register+0xc>
		return -EINVAL;
   164e2:	f06f 0015 	mvn.w	r0, #21
}
   164e6:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   164e8:	6800      	ldr	r0, [r0, #0]
   164ea:	2800      	cmp	r0, #0
   164ec:	d0f9      	beq.n	164e2 <metal_bus_register+0x6>
   164ee:	f004 fd0e 	bl	1af0e <strlen>
   164f2:	2800      	cmp	r0, #0
   164f4:	d0f5      	beq.n	164e2 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   164f6:	2100      	movs	r1, #0
   164f8:	6820      	ldr	r0, [r4, #0]
   164fa:	f7ff ffd1 	bl	164a0 <metal_bus_find>
   164fe:	b1c0      	cbz	r0, 16532 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   16500:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   16504:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   16508:	4b0c      	ldr	r3, [pc, #48]	; (1653c <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1650a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1650e:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   16510:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   16514:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   16516:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   16518:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1651a:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1651c:	781a      	ldrb	r2, [r3, #0]
   1651e:	2a06      	cmp	r2, #6
   16520:	d905      	bls.n	1652e <metal_bus_register+0x52>
   16522:	685b      	ldr	r3, [r3, #4]
   16524:	b143      	cbz	r3, 16538 <metal_bus_register+0x5c>
   16526:	2007      	movs	r0, #7
   16528:	6822      	ldr	r2, [r4, #0]
   1652a:	4905      	ldr	r1, [pc, #20]	; (16540 <metal_bus_register+0x64>)
   1652c:	4798      	blx	r3
	return 0;
   1652e:	2000      	movs	r0, #0
   16530:	e7d9      	b.n	164e6 <metal_bus_register+0xa>
		return -EEXIST;
   16532:	f06f 0010 	mvn.w	r0, #16
   16536:	e7d6      	b.n	164e6 <metal_bus_register+0xa>
	return 0;
   16538:	4618      	mov	r0, r3
   1653a:	e7d4      	b.n	164e6 <metal_bus_register+0xa>
   1653c:	2000adf4 	.word	0x2000adf4
   16540:	000216b3 	.word	0x000216b3

00016544 <metal_register_generic_device>:
{
   16544:	b510      	push	{r4, lr}
   16546:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   16548:	6800      	ldr	r0, [r0, #0]
   1654a:	b910      	cbnz	r0, 16552 <metal_register_generic_device+0xe>
		return -EINVAL;
   1654c:	f06f 0015 	mvn.w	r0, #21
}
   16550:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   16552:	f004 fcdc 	bl	1af0e <strlen>
   16556:	2800      	cmp	r0, #0
   16558:	d0f8      	beq.n	1654c <metal_register_generic_device+0x8>
   1655a:	68a3      	ldr	r3, [r4, #8]
   1655c:	2b01      	cmp	r3, #1
   1655e:	d8f5      	bhi.n	1654c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   16560:	4b06      	ldr	r3, [pc, #24]	; (1657c <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   16562:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   16566:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   16568:	4b05      	ldr	r3, [pc, #20]	; (16580 <metal_register_generic_device+0x3c>)
   1656a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1656c:	f103 0018 	add.w	r0, r3, #24
   16570:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   16572:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   16574:	61d9      	str	r1, [r3, #28]
	return 0;
   16576:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   16578:	6011      	str	r1, [r2, #0]
}
   1657a:	e7e9      	b.n	16550 <metal_register_generic_device+0xc>
   1657c:	2000852c 	.word	0x2000852c
   16580:	2000adf4 	.word	0x2000adf4

00016584 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   16584:	b538      	push	{r3, r4, r5, lr}
   16586:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   16588:	4c0d      	ldr	r4, [pc, #52]	; (165c0 <metal_init+0x3c>)
   1658a:	2220      	movs	r2, #32
   1658c:	4620      	mov	r0, r4
   1658e:	2100      	movs	r1, #0
   16590:	f004 fd26 	bl	1afe0 <memset>

	_metal.common.log_handler   = params->log_handler;
   16594:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   16596:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   16598:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   1659a:	4623      	mov	r3, r4
   1659c:	792a      	ldrb	r2, [r5, #4]
   1659e:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   165a2:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   165a6:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   165aa:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   165ae:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   165b2:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   165b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   165ba:	f000 b803 	b.w	165c4 <metal_sys_init>
   165be:	bf00      	nop
   165c0:	2000adf4 	.word	0x2000adf4

000165c4 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   165c4:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   165c6:	4802      	ldr	r0, [pc, #8]	; (165d0 <metal_sys_init+0xc>)
   165c8:	f7ff ff88 	bl	164dc <metal_bus_register>
	return 0;
}
   165cc:	2000      	movs	r0, #0
   165ce:	bd08      	pop	{r3, pc}
   165d0:	2000852c 	.word	0x2000852c

000165d4 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   165d4:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   165d6:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   165d8:	2b06      	cmp	r3, #6
{
   165da:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   165dc:	bf88      	it	hi
   165de:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   165e0:	4b09      	ldr	r3, [pc, #36]	; (16608 <metal_zephyr_log_handler+0x34>)
{
   165e2:	ac05      	add	r4, sp, #20
   165e4:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   165e8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   165ec:	4807      	ldr	r0, [pc, #28]	; (1660c <metal_zephyr_log_handler+0x38>)
   165ee:	f003 fa8c 	bl	19b0a <printk>

	va_start(args, format);
	vprintk(format, args);
   165f2:	4621      	mov	r1, r4
   165f4:	4628      	mov	r0, r5
	va_start(args, format);
   165f6:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   165f8:	f7f3 fce8 	bl	9fcc <vprintk>
	va_end(args);
}
   165fc:	b002      	add	sp, #8
   165fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   16602:	b003      	add	sp, #12
   16604:	4770      	bx	lr
   16606:	bf00      	nop
   16608:	0001e2c4 	.word	0x0001e2c4
   1660c:	0001fe03 	.word	0x0001fe03

00016610 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   16610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16614:	b087      	sub	sp, #28
   16616:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   16618:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1661a:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   1661c:	4293      	cmp	r3, r2
{
   1661e:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   16620:	d349      	bcc.n	166b6 <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   16622:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   16624:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   16628:	42b4      	cmp	r4, r6
   1662a:	d103      	bne.n	16634 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1662c:	2000      	movs	r0, #0
}
   1662e:	b007      	add	sp, #28
   16630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   16634:	fb0b f704 	mul.w	r7, fp, r4
   16638:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   1663c:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   1663e:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   16642:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   16646:	bb02      	cbnz	r2, 1668a <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   16648:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   1664c:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16650:	f8dc 3004 	ldr.w	r3, [ip, #4]
   16654:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   16656:	f8dc c008 	ldr.w	ip, [ip, #8]
   1665a:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   1665c:	f10c 33ff 	add.w	r3, ip, #4294967295
   16660:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   16664:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   16668:	f1cc 0c00 	rsb	ip, ip, #0
   1666c:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   16670:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   16674:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   16678:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   1667c:	4561      	cmp	r1, ip
   1667e:	bf28      	it	cs
   16680:	f04f 31ff 	movcs.w	r1, #4294967295
   16684:	3306      	adds	r3, #6
   16686:	f006 fa1a 	bl	1cabe <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1668a:	f858 3007 	ldr.w	r3, [r8, r7]
   1668e:	9a05      	ldr	r2, [sp, #20]
   16690:	9302      	str	r3, [sp, #8]
   16692:	6a2b      	ldr	r3, [r5, #32]
   16694:	4628      	mov	r0, r5
   16696:	6a1b      	ldr	r3, [r3, #32]
   16698:	b2a1      	uxth	r1, r4
   1669a:	9301      	str	r3, [sp, #4]
   1669c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1669e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   166a2:	9300      	str	r3, [sp, #0]
   166a4:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   166a8:	464b      	mov	r3, r9
   166aa:	f006 fa5e 	bl	1cb6a <virtqueue_create>
		if (ret)
   166ae:	2800      	cmp	r0, #0
   166b0:	d1bd      	bne.n	1662e <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   166b2:	3401      	adds	r4, #1
   166b4:	e7b8      	b.n	16628 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   166b6:	4801      	ldr	r0, [pc, #4]	; (166bc <virtio_create_virtqueues+0xac>)
   166b8:	e7b9      	b.n	1662e <virtio_create_virtqueues+0x1e>
   166ba:	bf00      	nop
   166bc:	fffff440 	.word	0xfffff440

000166c0 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   166c0:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   166c2:	8944      	ldrh	r4, [r0, #10]
   166c4:	428c      	cmp	r4, r1
   166c6:	d312      	bcc.n	166ee <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   166c8:	6a03      	ldr	r3, [r0, #32]
   166ca:	3c01      	subs	r4, #1
   166cc:	885d      	ldrh	r5, [r3, #2]
   166ce:	402c      	ands	r4, r5
   166d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   166d4:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   166d6:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   166d8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   166dc:	6a02      	ldr	r2, [r0, #32]
   166de:	8853      	ldrh	r3, [r2, #2]
   166e0:	3301      	adds	r3, #1
   166e2:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   166e4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   166e6:	3301      	adds	r3, #1
   166e8:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   166ea:	2000      	movs	r0, #0
}
   166ec:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   166ee:	4801      	ldr	r0, [pc, #4]	; (166f4 <virtqueue_add_consumed_buffer+0x34>)
   166f0:	e7fc      	b.n	166ec <virtqueue_add_consumed_buffer+0x2c>
   166f2:	bf00      	nop
   166f4:	fffff441 	.word	0xfffff441

000166f8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   166f8:	b4f0      	push	{r4, r5, r6, r7}
   166fa:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   166fc:	b148      	cbz	r0, 16712 <rpmsg_send_offchannel_raw+0x1a>
   166fe:	6a00      	ldr	r0, [r0, #32]
   16700:	b138      	cbz	r0, 16712 <rpmsg_send_offchannel_raw+0x1a>
   16702:	b133      	cbz	r3, 16712 <rpmsg_send_offchannel_raw+0x1a>
   16704:	3401      	adds	r4, #1
   16706:	d004      	beq.n	16712 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   16708:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1670a:	b114      	cbz	r4, 16712 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1670c:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   1670e:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   16710:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   16712:	4801      	ldr	r0, [pc, #4]	; (16718 <rpmsg_send_offchannel_raw+0x20>)
}
   16714:	bcf0      	pop	{r4, r5, r6, r7}
   16716:	4770      	bx	lr
   16718:	fffff82d 	.word	0xfffff82d

0001671c <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16720:	460e      	mov	r6, r1
   16722:	4690      	mov	r8, r2
   16724:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   16726:	4605      	mov	r5, r0
   16728:	2800      	cmp	r0, #0
   1672a:	d06a      	beq.n	16802 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1672c:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   16730:	4638      	mov	r0, r7
   16732:	f006 fbac 	bl	1ce8e <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   16736:	1c63      	adds	r3, r4, #1
   16738:	d11a      	bne.n	16770 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   1673a:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1673c:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   16740:	095a      	lsrs	r2, r3, #5
   16742:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   16746:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1674a:	f003 011f 	and.w	r1, r3, #31
   1674e:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   16752:	07e4      	lsls	r4, r4, #31
   16754:	d407      	bmi.n	16766 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   16756:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1675a:	2301      	movs	r3, #1
   1675c:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1675e:	4313      	orrs	r3, r2
   16760:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   16764:	e01d      	b.n	167a2 <rpmsg_create_ept+0x86>
	     bit++)
   16766:	3301      	adds	r3, #1
	for (bit = start;
   16768:	2b80      	cmp	r3, #128	; 0x80
   1676a:	d1e9      	bne.n	16740 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   1676c:	4c27      	ldr	r4, [pc, #156]	; (1680c <rpmsg_create_ept+0xf0>)
   1676e:	e044      	b.n	167fa <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   16770:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   16774:	d315      	bcc.n	167a2 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   16776:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1677a:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1677c:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   16780:	d83a      	bhi.n	167f8 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   16782:	0958      	lsrs	r0, r3, #5
   16784:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   16788:	f003 031f 	and.w	r3, r3, #31
   1678c:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   16790:	07d2      	lsls	r2, r2, #31
   16792:	d4eb      	bmi.n	1676c <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16794:	2201      	movs	r2, #1
   16796:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1679a:	ea43 030c 	orr.w	r3, r3, ip
   1679e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   167a2:	491b      	ldr	r1, [pc, #108]	; (16810 <rpmsg_create_ept+0xf4>)
   167a4:	2220      	movs	r2, #32
   167a6:	f1b8 0f00 	cmp.w	r8, #0
   167aa:	bf18      	it	ne
   167ac:	4641      	movne	r1, r8
   167ae:	4628      	mov	r0, r5
   167b0:	f004 fb9b 	bl	1aeea <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   167b4:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   167b6:	4629      	mov	r1, r5
   167b8:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   167ba:	9b07      	ldr	r3, [sp, #28]
   167bc:	4630      	mov	r0, r6
   167be:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   167c0:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   167c2:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   167c4:	632b      	str	r3, [r5, #48]	; 0x30
   167c6:	f006 fbdc 	bl	1cf82 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   167ca:	4638      	mov	r0, r7
   167cc:	f001 ffc8 	bl	18760 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   167d0:	782c      	ldrb	r4, [r5, #0]
   167d2:	b174      	cbz	r4, 167f2 <rpmsg_create_ept+0xd6>
   167d4:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   167d8:	b15c      	cbz	r4, 167f2 <rpmsg_create_ept+0xd6>
   167da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   167dc:	3301      	adds	r3, #1
   167de:	d112      	bne.n	16806 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   167e0:	2100      	movs	r1, #0
   167e2:	4628      	mov	r0, r5
   167e4:	f006 fb84 	bl	1cef0 <rpmsg_send_ns_message>

	if (status)
   167e8:	4604      	mov	r4, r0
   167ea:	b110      	cbz	r0, 167f2 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   167ec:	4628      	mov	r0, r5
   167ee:	f006 fb54 	bl	1ce9a <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   167f2:	4620      	mov	r0, r4
   167f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   167f8:	4c06      	ldr	r4, [pc, #24]	; (16814 <rpmsg_create_ept+0xf8>)
   167fa:	4638      	mov	r0, r7
   167fc:	f001 ffb0 	bl	18760 <z_impl_k_sem_give>
}
   16800:	e7f7      	b.n	167f2 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   16802:	4c04      	ldr	r4, [pc, #16]	; (16814 <rpmsg_create_ept+0xf8>)
   16804:	e7f5      	b.n	167f2 <rpmsg_create_ept+0xd6>
   16806:	2400      	movs	r4, #0
   16808:	e7f3      	b.n	167f2 <rpmsg_create_ept+0xd6>
   1680a:	bf00      	nop
   1680c:	fffff829 	.word	0xfffff829
   16810:	000217d5 	.word	0x000217d5
   16814:	fffff82d 	.word	0xfffff82d

00016818 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   16818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1681c:	4605      	mov	r5, r0
   1681e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   16820:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   16822:	6a03      	ldr	r3, [r0, #32]
   16824:	b08d      	sub	sp, #52	; 0x34
   16826:	681b      	ldr	r3, [r3, #0]
   16828:	4692      	mov	sl, r2
   1682a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   1682e:	9103      	str	r1, [sp, #12]
   16830:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   16832:	0743      	lsls	r3, r0, #29
   16834:	d57b      	bpl.n	1692e <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   16836:	f643 2398 	movw	r3, #15000	; 0x3a98
   1683a:	2f00      	cmp	r7, #0
   1683c:	bf18      	it	ne
   1683e:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   16840:	f105 0858 	add.w	r8, r5, #88	; 0x58
   16844:	4640      	mov	r0, r8
   16846:	f006 fbc0 	bl	1cfca <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   1684a:	4628      	mov	r0, r5
   1684c:	f006 fc82 	bl	1d154 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   16850:	4681      	mov	r9, r0
   16852:	b130      	cbz	r0, 16862 <rpmsg_virtio_send_offchannel_raw+0x4a>
   16854:	42b0      	cmp	r0, r6
   16856:	da04      	bge.n	16862 <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   16858:	4640      	mov	r0, r8
   1685a:	f006 fbb4 	bl	1cfc6 <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   1685e:	4e42      	ldr	r6, [pc, #264]	; (16968 <rpmsg_virtio_send_offchannel_raw+0x150>)
   16860:	e061      	b.n	16926 <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   16862:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   16864:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   16866:	b9f3      	cbnz	r3, 168a6 <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   16868:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1686c:	f10d 0212 	add.w	r2, sp, #18
   16870:	a905      	add	r1, sp, #20
   16872:	f006 fa0a 	bl	1cc8a <virtqueue_get_buffer>
		if (!data) {
   16876:	4604      	mov	r4, r0
   16878:	b948      	cbnz	r0, 1688e <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1687a:	f44f 7100 	mov.w	r1, #512	; 0x200
   1687e:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   16882:	f006 fc7a 	bl	1d17a <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   16886:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1688a:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   1688c:	9305      	str	r3, [sp, #20]
   1688e:	4640      	mov	r0, r8
   16890:	f006 fb99 	bl	1cfc6 <k_sem_give>
		if (buffer || !tick_count)
   16894:	2c00      	cmp	r4, #0
   16896:	d14e      	bne.n	16936 <rpmsg_virtio_send_offchannel_raw+0x11e>
   16898:	2f00      	cmp	r7, #0
   1689a:	d04a      	beq.n	16932 <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   1689c:	f1b9 0f00 	cmp.w	r9, #0
   168a0:	d1dd      	bne.n	1685e <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   168a2:	3f01      	subs	r7, #1
	while (1) {
   168a4:	e7ce      	b.n	16844 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   168a6:	2b01      	cmp	r3, #1
   168a8:	d108      	bne.n	168bc <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   168aa:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   168ae:	aa05      	add	r2, sp, #20
   168b0:	f10d 0112 	add.w	r1, sp, #18
   168b4:	f006 fa23 	bl	1ccfe <virtqueue_get_available_buffer>
   168b8:	4604      	mov	r4, r0
   168ba:	e7e8      	b.n	1688e <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   168bc:	2400      	movs	r4, #0
   168be:	e7e6      	b.n	1688e <rpmsg_virtio_send_offchannel_raw+0x76>
   168c0:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   168c2:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   168c4:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   168c8:	1ac9      	subs	r1, r1, r3
   168ca:	4281      	cmp	r1, r0
   168cc:	bf28      	it	cs
   168ce:	f04f 31ff 	movcs.w	r1, #4294967295
   168d2:	4633      	mov	r3, r6
   168d4:	465a      	mov	r2, fp
   168d6:	4638      	mov	r0, r7
   168d8:	f006 f8b6 	bl	1ca48 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   168dc:	4286      	cmp	r6, r0
   168de:	d000      	beq.n	168e2 <rpmsg_virtio_send_offchannel_raw+0xca>
   168e0:	e7fe      	b.n	168e0 <rpmsg_virtio_send_offchannel_raw+0xc8>
   168e2:	4640      	mov	r0, r8
   168e4:	f006 fb71 	bl	1cfca <__metal_mutex_acquire>
   168e8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   168ea:	9a05      	ldr	r2, [sp, #20]
   168ec:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   168ee:	b953      	cbnz	r3, 16906 <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   168f0:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   168f4:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   168f8:	2201      	movs	r2, #1
   168fa:	9400      	str	r4, [sp, #0]
   168fc:	a906      	add	r1, sp, #24
   168fe:	f006 f964 	bl	1cbca <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   16902:	b148      	cbz	r0, 16918 <rpmsg_virtio_send_offchannel_raw+0x100>
   16904:	e7fe      	b.n	16904 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   16906:	2b01      	cmp	r3, #1
   16908:	d106      	bne.n	16918 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1690a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1690e:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   16912:	f7ff fed5 	bl	166c0 <virtqueue_add_consumed_buffer>
   16916:	e7f4      	b.n	16902 <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   16918:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1691c:	f006 fa69 	bl	1cdf2 <virtqueue_kick>
   16920:	4640      	mov	r0, r8
   16922:	f006 fb50 	bl	1cfc6 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   16926:	4630      	mov	r0, r6
   16928:	b00d      	add	sp, #52	; 0x34
   1692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   1692e:	4e0f      	ldr	r6, [pc, #60]	; (1696c <rpmsg_virtio_send_offchannel_raw+0x154>)
   16930:	e7f9      	b.n	16926 <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   16932:	4e0f      	ldr	r6, [pc, #60]	; (16970 <rpmsg_virtio_send_offchannel_raw+0x158>)
   16934:	e7f7      	b.n	16926 <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   16936:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   16938:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   1693c:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   1693e:	2300      	movs	r3, #0
   16940:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16942:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16944:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   16946:	4281      	cmp	r1, r0
   16948:	bf28      	it	cs
   1694a:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   1694e:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   16950:	4638      	mov	r0, r7
   16952:	2310      	movs	r3, #16
   16954:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   16956:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   1695a:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1695e:	f006 f873 	bl	1ca48 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   16962:	2810      	cmp	r0, #16
   16964:	d0ac      	beq.n	168c0 <rpmsg_virtio_send_offchannel_raw+0xa8>
   16966:	e7fe      	b.n	16966 <rpmsg_virtio_send_offchannel_raw+0x14e>
   16968:	fffff82b 	.word	0xfffff82b
   1696c:	fffff82c 	.word	0xfffff82c
   16970:	fffff82e 	.word	0xfffff82e

00016974 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   16974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16978:	460d      	mov	r5, r1
   1697a:	b088      	sub	sp, #32
   1697c:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   1697e:	2100      	movs	r1, #0
   16980:	227c      	movs	r2, #124	; 0x7c
{
   16982:	4604      	mov	r4, r0
   16984:	461e      	mov	r6, r3
   16986:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   1698a:	f004 fb29 	bl	1afe0 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1698e:	2201      	movs	r2, #1
   16990:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16994:	4611      	mov	r1, r2
   16996:	f006 fc8d 	bl	1d2b4 <z_impl_k_sem_init>
   1699a:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1699e:	4b5d      	ldr	r3, [pc, #372]	; (16b14 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   169a0:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   169a4:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   169a6:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   169a8:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   169aa:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   169ac:	d020      	beq.n	169f0 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   169ae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   169b0:	6a03      	ldr	r3, [r0, #32]
   169b2:	689b      	ldr	r3, [r3, #8]
   169b4:	4798      	blx	r3
   169b6:	2300      	movs	r3, #0
   169b8:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   169ba:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   169be:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   169c0:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   169c4:	f1b8 0f00 	cmp.w	r8, #0
   169c8:	d01e      	beq.n	16a08 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   169ca:	f1b8 0f01 	cmp.w	r8, #1
   169ce:	d133      	bne.n	16a38 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   169d0:	4b51      	ldr	r3, [pc, #324]	; (16b18 <rpmsg_init_vdev+0x1a4>)
   169d2:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   169d4:	4b51      	ldr	r3, [pc, #324]	; (16b1c <rpmsg_init_vdev+0x1a8>)
   169d6:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   169d8:	4b51      	ldr	r3, [pc, #324]	; (16b20 <rpmsg_init_vdev+0x1ac>)
   169da:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   169dc:	4b51      	ldr	r3, [pc, #324]	; (16b24 <rpmsg_init_vdev+0x1b0>)
   169de:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   169e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   169e2:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   169e4:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   169e6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   169ea:	e023      	b.n	16a34 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   169ec:	0743      	lsls	r3, r0, #29
   169ee:	d4de      	bmi.n	169ae <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   169f0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   169f2:	6a03      	ldr	r3, [r0, #32]
   169f4:	681b      	ldr	r3, [r3, #0]
   169f6:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   169f8:	0642      	lsls	r2, r0, #25
   169fa:	d5f7      	bpl.n	169ec <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   169fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   169fe:	2100      	movs	r1, #0
   16a00:	6a03      	ldr	r3, [r0, #32]
   16a02:	685b      	ldr	r3, [r3, #4]
   16a04:	4798      	blx	r3
}
   16a06:	e7f3      	b.n	169f0 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   16a08:	f1b9 0f00 	cmp.w	r9, #0
   16a0c:	d07d      	beq.n	16b0a <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   16a0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   16a12:	2b00      	cmp	r3, #0
   16a14:	d07b      	beq.n	16b0e <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   16a16:	4b41      	ldr	r3, [pc, #260]	; (16b1c <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   16a18:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   16a1c:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   16a1e:	4b3e      	ldr	r3, [pc, #248]	; (16b18 <rpmsg_init_vdev+0x1a4>)
   16a20:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   16a22:	4b40      	ldr	r3, [pc, #256]	; (16b24 <rpmsg_init_vdev+0x1b0>)
   16a24:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   16a26:	4b3e      	ldr	r3, [pc, #248]	; (16b20 <rpmsg_init_vdev+0x1ac>)
   16a28:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   16a2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16a2c:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   16a2e:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   16a30:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   16a34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   16a38:	ab04      	add	r3, sp, #16
   16a3a:	9300      	str	r3, [sp, #0]
   16a3c:	2202      	movs	r2, #2
   16a3e:	2100      	movs	r1, #0
   16a40:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   16a42:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   16a46:	ab02      	add	r3, sp, #8
   16a48:	f7ff fde2 	bl	16610 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   16a4c:	4607      	mov	r7, r0
   16a4e:	2800      	cmp	r0, #0
   16a50:	d157      	bne.n	16b02 <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   16a52:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   16a56:	f006 f9a6 	bl	1cda6 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   16a5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   16a5c:	681a      	ldr	r2, [r3, #0]
   16a5e:	699b      	ldr	r3, [r3, #24]
   16a60:	6296      	str	r6, [r2, #40]	; 0x28
   16a62:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   16a64:	f1b8 0f00 	cmp.w	r8, #0
   16a68:	d108      	bne.n	16a7c <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   16a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16a6e:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   16a70:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16a72:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   16a76:	895b      	ldrh	r3, [r3, #10]
   16a78:	4553      	cmp	r3, sl
   16a7a:	d81f      	bhi.n	16abc <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   16a7c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16a80:	e9c4 4400 	strd	r4, r4, [r4]
   16a84:	b18b      	cbz	r3, 16aaa <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   16a86:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   16a8a:	4927      	ldr	r1, [pc, #156]	; (16b28 <rpmsg_init_vdev+0x1b4>)
   16a8c:	2220      	movs	r2, #32
   16a8e:	4628      	mov	r0, r5
   16a90:	f004 fa2b 	bl	1aeea <strncpy>
	ept->addr = src;
   16a94:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   16a96:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   16a9a:	4b24      	ldr	r3, [pc, #144]	; (16b2c <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   16a9c:	4629      	mov	r1, r5
   16a9e:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   16aa0:	2300      	movs	r3, #0
   16aa2:	4620      	mov	r0, r4
   16aa4:	63a3      	str	r3, [r4, #56]	; 0x38
   16aa6:	f006 fa6c 	bl	1cf82 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   16aaa:	f1b8 0f00 	cmp.w	r8, #0
   16aae:	d128      	bne.n	16b02 <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   16ab0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   16ab2:	2104      	movs	r1, #4
   16ab4:	6a03      	ldr	r3, [r0, #32]
   16ab6:	685b      	ldr	r3, [r3, #4]
   16ab8:	4798      	blx	r3
}
   16aba:	e022      	b.n	16b02 <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   16abc:	f44f 7100 	mov.w	r1, #512	; 0x200
   16ac0:	4648      	mov	r0, r9
   16ac2:	f006 fb5a 	bl	1d17a <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   16ac6:	4605      	mov	r5, r0
   16ac8:	b1c8      	cbz	r0, 16afe <rpmsg_init_vdev+0x18a>
   16aca:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   16acc:	9006      	str	r0, [sp, #24]
   16ace:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16ad0:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   16ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
   16ad6:	4281      	cmp	r1, r0
   16ad8:	bf28      	it	cs
   16ada:	f04f 31ff 	movcs.w	r1, #4294967295
   16ade:	2200      	movs	r2, #0
   16ae0:	4630      	mov	r0, r6
   16ae2:	f005 ffec 	bl	1cabe <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   16ae6:	2301      	movs	r3, #1
   16ae8:	2200      	movs	r2, #0
   16aea:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   16aee:	9500      	str	r5, [sp, #0]
   16af0:	a906      	add	r1, sp, #24
   16af2:	f006 f86a 	bl	1cbca <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   16af6:	b918      	cbnz	r0, 16b00 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16af8:	f10a 0a01 	add.w	sl, sl, #1
   16afc:	e7b9      	b.n	16a72 <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   16afe:	480c      	ldr	r0, [pc, #48]	; (16b30 <rpmsg_init_vdev+0x1bc>)
   16b00:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   16b02:	4638      	mov	r0, r7
   16b04:	b008      	add	sp, #32
   16b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   16b0a:	4f0a      	ldr	r7, [pc, #40]	; (16b34 <rpmsg_init_vdev+0x1c0>)
   16b0c:	e7f9      	b.n	16b02 <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   16b0e:	4f08      	ldr	r7, [pc, #32]	; (16b30 <rpmsg_init_vdev+0x1bc>)
   16b10:	e7f7      	b.n	16b02 <rpmsg_init_vdev+0x18e>
   16b12:	bf00      	nop
   16b14:	00016819 	.word	0x00016819
   16b18:	00021764 	.word	0x00021764
   16b1c:	0002175e 	.word	0x0002175e
   16b20:	0001cfc5 	.word	0x0001cfc5
   16b24:	0001d095 	.word	0x0001d095
   16b28:	0002176a 	.word	0x0002176a
   16b2c:	0001cfd7 	.word	0x0001cfd7
   16b30:	fffff82e 	.word	0xfffff82e
   16b34:	fffff82d 	.word	0xfffff82d

00016b38 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   16b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16b3a:	4b10      	ldr	r3, [pc, #64]	; (16b7c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   16b3c:	4f10      	ldr	r7, [pc, #64]	; (16b80 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16b3e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   16b42:	3001      	adds	r0, #1
   16b44:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   16b48:	42ae      	cmp	r6, r5
   16b4a:	d800      	bhi.n	16b4e <z_sys_init_run_level+0x16>
		}
	}
}
   16b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   16b4e:	e9d5 3400 	ldrd	r3, r4, [r5]
   16b52:	4620      	mov	r0, r4
   16b54:	4798      	blx	r3
   16b56:	b170      	cbz	r0, 16b76 <z_sys_init_run_level+0x3e>
   16b58:	b16c      	cbz	r4, 16b76 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   16b5a:	2301      	movs	r3, #1
				(dev - __device_start));
   16b5c:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16b5e:	4a09      	ldr	r2, [pc, #36]	; (16b84 <z_sys_init_run_level+0x4c>)
   16b60:	1124      	asrs	r4, r4, #4
   16b62:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   16b64:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16b68:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   16b6c:	fa03 f404 	lsl.w	r4, r3, r4
   16b70:	4304      	orrs	r4, r0
   16b72:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16b76:	3508      	adds	r5, #8
   16b78:	e7e6      	b.n	16b48 <z_sys_init_run_level+0x10>
   16b7a:	bf00      	nop
   16b7c:	0001e2e4 	.word	0x0001e2e4
   16b80:	20008578 	.word	0x20008578
   16b84:	200085e8 	.word	0x200085e8

00016b88 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   16b88:	4b08      	ldr	r3, [pc, #32]	; (16bac <z_device_ready+0x24>)
   16b8a:	1ac0      	subs	r0, r0, r3
   16b8c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16b8e:	4b08      	ldr	r3, [pc, #32]	; (16bb0 <z_device_ready+0x28>)
   16b90:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   16b92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   16b96:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16b98:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   16b9c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   16ba0:	4210      	tst	r0, r2
}
   16ba2:	bf0c      	ite	eq
   16ba4:	4618      	moveq	r0, r3
   16ba6:	2000      	movne	r0, #0
   16ba8:	4770      	bx	lr
   16baa:	bf00      	nop
   16bac:	20008578 	.word	0x20008578
   16bb0:	200085e8 	.word	0x200085e8

00016bb4 <z_impl_device_get_binding>:
{
   16bb4:	b570      	push	{r4, r5, r6, lr}
   16bb6:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   16bb8:	4c0f      	ldr	r4, [pc, #60]	; (16bf8 <z_impl_device_get_binding+0x44>)
   16bba:	4e10      	ldr	r6, [pc, #64]	; (16bfc <z_impl_device_get_binding+0x48>)
   16bbc:	42b4      	cmp	r4, r6
   16bbe:	d104      	bne.n	16bca <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   16bc0:	4c0d      	ldr	r4, [pc, #52]	; (16bf8 <z_impl_device_get_binding+0x44>)
   16bc2:	42b4      	cmp	r4, r6
   16bc4:	d10a      	bne.n	16bdc <z_impl_device_get_binding+0x28>
	return NULL;
   16bc6:	2400      	movs	r4, #0
   16bc8:	e014      	b.n	16bf4 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   16bca:	4620      	mov	r0, r4
   16bcc:	f7ff ffdc 	bl	16b88 <z_device_ready>
   16bd0:	b110      	cbz	r0, 16bd8 <z_impl_device_get_binding+0x24>
   16bd2:	6823      	ldr	r3, [r4, #0]
   16bd4:	42ab      	cmp	r3, r5
   16bd6:	d00d      	beq.n	16bf4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   16bd8:	3410      	adds	r4, #16
   16bda:	e7ef      	b.n	16bbc <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16bdc:	4620      	mov	r0, r4
   16bde:	f7ff ffd3 	bl	16b88 <z_device_ready>
   16be2:	b908      	cbnz	r0, 16be8 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   16be4:	3410      	adds	r4, #16
   16be6:	e7ec      	b.n	16bc2 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16be8:	4628      	mov	r0, r5
   16bea:	6821      	ldr	r1, [r4, #0]
   16bec:	f004 f99f 	bl	1af2e <strcmp>
   16bf0:	2800      	cmp	r0, #0
   16bf2:	d1f7      	bne.n	16be4 <z_impl_device_get_binding+0x30>
}
   16bf4:	4620      	mov	r0, r4
   16bf6:	bd70      	pop	{r4, r5, r6, pc}
   16bf8:	20008578 	.word	0x20008578
   16bfc:	200085e8 	.word	0x200085e8

00016c00 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   16c00:	4b01      	ldr	r3, [pc, #4]	; (16c08 <z_impl_z_errno+0x8>)
   16c02:	6898      	ldr	r0, [r3, #8]
}
   16c04:	3070      	adds	r0, #112	; 0x70
   16c06:	4770      	bx	lr
   16c08:	2000ae1c 	.word	0x2000ae1c

00016c0c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16c0e:	4604      	mov	r4, r0
   16c10:	460e      	mov	r6, r1
	__asm__ volatile(
   16c12:	f04f 0320 	mov.w	r3, #32
   16c16:	f3ef 8711 	mrs	r7, BASEPRI
   16c1a:	f383 8811 	msr	BASEPRI, r3
   16c1e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   16c22:	f001 fd97 	bl	18754 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16c26:	2200      	movs	r2, #0
   16c28:	2c04      	cmp	r4, #4
   16c2a:	bf98      	it	ls
   16c2c:	4b1d      	ldrls	r3, [pc, #116]	; (16ca4 <z_fatal_error+0x98>)
   16c2e:	4605      	mov	r5, r0
	switch (reason) {
   16c30:	bf94      	ite	ls
   16c32:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   16c36:	4b1c      	ldrhi	r3, [pc, #112]	; (16ca8 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16c38:	9200      	str	r2, [sp, #0]
   16c3a:	2145      	movs	r1, #69	; 0x45
   16c3c:	4622      	mov	r2, r4
   16c3e:	481b      	ldr	r0, [pc, #108]	; (16cac <z_fatal_error+0xa0>)
   16c40:	f002 ff63 	bl	19b0a <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   16c44:	b13e      	cbz	r6, 16c56 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   16c46:	69f3      	ldr	r3, [r6, #28]
   16c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
   16c4c:	b11b      	cbz	r3, 16c56 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   16c4e:	2145      	movs	r1, #69	; 0x45
   16c50:	4817      	ldr	r0, [pc, #92]	; (16cb0 <z_fatal_error+0xa4>)
   16c52:	f002 ff5a 	bl	19b0a <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   16c56:	b135      	cbz	r5, 16c66 <z_fatal_error+0x5a>
   16c58:	4628      	mov	r0, r5
   16c5a:	f006 fb48 	bl	1d2ee <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   16c5e:	4603      	mov	r3, r0
   16c60:	b108      	cbz	r0, 16c66 <z_fatal_error+0x5a>
   16c62:	7802      	ldrb	r2, [r0, #0]
   16c64:	b902      	cbnz	r2, 16c68 <z_fatal_error+0x5c>
		thread_name = "unknown";
   16c66:	4b13      	ldr	r3, [pc, #76]	; (16cb4 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   16c68:	462a      	mov	r2, r5
   16c6a:	2145      	movs	r1, #69	; 0x45
   16c6c:	4812      	ldr	r0, [pc, #72]	; (16cb8 <z_fatal_error+0xac>)
   16c6e:	f002 ff4c 	bl	19b0a <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   16c72:	4631      	mov	r1, r6
   16c74:	4620      	mov	r0, r4
   16c76:	f7ff f8ad 	bl	15dd4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   16c7a:	2c04      	cmp	r4, #4
   16c7c:	d108      	bne.n	16c90 <z_fatal_error+0x84>
   16c7e:	490f      	ldr	r1, [pc, #60]	; (16cbc <z_fatal_error+0xb0>)
   16c80:	480f      	ldr	r0, [pc, #60]	; (16cc0 <z_fatal_error+0xb4>)
   16c82:	228e      	movs	r2, #142	; 0x8e
   16c84:	f002 ff41 	bl	19b0a <printk>
   16c88:	218e      	movs	r1, #142	; 0x8e
   16c8a:	480c      	ldr	r0, [pc, #48]	; (16cbc <z_fatal_error+0xb0>)
   16c8c:	f003 f9e3 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   16c90:	f387 8811 	msr	BASEPRI, r7
   16c94:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   16c98:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   16c9a:	b003      	add	sp, #12
   16c9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16ca0:	f7f6 bc38 	b.w	d514 <z_impl_k_thread_abort>
   16ca4:	0001e2fc 	.word	0x0001e2fc
   16ca8:	0002176d 	.word	0x0002176d
   16cac:	00021783 	.word	0x00021783
   16cb0:	000217b0 	.word	0x000217b0
   16cb4:	0002177b 	.word	0x0002177b
   16cb8:	000217d6 	.word	0x000217d6
   16cbc:	000217f3 	.word	0x000217f3
   16cc0:	0001ecfc 	.word	0x0001ecfc

00016cc4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   16cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cc6:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   16cc8:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   16cca:	4e15      	ldr	r6, [pc, #84]	; (16d20 <idle+0x5c>)
	__asm__ volatile(
   16ccc:	f04f 0220 	mov.w	r2, #32
   16cd0:	f3ef 8311 	mrs	r3, BASEPRI
   16cd4:	f382 8811 	msr	BASEPRI, r2
   16cd8:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   16cdc:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   16cde:	b188      	cbz	r0, 16d04 <idle+0x40>
			cpu->pending_abort = NULL;
   16ce0:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   16ce2:	f383 8811 	msr	BASEPRI, r3
   16ce6:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   16cea:	f001 f93b 	bl	17f64 <z_thread_single_abort>
	__asm__ volatile(
   16cee:	f04f 0320 	mov.w	r3, #32
   16cf2:	f3ef 8011 	mrs	r0, BASEPRI
   16cf6:	f383 8811 	msr	BASEPRI, r3
   16cfa:	f3bf 8f6f 	isb	sy
   16cfe:	f006 fa9f 	bl	1d240 <z_reschedule_irqlock>
			continue;
   16d02:	e7e3      	b.n	16ccc <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   16d04:	f002 f998 	bl	19038 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16d08:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   16d0a:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16d0c:	2802      	cmp	r0, #2
   16d0e:	bfd8      	it	le
   16d10:	4608      	movle	r0, r1
   16d12:	f002 f9c7 	bl	190a4 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   16d16:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   16d18:	f7f6 f942 	bl	cfa0 <arch_cpu_idle>
}
   16d1c:	e7d6      	b.n	16ccc <idle+0x8>
   16d1e:	bf00      	nop
   16d20:	2000ae1c 	.word	0x2000ae1c

00016d24 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   16d24:	4802      	ldr	r0, [pc, #8]	; (16d30 <z_bss_zero+0xc>)
   16d26:	4a03      	ldr	r2, [pc, #12]	; (16d34 <z_bss_zero+0x10>)
   16d28:	2100      	movs	r1, #0
   16d2a:	1a12      	subs	r2, r2, r0
   16d2c:	f004 b958 	b.w	1afe0 <memset>
   16d30:	200087e8 	.word	0x200087e8
   16d34:	2000c63c 	.word	0x2000c63c

00016d38 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   16d38:	2201      	movs	r2, #1
{
   16d3a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16d3c:	4b09      	ldr	r3, [pc, #36]	; (16d64 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16d3e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   16d40:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16d42:	f7ff fef9 	bl	16b38 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   16d46:	f002 f819 	bl	18d7c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16d4a:	2003      	movs	r0, #3
   16d4c:	f7ff fef4 	bl	16b38 <z_sys_init_run_level>

	z_init_static_threads();
   16d50:	f001 fe76 	bl	18a40 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   16d54:	f7f2 f98c 	bl	9070 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16d58:	4a03      	ldr	r2, [pc, #12]	; (16d68 <bg_thread_main+0x30>)
   16d5a:	7b13      	ldrb	r3, [r2, #12]
   16d5c:	f023 0301 	bic.w	r3, r3, #1
   16d60:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   16d62:	bd08      	pop	{r3, pc}
   16d64:	2000c63b 	.word	0x2000c63b
   16d68:	2000a320 	.word	0x2000a320

00016d6c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   16d6c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   16d70:	4b34      	ldr	r3, [pc, #208]	; (16e44 <z_cstart+0xd8>)
   16d72:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   16d74:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16d78:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   16d7c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16d80:	2400      	movs	r4, #0
   16d82:	23e0      	movs	r3, #224	; 0xe0
   16d84:	4d30      	ldr	r5, [pc, #192]	; (16e48 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16d86:	f04f 0b01 	mov.w	fp, #1
   16d8a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   16d8e:	77ec      	strb	r4, [r5, #31]
   16d90:	762c      	strb	r4, [r5, #24]
   16d92:	766c      	strb	r4, [r5, #25]
   16d94:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   16d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   16d98:	4e2c      	ldr	r6, [pc, #176]	; (16e4c <z_cstart+0xe0>)
   16d9a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16d9e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   16da0:	f7f6 fb80 	bl	d4a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   16da4:	f7f6 f8f6 	bl	cf94 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16da8:	f04f 33ff 	mov.w	r3, #4294967295
   16dac:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16dae:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   16db0:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   16db4:	4d26      	ldr	r5, [pc, #152]	; (16e50 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   16db6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   16dba:	ab06      	add	r3, sp, #24
   16dbc:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   16dbe:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   16dc0:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   16dc4:	f7ff feb8 	bl	16b38 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   16dc8:	2001      	movs	r0, #1
   16dca:	f7ff feb5 	bl	16b38 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16dce:	f8df a084 	ldr.w	sl, [pc, #132]	; 16e54 <z_cstart+0xe8>
	z_sched_init();
   16dd2:	f001 fb77 	bl	184c4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16dd6:	4b20      	ldr	r3, [pc, #128]	; (16e58 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   16dd8:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16dde:	491f      	ldr	r1, [pc, #124]	; (16e5c <z_cstart+0xf0>)
   16de0:	9305      	str	r3, [sp, #20]
   16de2:	4630      	mov	r0, r6
   16de4:	4653      	mov	r3, sl
   16de6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   16dea:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16dee:	9400      	str	r4, [sp, #0]
   16df0:	f001 fd74 	bl	188dc <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16df4:	7b73      	ldrb	r3, [r6, #13]
   16df6:	4680      	mov	r8, r0
   16df8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   16dfc:	4630      	mov	r0, r6
   16dfe:	7373      	strb	r3, [r6, #13]
   16e00:	f000 feec 	bl	17bdc <z_ready_thread>
	z_setup_new_thread(thread, stack,
   16e04:	230f      	movs	r3, #15
   16e06:	4f16      	ldr	r7, [pc, #88]	; (16e60 <z_cstart+0xf4>)
   16e08:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16e0c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16e10:	4914      	ldr	r1, [pc, #80]	; (16e64 <z_cstart+0xf8>)
   16e12:	4b15      	ldr	r3, [pc, #84]	; (16e68 <z_cstart+0xfc>)
   16e14:	4638      	mov	r0, r7
   16e16:	e9cd b404 	strd	fp, r4, [sp, #16]
   16e1a:	e9cd 5400 	strd	r5, r4, [sp]
   16e1e:	f001 fd5d 	bl	188dc <z_setup_new_thread>
   16e22:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16e24:	4652      	mov	r2, sl
   16e26:	f023 0304 	bic.w	r3, r3, #4
   16e2a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16e2c:	f105 031c 	add.w	r3, r5, #28
   16e30:	4641      	mov	r1, r8
   16e32:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   16e34:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   16e38:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   16e3a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   16e3c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16e40:	f7f6 f88e 	bl	cf60 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16e44:	2000ec98 	.word	0x2000ec98
   16e48:	e000ed00 	.word	0xe000ed00
   16e4c:	2000a320 	.word	0x2000a320
   16e50:	2000ae1c 	.word	0x2000ae1c
   16e54:	00016d39 	.word	0x00016d39
   16e58:	0002185f 	.word	0x0002185f
   16e5c:	2000e758 	.word	0x2000e758
   16e60:	2000a290 	.word	0x2000a290
   16e64:	2000eb58 	.word	0x2000eb58
   16e68:	00016cc5 	.word	0x00016cc5

00016e6c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   16e6c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16e6e:	4c0c      	ldr	r4, [pc, #48]	; (16ea0 <statics_init+0x34>)
   16e70:	4d0c      	ldr	r5, [pc, #48]	; (16ea4 <statics_init+0x38>)
   16e72:	4e0d      	ldr	r6, [pc, #52]	; (16ea8 <statics_init+0x3c>)
   16e74:	42ac      	cmp	r4, r5
   16e76:	d908      	bls.n	16e8a <statics_init+0x1e>
   16e78:	4631      	mov	r1, r6
   16e7a:	480c      	ldr	r0, [pc, #48]	; (16eac <statics_init+0x40>)
   16e7c:	2215      	movs	r2, #21
   16e7e:	f002 fe44 	bl	19b0a <printk>
   16e82:	2115      	movs	r1, #21
   16e84:	4630      	mov	r0, r6
   16e86:	f003 f8e6 	bl	1a056 <assert_post_action>
   16e8a:	42ac      	cmp	r4, r5
   16e8c:	d301      	bcc.n	16e92 <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   16e8e:	2000      	movs	r0, #0
   16e90:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16e92:	4620      	mov	r0, r4
   16e94:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   16e98:	f006 f984 	bl	1d1a4 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16e9c:	3418      	adds	r4, #24
   16e9e:	e7e9      	b.n	16e74 <statics_init+0x8>
   16ea0:	20008640 	.word	0x20008640
   16ea4:	20008658 	.word	0x20008658
   16ea8:	00021867 	.word	0x00021867
   16eac:	0001ecfc 	.word	0x0001ecfc

00016eb0 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   16eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb4:	b085      	sub	sp, #20
   16eb6:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   16eba:	4606      	mov	r6, r0
   16ebc:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   16ebe:	4648      	mov	r0, r9
   16ec0:	4639      	mov	r1, r7
{
   16ec2:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   16ec4:	f006 fa74 	bl	1d3b0 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16ec8:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   16ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16ed0:	f04f 0320 	mov.w	r3, #32
   16ed4:	f3ef 8411 	mrs	r4, BASEPRI
   16ed8:	f383 8811 	msr	BASEPRI, r3
   16edc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16ee0:	4628      	mov	r0, r5
   16ee2:	f001 fe29 	bl	18b38 <z_spin_lock_valid>
   16ee6:	b940      	cbnz	r0, 16efa <k_heap_aligned_alloc+0x4a>
   16ee8:	4932      	ldr	r1, [pc, #200]	; (16fb4 <k_heap_aligned_alloc+0x104>)
   16eea:	4833      	ldr	r0, [pc, #204]	; (16fb8 <k_heap_aligned_alloc+0x108>)
   16eec:	227c      	movs	r2, #124	; 0x7c
   16eee:	f002 fe0c 	bl	19b0a <printk>
   16ef2:	217c      	movs	r1, #124	; 0x7c
   16ef4:	482f      	ldr	r0, [pc, #188]	; (16fb4 <k_heap_aligned_alloc+0x104>)
   16ef6:	f003 f8ae 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   16efa:	4628      	mov	r0, r5
   16efc:	f001 fe38 	bl	18b70 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16f00:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   16f04:	b15b      	cbz	r3, 16f1e <k_heap_aligned_alloc+0x6e>
   16f06:	ea59 0307 	orrs.w	r3, r9, r7
   16f0a:	d008      	beq.n	16f1e <k_heap_aligned_alloc+0x6e>
   16f0c:	492b      	ldr	r1, [pc, #172]	; (16fbc <k_heap_aligned_alloc+0x10c>)
   16f0e:	482a      	ldr	r0, [pc, #168]	; (16fb8 <k_heap_aligned_alloc+0x108>)
   16f10:	2224      	movs	r2, #36	; 0x24
   16f12:	f002 fdfa 	bl	19b0a <printk>
   16f16:	2124      	movs	r1, #36	; 0x24
   16f18:	4828      	ldr	r0, [pc, #160]	; (16fbc <k_heap_aligned_alloc+0x10c>)
   16f1a:	f003 f89c 	bl	1a056 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16f1e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 16fb4 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   16f22:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   16f26:	4642      	mov	r2, r8
   16f28:	4659      	mov	r1, fp
   16f2a:	4630      	mov	r0, r6
   16f2c:	f7f3 fb46 	bl	a5bc <sys_heap_aligned_alloc>
   16f30:	4607      	mov	r7, r0
		now = z_tick_get();
   16f32:	f002 f993 	bl	1925c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   16f36:	b1a7      	cbz	r7, 16f62 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16f38:	4628      	mov	r0, r5
   16f3a:	f001 fe0b 	bl	18b54 <z_spin_unlock_valid>
   16f3e:	b940      	cbnz	r0, 16f52 <k_heap_aligned_alloc+0xa2>
   16f40:	491c      	ldr	r1, [pc, #112]	; (16fb4 <k_heap_aligned_alloc+0x104>)
   16f42:	481d      	ldr	r0, [pc, #116]	; (16fb8 <k_heap_aligned_alloc+0x108>)
   16f44:	22a7      	movs	r2, #167	; 0xa7
   16f46:	f002 fde0 	bl	19b0a <printk>
   16f4a:	21a7      	movs	r1, #167	; 0xa7
   16f4c:	4819      	ldr	r0, [pc, #100]	; (16fb4 <k_heap_aligned_alloc+0x104>)
   16f4e:	f003 f882 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   16f52:	f384 8811 	msr	BASEPRI, r4
   16f56:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   16f5a:	4638      	mov	r0, r7
   16f5c:	b005      	add	sp, #20
   16f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   16f62:	9b02      	ldr	r3, [sp, #8]
   16f64:	1a18      	subs	r0, r3, r0
   16f66:	9b03      	ldr	r3, [sp, #12]
   16f68:	eb63 0101 	sbc.w	r1, r3, r1
   16f6c:	2801      	cmp	r0, #1
   16f6e:	f171 0300 	sbcs.w	r3, r1, #0
   16f72:	dbe1      	blt.n	16f38 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   16f74:	e9cd 0100 	strd	r0, r1, [sp]
   16f78:	4652      	mov	r2, sl
   16f7a:	4621      	mov	r1, r4
   16f7c:	4628      	mov	r0, r5
   16f7e:	f001 f997 	bl	182b0 <z_pend_curr>
	__asm__ volatile(
   16f82:	f04f 0320 	mov.w	r3, #32
   16f86:	f3ef 8411 	mrs	r4, BASEPRI
   16f8a:	f383 8811 	msr	BASEPRI, r3
   16f8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16f92:	4628      	mov	r0, r5
   16f94:	f001 fdd0 	bl	18b38 <z_spin_lock_valid>
   16f98:	b940      	cbnz	r0, 16fac <k_heap_aligned_alloc+0xfc>
   16f9a:	4649      	mov	r1, r9
   16f9c:	4806      	ldr	r0, [pc, #24]	; (16fb8 <k_heap_aligned_alloc+0x108>)
   16f9e:	227c      	movs	r2, #124	; 0x7c
   16fa0:	f002 fdb3 	bl	19b0a <printk>
   16fa4:	217c      	movs	r1, #124	; 0x7c
   16fa6:	4648      	mov	r0, r9
   16fa8:	f003 f855 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   16fac:	4628      	mov	r0, r5
   16fae:	f001 fddf 	bl	18b70 <z_spin_lock_set_owner>
	return k;
   16fb2:	e7b8      	b.n	16f26 <k_heap_aligned_alloc+0x76>
   16fb4:	0001ed36 	.word	0x0001ed36
   16fb8:	0001ecfc 	.word	0x0001ecfc
   16fbc:	00021867 	.word	0x00021867

00016fc0 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   16fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fc2:	4604      	mov	r4, r0
   16fc4:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16fc6:	f100 0514 	add.w	r5, r0, #20
   16fca:	f04f 0320 	mov.w	r3, #32
   16fce:	f3ef 8711 	mrs	r7, BASEPRI
   16fd2:	f383 8811 	msr	BASEPRI, r3
   16fd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16fda:	4628      	mov	r0, r5
   16fdc:	f001 fdac 	bl	18b38 <z_spin_lock_valid>
   16fe0:	b940      	cbnz	r0, 16ff4 <k_heap_free+0x34>
   16fe2:	4916      	ldr	r1, [pc, #88]	; (1703c <k_heap_free+0x7c>)
   16fe4:	4816      	ldr	r0, [pc, #88]	; (17040 <k_heap_free+0x80>)
   16fe6:	227c      	movs	r2, #124	; 0x7c
   16fe8:	f002 fd8f 	bl	19b0a <printk>
   16fec:	217c      	movs	r1, #124	; 0x7c
   16fee:	4813      	ldr	r0, [pc, #76]	; (1703c <k_heap_free+0x7c>)
   16ff0:	f003 f831 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   16ff4:	4628      	mov	r0, r5
   16ff6:	f001 fdbb 	bl	18b70 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   16ffa:	4620      	mov	r0, r4
   16ffc:	4631      	mov	r1, r6
   16ffe:	f7f3 fa9b 	bl	a538 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   17002:	f104 000c 	add.w	r0, r4, #12
   17006:	f006 f945 	bl	1d294 <z_unpend_all>
   1700a:	b128      	cbz	r0, 17018 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   1700c:	4639      	mov	r1, r7
   1700e:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   17014:	f000 bc0e 	b.w	17834 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17018:	4628      	mov	r0, r5
   1701a:	f001 fd9b 	bl	18b54 <z_spin_unlock_valid>
   1701e:	b940      	cbnz	r0, 17032 <k_heap_free+0x72>
   17020:	4906      	ldr	r1, [pc, #24]	; (1703c <k_heap_free+0x7c>)
   17022:	4807      	ldr	r0, [pc, #28]	; (17040 <k_heap_free+0x80>)
   17024:	22a7      	movs	r2, #167	; 0xa7
   17026:	f002 fd70 	bl	19b0a <printk>
   1702a:	21a7      	movs	r1, #167	; 0xa7
   1702c:	4803      	ldr	r0, [pc, #12]	; (1703c <k_heap_free+0x7c>)
   1702e:	f003 f812 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17032:	f387 8811 	msr	BASEPRI, r7
   17036:	f3bf 8f6f 	isb	sy
}
   1703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1703c:	0001ed36 	.word	0x0001ed36
   17040:	0001ecfc 	.word	0x0001ecfc

00017044 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   17044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17046:	4c14      	ldr	r4, [pc, #80]	; (17098 <init_mem_slab_module+0x54>)
   17048:	4d14      	ldr	r5, [pc, #80]	; (1709c <init_mem_slab_module+0x58>)
   1704a:	4e15      	ldr	r6, [pc, #84]	; (170a0 <init_mem_slab_module+0x5c>)
   1704c:	42ac      	cmp	r4, r5
   1704e:	d908      	bls.n	17062 <init_mem_slab_module+0x1e>
   17050:	4631      	mov	r1, r6
   17052:	4814      	ldr	r0, [pc, #80]	; (170a4 <init_mem_slab_module+0x60>)
   17054:	2242      	movs	r2, #66	; 0x42
   17056:	f002 fd58 	bl	19b0a <printk>
   1705a:	2142      	movs	r1, #66	; 0x42
   1705c:	4630      	mov	r0, r6
   1705e:	f002 fffa 	bl	1a056 <assert_post_action>
   17062:	42ac      	cmp	r4, r5
   17064:	d301      	bcc.n	1706a <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   17066:	2000      	movs	r0, #0
	return rc;
}
   17068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1706a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1706e:	ea42 0301 	orr.w	r3, r2, r1
   17072:	f013 0303 	ands.w	r3, r3, #3
   17076:	d10b      	bne.n	17090 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   17078:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   1707a:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1707c:	4283      	cmp	r3, r0
   1707e:	d101      	bne.n	17084 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17080:	341c      	adds	r4, #28
   17082:	e7e3      	b.n	1704c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   17084:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17086:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   17088:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   1708a:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   1708c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1708e:	e7f5      	b.n	1707c <init_mem_slab_module+0x38>
	return rc;
   17090:	f06f 0015 	mvn.w	r0, #21
   17094:	e7e8      	b.n	17068 <init_mem_slab_module+0x24>
   17096:	bf00      	nop
   17098:	200085ec 	.word	0x200085ec
   1709c:	20008640 	.word	0x20008640
   170a0:	00021889 	.word	0x00021889
   170a4:	0001ecfc 	.word	0x0001ecfc

000170a8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   170a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   170ac:	4604      	mov	r4, r0
   170ae:	460d      	mov	r5, r1
   170b0:	4617      	mov	r7, r2
   170b2:	461e      	mov	r6, r3
	__asm__ volatile(
   170b4:	f04f 0320 	mov.w	r3, #32
   170b8:	f3ef 8811 	mrs	r8, BASEPRI
   170bc:	f383 8811 	msr	BASEPRI, r3
   170c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   170c4:	4821      	ldr	r0, [pc, #132]	; (1714c <k_mem_slab_alloc+0xa4>)
   170c6:	f001 fd37 	bl	18b38 <z_spin_lock_valid>
   170ca:	b940      	cbnz	r0, 170de <k_mem_slab_alloc+0x36>
   170cc:	4920      	ldr	r1, [pc, #128]	; (17150 <k_mem_slab_alloc+0xa8>)
   170ce:	4821      	ldr	r0, [pc, #132]	; (17154 <k_mem_slab_alloc+0xac>)
   170d0:	227c      	movs	r2, #124	; 0x7c
   170d2:	f002 fd1a 	bl	19b0a <printk>
   170d6:	217c      	movs	r1, #124	; 0x7c
   170d8:	481d      	ldr	r0, [pc, #116]	; (17150 <k_mem_slab_alloc+0xa8>)
   170da:	f002 ffbc 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   170de:	481b      	ldr	r0, [pc, #108]	; (1714c <k_mem_slab_alloc+0xa4>)
   170e0:	f001 fd46 	bl	18b70 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   170e4:	6963      	ldr	r3, [r4, #20]
   170e6:	b1c3      	cbz	r3, 1711a <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   170e8:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   170ea:	681b      	ldr	r3, [r3, #0]
   170ec:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   170ee:	69a3      	ldr	r3, [r4, #24]
   170f0:	3301      	adds	r3, #1
   170f2:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   170f4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   170f6:	4815      	ldr	r0, [pc, #84]	; (1714c <k_mem_slab_alloc+0xa4>)
   170f8:	f001 fd2c 	bl	18b54 <z_spin_unlock_valid>
   170fc:	b940      	cbnz	r0, 17110 <k_mem_slab_alloc+0x68>
   170fe:	4914      	ldr	r1, [pc, #80]	; (17150 <k_mem_slab_alloc+0xa8>)
   17100:	4814      	ldr	r0, [pc, #80]	; (17154 <k_mem_slab_alloc+0xac>)
   17102:	22a7      	movs	r2, #167	; 0xa7
   17104:	f002 fd01 	bl	19b0a <printk>
   17108:	21a7      	movs	r1, #167	; 0xa7
   1710a:	4811      	ldr	r0, [pc, #68]	; (17150 <k_mem_slab_alloc+0xa8>)
   1710c:	f002 ffa3 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17110:	f388 8811 	msr	BASEPRI, r8
   17114:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   17118:	e013      	b.n	17142 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1711a:	ea57 0206 	orrs.w	r2, r7, r6
   1711e:	d103      	bne.n	17128 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   17120:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   17124:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   17126:	e7e6      	b.n	170f6 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   17128:	4622      	mov	r2, r4
   1712a:	4641      	mov	r1, r8
   1712c:	e9cd 7600 	strd	r7, r6, [sp]
   17130:	4806      	ldr	r0, [pc, #24]	; (1714c <k_mem_slab_alloc+0xa4>)
   17132:	f001 f8bd 	bl	182b0 <z_pend_curr>
		if (result == 0) {
   17136:	4604      	mov	r4, r0
   17138:	b918      	cbnz	r0, 17142 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   1713a:	4b07      	ldr	r3, [pc, #28]	; (17158 <k_mem_slab_alloc+0xb0>)
   1713c:	689b      	ldr	r3, [r3, #8]
   1713e:	695b      	ldr	r3, [r3, #20]
   17140:	602b      	str	r3, [r5, #0]
}
   17142:	4620      	mov	r0, r4
   17144:	b002      	add	sp, #8
   17146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1714a:	bf00      	nop
   1714c:	2000ae14 	.word	0x2000ae14
   17150:	0001ed36 	.word	0x0001ed36
   17154:	0001ecfc 	.word	0x0001ecfc
   17158:	2000ae1c 	.word	0x2000ae1c

0001715c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1715e:	4604      	mov	r4, r0
   17160:	460d      	mov	r5, r1
	__asm__ volatile(
   17162:	f04f 0320 	mov.w	r3, #32
   17166:	f3ef 8611 	mrs	r6, BASEPRI
   1716a:	f383 8811 	msr	BASEPRI, r3
   1716e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17172:	481e      	ldr	r0, [pc, #120]	; (171ec <k_mem_slab_free+0x90>)
   17174:	f001 fce0 	bl	18b38 <z_spin_lock_valid>
   17178:	b940      	cbnz	r0, 1718c <k_mem_slab_free+0x30>
   1717a:	491d      	ldr	r1, [pc, #116]	; (171f0 <k_mem_slab_free+0x94>)
   1717c:	481d      	ldr	r0, [pc, #116]	; (171f4 <k_mem_slab_free+0x98>)
   1717e:	227c      	movs	r2, #124	; 0x7c
   17180:	f002 fcc3 	bl	19b0a <printk>
   17184:	217c      	movs	r1, #124	; 0x7c
   17186:	481a      	ldr	r0, [pc, #104]	; (171f0 <k_mem_slab_free+0x94>)
   17188:	f002 ff65 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1718c:	4817      	ldr	r0, [pc, #92]	; (171ec <k_mem_slab_free+0x90>)
   1718e:	f001 fcef 	bl	18b70 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   17192:	6967      	ldr	r7, [r4, #20]
   17194:	b97f      	cbnz	r7, 171b6 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   17196:	4620      	mov	r0, r4
   17198:	f001 f92c 	bl	183f4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1719c:	b158      	cbz	r0, 171b6 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1719e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   171a0:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   171a4:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   171a6:	f000 fd19 	bl	17bdc <z_ready_thread>
			z_reschedule(&lock, key);
   171aa:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   171ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   171b0:	480e      	ldr	r0, [pc, #56]	; (171ec <k_mem_slab_free+0x90>)
   171b2:	f000 bb3f 	b.w	17834 <z_reschedule>
	**(char ***) mem = slab->free_list;
   171b6:	682b      	ldr	r3, [r5, #0]
   171b8:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   171ba:	480c      	ldr	r0, [pc, #48]	; (171ec <k_mem_slab_free+0x90>)
   171bc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   171be:	682b      	ldr	r3, [r5, #0]
   171c0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   171c2:	69a3      	ldr	r3, [r4, #24]
   171c4:	3b01      	subs	r3, #1
   171c6:	61a3      	str	r3, [r4, #24]
   171c8:	f001 fcc4 	bl	18b54 <z_spin_unlock_valid>
   171cc:	b940      	cbnz	r0, 171e0 <k_mem_slab_free+0x84>
   171ce:	4908      	ldr	r1, [pc, #32]	; (171f0 <k_mem_slab_free+0x94>)
   171d0:	4808      	ldr	r0, [pc, #32]	; (171f4 <k_mem_slab_free+0x98>)
   171d2:	22a7      	movs	r2, #167	; 0xa7
   171d4:	f002 fc99 	bl	19b0a <printk>
   171d8:	21a7      	movs	r1, #167	; 0xa7
   171da:	4805      	ldr	r0, [pc, #20]	; (171f0 <k_mem_slab_free+0x94>)
   171dc:	f002 ff3b 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   171e0:	f386 8811 	msr	BASEPRI, r6
   171e4:	f3bf 8f6f 	isb	sy
}
   171e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   171ea:	bf00      	nop
   171ec:	2000ae14 	.word	0x2000ae14
   171f0:	0001ed36 	.word	0x0001ed36
   171f4:	0001ecfc 	.word	0x0001ecfc

000171f8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   171f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   171fc:	4604      	mov	r4, r0
   171fe:	4617      	mov	r7, r2
   17200:	461e      	mov	r6, r3
   17202:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17206:	b143      	cbz	r3, 1721a <z_impl_k_mutex_lock+0x22>
   17208:	495c      	ldr	r1, [pc, #368]	; (1737c <z_impl_k_mutex_lock+0x184>)
   1720a:	485d      	ldr	r0, [pc, #372]	; (17380 <z_impl_k_mutex_lock+0x188>)
   1720c:	227d      	movs	r2, #125	; 0x7d
   1720e:	f002 fc7c 	bl	19b0a <printk>
   17212:	217d      	movs	r1, #125	; 0x7d
   17214:	4859      	ldr	r0, [pc, #356]	; (1737c <z_impl_k_mutex_lock+0x184>)
   17216:	f002 ff1e 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   1721a:	f04f 0320 	mov.w	r3, #32
   1721e:	f3ef 8811 	mrs	r8, BASEPRI
   17222:	f383 8811 	msr	BASEPRI, r3
   17226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1722a:	4856      	ldr	r0, [pc, #344]	; (17384 <z_impl_k_mutex_lock+0x18c>)
   1722c:	f001 fc84 	bl	18b38 <z_spin_lock_valid>
   17230:	b940      	cbnz	r0, 17244 <z_impl_k_mutex_lock+0x4c>
   17232:	4955      	ldr	r1, [pc, #340]	; (17388 <z_impl_k_mutex_lock+0x190>)
   17234:	4852      	ldr	r0, [pc, #328]	; (17380 <z_impl_k_mutex_lock+0x188>)
   17236:	227c      	movs	r2, #124	; 0x7c
   17238:	f002 fc67 	bl	19b0a <printk>
   1723c:	217c      	movs	r1, #124	; 0x7c
   1723e:	4852      	ldr	r0, [pc, #328]	; (17388 <z_impl_k_mutex_lock+0x190>)
   17240:	f002 ff09 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   17244:	484f      	ldr	r0, [pc, #316]	; (17384 <z_impl_k_mutex_lock+0x18c>)
   17246:	f001 fc93 	bl	18b70 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1724a:	68e3      	ldr	r3, [r4, #12]
   1724c:	4a4f      	ldr	r2, [pc, #316]	; (1738c <z_impl_k_mutex_lock+0x194>)
   1724e:	b1d3      	cbz	r3, 17286 <z_impl_k_mutex_lock+0x8e>
   17250:	68a0      	ldr	r0, [r4, #8]
   17252:	6891      	ldr	r1, [r2, #8]
   17254:	4288      	cmp	r0, r1
   17256:	d033      	beq.n	172c0 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   17258:	ea57 0306 	orrs.w	r3, r7, r6
   1725c:	d132      	bne.n	172c4 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1725e:	4849      	ldr	r0, [pc, #292]	; (17384 <z_impl_k_mutex_lock+0x18c>)
   17260:	f001 fc78 	bl	18b54 <z_spin_unlock_valid>
   17264:	b940      	cbnz	r0, 17278 <z_impl_k_mutex_lock+0x80>
   17266:	4948      	ldr	r1, [pc, #288]	; (17388 <z_impl_k_mutex_lock+0x190>)
   17268:	4845      	ldr	r0, [pc, #276]	; (17380 <z_impl_k_mutex_lock+0x188>)
   1726a:	22a7      	movs	r2, #167	; 0xa7
   1726c:	f002 fc4d 	bl	19b0a <printk>
   17270:	21a7      	movs	r1, #167	; 0xa7
   17272:	4845      	ldr	r0, [pc, #276]	; (17388 <z_impl_k_mutex_lock+0x190>)
   17274:	f002 feef 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17278:	f388 8811 	msr	BASEPRI, r8
   1727c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   17280:	f06f 000f 	mvn.w	r0, #15
   17284:	e019      	b.n	172ba <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   17286:	6891      	ldr	r1, [r2, #8]
   17288:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1728c:	3301      	adds	r3, #1
   1728e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17290:	6893      	ldr	r3, [r2, #8]
   17292:	483c      	ldr	r0, [pc, #240]	; (17384 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17294:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   17296:	60a3      	str	r3, [r4, #8]
   17298:	f001 fc5c 	bl	18b54 <z_spin_unlock_valid>
   1729c:	b940      	cbnz	r0, 172b0 <z_impl_k_mutex_lock+0xb8>
   1729e:	493a      	ldr	r1, [pc, #232]	; (17388 <z_impl_k_mutex_lock+0x190>)
   172a0:	4837      	ldr	r0, [pc, #220]	; (17380 <z_impl_k_mutex_lock+0x188>)
   172a2:	22a7      	movs	r2, #167	; 0xa7
   172a4:	f002 fc31 	bl	19b0a <printk>
   172a8:	21a7      	movs	r1, #167	; 0xa7
   172aa:	4837      	ldr	r0, [pc, #220]	; (17388 <z_impl_k_mutex_lock+0x190>)
   172ac:	f002 fed3 	bl	1a056 <assert_post_action>
   172b0:	f388 8811 	msr	BASEPRI, r8
   172b4:	f3bf 8f6f 	isb	sy
		return 0;
   172b8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   172ba:	b002      	add	sp, #8
   172bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   172c0:	6921      	ldr	r1, [r4, #16]
   172c2:	e7e3      	b.n	1728c <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   172c4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   172c8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   172cc:	4299      	cmp	r1, r3
   172ce:	bfa8      	it	ge
   172d0:	4619      	movge	r1, r3
   172d2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   172d6:	4299      	cmp	r1, r3
   172d8:	da3b      	bge.n	17352 <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   172da:	f005 ff6b 	bl	1d1b4 <adjust_owner_prio.isra.0>
   172de:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   172e0:	4622      	mov	r2, r4
   172e2:	4641      	mov	r1, r8
   172e4:	e9cd 7600 	strd	r7, r6, [sp]
   172e8:	4826      	ldr	r0, [pc, #152]	; (17384 <z_impl_k_mutex_lock+0x18c>)
   172ea:	f000 ffe1 	bl	182b0 <z_pend_curr>
	if (got_mutex == 0) {
   172ee:	2800      	cmp	r0, #0
   172f0:	d0e3      	beq.n	172ba <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   172f2:	f04f 0320 	mov.w	r3, #32
   172f6:	f3ef 8611 	mrs	r6, BASEPRI
   172fa:	f383 8811 	msr	BASEPRI, r3
   172fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17302:	4820      	ldr	r0, [pc, #128]	; (17384 <z_impl_k_mutex_lock+0x18c>)
   17304:	f001 fc18 	bl	18b38 <z_spin_lock_valid>
   17308:	b940      	cbnz	r0, 1731c <z_impl_k_mutex_lock+0x124>
   1730a:	491f      	ldr	r1, [pc, #124]	; (17388 <z_impl_k_mutex_lock+0x190>)
   1730c:	481c      	ldr	r0, [pc, #112]	; (17380 <z_impl_k_mutex_lock+0x188>)
   1730e:	227c      	movs	r2, #124	; 0x7c
   17310:	f002 fbfb 	bl	19b0a <printk>
   17314:	217c      	movs	r1, #124	; 0x7c
   17316:	481c      	ldr	r0, [pc, #112]	; (17388 <z_impl_k_mutex_lock+0x190>)
   17318:	f002 fe9d 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1731c:	4819      	ldr	r0, [pc, #100]	; (17384 <z_impl_k_mutex_lock+0x18c>)
   1731e:	f001 fc27 	bl	18b70 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17322:	6823      	ldr	r3, [r4, #0]
   17324:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17326:	42a3      	cmp	r3, r4
   17328:	d007      	beq.n	1733a <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1732a:	b133      	cbz	r3, 1733a <z_impl_k_mutex_lock+0x142>
   1732c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17330:	4299      	cmp	r1, r3
   17332:	bfa8      	it	ge
   17334:	4619      	movge	r1, r3
   17336:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1733a:	68a0      	ldr	r0, [r4, #8]
   1733c:	f005 ff3a 	bl	1d1b4 <adjust_owner_prio.isra.0>
   17340:	b900      	cbnz	r0, 17344 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   17342:	b145      	cbz	r5, 17356 <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   17344:	4631      	mov	r1, r6
   17346:	480f      	ldr	r0, [pc, #60]	; (17384 <z_impl_k_mutex_lock+0x18c>)
   17348:	f000 fa74 	bl	17834 <z_reschedule>
	return -EAGAIN;
   1734c:	f06f 000a 	mvn.w	r0, #10
   17350:	e7b3      	b.n	172ba <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   17352:	2500      	movs	r5, #0
   17354:	e7c4      	b.n	172e0 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17356:	480b      	ldr	r0, [pc, #44]	; (17384 <z_impl_k_mutex_lock+0x18c>)
   17358:	f001 fbfc 	bl	18b54 <z_spin_unlock_valid>
   1735c:	b940      	cbnz	r0, 17370 <z_impl_k_mutex_lock+0x178>
   1735e:	490a      	ldr	r1, [pc, #40]	; (17388 <z_impl_k_mutex_lock+0x190>)
   17360:	4807      	ldr	r0, [pc, #28]	; (17380 <z_impl_k_mutex_lock+0x188>)
   17362:	22a7      	movs	r2, #167	; 0xa7
   17364:	f002 fbd1 	bl	19b0a <printk>
   17368:	21a7      	movs	r1, #167	; 0xa7
   1736a:	4807      	ldr	r0, [pc, #28]	; (17388 <z_impl_k_mutex_lock+0x190>)
   1736c:	f002 fe73 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17370:	f386 8811 	msr	BASEPRI, r6
   17374:	f3bf 8f6f 	isb	sy
   17378:	e7e8      	b.n	1734c <z_impl_k_mutex_lock+0x154>
   1737a:	bf00      	nop
   1737c:	000218ae 	.word	0x000218ae
   17380:	0001ecfc 	.word	0x0001ecfc
   17384:	2000ae18 	.word	0x2000ae18
   17388:	0001ed36 	.word	0x0001ed36
   1738c:	2000ae1c 	.word	0x2000ae1c

00017390 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   17390:	b538      	push	{r3, r4, r5, lr}
   17392:	4604      	mov	r4, r0
   17394:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17398:	b143      	cbz	r3, 173ac <z_impl_k_mutex_unlock+0x1c>
   1739a:	4946      	ldr	r1, [pc, #280]	; (174b4 <z_impl_k_mutex_unlock+0x124>)
   1739c:	4846      	ldr	r0, [pc, #280]	; (174b8 <z_impl_k_mutex_unlock+0x128>)
   1739e:	22d8      	movs	r2, #216	; 0xd8
   173a0:	f002 fbb3 	bl	19b0a <printk>
   173a4:	21d8      	movs	r1, #216	; 0xd8
   173a6:	4843      	ldr	r0, [pc, #268]	; (174b4 <z_impl_k_mutex_unlock+0x124>)
   173a8:	f002 fe55 	bl	1a056 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   173ac:	68a3      	ldr	r3, [r4, #8]
   173ae:	2b00      	cmp	r3, #0
   173b0:	d079      	beq.n	174a6 <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   173b2:	4d42      	ldr	r5, [pc, #264]	; (174bc <z_impl_k_mutex_unlock+0x12c>)
   173b4:	68aa      	ldr	r2, [r5, #8]
   173b6:	4293      	cmp	r3, r2
   173b8:	d178      	bne.n	174ac <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   173ba:	68e3      	ldr	r3, [r4, #12]
   173bc:	b943      	cbnz	r3, 173d0 <z_impl_k_mutex_unlock+0x40>
   173be:	493d      	ldr	r1, [pc, #244]	; (174b4 <z_impl_k_mutex_unlock+0x124>)
   173c0:	483d      	ldr	r0, [pc, #244]	; (174b8 <z_impl_k_mutex_unlock+0x128>)
   173c2:	22ea      	movs	r2, #234	; 0xea
   173c4:	f002 fba1 	bl	19b0a <printk>
   173c8:	21ea      	movs	r1, #234	; 0xea
   173ca:	483a      	ldr	r0, [pc, #232]	; (174b4 <z_impl_k_mutex_unlock+0x124>)
   173cc:	f002 fe43 	bl	1a056 <assert_post_action>
   173d0:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   173d4:	b153      	cbz	r3, 173ec <z_impl_k_mutex_unlock+0x5c>
   173d6:	493a      	ldr	r1, [pc, #232]	; (174c0 <z_impl_k_mutex_unlock+0x130>)
   173d8:	4837      	ldr	r0, [pc, #220]	; (174b8 <z_impl_k_mutex_unlock+0x128>)
   173da:	f44f 7289 	mov.w	r2, #274	; 0x112
   173de:	f002 fb94 	bl	19b0a <printk>
   173e2:	f44f 7189 	mov.w	r1, #274	; 0x112
   173e6:	4836      	ldr	r0, [pc, #216]	; (174c0 <z_impl_k_mutex_unlock+0x130>)
   173e8:	f002 fe35 	bl	1a056 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   173ec:	68ab      	ldr	r3, [r5, #8]
   173ee:	7bdb      	ldrb	r3, [r3, #15]
   173f0:	2b01      	cmp	r3, #1
   173f2:	d10a      	bne.n	1740a <z_impl_k_mutex_unlock+0x7a>
   173f4:	4932      	ldr	r1, [pc, #200]	; (174c0 <z_impl_k_mutex_unlock+0x130>)
   173f6:	4830      	ldr	r0, [pc, #192]	; (174b8 <z_impl_k_mutex_unlock+0x128>)
   173f8:	f240 1213 	movw	r2, #275	; 0x113
   173fc:	f002 fb85 	bl	19b0a <printk>
   17400:	f240 1113 	movw	r1, #275	; 0x113
   17404:	482e      	ldr	r0, [pc, #184]	; (174c0 <z_impl_k_mutex_unlock+0x130>)
   17406:	f002 fe26 	bl	1a056 <assert_post_action>

	--_current->base.sched_locked;
   1740a:	68aa      	ldr	r2, [r5, #8]
   1740c:	7bd3      	ldrb	r3, [r2, #15]
   1740e:	3b01      	subs	r3, #1
   17410:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   17412:	68e3      	ldr	r3, [r4, #12]
   17414:	2b01      	cmp	r3, #1
   17416:	d005      	beq.n	17424 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   17418:	3b01      	subs	r3, #1
   1741a:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1741c:	f000 fb38 	bl	17a90 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   17420:	2000      	movs	r0, #0
}
   17422:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17424:	f04f 0320 	mov.w	r3, #32
   17428:	f3ef 8511 	mrs	r5, BASEPRI
   1742c:	f383 8811 	msr	BASEPRI, r3
   17430:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17434:	4823      	ldr	r0, [pc, #140]	; (174c4 <z_impl_k_mutex_unlock+0x134>)
   17436:	f001 fb7f 	bl	18b38 <z_spin_lock_valid>
   1743a:	b940      	cbnz	r0, 1744e <z_impl_k_mutex_unlock+0xbe>
   1743c:	4922      	ldr	r1, [pc, #136]	; (174c8 <z_impl_k_mutex_unlock+0x138>)
   1743e:	481e      	ldr	r0, [pc, #120]	; (174b8 <z_impl_k_mutex_unlock+0x128>)
   17440:	227c      	movs	r2, #124	; 0x7c
   17442:	f002 fb62 	bl	19b0a <printk>
   17446:	217c      	movs	r1, #124	; 0x7c
   17448:	481f      	ldr	r0, [pc, #124]	; (174c8 <z_impl_k_mutex_unlock+0x138>)
   1744a:	f002 fe04 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1744e:	481d      	ldr	r0, [pc, #116]	; (174c4 <z_impl_k_mutex_unlock+0x134>)
   17450:	f001 fb8e 	bl	18b70 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   17454:	6921      	ldr	r1, [r4, #16]
   17456:	68a0      	ldr	r0, [r4, #8]
   17458:	f005 feac 	bl	1d1b4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1745c:	4620      	mov	r0, r4
   1745e:	f000 ffc9 	bl	183f4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   17462:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   17464:	b160      	cbz	r0, 17480 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   17466:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1746a:	6122      	str	r2, [r4, #16]
   1746c:	2200      	movs	r2, #0
   1746e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   17472:	f000 fbb3 	bl	17bdc <z_ready_thread>
		z_reschedule(&lock, key);
   17476:	4629      	mov	r1, r5
   17478:	4812      	ldr	r0, [pc, #72]	; (174c4 <z_impl_k_mutex_unlock+0x134>)
   1747a:	f000 f9db 	bl	17834 <z_reschedule>
   1747e:	e7cd      	b.n	1741c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   17480:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17482:	4810      	ldr	r0, [pc, #64]	; (174c4 <z_impl_k_mutex_unlock+0x134>)
   17484:	f001 fb66 	bl	18b54 <z_spin_unlock_valid>
   17488:	b940      	cbnz	r0, 1749c <z_impl_k_mutex_unlock+0x10c>
   1748a:	490f      	ldr	r1, [pc, #60]	; (174c8 <z_impl_k_mutex_unlock+0x138>)
   1748c:	480a      	ldr	r0, [pc, #40]	; (174b8 <z_impl_k_mutex_unlock+0x128>)
   1748e:	22a7      	movs	r2, #167	; 0xa7
   17490:	f002 fb3b 	bl	19b0a <printk>
   17494:	21a7      	movs	r1, #167	; 0xa7
   17496:	480c      	ldr	r0, [pc, #48]	; (174c8 <z_impl_k_mutex_unlock+0x138>)
   17498:	f002 fddd 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   1749c:	f385 8811 	msr	BASEPRI, r5
   174a0:	f3bf 8f6f 	isb	sy
   174a4:	e7ba      	b.n	1741c <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   174a6:	f06f 0015 	mvn.w	r0, #21
   174aa:	e7ba      	b.n	17422 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   174ac:	f04f 30ff 	mov.w	r0, #4294967295
   174b0:	e7b7      	b.n	17422 <z_impl_k_mutex_unlock+0x92>
   174b2:	bf00      	nop
   174b4:	000218ae 	.word	0x000218ae
   174b8:	0001ecfc 	.word	0x0001ecfc
   174bc:	2000ae1c 	.word	0x2000ae1c
   174c0:	000218d0 	.word	0x000218d0
   174c4:	2000ae18 	.word	0x2000ae18
   174c8:	0001ed36 	.word	0x0001ed36

000174cc <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   174cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   174d0:	4604      	mov	r4, r0
   174d2:	460d      	mov	r5, r1
   174d4:	4690      	mov	r8, r2
   174d6:	4699      	mov	r9, r3
   174d8:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   174dc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   174e0:	f04f 0320 	mov.w	r3, #32
   174e4:	f3ef 8711 	mrs	r7, BASEPRI
   174e8:	f383 8811 	msr	BASEPRI, r3
   174ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   174f0:	4630      	mov	r0, r6
   174f2:	f001 fb21 	bl	18b38 <z_spin_lock_valid>
   174f6:	b940      	cbnz	r0, 1750a <queue_insert+0x3e>
   174f8:	4937      	ldr	r1, [pc, #220]	; (175d8 <queue_insert+0x10c>)
   174fa:	4838      	ldr	r0, [pc, #224]	; (175dc <queue_insert+0x110>)
   174fc:	227c      	movs	r2, #124	; 0x7c
   174fe:	f002 fb04 	bl	19b0a <printk>
   17502:	217c      	movs	r1, #124	; 0x7c
   17504:	4834      	ldr	r0, [pc, #208]	; (175d8 <queue_insert+0x10c>)
   17506:	f002 fda6 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1750a:	4630      	mov	r0, r6
   1750c:	f001 fb30 	bl	18b70 <z_spin_lock_set_owner>

	if (is_append) {
   17510:	f1ba 0f00 	cmp.w	sl, #0
   17514:	d000      	beq.n	17518 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   17516:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   17518:	f104 000c 	add.w	r0, r4, #12
   1751c:	f000 ff6a 	bl	183f4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   17520:	b160      	cbz	r0, 1753c <queue_insert+0x70>
   17522:	2400      	movs	r4, #0
   17524:	f8c0 8014 	str.w	r8, [r0, #20]
   17528:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1752c:	f000 fb56 	bl	17bdc <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17530:	4630      	mov	r0, r6
   17532:	4639      	mov	r1, r7
   17534:	f000 f97e 	bl	17834 <z_reschedule>
	return 0;
   17538:	2000      	movs	r0, #0
   1753a:	e019      	b.n	17570 <queue_insert+0xa4>
	if (alloc) {
   1753c:	f1b9 0f00 	cmp.w	r9, #0
   17540:	d028      	beq.n	17594 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   17542:	2108      	movs	r1, #8
   17544:	f002 fa12 	bl	1996c <z_thread_aligned_alloc>
		if (anode == NULL) {
   17548:	b9a0      	cbnz	r0, 17574 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1754a:	4630      	mov	r0, r6
   1754c:	f001 fb02 	bl	18b54 <z_spin_unlock_valid>
   17550:	b940      	cbnz	r0, 17564 <queue_insert+0x98>
   17552:	4921      	ldr	r1, [pc, #132]	; (175d8 <queue_insert+0x10c>)
   17554:	4821      	ldr	r0, [pc, #132]	; (175dc <queue_insert+0x110>)
   17556:	22a7      	movs	r2, #167	; 0xa7
   17558:	f002 fad7 	bl	19b0a <printk>
   1755c:	21a7      	movs	r1, #167	; 0xa7
   1755e:	481e      	ldr	r0, [pc, #120]	; (175d8 <queue_insert+0x10c>)
   17560:	f002 fd79 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17564:	f387 8811 	msr	BASEPRI, r7
   17568:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1756c:	f06f 000b 	mvn.w	r0, #11
}
   17570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   17574:	2301      	movs	r3, #1
		anode->data = data;
   17576:	f8c0 8004 	str.w	r8, [r0, #4]
   1757a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1757c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1757e:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   17582:	b95d      	cbnz	r5, 1759c <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17584:	6823      	ldr	r3, [r4, #0]
   17586:	4313      	orrs	r3, r2
   17588:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1758a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1758c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1758e:	b973      	cbnz	r3, 175ae <queue_insert+0xe2>
	list->tail = node;
   17590:	6060      	str	r0, [r4, #4]
}
   17592:	e00c      	b.n	175ae <queue_insert+0xe2>
}
   17594:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   17596:	f8c8 9000 	str.w	r9, [r8]
}
   1759a:	e7ef      	b.n	1757c <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1759c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1759e:	f033 0303 	bics.w	r3, r3, #3
   175a2:	d110      	bne.n	175c6 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   175a4:	6002      	str	r2, [r0, #0]
	return list->tail;
   175a6:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   175a8:	b93a      	cbnz	r2, 175ba <queue_insert+0xee>
	list->head = node;
   175aa:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   175ae:	2104      	movs	r1, #4
   175b0:	f104 0014 	add.w	r0, r4, #20
   175b4:	f005 ff6d 	bl	1d492 <z_handle_obj_poll_events>
   175b8:	e7ba      	b.n	17530 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   175ba:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   175bc:	f003 0303 	and.w	r3, r3, #3
   175c0:	4303      	orrs	r3, r0
   175c2:	6013      	str	r3, [r2, #0]
   175c4:	e7e4      	b.n	17590 <queue_insert+0xc4>
   175c6:	4313      	orrs	r3, r2
   175c8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   175ca:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   175cc:	f003 0303 	and.w	r3, r3, #3
   175d0:	4303      	orrs	r3, r0
   175d2:	602b      	str	r3, [r5, #0]
}
   175d4:	e7eb      	b.n	175ae <queue_insert+0xe2>
   175d6:	bf00      	nop
   175d8:	0001ed36 	.word	0x0001ed36
   175dc:	0001ecfc 	.word	0x0001ecfc

000175e0 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   175e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   175e4:	4605      	mov	r5, r0
   175e6:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   175e8:	460c      	mov	r4, r1
   175ea:	2900      	cmp	r1, #0
   175ec:	d045      	beq.n	1767a <k_queue_append_list+0x9a>
   175ee:	2a00      	cmp	r2, #0
   175f0:	d043      	beq.n	1767a <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   175f2:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   175f6:	f04f 0320 	mov.w	r3, #32
   175fa:	f3ef 8911 	mrs	r9, BASEPRI
   175fe:	f383 8811 	msr	BASEPRI, r3
   17602:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17606:	4638      	mov	r0, r7
   17608:	f001 fa96 	bl	18b38 <z_spin_lock_valid>
   1760c:	b940      	cbnz	r0, 17620 <k_queue_append_list+0x40>
   1760e:	491c      	ldr	r1, [pc, #112]	; (17680 <k_queue_append_list+0xa0>)
   17610:	481c      	ldr	r0, [pc, #112]	; (17684 <k_queue_append_list+0xa4>)
   17612:	227c      	movs	r2, #124	; 0x7c
   17614:	f002 fa79 	bl	19b0a <printk>
   17618:	217c      	movs	r1, #124	; 0x7c
   1761a:	4819      	ldr	r0, [pc, #100]	; (17680 <k_queue_append_list+0xa0>)
   1761c:	f002 fd1b 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   17620:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   17622:	f105 080c 	add.w	r8, r5, #12
   17626:	f001 faa3 	bl	18b70 <z_spin_lock_set_owner>
   1762a:	4640      	mov	r0, r8
   1762c:	f000 fee2 	bl	183f4 <z_unpend_first_thread>
   17630:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   17634:	b920      	cbnz	r0, 17640 <k_queue_append_list+0x60>
	return list->tail;
   17636:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   17638:	b9ca      	cbnz	r2, 1766e <k_queue_append_list+0x8e>
	list->head = node;
   1763a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1763c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1763e:	e00a      	b.n	17656 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   17640:	6144      	str	r4, [r0, #20]
   17642:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   17646:	f000 fac9 	bl	17bdc <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1764a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1764c:	4640      	mov	r0, r8
   1764e:	f000 fed1 	bl	183f4 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   17652:	2c00      	cmp	r4, #0
   17654:	d1ee      	bne.n	17634 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   17656:	2104      	movs	r1, #4
   17658:	f105 0014 	add.w	r0, r5, #20
   1765c:	f005 ff19 	bl	1d492 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17660:	4638      	mov	r0, r7
   17662:	4649      	mov	r1, r9
   17664:	f000 f8e6 	bl	17834 <z_reschedule>
	return 0;
   17668:	2000      	movs	r0, #0
}
   1766a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1766e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17670:	f003 0303 	and.w	r3, r3, #3
   17674:	431c      	orrs	r4, r3
   17676:	6014      	str	r4, [r2, #0]
}
   17678:	e7e0      	b.n	1763c <k_queue_append_list+0x5c>
		return -EINVAL;
   1767a:	f06f 0015 	mvn.w	r0, #21
   1767e:	e7f4      	b.n	1766a <k_queue_append_list+0x8a>
   17680:	0001ed36 	.word	0x0001ed36
   17684:	0001ecfc 	.word	0x0001ecfc

00017688 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   17688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1768c:	4605      	mov	r5, r0
   1768e:	4690      	mov	r8, r2
   17690:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17692:	f100 0608 	add.w	r6, r0, #8
   17696:	f04f 0320 	mov.w	r3, #32
   1769a:	f3ef 8911 	mrs	r9, BASEPRI
   1769e:	f383 8811 	msr	BASEPRI, r3
   176a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   176a6:	4630      	mov	r0, r6
   176a8:	f001 fa46 	bl	18b38 <z_spin_lock_valid>
   176ac:	b940      	cbnz	r0, 176c0 <z_impl_k_queue_get+0x38>
   176ae:	4921      	ldr	r1, [pc, #132]	; (17734 <z_impl_k_queue_get+0xac>)
   176b0:	4821      	ldr	r0, [pc, #132]	; (17738 <z_impl_k_queue_get+0xb0>)
   176b2:	227c      	movs	r2, #124	; 0x7c
   176b4:	f002 fa29 	bl	19b0a <printk>
   176b8:	217c      	movs	r1, #124	; 0x7c
   176ba:	481e      	ldr	r0, [pc, #120]	; (17734 <z_impl_k_queue_get+0xac>)
   176bc:	f002 fccb 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   176c0:	4630      	mov	r0, r6
   176c2:	f001 fa55 	bl	18b70 <z_spin_lock_set_owner>
	return list->head;
   176c6:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   176c8:	b314      	cbz	r4, 17710 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   176ca:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   176cc:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   176ce:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   176d2:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   176d4:	4620      	mov	r0, r4
   176d6:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   176da:	602b      	str	r3, [r5, #0]
	list->tail = node;
   176dc:	bf08      	it	eq
   176de:	606b      	streq	r3, [r5, #4]
   176e0:	f005 fd77 	bl	1d1d2 <z_queue_node_peek>
   176e4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176e6:	4630      	mov	r0, r6
   176e8:	f001 fa34 	bl	18b54 <z_spin_unlock_valid>
   176ec:	b940      	cbnz	r0, 17700 <z_impl_k_queue_get+0x78>
   176ee:	4911      	ldr	r1, [pc, #68]	; (17734 <z_impl_k_queue_get+0xac>)
   176f0:	4811      	ldr	r0, [pc, #68]	; (17738 <z_impl_k_queue_get+0xb0>)
   176f2:	22a7      	movs	r2, #167	; 0xa7
   176f4:	f002 fa09 	bl	19b0a <printk>
   176f8:	21a7      	movs	r1, #167	; 0xa7
   176fa:	480e      	ldr	r0, [pc, #56]	; (17734 <z_impl_k_queue_get+0xac>)
   176fc:	f002 fcab 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17700:	f389 8811 	msr	BASEPRI, r9
   17704:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17708:	4620      	mov	r0, r4
   1770a:	b003      	add	sp, #12
   1770c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17710:	ea58 0307 	orrs.w	r3, r8, r7
   17714:	d0e7      	beq.n	176e6 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   17716:	4649      	mov	r1, r9
   17718:	4630      	mov	r0, r6
   1771a:	e9cd 8700 	strd	r8, r7, [sp]
   1771e:	f105 020c 	add.w	r2, r5, #12
   17722:	f000 fdc5 	bl	182b0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   17726:	2800      	cmp	r0, #0
   17728:	d1ee      	bne.n	17708 <z_impl_k_queue_get+0x80>
   1772a:	4b04      	ldr	r3, [pc, #16]	; (1773c <z_impl_k_queue_get+0xb4>)
   1772c:	689b      	ldr	r3, [r3, #8]
   1772e:	695c      	ldr	r4, [r3, #20]
   17730:	e7ea      	b.n	17708 <z_impl_k_queue_get+0x80>
   17732:	bf00      	nop
   17734:	0001ed36 	.word	0x0001ed36
   17738:	0001ecfc 	.word	0x0001ecfc
   1773c:	2000ae1c 	.word	0x2000ae1c

00017740 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   17740:	6883      	ldr	r3, [r0, #8]
{
   17742:	b510      	push	{r4, lr}
   17744:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   17746:	b953      	cbnz	r3, 1775e <pended_on+0x1e>
   17748:	4906      	ldr	r1, [pc, #24]	; (17764 <pended_on+0x24>)
   1774a:	4807      	ldr	r0, [pc, #28]	; (17768 <pended_on+0x28>)
   1774c:	f44f 7201 	mov.w	r2, #516	; 0x204
   17750:	f002 f9db 	bl	19b0a <printk>
   17754:	f44f 7101 	mov.w	r1, #516	; 0x204
   17758:	4802      	ldr	r0, [pc, #8]	; (17764 <pended_on+0x24>)
   1775a:	f002 fc7c 	bl	1a056 <assert_post_action>

	return thread->base.pended_on;
}
   1775e:	68a0      	ldr	r0, [r4, #8]
   17760:	bd10      	pop	{r4, pc}
   17762:	bf00      	nop
   17764:	000218fb 	.word	0x000218fb
   17768:	0001ecfc 	.word	0x0001ecfc

0001776c <z_reset_time_slice>:
{
   1776c:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1776e:	4c08      	ldr	r4, [pc, #32]	; (17790 <z_reset_time_slice+0x24>)
   17770:	6823      	ldr	r3, [r4, #0]
   17772:	b15b      	cbz	r3, 1778c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   17774:	f7f4 fafa 	bl	bd6c <z_clock_elapsed>
   17778:	4603      	mov	r3, r0
   1777a:	6820      	ldr	r0, [r4, #0]
   1777c:	4a05      	ldr	r2, [pc, #20]	; (17794 <z_reset_time_slice+0x28>)
   1777e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   17780:	2100      	movs	r1, #0
}
   17782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   17786:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   17788:	f001 bc8c 	b.w	190a4 <z_set_timeout_expiry>
}
   1778c:	bd10      	pop	{r4, pc}
   1778e:	bf00      	nop
   17790:	2000ae5c 	.word	0x2000ae5c
   17794:	2000ae1c 	.word	0x2000ae1c

00017798 <k_sched_time_slice_set>:
{
   17798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1779a:	4604      	mov	r4, r0
   1779c:	460d      	mov	r5, r1
	__asm__ volatile(
   1779e:	f04f 0320 	mov.w	r3, #32
   177a2:	f3ef 8711 	mrs	r7, BASEPRI
   177a6:	f383 8811 	msr	BASEPRI, r3
   177aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   177ae:	481b      	ldr	r0, [pc, #108]	; (1781c <k_sched_time_slice_set+0x84>)
   177b0:	f001 f9c2 	bl	18b38 <z_spin_lock_valid>
   177b4:	b940      	cbnz	r0, 177c8 <k_sched_time_slice_set+0x30>
   177b6:	491a      	ldr	r1, [pc, #104]	; (17820 <k_sched_time_slice_set+0x88>)
   177b8:	481a      	ldr	r0, [pc, #104]	; (17824 <k_sched_time_slice_set+0x8c>)
   177ba:	227c      	movs	r2, #124	; 0x7c
   177bc:	f002 f9a5 	bl	19b0a <printk>
   177c0:	217c      	movs	r1, #124	; 0x7c
   177c2:	4817      	ldr	r0, [pc, #92]	; (17820 <k_sched_time_slice_set+0x88>)
   177c4:	f002 fc47 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   177c8:	4814      	ldr	r0, [pc, #80]	; (1781c <k_sched_time_slice_set+0x84>)
   177ca:	f001 f9d1 	bl	18b70 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   177ce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   177d2:	2100      	movs	r1, #0
   177d4:	f240 30e7 	movw	r0, #999	; 0x3e7
   177d8:	4b13      	ldr	r3, [pc, #76]	; (17828 <k_sched_time_slice_set+0x90>)
   177da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   177de:	6159      	str	r1, [r3, #20]
   177e0:	2300      	movs	r3, #0
   177e2:	fbe4 0106 	umlal	r0, r1, r4, r6
   177e6:	f7f1 f9a1 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   177ea:	4b10      	ldr	r3, [pc, #64]	; (1782c <k_sched_time_slice_set+0x94>)
   177ec:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   177ee:	4b10      	ldr	r3, [pc, #64]	; (17830 <k_sched_time_slice_set+0x98>)
   177f0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   177f2:	f7ff ffbb 	bl	1776c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   177f6:	4809      	ldr	r0, [pc, #36]	; (1781c <k_sched_time_slice_set+0x84>)
   177f8:	f001 f9ac 	bl	18b54 <z_spin_unlock_valid>
   177fc:	b940      	cbnz	r0, 17810 <k_sched_time_slice_set+0x78>
   177fe:	4908      	ldr	r1, [pc, #32]	; (17820 <k_sched_time_slice_set+0x88>)
   17800:	4808      	ldr	r0, [pc, #32]	; (17824 <k_sched_time_slice_set+0x8c>)
   17802:	22a7      	movs	r2, #167	; 0xa7
   17804:	f002 f981 	bl	19b0a <printk>
   17808:	21a7      	movs	r1, #167	; 0xa7
   1780a:	4805      	ldr	r0, [pc, #20]	; (17820 <k_sched_time_slice_set+0x88>)
   1780c:	f002 fc23 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17810:	f387 8811 	msr	BASEPRI, r7
   17814:	f3bf 8f6f 	isb	sy
}
   17818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1781a:	bf00      	nop
   1781c:	2000ae54 	.word	0x2000ae54
   17820:	0001ed36 	.word	0x0001ed36
   17824:	0001ecfc 	.word	0x0001ecfc
   17828:	2000ae1c 	.word	0x2000ae1c
   1782c:	2000ae5c 	.word	0x2000ae5c
   17830:	2000ae58 	.word	0x2000ae58

00017834 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   17834:	b510      	push	{r4, lr}
   17836:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17838:	460c      	mov	r4, r1
   1783a:	b9c1      	cbnz	r1, 1786e <z_reschedule+0x3a>
   1783c:	f3ef 8205 	mrs	r2, IPSR
   17840:	b9aa      	cbnz	r2, 1786e <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   17842:	4a14      	ldr	r2, [pc, #80]	; (17894 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   17844:	6a91      	ldr	r1, [r2, #40]	; 0x28
   17846:	6892      	ldr	r2, [r2, #8]
   17848:	4291      	cmp	r1, r2
   1784a:	d010      	beq.n	1786e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1784c:	f001 f982 	bl	18b54 <z_spin_unlock_valid>
   17850:	b940      	cbnz	r0, 17864 <z_reschedule+0x30>
   17852:	4911      	ldr	r1, [pc, #68]	; (17898 <z_reschedule+0x64>)
   17854:	4811      	ldr	r0, [pc, #68]	; (1789c <z_reschedule+0x68>)
   17856:	22be      	movs	r2, #190	; 0xbe
   17858:	f002 f957 	bl	19b0a <printk>
   1785c:	21be      	movs	r1, #190	; 0xbe
   1785e:	480e      	ldr	r0, [pc, #56]	; (17898 <z_reschedule+0x64>)
   17860:	f002 fbf9 	bl	1a056 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   17864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   17868:	2000      	movs	r0, #0
   1786a:	f7f5 babf 	b.w	cdec <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1786e:	4618      	mov	r0, r3
   17870:	f001 f970 	bl	18b54 <z_spin_unlock_valid>
   17874:	b940      	cbnz	r0, 17888 <z_reschedule+0x54>
   17876:	4908      	ldr	r1, [pc, #32]	; (17898 <z_reschedule+0x64>)
   17878:	4808      	ldr	r0, [pc, #32]	; (1789c <z_reschedule+0x68>)
   1787a:	22a7      	movs	r2, #167	; 0xa7
   1787c:	f002 f945 	bl	19b0a <printk>
   17880:	21a7      	movs	r1, #167	; 0xa7
   17882:	4805      	ldr	r0, [pc, #20]	; (17898 <z_reschedule+0x64>)
   17884:	f002 fbe7 	bl	1a056 <assert_post_action>
   17888:	f384 8811 	msr	BASEPRI, r4
   1788c:	f3bf 8f6f 	isb	sy
   17890:	bd10      	pop	{r4, pc}
   17892:	bf00      	nop
   17894:	2000ae1c 	.word	0x2000ae1c
   17898:	0001ed36 	.word	0x0001ed36
   1789c:	0001ecfc 	.word	0x0001ecfc

000178a0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   178a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   178a2:	f04f 0320 	mov.w	r3, #32
   178a6:	f3ef 8511 	mrs	r5, BASEPRI
   178aa:	f383 8811 	msr	BASEPRI, r3
   178ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   178b2:	4822      	ldr	r0, [pc, #136]	; (1793c <k_sched_lock+0x9c>)
   178b4:	f001 f940 	bl	18b38 <z_spin_lock_valid>
   178b8:	b940      	cbnz	r0, 178cc <k_sched_lock+0x2c>
   178ba:	4921      	ldr	r1, [pc, #132]	; (17940 <k_sched_lock+0xa0>)
   178bc:	4821      	ldr	r0, [pc, #132]	; (17944 <k_sched_lock+0xa4>)
   178be:	227c      	movs	r2, #124	; 0x7c
   178c0:	f002 f923 	bl	19b0a <printk>
   178c4:	217c      	movs	r1, #124	; 0x7c
   178c6:	481e      	ldr	r0, [pc, #120]	; (17940 <k_sched_lock+0xa0>)
   178c8:	f002 fbc5 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   178cc:	481b      	ldr	r0, [pc, #108]	; (1793c <k_sched_lock+0x9c>)
   178ce:	f001 f94f 	bl	18b70 <z_spin_lock_set_owner>
   178d2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   178d6:	b153      	cbz	r3, 178ee <k_sched_lock+0x4e>
   178d8:	491b      	ldr	r1, [pc, #108]	; (17948 <k_sched_lock+0xa8>)
   178da:	481a      	ldr	r0, [pc, #104]	; (17944 <k_sched_lock+0xa4>)
   178dc:	f44f 7289 	mov.w	r2, #274	; 0x112
   178e0:	f002 f913 	bl	19b0a <printk>
   178e4:	f44f 7189 	mov.w	r1, #274	; 0x112
   178e8:	4817      	ldr	r0, [pc, #92]	; (17948 <k_sched_lock+0xa8>)
   178ea:	f002 fbb4 	bl	1a056 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   178ee:	4c17      	ldr	r4, [pc, #92]	; (1794c <k_sched_lock+0xac>)
   178f0:	68a3      	ldr	r3, [r4, #8]
   178f2:	7bdb      	ldrb	r3, [r3, #15]
   178f4:	2b01      	cmp	r3, #1
   178f6:	d10a      	bne.n	1790e <k_sched_lock+0x6e>
   178f8:	4913      	ldr	r1, [pc, #76]	; (17948 <k_sched_lock+0xa8>)
   178fa:	4812      	ldr	r0, [pc, #72]	; (17944 <k_sched_lock+0xa4>)
   178fc:	f240 1213 	movw	r2, #275	; 0x113
   17900:	f002 f903 	bl	19b0a <printk>
   17904:	f240 1113 	movw	r1, #275	; 0x113
   17908:	480f      	ldr	r0, [pc, #60]	; (17948 <k_sched_lock+0xa8>)
   1790a:	f002 fba4 	bl	1a056 <assert_post_action>
	--_current->base.sched_locked;
   1790e:	68a2      	ldr	r2, [r4, #8]
   17910:	7bd3      	ldrb	r3, [r2, #15]
   17912:	3b01      	subs	r3, #1
   17914:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17916:	4809      	ldr	r0, [pc, #36]	; (1793c <k_sched_lock+0x9c>)
   17918:	f001 f91c 	bl	18b54 <z_spin_unlock_valid>
   1791c:	b940      	cbnz	r0, 17930 <k_sched_lock+0x90>
   1791e:	4908      	ldr	r1, [pc, #32]	; (17940 <k_sched_lock+0xa0>)
   17920:	4808      	ldr	r0, [pc, #32]	; (17944 <k_sched_lock+0xa4>)
   17922:	22a7      	movs	r2, #167	; 0xa7
   17924:	f002 f8f1 	bl	19b0a <printk>
   17928:	21a7      	movs	r1, #167	; 0xa7
   1792a:	4805      	ldr	r0, [pc, #20]	; (17940 <k_sched_lock+0xa0>)
   1792c:	f002 fb93 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17930:	f385 8811 	msr	BASEPRI, r5
   17934:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   17938:	bd38      	pop	{r3, r4, r5, pc}
   1793a:	bf00      	nop
   1793c:	2000ae54 	.word	0x2000ae54
   17940:	0001ed36 	.word	0x0001ed36
   17944:	0001ecfc 	.word	0x0001ecfc
   17948:	000218d0 	.word	0x000218d0
   1794c:	2000ae1c 	.word	0x2000ae1c

00017950 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17950:	4b11      	ldr	r3, [pc, #68]	; (17998 <z_priq_dumb_remove+0x48>)
{
   17952:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17954:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   17958:	4282      	cmp	r2, r0
{
   1795a:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1795c:	d105      	bne.n	1796a <z_priq_dumb_remove+0x1a>
   1795e:	689b      	ldr	r3, [r3, #8]
   17960:	428b      	cmp	r3, r1
   17962:	d102      	bne.n	1796a <z_priq_dumb_remove+0x1a>
   17964:	7b4b      	ldrb	r3, [r1, #13]
   17966:	06db      	lsls	r3, r3, #27
   17968:	d114      	bne.n	17994 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1796a:	4b0c      	ldr	r3, [pc, #48]	; (1799c <z_priq_dumb_remove+0x4c>)
   1796c:	429c      	cmp	r4, r3
   1796e:	d10a      	bne.n	17986 <z_priq_dumb_remove+0x36>
   17970:	490b      	ldr	r1, [pc, #44]	; (179a0 <z_priq_dumb_remove+0x50>)
   17972:	480c      	ldr	r0, [pc, #48]	; (179a4 <z_priq_dumb_remove+0x54>)
   17974:	f240 32da 	movw	r2, #986	; 0x3da
   17978:	f002 f8c7 	bl	19b0a <printk>
   1797c:	f240 31da 	movw	r1, #986	; 0x3da
   17980:	4807      	ldr	r0, [pc, #28]	; (179a0 <z_priq_dumb_remove+0x50>)
   17982:	f002 fb68 	bl	1a056 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   17986:	e9d4 3200 	ldrd	r3, r2, [r4]
   1798a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1798c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1798e:	2300      	movs	r3, #0
	node->prev = NULL;
   17990:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   17994:	bd10      	pop	{r4, pc}
   17996:	bf00      	nop
   17998:	2000ae1c 	.word	0x2000ae1c
   1799c:	2000a290 	.word	0x2000a290
   179a0:	000218fb 	.word	0x000218fb
   179a4:	0001ecfc 	.word	0x0001ecfc

000179a8 <z_unpend_thread>:
{
   179a8:	b538      	push	{r3, r4, r5, lr}
   179aa:	4604      	mov	r4, r0
	__asm__ volatile(
   179ac:	f04f 0320 	mov.w	r3, #32
   179b0:	f3ef 8511 	mrs	r5, BASEPRI
   179b4:	f383 8811 	msr	BASEPRI, r3
   179b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   179bc:	4814      	ldr	r0, [pc, #80]	; (17a10 <z_unpend_thread+0x68>)
   179be:	f001 f8bb 	bl	18b38 <z_spin_lock_valid>
   179c2:	b940      	cbnz	r0, 179d6 <z_unpend_thread+0x2e>
   179c4:	4913      	ldr	r1, [pc, #76]	; (17a14 <z_unpend_thread+0x6c>)
   179c6:	4814      	ldr	r0, [pc, #80]	; (17a18 <z_unpend_thread+0x70>)
   179c8:	227c      	movs	r2, #124	; 0x7c
   179ca:	f002 f89e 	bl	19b0a <printk>
   179ce:	217c      	movs	r1, #124	; 0x7c
   179d0:	4810      	ldr	r0, [pc, #64]	; (17a14 <z_unpend_thread+0x6c>)
   179d2:	f002 fb40 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   179d6:	480e      	ldr	r0, [pc, #56]	; (17a10 <z_unpend_thread+0x68>)
   179d8:	f001 f8ca 	bl	18b70 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   179dc:	4620      	mov	r0, r4
   179de:	f005 fc45 	bl	1d26c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   179e2:	480b      	ldr	r0, [pc, #44]	; (17a10 <z_unpend_thread+0x68>)
   179e4:	f001 f8b6 	bl	18b54 <z_spin_unlock_valid>
   179e8:	b940      	cbnz	r0, 179fc <z_unpend_thread+0x54>
   179ea:	490a      	ldr	r1, [pc, #40]	; (17a14 <z_unpend_thread+0x6c>)
   179ec:	480a      	ldr	r0, [pc, #40]	; (17a18 <z_unpend_thread+0x70>)
   179ee:	22a7      	movs	r2, #167	; 0xa7
   179f0:	f002 f88b 	bl	19b0a <printk>
   179f4:	21a7      	movs	r1, #167	; 0xa7
   179f6:	4807      	ldr	r0, [pc, #28]	; (17a14 <z_unpend_thread+0x6c>)
   179f8:	f002 fb2d 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   179fc:	f385 8811 	msr	BASEPRI, r5
   17a00:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   17a04:	f104 0018 	add.w	r0, r4, #24
}
   17a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17a0c:	f001 bad8 	b.w	18fc0 <z_abort_timeout>
   17a10:	2000ae54 	.word	0x2000ae54
   17a14:	0001ed36 	.word	0x0001ed36
   17a18:	0001ecfc 	.word	0x0001ecfc

00017a1c <update_cache>:
{
   17a1c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   17a1e:	4c19      	ldr	r4, [pc, #100]	; (17a84 <update_cache+0x68>)
{
   17a20:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   17a22:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   17a24:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   17a26:	b143      	cbz	r3, 17a3a <update_cache+0x1e>
		return _current_cpu->idle_thread;
   17a28:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   17a2a:	b1a8      	cbz	r0, 17a58 <update_cache+0x3c>
		if (thread != _current) {
   17a2c:	68a3      	ldr	r3, [r4, #8]
   17a2e:	42ab      	cmp	r3, r5
   17a30:	d001      	beq.n	17a36 <update_cache+0x1a>
			z_reset_time_slice();
   17a32:	f7ff fe9b 	bl	1776c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   17a36:	62a5      	str	r5, [r4, #40]	; 0x28
}
   17a38:	e023      	b.n	17a82 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   17a3a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   17a3e:	f005 fc23 	bl	1d288 <z_priq_dumb_best>
   17a42:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   17a44:	7b4b      	ldrb	r3, [r1, #13]
   17a46:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   17a48:	bf44      	itt	mi
   17a4a:	f043 0308 	orrmi.w	r3, r3, #8
   17a4e:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   17a50:	b905      	cbnz	r5, 17a54 <update_cache+0x38>
   17a52:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   17a54:	b152      	cbz	r2, 17a6c <update_cache+0x50>
   17a56:	e7e9      	b.n	17a2c <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   17a58:	b941      	cbnz	r1, 17a6c <update_cache+0x50>
   17a5a:	490b      	ldr	r1, [pc, #44]	; (17a88 <update_cache+0x6c>)
   17a5c:	480b      	ldr	r0, [pc, #44]	; (17a8c <update_cache+0x70>)
   17a5e:	2283      	movs	r2, #131	; 0x83
   17a60:	f002 f853 	bl	19b0a <printk>
   17a64:	2183      	movs	r1, #131	; 0x83
   17a66:	4808      	ldr	r0, [pc, #32]	; (17a88 <update_cache+0x6c>)
   17a68:	f002 faf5 	bl	1a056 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   17a6c:	68a3      	ldr	r3, [r4, #8]
   17a6e:	7b5a      	ldrb	r2, [r3, #13]
   17a70:	06d2      	lsls	r2, r2, #27
   17a72:	d1db      	bne.n	17a2c <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   17a74:	69aa      	ldr	r2, [r5, #24]
   17a76:	2a00      	cmp	r2, #0
   17a78:	d1d8      	bne.n	17a2c <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   17a7a:	89da      	ldrh	r2, [r3, #14]
   17a7c:	2a7f      	cmp	r2, #127	; 0x7f
   17a7e:	d9d5      	bls.n	17a2c <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   17a80:	62a3      	str	r3, [r4, #40]	; 0x28
}
   17a82:	bd38      	pop	{r3, r4, r5, pc}
   17a84:	2000ae1c 	.word	0x2000ae1c
   17a88:	000218fb 	.word	0x000218fb
   17a8c:	0001ecfc 	.word	0x0001ecfc

00017a90 <k_sched_unlock>:
{
   17a90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17a92:	f04f 0320 	mov.w	r3, #32
   17a96:	f3ef 8511 	mrs	r5, BASEPRI
   17a9a:	f383 8811 	msr	BASEPRI, r3
   17a9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17aa2:	4824      	ldr	r0, [pc, #144]	; (17b34 <k_sched_unlock+0xa4>)
   17aa4:	f001 f848 	bl	18b38 <z_spin_lock_valid>
   17aa8:	b940      	cbnz	r0, 17abc <k_sched_unlock+0x2c>
   17aaa:	4923      	ldr	r1, [pc, #140]	; (17b38 <k_sched_unlock+0xa8>)
   17aac:	4823      	ldr	r0, [pc, #140]	; (17b3c <k_sched_unlock+0xac>)
   17aae:	227c      	movs	r2, #124	; 0x7c
   17ab0:	f002 f82b 	bl	19b0a <printk>
   17ab4:	217c      	movs	r1, #124	; 0x7c
   17ab6:	4820      	ldr	r0, [pc, #128]	; (17b38 <k_sched_unlock+0xa8>)
   17ab8:	f002 facd 	bl	1a056 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   17abc:	4c20      	ldr	r4, [pc, #128]	; (17b40 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   17abe:	481d      	ldr	r0, [pc, #116]	; (17b34 <k_sched_unlock+0xa4>)
   17ac0:	f001 f856 	bl	18b70 <z_spin_lock_set_owner>
   17ac4:	68a3      	ldr	r3, [r4, #8]
   17ac6:	7bdb      	ldrb	r3, [r3, #15]
   17ac8:	b953      	cbnz	r3, 17ae0 <k_sched_unlock+0x50>
   17aca:	491e      	ldr	r1, [pc, #120]	; (17b44 <k_sched_unlock+0xb4>)
   17acc:	481b      	ldr	r0, [pc, #108]	; (17b3c <k_sched_unlock+0xac>)
   17ace:	f44f 725d 	mov.w	r2, #884	; 0x374
   17ad2:	f002 f81a 	bl	19b0a <printk>
   17ad6:	f44f 715d 	mov.w	r1, #884	; 0x374
   17ada:	481a      	ldr	r0, [pc, #104]	; (17b44 <k_sched_unlock+0xb4>)
   17adc:	f002 fabb 	bl	1a056 <assert_post_action>
   17ae0:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   17ae4:	b153      	cbz	r3, 17afc <k_sched_unlock+0x6c>
   17ae6:	4917      	ldr	r1, [pc, #92]	; (17b44 <k_sched_unlock+0xb4>)
   17ae8:	4814      	ldr	r0, [pc, #80]	; (17b3c <k_sched_unlock+0xac>)
   17aea:	f240 3275 	movw	r2, #885	; 0x375
   17aee:	f002 f80c 	bl	19b0a <printk>
   17af2:	f240 3175 	movw	r1, #885	; 0x375
   17af6:	4813      	ldr	r0, [pc, #76]	; (17b44 <k_sched_unlock+0xb4>)
   17af8:	f002 faad 	bl	1a056 <assert_post_action>
		++_current->base.sched_locked;
   17afc:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   17afe:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   17b00:	7bd3      	ldrb	r3, [r2, #15]
   17b02:	3301      	adds	r3, #1
   17b04:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17b06:	f7ff ff89 	bl	17a1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17b0a:	480a      	ldr	r0, [pc, #40]	; (17b34 <k_sched_unlock+0xa4>)
   17b0c:	f001 f822 	bl	18b54 <z_spin_unlock_valid>
   17b10:	b940      	cbnz	r0, 17b24 <k_sched_unlock+0x94>
   17b12:	4909      	ldr	r1, [pc, #36]	; (17b38 <k_sched_unlock+0xa8>)
   17b14:	4809      	ldr	r0, [pc, #36]	; (17b3c <k_sched_unlock+0xac>)
   17b16:	22a7      	movs	r2, #167	; 0xa7
   17b18:	f001 fff7 	bl	19b0a <printk>
   17b1c:	21a7      	movs	r1, #167	; 0xa7
   17b1e:	4806      	ldr	r0, [pc, #24]	; (17b38 <k_sched_unlock+0xa8>)
   17b20:	f002 fa99 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17b24:	f385 8811 	msr	BASEPRI, r5
   17b28:	f3bf 8f6f 	isb	sy
}
   17b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   17b30:	f005 bb92 	b.w	1d258 <z_reschedule_unlocked>
   17b34:	2000ae54 	.word	0x2000ae54
   17b38:	0001ed36 	.word	0x0001ed36
   17b3c:	0001ecfc 	.word	0x0001ecfc
   17b40:	2000ae1c 	.word	0x2000ae1c
   17b44:	000218fb 	.word	0x000218fb

00017b48 <ready_thread>:
{
   17b48:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   17b4a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   17b4e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   17b50:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   17b52:	7b43      	ldrb	r3, [r0, #13]
   17b54:	db39      	blt.n	17bca <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17b56:	06db      	lsls	r3, r3, #27
   17b58:	d137      	bne.n	17bca <ready_thread+0x82>
   17b5a:	6983      	ldr	r3, [r0, #24]
   17b5c:	2b00      	cmp	r3, #0
   17b5e:	d134      	bne.n	17bca <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17b60:	4b1a      	ldr	r3, [pc, #104]	; (17bcc <ready_thread+0x84>)
   17b62:	4298      	cmp	r0, r3
   17b64:	d10a      	bne.n	17b7c <ready_thread+0x34>
   17b66:	491a      	ldr	r1, [pc, #104]	; (17bd0 <ready_thread+0x88>)
   17b68:	481a      	ldr	r0, [pc, #104]	; (17bd4 <ready_thread+0x8c>)
   17b6a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   17b6e:	f001 ffcc 	bl	19b0a <printk>
   17b72:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   17b76:	4816      	ldr	r0, [pc, #88]	; (17bd0 <ready_thread+0x88>)
   17b78:	f002 fa6d 	bl	1a056 <assert_post_action>
	return list->head == list;
   17b7c:	4a16      	ldr	r2, [pc, #88]	; (17bd8 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17b7e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   17b82:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17b86:	4283      	cmp	r3, r0
   17b88:	d019      	beq.n	17bbe <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17b8a:	b1c3      	cbz	r3, 17bbe <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   17b8c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   17b90:	f993 600e 	ldrsb.w	r6, [r3, #14]
   17b94:	42ae      	cmp	r6, r5
   17b96:	dd0d      	ble.n	17bb4 <ready_thread+0x6c>
	node->prev = successor->prev;
   17b98:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17b9a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   17b9e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17ba0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   17ba2:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   17ba4:	2000      	movs	r0, #0
   17ba6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17baa:	7363      	strb	r3, [r4, #13]
}
   17bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   17bb0:	f7ff bf34 	b.w	17a1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17bb4:	428b      	cmp	r3, r1
   17bb6:	d002      	beq.n	17bbe <ready_thread+0x76>
   17bb8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17bba:	2b00      	cmp	r3, #0
   17bbc:	d1e8      	bne.n	17b90 <ready_thread+0x48>
	node->prev = list->tail;
   17bbe:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   17bc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   17bc4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17bc6:	6314      	str	r4, [r2, #48]	; 0x30
}
   17bc8:	e7eb      	b.n	17ba2 <ready_thread+0x5a>
}
   17bca:	bd70      	pop	{r4, r5, r6, pc}
   17bcc:	2000a290 	.word	0x2000a290
   17bd0:	000218fb 	.word	0x000218fb
   17bd4:	0001ecfc 	.word	0x0001ecfc
   17bd8:	2000ae1c 	.word	0x2000ae1c

00017bdc <z_ready_thread>:
{
   17bdc:	b538      	push	{r3, r4, r5, lr}
   17bde:	4604      	mov	r4, r0
	__asm__ volatile(
   17be0:	f04f 0320 	mov.w	r3, #32
   17be4:	f3ef 8511 	mrs	r5, BASEPRI
   17be8:	f383 8811 	msr	BASEPRI, r3
   17bec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17bf0:	4812      	ldr	r0, [pc, #72]	; (17c3c <z_ready_thread+0x60>)
   17bf2:	f000 ffa1 	bl	18b38 <z_spin_lock_valid>
   17bf6:	b940      	cbnz	r0, 17c0a <z_ready_thread+0x2e>
   17bf8:	4911      	ldr	r1, [pc, #68]	; (17c40 <z_ready_thread+0x64>)
   17bfa:	4812      	ldr	r0, [pc, #72]	; (17c44 <z_ready_thread+0x68>)
   17bfc:	227c      	movs	r2, #124	; 0x7c
   17bfe:	f001 ff84 	bl	19b0a <printk>
   17c02:	217c      	movs	r1, #124	; 0x7c
   17c04:	480e      	ldr	r0, [pc, #56]	; (17c40 <z_ready_thread+0x64>)
   17c06:	f002 fa26 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   17c0a:	480c      	ldr	r0, [pc, #48]	; (17c3c <z_ready_thread+0x60>)
   17c0c:	f000 ffb0 	bl	18b70 <z_spin_lock_set_owner>
		ready_thread(thread);
   17c10:	4620      	mov	r0, r4
   17c12:	f7ff ff99 	bl	17b48 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c16:	4809      	ldr	r0, [pc, #36]	; (17c3c <z_ready_thread+0x60>)
   17c18:	f000 ff9c 	bl	18b54 <z_spin_unlock_valid>
   17c1c:	b940      	cbnz	r0, 17c30 <z_ready_thread+0x54>
   17c1e:	4908      	ldr	r1, [pc, #32]	; (17c40 <z_ready_thread+0x64>)
   17c20:	4808      	ldr	r0, [pc, #32]	; (17c44 <z_ready_thread+0x68>)
   17c22:	22a7      	movs	r2, #167	; 0xa7
   17c24:	f001 ff71 	bl	19b0a <printk>
   17c28:	21a7      	movs	r1, #167	; 0xa7
   17c2a:	4805      	ldr	r0, [pc, #20]	; (17c40 <z_ready_thread+0x64>)
   17c2c:	f002 fa13 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17c30:	f385 8811 	msr	BASEPRI, r5
   17c34:	f3bf 8f6f 	isb	sy
}
   17c38:	bd38      	pop	{r3, r4, r5, pc}
   17c3a:	bf00      	nop
   17c3c:	2000ae54 	.word	0x2000ae54
   17c40:	0001ed36 	.word	0x0001ed36
   17c44:	0001ecfc 	.word	0x0001ecfc

00017c48 <z_sched_start>:
{
   17c48:	b538      	push	{r3, r4, r5, lr}
   17c4a:	4604      	mov	r4, r0
	__asm__ volatile(
   17c4c:	f04f 0320 	mov.w	r3, #32
   17c50:	f3ef 8511 	mrs	r5, BASEPRI
   17c54:	f383 8811 	msr	BASEPRI, r3
   17c58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c5c:	4818      	ldr	r0, [pc, #96]	; (17cc0 <z_sched_start+0x78>)
   17c5e:	f000 ff6b 	bl	18b38 <z_spin_lock_valid>
   17c62:	b940      	cbnz	r0, 17c76 <z_sched_start+0x2e>
   17c64:	4917      	ldr	r1, [pc, #92]	; (17cc4 <z_sched_start+0x7c>)
   17c66:	4818      	ldr	r0, [pc, #96]	; (17cc8 <z_sched_start+0x80>)
   17c68:	227c      	movs	r2, #124	; 0x7c
   17c6a:	f001 ff4e 	bl	19b0a <printk>
   17c6e:	217c      	movs	r1, #124	; 0x7c
   17c70:	4814      	ldr	r0, [pc, #80]	; (17cc4 <z_sched_start+0x7c>)
   17c72:	f002 f9f0 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   17c76:	4812      	ldr	r0, [pc, #72]	; (17cc0 <z_sched_start+0x78>)
   17c78:	f000 ff7a 	bl	18b70 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   17c7c:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   17c7e:	075a      	lsls	r2, r3, #29
   17c80:	d411      	bmi.n	17ca6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c82:	480f      	ldr	r0, [pc, #60]	; (17cc0 <z_sched_start+0x78>)
   17c84:	f000 ff66 	bl	18b54 <z_spin_unlock_valid>
   17c88:	b940      	cbnz	r0, 17c9c <z_sched_start+0x54>
   17c8a:	490e      	ldr	r1, [pc, #56]	; (17cc4 <z_sched_start+0x7c>)
   17c8c:	480e      	ldr	r0, [pc, #56]	; (17cc8 <z_sched_start+0x80>)
   17c8e:	22a7      	movs	r2, #167	; 0xa7
   17c90:	f001 ff3b 	bl	19b0a <printk>
   17c94:	21a7      	movs	r1, #167	; 0xa7
   17c96:	480b      	ldr	r0, [pc, #44]	; (17cc4 <z_sched_start+0x7c>)
   17c98:	f002 f9dd 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17c9c:	f385 8811 	msr	BASEPRI, r5
   17ca0:	f3bf 8f6f 	isb	sy
}
   17ca4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17ca6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   17caa:	4620      	mov	r0, r4
   17cac:	7363      	strb	r3, [r4, #13]
   17cae:	f7ff ff4b 	bl	17b48 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   17cb2:	4629      	mov	r1, r5
}
   17cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   17cb8:	4801      	ldr	r0, [pc, #4]	; (17cc0 <z_sched_start+0x78>)
   17cba:	f7ff bdbb 	b.w	17834 <z_reschedule>
   17cbe:	bf00      	nop
   17cc0:	2000ae54 	.word	0x2000ae54
   17cc4:	0001ed36 	.word	0x0001ed36
   17cc8:	0001ecfc 	.word	0x0001ecfc

00017ccc <z_thread_timeout>:
{
   17ccc:	b570      	push	{r4, r5, r6, lr}
   17cce:	4604      	mov	r4, r0
	__asm__ volatile(
   17cd0:	f04f 0320 	mov.w	r3, #32
   17cd4:	f3ef 8611 	mrs	r6, BASEPRI
   17cd8:	f383 8811 	msr	BASEPRI, r3
   17cdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ce0:	4819      	ldr	r0, [pc, #100]	; (17d48 <z_thread_timeout+0x7c>)
   17ce2:	f000 ff29 	bl	18b38 <z_spin_lock_valid>
   17ce6:	b940      	cbnz	r0, 17cfa <z_thread_timeout+0x2e>
   17ce8:	4918      	ldr	r1, [pc, #96]	; (17d4c <z_thread_timeout+0x80>)
   17cea:	4819      	ldr	r0, [pc, #100]	; (17d50 <z_thread_timeout+0x84>)
   17cec:	227c      	movs	r2, #124	; 0x7c
   17cee:	f001 ff0c 	bl	19b0a <printk>
   17cf2:	217c      	movs	r1, #124	; 0x7c
   17cf4:	4815      	ldr	r0, [pc, #84]	; (17d4c <z_thread_timeout+0x80>)
   17cf6:	f002 f9ae 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   17cfa:	4813      	ldr	r0, [pc, #76]	; (17d48 <z_thread_timeout+0x7c>)
   17cfc:	f000 ff38 	bl	18b70 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   17d00:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   17d04:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   17d08:	b113      	cbz	r3, 17d10 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   17d0a:	4628      	mov	r0, r5
   17d0c:	f005 faae 	bl	1d26c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   17d10:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   17d14:	4628      	mov	r0, r5
   17d16:	f023 0314 	bic.w	r3, r3, #20
   17d1a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   17d1e:	f7ff ff13 	bl	17b48 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d22:	4809      	ldr	r0, [pc, #36]	; (17d48 <z_thread_timeout+0x7c>)
   17d24:	f000 ff16 	bl	18b54 <z_spin_unlock_valid>
   17d28:	b940      	cbnz	r0, 17d3c <z_thread_timeout+0x70>
   17d2a:	4908      	ldr	r1, [pc, #32]	; (17d4c <z_thread_timeout+0x80>)
   17d2c:	4808      	ldr	r0, [pc, #32]	; (17d50 <z_thread_timeout+0x84>)
   17d2e:	22a7      	movs	r2, #167	; 0xa7
   17d30:	f001 feeb 	bl	19b0a <printk>
   17d34:	21a7      	movs	r1, #167	; 0xa7
   17d36:	4805      	ldr	r0, [pc, #20]	; (17d4c <z_thread_timeout+0x80>)
   17d38:	f002 f98d 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17d3c:	f386 8811 	msr	BASEPRI, r6
   17d40:	f3bf 8f6f 	isb	sy
}
   17d44:	bd70      	pop	{r4, r5, r6, pc}
   17d46:	bf00      	nop
   17d48:	2000ae54 	.word	0x2000ae54
   17d4c:	0001ed36 	.word	0x0001ed36
   17d50:	0001ecfc 	.word	0x0001ecfc

00017d54 <move_thread_to_end_of_prio_q>:
{
   17d54:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   17d56:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   17d5a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17d5c:	2b00      	cmp	r3, #0
   17d5e:	da03      	bge.n	17d68 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17d60:	4601      	mov	r1, r0
   17d62:	481d      	ldr	r0, [pc, #116]	; (17dd8 <move_thread_to_end_of_prio_q+0x84>)
   17d64:	f7ff fdf4 	bl	17950 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17d68:	4b1c      	ldr	r3, [pc, #112]	; (17ddc <move_thread_to_end_of_prio_q+0x88>)
   17d6a:	429c      	cmp	r4, r3
   17d6c:	d10a      	bne.n	17d84 <move_thread_to_end_of_prio_q+0x30>
   17d6e:	491c      	ldr	r1, [pc, #112]	; (17de0 <move_thread_to_end_of_prio_q+0x8c>)
   17d70:	481c      	ldr	r0, [pc, #112]	; (17de4 <move_thread_to_end_of_prio_q+0x90>)
   17d72:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   17d76:	f001 fec8 	bl	19b0a <printk>
   17d7a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   17d7e:	4818      	ldr	r0, [pc, #96]	; (17de0 <move_thread_to_end_of_prio_q+0x8c>)
   17d80:	f002 f969 	bl	1a056 <assert_post_action>
	return list->head == list;
   17d84:	4a18      	ldr	r2, [pc, #96]	; (17de8 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d86:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   17d8a:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d8e:	4283      	cmp	r3, r0
   17d90:	d01c      	beq.n	17dcc <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17d92:	b1db      	cbz	r3, 17dcc <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   17d94:	f994 500e 	ldrsb.w	r5, [r4, #14]
   17d98:	f993 600e 	ldrsb.w	r6, [r3, #14]
   17d9c:	42ae      	cmp	r6, r5
   17d9e:	dd10      	ble.n	17dc2 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   17da0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17da2:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   17da6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   17da8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   17daa:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   17dac:	6890      	ldr	r0, [r2, #8]
   17dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17db2:	7363      	strb	r3, [r4, #13]
   17db4:	1b03      	subs	r3, r0, r4
   17db6:	4258      	negs	r0, r3
   17db8:	4158      	adcs	r0, r3
}
   17dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   17dbe:	f7ff be2d 	b.w	17a1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17dc2:	428b      	cmp	r3, r1
   17dc4:	d002      	beq.n	17dcc <move_thread_to_end_of_prio_q+0x78>
   17dc6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17dc8:	2b00      	cmp	r3, #0
   17dca:	d1e5      	bne.n	17d98 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   17dcc:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   17dd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   17dd2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17dd4:	6314      	str	r4, [r2, #48]	; 0x30
}
   17dd6:	e7e8      	b.n	17daa <move_thread_to_end_of_prio_q+0x56>
   17dd8:	2000ae48 	.word	0x2000ae48
   17ddc:	2000a290 	.word	0x2000a290
   17de0:	000218fb 	.word	0x000218fb
   17de4:	0001ecfc 	.word	0x0001ecfc
   17de8:	2000ae1c 	.word	0x2000ae1c

00017dec <z_time_slice>:
{
   17dec:	b538      	push	{r3, r4, r5, lr}
   17dee:	4604      	mov	r4, r0
	__asm__ volatile(
   17df0:	f04f 0320 	mov.w	r3, #32
   17df4:	f3ef 8511 	mrs	r5, BASEPRI
   17df8:	f383 8811 	msr	BASEPRI, r3
   17dfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e00:	4824      	ldr	r0, [pc, #144]	; (17e94 <z_time_slice+0xa8>)
   17e02:	f000 fe99 	bl	18b38 <z_spin_lock_valid>
   17e06:	b940      	cbnz	r0, 17e1a <z_time_slice+0x2e>
   17e08:	4923      	ldr	r1, [pc, #140]	; (17e98 <z_time_slice+0xac>)
   17e0a:	4824      	ldr	r0, [pc, #144]	; (17e9c <z_time_slice+0xb0>)
   17e0c:	227c      	movs	r2, #124	; 0x7c
   17e0e:	f001 fe7c 	bl	19b0a <printk>
   17e12:	217c      	movs	r1, #124	; 0x7c
   17e14:	4820      	ldr	r0, [pc, #128]	; (17e98 <z_time_slice+0xac>)
   17e16:	f002 f91e 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   17e1a:	481e      	ldr	r0, [pc, #120]	; (17e94 <z_time_slice+0xa8>)
   17e1c:	f000 fea8 	bl	18b70 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   17e20:	4b1f      	ldr	r3, [pc, #124]	; (17ea0 <z_time_slice+0xb4>)
   17e22:	4a20      	ldr	r2, [pc, #128]	; (17ea4 <z_time_slice+0xb8>)
   17e24:	6898      	ldr	r0, [r3, #8]
   17e26:	6811      	ldr	r1, [r2, #0]
   17e28:	4288      	cmp	r0, r1
   17e2a:	d113      	bne.n	17e54 <z_time_slice+0x68>
			z_reset_time_slice();
   17e2c:	f7ff fc9e 	bl	1776c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e30:	4818      	ldr	r0, [pc, #96]	; (17e94 <z_time_slice+0xa8>)
   17e32:	f000 fe8f 	bl	18b54 <z_spin_unlock_valid>
   17e36:	b940      	cbnz	r0, 17e4a <z_time_slice+0x5e>
   17e38:	4917      	ldr	r1, [pc, #92]	; (17e98 <z_time_slice+0xac>)
   17e3a:	4818      	ldr	r0, [pc, #96]	; (17e9c <z_time_slice+0xb0>)
   17e3c:	22a7      	movs	r2, #167	; 0xa7
   17e3e:	f001 fe64 	bl	19b0a <printk>
   17e42:	21a7      	movs	r1, #167	; 0xa7
   17e44:	4814      	ldr	r0, [pc, #80]	; (17e98 <z_time_slice+0xac>)
   17e46:	f002 f906 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17e4a:	f385 8811 	msr	BASEPRI, r5
   17e4e:	f3bf 8f6f 	isb	sy
}
   17e52:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   17e54:	2100      	movs	r1, #0
   17e56:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   17e58:	4a13      	ldr	r2, [pc, #76]	; (17ea8 <z_time_slice+0xbc>)
   17e5a:	6812      	ldr	r2, [r2, #0]
   17e5c:	b1ba      	cbz	r2, 17e8e <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   17e5e:	89c2      	ldrh	r2, [r0, #14]
   17e60:	2a7f      	cmp	r2, #127	; 0x7f
   17e62:	d814      	bhi.n	17e8e <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   17e64:	7b42      	ldrb	r2, [r0, #13]
   17e66:	06d2      	lsls	r2, r2, #27
   17e68:	d111      	bne.n	17e8e <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   17e6a:	4a10      	ldr	r2, [pc, #64]	; (17eac <z_time_slice+0xc0>)
   17e6c:	f990 100e 	ldrsb.w	r1, [r0, #14]
   17e70:	6812      	ldr	r2, [r2, #0]
   17e72:	4291      	cmp	r1, r2
   17e74:	db0b      	blt.n	17e8e <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   17e76:	4a0e      	ldr	r2, [pc, #56]	; (17eb0 <z_time_slice+0xc4>)
   17e78:	4290      	cmp	r0, r2
   17e7a:	d008      	beq.n	17e8e <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   17e7c:	695a      	ldr	r2, [r3, #20]
   17e7e:	42a2      	cmp	r2, r4
   17e80:	dc02      	bgt.n	17e88 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   17e82:	f7ff ff67 	bl	17d54 <move_thread_to_end_of_prio_q>
   17e86:	e7d1      	b.n	17e2c <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   17e88:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   17e8a:	615a      	str	r2, [r3, #20]
   17e8c:	e7d0      	b.n	17e30 <z_time_slice+0x44>
   17e8e:	2200      	movs	r2, #0
   17e90:	e7fb      	b.n	17e8a <z_time_slice+0x9e>
   17e92:	bf00      	nop
   17e94:	2000ae54 	.word	0x2000ae54
   17e98:	0001ed36 	.word	0x0001ed36
   17e9c:	0001ecfc 	.word	0x0001ecfc
   17ea0:	2000ae1c 	.word	0x2000ae1c
   17ea4:	2000ae50 	.word	0x2000ae50
   17ea8:	2000ae5c 	.word	0x2000ae5c
   17eac:	2000ae58 	.word	0x2000ae58
   17eb0:	2000a290 	.word	0x2000a290

00017eb4 <z_impl_k_thread_suspend>:
{
   17eb4:	b570      	push	{r4, r5, r6, lr}
   17eb6:	4604      	mov	r4, r0
   17eb8:	3018      	adds	r0, #24
   17eba:	f001 f881 	bl	18fc0 <z_abort_timeout>
	__asm__ volatile(
   17ebe:	f04f 0320 	mov.w	r3, #32
   17ec2:	f3ef 8611 	mrs	r6, BASEPRI
   17ec6:	f383 8811 	msr	BASEPRI, r3
   17eca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ece:	4820      	ldr	r0, [pc, #128]	; (17f50 <z_impl_k_thread_suspend+0x9c>)
   17ed0:	f000 fe32 	bl	18b38 <z_spin_lock_valid>
   17ed4:	b940      	cbnz	r0, 17ee8 <z_impl_k_thread_suspend+0x34>
   17ed6:	491f      	ldr	r1, [pc, #124]	; (17f54 <z_impl_k_thread_suspend+0xa0>)
   17ed8:	481f      	ldr	r0, [pc, #124]	; (17f58 <z_impl_k_thread_suspend+0xa4>)
   17eda:	227c      	movs	r2, #124	; 0x7c
   17edc:	f001 fe15 	bl	19b0a <printk>
   17ee0:	217c      	movs	r1, #124	; 0x7c
   17ee2:	481c      	ldr	r0, [pc, #112]	; (17f54 <z_impl_k_thread_suspend+0xa0>)
   17ee4:	f002 f8b7 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   17ee8:	4819      	ldr	r0, [pc, #100]	; (17f50 <z_impl_k_thread_suspend+0x9c>)
   17eea:	f000 fe41 	bl	18b70 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   17eee:	f994 300d 	ldrsb.w	r3, [r4, #13]
   17ef2:	2b00      	cmp	r3, #0
   17ef4:	da07      	bge.n	17f06 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   17ef6:	4621      	mov	r1, r4
   17ef8:	4818      	ldr	r0, [pc, #96]	; (17f5c <z_impl_k_thread_suspend+0xa8>)
   17efa:	f7ff fd29 	bl	17950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17efe:	7b63      	ldrb	r3, [r4, #13]
   17f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17f04:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   17f06:	4d16      	ldr	r5, [pc, #88]	; (17f60 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17f08:	7b63      	ldrb	r3, [r4, #13]
   17f0a:	68a8      	ldr	r0, [r5, #8]
   17f0c:	f043 0310 	orr.w	r3, r3, #16
   17f10:	7363      	strb	r3, [r4, #13]
   17f12:	1b03      	subs	r3, r0, r4
   17f14:	4258      	negs	r0, r3
   17f16:	4158      	adcs	r0, r3
   17f18:	f7ff fd80 	bl	17a1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f1c:	480c      	ldr	r0, [pc, #48]	; (17f50 <z_impl_k_thread_suspend+0x9c>)
   17f1e:	f000 fe19 	bl	18b54 <z_spin_unlock_valid>
   17f22:	b940      	cbnz	r0, 17f36 <z_impl_k_thread_suspend+0x82>
   17f24:	490b      	ldr	r1, [pc, #44]	; (17f54 <z_impl_k_thread_suspend+0xa0>)
   17f26:	480c      	ldr	r0, [pc, #48]	; (17f58 <z_impl_k_thread_suspend+0xa4>)
   17f28:	22a7      	movs	r2, #167	; 0xa7
   17f2a:	f001 fdee 	bl	19b0a <printk>
   17f2e:	21a7      	movs	r1, #167	; 0xa7
   17f30:	4808      	ldr	r0, [pc, #32]	; (17f54 <z_impl_k_thread_suspend+0xa0>)
   17f32:	f002 f890 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17f36:	f386 8811 	msr	BASEPRI, r6
   17f3a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17f3e:	68ab      	ldr	r3, [r5, #8]
   17f40:	42a3      	cmp	r3, r4
   17f42:	d103      	bne.n	17f4c <z_impl_k_thread_suspend+0x98>
}
   17f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17f48:	f005 b986 	b.w	1d258 <z_reschedule_unlocked>
}
   17f4c:	bd70      	pop	{r4, r5, r6, pc}
   17f4e:	bf00      	nop
   17f50:	2000ae54 	.word	0x2000ae54
   17f54:	0001ed36 	.word	0x0001ed36
   17f58:	0001ecfc 	.word	0x0001ecfc
   17f5c:	2000ae48 	.word	0x2000ae48
   17f60:	2000ae1c 	.word	0x2000ae1c

00017f64 <z_thread_single_abort>:
{
   17f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   17f68:	7b03      	ldrb	r3, [r0, #12]
{
   17f6a:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   17f6c:	07dd      	lsls	r5, r3, #31
   17f6e:	d50a      	bpl.n	17f86 <z_thread_single_abort+0x22>
   17f70:	4976      	ldr	r1, [pc, #472]	; (1814c <z_thread_single_abort+0x1e8>)
   17f72:	4877      	ldr	r0, [pc, #476]	; (18150 <z_thread_single_abort+0x1ec>)
   17f74:	f240 220d 	movw	r2, #525	; 0x20d
   17f78:	f001 fdc7 	bl	19b0a <printk>
   17f7c:	f240 210d 	movw	r1, #525	; 0x20d
   17f80:	4872      	ldr	r0, [pc, #456]	; (1814c <z_thread_single_abort+0x1e8>)
   17f82:	f002 f868 	bl	1a056 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   17f86:	4e73      	ldr	r6, [pc, #460]	; (18154 <z_thread_single_abort+0x1f0>)
   17f88:	68b3      	ldr	r3, [r6, #8]
   17f8a:	42a3      	cmp	r3, r4
   17f8c:	d10d      	bne.n	17faa <z_thread_single_abort+0x46>
   17f8e:	f3ef 8305 	mrs	r3, IPSR
   17f92:	b953      	cbnz	r3, 17faa <z_thread_single_abort+0x46>
   17f94:	496d      	ldr	r1, [pc, #436]	; (1814c <z_thread_single_abort+0x1e8>)
   17f96:	486e      	ldr	r0, [pc, #440]	; (18150 <z_thread_single_abort+0x1ec>)
   17f98:	f240 220f 	movw	r2, #527	; 0x20f
   17f9c:	f001 fdb5 	bl	19b0a <printk>
   17fa0:	f240 210f 	movw	r1, #527	; 0x20f
   17fa4:	4869      	ldr	r0, [pc, #420]	; (1814c <z_thread_single_abort+0x1e8>)
   17fa6:	f002 f856 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17faa:	f04f 0320 	mov.w	r3, #32
   17fae:	f3ef 8511 	mrs	r5, BASEPRI
   17fb2:	f383 8811 	msr	BASEPRI, r3
   17fb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17fba:	4867      	ldr	r0, [pc, #412]	; (18158 <z_thread_single_abort+0x1f4>)
   17fbc:	f000 fdbc 	bl	18b38 <z_spin_lock_valid>
   17fc0:	b940      	cbnz	r0, 17fd4 <z_thread_single_abort+0x70>
   17fc2:	4966      	ldr	r1, [pc, #408]	; (1815c <z_thread_single_abort+0x1f8>)
   17fc4:	4862      	ldr	r0, [pc, #392]	; (18150 <z_thread_single_abort+0x1ec>)
   17fc6:	227c      	movs	r2, #124	; 0x7c
   17fc8:	f001 fd9f 	bl	19b0a <printk>
   17fcc:	217c      	movs	r1, #124	; 0x7c
   17fce:	4863      	ldr	r0, [pc, #396]	; (1815c <z_thread_single_abort+0x1f8>)
   17fd0:	f002 f841 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   17fd4:	4860      	ldr	r0, [pc, #384]	; (18158 <z_thread_single_abort+0x1f4>)
   17fd6:	f000 fdcb 	bl	18b70 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   17fda:	7b63      	ldrb	r3, [r4, #13]
   17fdc:	f013 0f28 	tst.w	r3, #40	; 0x28
   17fe0:	d012      	beq.n	18008 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17fe2:	485d      	ldr	r0, [pc, #372]	; (18158 <z_thread_single_abort+0x1f4>)
   17fe4:	f000 fdb6 	bl	18b54 <z_spin_unlock_valid>
   17fe8:	b940      	cbnz	r0, 17ffc <z_thread_single_abort+0x98>
   17fea:	495c      	ldr	r1, [pc, #368]	; (1815c <z_thread_single_abort+0x1f8>)
   17fec:	4858      	ldr	r0, [pc, #352]	; (18150 <z_thread_single_abort+0x1ec>)
   17fee:	22a7      	movs	r2, #167	; 0xa7
   17ff0:	f001 fd8b 	bl	19b0a <printk>
   17ff4:	21a7      	movs	r1, #167	; 0xa7
   17ff6:	4859      	ldr	r0, [pc, #356]	; (1815c <z_thread_single_abort+0x1f8>)
   17ff8:	f002 f82d 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   17ffc:	f385 8811 	msr	BASEPRI, r5
   18000:	f3bf 8f6f 	isb	sy
}
   18004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   18008:	f043 0320 	orr.w	r3, r3, #32
   1800c:	4852      	ldr	r0, [pc, #328]	; (18158 <z_thread_single_abort+0x1f4>)
   1800e:	7363      	strb	r3, [r4, #13]
   18010:	f000 fda0 	bl	18b54 <z_spin_unlock_valid>
   18014:	b940      	cbnz	r0, 18028 <z_thread_single_abort+0xc4>
   18016:	4951      	ldr	r1, [pc, #324]	; (1815c <z_thread_single_abort+0x1f8>)
   18018:	484d      	ldr	r0, [pc, #308]	; (18150 <z_thread_single_abort+0x1ec>)
   1801a:	22a7      	movs	r2, #167	; 0xa7
   1801c:	f001 fd75 	bl	19b0a <printk>
   18020:	21a7      	movs	r1, #167	; 0xa7
   18022:	484e      	ldr	r0, [pc, #312]	; (1815c <z_thread_single_abort+0x1f8>)
   18024:	f002 f817 	bl	1a056 <assert_post_action>
   18028:	f385 8811 	msr	BASEPRI, r5
   1802c:	f3bf 8f6f 	isb	sy
   18030:	f104 0018 	add.w	r0, r4, #24
   18034:	f000 ffc4 	bl	18fc0 <z_abort_timeout>
	__asm__ volatile(
   18038:	f04f 0320 	mov.w	r3, #32
   1803c:	f3ef 8711 	mrs	r7, BASEPRI
   18040:	f383 8811 	msr	BASEPRI, r3
   18044:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18048:	4843      	ldr	r0, [pc, #268]	; (18158 <z_thread_single_abort+0x1f4>)
   1804a:	f000 fd75 	bl	18b38 <z_spin_lock_valid>
   1804e:	b940      	cbnz	r0, 18062 <z_thread_single_abort+0xfe>
   18050:	4942      	ldr	r1, [pc, #264]	; (1815c <z_thread_single_abort+0x1f8>)
   18052:	483f      	ldr	r0, [pc, #252]	; (18150 <z_thread_single_abort+0x1ec>)
   18054:	227c      	movs	r2, #124	; 0x7c
   18056:	f001 fd58 	bl	19b0a <printk>
   1805a:	217c      	movs	r1, #124	; 0x7c
   1805c:	483f      	ldr	r0, [pc, #252]	; (1815c <z_thread_single_abort+0x1f8>)
   1805e:	f001 fffa 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   18062:	483d      	ldr	r0, [pc, #244]	; (18158 <z_thread_single_abort+0x1f4>)
   18064:	f000 fd84 	bl	18b70 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   18068:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1806a:	06d8      	lsls	r0, r3, #27
   1806c:	d116      	bne.n	1809c <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   1806e:	69a2      	ldr	r2, [r4, #24]
   18070:	b9a2      	cbnz	r2, 1809c <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   18072:	0619      	lsls	r1, r3, #24
   18074:	d507      	bpl.n	18086 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   18076:	4621      	mov	r1, r4
   18078:	4839      	ldr	r0, [pc, #228]	; (18160 <z_thread_single_abort+0x1fc>)
   1807a:	f7ff fc69 	bl	17950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1807e:	7b63      	ldrb	r3, [r4, #13]
   18080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18084:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   18086:	68b0      	ldr	r0, [r6, #8]
   18088:	1b02      	subs	r2, r0, r4
   1808a:	4250      	negs	r0, r2
   1808c:	4150      	adcs	r0, r2
   1808e:	f7ff fcc5 	bl	17a1c <update_cache>
			waiter->base.pended_on = NULL;
   18092:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18096:	f104 0930 	add.w	r9, r4, #48	; 0x30
   1809a:	e023      	b.n	180e4 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   1809c:	079b      	lsls	r3, r3, #30
   1809e:	d5f8      	bpl.n	18092 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   180a0:	4620      	mov	r0, r4
   180a2:	f7ff fb4d 	bl	17740 <pended_on>
   180a6:	4621      	mov	r1, r4
   180a8:	f7ff fc52 	bl	17950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   180ac:	7b63      	ldrb	r3, [r4, #13]
   180ae:	f023 0302 	bic.w	r3, r3, #2
   180b2:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   180b4:	2300      	movs	r3, #0
   180b6:	60a3      	str	r3, [r4, #8]
   180b8:	e7eb      	b.n	18092 <z_thread_single_abort+0x12e>
   180ba:	f105 0018 	add.w	r0, r5, #24
   180be:	f000 ff7f 	bl	18fc0 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   180c2:	4628      	mov	r0, r5
   180c4:	f7ff fb3c 	bl	17740 <pended_on>
   180c8:	4629      	mov	r1, r5
   180ca:	f7ff fc41 	bl	17950 <z_priq_dumb_remove>
   180ce:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   180d0:	4628      	mov	r0, r5
   180d2:	f023 0302 	bic.w	r3, r3, #2
   180d6:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   180d8:	f8c5 8008 	str.w	r8, [r5, #8]
   180dc:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   180e0:	f7ff fd32 	bl	17b48 <ready_thread>
	return list->head == list;
   180e4:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   180e6:	454d      	cmp	r5, r9
   180e8:	d001      	beq.n	180ee <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   180ea:	2d00      	cmp	r5, #0
   180ec:	d1e5      	bne.n	180ba <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   180ee:	68b2      	ldr	r2, [r6, #8]
   180f0:	4b1c      	ldr	r3, [pc, #112]	; (18164 <z_thread_single_abort+0x200>)
   180f2:	429a      	cmp	r2, r3
   180f4:	d102      	bne.n	180fc <z_thread_single_abort+0x198>
			update_cache(1);
   180f6:	2001      	movs	r0, #1
   180f8:	f7ff fc90 	bl	17a1c <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   180fc:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   180fe:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   18100:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   18102:	f043 0308 	orr.w	r3, r3, #8
   18106:	7363      	strb	r3, [r4, #13]
   18108:	f104 0338 	add.w	r3, r4, #56	; 0x38
   1810c:	e8d3 1fef 	ldaex	r1, [r3]
   18110:	e8c3 2fe0 	stlex	r0, r2, [r3]
   18114:	2800      	cmp	r0, #0
   18116:	d1f9      	bne.n	1810c <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18118:	480f      	ldr	r0, [pc, #60]	; (18158 <z_thread_single_abort+0x1f4>)
   1811a:	f000 fd1b 	bl	18b54 <z_spin_unlock_valid>
   1811e:	b940      	cbnz	r0, 18132 <z_thread_single_abort+0x1ce>
   18120:	490e      	ldr	r1, [pc, #56]	; (1815c <z_thread_single_abort+0x1f8>)
   18122:	480b      	ldr	r0, [pc, #44]	; (18150 <z_thread_single_abort+0x1ec>)
   18124:	22a7      	movs	r2, #167	; 0xa7
   18126:	f001 fcf0 	bl	19b0a <printk>
   1812a:	21a7      	movs	r1, #167	; 0xa7
   1812c:	480b      	ldr	r0, [pc, #44]	; (1815c <z_thread_single_abort+0x1f8>)
   1812e:	f001 ff92 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   18132:	f387 8811 	msr	BASEPRI, r7
   18136:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1813a:	2d00      	cmp	r5, #0
   1813c:	f43f af62 	beq.w	18004 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   18140:	4620      	mov	r0, r4
   18142:	462b      	mov	r3, r5
}
   18144:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   18148:	4718      	bx	r3
   1814a:	bf00      	nop
   1814c:	000218fb 	.word	0x000218fb
   18150:	0001ecfc 	.word	0x0001ecfc
   18154:	2000ae1c 	.word	0x2000ae1c
   18158:	2000ae54 	.word	0x2000ae54
   1815c:	0001ed36 	.word	0x0001ed36
   18160:	2000ae48 	.word	0x2000ae48
   18164:	2000a290 	.word	0x2000a290

00018168 <unready_thread>:
{
   18168:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1816a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1816e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18170:	2b00      	cmp	r3, #0
   18172:	da07      	bge.n	18184 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18174:	4601      	mov	r1, r0
   18176:	4808      	ldr	r0, [pc, #32]	; (18198 <unready_thread+0x30>)
   18178:	f7ff fbea 	bl	17950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1817c:	7b63      	ldrb	r3, [r4, #13]
   1817e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18182:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   18184:	4b05      	ldr	r3, [pc, #20]	; (1819c <unready_thread+0x34>)
   18186:	6898      	ldr	r0, [r3, #8]
   18188:	1b03      	subs	r3, r0, r4
   1818a:	4258      	negs	r0, r3
   1818c:	4158      	adcs	r0, r3
}
   1818e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   18192:	f7ff bc43 	b.w	17a1c <update_cache>
   18196:	bf00      	nop
   18198:	2000ae48 	.word	0x2000ae48
   1819c:	2000ae1c 	.word	0x2000ae1c

000181a0 <add_to_waitq_locked>:
{
   181a0:	b538      	push	{r3, r4, r5, lr}
   181a2:	4604      	mov	r4, r0
   181a4:	460d      	mov	r5, r1
	unready_thread(thread);
   181a6:	f7ff ffdf 	bl	18168 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   181aa:	7b63      	ldrb	r3, [r4, #13]
   181ac:	f043 0302 	orr.w	r3, r3, #2
   181b0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   181b2:	b1ed      	cbz	r5, 181f0 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   181b4:	4b15      	ldr	r3, [pc, #84]	; (1820c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   181b6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   181b8:	429c      	cmp	r4, r3
   181ba:	d10a      	bne.n	181d2 <add_to_waitq_locked+0x32>
   181bc:	4914      	ldr	r1, [pc, #80]	; (18210 <add_to_waitq_locked+0x70>)
   181be:	4815      	ldr	r0, [pc, #84]	; (18214 <add_to_waitq_locked+0x74>)
   181c0:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   181c4:	f001 fca1 	bl	19b0a <printk>
   181c8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   181cc:	4810      	ldr	r0, [pc, #64]	; (18210 <add_to_waitq_locked+0x70>)
   181ce:	f001 ff42 	bl	1a056 <assert_post_action>
	return list->head == list;
   181d2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   181d4:	429d      	cmp	r5, r3
   181d6:	d012      	beq.n	181fe <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   181d8:	b18b      	cbz	r3, 181fe <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   181da:	f994 200e 	ldrsb.w	r2, [r4, #14]
   181de:	f993 100e 	ldrsb.w	r1, [r3, #14]
   181e2:	4291      	cmp	r1, r2
   181e4:	dd05      	ble.n	181f2 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   181e6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   181e8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   181ec:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   181ee:	605c      	str	r4, [r3, #4]
}
   181f0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   181f2:	6869      	ldr	r1, [r5, #4]
   181f4:	428b      	cmp	r3, r1
   181f6:	d002      	beq.n	181fe <add_to_waitq_locked+0x5e>
   181f8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   181fa:	2b00      	cmp	r3, #0
   181fc:	d1ef      	bne.n	181de <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   181fe:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18200:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18202:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18204:	686b      	ldr	r3, [r5, #4]
   18206:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18208:	606c      	str	r4, [r5, #4]
}
   1820a:	e7f1      	b.n	181f0 <add_to_waitq_locked+0x50>
   1820c:	2000a290 	.word	0x2000a290
   18210:	000218fb 	.word	0x000218fb
   18214:	0001ecfc 	.word	0x0001ecfc

00018218 <pend>:
{
   18218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1821c:	4604      	mov	r4, r0
   1821e:	4688      	mov	r8, r1
   18220:	4616      	mov	r6, r2
   18222:	461d      	mov	r5, r3
	__asm__ volatile(
   18224:	f04f 0320 	mov.w	r3, #32
   18228:	f3ef 8711 	mrs	r7, BASEPRI
   1822c:	f383 8811 	msr	BASEPRI, r3
   18230:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18234:	481a      	ldr	r0, [pc, #104]	; (182a0 <pend+0x88>)
   18236:	f000 fc7f 	bl	18b38 <z_spin_lock_valid>
   1823a:	b940      	cbnz	r0, 1824e <pend+0x36>
   1823c:	4919      	ldr	r1, [pc, #100]	; (182a4 <pend+0x8c>)
   1823e:	481a      	ldr	r0, [pc, #104]	; (182a8 <pend+0x90>)
   18240:	227c      	movs	r2, #124	; 0x7c
   18242:	f001 fc62 	bl	19b0a <printk>
   18246:	217c      	movs	r1, #124	; 0x7c
   18248:	4816      	ldr	r0, [pc, #88]	; (182a4 <pend+0x8c>)
   1824a:	f001 ff04 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1824e:	4814      	ldr	r0, [pc, #80]	; (182a0 <pend+0x88>)
   18250:	f000 fc8e 	bl	18b70 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   18254:	4620      	mov	r0, r4
   18256:	4641      	mov	r1, r8
   18258:	f7ff ffa2 	bl	181a0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1825c:	4810      	ldr	r0, [pc, #64]	; (182a0 <pend+0x88>)
   1825e:	f000 fc79 	bl	18b54 <z_spin_unlock_valid>
   18262:	b940      	cbnz	r0, 18276 <pend+0x5e>
   18264:	490f      	ldr	r1, [pc, #60]	; (182a4 <pend+0x8c>)
   18266:	4810      	ldr	r0, [pc, #64]	; (182a8 <pend+0x90>)
   18268:	22a7      	movs	r2, #167	; 0xa7
   1826a:	f001 fc4e 	bl	19b0a <printk>
   1826e:	21a7      	movs	r1, #167	; 0xa7
   18270:	480c      	ldr	r0, [pc, #48]	; (182a4 <pend+0x8c>)
   18272:	f001 fef0 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   18276:	f387 8811 	msr	BASEPRI, r7
   1827a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1827e:	f1b5 3fff 	cmp.w	r5, #4294967295
   18282:	bf08      	it	eq
   18284:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18288:	d008      	beq.n	1829c <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1828a:	4632      	mov	r2, r6
   1828c:	462b      	mov	r3, r5
   1828e:	f104 0018 	add.w	r0, r4, #24
   18292:	4906      	ldr	r1, [pc, #24]	; (182ac <pend+0x94>)
}
   18294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18298:	f000 bde2 	b.w	18e60 <z_add_timeout>
   1829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   182a0:	2000ae54 	.word	0x2000ae54
   182a4:	0001ed36 	.word	0x0001ed36
   182a8:	0001ecfc 	.word	0x0001ecfc
   182ac:	00017ccd 	.word	0x00017ccd

000182b0 <z_pend_curr>:
{
   182b0:	b538      	push	{r3, r4, r5, lr}
   182b2:	4605      	mov	r5, r0
	pending_current = _current;
   182b4:	4b0d      	ldr	r3, [pc, #52]	; (182ec <z_pend_curr+0x3c>)
{
   182b6:	460c      	mov	r4, r1
	pending_current = _current;
   182b8:	6898      	ldr	r0, [r3, #8]
   182ba:	4b0d      	ldr	r3, [pc, #52]	; (182f0 <z_pend_curr+0x40>)
{
   182bc:	4611      	mov	r1, r2
	pending_current = _current;
   182be:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   182c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   182c4:	f7ff ffa8 	bl	18218 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182c8:	4628      	mov	r0, r5
   182ca:	f000 fc43 	bl	18b54 <z_spin_unlock_valid>
   182ce:	b940      	cbnz	r0, 182e2 <z_pend_curr+0x32>
   182d0:	4908      	ldr	r1, [pc, #32]	; (182f4 <z_pend_curr+0x44>)
   182d2:	4809      	ldr	r0, [pc, #36]	; (182f8 <z_pend_curr+0x48>)
   182d4:	22be      	movs	r2, #190	; 0xbe
   182d6:	f001 fc18 	bl	19b0a <printk>
   182da:	21be      	movs	r1, #190	; 0xbe
   182dc:	4805      	ldr	r0, [pc, #20]	; (182f4 <z_pend_curr+0x44>)
   182de:	f001 feba 	bl	1a056 <assert_post_action>
   182e2:	4620      	mov	r0, r4
}
   182e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   182e8:	f7f4 bd80 	b.w	cdec <arch_swap>
   182ec:	2000ae1c 	.word	0x2000ae1c
   182f0:	2000ae50 	.word	0x2000ae50
   182f4:	0001ed36 	.word	0x0001ed36
   182f8:	0001ecfc 	.word	0x0001ecfc

000182fc <z_set_prio>:
{
   182fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   182fe:	4604      	mov	r4, r0
   18300:	460d      	mov	r5, r1
	__asm__ volatile(
   18302:	f04f 0320 	mov.w	r3, #32
   18306:	f3ef 8611 	mrs	r6, BASEPRI
   1830a:	f383 8811 	msr	BASEPRI, r3
   1830e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18312:	4831      	ldr	r0, [pc, #196]	; (183d8 <z_set_prio+0xdc>)
   18314:	f000 fc10 	bl	18b38 <z_spin_lock_valid>
   18318:	b940      	cbnz	r0, 1832c <z_set_prio+0x30>
   1831a:	4930      	ldr	r1, [pc, #192]	; (183dc <z_set_prio+0xe0>)
   1831c:	4830      	ldr	r0, [pc, #192]	; (183e0 <z_set_prio+0xe4>)
   1831e:	227c      	movs	r2, #124	; 0x7c
   18320:	f001 fbf3 	bl	19b0a <printk>
   18324:	217c      	movs	r1, #124	; 0x7c
   18326:	482d      	ldr	r0, [pc, #180]	; (183dc <z_set_prio+0xe0>)
   18328:	f001 fe95 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1832c:	482a      	ldr	r0, [pc, #168]	; (183d8 <z_set_prio+0xdc>)
   1832e:	f000 fc1f 	bl	18b70 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18332:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   18334:	b26d      	sxtb	r5, r5
   18336:	06db      	lsls	r3, r3, #27
   18338:	d14a      	bne.n	183d0 <z_set_prio+0xd4>
		if (need_sched) {
   1833a:	69a3      	ldr	r3, [r4, #24]
   1833c:	2b00      	cmp	r3, #0
   1833e:	d147      	bne.n	183d0 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   18340:	4621      	mov	r1, r4
   18342:	4828      	ldr	r0, [pc, #160]	; (183e4 <z_set_prio+0xe8>)
   18344:	f7ff fb04 	bl	17950 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18348:	4b27      	ldr	r3, [pc, #156]	; (183e8 <z_set_prio+0xec>)
				thread->base.prio = prio;
   1834a:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1834c:	429c      	cmp	r4, r3
   1834e:	d10a      	bne.n	18366 <z_set_prio+0x6a>
   18350:	4926      	ldr	r1, [pc, #152]	; (183ec <z_set_prio+0xf0>)
   18352:	4823      	ldr	r0, [pc, #140]	; (183e0 <z_set_prio+0xe4>)
   18354:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18358:	f001 fbd7 	bl	19b0a <printk>
   1835c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18360:	4822      	ldr	r0, [pc, #136]	; (183ec <z_set_prio+0xf0>)
   18362:	f001 fe78 	bl	1a056 <assert_post_action>
	return list->head == list;
   18366:	4a22      	ldr	r2, [pc, #136]	; (183f0 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18368:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1836c:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18370:	4283      	cmp	r3, r0
   18372:	d027      	beq.n	183c4 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18374:	b333      	cbz	r3, 183c4 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   18376:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1837a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1837e:	42af      	cmp	r7, r5
   18380:	dd1b      	ble.n	183ba <z_set_prio+0xbe>
	node->prev = successor->prev;
   18382:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18384:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18388:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1838a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1838c:	2001      	movs	r0, #1
   1838e:	f7ff fb45 	bl	17a1c <update_cache>
   18392:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18394:	4810      	ldr	r0, [pc, #64]	; (183d8 <z_set_prio+0xdc>)
   18396:	f000 fbdd 	bl	18b54 <z_spin_unlock_valid>
   1839a:	b940      	cbnz	r0, 183ae <z_set_prio+0xb2>
   1839c:	490f      	ldr	r1, [pc, #60]	; (183dc <z_set_prio+0xe0>)
   1839e:	4810      	ldr	r0, [pc, #64]	; (183e0 <z_set_prio+0xe4>)
   183a0:	22a7      	movs	r2, #167	; 0xa7
   183a2:	f001 fbb2 	bl	19b0a <printk>
   183a6:	21a7      	movs	r1, #167	; 0xa7
   183a8:	480c      	ldr	r0, [pc, #48]	; (183dc <z_set_prio+0xe0>)
   183aa:	f001 fe54 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   183ae:	f386 8811 	msr	BASEPRI, r6
   183b2:	f3bf 8f6f 	isb	sy
}
   183b6:	4620      	mov	r0, r4
   183b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   183ba:	4299      	cmp	r1, r3
   183bc:	d002      	beq.n	183c4 <z_set_prio+0xc8>
   183be:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   183c0:	2b00      	cmp	r3, #0
   183c2:	d1da      	bne.n	1837a <z_set_prio+0x7e>
	node->prev = list->tail;
   183c4:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   183c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   183ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
   183cc:	6314      	str	r4, [r2, #48]	; 0x30
}
   183ce:	e7dd      	b.n	1838c <z_set_prio+0x90>
			thread->base.prio = prio;
   183d0:	73a5      	strb	r5, [r4, #14]
   183d2:	2400      	movs	r4, #0
   183d4:	e7de      	b.n	18394 <z_set_prio+0x98>
   183d6:	bf00      	nop
   183d8:	2000ae54 	.word	0x2000ae54
   183dc:	0001ed36 	.word	0x0001ed36
   183e0:	0001ecfc 	.word	0x0001ecfc
   183e4:	2000ae48 	.word	0x2000ae48
   183e8:	2000a290 	.word	0x2000a290
   183ec:	000218fb 	.word	0x000218fb
   183f0:	2000ae1c 	.word	0x2000ae1c

000183f4 <z_unpend_first_thread>:
{
   183f4:	b538      	push	{r3, r4, r5, lr}
   183f6:	4604      	mov	r4, r0
	__asm__ volatile(
   183f8:	f04f 0320 	mov.w	r3, #32
   183fc:	f3ef 8511 	mrs	r5, BASEPRI
   18400:	f383 8811 	msr	BASEPRI, r3
   18404:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18408:	482b      	ldr	r0, [pc, #172]	; (184b8 <z_unpend_first_thread+0xc4>)
   1840a:	f000 fb95 	bl	18b38 <z_spin_lock_valid>
   1840e:	b940      	cbnz	r0, 18422 <z_unpend_first_thread+0x2e>
   18410:	492a      	ldr	r1, [pc, #168]	; (184bc <z_unpend_first_thread+0xc8>)
   18412:	482b      	ldr	r0, [pc, #172]	; (184c0 <z_unpend_first_thread+0xcc>)
   18414:	227c      	movs	r2, #124	; 0x7c
   18416:	f001 fb78 	bl	19b0a <printk>
   1841a:	217c      	movs	r1, #124	; 0x7c
   1841c:	4827      	ldr	r0, [pc, #156]	; (184bc <z_unpend_first_thread+0xc8>)
   1841e:	f001 fe1a 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   18422:	4825      	ldr	r0, [pc, #148]	; (184b8 <z_unpend_first_thread+0xc4>)
   18424:	f000 fba4 	bl	18b70 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   18428:	4620      	mov	r0, r4
   1842a:	f004 ff2d 	bl	1d288 <z_priq_dumb_best>
   1842e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18430:	4821      	ldr	r0, [pc, #132]	; (184b8 <z_unpend_first_thread+0xc4>)
   18432:	f000 fb8f 	bl	18b54 <z_spin_unlock_valid>
   18436:	b940      	cbnz	r0, 1844a <z_unpend_first_thread+0x56>
   18438:	4920      	ldr	r1, [pc, #128]	; (184bc <z_unpend_first_thread+0xc8>)
   1843a:	4821      	ldr	r0, [pc, #132]	; (184c0 <z_unpend_first_thread+0xcc>)
   1843c:	22a7      	movs	r2, #167	; 0xa7
   1843e:	f001 fb64 	bl	19b0a <printk>
   18442:	21a7      	movs	r1, #167	; 0xa7
   18444:	481d      	ldr	r0, [pc, #116]	; (184bc <z_unpend_first_thread+0xc8>)
   18446:	f001 fe06 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   1844a:	f385 8811 	msr	BASEPRI, r5
   1844e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   18452:	b37c      	cbz	r4, 184b4 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   18454:	f04f 0320 	mov.w	r3, #32
   18458:	f3ef 8511 	mrs	r5, BASEPRI
   1845c:	f383 8811 	msr	BASEPRI, r3
   18460:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18464:	4814      	ldr	r0, [pc, #80]	; (184b8 <z_unpend_first_thread+0xc4>)
   18466:	f000 fb67 	bl	18b38 <z_spin_lock_valid>
   1846a:	b940      	cbnz	r0, 1847e <z_unpend_first_thread+0x8a>
   1846c:	4913      	ldr	r1, [pc, #76]	; (184bc <z_unpend_first_thread+0xc8>)
   1846e:	4814      	ldr	r0, [pc, #80]	; (184c0 <z_unpend_first_thread+0xcc>)
   18470:	227c      	movs	r2, #124	; 0x7c
   18472:	f001 fb4a 	bl	19b0a <printk>
   18476:	217c      	movs	r1, #124	; 0x7c
   18478:	4810      	ldr	r0, [pc, #64]	; (184bc <z_unpend_first_thread+0xc8>)
   1847a:	f001 fdec 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1847e:	480e      	ldr	r0, [pc, #56]	; (184b8 <z_unpend_first_thread+0xc4>)
   18480:	f000 fb76 	bl	18b70 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   18484:	4620      	mov	r0, r4
   18486:	f004 fef1 	bl	1d26c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1848a:	480b      	ldr	r0, [pc, #44]	; (184b8 <z_unpend_first_thread+0xc4>)
   1848c:	f000 fb62 	bl	18b54 <z_spin_unlock_valid>
   18490:	b940      	cbnz	r0, 184a4 <z_unpend_first_thread+0xb0>
   18492:	490a      	ldr	r1, [pc, #40]	; (184bc <z_unpend_first_thread+0xc8>)
   18494:	480a      	ldr	r0, [pc, #40]	; (184c0 <z_unpend_first_thread+0xcc>)
   18496:	22a7      	movs	r2, #167	; 0xa7
   18498:	f001 fb37 	bl	19b0a <printk>
   1849c:	21a7      	movs	r1, #167	; 0xa7
   1849e:	4807      	ldr	r0, [pc, #28]	; (184bc <z_unpend_first_thread+0xc8>)
   184a0:	f001 fdd9 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   184a4:	f385 8811 	msr	BASEPRI, r5
   184a8:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   184ac:	f104 0018 	add.w	r0, r4, #24
   184b0:	f000 fd86 	bl	18fc0 <z_abort_timeout>
}
   184b4:	4620      	mov	r0, r4
   184b6:	bd38      	pop	{r3, r4, r5, pc}
   184b8:	2000ae54 	.word	0x2000ae54
   184bc:	0001ed36 	.word	0x0001ed36
   184c0:	0001ecfc 	.word	0x0001ecfc

000184c4 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   184c4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   184c6:	4b04      	ldr	r3, [pc, #16]	; (184d8 <z_sched_init+0x14>)
   184c8:	4608      	mov	r0, r1
   184ca:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   184ce:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   184d2:	f7ff b961 	b.w	17798 <k_sched_time_slice_set>
   184d6:	bf00      	nop
   184d8:	2000ae1c 	.word	0x2000ae1c

000184dc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   184dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   184e2:	b153      	cbz	r3, 184fa <z_impl_k_yield+0x1e>
   184e4:	493d      	ldr	r1, [pc, #244]	; (185dc <z_impl_k_yield+0x100>)
   184e6:	483e      	ldr	r0, [pc, #248]	; (185e0 <z_impl_k_yield+0x104>)
   184e8:	f240 42cf 	movw	r2, #1231	; 0x4cf
   184ec:	f001 fb0d 	bl	19b0a <printk>
   184f0:	f240 41cf 	movw	r1, #1231	; 0x4cf
   184f4:	4839      	ldr	r0, [pc, #228]	; (185dc <z_impl_k_yield+0x100>)
   184f6:	f001 fdae 	bl	1a056 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   184fa:	4d3a      	ldr	r5, [pc, #232]	; (185e4 <z_impl_k_yield+0x108>)
   184fc:	4f3a      	ldr	r7, [pc, #232]	; (185e8 <z_impl_k_yield+0x10c>)
   184fe:	68ab      	ldr	r3, [r5, #8]
   18500:	42bb      	cmp	r3, r7
   18502:	d054      	beq.n	185ae <z_impl_k_yield+0xd2>
	__asm__ volatile(
   18504:	f04f 0320 	mov.w	r3, #32
   18508:	f3ef 8611 	mrs	r6, BASEPRI
   1850c:	f383 8811 	msr	BASEPRI, r3
   18510:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18514:	4835      	ldr	r0, [pc, #212]	; (185ec <z_impl_k_yield+0x110>)
   18516:	f000 fb0f 	bl	18b38 <z_spin_lock_valid>
   1851a:	b940      	cbnz	r0, 1852e <z_impl_k_yield+0x52>
   1851c:	4934      	ldr	r1, [pc, #208]	; (185f0 <z_impl_k_yield+0x114>)
   1851e:	4830      	ldr	r0, [pc, #192]	; (185e0 <z_impl_k_yield+0x104>)
   18520:	227c      	movs	r2, #124	; 0x7c
   18522:	f001 faf2 	bl	19b0a <printk>
   18526:	217c      	movs	r1, #124	; 0x7c
   18528:	4831      	ldr	r0, [pc, #196]	; (185f0 <z_impl_k_yield+0x114>)
   1852a:	f001 fd94 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1852e:	482f      	ldr	r0, [pc, #188]	; (185ec <z_impl_k_yield+0x110>)
   18530:	f000 fb1e 	bl	18b70 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   18534:	68a9      	ldr	r1, [r5, #8]
   18536:	482f      	ldr	r0, [pc, #188]	; (185f4 <z_impl_k_yield+0x118>)
   18538:	f7ff fa0a 	bl	17950 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1853c:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1853e:	42bc      	cmp	r4, r7
   18540:	d10a      	bne.n	18558 <z_impl_k_yield+0x7c>
   18542:	4926      	ldr	r1, [pc, #152]	; (185dc <z_impl_k_yield+0x100>)
   18544:	4826      	ldr	r0, [pc, #152]	; (185e0 <z_impl_k_yield+0x104>)
   18546:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1854a:	f001 fade 	bl	19b0a <printk>
   1854e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18552:	4822      	ldr	r0, [pc, #136]	; (185dc <z_impl_k_yield+0x100>)
   18554:	f001 fd7f 	bl	1a056 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   18558:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1855c:	4925      	ldr	r1, [pc, #148]	; (185f4 <z_impl_k_yield+0x118>)
   1855e:	428b      	cmp	r3, r1
   18560:	d036      	beq.n	185d0 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18562:	2b00      	cmp	r3, #0
   18564:	d034      	beq.n	185d0 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   18566:	f994 000e 	ldrsb.w	r0, [r4, #14]
   1856a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1856e:	4287      	cmp	r7, r0
   18570:	dd29      	ble.n	185c6 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   18572:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18574:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18578:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1857a:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   1857c:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   1857e:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   18580:	7b53      	ldrb	r3, [r2, #13]
   18582:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18586:	7353      	strb	r3, [r2, #13]
   18588:	f7ff fa48 	bl	17a1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1858c:	4817      	ldr	r0, [pc, #92]	; (185ec <z_impl_k_yield+0x110>)
   1858e:	f000 fae1 	bl	18b54 <z_spin_unlock_valid>
   18592:	b940      	cbnz	r0, 185a6 <z_impl_k_yield+0xca>
   18594:	4916      	ldr	r1, [pc, #88]	; (185f0 <z_impl_k_yield+0x114>)
   18596:	4812      	ldr	r0, [pc, #72]	; (185e0 <z_impl_k_yield+0x104>)
   18598:	22a7      	movs	r2, #167	; 0xa7
   1859a:	f001 fab6 	bl	19b0a <printk>
   1859e:	21a7      	movs	r1, #167	; 0xa7
   185a0:	4813      	ldr	r0, [pc, #76]	; (185f0 <z_impl_k_yield+0x114>)
   185a2:	f001 fd58 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   185a6:	f386 8811 	msr	BASEPRI, r6
   185aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   185ae:	f04f 0320 	mov.w	r3, #32
   185b2:	f3ef 8011 	mrs	r0, BASEPRI
   185b6:	f383 8811 	msr	BASEPRI, r3
   185ba:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   185be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   185c2:	f7f4 bc13 	b.w	cdec <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   185c6:	4293      	cmp	r3, r2
   185c8:	d002      	beq.n	185d0 <z_impl_k_yield+0xf4>
   185ca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   185cc:	2b00      	cmp	r3, #0
   185ce:	d1cc      	bne.n	1856a <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   185d0:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   185d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   185d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   185d8:	632c      	str	r4, [r5, #48]	; 0x30
}
   185da:	e7cf      	b.n	1857c <z_impl_k_yield+0xa0>
   185dc:	000218fb 	.word	0x000218fb
   185e0:	0001ecfc 	.word	0x0001ecfc
   185e4:	2000ae1c 	.word	0x2000ae1c
   185e8:	2000a290 	.word	0x2000a290
   185ec:	2000ae54 	.word	0x2000ae54
   185f0:	0001ed36 	.word	0x0001ed36
   185f4:	2000ae48 	.word	0x2000ae48

000185f8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   185f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185fc:	4605      	mov	r5, r0
   185fe:	460f      	mov	r7, r1
   18600:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   18604:	b153      	cbz	r3, 1861c <z_tick_sleep+0x24>
   18606:	4934      	ldr	r1, [pc, #208]	; (186d8 <z_tick_sleep+0xe0>)
   18608:	4834      	ldr	r0, [pc, #208]	; (186dc <z_tick_sleep+0xe4>)
   1860a:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1860e:	f001 fa7c 	bl	19b0a <printk>
   18612:	f240 41ed 	movw	r1, #1261	; 0x4ed
   18616:	4830      	ldr	r0, [pc, #192]	; (186d8 <z_tick_sleep+0xe0>)
   18618:	f001 fd1d 	bl	1a056 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1861c:	ea55 0307 	orrs.w	r3, r5, r7
   18620:	d104      	bne.n	1862c <z_tick_sleep+0x34>
	z_impl_k_yield();
   18622:	f7ff ff5b 	bl	184dc <z_impl_k_yield>
		k_yield();
		return 0;
   18626:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   18628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1862c:	f004 feba 	bl	1d3a4 <z_tick_get_32>
   18630:	1944      	adds	r4, r0, r5
   18632:	f04f 0320 	mov.w	r3, #32
   18636:	f3ef 8811 	mrs	r8, BASEPRI
   1863a:	f383 8811 	msr	BASEPRI, r3
   1863e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18642:	4827      	ldr	r0, [pc, #156]	; (186e0 <z_tick_sleep+0xe8>)
   18644:	f000 fa78 	bl	18b38 <z_spin_lock_valid>
   18648:	b940      	cbnz	r0, 1865c <z_tick_sleep+0x64>
   1864a:	4926      	ldr	r1, [pc, #152]	; (186e4 <z_tick_sleep+0xec>)
   1864c:	4823      	ldr	r0, [pc, #140]	; (186dc <z_tick_sleep+0xe4>)
   1864e:	227c      	movs	r2, #124	; 0x7c
   18650:	f001 fa5b 	bl	19b0a <printk>
   18654:	217c      	movs	r1, #124	; 0x7c
   18656:	4823      	ldr	r0, [pc, #140]	; (186e4 <z_tick_sleep+0xec>)
   18658:	f001 fcfd 	bl	1a056 <assert_post_action>
	pending_current = _current;
   1865c:	4e22      	ldr	r6, [pc, #136]	; (186e8 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   1865e:	4820      	ldr	r0, [pc, #128]	; (186e0 <z_tick_sleep+0xe8>)
   18660:	f000 fa86 	bl	18b70 <z_spin_lock_set_owner>
   18664:	68b0      	ldr	r0, [r6, #8]
   18666:	4b21      	ldr	r3, [pc, #132]	; (186ec <z_tick_sleep+0xf4>)
   18668:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1866a:	f7ff fd7d 	bl	18168 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1866e:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18670:	462a      	mov	r2, r5
   18672:	463b      	mov	r3, r7
   18674:	3018      	adds	r0, #24
   18676:	491e      	ldr	r1, [pc, #120]	; (186f0 <z_tick_sleep+0xf8>)
   18678:	f000 fbf2 	bl	18e60 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1867c:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1867e:	4818      	ldr	r0, [pc, #96]	; (186e0 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18680:	7b53      	ldrb	r3, [r2, #13]
   18682:	f043 0310 	orr.w	r3, r3, #16
   18686:	7353      	strb	r3, [r2, #13]
   18688:	f000 fa64 	bl	18b54 <z_spin_unlock_valid>
   1868c:	b940      	cbnz	r0, 186a0 <z_tick_sleep+0xa8>
   1868e:	4915      	ldr	r1, [pc, #84]	; (186e4 <z_tick_sleep+0xec>)
   18690:	4812      	ldr	r0, [pc, #72]	; (186dc <z_tick_sleep+0xe4>)
   18692:	22be      	movs	r2, #190	; 0xbe
   18694:	f001 fa39 	bl	19b0a <printk>
   18698:	21be      	movs	r1, #190	; 0xbe
   1869a:	4812      	ldr	r0, [pc, #72]	; (186e4 <z_tick_sleep+0xec>)
   1869c:	f001 fcdb 	bl	1a056 <assert_post_action>
   186a0:	4640      	mov	r0, r8
   186a2:	f7f4 fba3 	bl	cdec <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   186a6:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   186a8:	7b5b      	ldrb	r3, [r3, #13]
   186aa:	06db      	lsls	r3, r3, #27
   186ac:	d50a      	bpl.n	186c4 <z_tick_sleep+0xcc>
   186ae:	490a      	ldr	r1, [pc, #40]	; (186d8 <z_tick_sleep+0xe0>)
   186b0:	480a      	ldr	r0, [pc, #40]	; (186dc <z_tick_sleep+0xe4>)
   186b2:	f240 520b 	movw	r2, #1291	; 0x50b
   186b6:	f001 fa28 	bl	19b0a <printk>
   186ba:	f240 510b 	movw	r1, #1291	; 0x50b
   186be:	4806      	ldr	r0, [pc, #24]	; (186d8 <z_tick_sleep+0xe0>)
   186c0:	f001 fcc9 	bl	1a056 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   186c4:	f004 fe6e 	bl	1d3a4 <z_tick_get_32>
   186c8:	1a20      	subs	r0, r4, r0
   186ca:	eb63 0303 	sbc.w	r3, r3, r3
   186ce:	2b00      	cmp	r3, #0
   186d0:	bfb8      	it	lt
   186d2:	2000      	movlt	r0, #0
   186d4:	e7a8      	b.n	18628 <z_tick_sleep+0x30>
   186d6:	bf00      	nop
   186d8:	000218fb 	.word	0x000218fb
   186dc:	0001ecfc 	.word	0x0001ecfc
   186e0:	2000ae54 	.word	0x2000ae54
   186e4:	0001ed36 	.word	0x0001ed36
   186e8:	2000ae1c 	.word	0x2000ae1c
   186ec:	2000ae50 	.word	0x2000ae50
   186f0:	00017ccd 	.word	0x00017ccd

000186f4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   186f4:	b538      	push	{r3, r4, r5, lr}
   186f6:	4605      	mov	r5, r0
   186f8:	460c      	mov	r4, r1
   186fa:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   186fe:	b153      	cbz	r3, 18716 <z_impl_k_sleep+0x22>
   18700:	4911      	ldr	r1, [pc, #68]	; (18748 <z_impl_k_sleep+0x54>)
   18702:	4812      	ldr	r0, [pc, #72]	; (1874c <z_impl_k_sleep+0x58>)
   18704:	f240 521a 	movw	r2, #1306	; 0x51a
   18708:	f001 f9ff 	bl	19b0a <printk>
   1870c:	f240 511a 	movw	r1, #1306	; 0x51a
   18710:	480d      	ldr	r0, [pc, #52]	; (18748 <z_impl_k_sleep+0x54>)
   18712:	f001 fca0 	bl	1a056 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18716:	f1b4 3fff 	cmp.w	r4, #4294967295
   1871a:	bf08      	it	eq
   1871c:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   18720:	d106      	bne.n	18730 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   18722:	4b0b      	ldr	r3, [pc, #44]	; (18750 <z_impl_k_sleep+0x5c>)
   18724:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   18726:	f7ff fbc5 	bl	17eb4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1872a:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1872e:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   18730:	4628      	mov	r0, r5
   18732:	4621      	mov	r1, r4
   18734:	f7ff ff60 	bl	185f8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   18738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1873c:	fb80 0303 	smull	r0, r3, r0, r3
   18740:	0bc0      	lsrs	r0, r0, #15
   18742:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   18746:	e7f2      	b.n	1872e <z_impl_k_sleep+0x3a>
   18748:	000218fb 	.word	0x000218fb
   1874c:	0001ecfc 	.word	0x0001ecfc
   18750:	2000ae1c 	.word	0x2000ae1c

00018754 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18754:	4b01      	ldr	r3, [pc, #4]	; (1875c <z_impl_k_current_get+0x8>)
   18756:	6898      	ldr	r0, [r3, #8]
   18758:	4770      	bx	lr
   1875a:	bf00      	nop
   1875c:	2000ae1c 	.word	0x2000ae1c

00018760 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18760:	b538      	push	{r3, r4, r5, lr}
   18762:	4604      	mov	r4, r0
   18764:	f04f 0320 	mov.w	r3, #32
   18768:	f3ef 8511 	mrs	r5, BASEPRI
   1876c:	f383 8811 	msr	BASEPRI, r3
   18770:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18774:	4815      	ldr	r0, [pc, #84]	; (187cc <z_impl_k_sem_give+0x6c>)
   18776:	f000 f9df 	bl	18b38 <z_spin_lock_valid>
   1877a:	b940      	cbnz	r0, 1878e <z_impl_k_sem_give+0x2e>
   1877c:	4914      	ldr	r1, [pc, #80]	; (187d0 <z_impl_k_sem_give+0x70>)
   1877e:	4815      	ldr	r0, [pc, #84]	; (187d4 <z_impl_k_sem_give+0x74>)
   18780:	227c      	movs	r2, #124	; 0x7c
   18782:	f001 f9c2 	bl	19b0a <printk>
   18786:	217c      	movs	r1, #124	; 0x7c
   18788:	4811      	ldr	r0, [pc, #68]	; (187d0 <z_impl_k_sem_give+0x70>)
   1878a:	f001 fc64 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1878e:	480f      	ldr	r0, [pc, #60]	; (187cc <z_impl_k_sem_give+0x6c>)
   18790:	f000 f9ee 	bl	18b70 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   18794:	4620      	mov	r0, r4
   18796:	f7ff fe2d 	bl	183f4 <z_unpend_first_thread>

	if (thread != NULL) {
   1879a:	b150      	cbz	r0, 187b2 <z_impl_k_sem_give+0x52>
   1879c:	2200      	movs	r2, #0
   1879e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   187a2:	f7ff fa1b 	bl	17bdc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   187a6:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   187a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   187ac:	4807      	ldr	r0, [pc, #28]	; (187cc <z_impl_k_sem_give+0x6c>)
   187ae:	f7ff b841 	b.w	17834 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   187b2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   187b6:	429a      	cmp	r2, r3
   187b8:	bf18      	it	ne
   187ba:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   187bc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   187be:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   187c0:	f104 0010 	add.w	r0, r4, #16
   187c4:	f004 fe65 	bl	1d492 <z_handle_obj_poll_events>
}
   187c8:	e7ed      	b.n	187a6 <z_impl_k_sem_give+0x46>
   187ca:	bf00      	nop
   187cc:	2000ae60 	.word	0x2000ae60
   187d0:	0001ed36 	.word	0x0001ed36
   187d4:	0001ecfc 	.word	0x0001ecfc

000187d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   187d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   187da:	4604      	mov	r4, r0
   187dc:	4616      	mov	r6, r2
   187de:	461d      	mov	r5, r3
   187e0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   187e4:	b15b      	cbz	r3, 187fe <z_impl_k_sem_take+0x26>
   187e6:	ea52 0305 	orrs.w	r3, r2, r5
   187ea:	d008      	beq.n	187fe <z_impl_k_sem_take+0x26>
   187ec:	492b      	ldr	r1, [pc, #172]	; (1889c <z_impl_k_sem_take+0xc4>)
   187ee:	482c      	ldr	r0, [pc, #176]	; (188a0 <z_impl_k_sem_take+0xc8>)
   187f0:	228c      	movs	r2, #140	; 0x8c
   187f2:	f001 f98a 	bl	19b0a <printk>
   187f6:	218c      	movs	r1, #140	; 0x8c
   187f8:	4828      	ldr	r0, [pc, #160]	; (1889c <z_impl_k_sem_take+0xc4>)
   187fa:	f001 fc2c 	bl	1a056 <assert_post_action>
   187fe:	f04f 0320 	mov.w	r3, #32
   18802:	f3ef 8711 	mrs	r7, BASEPRI
   18806:	f383 8811 	msr	BASEPRI, r3
   1880a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1880e:	4825      	ldr	r0, [pc, #148]	; (188a4 <z_impl_k_sem_take+0xcc>)
   18810:	f000 f992 	bl	18b38 <z_spin_lock_valid>
   18814:	b940      	cbnz	r0, 18828 <z_impl_k_sem_take+0x50>
   18816:	4924      	ldr	r1, [pc, #144]	; (188a8 <z_impl_k_sem_take+0xd0>)
   18818:	4821      	ldr	r0, [pc, #132]	; (188a0 <z_impl_k_sem_take+0xc8>)
   1881a:	227c      	movs	r2, #124	; 0x7c
   1881c:	f001 f975 	bl	19b0a <printk>
   18820:	217c      	movs	r1, #124	; 0x7c
   18822:	4821      	ldr	r0, [pc, #132]	; (188a8 <z_impl_k_sem_take+0xd0>)
   18824:	f001 fc17 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   18828:	481e      	ldr	r0, [pc, #120]	; (188a4 <z_impl_k_sem_take+0xcc>)
   1882a:	f000 f9a1 	bl	18b70 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1882e:	68a3      	ldr	r3, [r4, #8]
   18830:	b1ab      	cbz	r3, 1885e <z_impl_k_sem_take+0x86>
		sem->count--;
   18832:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18834:	481b      	ldr	r0, [pc, #108]	; (188a4 <z_impl_k_sem_take+0xcc>)
   18836:	60a3      	str	r3, [r4, #8]
   18838:	f000 f98c 	bl	18b54 <z_spin_unlock_valid>
   1883c:	b940      	cbnz	r0, 18850 <z_impl_k_sem_take+0x78>
   1883e:	491a      	ldr	r1, [pc, #104]	; (188a8 <z_impl_k_sem_take+0xd0>)
   18840:	4817      	ldr	r0, [pc, #92]	; (188a0 <z_impl_k_sem_take+0xc8>)
   18842:	22a7      	movs	r2, #167	; 0xa7
   18844:	f001 f961 	bl	19b0a <printk>
   18848:	21a7      	movs	r1, #167	; 0xa7
   1884a:	4817      	ldr	r0, [pc, #92]	; (188a8 <z_impl_k_sem_take+0xd0>)
   1884c:	f001 fc03 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   18850:	f387 8811 	msr	BASEPRI, r7
   18854:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18858:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1885a:	b003      	add	sp, #12
   1885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1885e:	ea56 0305 	orrs.w	r3, r6, r5
   18862:	d113      	bne.n	1888c <z_impl_k_sem_take+0xb4>
   18864:	480f      	ldr	r0, [pc, #60]	; (188a4 <z_impl_k_sem_take+0xcc>)
   18866:	f000 f975 	bl	18b54 <z_spin_unlock_valid>
   1886a:	b940      	cbnz	r0, 1887e <z_impl_k_sem_take+0xa6>
   1886c:	490e      	ldr	r1, [pc, #56]	; (188a8 <z_impl_k_sem_take+0xd0>)
   1886e:	480c      	ldr	r0, [pc, #48]	; (188a0 <z_impl_k_sem_take+0xc8>)
   18870:	22a7      	movs	r2, #167	; 0xa7
   18872:	f001 f94a 	bl	19b0a <printk>
   18876:	21a7      	movs	r1, #167	; 0xa7
   18878:	480b      	ldr	r0, [pc, #44]	; (188a8 <z_impl_k_sem_take+0xd0>)
   1887a:	f001 fbec 	bl	1a056 <assert_post_action>
   1887e:	f387 8811 	msr	BASEPRI, r7
   18882:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18886:	f06f 000f 	mvn.w	r0, #15
   1888a:	e7e6      	b.n	1885a <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1888c:	4622      	mov	r2, r4
   1888e:	4639      	mov	r1, r7
   18890:	e9cd 6500 	strd	r6, r5, [sp]
   18894:	4803      	ldr	r0, [pc, #12]	; (188a4 <z_impl_k_sem_take+0xcc>)
   18896:	f7ff fd0b 	bl	182b0 <z_pend_curr>
	return ret;
   1889a:	e7de      	b.n	1885a <z_impl_k_sem_take+0x82>
   1889c:	0002191d 	.word	0x0002191d
   188a0:	0001ecfc 	.word	0x0001ecfc
   188a4:	2000ae60 	.word	0x2000ae60
   188a8:	0001ed36 	.word	0x0001ed36

000188ac <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   188ac:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   188ae:	4c08      	ldr	r4, [pc, #32]	; (188d0 <k_sys_work_q_init+0x24>)
   188b0:	f04f 33ff 	mov.w	r3, #4294967295
   188b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   188b8:	4620      	mov	r0, r4
   188ba:	4906      	ldr	r1, [pc, #24]	; (188d4 <k_sys_work_q_init+0x28>)
   188bc:	f000 f98c 	bl	18bd8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   188c0:	4905      	ldr	r1, [pc, #20]	; (188d8 <k_sys_work_q_init+0x2c>)
   188c2:	f104 0020 	add.w	r0, r4, #32
   188c6:	f004 fd0f 	bl	1d2e8 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   188ca:	2000      	movs	r0, #0
   188cc:	bd10      	pop	{r4, pc}
   188ce:	bf00      	nop
   188d0:	2000a3b0 	.word	0x2000a3b0
   188d4:	2000f498 	.word	0x2000f498
   188d8:	0002193d 	.word	0x0002193d

000188dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   188dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   188e0:	4604      	mov	r4, r0
   188e2:	460f      	mov	r7, r1
   188e4:	4698      	mov	r8, r3
   188e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   188e8:	4b2c      	ldr	r3, [pc, #176]	; (1899c <z_setup_new_thread+0xc0>)
   188ea:	4616      	mov	r6, r2
   188ec:	f100 0238 	add.w	r2, r0, #56	; 0x38
   188f0:	e8d2 1fef 	ldaex	r1, [r2]
   188f4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   188f8:	2800      	cmp	r0, #0
   188fa:	d1f9      	bne.n	188f0 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   188fc:	4299      	cmp	r1, r3
   188fe:	d10a      	bne.n	18916 <z_setup_new_thread+0x3a>
   18900:	4927      	ldr	r1, [pc, #156]	; (189a0 <z_setup_new_thread+0xc4>)
   18902:	4828      	ldr	r0, [pc, #160]	; (189a4 <z_setup_new_thread+0xc8>)
   18904:	f240 2223 	movw	r2, #547	; 0x223
   18908:	f001 f8ff 	bl	19b0a <printk>
   1890c:	f240 2123 	movw	r1, #547	; 0x223
   18910:	4823      	ldr	r0, [pc, #140]	; (189a0 <z_setup_new_thread+0xc4>)
   18912:	f001 fba0 	bl	1a056 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   18916:	2d0f      	cmp	r5, #15
   18918:	d12f      	bne.n	1897a <z_setup_new_thread+0x9e>
   1891a:	4b23      	ldr	r3, [pc, #140]	; (189a8 <z_setup_new_thread+0xcc>)
   1891c:	4598      	cmp	r8, r3
   1891e:	d130      	bne.n	18982 <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   18920:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   18924:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   18928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1892a:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   1892c:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1892e:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   18930:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   18932:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18936:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18938:	9302      	str	r3, [sp, #8]
   1893a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1893c:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18940:	9301      	str	r3, [sp, #4]
   18942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   18944:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   18946:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1894a:	9300      	str	r3, [sp, #0]
   1894c:	4632      	mov	r2, r6
   1894e:	4643      	mov	r3, r8
   18950:	4639      	mov	r1, r7
   18952:	4620      	mov	r0, r4
	node->prev = NULL;
   18954:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   18958:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1895a:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1895c:	f7f4 fae4 	bl	cf28 <arch_new_thread>
	if (!_current) {
   18960:	4b12      	ldr	r3, [pc, #72]	; (189ac <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   18962:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   18966:	689b      	ldr	r3, [r3, #8]
   18968:	b10b      	cbz	r3, 1896e <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   1896a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1896e:	4630      	mov	r0, r6
   18970:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   18974:	b004      	add	sp, #16
   18976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1897a:	f105 0310 	add.w	r3, r5, #16
   1897e:	2b1e      	cmp	r3, #30
   18980:	d9ce      	bls.n	18920 <z_setup_new_thread+0x44>
   18982:	f240 2226 	movw	r2, #550	; 0x226
   18986:	4906      	ldr	r1, [pc, #24]	; (189a0 <z_setup_new_thread+0xc4>)
   18988:	4806      	ldr	r0, [pc, #24]	; (189a4 <z_setup_new_thread+0xc8>)
   1898a:	f001 f8be 	bl	19b0a <printk>
   1898e:	f240 2126 	movw	r1, #550	; 0x226
   18992:	4803      	ldr	r0, [pc, #12]	; (189a0 <z_setup_new_thread+0xc4>)
   18994:	f001 fb5f 	bl	1a056 <assert_post_action>
   18998:	e7c2      	b.n	18920 <z_setup_new_thread+0x44>
   1899a:	bf00      	nop
   1899c:	1337c0d3 	.word	0x1337c0d3
   189a0:	00021946 	.word	0x00021946
   189a4:	0001ecfc 	.word	0x0001ecfc
   189a8:	00016cc5 	.word	0x00016cc5
   189ac:	2000ae1c 	.word	0x2000ae1c

000189b0 <z_impl_k_thread_create>:
{
   189b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   189b4:	b087      	sub	sp, #28
   189b6:	4604      	mov	r4, r0
   189b8:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   189bc:	460f      	mov	r7, r1
   189be:	4690      	mov	r8, r2
   189c0:	4699      	mov	r9, r3
   189c2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   189c6:	b153      	cbz	r3, 189de <z_impl_k_thread_create+0x2e>
   189c8:	491a      	ldr	r1, [pc, #104]	; (18a34 <z_impl_k_thread_create+0x84>)
   189ca:	481b      	ldr	r0, [pc, #108]	; (18a38 <z_impl_k_thread_create+0x88>)
   189cc:	f240 228f 	movw	r2, #655	; 0x28f
   189d0:	f001 f89b 	bl	19b0a <printk>
   189d4:	f240 218f 	movw	r1, #655	; 0x28f
   189d8:	4816      	ldr	r0, [pc, #88]	; (18a34 <z_impl_k_thread_create+0x84>)
   189da:	f001 fb3c 	bl	1a056 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   189de:	2300      	movs	r3, #0
   189e0:	9305      	str	r3, [sp, #20]
   189e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   189e4:	4642      	mov	r2, r8
   189e6:	9304      	str	r3, [sp, #16]
   189e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   189ea:	4639      	mov	r1, r7
   189ec:	9303      	str	r3, [sp, #12]
   189ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   189f0:	4620      	mov	r0, r4
   189f2:	9302      	str	r3, [sp, #8]
   189f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   189f6:	9301      	str	r3, [sp, #4]
   189f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   189fa:	9300      	str	r3, [sp, #0]
   189fc:	464b      	mov	r3, r9
   189fe:	f7ff ff6d 	bl	188dc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   18a02:	f1b5 3fff 	cmp.w	r5, #4294967295
   18a06:	bf08      	it	eq
   18a08:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18a0c:	d005      	beq.n	18a1a <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18a0e:	ea55 0306 	orrs.w	r3, r5, r6
   18a12:	d106      	bne.n	18a22 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   18a14:	4620      	mov	r0, r4
   18a16:	f7ff f917 	bl	17c48 <z_sched_start>
}
   18a1a:	4620      	mov	r0, r4
   18a1c:	b007      	add	sp, #28
   18a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18a22:	4632      	mov	r2, r6
   18a24:	462b      	mov	r3, r5
   18a26:	4905      	ldr	r1, [pc, #20]	; (18a3c <z_impl_k_thread_create+0x8c>)
   18a28:	f104 0018 	add.w	r0, r4, #24
   18a2c:	f000 fa18 	bl	18e60 <z_add_timeout>
   18a30:	e7f3      	b.n	18a1a <z_impl_k_thread_create+0x6a>
   18a32:	bf00      	nop
   18a34:	00021946 	.word	0x00021946
   18a38:	0001ecfc 	.word	0x0001ecfc
   18a3c:	00017ccd 	.word	0x00017ccd

00018a40 <z_init_static_threads>:
{
   18a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18a44:	4c37      	ldr	r4, [pc, #220]	; (18b24 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   18a46:	4d38      	ldr	r5, [pc, #224]	; (18b28 <z_init_static_threads+0xe8>)
   18a48:	4f38      	ldr	r7, [pc, #224]	; (18b2c <z_init_static_threads+0xec>)
{
   18a4a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   18a4c:	42ac      	cmp	r4, r5
   18a4e:	4626      	mov	r6, r4
   18a50:	d90a      	bls.n	18a68 <z_init_static_threads+0x28>
   18a52:	4639      	mov	r1, r7
   18a54:	4836      	ldr	r0, [pc, #216]	; (18b30 <z_init_static_threads+0xf0>)
   18a56:	f240 22fd 	movw	r2, #765	; 0x2fd
   18a5a:	f001 f856 	bl	19b0a <printk>
   18a5e:	f240 21fd 	movw	r1, #765	; 0x2fd
   18a62:	4638      	mov	r0, r7
   18a64:	f001 faf7 	bl	1a056 <assert_post_action>
   18a68:	42ae      	cmp	r6, r5
   18a6a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   18a6e:	d31b      	bcc.n	18aa8 <z_init_static_threads+0x68>
	k_sched_lock();
   18a70:	f7fe ff16 	bl	178a0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   18a74:	4c2b      	ldr	r4, [pc, #172]	; (18b24 <z_init_static_threads+0xe4>)
   18a76:	4e2d      	ldr	r6, [pc, #180]	; (18b2c <z_init_static_threads+0xec>)
   18a78:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 18b30 <z_init_static_threads+0xf0>
   18a7c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 18b34 <z_init_static_threads+0xf4>
   18a80:	42ac      	cmp	r4, r5
   18a82:	d90a      	bls.n	18a9a <z_init_static_threads+0x5a>
   18a84:	4631      	mov	r1, r6
   18a86:	4640      	mov	r0, r8
   18a88:	f44f 7247 	mov.w	r2, #796	; 0x31c
   18a8c:	f001 f83d 	bl	19b0a <printk>
   18a90:	f44f 7147 	mov.w	r1, #796	; 0x31c
   18a94:	4630      	mov	r0, r6
   18a96:	f001 fade 	bl	1a056 <assert_post_action>
   18a9a:	42ac      	cmp	r4, r5
   18a9c:	d320      	bcc.n	18ae0 <z_init_static_threads+0xa0>
}
   18a9e:	b007      	add	sp, #28
   18aa0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   18aa4:	f7fe bff4 	b.w	17a90 <k_sched_unlock>
		z_setup_new_thread(
   18aa8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18aac:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18ab0:	9305      	str	r3, [sp, #20]
   18ab2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18ab6:	9304      	str	r3, [sp, #16]
   18ab8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18abc:	9303      	str	r3, [sp, #12]
   18abe:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18ac2:	9302      	str	r3, [sp, #8]
   18ac4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18ac8:	9301      	str	r3, [sp, #4]
   18aca:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18ace:	9300      	str	r3, [sp, #0]
   18ad0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18ad4:	f7ff ff02 	bl	188dc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18ad8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   18adc:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   18ade:	e7b5      	b.n	18a4c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   18ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18ae2:	1c5a      	adds	r2, r3, #1
   18ae4:	d00f      	beq.n	18b06 <z_init_static_threads+0xc6>
   18ae6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   18aea:	f240 30e7 	movw	r0, #999	; 0x3e7
   18aee:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   18af0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18af4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18af8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   18afc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18afe:	d104      	bne.n	18b0a <z_init_static_threads+0xca>
	z_sched_start(thread);
   18b00:	4638      	mov	r0, r7
   18b02:	f7ff f8a1 	bl	17c48 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18b06:	3430      	adds	r4, #48	; 0x30
   18b08:	e7ba      	b.n	18a80 <z_init_static_threads+0x40>
   18b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18b0e:	2300      	movs	r3, #0
   18b10:	f7f0 f80c 	bl	8b2c <__aeabi_uldivmod>
   18b14:	4602      	mov	r2, r0
   18b16:	460b      	mov	r3, r1
   18b18:	f107 0018 	add.w	r0, r7, #24
   18b1c:	4649      	mov	r1, r9
   18b1e:	f000 f99f 	bl	18e60 <z_add_timeout>
   18b22:	e7f0      	b.n	18b06 <z_init_static_threads+0xc6>
   18b24:	200085ec 	.word	0x200085ec
   18b28:	200085ec 	.word	0x200085ec
   18b2c:	00021946 	.word	0x00021946
   18b30:	0001ecfc 	.word	0x0001ecfc
   18b34:	00017ccd 	.word	0x00017ccd

00018b38 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   18b38:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   18b3a:	b138      	cbz	r0, 18b4c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   18b3c:	4b04      	ldr	r3, [pc, #16]	; (18b50 <z_spin_lock_valid+0x18>)
   18b3e:	f000 0003 	and.w	r0, r0, #3
   18b42:	7e1b      	ldrb	r3, [r3, #24]
   18b44:	1ac0      	subs	r0, r0, r3
   18b46:	bf18      	it	ne
   18b48:	2001      	movne	r0, #1
   18b4a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   18b4c:	2001      	movs	r0, #1
}
   18b4e:	4770      	bx	lr
   18b50:	2000ae1c 	.word	0x2000ae1c

00018b54 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18b54:	4905      	ldr	r1, [pc, #20]	; (18b6c <z_spin_unlock_valid+0x18>)
{
   18b56:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18b58:	688a      	ldr	r2, [r1, #8]
   18b5a:	7e08      	ldrb	r0, [r1, #24]
   18b5c:	6819      	ldr	r1, [r3, #0]
   18b5e:	4302      	orrs	r2, r0
   18b60:	2000      	movs	r0, #0
   18b62:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   18b64:	bf04      	itt	eq
   18b66:	6018      	streq	r0, [r3, #0]
	return true;
   18b68:	2001      	moveq	r0, #1
}
   18b6a:	4770      	bx	lr
   18b6c:	2000ae1c 	.word	0x2000ae1c

00018b70 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   18b70:	4a02      	ldr	r2, [pc, #8]	; (18b7c <z_spin_lock_set_owner+0xc>)
   18b72:	7e11      	ldrb	r1, [r2, #24]
   18b74:	6893      	ldr	r3, [r2, #8]
   18b76:	430b      	orrs	r3, r1
   18b78:	6003      	str	r3, [r0, #0]
}
   18b7a:	4770      	bx	lr
   18b7c:	2000ae1c 	.word	0x2000ae1c

00018b80 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   18b80:	b508      	push	{r3, lr}
	__asm__ volatile(
   18b82:	f04f 0320 	mov.w	r3, #32
   18b86:	f3ef 8511 	mrs	r5, BASEPRI
   18b8a:	f383 8811 	msr	BASEPRI, r3
   18b8e:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   18b92:	4c0e      	ldr	r4, [pc, #56]	; (18bcc <z_self_abort+0x4c>)
   18b94:	6923      	ldr	r3, [r4, #16]
   18b96:	b143      	cbz	r3, 18baa <z_self_abort+0x2a>
   18b98:	490d      	ldr	r1, [pc, #52]	; (18bd0 <z_self_abort+0x50>)
   18b9a:	480e      	ldr	r0, [pc, #56]	; (18bd4 <z_self_abort+0x54>)
   18b9c:	2228      	movs	r2, #40	; 0x28
   18b9e:	f000 ffb4 	bl	19b0a <printk>
   18ba2:	2128      	movs	r1, #40	; 0x28
   18ba4:	480a      	ldr	r0, [pc, #40]	; (18bd0 <z_self_abort+0x50>)
   18ba6:	f001 fa56 	bl	1a056 <assert_post_action>
	cpu->pending_abort = _current;
   18baa:	68a0      	ldr	r0, [r4, #8]
   18bac:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   18bae:	f7ff f981 	bl	17eb4 <z_impl_k_thread_suspend>
   18bb2:	4628      	mov	r0, r5
   18bb4:	f7f4 f91a 	bl	cdec <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   18bb8:	4905      	ldr	r1, [pc, #20]	; (18bd0 <z_self_abort+0x50>)
   18bba:	4806      	ldr	r0, [pc, #24]	; (18bd4 <z_self_abort+0x54>)
   18bbc:	2230      	movs	r2, #48	; 0x30
   18bbe:	f000 ffa4 	bl	19b0a <printk>
   18bc2:	2130      	movs	r1, #48	; 0x30
   18bc4:	4802      	ldr	r0, [pc, #8]	; (18bd0 <z_self_abort+0x50>)
   18bc6:	f001 fa46 	bl	1a056 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18bca:	bf00      	nop
   18bcc:	2000ae1c 	.word	0x2000ae1c
   18bd0:	00021969 	.word	0x00021969
   18bd4:	0001ecfc 	.word	0x0001ecfc

00018bd8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   18bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18bdc:	4604      	mov	r4, r0
   18bde:	b088      	sub	sp, #32
   18be0:	460d      	mov	r5, r1
   18be2:	4616      	mov	r6, r2
   18be4:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   18be6:	f004 fb00 	bl	1d1ea <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   18bea:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18bee:	2200      	movs	r2, #0
   18bf0:	2300      	movs	r3, #0
   18bf2:	e9cd 7203 	strd	r7, r2, [sp, #12]
   18bf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18bfa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   18bfe:	4629      	mov	r1, r5
   18c00:	4632      	mov	r2, r6
   18c02:	4640      	mov	r0, r8
   18c04:	4b05      	ldr	r3, [pc, #20]	; (18c1c <k_work_q_start+0x44>)
   18c06:	9400      	str	r4, [sp, #0]
   18c08:	f7ff fed2 	bl	189b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   18c0c:	4640      	mov	r0, r8
   18c0e:	4904      	ldr	r1, [pc, #16]	; (18c20 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   18c10:	b008      	add	sp, #32
   18c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18c16:	f004 bb67 	b.w	1d2e8 <z_impl_k_thread_name_set>
   18c1a:	bf00      	nop
   18c1c:	0000a4d9 	.word	0x0000a4d9
   18c20:	00021992 	.word	0x00021992

00018c24 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   18c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18c28:	4606      	mov	r6, r0
   18c2a:	460d      	mov	r5, r1
   18c2c:	4690      	mov	r8, r2
   18c2e:	461f      	mov	r7, r3
   18c30:	f04f 0320 	mov.w	r3, #32
   18c34:	f3ef 8911 	mrs	r9, BASEPRI
   18c38:	f383 8811 	msr	BASEPRI, r3
   18c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c40:	482c      	ldr	r0, [pc, #176]	; (18cf4 <k_delayed_work_submit_to_queue+0xd0>)
   18c42:	f7ff ff79 	bl	18b38 <z_spin_lock_valid>
   18c46:	b940      	cbnz	r0, 18c5a <k_delayed_work_submit_to_queue+0x36>
   18c48:	492b      	ldr	r1, [pc, #172]	; (18cf8 <k_delayed_work_submit_to_queue+0xd4>)
   18c4a:	482c      	ldr	r0, [pc, #176]	; (18cfc <k_delayed_work_submit_to_queue+0xd8>)
   18c4c:	227c      	movs	r2, #124	; 0x7c
   18c4e:	f000 ff5c 	bl	19b0a <printk>
   18c52:	217c      	movs	r1, #124	; 0x7c
   18c54:	4828      	ldr	r0, [pc, #160]	; (18cf8 <k_delayed_work_submit_to_queue+0xd4>)
   18c56:	f001 f9fe 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   18c5a:	4826      	ldr	r0, [pc, #152]	; (18cf4 <k_delayed_work_submit_to_queue+0xd0>)
   18c5c:	f7ff ff88 	bl	18b70 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   18c60:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18c62:	b1e3      	cbz	r3, 18c9e <k_delayed_work_submit_to_queue+0x7a>
   18c64:	42b3      	cmp	r3, r6
   18c66:	d142      	bne.n	18cee <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   18c68:	4628      	mov	r0, r5
   18c6a:	f004 fb5b 	bl	1d324 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   18c6e:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   18c72:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   18c74:	d015      	beq.n	18ca2 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   18c76:	2800      	cmp	r0, #0
   18c78:	da14      	bge.n	18ca4 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c7a:	481e      	ldr	r0, [pc, #120]	; (18cf4 <k_delayed_work_submit_to_queue+0xd0>)
   18c7c:	f7ff ff6a 	bl	18b54 <z_spin_unlock_valid>
   18c80:	b940      	cbnz	r0, 18c94 <k_delayed_work_submit_to_queue+0x70>
   18c82:	491d      	ldr	r1, [pc, #116]	; (18cf8 <k_delayed_work_submit_to_queue+0xd4>)
   18c84:	481d      	ldr	r0, [pc, #116]	; (18cfc <k_delayed_work_submit_to_queue+0xd8>)
   18c86:	22a7      	movs	r2, #167	; 0xa7
   18c88:	f000 ff3f 	bl	19b0a <printk>
   18c8c:	21a7      	movs	r1, #167	; 0xa7
   18c8e:	481a      	ldr	r0, [pc, #104]	; (18cf8 <k_delayed_work_submit_to_queue+0xd4>)
   18c90:	f001 f9e1 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   18c94:	f389 8811 	msr	BASEPRI, r9
   18c98:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   18c9c:	e01c      	b.n	18cd8 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   18c9e:	2e00      	cmp	r6, #0
   18ca0:	d0e2      	beq.n	18c68 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   18ca2:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18ca4:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   18ca8:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18caa:	d118      	bne.n	18cde <k_delayed_work_submit_to_queue+0xba>
   18cac:	4811      	ldr	r0, [pc, #68]	; (18cf4 <k_delayed_work_submit_to_queue+0xd0>)
   18cae:	f7ff ff51 	bl	18b54 <z_spin_unlock_valid>
   18cb2:	b940      	cbnz	r0, 18cc6 <k_delayed_work_submit_to_queue+0xa2>
   18cb4:	4910      	ldr	r1, [pc, #64]	; (18cf8 <k_delayed_work_submit_to_queue+0xd4>)
   18cb6:	4811      	ldr	r0, [pc, #68]	; (18cfc <k_delayed_work_submit_to_queue+0xd8>)
   18cb8:	22a7      	movs	r2, #167	; 0xa7
   18cba:	f000 ff26 	bl	19b0a <printk>
   18cbe:	21a7      	movs	r1, #167	; 0xa7
   18cc0:	480d      	ldr	r0, [pc, #52]	; (18cf8 <k_delayed_work_submit_to_queue+0xd4>)
   18cc2:	f001 f9c8 	bl	1a056 <assert_post_action>
   18cc6:	f389 8811 	msr	BASEPRI, r9
   18cca:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   18cce:	4629      	mov	r1, r5
   18cd0:	4630      	mov	r0, r6
   18cd2:	f004 fb0e 	bl	1d2f2 <k_work_submit_to_queue>
		return 0;
   18cd6:	2400      	movs	r4, #0
}
   18cd8:	4620      	mov	r0, r4
   18cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   18cde:	4642      	mov	r2, r8
   18ce0:	463b      	mov	r3, r7
   18ce2:	4907      	ldr	r1, [pc, #28]	; (18d00 <k_delayed_work_submit_to_queue+0xdc>)
   18ce4:	f105 0010 	add.w	r0, r5, #16
   18ce8:	f000 f8ba 	bl	18e60 <z_add_timeout>
   18cec:	e7c5      	b.n	18c7a <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   18cee:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   18cf2:	e7c2      	b.n	18c7a <k_delayed_work_submit_to_queue+0x56>
   18cf4:	2000ae64 	.word	0x2000ae64
   18cf8:	0001ed36 	.word	0x0001ed36
   18cfc:	0001ecfc 	.word	0x0001ecfc
   18d00:	0001d31b 	.word	0x0001d31b

00018d04 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   18d04:	b538      	push	{r3, r4, r5, lr}
   18d06:	4604      	mov	r4, r0
	__asm__ volatile(
   18d08:	f04f 0320 	mov.w	r3, #32
   18d0c:	f3ef 8511 	mrs	r5, BASEPRI
   18d10:	f383 8811 	msr	BASEPRI, r3
   18d14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d18:	4815      	ldr	r0, [pc, #84]	; (18d70 <k_delayed_work_cancel+0x6c>)
   18d1a:	f7ff ff0d 	bl	18b38 <z_spin_lock_valid>
   18d1e:	b940      	cbnz	r0, 18d32 <k_delayed_work_cancel+0x2e>
   18d20:	4914      	ldr	r1, [pc, #80]	; (18d74 <k_delayed_work_cancel+0x70>)
   18d22:	4815      	ldr	r0, [pc, #84]	; (18d78 <k_delayed_work_cancel+0x74>)
   18d24:	227c      	movs	r2, #124	; 0x7c
   18d26:	f000 fef0 	bl	19b0a <printk>
   18d2a:	217c      	movs	r1, #124	; 0x7c
   18d2c:	4811      	ldr	r0, [pc, #68]	; (18d74 <k_delayed_work_cancel+0x70>)
   18d2e:	f001 f992 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   18d32:	480f      	ldr	r0, [pc, #60]	; (18d70 <k_delayed_work_cancel+0x6c>)
   18d34:	f7ff ff1c 	bl	18b70 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   18d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18d3a:	b1b3      	cbz	r3, 18d6a <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   18d3c:	4620      	mov	r0, r4
   18d3e:	f004 faf1 	bl	1d324 <work_cancel>
   18d42:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18d44:	480a      	ldr	r0, [pc, #40]	; (18d70 <k_delayed_work_cancel+0x6c>)
   18d46:	f7ff ff05 	bl	18b54 <z_spin_unlock_valid>
   18d4a:	b940      	cbnz	r0, 18d5e <k_delayed_work_cancel+0x5a>
   18d4c:	4909      	ldr	r1, [pc, #36]	; (18d74 <k_delayed_work_cancel+0x70>)
   18d4e:	480a      	ldr	r0, [pc, #40]	; (18d78 <k_delayed_work_cancel+0x74>)
   18d50:	22a7      	movs	r2, #167	; 0xa7
   18d52:	f000 feda 	bl	19b0a <printk>
   18d56:	21a7      	movs	r1, #167	; 0xa7
   18d58:	4806      	ldr	r0, [pc, #24]	; (18d74 <k_delayed_work_cancel+0x70>)
   18d5a:	f001 f97c 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   18d5e:	f385 8811 	msr	BASEPRI, r5
   18d62:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   18d66:	4620      	mov	r0, r4
   18d68:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   18d6a:	f06f 0415 	mvn.w	r4, #21
   18d6e:	e7e9      	b.n	18d44 <k_delayed_work_cancel+0x40>
   18d70:	2000ae64 	.word	0x2000ae64
   18d74:	0001ed36 	.word	0x0001ed36
   18d78:	0001ecfc 	.word	0x0001ecfc

00018d7c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   18d7c:	4a02      	ldr	r2, [pc, #8]	; (18d88 <boot_banner+0xc>)
   18d7e:	4903      	ldr	r1, [pc, #12]	; (18d8c <boot_banner+0x10>)
   18d80:	4803      	ldr	r0, [pc, #12]	; (18d90 <boot_banner+0x14>)
   18d82:	f000 bec2 	b.w	19b0a <printk>
   18d86:	bf00      	nop
   18d88:	000217d5 	.word	0x000217d5
   18d8c:	0002199c 	.word	0x0002199c
   18d90:	000219a9 	.word	0x000219a9

00018d94 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18d94:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   18d96:	4806      	ldr	r0, [pc, #24]	; (18db0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   18d98:	4a06      	ldr	r2, [pc, #24]	; (18db4 <z_data_copy+0x20>)
   18d9a:	4907      	ldr	r1, [pc, #28]	; (18db8 <z_data_copy+0x24>)
   18d9c:	1a12      	subs	r2, r2, r0
   18d9e:	f002 f8f4 	bl	1af8a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   18da2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   18da6:	4a05      	ldr	r2, [pc, #20]	; (18dbc <z_data_copy+0x28>)
   18da8:	4905      	ldr	r1, [pc, #20]	; (18dc0 <z_data_copy+0x2c>)
   18daa:	4806      	ldr	r0, [pc, #24]	; (18dc4 <z_data_copy+0x30>)
   18dac:	f002 b8ed 	b.w	1af8a <memcpy>
   18db0:	20008000 	.word	0x20008000
   18db4:	200087e4 	.word	0x200087e4
   18db8:	00021a40 	.word	0x00021a40
   18dbc:	00000000 	.word	0x00000000
   18dc0:	00021a40 	.word	0x00021a40
   18dc4:	20008000 	.word	0x20008000

00018dc8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   18dc8:	4b03      	ldr	r3, [pc, #12]	; (18dd8 <elapsed+0x10>)
   18dca:	681b      	ldr	r3, [r3, #0]
   18dcc:	b90b      	cbnz	r3, 18dd2 <elapsed+0xa>
   18dce:	f7f2 bfcd 	b.w	bd6c <z_clock_elapsed>
}
   18dd2:	2000      	movs	r0, #0
   18dd4:	4770      	bx	lr
   18dd6:	bf00      	nop
   18dd8:	2000ae68 	.word	0x2000ae68

00018ddc <next_timeout>:
	return list->head == list;
   18ddc:	4b11      	ldr	r3, [pc, #68]	; (18e24 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   18dde:	b510      	push	{r4, lr}
   18de0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18de2:	429c      	cmp	r4, r3
   18de4:	bf08      	it	eq
   18de6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18de8:	f7ff ffee 	bl	18dc8 <elapsed>
   18dec:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   18dee:	b16c      	cbz	r4, 18e0c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18df0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   18df4:	1ac0      	subs	r0, r0, r3
   18df6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   18dfa:	2801      	cmp	r0, #1
   18dfc:	f173 0200 	sbcs.w	r2, r3, #0
   18e00:	db0d      	blt.n	18e1e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18e02:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   18e06:	f173 0300 	sbcs.w	r3, r3, #0
   18e0a:	db01      	blt.n	18e10 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   18e0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18e10:	4b05      	ldr	r3, [pc, #20]	; (18e28 <next_timeout+0x4c>)
   18e12:	695b      	ldr	r3, [r3, #20]
   18e14:	b113      	cbz	r3, 18e1c <next_timeout+0x40>
   18e16:	4298      	cmp	r0, r3
   18e18:	bfa8      	it	ge
   18e1a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18e1c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   18e1e:	2000      	movs	r0, #0
   18e20:	e7f6      	b.n	18e10 <next_timeout+0x34>
   18e22:	bf00      	nop
   18e24:	20008558 	.word	0x20008558
   18e28:	2000ae1c 	.word	0x2000ae1c

00018e2c <remove_timeout>:
{
   18e2c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   18e2e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18e30:	b168      	cbz	r0, 18e4e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   18e32:	4a0a      	ldr	r2, [pc, #40]	; (18e5c <remove_timeout+0x30>)
   18e34:	6852      	ldr	r2, [r2, #4]
   18e36:	4290      	cmp	r0, r2
   18e38:	d009      	beq.n	18e4e <remove_timeout+0x22>
	if (next(t) != NULL) {
   18e3a:	b143      	cbz	r3, 18e4e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   18e3c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   18e40:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   18e44:	1912      	adds	r2, r2, r4
   18e46:	eb41 0105 	adc.w	r1, r1, r5
   18e4a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   18e4e:	6842      	ldr	r2, [r0, #4]
   18e50:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18e52:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18e54:	2300      	movs	r3, #0
	node->prev = NULL;
   18e56:	e9c0 3300 	strd	r3, r3, [r0]
}
   18e5a:	bd30      	pop	{r4, r5, pc}
   18e5c:	20008558 	.word	0x20008558

00018e60 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18e60:	f1b3 3fff 	cmp.w	r3, #4294967295
   18e64:	bf08      	it	eq
   18e66:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   18e6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18e6e:	4604      	mov	r4, r0
   18e70:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18e72:	f000 808c 	beq.w	18f8e <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18e76:	f06f 0601 	mvn.w	r6, #1
   18e7a:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   18e7e:	1c55      	adds	r5, r2, #1
   18e80:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18e84:	1b73      	subs	r3, r6, r5
   18e86:	eb69 0307 	sbc.w	r3, r9, r7
   18e8a:	2b00      	cmp	r3, #0
   18e8c:	db0d      	blt.n	18eaa <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   18e8e:	f7ff ff9b 	bl	18dc8 <elapsed>
   18e92:	4b44      	ldr	r3, [pc, #272]	; (18fa4 <z_add_timeout+0x144>)
   18e94:	e9d3 2300 	ldrd	r2, r3, [r3]
   18e98:	1ab6      	subs	r6, r6, r2
   18e9a:	eb69 0303 	sbc.w	r3, r9, r3
   18e9e:	1b75      	subs	r5, r6, r5
   18ea0:	eb63 0707 	sbc.w	r7, r3, r7
   18ea4:	1a2d      	subs	r5, r5, r0
   18ea6:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   18eaa:	6823      	ldr	r3, [r4, #0]
   18eac:	b143      	cbz	r3, 18ec0 <z_add_timeout+0x60>
   18eae:	493e      	ldr	r1, [pc, #248]	; (18fa8 <z_add_timeout+0x148>)
   18eb0:	483e      	ldr	r0, [pc, #248]	; (18fac <z_add_timeout+0x14c>)
   18eb2:	2268      	movs	r2, #104	; 0x68
   18eb4:	f000 fe29 	bl	19b0a <printk>
   18eb8:	2168      	movs	r1, #104	; 0x68
   18eba:	483b      	ldr	r0, [pc, #236]	; (18fa8 <z_add_timeout+0x148>)
   18ebc:	f001 f8cb 	bl	1a056 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   18ec0:	2d01      	cmp	r5, #1
   18ec2:	f177 0300 	sbcs.w	r3, r7, #0
   18ec6:	bfbc      	itt	lt
   18ec8:	2501      	movlt	r5, #1
   18eca:	2700      	movlt	r7, #0
	to->fn = fn;
   18ecc:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   18ed0:	f04f 0320 	mov.w	r3, #32
   18ed4:	f3ef 8611 	mrs	r6, BASEPRI
   18ed8:	f383 8811 	msr	BASEPRI, r3
   18edc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18ee0:	4833      	ldr	r0, [pc, #204]	; (18fb0 <z_add_timeout+0x150>)
   18ee2:	f7ff fe29 	bl	18b38 <z_spin_lock_valid>
   18ee6:	b940      	cbnz	r0, 18efa <z_add_timeout+0x9a>
   18ee8:	4932      	ldr	r1, [pc, #200]	; (18fb4 <z_add_timeout+0x154>)
   18eea:	4830      	ldr	r0, [pc, #192]	; (18fac <z_add_timeout+0x14c>)
   18eec:	227c      	movs	r2, #124	; 0x7c
   18eee:	f000 fe0c 	bl	19b0a <printk>
   18ef2:	217c      	movs	r1, #124	; 0x7c
   18ef4:	482f      	ldr	r0, [pc, #188]	; (18fb4 <z_add_timeout+0x154>)
   18ef6:	f001 f8ae 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   18efa:	482d      	ldr	r0, [pc, #180]	; (18fb0 <z_add_timeout+0x150>)
   18efc:	f7ff fe38 	bl	18b70 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   18f00:	f7ff ff62 	bl	18dc8 <elapsed>
	return list->head == list;
   18f04:	4a2c      	ldr	r2, [pc, #176]	; (18fb8 <z_add_timeout+0x158>)
   18f06:	1945      	adds	r5, r0, r5
   18f08:	6813      	ldr	r3, [r2, #0]
   18f0a:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f0e:	4293      	cmp	r3, r2
   18f10:	e9c4 5704 	strd	r5, r7, [r4, #16]
   18f14:	d002      	beq.n	18f1c <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   18f16:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   18f1a:	b933      	cbnz	r3, 18f2a <z_add_timeout+0xca>
	node->prev = list->tail;
   18f1c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   18f1e:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   18f20:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18f22:	6853      	ldr	r3, [r2, #4]
   18f24:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18f26:	6054      	str	r4, [r2, #4]
}
   18f28:	e011      	b.n	18f4e <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   18f2a:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   18f2e:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   18f32:	4281      	cmp	r1, r0
   18f34:	eb75 0e07 	sbcs.w	lr, r5, r7
   18f38:	da2b      	bge.n	18f92 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   18f3a:	1a41      	subs	r1, r0, r1
   18f3c:	eb67 0505 	sbc.w	r5, r7, r5
   18f40:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   18f44:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18f46:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18f4a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18f4c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   18f4e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f50:	4293      	cmp	r3, r2
   18f52:	d00b      	beq.n	18f6c <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18f54:	429c      	cmp	r4, r3
   18f56:	d109      	bne.n	18f6c <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18f58:	f7ff ff40 	bl	18ddc <next_timeout>

			if (next_time == 0 ||
   18f5c:	b118      	cbz	r0, 18f66 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   18f5e:	4b17      	ldr	r3, [pc, #92]	; (18fbc <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   18f60:	695b      	ldr	r3, [r3, #20]
   18f62:	4283      	cmp	r3, r0
   18f64:	d002      	beq.n	18f6c <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   18f66:	2100      	movs	r1, #0
   18f68:	f7f2 fece 	bl	bd08 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f6c:	4810      	ldr	r0, [pc, #64]	; (18fb0 <z_add_timeout+0x150>)
   18f6e:	f7ff fdf1 	bl	18b54 <z_spin_unlock_valid>
   18f72:	b940      	cbnz	r0, 18f86 <z_add_timeout+0x126>
   18f74:	490f      	ldr	r1, [pc, #60]	; (18fb4 <z_add_timeout+0x154>)
   18f76:	480d      	ldr	r0, [pc, #52]	; (18fac <z_add_timeout+0x14c>)
   18f78:	22a7      	movs	r2, #167	; 0xa7
   18f7a:	f000 fdc6 	bl	19b0a <printk>
   18f7e:	21a7      	movs	r1, #167	; 0xa7
   18f80:	480c      	ldr	r0, [pc, #48]	; (18fb4 <z_add_timeout+0x154>)
   18f82:	f001 f868 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   18f86:	f386 8811 	msr	BASEPRI, r6
   18f8a:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   18f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   18f92:	1a09      	subs	r1, r1, r0
   18f94:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   18f98:	4563      	cmp	r3, ip
   18f9a:	e9c4 1504 	strd	r1, r5, [r4, #16]
   18f9e:	d0bd      	beq.n	18f1c <z_add_timeout+0xbc>
   18fa0:	681b      	ldr	r3, [r3, #0]
   18fa2:	e7ba      	b.n	18f1a <z_add_timeout+0xba>
   18fa4:	2000a460 	.word	0x2000a460
   18fa8:	000219d0 	.word	0x000219d0
   18fac:	0001ecfc 	.word	0x0001ecfc
   18fb0:	2000ae6c 	.word	0x2000ae6c
   18fb4:	0001ed36 	.word	0x0001ed36
   18fb8:	20008558 	.word	0x20008558
   18fbc:	2000ae1c 	.word	0x2000ae1c

00018fc0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   18fc0:	b538      	push	{r3, r4, r5, lr}
   18fc2:	4604      	mov	r4, r0
	__asm__ volatile(
   18fc4:	f04f 0320 	mov.w	r3, #32
   18fc8:	f3ef 8511 	mrs	r5, BASEPRI
   18fcc:	f383 8811 	msr	BASEPRI, r3
   18fd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fd4:	4815      	ldr	r0, [pc, #84]	; (1902c <z_abort_timeout+0x6c>)
   18fd6:	f7ff fdaf 	bl	18b38 <z_spin_lock_valid>
   18fda:	b940      	cbnz	r0, 18fee <z_abort_timeout+0x2e>
   18fdc:	4914      	ldr	r1, [pc, #80]	; (19030 <z_abort_timeout+0x70>)
   18fde:	4815      	ldr	r0, [pc, #84]	; (19034 <z_abort_timeout+0x74>)
   18fe0:	227c      	movs	r2, #124	; 0x7c
   18fe2:	f000 fd92 	bl	19b0a <printk>
   18fe6:	217c      	movs	r1, #124	; 0x7c
   18fe8:	4811      	ldr	r0, [pc, #68]	; (19030 <z_abort_timeout+0x70>)
   18fea:	f001 f834 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   18fee:	480f      	ldr	r0, [pc, #60]	; (1902c <z_abort_timeout+0x6c>)
   18ff0:	f7ff fdbe 	bl	18b70 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   18ff4:	6823      	ldr	r3, [r4, #0]
   18ff6:	b1b3      	cbz	r3, 19026 <z_abort_timeout+0x66>
			remove_timeout(to);
   18ff8:	4620      	mov	r0, r4
   18ffa:	f7ff ff17 	bl	18e2c <remove_timeout>
			ret = 0;
   18ffe:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19000:	480a      	ldr	r0, [pc, #40]	; (1902c <z_abort_timeout+0x6c>)
   19002:	f7ff fda7 	bl	18b54 <z_spin_unlock_valid>
   19006:	b940      	cbnz	r0, 1901a <z_abort_timeout+0x5a>
   19008:	4909      	ldr	r1, [pc, #36]	; (19030 <z_abort_timeout+0x70>)
   1900a:	480a      	ldr	r0, [pc, #40]	; (19034 <z_abort_timeout+0x74>)
   1900c:	22a7      	movs	r2, #167	; 0xa7
   1900e:	f000 fd7c 	bl	19b0a <printk>
   19012:	21a7      	movs	r1, #167	; 0xa7
   19014:	4806      	ldr	r0, [pc, #24]	; (19030 <z_abort_timeout+0x70>)
   19016:	f001 f81e 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   1901a:	f385 8811 	msr	BASEPRI, r5
   1901e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   19022:	4620      	mov	r0, r4
   19024:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19026:	f06f 0415 	mvn.w	r4, #21
   1902a:	e7e9      	b.n	19000 <z_abort_timeout+0x40>
   1902c:	2000ae6c 	.word	0x2000ae6c
   19030:	0001ed36 	.word	0x0001ed36
   19034:	0001ecfc 	.word	0x0001ecfc

00019038 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   19038:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1903a:	f04f 0320 	mov.w	r3, #32
   1903e:	f3ef 8511 	mrs	r5, BASEPRI
   19042:	f383 8811 	msr	BASEPRI, r3
   19046:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1904a:	4813      	ldr	r0, [pc, #76]	; (19098 <z_get_next_timeout_expiry+0x60>)
   1904c:	f7ff fd74 	bl	18b38 <z_spin_lock_valid>
   19050:	b940      	cbnz	r0, 19064 <z_get_next_timeout_expiry+0x2c>
   19052:	4912      	ldr	r1, [pc, #72]	; (1909c <z_get_next_timeout_expiry+0x64>)
   19054:	4812      	ldr	r0, [pc, #72]	; (190a0 <z_get_next_timeout_expiry+0x68>)
   19056:	227c      	movs	r2, #124	; 0x7c
   19058:	f000 fd57 	bl	19b0a <printk>
   1905c:	217c      	movs	r1, #124	; 0x7c
   1905e:	480f      	ldr	r0, [pc, #60]	; (1909c <z_get_next_timeout_expiry+0x64>)
   19060:	f000 fff9 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   19064:	480c      	ldr	r0, [pc, #48]	; (19098 <z_get_next_timeout_expiry+0x60>)
   19066:	f7ff fd83 	bl	18b70 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1906a:	f7ff feb7 	bl	18ddc <next_timeout>
   1906e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19070:	4809      	ldr	r0, [pc, #36]	; (19098 <z_get_next_timeout_expiry+0x60>)
   19072:	f7ff fd6f 	bl	18b54 <z_spin_unlock_valid>
   19076:	b940      	cbnz	r0, 1908a <z_get_next_timeout_expiry+0x52>
   19078:	4908      	ldr	r1, [pc, #32]	; (1909c <z_get_next_timeout_expiry+0x64>)
   1907a:	4809      	ldr	r0, [pc, #36]	; (190a0 <z_get_next_timeout_expiry+0x68>)
   1907c:	22a7      	movs	r2, #167	; 0xa7
   1907e:	f000 fd44 	bl	19b0a <printk>
   19082:	21a7      	movs	r1, #167	; 0xa7
   19084:	4805      	ldr	r0, [pc, #20]	; (1909c <z_get_next_timeout_expiry+0x64>)
   19086:	f000 ffe6 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   1908a:	f385 8811 	msr	BASEPRI, r5
   1908e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   19092:	4620      	mov	r0, r4
   19094:	bd38      	pop	{r3, r4, r5, pc}
   19096:	bf00      	nop
   19098:	2000ae6c 	.word	0x2000ae6c
   1909c:	0001ed36 	.word	0x0001ed36
   190a0:	0001ecfc 	.word	0x0001ecfc

000190a4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   190a4:	b570      	push	{r4, r5, r6, lr}
   190a6:	4604      	mov	r4, r0
   190a8:	460d      	mov	r5, r1
	__asm__ volatile(
   190aa:	f04f 0320 	mov.w	r3, #32
   190ae:	f3ef 8611 	mrs	r6, BASEPRI
   190b2:	f383 8811 	msr	BASEPRI, r3
   190b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   190ba:	4816      	ldr	r0, [pc, #88]	; (19114 <z_set_timeout_expiry+0x70>)
   190bc:	f7ff fd3c 	bl	18b38 <z_spin_lock_valid>
   190c0:	b940      	cbnz	r0, 190d4 <z_set_timeout_expiry+0x30>
   190c2:	4915      	ldr	r1, [pc, #84]	; (19118 <z_set_timeout_expiry+0x74>)
   190c4:	4815      	ldr	r0, [pc, #84]	; (1911c <z_set_timeout_expiry+0x78>)
   190c6:	227c      	movs	r2, #124	; 0x7c
   190c8:	f000 fd1f 	bl	19b0a <printk>
   190cc:	217c      	movs	r1, #124	; 0x7c
   190ce:	4812      	ldr	r0, [pc, #72]	; (19118 <z_set_timeout_expiry+0x74>)
   190d0:	f000 ffc1 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   190d4:	480f      	ldr	r0, [pc, #60]	; (19114 <z_set_timeout_expiry+0x70>)
   190d6:	f7ff fd4b 	bl	18b70 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   190da:	f7ff fe7f 	bl	18ddc <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   190de:	2801      	cmp	r0, #1
   190e0:	dd05      	ble.n	190ee <z_set_timeout_expiry+0x4a>
   190e2:	42a0      	cmp	r0, r4
   190e4:	dd03      	ble.n	190ee <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   190e6:	4629      	mov	r1, r5
   190e8:	4620      	mov	r0, r4
   190ea:	f7f2 fe0d 	bl	bd08 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   190ee:	4809      	ldr	r0, [pc, #36]	; (19114 <z_set_timeout_expiry+0x70>)
   190f0:	f7ff fd30 	bl	18b54 <z_spin_unlock_valid>
   190f4:	b940      	cbnz	r0, 19108 <z_set_timeout_expiry+0x64>
   190f6:	4908      	ldr	r1, [pc, #32]	; (19118 <z_set_timeout_expiry+0x74>)
   190f8:	4808      	ldr	r0, [pc, #32]	; (1911c <z_set_timeout_expiry+0x78>)
   190fa:	22a7      	movs	r2, #167	; 0xa7
   190fc:	f000 fd05 	bl	19b0a <printk>
   19100:	21a7      	movs	r1, #167	; 0xa7
   19102:	4805      	ldr	r0, [pc, #20]	; (19118 <z_set_timeout_expiry+0x74>)
   19104:	f000 ffa7 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   19108:	f386 8811 	msr	BASEPRI, r6
   1910c:	f3bf 8f6f 	isb	sy
		}
	}
}
   19110:	bd70      	pop	{r4, r5, r6, pc}
   19112:	bf00      	nop
   19114:	2000ae6c 	.word	0x2000ae6c
   19118:	0001ed36 	.word	0x0001ed36
   1911c:	0001ecfc 	.word	0x0001ecfc

00019120 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   19120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19124:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19126:	f7fe fe61 	bl	17dec <z_time_slice>
	__asm__ volatile(
   1912a:	f04f 0320 	mov.w	r3, #32
   1912e:	f3ef 8511 	mrs	r5, BASEPRI
   19132:	f383 8811 	msr	BASEPRI, r3
   19136:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1913a:	4842      	ldr	r0, [pc, #264]	; (19244 <z_clock_announce+0x124>)
   1913c:	f7ff fcfc 	bl	18b38 <z_spin_lock_valid>
   19140:	b940      	cbnz	r0, 19154 <z_clock_announce+0x34>
   19142:	4941      	ldr	r1, [pc, #260]	; (19248 <z_clock_announce+0x128>)
   19144:	4841      	ldr	r0, [pc, #260]	; (1924c <z_clock_announce+0x12c>)
   19146:	227c      	movs	r2, #124	; 0x7c
   19148:	f000 fcdf 	bl	19b0a <printk>
   1914c:	217c      	movs	r1, #124	; 0x7c
   1914e:	483e      	ldr	r0, [pc, #248]	; (19248 <z_clock_announce+0x128>)
   19150:	f000 ff81 	bl	1a056 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19154:	4f3e      	ldr	r7, [pc, #248]	; (19250 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   19156:	483b      	ldr	r0, [pc, #236]	; (19244 <z_clock_announce+0x124>)
	return list->head == list;
   19158:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 19254 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1915c:	4e3e      	ldr	r6, [pc, #248]	; (19258 <z_clock_announce+0x138>)
   1915e:	f7ff fd07 	bl	18b70 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   19162:	603c      	str	r4, [r7, #0]
   19164:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19168:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1916a:	4544      	cmp	r4, r8
   1916c:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   19170:	e9d6 1e00 	ldrd	r1, lr, [r6]
   19174:	d00b      	beq.n	1918e <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19176:	b154      	cbz	r4, 1918e <z_clock_announce+0x6e>
   19178:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   1917c:	429a      	cmp	r2, r3
   1917e:	eb70 090c 	sbcs.w	r9, r0, ip
   19182:	da23      	bge.n	191cc <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19184:	1a9b      	subs	r3, r3, r2
   19186:	eb6c 0c00 	sbc.w	ip, ip, r0
   1918a:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1918e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   19190:	1852      	adds	r2, r2, r1
   19192:	eb4e 0000 	adc.w	r0, lr, r0
   19196:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   1919a:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   1919c:	f7ff fe1e 	bl	18ddc <next_timeout>
   191a0:	4621      	mov	r1, r4
   191a2:	f7f2 fdb1 	bl	bd08 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   191a6:	4827      	ldr	r0, [pc, #156]	; (19244 <z_clock_announce+0x124>)
   191a8:	f7ff fcd4 	bl	18b54 <z_spin_unlock_valid>
   191ac:	b940      	cbnz	r0, 191c0 <z_clock_announce+0xa0>
   191ae:	4926      	ldr	r1, [pc, #152]	; (19248 <z_clock_announce+0x128>)
   191b0:	4826      	ldr	r0, [pc, #152]	; (1924c <z_clock_announce+0x12c>)
   191b2:	22a7      	movs	r2, #167	; 0xa7
   191b4:	f000 fca9 	bl	19b0a <printk>
   191b8:	21a7      	movs	r1, #167	; 0xa7
   191ba:	4823      	ldr	r0, [pc, #140]	; (19248 <z_clock_announce+0x128>)
   191bc:	f000 ff4b 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   191c0:	f385 8811 	msr	BASEPRI, r5
   191c4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   191c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   191cc:	1859      	adds	r1, r3, r1
   191ce:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   191d2:	1ad3      	subs	r3, r2, r3
   191d4:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   191d6:	2200      	movs	r2, #0
   191d8:	2300      	movs	r3, #0
		curr_tick += dt;
   191da:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   191de:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   191e2:	4620      	mov	r0, r4
   191e4:	f7ff fe22 	bl	18e2c <remove_timeout>
   191e8:	4816      	ldr	r0, [pc, #88]	; (19244 <z_clock_announce+0x124>)
   191ea:	f7ff fcb3 	bl	18b54 <z_spin_unlock_valid>
   191ee:	b940      	cbnz	r0, 19202 <z_clock_announce+0xe2>
   191f0:	4915      	ldr	r1, [pc, #84]	; (19248 <z_clock_announce+0x128>)
   191f2:	4816      	ldr	r0, [pc, #88]	; (1924c <z_clock_announce+0x12c>)
   191f4:	22a7      	movs	r2, #167	; 0xa7
   191f6:	f000 fc88 	bl	19b0a <printk>
   191fa:	21a7      	movs	r1, #167	; 0xa7
   191fc:	4812      	ldr	r0, [pc, #72]	; (19248 <z_clock_announce+0x128>)
   191fe:	f000 ff2a 	bl	1a056 <assert_post_action>
   19202:	f385 8811 	msr	BASEPRI, r5
   19206:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1920a:	4620      	mov	r0, r4
   1920c:	68a3      	ldr	r3, [r4, #8]
   1920e:	4798      	blx	r3
	__asm__ volatile(
   19210:	f04f 0320 	mov.w	r3, #32
   19214:	f3ef 8511 	mrs	r5, BASEPRI
   19218:	f383 8811 	msr	BASEPRI, r3
   1921c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19220:	4808      	ldr	r0, [pc, #32]	; (19244 <z_clock_announce+0x124>)
   19222:	f7ff fc89 	bl	18b38 <z_spin_lock_valid>
   19226:	b940      	cbnz	r0, 1923a <z_clock_announce+0x11a>
   19228:	4907      	ldr	r1, [pc, #28]	; (19248 <z_clock_announce+0x128>)
   1922a:	4808      	ldr	r0, [pc, #32]	; (1924c <z_clock_announce+0x12c>)
   1922c:	227c      	movs	r2, #124	; 0x7c
   1922e:	f000 fc6c 	bl	19b0a <printk>
   19232:	217c      	movs	r1, #124	; 0x7c
   19234:	4804      	ldr	r0, [pc, #16]	; (19248 <z_clock_announce+0x128>)
   19236:	f000 ff0e 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1923a:	4802      	ldr	r0, [pc, #8]	; (19244 <z_clock_announce+0x124>)
   1923c:	f7ff fc98 	bl	18b70 <z_spin_lock_set_owner>
	return k;
   19240:	e790      	b.n	19164 <z_clock_announce+0x44>
   19242:	bf00      	nop
   19244:	2000ae6c 	.word	0x2000ae6c
   19248:	0001ed36 	.word	0x0001ed36
   1924c:	0001ecfc 	.word	0x0001ecfc
   19250:	2000ae68 	.word	0x2000ae68
   19254:	20008558 	.word	0x20008558
   19258:	2000a460 	.word	0x2000a460

0001925c <z_tick_get>:

int64_t z_tick_get(void)
{
   1925c:	b570      	push	{r4, r5, r6, lr}
   1925e:	f04f 0320 	mov.w	r3, #32
   19262:	f3ef 8611 	mrs	r6, BASEPRI
   19266:	f383 8811 	msr	BASEPRI, r3
   1926a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1926e:	4816      	ldr	r0, [pc, #88]	; (192c8 <z_tick_get+0x6c>)
   19270:	f7ff fc62 	bl	18b38 <z_spin_lock_valid>
   19274:	b940      	cbnz	r0, 19288 <z_tick_get+0x2c>
   19276:	4915      	ldr	r1, [pc, #84]	; (192cc <z_tick_get+0x70>)
   19278:	4815      	ldr	r0, [pc, #84]	; (192d0 <z_tick_get+0x74>)
   1927a:	227c      	movs	r2, #124	; 0x7c
   1927c:	f000 fc45 	bl	19b0a <printk>
   19280:	217c      	movs	r1, #124	; 0x7c
   19282:	4812      	ldr	r0, [pc, #72]	; (192cc <z_tick_get+0x70>)
   19284:	f000 fee7 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   19288:	480f      	ldr	r0, [pc, #60]	; (192c8 <z_tick_get+0x6c>)
   1928a:	f7ff fc71 	bl	18b70 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1928e:	f7f2 fd6d 	bl	bd6c <z_clock_elapsed>
   19292:	4b10      	ldr	r3, [pc, #64]	; (192d4 <z_tick_get+0x78>)
   19294:	e9d3 4500 	ldrd	r4, r5, [r3]
   19298:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1929a:	480b      	ldr	r0, [pc, #44]	; (192c8 <z_tick_get+0x6c>)
   1929c:	f145 0500 	adc.w	r5, r5, #0
   192a0:	f7ff fc58 	bl	18b54 <z_spin_unlock_valid>
   192a4:	b940      	cbnz	r0, 192b8 <z_tick_get+0x5c>
   192a6:	4909      	ldr	r1, [pc, #36]	; (192cc <z_tick_get+0x70>)
   192a8:	4809      	ldr	r0, [pc, #36]	; (192d0 <z_tick_get+0x74>)
   192aa:	22a7      	movs	r2, #167	; 0xa7
   192ac:	f000 fc2d 	bl	19b0a <printk>
   192b0:	21a7      	movs	r1, #167	; 0xa7
   192b2:	4806      	ldr	r0, [pc, #24]	; (192cc <z_tick_get+0x70>)
   192b4:	f000 fecf 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   192b8:	f386 8811 	msr	BASEPRI, r6
   192bc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   192c0:	4620      	mov	r0, r4
   192c2:	4629      	mov	r1, r5
   192c4:	bd70      	pop	{r4, r5, r6, pc}
   192c6:	bf00      	nop
   192c8:	2000ae6c 	.word	0x2000ae6c
   192cc:	0001ed36 	.word	0x0001ed36
   192d0:	0001ecfc 	.word	0x0001ecfc
   192d4:	2000a460 	.word	0x2000a460

000192d8 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   192d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   192dc:	6884      	ldr	r4, [r0, #8]
{
   192de:	4605      	mov	r5, r0
   192e0:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   192e2:	b1b4      	cbz	r4, 19312 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   192e4:	7863      	ldrb	r3, [r4, #1]
   192e6:	2b01      	cmp	r3, #1
   192e8:	d145      	bne.n	19376 <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   192ea:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   192ee:	d10a      	bne.n	19306 <signal_poll_event+0x2e>
   192f0:	22e3      	movs	r2, #227	; 0xe3
   192f2:	492d      	ldr	r1, [pc, #180]	; (193a8 <signal_poll_event+0xd0>)
   192f4:	482d      	ldr	r0, [pc, #180]	; (193ac <signal_poll_event+0xd4>)
   192f6:	f000 fc08 	bl	19b0a <printk>
   192fa:	21e3      	movs	r1, #227	; 0xe3
   192fc:	482a      	ldr	r0, [pc, #168]	; (193a8 <signal_poll_event+0xd0>)
   192fe:	f000 feaa 	bl	1a056 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   19302:	7b7b      	ldrb	r3, [r7, #13]
   19304:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   19306:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1930a:	f013 0302 	ands.w	r3, r3, #2
   1930e:	d10a      	bne.n	19326 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   19310:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   19312:	2000      	movs	r0, #0
	event->state |= state;
   19314:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   19316:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   19318:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1931c:	430e      	orrs	r6, r1
   1931e:	f366 3310 	bfi	r3, r6, #12, #5
   19322:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   19324:	e00b      	b.n	1933e <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   19326:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1932a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1932e:	bf08      	it	eq
   19330:	f112 0f02 	cmneq.w	r2, #2
   19334:	d105      	bne.n	19342 <signal_poll_event+0x6a>
		poller->is_polling = false;
   19336:	2300      	movs	r3, #0
		return -EAGAIN;
   19338:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1933c:	7023      	strb	r3, [r4, #0]
}
   1933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   19342:	4638      	mov	r0, r7
   19344:	f7fe fb30 	bl	179a8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   19348:	2e08      	cmp	r6, #8
   1934a:	bf0c      	ite	eq
   1934c:	f06f 0303 	mvneq.w	r3, #3
   19350:	2300      	movne	r3, #0
   19352:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19354:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   19358:	06db      	lsls	r3, r3, #27
   1935a:	d104      	bne.n	19366 <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   1935c:	f854 8c54 	ldr.w	r8, [r4, #-84]
   19360:	f1b8 0f00 	cmp.w	r8, #0
   19364:	d001      	beq.n	1936a <signal_poll_event+0x92>
		poller->is_polling = false;
   19366:	2300      	movs	r3, #0
   19368:	e7d2      	b.n	19310 <signal_poll_event+0x38>
	z_ready_thread(thread);
   1936a:	4638      	mov	r0, r7
   1936c:	f7fe fc36 	bl	17bdc <z_ready_thread>
		poller->is_polling = false;
   19370:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   19374:	e7cd      	b.n	19312 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   19376:	2b02      	cmp	r3, #2
   19378:	d1f5      	bne.n	19366 <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1937a:	7823      	ldrb	r3, [r4, #0]
   1937c:	2b00      	cmp	r3, #0
   1937e:	d0c8      	beq.n	19312 <signal_poll_event+0x3a>
   19380:	f854 7c04 	ldr.w	r7, [r4, #-4]
   19384:	b177      	cbz	r7, 193a4 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   19386:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1938a:	f1a4 0910 	sub.w	r9, r4, #16
   1938e:	f104 0010 	add.w	r0, r4, #16
   19392:	f7ff fe15 	bl	18fc0 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   19396:	4649      	mov	r1, r9
   19398:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1939a:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1939e:	f004 f832 	bl	1d406 <k_work_submit_to_queue>
   193a2:	e7e5      	b.n	19370 <signal_poll_event+0x98>
		poller->is_polling = false;
   193a4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   193a6:	e7b4      	b.n	19312 <signal_poll_event+0x3a>
   193a8:	000219f4 	.word	0x000219f4
   193ac:	0001ecfc 	.word	0x0001ecfc

000193b0 <register_events>:
{
   193b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   193b4:	2600      	movs	r6, #0
{
   193b6:	4614      	mov	r4, r2
   193b8:	4681      	mov	r9, r0
	int events_registered = 0;
   193ba:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   193bc:	f8df a188 	ldr.w	sl, [pc, #392]	; 19548 <register_events+0x198>
   193c0:	4f62      	ldr	r7, [pc, #392]	; (1954c <register_events+0x19c>)
   193c2:	4d63      	ldr	r5, [pc, #396]	; (19550 <register_events+0x1a0>)
{
   193c4:	9100      	str	r1, [sp, #0]
   193c6:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   193c8:	9b00      	ldr	r3, [sp, #0]
   193ca:	429e      	cmp	r6, r3
   193cc:	db03      	blt.n	193d6 <register_events+0x26>
}
   193ce:	4640      	mov	r0, r8
   193d0:	b003      	add	sp, #12
   193d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   193d6:	f04f 0220 	mov.w	r2, #32
   193da:	f3ef 8b11 	mrs	fp, BASEPRI
   193de:	f382 8811 	msr	BASEPRI, r2
   193e2:	f3bf 8f6f 	isb	sy
   193e6:	4650      	mov	r0, sl
   193e8:	f7ff fba6 	bl	18b38 <z_spin_lock_valid>
   193ec:	b940      	cbnz	r0, 19400 <register_events+0x50>
   193ee:	4639      	mov	r1, r7
   193f0:	4628      	mov	r0, r5
   193f2:	227c      	movs	r2, #124	; 0x7c
   193f4:	f000 fb89 	bl	19b0a <printk>
   193f8:	217c      	movs	r1, #124	; 0x7c
   193fa:	4638      	mov	r0, r7
   193fc:	f000 fe2b 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   19400:	4650      	mov	r0, sl
   19402:	f7ff fbb5 	bl	18b70 <z_spin_lock_set_owner>
	switch (event->type) {
   19406:	f899 200d 	ldrb.w	r2, [r9, #13]
   1940a:	f002 020f 	and.w	r2, r2, #15
   1940e:	2a04      	cmp	r2, #4
   19410:	d848      	bhi.n	194a4 <register_events+0xf4>
   19412:	e8df f002 	tbb	[pc, r2]
   19416:	402f      	.short	0x402f
   19418:	4703      	.short	0x4703
   1941a:	2b          	.byte	0x2b
   1941b:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1941c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19420:	6892      	ldr	r2, [r2, #8]
   19422:	b33a      	cbz	r2, 19474 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   19424:	2102      	movs	r1, #2
	event->poller = NULL;
   19426:	2000      	movs	r0, #0
	event->state |= state;
   19428:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1942c:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   19430:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   19434:	ea41 010c 	orr.w	r1, r1, ip
   19438:	f361 3210 	bfi	r2, r1, #12, #5
   1943c:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   19440:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19442:	4650      	mov	r0, sl
   19444:	f7ff fb86 	bl	18b54 <z_spin_unlock_valid>
   19448:	b940      	cbnz	r0, 1945c <register_events+0xac>
   1944a:	4639      	mov	r1, r7
   1944c:	4628      	mov	r0, r5
   1944e:	22a7      	movs	r2, #167	; 0xa7
   19450:	f000 fb5b 	bl	19b0a <printk>
   19454:	21a7      	movs	r1, #167	; 0xa7
   19456:	4638      	mov	r0, r7
   19458:	f000 fdfd 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   1945c:	f38b 8811 	msr	BASEPRI, fp
   19460:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   19464:	3601      	adds	r6, #1
   19466:	f109 0914 	add.w	r9, r9, #20
   1946a:	e7ad      	b.n	193c8 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   1946c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19470:	6812      	ldr	r2, [r2, #0]
   19472:	bb0a      	cbnz	r2, 194b8 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   19474:	9b01      	ldr	r3, [sp, #4]
   19476:	2b00      	cmp	r3, #0
   19478:	d1e3      	bne.n	19442 <register_events+0x92>
   1947a:	7822      	ldrb	r2, [r4, #0]
   1947c:	2a00      	cmp	r2, #0
   1947e:	d0e0      	beq.n	19442 <register_events+0x92>
	switch (event->type) {
   19480:	f899 200d 	ldrb.w	r2, [r9, #13]
   19484:	f002 020f 	and.w	r2, r2, #15
   19488:	2a04      	cmp	r2, #4
   1948a:	d852      	bhi.n	19532 <register_events+0x182>
   1948c:	e8df f002 	tbb	[pc, r2]
   19490:	51164029 	.word	0x51164029
   19494:	2e          	.byte	0x2e
   19495:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   19496:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1949a:	6892      	ldr	r2, [r2, #8]
   1949c:	2a00      	cmp	r2, #0
   1949e:	d0e9      	beq.n	19474 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   194a0:	2101      	movs	r1, #1
   194a2:	e7c0      	b.n	19426 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   194a4:	4628      	mov	r0, r5
   194a6:	2254      	movs	r2, #84	; 0x54
   194a8:	492a      	ldr	r1, [pc, #168]	; (19554 <register_events+0x1a4>)
   194aa:	f000 fb2e 	bl	19b0a <printk>
   194ae:	2154      	movs	r1, #84	; 0x54
   194b0:	4828      	ldr	r0, [pc, #160]	; (19554 <register_events+0x1a4>)
   194b2:	f000 fdd0 	bl	1a056 <assert_post_action>
		break;
   194b6:	e7dd      	b.n	19474 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   194b8:	2104      	movs	r1, #4
   194ba:	e7b4      	b.n	19426 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   194bc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   194c0:	b942      	cbnz	r2, 194d4 <register_events+0x124>
   194c2:	4628      	mov	r0, r5
   194c4:	4923      	ldr	r1, [pc, #140]	; (19554 <register_events+0x1a4>)
   194c6:	227e      	movs	r2, #126	; 0x7e
   194c8:	f000 fb1f 	bl	19b0a <printk>
   194cc:	217e      	movs	r1, #126	; 0x7e
   194ce:	4821      	ldr	r0, [pc, #132]	; (19554 <register_events+0x1a4>)
   194d0:	f000 fdc1 	bl	1a056 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   194d4:	4622      	mov	r2, r4
   194d6:	4649      	mov	r1, r9
   194d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   194dc:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   194de:	f003 ffa6 	bl	1d42e <add_event>
	event->poller = poller;
   194e2:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   194e6:	f108 0801 	add.w	r8, r8, #1
   194ea:	e7aa      	b.n	19442 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   194ec:	f8d9 2010 	ldr.w	r2, [r9, #16]
   194f0:	b942      	cbnz	r2, 19504 <register_events+0x154>
   194f2:	4628      	mov	r0, r5
   194f4:	4917      	ldr	r1, [pc, #92]	; (19554 <register_events+0x1a4>)
   194f6:	2282      	movs	r2, #130	; 0x82
   194f8:	f000 fb07 	bl	19b0a <printk>
   194fc:	2182      	movs	r1, #130	; 0x82
   194fe:	4815      	ldr	r0, [pc, #84]	; (19554 <register_events+0x1a4>)
   19500:	f000 fda9 	bl	1a056 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   19504:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19508:	4622      	mov	r2, r4
   1950a:	4649      	mov	r1, r9
   1950c:	3014      	adds	r0, #20
   1950e:	e7e6      	b.n	194de <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   19510:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19514:	b942      	cbnz	r2, 19528 <register_events+0x178>
   19516:	4628      	mov	r0, r5
   19518:	490e      	ldr	r1, [pc, #56]	; (19554 <register_events+0x1a4>)
   1951a:	2286      	movs	r2, #134	; 0x86
   1951c:	f000 faf5 	bl	19b0a <printk>
   19520:	2186      	movs	r1, #134	; 0x86
   19522:	480c      	ldr	r0, [pc, #48]	; (19554 <register_events+0x1a4>)
   19524:	f000 fd97 	bl	1a056 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   19528:	4622      	mov	r2, r4
   1952a:	4649      	mov	r1, r9
   1952c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19530:	e7d5      	b.n	194de <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   19532:	4628      	mov	r0, r5
   19534:	228d      	movs	r2, #141	; 0x8d
   19536:	4907      	ldr	r1, [pc, #28]	; (19554 <register_events+0x1a4>)
   19538:	f000 fae7 	bl	19b0a <printk>
   1953c:	218d      	movs	r1, #141	; 0x8d
   1953e:	4805      	ldr	r0, [pc, #20]	; (19554 <register_events+0x1a4>)
   19540:	f000 fd89 	bl	1a056 <assert_post_action>
		break;
   19544:	e7cd      	b.n	194e2 <register_events+0x132>
   19546:	bf00      	nop
   19548:	2000ae70 	.word	0x2000ae70
   1954c:	0001ed36 	.word	0x0001ed36
   19550:	0001ecfc 	.word	0x0001ecfc
   19554:	000219f4 	.word	0x000219f4

00019558 <clear_event_registrations>:
{
   19558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1955c:	2414      	movs	r4, #20
   1955e:	4617      	mov	r7, r2
	while (num_events--) {
   19560:	460e      	mov	r6, r1
   19562:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   19566:	4d3d      	ldr	r5, [pc, #244]	; (1965c <clear_event_registrations+0x104>)
   19568:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 19660 <clear_event_registrations+0x108>
   1956c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 19664 <clear_event_registrations+0x10c>
	while (num_events--) {
   19570:	b90e      	cbnz	r6, 19576 <clear_event_registrations+0x1e>
}
   19572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   19576:	2300      	movs	r3, #0
   19578:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1957c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   19580:	f1a4 0a14 	sub.w	sl, r4, #20
   19584:	f003 030f 	and.w	r3, r3, #15
   19588:	2b04      	cmp	r3, #4
   1958a:	d831      	bhi.n	195f0 <clear_event_registrations+0x98>
   1958c:	e8df f003 	tbb	[pc, r3]
   19590:	30032539 	.word	0x30032539
   19594:	1a          	.byte	0x1a
   19595:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   19596:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1959a:	b943      	cbnz	r3, 195ae <clear_event_registrations+0x56>
   1959c:	4629      	mov	r1, r5
   1959e:	229d      	movs	r2, #157	; 0x9d
   195a0:	4640      	mov	r0, r8
   195a2:	f000 fab2 	bl	19b0a <printk>
   195a6:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   195a8:	4628      	mov	r0, r5
   195aa:	f000 fd54 	bl	1a056 <assert_post_action>
	return node->next != NULL;
   195ae:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   195b2:	b333      	cbz	r3, 19602 <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   195b4:	f854 2c10 	ldr.w	r2, [r4, #-16]
   195b8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   195ba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   195bc:	2300      	movs	r3, #0
	node->prev = NULL;
   195be:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   195c2:	e01e      	b.n	19602 <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   195c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   195c8:	2b00      	cmp	r3, #0
   195ca:	d1f0      	bne.n	195ae <clear_event_registrations+0x56>
   195cc:	4629      	mov	r1, r5
   195ce:	22a1      	movs	r2, #161	; 0xa1
   195d0:	4640      	mov	r0, r8
   195d2:	f000 fa9a 	bl	19b0a <printk>
   195d6:	21a1      	movs	r1, #161	; 0xa1
   195d8:	e7e6      	b.n	195a8 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   195da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   195de:	2b00      	cmp	r3, #0
   195e0:	d1e5      	bne.n	195ae <clear_event_registrations+0x56>
   195e2:	4629      	mov	r1, r5
   195e4:	22a5      	movs	r2, #165	; 0xa5
   195e6:	4640      	mov	r0, r8
   195e8:	f000 fa8f 	bl	19b0a <printk>
   195ec:	21a5      	movs	r1, #165	; 0xa5
   195ee:	e7db      	b.n	195a8 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   195f0:	4629      	mov	r1, r5
   195f2:	4640      	mov	r0, r8
   195f4:	22ac      	movs	r2, #172	; 0xac
   195f6:	f000 fa88 	bl	19b0a <printk>
   195fa:	21ac      	movs	r1, #172	; 0xac
   195fc:	4628      	mov	r0, r5
   195fe:	f000 fd2a 	bl	1a056 <assert_post_action>
   19602:	4648      	mov	r0, r9
   19604:	f7ff faa6 	bl	18b54 <z_spin_unlock_valid>
   19608:	b940      	cbnz	r0, 1961c <clear_event_registrations+0xc4>
   1960a:	4640      	mov	r0, r8
   1960c:	4916      	ldr	r1, [pc, #88]	; (19668 <clear_event_registrations+0x110>)
   1960e:	22a7      	movs	r2, #167	; 0xa7
   19610:	f000 fa7b 	bl	19b0a <printk>
   19614:	21a7      	movs	r1, #167	; 0xa7
   19616:	4814      	ldr	r0, [pc, #80]	; (19668 <clear_event_registrations+0x110>)
   19618:	f000 fd1d 	bl	1a056 <assert_post_action>
   1961c:	f387 8811 	msr	BASEPRI, r7
   19620:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19624:	f04f 0320 	mov.w	r3, #32
   19628:	f3ef 8711 	mrs	r7, BASEPRI
   1962c:	f383 8811 	msr	BASEPRI, r3
   19630:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19634:	4648      	mov	r0, r9
   19636:	f7ff fa7f 	bl	18b38 <z_spin_lock_valid>
   1963a:	b940      	cbnz	r0, 1964e <clear_event_registrations+0xf6>
   1963c:	4640      	mov	r0, r8
   1963e:	490a      	ldr	r1, [pc, #40]	; (19668 <clear_event_registrations+0x110>)
   19640:	227c      	movs	r2, #124	; 0x7c
   19642:	f000 fa62 	bl	19b0a <printk>
   19646:	217c      	movs	r1, #124	; 0x7c
   19648:	4807      	ldr	r0, [pc, #28]	; (19668 <clear_event_registrations+0x110>)
   1964a:	f000 fd04 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1964e:	4648      	mov	r0, r9
   19650:	f7ff fa8e 	bl	18b70 <z_spin_lock_set_owner>
	return k;
   19654:	4654      	mov	r4, sl
   19656:	3e01      	subs	r6, #1
   19658:	e78a      	b.n	19570 <clear_event_registrations+0x18>
   1965a:	bf00      	nop
   1965c:	000219f4 	.word	0x000219f4
   19660:	0001ecfc 	.word	0x0001ecfc
   19664:	2000ae70 	.word	0x2000ae70
   19668:	0001ed36 	.word	0x0001ed36

0001966c <k_poll_event_init>:
{
   1966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1966e:	4605      	mov	r5, r0
   19670:	460f      	mov	r7, r1
   19672:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   19674:	4614      	mov	r4, r2
   19676:	b142      	cbz	r2, 1968a <k_poll_event_init+0x1e>
   19678:	4915      	ldr	r1, [pc, #84]	; (196d0 <k_poll_event_init+0x64>)
   1967a:	4816      	ldr	r0, [pc, #88]	; (196d4 <k_poll_event_init+0x68>)
   1967c:	222d      	movs	r2, #45	; 0x2d
   1967e:	f000 fa44 	bl	19b0a <printk>
   19682:	212d      	movs	r1, #45	; 0x2d
   19684:	4812      	ldr	r0, [pc, #72]	; (196d0 <k_poll_event_init+0x64>)
   19686:	f000 fce6 	bl	1a056 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1968a:	2f0f      	cmp	r7, #15
   1968c:	d908      	bls.n	196a0 <k_poll_event_init+0x34>
   1968e:	4910      	ldr	r1, [pc, #64]	; (196d0 <k_poll_event_init+0x64>)
   19690:	4810      	ldr	r0, [pc, #64]	; (196d4 <k_poll_event_init+0x68>)
   19692:	222f      	movs	r2, #47	; 0x2f
   19694:	f000 fa39 	bl	19b0a <printk>
   19698:	212f      	movs	r1, #47	; 0x2f
   1969a:	480d      	ldr	r0, [pc, #52]	; (196d0 <k_poll_event_init+0x64>)
   1969c:	f000 fcdb 	bl	1a056 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   196a0:	b946      	cbnz	r6, 196b4 <k_poll_event_init+0x48>
   196a2:	490b      	ldr	r1, [pc, #44]	; (196d0 <k_poll_event_init+0x64>)
   196a4:	480b      	ldr	r0, [pc, #44]	; (196d4 <k_poll_event_init+0x68>)
   196a6:	2230      	movs	r2, #48	; 0x30
   196a8:	f000 fa2f 	bl	19b0a <printk>
   196ac:	2130      	movs	r1, #48	; 0x30
   196ae:	4808      	ldr	r0, [pc, #32]	; (196d0 <k_poll_event_init+0x64>)
   196b0:	f000 fcd1 	bl	1a056 <assert_post_action>
	event->poller = NULL;
   196b4:	2300      	movs	r3, #0
	event->type = type;
   196b6:	0464      	lsls	r4, r4, #17
   196b8:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   196ba:	60ab      	str	r3, [r5, #8]
	event->type = type;
   196bc:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   196c0:	7b2b      	ldrb	r3, [r5, #12]
   196c2:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   196c6:	433c      	orrs	r4, r7
   196c8:	431c      	orrs	r4, r3
	event->obj = obj;
   196ca:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   196ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196d0:	000219f4 	.word	0x000219f4
   196d4:	0001ecfc 	.word	0x0001ecfc

000196d8 <z_impl_k_poll>:
{
   196d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   196dc:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   196de:	4b64      	ldr	r3, [pc, #400]	; (19870 <z_impl_k_poll+0x198>)
{
   196e0:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   196e2:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   196e4:	2301      	movs	r3, #1
{
   196e6:	4688      	mov	r8, r1
   196e8:	4616      	mov	r6, r2
   196ea:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   196ec:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   196f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   196f4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   196f8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   196fc:	b153      	cbz	r3, 19714 <z_impl_k_poll+0x3c>
   196fe:	495d      	ldr	r1, [pc, #372]	; (19874 <z_impl_k_poll+0x19c>)
   19700:	485d      	ldr	r0, [pc, #372]	; (19878 <z_impl_k_poll+0x1a0>)
   19702:	f44f 7282 	mov.w	r2, #260	; 0x104
   19706:	f000 fa00 	bl	19b0a <printk>
   1970a:	f44f 7182 	mov.w	r1, #260	; 0x104
   1970e:	4859      	ldr	r0, [pc, #356]	; (19874 <z_impl_k_poll+0x19c>)
   19710:	f000 fca1 	bl	1a056 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   19714:	b954      	cbnz	r4, 1972c <z_impl_k_poll+0x54>
   19716:	4957      	ldr	r1, [pc, #348]	; (19874 <z_impl_k_poll+0x19c>)
   19718:	4857      	ldr	r0, [pc, #348]	; (19878 <z_impl_k_poll+0x1a0>)
   1971a:	f240 1205 	movw	r2, #261	; 0x105
   1971e:	f000 f9f4 	bl	19b0a <printk>
   19722:	f240 1105 	movw	r1, #261	; 0x105
   19726:	4853      	ldr	r0, [pc, #332]	; (19874 <z_impl_k_poll+0x19c>)
   19728:	f000 fc95 	bl	1a056 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1972c:	f1b8 0f00 	cmp.w	r8, #0
   19730:	da0a      	bge.n	19748 <z_impl_k_poll+0x70>
   19732:	4950      	ldr	r1, [pc, #320]	; (19874 <z_impl_k_poll+0x19c>)
   19734:	4850      	ldr	r0, [pc, #320]	; (19878 <z_impl_k_poll+0x1a0>)
   19736:	f44f 7283 	mov.w	r2, #262	; 0x106
   1973a:	f000 f9e6 	bl	19b0a <printk>
   1973e:	f44f 7183 	mov.w	r1, #262	; 0x106
   19742:	484c      	ldr	r0, [pc, #304]	; (19874 <z_impl_k_poll+0x19c>)
   19744:	f000 fc87 	bl	1a056 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   19748:	ea56 0305 	orrs.w	r3, r6, r5
   1974c:	bf0c      	ite	eq
   1974e:	2301      	moveq	r3, #1
   19750:	2300      	movne	r3, #0
   19752:	4641      	mov	r1, r8
   19754:	464a      	mov	r2, r9
   19756:	4620      	mov	r0, r4
   19758:	f7ff fe2a 	bl	193b0 <register_events>
   1975c:	4680      	mov	r8, r0
   1975e:	f04f 0320 	mov.w	r3, #32
   19762:	f3ef 8911 	mrs	r9, BASEPRI
   19766:	f383 8811 	msr	BASEPRI, r3
   1976a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1976e:	4843      	ldr	r0, [pc, #268]	; (1987c <z_impl_k_poll+0x1a4>)
   19770:	f7ff f9e2 	bl	18b38 <z_spin_lock_valid>
   19774:	b940      	cbnz	r0, 19788 <z_impl_k_poll+0xb0>
   19776:	4942      	ldr	r1, [pc, #264]	; (19880 <z_impl_k_poll+0x1a8>)
   19778:	483f      	ldr	r0, [pc, #252]	; (19878 <z_impl_k_poll+0x1a0>)
   1977a:	227c      	movs	r2, #124	; 0x7c
   1977c:	f000 f9c5 	bl	19b0a <printk>
   19780:	217c      	movs	r1, #124	; 0x7c
   19782:	483f      	ldr	r0, [pc, #252]	; (19880 <z_impl_k_poll+0x1a8>)
   19784:	f000 fc67 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   19788:	483c      	ldr	r0, [pc, #240]	; (1987c <z_impl_k_poll+0x1a4>)
   1978a:	f7ff f9f1 	bl	18b70 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1978e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   19792:	b9d3      	cbnz	r3, 197ca <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   19794:	4620      	mov	r0, r4
   19796:	464a      	mov	r2, r9
   19798:	4641      	mov	r1, r8
   1979a:	f7ff fedd 	bl	19558 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1979e:	4837      	ldr	r0, [pc, #220]	; (1987c <z_impl_k_poll+0x1a4>)
   197a0:	f7ff f9d8 	bl	18b54 <z_spin_unlock_valid>
   197a4:	b940      	cbnz	r0, 197b8 <z_impl_k_poll+0xe0>
   197a6:	4936      	ldr	r1, [pc, #216]	; (19880 <z_impl_k_poll+0x1a8>)
   197a8:	4833      	ldr	r0, [pc, #204]	; (19878 <z_impl_k_poll+0x1a0>)
   197aa:	22a7      	movs	r2, #167	; 0xa7
   197ac:	f000 f9ad 	bl	19b0a <printk>
   197b0:	21a7      	movs	r1, #167	; 0xa7
   197b2:	4833      	ldr	r0, [pc, #204]	; (19880 <z_impl_k_poll+0x1a8>)
   197b4:	f000 fc4f 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   197b8:	f389 8811 	msr	BASEPRI, r9
   197bc:	f3bf 8f6f 	isb	sy
		return 0;
   197c0:	2500      	movs	r5, #0
}
   197c2:	4628      	mov	r0, r5
   197c4:	b005      	add	sp, #20
   197c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   197ca:	2300      	movs	r3, #0
   197cc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   197d0:	ea56 0305 	orrs.w	r3, r6, r5
   197d4:	d113      	bne.n	197fe <z_impl_k_poll+0x126>
   197d6:	4829      	ldr	r0, [pc, #164]	; (1987c <z_impl_k_poll+0x1a4>)
   197d8:	f7ff f9bc 	bl	18b54 <z_spin_unlock_valid>
   197dc:	b940      	cbnz	r0, 197f0 <z_impl_k_poll+0x118>
   197de:	4928      	ldr	r1, [pc, #160]	; (19880 <z_impl_k_poll+0x1a8>)
   197e0:	4825      	ldr	r0, [pc, #148]	; (19878 <z_impl_k_poll+0x1a0>)
   197e2:	22a7      	movs	r2, #167	; 0xa7
   197e4:	f000 f991 	bl	19b0a <printk>
   197e8:	21a7      	movs	r1, #167	; 0xa7
   197ea:	4825      	ldr	r0, [pc, #148]	; (19880 <z_impl_k_poll+0x1a8>)
   197ec:	f000 fc33 	bl	1a056 <assert_post_action>
   197f0:	f389 8811 	msr	BASEPRI, r9
   197f4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   197f8:	f06f 050a 	mvn.w	r5, #10
   197fc:	e7e1      	b.n	197c2 <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   197fe:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19802:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19804:	4649      	mov	r1, r9
   19806:	481d      	ldr	r0, [pc, #116]	; (1987c <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19808:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1980c:	f7fe fd50 	bl	182b0 <z_pend_curr>
   19810:	4605      	mov	r5, r0
	__asm__ volatile(
   19812:	f04f 0320 	mov.w	r3, #32
   19816:	f3ef 8611 	mrs	r6, BASEPRI
   1981a:	f383 8811 	msr	BASEPRI, r3
   1981e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19822:	4816      	ldr	r0, [pc, #88]	; (1987c <z_impl_k_poll+0x1a4>)
   19824:	f7ff f988 	bl	18b38 <z_spin_lock_valid>
   19828:	b940      	cbnz	r0, 1983c <z_impl_k_poll+0x164>
   1982a:	4915      	ldr	r1, [pc, #84]	; (19880 <z_impl_k_poll+0x1a8>)
   1982c:	4812      	ldr	r0, [pc, #72]	; (19878 <z_impl_k_poll+0x1a0>)
   1982e:	227c      	movs	r2, #124	; 0x7c
   19830:	f000 f96b 	bl	19b0a <printk>
   19834:	217c      	movs	r1, #124	; 0x7c
   19836:	4812      	ldr	r0, [pc, #72]	; (19880 <z_impl_k_poll+0x1a8>)
   19838:	f000 fc0d 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   1983c:	480f      	ldr	r0, [pc, #60]	; (1987c <z_impl_k_poll+0x1a4>)
   1983e:	f7ff f997 	bl	18b70 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   19842:	4620      	mov	r0, r4
   19844:	4632      	mov	r2, r6
   19846:	4641      	mov	r1, r8
   19848:	f7ff fe86 	bl	19558 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1984c:	480b      	ldr	r0, [pc, #44]	; (1987c <z_impl_k_poll+0x1a4>)
   1984e:	f7ff f981 	bl	18b54 <z_spin_unlock_valid>
   19852:	b940      	cbnz	r0, 19866 <z_impl_k_poll+0x18e>
   19854:	490a      	ldr	r1, [pc, #40]	; (19880 <z_impl_k_poll+0x1a8>)
   19856:	4808      	ldr	r0, [pc, #32]	; (19878 <z_impl_k_poll+0x1a0>)
   19858:	22a7      	movs	r2, #167	; 0xa7
   1985a:	f000 f956 	bl	19b0a <printk>
   1985e:	21a7      	movs	r1, #167	; 0xa7
   19860:	4807      	ldr	r0, [pc, #28]	; (19880 <z_impl_k_poll+0x1a8>)
   19862:	f000 fbf8 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   19866:	f386 8811 	msr	BASEPRI, r6
   1986a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1986e:	e7a8      	b.n	197c2 <z_impl_k_poll+0xea>
   19870:	2000ae1c 	.word	0x2000ae1c
   19874:	000219f4 	.word	0x000219f4
   19878:	0001ecfc 	.word	0x0001ecfc
   1987c:	2000ae70 	.word	0x2000ae70
   19880:	0001ed36 	.word	0x0001ed36

00019884 <z_impl_k_poll_signal_raise>:
{
   19884:	b570      	push	{r4, r5, r6, lr}
   19886:	4604      	mov	r4, r0
   19888:	460d      	mov	r5, r1
	__asm__ volatile(
   1988a:	f04f 0320 	mov.w	r3, #32
   1988e:	f3ef 8611 	mrs	r6, BASEPRI
   19892:	f383 8811 	msr	BASEPRI, r3
   19896:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1989a:	481c      	ldr	r0, [pc, #112]	; (1990c <z_impl_k_poll_signal_raise+0x88>)
   1989c:	f7ff f94c 	bl	18b38 <z_spin_lock_valid>
   198a0:	b940      	cbnz	r0, 198b4 <z_impl_k_poll_signal_raise+0x30>
   198a2:	491b      	ldr	r1, [pc, #108]	; (19910 <z_impl_k_poll_signal_raise+0x8c>)
   198a4:	481b      	ldr	r0, [pc, #108]	; (19914 <z_impl_k_poll_signal_raise+0x90>)
   198a6:	227c      	movs	r2, #124	; 0x7c
   198a8:	f000 f92f 	bl	19b0a <printk>
   198ac:	217c      	movs	r1, #124	; 0x7c
   198ae:	4818      	ldr	r0, [pc, #96]	; (19910 <z_impl_k_poll_signal_raise+0x8c>)
   198b0:	f000 fbd1 	bl	1a056 <assert_post_action>
	z_spin_lock_set_owner(l);
   198b4:	4815      	ldr	r0, [pc, #84]	; (1990c <z_impl_k_poll_signal_raise+0x88>)
   198b6:	f7ff f95b 	bl	18b70 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   198ba:	2101      	movs	r1, #1
	return list->head == list;
   198bc:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   198be:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   198c0:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   198c2:	60a1      	str	r1, [r4, #8]
   198c4:	d112      	bne.n	198ec <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   198c6:	4811      	ldr	r0, [pc, #68]	; (1990c <z_impl_k_poll_signal_raise+0x88>)
   198c8:	f7ff f944 	bl	18b54 <z_spin_unlock_valid>
   198cc:	b940      	cbnz	r0, 198e0 <z_impl_k_poll_signal_raise+0x5c>
   198ce:	4910      	ldr	r1, [pc, #64]	; (19910 <z_impl_k_poll_signal_raise+0x8c>)
   198d0:	4810      	ldr	r0, [pc, #64]	; (19914 <z_impl_k_poll_signal_raise+0x90>)
   198d2:	22a7      	movs	r2, #167	; 0xa7
   198d4:	f000 f919 	bl	19b0a <printk>
   198d8:	21a7      	movs	r1, #167	; 0xa7
   198da:	480d      	ldr	r0, [pc, #52]	; (19910 <z_impl_k_poll_signal_raise+0x8c>)
   198dc:	f000 fbbb 	bl	1a056 <assert_post_action>
	__asm__ volatile(
   198e0:	f386 8811 	msr	BASEPRI, r6
   198e4:	f3bf 8f6f 	isb	sy
		return 0;
   198e8:	2400      	movs	r4, #0
   198ea:	e00d      	b.n	19908 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   198ec:	e9d0 3200 	ldrd	r3, r2, [r0]
   198f0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   198f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   198f4:	2300      	movs	r3, #0
	node->prev = NULL;
   198f6:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   198fa:	f7ff fced 	bl	192d8 <signal_poll_event>
	z_reschedule(&lock, key);
   198fe:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19900:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   19902:	4802      	ldr	r0, [pc, #8]	; (1990c <z_impl_k_poll_signal_raise+0x88>)
   19904:	f7fd ff96 	bl	17834 <z_reschedule>
}
   19908:	4620      	mov	r0, r4
   1990a:	bd70      	pop	{r4, r5, r6, pc}
   1990c:	2000ae70 	.word	0x2000ae70
   19910:	0001ed36 	.word	0x0001ed36
   19914:	0001ecfc 	.word	0x0001ecfc

00019918 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   19918:	2803      	cmp	r0, #3
{
   1991a:	b538      	push	{r3, r4, r5, lr}
   1991c:	4604      	mov	r4, r0
   1991e:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   19920:	d901      	bls.n	19926 <k_aligned_alloc+0xe>
   19922:	0783      	lsls	r3, r0, #30
   19924:	d008      	beq.n	19938 <k_aligned_alloc+0x20>
   19926:	490e      	ldr	r1, [pc, #56]	; (19960 <k_aligned_alloc+0x48>)
   19928:	480e      	ldr	r0, [pc, #56]	; (19964 <k_aligned_alloc+0x4c>)
   1992a:	223e      	movs	r2, #62	; 0x3e
   1992c:	f000 f8ed 	bl	19b0a <printk>
   19930:	213e      	movs	r1, #62	; 0x3e
   19932:	480b      	ldr	r0, [pc, #44]	; (19960 <k_aligned_alloc+0x48>)
   19934:	f000 fb8f 	bl	1a056 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   19938:	1e63      	subs	r3, r4, #1
   1993a:	4223      	tst	r3, r4
   1993c:	d008      	beq.n	19950 <k_aligned_alloc+0x38>
   1993e:	4908      	ldr	r1, [pc, #32]	; (19960 <k_aligned_alloc+0x48>)
   19940:	4808      	ldr	r0, [pc, #32]	; (19964 <k_aligned_alloc+0x4c>)
   19942:	2242      	movs	r2, #66	; 0x42
   19944:	f000 f8e1 	bl	19b0a <printk>
   19948:	2142      	movs	r1, #66	; 0x42
   1994a:	4805      	ldr	r0, [pc, #20]	; (19960 <k_aligned_alloc+0x48>)
   1994c:	f000 fb83 	bl	1a056 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   19950:	462a      	mov	r2, r5
   19952:	4621      	mov	r1, r4
}
   19954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   19958:	4803      	ldr	r0, [pc, #12]	; (19968 <k_aligned_alloc+0x50>)
   1995a:	f003 bda8 	b.w	1d4ae <z_heap_aligned_alloc>
   1995e:	bf00      	nop
   19960:	00021a15 	.word	0x00021a15
   19964:	0001ecfc 	.word	0x0001ecfc
   19968:	20008640 	.word	0x20008640

0001996c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1996c:	b538      	push	{r3, r4, r5, lr}
   1996e:	4604      	mov	r4, r0
   19970:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   19972:	f003 fcaf 	bl	1d2d4 <k_is_in_isr>
   19976:	b958      	cbnz	r0, 19990 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   19978:	4b07      	ldr	r3, [pc, #28]	; (19998 <z_thread_aligned_alloc+0x2c>)
   1997a:	689b      	ldr	r3, [r3, #8]
   1997c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   19980:	b143      	cbz	r3, 19994 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   19982:	462a      	mov	r2, r5
   19984:	4621      	mov	r1, r4
   19986:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   19988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1998c:	f003 bd8f 	b.w	1d4ae <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   19990:	4b02      	ldr	r3, [pc, #8]	; (1999c <z_thread_aligned_alloc+0x30>)
   19992:	e7f6      	b.n	19982 <z_thread_aligned_alloc+0x16>
}
   19994:	bd38      	pop	{r3, r4, r5, pc}
   19996:	bf00      	nop
   19998:	2000ae1c 	.word	0x2000ae1c
   1999c:	20008640 	.word	0x20008640

000199a0 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   199a0:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   199a2:	2003      	movs	r0, #3
   199a4:	f7fc b9ee 	b.w	15d84 <dk_set_led>

000199a8 <_ZN13deviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   199a8:	f7ef bdca 	b.w	9540 <_ZN13deviceManager8initScanEv>

000199ac <_ZN13deviceManager14checkAddressesEPcS0_>:
	}
}

bool deviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   199ac:	2300      	movs	r3, #0
{
   199ae:	b530      	push	{r4, r5, lr}
   199b0:	1e42      	subs	r2, r0, #1
   199b2:	3901      	subs	r1, #1
   199b4:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   199b6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   199ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   199be:	42a5      	cmp	r5, r4
		{
			cnt++;
   199c0:	bf04      	itt	eq
   199c2:	3301      	addeq	r3, #1
   199c4:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   199c6:	4282      	cmp	r2, r0
   199c8:	d1f5      	bne.n	199b6 <_ZN13deviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   199ca:	3b11      	subs	r3, #17
   199cc:	4258      	negs	r0, r3
   199ce:	4158      	adcs	r0, r3
   199d0:	bd30      	pop	{r4, r5, pc}

000199d2 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   199d2:	f001 bd8e 	b.w	1b4f2 <bt_conn_get_dst>

000199d6 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   199d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   199d8:	2364      	movs	r3, #100	; 0x64
{
   199da:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   199dc:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   199de:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   199e0:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   199e4:	b111      	cbz	r1, 199ec <u8_to_dec+0x16>
   199e6:	3d01      	subs	r5, #1
   199e8:	d101      	bne.n	199ee <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   199ea:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   199ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   199ee:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   199f2:	429a      	cmp	r2, r3
		digit = value / divisor;
   199f4:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   199f6:	d202      	bcs.n	199fe <u8_to_dec+0x28>
   199f8:	2b01      	cmp	r3, #1
   199fa:	d000      	beq.n	199fe <u8_to_dec+0x28>
   199fc:	b130      	cbz	r0, 19a0c <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   199fe:	3630      	adds	r6, #48	; 0x30
			buflen--;
   19a00:	3901      	subs	r1, #1
			num_digits++;
   19a02:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   19a04:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   19a08:	b2c9      	uxtb	r1, r1
			num_digits++;
   19a0a:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   19a0c:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   19a10:	fbb3 f3fc 	udiv	r3, r3, ip
   19a14:	b2d2      	uxtb	r2, r2
   19a16:	e7e5      	b.n	199e4 <u8_to_dec+0xe>

00019a18 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   19a18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19a1c:	b2db      	uxtb	r3, r3
   19a1e:	2b09      	cmp	r3, #9
   19a20:	d802      	bhi.n	19a28 <char2hex+0x10>
		*x = c - '0';
   19a22:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   19a24:	2000      	movs	r0, #0
   19a26:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   19a28:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19a2c:	2b05      	cmp	r3, #5
   19a2e:	d802      	bhi.n	19a36 <char2hex+0x1e>
		*x = c - 'a' + 10;
   19a30:	3857      	subs	r0, #87	; 0x57
   19a32:	7008      	strb	r0, [r1, #0]
   19a34:	e7f6      	b.n	19a24 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   19a36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19a3a:	2b05      	cmp	r3, #5
   19a3c:	d801      	bhi.n	19a42 <char2hex+0x2a>
		*x = c - 'A' + 10;
   19a3e:	3837      	subs	r0, #55	; 0x37
   19a40:	e7f7      	b.n	19a32 <char2hex+0x1a>
		return -EINVAL;
   19a42:	f06f 0015 	mvn.w	r0, #21
}
   19a46:	4770      	bx	lr

00019a48 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   19a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19a4a:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   19a4c:	f001 0001 	and.w	r0, r1, #1
   19a50:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   19a54:	429d      	cmp	r5, r3
   19a56:	ea4f 0651 	mov.w	r6, r1, lsr #1
   19a5a:	d903      	bls.n	19a64 <hex2bin+0x1c>
		return 0;
   19a5c:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   19a5e:	4628      	mov	r0, r5
   19a60:	b003      	add	sp, #12
   19a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   19a64:	b158      	cbz	r0, 19a7e <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   19a66:	7820      	ldrb	r0, [r4, #0]
   19a68:	f10d 0107 	add.w	r1, sp, #7
   19a6c:	f7ff ffd4 	bl	19a18 <char2hex>
   19a70:	2800      	cmp	r0, #0
   19a72:	dbf3      	blt.n	19a5c <hex2bin+0x14>
		buf[0] = dec;
   19a74:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   19a78:	3401      	adds	r4, #1
		buf[0] = dec;
   19a7a:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   19a7e:	3401      	adds	r4, #1
   19a80:	4416      	add	r6, r2
   19a82:	42b2      	cmp	r2, r6
   19a84:	d0eb      	beq.n	19a5e <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   19a86:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   19a8a:	f10d 0107 	add.w	r1, sp, #7
   19a8e:	f7ff ffc3 	bl	19a18 <char2hex>
   19a92:	2800      	cmp	r0, #0
   19a94:	dbe2      	blt.n	19a5c <hex2bin+0x14>
		buf[i] = dec << 4;
   19a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19a9a:	011b      	lsls	r3, r3, #4
   19a9c:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   19a9e:	f814 0b02 	ldrb.w	r0, [r4], #2
   19aa2:	f7ff ffb9 	bl	19a18 <char2hex>
   19aa6:	2800      	cmp	r0, #0
   19aa8:	dbd8      	blt.n	19a5c <hex2bin+0x14>
		buf[i] += dec;
   19aaa:	7813      	ldrb	r3, [r2, #0]
   19aac:	f89d 1007 	ldrb.w	r1, [sp, #7]
   19ab0:	440b      	add	r3, r1
   19ab2:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   19ab6:	e7e4      	b.n	19a82 <hex2bin+0x3a>

00019ab8 <sys_notify_validate>:
	if (notify == NULL) {
   19ab8:	4603      	mov	r3, r0
   19aba:	b140      	cbz	r0, 19ace <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19abc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19abe:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   19ac2:	2a02      	cmp	r2, #2
   19ac4:	d006      	beq.n	19ad4 <sys_notify_validate+0x1c>
   19ac6:	2a03      	cmp	r2, #3
   19ac8:	d004      	beq.n	19ad4 <sys_notify_validate+0x1c>
   19aca:	2a01      	cmp	r2, #1
   19acc:	d005      	beq.n	19ada <sys_notify_validate+0x22>
		return -EINVAL;
   19ace:	f06f 0015 	mvn.w	r0, #21
}
   19ad2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   19ad4:	681a      	ldr	r2, [r3, #0]
   19ad6:	2a00      	cmp	r2, #0
   19ad8:	d0f9      	beq.n	19ace <sys_notify_validate+0x16>
		notify->result = 0;
   19ada:	2000      	movs	r0, #0
   19adc:	6098      	str	r0, [r3, #8]
   19ade:	4770      	bx	lr

00019ae0 <arch_printk_char_out>:
}
   19ae0:	2000      	movs	r0, #0
   19ae2:	4770      	bx	lr

00019ae4 <str_out>:
{
   19ae4:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19ae6:	688a      	ldr	r2, [r1, #8]
   19ae8:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   19aea:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19aec:	b114      	cbz	r4, 19af4 <str_out+0x10>
   19aee:	684b      	ldr	r3, [r1, #4]
   19af0:	4293      	cmp	r3, r2
   19af2:	dc01      	bgt.n	19af8 <str_out+0x14>
		ctx->count++;
   19af4:	608d      	str	r5, [r1, #8]
}
   19af6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   19af8:	3b01      	subs	r3, #1
   19afa:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   19afc:	bf08      	it	eq
   19afe:	2200      	moveq	r2, #0
   19b00:	608d      	str	r5, [r1, #8]
   19b02:	bf0c      	ite	eq
   19b04:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   19b06:	54a0      	strbne	r0, [r4, r2]
   19b08:	e7f5      	b.n	19af6 <str_out+0x12>

00019b0a <printk>:
{
   19b0a:	b40f      	push	{r0, r1, r2, r3}
   19b0c:	b507      	push	{r0, r1, r2, lr}
   19b0e:	a904      	add	r1, sp, #16
   19b10:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19b14:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   19b16:	f7f0 fa59 	bl	9fcc <vprintk>
}
   19b1a:	b003      	add	sp, #12
   19b1c:	f85d eb04 	ldr.w	lr, [sp], #4
   19b20:	b004      	add	sp, #16
   19b22:	4770      	bx	lr

00019b24 <snprintk>:
{
   19b24:	b40c      	push	{r2, r3}
   19b26:	b507      	push	{r0, r1, r2, lr}
   19b28:	ab04      	add	r3, sp, #16
   19b2a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   19b2e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   19b30:	f7f0 fa5a 	bl	9fe8 <vsnprintk>
}
   19b34:	b003      	add	sp, #12
   19b36:	f85d eb04 	ldr.w	lr, [sp], #4
   19b3a:	b002      	add	sp, #8
   19b3c:	4770      	bx	lr

00019b3e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19b3e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   19b40:	f013 0307 	ands.w	r3, r3, #7
   19b44:	d105      	bne.n	19b52 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19b46:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   19b48:	2b00      	cmp	r3, #0
   19b4a:	bf0c      	ite	eq
   19b4c:	2000      	moveq	r0, #0
   19b4e:	2003      	movne	r0, #3
   19b50:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19b52:	2b02      	cmp	r3, #2
   19b54:	d105      	bne.n	19b62 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   19b56:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   19b58:	2b00      	cmp	r3, #0
   19b5a:	bf14      	ite	ne
   19b5c:	2000      	movne	r0, #0
   19b5e:	2004      	moveq	r0, #4
   19b60:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   19b62:	2b01      	cmp	r3, #1
   19b64:	d105      	bne.n	19b72 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19b66:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   19b68:	2b00      	cmp	r3, #0
   19b6a:	bf0c      	ite	eq
   19b6c:	2000      	moveq	r0, #0
   19b6e:	2005      	movne	r0, #5
   19b70:	4770      	bx	lr
	int evt = EVT_NOP;
   19b72:	2000      	movs	r0, #0
}
   19b74:	4770      	bx	lr

00019b76 <notify_one>:
{
   19b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b7a:	460d      	mov	r5, r1
   19b7c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19b7e:	4619      	mov	r1, r3
   19b80:	1d28      	adds	r0, r5, #4
{
   19b82:	4690      	mov	r8, r2
   19b84:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19b86:	f7f0 f9e7 	bl	9f58 <sys_notify_finalize>
	if (cb) {
   19b8a:	4604      	mov	r4, r0
   19b8c:	b138      	cbz	r0, 19b9e <notify_one+0x28>
		cb(mgr, cli, state, res);
   19b8e:	4633      	mov	r3, r6
   19b90:	4642      	mov	r2, r8
   19b92:	4629      	mov	r1, r5
   19b94:	4638      	mov	r0, r7
   19b96:	46a4      	mov	ip, r4
}
   19b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19b9c:	4760      	bx	ip
}
   19b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019ba2 <validate_args>:
{
   19ba2:	b510      	push	{r4, lr}
   19ba4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19ba6:	b140      	cbz	r0, 19bba <validate_args+0x18>
   19ba8:	b139      	cbz	r1, 19bba <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   19baa:	1d08      	adds	r0, r1, #4
   19bac:	f7ff ff84 	bl	19ab8 <sys_notify_validate>
	if ((rv == 0)
   19bb0:	b928      	cbnz	r0, 19bbe <validate_args+0x1c>
	    && ((cli->notify.flags
   19bb2:	68a3      	ldr	r3, [r4, #8]
   19bb4:	f033 0303 	bics.w	r3, r3, #3
   19bb8:	d001      	beq.n	19bbe <validate_args+0x1c>
		rv = -EINVAL;
   19bba:	f06f 0015 	mvn.w	r0, #21
}
   19bbe:	bd10      	pop	{r4, pc}

00019bc0 <onoff_manager_init>:
{
   19bc0:	b538      	push	{r3, r4, r5, lr}
   19bc2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   19bc4:	4605      	mov	r5, r0
   19bc6:	b158      	cbz	r0, 19be0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   19bc8:	b151      	cbz	r1, 19be0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   19bca:	680b      	ldr	r3, [r1, #0]
   19bcc:	b143      	cbz	r3, 19be0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19bce:	684b      	ldr	r3, [r1, #4]
   19bd0:	b133      	cbz	r3, 19be0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19bd2:	2220      	movs	r2, #32
   19bd4:	2100      	movs	r1, #0
   19bd6:	f001 fa03 	bl	1afe0 <memset>
	return 0;
   19bda:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19bdc:	612c      	str	r4, [r5, #16]
}
   19bde:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19be0:	f06f 0015 	mvn.w	r0, #21
   19be4:	e7fb      	b.n	19bde <onoff_manager_init+0x1e>

00019be6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19be6:	4604      	mov	r4, r0
   19be8:	b508      	push	{r3, lr}
   19bea:	4608      	mov	r0, r1
   19bec:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19bee:	461a      	mov	r2, r3
   19bf0:	47a0      	blx	r4
	return z_impl_k_current_get();
   19bf2:	f7fe fdaf 	bl	18754 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   19bf6:	f7f3 fc8d 	bl	d514 <z_impl_k_thread_abort>

00019bfa <chunk_field>:
	if (big_heap(h)) {
   19bfa:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19bfc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   19c04:	bf2c      	ite	cs
   19c06:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   19c0a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   19c0e:	4770      	bx	lr

00019c10 <chunk_set>:
	void *cmem = &buf[c];
   19c10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19c14:	6880      	ldr	r0, [r0, #8]
   19c16:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   19c1a:	bf2c      	ite	cs
   19c1c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   19c20:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   19c24:	4770      	bx	lr

00019c26 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19c26:	2201      	movs	r2, #1
{
   19c28:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19c2a:	f7ff ffe6 	bl	19bfa <chunk_field>
}
   19c2e:	40d0      	lsrs	r0, r2
   19c30:	bd08      	pop	{r3, pc}

00019c32 <set_chunk_used>:
	if (big_heap(h)) {
   19c32:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19c34:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19c3c:	d308      	bcc.n	19c50 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19c3e:	684b      	ldr	r3, [r1, #4]
		if (used) {
   19c40:	b11a      	cbz	r2, 19c4a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19c42:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19c46:	604b      	str	r3, [r1, #4]
   19c48:	4770      	bx	lr
   19c4a:	f023 0301 	bic.w	r3, r3, #1
   19c4e:	e7fa      	b.n	19c46 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19c50:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   19c52:	b11a      	cbz	r2, 19c5c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19c54:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19c58:	804b      	strh	r3, [r1, #2]
}
   19c5a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19c5c:	f023 0301 	bic.w	r3, r3, #1
   19c60:	e7fa      	b.n	19c58 <set_chunk_used+0x26>

00019c62 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19c62:	0053      	lsls	r3, r2, #1
   19c64:	2201      	movs	r2, #1
   19c66:	f7ff bfd3 	b.w	19c10 <chunk_set>

00019c6a <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   19c6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   19c6e:	bf2c      	ite	cs
   19c70:	2008      	movcs	r0, #8
   19c72:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19c74:	3107      	adds	r1, #7
   19c76:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   19c78:	08c0      	lsrs	r0, r0, #3
   19c7a:	4770      	bx	lr

00019c7c <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   19c7c:	b508      	push	{r3, lr}
   19c7e:	460b      	mov	r3, r1
   19c80:	2101      	movs	r1, #1
   19c82:	f7ff fff2 	bl	19c6a <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   19c86:	3301      	adds	r3, #1
   19c88:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   19c8a:	fab3 f083 	clz	r0, r3
}
   19c8e:	f1c0 001f 	rsb	r0, r0, #31
   19c92:	bd08      	pop	{r3, pc}

00019c94 <free_list_remove_bidx>:
{
   19c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c98:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   19c9a:	2203      	movs	r2, #3
   19c9c:	460e      	mov	r6, r1
   19c9e:	4604      	mov	r4, r0
   19ca0:	f7ff ffab 	bl	19bfa <chunk_field>
	if (next_free_chunk(h, c) == c) {
   19ca4:	4286      	cmp	r6, r0
   19ca6:	4605      	mov	r5, r0
   19ca8:	f107 0804 	add.w	r8, r7, #4
   19cac:	d10b      	bne.n	19cc6 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   19cae:	2301      	movs	r3, #1
   19cb0:	fa03 f707 	lsl.w	r7, r3, r7
   19cb4:	68e3      	ldr	r3, [r4, #12]
   19cb6:	ea23 0307 	bic.w	r3, r3, r7
   19cba:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   19cbc:	2300      	movs	r3, #0
   19cbe:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   19cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   19cc6:	4631      	mov	r1, r6
   19cc8:	2202      	movs	r2, #2
   19cca:	4620      	mov	r0, r4
   19ccc:	f7ff ff95 	bl	19bfa <chunk_field>
   19cd0:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   19cd2:	462b      	mov	r3, r5
   19cd4:	4601      	mov	r1, r0
   19cd6:	2203      	movs	r2, #3
   19cd8:	4620      	mov	r0, r4
		b->next = second;
   19cda:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   19cde:	f7ff ff97 	bl	19c10 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19ce2:	4633      	mov	r3, r6
   19ce4:	4629      	mov	r1, r5
   19ce6:	4620      	mov	r0, r4
}
   19ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19cec:	2202      	movs	r2, #2
   19cee:	f7ff bf8f 	b.w	19c10 <chunk_set>

00019cf2 <free_list_remove>:
{
   19cf2:	b570      	push	{r4, r5, r6, lr}
   19cf4:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   19cf6:	6886      	ldr	r6, [r0, #8]
   19cf8:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19cfa:	f7ff ff94 	bl	19c26 <chunk_size>
   19cfe:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19d02:	4601      	mov	r1, r0
   19d04:	d301      	bcc.n	19d0a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   19d06:	2801      	cmp	r0, #1
   19d08:	d009      	beq.n	19d1e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19d0a:	4630      	mov	r0, r6
   19d0c:	f7ff ffb6 	bl	19c7c <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   19d10:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   19d12:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   19d14:	4620      	mov	r0, r4
}
   19d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   19d1a:	f7ff bfbb 	b.w	19c94 <free_list_remove_bidx>
}
   19d1e:	bd70      	pop	{r4, r5, r6, pc}

00019d20 <alloc_chunk>:
{
   19d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19d24:	6886      	ldr	r6, [r0, #8]
   19d26:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   19d28:	4630      	mov	r0, r6
{
   19d2a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   19d2c:	f7ff ffa6 	bl	19c7c <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   19d30:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   19d32:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   19d34:	4630      	mov	r0, r6
   19d36:	f7ff ffa1 	bl	19c7c <bucket_idx.isra.0>
   19d3a:	42a8      	cmp	r0, r5
   19d3c:	da03      	bge.n	19d46 <alloc_chunk+0x26>
		return 0;
   19d3e:	2600      	movs	r6, #0
}
   19d40:	4630      	mov	r0, r6
   19d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   19d46:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   19d4a:	f8da 9010 	ldr.w	r9, [sl, #16]
   19d4e:	f1b9 0f00 	cmp.w	r9, #0
   19d52:	d019      	beq.n	19d88 <alloc_chunk+0x68>
   19d54:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   19d56:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   19d5a:	4620      	mov	r0, r4
   19d5c:	4631      	mov	r1, r6
   19d5e:	f7ff ff62 	bl	19c26 <chunk_size>
   19d62:	4540      	cmp	r0, r8
   19d64:	d305      	bcc.n	19d72 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   19d66:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   19d68:	4631      	mov	r1, r6
   19d6a:	4620      	mov	r0, r4
   19d6c:	f7ff ff92 	bl	19c94 <free_list_remove_bidx>
		return c;
   19d70:	e7e6      	b.n	19d40 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   19d72:	2203      	movs	r2, #3
   19d74:	4631      	mov	r1, r6
   19d76:	4620      	mov	r0, r4
   19d78:	f7ff ff3f 	bl	19bfa <chunk_field>
		} while (--i && b->next != first);
   19d7c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   19d7e:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   19d82:	d001      	beq.n	19d88 <alloc_chunk+0x68>
   19d84:	4581      	cmp	r9, r0
   19d86:	d1e6      	bne.n	19d56 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   19d88:	f04f 32ff 	mov.w	r2, #4294967295
   19d8c:	68e3      	ldr	r3, [r4, #12]
   19d8e:	3501      	adds	r5, #1
   19d90:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   19d92:	401a      	ands	r2, r3
   19d94:	d0d3      	beq.n	19d3e <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   19d96:	fa92 f2a2 	rbit	r2, r2
   19d9a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19d9e:	1d13      	adds	r3, r2, #4
   19da0:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   19da4:	e7e0      	b.n	19d68 <alloc_chunk+0x48>

00019da6 <split_chunks>:
{
   19da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19daa:	4614      	mov	r4, r2
   19dac:	460e      	mov	r6, r1
   19dae:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   19db0:	f7ff ff39 	bl	19c26 <chunk_size>
	size_t lsz = rc - lc;
   19db4:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   19db8:	1b37      	subs	r7, r6, r4
   19dba:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   19dbc:	4642      	mov	r2, r8
   19dbe:	4631      	mov	r1, r6
   19dc0:	4628      	mov	r0, r5
   19dc2:	f7ff ff4e 	bl	19c62 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   19dc6:	463a      	mov	r2, r7
   19dc8:	4621      	mov	r1, r4
   19dca:	4628      	mov	r0, r5
   19dcc:	f7ff ff49 	bl	19c62 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19dd0:	4643      	mov	r3, r8
   19dd2:	2200      	movs	r2, #0
   19dd4:	4621      	mov	r1, r4
   19dd6:	4628      	mov	r0, r5
   19dd8:	f7ff ff1a 	bl	19c10 <chunk_set>
	return c + chunk_size(h, c);
   19ddc:	4621      	mov	r1, r4
   19dde:	4628      	mov	r0, r5
   19de0:	f7ff ff21 	bl	19c26 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19de4:	463b      	mov	r3, r7
   19de6:	1821      	adds	r1, r4, r0
   19de8:	2200      	movs	r2, #0
   19dea:	4628      	mov	r0, r5
}
   19dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19df0:	f7ff bf0e 	b.w	19c10 <chunk_set>

00019df4 <merge_chunks>:
{
   19df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19df8:	4616      	mov	r6, r2
   19dfa:	4604      	mov	r4, r0
   19dfc:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19dfe:	f7ff ff12 	bl	19c26 <chunk_size>
   19e02:	4631      	mov	r1, r6
   19e04:	4605      	mov	r5, r0
   19e06:	4620      	mov	r0, r4
   19e08:	f7ff ff0d 	bl	19c26 <chunk_size>
   19e0c:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   19e0e:	462a      	mov	r2, r5
   19e10:	4639      	mov	r1, r7
   19e12:	4620      	mov	r0, r4
   19e14:	f7ff ff25 	bl	19c62 <set_chunk_size>
	return c + chunk_size(h, c);
   19e18:	4631      	mov	r1, r6
   19e1a:	4620      	mov	r0, r4
   19e1c:	f7ff ff03 	bl	19c26 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19e20:	462b      	mov	r3, r5
   19e22:	1831      	adds	r1, r6, r0
   19e24:	2200      	movs	r2, #0
   19e26:	4620      	mov	r0, r4
}
   19e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19e2c:	f7ff bef0 	b.w	19c10 <chunk_set>

00019e30 <free_list_add>:
{
   19e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e34:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   19e36:	6886      	ldr	r6, [r0, #8]
   19e38:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19e3a:	f7ff fef4 	bl	19c26 <chunk_size>
   19e3e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19e42:	4601      	mov	r1, r0
   19e44:	d301      	bcc.n	19e4a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   19e46:	2801      	cmp	r0, #1
   19e48:	d033      	beq.n	19eb2 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19e4a:	4630      	mov	r0, r6
   19e4c:	f7ff ff16 	bl	19c7c <bucket_idx.isra.0>
	if (b->next == 0U) {
   19e50:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   19e54:	6916      	ldr	r6, [r2, #16]
   19e56:	b99e      	cbnz	r6, 19e80 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   19e58:	2301      	movs	r3, #1
   19e5a:	fa03 f000 	lsl.w	r0, r3, r0
   19e5e:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   19e60:	4629      	mov	r1, r5
   19e62:	4303      	orrs	r3, r0
   19e64:	60e3      	str	r3, [r4, #12]
   19e66:	4620      	mov	r0, r4
		b->next = c;
   19e68:	6115      	str	r5, [r2, #16]
   19e6a:	462b      	mov	r3, r5
   19e6c:	2202      	movs	r2, #2
   19e6e:	f7ff fecf 	bl	19c10 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19e72:	2203      	movs	r2, #3
   19e74:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   19e76:	4620      	mov	r0, r4
}
   19e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19e7c:	f7ff bec8 	b.w	19c10 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   19e80:	2202      	movs	r2, #2
   19e82:	4631      	mov	r1, r6
   19e84:	4620      	mov	r0, r4
   19e86:	f7ff feb8 	bl	19bfa <chunk_field>
   19e8a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   19e8c:	4603      	mov	r3, r0
   19e8e:	4629      	mov	r1, r5
   19e90:	4620      	mov	r0, r4
   19e92:	f7ff febd 	bl	19c10 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19e96:	2203      	movs	r2, #3
   19e98:	4633      	mov	r3, r6
   19e9a:	4629      	mov	r1, r5
   19e9c:	4620      	mov	r0, r4
   19e9e:	f7ff feb7 	bl	19c10 <chunk_set>
   19ea2:	4639      	mov	r1, r7
   19ea4:	462b      	mov	r3, r5
   19ea6:	4620      	mov	r0, r4
   19ea8:	f7ff feb2 	bl	19c10 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19eac:	2202      	movs	r2, #2
   19eae:	4631      	mov	r1, r6
   19eb0:	e7e1      	b.n	19e76 <free_list_add+0x46>
   19eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019eb6 <free_chunk>:
{
   19eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19eb8:	460c      	mov	r4, r1
   19eba:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   19ebc:	f7ff feb3 	bl	19c26 <chunk_size>
   19ec0:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19ec2:	2201      	movs	r2, #1
   19ec4:	4631      	mov	r1, r6
   19ec6:	4628      	mov	r0, r5
   19ec8:	f7ff fe97 	bl	19bfa <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   19ecc:	07c3      	lsls	r3, r0, #31
   19ece:	d40c      	bmi.n	19eea <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   19ed0:	4631      	mov	r1, r6
   19ed2:	4628      	mov	r0, r5
   19ed4:	f7ff ff0d 	bl	19cf2 <free_list_remove>
	return c + chunk_size(h, c);
   19ed8:	4621      	mov	r1, r4
   19eda:	4628      	mov	r0, r5
   19edc:	f7ff fea3 	bl	19c26 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19ee0:	4621      	mov	r1, r4
   19ee2:	1822      	adds	r2, r4, r0
   19ee4:	4628      	mov	r0, r5
   19ee6:	f7ff ff85 	bl	19df4 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   19eea:	2200      	movs	r2, #0
   19eec:	4621      	mov	r1, r4
   19eee:	4628      	mov	r0, r5
   19ef0:	f7ff fe83 	bl	19bfa <chunk_field>
   19ef4:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19ef6:	2201      	movs	r2, #1
   19ef8:	4639      	mov	r1, r7
   19efa:	4628      	mov	r0, r5
   19efc:	f7ff fe7d 	bl	19bfa <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   19f00:	ea10 0602 	ands.w	r6, r0, r2
   19f04:	d113      	bne.n	19f2e <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   19f06:	4639      	mov	r1, r7
   19f08:	4628      	mov	r0, r5
   19f0a:	f7ff fef2 	bl	19cf2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   19f0e:	4621      	mov	r1, r4
   19f10:	4632      	mov	r2, r6
   19f12:	4628      	mov	r0, r5
   19f14:	f7ff fe71 	bl	19bfa <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   19f18:	4622      	mov	r2, r4
   19f1a:	1a21      	subs	r1, r4, r0
   19f1c:	4628      	mov	r0, r5
   19f1e:	f7ff ff69 	bl	19df4 <merge_chunks>
   19f22:	4621      	mov	r1, r4
   19f24:	4632      	mov	r2, r6
   19f26:	4628      	mov	r0, r5
   19f28:	f7ff fe67 	bl	19bfa <chunk_field>
   19f2c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   19f2e:	4621      	mov	r1, r4
   19f30:	4628      	mov	r0, r5
}
   19f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   19f36:	f7ff bf7b 	b.w	19e30 <free_list_add>

00019f3a <sys_heap_alloc>:
{
   19f3a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   19f3c:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19f3e:	b909      	cbnz	r1, 19f44 <sys_heap_alloc+0xa>
		return NULL;
   19f40:	2000      	movs	r0, #0
}
   19f42:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   19f44:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19f46:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   19f4a:	d9f9      	bls.n	19f40 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   19f4c:	f7ff fe8d 	bl	19c6a <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19f50:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   19f52:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19f54:	4630      	mov	r0, r6
   19f56:	f7ff fee3 	bl	19d20 <alloc_chunk>
	if (c == 0U) {
   19f5a:	4604      	mov	r4, r0
   19f5c:	2800      	cmp	r0, #0
   19f5e:	d0ef      	beq.n	19f40 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   19f60:	4601      	mov	r1, r0
   19f62:	4630      	mov	r0, r6
   19f64:	f7ff fe5f 	bl	19c26 <chunk_size>
   19f68:	42a8      	cmp	r0, r5
   19f6a:	d909      	bls.n	19f80 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   19f6c:	4425      	add	r5, r4
   19f6e:	4621      	mov	r1, r4
   19f70:	4630      	mov	r0, r6
   19f72:	462a      	mov	r2, r5
   19f74:	f7ff ff17 	bl	19da6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   19f78:	4629      	mov	r1, r5
   19f7a:	4630      	mov	r0, r6
   19f7c:	f7ff ff58 	bl	19e30 <free_list_add>
	set_chunk_used(h, c, true);
   19f80:	4621      	mov	r1, r4
   19f82:	4630      	mov	r0, r6
   19f84:	2201      	movs	r2, #1
   19f86:	f7ff fe54 	bl	19c32 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   19f8a:	68b3      	ldr	r3, [r6, #8]
   19f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19f90:	bf2c      	ite	cs
   19f92:	2308      	movcs	r3, #8
   19f94:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   19f96:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   19f9a:	4420      	add	r0, r4
	return chunk_mem(h, c);
   19f9c:	e7d1      	b.n	19f42 <sys_heap_alloc+0x8>

00019f9e <encode_uint>:
{
   19f9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fa2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19fa4:	78d3      	ldrb	r3, [r2, #3]
{
   19fa6:	4680      	mov	r8, r0
	switch (specifier) {
   19fa8:	2b6f      	cmp	r3, #111	; 0x6f
{
   19faa:	460f      	mov	r7, r1
   19fac:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19fae:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   19fb2:	d029      	beq.n	1a008 <encode_uint+0x6a>
   19fb4:	d824      	bhi.n	1a000 <encode_uint+0x62>
		return 16;
   19fb6:	2b58      	cmp	r3, #88	; 0x58
   19fb8:	bf14      	ite	ne
   19fba:	260a      	movne	r6, #10
   19fbc:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   19fbe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   19fc2:	4632      	mov	r2, r6
   19fc4:	2300      	movs	r3, #0
   19fc6:	4640      	mov	r0, r8
   19fc8:	4639      	mov	r1, r7
   19fca:	f7ee fdaf 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19fce:	2a09      	cmp	r2, #9
   19fd0:	b2d4      	uxtb	r4, r2
   19fd2:	d81e      	bhi.n	1a012 <encode_uint+0x74>
   19fd4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   19fd6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19fd8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19fda:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19fde:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19fe2:	d301      	bcc.n	19fe8 <encode_uint+0x4a>
   19fe4:	45d1      	cmp	r9, sl
   19fe6:	d811      	bhi.n	1a00c <encode_uint+0x6e>
	if (conv->flag_hash) {
   19fe8:	782b      	ldrb	r3, [r5, #0]
   19fea:	069b      	lsls	r3, r3, #26
   19fec:	d505      	bpl.n	19ffa <encode_uint+0x5c>
		if (radix == 8) {
   19fee:	2e08      	cmp	r6, #8
   19ff0:	d115      	bne.n	1a01e <encode_uint+0x80>
			conv->altform_0 = true;
   19ff2:	78ab      	ldrb	r3, [r5, #2]
   19ff4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   19ff8:	70ab      	strb	r3, [r5, #2]
}
   19ffa:	4648      	mov	r0, r9
   19ffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1a000:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1a004:	2b70      	cmp	r3, #112	; 0x70
   1a006:	e7d7      	b.n	19fb8 <encode_uint+0x1a>
	switch (specifier) {
   1a008:	2608      	movs	r6, #8
   1a00a:	e7d8      	b.n	19fbe <encode_uint+0x20>
		value /= radix;
   1a00c:	4680      	mov	r8, r0
   1a00e:	460f      	mov	r7, r1
   1a010:	e7d7      	b.n	19fc2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a012:	f1bb 0f19 	cmp.w	fp, #25
   1a016:	bf94      	ite	ls
   1a018:	3437      	addls	r4, #55	; 0x37
   1a01a:	3457      	addhi	r4, #87	; 0x57
   1a01c:	e7db      	b.n	19fd6 <encode_uint+0x38>
		} else if (radix == 16) {
   1a01e:	2e10      	cmp	r6, #16
   1a020:	d1eb      	bne.n	19ffa <encode_uint+0x5c>
			conv->altform_0c = true;
   1a022:	78ab      	ldrb	r3, [r5, #2]
   1a024:	f043 0310 	orr.w	r3, r3, #16
   1a028:	e7e6      	b.n	19ff8 <encode_uint+0x5a>

0001a02a <outs>:
{
   1a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a02e:	4607      	mov	r7, r0
   1a030:	4688      	mov	r8, r1
   1a032:	4615      	mov	r5, r2
   1a034:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1a036:	4614      	mov	r4, r2
   1a038:	42b4      	cmp	r4, r6
   1a03a:	eba4 0005 	sub.w	r0, r4, r5
   1a03e:	d302      	bcc.n	1a046 <outs+0x1c>
   1a040:	b93e      	cbnz	r6, 1a052 <outs+0x28>
   1a042:	7823      	ldrb	r3, [r4, #0]
   1a044:	b12b      	cbz	r3, 1a052 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1a046:	4641      	mov	r1, r8
   1a048:	f814 0b01 	ldrb.w	r0, [r4], #1
   1a04c:	47b8      	blx	r7
		if (rc < 0) {
   1a04e:	2800      	cmp	r0, #0
   1a050:	daf2      	bge.n	1a038 <outs+0xe>
}
   1a052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a056 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1a056:	4040      	eors	r0, r0
   1a058:	f380 8811 	msr	BASEPRI, r0
   1a05c:	f04f 0004 	mov.w	r0, #4
   1a060:	df02      	svc	2
}
   1a062:	4770      	bx	lr

0001a064 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1a064:	4770      	bx	lr

0001a066 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1a066:	f04f 0320 	mov.w	r3, #32
   1a06a:	f3ef 8111 	mrs	r1, BASEPRI
   1a06e:	f383 8811 	msr	BASEPRI, r3
   1a072:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1a076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1a07a:	2201      	movs	r2, #1
   1a07c:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1a080:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1a084:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1a088:	f381 8811 	msr	BASEPRI, r1
   1a08c:	f3bf 8f6f 	isb	sy
}
   1a090:	2000      	movs	r0, #0
   1a092:	4770      	bx	lr

0001a094 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1a094:	f002 bc70 	b.w	1c978 <SystemInit>

0001a098 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1a098:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1a09c:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1a0a0:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1a0a2:	4640      	mov	r0, r8
{
   1a0a4:	461f      	mov	r7, r3
   1a0a6:	460c      	mov	r4, r1
   1a0a8:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1a0aa:	f000 ff30 	bl	1af0e <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1a0ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a0b2:	b280      	uxth	r0, r0
   1a0b4:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1a0b8:	9300      	str	r3, [sp, #0]
   1a0ba:	4632      	mov	r2, r6
   1a0bc:	463b      	mov	r3, r7
   1a0be:	4621      	mov	r1, r4
   1a0c0:	4628      	mov	r0, r5
   1a0c2:	f002 f8b6 	bl	1c232 <bt_gatt_attr_read>
}
   1a0c6:	b004      	add	sp, #16
   1a0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a0cc <virtio_get_status>:
}
   1a0cc:	2004      	movs	r0, #4
   1a0ce:	4770      	bx	lr

0001a0d0 <virtio_get_features>:
}
   1a0d0:	2001      	movs	r0, #1
   1a0d2:	4770      	bx	lr

0001a0d4 <virtio_set_features>:
}
   1a0d4:	4770      	bx	lr

0001a0d6 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1a0d6:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1a0d8:	21b4      	movs	r1, #180	; 0xb4
   1a0da:	2004      	movs	r0, #4
   1a0dc:	f7ff fc1c 	bl	19918 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1a0e0:	4604      	mov	r4, r0
   1a0e2:	b118      	cbz	r0, 1a0ec <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1a0e4:	22b4      	movs	r2, #180	; 0xb4
   1a0e6:	2100      	movs	r1, #0
   1a0e8:	f000 ff7a 	bl	1afe0 <memset>
	}

	return vqs;
}
   1a0ec:	4620      	mov	r0, r4
   1a0ee:	bd10      	pop	{r4, pc}

0001a0f0 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1a0f0:	f002 bf51 	b.w	1cf96 <rpmsg_destroy_ept>

0001a0f4 <settings_load>:
	return settings_load_subtree(NULL);
   1a0f4:	2000      	movs	r0, #0
   1a0f6:	f7f1 b917 	b.w	b328 <settings_load_subtree>

0001a0fa <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1a0fa:	2200      	movs	r2, #0
   1a0fc:	4611      	mov	r1, r2
   1a0fe:	f7f1 b8ed 	b.w	b2dc <settings_save_one>

0001a102 <settings_name_steq>:
{
   1a102:	4603      	mov	r3, r0
   1a104:	b530      	push	{r4, r5, lr}
   1a106:	4608      	mov	r0, r1
	if (next) {
   1a108:	b10a      	cbz	r2, 1a10e <settings_name_steq+0xc>
		*next = NULL;
   1a10a:	2100      	movs	r1, #0
   1a10c:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1a10e:	b163      	cbz	r3, 1a12a <settings_name_steq+0x28>
   1a110:	b190      	cbz	r0, 1a138 <settings_name_steq+0x36>
   1a112:	1e41      	subs	r1, r0, #1
   1a114:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1a116:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1a11a:	4604      	mov	r4, r0
   1a11c:	f810 3b01 	ldrb.w	r3, [r0], #1
   1a120:	b15d      	cbz	r5, 1a13a <settings_name_steq+0x38>
   1a122:	429d      	cmp	r5, r3
   1a124:	d101      	bne.n	1a12a <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1a126:	2d3d      	cmp	r5, #61	; 0x3d
   1a128:	d1f5      	bne.n	1a116 <settings_name_steq+0x14>
	return 0;
   1a12a:	2000      	movs	r0, #0
   1a12c:	e004      	b.n	1a138 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1a12e:	2b3d      	cmp	r3, #61	; 0x3d
   1a130:	d008      	beq.n	1a144 <settings_name_steq+0x42>
   1a132:	fab3 f083 	clz	r0, r3
   1a136:	0940      	lsrs	r0, r0, #5
}
   1a138:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1a13a:	2b2f      	cmp	r3, #47	; 0x2f
   1a13c:	d1f7      	bne.n	1a12e <settings_name_steq+0x2c>
		if (next) {
   1a13e:	b10a      	cbz	r2, 1a144 <settings_name_steq+0x42>
			*next = name + 1;
   1a140:	3401      	adds	r4, #1
   1a142:	6014      	str	r4, [r2, #0]
		return 1;
   1a144:	2001      	movs	r0, #1
   1a146:	e7f7      	b.n	1a138 <settings_name_steq+0x36>

0001a148 <settings_name_next>:
{
   1a148:	4603      	mov	r3, r0
   1a14a:	b530      	push	{r4, r5, lr}
	if (next) {
   1a14c:	b109      	cbz	r1, 1a152 <settings_name_next+0xa>
		*next = NULL;
   1a14e:	2200      	movs	r2, #0
   1a150:	600a      	str	r2, [r1, #0]
	if (!name) {
   1a152:	b16b      	cbz	r3, 1a170 <settings_name_next+0x28>
   1a154:	461a      	mov	r2, r3
   1a156:	4614      	mov	r4, r2
   1a158:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1a15a:	f812 5b01 	ldrb.w	r5, [r2], #1
   1a15e:	b135      	cbz	r5, 1a16e <settings_name_next+0x26>
   1a160:	2d3d      	cmp	r5, #61	; 0x3d
   1a162:	d004      	beq.n	1a16e <settings_name_next+0x26>
   1a164:	2d2f      	cmp	r5, #47	; 0x2f
   1a166:	d1f6      	bne.n	1a156 <settings_name_next+0xe>
		if (next) {
   1a168:	b109      	cbz	r1, 1a16e <settings_name_next+0x26>
			*next = name + 1;
   1a16a:	3401      	adds	r4, #1
   1a16c:	600c      	str	r4, [r1, #0]
}
   1a16e:	bd30      	pop	{r4, r5, pc}
		return 0;
   1a170:	4618      	mov	r0, r3
   1a172:	e7fc      	b.n	1a16e <settings_name_next+0x26>

0001a174 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1a174:	2000      	movs	r0, #0
   1a176:	4770      	bx	lr

0001a178 <set_on_state>:
	__asm__ volatile(
   1a178:	f04f 0320 	mov.w	r3, #32
   1a17c:	f3ef 8211 	mrs	r2, BASEPRI
   1a180:	f383 8811 	msr	BASEPRI, r3
   1a184:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1a188:	6803      	ldr	r3, [r0, #0]
   1a18a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a18e:	f043 0302 	orr.w	r3, r3, #2
   1a192:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1a194:	f382 8811 	msr	BASEPRI, r2
   1a198:	f3bf 8f6f 	isb	sy
}
   1a19c:	4770      	bx	lr

0001a19e <async_start>:
{
   1a19e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1a0:	9f06      	ldr	r7, [sp, #24]
   1a1a2:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1a1a4:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1a1a6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1a1a8:	f04f 0020 	mov.w	r0, #32
   1a1ac:	f3ef 8c11 	mrs	ip, BASEPRI
   1a1b0:	f380 8811 	msr	BASEPRI, r0
   1a1b4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a1b8:	260c      	movs	r6, #12
   1a1ba:	fb06 4601 	mla	r6, r6, r1, r4
   1a1be:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1a1c2:	f000 0e07 	and.w	lr, r0, #7
   1a1c6:	f1be 0f01 	cmp.w	lr, #1
   1a1ca:	d111      	bne.n	1a1f0 <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1a1cc:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1a1d0:	2600      	movs	r6, #0
	__asm__ volatile(
   1a1d2:	f38c 8811 	msr	BASEPRI, ip
   1a1d6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1a1da:	b93e      	cbnz	r6, 1a1ec <async_start+0x4e>
	subdata->cb = cb;
   1a1dc:	200c      	movs	r0, #12
   1a1de:	4341      	muls	r1, r0
   1a1e0:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1a1e2:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1a1e6:	686b      	ldr	r3, [r5, #4]
   1a1e8:	585b      	ldr	r3, [r3, r1]
   1a1ea:	4798      	blx	r3
}
   1a1ec:	4630      	mov	r0, r6
   1a1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1a1f0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1a1f4:	4287      	cmp	r7, r0
   1a1f6:	bf14      	ite	ne
   1a1f8:	f04f 36ff 	movne.w	r6, #4294967295
   1a1fc:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1a200:	e7e7      	b.n	1a1d2 <async_start+0x34>

0001a202 <api_start>:
{
   1a202:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1a204:	2480      	movs	r4, #128	; 0x80
   1a206:	9400      	str	r4, [sp, #0]
   1a208:	f7ff ffc9 	bl	1a19e <async_start>
}
   1a20c:	b002      	add	sp, #8
   1a20e:	bd10      	pop	{r4, pc}

0001a210 <onoff_started_callback>:
	return &data->mgr[type];
   1a210:	68c0      	ldr	r0, [r0, #12]
   1a212:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1a214:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1a218:	2100      	movs	r1, #0
   1a21a:	4710      	bx	r2

0001a21c <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a21c:	2003      	movs	r0, #3
   1a21e:	f7fb be85 	b.w	15f2c <nrfx_clock_start>

0001a222 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a222:	2002      	movs	r0, #2
   1a224:	f7fb be82 	b.w	15f2c <nrfx_clock_start>

0001a228 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a228:	2000      	movs	r0, #0
   1a22a:	f7fb be7f 	b.w	15f2c <nrfx_clock_start>

0001a22e <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a22e:	2003      	movs	r0, #3
   1a230:	f7fb bee6 	b.w	16000 <nrfx_clock_stop>

0001a234 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a234:	2002      	movs	r0, #2
   1a236:	f7fb bee3 	b.w	16000 <nrfx_clock_stop>

0001a23a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a23a:	2000      	movs	r0, #0
   1a23c:	f7fb bee0 	b.w	16000 <nrfx_clock_stop>

0001a240 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1a240:	2280      	movs	r2, #128	; 0x80
   1a242:	f7f1 b9a1 	b.w	b588 <stop>

0001a246 <blocking_start_callback>:
{
   1a246:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1a248:	f7fe ba8a 	b.w	18760 <z_impl_k_sem_give>

0001a24c <bt_rpmsg_open>:
{
   1a24c:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1a24e:	f7f1 fc9b 	bl	bb88 <bt_rpmsg_platform_endpoint_is_bound>
   1a252:	b108      	cbz	r0, 1a258 <bt_rpmsg_open+0xc>
}
   1a254:	2000      	movs	r0, #0
   1a256:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1a258:	2100      	movs	r1, #0
   1a25a:	2021      	movs	r0, #33	; 0x21
   1a25c:	f7fe fa4a 	bl	186f4 <z_impl_k_sleep>
   1a260:	e7f5      	b.n	1a24e <bt_rpmsg_open+0x2>

0001a262 <endpoint_cb>:
{
   1a262:	b508      	push	{r3, lr}
   1a264:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1a266:	4611      	mov	r1, r2
   1a268:	f7f1 fba4 	bl	b9b4 <bt_rpmsg_rx>
}
   1a26c:	2000      	movs	r0, #0
   1a26e:	bd08      	pop	{r3, pc}

0001a270 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1a270:	4770      	bx	lr

0001a272 <attr_find_by_handle>:
{
   1a272:	b570      	push	{r4, r5, r6, lr}
   1a274:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1a276:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1a27a:	b1a8      	cbz	r0, 1a2a8 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1a27c:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1a27e:	3801      	subs	r0, #1
	while (upper >= lower) {
   1a280:	4286      	cmp	r6, r0
   1a282:	dd01      	ble.n	1a288 <attr_find_by_handle+0x16>
		return NULL;
   1a284:	2000      	movs	r0, #0
   1a286:	e00f      	b.n	1a2a8 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1a288:	1832      	adds	r2, r6, r0
   1a28a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1a28e:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1a290:	1cd5      	adds	r5, r2, #3
   1a292:	00eb      	lsls	r3, r5, #3
   1a294:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1a298:	892d      	ldrh	r5, [r5, #8]
   1a29a:	428d      	cmp	r5, r1
   1a29c:	d201      	bcs.n	1a2a2 <attr_find_by_handle+0x30>
			lower = m + 1;
   1a29e:	1c56      	adds	r6, r2, #1
   1a2a0:	e7ee      	b.n	1a280 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1a2a2:	d802      	bhi.n	1a2aa <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1a2a4:	3304      	adds	r3, #4
   1a2a6:	18e0      	adds	r0, r4, r3
}
   1a2a8:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1a2aa:	1e50      	subs	r0, r2, #1
   1a2ac:	e7e8      	b.n	1a280 <attr_find_by_handle+0xe>

0001a2ae <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1a2ae:	2300      	movs	r3, #0
{
   1a2b0:	b510      	push	{r4, lr}
   1a2b2:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1a2b4:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1a2b8:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1a2bc:	b910      	cbnz	r0, 1a2c4 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1a2be:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1a2c2:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a2c4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1a2c8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a2ca:	4290      	cmp	r0, r2
	list->head = node;
   1a2cc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1a2d0:	bf08      	it	eq
   1a2d2:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1a2d6:	f003 f908 	bl	1d4ea <k_free>
   1a2da:	e7ed      	b.n	1a2b8 <svc_attr_memory_release+0xa>

0001a2dc <atomic_and>:
{
   1a2dc:	4603      	mov	r3, r0
}
   1a2de:	e8d3 0fef 	ldaex	r0, [r3]
   1a2e2:	ea00 0201 	and.w	r2, r0, r1
   1a2e6:	e8c3 2fec 	stlex	ip, r2, [r3]
   1a2ea:	f1bc 0f00 	cmp.w	ip, #0
   1a2ee:	d1f6      	bne.n	1a2de <atomic_and+0x2>
   1a2f0:	4770      	bx	lr

0001a2f2 <discovery_complete_not_found>:
{
   1a2f2:	b510      	push	{r4, lr}
   1a2f4:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1a2f6:	f7ff ffda 	bl	1a2ae <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a2fa:	f06f 0101 	mvn.w	r1, #1
   1a2fe:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1a302:	f7ff ffeb 	bl	1a2dc <atomic_and>
	if (dm->callback->service_not_found) {
   1a306:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1a30a:	685b      	ldr	r3, [r3, #4]
   1a30c:	b123      	cbz	r3, 1a318 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1a30e:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1a312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1a316:	4718      	bx	r3
}
   1a318:	bd10      	pop	{r4, pc}

0001a31a <bt_gatt_dm_attr_service_val>:
{
   1a31a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a31c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a320:	2400      	movs	r4, #0
{
   1a322:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a324:	6801      	ldr	r1, [r0, #0]
   1a326:	4668      	mov	r0, sp
   1a328:	f88d 4000 	strb.w	r4, [sp]
   1a32c:	f8ad 3002 	strh.w	r3, [sp, #2]
   1a330:	f000 fea0 	bl	1b074 <bt_uuid_cmp>
   1a334:	b918      	cbnz	r0, 1a33e <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1a336:	6828      	ldr	r0, [r5, #0]
   1a338:	3808      	subs	r0, #8
}
   1a33a:	b003      	add	sp, #12
   1a33c:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1a33e:	f642 0301 	movw	r3, #10241	; 0x2801
   1a342:	6829      	ldr	r1, [r5, #0]
   1a344:	a801      	add	r0, sp, #4
   1a346:	f88d 4004 	strb.w	r4, [sp, #4]
   1a34a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a34e:	f000 fe91 	bl	1b074 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a352:	2800      	cmp	r0, #0
   1a354:	d0ef      	beq.n	1a336 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1a356:	4620      	mov	r0, r4
   1a358:	e7ef      	b.n	1a33a <bt_gatt_dm_attr_service_val+0x20>

0001a35a <bt_gatt_dm_attr_chrc_val>:
{
   1a35a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1a35c:	f642 0303 	movw	r3, #10243	; 0x2803
   1a360:	2400      	movs	r4, #0
{
   1a362:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1a364:	6801      	ldr	r1, [r0, #0]
   1a366:	a801      	add	r0, sp, #4
   1a368:	f88d 4004 	strb.w	r4, [sp, #4]
   1a36c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a370:	f000 fe80 	bl	1b074 <bt_uuid_cmp>
   1a374:	b918      	cbnz	r0, 1a37e <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1a376:	6828      	ldr	r0, [r5, #0]
   1a378:	3808      	subs	r0, #8
}
   1a37a:	b003      	add	sp, #12
   1a37c:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1a37e:	4620      	mov	r0, r4
   1a380:	e7fb      	b.n	1a37a <bt_gatt_dm_attr_chrc_val+0x20>

0001a382 <bt_gatt_dm_conn_get>:
}
   1a382:	6800      	ldr	r0, [r0, #0]
   1a384:	4770      	bx	lr

0001a386 <bt_gatt_dm_char_next>:
{
   1a386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1a388:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1a38c:	b131      	cbz	r1, 1a39c <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1a38e:	42a9      	cmp	r1, r5
   1a390:	d203      	bcs.n	1a39a <bt_gatt_dm_char_next+0x14>
	return NULL;
   1a392:	2500      	movs	r5, #0
}
   1a394:	4628      	mov	r0, r5
   1a396:	b003      	add	sp, #12
   1a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a39a:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1a39c:	2600      	movs	r6, #0
   1a39e:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1a3a2:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1a3a6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1a3aa:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1a3ae:	3508      	adds	r5, #8
   1a3b0:	42ac      	cmp	r4, r5
   1a3b2:	d9ee      	bls.n	1a392 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1a3b4:	6829      	ldr	r1, [r5, #0]
   1a3b6:	a801      	add	r0, sp, #4
   1a3b8:	f88d 6004 	strb.w	r6, [sp, #4]
   1a3bc:	f8ad 7006 	strh.w	r7, [sp, #6]
   1a3c0:	f000 fe58 	bl	1b074 <bt_uuid_cmp>
   1a3c4:	2800      	cmp	r0, #0
   1a3c6:	d1f2      	bne.n	1a3ae <bt_gatt_dm_char_next+0x28>
   1a3c8:	e7e4      	b.n	1a394 <bt_gatt_dm_char_next+0xe>

0001a3ca <bt_gatt_dm_attr_next>:
{
   1a3ca:	4602      	mov	r2, r0
		prev = dm->attrs;
   1a3cc:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1a3d0:	b111      	cbz	r1, 1a3d8 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1a3d2:	4299      	cmp	r1, r3
   1a3d4:	d30b      	bcc.n	1a3ee <bt_gatt_dm_attr_next+0x24>
   1a3d6:	460b      	mov	r3, r1
		if (++prev < end) {
   1a3d8:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1a3dc:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1a3e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a3e4:	321c      	adds	r2, #28
	return NULL;
   1a3e6:	4290      	cmp	r0, r2
   1a3e8:	bf28      	it	cs
   1a3ea:	2000      	movcs	r0, #0
   1a3ec:	4770      	bx	lr
   1a3ee:	2000      	movs	r0, #0
}
   1a3f0:	4770      	bx	lr

0001a3f2 <bt_gatt_dm_desc_next>:
{
   1a3f2:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1a3f4:	f7ff ffe9 	bl	1a3ca <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1a3f8:	4604      	mov	r4, r0
   1a3fa:	b158      	cbz	r0, 1a414 <bt_gatt_dm_desc_next+0x22>
   1a3fc:	2300      	movs	r3, #0
   1a3fe:	f88d 3004 	strb.w	r3, [sp, #4]
   1a402:	f642 0303 	movw	r3, #10243	; 0x2803
   1a406:	6801      	ldr	r1, [r0, #0]
   1a408:	a801      	add	r0, sp, #4
   1a40a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a40e:	f000 fe31 	bl	1b074 <bt_uuid_cmp>
   1a412:	b900      	cbnz	r0, 1a416 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1a414:	2400      	movs	r4, #0
}
   1a416:	4620      	mov	r0, r4
   1a418:	b002      	add	sp, #8
   1a41a:	bd10      	pop	{r4, pc}

0001a41c <bt_gatt_dm_desc_by_uuid>:
{
   1a41c:	b570      	push	{r4, r5, r6, lr}
   1a41e:	4605      	mov	r5, r0
   1a420:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1a422:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1a424:	4621      	mov	r1, r4
   1a426:	4628      	mov	r0, r5
   1a428:	f7ff ffe3 	bl	1a3f2 <bt_gatt_dm_desc_next>
   1a42c:	4604      	mov	r4, r0
   1a42e:	b128      	cbz	r0, 1a43c <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1a430:	4630      	mov	r0, r6
   1a432:	6821      	ldr	r1, [r4, #0]
   1a434:	f000 fe1e 	bl	1b074 <bt_uuid_cmp>
   1a438:	2800      	cmp	r0, #0
   1a43a:	d1f3      	bne.n	1a424 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1a43c:	4620      	mov	r0, r4
   1a43e:	bd70      	pop	{r4, r5, r6, pc}

0001a440 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1a440:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1a442:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1a446:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a448:	f06f 0102 	mvn.w	r1, #2
   1a44c:	4628      	mov	r0, r5
   1a44e:	f7ff ff45 	bl	1a2dc <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1a452:	0783      	lsls	r3, r0, #30
   1a454:	d509      	bpl.n	1a46a <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1a456:	4620      	mov	r0, r4
   1a458:	f7ff ff29 	bl	1a2ae <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a45c:	f06f 0101 	mvn.w	r1, #1
   1a460:	4628      	mov	r0, r5
   1a462:	f7ff ff3b 	bl	1a2dc <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1a466:	2000      	movs	r0, #0
}
   1a468:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1a46a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1a46e:	e7fb      	b.n	1a468 <bt_gatt_dm_data_release+0x28>

0001a470 <bt_scan_stop>:
	return bt_le_scan_stop();
   1a470:	f7f5 bf2a 	b.w	102c8 <bt_le_scan_stop>

0001a474 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1a474:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1a476:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1a478:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a47a:	bf9c      	itt	ls
   1a47c:	6880      	ldrls	r0, [r0, #8]
   1a47e:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1a480:	3b01      	subs	r3, #1
   1a482:	1a98      	subs	r0, r3, r2
}
   1a484:	4770      	bx	lr

0001a486 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a486:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1a48a:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a48e:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1a490:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a494:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1a496:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a498:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a49a:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1a49c:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1a49e:	d904      	bls.n	1a4aa <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a4a0:	f000 fd73 	bl	1af8a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1a4a4:	60ec      	str	r4, [r5, #12]
}
   1a4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a4aa:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1a4ac:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a4b0:	f000 fd6b 	bl	1af8a <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a4b4:	4622      	mov	r2, r4
   1a4b6:	6868      	ldr	r0, [r5, #4]
   1a4b8:	eb07 0108 	add.w	r1, r7, r8
   1a4bc:	e7f0      	b.n	1a4a0 <_WriteNoCheck+0x1a>

0001a4be <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1a4be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a4c2:	4606      	mov	r6, r0
   1a4c4:	4689      	mov	r9, r1
   1a4c6:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1a4c8:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1a4cc:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a4ce:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a4d0:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1a4d2:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a4d4:	bf28      	it	cs
   1a4d6:	18e4      	addcs	r4, r4, r3
   1a4d8:	3c01      	subs	r4, #1
   1a4da:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a4dc:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a4de:	42bc      	cmp	r4, r7
   1a4e0:	bf28      	it	cs
   1a4e2:	463c      	movcs	r4, r7
   1a4e4:	4294      	cmp	r4, r2
   1a4e6:	bf28      	it	cs
   1a4e8:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a4ea:	6870      	ldr	r0, [r6, #4]
   1a4ec:	4649      	mov	r1, r9
   1a4ee:	4428      	add	r0, r5
   1a4f0:	4622      	mov	r2, r4
   1a4f2:	f000 fd4a 	bl	1af8a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1a4f6:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1a4f8:	4425      	add	r5, r4
      WrOff = 0u;
   1a4fa:	42ab      	cmp	r3, r5
   1a4fc:	bf08      	it	eq
   1a4fe:	2500      	moveq	r5, #0
  } while (NumBytes);
   1a500:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1a502:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1a504:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1a506:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1a508:	d1e1      	bne.n	1a4ce <_WriteBlocking+0x10>
}
   1a50a:	4640      	mov	r0, r8
   1a50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a510 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1a510:	f7f2 ba98 	b.w	ca44 <_DoInit>

0001a514 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1a514:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1a516:	f7ff fffb 	bl	1a510 <SEGGER_RTT_Init>

	return 0;
}
   1a51a:	2000      	movs	r0, #0
   1a51c:	bd08      	pop	{r3, pc}

0001a51e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1a51e:	b538      	push	{r3, r4, r5, lr}
   1a520:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1a522:	42ab      	cmp	r3, r5
{
   1a524:	4611      	mov	r1, r2
   1a526:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1a528:	d804      	bhi.n	1a534 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1a52a:	461a      	mov	r2, r3
   1a52c:	f000 fd2d 	bl	1af8a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1a530:	4620      	mov	r0, r4
   1a532:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1a534:	2400      	movs	r4, #0
   1a536:	e7fb      	b.n	1a530 <_copy+0x12>

0001a538 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1a538:	f000 bd52 	b.w	1afe0 <memset>

0001a53c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1a53c:	09c3      	lsrs	r3, r0, #7
   1a53e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a542:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1a546:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1a54a:	b2c0      	uxtb	r0, r0
   1a54c:	4770      	bx	lr

0001a54e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1a54e:	78cb      	ldrb	r3, [r1, #3]
   1a550:	7802      	ldrb	r2, [r0, #0]
   1a552:	4053      	eors	r3, r2
   1a554:	7003      	strb	r3, [r0, #0]
   1a556:	884b      	ldrh	r3, [r1, #2]
   1a558:	7842      	ldrb	r2, [r0, #1]
   1a55a:	4053      	eors	r3, r2
   1a55c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1a55e:	680a      	ldr	r2, [r1, #0]
   1a560:	7883      	ldrb	r3, [r0, #2]
   1a562:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a566:	7083      	strb	r3, [r0, #2]
   1a568:	680a      	ldr	r2, [r1, #0]
   1a56a:	78c3      	ldrb	r3, [r0, #3]
   1a56c:	4053      	eors	r3, r2
   1a56e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1a570:	79cb      	ldrb	r3, [r1, #7]
   1a572:	7902      	ldrb	r2, [r0, #4]
   1a574:	4053      	eors	r3, r2
   1a576:	7103      	strb	r3, [r0, #4]
   1a578:	88cb      	ldrh	r3, [r1, #6]
   1a57a:	7942      	ldrb	r2, [r0, #5]
   1a57c:	4053      	eors	r3, r2
   1a57e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1a580:	684a      	ldr	r2, [r1, #4]
   1a582:	7983      	ldrb	r3, [r0, #6]
   1a584:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a588:	7183      	strb	r3, [r0, #6]
   1a58a:	684a      	ldr	r2, [r1, #4]
   1a58c:	79c3      	ldrb	r3, [r0, #7]
   1a58e:	4053      	eors	r3, r2
   1a590:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1a592:	7acb      	ldrb	r3, [r1, #11]
   1a594:	7a02      	ldrb	r2, [r0, #8]
   1a596:	4053      	eors	r3, r2
   1a598:	7203      	strb	r3, [r0, #8]
   1a59a:	7a42      	ldrb	r2, [r0, #9]
   1a59c:	894b      	ldrh	r3, [r1, #10]
   1a59e:	4053      	eors	r3, r2
   1a5a0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1a5a2:	688a      	ldr	r2, [r1, #8]
   1a5a4:	7a83      	ldrb	r3, [r0, #10]
   1a5a6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a5aa:	7283      	strb	r3, [r0, #10]
   1a5ac:	688a      	ldr	r2, [r1, #8]
   1a5ae:	7ac3      	ldrb	r3, [r0, #11]
   1a5b0:	4053      	eors	r3, r2
   1a5b2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1a5b4:	7bcb      	ldrb	r3, [r1, #15]
   1a5b6:	7b02      	ldrb	r2, [r0, #12]
   1a5b8:	4053      	eors	r3, r2
   1a5ba:	7303      	strb	r3, [r0, #12]
   1a5bc:	89cb      	ldrh	r3, [r1, #14]
   1a5be:	7b42      	ldrb	r2, [r0, #13]
   1a5c0:	4053      	eors	r3, r2
   1a5c2:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1a5c4:	68ca      	ldr	r2, [r1, #12]
   1a5c6:	7b83      	ldrb	r3, [r0, #14]
   1a5c8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a5cc:	7383      	strb	r3, [r0, #14]
   1a5ce:	68ca      	ldr	r2, [r1, #12]
   1a5d0:	7bc3      	ldrb	r3, [r0, #15]
   1a5d2:	4053      	eors	r3, r2
   1a5d4:	73c3      	strb	r3, [r0, #15]
}
   1a5d6:	4770      	bx	lr

0001a5d8 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1a5d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a5da:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a5dc:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a5de:	f88d 2000 	strb.w	r2, [sp]
   1a5e2:	7942      	ldrb	r2, [r0, #5]
   1a5e4:	f88d 2001 	strb.w	r2, [sp, #1]
   1a5e8:	7a82      	ldrb	r2, [r0, #10]
   1a5ea:	f88d 2002 	strb.w	r2, [sp, #2]
   1a5ee:	7bc2      	ldrb	r2, [r0, #15]
   1a5f0:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1a5f4:	7902      	ldrb	r2, [r0, #4]
   1a5f6:	f88d 2004 	strb.w	r2, [sp, #4]
   1a5fa:	7a42      	ldrb	r2, [r0, #9]
   1a5fc:	f88d 2005 	strb.w	r2, [sp, #5]
   1a600:	7b82      	ldrb	r2, [r0, #14]
   1a602:	f88d 2006 	strb.w	r2, [sp, #6]
   1a606:	78c2      	ldrb	r2, [r0, #3]
   1a608:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1a60c:	7a02      	ldrb	r2, [r0, #8]
   1a60e:	f88d 2008 	strb.w	r2, [sp, #8]
   1a612:	7b42      	ldrb	r2, [r0, #13]
   1a614:	f88d 2009 	strb.w	r2, [sp, #9]
   1a618:	7882      	ldrb	r2, [r0, #2]
   1a61a:	f88d 200a 	strb.w	r2, [sp, #10]
   1a61e:	79c2      	ldrb	r2, [r0, #7]
   1a620:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a624:	7b02      	ldrb	r2, [r0, #12]
   1a626:	f88d 200c 	strb.w	r2, [sp, #12]
   1a62a:	7842      	ldrb	r2, [r0, #1]
   1a62c:	f88d 200d 	strb.w	r2, [sp, #13]
   1a630:	7982      	ldrb	r2, [r0, #6]
   1a632:	f88d 200e 	strb.w	r2, [sp, #14]
   1a636:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a63a:	2310      	movs	r3, #16
   1a63c:	466a      	mov	r2, sp
   1a63e:	4619      	mov	r1, r3
   1a640:	f7ff ff6d 	bl	1a51e <_copy>
}
   1a644:	b005      	add	sp, #20
   1a646:	f85d fb04 	ldr.w	pc, [sp], #4

0001a64a <mult_row_column>:
{
   1a64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a64c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a64e:	7808      	ldrb	r0, [r1, #0]
{
   1a650:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a652:	f7ff ff73 	bl	1a53c <_double_byte>
   1a656:	4605      	mov	r5, r0
   1a658:	7860      	ldrb	r0, [r4, #1]
   1a65a:	f7ff ff6f 	bl	1a53c <_double_byte>
   1a65e:	78a2      	ldrb	r2, [r4, #2]
   1a660:	7863      	ldrb	r3, [r4, #1]
   1a662:	4053      	eors	r3, r2
   1a664:	78e2      	ldrb	r2, [r4, #3]
   1a666:	4053      	eors	r3, r2
   1a668:	405d      	eors	r5, r3
   1a66a:	4045      	eors	r5, r0
   1a66c:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1a66e:	7860      	ldrb	r0, [r4, #1]
   1a670:	7827      	ldrb	r7, [r4, #0]
   1a672:	f7ff ff63 	bl	1a53c <_double_byte>
   1a676:	4605      	mov	r5, r0
   1a678:	78a0      	ldrb	r0, [r4, #2]
   1a67a:	f7ff ff5f 	bl	1a53c <_double_byte>
   1a67e:	78a3      	ldrb	r3, [r4, #2]
   1a680:	405f      	eors	r7, r3
   1a682:	78e3      	ldrb	r3, [r4, #3]
   1a684:	405f      	eors	r7, r3
   1a686:	407d      	eors	r5, r7
   1a688:	4045      	eors	r5, r0
   1a68a:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1a68c:	78a0      	ldrb	r0, [r4, #2]
   1a68e:	7865      	ldrb	r5, [r4, #1]
   1a690:	7827      	ldrb	r7, [r4, #0]
   1a692:	f7ff ff53 	bl	1a53c <_double_byte>
   1a696:	406f      	eors	r7, r5
   1a698:	4605      	mov	r5, r0
   1a69a:	78e0      	ldrb	r0, [r4, #3]
   1a69c:	f7ff ff4e 	bl	1a53c <_double_byte>
   1a6a0:	78e3      	ldrb	r3, [r4, #3]
   1a6a2:	405f      	eors	r7, r3
   1a6a4:	407d      	eors	r5, r7
   1a6a6:	4045      	eors	r5, r0
   1a6a8:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1a6aa:	7820      	ldrb	r0, [r4, #0]
   1a6ac:	f7ff ff46 	bl	1a53c <_double_byte>
   1a6b0:	7863      	ldrb	r3, [r4, #1]
   1a6b2:	7825      	ldrb	r5, [r4, #0]
   1a6b4:	405d      	eors	r5, r3
   1a6b6:	78a3      	ldrb	r3, [r4, #2]
   1a6b8:	405d      	eors	r5, r3
   1a6ba:	4045      	eors	r5, r0
   1a6bc:	78e0      	ldrb	r0, [r4, #3]
   1a6be:	f7ff ff3d 	bl	1a53c <_double_byte>
   1a6c2:	b2ed      	uxtb	r5, r5
   1a6c4:	4045      	eors	r5, r0
   1a6c6:	70f5      	strb	r5, [r6, #3]
}
   1a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a6ca <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1a6ca:	b570      	push	{r4, r5, r6, lr}
   1a6cc:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1a6ce:	4605      	mov	r5, r0
{
   1a6d0:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1a6d2:	2800      	cmp	r0, #0
   1a6d4:	d049      	beq.n	1a76a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1a6d6:	2900      	cmp	r1, #0
   1a6d8:	d049      	beq.n	1a76e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1a6da:	2a00      	cmp	r2, #0
   1a6dc:	d049      	beq.n	1a772 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1a6de:	2310      	movs	r3, #16
   1a6e0:	460a      	mov	r2, r1
   1a6e2:	4668      	mov	r0, sp
   1a6e4:	4619      	mov	r1, r3
   1a6e6:	f7ff ff1a 	bl	1a51e <_copy>
	add_round_key(state, s->words);
   1a6ea:	4621      	mov	r1, r4
   1a6ec:	4668      	mov	r0, sp
   1a6ee:	f7ff ff2e 	bl	1a54e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1a6f2:	3410      	adds	r4, #16
   1a6f4:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1a6f8:	4668      	mov	r0, sp
   1a6fa:	f7f2 fa03 	bl	cb04 <sub_bytes>
		shift_rows(state);
   1a6fe:	4668      	mov	r0, sp
   1a700:	f7ff ff6a 	bl	1a5d8 <shift_rows>
	mult_row_column(t, s);
   1a704:	4669      	mov	r1, sp
   1a706:	a804      	add	r0, sp, #16
   1a708:	f7ff ff9f 	bl	1a64a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1a70c:	a901      	add	r1, sp, #4
   1a70e:	a805      	add	r0, sp, #20
   1a710:	f7ff ff9b 	bl	1a64a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1a714:	a902      	add	r1, sp, #8
   1a716:	a806      	add	r0, sp, #24
   1a718:	f7ff ff97 	bl	1a64a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1a71c:	a903      	add	r1, sp, #12
   1a71e:	a807      	add	r0, sp, #28
   1a720:	f7ff ff93 	bl	1a64a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a724:	2310      	movs	r3, #16
   1a726:	4668      	mov	r0, sp
   1a728:	4619      	mov	r1, r3
   1a72a:	eb0d 0203 	add.w	r2, sp, r3
   1a72e:	f7ff fef6 	bl	1a51e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1a732:	4621      	mov	r1, r4
   1a734:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1a736:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1a738:	f7ff ff09 	bl	1a54e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1a73c:	42a6      	cmp	r6, r4
   1a73e:	d1db      	bne.n	1a6f8 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1a740:	f7f2 f9e0 	bl	cb04 <sub_bytes>
	shift_rows(state);
   1a744:	4668      	mov	r0, sp
   1a746:	f7ff ff47 	bl	1a5d8 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1a74a:	4631      	mov	r1, r6
   1a74c:	4668      	mov	r0, sp
   1a74e:	f7ff fefe 	bl	1a54e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1a752:	2310      	movs	r3, #16
   1a754:	466a      	mov	r2, sp
   1a756:	4619      	mov	r1, r3
   1a758:	4628      	mov	r0, r5
   1a75a:	f7ff fee0 	bl	1a51e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1a75e:	4668      	mov	r0, sp
   1a760:	2210      	movs	r2, #16
   1a762:	2100      	movs	r1, #0
   1a764:	f7ff fee8 	bl	1a538 <_set>

	return TC_CRYPTO_SUCCESS;
   1a768:	2001      	movs	r0, #1
}
   1a76a:	b008      	add	sp, #32
   1a76c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a76e:	4608      	mov	r0, r1
   1a770:	e7fb      	b.n	1a76a <tc_aes_encrypt+0xa0>
   1a772:	4610      	mov	r0, r2
   1a774:	e7f9      	b.n	1a76a <tc_aes_encrypt+0xa0>

0001a776 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a776:	460a      	mov	r2, r1
{
   1a778:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a77a:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1a77e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a780:	2b00      	cmp	r3, #0
   1a782:	bfb4      	ite	lt
   1a784:	2387      	movlt	r3, #135	; 0x87
   1a786:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1a788:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1a78c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1a790:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1a792:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1a796:	d002      	beq.n	1a79e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1a798:	7813      	ldrb	r3, [r2, #0]
   1a79a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1a79c:	e7f4      	b.n	1a788 <gf_double+0x12>
	}
}
   1a79e:	bd10      	pop	{r4, pc}

0001a7a0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1a7a0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1a7a2:	b120      	cbz	r0, 1a7ae <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1a7a4:	2258      	movs	r2, #88	; 0x58
   1a7a6:	2100      	movs	r1, #0
   1a7a8:	f7ff fec6 	bl	1a538 <_set>
   1a7ac:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1a7ae:	bd08      	pop	{r3, pc}

0001a7b0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1a7b0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a7b2:	4604      	mov	r4, r0
   1a7b4:	b188      	cbz	r0, 1a7da <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a7b6:	2210      	movs	r2, #16
   1a7b8:	2100      	movs	r1, #0
   1a7ba:	f7ff febd 	bl	1a538 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1a7be:	2210      	movs	r2, #16
   1a7c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a7c4:	2100      	movs	r1, #0
   1a7c6:	f7ff feb7 	bl	1a538 <_set>
	s->leftover_offset = 0;
   1a7ca:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1a7cc:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1a7ce:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1a7d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a7d4:	2001      	movs	r0, #1
   1a7d6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1a7da:	bd10      	pop	{r4, pc}

0001a7dc <tc_cmac_setup>:
{
   1a7dc:	b570      	push	{r4, r5, r6, lr}
   1a7de:	460d      	mov	r5, r1
   1a7e0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1a7e2:	4604      	mov	r4, r0
   1a7e4:	b310      	cbz	r0, 1a82c <tc_cmac_setup+0x50>
   1a7e6:	b311      	cbz	r1, 1a82e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1a7e8:	2258      	movs	r2, #88	; 0x58
   1a7ea:	2100      	movs	r1, #0
   1a7ec:	f7ff fea4 	bl	1a538 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1a7f0:	4629      	mov	r1, r5
   1a7f2:	4630      	mov	r0, r6
	s->sched = sched;
   1a7f4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1a7f6:	f7f2 f991 	bl	cb1c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a7fa:	2210      	movs	r2, #16
   1a7fc:	2100      	movs	r1, #0
   1a7fe:	4620      	mov	r0, r4
   1a800:	f7ff fe9a 	bl	1a538 <_set>
	gf_double (s->K1, s->iv);
   1a804:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a808:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a80a:	4621      	mov	r1, r4
   1a80c:	4620      	mov	r0, r4
   1a80e:	f7ff ff5c 	bl	1a6ca <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1a812:	4621      	mov	r1, r4
   1a814:	4628      	mov	r0, r5
   1a816:	f7ff ffae 	bl	1a776 <gf_double>
	gf_double (s->K2, s->K1);
   1a81a:	4629      	mov	r1, r5
   1a81c:	f104 0020 	add.w	r0, r4, #32
   1a820:	f7ff ffa9 	bl	1a776 <gf_double>
	tc_cmac_init(s);
   1a824:	4620      	mov	r0, r4
   1a826:	f7ff ffc3 	bl	1a7b0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1a82a:	2001      	movs	r0, #1
}
   1a82c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a82e:	4608      	mov	r0, r1
   1a830:	e7fc      	b.n	1a82c <tc_cmac_setup+0x50>

0001a832 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1a832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a836:	460d      	mov	r5, r1
   1a838:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a83a:	4604      	mov	r4, r0
   1a83c:	2800      	cmp	r0, #0
   1a83e:	d061      	beq.n	1a904 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1a840:	b912      	cbnz	r2, 1a848 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1a842:	2001      	movs	r0, #1
}
   1a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1a848:	2900      	cmp	r1, #0
   1a84a:	d05b      	beq.n	1a904 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1a84c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1a850:	ea53 0102 	orrs.w	r1, r3, r2
   1a854:	d056      	beq.n	1a904 <tc_cmac_update+0xd2>
	s->countdown--;
   1a856:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1a858:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1a85c:	f142 32ff 	adc.w	r2, r2, #4294967295
   1a860:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1a864:	f1b8 0f00 	cmp.w	r8, #0
   1a868:	d02a      	beq.n	1a8c0 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1a86a:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a86e:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1a872:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a874:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1a876:	d208      	bcs.n	1a88a <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a878:	462a      	mov	r2, r5
   1a87a:	4633      	mov	r3, r6
   1a87c:	4631      	mov	r1, r6
   1a87e:	f7ff fe4e 	bl	1a51e <_copy>
			s->leftover_offset += data_length;
   1a882:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a884:	4432      	add	r2, r6
   1a886:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1a888:	e7db      	b.n	1a842 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1a88a:	463b      	mov	r3, r7
   1a88c:	462a      	mov	r2, r5
   1a88e:	4639      	mov	r1, r7
   1a890:	f7ff fe45 	bl	1a51e <_copy>
		s->leftover_offset = 0;
   1a894:	2300      	movs	r3, #0
   1a896:	3e10      	subs	r6, #16
   1a898:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1a89a:	4446      	add	r6, r8
		data += remaining_space;
   1a89c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a89e:	1e63      	subs	r3, r4, #1
   1a8a0:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1a8a4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a8a8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a8ac:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1a8ae:	ea82 0200 	eor.w	r2, r2, r0
   1a8b2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a8b4:	d1f6      	bne.n	1a8a4 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a8b6:	4621      	mov	r1, r4
   1a8b8:	4620      	mov	r0, r4
   1a8ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a8bc:	f7ff ff05 	bl	1a6ca <tc_aes_encrypt>
   1a8c0:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1a8c4:	2e10      	cmp	r6, #16
   1a8c6:	d80a      	bhi.n	1a8de <tc_cmac_update+0xac>
	if (data_length > 0) {
   1a8c8:	2e00      	cmp	r6, #0
   1a8ca:	d0ba      	beq.n	1a842 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1a8cc:	4633      	mov	r3, r6
   1a8ce:	462a      	mov	r2, r5
   1a8d0:	4631      	mov	r1, r6
   1a8d2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a8d6:	f7ff fe22 	bl	1a51e <_copy>
		s->leftover_offset = data_length;
   1a8da:	6466      	str	r6, [r4, #68]	; 0x44
   1a8dc:	e7b1      	b.n	1a842 <tc_cmac_update+0x10>
   1a8de:	1e63      	subs	r3, r4, #1
   1a8e0:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1a8e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a8e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a8ea:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1a8ec:	ea82 0200 	eor.w	r2, r2, r0
   1a8f0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a8f2:	d1f6      	bne.n	1a8e2 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a8f4:	4621      	mov	r1, r4
   1a8f6:	4620      	mov	r0, r4
   1a8f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a8fa:	f7ff fee6 	bl	1a6ca <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1a8fe:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1a900:	3e10      	subs	r6, #16
   1a902:	e7df      	b.n	1a8c4 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1a904:	2000      	movs	r0, #0
   1a906:	e79d      	b.n	1a844 <tc_cmac_update+0x12>

0001a908 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1a908:	b570      	push	{r4, r5, r6, lr}
   1a90a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a90c:	4605      	mov	r5, r0
   1a90e:	b1f0      	cbz	r0, 1a94e <tc_cmac_final+0x46>
   1a910:	b371      	cbz	r1, 1a970 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1a912:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1a914:	2a10      	cmp	r2, #16
   1a916:	d11b      	bne.n	1a950 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1a918:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a91a:	1e63      	subs	r3, r4, #1
   1a91c:	3901      	subs	r1, #1
   1a91e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a922:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a926:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a92a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a92c:	ea82 0206 	eor.w	r2, r2, r6
   1a930:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1a934:	ea82 0206 	eor.w	r2, r2, r6
   1a938:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a93a:	d1f2      	bne.n	1a922 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1a93c:	4621      	mov	r1, r4
   1a93e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a940:	4628      	mov	r0, r5
   1a942:	f7ff fec2 	bl	1a6ca <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1a946:	4620      	mov	r0, r4
   1a948:	f7ff ff2a 	bl	1a7a0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1a94c:	2001      	movs	r0, #1
}
   1a94e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1a950:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1a954:	2100      	movs	r1, #0
   1a956:	f1c2 0210 	rsb	r2, r2, #16
   1a95a:	4420      	add	r0, r4
   1a95c:	f7ff fdec 	bl	1a538 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a960:	2280      	movs	r2, #128	; 0x80
   1a962:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1a964:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a968:	4423      	add	r3, r4
   1a96a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1a96e:	e7d4      	b.n	1a91a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1a970:	4608      	mov	r0, r1
   1a972:	e7ec      	b.n	1a94e <tc_cmac_final+0x46>

0001a974 <tc_sha256_update>:
{
   1a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a976:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1a978:	b110      	cbz	r0, 1a980 <tc_sha256_update+0xc>
   1a97a:	b1f9      	cbz	r1, 1a9bc <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1a97c:	b90a      	cbnz	r2, 1a982 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1a97e:	2001      	movs	r0, #1
}
   1a980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1a982:	2600      	movs	r6, #0
   1a984:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1a986:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1a98a:	42a5      	cmp	r5, r4
   1a98c:	d0f7      	beq.n	1a97e <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1a98e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1a990:	1c5a      	adds	r2, r3, #1
   1a992:	6682      	str	r2, [r0, #104]	; 0x68
   1a994:	f814 1b01 	ldrb.w	r1, [r4], #1
   1a998:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1a99a:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1a99c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1a9a0:	d9f3      	bls.n	1a98a <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1a9a2:	4639      	mov	r1, r7
   1a9a4:	f7f2 f90e 	bl	cbc4 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1a9a8:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1a9ac:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1a9b0:	f142 0200 	adc.w	r2, r2, #0
   1a9b4:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1a9b8:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1a9ba:	e7e6      	b.n	1a98a <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1a9bc:	4608      	mov	r0, r1
   1a9be:	e7df      	b.n	1a980 <tc_sha256_update+0xc>

0001a9c0 <tc_sha256_final>:
{
   1a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9c2:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1a9c4:	4605      	mov	r5, r0
   1a9c6:	2800      	cmp	r0, #0
   1a9c8:	d055      	beq.n	1aa76 <tc_sha256_final+0xb6>
   1a9ca:	2900      	cmp	r1, #0
   1a9cc:	d054      	beq.n	1aa78 <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1a9ce:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1a9d0:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1a9d4:	00d8      	lsls	r0, r3, #3
   1a9d6:	1812      	adds	r2, r2, r0
   1a9d8:	f141 0100 	adc.w	r1, r1, #0
   1a9dc:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a9e0:	2280      	movs	r2, #128	; 0x80
   1a9e2:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1a9e4:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a9e6:	4423      	add	r3, r4
   1a9e8:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1a9ea:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a9ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1a9f2:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1a9f6:	d90a      	bls.n	1aa0e <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1a9f8:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1a9fc:	4639      	mov	r1, r7
   1a9fe:	4430      	add	r0, r6
   1aa00:	f7ff fd9a 	bl	1a538 <_set>
		compress(s->iv, s->leftover);
   1aa04:	4631      	mov	r1, r6
   1aa06:	4620      	mov	r0, r4
   1aa08:	f7f2 f8dc 	bl	cbc4 <compress>
		s->leftover_offset = 0;
   1aa0c:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1aa0e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1aa10:	2100      	movs	r1, #0
   1aa12:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1aa16:	4430      	add	r0, r6
   1aa18:	f7ff fd8e 	bl	1a538 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1aa1c:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1aa1e:	4631      	mov	r1, r6
   1aa20:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1aa22:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1aa24:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1aa26:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1aa28:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1aa2c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1aa30:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1aa32:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1aa34:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1aa36:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1aa3a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1aa3e:	f7f2 f8c1 	bl	cbc4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1aa42:	1f26      	subs	r6, r4, #4
   1aa44:	1d2b      	adds	r3, r5, #4
   1aa46:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1aa4a:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1aa4e:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1aa50:	0e11      	lsrs	r1, r2, #24
   1aa52:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1aa56:	0c11      	lsrs	r1, r2, #16
   1aa58:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1aa5c:	0a11      	lsrs	r1, r2, #8
   1aa5e:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1aa62:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1aa66:	4283      	cmp	r3, r0
   1aa68:	d1ef      	bne.n	1aa4a <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1aa6a:	4620      	mov	r0, r4
   1aa6c:	2270      	movs	r2, #112	; 0x70
   1aa6e:	2100      	movs	r1, #0
   1aa70:	f7ff fd62 	bl	1a538 <_set>
	return TC_CRYPTO_SUCCESS;
   1aa74:	2001      	movs	r0, #1
}
   1aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1aa78:	4608      	mov	r0, r1
   1aa7a:	e7fc      	b.n	1aa76 <tc_sha256_final+0xb6>

0001aa7c <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1aa7c:	b530      	push	{r4, r5, lr}
   1aa7e:	1e43      	subs	r3, r0, #1
   1aa80:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1aa82:	42a9      	cmp	r1, r5
   1aa84:	d106      	bne.n	1aa94 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1aa86:	2136      	movs	r1, #54	; 0x36
   1aa88:	245c      	movs	r4, #92	; 0x5c
   1aa8a:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1aa8c:	1a13      	subs	r3, r2, r0
   1aa8e:	2b3f      	cmp	r3, #63	; 0x3f
   1aa90:	d90c      	bls.n	1aaac <rekey+0x30>
	}
}
   1aa92:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1aa94:	780c      	ldrb	r4, [r1, #0]
   1aa96:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1aa9a:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1aa9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1aaa2:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1aaa6:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1aaaa:	e7ea      	b.n	1aa82 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1aaac:	f802 1b01 	strb.w	r1, [r2], #1
   1aab0:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1aab4:	e7ea      	b.n	1aa8c <rekey+0x10>

0001aab6 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1aab6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aab8:	460e      	mov	r6, r1
   1aaba:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1aabc:	4605      	mov	r5, r0
{
   1aabe:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1aac0:	b1b8      	cbz	r0, 1aaf2 <tc_hmac_set_key+0x3c>
   1aac2:	b341      	cbz	r1, 1ab16 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1aac4:	b34a      	cbz	r2, 1ab1a <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1aac6:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1aac8:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1aacc:	d813      	bhi.n	1aaf6 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1aace:	a810      	add	r0, sp, #64	; 0x40
   1aad0:	f7f2 f960 	bl	cd94 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1aad4:	4622      	mov	r2, r4
   1aad6:	4669      	mov	r1, sp
   1aad8:	a810      	add	r0, sp, #64	; 0x40
   1aada:	f7ff ff4b 	bl	1a974 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1aade:	a910      	add	r1, sp, #64	; 0x40
   1aae0:	a834      	add	r0, sp, #208	; 0xd0
   1aae2:	f7ff ff6d 	bl	1a9c0 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1aae6:	4622      	mov	r2, r4
   1aae8:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1aaea:	4638      	mov	r0, r7
   1aaec:	f7ff ffc6 	bl	1aa7c <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1aaf0:	2001      	movs	r0, #1
}
   1aaf2:	b04d      	add	sp, #308	; 0x134
   1aaf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1aaf6:	f7f2 f94d 	bl	cd94 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1aafa:	4622      	mov	r2, r4
   1aafc:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1aafe:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1ab02:	4628      	mov	r0, r5
   1ab04:	f7ff ff36 	bl	1a974 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1ab08:	4629      	mov	r1, r5
   1ab0a:	4620      	mov	r0, r4
   1ab0c:	f7ff ff58 	bl	1a9c0 <tc_sha256_final>
		rekey(ctx->key,
   1ab10:	2220      	movs	r2, #32
   1ab12:	4621      	mov	r1, r4
   1ab14:	e7e9      	b.n	1aaea <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1ab16:	4608      	mov	r0, r1
   1ab18:	e7eb      	b.n	1aaf2 <tc_hmac_set_key+0x3c>
   1ab1a:	4610      	mov	r0, r2
   1ab1c:	e7e9      	b.n	1aaf2 <tc_hmac_set_key+0x3c>

0001ab1e <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1ab1e:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1ab20:	4604      	mov	r4, r0
   1ab22:	b140      	cbz	r0, 1ab36 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1ab24:	f7f2 f936 	bl	cd94 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1ab28:	2240      	movs	r2, #64	; 0x40
   1ab2a:	4620      	mov	r0, r4
   1ab2c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1ab30:	f7ff ff20 	bl	1a974 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1ab34:	2001      	movs	r0, #1
}
   1ab36:	bd10      	pop	{r4, pc}

0001ab38 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1ab38:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1ab3a:	b110      	cbz	r0, 1ab42 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1ab3c:	f7ff ff1a 	bl	1a974 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1ab40:	2001      	movs	r0, #1
}
   1ab42:	bd08      	pop	{r3, pc}

0001ab44 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1ab44:	b570      	push	{r4, r5, r6, lr}
   1ab46:	460e      	mov	r6, r1
   1ab48:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1ab4a:	4605      	mov	r5, r0
   1ab4c:	b1f0      	cbz	r0, 1ab8c <tc_hmac_final+0x48>
   1ab4e:	2920      	cmp	r1, #32
   1ab50:	d11c      	bne.n	1ab8c <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1ab52:	b1ea      	cbz	r2, 1ab90 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1ab54:	4611      	mov	r1, r2
   1ab56:	f7ff ff33 	bl	1a9c0 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1ab5a:	4620      	mov	r0, r4
   1ab5c:	f7f2 f91a 	bl	cd94 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1ab60:	2240      	movs	r2, #64	; 0x40
   1ab62:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1ab66:	4620      	mov	r0, r4
   1ab68:	f7ff ff04 	bl	1a974 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1ab6c:	4632      	mov	r2, r6
   1ab6e:	4629      	mov	r1, r5
   1ab70:	4620      	mov	r0, r4
   1ab72:	f7ff feff 	bl	1a974 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1ab76:	4621      	mov	r1, r4
   1ab78:	4628      	mov	r0, r5
   1ab7a:	f7ff ff21 	bl	1a9c0 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1ab7e:	4620      	mov	r0, r4
   1ab80:	22f0      	movs	r2, #240	; 0xf0
   1ab82:	2100      	movs	r1, #0
   1ab84:	f7ff fcd8 	bl	1a538 <_set>

	return TC_CRYPTO_SUCCESS;
   1ab88:	2001      	movs	r0, #1
}
   1ab8a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1ab8c:	2000      	movs	r0, #0
   1ab8e:	e7fc      	b.n	1ab8a <tc_hmac_final+0x46>
   1ab90:	4610      	mov	r0, r2
   1ab92:	e7fa      	b.n	1ab8a <tc_hmac_final+0x46>

0001ab94 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1ab94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab98:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1ab9a:	f04f 0b01 	mov.w	fp, #1
{
   1ab9e:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1aba0:	2300      	movs	r3, #0
{
   1aba2:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aba4:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1aba8:	4631      	mov	r1, r6
{
   1abaa:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1abac:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1abae:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1abb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1abb6:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1abba:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1abbe:	f7ff ff7a 	bl	1aab6 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1abc2:	4620      	mov	r0, r4
   1abc4:	f7ff ffab 	bl	1ab1e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1abc8:	2220      	movs	r2, #32
   1abca:	4629      	mov	r1, r5
   1abcc:	4620      	mov	r0, r4
   1abce:	f7ff ffb3 	bl	1ab38 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1abd2:	465a      	mov	r2, fp
   1abd4:	4620      	mov	r0, r4
   1abd6:	f10d 0106 	add.w	r1, sp, #6
   1abda:	f7ff ffad 	bl	1ab38 <tc_hmac_update>

	if (data && datalen)
   1abde:	f1b8 0f00 	cmp.w	r8, #0
   1abe2:	d007      	beq.n	1abf4 <update+0x60>
   1abe4:	f1b9 0f00 	cmp.w	r9, #0
   1abe8:	d004      	beq.n	1abf4 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1abea:	464a      	mov	r2, r9
   1abec:	4641      	mov	r1, r8
   1abee:	4620      	mov	r0, r4
   1abf0:	f7ff ffa2 	bl	1ab38 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1abf4:	b13f      	cbz	r7, 1ac06 <update+0x72>
   1abf6:	f1ba 0f00 	cmp.w	sl, #0
   1abfa:	d004      	beq.n	1ac06 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1abfc:	4652      	mov	r2, sl
   1abfe:	4639      	mov	r1, r7
   1ac00:	4620      	mov	r0, r4
   1ac02:	f7ff ff99 	bl	1ab38 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1ac06:	4622      	mov	r2, r4
   1ac08:	2120      	movs	r1, #32
   1ac0a:	4630      	mov	r0, r6
   1ac0c:	f7ff ff9a 	bl	1ab44 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ac10:	2220      	movs	r2, #32
   1ac12:	4631      	mov	r1, r6
   1ac14:	4620      	mov	r0, r4
   1ac16:	f7ff ff4e 	bl	1aab6 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1ac1a:	4620      	mov	r0, r4
   1ac1c:	f7ff ff7f 	bl	1ab1e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ac20:	2220      	movs	r2, #32
   1ac22:	4629      	mov	r1, r5
   1ac24:	4620      	mov	r0, r4
   1ac26:	f7ff ff87 	bl	1ab38 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1ac2a:	4622      	mov	r2, r4
   1ac2c:	2120      	movs	r1, #32
   1ac2e:	4628      	mov	r0, r5
   1ac30:	f7ff ff88 	bl	1ab44 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1ac34:	f1b8 0f00 	cmp.w	r8, #0
   1ac38:	d03a      	beq.n	1acb0 <update+0x11c>
   1ac3a:	f1b9 0f00 	cmp.w	r9, #0
   1ac3e:	d037      	beq.n	1acb0 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ac40:	2220      	movs	r2, #32
   1ac42:	4631      	mov	r1, r6
   1ac44:	4620      	mov	r0, r4
   1ac46:	f7ff ff36 	bl	1aab6 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1ac4a:	4620      	mov	r0, r4
   1ac4c:	f7ff ff67 	bl	1ab1e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ac50:	2220      	movs	r2, #32
   1ac52:	4629      	mov	r1, r5
   1ac54:	4620      	mov	r0, r4
   1ac56:	f7ff ff6f 	bl	1ab38 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1ac5a:	2201      	movs	r2, #1
   1ac5c:	f10d 0107 	add.w	r1, sp, #7
   1ac60:	4620      	mov	r0, r4
   1ac62:	f7ff ff69 	bl	1ab38 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1ac66:	464a      	mov	r2, r9
   1ac68:	4641      	mov	r1, r8
   1ac6a:	4620      	mov	r0, r4
   1ac6c:	f7ff ff64 	bl	1ab38 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1ac70:	b13f      	cbz	r7, 1ac82 <update+0xee>
   1ac72:	f1ba 0f00 	cmp.w	sl, #0
   1ac76:	d004      	beq.n	1ac82 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1ac78:	4652      	mov	r2, sl
   1ac7a:	4639      	mov	r1, r7
   1ac7c:	4620      	mov	r0, r4
   1ac7e:	f7ff ff5b 	bl	1ab38 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1ac82:	4622      	mov	r2, r4
   1ac84:	2120      	movs	r1, #32
   1ac86:	4630      	mov	r0, r6
   1ac88:	f7ff ff5c 	bl	1ab44 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ac8c:	2220      	movs	r2, #32
   1ac8e:	4631      	mov	r1, r6
   1ac90:	4620      	mov	r0, r4
   1ac92:	f7ff ff10 	bl	1aab6 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1ac96:	4620      	mov	r0, r4
   1ac98:	f7ff ff41 	bl	1ab1e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ac9c:	2220      	movs	r2, #32
   1ac9e:	4629      	mov	r1, r5
   1aca0:	4620      	mov	r0, r4
   1aca2:	f7ff ff49 	bl	1ab38 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1aca6:	4622      	mov	r2, r4
   1aca8:	2120      	movs	r1, #32
   1acaa:	4628      	mov	r0, r5
   1acac:	f7ff ff4a 	bl	1ab44 <tc_hmac_final>
}
   1acb0:	b003      	add	sp, #12
   1acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001acb6 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1acb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1acb8:	460c      	mov	r4, r1
   1acba:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1acbc:	4605      	mov	r5, r0
   1acbe:	b1b0      	cbz	r0, 1acee <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1acc0:	b1b9      	cbz	r1, 1acf2 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1acc2:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1acc4:	2220      	movs	r2, #32
   1acc6:	2100      	movs	r1, #0
   1acc8:	30f0      	adds	r0, #240	; 0xf0
   1acca:	f7ff fc35 	bl	1a538 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1acce:	2220      	movs	r2, #32
   1acd0:	2101      	movs	r1, #1
   1acd2:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1acd6:	f7ff fc2f 	bl	1a538 <_set>
	update(prng, personalization, plen, 0, 0);
   1acda:	4628      	mov	r0, r5
   1acdc:	4633      	mov	r3, r6
   1acde:	463a      	mov	r2, r7
   1ace0:	4621      	mov	r1, r4
   1ace2:	9600      	str	r6, [sp, #0]
   1ace4:	f7ff ff56 	bl	1ab94 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1ace8:	2001      	movs	r0, #1
	prng->countdown = 0;
   1acea:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1acee:	b003      	add	sp, #12
   1acf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1acf2:	4608      	mov	r0, r1
   1acf4:	e7fb      	b.n	1acee <tc_hmac_prng_init+0x38>

0001acf6 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1acf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1acf8:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1acfa:	4605      	mov	r5, r0
   1acfc:	b180      	cbz	r0, 1ad20 <tc_hmac_prng_reseed+0x2a>
   1acfe:	b179      	cbz	r1, 1ad20 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1ad00:	2a1f      	cmp	r2, #31
   1ad02:	d90d      	bls.n	1ad20 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1ad04:	b153      	cbz	r3, 1ad1c <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1ad06:	b16c      	cbz	r4, 1ad24 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1ad08:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1ad0a:	f7ff ff43 	bl	1ab94 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1ad0e:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1ad12:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1ad14:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1ad18:	b003      	add	sp, #12
   1ad1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1ad1c:	9300      	str	r3, [sp, #0]
   1ad1e:	e7f4      	b.n	1ad0a <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1ad20:	2000      	movs	r0, #0
   1ad22:	e7f9      	b.n	1ad18 <tc_hmac_prng_reseed+0x22>
   1ad24:	4620      	mov	r0, r4
   1ad26:	e7f7      	b.n	1ad18 <tc_hmac_prng_reseed+0x22>

0001ad28 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1ad28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ad2c:	460d      	mov	r5, r1
   1ad2e:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1ad30:	4680      	mov	r8, r0
   1ad32:	b3d8      	cbz	r0, 1adac <tc_hmac_prng_generate+0x84>
   1ad34:	b3d2      	cbz	r2, 1adac <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1ad36:	1e4b      	subs	r3, r1, #1
   1ad38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1ad3c:	d236      	bcs.n	1adac <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1ad3e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1ad42:	b3ab      	cbz	r3, 1adb0 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1ad44:	3b01      	subs	r3, #1
   1ad46:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ad4a:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ad4e:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ad52:	2220      	movs	r2, #32
   1ad54:	4649      	mov	r1, r9
   1ad56:	4620      	mov	r0, r4
   1ad58:	f7ff fead 	bl	1aab6 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1ad5c:	4620      	mov	r0, r4
   1ad5e:	f7ff fede 	bl	1ab1e <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ad62:	2220      	movs	r2, #32
   1ad64:	4639      	mov	r1, r7
   1ad66:	4620      	mov	r0, r4
   1ad68:	f7ff fee6 	bl	1ab38 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1ad6c:	4622      	mov	r2, r4
   1ad6e:	2120      	movs	r1, #32
   1ad70:	4638      	mov	r0, r7
   1ad72:	f7ff fee7 	bl	1ab44 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1ad76:	2d20      	cmp	r5, #32
   1ad78:	462e      	mov	r6, r5
   1ad7a:	bf28      	it	cs
   1ad7c:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1ad7e:	4640      	mov	r0, r8
   1ad80:	4633      	mov	r3, r6
   1ad82:	463a      	mov	r2, r7
   1ad84:	4631      	mov	r1, r6
   1ad86:	f7ff fbca 	bl	1a51e <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1ad8a:	2d20      	cmp	r5, #32
   1ad8c:	bf38      	it	cc
   1ad8e:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1ad90:	3d20      	subs	r5, #32
		out += bufferlen;
   1ad92:	44b0      	add	r8, r6
	while (outlen != 0) {
   1ad94:	d1dd      	bne.n	1ad52 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1ad96:	4620      	mov	r0, r4
   1ad98:	462b      	mov	r3, r5
   1ad9a:	462a      	mov	r2, r5
   1ad9c:	4629      	mov	r1, r5
   1ad9e:	9500      	str	r5, [sp, #0]
   1ada0:	f7ff fef8 	bl	1ab94 <update>

	return TC_CRYPTO_SUCCESS;
   1ada4:	2001      	movs	r0, #1
}
   1ada6:	b003      	add	sp, #12
   1ada8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1adac:	2000      	movs	r0, #0
   1adae:	e7fa      	b.n	1ada6 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1adb0:	f04f 30ff 	mov.w	r0, #4294967295
   1adb4:	e7f7      	b.n	1ada6 <tc_hmac_prng_generate+0x7e>

0001adb6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1adb6:	2100      	movs	r1, #0
   1adb8:	2001      	movs	r0, #1
   1adba:	f7f2 b909 	b.w	cfd0 <z_arm_fatal_error>

0001adbe <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1adbe:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1adc0:	f383 880b 	msr	PSPLIM, r3
}
   1adc4:	4770      	bx	lr

0001adc6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1adc6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1adc8:	6800      	ldr	r0, [r0, #0]
   1adca:	f7f2 b901 	b.w	cfd0 <z_arm_fatal_error>

0001adce <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1adce:	b508      	push	{r3, lr}
	handler();
   1add0:	f7f2 f92c 	bl	d02c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1add4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1add8:	f7f2 bb70 	b.w	d4bc <z_arm_exc_exit>

0001addc <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1addc:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1ade0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1ade4:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1ade6:	bf08      	it	eq
   1ade8:	f06f 0015 	mvneq.w	r0, #21
   1adec:	4770      	bx	lr

0001adee <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1adee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1adf2:	4684      	mov	ip, r0
   1adf4:	4688      	mov	r8, r1
	register const char *s = nptr;
   1adf6:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1adf8:	4621      	mov	r1, r4
   1adfa:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1adfe:	2b20      	cmp	r3, #32
   1ae00:	d0fa      	beq.n	1adf8 <strtol+0xa>
   1ae02:	f1a3 0009 	sub.w	r0, r3, #9
   1ae06:	2804      	cmp	r0, #4
   1ae08:	d9f6      	bls.n	1adf8 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1ae0a:	2b2d      	cmp	r3, #45	; 0x2d
   1ae0c:	d12d      	bne.n	1ae6a <strtol+0x7c>
		neg = 1;
		c = *s++;
   1ae0e:	784b      	ldrb	r3, [r1, #1]
   1ae10:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1ae12:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1ae14:	2a00      	cmp	r2, #0
   1ae16:	d05a      	beq.n	1aece <strtol+0xe0>
   1ae18:	2a10      	cmp	r2, #16
   1ae1a:	d109      	bne.n	1ae30 <strtol+0x42>
   1ae1c:	2b30      	cmp	r3, #48	; 0x30
   1ae1e:	d107      	bne.n	1ae30 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1ae20:	7823      	ldrb	r3, [r4, #0]
   1ae22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ae26:	2b58      	cmp	r3, #88	; 0x58
   1ae28:	d14c      	bne.n	1aec4 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1ae2a:	2210      	movs	r2, #16
		c = s[1];
   1ae2c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1ae2e:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1ae30:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1ae32:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1ae36:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1ae38:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1ae3c:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1ae3e:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ae42:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1ae46:	2d09      	cmp	r5, #9
   1ae48:	d815      	bhi.n	1ae76 <strtol+0x88>
			c -= '0';
   1ae4a:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1ae4c:	429a      	cmp	r2, r3
   1ae4e:	dd22      	ble.n	1ae96 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1ae50:	1c75      	adds	r5, r6, #1
   1ae52:	d007      	beq.n	1ae64 <strtol+0x76>
   1ae54:	4570      	cmp	r0, lr
   1ae56:	d81b      	bhi.n	1ae90 <strtol+0xa2>
   1ae58:	d101      	bne.n	1ae5e <strtol+0x70>
   1ae5a:	454b      	cmp	r3, r9
   1ae5c:	dc18      	bgt.n	1ae90 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1ae5e:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1ae60:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1ae64:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1ae68:	e7eb      	b.n	1ae42 <strtol+0x54>
	} else if (c == '+') {
   1ae6a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1ae6c:	bf04      	itt	eq
   1ae6e:	784b      	ldrbeq	r3, [r1, #1]
   1ae70:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1ae72:	2100      	movs	r1, #0
   1ae74:	e7ce      	b.n	1ae14 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1ae76:	f043 0520 	orr.w	r5, r3, #32
   1ae7a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1ae7c:	2d19      	cmp	r5, #25
   1ae7e:	d80a      	bhi.n	1ae96 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ae80:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1ae84:	2d1a      	cmp	r5, #26
   1ae86:	bf34      	ite	cc
   1ae88:	2537      	movcc	r5, #55	; 0x37
   1ae8a:	2557      	movcs	r5, #87	; 0x57
   1ae8c:	1b5b      	subs	r3, r3, r5
   1ae8e:	e7dd      	b.n	1ae4c <strtol+0x5e>
			any = -1;
   1ae90:	f04f 36ff 	mov.w	r6, #4294967295
   1ae94:	e7e6      	b.n	1ae64 <strtol+0x76>
		}
	}

	if (any < 0) {
   1ae96:	1c73      	adds	r3, r6, #1
   1ae98:	d109      	bne.n	1aeae <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1ae9a:	f7fb feb1 	bl	16c00 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1ae9e:	2326      	movs	r3, #38	; 0x26
   1aea0:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1aea2:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1aea4:	f1b8 0f00 	cmp.w	r8, #0
   1aea8:	d107      	bne.n	1aeba <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1aeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1aeae:	b101      	cbz	r1, 1aeb2 <strtol+0xc4>
		acc = -acc;
   1aeb0:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1aeb2:	f1b8 0f00 	cmp.w	r8, #0
   1aeb6:	d0f8      	beq.n	1aeaa <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1aeb8:	b10e      	cbz	r6, 1aebe <strtol+0xd0>
   1aeba:	f104 3cff 	add.w	ip, r4, #4294967295
   1aebe:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1aec2:	e7f2      	b.n	1aeaa <strtol+0xbc>
	if (base == 0) {
   1aec4:	2330      	movs	r3, #48	; 0x30
   1aec6:	2a00      	cmp	r2, #0
   1aec8:	d1b2      	bne.n	1ae30 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1aeca:	2208      	movs	r2, #8
   1aecc:	e7b0      	b.n	1ae30 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1aece:	2b30      	cmp	r3, #48	; 0x30
   1aed0:	d0a6      	beq.n	1ae20 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1aed2:	220a      	movs	r2, #10
   1aed4:	e7ac      	b.n	1ae30 <strtol+0x42>

0001aed6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1aed6:	4603      	mov	r3, r0
   1aed8:	3901      	subs	r1, #1
   1aeda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1aede:	b90a      	cbnz	r2, 1aee4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1aee0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1aee2:	4770      	bx	lr
		*d = *s;
   1aee4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1aee8:	e7f7      	b.n	1aeda <strcpy+0x4>

0001aeea <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1aeea:	b570      	push	{r4, r5, r6, lr}
   1aeec:	4605      	mov	r5, r0
   1aeee:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1aef0:	b142      	cbz	r2, 1af04 <strncpy+0x1a>
   1aef2:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1aef6:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1aef8:	b92c      	cbnz	r4, 1af06 <strncpy+0x1c>
   1aefa:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1aefc:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1af00:	429a      	cmp	r2, r3
   1af02:	d1fb      	bne.n	1aefc <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1af04:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1af06:	4632      	mov	r2, r6
		*d = *s;
   1af08:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1af0c:	e7ef      	b.n	1aeee <strncpy+0x4>

0001af0e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1af0e:	4603      	mov	r3, r0
	size_t n = 0;
   1af10:	2000      	movs	r0, #0

	while (*s != '\0') {
   1af12:	5c1a      	ldrb	r2, [r3, r0]
   1af14:	b902      	cbnz	r2, 1af18 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1af16:	4770      	bx	lr
		n++;
   1af18:	3001      	adds	r0, #1
   1af1a:	e7fa      	b.n	1af12 <strlen+0x4>

0001af1c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1af1c:	4603      	mov	r3, r0
	size_t n = 0;
   1af1e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1af20:	5c1a      	ldrb	r2, [r3, r0]
   1af22:	b10a      	cbz	r2, 1af28 <strnlen+0xc>
   1af24:	4288      	cmp	r0, r1
   1af26:	d100      	bne.n	1af2a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1af28:	4770      	bx	lr
		n++;
   1af2a:	3001      	adds	r0, #1
   1af2c:	e7f8      	b.n	1af20 <strnlen+0x4>

0001af2e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1af2e:	1e43      	subs	r3, r0, #1
   1af30:	3901      	subs	r1, #1
   1af32:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1af36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1af3a:	4282      	cmp	r2, r0
   1af3c:	d101      	bne.n	1af42 <strcmp+0x14>
   1af3e:	2a00      	cmp	r2, #0
   1af40:	d1f7      	bne.n	1af32 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1af42:	1a10      	subs	r0, r2, r0
   1af44:	4770      	bx	lr

0001af46 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1af46:	b510      	push	{r4, lr}
   1af48:	3901      	subs	r1, #1
   1af4a:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1af4c:	4282      	cmp	r2, r0
   1af4e:	d009      	beq.n	1af64 <strncmp+0x1e>
   1af50:	7803      	ldrb	r3, [r0, #0]
   1af52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1af56:	42a3      	cmp	r3, r4
   1af58:	d100      	bne.n	1af5c <strncmp+0x16>
   1af5a:	b90b      	cbnz	r3, 1af60 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1af5c:	1b18      	subs	r0, r3, r4
   1af5e:	e002      	b.n	1af66 <strncmp+0x20>
		s1++;
   1af60:	3001      	adds	r0, #1
		n--;
   1af62:	e7f3      	b.n	1af4c <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1af64:	2000      	movs	r0, #0
}
   1af66:	bd10      	pop	{r4, pc}

0001af68 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1af68:	4603      	mov	r3, r0
   1af6a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1af6c:	b15a      	cbz	r2, 1af86 <memcmp+0x1e>
   1af6e:	3901      	subs	r1, #1
   1af70:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1af72:	f813 0b01 	ldrb.w	r0, [r3], #1
   1af76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1af7a:	42a3      	cmp	r3, r4
   1af7c:	d001      	beq.n	1af82 <memcmp+0x1a>
   1af7e:	4290      	cmp	r0, r2
   1af80:	d0f7      	beq.n	1af72 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1af82:	1a80      	subs	r0, r0, r2
}
   1af84:	bd10      	pop	{r4, pc}
		return 0;
   1af86:	4610      	mov	r0, r2
   1af88:	e7fc      	b.n	1af84 <memcmp+0x1c>

0001af8a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1af8a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1af8c:	ea81 0400 	eor.w	r4, r1, r0
   1af90:	07a5      	lsls	r5, r4, #30
   1af92:	4603      	mov	r3, r0
   1af94:	d00b      	beq.n	1afae <memcpy+0x24>
   1af96:	3b01      	subs	r3, #1
   1af98:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1af9a:	4291      	cmp	r1, r2
   1af9c:	d11b      	bne.n	1afd6 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1af9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1afa0:	2a00      	cmp	r2, #0
   1afa2:	d0fc      	beq.n	1af9e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1afa4:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1afa8:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1afaa:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1afae:	079c      	lsls	r4, r3, #30
   1afb0:	d1f6      	bne.n	1afa0 <memcpy+0x16>
   1afb2:	f022 0403 	bic.w	r4, r2, #3
   1afb6:	1f1d      	subs	r5, r3, #4
   1afb8:	0896      	lsrs	r6, r2, #2
   1afba:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1afbc:	42b9      	cmp	r1, r7
   1afbe:	d105      	bne.n	1afcc <memcpy+0x42>
   1afc0:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1afc4:	4423      	add	r3, r4
   1afc6:	fb05 2206 	mla	r2, r5, r6, r2
   1afca:	e7e4      	b.n	1af96 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1afcc:	f851 cb04 	ldr.w	ip, [r1], #4
   1afd0:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1afd4:	e7f2      	b.n	1afbc <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1afd6:	f811 4b01 	ldrb.w	r4, [r1], #1
   1afda:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1afde:	e7dc      	b.n	1af9a <memcpy+0x10>

0001afe0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1afe0:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1afe2:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1afe4:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1afe6:	07a3      	lsls	r3, r4, #30
   1afe8:	d111      	bne.n	1b00e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1afea:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1afee:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1aff2:	f022 0303 	bic.w	r3, r2, #3
   1aff6:	0896      	lsrs	r6, r2, #2
   1aff8:	4423      	add	r3, r4
   1affa:	429c      	cmp	r4, r3
   1affc:	d10d      	bne.n	1b01a <memset+0x3a>
   1affe:	f06f 0403 	mvn.w	r4, #3
   1b002:	fb04 2206 	mla	r2, r4, r6, r2
   1b006:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1b008:	4293      	cmp	r3, r2
   1b00a:	d109      	bne.n	1b020 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1b00c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1b00e:	2a00      	cmp	r2, #0
   1b010:	d0fc      	beq.n	1b00c <memset+0x2c>
		*(d_byte++) = c_byte;
   1b012:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1b016:	3a01      	subs	r2, #1
   1b018:	e7e5      	b.n	1afe6 <memset+0x6>
		*(d_word++) = c_word;
   1b01a:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1b01e:	e7ec      	b.n	1affa <memset+0x1a>
		*(d_byte++) = c_byte;
   1b020:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b024:	e7f0      	b.n	1b008 <memset+0x28>

0001b026 <_stdout_hook_default>:
}
   1b026:	f04f 30ff 	mov.w	r0, #4294967295
   1b02a:	4770      	bx	lr

0001b02c <bt_settings_decode_key>:
{
   1b02c:	b570      	push	{r4, r5, r6, lr}
   1b02e:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1b030:	2100      	movs	r1, #0
{
   1b032:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1b034:	f7ff f888 	bl	1a148 <settings_name_next>
   1b038:	280d      	cmp	r0, #13
   1b03a:	d118      	bne.n	1b06e <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1b03c:	7b23      	ldrb	r3, [r4, #12]
   1b03e:	2b30      	cmp	r3, #48	; 0x30
   1b040:	d111      	bne.n	1b066 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1b042:	2300      	movs	r3, #0
   1b044:	702b      	strb	r3, [r5, #0]
   1b046:	f104 060c 	add.w	r6, r4, #12
   1b04a:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1b04c:	462a      	mov	r2, r5
   1b04e:	4620      	mov	r0, r4
   1b050:	2301      	movs	r3, #1
   1b052:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1b054:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1b056:	f7fe fcf7 	bl	19a48 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1b05a:	42b4      	cmp	r4, r6
   1b05c:	f105 35ff 	add.w	r5, r5, #4294967295
   1b060:	d1f4      	bne.n	1b04c <bt_settings_decode_key+0x20>
	return 0;
   1b062:	2000      	movs	r0, #0
}
   1b064:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1b066:	2b31      	cmp	r3, #49	; 0x31
   1b068:	d101      	bne.n	1b06e <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1b06a:	2301      	movs	r3, #1
   1b06c:	e7ea      	b.n	1b044 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1b06e:	f06f 0015 	mvn.w	r0, #21
   1b072:	e7f7      	b.n	1b064 <bt_settings_decode_key+0x38>

0001b074 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1b074:	b510      	push	{r4, lr}
   1b076:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1b078:	7801      	ldrb	r1, [r0, #0]
   1b07a:	7822      	ldrb	r2, [r4, #0]
{
   1b07c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1b07e:	428a      	cmp	r2, r1
   1b080:	d00f      	beq.n	1b0a2 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1b082:	4669      	mov	r1, sp
   1b084:	f7f2 fdc0 	bl	dc08 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1b088:	4620      	mov	r0, r4
   1b08a:	a905      	add	r1, sp, #20
   1b08c:	f7f2 fdbc 	bl	dc08 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1b090:	2210      	movs	r2, #16
   1b092:	f10d 0115 	add.w	r1, sp, #21
   1b096:	f10d 0001 	add.w	r0, sp, #1
   1b09a:	f7ff ff65 	bl	1af68 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1b09e:	b00a      	add	sp, #40	; 0x28
   1b0a0:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1b0a2:	2a01      	cmp	r2, #1
   1b0a4:	d006      	beq.n	1b0b4 <bt_uuid_cmp+0x40>
   1b0a6:	2a02      	cmp	r2, #2
   1b0a8:	d007      	beq.n	1b0ba <bt_uuid_cmp+0x46>
   1b0aa:	b972      	cbnz	r2, 1b0ca <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1b0ac:	8840      	ldrh	r0, [r0, #2]
   1b0ae:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1b0b0:	1ac0      	subs	r0, r0, r3
   1b0b2:	e7f4      	b.n	1b09e <bt_uuid_cmp+0x2a>
   1b0b4:	6840      	ldr	r0, [r0, #4]
   1b0b6:	6863      	ldr	r3, [r4, #4]
   1b0b8:	e7fa      	b.n	1b0b0 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b0ba:	2210      	movs	r2, #16
   1b0bc:	1c61      	adds	r1, r4, #1
   1b0be:	3001      	adds	r0, #1
}
   1b0c0:	b00a      	add	sp, #40	; 0x28
   1b0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b0c6:	f7ff bf4f 	b.w	1af68 <memcmp>
	switch (u1->type) {
   1b0ca:	f06f 0015 	mvn.w	r0, #21
   1b0ce:	e7e6      	b.n	1b09e <bt_uuid_cmp+0x2a>

0001b0d0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1b0d0:	2a04      	cmp	r2, #4
{
   1b0d2:	b510      	push	{r4, lr}
	switch (data_len) {
   1b0d4:	d00a      	beq.n	1b0ec <bt_uuid_create+0x1c>
   1b0d6:	2a10      	cmp	r2, #16
   1b0d8:	d00d      	beq.n	1b0f6 <bt_uuid_create+0x26>
   1b0da:	2a02      	cmp	r2, #2
   1b0dc:	f04f 0300 	mov.w	r3, #0
   1b0e0:	d10f      	bne.n	1b102 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1b0e2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1b0e4:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1b0e6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1b0e8:	2001      	movs	r0, #1
}
   1b0ea:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1b0ec:	2301      	movs	r3, #1
   1b0ee:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1b0f0:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1b0f2:	6042      	str	r2, [r0, #4]
		break;
   1b0f4:	e7f8      	b.n	1b0e8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1b0f6:	2302      	movs	r3, #2
   1b0f8:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1b0fc:	f7ff ff45 	bl	1af8a <memcpy>
		break;
   1b100:	e7f2      	b.n	1b0e8 <bt_uuid_create+0x18>
	switch (data_len) {
   1b102:	4618      	mov	r0, r3
   1b104:	e7f1      	b.n	1b0ea <bt_uuid_create+0x1a>

0001b106 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1b106:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1b108:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1b10a:	2106      	movs	r1, #6
{
   1b10c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1b10e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1b112:	f7f5 f96d 	bl	103f0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1b116:	b918      	cbnz	r0, 1b120 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1b118:	79a3      	ldrb	r3, [r4, #6]
   1b11a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b11e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1b120:	bd10      	pop	{r4, pc}

0001b122 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1b122:	280f      	cmp	r0, #15
   1b124:	d806      	bhi.n	1b134 <bt_hci_evt_get_flags+0x12>
   1b126:	280d      	cmp	r0, #13
   1b128:	d80b      	bhi.n	1b142 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1b12a:	2805      	cmp	r0, #5
   1b12c:	bf14      	ite	ne
   1b12e:	2002      	movne	r0, #2
   1b130:	2003      	moveq	r0, #3
   1b132:	4770      	bx	lr
	switch (evt) {
   1b134:	2813      	cmp	r0, #19
   1b136:	d004      	beq.n	1b142 <bt_hci_evt_get_flags+0x20>
   1b138:	281a      	cmp	r0, #26
   1b13a:	bf14      	ite	ne
   1b13c:	2002      	movne	r0, #2
   1b13e:	2001      	moveq	r0, #1
   1b140:	4770      	bx	lr
   1b142:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1b144:	4770      	bx	lr

0001b146 <get_adv_channel_map>:
{
   1b146:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1b148:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1b14c:	bf0c      	ite	eq
   1b14e:	2007      	moveq	r0, #7
   1b150:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1b152:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1b154:	bf48      	it	mi
   1b156:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1b15a:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1b15c:	bf48      	it	mi
   1b15e:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1b162:	4770      	bx	lr

0001b164 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b164:	e8d0 0faf 	lda	r0, [r0]
}
   1b168:	4770      	bx	lr

0001b16a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b16a:	2207      	movs	r2, #7
   1b16c:	f7ff bf0d 	b.w	1af8a <memcpy>

0001b170 <atomic_or>:
{
   1b170:	4603      	mov	r3, r0
}
   1b172:	e8d3 0fef 	ldaex	r0, [r3]
   1b176:	ea40 0201 	orr.w	r2, r0, r1
   1b17a:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b17e:	f1bc 0f00 	cmp.w	ip, #0
   1b182:	d1f6      	bne.n	1b172 <atomic_or+0x2>
   1b184:	4770      	bx	lr

0001b186 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1b186:	2207      	movs	r2, #7
   1b188:	f7ff beee 	b.w	1af68 <memcmp>

0001b18c <atomic_and>:
{
   1b18c:	4603      	mov	r3, r0
}
   1b18e:	e8d3 0fef 	ldaex	r0, [r3]
   1b192:	ea00 0201 	and.w	r2, r0, r1
   1b196:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b19a:	f1bc 0f00 	cmp.w	ip, #0
   1b19e:	d1f6      	bne.n	1b18e <atomic_and+0x2>
   1b1a0:	4770      	bx	lr

0001b1a2 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1b1a2:	460b      	mov	r3, r1
   1b1a4:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b1a6:	f001 041f 	and.w	r4, r1, #31
   1b1aa:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b1ac:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b1ae:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b1b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1b1b4:	b112      	cbz	r2, 1b1bc <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1b1b6:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b1b8:	f7ff bfda 	b.w	1b170 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b1bc:	43c9      	mvns	r1, r1
}
   1b1be:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b1c0:	f7ff bfe4 	b.w	1b18c <atomic_and>

0001b1c4 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1b1c4:	f100 0210 	add.w	r2, r0, #16
{
   1b1c8:	b508      	push	{r3, lr}
   1b1ca:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b1cc:	4610      	mov	r0, r2
   1b1ce:	f7ff ffc9 	bl	1b164 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1b1d2:	0640      	lsls	r0, r0, #25
   1b1d4:	d50a      	bpl.n	1b1ec <adv_id_check_connectable_func+0x28>
   1b1d6:	4610      	mov	r0, r2
   1b1d8:	f7ff ffc4 	bl	1b164 <atomic_get>
   1b1dc:	05c2      	lsls	r2, r0, #23
   1b1de:	d505      	bpl.n	1b1ec <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1b1e0:	781a      	ldrb	r2, [r3, #0]
   1b1e2:	780b      	ldrb	r3, [r1, #0]
   1b1e4:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1b1e6:	bf1c      	itt	ne
   1b1e8:	2301      	movne	r3, #1
   1b1ea:	704b      	strbne	r3, [r1, #1]
}
   1b1ec:	bd08      	pop	{r3, pc}

0001b1ee <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1b1ee:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1b1f0:	2106      	movs	r1, #6
   1b1f2:	4668      	mov	r0, sp
   1b1f4:	f7f5 f8fc 	bl	103f0 <bt_rand>
	if (err) {
   1b1f8:	b940      	cbnz	r0, 1b20c <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1b1fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1b1fe:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1b200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b204:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1b208:	f7f3 fa06 	bl	e618 <set_random_address>
}
   1b20c:	b003      	add	sp, #12
   1b20e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b212 <bt_lookup_id_addr>:
}
   1b212:	4608      	mov	r0, r1
   1b214:	4770      	bx	lr

0001b216 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1b216:	f7f3 bc57 	b.w	eac8 <bt_le_create_conn_legacy>

0001b21a <bt_hci_disconnect>:
{
   1b21a:	b570      	push	{r4, r5, r6, lr}
   1b21c:	4606      	mov	r6, r0
   1b21e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1b220:	f240 4006 	movw	r0, #1030	; 0x406
   1b224:	2103      	movs	r1, #3
   1b226:	f7f3 f92b 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
   1b22a:	4604      	mov	r4, r0
   1b22c:	b168      	cbz	r0, 1b24a <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1b22e:	2103      	movs	r1, #3
   1b230:	3008      	adds	r0, #8
   1b232:	f7f9 fd0d 	bl	14c50 <net_buf_simple_add>
	disconn->reason = reason;
   1b236:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1b238:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b23a:	4621      	mov	r1, r4
}
   1b23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b240:	2200      	movs	r2, #0
   1b242:	f240 4006 	movw	r0, #1030	; 0x406
   1b246:	f7f3 b965 	b.w	e514 <bt_hci_cmd_send_sync>
}
   1b24a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b24e:	bd70      	pop	{r4, r5, r6, pc}

0001b250 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1b250:	8803      	ldrh	r3, [r0, #0]
   1b252:	8842      	ldrh	r2, [r0, #2]
{
   1b254:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1b256:	4293      	cmp	r3, r2
   1b258:	d819      	bhi.n	1b28e <bt_le_conn_params_valid+0x3e>
   1b25a:	2b05      	cmp	r3, #5
   1b25c:	d917      	bls.n	1b28e <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1b25e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1b262:	d814      	bhi.n	1b28e <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1b264:	8883      	ldrh	r3, [r0, #4]
   1b266:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1b26a:	d210      	bcs.n	1b28e <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b26c:	f640 4476 	movw	r4, #3190	; 0xc76
   1b270:	88c0      	ldrh	r0, [r0, #6]
   1b272:	f1a0 010a 	sub.w	r1, r0, #10
   1b276:	b289      	uxth	r1, r1
   1b278:	42a1      	cmp	r1, r4
   1b27a:	d808      	bhi.n	1b28e <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1b27c:	3301      	adds	r3, #1
   1b27e:	b29b      	uxth	r3, r3
   1b280:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b282:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1b286:	bf34      	ite	cc
   1b288:	2001      	movcc	r0, #1
   1b28a:	2000      	movcs	r0, #0
}
   1b28c:	bd10      	pop	{r4, pc}
		return false;
   1b28e:	2000      	movs	r0, #0
   1b290:	e7fc      	b.n	1b28c <bt_le_conn_params_valid+0x3c>

0001b292 <bt_le_set_data_len>:
{
   1b292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b294:	4607      	mov	r7, r0
   1b296:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b298:	f242 0022 	movw	r0, #8226	; 0x2022
   1b29c:	2106      	movs	r1, #6
{
   1b29e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b2a0:	f7f3 f8ee 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
   1b2a4:	4604      	mov	r4, r0
   1b2a6:	b170      	cbz	r0, 1b2c6 <bt_le_set_data_len+0x34>
   1b2a8:	2106      	movs	r1, #6
   1b2aa:	3008      	adds	r0, #8
   1b2ac:	f7f9 fcd0 	bl	14c50 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b2b0:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b2b2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b2b4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1b2b6:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1b2b8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b2ba:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1b2be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b2c2:	f7f3 be23 	b.w	ef0c <bt_hci_cmd_send>
}
   1b2c6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b2cc <bt_le_set_phy>:
{
   1b2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b2d0:	4680      	mov	r8, r0
   1b2d2:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b2d4:	f242 0032 	movw	r0, #8242	; 0x2032
   1b2d8:	2107      	movs	r1, #7
{
   1b2da:	4616      	mov	r6, r2
   1b2dc:	461d      	mov	r5, r3
   1b2de:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b2e2:	f7f3 f8cd 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
   1b2e6:	4604      	mov	r4, r0
   1b2e8:	b190      	cbz	r0, 1b310 <bt_le_set_phy+0x44>
   1b2ea:	2107      	movs	r1, #7
   1b2ec:	3008      	adds	r0, #8
   1b2ee:	f7f9 fcaf 	bl	14c50 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b2f2:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1b2f6:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1b2f8:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1b2fa:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b2fc:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1b2fe:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b302:	4621      	mov	r1, r4
}
   1b304:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b308:	f242 0032 	movw	r0, #8242	; 0x2032
   1b30c:	f7f3 bdfe 	b.w	ef0c <bt_hci_cmd_send>
}
   1b310:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b318 <bt_addr_le_is_bonded>:
}
   1b318:	2000      	movs	r0, #0
   1b31a:	4770      	bx	lr

0001b31c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1b31c:	6880      	ldr	r0, [r0, #8]
   1b31e:	f7f4 be71 	b.w	10004 <enh_conn_complete>

0001b322 <le_legacy_conn_complete>:
{
   1b322:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b324:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1b326:	6881      	ldr	r1, [r0, #8]
{
   1b328:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1b32a:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b32c:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1b32e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1b332:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b336:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1b338:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1b33c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1b340:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1b344:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1b348:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1b34c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1b350:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1b354:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1b358:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1b35c:	7b4b      	ldrb	r3, [r1, #13]
   1b35e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b362:	f7ff ff02 	bl	1b16a <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1b366:	4669      	mov	r1, sp
   1b368:	2206      	movs	r2, #6
   1b36a:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b36e:	9400      	str	r4, [sp, #0]
   1b370:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b374:	f7ff fe09 	bl	1af8a <memcpy>
   1b378:	2206      	movs	r2, #6
   1b37a:	4669      	mov	r1, sp
   1b37c:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1b380:	9400      	str	r4, [sp, #0]
   1b382:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b386:	f7ff fe00 	bl	1af8a <memcpy>
	enh_conn_complete(&enh);
   1b38a:	a802      	add	r0, sp, #8
   1b38c:	f7f4 fe3a 	bl	10004 <enh_conn_complete>
}
   1b390:	b00a      	add	sp, #40	; 0x28
   1b392:	bd10      	pop	{r4, pc}

0001b394 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b394:	e8d0 0faf 	lda	r0, [r0]
}
   1b398:	4770      	bx	lr

0001b39a <tx_notify>:
{
   1b39a:	b570      	push	{r4, r5, r6, lr}
   1b39c:	4604      	mov	r4, r0
	__asm__ volatile(
   1b39e:	f04f 0220 	mov.w	r2, #32
   1b3a2:	f3ef 8311 	mrs	r3, BASEPRI
   1b3a6:	f382 8811 	msr	BASEPRI, r2
   1b3aa:	f3bf 8f6f 	isb	sy
	return list->head;
   1b3ae:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1b3b0:	b920      	cbnz	r0, 1b3bc <tx_notify+0x22>
	__asm__ volatile(
   1b3b2:	f383 8811 	msr	BASEPRI, r3
   1b3b6:	f3bf 8f6f 	isb	sy
}
   1b3ba:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b3bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1b3be:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b3c0:	4288      	cmp	r0, r1
	list->tail = node;
   1b3c2:	bf08      	it	eq
   1b3c4:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1b3c6:	6222      	str	r2, [r4, #32]
   1b3c8:	f383 8811 	msr	BASEPRI, r3
   1b3cc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1b3d0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1b3d4:	f7f5 f824 	bl	10420 <tx_free>
		cb(conn, user_data);
   1b3d8:	4631      	mov	r1, r6
   1b3da:	4620      	mov	r0, r4
   1b3dc:	47a8      	blx	r5
	while (1) {
   1b3de:	e7de      	b.n	1b39e <tx_notify+0x4>

0001b3e0 <tx_complete_work>:
	tx_notify(conn);
   1b3e0:	3828      	subs	r0, #40	; 0x28
   1b3e2:	f7ff bfda 	b.w	1b39a <tx_notify>

0001b3e6 <bt_conn_new>:
{
   1b3e6:	b538      	push	{r3, r4, r5, lr}
   1b3e8:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1b3ea:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b3ec:	2501      	movs	r5, #1
   1b3ee:	428b      	cmp	r3, r1
   1b3f0:	d102      	bne.n	1b3f8 <bt_conn_new+0x12>
		return NULL;
   1b3f2:	2400      	movs	r4, #0
}
   1b3f4:	4620      	mov	r0, r4
   1b3f6:	bd38      	pop	{r3, r4, r5, pc}
   1b3f8:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1b3fc:	e8d2 0fef 	ldaex	r0, [r2]
   1b400:	2800      	cmp	r0, #0
   1b402:	d104      	bne.n	1b40e <bt_conn_new+0x28>
   1b404:	e8c2 5fec 	stlex	ip, r5, [r2]
   1b408:	f1bc 0f00 	cmp.w	ip, #0
   1b40c:	d1f6      	bne.n	1b3fc <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1b40e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1b412:	d002      	beq.n	1b41a <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1b414:	4604      	mov	r4, r0
   1b416:	3301      	adds	r3, #1
   1b418:	e7e9      	b.n	1b3ee <bt_conn_new+0x8>
	if (!conn) {
   1b41a:	2c00      	cmp	r4, #0
   1b41c:	d0ea      	beq.n	1b3f4 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1b41e:	22b8      	movs	r2, #184	; 0xb8
   1b420:	2100      	movs	r1, #0
   1b422:	4620      	mov	r0, r4
   1b424:	f7ff fddc 	bl	1afe0 <memset>
	return conn;
   1b428:	e7e4      	b.n	1b3f4 <bt_conn_new+0xe>

0001b42a <bt_conn_get_security>:
}
   1b42a:	2001      	movs	r0, #1
   1b42c:	4770      	bx	lr

0001b42e <bt_conn_reset_rx_state>:
{
   1b42e:	b510      	push	{r4, lr}
   1b430:	4604      	mov	r4, r0
	if (!conn->rx) {
   1b432:	6900      	ldr	r0, [r0, #16]
   1b434:	b118      	cbz	r0, 1b43e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1b436:	f7f9 faf5 	bl	14a24 <net_buf_unref>
	conn->rx = NULL;
   1b43a:	2300      	movs	r3, #0
   1b43c:	6123      	str	r3, [r4, #16]
}
   1b43e:	bd10      	pop	{r4, pc}

0001b440 <bt_conn_is_peer_addr_le>:
{
   1b440:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1b442:	7a03      	ldrb	r3, [r0, #8]
{
   1b444:	4604      	mov	r4, r0
	if (id != conn->id) {
   1b446:	428b      	cmp	r3, r1
{
   1b448:	4615      	mov	r5, r2
	if (id != conn->id) {
   1b44a:	d115      	bne.n	1b478 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1b44c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b450:	2207      	movs	r2, #7
   1b452:	4628      	mov	r0, r5
   1b454:	f7ff fd88 	bl	1af68 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1b458:	b180      	cbz	r0, 1b47c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1b45a:	78e3      	ldrb	r3, [r4, #3]
   1b45c:	2207      	movs	r2, #7
   1b45e:	b943      	cbnz	r3, 1b472 <bt_conn_is_peer_addr_le+0x32>
   1b460:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1b464:	4628      	mov	r0, r5
   1b466:	f7ff fd7f 	bl	1af68 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1b46a:	fab0 f080 	clz	r0, r0
   1b46e:	0940      	lsrs	r0, r0, #5
}
   1b470:	bd38      	pop	{r3, r4, r5, pc}
   1b472:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1b476:	e7f5      	b.n	1b464 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1b478:	2000      	movs	r0, #0
   1b47a:	e7f9      	b.n	1b470 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1b47c:	2001      	movs	r0, #1
   1b47e:	e7f7      	b.n	1b470 <bt_conn_is_peer_addr_le+0x30>

0001b480 <bt_conn_ref>:
{
   1b480:	4603      	mov	r3, r0
   1b482:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1b484:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1b488:	4610      	mov	r0, r2
   1b48a:	f7ff ff83 	bl	1b394 <atomic_get>
		if (!old) {
   1b48e:	b160      	cbz	r0, 1b4aa <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1b490:	1c41      	adds	r1, r0, #1
   1b492:	e8d2 4fef 	ldaex	r4, [r2]
   1b496:	4284      	cmp	r4, r0
   1b498:	d104      	bne.n	1b4a4 <bt_conn_ref+0x24>
   1b49a:	e8c2 1fec 	stlex	ip, r1, [r2]
   1b49e:	f1bc 0f00 	cmp.w	ip, #0
   1b4a2:	d1f6      	bne.n	1b492 <bt_conn_ref+0x12>
   1b4a4:	d1f0      	bne.n	1b488 <bt_conn_ref+0x8>
}
   1b4a6:	4618      	mov	r0, r3
   1b4a8:	bd10      	pop	{r4, pc}
			return NULL;
   1b4aa:	4603      	mov	r3, r0
   1b4ac:	e7fb      	b.n	1b4a6 <bt_conn_ref+0x26>

0001b4ae <conn_lookup_handle>:
{
   1b4ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b4b2:	4607      	mov	r7, r0
   1b4b4:	460e      	mov	r6, r1
   1b4b6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1b4b8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b4ba:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1b4be:	42b4      	cmp	r4, r6
   1b4c0:	d103      	bne.n	1b4ca <conn_lookup_handle+0x1c>
	return NULL;
   1b4c2:	2300      	movs	r3, #0
}
   1b4c4:	4618      	mov	r0, r3
   1b4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b4ca:	fb09 7004 	mla	r0, r9, r4, r7
   1b4ce:	f7ff ffd7 	bl	1b480 <bt_conn_ref>
   1b4d2:	4603      	mov	r3, r0
		if (!conn) {
   1b4d4:	b158      	cbz	r0, 1b4ee <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1b4d6:	7a85      	ldrb	r5, [r0, #10]
   1b4d8:	2d01      	cmp	r5, #1
   1b4da:	d002      	beq.n	1b4e2 <conn_lookup_handle+0x34>
   1b4dc:	3d07      	subs	r5, #7
   1b4de:	2d01      	cmp	r5, #1
   1b4e0:	d803      	bhi.n	1b4ea <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1b4e2:	881a      	ldrh	r2, [r3, #0]
   1b4e4:	4542      	cmp	r2, r8
   1b4e6:	d0ed      	beq.n	1b4c4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1b4e8:	4618      	mov	r0, r3
   1b4ea:	f7f5 fa1d 	bl	10928 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1b4ee:	3401      	adds	r4, #1
   1b4f0:	e7e5      	b.n	1b4be <conn_lookup_handle+0x10>

0001b4f2 <bt_conn_get_dst>:
}
   1b4f2:	3088      	adds	r0, #136	; 0x88
   1b4f4:	4770      	bx	lr

0001b4f6 <bt_conn_le_conn_update>:
{
   1b4f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4f8:	4607      	mov	r7, r0
   1b4fa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1b4fc:	f242 0013 	movw	r0, #8211	; 0x2013
   1b500:	210e      	movs	r1, #14
   1b502:	f7f2 ffbd 	bl	e480 <bt_hci_cmd_create>
	if (!buf) {
   1b506:	4606      	mov	r6, r0
   1b508:	b1d0      	cbz	r0, 1b540 <bt_conn_le_conn_update+0x4a>
   1b50a:	210e      	movs	r1, #14
   1b50c:	3008      	adds	r0, #8
   1b50e:	f7f9 fb9f 	bl	14c50 <net_buf_simple_add>
   1b512:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1b514:	220e      	movs	r2, #14
   1b516:	2100      	movs	r1, #0
   1b518:	f7ff fd62 	bl	1afe0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b51c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b51e:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b520:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b522:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b524:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b526:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b528:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b52a:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b52e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1b530:	88ab      	ldrh	r3, [r5, #4]
   1b532:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1b534:	88eb      	ldrh	r3, [r5, #6]
   1b536:	8123      	strh	r3, [r4, #8]
}
   1b538:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b53c:	f7f2 bfea 	b.w	e514 <bt_hci_cmd_send_sync>
}
   1b540:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b546 <l2cap_connected>:
}
   1b546:	4770      	bx	lr

0001b548 <l2cap_disconnected>:
   1b548:	4770      	bx	lr

0001b54a <bt_l2cap_chan_remove>:
	return list->head;
   1b54a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b54c:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b54e:	b17b      	cbz	r3, 1b570 <bt_l2cap_chan_remove+0x26>
   1b550:	2200      	movs	r2, #0
   1b552:	3b08      	subs	r3, #8
   1b554:	b163      	cbz	r3, 1b570 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1b556:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1b558:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1b55c:	d10e      	bne.n	1b57c <bt_l2cap_chan_remove+0x32>
	return node->next;
   1b55e:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1b560:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1b562:	b932      	cbnz	r2, 1b572 <bt_l2cap_chan_remove+0x28>
   1b564:	42ac      	cmp	r4, r5
	list->head = node;
   1b566:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1b568:	d100      	bne.n	1b56c <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1b56a:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1b56c:	2200      	movs	r2, #0
   1b56e:	609a      	str	r2, [r3, #8]
}
   1b570:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b572:	42ac      	cmp	r4, r5
	parent->next = child;
   1b574:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1b576:	bf08      	it	eq
   1b578:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1b57a:	e7f7      	b.n	1b56c <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b57c:	2c00      	cmp	r4, #0
   1b57e:	d0f7      	beq.n	1b570 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1b580:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b582:	2b00      	cmp	r3, #0
   1b584:	d0f4      	beq.n	1b570 <bt_l2cap_chan_remove+0x26>
   1b586:	4622      	mov	r2, r4
   1b588:	3b08      	subs	r3, #8
   1b58a:	e7e3      	b.n	1b554 <bt_l2cap_chan_remove+0xa>

0001b58c <bt_l2cap_chan_del>:
{
   1b58c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1b58e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1b592:	4604      	mov	r4, r0
	if (!chan->conn) {
   1b594:	b123      	cbz	r3, 1b5a0 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1b596:	686b      	ldr	r3, [r5, #4]
   1b598:	b103      	cbz	r3, 1b59c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1b59a:	4798      	blx	r3
	chan->conn = NULL;
   1b59c:	2300      	movs	r3, #0
   1b59e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1b5a0:	68e3      	ldr	r3, [r4, #12]
   1b5a2:	b10b      	cbz	r3, 1b5a8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1b5a4:	4620      	mov	r0, r4
   1b5a6:	4798      	blx	r3
	if (ops->released) {
   1b5a8:	69eb      	ldr	r3, [r5, #28]
   1b5aa:	b11b      	cbz	r3, 1b5b4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1b5ac:	4620      	mov	r0, r4
}
   1b5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1b5b2:	4718      	bx	r3
}
   1b5b4:	bd70      	pop	{r4, r5, r6, pc}

0001b5b6 <bt_l2cap_disconnected>:
	return list->head;
   1b5b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b5b8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b5ba:	b18b      	cbz	r3, 1b5e0 <bt_l2cap_disconnected+0x2a>
   1b5bc:	f1b3 0008 	subs.w	r0, r3, #8
   1b5c0:	d00e      	beq.n	1b5e0 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1b5c2:	681c      	ldr	r4, [r3, #0]
   1b5c4:	b104      	cbz	r4, 1b5c8 <bt_l2cap_disconnected+0x12>
   1b5c6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1b5c8:	f7ff ffe0 	bl	1b58c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b5cc:	b144      	cbz	r4, 1b5e0 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b5ce:	f114 0308 	adds.w	r3, r4, #8
   1b5d2:	d002      	beq.n	1b5da <bt_l2cap_disconnected+0x24>
	return node->next;
   1b5d4:	68a3      	ldr	r3, [r4, #8]
   1b5d6:	b103      	cbz	r3, 1b5da <bt_l2cap_disconnected+0x24>
   1b5d8:	3b08      	subs	r3, #8
{
   1b5da:	4620      	mov	r0, r4
   1b5dc:	461c      	mov	r4, r3
   1b5de:	e7f3      	b.n	1b5c8 <bt_l2cap_disconnected+0x12>
}
   1b5e0:	bd10      	pop	{r4, pc}

0001b5e2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1b5e2:	3104      	adds	r1, #4
   1b5e4:	f7f5 bd2c 	b.w	11040 <bt_conn_create_pdu_timeout>

0001b5e8 <bt_l2cap_send_cb>:
{
   1b5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5ec:	4614      	mov	r4, r2
   1b5ee:	4605      	mov	r5, r0
   1b5f0:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1b5f2:	f102 0008 	add.w	r0, r2, #8
   1b5f6:	2104      	movs	r1, #4
   1b5f8:	461e      	mov	r6, r3
   1b5fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1b5fe:	f7f9 facf 	bl	14ba0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b602:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b604:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b606:	3a04      	subs	r2, #4
   1b608:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1b60a:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b60c:	4632      	mov	r2, r6
   1b60e:	4621      	mov	r1, r4
   1b610:	4628      	mov	r0, r5
}
   1b612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b616:	f7f5 b8c5 	b.w	107a4 <bt_conn_send_cb>

0001b61a <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1b61a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b61c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1b61e:	2202      	movs	r2, #2
   1b620:	2001      	movs	r0, #1
   1b622:	f7f5 fe5f 	bl	112e4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1b626:	4604      	mov	r4, r0
   1b628:	b160      	cbz	r0, 1b644 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1b62a:	2102      	movs	r1, #2
   1b62c:	3008      	adds	r0, #8
   1b62e:	f7f9 fb0f 	bl	14c50 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1b632:	2300      	movs	r3, #0
   1b634:	4622      	mov	r2, r4
   1b636:	7003      	strb	r3, [r0, #0]
   1b638:	7043      	strb	r3, [r0, #1]
   1b63a:	2105      	movs	r1, #5
   1b63c:	4628      	mov	r0, r5
   1b63e:	9300      	str	r3, [sp, #0]
   1b640:	f7ff ffd2 	bl	1b5e8 <bt_l2cap_send_cb>
}
   1b644:	b003      	add	sp, #12
   1b646:	bd30      	pop	{r4, r5, pc}

0001b648 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1b648:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b64a:	b160      	cbz	r0, 1b666 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1b64c:	3808      	subs	r0, #8
   1b64e:	b900      	cbnz	r0, 1b652 <bt_l2cap_le_lookup_tx_cid+0xa>
   1b650:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1b652:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1b656:	428b      	cmp	r3, r1
   1b658:	d005      	beq.n	1b666 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b65a:	f110 0308 	adds.w	r3, r0, #8
   1b65e:	d001      	beq.n	1b664 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1b660:	6880      	ldr	r0, [r0, #8]
   1b662:	e7f2      	b.n	1b64a <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1b664:	4618      	mov	r0, r3
}
   1b666:	4770      	bx	lr

0001b668 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1b668:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b66a:	b160      	cbz	r0, 1b686 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1b66c:	3808      	subs	r0, #8
   1b66e:	b900      	cbnz	r0, 1b672 <bt_l2cap_le_lookup_rx_cid+0xa>
   1b670:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1b672:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1b676:	428b      	cmp	r3, r1
   1b678:	d005      	beq.n	1b686 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b67a:	f110 0308 	adds.w	r3, r0, #8
   1b67e:	d001      	beq.n	1b684 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1b680:	6880      	ldr	r0, [r0, #8]
   1b682:	e7f2      	b.n	1b66a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1b684:	4618      	mov	r0, r3
}
   1b686:	4770      	bx	lr

0001b688 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1b688:	4770      	bx	lr

0001b68a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1b68a:	4603      	mov	r3, r0
	return list->head;
   1b68c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1b68e:	b128      	cbz	r0, 1b69c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b690:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1b692:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b694:	4288      	cmp	r0, r1
	list->head = node;
   1b696:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1b698:	bf08      	it	eq
   1b69a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1b69c:	4770      	bx	lr

0001b69e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1b69e:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b6a0:	2000      	movs	r0, #0

	while (buf) {
   1b6a2:	b903      	cbnz	r3, 1b6a6 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1b6a4:	4770      	bx	lr
		bytes += buf->len;
   1b6a6:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b6a8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b6aa:	4410      	add	r0, r2
		buf = buf->frags;
   1b6ac:	e7f9      	b.n	1b6a2 <net_buf_frags_len+0x4>

0001b6ae <att_sent>:
	if (chan->ops->sent) {
   1b6ae:	684b      	ldr	r3, [r1, #4]
{
   1b6b0:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1b6b2:	695b      	ldr	r3, [r3, #20]
   1b6b4:	b103      	cbz	r3, 1b6b8 <att_sent+0xa>
		chan->ops->sent(chan);
   1b6b6:	4718      	bx	r3
}
   1b6b8:	4770      	bx	lr

0001b6ba <attr_read_type_cb>:
{
   1b6ba:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1b6bc:	68d4      	ldr	r4, [r2, #12]
   1b6be:	3102      	adds	r1, #2
   1b6c0:	7823      	ldrb	r3, [r4, #0]
   1b6c2:	b913      	cbnz	r3, 1b6ca <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1b6c4:	7021      	strb	r1, [r4, #0]
	return true;
   1b6c6:	2001      	movs	r0, #1
   1b6c8:	e006      	b.n	1b6d8 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1b6ca:	428b      	cmp	r3, r1
   1b6cc:	d0fb      	beq.n	1b6c6 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1b6ce:	8983      	ldrh	r3, [r0, #12]
   1b6d0:	3b02      	subs	r3, #2
   1b6d2:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1b6d4:	2000      	movs	r0, #0
   1b6d6:	6110      	str	r0, [r2, #16]
}
   1b6d8:	bd10      	pop	{r4, pc}

0001b6da <att_prepare_write_req>:
}
   1b6da:	2006      	movs	r0, #6
   1b6dc:	4770      	bx	lr

0001b6de <att_op_get_type>:
	switch (op) {
   1b6de:	281e      	cmp	r0, #30
   1b6e0:	d816      	bhi.n	1b710 <att_op_get_type+0x32>
   1b6e2:	b308      	cbz	r0, 1b728 <att_op_get_type+0x4a>
   1b6e4:	1e43      	subs	r3, r0, #1
   1b6e6:	2b1d      	cmp	r3, #29
   1b6e8:	d81e      	bhi.n	1b728 <att_op_get_type+0x4a>
   1b6ea:	e8df f003 	tbb	[pc, r3]
   1b6ee:	2317      	.short	0x2317
   1b6f0:	23172317 	.word	0x23172317
   1b6f4:	23172317 	.word	0x23172317
   1b6f8:	23172317 	.word	0x23172317
   1b6fc:	23172317 	.word	0x23172317
   1b700:	231d1d17 	.word	0x231d1d17
   1b704:	1d172317 	.word	0x1d172317
   1b708:	0f1b1d19 	.word	0x0f1b1d19
   1b70c:	2004      	movs	r0, #4
   1b70e:	4770      	bx	lr
   1b710:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1b714:	2b52      	cmp	r3, #82	; 0x52
   1b716:	d107      	bne.n	1b728 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1b718:	2000      	movs	r0, #0
}
   1b71a:	4770      	bx	lr
		return ATT_RESPONSE;
   1b71c:	2002      	movs	r0, #2
   1b71e:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1b720:	2003      	movs	r0, #3
   1b722:	4770      	bx	lr
		return ATT_INDICATION;
   1b724:	2005      	movs	r0, #5
   1b726:	4770      	bx	lr
		return ATT_COMMAND;
   1b728:	f010 0f40 	tst.w	r0, #64	; 0x40
   1b72c:	bf0c      	ite	eq
   1b72e:	2006      	moveq	r0, #6
   1b730:	2000      	movne	r0, #0
   1b732:	4770      	bx	lr
		return ATT_REQUEST;
   1b734:	2001      	movs	r0, #1
   1b736:	4770      	bx	lr

0001b738 <att_notify_mult>:
{
   1b738:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1b73a:	6803      	ldr	r3, [r0, #0]
   1b73c:	898a      	ldrh	r2, [r1, #12]
   1b73e:	6818      	ldr	r0, [r3, #0]
   1b740:	6889      	ldr	r1, [r1, #8]
   1b742:	f7f8 fe17 	bl	14374 <bt_gatt_mult_notification>
}
   1b746:	2000      	movs	r0, #0
   1b748:	bd08      	pop	{r3, pc}

0001b74a <att_notify>:
{
   1b74a:	b538      	push	{r3, r4, r5, lr}
   1b74c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b74e:	f101 0008 	add.w	r0, r1, #8
   1b752:	460c      	mov	r4, r1
   1b754:	f000 ff07 	bl	1c566 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1b758:	682d      	ldr	r5, [r5, #0]
   1b75a:	4601      	mov	r1, r0
   1b75c:	89a3      	ldrh	r3, [r4, #12]
   1b75e:	6828      	ldr	r0, [r5, #0]
   1b760:	68a2      	ldr	r2, [r4, #8]
   1b762:	f000 fe68 	bl	1c436 <bt_gatt_notification>
}
   1b766:	2000      	movs	r0, #0
   1b768:	bd38      	pop	{r3, r4, r5, pc}

0001b76a <bt_gatt_foreach_attr>:
{
   1b76a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b76c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b770:	2300      	movs	r3, #0
   1b772:	461a      	mov	r2, r3
   1b774:	9300      	str	r3, [sp, #0]
   1b776:	f7f7 fd65 	bl	13244 <bt_gatt_foreach_attr_type>
}
   1b77a:	b005      	add	sp, #20
   1b77c:	f85d fb04 	ldr.w	pc, [sp], #4

0001b780 <find_info_cb>:
{
   1b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1b782:	6893      	ldr	r3, [r2, #8]
{
   1b784:	4605      	mov	r5, r0
   1b786:	460e      	mov	r6, r1
   1b788:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b78a:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1b78c:	b963      	cbnz	r3, 1b7a8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1b78e:	6850      	ldr	r0, [r2, #4]
   1b790:	2101      	movs	r1, #1
   1b792:	3008      	adds	r0, #8
   1b794:	f7f9 fa5c 	bl	14c50 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b798:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b79a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b79c:	781b      	ldrb	r3, [r3, #0]
   1b79e:	2b00      	cmp	r3, #0
   1b7a0:	bf0c      	ite	eq
   1b7a2:	2301      	moveq	r3, #1
   1b7a4:	2302      	movne	r3, #2
   1b7a6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1b7a8:	68a3      	ldr	r3, [r4, #8]
   1b7aa:	781b      	ldrb	r3, [r3, #0]
   1b7ac:	2b01      	cmp	r3, #1
   1b7ae:	d003      	beq.n	1b7b8 <find_info_cb+0x38>
   1b7b0:	2b02      	cmp	r3, #2
   1b7b2:	d019      	beq.n	1b7e8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1b7b4:	2000      	movs	r0, #0
   1b7b6:	e016      	b.n	1b7e6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1b7b8:	682b      	ldr	r3, [r5, #0]
   1b7ba:	781b      	ldrb	r3, [r3, #0]
   1b7bc:	2b00      	cmp	r3, #0
   1b7be:	d1f9      	bne.n	1b7b4 <find_info_cb+0x34>
   1b7c0:	6860      	ldr	r0, [r4, #4]
   1b7c2:	2104      	movs	r1, #4
   1b7c4:	3008      	adds	r0, #8
   1b7c6:	f7f9 fa43 	bl	14c50 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b7ca:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b7cc:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b7ce:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1b7d0:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b7d2:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1b7d4:	6863      	ldr	r3, [r4, #4]
   1b7d6:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b7da:	899b      	ldrh	r3, [r3, #12]
   1b7dc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b7de:	2804      	cmp	r0, #4
   1b7e0:	bf94      	ite	ls
   1b7e2:	2000      	movls	r0, #0
   1b7e4:	2001      	movhi	r0, #1
}
   1b7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1b7e8:	682b      	ldr	r3, [r5, #0]
   1b7ea:	781b      	ldrb	r3, [r3, #0]
   1b7ec:	2b02      	cmp	r3, #2
   1b7ee:	d1e1      	bne.n	1b7b4 <find_info_cb+0x34>
   1b7f0:	6860      	ldr	r0, [r4, #4]
   1b7f2:	2112      	movs	r1, #18
   1b7f4:	3008      	adds	r0, #8
   1b7f6:	f7f9 fa2b 	bl	14c50 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b7fa:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b7fc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b7fe:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1b800:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b804:	3101      	adds	r1, #1
   1b806:	f7ff fbc0 	bl	1af8a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1b80a:	6863      	ldr	r3, [r4, #4]
   1b80c:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b810:	899b      	ldrh	r3, [r3, #12]
   1b812:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b814:	2812      	cmp	r0, #18
   1b816:	e7e3      	b.n	1b7e0 <find_info_cb+0x60>

0001b818 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1b818:	68d0      	ldr	r0, [r2, #12]
   1b81a:	3104      	adds	r1, #4
   1b81c:	7803      	ldrb	r3, [r0, #0]
   1b81e:	b913      	cbnz	r3, 1b826 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1b820:	7001      	strb	r1, [r0, #0]
	return true;
   1b822:	2001      	movs	r0, #1
}
   1b824:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1b826:	428b      	cmp	r3, r1
   1b828:	d0fb      	beq.n	1b822 <attr_read_group_cb+0xa>
		data->group = NULL;
   1b82a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1b82c:	6891      	ldr	r1, [r2, #8]
   1b82e:	898b      	ldrh	r3, [r1, #12]
   1b830:	3b04      	subs	r3, #4
   1b832:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1b834:	6110      	str	r0, [r2, #16]
		return false;
   1b836:	4770      	bx	lr

0001b838 <write_cb>:
{
   1b838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b83a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b83c:	4601      	mov	r1, r0
{
   1b83e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b840:	222a      	movs	r2, #42	; 0x2a
   1b842:	6820      	ldr	r0, [r4, #0]
   1b844:	f000 fd68 	bl	1c318 <bt_gatt_check_perm>
   1b848:	4605      	mov	r5, r0
   1b84a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b84c:	bb00      	cbnz	r0, 1b890 <write_cb+0x58>
	if (!data->req) {
   1b84e:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1b850:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1b852:	2b00      	cmp	r3, #0
   1b854:	bf14      	ite	ne
   1b856:	2300      	movne	r3, #0
   1b858:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1b85a:	9301      	str	r3, [sp, #4]
   1b85c:	8a63      	ldrh	r3, [r4, #18]
   1b85e:	68b7      	ldr	r7, [r6, #8]
   1b860:	9300      	str	r3, [sp, #0]
   1b862:	68e2      	ldr	r2, [r4, #12]
   1b864:	8a23      	ldrh	r3, [r4, #16]
   1b866:	6820      	ldr	r0, [r4, #0]
   1b868:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1b86a:	1e03      	subs	r3, r0, #0
   1b86c:	db05      	blt.n	1b87a <write_cb+0x42>
   1b86e:	8a22      	ldrh	r2, [r4, #16]
   1b870:	4293      	cmp	r3, r2
   1b872:	d10b      	bne.n	1b88c <write_cb+0x54>
	data->err = 0U;
   1b874:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1b876:	2501      	movs	r5, #1
   1b878:	e005      	b.n	1b886 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1b87a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1b87e:	d305      	bcc.n	1b88c <write_cb+0x54>
		return -err;
   1b880:	425b      	negs	r3, r3
   1b882:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1b884:	7523      	strb	r3, [r4, #20]
}
   1b886:	4628      	mov	r0, r5
   1b888:	b003      	add	sp, #12
   1b88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1b88c:	230e      	movs	r3, #14
   1b88e:	e7f9      	b.n	1b884 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1b890:	2500      	movs	r5, #0
   1b892:	e7f8      	b.n	1b886 <write_cb+0x4e>

0001b894 <att_chan_read>:
{
   1b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b898:	4680      	mov	r8, r0
   1b89a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b89c:	4610      	mov	r0, r2
{
   1b89e:	4699      	mov	r9, r3
   1b8a0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b8a2:	f7ff fefc 	bl	1b69e <net_buf_frags_len>
   1b8a6:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1b8aa:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b8ac:	4283      	cmp	r3, r0
   1b8ae:	d97a      	bls.n	1b9a6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b8b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1b8b4:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1b8b6:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1b8b8:	f7f9 f910 	bl	14adc <net_buf_frag_last>
	size_t len, total = 0;
   1b8bc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1b8c0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b8c2:	4630      	mov	r0, r6
   1b8c4:	f7ff feeb 	bl	1b69e <net_buf_frags_len>
   1b8c8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1b8cc:	f105 0708 	add.w	r7, r5, #8
   1b8d0:	1a24      	subs	r4, r4, r0
   1b8d2:	4638      	mov	r0, r7
   1b8d4:	f000 fe53 	bl	1c57e <net_buf_simple_tailroom>
   1b8d8:	4284      	cmp	r4, r0
   1b8da:	d211      	bcs.n	1b900 <att_chan_read+0x6c>
   1b8dc:	4630      	mov	r0, r6
   1b8de:	f7ff fede 	bl	1b69e <net_buf_frags_len>
   1b8e2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b8e6:	1a24      	subs	r4, r4, r0
		if (!len) {
   1b8e8:	bb34      	cbnz	r4, 1b938 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1b8ea:	79b0      	ldrb	r0, [r6, #6]
   1b8ec:	f7f8 ff1a 	bl	14724 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b8f0:	2200      	movs	r2, #0
   1b8f2:	2300      	movs	r3, #0
   1b8f4:	f000 fe1d 	bl	1c532 <net_buf_alloc_fixed>
			if (!frag) {
   1b8f8:	4605      	mov	r5, r0
   1b8fa:	b930      	cbnz	r0, 1b90a <att_chan_read+0x76>
	return total;
   1b8fc:	4657      	mov	r7, sl
   1b8fe:	e02c      	b.n	1b95a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1b900:	4638      	mov	r0, r7
   1b902:	f000 fe3c 	bl	1c57e <net_buf_simple_tailroom>
   1b906:	4604      	mov	r4, r0
   1b908:	e7ee      	b.n	1b8e8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1b90a:	4601      	mov	r1, r0
   1b90c:	4630      	mov	r0, r6
   1b90e:	f7f9 f925 	bl	14b5c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b912:	4630      	mov	r0, r6
   1b914:	f7ff fec3 	bl	1b69e <net_buf_frags_len>
   1b918:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b91c:	f105 0708 	add.w	r7, r5, #8
   1b920:	1a24      	subs	r4, r4, r0
   1b922:	4638      	mov	r0, r7
   1b924:	f000 fe2b 	bl	1c57e <net_buf_simple_tailroom>
   1b928:	4284      	cmp	r4, r0
   1b92a:	d21a      	bcs.n	1b962 <att_chan_read+0xce>
   1b92c:	4630      	mov	r0, r6
   1b92e:	f7ff feb6 	bl	1b69e <net_buf_frags_len>
   1b932:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b936:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1b938:	68a9      	ldr	r1, [r5, #8]
   1b93a:	89aa      	ldrh	r2, [r5, #12]
   1b93c:	f8db 7004 	ldr.w	r7, [fp, #4]
   1b940:	440a      	add	r2, r1
   1b942:	9803      	ldr	r0, [sp, #12]
   1b944:	4659      	mov	r1, fp
   1b946:	f8cd 9000 	str.w	r9, [sp]
   1b94a:	b2a3      	uxth	r3, r4
   1b94c:	47b8      	blx	r7
		if (read < 0) {
   1b94e:	1e07      	subs	r7, r0, #0
   1b950:	da0c      	bge.n	1b96c <att_chan_read+0xd8>
				return total;
   1b952:	f1ba 0f00 	cmp.w	sl, #0
   1b956:	bf18      	it	ne
   1b958:	4657      	movne	r7, sl
}
   1b95a:	4638      	mov	r0, r7
   1b95c:	b005      	add	sp, #20
   1b95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b962:	4638      	mov	r0, r7
   1b964:	f000 fe0b 	bl	1c57e <net_buf_simple_tailroom>
   1b968:	4604      	mov	r4, r0
   1b96a:	e7e5      	b.n	1b938 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1b96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b96e:	b993      	cbnz	r3, 1b996 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b970:	4639      	mov	r1, r7
   1b972:	f105 0008 	add.w	r0, r5, #8
   1b976:	f7f9 f96b 	bl	14c50 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b97a:	4630      	mov	r0, r6
   1b97c:	f7ff fe8f 	bl	1b69e <net_buf_frags_len>
   1b980:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1b984:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b986:	4283      	cmp	r3, r0
		total += read;
   1b988:	44ba      	add	sl, r7
		offset += read;
   1b98a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b98e:	d9b5      	bls.n	1b8fc <att_chan_read+0x68>
   1b990:	42a7      	cmp	r7, r4
   1b992:	d096      	beq.n	1b8c2 <att_chan_read+0x2e>
   1b994:	e7b2      	b.n	1b8fc <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1b996:	4639      	mov	r1, r7
   1b998:	4628      	mov	r0, r5
   1b99a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b99c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b99e:	4798      	blx	r3
   1b9a0:	2800      	cmp	r0, #0
   1b9a2:	d1e5      	bne.n	1b970 <att_chan_read+0xdc>
   1b9a4:	e7aa      	b.n	1b8fc <att_chan_read+0x68>
		return 0;
   1b9a6:	2700      	movs	r7, #0
   1b9a8:	e7d7      	b.n	1b95a <att_chan_read+0xc6>

0001b9aa <bt_att_chan_send>:
{
   1b9aa:	b570      	push	{r4, r5, r6, lr}
   1b9ac:	4604      	mov	r4, r0
   1b9ae:	460e      	mov	r6, r1
	if (!cb) {
   1b9b0:	4615      	mov	r5, r2
   1b9b2:	b132      	cbz	r2, 1b9c2 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1b9b4:	462a      	mov	r2, r5
   1b9b6:	4631      	mov	r1, r6
   1b9b8:	4620      	mov	r0, r4
}
   1b9ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1b9be:	f7f5 bfb5 	b.w	1192c <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1b9c2:	2200      	movs	r2, #0
   1b9c4:	2300      	movs	r3, #0
   1b9c6:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1b9ca:	f7fc ff05 	bl	187d8 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1b9ce:	2800      	cmp	r0, #0
   1b9d0:	daf0      	bge.n	1b9b4 <bt_att_chan_send+0xa>
}
   1b9d2:	f06f 000a 	mvn.w	r0, #10
   1b9d6:	bd70      	pop	{r4, r5, r6, pc}

0001b9d8 <bt_att_chan_send_rsp>:
{
   1b9d8:	b538      	push	{r3, r4, r5, lr}
   1b9da:	4604      	mov	r4, r0
   1b9dc:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1b9de:	f7ff ffe4 	bl	1b9aa <bt_att_chan_send>
	if (err) {
   1b9e2:	b130      	cbz	r0, 1b9f2 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1b9e4:	4629      	mov	r1, r5
   1b9e6:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1b9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1b9ee:	f7f8 bfeb 	b.w	149c8 <net_buf_put>
}
   1b9f2:	bd38      	pop	{r3, r4, r5, pc}

0001b9f4 <process_queue>:
{
   1b9f4:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1b9f6:	2200      	movs	r2, #0
{
   1b9f8:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1b9fa:	2300      	movs	r3, #0
   1b9fc:	4608      	mov	r0, r1
{
   1b9fe:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1ba00:	f7f8 ff8e 	bl	14920 <net_buf_get>
	if (buf) {
   1ba04:	4605      	mov	r5, r0
   1ba06:	b160      	cbz	r0, 1ba22 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1ba08:	4601      	mov	r1, r0
   1ba0a:	2200      	movs	r2, #0
   1ba0c:	4620      	mov	r0, r4
   1ba0e:	f7f5 ff8d 	bl	1192c <chan_send>
		if (err) {
   1ba12:	4604      	mov	r4, r0
   1ba14:	b118      	cbz	r0, 1ba1e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1ba16:	4629      	mov	r1, r5
   1ba18:	4630      	mov	r0, r6
   1ba1a:	f001 fbfe 	bl	1d21a <k_queue_prepend>
}
   1ba1e:	4620      	mov	r0, r4
   1ba20:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1ba22:	f06f 0401 	mvn.w	r4, #1
   1ba26:	e7fa      	b.n	1ba1e <process_queue+0x2a>

0001ba28 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ba28:	2200      	movs	r2, #0
   1ba2a:	b510      	push	{r4, lr}
	return list->head;
   1ba2c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ba2e:	b153      	cbz	r3, 1ba46 <sys_slist_find_and_remove.isra.0+0x1e>
   1ba30:	428b      	cmp	r3, r1
   1ba32:	d10e      	bne.n	1ba52 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1ba34:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1ba36:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ba38:	b932      	cbnz	r2, 1ba48 <sys_slist_find_and_remove.isra.0+0x20>
   1ba3a:	42a1      	cmp	r1, r4
	list->head = node;
   1ba3c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ba3e:	d100      	bne.n	1ba42 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1ba40:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1ba42:	2300      	movs	r3, #0
   1ba44:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ba46:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1ba48:	42a1      	cmp	r1, r4
	parent->next = child;
   1ba4a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1ba4c:	bf08      	it	eq
   1ba4e:	6042      	streq	r2, [r0, #4]
}
   1ba50:	e7f7      	b.n	1ba42 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1ba52:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ba54:	681b      	ldr	r3, [r3, #0]
   1ba56:	e7ea      	b.n	1ba2e <sys_slist_find_and_remove.isra.0+0x6>

0001ba58 <att_exec_write_req>:
   1ba58:	2006      	movs	r0, #6
   1ba5a:	4770      	bx	lr

0001ba5c <chan_req_send>:
{
   1ba5c:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ba5e:	690e      	ldr	r6, [r1, #16]
{
   1ba60:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ba62:	4630      	mov	r0, r6
   1ba64:	f7ff fe1b 	bl	1b69e <net_buf_frags_len>
   1ba68:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1ba6c:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ba6e:	4283      	cmp	r3, r0
   1ba70:	d317      	bcc.n	1baa2 <chan_req_send+0x46>
	chan->req = req;
   1ba72:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1ba76:	f106 0008 	add.w	r0, r6, #8
   1ba7a:	f000 fd7c 	bl	1c576 <net_buf_simple_headroom>
	state->len = buf->len;
   1ba7e:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1ba80:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1ba82:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1ba84:	6920      	ldr	r0, [r4, #16]
   1ba86:	f7f9 f811 	bl	14aac <net_buf_ref>
   1ba8a:	2200      	movs	r2, #0
   1ba8c:	4601      	mov	r1, r0
   1ba8e:	4628      	mov	r0, r5
   1ba90:	f7f5 ff4c 	bl	1192c <chan_send>
	if (err) {
   1ba94:	4605      	mov	r5, r0
   1ba96:	b110      	cbz	r0, 1ba9e <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1ba98:	6920      	ldr	r0, [r4, #16]
   1ba9a:	f7f8 ffc3 	bl	14a24 <net_buf_unref>
}
   1ba9e:	4628      	mov	r0, r5
   1baa0:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1baa2:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1baa6:	e7fa      	b.n	1ba9e <chan_req_send+0x42>

0001baa8 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1baa8:	30c8      	adds	r0, #200	; 0xc8
   1baaa:	e8d0 3fef 	ldaex	r3, [r0]
   1baae:	f023 0301 	bic.w	r3, r3, #1
   1bab2:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1bab6:	2a00      	cmp	r2, #0
   1bab8:	d1f7      	bne.n	1baaa <chan_rsp_sent+0x2>
}
   1baba:	4770      	bx	lr

0001babc <chan_cfm_sent>:
   1babc:	30c8      	adds	r0, #200	; 0xc8
   1babe:	e8d0 3fef 	ldaex	r3, [r0]
   1bac2:	f023 0302 	bic.w	r3, r3, #2
   1bac6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1baca:	2a00      	cmp	r2, #0
   1bacc:	d1f7      	bne.n	1babe <chan_cfm_sent+0x2>
}
   1bace:	4770      	bx	lr

0001bad0 <read_cb>:
{
   1bad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bad4:	4606      	mov	r6, r0
	data->err = 0x00;
   1bad6:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1bad8:	f8d2 8000 	ldr.w	r8, [r2]
{
   1badc:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1bade:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1bae2:	4631      	mov	r1, r6
	data->err = 0x00;
   1bae4:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1bae6:	2215      	movs	r2, #21
   1bae8:	f000 fc16 	bl	1c318 <bt_gatt_check_perm>
   1baec:	4604      	mov	r4, r0
   1baee:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1baf0:	b9a0      	cbnz	r0, 1bb1c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1baf2:	e9cd 0000 	strd	r0, r0, [sp]
   1baf6:	88ab      	ldrh	r3, [r5, #4]
   1baf8:	4631      	mov	r1, r6
   1bafa:	4640      	mov	r0, r8
   1bafc:	68aa      	ldr	r2, [r5, #8]
   1bafe:	f7ff fec9 	bl	1b894 <att_chan_read>
	if (ret < 0) {
   1bb02:	1e03      	subs	r3, r0, #0
   1bb04:	da0c      	bge.n	1bb20 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1bb06:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1bb0a:	bf32      	itee	cc
   1bb0c:	230e      	movcc	r3, #14
		return -err;
   1bb0e:	425b      	negcs	r3, r3
   1bb10:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1bb12:	732b      	strb	r3, [r5, #12]
}
   1bb14:	4620      	mov	r0, r4
   1bb16:	b002      	add	sp, #8
   1bb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1bb1c:	463c      	mov	r4, r7
   1bb1e:	e7f9      	b.n	1bb14 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1bb20:	2401      	movs	r4, #1
   1bb22:	e7f7      	b.n	1bb14 <read_cb+0x44>

0001bb24 <bt_att_sent>:
{
   1bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1bb26:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1bb2a:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1bb2c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1bb30:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1bb34:	b10b      	cbz	r3, 1bb3a <bt_att_sent+0x16>
		chan->sent(chan);
   1bb36:	4638      	mov	r0, r7
   1bb38:	4798      	blx	r3
   1bb3a:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1bb3e:	e8d3 2fef 	ldaex	r2, [r3]
   1bb42:	f022 0210 	bic.w	r2, r2, #16
   1bb46:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bb4a:	2900      	cmp	r1, #0
   1bb4c:	d1f7      	bne.n	1bb3e <bt_att_sent+0x1a>
	if (!att) {
   1bb4e:	b335      	cbz	r5, 1bb9e <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1bb50:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1bb54:	b98b      	cbnz	r3, 1bb7a <bt_att_sent+0x56>
   1bb56:	686b      	ldr	r3, [r5, #4]
   1bb58:	b17b      	cbz	r3, 1bb7a <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1bb5a:	1d28      	adds	r0, r5, #4
   1bb5c:	f7ff fd95 	bl	1b68a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1bb60:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1bb62:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1bb64:	4638      	mov	r0, r7
   1bb66:	f7ff ff79 	bl	1ba5c <chan_req_send>
   1bb6a:	2800      	cmp	r0, #0
   1bb6c:	da17      	bge.n	1bb9e <bt_att_sent+0x7a>
	parent->next = child;
   1bb6e:	686b      	ldr	r3, [r5, #4]
   1bb70:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bb72:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1bb74:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bb76:	b903      	cbnz	r3, 1bb7a <bt_att_sent+0x56>
	list->tail = node;
   1bb78:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1bb7a:	4638      	mov	r0, r7
   1bb7c:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1bb80:	f7ff ff38 	bl	1b9f4 <process_queue>
	if (!err) {
   1bb84:	b158      	cbz	r0, 1bb9e <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1bb86:	4638      	mov	r0, r7
   1bb88:	f105 010c 	add.w	r1, r5, #12
   1bb8c:	f7ff ff32 	bl	1b9f4 <process_queue>
	if (!err) {
   1bb90:	b128      	cbz	r0, 1bb9e <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1bb92:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1bb96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1bb9a:	f7fc bde1 	b.w	18760 <z_impl_k_sem_give>
   1bb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bba0 <att_req_send_process>:
{
   1bba0:	b570      	push	{r4, r5, r6, lr}
   1bba2:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1bba4:	3004      	adds	r0, #4
   1bba6:	f7ff fd70 	bl	1b68a <sys_slist_get>
	if (!node) {
   1bbaa:	4606      	mov	r6, r0
   1bbac:	b1c0      	cbz	r0, 1bbe0 <att_req_send_process+0x40>
	return list->head;
   1bbae:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bbb0:	b153      	cbz	r3, 1bbc8 <att_req_send_process+0x28>
   1bbb2:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1bbb6:	d007      	beq.n	1bbc8 <att_req_send_process+0x28>
	return node->next;
   1bbb8:	681c      	ldr	r4, [r3, #0]
   1bbba:	b10c      	cbz	r4, 1bbc0 <att_req_send_process+0x20>
   1bbbc:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1bbc0:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1bbc4:	b13b      	cbz	r3, 1bbd6 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bbc6:	b964      	cbnz	r4, 1bbe2 <att_req_send_process+0x42>
	parent->next = child;
   1bbc8:	686b      	ldr	r3, [r5, #4]
   1bbca:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bbcc:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1bbce:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bbd0:	b933      	cbnz	r3, 1bbe0 <att_req_send_process+0x40>
	list->tail = node;
   1bbd2:	60ae      	str	r6, [r5, #8]
}
   1bbd4:	e004      	b.n	1bbe0 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1bbd6:	4631      	mov	r1, r6
   1bbd8:	f7f5 ff14 	bl	11a04 <bt_att_chan_req_send>
   1bbdc:	2800      	cmp	r0, #0
   1bbde:	dbf2      	blt.n	1bbc6 <att_req_send_process+0x26>
}
   1bbe0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bbe2:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1bbe6:	d004      	beq.n	1bbf2 <att_req_send_process+0x52>
	return node->next;
   1bbe8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bbec:	b10b      	cbz	r3, 1bbf2 <att_req_send_process+0x52>
   1bbee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1bbf2:	4620      	mov	r0, r4
   1bbf4:	461c      	mov	r4, r3
   1bbf6:	e7e3      	b.n	1bbc0 <att_req_send_process+0x20>

0001bbf8 <bt_att_status>:
{
   1bbf8:	b538      	push	{r3, r4, r5, lr}
   1bbfa:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bbfc:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1bc00:	07db      	lsls	r3, r3, #31
   1bc02:	d519      	bpl.n	1bc38 <bt_att_status+0x40>
	if (!chan->att) {
   1bc04:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1bc08:	b1b0      	cbz	r0, 1bc38 <bt_att_status+0x40>
	if (chan->req) {
   1bc0a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1bc0e:	b99b      	cbnz	r3, 1bc38 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1bc10:	3004      	adds	r0, #4
   1bc12:	f7ff fd3a 	bl	1b68a <sys_slist_get>
	if (!node) {
   1bc16:	4604      	mov	r4, r0
   1bc18:	b170      	cbz	r0, 1bc38 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1bc1a:	4601      	mov	r1, r0
   1bc1c:	f1a5 0008 	sub.w	r0, r5, #8
   1bc20:	f7f5 fef0 	bl	11a04 <bt_att_chan_req_send>
   1bc24:	2800      	cmp	r0, #0
   1bc26:	da07      	bge.n	1bc38 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1bc28:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1bc2c:	685a      	ldr	r2, [r3, #4]
   1bc2e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bc30:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1bc32:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bc34:	b902      	cbnz	r2, 1bc38 <bt_att_status+0x40>
	list->tail = node;
   1bc36:	609c      	str	r4, [r3, #8]
}
   1bc38:	bd38      	pop	{r3, r4, r5, pc}

0001bc3a <att_write_req>:
{
   1bc3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bc3c:	460c      	mov	r4, r1
   1bc3e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1bc40:	f101 0008 	add.w	r0, r1, #8
   1bc44:	f000 fc8f 	bl	1c566 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1bc48:	89a2      	ldrh	r2, [r4, #12]
   1bc4a:	4603      	mov	r3, r0
   1bc4c:	9201      	str	r2, [sp, #4]
   1bc4e:	68a2      	ldr	r2, [r4, #8]
   1bc50:	2112      	movs	r1, #18
   1bc52:	9200      	str	r2, [sp, #0]
   1bc54:	4628      	mov	r0, r5
   1bc56:	2213      	movs	r2, #19
   1bc58:	f7f6 f8b2 	bl	11dc0 <att_write_rsp.constprop.0>
}
   1bc5c:	b003      	add	sp, #12
   1bc5e:	bd30      	pop	{r4, r5, pc}

0001bc60 <att_write_cmd>:
{
   1bc60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bc62:	460c      	mov	r4, r1
   1bc64:	4605      	mov	r5, r0
   1bc66:	f101 0008 	add.w	r0, r1, #8
   1bc6a:	f000 fc7c 	bl	1c566 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1bc6e:	89a2      	ldrh	r2, [r4, #12]
   1bc70:	4603      	mov	r3, r0
   1bc72:	9201      	str	r2, [sp, #4]
   1bc74:	68a2      	ldr	r2, [r4, #8]
   1bc76:	4628      	mov	r0, r5
   1bc78:	9200      	str	r2, [sp, #0]
   1bc7a:	2200      	movs	r2, #0
   1bc7c:	4611      	mov	r1, r2
   1bc7e:	f7f6 f89f 	bl	11dc0 <att_write_rsp.constprop.0>
}
   1bc82:	b003      	add	sp, #12
   1bc84:	bd30      	pop	{r4, r5, pc}

0001bc86 <att_read_blob_req>:
{
   1bc86:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1bc88:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1bc8a:	210c      	movs	r1, #12
   1bc8c:	8813      	ldrh	r3, [r2, #0]
   1bc8e:	8852      	ldrh	r2, [r2, #2]
   1bc90:	9200      	str	r2, [sp, #0]
   1bc92:	220d      	movs	r2, #13
   1bc94:	f7f6 f9f0 	bl	12078 <att_read_rsp>
}
   1bc98:	b003      	add	sp, #12
   1bc9a:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc9e <att_read_req>:
{
   1bc9e:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1bca0:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1bca2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1bca4:	210a      	movs	r1, #10
   1bca6:	881b      	ldrh	r3, [r3, #0]
   1bca8:	9200      	str	r2, [sp, #0]
   1bcaa:	220b      	movs	r2, #11
   1bcac:	f7f6 f9e4 	bl	12078 <att_read_rsp>
}
   1bcb0:	b003      	add	sp, #12
   1bcb2:	f85d fb04 	ldr.w	pc, [sp], #4

0001bcb6 <bt_att_init>:
	bt_gatt_init();
   1bcb6:	f7f7 ba19 	b.w	130ec <bt_gatt_init>

0001bcba <att_req_destroy>:
{
   1bcba:	b510      	push	{r4, lr}
   1bcbc:	4604      	mov	r4, r0
	if (req->buf) {
   1bcbe:	6900      	ldr	r0, [r0, #16]
   1bcc0:	b108      	cbz	r0, 1bcc6 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1bcc2:	f7f8 feaf 	bl	14a24 <net_buf_unref>
	if (req->destroy) {
   1bcc6:	68a3      	ldr	r3, [r4, #8]
   1bcc8:	b10b      	cbz	r3, 1bcce <att_req_destroy+0x14>
		req->destroy(req);
   1bcca:	4620      	mov	r0, r4
   1bccc:	4798      	blx	r3
	bt_att_req_free(req);
   1bcce:	4620      	mov	r0, r4
}
   1bcd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1bcd4:	f7f6 bb6e 	b.w	123b4 <bt_att_req_free>

0001bcd8 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1bcd8:	898a      	ldrh	r2, [r1, #12]
   1bcda:	2300      	movs	r3, #0
   1bcdc:	6889      	ldr	r1, [r1, #8]
   1bcde:	f7f6 bb75 	b.w	123cc <att_handle_rsp>

0001bce2 <att_handle_find_type_rsp>:
   1bce2:	f7ff bff9 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bce6 <att_handle_read_type_rsp>:
   1bce6:	f7ff bff7 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bcea <att_handle_read_rsp>:
   1bcea:	f7ff bff5 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bcee <att_handle_read_blob_rsp>:
   1bcee:	f7ff bff3 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bcf2 <att_handle_read_mult_rsp>:
   1bcf2:	f7ff bff1 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bcf6 <att_handle_read_group_rsp>:
   1bcf6:	f7ff bfef 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bcfa <att_handle_write_rsp>:
   1bcfa:	f7ff bfed 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bcfe <att_handle_prepare_write_rsp>:
   1bcfe:	f7ff bfeb 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bd02 <att_handle_exec_write_rsp>:
   1bd02:	f7ff bfe9 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bd06 <att_confirm>:
   1bd06:	f7ff bfe7 	b.w	1bcd8 <att_handle_find_info_rsp>

0001bd0a <att_mtu_rsp>:
{
   1bd0a:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1bd0c:	6889      	ldr	r1, [r1, #8]
{
   1bd0e:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1bd10:	880c      	ldrh	r4, [r1, #0]
{
   1bd12:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1bd14:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1bd16:	bf89      	itett	hi
   1bd18:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1bd1a:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1bd1c:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1bd20:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1bd24:	bf99      	ittee	ls
   1bd26:	2304      	movls	r3, #4
   1bd28:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1bd2a:	2300      	movhi	r3, #0
   1bd2c:	8992      	ldrhhi	r2, [r2, #12]
}
   1bd2e:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1bd30:	f7f6 bb4c 	b.w	123cc <att_handle_rsp>

0001bd34 <att_chan_detach>:
{
   1bd34:	b538      	push	{r3, r4, r5, lr}
   1bd36:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1bd38:	6800      	ldr	r0, [r0, #0]
   1bd3a:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1bd3e:	3028      	adds	r0, #40	; 0x28
   1bd40:	f7ff fe72 	bl	1ba28 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1bd44:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1bd48:	4628      	mov	r0, r5
   1bd4a:	f7fc fd09 	bl	18760 <z_impl_k_sem_give>
   1bd4e:	4628      	mov	r0, r5
   1bd50:	f7fc fd06 	bl	18760 <z_impl_k_sem_give>
   1bd54:	4628      	mov	r0, r5
   1bd56:	f7fc fd03 	bl	18760 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1bd5a:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1bd5e:	2200      	movs	r2, #0
   1bd60:	2300      	movs	r3, #0
   1bd62:	4628      	mov	r0, r5
   1bd64:	f7f8 fddc 	bl	14920 <net_buf_get>
   1bd68:	4602      	mov	r2, r0
   1bd6a:	b950      	cbnz	r0, 1bd82 <att_chan_detach+0x4e>
	if (chan->req) {
   1bd6c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1bd70:	b123      	cbz	r3, 1bd7c <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1bd72:	4601      	mov	r1, r0
   1bd74:	230e      	movs	r3, #14
   1bd76:	4620      	mov	r0, r4
   1bd78:	f7f6 fb28 	bl	123cc <att_handle_rsp>
	chan->att = NULL;
   1bd7c:	2300      	movs	r3, #0
   1bd7e:	6023      	str	r3, [r4, #0]
}
   1bd80:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1bd82:	f7f8 fe4f 	bl	14a24 <net_buf_unref>
   1bd86:	e7ea      	b.n	1bd5e <att_chan_detach+0x2a>

0001bd88 <bt_att_disconnected>:
{
   1bd88:	b538      	push	{r3, r4, r5, lr}
   1bd8a:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1bd8c:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1bd90:	f7ff ffd0 	bl	1bd34 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1bd94:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bd96:	b93b      	cbnz	r3, 1bda8 <bt_att_disconnected+0x20>
	att_reset(att);
   1bd98:	4628      	mov	r0, r5
   1bd9a:	f7f6 fb75 	bl	12488 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1bd9e:	6820      	ldr	r0, [r4, #0]
}
   1bda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1bda4:	f7f8 bbea 	b.w	1457c <bt_gatt_disconnected>
}
   1bda8:	bd38      	pop	{r3, r4, r5, pc}

0001bdaa <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1bdaa:	6010      	str	r0, [r2, #0]
}
   1bdac:	2000      	movs	r0, #0
   1bdae:	4770      	bx	lr

0001bdb0 <gatt_ccc_changed>:
{
   1bdb0:	460b      	mov	r3, r1
   1bdb2:	460a      	mov	r2, r1
   1bdb4:	b430      	push	{r4, r5}
   1bdb6:	f101 0464 	add.w	r4, r1, #100	; 0x64
	uint16_t value = 0x0000;
   1bdba:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   1bdbc:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bdbe:	320a      	adds	r2, #10
   1bdc0:	42a9      	cmp	r1, r5
   1bdc2:	bf38      	it	cc
   1bdc4:	4629      	movcc	r1, r5
   1bdc6:	42a2      	cmp	r2, r4
   1bdc8:	d1f8      	bne.n	1bdbc <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   1bdca:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1bdce:	428a      	cmp	r2, r1
   1bdd0:	d005      	beq.n	1bdde <gatt_ccc_changed+0x2e>
		ccc->value = value;
   1bdd2:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
		if (ccc->cfg_changed) {
   1bdd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1bdd8:	b10b      	cbz	r3, 1bdde <gatt_ccc_changed+0x2e>
}
   1bdda:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1bddc:	4718      	bx	r3
}
   1bdde:	bc30      	pop	{r4, r5}
   1bde0:	4770      	bx	lr

0001bde2 <gatt_indicate_rsp>:
{
   1bde2:	b510      	push	{r4, lr}
   1bde4:	9c02      	ldr	r4, [sp, #8]
   1bde6:	460a      	mov	r2, r1
	params->_ref--;
   1bde8:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1bdea:	4621      	mov	r1, r4
	params->_ref--;
   1bdec:	3b01      	subs	r3, #1
   1bdee:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1bdf0:	68a3      	ldr	r3, [r4, #8]
   1bdf2:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1bdf4:	68e3      	ldr	r3, [r4, #12]
   1bdf6:	b12b      	cbz	r3, 1be04 <gatt_indicate_rsp+0x22>
   1bdf8:	7da2      	ldrb	r2, [r4, #22]
   1bdfa:	b91a      	cbnz	r2, 1be04 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1bdfc:	4620      	mov	r0, r4
}
   1bdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1be02:	4718      	bx	r3
}
   1be04:	bd10      	pop	{r4, pc}

0001be06 <match_uuid>:
	data->attr = attr;
   1be06:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1be08:	8091      	strh	r1, [r2, #4]
}
   1be0a:	2000      	movs	r0, #0
   1be0c:	4770      	bx	lr

0001be0e <ccc_set_cb>:
}
   1be0e:	2000      	movs	r0, #0
   1be10:	4770      	bx	lr

0001be12 <gen_hash_m>:
{
   1be12:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1be14:	6807      	ldr	r7, [r0, #0]
{
   1be16:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1be18:	783d      	ldrb	r5, [r7, #0]
{
   1be1a:	4614      	mov	r4, r2
   1be1c:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1be1e:	b10d      	cbz	r5, 1be24 <gen_hash_m+0x12>
	switch (u16->val) {
   1be20:	2501      	movs	r5, #1
   1be22:	e014      	b.n	1be4e <gen_hash_m+0x3c>
   1be24:	887b      	ldrh	r3, [r7, #2]
   1be26:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1be2a:	d004      	beq.n	1be36 <gen_hash_m+0x24>
   1be2c:	d812      	bhi.n	1be54 <gen_hash_m+0x42>
   1be2e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1be32:	2b03      	cmp	r3, #3
   1be34:	d8f4      	bhi.n	1be20 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1be36:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1be3a:	2202      	movs	r2, #2
   1be3c:	4620      	mov	r0, r4
   1be3e:	f10d 010e 	add.w	r1, sp, #14
   1be42:	f7fe fcf6 	bl	1a832 <tc_cmac_update>
   1be46:	b9e0      	cbnz	r0, 1be82 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1be48:	f06f 0315 	mvn.w	r3, #21
   1be4c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1be4e:	4628      	mov	r0, r5
   1be50:	b009      	add	sp, #36	; 0x24
   1be52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1be54:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1be58:	33ff      	adds	r3, #255	; 0xff
   1be5a:	b29b      	uxth	r3, r3
   1be5c:	2b04      	cmp	r3, #4
   1be5e:	d8df      	bhi.n	1be20 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1be60:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1be64:	2202      	movs	r2, #2
   1be66:	4620      	mov	r0, r4
   1be68:	f10d 010e 	add.w	r1, sp, #14
   1be6c:	f7fe fce1 	bl	1a832 <tc_cmac_update>
   1be70:	2800      	cmp	r0, #0
   1be72:	d0e9      	beq.n	1be48 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1be74:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1be76:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1be78:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1be7c:	f10d 010e 	add.w	r1, sp, #14
   1be80:	e017      	b.n	1beb2 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1be82:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1be84:	2202      	movs	r2, #2
   1be86:	4620      	mov	r0, r4
   1be88:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1be8c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1be90:	f7fe fccf 	bl	1a832 <tc_cmac_update>
   1be94:	2800      	cmp	r0, #0
   1be96:	d0d7      	beq.n	1be48 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1be98:	2000      	movs	r0, #0
   1be9a:	2310      	movs	r3, #16
   1be9c:	4631      	mov	r1, r6
   1be9e:	eb0d 0203 	add.w	r2, sp, r3
   1bea2:	6877      	ldr	r7, [r6, #4]
   1bea4:	9000      	str	r0, [sp, #0]
   1bea6:	47b8      	blx	r7
		if (len < 0) {
   1bea8:	1e02      	subs	r2, r0, #0
   1beaa:	da01      	bge.n	1beb0 <gen_hash_m+0x9e>
			state->err = len;
   1beac:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1beae:	e7ce      	b.n	1be4e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1beb0:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1beb2:	4620      	mov	r0, r4
   1beb4:	f7fe fcbd 	bl	1a832 <tc_cmac_update>
   1beb8:	2800      	cmp	r0, #0
   1beba:	d1b1      	bne.n	1be20 <gen_hash_m+0xe>
   1bebc:	e7c4      	b.n	1be48 <gen_hash_m+0x36>

0001bebe <bt_addr_le_cmp>:
   1bebe:	2207      	movs	r2, #7
   1bec0:	f7ff b852 	b.w	1af68 <memcmp>

0001bec4 <find_ccc_cfg>:
{
   1bec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bec6:	4606      	mov	r6, r0
   1bec8:	1c4c      	adds	r4, r1, #1
   1beca:	f101 0565 	add.w	r5, r1, #101	; 0x65
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1bece:	1e67      	subs	r7, r4, #1
		if (conn) {
   1bed0:	b14e      	cbz	r6, 1bee6 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1bed2:	4622      	mov	r2, r4
   1bed4:	4630      	mov	r0, r6
   1bed6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1beda:	f7ff fab1 	bl	1b440 <bt_conn_is_peer_addr_le>
   1bede:	b158      	cbz	r0, 1bef8 <find_ccc_cfg+0x34>
}
   1bee0:	4638      	mov	r0, r7
   1bee2:	b003      	add	sp, #12
   1bee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bee6:	4669      	mov	r1, sp
   1bee8:	4620      	mov	r0, r4
   1beea:	9600      	str	r6, [sp, #0]
   1beec:	f8cd 6003 	str.w	r6, [sp, #3]
   1bef0:	f7ff ffe5 	bl	1bebe <bt_addr_le_cmp>
   1bef4:	2800      	cmp	r0, #0
   1bef6:	d0f3      	beq.n	1bee0 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bef8:	340a      	adds	r4, #10
   1befa:	42ac      	cmp	r4, r5
   1befc:	d1e7      	bne.n	1bece <find_ccc_cfg+0xa>
	return NULL;
   1befe:	2700      	movs	r7, #0
   1bf00:	e7ee      	b.n	1bee0 <find_ccc_cfg+0x1c>

0001bf02 <ccc_find_cfg>:
{
   1bf02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf06:	4604      	mov	r4, r0
   1bf08:	460f      	mov	r7, r1
   1bf0a:	4690      	mov	r8, r2
   1bf0c:	2500      	movs	r5, #0
   1bf0e:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1bf10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1bf14:	4543      	cmp	r3, r8
   1bf16:	d107      	bne.n	1bf28 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1bf18:	4639      	mov	r1, r7
   1bf1a:	4630      	mov	r0, r6
   1bf1c:	f7ff ffcf 	bl	1bebe <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1bf20:	b910      	cbnz	r0, 1bf28 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1bf22:	1960      	adds	r0, r4, r5
}
   1bf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bf28:	350a      	adds	r5, #10
   1bf2a:	2d64      	cmp	r5, #100	; 0x64
   1bf2c:	f106 060a 	add.w	r6, r6, #10
   1bf30:	d1ee      	bne.n	1bf10 <ccc_find_cfg+0xe>
	return NULL;
   1bf32:	2000      	movs	r0, #0
   1bf34:	e7f6      	b.n	1bf24 <ccc_find_cfg+0x22>

0001bf36 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bf36:	2207      	movs	r2, #7
   1bf38:	f7ff b827 	b.w	1af8a <memcpy>

0001bf3c <clear_ccc_cfg>:
{
   1bf3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bf3e:	2500      	movs	r5, #0
{
   1bf40:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bf42:	4669      	mov	r1, sp
   1bf44:	3001      	adds	r0, #1
   1bf46:	9500      	str	r5, [sp, #0]
   1bf48:	f8cd 5003 	str.w	r5, [sp, #3]
   1bf4c:	f7ff fff3 	bl	1bf36 <bt_addr_le_copy>
	cfg->id = 0U;
   1bf50:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1bf52:	8125      	strh	r5, [r4, #8]
}
   1bf54:	b003      	add	sp, #12
   1bf56:	bd30      	pop	{r4, r5, pc}

0001bf58 <atomic_or>:
{
   1bf58:	4603      	mov	r3, r0
}
   1bf5a:	e8d3 0fef 	ldaex	r0, [r3]
   1bf5e:	ea40 0201 	orr.w	r2, r0, r1
   1bf62:	e8c3 2fec 	stlex	ip, r2, [r3]
   1bf66:	f1bc 0f00 	cmp.w	ip, #0
   1bf6a:	d1f6      	bne.n	1bf5a <atomic_or+0x2>
   1bf6c:	4770      	bx	lr

0001bf6e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bf6e:	e8d0 0faf 	lda	r0, [r0]
}
   1bf72:	4770      	bx	lr

0001bf74 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bf74:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1bf76:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bf78:	3001      	adds	r0, #1
   1bf7a:	4669      	mov	r1, sp
   1bf7c:	9300      	str	r3, [sp, #0]
   1bf7e:	f8cd 3003 	str.w	r3, [sp, #3]
   1bf82:	f7ff ffd8 	bl	1bf36 <bt_addr_le_copy>
}
   1bf86:	b003      	add	sp, #12
   1bf88:	f85d fb04 	ldr.w	pc, [sp], #4

0001bf8c <clear_cf_cfg>:
{
   1bf8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bf8e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bf90:	2500      	movs	r5, #0
   1bf92:	4669      	mov	r1, sp
   1bf94:	3001      	adds	r0, #1
   1bf96:	9500      	str	r5, [sp, #0]
   1bf98:	f8cd 5003 	str.w	r5, [sp, #3]
   1bf9c:	f7ff ffcb 	bl	1bf36 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1bfa0:	f104 0008 	add.w	r0, r4, #8
   1bfa4:	2201      	movs	r2, #1
   1bfa6:	4629      	mov	r1, r5
   1bfa8:	f7ff f81a 	bl	1afe0 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bfac:	340c      	adds	r4, #12
   1bfae:	e8d4 3fef 	ldaex	r3, [r4]
   1bfb2:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1bfb6:	2a00      	cmp	r2, #0
   1bfb8:	d1f9      	bne.n	1bfae <clear_cf_cfg+0x22>
}
   1bfba:	b003      	add	sp, #12
   1bfbc:	bd30      	pop	{r4, r5, pc}

0001bfbe <gatt_sub_remove>:
{
   1bfbe:	b570      	push	{r4, r5, r6, lr}
   1bfc0:	460c      	mov	r4, r1
	if (params) {
   1bfc2:	4619      	mov	r1, r3
   1bfc4:	b16b      	cbz	r3, 1bfe2 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1bfc6:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1bfca:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1bfcc:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1bfce:	b97a      	cbnz	r2, 1bff0 <gatt_sub_remove+0x32>
   1bfd0:	42ae      	cmp	r6, r5
	list->head = node;
   1bfd2:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1bfd4:	d100      	bne.n	1bfd8 <gatt_sub_remove+0x1a>
	list->tail = node;
   1bfd6:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1bfd8:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1bfda:	680d      	ldr	r5, [r1, #0]
   1bfdc:	461a      	mov	r2, r3
   1bfde:	614b      	str	r3, [r1, #20]
   1bfe0:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1bfe2:	68a3      	ldr	r3, [r4, #8]
   1bfe4:	b94b      	cbnz	r3, 1bffa <gatt_sub_remove+0x3c>
   1bfe6:	4620      	mov	r0, r4
}
   1bfe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bfec:	f7ff bfc2 	b.w	1bf74 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1bff0:	42ae      	cmp	r6, r5
	parent->next = child;
   1bff2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bff4:	bf08      	it	eq
   1bff6:	60e2      	streq	r2, [r4, #12]
}
   1bff8:	e7ee      	b.n	1bfd8 <gatt_sub_remove+0x1a>
   1bffa:	bd70      	pop	{r4, r5, r6, pc}

0001bffc <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1bffc:	2a02      	cmp	r2, #2
{
   1bffe:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1c000:	d108      	bne.n	1c014 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1c002:	2300      	movs	r3, #0
   1c004:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c008:	461a      	mov	r2, r3
   1c00a:	7a00      	ldrb	r0, [r0, #8]
   1c00c:	f7f6 fcd4 	bl	129b8 <sc_save>
}
   1c010:	2002      	movs	r0, #2
   1c012:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1c014:	f7f6 ff84 	bl	12f20 <sc_clear>
   1c018:	e7fa      	b.n	1c010 <sc_ccc_cfg_write+0x14>

0001c01a <gatt_write_ccc_rsp>:
{
   1c01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c01e:	4606      	mov	r6, r0
   1c020:	460d      	mov	r5, r1
   1c022:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c024:	f104 0310 	add.w	r3, r4, #16
   1c028:	e8d3 2fef 	ldaex	r2, [r3]
   1c02c:	f022 0204 	bic.w	r2, r2, #4
   1c030:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c034:	2900      	cmp	r1, #0
   1c036:	d1f7      	bne.n	1c028 <gatt_write_ccc_rsp+0xe>
	if (err) {
   1c038:	b1dd      	cbz	r5, 1c072 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1c03a:	f7f6 fba7 	bl	1278c <gatt_sub_find>
		if (!sub) {
   1c03e:	4601      	mov	r1, r0
   1c040:	b300      	cbz	r0, 1c084 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1c042:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c044:	b143      	cbz	r3, 1c058 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1c046:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1c048:	f104 0014 	add.w	r0, r4, #20
   1c04c:	4283      	cmp	r3, r0
   1c04e:	d10b      	bne.n	1c068 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1c050:	4623      	mov	r3, r4
   1c052:	4630      	mov	r0, r6
   1c054:	f7ff ffb3 	bl	1bfbe <gatt_sub_remove>
	if (params->write) {
   1c058:	6863      	ldr	r3, [r4, #4]
   1c05a:	b19b      	cbz	r3, 1c084 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1c05c:	4629      	mov	r1, r5
   1c05e:	4630      	mov	r0, r6
}
   1c060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1c064:	2200      	movs	r2, #0
   1c066:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c068:	2a00      	cmp	r2, #0
   1c06a:	d0f5      	beq.n	1c058 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1c06c:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c06e:	6812      	ldr	r2, [r2, #0]
   1c070:	e7ec      	b.n	1c04c <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1c072:	89a3      	ldrh	r3, [r4, #12]
   1c074:	2b00      	cmp	r3, #0
   1c076:	d1ef      	bne.n	1c058 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1c078:	462b      	mov	r3, r5
   1c07a:	462a      	mov	r2, r5
   1c07c:	4621      	mov	r1, r4
   1c07e:	6827      	ldr	r7, [r4, #0]
   1c080:	47b8      	blx	r7
   1c082:	e7e9      	b.n	1c058 <gatt_write_ccc_rsp+0x3e>
}
   1c084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c088 <read_ppcp>:
{
   1c088:	b513      	push	{r0, r1, r4, lr}
   1c08a:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1c08c:	2218      	movs	r2, #24
   1c08e:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1c092:	2228      	movs	r2, #40	; 0x28
   1c094:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1c098:	2200      	movs	r2, #0
   1c09a:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1c09e:	222a      	movs	r2, #42	; 0x2a
{
   1c0a0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1c0a4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1c0a8:	2908      	cmp	r1, #8
   1c0aa:	d80b      	bhi.n	1c0c4 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1c0ac:	f1c1 0408 	rsb	r4, r1, #8
   1c0b0:	429c      	cmp	r4, r3
   1c0b2:	bfa8      	it	ge
   1c0b4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1c0b6:	4469      	add	r1, sp
   1c0b8:	4622      	mov	r2, r4
   1c0ba:	f7fe ff66 	bl	1af8a <memcpy>
}
   1c0be:	4620      	mov	r0, r4
   1c0c0:	b002      	add	sp, #8
   1c0c2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c0c4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1c0c8:	e7f9      	b.n	1c0be <read_ppcp+0x36>

0001c0ca <read_appearance>:
{
   1c0ca:	b513      	push	{r0, r1, r4, lr}
   1c0cc:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1c0ce:	2200      	movs	r2, #0
{
   1c0d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1c0d4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1c0d8:	2902      	cmp	r1, #2
   1c0da:	d80d      	bhi.n	1c0f8 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1c0dc:	f1c1 0402 	rsb	r4, r1, #2
   1c0e0:	429c      	cmp	r4, r3
   1c0e2:	bfa8      	it	ge
   1c0e4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1c0e6:	f10d 0306 	add.w	r3, sp, #6
   1c0ea:	4622      	mov	r2, r4
   1c0ec:	4419      	add	r1, r3
   1c0ee:	f7fe ff4c 	bl	1af8a <memcpy>
}
   1c0f2:	4620      	mov	r0, r4
   1c0f4:	b002      	add	sp, #8
   1c0f6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c0f8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1c0fc:	e7f9      	b.n	1c0f2 <read_appearance+0x28>

0001c0fe <read_name>:
{
   1c0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c102:	4698      	mov	r8, r3
   1c104:	4615      	mov	r5, r2
   1c106:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1c10a:	f7f3 fcc9 	bl	faa0 <bt_get_name>
   1c10e:	4607      	mov	r7, r0
				 strlen(name));
   1c110:	f7fe fefd 	bl	1af0e <strlen>
	if (offset > value_len) {
   1c114:	b283      	uxth	r3, r0
   1c116:	42b3      	cmp	r3, r6
   1c118:	d30c      	bcc.n	1c134 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1c11a:	1b9c      	subs	r4, r3, r6
   1c11c:	4544      	cmp	r4, r8
   1c11e:	bfa8      	it	ge
   1c120:	4644      	movge	r4, r8
   1c122:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1c124:	4622      	mov	r2, r4
   1c126:	4628      	mov	r0, r5
   1c128:	19b9      	adds	r1, r7, r6
   1c12a:	f7fe ff2e 	bl	1af8a <memcpy>
}
   1c12e:	4620      	mov	r0, r4
   1c130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c134:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1c138:	e7f9      	b.n	1c12e <read_name+0x30>

0001c13a <cf_read>:
{
   1c13a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c13c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1c13e:	2300      	movs	r3, #0
{
   1c140:	4615      	mov	r5, r2
   1c142:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1c146:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1c14a:	f7f6 fae1 	bl	12710 <find_cf_cfg>
	if (cfg) {
   1c14e:	b128      	cbz	r0, 1c15c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1c150:	f100 0108 	add.w	r1, r0, #8
   1c154:	2201      	movs	r2, #1
   1c156:	a801      	add	r0, sp, #4
   1c158:	f7fe ff17 	bl	1af8a <memcpy>
	if (offset > value_len) {
   1c15c:	2e01      	cmp	r6, #1
   1c15e:	d80d      	bhi.n	1c17c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1c160:	f1c6 0401 	rsb	r4, r6, #1
   1c164:	42bc      	cmp	r4, r7
   1c166:	bfa8      	it	ge
   1c168:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c16a:	ab01      	add	r3, sp, #4
   1c16c:	4622      	mov	r2, r4
   1c16e:	4628      	mov	r0, r5
   1c170:	1999      	adds	r1, r3, r6
   1c172:	f7fe ff0a 	bl	1af8a <memcpy>
}
   1c176:	4620      	mov	r0, r4
   1c178:	b003      	add	sp, #12
   1c17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c17c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1c180:	e7f9      	b.n	1c176 <cf_read+0x3c>

0001c182 <bt_gatt_attr_read_service>:
{
   1c182:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1c184:	68c9      	ldr	r1, [r1, #12]
{
   1c186:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1c188:	780b      	ldrb	r3, [r1, #0]
{
   1c18a:	4610      	mov	r0, r2
   1c18c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1c190:	b993      	cbnz	r3, 1c1b8 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1c192:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1c194:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1c196:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1c19a:	d819      	bhi.n	1c1d0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1c19c:	f1c5 0202 	rsb	r2, r5, #2
   1c1a0:	4294      	cmp	r4, r2
   1c1a2:	bfa8      	it	ge
   1c1a4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1c1a6:	4622      	mov	r2, r4
   1c1a8:	f10d 0306 	add.w	r3, sp, #6
   1c1ac:	1959      	adds	r1, r3, r5
   1c1ae:	f7fe feec 	bl	1af8a <memcpy>
}
   1c1b2:	4620      	mov	r0, r4
   1c1b4:	b003      	add	sp, #12
   1c1b6:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1c1b8:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1c1ba:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1c1be:	d807      	bhi.n	1c1d0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1c1c0:	f1c5 0210 	rsb	r2, r5, #16
   1c1c4:	4294      	cmp	r4, r2
   1c1c6:	bfa8      	it	ge
   1c1c8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1c1ca:	4429      	add	r1, r5
   1c1cc:	4622      	mov	r2, r4
   1c1ce:	e7ee      	b.n	1c1ae <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c1d0:	f06f 0406 	mvn.w	r4, #6
   1c1d4:	e7ed      	b.n	1c1b2 <bt_gatt_attr_read_service+0x30>

0001c1d6 <bt_gatt_attr_read_ccc>:
{
   1c1d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1c1d8:	68c9      	ldr	r1, [r1, #12]
{
   1c1da:	4615      	mov	r5, r2
   1c1dc:	461f      	mov	r7, r3
   1c1de:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1c1e2:	f7ff fe6f 	bl	1bec4 <find_ccc_cfg>
	if (cfg) {
   1c1e6:	b100      	cbz	r0, 1c1ea <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1c1e8:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1c1ea:	2e02      	cmp	r6, #2
   1c1ec:	f8ad 0006 	strh.w	r0, [sp, #6]
   1c1f0:	d80e      	bhi.n	1c210 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1c1f2:	f1c6 0402 	rsb	r4, r6, #2
   1c1f6:	42bc      	cmp	r4, r7
   1c1f8:	bfa8      	it	ge
   1c1fa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c1fc:	f10d 0306 	add.w	r3, sp, #6
   1c200:	4622      	mov	r2, r4
   1c202:	4628      	mov	r0, r5
   1c204:	1999      	adds	r1, r3, r6
   1c206:	f7fe fec0 	bl	1af8a <memcpy>
}
   1c20a:	4620      	mov	r0, r4
   1c20c:	b003      	add	sp, #12
   1c20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c210:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1c214:	e7f9      	b.n	1c20a <bt_gatt_attr_read_ccc+0x34>

0001c216 <sc_restore_rsp>:
{
   1c216:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1c218:	f7f6 fa7a 	bl	12710 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c21c:	b140      	cbz	r0, 1c230 <sc_restore_rsp+0x1a>
   1c21e:	7a03      	ldrb	r3, [r0, #8]
   1c220:	07db      	lsls	r3, r3, #31
   1c222:	d505      	bpl.n	1c230 <sc_restore_rsp+0x1a>
}
   1c224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c228:	2101      	movs	r1, #1
   1c22a:	300c      	adds	r0, #12
   1c22c:	f7ff be94 	b.w	1bf58 <atomic_or>
   1c230:	bd08      	pop	{r3, pc}

0001c232 <bt_gatt_attr_read>:
{
   1c232:	b538      	push	{r3, r4, r5, lr}
   1c234:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1c238:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1c23c:	4610      	mov	r0, r2
	if (offset > value_len) {
   1c23e:	42a9      	cmp	r1, r5
   1c240:	d80b      	bhi.n	1c25a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1c242:	1a6d      	subs	r5, r5, r1
   1c244:	429d      	cmp	r5, r3
   1c246:	bfa8      	it	ge
   1c248:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1c24a:	9b05      	ldr	r3, [sp, #20]
   1c24c:	b2ad      	uxth	r5, r5
   1c24e:	462a      	mov	r2, r5
   1c250:	4419      	add	r1, r3
   1c252:	f7fe fe9a 	bl	1af8a <memcpy>
}
   1c256:	4628      	mov	r0, r5
   1c258:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c25a:	f06f 0506 	mvn.w	r5, #6
   1c25e:	e7fa      	b.n	1c256 <bt_gatt_attr_read+0x24>

0001c260 <bt_gatt_attr_value_handle>:
{
   1c260:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c262:	4604      	mov	r4, r0
   1c264:	b910      	cbnz	r0, 1c26c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1c266:	2000      	movs	r0, #0
}
   1c268:	b002      	add	sp, #8
   1c26a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c26c:	2300      	movs	r3, #0
   1c26e:	f88d 3004 	strb.w	r3, [sp, #4]
   1c272:	f642 0303 	movw	r3, #10243	; 0x2803
   1c276:	6800      	ldr	r0, [r0, #0]
   1c278:	a901      	add	r1, sp, #4
   1c27a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c27e:	f7fe fef9 	bl	1b074 <bt_uuid_cmp>
   1c282:	2800      	cmp	r0, #0
   1c284:	d1ef      	bne.n	1c266 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1c286:	68e3      	ldr	r3, [r4, #12]
   1c288:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1c28a:	2800      	cmp	r0, #0
   1c28c:	d1ec      	bne.n	1c268 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1c28e:	4620      	mov	r0, r4
   1c290:	f7f6 ff94 	bl	131bc <bt_gatt_attr_get_handle>
   1c294:	3001      	adds	r0, #1
   1c296:	b280      	uxth	r0, r0
	return handle;
   1c298:	e7e6      	b.n	1c268 <bt_gatt_attr_value_handle+0x8>

0001c29a <bt_gatt_attr_read_chrc>:
{
   1c29a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1c29c:	68cf      	ldr	r7, [r1, #12]
{
   1c29e:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1c2a0:	79bb      	ldrb	r3, [r7, #6]
{
   1c2a2:	b087      	sub	sp, #28
   1c2a4:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1c2a6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1c2aa:	4615      	mov	r5, r2
   1c2ac:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c2b0:	f7ff ffd6 	bl	1c260 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c2b4:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c2b6:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c2ba:	780b      	ldrb	r3, [r1, #0]
   1c2bc:	b99b      	cbnz	r3, 1c2e6 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1c2be:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1c2c0:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1c2c2:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1c2c6:	42b1      	cmp	r1, r6
   1c2c8:	d315      	bcc.n	1c2f6 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1c2ca:	1b89      	subs	r1, r1, r6
   1c2cc:	42a1      	cmp	r1, r4
   1c2ce:	bfa8      	it	ge
   1c2d0:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1c2d2:	ab01      	add	r3, sp, #4
   1c2d4:	b28c      	uxth	r4, r1
   1c2d6:	4622      	mov	r2, r4
   1c2d8:	4628      	mov	r0, r5
   1c2da:	1999      	adds	r1, r3, r6
   1c2dc:	f7fe fe55 	bl	1af8a <memcpy>
}
   1c2e0:	4620      	mov	r0, r4
   1c2e2:	b007      	add	sp, #28
   1c2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1c2e6:	3101      	adds	r1, #1
   1c2e8:	2210      	movs	r2, #16
   1c2ea:	f10d 0007 	add.w	r0, sp, #7
   1c2ee:	f7fe fe4c 	bl	1af8a <memcpy>
		value_len += 16U;
   1c2f2:	2113      	movs	r1, #19
   1c2f4:	e7e7      	b.n	1c2c6 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c2f6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1c2fa:	e7f1      	b.n	1c2e0 <bt_gatt_attr_read_chrc+0x46>

0001c2fc <bt_gatt_foreach_attr>:
{
   1c2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c2fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c302:	2300      	movs	r3, #0
   1c304:	461a      	mov	r2, r3
   1c306:	9300      	str	r3, [sp, #0]
   1c308:	f7f6 ff9c 	bl	13244 <bt_gatt_foreach_attr_type>
}
   1c30c:	b005      	add	sp, #20
   1c30e:	f85d fb04 	ldr.w	pc, [sp], #4

0001c312 <db_hash_process>:
	db_hash_gen(true);
   1c312:	2001      	movs	r0, #1
   1c314:	f7f7 b802 	b.w	1331c <db_hash_gen>

0001c318 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1c318:	07d3      	lsls	r3, r2, #31
{
   1c31a:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c31c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1c31e:	d504      	bpl.n	1c32a <bt_gatt_check_perm+0x12>
   1c320:	f014 0f15 	tst.w	r4, #21
   1c324:	d017      	beq.n	1c356 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c326:	684b      	ldr	r3, [r1, #4]
   1c328:	b1ab      	cbz	r3, 1c356 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1c32a:	0793      	lsls	r3, r2, #30
   1c32c:	d504      	bpl.n	1c338 <bt_gatt_check_perm+0x20>
   1c32e:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1c332:	d012      	beq.n	1c35a <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1c334:	688b      	ldr	r3, [r1, #8]
   1c336:	b183      	cbz	r3, 1c35a <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1c338:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1c33a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1c33e:	d104      	bne.n	1c34a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1c340:	f014 000c 	ands.w	r0, r4, #12
   1c344:	bf18      	it	ne
   1c346:	200f      	movne	r0, #15
}
   1c348:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1c34a:	f7ff f86e 	bl	1b42a <bt_conn_get_security>
   1c34e:	2802      	cmp	r0, #2
   1c350:	d8f6      	bhi.n	1c340 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1c352:	2005      	movs	r0, #5
   1c354:	e7f8      	b.n	1c348 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1c356:	2002      	movs	r0, #2
   1c358:	e7f6      	b.n	1c348 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1c35a:	2003      	movs	r0, #3
   1c35c:	e7f4      	b.n	1c348 <bt_gatt_check_perm+0x30>

0001c35e <gatt_discover_next>:
{
   1c35e:	b570      	push	{r4, r5, r6, lr}
   1c360:	4605      	mov	r5, r0
   1c362:	4614      	mov	r4, r2
	if (!last_handle)
   1c364:	b929      	cbnz	r1, 1c372 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1c366:	4621      	mov	r1, r4
   1c368:	4628      	mov	r0, r5
   1c36a:	f7f7 fb2f 	bl	139cc <bt_gatt_discover>
   1c36e:	b928      	cbnz	r0, 1c37c <gatt_discover_next+0x1e>
}
   1c370:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1c372:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c376:	4291      	cmp	r1, r2
   1c378:	d107      	bne.n	1c38a <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1c37a:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1c37c:	4622      	mov	r2, r4
   1c37e:	4628      	mov	r0, r5
   1c380:	6863      	ldr	r3, [r4, #4]
   1c382:	2100      	movs	r1, #0
}
   1c384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1c388:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1c38a:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1c38c:	1c4b      	adds	r3, r1, #1
   1c38e:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1c390:	429a      	cmp	r2, r3
		params->start_handle++;
   1c392:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1c394:	d2e7      	bcs.n	1c366 <gatt_discover_next+0x8>
   1c396:	e7f1      	b.n	1c37c <gatt_discover_next+0x1e>

0001c398 <gatt_find_type_rsp>:
{
   1c398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c39c:	b088      	sub	sp, #32
   1c39e:	4607      	mov	r7, r0
   1c3a0:	4614      	mov	r4, r2
   1c3a2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1c3a6:	b911      	cbnz	r1, 1c3ae <gatt_find_type_rsp+0x16>
   1c3a8:	f013 0803 	ands.w	r8, r3, #3
   1c3ac:	d008      	beq.n	1c3c0 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1c3ae:	464a      	mov	r2, r9
   1c3b0:	2100      	movs	r1, #0
   1c3b2:	4638      	mov	r0, r7
   1c3b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1c3b8:	b008      	add	sp, #32
   1c3ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1c3be:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1c3c0:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1c3c2:	f642 0a01 	movw	sl, #10241	; 0x2801
   1c3c6:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1c3ca:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1c3ce:	42ac      	cmp	r4, r5
   1c3d0:	d107      	bne.n	1c3e2 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1c3d2:	464a      	mov	r2, r9
   1c3d4:	4641      	mov	r1, r8
   1c3d6:	4638      	mov	r0, r7
}
   1c3d8:	b008      	add	sp, #32
   1c3da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1c3de:	f7ff bfbe 	b.w	1c35e <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1c3e2:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1c3e6:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1c3e8:	2900      	cmp	r1, #0
   1c3ea:	bf0c      	ite	eq
   1c3ec:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1c3f0:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1c3f2:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1c3f6:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1c3fa:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1c3fe:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1c400:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c402:	ab01      	add	r3, sp, #4
   1c404:	f8ad 1002 	strh.w	r1, [sp, #2]
   1c408:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1c40a:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c40e:	4638      	mov	r0, r7
   1c410:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c412:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c416:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1c41a:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c41e:	f8cd d00c 	str.w	sp, [sp, #12]
   1c422:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c426:	a903      	add	r1, sp, #12
   1c428:	4798      	blx	r3
   1c42a:	3404      	adds	r4, #4
   1c42c:	2800      	cmp	r0, #0
   1c42e:	d1ce      	bne.n	1c3ce <gatt_find_type_rsp+0x36>
}
   1c430:	b008      	add	sp, #32
   1c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c436 <bt_gatt_notification>:
{
   1c436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c43a:	4607      	mov	r7, r0
   1c43c:	4688      	mov	r8, r1
   1c43e:	4691      	mov	r9, r2
   1c440:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1c442:	f7f6 f9a3 	bl	1278c <gatt_sub_find>
	if (!sub) {
   1c446:	b1f8      	cbz	r0, 1c488 <bt_gatt_notification+0x52>
	return list->head;
   1c448:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c44a:	b1eb      	cbz	r3, 1c488 <bt_gatt_notification+0x52>
   1c44c:	f1b3 0614 	subs.w	r6, r3, #20
   1c450:	d01a      	beq.n	1c488 <bt_gatt_notification+0x52>
	return node->next;
   1c452:	681c      	ldr	r4, [r3, #0]
   1c454:	b104      	cbz	r4, 1c458 <bt_gatt_notification+0x22>
   1c456:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1c458:	8933      	ldrh	r3, [r6, #8]
   1c45a:	4543      	cmp	r3, r8
   1c45c:	d10a      	bne.n	1c474 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1c45e:	4653      	mov	r3, sl
   1c460:	464a      	mov	r2, r9
   1c462:	4631      	mov	r1, r6
   1c464:	4638      	mov	r0, r7
   1c466:	6835      	ldr	r5, [r6, #0]
   1c468:	47a8      	blx	r5
   1c46a:	b918      	cbnz	r0, 1c474 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1c46c:	4631      	mov	r1, r6
   1c46e:	4638      	mov	r0, r7
   1c470:	f7f7 fee8 	bl	14244 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c474:	b144      	cbz	r4, 1c488 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c476:	f114 0514 	adds.w	r5, r4, #20
   1c47a:	d002      	beq.n	1c482 <bt_gatt_notification+0x4c>
	return node->next;
   1c47c:	6965      	ldr	r5, [r4, #20]
   1c47e:	b105      	cbz	r5, 1c482 <bt_gatt_notification+0x4c>
   1c480:	3d14      	subs	r5, #20
{
   1c482:	4626      	mov	r6, r4
   1c484:	462c      	mov	r4, r5
   1c486:	e7e7      	b.n	1c458 <bt_gatt_notification+0x22>
}
   1c488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c48c <bt_gatt_change_aware>:
{
   1c48c:	b510      	push	{r4, lr}
   1c48e:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1c490:	f7f6 f93e 	bl	12710 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c494:	b910      	cbnz	r0, 1c49c <bt_gatt_change_aware+0x10>
		return true;
   1c496:	2401      	movs	r4, #1
}
   1c498:	4620      	mov	r0, r4
   1c49a:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c49c:	7a03      	ldrb	r3, [r0, #8]
   1c49e:	07db      	lsls	r3, r3, #31
   1c4a0:	d5f9      	bpl.n	1c496 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c4a2:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c4a6:	4618      	mov	r0, r3
   1c4a8:	f7ff fd61 	bl	1bf6e <atomic_get>
   1c4ac:	07c1      	lsls	r1, r0, #31
   1c4ae:	d4f2      	bmi.n	1c496 <bt_gatt_change_aware+0xa>
	if (!req) {
   1c4b0:	2c00      	cmp	r4, #0
   1c4b2:	d0f1      	beq.n	1c498 <bt_gatt_change_aware+0xc>
   1c4b4:	4618      	mov	r0, r3
   1c4b6:	f7ff fd5a 	bl	1bf6e <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1c4ba:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c4bc:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1c4c0:	d50c      	bpl.n	1c4dc <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c4c2:	e8d3 2fef 	ldaex	r2, [r3]
   1c4c6:	f022 0202 	bic.w	r2, r2, #2
   1c4ca:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c4ce:	2900      	cmp	r1, #0
   1c4d0:	d1f7      	bne.n	1c4c2 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c4d2:	2101      	movs	r1, #1
   1c4d4:	4618      	mov	r0, r3
   1c4d6:	f7ff fd3f 	bl	1bf58 <atomic_or>
}
   1c4da:	e7dd      	b.n	1c498 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c4dc:	2102      	movs	r1, #2
   1c4de:	e7f9      	b.n	1c4d4 <bt_gatt_change_aware+0x48>

0001c4e0 <bt_smp_recv>:
{
   1c4e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c4e2:	2100      	movs	r1, #0
   1c4e4:	f04f 32ff 	mov.w	r2, #4294967295
   1c4e8:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1c4ec:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c4ee:	4608      	mov	r0, r1
   1c4f0:	f7ff f877 	bl	1b5e2 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1c4f4:	f100 0608 	add.w	r6, r0, #8
   1c4f8:	4604      	mov	r4, r0
   1c4fa:	2101      	movs	r1, #1
   1c4fc:	4630      	mov	r0, r6
   1c4fe:	f7f8 fba7 	bl	14c50 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1c502:	2505      	movs	r5, #5
   1c504:	2101      	movs	r1, #1
   1c506:	7005      	strb	r5, [r0, #0]
   1c508:	4630      	mov	r0, r6
   1c50a:	f7f8 fba1 	bl	14c50 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1c50e:	7005      	strb	r5, [r0, #0]
   1c510:	2500      	movs	r5, #0
   1c512:	4622      	mov	r2, r4
   1c514:	462b      	mov	r3, r5
   1c516:	2106      	movs	r1, #6
   1c518:	4638      	mov	r0, r7
   1c51a:	9500      	str	r5, [sp, #0]
   1c51c:	f7ff f864 	bl	1b5e8 <bt_l2cap_send_cb>
}
   1c520:	4628      	mov	r0, r5
   1c522:	b003      	add	sp, #12
   1c524:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c526 <bt_smp_sign>:
   1c526:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c52a:	4770      	bx	lr

0001c52c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1c52c:	2000      	movs	r0, #0
   1c52e:	4770      	bx	lr

0001c530 <fixed_data_unref>:
}
   1c530:	4770      	bx	lr

0001c532 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c532:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1c534:	6849      	ldr	r1, [r1, #4]
   1c536:	6809      	ldr	r1, [r1, #0]
   1c538:	f7f8 b946 	b.w	147c8 <net_buf_alloc_len>

0001c53c <net_buf_simple_init_with_data>:
	buf->size  = size;
   1c53c:	b292      	uxth	r2, r2
	buf->__buf = data;
   1c53e:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1c540:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1c542:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1c544:	8082      	strh	r2, [r0, #4]
}
   1c546:	4770      	bx	lr

0001c548 <net_buf_simple_push_u8>:
{
   1c548:	b510      	push	{r4, lr}
   1c54a:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1c54c:	2101      	movs	r1, #1
   1c54e:	f7f8 fb27 	bl	14ba0 <net_buf_simple_push>
	*data = val;
   1c552:	7004      	strb	r4, [r0, #0]
}
   1c554:	bd10      	pop	{r4, pc}

0001c556 <net_buf_simple_pull_u8>:
{
   1c556:	b510      	push	{r4, lr}
	val = buf->data[0];
   1c558:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1c55a:	2101      	movs	r1, #1
	val = buf->data[0];
   1c55c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1c55e:	f7f8 fb3d 	bl	14bdc <net_buf_simple_pull>
}
   1c562:	4620      	mov	r0, r4
   1c564:	bd10      	pop	{r4, pc}

0001c566 <net_buf_simple_pull_le16>:
{
   1c566:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c568:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c56a:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c56c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c56e:	f7f8 fb35 	bl	14bdc <net_buf_simple_pull>
}
   1c572:	4620      	mov	r0, r4
   1c574:	bd10      	pop	{r4, pc}

0001c576 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1c576:	6802      	ldr	r2, [r0, #0]
   1c578:	6880      	ldr	r0, [r0, #8]
}
   1c57a:	1a10      	subs	r0, r2, r0
   1c57c:	4770      	bx	lr

0001c57e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1c57e:	8883      	ldrh	r3, [r0, #4]
   1c580:	88c2      	ldrh	r2, [r0, #6]
   1c582:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1c584:	6803      	ldr	r3, [r0, #0]
   1c586:	6880      	ldr	r0, [r0, #8]
   1c588:	1a18      	subs	r0, r3, r0
}
   1c58a:	1a10      	subs	r0, r2, r0
   1c58c:	4770      	bx	lr

0001c58e <net_buf_simple_add_mem>:
{
   1c58e:	b538      	push	{r3, r4, r5, lr}
   1c590:	460d      	mov	r5, r1
   1c592:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c594:	4611      	mov	r1, r2
   1c596:	f7f8 fb5b 	bl	14c50 <net_buf_simple_add>
   1c59a:	4622      	mov	r2, r4
   1c59c:	4629      	mov	r1, r5
}
   1c59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c5a2:	f7fe bcf2 	b.w	1af8a <memcpy>

0001c5a6 <net_buf_simple_add_u8>:
{
   1c5a6:	b510      	push	{r4, lr}
   1c5a8:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1c5aa:	2101      	movs	r1, #1
   1c5ac:	f7f8 fb50 	bl	14c50 <net_buf_simple_add>
	*u8 = val;
   1c5b0:	7004      	strb	r4, [r0, #0]
}
   1c5b2:	bd10      	pop	{r4, pc}

0001c5b4 <net_buf_simple_add_le16>:
{
   1c5b4:	b510      	push	{r4, lr}
   1c5b6:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1c5b8:	2102      	movs	r1, #2
   1c5ba:	f7f8 fb49 	bl	14c50 <net_buf_simple_add>
	dst[0] = val;
   1c5be:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1c5c0:	0a24      	lsrs	r4, r4, #8
   1c5c2:	7044      	strb	r4, [r0, #1]
}
   1c5c4:	bd10      	pop	{r4, pc}

0001c5c6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5c6:	6843      	ldr	r3, [r0, #4]
}
   1c5c8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5ca:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c5cc:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1c5ce:	600b      	str	r3, [r1, #0]
}
   1c5d0:	4770      	bx	lr

0001c5d2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5d2:	6843      	ldr	r3, [r0, #4]
   1c5d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1c5d6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1c5d8:	4042      	eors	r2, r0
   1c5da:	400a      	ands	r2, r1
   1c5dc:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1c5de:	605a      	str	r2, [r3, #4]
}
   1c5e0:	2000      	movs	r0, #0
   1c5e2:	4770      	bx	lr

0001c5e4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5e4:	6843      	ldr	r3, [r0, #4]
}
   1c5e6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5e8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1c5ea:	6099      	str	r1, [r3, #8]
}
   1c5ec:	4770      	bx	lr

0001c5ee <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5ee:	6843      	ldr	r3, [r0, #4]
}
   1c5f0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5f2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1c5f4:	60d9      	str	r1, [r3, #12]
}
   1c5f6:	4770      	bx	lr

0001c5f8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5f8:	6843      	ldr	r3, [r0, #4]
}
   1c5fa:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c5fc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c5fe:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1c600:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1c602:	6053      	str	r3, [r2, #4]
}
   1c604:	4770      	bx	lr

0001c606 <nrf_gpio_cfg_sense_set>:
{
   1c606:	b513      	push	{r0, r1, r4, lr}
   1c608:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c60a:	a801      	add	r0, sp, #4
{
   1c60c:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c60e:	f7f8 fb83 	bl	14d18 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1c612:	9b01      	ldr	r3, [sp, #4]
   1c614:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1c618:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1c61c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1c620:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1c624:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1c628:	b002      	add	sp, #8
   1c62a:	bd10      	pop	{r4, pc}

0001c62c <cfg_level_pins>:
{
   1c62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1c630:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1c632:	2500      	movs	r5, #0
	return port->data;
   1c634:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1c636:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1c63a:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c63c:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1c640:	4313      	orrs	r3, r2
   1c642:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1c646:	b90c      	cbnz	r4, 1c64c <cfg_level_pins+0x20>
}
   1c648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1c64c:	4226      	tst	r6, r4
   1c64e:	d010      	beq.n	1c672 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c650:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c652:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c656:	40e9      	lsrs	r1, r5
   1c658:	f001 0101 	and.w	r1, r1, #1
   1c65c:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c660:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1c664:	b2c9      	uxtb	r1, r1
   1c666:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1c66a:	f7ff ffcc 	bl	1c606 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c66e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1c672:	3501      	adds	r5, #1
		bit <<= 1;
   1c674:	0076      	lsls	r6, r6, #1
   1c676:	e7e6      	b.n	1c646 <cfg_level_pins+0x1a>

0001c678 <check_level_trigger_pins>:
{
   1c678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1c67c:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1c67e:	2700      	movs	r7, #0
	return port->data;
   1c680:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1c682:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1c686:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c688:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1c68c:	430a      	orrs	r2, r1
   1c68e:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1c692:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1c696:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1c698:	6915      	ldr	r5, [r2, #16]
   1c69a:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1c69c:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1c6a0:	b914      	cbnz	r4, 1c6a8 <check_level_trigger_pins+0x30>
}
   1c6a2:	4628      	mov	r0, r5
   1c6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1c6a8:	4234      	tst	r4, r6
   1c6aa:	d00a      	beq.n	1c6c2 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c6ac:	f898 0008 	ldrb.w	r0, [r8, #8]
   1c6b0:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1c6b4:	2100      	movs	r1, #0
   1c6b6:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1c6ba:	f7ff ffa4 	bl	1c606 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c6be:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1c6c2:	3701      	adds	r7, #1
		bit <<= 1;
   1c6c4:	0076      	lsls	r6, r6, #1
   1c6c6:	e7eb      	b.n	1c6a0 <check_level_trigger_pins+0x28>

0001c6c8 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1c6c8:	6883      	ldr	r3, [r0, #8]
   1c6ca:	689b      	ldr	r3, [r3, #8]
   1c6cc:	4718      	bx	r3

0001c6ce <vipm_nrf_max_id_val_get>:
}
   1c6ce:	2000      	movs	r0, #0
   1c6d0:	4770      	bx	lr

0001c6d2 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1c6d2:	b508      	push	{r3, lr}
   1c6d4:	b139      	cbz	r1, 1c6e6 <vipm_nrf_1_set_enabled+0x14>
   1c6d6:	202a      	movs	r0, #42	; 0x2a
   1c6d8:	f7f0 fbe2 	bl	cea0 <arch_irq_enable>
   1c6dc:	2001      	movs	r0, #1
   1c6de:	f7f9 fe4d 	bl	1637c <nrfx_ipc_receive_event_enable>
   1c6e2:	2000      	movs	r0, #0
   1c6e4:	bd08      	pop	{r3, pc}
   1c6e6:	2001      	movs	r0, #1
   1c6e8:	f7f9 fe66 	bl	163b8 <nrfx_ipc_receive_event_disable>
   1c6ec:	e7f9      	b.n	1c6e2 <vipm_nrf_1_set_enabled+0x10>

0001c6ee <uarte_nrfx_config_get>:
{
   1c6ee:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1c6f0:	68c2      	ldr	r2, [r0, #12]
   1c6f2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1c6f6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c6fa:	2000      	movs	r0, #0
   1c6fc:	4770      	bx	lr

0001c6fe <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1c6fe:	6843      	ldr	r3, [r0, #4]
   1c700:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c702:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c706:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1c70a:	4770      	bx	lr

0001c70c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1c70c:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c70e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1c710:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c712:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c716:	b148      	cbz	r0, 1c72c <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c718:	2000      	movs	r0, #0
	*c = data->rx_data;
   1c71a:	7d52      	ldrb	r2, [r2, #21]
   1c71c:	700a      	strb	r2, [r1, #0]
   1c71e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c722:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c726:	2201      	movs	r2, #1
   1c728:	601a      	str	r2, [r3, #0]
	return 0;
   1c72a:	4770      	bx	lr
		return -1;
   1c72c:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c730:	4770      	bx	lr

0001c732 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1c732:	6843      	ldr	r3, [r0, #4]
{
   1c734:	4602      	mov	r2, r0
	return config->uarte_regs;
   1c736:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c738:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c73c:	b148      	cbz	r0, 1c752 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c73e:	2000      	movs	r0, #0
	return dev->data;
   1c740:	68d2      	ldr	r2, [r2, #12]
   1c742:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c746:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c74a:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1c74c:	7d52      	ldrb	r2, [r2, #21]
   1c74e:	700a      	strb	r2, [r1, #0]
   1c750:	6018      	str	r0, [r3, #0]
}
   1c752:	4770      	bx	lr

0001c754 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1c754:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c756:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1c758:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1c75a:	f04f 0020 	mov.w	r0, #32
   1c75e:	f3ef 8311 	mrs	r3, BASEPRI
   1c762:	f380 8811 	msr	BASEPRI, r0
   1c766:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1c76a:	2000      	movs	r0, #0
   1c76c:	68c9      	ldr	r1, [r1, #12]
   1c76e:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1c770:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c774:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1c778:	f383 8811 	msr	BASEPRI, r3
   1c77c:	f3bf 8f6f 	isb	sy
}
   1c780:	4770      	bx	lr

0001c782 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1c782:	2201      	movs	r2, #1
   1c784:	68c3      	ldr	r3, [r0, #12]
   1c786:	68db      	ldr	r3, [r3, #12]
   1c788:	739a      	strb	r2, [r3, #14]
}
   1c78a:	4770      	bx	lr

0001c78c <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1c78c:	68c3      	ldr	r3, [r0, #12]
   1c78e:	68db      	ldr	r3, [r3, #12]
   1c790:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c792:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1c796:	b962      	cbnz	r2, 1c7b2 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1c798:	6842      	ldr	r2, [r0, #4]
   1c79a:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c79c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1c7a0:	b140      	cbz	r0, 1c7b4 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1c7a2:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1c7a6:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1c7aa:	d003      	beq.n	1c7b4 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c7ac:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1c7ae:	6119      	str	r1, [r3, #16]
   1c7b0:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c7b2:	2000      	movs	r0, #0
}
   1c7b4:	4770      	bx	lr

0001c7b6 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1c7b6:	6843      	ldr	r3, [r0, #4]
   1c7b8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c7ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1c7be:	3800      	subs	r0, #0
   1c7c0:	bf18      	it	ne
   1c7c2:	2001      	movne	r0, #1
   1c7c4:	4770      	bx	lr

0001c7c6 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1c7c6:	2210      	movs	r2, #16
	return config->uarte_regs;
   1c7c8:	6843      	ldr	r3, [r0, #4]
   1c7ca:	681b      	ldr	r3, [r3, #0]
   1c7cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c7d0:	4770      	bx	lr

0001c7d2 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1c7d2:	2210      	movs	r2, #16
	return config->uarte_regs;
   1c7d4:	6843      	ldr	r3, [r0, #4]
   1c7d6:	681b      	ldr	r3, [r3, #0]
   1c7d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c7dc:	4770      	bx	lr

0001c7de <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1c7de:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1c7e2:	6843      	ldr	r3, [r0, #4]
   1c7e4:	681b      	ldr	r3, [r3, #0]
   1c7e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c7ea:	4770      	bx	lr

0001c7ec <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1c7ec:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1c7f0:	6843      	ldr	r3, [r0, #4]
   1c7f2:	681b      	ldr	r3, [r3, #0]
   1c7f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c7f8:	4770      	bx	lr

0001c7fa <uarte_nrfx_irq_update>:
}
   1c7fa:	2001      	movs	r0, #1
   1c7fc:	4770      	bx	lr

0001c7fe <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1c7fe:	68c3      	ldr	r3, [r0, #12]
   1c800:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1c802:	e9c3 1200 	strd	r1, r2, [r3]
}
   1c806:	4770      	bx	lr

0001c808 <uarte_nrfx_irq_is_pending>:
{
   1c808:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1c80a:	6843      	ldr	r3, [r0, #4]
{
   1c80c:	4604      	mov	r4, r0
	return config->uarte_regs;
   1c80e:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1c810:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1c814:	025b      	lsls	r3, r3, #9
   1c816:	d405      	bmi.n	1c824 <uarte_nrfx_irq_is_pending+0x1c>
   1c818:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1c81c:	f010 0010 	ands.w	r0, r0, #16
   1c820:	d106      	bne.n	1c830 <uarte_nrfx_irq_is_pending+0x28>
}
   1c822:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1c824:	f7ff ffb2 	bl	1c78c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1c828:	2800      	cmp	r0, #0
   1c82a:	d0f5      	beq.n	1c818 <uarte_nrfx_irq_is_pending+0x10>
		||
   1c82c:	2001      	movs	r0, #1
   1c82e:	e7f8      	b.n	1c822 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1c830:	4620      	mov	r0, r4
   1c832:	f7ff ffc0 	bl	1c7b6 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1c836:	3800      	subs	r0, #0
   1c838:	bf18      	it	ne
   1c83a:	2001      	movne	r0, #1
   1c83c:	e7f1      	b.n	1c822 <uarte_nrfx_irq_is_pending+0x1a>

0001c83e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1c83e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1c840:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c842:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c846:	b938      	cbnz	r0, 1c858 <is_tx_ready.isra.0+0x1a>
   1c848:	799b      	ldrb	r3, [r3, #6]
   1c84a:	b933      	cbnz	r3, 1c85a <is_tx_ready.isra.0+0x1c>
   1c84c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1c850:	3800      	subs	r0, #0
   1c852:	bf18      	it	ne
   1c854:	2001      	movne	r0, #1
   1c856:	4770      	bx	lr
   1c858:	2001      	movs	r0, #1
}
   1c85a:	4770      	bx	lr

0001c85c <uarte_nrfx_fifo_fill>:
{
   1c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1c85e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c860:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1c862:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1c864:	68f3      	ldr	r3, [r6, #12]
   1c866:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c868:	3310      	adds	r3, #16
   1c86a:	4294      	cmp	r4, r2
   1c86c:	bfa8      	it	ge
   1c86e:	4614      	movge	r4, r2
   1c870:	2201      	movs	r2, #1
   1c872:	e8d3 7fef 	ldaex	r7, [r3]
   1c876:	2f00      	cmp	r7, #0
   1c878:	d104      	bne.n	1c884 <uarte_nrfx_fifo_fill+0x28>
   1c87a:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c87e:	f1bc 0f00 	cmp.w	ip, #0
   1c882:	d1f6      	bne.n	1c872 <uarte_nrfx_fifo_fill+0x16>
   1c884:	bf0c      	ite	eq
   1c886:	4613      	moveq	r3, r2
   1c888:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1c88a:	d01d      	beq.n	1c8c8 <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   1c88c:	461c      	mov	r4, r3
}
   1c88e:	4620      	mov	r0, r4
   1c890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1c892:	68f2      	ldr	r2, [r6, #12]
   1c894:	5ccf      	ldrb	r7, [r1, r3]
   1c896:	6892      	ldr	r2, [r2, #8]
   1c898:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1c89a:	3301      	adds	r3, #1
   1c89c:	42a3      	cmp	r3, r4
   1c89e:	dbf8      	blt.n	1c892 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1c8a0:	f04f 0320 	mov.w	r3, #32
   1c8a4:	f3ef 8111 	mrs	r1, BASEPRI
   1c8a8:	f383 8811 	msr	BASEPRI, r3
   1c8ac:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1c8b0:	6840      	ldr	r0, [r0, #4]
   1c8b2:	f7ff ffc4 	bl	1c83e <is_tx_ready.isra.0>
   1c8b6:	68f3      	ldr	r3, [r6, #12]
   1c8b8:	b940      	cbnz	r0, 1c8cc <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   1c8ba:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1c8bc:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1c8be:	f381 8811 	msr	BASEPRI, r1
   1c8c2:	f3bf 8f6f 	isb	sy
	return len;
   1c8c6:	e7e2      	b.n	1c88e <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1c8c8:	2300      	movs	r3, #0
   1c8ca:	e7e7      	b.n	1c89c <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c8cc:	689b      	ldr	r3, [r3, #8]
   1c8ce:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c8d2:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1c8d4:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c8d8:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1c8dc:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1c8e0:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1c8e4:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c8e8:	2301      	movs	r3, #1
   1c8ea:	60ab      	str	r3, [r5, #8]
}
   1c8ec:	e7e7      	b.n	1c8be <uarte_nrfx_fifo_fill+0x62>

0001c8ee <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1c8ee:	6843      	ldr	r3, [r0, #4]
{
   1c8f0:	b410      	push	{r4}
	return config->uarte_regs;
   1c8f2:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1c8f4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1c8f8:	05d2      	lsls	r2, r2, #23
   1c8fa:	d518      	bpl.n	1c92e <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c8fc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1c900:	b1aa      	cbz	r2, 1c92e <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1c902:	f04f 0120 	mov.w	r1, #32
   1c906:	f3ef 8211 	mrs	r2, BASEPRI
   1c90a:	f381 8811 	msr	BASEPRI, r1
   1c90e:	f3bf 8f6f 	isb	sy
   1c912:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c916:	b131      	cbz	r1, 1c926 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c918:	2100      	movs	r1, #0
   1c91a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c91e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c922:	2101      	movs	r1, #1
   1c924:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c926:	f382 8811 	msr	BASEPRI, r2
   1c92a:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1c92e:	68c2      	ldr	r2, [r0, #12]
   1c930:	68d2      	ldr	r2, [r2, #12]
   1c932:	b15a      	cbz	r2, 1c94c <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c934:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1c938:	b151      	cbz	r1, 1c950 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1c93a:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1c93c:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1c93e:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1c940:	b134      	cbz	r4, 1c950 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1c942:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1c946:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1c94a:	7391      	strb	r1, [r2, #14]
}
   1c94c:	bc10      	pop	{r4}
   1c94e:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c950:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c954:	b121      	cbz	r1, 1c960 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c956:	2100      	movs	r1, #0
   1c958:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1c95c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1c960:	6813      	ldr	r3, [r2, #0]
   1c962:	2b00      	cmp	r3, #0
   1c964:	d0f2      	beq.n	1c94c <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1c966:	6851      	ldr	r1, [r2, #4]
}
   1c968:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1c96a:	4718      	bx	r3

0001c96c <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1c96c:	2101      	movs	r1, #1
   1c96e:	f7f9 ba09 	b.w	15d84 <dk_set_led>

0001c972 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1c972:	2100      	movs	r1, #0
   1c974:	f7f9 ba06 	b.w	15d84 <dk_set_led>

0001c978 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1c978:	f7f9 ba84 	b.w	15e84 <SystemCoreClockUpdate>

0001c97c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1c97c:	4700      	bx	r0

0001c97e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1c97e:	f000 bcaf 	b.w	1d2e0 <z_impl_k_busy_wait>

0001c982 <metal_device_open>:
{
   1c982:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c984:	460c      	mov	r4, r1
   1c986:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1c988:	4606      	mov	r6, r0
   1c98a:	b918      	cbnz	r0, 1c994 <metal_device_open+0x12>
		return -EINVAL;
   1c98c:	f06f 0015 	mvn.w	r0, #21
}
   1c990:	b002      	add	sp, #8
   1c992:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1c994:	f7fe fabb 	bl	1af0e <strlen>
   1c998:	2800      	cmp	r0, #0
   1c99a:	d0f7      	beq.n	1c98c <metal_device_open+0xa>
   1c99c:	2c00      	cmp	r4, #0
   1c99e:	d0f5      	beq.n	1c98c <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1c9a0:	4620      	mov	r0, r4
   1c9a2:	f7fe fab4 	bl	1af0e <strlen>
   1c9a6:	2800      	cmp	r0, #0
   1c9a8:	d0f0      	beq.n	1c98c <metal_device_open+0xa>
   1c9aa:	2d00      	cmp	r5, #0
   1c9ac:	d0ee      	beq.n	1c98c <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1c9ae:	4630      	mov	r0, r6
   1c9b0:	a901      	add	r1, sp, #4
   1c9b2:	f7f9 fd75 	bl	164a0 <metal_bus_find>
	if (error)
   1c9b6:	2800      	cmp	r0, #0
   1c9b8:	d1ea      	bne.n	1c990 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1c9ba:	9801      	ldr	r0, [sp, #4]
   1c9bc:	6883      	ldr	r3, [r0, #8]
   1c9be:	b11b      	cbz	r3, 1c9c8 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1c9c0:	462a      	mov	r2, r5
   1c9c2:	4621      	mov	r1, r4
   1c9c4:	4798      	blx	r3
	if (error)
   1c9c6:	e7e3      	b.n	1c990 <metal_device_open+0xe>
		return -ENODEV;
   1c9c8:	f06f 0012 	mvn.w	r0, #18
   1c9cc:	e7e0      	b.n	1c990 <metal_device_open+0xe>

0001c9ce <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1c9ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c9d0:	6804      	ldr	r4, [r0, #0]
   1c9d2:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1c9d4:	1c66      	adds	r6, r4, #1
   1c9d6:	d00f      	beq.n	1c9f8 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c9d8:	42a9      	cmp	r1, r5
   1c9da:	d232      	bcs.n	1ca42 <metal_io_block_read+0x74>
		: NULL);
   1c9dc:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c9de:	185e      	adds	r6, r3, r1
   1c9e0:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1c9e2:	bf88      	it	hi
   1c9e4:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1c9e6:	6a05      	ldr	r5, [r0, #32]
   1c9e8:	b155      	cbz	r5, 1ca00 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1c9ea:	9300      	str	r3, [sp, #0]
   1c9ec:	2305      	movs	r3, #5
   1c9ee:	47a8      	blx	r5
   1c9f0:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1c9f2:	4618      	mov	r0, r3
   1c9f4:	b002      	add	sp, #8
   1c9f6:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1c9f8:	42a9      	cmp	r1, r5
   1c9fa:	d222      	bcs.n	1ca42 <metal_io_block_read+0x74>
   1c9fc:	2400      	movs	r4, #0
   1c9fe:	e7ee      	b.n	1c9de <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1ca00:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1ca04:	4621      	mov	r1, r4
   1ca06:	4618      	mov	r0, r3
   1ca08:	2800      	cmp	r0, #0
   1ca0a:	d0f2      	beq.n	1c9f2 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1ca0c:	ea42 0401 	orr.w	r4, r2, r1
   1ca10:	07a4      	lsls	r4, r4, #30
   1ca12:	d10a      	bne.n	1ca2a <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1ca14:	2803      	cmp	r0, #3
   1ca16:	dc0e      	bgt.n	1ca36 <metal_io_block_read+0x68>
   1ca18:	3901      	subs	r1, #1
   1ca1a:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1ca1c:	4282      	cmp	r2, r0
   1ca1e:	d0e8      	beq.n	1c9f2 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1ca20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1ca24:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1ca28:	e7f8      	b.n	1ca1c <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1ca2a:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1ca2e:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1ca30:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1ca34:	e7e8      	b.n	1ca08 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1ca36:	f851 4b04 	ldr.w	r4, [r1], #4
   1ca3a:	3804      	subs	r0, #4
   1ca3c:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1ca40:	e7e8      	b.n	1ca14 <metal_io_block_read+0x46>
		return -ERANGE;
   1ca42:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1ca46:	e7d4      	b.n	1c9f2 <metal_io_block_read+0x24>

0001ca48 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1ca48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1ca4a:	6804      	ldr	r4, [r0, #0]
   1ca4c:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1ca4e:	1c66      	adds	r6, r4, #1
   1ca50:	d00e      	beq.n	1ca70 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1ca52:	42a9      	cmp	r1, r5
   1ca54:	d230      	bcs.n	1cab8 <metal_io_block_write+0x70>
		: NULL);
   1ca56:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1ca58:	185e      	adds	r6, r3, r1
   1ca5a:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1ca5c:	bf88      	it	hi
   1ca5e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1ca60:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1ca62:	b94d      	cbnz	r5, 1ca78 <metal_io_block_write+0x30>
   1ca64:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1ca66:	b991      	cbnz	r1, 1ca8e <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1ca68:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1ca6c:	4618      	mov	r0, r3
   1ca6e:	e006      	b.n	1ca7e <metal_io_block_write+0x36>
	if (offset >= io->size)
   1ca70:	42a9      	cmp	r1, r5
   1ca72:	d221      	bcs.n	1cab8 <metal_io_block_write+0x70>
   1ca74:	2400      	movs	r4, #0
   1ca76:	e7ef      	b.n	1ca58 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1ca78:	9300      	str	r3, [sp, #0]
   1ca7a:	2305      	movs	r3, #5
   1ca7c:	47a8      	blx	r5
	}
	return retlen;
}
   1ca7e:	b002      	add	sp, #8
   1ca80:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1ca82:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1ca86:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1ca88:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1ca8c:	e7eb      	b.n	1ca66 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1ca8e:	ea44 0002 	orr.w	r0, r4, r2
   1ca92:	0780      	lsls	r0, r0, #30
   1ca94:	d1f5      	bne.n	1ca82 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1ca96:	2903      	cmp	r1, #3
   1ca98:	dc08      	bgt.n	1caac <metal_io_block_write+0x64>
   1ca9a:	3a01      	subs	r2, #1
   1ca9c:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1ca9e:	428c      	cmp	r4, r1
   1caa0:	d0e2      	beq.n	1ca68 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1caa2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1caa6:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1caaa:	e7f8      	b.n	1ca9e <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1caac:	f852 0b04 	ldr.w	r0, [r2], #4
   1cab0:	3904      	subs	r1, #4
   1cab2:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1cab6:	e7ee      	b.n	1ca96 <metal_io_block_write+0x4e>
		return -ERANGE;
   1cab8:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1cabc:	e7df      	b.n	1ca7e <metal_io_block_write+0x36>

0001cabe <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1cabe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cac0:	6804      	ldr	r4, [r0, #0]
   1cac2:	461d      	mov	r5, r3
		: NULL);
   1cac4:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cac6:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1cac8:	d00e      	beq.n	1cae8 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1caca:	4299      	cmp	r1, r3
   1cacc:	d22d      	bcs.n	1cb2a <metal_io_block_set+0x6c>
		: NULL);
   1cace:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1cad0:	186e      	adds	r6, r5, r1
   1cad2:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1cad4:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1cad6:	bf88      	it	hi
   1cad8:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1cada:	b186      	cbz	r6, 1cafe <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1cadc:	2305      	movs	r3, #5
   1cade:	9500      	str	r5, [sp, #0]
   1cae0:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1cae2:	4628      	mov	r0, r5
   1cae4:	b002      	add	sp, #8
   1cae6:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1cae8:	4299      	cmp	r1, r3
   1caea:	d21e      	bcs.n	1cb2a <metal_io_block_set+0x6c>
   1caec:	2400      	movs	r4, #0
   1caee:	e7ef      	b.n	1cad0 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1caf0:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1caf4:	3b01      	subs	r3, #1
   1caf6:	b923      	cbnz	r3, 1cb02 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1caf8:	f3bf 8f5b 	dmb	ish
   1cafc:	e7f1      	b.n	1cae2 <metal_io_block_set+0x24>
   1cafe:	462b      	mov	r3, r5
   1cb00:	e7f9      	b.n	1caf6 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1cb02:	07a1      	lsls	r1, r4, #30
   1cb04:	d1f4      	bne.n	1caf0 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1cb06:	0611      	lsls	r1, r2, #24
   1cb08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1cb0c:	4311      	orrs	r1, r2
   1cb0e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1cb12:	2b03      	cmp	r3, #3
   1cb14:	dc05      	bgt.n	1cb22 <metal_io_block_set+0x64>
   1cb16:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1cb18:	429c      	cmp	r4, r3
   1cb1a:	d0ed      	beq.n	1caf8 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1cb1c:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1cb20:	e7fa      	b.n	1cb18 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1cb22:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1cb26:	3b04      	subs	r3, #4
   1cb28:	e7f3      	b.n	1cb12 <metal_io_block_set+0x54>
		return -ERANGE;
   1cb2a:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1cb2e:	e7d8      	b.n	1cae2 <metal_io_block_set+0x24>

0001cb30 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1cb30:	2000      	movs	r0, #0
   1cb32:	4770      	bx	lr

0001cb34 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1cb34:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1cb36:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1cb38:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1cb3a:	b984      	cbnz	r4, 1cb5e <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1cb3c:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1cb3e:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1cb40:	291f      	cmp	r1, #31
   1cb42:	bf98      	it	ls
   1cb44:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1cb48:	b165      	cbz	r5, 1cb64 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1cb4a:	6881      	ldr	r1, [r0, #8]
   1cb4c:	428b      	cmp	r3, r1
   1cb4e:	d209      	bcs.n	1cb64 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1cb50:	6900      	ldr	r0, [r0, #16]
   1cb52:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1cb54:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1cb58:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1cb5a:	bc30      	pop	{r4, r5}
   1cb5c:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1cb5e:	4623      	mov	r3, r4
}
   1cb60:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1cb62:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1cb64:	f04f 30ff 	mov.w	r0, #4294967295
   1cb68:	e7f7      	b.n	1cb5a <metal_io_phys+0x26>

0001cb6a <virtqueue_create>:
{
   1cb6a:	b570      	push	{r4, r5, r6, lr}
   1cb6c:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1cb6e:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1cb70:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1cb72:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1cb76:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1cb78:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1cb7a:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1cb7c:	1c96      	adds	r6, r2, #2
   1cb7e:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1cb80:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1cb84:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1cb88:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1cb8a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1cb8e:	1c6e      	adds	r6, r5, #1
   1cb90:	4433      	add	r3, r6
   1cb92:	426d      	negs	r5, r5
   1cb94:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1cb96:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cb98:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1cb9a:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1cb9e:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1cba0:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cba2:	b96b      	cbnz	r3, 1cbc0 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1cba4:	3a01      	subs	r2, #1
   1cba6:	4293      	cmp	r3, r2
   1cba8:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1cbac:	db0a      	blt.n	1cbc4 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1cbae:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1cbb0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1cbb4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1cbb8:	7393      	strb	r3, [r2, #14]
   1cbba:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1cbbe:	73d3      	strb	r3, [r2, #15]
}
   1cbc0:	2000      	movs	r0, #0
   1cbc2:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1cbc4:	3301      	adds	r3, #1
   1cbc6:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1cbc8:	e7ed      	b.n	1cba6 <virtqueue_create+0x3c>

0001cbca <virtqueue_add_buffer>:
{
   1cbca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cbce:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1cbd0:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1cbd4:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cbd6:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1cbd8:	46ba      	mov	sl, r7
{
   1cbda:	b085      	sub	sp, #20
	needed = readable + writable;
   1cbdc:	18d6      	adds	r6, r2, r3
{
   1cbde:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1cbe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1cbe2:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1cbe6:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1cbe8:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1cbea:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1cbec:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cbee:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1cbf2:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cbf4:	42be      	cmp	r6, r7
   1cbf6:	dc19      	bgt.n	1cc2c <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1cbf8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1cbfa:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1cbfc:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1cbfe:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1cc00:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1cc02:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1cc04:	1e51      	subs	r1, r2, #1
   1cc06:	885a      	ldrh	r2, [r3, #2]
}
   1cc08:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1cc0a:	400a      	ands	r2, r1
   1cc0c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1cc10:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1cc14:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1cc18:	69e2      	ldr	r2, [r4, #28]
   1cc1a:	8853      	ldrh	r3, [r2, #2]
   1cc1c:	3301      	adds	r3, #1
   1cc1e:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1cc20:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1cc22:	3301      	adds	r3, #1
   1cc24:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1cc26:	b005      	add	sp, #20
   1cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1cc2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1cc2e:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1cc30:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1cc34:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1cc38:	9302      	str	r3, [sp, #8]
   1cc3a:	6803      	ldr	r3, [r0, #0]
   1cc3c:	9203      	str	r2, [sp, #12]
   1cc3e:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1cc40:	6883      	ldr	r3, [r0, #8]
   1cc42:	f108 0808 	add.w	r8, r8, #8
   1cc46:	4299      	cmp	r1, r3
   1cc48:	bf28      	it	cs
   1cc4a:	f04f 31ff 	movcs.w	r1, #4294967295
   1cc4e:	f7ff ff71 	bl	1cb34 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1cc52:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1cc56:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1cc58:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1cc5c:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1cc60:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1cc62:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1cc64:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1cc68:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1cc6a:	bfb6      	itet	lt
   1cc6c:	2201      	movlt	r2, #1
		dp->flags = 0;
   1cc6e:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1cc72:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1cc74:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1cc76:	bfd8      	it	le
   1cc78:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cc7a:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1cc7e:	bfdc      	itt	le
   1cc80:	f042 0202 	orrle.w	r2, r2, #2
   1cc84:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cc86:	89ed      	ldrh	r5, [r5, #14]
   1cc88:	e7b4      	b.n	1cbf4 <virtqueue_add_buffer+0x2a>

0001cc8a <virtqueue_get_buffer>:
{
   1cc8a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1cc8c:	b350      	cbz	r0, 1cce4 <virtqueue_get_buffer+0x5a>
   1cc8e:	6a05      	ldr	r5, [r0, #32]
   1cc90:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1cc92:	886c      	ldrh	r4, [r5, #2]
   1cc94:	429c      	cmp	r4, r3
   1cc96:	d030      	beq.n	1ccfa <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1cc98:	1c5c      	adds	r4, r3, #1
   1cc9a:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1cc9c:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1cc9e:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1cca2:	3c01      	subs	r4, #1
   1cca4:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1cca6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1ccaa:	686b      	ldr	r3, [r5, #4]
   1ccac:	b29e      	uxth	r6, r3
	if (len)
   1ccae:	b109      	cbz	r1, 1ccb4 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1ccb0:	68ad      	ldr	r5, [r5, #8]
   1ccb2:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1ccb4:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1ccb8:	b29b      	uxth	r3, r3
   1ccba:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1ccbe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1ccc2:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1ccc4:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1ccc6:	442f      	add	r7, r5
	dxp->ndescs--;
   1ccc8:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1ccca:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1cccc:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1ccce:	898d      	ldrh	r5, [r1, #12]
   1ccd0:	076f      	lsls	r7, r5, #29
   1ccd2:	d50e      	bpl.n	1ccf2 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1ccd4:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1ccd6:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1ccd8:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1ccda:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1ccdc:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1ccde:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1cce0:	b102      	cbz	r2, 1cce4 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1cce2:	8014      	strh	r4, [r2, #0]
}
   1cce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1cce6:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1cce8:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1ccea:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1ccec:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1ccf0:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1ccf2:	898d      	ldrh	r5, [r1, #12]
   1ccf4:	07ed      	lsls	r5, r5, #31
   1ccf6:	d4f6      	bmi.n	1cce6 <virtqueue_get_buffer+0x5c>
   1ccf8:	e7ec      	b.n	1ccd4 <virtqueue_get_buffer+0x4a>
		return NULL;
   1ccfa:	2000      	movs	r0, #0
   1ccfc:	e7f2      	b.n	1cce4 <virtqueue_get_buffer+0x5a>

0001ccfe <virtqueue_get_available_buffer>:
{
   1ccfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1cd02:	f3bf 8f5b 	dmb	ish
{
   1cd06:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cd08:	69c2      	ldr	r2, [r0, #28]
{
   1cd0a:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cd0c:	8853      	ldrh	r3, [r2, #2]
   1cd0e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1cd10:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cd12:	428b      	cmp	r3, r1
   1cd14:	d045      	beq.n	1cda2 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1cd16:	1c4b      	adds	r3, r1, #1
   1cd18:	8603      	strh	r3, [r0, #48]	; 0x30
   1cd1a:	8943      	ldrh	r3, [r0, #10]
   1cd1c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1cd20:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1cd22:	400b      	ands	r3, r1
   1cd24:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1cd28:	889a      	ldrh	r2, [r3, #4]
   1cd2a:	b293      	uxth	r3, r2
   1cd2c:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1cd2e:	6982      	ldr	r2, [r0, #24]
   1cd30:	011b      	lsls	r3, r3, #4
   1cd32:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1cd36:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1cd3a:	bb5b      	cbnz	r3, 1cd94 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1cd3c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1cd40:	1c62      	adds	r2, r4, #1
   1cd42:	bf09      	itett	eq
   1cd44:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1cd48:	ea09 0404 	andne.w	r4, r9, r4
   1cd4c:	681c      	ldreq	r4, [r3, #0]
   1cd4e:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1cd52:	4621      	mov	r1, r4
   1cd54:	4640      	mov	r0, r8
   1cd56:	f7ff feed 	bl	1cb34 <metal_io_phys>
   1cd5a:	4581      	cmp	r9, r0
   1cd5c:	d009      	beq.n	1cd72 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1cd5e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1cd62:	3301      	adds	r3, #1
   1cd64:	441c      	add	r4, r3
		} while (offset < io->size);
   1cd66:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cd6a:	429c      	cmp	r4, r3
   1cd6c:	d3f1      	bcc.n	1cd52 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1cd6e:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cd72:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1cd76:	1c43      	adds	r3, r0, #1
   1cd78:	d011      	beq.n	1cd9e <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cd7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cd7e:	42a3      	cmp	r3, r4
   1cd80:	d90d      	bls.n	1cd9e <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1cd82:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1cd84:	8832      	ldrh	r2, [r6, #0]
   1cd86:	69ab      	ldr	r3, [r5, #24]
   1cd88:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1cd8c:	689b      	ldr	r3, [r3, #8]
   1cd8e:	603b      	str	r3, [r7, #0]
}
   1cd90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1cd94:	4649      	mov	r1, r9
   1cd96:	4640      	mov	r0, r8
   1cd98:	4798      	blx	r3
   1cd9a:	4604      	mov	r4, r0
   1cd9c:	e7e9      	b.n	1cd72 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1cd9e:	2000      	movs	r0, #0
   1cda0:	e7f0      	b.n	1cd84 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1cda2:	2000      	movs	r0, #0
   1cda4:	e7f4      	b.n	1cd90 <virtqueue_get_available_buffer+0x92>

0001cda6 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cda6:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cda8:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cdaa:	6912      	ldr	r2, [r2, #16]
   1cdac:	0092      	lsls	r2, r2, #2
   1cdae:	d515      	bpl.n	1cddc <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cdb0:	b94b      	cbnz	r3, 1cdc6 <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1cdb2:	69c2      	ldr	r2, [r0, #28]
   1cdb4:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1cdb6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1cdb8:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1cdba:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1cdbe:	1a1b      	subs	r3, r3, r0
   1cdc0:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1cdc2:	8093      	strh	r3, [r2, #4]
   1cdc4:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1cdc6:	2b01      	cmp	r3, #1
   1cdc8:	d10e      	bne.n	1cde8 <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1cdca:	6a02      	ldr	r2, [r0, #32]
   1cdcc:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1cdce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1cdd0:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1cdd2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1cdd6:	1a1b      	subs	r3, r3, r0
   1cdd8:	3b01      	subs	r3, #1
   1cdda:	e7f2      	b.n	1cdc2 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1cddc:	b92b      	cbnz	r3, 1cdea <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1cdde:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1cde0:	8813      	ldrh	r3, [r2, #0]
   1cde2:	f043 0301 	orr.w	r3, r3, #1
   1cde6:	8013      	strh	r3, [r2, #0]
}
   1cde8:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1cdea:	2b01      	cmp	r3, #1
   1cdec:	d1fc      	bne.n	1cde8 <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1cdee:	6a02      	ldr	r2, [r0, #32]
   1cdf0:	e7f6      	b.n	1cde0 <virtqueue_disable_cb+0x3a>

0001cdf2 <virtqueue_kick>:
{
   1cdf2:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1cdf4:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cdf8:	6803      	ldr	r3, [r0, #0]
{
   1cdfa:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cdfc:	691a      	ldr	r2, [r3, #16]
   1cdfe:	699b      	ldr	r3, [r3, #24]
   1ce00:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1ce04:	d019      	beq.n	1ce3a <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1ce06:	b97b      	cbnz	r3, 1ce28 <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1ce08:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1ce0a:	6a02      	ldr	r2, [r0, #32]
   1ce0c:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1ce0e:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1ce10:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1ce14:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1ce16:	1a9b      	subs	r3, r3, r2
   1ce18:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1ce1a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1ce1c:	b29b      	uxth	r3, r3
   1ce1e:	429a      	cmp	r2, r3
   1ce20:	d813      	bhi.n	1ce4a <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1ce22:	2300      	movs	r3, #0
   1ce24:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1ce26:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1ce28:	2b01      	cmp	r3, #1
   1ce2a:	d1fa      	bne.n	1ce22 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1ce2c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1ce2e:	69c2      	ldr	r2, [r0, #28]
   1ce30:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1ce32:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1ce34:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1ce38:	e7ec      	b.n	1ce14 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1ce3a:	b963      	cbnz	r3, 1ce56 <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1ce3c:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1ce3e:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1ce40:	43db      	mvns	r3, r3
   1ce42:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1ce46:	2b00      	cmp	r3, #0
   1ce48:	d0eb      	beq.n	1ce22 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1ce4a:	6923      	ldr	r3, [r4, #16]
   1ce4c:	2b00      	cmp	r3, #0
   1ce4e:	d0e8      	beq.n	1ce22 <virtqueue_kick+0x30>
		vq->notify(vq);
   1ce50:	4620      	mov	r0, r4
   1ce52:	4798      	blx	r3
   1ce54:	e7e5      	b.n	1ce22 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1ce56:	2b01      	cmp	r3, #1
   1ce58:	d1e3      	bne.n	1ce22 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1ce5a:	69c3      	ldr	r3, [r0, #28]
   1ce5c:	e7ef      	b.n	1ce3e <virtqueue_kick+0x4c>

0001ce5e <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1ce5e:	69c2      	ldr	r2, [r0, #28]
   1ce60:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1ce62:	8853      	ldrh	r3, [r2, #2]
   1ce64:	428b      	cmp	r3, r1
   1ce66:	d00a      	beq.n	1ce7e <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1ce68:	8943      	ldrh	r3, [r0, #10]
   1ce6a:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1ce6c:	400b      	ands	r3, r1
   1ce6e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1ce72:	889a      	ldrh	r2, [r3, #4]
   1ce74:	6983      	ldr	r3, [r0, #24]
   1ce76:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1ce7a:	6898      	ldr	r0, [r3, #8]
	return len;
   1ce7c:	4770      	bx	lr
		return 0;
   1ce7e:	2000      	movs	r0, #0
}
   1ce80:	4770      	bx	lr

0001ce82 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1ce82:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1ce86:	68c3      	ldr	r3, [r0, #12]
   1ce88:	b103      	cbz	r3, 1ce8c <virtqueue_notification+0xa>
		vq->callback(vq);
   1ce8a:	4718      	bx	r3
}
   1ce8c:	4770      	bx	lr

0001ce8e <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1ce8e:	f04f 32ff 	mov.w	r2, #4294967295
   1ce92:	f04f 33ff 	mov.w	r3, #4294967295
   1ce96:	f7fb bc9f 	b.w	187d8 <z_impl_k_sem_take>

0001ce9a <rpmsg_unregister_endpoint>:
{
   1ce9a:	b570      	push	{r4, r5, r6, lr}
   1ce9c:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1ce9e:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1cea0:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1cea4:	4630      	mov	r0, r6
   1cea6:	f7ff fff2 	bl	1ce8e <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1ceaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ceac:	1c5a      	adds	r2, r3, #1
   1ceae:	d010      	beq.n	1ced2 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1ceb0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1ceb4:	2b7f      	cmp	r3, #127	; 0x7f
   1ceb6:	d80c      	bhi.n	1ced2 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1ceb8:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1ceba:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1cebc:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1cebe:	f003 031f 	and.w	r3, r3, #31
   1cec2:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1cec6:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1ceca:	ea22 0203 	bic.w	r2, r2, r3
   1cece:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1ced2:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1ced6:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1ceda:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1cedc:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1cede:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1cee2:	2300      	movs	r3, #0
   1cee4:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1cee6:	4630      	mov	r0, r6
}
   1cee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ceec:	f7fb bc38 	b.w	18760 <z_impl_k_sem_give>

0001cef0 <rpmsg_send_ns_message>:
{
   1cef0:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1cef2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1cef4:	b08c      	sub	sp, #48	; 0x30
   1cef6:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1cef8:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1cefa:	2220      	movs	r2, #32
   1cefc:	4601      	mov	r1, r0
   1cefe:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1cf00:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1cf02:	f7fd fff2 	bl	1aeea <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1cf06:	2328      	movs	r3, #40	; 0x28
   1cf08:	2201      	movs	r2, #1
   1cf0a:	4620      	mov	r0, r4
   1cf0c:	e9cd 3200 	strd	r3, r2, [sp]
   1cf10:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1cf12:	2235      	movs	r2, #53	; 0x35
   1cf14:	ab02      	add	r3, sp, #8
   1cf16:	f7f9 fbef 	bl	166f8 <rpmsg_send_offchannel_raw>
}
   1cf1a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1cf1e:	b00c      	add	sp, #48	; 0x30
   1cf20:	bd10      	pop	{r4, pc}

0001cf22 <rpmsg_get_endpoint>:
{
   1cf22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cf26:	4680      	mov	r8, r0
   1cf28:	4689      	mov	r9, r1
   1cf2a:	4615      	mov	r5, r2
   1cf2c:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1cf2e:	6807      	ldr	r7, [r0, #0]
   1cf30:	45b8      	cmp	r8, r7
   1cf32:	d101      	bne.n	1cf38 <rpmsg_get_endpoint+0x16>
	return NULL;
   1cf34:	2400      	movs	r4, #0
   1cf36:	e021      	b.n	1cf7c <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1cf38:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1cf3a:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1cf3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cf40:	d006      	beq.n	1cf50 <rpmsg_get_endpoint+0x2e>
   1cf42:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1cf44:	d01a      	beq.n	1cf7c <rpmsg_get_endpoint+0x5a>
		if (name)
   1cf46:	f1b9 0f00 	cmp.w	r9, #0
   1cf4a:	d106      	bne.n	1cf5a <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1cf4c:	683f      	ldr	r7, [r7, #0]
   1cf4e:	e7ef      	b.n	1cf30 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1cf50:	3301      	adds	r3, #1
   1cf52:	d1f8      	bne.n	1cf46 <rpmsg_get_endpoint+0x24>
   1cf54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cf56:	42b3      	cmp	r3, r6
   1cf58:	e7f4      	b.n	1cf44 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1cf5a:	2220      	movs	r2, #32
   1cf5c:	4649      	mov	r1, r9
   1cf5e:	4620      	mov	r0, r4
   1cf60:	f7fd fff1 	bl	1af46 <strncmp>
		if (!name || !name_match)
   1cf64:	2800      	cmp	r0, #0
   1cf66:	d1f1      	bne.n	1cf4c <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1cf68:	1c72      	adds	r2, r6, #1
   1cf6a:	d002      	beq.n	1cf72 <rpmsg_get_endpoint+0x50>
   1cf6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cf6e:	42b3      	cmp	r3, r6
   1cf70:	d004      	beq.n	1cf7c <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1cf72:	1c6b      	adds	r3, r5, #1
   1cf74:	d1ea      	bne.n	1cf4c <rpmsg_get_endpoint+0x2a>
   1cf76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cf78:	3301      	adds	r3, #1
   1cf7a:	d1e7      	bne.n	1cf4c <rpmsg_get_endpoint+0x2a>
}
   1cf7c:	4620      	mov	r0, r4
   1cf7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cf82 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1cf82:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1cf84:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1cf88:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1cf8c:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1cf8e:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1cf90:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1cf92:	6013      	str	r3, [r2, #0]
}
   1cf94:	4770      	bx	lr

0001cf96 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1cf96:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1cf98:	4604      	mov	r4, r0
   1cf9a:	b190      	cbz	r0, 1cfc2 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1cf9c:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1cf9e:	b183      	cbz	r3, 1cfc2 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1cfa0:	7802      	ldrb	r2, [r0, #0]
   1cfa2:	b14a      	cbz	r2, 1cfb8 <rpmsg_destroy_ept+0x22>
   1cfa4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1cfa8:	b133      	cbz	r3, 1cfb8 <rpmsg_destroy_ept+0x22>
   1cfaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1cfac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1cfb0:	d302      	bcc.n	1cfb8 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1cfb2:	2101      	movs	r1, #1
   1cfb4:	f7ff ff9c 	bl	1cef0 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1cfb8:	4620      	mov	r0, r4
}
   1cfba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1cfbe:	f7ff bf6c 	b.w	1ce9a <rpmsg_unregister_endpoint>
}
   1cfc2:	bd10      	pop	{r4, pc}

0001cfc4 <rpmsg_virtio_tx_callback>:
}
   1cfc4:	4770      	bx	lr

0001cfc6 <k_sem_give>:
   1cfc6:	f7fb bbcb 	b.w	18760 <z_impl_k_sem_give>

0001cfca <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1cfca:	f04f 32ff 	mov.w	r2, #4294967295
   1cfce:	f04f 33ff 	mov.w	r3, #4294967295
   1cfd2:	f7fb bc01 	b.w	187d8 <z_impl_k_sem_take>

0001cfd6 <rpmsg_virtio_ns_callback>:
{
   1cfd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1cfda:	2a28      	cmp	r2, #40	; 0x28
{
   1cfdc:	4680      	mov	r8, r0
   1cfde:	460e      	mov	r6, r1
   1cfe0:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1cfe2:	d12b      	bne.n	1d03c <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1cfe4:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1cfe6:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1cfe8:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1cfec:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1cfee:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1cff0:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1cff2:	1a71      	subs	r1, r6, r1
   1cff4:	42a1      	cmp	r1, r4
   1cff6:	bf28      	it	cs
   1cff8:	f04f 31ff 	movcs.w	r1, #4294967295
   1cffc:	f7ff fce7 	bl	1c9ce <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1d000:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1d004:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1d008:	4638      	mov	r0, r7
   1d00a:	f7ff ffde 	bl	1cfca <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1d00e:	464b      	mov	r3, r9
   1d010:	f04f 32ff 	mov.w	r2, #4294967295
   1d014:	4669      	mov	r1, sp
   1d016:	4628      	mov	r0, r5
   1d018:	f7ff ff83 	bl	1cf22 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1d01c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1d01e:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1d020:	07db      	lsls	r3, r3, #31
   1d022:	d50f      	bpl.n	1d044 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1d024:	b110      	cbz	r0, 1d02c <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1d026:	f04f 33ff 	mov.w	r3, #4294967295
   1d02a:	6283      	str	r3, [r0, #40]	; 0x28
   1d02c:	4638      	mov	r0, r7
   1d02e:	f7ff ffca 	bl	1cfc6 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1d032:	b11c      	cbz	r4, 1d03c <rpmsg_virtio_ns_callback+0x66>
   1d034:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d036:	b10b      	cbz	r3, 1d03c <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1d038:	4640      	mov	r0, r8
   1d03a:	4798      	blx	r3
}
   1d03c:	2000      	movs	r0, #0
   1d03e:	b009      	add	sp, #36	; 0x24
   1d040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1d044:	b950      	cbnz	r0, 1d05c <rpmsg_virtio_ns_callback+0x86>
   1d046:	4638      	mov	r0, r7
   1d048:	f7ff ffbd 	bl	1cfc6 <k_sem_give>
			if (rdev->ns_bind_cb)
   1d04c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1d04e:	2b00      	cmp	r3, #0
   1d050:	d0f4      	beq.n	1d03c <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1d052:	464a      	mov	r2, r9
   1d054:	4669      	mov	r1, sp
   1d056:	4628      	mov	r0, r5
   1d058:	4798      	blx	r3
   1d05a:	e7ef      	b.n	1d03c <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1d05c:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1d060:	4638      	mov	r0, r7
   1d062:	f7ff ffb0 	bl	1cfc6 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1d066:	e7e9      	b.n	1d03c <rpmsg_virtio_ns_callback+0x66>

0001d068 <rpmsg_virtio_get_rx_buffer>:
{
   1d068:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1d06a:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1d06c:	4613      	mov	r3, r2
   1d06e:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1d070:	b925      	cbnz	r5, 1d07c <rpmsg_virtio_get_rx_buffer+0x14>
}
   1d072:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1d074:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1d078:	f7ff be07 	b.w	1cc8a <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1d07c:	2d01      	cmp	r5, #1
   1d07e:	d106      	bne.n	1d08e <rpmsg_virtio_get_rx_buffer+0x26>
}
   1d080:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1d082:	460a      	mov	r2, r1
   1d084:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1d088:	4619      	mov	r1, r3
   1d08a:	f7ff be38 	b.w	1ccfe <virtqueue_get_available_buffer>
}
   1d08e:	2000      	movs	r0, #0
   1d090:	bc30      	pop	{r4, r5}
   1d092:	4770      	bx	lr

0001d094 <rpmsg_virtio_rx_callback>:
{
   1d094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1d098:	6803      	ldr	r3, [r0, #0]
{
   1d09a:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1d09c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1d09e:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1d0a2:	4638      	mov	r0, r7
   1d0a4:	f7ff ff91 	bl	1cfca <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1d0a8:	4630      	mov	r0, r6
   1d0aa:	f10d 020a 	add.w	r2, sp, #10
   1d0ae:	a903      	add	r1, sp, #12
   1d0b0:	f7ff ffda 	bl	1d068 <rpmsg_virtio_get_rx_buffer>
   1d0b4:	4604      	mov	r4, r0
   1d0b6:	4638      	mov	r0, r7
   1d0b8:	f7ff ff85 	bl	1cfc6 <k_sem_give>
	while (rp_hdr) {
   1d0bc:	b914      	cbnz	r4, 1d0c4 <rpmsg_virtio_rx_callback+0x30>
}
   1d0be:	b006      	add	sp, #24
   1d0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d0c4:	4638      	mov	r0, r7
   1d0c6:	f7ff ff80 	bl	1cfca <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1d0ca:	f04f 33ff 	mov.w	r3, #4294967295
   1d0ce:	2100      	movs	r1, #0
   1d0d0:	4630      	mov	r0, r6
   1d0d2:	6862      	ldr	r2, [r4, #4]
   1d0d4:	f7ff ff25 	bl	1cf22 <rpmsg_get_endpoint>
   1d0d8:	4605      	mov	r5, r0
   1d0da:	4638      	mov	r0, r7
   1d0dc:	f7ff ff73 	bl	1cfc6 <k_sem_give>
		if (ept) {
   1d0e0:	b185      	cbz	r5, 1d104 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1d0e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1d0e4:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1d0e6:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1d0e8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1d0ea:	bf08      	it	eq
   1d0ec:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1d0ee:	89a2      	ldrh	r2, [r4, #12]
   1d0f0:	9100      	str	r1, [sp, #0]
   1d0f2:	4628      	mov	r0, r5
   1d0f4:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1d0f8:	f104 0110 	add.w	r1, r4, #16
   1d0fc:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1d0fe:	2800      	cmp	r0, #0
   1d100:	da00      	bge.n	1d104 <rpmsg_virtio_rx_callback+0x70>
   1d102:	e7fe      	b.n	1d102 <rpmsg_virtio_rx_callback+0x6e>
   1d104:	4638      	mov	r0, r7
   1d106:	f7ff ff60 	bl	1cfca <__metal_mutex_acquire>
   1d10a:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1d10c:	9b03      	ldr	r3, [sp, #12]
   1d10e:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1d110:	b9b2      	cbnz	r2, 1d140 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1d112:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1d114:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1d118:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1d11c:	2301      	movs	r3, #1
   1d11e:	a904      	add	r1, sp, #16
   1d120:	f7ff fd53 	bl	1cbca <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1d124:	4630      	mov	r0, r6
   1d126:	f10d 020a 	add.w	r2, sp, #10
   1d12a:	a903      	add	r1, sp, #12
   1d12c:	f7ff ff9c 	bl	1d068 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1d130:	4604      	mov	r4, r0
   1d132:	2800      	cmp	r0, #0
   1d134:	d1bf      	bne.n	1d0b6 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1d136:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1d13a:	f7ff fe5a 	bl	1cdf2 <virtqueue_kick>
   1d13e:	e7ba      	b.n	1d0b6 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1d140:	2a01      	cmp	r2, #1
   1d142:	d1ef      	bne.n	1d124 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1d144:	461a      	mov	r2, r3
   1d146:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1d14a:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1d14e:	f7f9 fab7 	bl	166c0 <virtqueue_add_consumed_buffer>
   1d152:	e7e7      	b.n	1d124 <rpmsg_virtio_rx_callback+0x90>

0001d154 <_rpmsg_virtio_get_buffer_size>:
{
   1d154:	b508      	push	{r3, lr}
   1d156:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1d158:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1d15a:	b14b      	cbz	r3, 1d170 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1d15c:	2b01      	cmp	r3, #1
   1d15e:	d10a      	bne.n	1d176 <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1d160:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1d164:	f7ff fe7b 	bl	1ce5e <virtqueue_get_desc_size>
   1d168:	3810      	subs	r0, #16
   1d16a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1d16e:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1d170:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1d174:	e7fb      	b.n	1d16e <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1d176:	2000      	movs	r0, #0
	return length;
   1d178:	e7f9      	b.n	1d16e <_rpmsg_virtio_get_buffer_size+0x1a>

0001d17a <rpmsg_virtio_shm_pool_get_buffer>:
{
   1d17a:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1d17c:	6842      	ldr	r2, [r0, #4]
{
   1d17e:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1d180:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1d182:	bf29      	itett	cs
   1d184:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1d186:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1d188:	1a84      	subcs	r4, r0, r2
   1d18a:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1d18c:	bf22      	ittt	cs
   1d18e:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1d190:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1d192:	605a      	strcs	r2, [r3, #4]
}
   1d194:	bd10      	pop	{r4, pc}

0001d196 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1d196:	b110      	cbz	r0, 1d19e <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1d198:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1d19c:	6001      	str	r1, [r0, #0]
}
   1d19e:	4770      	bx	lr

0001d1a0 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1d1a0:	f7fd b866 	b.w	1a270 <z_clock_idle_exit>

0001d1a4 <k_heap_init>:
{
   1d1a4:	b410      	push	{r4}
   1d1a6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1d1aa:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1d1ae:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1d1b0:	f7ed ba76 	b.w	a6a0 <sys_heap_init>

0001d1b4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1d1b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d1b8:	428b      	cmp	r3, r1
   1d1ba:	d001      	beq.n	1d1c0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1d1bc:	f7fb b89e 	b.w	182fc <z_set_prio>
}
   1d1c0:	2000      	movs	r0, #0
   1d1c2:	4770      	bx	lr

0001d1c4 <z_impl_k_mutex_init>:
{
   1d1c4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1d1c6:	2000      	movs	r0, #0
   1d1c8:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1d1cc:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1d1d0:	4770      	bx	lr

0001d1d2 <z_queue_node_peek>:
{
   1d1d2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1d1d4:	4604      	mov	r4, r0
   1d1d6:	b130      	cbz	r0, 1d1e6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d1d8:	6802      	ldr	r2, [r0, #0]
   1d1da:	0793      	lsls	r3, r2, #30
   1d1dc:	d003      	beq.n	1d1e6 <z_queue_node_peek+0x14>
		ret = anode->data;
   1d1de:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1d1e0:	b109      	cbz	r1, 1d1e6 <z_queue_node_peek+0x14>
			k_free(anode);
   1d1e2:	f000 f982 	bl	1d4ea <k_free>
}
   1d1e6:	4620      	mov	r0, r4
   1d1e8:	bd10      	pop	{r4, pc}

0001d1ea <z_impl_k_queue_init>:
	list->head = NULL;
   1d1ea:	2300      	movs	r3, #0
	list->tail = NULL;
   1d1ec:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1d1f0:	6083      	str	r3, [r0, #8]
   1d1f2:	f100 030c 	add.w	r3, r0, #12
   1d1f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1d1fa:	f100 0314 	add.w	r3, r0, #20
   1d1fe:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1d202:	4770      	bx	lr

0001d204 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1d204:	2301      	movs	r3, #1
{
   1d206:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1d208:	9300      	str	r3, [sp, #0]
   1d20a:	2300      	movs	r3, #0
{
   1d20c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1d20e:	4619      	mov	r1, r3
   1d210:	f7fa f95c 	bl	174cc <queue_insert>
}
   1d214:	b003      	add	sp, #12
   1d216:	f85d fb04 	ldr.w	pc, [sp], #4

0001d21a <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1d21a:	2300      	movs	r3, #0
{
   1d21c:	b507      	push	{r0, r1, r2, lr}
   1d21e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1d220:	9300      	str	r3, [sp, #0]
   1d222:	4619      	mov	r1, r3
   1d224:	f7fa f952 	bl	174cc <queue_insert>
}
   1d228:	b003      	add	sp, #12
   1d22a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d22e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1d22e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1d232:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1d236:	4298      	cmp	r0, r3
   1d238:	bfac      	ite	ge
   1d23a:	2000      	movge	r0, #0
   1d23c:	2001      	movlt	r0, #1
   1d23e:	4770      	bx	lr

0001d240 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d240:	4603      	mov	r3, r0
   1d242:	b920      	cbnz	r0, 1d24e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d244:	f3ef 8205 	mrs	r2, IPSR
   1d248:	b90a      	cbnz	r2, 1d24e <z_reschedule_irqlock+0xe>
   1d24a:	f7ef bdcf 	b.w	cdec <arch_swap>
   1d24e:	f383 8811 	msr	BASEPRI, r3
   1d252:	f3bf 8f6f 	isb	sy
}
   1d256:	4770      	bx	lr

0001d258 <z_reschedule_unlocked>:
	__asm__ volatile(
   1d258:	f04f 0320 	mov.w	r3, #32
   1d25c:	f3ef 8011 	mrs	r0, BASEPRI
   1d260:	f383 8811 	msr	BASEPRI, r3
   1d264:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d268:	f7ff bfea 	b.w	1d240 <z_reschedule_irqlock>

0001d26c <unpend_thread_no_timeout>:
{
   1d26c:	b510      	push	{r4, lr}
   1d26e:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d270:	f7fa fa66 	bl	17740 <pended_on>
   1d274:	4621      	mov	r1, r4
   1d276:	f7fa fb6b 	bl	17950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d27a:	7b63      	ldrb	r3, [r4, #13]
   1d27c:	f023 0302 	bic.w	r3, r3, #2
   1d280:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1d282:	2300      	movs	r3, #0
   1d284:	60a3      	str	r3, [r4, #8]
}
   1d286:	bd10      	pop	{r4, pc}

0001d288 <z_priq_dumb_best>:
{
   1d288:	4603      	mov	r3, r0
	return list->head == list;
   1d28a:	6800      	ldr	r0, [r0, #0]
}
   1d28c:	4283      	cmp	r3, r0
   1d28e:	bf08      	it	eq
   1d290:	2000      	moveq	r0, #0
   1d292:	4770      	bx	lr

0001d294 <z_unpend_all>:
{
   1d294:	b538      	push	{r3, r4, r5, lr}
   1d296:	4605      	mov	r5, r0
	int need_sched = 0;
   1d298:	2000      	movs	r0, #0
   1d29a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d29c:	42a5      	cmp	r5, r4
   1d29e:	d000      	beq.n	1d2a2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d2a0:	b904      	cbnz	r4, 1d2a4 <z_unpend_all+0x10>
}
   1d2a2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1d2a4:	4620      	mov	r0, r4
   1d2a6:	f7fa fb7f 	bl	179a8 <z_unpend_thread>
		z_ready_thread(thread);
   1d2aa:	4620      	mov	r0, r4
   1d2ac:	f7fa fc96 	bl	17bdc <z_ready_thread>
		need_sched = 1;
   1d2b0:	2001      	movs	r0, #1
   1d2b2:	e7f2      	b.n	1d29a <z_unpend_all+0x6>

0001d2b4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1d2b4:	b15a      	cbz	r2, 1d2ce <z_impl_k_sem_init+0x1a>
   1d2b6:	428a      	cmp	r2, r1
   1d2b8:	d309      	bcc.n	1d2ce <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1d2ba:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d2be:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1d2c2:	e9c0 0000 	strd	r0, r0, [r0]
   1d2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1d2ca:	2000      	movs	r0, #0
   1d2cc:	4770      	bx	lr
		return -EINVAL;
   1d2ce:	f06f 0015 	mvn.w	r0, #21
}
   1d2d2:	4770      	bx	lr

0001d2d4 <k_is_in_isr>:
   1d2d4:	f3ef 8005 	mrs	r0, IPSR
}
   1d2d8:	3800      	subs	r0, #0
   1d2da:	bf18      	it	ne
   1d2dc:	2001      	movne	r0, #1
   1d2de:	4770      	bx	lr

0001d2e0 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1d2e0:	b108      	cbz	r0, 1d2e6 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1d2e2:	f7ed be27 	b.w	af34 <arch_busy_wait>
}
   1d2e6:	4770      	bx	lr

0001d2e8 <z_impl_k_thread_name_set>:
}
   1d2e8:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1d2ec:	4770      	bx	lr

0001d2ee <k_thread_name_get>:
}
   1d2ee:	2000      	movs	r0, #0
   1d2f0:	4770      	bx	lr

0001d2f2 <k_work_submit_to_queue>:
{
   1d2f2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d2f4:	f101 0308 	add.w	r3, r1, #8
   1d2f8:	e8d3 2fef 	ldaex	r2, [r3]
   1d2fc:	f042 0c01 	orr.w	ip, r2, #1
   1d300:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d304:	f1be 0f00 	cmp.w	lr, #0
   1d308:	d1f6      	bne.n	1d2f8 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d30a:	07d3      	lsls	r3, r2, #31
   1d30c:	d403      	bmi.n	1d316 <k_work_submit_to_queue+0x24>
}
   1d30e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d312:	f7ff bf77 	b.w	1d204 <k_queue_append>
}
   1d316:	f85d fb04 	ldr.w	pc, [sp], #4

0001d31a <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1d31a:	f1a0 0110 	sub.w	r1, r0, #16
   1d31e:	6980      	ldr	r0, [r0, #24]
   1d320:	f7ff bfe7 	b.w	1d2f2 <k_work_submit_to_queue>

0001d324 <work_cancel>:
{
   1d324:	b570      	push	{r4, r5, r6, lr}
   1d326:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1d328:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d32c:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1d330:	07db      	lsls	r3, r3, #31
   1d332:	d52f      	bpl.n	1d394 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d334:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1d336:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1d338:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d33a:	b913      	cbnz	r3, 1d342 <work_cancel+0x1e>
			return -EINVAL;
   1d33c:	f06f 0015 	mvn.w	r0, #21
}
   1d340:	bd70      	pop	{r4, r5, r6, pc}
   1d342:	429c      	cmp	r4, r3
   1d344:	d121      	bne.n	1d38a <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d346:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1d348:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d34a:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1d34e:	b991      	cbnz	r1, 1d376 <work_cancel+0x52>
   1d350:	42b4      	cmp	r4, r6
	list->head = node;
   1d352:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1d354:	d100      	bne.n	1d358 <work_cancel+0x34>
	list->tail = node;
   1d356:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d358:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d35a:	f003 0303 	and.w	r3, r3, #3
   1d35e:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1d360:	2000      	movs	r0, #0
   1d362:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d364:	e8d5 3fef 	ldaex	r3, [r5]
   1d368:	f023 0301 	bic.w	r3, r3, #1
   1d36c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1d370:	2a00      	cmp	r2, #0
   1d372:	d0e5      	beq.n	1d340 <work_cancel+0x1c>
   1d374:	e7f6      	b.n	1d364 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d376:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1d378:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d37a:	f003 0303 	and.w	r3, r3, #3
   1d37e:	ea43 0300 	orr.w	r3, r3, r0
   1d382:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1d384:	bf08      	it	eq
   1d386:	6051      	streq	r1, [r2, #4]
}
   1d388:	e7e6      	b.n	1d358 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d38a:	6818      	ldr	r0, [r3, #0]
   1d38c:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d38e:	f020 0303 	bic.w	r3, r0, #3
   1d392:	e7d2      	b.n	1d33a <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1d394:	3010      	adds	r0, #16
   1d396:	f7fb fe13 	bl	18fc0 <z_abort_timeout>
		if (err) {
   1d39a:	2800      	cmp	r0, #0
   1d39c:	d0e0      	beq.n	1d360 <work_cancel+0x3c>
			return -EALREADY;
   1d39e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d3a2:	e7cd      	b.n	1d340 <work_cancel+0x1c>

0001d3a4 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1d3a4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1d3a6:	f7fb ff59 	bl	1925c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1d3aa:	bd08      	pop	{r3, pc}

0001d3ac <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1d3ac:	f7fb bf56 	b.w	1925c <z_tick_get>

0001d3b0 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d3b0:	f1b1 3fff 	cmp.w	r1, #4294967295
   1d3b4:	bf08      	it	eq
   1d3b6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1d3ba:	b538      	push	{r3, r4, r5, lr}
   1d3bc:	4605      	mov	r5, r0
   1d3be:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d3c0:	d01d      	beq.n	1d3fe <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d3c2:	ea51 0300 	orrs.w	r3, r1, r0
   1d3c6:	d103      	bne.n	1d3d0 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1d3c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1d3cc:	f7fb bf46 	b.w	1925c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1d3d0:	f06f 0301 	mvn.w	r3, #1
   1d3d4:	1a18      	subs	r0, r3, r0
   1d3d6:	f04f 33ff 	mov.w	r3, #4294967295
   1d3da:	eb63 0101 	sbc.w	r1, r3, r1
   1d3de:	2900      	cmp	r1, #0
   1d3e0:	da0c      	bge.n	1d3fc <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1d3e2:	f7fb ff3b 	bl	1925c <z_tick_get>
   1d3e6:	2d01      	cmp	r5, #1
   1d3e8:	4622      	mov	r2, r4
   1d3ea:	f174 0400 	sbcs.w	r4, r4, #0
   1d3ee:	462b      	mov	r3, r5
   1d3f0:	bfbc      	itt	lt
   1d3f2:	2301      	movlt	r3, #1
   1d3f4:	2200      	movlt	r2, #0
   1d3f6:	1818      	adds	r0, r3, r0
   1d3f8:	eb41 0102 	adc.w	r1, r1, r2
}
   1d3fc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1d3fe:	f04f 30ff 	mov.w	r0, #4294967295
   1d402:	4601      	mov	r1, r0
   1d404:	e7fa      	b.n	1d3fc <z_timeout_end_calc+0x4c>

0001d406 <k_work_submit_to_queue>:
{
   1d406:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d408:	f101 0308 	add.w	r3, r1, #8
   1d40c:	e8d3 2fef 	ldaex	r2, [r3]
   1d410:	f042 0c01 	orr.w	ip, r2, #1
   1d414:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d418:	f1be 0f00 	cmp.w	lr, #0
   1d41c:	d1f6      	bne.n	1d40c <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d41e:	07d3      	lsls	r3, r2, #31
   1d420:	d403      	bmi.n	1d42a <k_work_submit_to_queue+0x24>
}
   1d422:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d426:	f7ff beed 	b.w	1d204 <k_queue_append>
}
   1d42a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d42e <add_event>:
{
   1d42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d430:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d432:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d436:	4290      	cmp	r0, r2
   1d438:	4604      	mov	r4, r0
   1d43a:	460d      	mov	r5, r1
   1d43c:	d106      	bne.n	1d44c <add_event+0x1e>
	node->prev = list->tail;
   1d43e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1d440:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1d442:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1d444:	6863      	ldr	r3, [r4, #4]
   1d446:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d448:	6065      	str	r5, [r4, #4]
}
   1d44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1d44c:	2b00      	cmp	r3, #0
   1d44e:	d0f6      	beq.n	1d43e <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1d450:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d452:	b100      	cbz	r0, 1d456 <add_event+0x28>
   1d454:	386c      	subs	r0, #108	; 0x6c
   1d456:	b107      	cbz	r7, 1d45a <add_event+0x2c>
   1d458:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1d45a:	4639      	mov	r1, r7
   1d45c:	f7ff fee7 	bl	1d22e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1d460:	2800      	cmp	r0, #0
   1d462:	d1ec      	bne.n	1d43e <add_event+0x10>
	return list->head == list;
   1d464:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d466:	42b4      	cmp	r4, r6
   1d468:	d0e9      	beq.n	1d43e <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d46a:	2e00      	cmp	r6, #0
   1d46c:	d0e7      	beq.n	1d43e <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1d46e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d470:	b101      	cbz	r1, 1d474 <add_event+0x46>
   1d472:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1d474:	4638      	mov	r0, r7
   1d476:	f7ff feda 	bl	1d22e <z_is_t1_higher_prio_than_t2>
   1d47a:	b128      	cbz	r0, 1d488 <add_event+0x5a>
	node->prev = successor->prev;
   1d47c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d47e:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1d482:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d484:	6075      	str	r5, [r6, #4]
			return;
   1d486:	e7e0      	b.n	1d44a <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1d488:	6863      	ldr	r3, [r4, #4]
   1d48a:	429e      	cmp	r6, r3
   1d48c:	d0d7      	beq.n	1d43e <add_event+0x10>
   1d48e:	6836      	ldr	r6, [r6, #0]
   1d490:	e7eb      	b.n	1d46a <add_event+0x3c>

0001d492 <z_handle_obj_poll_events>:
{
   1d492:	4603      	mov	r3, r0
	return list->head == list;
   1d494:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d496:	4283      	cmp	r3, r0
   1d498:	d008      	beq.n	1d4ac <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1d49a:	e9d0 3200 	ldrd	r3, r2, [r0]
   1d49e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d4a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d4a2:	2300      	movs	r3, #0
	node->prev = NULL;
   1d4a4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1d4a8:	f7fb bf16 	b.w	192d8 <signal_poll_event>
}
   1d4ac:	4770      	bx	lr

0001d4ae <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1d4ae:	2904      	cmp	r1, #4
{
   1d4b0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1d4b4:	460d      	mov	r5, r1
   1d4b6:	bf38      	it	cc
   1d4b8:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d4ba:	1952      	adds	r2, r2, r5
{
   1d4bc:	4606      	mov	r6, r0
   1d4be:	d209      	bcs.n	1d4d4 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1d4c0:	f04f 0800 	mov.w	r8, #0
   1d4c4:	f04f 0900 	mov.w	r9, #0
   1d4c8:	e9cd 8900 	strd	r8, r9, [sp]
   1d4cc:	f7f9 fcf0 	bl	16eb0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d4d0:	4604      	mov	r4, r0
   1d4d2:	b918      	cbnz	r0, 1d4dc <z_heap_aligned_alloc+0x2e>
		return NULL;
   1d4d4:	2000      	movs	r0, #0
}
   1d4d6:	b002      	add	sp, #8
   1d4d8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1d4dc:	462a      	mov	r2, r5
   1d4de:	21ff      	movs	r1, #255	; 0xff
   1d4e0:	f7fd fd7e 	bl	1afe0 <memset>
	*heap_ref = heap;
   1d4e4:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1d4e6:	1960      	adds	r0, r4, r5
   1d4e8:	e7f5      	b.n	1d4d6 <z_heap_aligned_alloc+0x28>

0001d4ea <k_free>:
	if (ptr != NULL) {
   1d4ea:	b138      	cbz	r0, 1d4fc <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1d4ec:	1f03      	subs	r3, r0, #4
   1d4ee:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1d4f0:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1d4f4:	1c42      	adds	r2, r0, #1
   1d4f6:	d0fa      	beq.n	1d4ee <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1d4f8:	f7f9 bd62 	b.w	16fc0 <k_heap_free>
}
   1d4fc:	4770      	bx	lr

0001d4fe <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1d4fe:	4770      	bx	lr
