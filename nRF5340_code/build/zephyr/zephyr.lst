
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	08 ed 00 20 cd d9 00 00 f3 b6 01 00 fd d9 00 00     ... ............
    8010:	fd d9 00 00 fd d9 00 00 fd d9 00 00 fd d9 00 00     ................
	...
    802c:	95 d7 00 00 fd d9 00 00 00 00 00 00 39 d7 00 00     ............9...
    803c:	79 c0 00 00                                         y...

00008040 <_irq_vector_table>:
    8040:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8050:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8060:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8070:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8080:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8090:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    80a0:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    80b0:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    80c0:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    80d0:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    80e0:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    80f0:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8100:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8110:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8120:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8130:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8140:	8d d9 00 00 8d d9 00 00 8d d9 00 00 8d d9 00 00     ................
    8150:	8d d9 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	1c b1 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
    }

    return retVal;
}

uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{

    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f00:	2b01      	cmp	r3, #1
{
    8f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f06:	4607      	mov	r7, r0
    8f08:	4688      	mov	r8, r1
    8f0a:	4614      	mov	r4, r2
    8f0c:	461e      	mov	r6, r3
    if (len == 1)
    8f0e:	d125      	bne.n	8f5c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f10:	7815      	ldrb	r5, [r2, #0]
    8f12:	4b4b      	ldr	r3, [pc, #300]	; (9040 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f14:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f16:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f18:	f7ff fae4 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f1c:	062b      	lsls	r3, r5, #24
    8f1e:	d503      	bpl.n	8f28 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f20:	2200      	movs	r2, #0
    8f22:	4b48      	ldr	r3, [pc, #288]	; (9044 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f24:	f7ff f992 	bl	824c <__adddf3>
        }
        else {
            dia = diameter * 2.54;
    8f28:	a343      	add	r3, pc, #268	; (adr r3, 9038 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f2e:	f7ff fb43 	bl	85b8 <__aeabi_dmul>
    8f32:	4b45      	ldr	r3, [pc, #276]	; (9048 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f34:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f38:	463a      	mov	r2, r7
    8f3a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8f3e:	4843      	ldr	r0, [pc, #268]	; (904c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8f40:	f011 fa71 	bl	1a426 <printk>
    8f44:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f46:	4f42      	ldr	r7, [pc, #264]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++){
    8f48:	1c5d      	adds	r5, r3, #1
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	42b3      	cmp	r3, r6
    8f4e:	da6c      	bge.n	902a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8f50:	5ce1      	ldrb	r1, [r4, r3]
    8f52:	4638      	mov	r0, r7
    8f54:	f011 fa67 	bl	1a426 <printk>
    for(uint8_t i = 0; i < len; i++){
    8f58:	462b      	mov	r3, r5
    8f5a:	e7f5      	b.n	8f48 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8f5c:	2b13      	cmp	r3, #19
    8f5e:	d1eb      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8f60:	7c53      	ldrb	r3, [r2, #17]
    8f62:	4a3c      	ldr	r2, [pc, #240]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8f64:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8f66:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8f68:	4a3b      	ldr	r2, [pc, #236]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8f6a:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8f6c:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8f6e:	d00e      	beq.n	8f8e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8f70:	2b03      	cmp	r3, #3
    8f72:	d02e      	beq.n	8fd2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8f74:	2b01      	cmp	r3, #1
    8f76:	d1df      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8f78:	4a38      	ldr	r2, [pc, #224]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f7a:	1e63      	subs	r3, r4, #1
    8f7c:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f84:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8f86:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8f8a:	d1f9      	bne.n	8f80 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8f8c:	e7d4      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8f8e:	4b34      	ldr	r3, [pc, #208]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8f90:	781d      	ldrb	r5, [r3, #0]
    8f92:	3501      	adds	r5, #1
    8f94:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8f96:	2d01      	cmp	r5, #1
            cntAddresses++;
    8f98:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8f9a:	d10a      	bne.n	8fb2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    8f9c:	4a2f      	ldr	r2, [pc, #188]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f9e:	1e63      	subs	r3, r4, #1
    8fa0:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fa4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fa8:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8faa:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fae:	d1f9      	bne.n	8fa4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    8fb0:	e7c2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8fb2:	2d02      	cmp	r5, #2
    8fb4:	d1c0      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fb6:	4a2b      	ldr	r2, [pc, #172]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8fb8:	1e63      	subs	r3, r4, #1
    8fba:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fc2:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fc4:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc8:	d1f9      	bne.n	8fbe <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    8fca:	2200      	movs	r2, #0
    8fcc:	4b24      	ldr	r3, [pc, #144]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	e7b2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fd2:	4b23      	ldr	r3, [pc, #140]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fd4:	781d      	ldrb	r5, [r3, #0]
    8fd6:	3501      	adds	r5, #1
    8fd8:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8fda:	2d01      	cmp	r5, #1
            cntAddresses++;
    8fdc:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8fde:	d10a      	bne.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    8fe0:	4a1e      	ldr	r2, [pc, #120]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fec:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    8ff4:	e7a0      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8ff6:	2d02      	cmp	r5, #2
    8ff8:	d10a      	bne.n	9010 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    8ffa:	4a1a      	ldr	r2, [pc, #104]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8ffc:	1e63      	subs	r3, r4, #1
    8ffe:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9002:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9006:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9008:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    900c:	d1f9      	bne.n	9002 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    900e:	e793      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9010:	2d03      	cmp	r5, #3
    9012:	d191      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    9014:	4a14      	ldr	r2, [pc, #80]	; (9068 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    9016:	1e63      	subs	r3, r4, #1
    9018:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    901c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9020:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    9022:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9026:	d1f9      	bne.n	901c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9028:	e7cf      	b.n	8fca <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    902a:	4810      	ldr	r0, [pc, #64]	; (906c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    902c:	f011 f9fb 	bl	1a426 <printk>
 	return len;
}
    9030:	4630      	mov	r0, r6
    9032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9036:	bf00      	nop
    9038:	851eb852 	.word	0x851eb852
    903c:	400451eb 	.word	0x400451eb
    9040:	2000c2ee 	.word	0x2000c2ee
    9044:	3fe00000 	.word	0x3fe00000
    9048:	20008828 	.word	0x20008828
    904c:	0001f49d 	.word	0x0001f49d
    9050:	0001f4c9 	.word	0x0001f4c9
    9054:	2000c2f0 	.word	0x2000c2f0
    9058:	2000c2ef 	.word	0x2000c2ef
    905c:	2000c0da 	.word	0x2000c0da
    9060:	2000c10d 	.word	0x2000c10d
    9064:	2000c0eb 	.word	0x2000c0eb
    9068:	2000c0fc 	.word	0x2000c0fc
    906c:	000226c1 	.word	0x000226c1

00009070 <main>:
 */

#include "deviceManager.h"

void main(void)
{
    9070:	b500      	push	{lr}

	printk("Application start\n");
    9072:	4807      	ldr	r0, [pc, #28]	; (9090 <main+0x20>)
{
    9074:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    9076:	f011 f9d6 	bl	1a426 <printk>

	// create a new device manager
	deviceManager dManager;
    907a:	4668      	mov	r0, sp
    907c:	f000 f9e0 	bl	9440 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9080:	2201      	movs	r2, #1
    9082:	4668      	mov	r0, sp
    9084:	4611      	mov	r1, r2
    9086:	f000 fc41 	bl	990c <_ZN13deviceManager9setDeviceEbb>
    908a:	b011      	add	sp, #68	; 0x44
    908c:	f85d fb04 	ldr.w	pc, [sp], #4
    9090:	0001eda4 	.word	0x0001eda4

00009094 <_ZN13deviceManager13app_button_cbEv>:
    dk_set_led(USER_LED,led_state);
}

bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    9094:	4b01      	ldr	r3, [pc, #4]	; (909c <_ZN13deviceManager13app_button_cbEv+0x8>)
    9096:	7818      	ldrb	r0, [r3, #0]
    9098:	4770      	bx	lr
    909a:	bf00      	nop
    909c:	2000c0cf 	.word	0x2000c0cf

000090a0 <_ZN13deviceManager12le_param_reqEP7bt_connP16bt_le_conn_param>:
		startScan();	
	}
}

bool deviceManager::le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    90a0:	b508      	push	{r3, lr}
	printk("Accept new parameters\n");
    90a2:	4802      	ldr	r0, [pc, #8]	; (90ac <_ZN13deviceManager12le_param_reqEP7bt_connP16bt_le_conn_param+0xc>)
    90a4:	f011 f9bf 	bl	1a426 <printk>

	return true;
}
    90a8:	2001      	movs	r0, #1
    90aa:	bd08      	pop	{r3, pc}
    90ac:	0001edb7 	.word	0x0001edb7

000090b0 <_ZN13deviceManager16le_param_updatedEP7bt_connttt>:

void deviceManager::le_param_updated(struct bt_conn *conn, uint16_t interval,
				 uint16_t latency, uint16_t timeout)
{
	printk("Params updated!\n");
    90b0:	4801      	ldr	r0, [pc, #4]	; (90b8 <_ZN13deviceManager16le_param_updatedEP7bt_connttt+0x8>)
    90b2:	f011 b9b8 	b.w	1a426 <printk>
    90b6:	bf00      	nop
    90b8:	0001edce 	.word	0x0001edce

000090bc <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
}


void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    90bc:	4801      	ldr	r0, [pc, #4]	; (90c4 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    90be:	f011 b9b2 	b.w	1a426 <printk>
    90c2:	bf00      	nop
    90c4:	0001eddf 	.word	0x0001eddf

000090c8 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
	return BT_GATT_ITER_CONTINUE;
}

uint8_t deviceManager::notify_HR(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) {
    90c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    90ca:	461d      	mov	r5, r3

	uint8_t dataToSend[2];
	dataToSend[0] = HEARTRATE;
    90cc:	2303      	movs	r3, #3
		const void *data, uint16_t length) {
    90ce:	460e      	mov	r6, r1
	if (!data) {
    90d0:	4614      	mov	r4, r2
	dataToSend[0] = HEARTRATE;
    90d2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!data) {
    90d6:	b932      	cbnz	r2, 90e6 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e>
		printk("[UNSUBSCRIBED]\n");
    90d8:	480f      	ldr	r0, [pc, #60]	; (9118 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x50>)
    90da:	f011 f9a4 	bl	1a426 <printk>
		params->value_handle = 0U;
		return BT_GATT_ITER_STOP;
    90de:	4620      	mov	r0, r4
		params->value_handle = 0U;
    90e0:	8134      	strh	r4, [r6, #8]
	} else {
		printk("[NOTIFICATION] data %p length %u\n", data, length);
	}

	return BT_GATT_ITER_CONTINUE;
}
    90e2:	b002      	add	sp, #8
    90e4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 2) {
    90e6:	2d02      	cmp	r5, #2
    90e8:	d10f      	bne.n	910a <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x42>
		uint8_t hr_bpm = ((uint8_t *)data)[1];
    90ea:	7851      	ldrb	r1, [r2, #1]
		deviceManager::data.heartRate = hr_bpm;
    90ec:	4b0b      	ldr	r3, [pc, #44]	; (911c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x54>)
		printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    90ee:	480c      	ldr	r0, [pc, #48]	; (9120 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x58>)
		deviceManager::data.heartRate = hr_bpm;
    90f0:	7459      	strb	r1, [r3, #17]
		dataToSend[1] = hr_bpm;
    90f2:	f88d 1005 	strb.w	r1, [sp, #5]
		printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    90f6:	f011 f996 	bl	1a426 <printk>
		data_service_send(peripheralConn,dataToSend,sizeof(dataToSend));
    90fa:	4b0a      	ldr	r3, [pc, #40]	; (9124 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5c>)
    90fc:	462a      	mov	r2, r5
    90fe:	6818      	ldr	r0, [r3, #0]
    9100:	a901      	add	r1, sp, #4
    9102:	f000 fef5 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
	return BT_GATT_ITER_CONTINUE;
    9106:	2001      	movs	r0, #1
    9108:	e7eb      	b.n	90e2 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a>
		printk("[NOTIFICATION] data %p length %u\n", data, length);
    910a:	462a      	mov	r2, r5
    910c:	4621      	mov	r1, r4
    910e:	4806      	ldr	r0, [pc, #24]	; (9128 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x60>)
    9110:	f011 f989 	bl	1a426 <printk>
    9114:	e7f7      	b.n	9106 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x3e>
    9116:	bf00      	nop
    9118:	0001ee07 	.word	0x0001ee07
    911c:	200087f0 	.word	0x200087f0
    9120:	0001ee17 	.word	0x0001ee17
    9124:	2000a610 	.word	0x2000a610
    9128:	0001ee39 	.word	0x0001ee39

0000912c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
{
    912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    912e:	4604      	mov	r4, r0
	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    9130:	f011 fdb5 	bl	1ac9e <bt_gatt_dm_conn_get>
    9134:	4607      	mov	r7, r0
	printk("The discovery procedure succeeded\n");
    9136:	4821      	ldr	r0, [pc, #132]	; (91bc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x90>)
    9138:	f011 f975 	bl	1a426 <printk>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    913c:	4620      	mov	r0, r4
    913e:	4920      	ldr	r1, [pc, #128]	; (91c0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x94>)
    9140:	f003 faa6 	bl	c690 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    9144:	4606      	mov	r6, r0
    9146:	b920      	cbnz	r0, 9152 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x26>
		printk("No heart rate measurement characteristic found");
    9148:	481e      	ldr	r0, [pc, #120]	; (91c4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x98>)
}
    914a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("No heat rate measurement characteristic value found");
    914e:	f011 b96a 	b.w	1a426 <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9152:	4601      	mov	r1, r0
    9154:	4a1c      	ldr	r2, [pc, #112]	; (91c8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x9c>)
    9156:	4620      	mov	r0, r4
    9158:	f011 fdf0 	bl	1ad3c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    915c:	b908      	cbnz	r0, 9162 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x36>
		printk("No heat rate measurement characteristic value found");
    915e:	481b      	ldr	r0, [pc, #108]	; (91cc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa0>)
    9160:	e7f3      	b.n	914a <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.value_handle = gatt_desc->handle;
    9162:	8883      	ldrh	r3, [r0, #4]
    9164:	4d1a      	ldr	r5, [pc, #104]	; (91d0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa4>)
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9166:	4631      	mov	r1, r6
    9168:	4620      	mov	r0, r4
    916a:	4a1a      	ldr	r2, [pc, #104]	; (91d4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa8>)
	paramHR.value_handle = gatt_desc->handle;
    916c:	812b      	strh	r3, [r5, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    916e:	f011 fde5 	bl	1ad3c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    9172:	b908      	cbnz	r0, 9178 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x4c>
		printk("No heart rate CCC descriptor found. "
    9174:	4818      	ldr	r0, [pc, #96]	; (91d8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xac>)
    9176:	e7e8      	b.n	914a <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.notify = notify_HR;
    9178:	4b18      	ldr	r3, [pc, #96]	; (91dc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb0>)
	err = bt_gatt_subscribe(conn, &paramHR);
    917a:	4629      	mov	r1, r5
	paramHR.notify = notify_HR;
    917c:	602b      	str	r3, [r5, #0]
	paramHR.value = BT_GATT_CCC_NOTIFY;
    917e:	2301      	movs	r3, #1
    9180:	81ab      	strh	r3, [r5, #12]
	paramHR.ccc_handle = gatt_desc->handle;
    9182:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &paramHR);
    9184:	4638      	mov	r0, r7
	paramHR.ccc_handle = gatt_desc->handle;
    9186:	816b      	strh	r3, [r5, #10]
	err = bt_gatt_subscribe(conn, &paramHR);
    9188:	f00b fc58 	bl	14a3c <bt_gatt_subscribe>
	if (err && err != -EALREADY) {
    918c:	4601      	mov	r1, r0
    918e:	b178      	cbz	r0, 91b0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x84>
    9190:	f110 0f45 	cmn.w	r0, #69	; 0x45
    9194:	d00c      	beq.n	91b0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x84>
		printk("Subscribe failed (err %d)\n", err);
    9196:	4812      	ldr	r0, [pc, #72]	; (91e0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb4>)
    9198:	f011 f945 	bl	1a426 <printk>
	err = bt_gatt_dm_data_release(dm);
    919c:	4620      	mov	r0, r4
    919e:	f011 fddf 	bl	1ad60 <bt_gatt_dm_data_release>
	if (err) {
    91a2:	4601      	mov	r1, r0
    91a4:	b140      	cbz	r0, 91b8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x8c>
}
    91a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("Could not release the discovery data (err %d)\n", err);
    91aa:	480e      	ldr	r0, [pc, #56]	; (91e4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb8>)
    91ac:	f011 b93b 	b.w	1a426 <printk>
		printk("[SUBSCRIBED]\n");
    91b0:	480d      	ldr	r0, [pc, #52]	; (91e8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xbc>)
    91b2:	f011 f938 	bl	1a426 <printk>
    91b6:	e7f1      	b.n	919c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x70>
}
    91b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    91ba:	bf00      	nop
    91bc:	0001ee5b 	.word	0x0001ee5b
    91c0:	0001ecfc 	.word	0x0001ecfc
    91c4:	0001ee7e 	.word	0x0001ee7e
    91c8:	0001ed00 	.word	0x0001ed00
    91cc:	0001eead 	.word	0x0001eead
    91d0:	2000a628 	.word	0x2000a628
    91d4:	0001ed04 	.word	0x0001ed04
    91d8:	0001eee1 	.word	0x0001eee1
    91dc:	000090c9 	.word	0x000090c9
    91e0:	0001ef38 	.word	0x0001ef38
    91e4:	0001ef61 	.word	0x0001ef61
    91e8:	0001ef53 	.word	0x0001ef53

000091ec <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    91ec:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    91ee:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    91f0:	d507      	bpl.n	9202 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    91f2:	1e04      	subs	r4, r0, #0
    91f4:	bf18      	it	ne
    91f6:	2401      	movne	r4, #1
    91f8:	4620      	mov	r0, r4
    91fa:	f004 f88b 	bl	d314 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    91fe:	4b01      	ldr	r3, [pc, #4]	; (9204 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    9200:	701c      	strb	r4, [r3, #0]
}
    9202:	bd10      	pop	{r4, pc}
    9204:	2000c0cf 	.word	0x2000c0cf

00009208 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
			const void *data, uint16_t length) {
    9208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    920a:	4611      	mov	r1, r2
	if (subscriptionDone)
    920c:	4a60      	ldr	r2, [pc, #384]	; (9390 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x188>)
    920e:	7812      	ldrb	r2, [r2, #0]
    9210:	b152      	cbz	r2, 9228 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
		if (!batterySubscriptionDone)
    9212:	4a60      	ldr	r2, [pc, #384]	; (9394 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x18c>)
    9214:	7810      	ldrb	r0, [r2, #0]
    9216:	b9f0      	cbnz	r0, 9256 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x4e>
			if (cnt == nbrConnectionsCentral)
    9218:	4c5f      	ldr	r4, [pc, #380]	; (9398 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x190>)
    921a:	4b60      	ldr	r3, [pc, #384]	; (939c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x194>)
    921c:	7821      	ldrb	r1, [r4, #0]
    921e:	781b      	ldrb	r3, [r3, #0]
    9220:	4299      	cmp	r1, r3
    9222:	d104      	bne.n	922e <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
				batterySubscriptionDone = true;
    9224:	2301      	movs	r3, #1
    9226:	7013      	strb	r3, [r2, #0]
}
    9228:	2001      	movs	r0, #1
    922a:	b003      	add	sp, #12
    922c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (cnt2 == 0 || cnt2 == 20)
    922e:	4d5c      	ldr	r5, [pc, #368]	; (93a0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x198>)
    9230:	782b      	ldrb	r3, [r5, #0]
    9232:	b10b      	cbz	r3, 9238 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x30>
    9234:	2b14      	cmp	r3, #20
    9236:	d10a      	bne.n	924e <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x46>
					initBatteryManager();
    9238:	f001 f890 	bl	a35c <initBatteryManager>
					gatt_discover_battery_service(centralConnections[cnt]);	
    923c:	4b59      	ldr	r3, [pc, #356]	; (93a4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x19c>)
    923e:	7822      	ldrb	r2, [r4, #0]
    9240:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9244:	f001 f862 	bl	a30c <gatt_discover_battery_service>
					cnt++;
    9248:	7823      	ldrb	r3, [r4, #0]
    924a:	3301      	adds	r3, #1
    924c:	7023      	strb	r3, [r4, #0]
				cnt2++;
    924e:	782b      	ldrb	r3, [r5, #0]
    9250:	3301      	adds	r3, #1
    9252:	702b      	strb	r3, [r5, #0]
    9254:	e7e8      	b.n	9228 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
			if (length > 0)
    9256:	2b00      	cmp	r3, #0
    9258:	d0e6      	beq.n	9228 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
				deviceManager::data.saveData(data);
    925a:	4d53      	ldr	r5, [pc, #332]	; (93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a0>)
    925c:	4628      	mov	r0, r5
    925e:	f000 fdc1 	bl	9de4 <_ZN7dataCSC8saveDataEPKv>
				if (getDiameter() != 0 && diameterSet == false)
    9262:	f000 fe6f 	bl	9f44 <_Z11getDiameterv>
    9266:	2200      	movs	r2, #0
    9268:	2300      	movs	r3, #0
    926a:	f7ff fc0d 	bl	8a88 <__aeabi_dcmpeq>
    926e:	2800      	cmp	r0, #0
    9270:	d15b      	bne.n	932a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x122>
    9272:	4b4e      	ldr	r3, [pc, #312]	; (93ac <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a4>)
    9274:	781a      	ldrb	r2, [r3, #0]
    9276:	2a00      	cmp	r2, #0
    9278:	d157      	bne.n	932a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x122>
					diameterSet = true;
    927a:	2201      	movs	r2, #1
    927c:	701a      	strb	r2, [r3, #0]
					deviceManager::data.wheelDiameter = getDiameter();
    927e:	f000 fe61 	bl	9f44 <_Z11getDiameterv>
    9282:	e9c5 0106 	strd	r0, r1, [r5, #24]
				if (deviceManager::data.type == CSC_SPEED)
    9286:	7c2c      	ldrb	r4, [r5, #16]
    9288:	2c01      	cmp	r4, #1
    928a:	d15d      	bne.n	9348 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x140>
					if (diameterSet)
    928c:	4b47      	ldr	r3, [pc, #284]	; (93ac <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a4>)
    928e:	781b      	ldrb	r3, [r3, #0]
    9290:	b1c3      	cbz	r3, 92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbc>
						uint16_t speed = deviceManager::data.calcSpeed();
    9292:	4845      	ldr	r0, [pc, #276]	; (93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a0>)
    9294:	f7ff fdd8 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>
						if (speed > 0)
    9298:	b1a0      	cbz	r0, 92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbc>
							dataToSend[1] = (uint8_t) (speed/100);	
    929a:	2164      	movs	r1, #100	; 0x64
    929c:	fbb0 f1f1 	udiv	r1, r0, r1
							dataToSend[0] = CSC_SPEED;
    92a0:	f88d 4000 	strb.w	r4, [sp]
							if (peripheralConn != nullptr)
    92a4:	4c42      	ldr	r4, [pc, #264]	; (93b0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a8>)
							dataToSend[1] = (uint8_t) (speed/100);	
    92a6:	b289      	uxth	r1, r1
							if (peripheralConn != nullptr)
    92a8:	6823      	ldr	r3, [r4, #0]
							dataToSend[1] = (uint8_t) (speed/100);	
    92aa:	f88d 1001 	strb.w	r1, [sp, #1]
							val_after_comma = (uint8_t) (speed);
    92ae:	f88d 0002 	strb.w	r0, [sp, #2]
							if (peripheralConn != nullptr)
    92b2:	b13b      	cbz	r3, 92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbc>
								printk("Speed: %d\n",speed/100);
    92b4:	483f      	ldr	r0, [pc, #252]	; (93b4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1ac>)
								printk("Cadence rpm: %d\n",rpm);
    92b6:	f011 f8b6 	bl	1a426 <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    92ba:	2203      	movs	r2, #3
    92bc:	4669      	mov	r1, sp
    92be:	6820      	ldr	r0, [r4, #0]
    92c0:	f000 fe16 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
				if (cntForStart == 0 || cntForStart == 10 || cntNbrReceived == waitToThisNumber)
    92c4:	4f3c      	ldr	r7, [pc, #240]	; (93b8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b0>)
    92c6:	4e3d      	ldr	r6, [pc, #244]	; (93bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b4>)
    92c8:	783b      	ldrb	r3, [r7, #0]
    92ca:	b123      	cbz	r3, 92d6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xce>
    92cc:	2b0a      	cmp	r3, #10
    92ce:	d002      	beq.n	92d6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xce>
    92d0:	7833      	ldrb	r3, [r6, #0]
    92d2:	2bc8      	cmp	r3, #200	; 0xc8
    92d4:	d122      	bne.n	931c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x114>
					cntNbrReceived = 0;
    92d6:	2300      	movs	r3, #0
					switch (cntSensors)
    92d8:	4c39      	ldr	r4, [pc, #228]	; (93c0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b8>)
					cntNbrReceived = 0;
    92da:	7033      	strb	r3, [r6, #0]
					switch (cntSensors)
    92dc:	7820      	ldrb	r0, [r4, #0]
    92de:	2801      	cmp	r0, #1
    92e0:	d04b      	beq.n	937a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x172>
    92e2:	2802      	cmp	r0, #2
    92e4:	d04e      	beq.n	9384 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x17c>
    92e6:	b988      	cbnz	r0, 930c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x104>
						deviceManager::data.battValue_sensor1 = getBatteryLevel(cntSensors);
    92e8:	f001 f85c 	bl	a3a4 <getBatteryLevel>
    92ec:	f885 0020 	strb.w	r0, [r5, #32]
						batteryLevelToSend[0] = BATTERY;
    92f0:	2204      	movs	r2, #4
						batteryLevelToSend[1] = cntSensors;
    92f2:	7823      	ldrb	r3, [r4, #0]
						batteryLevelToSend[2] = deviceManager::data.battValue_sensor3;
    92f4:	f88d 0006 	strb.w	r0, [sp, #6]
						batteryLevelToSend[1] = cntSensors;
    92f8:	f88d 3005 	strb.w	r3, [sp, #5]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));					
    92fc:	4b2c      	ldr	r3, [pc, #176]	; (93b0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a8>)
    92fe:	eb0d 0102 	add.w	r1, sp, r2
    9302:	6818      	ldr	r0, [r3, #0]
						batteryLevelToSend[0] = BATTERY;
    9304:	f88d 2004 	strb.w	r2, [sp, #4]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));					
    9308:	f000 fdf2 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
					if (cntSensors == nbrConnectionsCentral)
    930c:	4a23      	ldr	r2, [pc, #140]	; (939c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x194>)
    930e:	7823      	ldrb	r3, [r4, #0]
    9310:	7812      	ldrb	r2, [r2, #0]
    9312:	429a      	cmp	r2, r3
						cntSensors = 0;
    9314:	bf0c      	ite	eq
    9316:	2300      	moveq	r3, #0
						cntSensors++;
    9318:	3301      	addne	r3, #1
    931a:	7023      	strb	r3, [r4, #0]
				cntForStart++;
    931c:	783b      	ldrb	r3, [r7, #0]
    931e:	3301      	adds	r3, #1
    9320:	703b      	strb	r3, [r7, #0]
				cntNbrReceived++;
    9322:	7833      	ldrb	r3, [r6, #0]
    9324:	3301      	adds	r3, #1
    9326:	7033      	strb	r3, [r6, #0]
    9328:	e77e      	b.n	9228 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
				else if (getDiameter() == 0 && diameterSet == true)
    932a:	f000 fe0b 	bl	9f44 <_Z11getDiameterv>
    932e:	2200      	movs	r2, #0
    9330:	2300      	movs	r3, #0
    9332:	f7ff fba9 	bl	8a88 <__aeabi_dcmpeq>
    9336:	2800      	cmp	r0, #0
    9338:	d0a5      	beq.n	9286 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
    933a:	4b1c      	ldr	r3, [pc, #112]	; (93ac <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a4>)
    933c:	781a      	ldrb	r2, [r3, #0]
    933e:	2a00      	cmp	r2, #0
    9340:	d0a1      	beq.n	9286 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
					diameterSet = false;
    9342:	2200      	movs	r2, #0
    9344:	701a      	strb	r2, [r3, #0]
    9346:	e79e      	b.n	9286 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
				else if (deviceManager::data.type == CSC_CADENCE)
    9348:	2c02      	cmp	r4, #2
    934a:	d1bb      	bne.n	92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbc>
					if (diameterSet)
    934c:	4b17      	ldr	r3, [pc, #92]	; (93ac <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a4>)
    934e:	781b      	ldrb	r3, [r3, #0]
    9350:	2b00      	cmp	r3, #0
    9352:	d0b7      	beq.n	92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbc>
						uint16_t rpm = deviceManager::data.calcRPM();
    9354:	4814      	ldr	r0, [pc, #80]	; (93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a0>)
    9356:	f000 fd67 	bl	9e28 <_ZN7dataCSC7calcRPMEv>
						if (rpm > 0)
    935a:	4601      	mov	r1, r0
    935c:	2800      	cmp	r0, #0
    935e:	d0b1      	beq.n	92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbc>
							dataToSend[0] = CSC_CADENCE;	
    9360:	f88d 4000 	strb.w	r4, [sp]
							if (peripheralConn != nullptr)
    9364:	4c12      	ldr	r4, [pc, #72]	; (93b0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a8>)
							dataToSend[2] = (uint8_t) (rpm >> 8);	
    9366:	0a03      	lsrs	r3, r0, #8
    9368:	f88d 3002 	strb.w	r3, [sp, #2]
							if (peripheralConn != nullptr)
    936c:	6823      	ldr	r3, [r4, #0]
							dataToSend[1] = (uint8_t) rpm;
    936e:	f88d 0001 	strb.w	r0, [sp, #1]
							if (peripheralConn != nullptr)
    9372:	2b00      	cmp	r3, #0
    9374:	d0a6      	beq.n	92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbc>
								printk("Cadence rpm: %d\n",rpm);
    9376:	4813      	ldr	r0, [pc, #76]	; (93c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1bc>)
    9378:	e79d      	b.n	92b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xae>
						deviceManager::data.battValue_sensor2 = getBatteryLevel(cntSensors);
    937a:	f001 f813 	bl	a3a4 <getBatteryLevel>
    937e:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
						batteryLevelToSend[0] = BATTERY;
    9382:	e7b5      	b.n	92f0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe8>
						deviceManager::data.battValue_sensor3 = getBatteryLevel(cntSensors);
    9384:	f001 f80e 	bl	a3a4 <getBatteryLevel>
    9388:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    938c:	e7b0      	b.n	92f0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe8>
    938e:	bf00      	nop
    9390:	2000c0d0 	.word	0x2000c0d0
    9394:	2000c0d2 	.word	0x2000c0d2
    9398:	2000c0d7 	.word	0x2000c0d7
    939c:	2000c0d1 	.word	0x2000c0d1
    93a0:	2000c0d8 	.word	0x2000c0d8
    93a4:	2000a614 	.word	0x2000a614
    93a8:	200087f0 	.word	0x200087f0
    93ac:	2000c0cb 	.word	0x2000c0cb
    93b0:	2000a610 	.word	0x2000a610
    93b4:	0001ef90 	.word	0x0001ef90
    93b8:	2000c0d5 	.word	0x2000c0d5
    93bc:	2000c0d6 	.word	0x2000c0d6
    93c0:	2000c0d4 	.word	0x2000c0d4
    93c4:	0001ef9b 	.word	0x0001ef9b

000093c8 <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    93c8:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    93ca:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    93cc:	b08b      	sub	sp, #44	; 0x2c
    93ce:	4604      	mov	r4, r0
    93d0:	460e      	mov	r6, r1
    93d2:	4617      	mov	r7, r2
    93d4:	ad07      	add	r5, sp, #28
    93d6:	2b03      	cmp	r3, #3
    93d8:	d820      	bhi.n	941c <bt_addr_le_to_str.isra.0+0x54>
    93da:	e8df f003 	tbb	[pc, r3]
    93de:	1902      	.short	0x1902
    93e0:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    93e2:	4911      	ldr	r1, [pc, #68]	; (9428 <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    93e4:	4628      	mov	r0, r5
    93e6:	f012 fa08 	bl	1b7fa <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    93ea:	7863      	ldrb	r3, [r4, #1]
    93ec:	4639      	mov	r1, r7
    93ee:	9304      	str	r3, [sp, #16]
    93f0:	78a3      	ldrb	r3, [r4, #2]
    93f2:	4630      	mov	r0, r6
    93f4:	9303      	str	r3, [sp, #12]
    93f6:	78e3      	ldrb	r3, [r4, #3]
    93f8:	4a0c      	ldr	r2, [pc, #48]	; (942c <bt_addr_le_to_str.isra.0+0x64>)
    93fa:	9302      	str	r3, [sp, #8]
    93fc:	7923      	ldrb	r3, [r4, #4]
    93fe:	9505      	str	r5, [sp, #20]
    9400:	9301      	str	r3, [sp, #4]
    9402:	7963      	ldrb	r3, [r4, #5]
    9404:	9300      	str	r3, [sp, #0]
    9406:	79a3      	ldrb	r3, [r4, #6]
    9408:	f011 f81a 	bl	1a440 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    940c:	b00b      	add	sp, #44	; 0x2c
    940e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    9410:	4907      	ldr	r1, [pc, #28]	; (9430 <bt_addr_le_to_str.isra.0+0x68>)
    9412:	e7e7      	b.n	93e4 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    9414:	4907      	ldr	r1, [pc, #28]	; (9434 <bt_addr_le_to_str.isra.0+0x6c>)
    9416:	e7e5      	b.n	93e4 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    9418:	4907      	ldr	r1, [pc, #28]	; (9438 <bt_addr_le_to_str.isra.0+0x70>)
    941a:	e7e3      	b.n	93e4 <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    941c:	210a      	movs	r1, #10
    941e:	4628      	mov	r0, r5
    9420:	4a06      	ldr	r2, [pc, #24]	; (943c <bt_addr_le_to_str.isra.0+0x74>)
    9422:	f011 f80d 	bl	1a440 <snprintk>
		break;
    9426:	e7e0      	b.n	93ea <bt_addr_le_to_str.isra.0+0x22>
    9428:	0001efac 	.word	0x0001efac
    942c:	0001efd5 	.word	0x0001efd5
    9430:	0001efb3 	.word	0x0001efb3
    9434:	0001efba 	.word	0x0001efba
    9438:	0001efc4 	.word	0x0001efc4
    943c:	0001efce 	.word	0x0001efce

00009440 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    9440:	b510      	push	{r4, lr}
    9442:	4604      	mov	r4, r0
    9444:	2214      	movs	r2, #20
    9446:	2100      	movs	r1, #0
    9448:	f012 fa5c 	bl	1b904 <memset>
    944c:	4b10      	ldr	r3, [pc, #64]	; (9490 <_ZN13deviceManagerC1Ev+0x50>)
    944e:	4a11      	ldr	r2, [pc, #68]	; (9494 <_ZN13deviceManagerC1Ev+0x54>)
    9450:	6023      	str	r3, [r4, #0]
    9452:	4b11      	ldr	r3, [pc, #68]	; (9498 <_ZN13deviceManagerC1Ev+0x58>)
    9454:	e892 0003 	ldmia.w	r2, {r0, r1}
    9458:	6063      	str	r3, [r4, #4]
    945a:	4b10      	ldr	r3, [pc, #64]	; (949c <_ZN13deviceManagerC1Ev+0x5c>)
    945c:	2224      	movs	r2, #36	; 0x24
    945e:	60a3      	str	r3, [r4, #8]
    9460:	4b0f      	ldr	r3, [pc, #60]	; (94a0 <_ZN13deviceManagerC1Ev+0x60>)
    9462:	60e3      	str	r3, [r4, #12]
    9464:	f104 0314 	add.w	r3, r4, #20
    9468:	e883 0003 	stmia.w	r3, {r0, r1}
    946c:	2100      	movs	r1, #0
    946e:	f104 001c 	add.w	r0, r4, #28
    9472:	f012 fa47 	bl	1b904 <memset>
		centralConnections[i] = nullptr;
    9476:	2300      	movs	r3, #0
    9478:	4a0a      	ldr	r2, [pc, #40]	; (94a4 <_ZN13deviceManagerC1Ev+0x64>)
}
    947a:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    947c:	e9c2 3300 	strd	r3, r3, [r2]
    9480:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    9484:	4a08      	ldr	r2, [pc, #32]	; (94a8 <_ZN13deviceManagerC1Ev+0x68>)
    9486:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    9488:	4a08      	ldr	r2, [pc, #32]	; (94ac <_ZN13deviceManagerC1Ev+0x6c>)
    948a:	7013      	strb	r3, [r2, #0]
}
    948c:	bd10      	pop	{r4, pc}
    948e:	bf00      	nop
    9490:	000099fd 	.word	0x000099fd
    9494:	0001e310 	.word	0x0001e310
    9498:	00009c45 	.word	0x00009c45
    949c:	000090a1 	.word	0x000090a1
    94a0:	000090b1 	.word	0x000090b1
    94a4:	2000a614 	.word	0x2000a614
    94a8:	2000c0ca 	.word	0x2000c0ca
    94ac:	2000c0c9 	.word	0x2000c0c9

000094b0 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    94b0:	4a07      	ldr	r2, [pc, #28]	; (94d0 <_ZN13deviceManager9getDeviceEv+0x20>)
    94b2:	4b08      	ldr	r3, [pc, #32]	; (94d4 <_ZN13deviceManager9getDeviceEv+0x24>)
    94b4:	7812      	ldrb	r2, [r2, #0]
    94b6:	781b      	ldrb	r3, [r3, #0]
    94b8:	b122      	cbz	r2, 94c4 <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    94ba:	2b00      	cmp	r3, #0
    94bc:	bf14      	ite	ne
    94be:	2003      	movne	r0, #3
    94c0:	2001      	moveq	r0, #1
    94c2:	4770      	bx	lr
        return 0;
    94c4:	2b00      	cmp	r3, #0
    94c6:	bf14      	ite	ne
    94c8:	2002      	movne	r0, #2
    94ca:	2000      	moveq	r0, #0
}
    94cc:	4770      	bx	lr
    94ce:	bf00      	nop
    94d0:	2000c0d3 	.word	0x2000c0d3
    94d4:	2000c0cd 	.word	0x2000c0cd

000094d8 <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    94d8:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    94da:	4805      	ldr	r0, [pc, #20]	; (94f0 <_ZN13deviceManager10initButtonEv+0x18>)
    94dc:	f00d f81e 	bl	1651c <dk_buttons_init>
	if (err) {
    94e0:	4604      	mov	r4, r0
    94e2:	b118      	cbz	r0, 94ec <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    94e4:	4601      	mov	r1, r0
    94e6:	4803      	ldr	r0, [pc, #12]	; (94f4 <_ZN13deviceManager10initButtonEv+0x1c>)
    94e8:	f010 ff9d 	bl	1a426 <printk>
}
    94ec:	4620      	mov	r0, r4
    94ee:	bd10      	pop	{r4, pc}
    94f0:	000091ed 	.word	0x000091ed
    94f4:	0001eff8 	.word	0x0001eff8

000094f8 <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    94f8:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    94fa:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    94fc:	490b      	ldr	r1, [pc, #44]	; (952c <_ZN13deviceManager16startAdvertisingEv+0x34>)
    94fe:	9300      	str	r3, [sp, #0]
    9500:	2202      	movs	r2, #2
    9502:	4b0b      	ldr	r3, [pc, #44]	; (9530 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    9504:	480b      	ldr	r0, [pc, #44]	; (9534 <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    9506:	f007 f967 	bl	107d8 <bt_le_adv_start>
	if (err) {
    950a:	4601      	mov	r1, r0
    950c:	b128      	cbz	r0, 951a <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    950e:	480a      	ldr	r0, [pc, #40]	; (9538 <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    9510:	b003      	add	sp, #12
    9512:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    9516:	f010 bf86 	b.w	1a426 <printk>
	printk("Advertising successfully started\n");
    951a:	4808      	ldr	r0, [pc, #32]	; (953c <_ZN13deviceManager16startAdvertisingEv+0x44>)
    951c:	f010 ff83 	bl	1a426 <printk>
	printk("Waiting for connection...\n");
    9520:	4807      	ldr	r0, [pc, #28]	; (9540 <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    9522:	b003      	add	sp, #12
    9524:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    9528:	f010 bf7d 	b.w	1a426 <printk>
    952c:	0001e428 	.word	0x0001e428
    9530:	0001e438 	.word	0x0001e438
    9534:	0001e3a8 	.word	0x0001e3a8
    9538:	0001f017 	.word	0x0001f017
    953c:	0001f03d 	.word	0x0001f03d
    9540:	0001f05f 	.word	0x0001f05f

00009544 <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    9544:	b510      	push	{r4, lr}
    9546:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    9548:	f7ff ffb2 	bl	94b0 <_ZN13deviceManager9getDeviceEv>
    954c:	1e83      	subs	r3, r0, #2
    954e:	b2db      	uxtb	r3, r3
    9550:	2b01      	cmp	r3, #1
    9552:	d82d      	bhi.n	95b0 <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    9554:	f00c ff7c 	bl	16450 <dk_leds_init>
        if (err) {
    9558:	4601      	mov	r1, r0
    955a:	b120      	cbz	r0, 9566 <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    955c:	4815      	ldr	r0, [pc, #84]	; (95b4 <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    955e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    9562:	f010 bf60 	b.w	1a426 <printk>
        err = initButton();
    9566:	f7ff ffb7 	bl	94d8 <_ZN13deviceManager10initButtonEv>
    956a:	4601      	mov	r1, r0
        if (err) {
    956c:	b108      	cbz	r0, 9572 <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    956e:	4812      	ldr	r0, [pc, #72]	; (95b8 <_ZN13deviceManager14initPeripheralEv+0x74>)
    9570:	e7f5      	b.n	955e <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    9572:	f006 fe97 	bl	102a4 <bt_enable>
        if (err) {
    9576:	4601      	mov	r1, r0
    9578:	b108      	cbz	r0, 957e <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    957a:	4810      	ldr	r0, [pc, #64]	; (95bc <_ZN13deviceManager14initPeripheralEv+0x78>)
    957c:	e7ef      	b.n	955e <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    957e:	4810      	ldr	r0, [pc, #64]	; (95c0 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    9580:	f010 ff51 	bl	1a426 <printk>
		bt_conn_cb_register(&conn_callbacks);
    9584:	4620      	mov	r0, r4
    9586:	f007 fc8f 	bl	10ea8 <bt_conn_cb_register>
            settings_load();
    958a:	f011 fa41 	bl	1aa10 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    958e:	f104 0014 	add.w	r0, r4, #20
    9592:	f003 feb5 	bl	d300 <bt_lbs_init>
        if (err) {
    9596:	4601      	mov	r1, r0
    9598:	b108      	cbz	r0, 959e <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    959a:	480a      	ldr	r0, [pc, #40]	; (95c4 <_ZN13deviceManager14initPeripheralEv+0x80>)
    959c:	e7df      	b.n	955e <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    959e:	f000 fc95 	bl	9ecc <_Z17data_service_initv>
		if (err) 
    95a2:	4601      	mov	r1, r0
    95a4:	2800      	cmp	r0, #0
    95a6:	d1f8      	bne.n	959a <_ZN13deviceManager14initPeripheralEv+0x56>
}
    95a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    95ac:	f7ff bfa4 	b.w	94f8 <_ZN13deviceManager16startAdvertisingEv>
}
    95b0:	bd10      	pop	{r4, pc}
    95b2:	bf00      	nop
    95b4:	0001f07a 	.word	0x0001f07a
    95b8:	0001f095 	.word	0x0001f095
    95bc:	0001f0b2 	.word	0x0001f0b2
    95c0:	0001f0d2 	.word	0x0001f0d2
    95c4:	0001f0e9 	.word	0x0001f0e9

000095c8 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    95c8:	2001      	movs	r0, #1
void deviceManager::startScan(){
    95ca:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    95cc:	f003 fc36 	bl	ce3c <bt_scan_start>
	if (err) {
    95d0:	4601      	mov	r1, r0
    95d2:	b110      	cbz	r0, 95da <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    95d4:	4803      	ldr	r0, [pc, #12]	; (95e4 <_ZN13deviceManager9startScanEv+0x1c>)
    95d6:	f010 ff26 	bl	1a426 <printk>
}
    95da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    95de:	4802      	ldr	r0, [pc, #8]	; (95e8 <_ZN13deviceManager9startScanEv+0x20>)
    95e0:	f010 bf21 	b.w	1a426 <printk>
    95e4:	0001f106 	.word	0x0001f106
    95e8:	0001f128 	.word	0x0001f128

000095ec <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    95ec:	b530      	push	{r4, r5, lr}
    95ee:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    95f0:	f000 fcde 	bl	9fb0 <_Z14getSensorInfosv>
    95f4:	4d2e      	ldr	r5, [pc, #184]	; (96b0 <_ZN13deviceManager8initScanEv+0xc4>)
	struct bt_le_scan_param scanParam = {
    95f6:	ab03      	add	r3, sp, #12
    95f8:	2214      	movs	r2, #20
    95fa:	2100      	movs	r1, #0
	sensorInfos = getSensorInfos();
    95fc:	7028      	strb	r0, [r5, #0]
    95fe:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    9600:	4618      	mov	r0, r3
    9602:	f012 f97f 	bl	1b904 <memset>
    9606:	2201      	movs	r2, #1
    9608:	f88d 200c 	strb.w	r2, [sp, #12]
    960c:	9204      	str	r2, [sp, #16]
    960e:	4a29      	ldr	r2, [pc, #164]	; (96b4 <_ZN13deviceManager8initScanEv+0xc8>)
	struct bt_scan_init_param scanInit = {
    9610:	4929      	ldr	r1, [pc, #164]	; (96b8 <_ZN13deviceManager8initScanEv+0xcc>)
	struct bt_le_scan_param scanParam = {
    9612:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    9614:	2200      	movs	r2, #0
    9616:	9102      	str	r1, [sp, #8]
    9618:	9201      	str	r2, [sp, #4]
	};
    961a:	9000      	str	r0, [sp, #0]
	if (sensorInfos != 0)
    961c:	2c00      	cmp	r4, #0
    961e:	d042      	beq.n	96a6 <_ZN13deviceManager8initScanEv+0xba>
		if (once)
    9620:	4b26      	ldr	r3, [pc, #152]	; (96bc <_ZN13deviceManager8initScanEv+0xd0>)
    9622:	7819      	ldrb	r1, [r3, #0]
    9624:	b141      	cbz	r1, 9638 <_ZN13deviceManager8initScanEv+0x4c>
			once = false;
    9626:	701a      	strb	r2, [r3, #0]
			bt_le_scan_stop();
    9628:	f007 fa7c 	bl	10b24 <bt_le_scan_stop>
			bt_scan_init(&scanInit);
    962c:	4668      	mov	r0, sp
    962e:	f003 fbd3 	bl	cdd8 <bt_scan_init>
			bt_scan_cb_register(&scan_cb);			
    9632:	4823      	ldr	r0, [pc, #140]	; (96c0 <_ZN13deviceManager8initScanEv+0xd4>)
    9634:	f003 f9f8 	bl	ca28 <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    9638:	f003 fa80 	bl	cb3c <bt_scan_filter_remove_all>
		switch (sensorInfos)
    963c:	782b      	ldrb	r3, [r5, #0]
    963e:	3b01      	subs	r3, #1
    9640:	2b04      	cmp	r3, #4
    9642:	d825      	bhi.n	9690 <_ZN13deviceManager8initScanEv+0xa4>
    9644:	e8df f003 	tbb	[pc, r3]
    9648:	190f0d03 	.word	0x190f0d03
    964c:	22          	.byte	0x22
    964d:	00          	.byte	0x00
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    964e:	491d      	ldr	r1, [pc, #116]	; (96c4 <_ZN13deviceManager8initScanEv+0xd8>)
    9650:	2003      	movs	r0, #3
    9652:	f003 f9f9 	bl	ca48 <bt_scan_filter_add>
				if (err) {
    9656:	b1d8      	cbz	r0, 9690 <_ZN13deviceManager8initScanEv+0xa4>
					printk("Scanning filters cannot be set\n");
    9658:	481b      	ldr	r0, [pc, #108]	; (96c8 <_ZN13deviceManager8initScanEv+0xdc>)
    965a:	f010 fee4 	bl	1a426 <printk>
}
    965e:	b009      	add	sp, #36	; 0x24
    9660:	bd30      	pop	{r4, r5, pc}
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9662:	491a      	ldr	r1, [pc, #104]	; (96cc <_ZN13deviceManager8initScanEv+0xe0>)
    9664:	e7f4      	b.n	9650 <_ZN13deviceManager8initScanEv+0x64>
				if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    9666:	4b1a      	ldr	r3, [pc, #104]	; (96d0 <_ZN13deviceManager8initScanEv+0xe4>)
    9668:	781b      	ldrb	r3, [r3, #0]
    966a:	2b01      	cmp	r3, #1
    966c:	d801      	bhi.n	9672 <_ZN13deviceManager8initScanEv+0x86>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    966e:	4919      	ldr	r1, [pc, #100]	; (96d4 <_ZN13deviceManager8initScanEv+0xe8>)
    9670:	e7ee      	b.n	9650 <_ZN13deviceManager8initScanEv+0x64>
				else if (nbrConnectionsCentral == 2)
    9672:	2b02      	cmp	r3, #2
    9674:	d10c      	bne.n	9690 <_ZN13deviceManager8initScanEv+0xa4>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    9676:	4918      	ldr	r1, [pc, #96]	; (96d8 <_ZN13deviceManager8initScanEv+0xec>)
    9678:	e7ea      	b.n	9650 <_ZN13deviceManager8initScanEv+0x64>
				if (nbrConnectionsCentral == 0)
    967a:	4b15      	ldr	r3, [pc, #84]	; (96d0 <_ZN13deviceManager8initScanEv+0xe4>)
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	b90b      	cbnz	r3, 9684 <_ZN13deviceManager8initScanEv+0x98>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9680:	4916      	ldr	r1, [pc, #88]	; (96dc <_ZN13deviceManager8initScanEv+0xf0>)
    9682:	e7e5      	b.n	9650 <_ZN13deviceManager8initScanEv+0x64>
				else if (nbrConnectionsCentral == 1)
    9684:	2b01      	cmp	r3, #1
    9686:	d103      	bne.n	9690 <_ZN13deviceManager8initScanEv+0xa4>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    9688:	4915      	ldr	r1, [pc, #84]	; (96e0 <_ZN13deviceManager8initScanEv+0xf4>)
    968a:	e7e1      	b.n	9650 <_ZN13deviceManager8initScanEv+0x64>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    968c:	4915      	ldr	r1, [pc, #84]	; (96e4 <_ZN13deviceManager8initScanEv+0xf8>)
    968e:	e7df      	b.n	9650 <_ZN13deviceManager8initScanEv+0x64>
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    9690:	2100      	movs	r1, #0
    9692:	2004      	movs	r0, #4
    9694:	f003 fa7e 	bl	cb94 <bt_scan_filter_enable>
		if (err) {
    9698:	b110      	cbz	r0, 96a0 <_ZN13deviceManager8initScanEv+0xb4>
			printk("Filters cannot be turned on\n");
    969a:	4813      	ldr	r0, [pc, #76]	; (96e8 <_ZN13deviceManager8initScanEv+0xfc>)
    969c:	f010 fec3 	bl	1a426 <printk>
		startScan();
    96a0:	f7ff ff92 	bl	95c8 <_ZN13deviceManager9startScanEv>
    96a4:	e7db      	b.n	965e <_ZN13deviceManager8initScanEv+0x72>
		err = bt_le_scan_start(&scanParam, deviceFound);
    96a6:	4911      	ldr	r1, [pc, #68]	; (96ec <_ZN13deviceManager8initScanEv+0x100>)
    96a8:	f007 f9d8 	bl	10a5c <bt_le_scan_start>
		if (err) {
    96ac:	e7d7      	b.n	965e <_ZN13deviceManager8initScanEv+0x72>
    96ae:	bf00      	nop
    96b0:	2000c0cc 	.word	0x2000c0cc
    96b4:	00300060 	.word	0x00300060
    96b8:	0001ecc4 	.word	0x0001ecc4
    96bc:	20008580 	.word	0x20008580
    96c0:	20008170 	.word	0x20008170
    96c4:	0001eccc 	.word	0x0001eccc
    96c8:	0001f135 	.word	0x0001f135
    96cc:	0001ecd0 	.word	0x0001ecd0
    96d0:	2000c0d1 	.word	0x2000c0d1
    96d4:	0001ecd4 	.word	0x0001ecd4
    96d8:	0001ecd8 	.word	0x0001ecd8
    96dc:	0001ecdc 	.word	0x0001ecdc
    96e0:	0001ece0 	.word	0x0001ece0
    96e4:	0001ece4 	.word	0x0001ece4
    96e8:	0001f155 	.word	0x0001f155
    96ec:	0001a2c5 	.word	0x0001a2c5

000096f0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    96f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!subscriptionDone)
    96f2:	4e4f      	ldr	r6, [pc, #316]	; (9830 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x140>)
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    96f4:	4604      	mov	r4, r0
	if (!subscriptionDone)
    96f6:	7833      	ldrb	r3, [r6, #0]
    96f8:	2b00      	cmp	r3, #0
    96fa:	d135      	bne.n	9768 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x78>
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    96fc:	494d      	ldr	r1, [pc, #308]	; (9834 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x144>)
    96fe:	f002 ffc7 	bl	c690 <bt_gatt_dm_char_by_uuid>
		if (!chrc) {
    9702:	4605      	mov	r5, r0
    9704:	b970      	cbnz	r0, 9724 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x34>
			printk("Missing CSC measurement characteristic\n");
    9706:	484c      	ldr	r0, [pc, #304]	; (9838 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x148>)
			printk("Missing CSC measurement char CCC descriptor\n");
    9708:	f010 fe8d 	bl	1a426 <printk>
			err = bt_gatt_dm_data_release(dm);
    970c:	4620      	mov	r0, r4
    970e:	f011 fb27 	bl	1ad60 <bt_gatt_dm_data_release>
			if (err) {
    9712:	4601      	mov	r1, r0
    9714:	2800      	cmp	r0, #0
    9716:	d044      	beq.n	97a2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
				printk("Could not release discovery data, err: %d\n", err);
    9718:	4848      	ldr	r0, [pc, #288]	; (983c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x14c>)
}
    971a:	b003      	add	sp, #12
    971c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				printk("Could not release discovery data, err: %d\n", err);
    9720:	f010 be81 	b.w	1a426 <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    9724:	4601      	mov	r1, r0
    9726:	4a46      	ldr	r2, [pc, #280]	; (9840 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x150>)
    9728:	4620      	mov	r0, r4
    972a:	f011 fb07 	bl	1ad3c <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    972e:	b908      	cbnz	r0, 9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x44>
			printk("Missing CSC measurement char CCC descriptor\n");
    9730:	4844      	ldr	r0, [pc, #272]	; (9844 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x154>)
    9732:	e7e9      	b.n	9708 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18>
		param.value_handle = desc->handle;
    9734:	8883      	ldrh	r3, [r0, #4]
    9736:	4f44      	ldr	r7, [pc, #272]	; (9848 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x158>)
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9738:	4629      	mov	r1, r5
    973a:	4620      	mov	r0, r4
    973c:	4a43      	ldr	r2, [pc, #268]	; (984c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x15c>)
		param.value_handle = desc->handle;
    973e:	813b      	strh	r3, [r7, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9740:	f011 fafc 	bl	1ad3c <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9744:	2800      	cmp	r0, #0
    9746:	d0f3      	beq.n	9730 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x40>
		param.ccc_handle = desc->handle;
    9748:	8883      	ldrh	r3, [r0, #4]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    974a:	4620      	mov	r0, r4
		param.ccc_handle = desc->handle;
    974c:	817b      	strh	r3, [r7, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    974e:	f011 faa6 	bl	1ac9e <bt_gatt_dm_conn_get>
    9752:	4639      	mov	r1, r7
    9754:	f00b f972 	bl	14a3c <bt_gatt_subscribe>
		if (err) {
    9758:	4601      	mov	r1, r0
    975a:	b110      	cbz	r0, 9762 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x72>
			printk("Subscribtion failed (err %d)\n", err);
    975c:	483c      	ldr	r0, [pc, #240]	; (9850 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x160>)
    975e:	f010 fe62 	bl	1a426 <printk>
		bt_gatt_dm_data_release(dm);
    9762:	4620      	mov	r0, r4
    9764:	f011 fafc 	bl	1ad60 <bt_gatt_dm_data_release>
	printk("nbr connections %d\n",nbrConnectionsCentral);
    9768:	4c3a      	ldr	r4, [pc, #232]	; (9854 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    976a:	483b      	ldr	r0, [pc, #236]	; (9858 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x168>)
    976c:	7821      	ldrb	r1, [r4, #0]
    976e:	f010 fe5a 	bl	1a426 <printk>
	switch (nbrConnectionsCentral)
    9772:	7822      	ldrb	r2, [r4, #0]
    9774:	2a02      	cmp	r2, #2
    9776:	d026      	beq.n	97c6 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xd6>
    9778:	2a03      	cmp	r2, #3
    977a:	d04d      	beq.n	9818 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x128>
    977c:	2a01      	cmp	r2, #1
    977e:	d110      	bne.n	97a2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
		if (nbrAddresses == 1)
    9780:	4b36      	ldr	r3, [pc, #216]	; (985c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x16c>)
    9782:	781c      	ldrb	r4, [r3, #0]
    9784:	2c01      	cmp	r4, #1
    9786:	d10e      	bne.n	97a6 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb6>
			connectedCode[0] = 14;
    9788:	230e      	movs	r3, #14
    978a:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    978e:	4b34      	ldr	r3, [pc, #208]	; (9860 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
    9790:	4622      	mov	r2, r4
    9792:	6818      	ldr	r0, [r3, #0]
    9794:	a901      	add	r1, sp, #4
    9796:	f000 fbab 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
			printk("Discovery completed\n");
    979a:	4832      	ldr	r0, [pc, #200]	; (9864 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x174>)
    979c:	f010 fe43 	bl	1a426 <printk>
			subscriptionDone = true;
    97a0:	7034      	strb	r4, [r6, #0]
}
    97a2:	b003      	add	sp, #12
    97a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (nbrAddresses == 2)	
    97a6:	2c02      	cmp	r4, #2
    97a8:	d1fb      	bne.n	97a2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
			connectedCode[0] = 15;
    97aa:	230f      	movs	r3, #15
    97ac:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    97b0:	4b2b      	ldr	r3, [pc, #172]	; (9860 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
    97b2:	a901      	add	r1, sp, #4
    97b4:	6818      	ldr	r0, [r3, #0]
    97b6:	f000 fb9b 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
			initScan();
    97ba:	f7ff ff17 	bl	95ec <_ZN13deviceManager8initScanEv>
			printk("First discovery completed\n");			
    97be:	482a      	ldr	r0, [pc, #168]	; (9868 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x178>)
    97c0:	f010 fe31 	bl	1a426 <printk>
    97c4:	e7ed      	b.n	97a2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
		if (nbrAddresses == 2)
    97c6:	4b25      	ldr	r3, [pc, #148]	; (985c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x16c>)
    97c8:	781b      	ldrb	r3, [r3, #0]
    97ca:	2b02      	cmp	r3, #2
    97cc:	d113      	bne.n	97f6 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x106>
			connectedCode[0] = 16;
    97ce:	2310      	movs	r3, #16
    97d0:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn, connectedCode, sizeof(connectedCode));
    97d4:	4b22      	ldr	r3, [pc, #136]	; (9860 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
    97d6:	2201      	movs	r2, #1
    97d8:	6818      	ldr	r0, [r3, #0]
    97da:	a901      	add	r1, sp, #4
    97dc:	f000 fb88 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");
    97e0:	4822      	ldr	r0, [pc, #136]	; (986c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x17c>)
			printk("Third discovery completed\n");
    97e2:	f010 fe20 	bl	1a426 <printk>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    97e6:	2001      	movs	r0, #1
    97e8:	f013 fd8e 	bl	1d308 <dk_set_led_on>
			connectedC = true;	
    97ec:	2301      	movs	r3, #1
    97ee:	4a20      	ldr	r2, [pc, #128]	; (9870 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
			subscriptionDone = true;		
    97f0:	7033      	strb	r3, [r6, #0]
			connectedC = true;	
    97f2:	7013      	strb	r3, [r2, #0]
		break;
    97f4:	e7d5      	b.n	97a2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
		else if (nbrAddresses == 3) 
    97f6:	2b03      	cmp	r3, #3
    97f8:	d1d3      	bne.n	97a2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
			connectedCode[0] = 17;
    97fa:	2311      	movs	r3, #17
    97fc:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9800:	4b17      	ldr	r3, [pc, #92]	; (9860 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
    9802:	2201      	movs	r2, #1
    9804:	6818      	ldr	r0, [r3, #0]
    9806:	a901      	add	r1, sp, #4
    9808:	f000 fb72 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");		
    980c:	4817      	ldr	r0, [pc, #92]	; (986c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x17c>)
    980e:	f010 fe0a 	bl	1a426 <printk>
			initScan();
    9812:	f7ff feeb 	bl	95ec <_ZN13deviceManager8initScanEv>
    9816:	e7c4      	b.n	97a2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
			connectedCode[0] = 18;
    9818:	2312      	movs	r3, #18
    981a:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    981e:	4b10      	ldr	r3, [pc, #64]	; (9860 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
    9820:	2201      	movs	r2, #1
    9822:	6818      	ldr	r0, [r3, #0]
    9824:	a901      	add	r1, sp, #4
    9826:	f000 fb63 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
			printk("Third discovery completed\n");
    982a:	4812      	ldr	r0, [pc, #72]	; (9874 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x184>)
    982c:	e7d9      	b.n	97e2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xf2>
    982e:	bf00      	nop
    9830:	2000c0d0 	.word	0x2000c0d0
    9834:	0001ecf0 	.word	0x0001ecf0
    9838:	0001f172 	.word	0x0001f172
    983c:	0001f19a 	.word	0x0001f19a
    9840:	0001ecf4 	.word	0x0001ecf4
    9844:	0001f1c5 	.word	0x0001f1c5
    9848:	20008158 	.word	0x20008158
    984c:	0001ecf8 	.word	0x0001ecf8
    9850:	0001f1f2 	.word	0x0001f1f2
    9854:	2000c0d1 	.word	0x2000c0d1
    9858:	0001f210 	.word	0x0001f210
    985c:	2000c0ce 	.word	0x2000c0ce
    9860:	2000a610 	.word	0x2000a610
    9864:	0001f224 	.word	0x0001f224
    9868:	0001f239 	.word	0x0001f239
    986c:	0001f254 	.word	0x0001f254
    9870:	2000c0c9 	.word	0x2000c0c9
    9874:	0001f270 	.word	0x0001f270

00009878 <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    9878:	b510      	push	{r4, lr}
    987a:	4604      	mov	r4, r0
	printk("Init Central\n");
    987c:	481c      	ldr	r0, [pc, #112]	; (98f0 <_ZN13deviceManager11initCentralEv+0x78>)
    987e:	f010 fdd2 	bl	1a426 <printk>
	if (getDevice() == 1 || getDevice() == 3)
    9882:	f7ff fe15 	bl	94b0 <_ZN13deviceManager9getDeviceEv>
    9886:	2801      	cmp	r0, #1
    9888:	d00a      	beq.n	98a0 <_ZN13deviceManager11initCentralEv+0x28>
    988a:	2803      	cmp	r0, #3
    988c:	d12f      	bne.n	98ee <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    988e:	4620      	mov	r0, r4
    9890:	f007 fb0a 	bl	10ea8 <bt_conn_cb_register>
		initScan();
    9894:	f7ff feaa 	bl	95ec <_ZN13deviceManager8initScanEv>
}
    9898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    989c:	f7ff be94 	b.w	95c8 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    98a0:	2000      	movs	r0, #0
    98a2:	f006 fcff 	bl	102a4 <bt_enable>
			if (err) {
    98a6:	4601      	mov	r1, r0
    98a8:	b120      	cbz	r0, 98b4 <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    98aa:	4812      	ldr	r0, [pc, #72]	; (98f4 <_ZN13deviceManager11initCentralEv+0x7c>)
}
    98ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    98b0:	f010 bdb9 	b.w	1a426 <printk>
			printk("Bluetooth ready\n");
    98b4:	4810      	ldr	r0, [pc, #64]	; (98f8 <_ZN13deviceManager11initCentralEv+0x80>)
    98b6:	f010 fdb6 	bl	1a426 <printk>
			err = dk_leds_init();
    98ba:	f00c fdc9 	bl	16450 <dk_leds_init>
			if (err) {
    98be:	4601      	mov	r1, r0
    98c0:	b108      	cbz	r0, 98c6 <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    98c2:	480e      	ldr	r0, [pc, #56]	; (98fc <_ZN13deviceManager11initCentralEv+0x84>)
    98c4:	e7f2      	b.n	98ac <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    98c6:	f7ff fe07 	bl	94d8 <_ZN13deviceManager10initButtonEv>
			if (err) {
    98ca:	4601      	mov	r1, r0
    98cc:	b108      	cbz	r0, 98d2 <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    98ce:	480c      	ldr	r0, [pc, #48]	; (9900 <_ZN13deviceManager11initCentralEv+0x88>)
    98d0:	e7ec      	b.n	98ac <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    98d2:	f104 0014 	add.w	r0, r4, #20
    98d6:	f003 fd13 	bl	d300 <bt_lbs_init>
			if (err) {
    98da:	4601      	mov	r1, r0
    98dc:	b108      	cbz	r0, 98e2 <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    98de:	4809      	ldr	r0, [pc, #36]	; (9904 <_ZN13deviceManager11initCentralEv+0x8c>)
    98e0:	e7e4      	b.n	98ac <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    98e2:	f011 f895 	bl	1aa10 <settings_load>
				printk("Settings loaded\n");
    98e6:	4808      	ldr	r0, [pc, #32]	; (9908 <_ZN13deviceManager11initCentralEv+0x90>)
    98e8:	f010 fd9d 	bl	1a426 <printk>
    98ec:	e7cf      	b.n	988e <_ZN13deviceManager11initCentralEv+0x16>
}
    98ee:	bd10      	pop	{r4, pc}
    98f0:	0001f28b 	.word	0x0001f28b
    98f4:	0001f0b2 	.word	0x0001f0b2
    98f8:	0001f299 	.word	0x0001f299
    98fc:	0001f07a 	.word	0x0001f07a
    9900:	0001f095 	.word	0x0001f095
    9904:	0001f0e9 	.word	0x0001f0e9
    9908:	0001f2aa 	.word	0x0001f2aa

0000990c <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    990c:	b410      	push	{r4}
    isPeripheral = p;
    990e:	4c09      	ldr	r4, [pc, #36]	; (9934 <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    9910:	4603      	mov	r3, r0
    isPeripheral = p;
    9912:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    9914:	4c08      	ldr	r4, [pc, #32]	; (9938 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    9916:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9918:	b139      	cbz	r1, 992a <_ZN13deviceManager9setDeviceEbb+0x1e>
    991a:	b11a      	cbz	r2, 9924 <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    991c:	4618      	mov	r0, r3
}
    991e:	bc10      	pop	{r4}
		initPeripheral();
    9920:	f7ff be10 	b.w	9544 <_ZN13deviceManager14initPeripheralEv>
}
    9924:	bc10      	pop	{r4}
		initCentral();
    9926:	f7ff bfa7 	b.w	9878 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    992a:	2a00      	cmp	r2, #0
    992c:	d1f6      	bne.n	991c <_ZN13deviceManager9setDeviceEbb+0x10>
}
    992e:	bc10      	pop	{r4}
    9930:	4770      	bx	lr
    9932:	bf00      	nop
    9934:	2000c0cd 	.word	0x2000c0cd
    9938:	2000c0d3 	.word	0x2000c0d3

0000993c <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    993c:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    993e:	4803      	ldr	r0, [pc, #12]	; (994c <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9940:	f010 fd71 	bl	1a426 <printk>
}
    9944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9948:	f7ff be3e 	b.w	95c8 <_ZN13deviceManager9startScanEv>
    994c:	0001f2bb 	.word	0x0001f2bb

00009950 <_ZN13deviceManager11discoverCSCEv>:
{
    9950:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9952:	4b0a      	ldr	r3, [pc, #40]	; (997c <_ZN13deviceManager11discoverCSCEv+0x2c>)
    9954:	4c0a      	ldr	r4, [pc, #40]	; (9980 <_ZN13deviceManager11discoverCSCEv+0x30>)
    9956:	7818      	ldrb	r0, [r3, #0]
    9958:	490a      	ldr	r1, [pc, #40]	; (9984 <_ZN13deviceManager11discoverCSCEv+0x34>)
    995a:	3801      	subs	r0, #1
    995c:	2300      	movs	r3, #0
    995e:	4a0a      	ldr	r2, [pc, #40]	; (9988 <_ZN13deviceManager11discoverCSCEv+0x38>)
    9960:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9964:	f002 fec0 	bl	c6e8 <bt_gatt_dm_start>
	if (err) 
    9968:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    996c:	d004      	beq.n	9978 <_ZN13deviceManager11discoverCSCEv+0x28>
}
    996e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9972:	4806      	ldr	r0, [pc, #24]	; (998c <_ZN13deviceManager11discoverCSCEv+0x3c>)
    9974:	f010 bd57 	b.w	1a426 <printk>
}
    9978:	bd10      	pop	{r4, pc}
    997a:	bf00      	nop
    997c:	2000c0d1 	.word	0x2000c0d1
    9980:	2000a614 	.word	0x2000a614
    9984:	0001ece8 	.word	0x0001ece8
    9988:	20008140 	.word	0x20008140
    998c:	0001f2ce 	.word	0x0001f2ce

00009990 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    9990:	b507      	push	{r0, r1, r2, lr}
	printk("Service not found!\n");
    9992:	4808      	ldr	r0, [pc, #32]	; (99b4 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x24>)
    9994:	f010 fd47 	bl	1a426 <printk>
	error[0] = 10;
    9998:	230a      	movs	r3, #10
    999a:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    999e:	4b06      	ldr	r3, [pc, #24]	; (99b8 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    99a0:	2201      	movs	r2, #1
    99a2:	6818      	ldr	r0, [r3, #0]
    99a4:	a901      	add	r1, sp, #4
    99a6:	f000 faa3 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
	discoverCSC();
    99aa:	f7ff ffd1 	bl	9950 <_ZN13deviceManager11discoverCSCEv>
}
    99ae:	b003      	add	sp, #12
    99b0:	f85d fb04 	ldr.w	pc, [sp], #4
    99b4:	0001f2f9 	.word	0x0001f2f9
    99b8:	2000a610 	.word	0x2000a610

000099bc <_ZN13deviceManager10discoverHREv>:
{
    99bc:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_DIS, &discovery_cb_HR, NULL);
    99be:	4b0a      	ldr	r3, [pc, #40]	; (99e8 <_ZN13deviceManager10discoverHREv+0x2c>)
    99c0:	4c0a      	ldr	r4, [pc, #40]	; (99ec <_ZN13deviceManager10discoverHREv+0x30>)
    99c2:	7818      	ldrb	r0, [r3, #0]
    99c4:	490a      	ldr	r1, [pc, #40]	; (99f0 <_ZN13deviceManager10discoverHREv+0x34>)
    99c6:	3801      	subs	r0, #1
    99c8:	2300      	movs	r3, #0
    99ca:	4a0a      	ldr	r2, [pc, #40]	; (99f4 <_ZN13deviceManager10discoverHREv+0x38>)
    99cc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    99d0:	f002 fe8a 	bl	c6e8 <bt_gatt_dm_start>
	if (err) 
    99d4:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    99d8:	d004      	beq.n	99e4 <_ZN13deviceManager10discoverHREv+0x28>
}
    99da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    99de:	4806      	ldr	r0, [pc, #24]	; (99f8 <_ZN13deviceManager10discoverHREv+0x3c>)
    99e0:	f010 bd21 	b.w	1a426 <printk>
}
    99e4:	bd10      	pop	{r4, pc}
    99e6:	bf00      	nop
    99e8:	2000c0d1 	.word	0x2000c0d1
    99ec:	2000a614 	.word	0x2000a614
    99f0:	0001ecec 	.word	0x0001ecec
    99f4:	2000814c 	.word	0x2000814c
    99f8:	0001f2ce 	.word	0x0001f2ce

000099fc <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    99fc:	b570      	push	{r4, r5, r6, lr}
    99fe:	b090      	sub	sp, #64	; 0x40
    9a00:	460c      	mov	r4, r1
	int error = bt_conn_get_info(conn,&info);
    9a02:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9a04:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    9a06:	f007 fd4f 	bl	114a8 <bt_conn_get_info>
	if (error)
    9a0a:	b120      	cbz	r0, 9a16 <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    9a0c:	4831      	ldr	r0, [pc, #196]	; (9ad4 <_ZN13deviceManager9connectedEP7bt_connh+0xd8>)
    9a0e:	f010 fd0a 	bl	1a426 <printk>
}
    9a12:	b010      	add	sp, #64	; 0x40
    9a14:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9a16:	f89d 6005 	ldrb.w	r6, [sp, #5]
    9a1a:	2e00      	cmp	r6, #0
    9a1c:	d136      	bne.n	9a8c <_ZN13deviceManager9connectedEP7bt_connh+0x90>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9a1e:	4628      	mov	r0, r5
    9a20:	f012 f9f9 	bl	1be16 <bt_conn_get_dst>
    9a24:	221e      	movs	r2, #30
    9a26:	a908      	add	r1, sp, #32
    9a28:	f7ff fcce 	bl	93c8 <bt_addr_le_to_str.isra.0>
		if (err) {
    9a2c:	b13c      	cbz	r4, 9a3e <_ZN13deviceManager9connectedEP7bt_connh+0x42>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9a2e:	4622      	mov	r2, r4
    9a30:	4829      	ldr	r0, [pc, #164]	; (9ad8 <_ZN13deviceManager9connectedEP7bt_connh+0xdc>)
    9a32:	a908      	add	r1, sp, #32
    9a34:	f010 fcf7 	bl	1a426 <printk>
			startScan();
    9a38:	f7ff fdc6 	bl	95c8 <_ZN13deviceManager9startScanEv>
			return;
    9a3c:	e7e9      	b.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);;
    9a3e:	4c27      	ldr	r4, [pc, #156]	; (9adc <_ZN13deviceManager9connectedEP7bt_connh+0xe0>)
		printk("Connected: %s\n", addr);
    9a40:	a908      	add	r1, sp, #32
    9a42:	4827      	ldr	r0, [pc, #156]	; (9ae0 <_ZN13deviceManager9connectedEP7bt_connh+0xe4>)
    9a44:	f010 fcef 	bl	1a426 <printk>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);;
    9a48:	4628      	mov	r0, r5
    9a4a:	7826      	ldrb	r6, [r4, #0]
    9a4c:	f012 f9aa 	bl	1bda4 <bt_conn_ref>
    9a50:	4b24      	ldr	r3, [pc, #144]	; (9ae4 <_ZN13deviceManager9connectedEP7bt_connh+0xe8>)
    9a52:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
		bt_conn_unref(conn);
    9a56:	4628      	mov	r0, r5
    9a58:	f007 fb94 	bl	11184 <bt_conn_unref>
		switch (sensorInfos)
    9a5c:	4a22      	ldr	r2, [pc, #136]	; (9ae8 <_ZN13deviceManager9connectedEP7bt_connh+0xec>)
		nbrConnectionsCentral++;
    9a5e:	7823      	ldrb	r3, [r4, #0]
    9a60:	7812      	ldrb	r2, [r2, #0]
    9a62:	3301      	adds	r3, #1
    9a64:	b2db      	uxtb	r3, r3
    9a66:	3a01      	subs	r2, #1
    9a68:	7023      	strb	r3, [r4, #0]
		switch (sensorInfos)
    9a6a:	2a04      	cmp	r2, #4
    9a6c:	d8d1      	bhi.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9a6e:	e8df f002 	tbb	[pc, r2]
    9a72:	0505      	.short	0x0505
    9a74:	0803      	.short	0x0803
    9a76:	0a          	.byte	0x0a
    9a77:	00          	.byte	0x00
			if (nbrConnectionsCentral <= 2)
    9a78:	2b02      	cmp	r3, #2
    9a7a:	d804      	bhi.n	9a86 <_ZN13deviceManager9connectedEP7bt_connh+0x8a>
				discoverCSC();
    9a7c:	f7ff ff68 	bl	9950 <_ZN13deviceManager11discoverCSCEv>
    9a80:	e7c7      	b.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			if (nbrConnectionsCentral == 1)
    9a82:	2b01      	cmp	r3, #1
    9a84:	d0fa      	beq.n	9a7c <_ZN13deviceManager9connectedEP7bt_connh+0x80>
			discoverHR();
    9a86:	f7ff ff99 	bl	99bc <_ZN13deviceManager10discoverHREv>
			break;
    9a8a:	e7c2      	b.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9a8c:	2e01      	cmp	r6, #1
    9a8e:	d1c0      	bne.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    9a90:	b124      	cbz	r4, 9a9c <_ZN13deviceManager9connectedEP7bt_connh+0xa0>
			printk("Connection failed (err %u)\n", err);
    9a92:	4621      	mov	r1, r4
    9a94:	4815      	ldr	r0, [pc, #84]	; (9aec <_ZN13deviceManager9connectedEP7bt_connh+0xf0>)
    9a96:	f010 fcc6 	bl	1a426 <printk>
			return;
    9a9a:	e7ba      	b.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected with application\n");
    9a9c:	4814      	ldr	r0, [pc, #80]	; (9af0 <_ZN13deviceManager9connectedEP7bt_connh+0xf4>)
    9a9e:	f010 fcc2 	bl	1a426 <printk>
		connectedP = true;
    9aa2:	4b14      	ldr	r3, [pc, #80]	; (9af4 <_ZN13deviceManager9connectedEP7bt_connh+0xf8>)
		peripheralConn = bt_conn_ref(conn);
    9aa4:	4628      	mov	r0, r5
		connectedP = true;
    9aa6:	701e      	strb	r6, [r3, #0]
		peripheralConn = bt_conn_ref(conn);
    9aa8:	f012 f97c 	bl	1bda4 <bt_conn_ref>
    9aac:	4b12      	ldr	r3, [pc, #72]	; (9af8 <_ZN13deviceManager9connectedEP7bt_connh+0xfc>)
    9aae:	6018      	str	r0, [r3, #0]
		bt_conn_unref(conn);
    9ab0:	4628      	mov	r0, r5
    9ab2:	f007 fb67 	bl	11184 <bt_conn_unref>
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9ab6:	4620      	mov	r0, r4
    9ab8:	f013 fc26 	bl	1d308 <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9abc:	f7ff fcf8 	bl	94b0 <_ZN13deviceManager9getDeviceEv>
    9ac0:	2803      	cmp	r0, #3
    9ac2:	d1a6      	bne.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9ac4:	4b05      	ldr	r3, [pc, #20]	; (9adc <_ZN13deviceManager9connectedEP7bt_connh+0xe0>)
    9ac6:	781b      	ldrb	r3, [r3, #0]
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d1a2      	bne.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    9acc:	f7ff fd8e 	bl	95ec <_ZN13deviceManager8initScanEv>
    9ad0:	e79f      	b.n	9a12 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9ad2:	bf00      	nop
    9ad4:	0001f30d 	.word	0x0001f30d
    9ad8:	0001f333 	.word	0x0001f333
    9adc:	2000c0d1 	.word	0x2000c0d1
    9ae0:	0001f351 	.word	0x0001f351
    9ae4:	2000a614 	.word	0x2000a614
    9ae8:	2000c0cc 	.word	0x2000c0cc
    9aec:	0001f360 	.word	0x0001f360
    9af0:	0001f37c 	.word	0x0001f37c
    9af4:	2000c0ca 	.word	0x2000c0ca
    9af8:	2000a610 	.word	0x2000a610

00009afc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    9afc:	b570      	push	{r4, r5, r6, lr}
    9afe:	b08e      	sub	sp, #56	; 0x38
    9b00:	4605      	mov	r5, r0
	nbrAddresses = getNbrOfAddresses();
    9b02:	f000 fa25 	bl	9f50 <_Z17getNbrOfAddressesv>
    9b06:	4b41      	ldr	r3, [pc, #260]	; (9c0c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x110>)
    9b08:	4604      	mov	r4, r0
    9b0a:	4e41      	ldr	r6, [pc, #260]	; (9c10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x114>)
    9b0c:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    9b0e:	2800      	cmp	r0, #0
    9b10:	d045      	beq.n	9b9e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa2>
		ready = true;
    9b12:	2101      	movs	r1, #1
		switch (nbrAddresses)
    9b14:	2802      	cmp	r0, #2
		ready = true;
    9b16:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    9b18:	d031      	beq.n	9b7e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x82>
    9b1a:	2803      	cmp	r0, #3
    9b1c:	d035      	beq.n	9b8a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8e>
    9b1e:	4288      	cmp	r0, r1
    9b20:	d103      	bne.n	9b2a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
			getAddress(sensor1,1);
    9b22:	4601      	mov	r1, r0
    9b24:	483b      	ldr	r0, [pc, #236]	; (9c14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
			getAddress(sensor2,2);
    9b26:	f000 fa19 	bl	9f5c <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9b2a:	682b      	ldr	r3, [r5, #0]
    9b2c:	221e      	movs	r2, #30
    9b2e:	6818      	ldr	r0, [r3, #0]
    9b30:	a906      	add	r1, sp, #24
    9b32:	f7ff fc49 	bl	93c8 <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    9b36:	682b      	ldr	r3, [r5, #0]
    9b38:	2212      	movs	r2, #18
    9b3a:	6818      	ldr	r0, [r3, #0]
    9b3c:	a901      	add	r1, sp, #4
    9b3e:	f7ff fc43 	bl	93c8 <bt_addr_le_to_str.isra.0>
	if (ready)
    9b42:	7833      	ldrb	r3, [r6, #0]
    9b44:	2b00      	cmp	r3, #0
    9b46:	d03d      	beq.n	9bc4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
		bt_scan_stop();
    9b48:	f011 f922 	bl	1ad90 <bt_scan_stop>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9b4c:	4931      	ldr	r1, [pc, #196]	; (9c14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9b4e:	a801      	add	r0, sp, #4
    9b50:	f010 fbba 	bl	1a2c8 <_ZN13deviceManager14checkAddressesEPcS0_>
    9b54:	b338      	cbz	r0, 9ba6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
    9b56:	4c30      	ldr	r4, [pc, #192]	; (9c18 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    9b58:	7823      	ldrb	r3, [r4, #0]
    9b5a:	b323      	cbz	r3, 9ba6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
			printk("Correct sensor found\n");
    9b5c:	482f      	ldr	r0, [pc, #188]	; (9c1c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9b5e:	f010 fc62 	bl	1a426 <printk>
			once_sensor1 = false;
    9b62:	2300      	movs	r3, #0
    9b64:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9b66:	4b2e      	ldr	r3, [pc, #184]	; (9c20 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9b68:	6828      	ldr	r0, [r5, #0]
    9b6a:	781a      	ldrb	r2, [r3, #0]
    9b6c:	4b2d      	ldr	r3, [pc, #180]	; (9c24 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9b6e:	492e      	ldr	r1, [pc, #184]	; (9c28 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9b70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9b74:	686a      	ldr	r2, [r5, #4]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9b76:	6800      	ldr	r0, [r0, #0]
    9b78:	f007 fcc2 	bl	11500 <bt_conn_le_create>
}
    9b7c:	e022      	b.n	9bc4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
			getAddress(sensor1,1);
    9b7e:	4825      	ldr	r0, [pc, #148]	; (9c14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9b80:	f000 f9ec 	bl	9f5c <_Z10getAddressPch>
			getAddress(sensor2,2);
    9b84:	4621      	mov	r1, r4
    9b86:	4829      	ldr	r0, [pc, #164]	; (9c2c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9b88:	e7cd      	b.n	9b26 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
			getAddress(sensor1,1);
    9b8a:	4822      	ldr	r0, [pc, #136]	; (9c14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9b8c:	f000 f9e6 	bl	9f5c <_Z10getAddressPch>
			getAddress(sensor2,2);
    9b90:	2102      	movs	r1, #2
    9b92:	4826      	ldr	r0, [pc, #152]	; (9c2c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9b94:	f000 f9e2 	bl	9f5c <_Z10getAddressPch>
			getAddress(sensor3,3);
    9b98:	4621      	mov	r1, r4
    9b9a:	4825      	ldr	r0, [pc, #148]	; (9c30 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9b9c:	e7c3      	b.n	9b26 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
		initScan();
    9b9e:	f7ff fd25 	bl	95ec <_ZN13deviceManager8initScanEv>
		ready = false;
    9ba2:	7034      	strb	r4, [r6, #0]
    9ba4:	e7c1      	b.n	9b2a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2)
    9ba6:	4921      	ldr	r1, [pc, #132]	; (9c2c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9ba8:	a801      	add	r0, sp, #4
    9baa:	f010 fb8d 	bl	1a2c8 <_ZN13deviceManager14checkAddressesEPcS0_>
    9bae:	b110      	cbz	r0, 9bb6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xba>
    9bb0:	4c20      	ldr	r4, [pc, #128]	; (9c34 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9bb2:	7823      	ldrb	r3, [r4, #0]
    9bb4:	b943      	cbnz	r3, 9bc8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xcc>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9bb6:	491e      	ldr	r1, [pc, #120]	; (9c30 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9bb8:	a801      	add	r0, sp, #4
    9bba:	f010 fb85 	bl	1a2c8 <_ZN13deviceManager14checkAddressesEPcS0_>
    9bbe:	b988      	cbnz	r0, 9be4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe8>
			startScan();
    9bc0:	f7ff fd02 	bl	95c8 <_ZN13deviceManager9startScanEv>
}
    9bc4:	b00e      	add	sp, #56	; 0x38
    9bc6:	bd70      	pop	{r4, r5, r6, pc}
			printk("Correct sensor found\n");
    9bc8:	4814      	ldr	r0, [pc, #80]	; (9c1c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9bca:	f010 fc2c 	bl	1a426 <printk>
			once_sensor2 = false;
    9bce:	2300      	movs	r3, #0
    9bd0:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9bd2:	4b13      	ldr	r3, [pc, #76]	; (9c20 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9bd4:	6828      	ldr	r0, [r5, #0]
    9bd6:	781a      	ldrb	r2, [r3, #0]
    9bd8:	4b12      	ldr	r3, [pc, #72]	; (9c24 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9bda:	4917      	ldr	r1, [pc, #92]	; (9c38 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9bdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9be0:	686a      	ldr	r2, [r5, #4]
    9be2:	e7c8      	b.n	9b76 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9be4:	4c15      	ldr	r4, [pc, #84]	; (9c3c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9be6:	7823      	ldrb	r3, [r4, #0]
    9be8:	2b00      	cmp	r3, #0
    9bea:	d0e9      	beq.n	9bc0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
			printk("Correct sensor found\n");
    9bec:	480b      	ldr	r0, [pc, #44]	; (9c1c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9bee:	f010 fc1a 	bl	1a426 <printk>
			once_sensor3 = false;
    9bf2:	2300      	movs	r3, #0
    9bf4:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    9bf6:	f011 f8cb 	bl	1ad90 <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9bfa:	4b09      	ldr	r3, [pc, #36]	; (9c20 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9bfc:	6828      	ldr	r0, [r5, #0]
    9bfe:	781a      	ldrb	r2, [r3, #0]
    9c00:	4b08      	ldr	r3, [pc, #32]	; (9c24 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9c02:	490f      	ldr	r1, [pc, #60]	; (9c40 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9c04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9c08:	686a      	ldr	r2, [r5, #4]
    9c0a:	e7b4      	b.n	9b76 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
    9c0c:	2000c0ce 	.word	0x2000c0ce
    9c10:	2000c0d9 	.word	0x2000c0d9
    9c14:	2000c096 	.word	0x2000c096
    9c18:	2000857d 	.word	0x2000857d
    9c1c:	0001f398 	.word	0x0001f398
    9c20:	2000c0d1 	.word	0x2000c0d1
    9c24:	2000a614 	.word	0x2000a614
    9c28:	0001e3bc 	.word	0x0001e3bc
    9c2c:	2000c0a7 	.word	0x2000c0a7
    9c30:	2000c0b8 	.word	0x2000c0b8
    9c34:	2000857e 	.word	0x2000857e
    9c38:	0001e3cc 	.word	0x0001e3cc
    9c3c:	2000857f 	.word	0x2000857f
    9c40:	0001e3dc 	.word	0x0001e3dc

00009c44 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c48:	b096      	sub	sp, #88	; 0x58
    9c4a:	460e      	mov	r6, r1
	int error = bt_conn_get_info(conn,&info);
    9c4c:	a907      	add	r1, sp, #28
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9c4e:	4607      	mov	r7, r0
	int error = bt_conn_get_info(conn,&info);
    9c50:	f007 fc2a 	bl	114a8 <bt_conn_get_info>
	if (error)
    9c54:	4605      	mov	r5, r0
    9c56:	b128      	cbz	r0, 9c64 <_ZN13deviceManager12disconnectedEP7bt_connh+0x20>
		printk("Cannot get info of connection object\n");
    9c58:	4852      	ldr	r0, [pc, #328]	; (9da4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x160>)
    9c5a:	f010 fbe4 	bl	1a426 <printk>
}
    9c5e:	b016      	add	sp, #88	; 0x58
    9c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9c64:	f89d 401d 	ldrb.w	r4, [sp, #29]
    9c68:	2c01      	cmp	r4, #1
    9c6a:	d10b      	bne.n	9c84 <_ZN13deviceManager12disconnectedEP7bt_connh+0x40>
		printk("Disconnected from Application (reason %u)\n", reason);
    9c6c:	4631      	mov	r1, r6
    9c6e:	484e      	ldr	r0, [pc, #312]	; (9da8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x164>)
    9c70:	f010 fbd9 	bl	1a426 <printk>
		connectedP = false;
    9c74:	4b4d      	ldr	r3, [pc, #308]	; (9dac <_ZN13deviceManager12disconnectedEP7bt_connh+0x168>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9c76:	4628      	mov	r0, r5
		connectedP = false;
    9c78:	701d      	strb	r5, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9c7a:	f013 fb48 	bl	1d30e <dk_set_led_off>
		startAdvertising();
    9c7e:	f7ff fc3b 	bl	94f8 <_ZN13deviceManager16startAdvertisingEv>
    9c82:	e7ec      	b.n	9c5e <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9c84:	2c00      	cmp	r4, #0
    9c86:	d1ea      	bne.n	9c5e <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9c88:	4638      	mov	r0, r7
    9c8a:	f012 f8c4 	bl	1be16 <bt_conn_get_dst>
    9c8e:	221e      	movs	r2, #30
    9c90:	a90e      	add	r1, sp, #56	; 0x38
    9c92:	f7ff fb99 	bl	93c8 <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9c96:	4632      	mov	r2, r6
    9c98:	4845      	ldr	r0, [pc, #276]	; (9db0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x16c>)
    9c9a:	a90e      	add	r1, sp, #56	; 0x38
    9c9c:	f010 fbc3 	bl	1a426 <printk>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9ca0:	4f44      	ldr	r7, [pc, #272]	; (9db4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x170>)
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9ca2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 9db8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x174>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9ca6:	783d      	ldrb	r5, [r7, #0]
    9ca8:	b2e6      	uxtb	r6, r4
    9caa:	1e6b      	subs	r3, r5, #1
    9cac:	429e      	cmp	r6, r3
    9cae:	dc18      	bgt.n	9ce2 <_ZN13deviceManager12disconnectedEP7bt_connh+0x9e>
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9cb0:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
    9cb4:	f012 f8af 	bl	1be16 <bt_conn_get_dst>
    9cb8:	a902      	add	r1, sp, #8
    9cba:	2212      	movs	r2, #18
    9cbc:	f7ff fb84 	bl	93c8 <bt_addr_le_to_str.isra.0>
			if (checkAddresses(addr,addrToFind))
    9cc0:	a902      	add	r1, sp, #8
    9cc2:	a80e      	add	r0, sp, #56	; 0x38
    9cc4:	f010 fb00 	bl	1a2c8 <_ZN13deviceManager14checkAddressesEPcS0_>
    9cc8:	b148      	cbz	r0, 9cde <_ZN13deviceManager12disconnectedEP7bt_connh+0x9a>
				bt_conn_unref(centralConnections[i]);
    9cca:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
    9cce:	f007 fa59 	bl	11184 <bt_conn_unref>
				centralConnections[i] = nullptr;
    9cd2:	2300      	movs	r3, #0
    9cd4:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
				nbrConnectionsCentral--;
    9cd8:	783b      	ldrb	r3, [r7, #0]
    9cda:	3b01      	subs	r3, #1
    9cdc:	703b      	strb	r3, [r7, #0]
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9cde:	3401      	adds	r4, #1
    9ce0:	e7e1      	b.n	9ca6 <_ZN13deviceManager12disconnectedEP7bt_connh+0x62>
		if (nbrConnectionsCentral == 0)
    9ce2:	b965      	cbnz	r5, 9cfe <_ZN13deviceManager12disconnectedEP7bt_connh+0xba>
			connectedC = false;
    9ce4:	4b35      	ldr	r3, [pc, #212]	; (9dbc <_ZN13deviceManager12disconnectedEP7bt_connh+0x178>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9ce6:	2201      	movs	r2, #1
			connectedC = false;
    9ce8:	701d      	strb	r5, [r3, #0]
			disconnectedCode[0] = 13;
    9cea:	230d      	movs	r3, #13
    9cec:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9cf0:	4b33      	ldr	r3, [pc, #204]	; (9dc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
    9cf2:	a901      	add	r1, sp, #4
    9cf4:	6818      	ldr	r0, [r3, #0]
    9cf6:	f000 f8fb 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
			subscriptionDone = false;
    9cfa:	4b32      	ldr	r3, [pc, #200]	; (9dc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9cfc:	701d      	strb	r5, [r3, #0]
		if (checkAddresses(addr,sensor1))
    9cfe:	4932      	ldr	r1, [pc, #200]	; (9dc8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
    9d00:	a80e      	add	r0, sp, #56	; 0x38
    9d02:	f010 fae1 	bl	1a2c8 <_ZN13deviceManager14checkAddressesEPcS0_>
    9d06:	b1b0      	cbz	r0, 9d36 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf2>
			once_sensor1 = true;
    9d08:	2401      	movs	r4, #1
			subscriptionDone = false;
    9d0a:	2200      	movs	r2, #0
			once_sensor1 = true;
    9d0c:	4b2f      	ldr	r3, [pc, #188]	; (9dcc <_ZN13deviceManager12disconnectedEP7bt_connh+0x188>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9d0e:	4620      	mov	r0, r4
			once_sensor1 = true;
    9d10:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    9d12:	4b2c      	ldr	r3, [pc, #176]	; (9dc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9d14:	701a      	strb	r2, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9d16:	f013 fafa 	bl	1d30e <dk_set_led_off>
			if (sensorInfos == 5)
    9d1a:	4b2d      	ldr	r3, [pc, #180]	; (9dd0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18c>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d1c:	a901      	add	r1, sp, #4
			if (sensorInfos == 5)
    9d1e:	781b      	ldrb	r3, [r3, #0]
    9d20:	2b05      	cmp	r3, #5
				disconnectedCode[0] = 12;
    9d22:	bf0c      	ite	eq
    9d24:	220c      	moveq	r2, #12
				disconnectedCode[0] = 11;
    9d26:	220b      	movne	r2, #11
    9d28:	4b25      	ldr	r3, [pc, #148]	; (9dc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
    9d2a:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d2e:	6818      	ldr	r0, [r3, #0]
    9d30:	4622      	mov	r2, r4
    9d32:	f000 f8dd 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor2))
    9d36:	4927      	ldr	r1, [pc, #156]	; (9dd4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x190>)
    9d38:	a80e      	add	r0, sp, #56	; 0x38
    9d3a:	f010 fac5 	bl	1a2c8 <_ZN13deviceManager14checkAddressesEPcS0_>
    9d3e:	b1b8      	cbz	r0, 9d70 <_ZN13deviceManager12disconnectedEP7bt_connh+0x12c>
			once_sensor2 = true;
    9d40:	2401      	movs	r4, #1
			subscriptionDone = false;
    9d42:	2200      	movs	r2, #0
			once_sensor2 = true;
    9d44:	4b24      	ldr	r3, [pc, #144]	; (9dd8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x194>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9d46:	4620      	mov	r0, r4
			once_sensor2 = true;
    9d48:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    9d4a:	4b1e      	ldr	r3, [pc, #120]	; (9dc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9d4c:	701a      	strb	r2, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9d4e:	f013 fade 	bl	1d30e <dk_set_led_off>
			if (sensorInfos == 2 || sensorInfos == 3)
    9d52:	4b1f      	ldr	r3, [pc, #124]	; (9dd0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18c>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d54:	a901      	add	r1, sp, #4
			if (sensorInfos == 2 || sensorInfos == 3)
    9d56:	781b      	ldrb	r3, [r3, #0]
    9d58:	3b02      	subs	r3, #2
    9d5a:	42a3      	cmp	r3, r4
				disconnectedCode[0] = 11;
    9d5c:	bf94      	ite	ls
    9d5e:	220b      	movls	r2, #11
				disconnectedCode[0] = 12;
    9d60:	220c      	movhi	r2, #12
    9d62:	4b17      	ldr	r3, [pc, #92]	; (9dc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
    9d64:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d68:	6818      	ldr	r0, [r3, #0]
    9d6a:	4622      	mov	r2, r4
    9d6c:	f000 f8c0 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor3))
    9d70:	491a      	ldr	r1, [pc, #104]	; (9ddc <_ZN13deviceManager12disconnectedEP7bt_connh+0x198>)
    9d72:	a80e      	add	r0, sp, #56	; 0x38
    9d74:	f010 faa8 	bl	1a2c8 <_ZN13deviceManager14checkAddressesEPcS0_>
    9d78:	b188      	cbz	r0, 9d9e <_ZN13deviceManager12disconnectedEP7bt_connh+0x15a>
			subscriptionDone = false;
    9d7a:	2200      	movs	r2, #0
			once_sensor3 = true;
    9d7c:	2401      	movs	r4, #1
			subscriptionDone = false;
    9d7e:	4b11      	ldr	r3, [pc, #68]	; (9dc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9d80:	4620      	mov	r0, r4
			subscriptionDone = false;
    9d82:	701a      	strb	r2, [r3, #0]
			once_sensor3 = true;
    9d84:	4b16      	ldr	r3, [pc, #88]	; (9de0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x19c>)
    9d86:	701c      	strb	r4, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9d88:	f013 fac1 	bl	1d30e <dk_set_led_off>
			disconnectedCode[0] = 12;
    9d8c:	230c      	movs	r3, #12
    9d8e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d92:	4b0b      	ldr	r3, [pc, #44]	; (9dc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
    9d94:	4622      	mov	r2, r4
    9d96:	6818      	ldr	r0, [r3, #0]
    9d98:	a901      	add	r1, sp, #4
    9d9a:	f000 f8a9 	bl	9ef0 <_Z17data_service_sendP7bt_connPKht>
		startScan();	
    9d9e:	f7ff fc13 	bl	95c8 <_ZN13deviceManager9startScanEv>
    9da2:	e75c      	b.n	9c5e <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
    9da4:	0001f30d 	.word	0x0001f30d
    9da8:	0001f3ae 	.word	0x0001f3ae
    9dac:	2000c0ca 	.word	0x2000c0ca
    9db0:	0001f3d9 	.word	0x0001f3d9
    9db4:	2000c0d1 	.word	0x2000c0d1
    9db8:	2000a614 	.word	0x2000a614
    9dbc:	2000c0c9 	.word	0x2000c0c9
    9dc0:	2000a610 	.word	0x2000a610
    9dc4:	2000c0d0 	.word	0x2000c0d0
    9dc8:	2000c096 	.word	0x2000c096
    9dcc:	2000857d 	.word	0x2000857d
    9dd0:	2000c0cc 	.word	0x2000c0cc
    9dd4:	2000c0a7 	.word	0x2000c0a7
    9dd8:	2000857e 	.word	0x2000857e
    9ddc:	2000c0b8 	.word	0x2000c0b8
    9de0:	2000857f 	.word	0x2000857f

00009de4 <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9de4:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9de6:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9de8:	7403      	strb	r3, [r0, #16]
    switch (type)
    9dea:	d004      	beq.n	9df6 <_ZN7dataCSC8saveDataEPKv+0x12>
    9dec:	2b02      	cmp	r3, #2
    9dee:	d00d      	beq.n	9e0c <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9df0:	480c      	ldr	r0, [pc, #48]	; (9e24 <_ZN7dataCSC8saveDataEPKv+0x40>)
    9df2:	f010 bb18 	b.w	1a426 <printk>
        oldSumRevSpeed = sumRevSpeed;
    9df6:	8803      	ldrh	r3, [r0, #0]
    9df8:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9dfa:	8903      	ldrh	r3, [r0, #8]
    9dfc:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    9dfe:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9e02:	8003      	strh	r3, [r0, #0]
    9e04:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9e08:	8103      	strh	r3, [r0, #8]
        break;
    9e0a:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    9e0c:	8883      	ldrh	r3, [r0, #4]
    9e0e:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    9e10:	8983      	ldrh	r3, [r0, #12]
    9e12:	81c3      	strh	r3, [r0, #14]
    9e14:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9e18:	8083      	strh	r3, [r0, #4]
    9e1a:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9e1e:	8183      	strh	r3, [r0, #12]
}
    9e20:	4770      	bx	lr
    9e22:	bf00      	nop
    9e24:	0001f419 	.word	0x0001f419

00009e28 <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9e2c:	8985      	ldrh	r5, [r0, #12]
    9e2e:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9e30:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9e32:	429d      	cmp	r5, r3
    9e34:	d02f      	beq.n	9e96 <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9e36:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9e3a:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9e3e:	45c8      	cmp	r8, r9
    9e40:	d029      	beq.n	9e96 <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9e42:	1aed      	subs	r5, r5, r3
    9e44:	4628      	mov	r0, r5
    9e46:	f7fe fb4d 	bl	84e4 <__aeabi_i2d>
    9e4a:	2200      	movs	r2, #0
    9e4c:	4b13      	ldr	r3, [pc, #76]	; (9e9c <_ZN7dataCSC7calcRPMEv+0x74>)
    9e4e:	f7fe fbb3 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9e52:	2200      	movs	r2, #0
    9e54:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9e56:	4606      	mov	r6, r0
    9e58:	460f      	mov	r7, r1
        if (time < 0)
    9e5a:	f7fe fe1f 	bl	8a9c <__aeabi_dcmplt>
    9e5e:	b130      	cbz	r0, 9e6e <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    9e60:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9e64:	30ff      	adds	r0, #255	; 0xff
    9e66:	f7fe fb3d 	bl	84e4 <__aeabi_i2d>
    9e6a:	4606      	mov	r6, r0
    9e6c:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9e6e:	203c      	movs	r0, #60	; 0x3c
    9e70:	eba8 0809 	sub.w	r8, r8, r9
    9e74:	fb00 f008 	mul.w	r0, r0, r8
    9e78:	f7fe fb34 	bl	84e4 <__aeabi_i2d>
    9e7c:	4632      	mov	r2, r6
    9e7e:	463b      	mov	r3, r7
    9e80:	f7fe fcc4 	bl	880c <__aeabi_ddiv>
    9e84:	4602      	mov	r2, r0
    9e86:	460b      	mov	r3, r1
    9e88:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        retVal = (uint16_t) rpm;
    9e8c:	f7fe fe2e 	bl	8aec <__aeabi_d2uiz>
    9e90:	b280      	uxth	r0, r0
}
    9e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9e96:	2000      	movs	r0, #0
    9e98:	e7fb      	b.n	9e92 <_ZN7dataCSC7calcRPMEv+0x6a>
    9e9a:	bf00      	nop
    9e9c:	3f500000 	.word	0x3f500000

00009ea0 <_Z15on_cccd_changedPK12bt_gatt_attrt>:
{
    ARG_UNUSED(attr);

    uint8_t notificationsCode[1];

    switch(value)
    9ea0:	2901      	cmp	r1, #1
    9ea2:	d004      	beq.n	9eae <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9ea4:	2902      	cmp	r1, #2
    9ea6:	d005      	beq.n	9eb4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9ea8:	b931      	cbnz	r1, 9eb8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9eaa:	4804      	ldr	r0, [pc, #16]	; (9ebc <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9eac:	e000      	b.n	9eb0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9eae:	4804      	ldr	r0, [pc, #16]	; (9ec0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9eb0:	f010 bab9 	b.w	1a426 <printk>
            printk("Notifications ON with Indications\n");
    9eb4:	4803      	ldr	r0, [pc, #12]	; (9ec4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9eb6:	e7fb      	b.n	9eb0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9eb8:	4803      	ldr	r0, [pc, #12]	; (9ec8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9eba:	e7f9      	b.n	9eb0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9ebc:	0001f45c 	.word	0x0001f45c
    9ec0:	0001f427 	.word	0x0001f427
    9ec4:	0001f439 	.word	0x0001f439
    9ec8:	0001f46f 	.word	0x0001f46f

00009ecc <_Z17data_service_initv>:
{
    9ecc:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    9ece:	22f0      	movs	r2, #240	; 0xf0
    9ed0:	2100      	movs	r1, #0
    9ed2:	4805      	ldr	r0, [pc, #20]	; (9ee8 <_Z17data_service_initv+0x1c>)
    9ed4:	f011 fd16 	bl	1b904 <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    9ed8:	22f0      	movs	r2, #240	; 0xf0
    9eda:	2100      	movs	r1, #0
    9edc:	4803      	ldr	r0, [pc, #12]	; (9eec <_Z17data_service_initv+0x20>)
    9ede:	f011 fd11 	bl	1b904 <memset>
}
    9ee2:	2000      	movs	r0, #0
    9ee4:	bd08      	pop	{r3, pc}
    9ee6:	bf00      	nop
    9ee8:	2000c10e 	.word	0x2000c10e
    9eec:	2000c1fe 	.word	0x2000c1fe

00009ef0 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    9ef0:	2300      	movs	r3, #0
{
    9ef2:	b510      	push	{r4, lr}
    9ef4:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    9ef6:	9303      	str	r3, [sp, #12]
    9ef8:	9305      	str	r3, [sp, #20]
    9efa:	4b0d      	ldr	r3, [pc, #52]	; (9f30 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    9efc:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    9f00:	9300      	str	r3, [sp, #0]
    9f02:	4b0c      	ldr	r3, [pc, #48]	; (9f34 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9f04:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    9f06:	9304      	str	r3, [sp, #16]
    };
    9f08:	4b0b      	ldr	r3, [pc, #44]	; (9f38 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    9f0a:	4604      	mov	r4, r0
    };
    9f0c:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9f10:	4619      	mov	r1, r3
    9f12:	f00a f86b 	bl	13fec <bt_gatt_is_subscribed>
    9f16:	b148      	cbz	r0, 9f2c <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    9f18:	4669      	mov	r1, sp
    9f1a:	4620      	mov	r0, r4
    9f1c:	f009 fe84 	bl	13c28 <bt_gatt_notify_cb>
    9f20:	b110      	cbz	r0, 9f28 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    9f22:	4806      	ldr	r0, [pc, #24]	; (9f3c <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    9f24:	f010 fa7f 	bl	1a426 <printk>
    }
}
    9f28:	b006      	add	sp, #24
    9f2a:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    9f2c:	4804      	ldr	r0, [pc, #16]	; (9f40 <_Z17data_service_sendP7bt_connPKht+0x50>)
    9f2e:	e7f9      	b.n	9f24 <_Z17data_service_sendP7bt_connPKht+0x34>
    9f30:	0001f584 	.word	0x0001f584
    9f34:	0001a2ef 	.word	0x0001a2ef
    9f38:	0001e48c 	.word	0x0001e48c
    9f3c:	0001f4ce 	.word	0x0001f4ce
    9f40:	0001f4f2 	.word	0x0001f4f2

00009f44 <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
}
    9f44:	4b01      	ldr	r3, [pc, #4]	; (9f4c <_Z11getDiameterv+0x8>)
    9f46:	e9d3 0100 	ldrd	r0, r1, [r3]
    9f4a:	4770      	bx	lr
    9f4c:	20008828 	.word	0x20008828

00009f50 <_Z17getNbrOfAddressesv>:

// getter
uint8_t getNbrOfAddresses() {
    return nbrAddresses;
}
    9f50:	4b01      	ldr	r3, [pc, #4]	; (9f58 <_Z17getNbrOfAddressesv+0x8>)
    9f52:	7818      	ldrb	r0, [r3, #0]
    9f54:	4770      	bx	lr
    9f56:	bf00      	nop
    9f58:	2000c2f0 	.word	0x2000c2f0

00009f5c <_Z10getAddressPch>:

// getter
void getAddress(char* outArray, uint8_t nbr) {
    switch (nbr)
    9f5c:	2902      	cmp	r1, #2
    9f5e:	d00d      	beq.n	9f7c <_Z10getAddressPch+0x20>
    9f60:	2903      	cmp	r1, #3
    9f62:	d015      	beq.n	9f90 <_Z10getAddressPch+0x34>
    9f64:	2901      	cmp	r1, #1
    9f66:	d11c      	bne.n	9fa2 <_Z10getAddressPch+0x46>
    9f68:	4a0e      	ldr	r2, [pc, #56]	; (9fa4 <_Z10getAddressPch+0x48>)
    9f6a:	1e43      	subs	r3, r0, #1
    9f6c:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    9f6e:	f812 1b01 	ldrb.w	r1, [r2], #1
    9f72:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9f76:	4283      	cmp	r3, r0
    9f78:	d1f9      	bne.n	9f6e <_Z10getAddressPch+0x12>
    9f7a:	4770      	bx	lr
    9f7c:	4a0a      	ldr	r2, [pc, #40]	; (9fa8 <_Z10getAddressPch+0x4c>)
    9f7e:	1e43      	subs	r3, r0, #1
    9f80:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    9f82:	f812 1b01 	ldrb.w	r1, [r2], #1
    9f86:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9f8a:	4283      	cmp	r3, r0
    9f8c:	d1f9      	bne.n	9f82 <_Z10getAddressPch+0x26>
    9f8e:	4770      	bx	lr
    9f90:	4a06      	ldr	r2, [pc, #24]	; (9fac <_Z10getAddressPch+0x50>)
    9f92:	1e43      	subs	r3, r0, #1
    9f94:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    9f96:	f812 1b01 	ldrb.w	r1, [r2], #1
    9f9a:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9f9e:	4283      	cmp	r3, r0
    9fa0:	d1f9      	bne.n	9f96 <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    9fa2:	4770      	bx	lr
    9fa4:	2000c0da 	.word	0x2000c0da
    9fa8:	2000c0eb 	.word	0x2000c0eb
    9fac:	2000c0fc 	.word	0x2000c0fc

00009fb0 <_Z14getSensorInfosv>:

uint8_t getSensorInfos() {
    return infoSensors;
}
    9fb0:	4b01      	ldr	r3, [pc, #4]	; (9fb8 <_Z14getSensorInfosv+0x8>)
    9fb2:	7818      	ldrb	r0, [r3, #0]
    9fb4:	4770      	bx	lr
    9fb6:	bf00      	nop
    9fb8:	2000c2ef 	.word	0x2000c2ef

00009fbc <discovery_error_found_cb>:

static void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
	printk("The discovery procedure failed with %d\n", err);
    9fbc:	4801      	ldr	r0, [pc, #4]	; (9fc4 <discovery_error_found_cb+0x8>)
    9fbe:	f010 ba32 	b.w	1a426 <printk>
    9fc2:	bf00      	nop
    9fc4:	0001f595 	.word	0x0001f595

00009fc8 <discovery_service_not_found_cb>:
	printk("The service could not be found during the discovery\n");
    9fc8:	4801      	ldr	r0, [pc, #4]	; (9fd0 <discovery_service_not_found_cb+0x8>)
    9fca:	f010 ba2c 	b.w	1a426 <printk>
    9fce:	bf00      	nop
    9fd0:	0001f5bd 	.word	0x0001f5bd

00009fd4 <discovery_completed_cb>:
{
    9fd4:	b510      	push	{r4, lr}
    9fd6:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
    9fd8:	4839      	ldr	r0, [pc, #228]	; (a0c0 <discovery_completed_cb+0xec>)
    9fda:	f010 fa24 	bl	1a426 <printk>
	switch (cntDevices)
    9fde:	4b39      	ldr	r3, [pc, #228]	; (a0c4 <discovery_completed_cb+0xf0>)
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	2b02      	cmp	r3, #2
    9fe4:	d02e      	beq.n	a044 <discovery_completed_cb+0x70>
    9fe6:	2b03      	cmp	r3, #3
    9fe8:	d04a      	beq.n	a080 <discovery_completed_cb+0xac>
    9fea:	2b01      	cmp	r3, #1
    9fec:	d114      	bne.n	a018 <discovery_completed_cb+0x44>
		err = bt_bas_handles_assign(dm, &bas_sensor1);
    9fee:	4936      	ldr	r1, [pc, #216]	; (a0c8 <discovery_completed_cb+0xf4>)
    9ff0:	4620      	mov	r0, r4
    9ff2:	f003 f82d 	bl	d050 <bt_bas_handles_assign>
		if (err) 
    9ff6:	4601      	mov	r1, r0
    9ff8:	b110      	cbz	r0, a000 <discovery_completed_cb+0x2c>
			printk("Could not init BAS client object from sensor 1, error: %d\n", err);
    9ffa:	4834      	ldr	r0, [pc, #208]	; (a0cc <discovery_completed_cb+0xf8>)
    9ffc:	f010 fa13 	bl	1a426 <printk>
 * @retval true If notifications are supported.
 *              Otherwise, @c false is returned.
 */
static inline bool bt_bas_notify_supported(struct bt_bas_client *bas)
{
	return bas->notify;
    a000:	4831      	ldr	r0, [pc, #196]	; (a0c8 <discovery_completed_cb+0xf4>)
		if (bt_bas_notify_supported(&bas_sensor1))
    a002:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a006:	b193      	cbz	r3, a02e <discovery_completed_cb+0x5a>
			err = bt_bas_subscribe_battery_level(&bas_sensor1, notify_battery_level_cb_sensor1);
    a008:	4931      	ldr	r1, [pc, #196]	; (a0d0 <discovery_completed_cb+0xfc>)
    a00a:	f003 f8ab 	bl	d164 <bt_bas_subscribe_battery_level>
			if (err) 
    a00e:	4601      	mov	r1, r0
    a010:	b110      	cbz	r0, a018 <discovery_completed_cb+0x44>
				printk("Cannot subscribe to BAS value notification from sensor 1, (err: %d)\n", err);
    a012:	4830      	ldr	r0, [pc, #192]	; (a0d4 <discovery_completed_cb+0x100>)
				printk("Cannot subscribe to BAS value notification from sensor 3, (err: %d)\n", err);
    a014:	f010 fa07 	bl	1a426 <printk>
	err = bt_gatt_dm_data_release(dm);
    a018:	4620      	mov	r0, r4
    a01a:	f010 fea1 	bl	1ad60 <bt_gatt_dm_data_release>
	if (err) {
    a01e:	4601      	mov	r1, r0
    a020:	2800      	cmp	r0, #0
    a022:	d04b      	beq.n	a0bc <discovery_completed_cb+0xe8>
}
    a024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not release the discovery data, error "
    a028:	482b      	ldr	r0, [pc, #172]	; (a0d8 <discovery_completed_cb+0x104>)
    a02a:	f010 b9fc 	b.w	1a426 <printk>
			err = bt_bas_start_per_read_battery_level(&bas_sensor1, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_sensor1);
    a02e:	f242 7110 	movw	r1, #10000	; 0x2710
    a032:	4a27      	ldr	r2, [pc, #156]	; (a0d0 <discovery_completed_cb+0xfc>)
    a034:	f003 f8f0 	bl	d218 <bt_bas_start_per_read_battery_level>
			if (err) 
    a038:	2800      	cmp	r0, #0
    a03a:	d0ed      	beq.n	a018 <discovery_completed_cb+0x44>
				printk("Could not start periodic read of BAS value for sensor 1\n");
    a03c:	4827      	ldr	r0, [pc, #156]	; (a0dc <discovery_completed_cb+0x108>)
				printk("Could not start periodic read of BAS value for sensor 3\n");
    a03e:	f010 f9f2 	bl	1a426 <printk>
    a042:	e7e9      	b.n	a018 <discovery_completed_cb+0x44>
		err = bt_bas_handles_assign(dm, &bas_sensor2);
    a044:	4926      	ldr	r1, [pc, #152]	; (a0e0 <discovery_completed_cb+0x10c>)
    a046:	4620      	mov	r0, r4
    a048:	f003 f802 	bl	d050 <bt_bas_handles_assign>
		if (err) 
    a04c:	4601      	mov	r1, r0
    a04e:	b110      	cbz	r0, a056 <discovery_completed_cb+0x82>
			printk("Could not init BAS client object from sensor 2, error: %d\n", err);
    a050:	4824      	ldr	r0, [pc, #144]	; (a0e4 <discovery_completed_cb+0x110>)
    a052:	f010 f9e8 	bl	1a426 <printk>
    a056:	4822      	ldr	r0, [pc, #136]	; (a0e0 <discovery_completed_cb+0x10c>)
		if (bt_bas_notify_supported(&bas_sensor2))
    a058:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a05c:	b13b      	cbz	r3, a06e <discovery_completed_cb+0x9a>
			err = bt_bas_subscribe_battery_level(&bas_sensor2, notify_battery_level_cb_sensor2);
    a05e:	4922      	ldr	r1, [pc, #136]	; (a0e8 <discovery_completed_cb+0x114>)
    a060:	f003 f880 	bl	d164 <bt_bas_subscribe_battery_level>
			if (err) 
    a064:	4601      	mov	r1, r0
    a066:	2800      	cmp	r0, #0
    a068:	d0d6      	beq.n	a018 <discovery_completed_cb+0x44>
				printk("Cannot subscribe to BAS value notification from sensor 2, (err: %d)\n", err);
    a06a:	4820      	ldr	r0, [pc, #128]	; (a0ec <discovery_completed_cb+0x118>)
    a06c:	e7d2      	b.n	a014 <discovery_completed_cb+0x40>
			err = bt_bas_start_per_read_battery_level(&bas_sensor2, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_sensor2);
    a06e:	f242 7110 	movw	r1, #10000	; 0x2710
    a072:	4a1d      	ldr	r2, [pc, #116]	; (a0e8 <discovery_completed_cb+0x114>)
    a074:	f003 f8d0 	bl	d218 <bt_bas_start_per_read_battery_level>
			if (err) 
    a078:	2800      	cmp	r0, #0
    a07a:	d0cd      	beq.n	a018 <discovery_completed_cb+0x44>
				printk("Could not start periodic read of BAS value for sensor 2\n");
    a07c:	481c      	ldr	r0, [pc, #112]	; (a0f0 <discovery_completed_cb+0x11c>)
    a07e:	e7de      	b.n	a03e <discovery_completed_cb+0x6a>
		err = bt_bas_handles_assign(dm, &bas_sensor3);
    a080:	491c      	ldr	r1, [pc, #112]	; (a0f4 <discovery_completed_cb+0x120>)
    a082:	4620      	mov	r0, r4
    a084:	f002 ffe4 	bl	d050 <bt_bas_handles_assign>
		if (err) 
    a088:	4601      	mov	r1, r0
    a08a:	b110      	cbz	r0, a092 <discovery_completed_cb+0xbe>
			printk("Could not init BAS client object from sensor 3, error: %d\n", err);
    a08c:	481a      	ldr	r0, [pc, #104]	; (a0f8 <discovery_completed_cb+0x124>)
    a08e:	f010 f9ca 	bl	1a426 <printk>
    a092:	4818      	ldr	r0, [pc, #96]	; (a0f4 <discovery_completed_cb+0x120>)
		if (bt_bas_notify_supported(&bas_sensor3))
    a094:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a098:	b13b      	cbz	r3, a0aa <discovery_completed_cb+0xd6>
			err = bt_bas_subscribe_battery_level(&bas_sensor3, notify_battery_level_cb_sensor3);
    a09a:	4918      	ldr	r1, [pc, #96]	; (a0fc <discovery_completed_cb+0x128>)
    a09c:	f003 f862 	bl	d164 <bt_bas_subscribe_battery_level>
			if (err) 
    a0a0:	4601      	mov	r1, r0
    a0a2:	2800      	cmp	r0, #0
    a0a4:	d0b8      	beq.n	a018 <discovery_completed_cb+0x44>
				printk("Cannot subscribe to BAS value notification from sensor 3, (err: %d)\n", err);
    a0a6:	4816      	ldr	r0, [pc, #88]	; (a100 <discovery_completed_cb+0x12c>)
    a0a8:	e7b4      	b.n	a014 <discovery_completed_cb+0x40>
			err = bt_bas_start_per_read_battery_level(&bas_sensor3, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_sensor3);
    a0aa:	f242 7110 	movw	r1, #10000	; 0x2710
    a0ae:	4a13      	ldr	r2, [pc, #76]	; (a0fc <discovery_completed_cb+0x128>)
    a0b0:	f003 f8b2 	bl	d218 <bt_bas_start_per_read_battery_level>
			if (err) 
    a0b4:	2800      	cmp	r0, #0
    a0b6:	d0af      	beq.n	a018 <discovery_completed_cb+0x44>
				printk("Could not start periodic read of BAS value for sensor 3\n");
    a0b8:	4812      	ldr	r0, [pc, #72]	; (a104 <discovery_completed_cb+0x130>)
    a0ba:	e7c0      	b.n	a03e <discovery_completed_cb+0x6a>
}
    a0bc:	bd10      	pop	{r4, pc}
    a0be:	bf00      	nop
    a0c0:	0001ee5b 	.word	0x0001ee5b
    a0c4:	2000c2f5 	.word	0x2000c2f5
    a0c8:	20008830 	.word	0x20008830
    a0cc:	0001f5f2 	.word	0x0001f5f2
    a0d0:	0000a201 	.word	0x0000a201
    a0d4:	0001f62d 	.word	0x0001f62d
    a0d8:	0001f81d 	.word	0x0001f81d
    a0dc:	0001f672 	.word	0x0001f672
    a0e0:	200088b8 	.word	0x200088b8
    a0e4:	0001f6ab 	.word	0x0001f6ab
    a0e8:	0000a1c1 	.word	0x0000a1c1
    a0ec:	0001f6e6 	.word	0x0001f6e6
    a0f0:	0001f72b 	.word	0x0001f72b
    a0f4:	20008940 	.word	0x20008940
    a0f8:	0001f764 	.word	0x0001f764
    a0fc:	0000a181 	.word	0x0000a181
    a100:	0001f79f 	.word	0x0001f79f
    a104:	0001f7e4 	.word	0x0001f7e4

0000a108 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a108:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    a10a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a10c:	b08a      	sub	sp, #40	; 0x28
    a10e:	4604      	mov	r4, r0
    a110:	460e      	mov	r6, r1
    a112:	ad07      	add	r5, sp, #28
    a114:	2b03      	cmp	r3, #3
    a116:	d820      	bhi.n	a15a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    a118:	e8df f003 	tbb	[pc, r3]
    a11c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    a120:	4911      	ldr	r1, [pc, #68]	; (a168 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
    a122:	4628      	mov	r0, r5
    a124:	f011 fb69 	bl	1b7fa <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a128:	7863      	ldrb	r3, [r4, #1]
    a12a:	211e      	movs	r1, #30
    a12c:	9304      	str	r3, [sp, #16]
    a12e:	78a3      	ldrb	r3, [r4, #2]
    a130:	4630      	mov	r0, r6
    a132:	9303      	str	r3, [sp, #12]
    a134:	78e3      	ldrb	r3, [r4, #3]
    a136:	4a0d      	ldr	r2, [pc, #52]	; (a16c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    a138:	9302      	str	r3, [sp, #8]
    a13a:	7923      	ldrb	r3, [r4, #4]
    a13c:	9505      	str	r5, [sp, #20]
    a13e:	9301      	str	r3, [sp, #4]
    a140:	7963      	ldrb	r3, [r4, #5]
    a142:	9300      	str	r3, [sp, #0]
    a144:	79a3      	ldrb	r3, [r4, #6]
    a146:	f010 f97b 	bl	1a440 <snprintk>
}
    a14a:	b00a      	add	sp, #40	; 0x28
    a14c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a14e:	4908      	ldr	r1, [pc, #32]	; (a170 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    a150:	e7e7      	b.n	a122 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    a152:	4908      	ldr	r1, [pc, #32]	; (a174 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    a154:	e7e5      	b.n	a122 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    a156:	4908      	ldr	r1, [pc, #32]	; (a178 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    a158:	e7e3      	b.n	a122 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a15a:	210a      	movs	r1, #10
    a15c:	4628      	mov	r0, r5
    a15e:	4a07      	ldr	r2, [pc, #28]	; (a17c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    a160:	f010 f96e 	bl	1a440 <snprintk>
		break;
    a164:	e7e0      	b.n	a128 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    a166:	bf00      	nop
    a168:	0001efac 	.word	0x0001efac
    a16c:	0001efd5 	.word	0x0001efd5
    a170:	0001efb3 	.word	0x0001efb3
    a174:	0001efba 	.word	0x0001efba
    a178:	0001efc4 	.word	0x0001efc4
    a17c:	0001efce 	.word	0x0001efce

0000a180 <notify_battery_level_cb_sensor3>:
	batteryLevel_sensor2 = battery_level;
}

static void notify_battery_level_cb_sensor3(struct bt_bas_client *bas,
				    uint8_t battery_level)
{
    a180:	b510      	push	{r4, lr}
    a182:	460c      	mov	r4, r1
    a184:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a186:	f010 fe05 	bl	1ad94 <bt_bas_conn>
    a18a:	f011 fe44 	bl	1be16 <bt_conn_get_dst>
    a18e:	4669      	mov	r1, sp
    a190:	f7ff ffba 	bl	a108 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (battery_level == BT_BAS_VAL_INVALID) {
    a194:	2cff      	cmp	r4, #255	; 0xff
    a196:	d107      	bne.n	a1a8 <notify_battery_level_cb_sensor3+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a198:	4669      	mov	r1, sp
    a19a:	4806      	ldr	r0, [pc, #24]	; (a1b4 <notify_battery_level_cb_sensor3+0x34>)
    a19c:	f010 f943 	bl	1a426 <printk>
	} else {
		printk("[%s] Battery notification: %"PRIu8"%%\n",
		       addr, battery_level);
	}

	batteryLevel_sensor3 = battery_level;
    a1a0:	4b05      	ldr	r3, [pc, #20]	; (a1b8 <notify_battery_level_cb_sensor3+0x38>)
    a1a2:	701c      	strb	r4, [r3, #0]
}
    a1a4:	b008      	add	sp, #32
    a1a6:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a1a8:	4622      	mov	r2, r4
    a1aa:	4669      	mov	r1, sp
    a1ac:	4803      	ldr	r0, [pc, #12]	; (a1bc <notify_battery_level_cb_sensor3+0x3c>)
    a1ae:	f010 f93a 	bl	1a426 <printk>
    a1b2:	e7f5      	b.n	a1a0 <notify_battery_level_cb_sensor3+0x20>
    a1b4:	0001f853 	.word	0x0001f853
    a1b8:	2000c2f3 	.word	0x2000c2f3
    a1bc:	0001f876 	.word	0x0001f876

0000a1c0 <notify_battery_level_cb_sensor2>:
{
    a1c0:	b510      	push	{r4, lr}
    a1c2:	460c      	mov	r4, r1
    a1c4:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a1c6:	f010 fde5 	bl	1ad94 <bt_bas_conn>
    a1ca:	f011 fe24 	bl	1be16 <bt_conn_get_dst>
    a1ce:	4669      	mov	r1, sp
    a1d0:	f7ff ff9a 	bl	a108 <bt_addr_le_to_str.constprop.0.isra.0>
	if (battery_level == BT_BAS_VAL_INVALID) {
    a1d4:	2cff      	cmp	r4, #255	; 0xff
    a1d6:	d107      	bne.n	a1e8 <notify_battery_level_cb_sensor2+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a1d8:	4669      	mov	r1, sp
    a1da:	4806      	ldr	r0, [pc, #24]	; (a1f4 <notify_battery_level_cb_sensor2+0x34>)
    a1dc:	f010 f923 	bl	1a426 <printk>
	batteryLevel_sensor2 = battery_level;
    a1e0:	4b05      	ldr	r3, [pc, #20]	; (a1f8 <notify_battery_level_cb_sensor2+0x38>)
    a1e2:	701c      	strb	r4, [r3, #0]
}
    a1e4:	b008      	add	sp, #32
    a1e6:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a1e8:	4622      	mov	r2, r4
    a1ea:	4669      	mov	r1, sp
    a1ec:	4803      	ldr	r0, [pc, #12]	; (a1fc <notify_battery_level_cb_sensor2+0x3c>)
    a1ee:	f010 f91a 	bl	1a426 <printk>
    a1f2:	e7f5      	b.n	a1e0 <notify_battery_level_cb_sensor2+0x20>
    a1f4:	0001f853 	.word	0x0001f853
    a1f8:	2000c2f2 	.word	0x2000c2f2
    a1fc:	0001f876 	.word	0x0001f876

0000a200 <notify_battery_level_cb_sensor1>:
{
    a200:	b510      	push	{r4, lr}
    a202:	460c      	mov	r4, r1
    a204:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a206:	f010 fdc5 	bl	1ad94 <bt_bas_conn>
    a20a:	f011 fe04 	bl	1be16 <bt_conn_get_dst>
    a20e:	4669      	mov	r1, sp
    a210:	f7ff ff7a 	bl	a108 <bt_addr_le_to_str.constprop.0.isra.0>
	if (battery_level == BT_BAS_VAL_INVALID) {
    a214:	2cff      	cmp	r4, #255	; 0xff
    a216:	d107      	bne.n	a228 <notify_battery_level_cb_sensor1+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a218:	4669      	mov	r1, sp
    a21a:	4806      	ldr	r0, [pc, #24]	; (a234 <notify_battery_level_cb_sensor1+0x34>)
    a21c:	f010 f903 	bl	1a426 <printk>
	batteryLevel_sensor1 = battery_level;
    a220:	4b05      	ldr	r3, [pc, #20]	; (a238 <notify_battery_level_cb_sensor1+0x38>)
    a222:	701c      	strb	r4, [r3, #0]
}
    a224:	b008      	add	sp, #32
    a226:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a228:	4622      	mov	r2, r4
    a22a:	4669      	mov	r1, sp
    a22c:	4803      	ldr	r0, [pc, #12]	; (a23c <notify_battery_level_cb_sensor1+0x3c>)
    a22e:	f010 f8fa 	bl	1a426 <printk>
    a232:	e7f5      	b.n	a220 <notify_battery_level_cb_sensor1+0x20>
    a234:	0001f853 	.word	0x0001f853
    a238:	2000c2f1 	.word	0x2000c2f1
    a23c:	0001f876 	.word	0x0001f876

0000a240 <read_battery_level_cb3>:
}

static void read_battery_level_cb3(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a240:	b530      	push	{r4, r5, lr}
    a242:	4615      	mov	r5, r2
    a244:	b089      	sub	sp, #36	; 0x24
    a246:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a248:	f010 fda4 	bl	1ad94 <bt_bas_conn>
    a24c:	f011 fde3 	bl	1be16 <bt_conn_get_dst>
    a250:	4669      	mov	r1, sp
    a252:	f7ff ff59 	bl	a108 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) {
    a256:	b135      	cbz	r5, a266 <read_battery_level_cb3+0x26>
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a258:	462a      	mov	r2, r5
    a25a:	4669      	mov	r1, sp
    a25c:	4806      	ldr	r0, [pc, #24]	; (a278 <read_battery_level_cb3+0x38>)
    a25e:	f010 f8e2 	bl	1a426 <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    batteryLevel_sensor3 = battery_level;
}
    a262:	b009      	add	sp, #36	; 0x24
    a264:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a266:	4622      	mov	r2, r4
    a268:	4669      	mov	r1, sp
    a26a:	4804      	ldr	r0, [pc, #16]	; (a27c <read_battery_level_cb3+0x3c>)
    a26c:	f010 f8db 	bl	1a426 <printk>
    batteryLevel_sensor3 = battery_level;
    a270:	4b03      	ldr	r3, [pc, #12]	; (a280 <read_battery_level_cb3+0x40>)
    a272:	701c      	strb	r4, [r3, #0]
    a274:	e7f5      	b.n	a262 <read_battery_level_cb3+0x22>
    a276:	bf00      	nop
    a278:	0001f897 	.word	0x0001f897
    a27c:	0001f8b4 	.word	0x0001f8b4
    a280:	2000c2f3 	.word	0x2000c2f3

0000a284 <read_battery_level_cb2>:
{
    a284:	b530      	push	{r4, r5, lr}
    a286:	4615      	mov	r5, r2
    a288:	b089      	sub	sp, #36	; 0x24
    a28a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a28c:	f010 fd82 	bl	1ad94 <bt_bas_conn>
    a290:	f011 fdc1 	bl	1be16 <bt_conn_get_dst>
    a294:	4669      	mov	r1, sp
    a296:	f7ff ff37 	bl	a108 <bt_addr_le_to_str.constprop.0.isra.0>
	if (err) {
    a29a:	b135      	cbz	r5, a2aa <read_battery_level_cb2+0x26>
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a29c:	462a      	mov	r2, r5
    a29e:	4669      	mov	r1, sp
    a2a0:	4806      	ldr	r0, [pc, #24]	; (a2bc <read_battery_level_cb2+0x38>)
    a2a2:	f010 f8c0 	bl	1a426 <printk>
}
    a2a6:	b009      	add	sp, #36	; 0x24
    a2a8:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a2aa:	4622      	mov	r2, r4
    a2ac:	4669      	mov	r1, sp
    a2ae:	4804      	ldr	r0, [pc, #16]	; (a2c0 <read_battery_level_cb2+0x3c>)
    a2b0:	f010 f8b9 	bl	1a426 <printk>
    batteryLevel_sensor2 = battery_level;
    a2b4:	4b03      	ldr	r3, [pc, #12]	; (a2c4 <read_battery_level_cb2+0x40>)
    a2b6:	701c      	strb	r4, [r3, #0]
    a2b8:	e7f5      	b.n	a2a6 <read_battery_level_cb2+0x22>
    a2ba:	bf00      	nop
    a2bc:	0001f897 	.word	0x0001f897
    a2c0:	0001f8b4 	.word	0x0001f8b4
    a2c4:	2000c2f2 	.word	0x2000c2f2

0000a2c8 <read_battery_level_cb>:
{
    a2c8:	b530      	push	{r4, r5, lr}
    a2ca:	4615      	mov	r5, r2
    a2cc:	b089      	sub	sp, #36	; 0x24
    a2ce:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a2d0:	f010 fd60 	bl	1ad94 <bt_bas_conn>
    a2d4:	f011 fd9f 	bl	1be16 <bt_conn_get_dst>
    a2d8:	4669      	mov	r1, sp
    a2da:	f7ff ff15 	bl	a108 <bt_addr_le_to_str.constprop.0.isra.0>
	if (err) {
    a2de:	b135      	cbz	r5, a2ee <read_battery_level_cb+0x26>
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a2e0:	462a      	mov	r2, r5
    a2e2:	4669      	mov	r1, sp
    a2e4:	4806      	ldr	r0, [pc, #24]	; (a300 <read_battery_level_cb+0x38>)
    a2e6:	f010 f89e 	bl	1a426 <printk>
}
    a2ea:	b009      	add	sp, #36	; 0x24
    a2ec:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a2ee:	4622      	mov	r2, r4
    a2f0:	4669      	mov	r1, sp
    a2f2:	4804      	ldr	r0, [pc, #16]	; (a304 <read_battery_level_cb+0x3c>)
    a2f4:	f010 f897 	bl	1a426 <printk>
    batteryLevel_sensor1 = battery_level;
    a2f8:	4b03      	ldr	r3, [pc, #12]	; (a308 <read_battery_level_cb+0x40>)
    a2fa:	701c      	strb	r4, [r3, #0]
    a2fc:	e7f5      	b.n	a2ea <read_battery_level_cb+0x22>
    a2fe:	bf00      	nop
    a300:	0001f897 	.word	0x0001f897
    a304:	0001f8b4 	.word	0x0001f8b4
    a308:	2000c2f1 	.word	0x2000c2f1

0000a30c <gatt_discover_battery_service>:
{
    a30c:	b513      	push	{r0, r1, r4, lr}
	cnt++;
    a30e:	4b0f      	ldr	r3, [pc, #60]	; (a34c <gatt_discover_battery_service+0x40>)
{
    a310:	4604      	mov	r4, r0
	cnt++;
    a312:	7819      	ldrb	r1, [r3, #0]
	printk("Nbr discovering: %d\n", cnt);
    a314:	480e      	ldr	r0, [pc, #56]	; (a350 <gatt_discover_battery_service+0x44>)
	cnt++;
    a316:	3101      	adds	r1, #1
    a318:	b2c9      	uxtb	r1, r1
    a31a:	7019      	strb	r1, [r3, #0]
	printk("Nbr discovering: %d\n", cnt);
    a31c:	f010 f883 	bl	1a426 <printk>
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a320:	f641 020f 	movw	r2, #6159	; 0x180f
    a324:	2300      	movs	r3, #0
    a326:	4620      	mov	r0, r4
    a328:	f8ad 2006 	strh.w	r2, [sp, #6]
    a32c:	a901      	add	r1, sp, #4
    a32e:	4a09      	ldr	r2, [pc, #36]	; (a354 <gatt_discover_battery_service+0x48>)
    a330:	f88d 3004 	strb.w	r3, [sp, #4]
    a334:	f002 f9d8 	bl	c6e8 <bt_gatt_dm_start>
	if (err) {
    a338:	4604      	mov	r4, r0
    a33a:	b118      	cbz	r0, a344 <gatt_discover_battery_service+0x38>
		printk("Could not start the discovery procedure, error "
    a33c:	4601      	mov	r1, r0
    a33e:	4806      	ldr	r0, [pc, #24]	; (a358 <gatt_discover_battery_service+0x4c>)
    a340:	f010 f871 	bl	1a426 <printk>
}
    a344:	b2e0      	uxtb	r0, r4
    a346:	b002      	add	sp, #8
    a348:	bd10      	pop	{r4, pc}
    a34a:	bf00      	nop
    a34c:	2000c2f4 	.word	0x2000c2f4
    a350:	0001f8cd 	.word	0x0001f8cd
    a354:	200081fc 	.word	0x200081fc
    a358:	0001f8e2 	.word	0x0001f8e2

0000a35c <initBatteryManager>:
		button_readval();
	}
}

void initBatteryManager()
{
    a35c:	b510      	push	{r4, lr}
	int err;
	cntDevices++;
    a35e:	4c0c      	ldr	r4, [pc, #48]	; (a390 <initBatteryManager+0x34>)
	printk("Initialize battery manager nbr: %d\n", cntDevices);
    a360:	480c      	ldr	r0, [pc, #48]	; (a394 <initBatteryManager+0x38>)
	cntDevices++;
    a362:	7821      	ldrb	r1, [r4, #0]
    a364:	3101      	adds	r1, #1
    a366:	b2c9      	uxtb	r1, r1
    a368:	7021      	strb	r1, [r4, #0]
	printk("Initialize battery manager nbr: %d\n", cntDevices);
    a36a:	f010 f85c 	bl	1a426 <printk>

	switch (cntDevices)
    a36e:	7823      	ldrb	r3, [r4, #0]
    a370:	2b02      	cmp	r3, #2
    a372:	d008      	beq.n	a386 <initBatteryManager+0x2a>
    a374:	2b03      	cmp	r3, #3
    a376:	d008      	beq.n	a38a <initBatteryManager+0x2e>
    a378:	2b01      	cmp	r3, #1
    a37a:	d108      	bne.n	a38e <initBatteryManager+0x32>
	{
	case 1:
		bt_bas_client_init(&bas_sensor1);
    a37c:	4806      	ldr	r0, [pc, #24]	; (a398 <initBatteryManager+0x3c>)
	/*err = dk_buttons_init(button_handler);
	if (err) {
		printk("Failed to initialize buttons (err %d)\n", err);
		return;
	}*/
}
    a37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_bas_client_init(&bas_sensor3);
    a382:	f002 be51 	b.w	d028 <bt_bas_client_init>
		bt_bas_client_init(&bas_sensor2);
    a386:	4805      	ldr	r0, [pc, #20]	; (a39c <initBatteryManager+0x40>)
    a388:	e7f9      	b.n	a37e <initBatteryManager+0x22>
		bt_bas_client_init(&bas_sensor3);
    a38a:	4805      	ldr	r0, [pc, #20]	; (a3a0 <initBatteryManager+0x44>)
    a38c:	e7f7      	b.n	a37e <initBatteryManager+0x22>
}
    a38e:	bd10      	pop	{r4, pc}
    a390:	2000c2f5 	.word	0x2000c2f5
    a394:	0001f91b 	.word	0x0001f91b
    a398:	20008830 	.word	0x20008830
    a39c:	200088b8 	.word	0x200088b8
    a3a0:	20008940 	.word	0x20008940

0000a3a4 <getBatteryLevel>:

uint8_t getBatteryLevel(uint8_t nbrSensor) 
{
    a3a4:	b538      	push	{r3, r4, r5, lr}
    a3a6:	4605      	mov	r5, r0
    int err = 0;

	printk("Reading BAS value:\n");
    a3a8:	4818      	ldr	r0, [pc, #96]	; (a40c <getBatteryLevel+0x68>)
    a3aa:	f010 f83c 	bl	1a426 <printk>

	switch (nbrSensor)
    a3ae:	2d02      	cmp	r5, #2
    a3b0:	d016      	beq.n	a3e0 <getBatteryLevel+0x3c>
    a3b2:	2d03      	cmp	r5, #3
    a3b4:	d01d      	beq.n	a3f2 <getBatteryLevel+0x4e>
    a3b6:	2d01      	cmp	r5, #1
    a3b8:	d124      	bne.n	a404 <getBatteryLevel+0x60>
	{
	case 1:
		err = bt_bas_read_battery_level(&bas_sensor1, read_battery_level_cb);
    a3ba:	4915      	ldr	r1, [pc, #84]	; (a410 <getBatteryLevel+0x6c>)
    a3bc:	4815      	ldr	r0, [pc, #84]	; (a414 <getBatteryLevel+0x70>)
    a3be:	f002 ff0b 	bl	d1d8 <bt_bas_read_battery_level>
		break;
	default:
		break;
	}

	if (err)
    a3c2:	4604      	mov	r4, r0
    a3c4:	b148      	cbz	r0, a3da <getBatteryLevel+0x36>
    {
		printk("BAS read call error: %d\n", err);
    a3c6:	4621      	mov	r1, r4
    a3c8:	4813      	ldr	r0, [pc, #76]	; (a418 <getBatteryLevel+0x74>)
    a3ca:	f010 f82c 	bl	1a426 <printk>
	}

	switch (nbrSensor)
    a3ce:	2d02      	cmp	r5, #2
    a3d0:	d00d      	beq.n	a3ee <getBatteryLevel+0x4a>
    a3d2:	2d03      	cmp	r5, #3
    a3d4:	d014      	beq.n	a400 <getBatteryLevel+0x5c>
    a3d6:	2d01      	cmp	r5, #1
    a3d8:	d115      	bne.n	a406 <getBatteryLevel+0x62>
	{
	case 1:
		return batteryLevel_sensor1;
    a3da:	4b10      	ldr	r3, [pc, #64]	; (a41c <getBatteryLevel+0x78>)
		break;
	case 2:
		return batteryLevel_sensor2;
    a3dc:	7818      	ldrb	r0, [r3, #0]
	default:
		break;
	}

    return err;
}
    a3de:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_bas_read_battery_level(&bas_sensor2, read_battery_level_cb2);
    a3e0:	490f      	ldr	r1, [pc, #60]	; (a420 <getBatteryLevel+0x7c>)
    a3e2:	4810      	ldr	r0, [pc, #64]	; (a424 <getBatteryLevel+0x80>)
    a3e4:	f002 fef8 	bl	d1d8 <bt_bas_read_battery_level>
	if (err)
    a3e8:	4604      	mov	r4, r0
    a3ea:	2800      	cmp	r0, #0
    a3ec:	d1eb      	bne.n	a3c6 <getBatteryLevel+0x22>
		return batteryLevel_sensor2;
    a3ee:	4b0e      	ldr	r3, [pc, #56]	; (a428 <getBatteryLevel+0x84>)
    a3f0:	e7f4      	b.n	a3dc <getBatteryLevel+0x38>
		err = bt_bas_read_battery_level(&bas_sensor3, read_battery_level_cb3);
    a3f2:	490e      	ldr	r1, [pc, #56]	; (a42c <getBatteryLevel+0x88>)
    a3f4:	480e      	ldr	r0, [pc, #56]	; (a430 <getBatteryLevel+0x8c>)
    a3f6:	f002 feef 	bl	d1d8 <bt_bas_read_battery_level>
	if (err)
    a3fa:	4604      	mov	r4, r0
    a3fc:	2800      	cmp	r0, #0
    a3fe:	d1e2      	bne.n	a3c6 <getBatteryLevel+0x22>
		return batteryLevel_sensor3;
    a400:	4b0c      	ldr	r3, [pc, #48]	; (a434 <getBatteryLevel+0x90>)
    a402:	e7eb      	b.n	a3dc <getBatteryLevel+0x38>
	switch (nbrSensor)
    a404:	2400      	movs	r4, #0
    return err;
    a406:	b2e0      	uxtb	r0, r4
    a408:	e7e9      	b.n	a3de <getBatteryLevel+0x3a>
    a40a:	bf00      	nop
    a40c:	0001f93f 	.word	0x0001f93f
    a410:	0000a2c9 	.word	0x0000a2c9
    a414:	20008830 	.word	0x20008830
    a418:	0001f953 	.word	0x0001f953
    a41c:	2000c2f1 	.word	0x2000c2f1
    a420:	0000a285 	.word	0x0000a285
    a424:	200088b8 	.word	0x200088b8
    a428:	2000c2f2 	.word	0x2000c2f2
    a42c:	0000a241 	.word	0x0000a241
    a430:	20008940 	.word	0x20008940
    a434:	2000c2f3 	.word	0x2000c2f3

0000a438 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a438:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a43a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    a43c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a440:	2b02      	cmp	r3, #2
{
    a442:	4604      	mov	r4, r0
    a444:	460e      	mov	r6, r1
	notify->result = res;
    a446:	6081      	str	r1, [r0, #8]
	switch (method) {
    a448:	d010      	beq.n	a46c <sys_notify_finalize+0x34>
    a44a:	2b03      	cmp	r3, #3
    a44c:	d004      	beq.n	a458 <sys_notify_finalize+0x20>
    a44e:	2b01      	cmp	r3, #1
    a450:	d10f      	bne.n	a472 <sys_notify_finalize+0x3a>
    a452:	2500      	movs	r5, #0
    a454:	4628      	mov	r0, r5
    a456:	e001      	b.n	a45c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a458:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    a45a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a45c:	2300      	movs	r3, #0
    a45e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a460:	b110      	cbz	r0, a468 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a462:	4631      	mov	r1, r6
    a464:	f00f fe9c 	bl	1a1a0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a468:	4628      	mov	r0, r5
    a46a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    a46c:	2500      	movs	r5, #0
		sig = notify->method.signal;
    a46e:	6800      	ldr	r0, [r0, #0]
		break;
    a470:	e7f4      	b.n	a45c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    a472:	2245      	movs	r2, #69	; 0x45
    a474:	4904      	ldr	r1, [pc, #16]	; (a488 <sys_notify_finalize+0x50>)
    a476:	4805      	ldr	r0, [pc, #20]	; (a48c <sys_notify_finalize+0x54>)
    a478:	f00f ffd5 	bl	1a426 <printk>
    a47c:	2145      	movs	r1, #69	; 0x45
    a47e:	4802      	ldr	r0, [pc, #8]	; (a488 <sys_notify_finalize+0x50>)
    a480:	f010 fa77 	bl	1a972 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    a484:	2500      	movs	r5, #0
    a486:	e7e8      	b.n	a45a <sys_notify_finalize+0x22>
    a488:	0001f96c 	.word	0x0001f96c
    a48c:	0001f98f 	.word	0x0001f98f

0000a490 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    a490:	680b      	ldr	r3, [r1, #0]
    a492:	3301      	adds	r3, #1
    a494:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    a496:	4b01      	ldr	r3, [pc, #4]	; (a49c <char_out+0xc>)
    a498:	681b      	ldr	r3, [r3, #0]
    a49a:	4718      	bx	r3
    a49c:	20008208 	.word	0x20008208

0000a4a0 <__printk_hook_install>:
	_char_out = fn;
    a4a0:	4b01      	ldr	r3, [pc, #4]	; (a4a8 <__printk_hook_install+0x8>)
    a4a2:	6018      	str	r0, [r3, #0]
}
    a4a4:	4770      	bx	lr
    a4a6:	bf00      	nop
    a4a8:	20008208 	.word	0x20008208

0000a4ac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    a4ac:	b507      	push	{r0, r1, r2, lr}
    a4ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    a4b0:	2100      	movs	r1, #0
{
    a4b2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    a4b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    a4b6:	4803      	ldr	r0, [pc, #12]	; (a4c4 <vprintk+0x18>)
    a4b8:	a901      	add	r1, sp, #4
    a4ba:	f000 fbe9 	bl	ac90 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    a4be:	b003      	add	sp, #12
    a4c0:	f85d fb04 	ldr.w	pc, [sp], #4
    a4c4:	0000a491 	.word	0x0000a491

0000a4c8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a4c8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    a4ca:	2500      	movs	r5, #0
{
    a4cc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    a4ce:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    a4d2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    a4d4:	a901      	add	r1, sp, #4
    a4d6:	4805      	ldr	r0, [pc, #20]	; (a4ec <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    a4d8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    a4da:	f000 fbd9 	bl	ac90 <cbvprintf>

	if (ctx.count < ctx.max) {
    a4de:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    a4e2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a4e4:	bfb8      	it	lt
    a4e6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a4e8:	b005      	add	sp, #20
    a4ea:	bd30      	pop	{r4, r5, pc}
    a4ec:	0001a401 	.word	0x0001a401

0000a4f0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a4f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a4f4:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    a4f8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a4fa:	f01a 0f08 	tst.w	sl, #8
{
    a4fe:	4693      	mov	fp, r2
	if (processing) {
    a500:	d01c      	beq.n	a53c <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    a502:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a504:	bf0c      	ite	eq
    a506:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    a50a:	f04a 0a20 	orrne.w	sl, sl, #32
    a50e:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a512:	f104 0014 	add.w	r0, r4, #20
    a516:	f00e ffab 	bl	19470 <z_spin_unlock_valid>
    a51a:	b940      	cbnz	r0, a52e <process_event+0x3e>
    a51c:	4992      	ldr	r1, [pc, #584]	; (a768 <process_event+0x278>)
    a51e:	4893      	ldr	r0, [pc, #588]	; (a76c <process_event+0x27c>)
    a520:	22a7      	movs	r2, #167	; 0xa7
    a522:	f00f ff80 	bl	1a426 <printk>
    a526:	21a7      	movs	r1, #167	; 0xa7
    a528:	488f      	ldr	r0, [pc, #572]	; (a768 <process_event+0x278>)
    a52a:	f010 fa22 	bl	1a972 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a52e:	f38b 8811 	msr	BASEPRI, fp
    a532:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a536:	b003      	add	sp, #12
    a538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    a53c:	4f8c      	ldr	r7, [pc, #560]	; (a770 <process_event+0x280>)
    a53e:	f8df 822c 	ldr.w	r8, [pc, #556]	; a76c <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a542:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    a546:	2902      	cmp	r1, #2
    a548:	d106      	bne.n	a558 <process_event+0x68>
			evt = process_recheck(mgr);
    a54a:	4620      	mov	r0, r4
    a54c:	f00f ff85 	bl	1a45a <process_recheck>
		if (evt == EVT_NOP) {
    a550:	2800      	cmp	r0, #0
    a552:	d0de      	beq.n	a512 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    a554:	2801      	cmp	r0, #1
    a556:	d163      	bne.n	a620 <process_event+0x130>
			res = mgr->last_res;
    a558:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a55c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    a55e:	f1b9 0f00 	cmp.w	r9, #0
    a562:	da19      	bge.n	a598 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    a564:	2600      	movs	r6, #0
		*clients = mgr->clients;
    a566:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a568:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    a56c:	e9c4 6600 	strd	r6, r6, [r4]
    a570:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a574:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a576:	8ba3      	ldrh	r3, [r4, #28]
    a578:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a57c:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a57e:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    a580:	d003      	beq.n	a58a <process_event+0x9a>
		if (do_monitors
    a582:	68a2      	ldr	r2, [r4, #8]
    a584:	2a00      	cmp	r2, #0
    a586:	f040 80f5 	bne.w	a774 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    a58a:	b915      	cbnz	r5, a592 <process_event+0xa2>
		    || (transit != NULL)) {
    a58c:	2e00      	cmp	r6, #0
    a58e:	f000 812f 	beq.w	a7f0 <process_event+0x300>
    a592:	f04f 0a00 	mov.w	sl, #0
    a596:	e0ef      	b.n	a778 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a598:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a59c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a59e:	2901      	cmp	r1, #1
    a5a0:	d820      	bhi.n	a5e4 <process_event+0xf4>
	list->head = NULL;
    a5a2:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a5a4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    a5a8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    a5aa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a5ac:	b29b      	uxth	r3, r3
	list->tail = NULL;
    a5ae:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a5b2:	d10a      	bne.n	a5ca <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a5b4:	b13d      	cbz	r5, a5c6 <process_event+0xd6>
    a5b6:	4629      	mov	r1, r5
    a5b8:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    a5ba:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    a5bc:	3201      	adds	r2, #1
    a5be:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a5c0:	2900      	cmp	r1, #0
    a5c2:	d1fa      	bne.n	a5ba <process_event+0xca>
    a5c4:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a5c6:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    a5ca:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a5cc:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a5ce:	f00f ff44 	bl	1a45a <process_recheck>
    a5d2:	4606      	mov	r6, r0
    a5d4:	2800      	cmp	r0, #0
    a5d6:	d0ce      	beq.n	a576 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a5d8:	8ba3      	ldrh	r3, [r4, #28]
    a5da:	f043 0320 	orr.w	r3, r3, #32
    a5de:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    a5e0:	2600      	movs	r6, #0
    a5e2:	e7c8      	b.n	a576 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a5e4:	2a04      	cmp	r2, #4
    a5e6:	d10d      	bne.n	a604 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a5e8:	f023 0307 	bic.w	r3, r3, #7
    a5ec:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    a5ee:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a5f0:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a5f2:	f00f ff32 	bl	1a45a <process_recheck>
    a5f6:	4605      	mov	r5, r0
    a5f8:	b180      	cbz	r0, a61c <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a5fa:	f042 0220 	orr.w	r2, r2, #32
    a5fe:	2500      	movs	r5, #0
    a600:	83a2      	strh	r2, [r4, #28]
    a602:	e7ed      	b.n	a5e0 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    a604:	f240 1219 	movw	r2, #281	; 0x119
    a608:	4639      	mov	r1, r7
    a60a:	4640      	mov	r0, r8
    a60c:	f00f ff0b 	bl	1a426 <printk>
    a610:	f240 1119 	movw	r1, #281	; 0x119
    a614:	4638      	mov	r0, r7
    a616:	f010 f9ac 	bl	1a972 <assert_post_action>
    a61a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    a61c:	462e      	mov	r6, r5
    a61e:	e7aa      	b.n	a576 <process_event+0x86>
		} else if (evt == EVT_START) {
    a620:	2803      	cmp	r0, #3
    a622:	d131      	bne.n	a688 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    a624:	f1ba 0f00 	cmp.w	sl, #0
    a628:	d00a      	beq.n	a640 <process_event+0x150>
    a62a:	4639      	mov	r1, r7
    a62c:	4640      	mov	r0, r8
    a62e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a632:	f00f fef8 	bl	1a426 <printk>
    a636:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a63a:	4638      	mov	r0, r7
    a63c:	f010 f999 	bl	1a972 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a640:	6823      	ldr	r3, [r4, #0]
    a642:	b953      	cbnz	r3, a65a <process_event+0x16a>
    a644:	4639      	mov	r1, r7
    a646:	4640      	mov	r0, r8
    a648:	f240 1255 	movw	r2, #341	; 0x155
    a64c:	f00f feeb 	bl	1a426 <printk>
    a650:	f240 1155 	movw	r1, #341	; 0x155
    a654:	4638      	mov	r0, r7
    a656:	f010 f98c 	bl	1a972 <assert_post_action>
			transit = mgr->transitions->start;
    a65a:	6923      	ldr	r3, [r4, #16]
    a65c:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a65e:	b956      	cbnz	r6, a676 <process_event+0x186>
    a660:	4639      	mov	r1, r7
    a662:	4640      	mov	r0, r8
    a664:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a668:	f00f fedd 	bl	1a426 <printk>
    a66c:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a670:	4638      	mov	r0, r7
    a672:	f010 f97e 	bl	1a972 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a676:	8ba3      	ldrh	r3, [r4, #28]
    a678:	f023 0307 	bic.w	r3, r3, #7
    a67c:	f043 0306 	orr.w	r3, r3, #6
}
    a680:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a682:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a684:	46a9      	mov	r9, r5
}
    a686:	e776      	b.n	a576 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a688:	2804      	cmp	r0, #4
    a68a:	d12e      	bne.n	a6ea <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a68c:	f1ba 0f02 	cmp.w	sl, #2
    a690:	d00a      	beq.n	a6a8 <process_event+0x1b8>
    a692:	4639      	mov	r1, r7
    a694:	4640      	mov	r0, r8
    a696:	f240 125b 	movw	r2, #347	; 0x15b
    a69a:	f00f fec4 	bl	1a426 <printk>
    a69e:	f240 115b 	movw	r1, #347	; 0x15b
    a6a2:	4638      	mov	r0, r7
    a6a4:	f010 f965 	bl	1a972 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a6a8:	8be3      	ldrh	r3, [r4, #30]
    a6aa:	b153      	cbz	r3, a6c2 <process_event+0x1d2>
    a6ac:	4639      	mov	r1, r7
    a6ae:	4640      	mov	r0, r8
    a6b0:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a6b4:	f00f feb7 	bl	1a426 <printk>
    a6b8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a6bc:	4638      	mov	r0, r7
    a6be:	f010 f958 	bl	1a972 <assert_post_action>
			transit = mgr->transitions->stop;
    a6c2:	6923      	ldr	r3, [r4, #16]
    a6c4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a6c6:	b956      	cbnz	r6, a6de <process_event+0x1ee>
    a6c8:	4639      	mov	r1, r7
    a6ca:	4640      	mov	r0, r8
    a6cc:	f240 125f 	movw	r2, #351	; 0x15f
    a6d0:	f00f fea9 	bl	1a426 <printk>
    a6d4:	f240 115f 	movw	r1, #351	; 0x15f
    a6d8:	4638      	mov	r0, r7
    a6da:	f010 f94a 	bl	1a972 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a6de:	8ba3      	ldrh	r3, [r4, #28]
    a6e0:	f023 0307 	bic.w	r3, r3, #7
    a6e4:	f043 0304 	orr.w	r3, r3, #4
    a6e8:	e7ca      	b.n	a680 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a6ea:	2805      	cmp	r0, #5
    a6ec:	d12e      	bne.n	a74c <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a6ee:	f1ba 0f01 	cmp.w	sl, #1
    a6f2:	d00a      	beq.n	a70a <process_event+0x21a>
    a6f4:	4639      	mov	r1, r7
    a6f6:	4640      	mov	r0, r8
    a6f8:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a6fc:	f00f fe93 	bl	1a426 <printk>
    a700:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a704:	4638      	mov	r0, r7
    a706:	f010 f934 	bl	1a972 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a70a:	6823      	ldr	r3, [r4, #0]
    a70c:	b953      	cbnz	r3, a724 <process_event+0x234>
    a70e:	4639      	mov	r1, r7
    a710:	4640      	mov	r0, r8
    a712:	f240 1263 	movw	r2, #355	; 0x163
    a716:	f00f fe86 	bl	1a426 <printk>
    a71a:	f240 1163 	movw	r1, #355	; 0x163
    a71e:	4638      	mov	r0, r7
    a720:	f010 f927 	bl	1a972 <assert_post_action>
			transit = mgr->transitions->reset;
    a724:	6923      	ldr	r3, [r4, #16]
    a726:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a728:	b956      	cbnz	r6, a740 <process_event+0x250>
    a72a:	4639      	mov	r1, r7
    a72c:	4640      	mov	r0, r8
    a72e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a732:	f00f fe78 	bl	1a426 <printk>
    a736:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a73a:	4638      	mov	r0, r7
    a73c:	f010 f919 	bl	1a972 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a740:	8ba3      	ldrh	r3, [r4, #28]
    a742:	f023 0307 	bic.w	r3, r3, #7
    a746:	f043 0305 	orr.w	r3, r3, #5
    a74a:	e799      	b.n	a680 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a74c:	2500      	movs	r5, #0
    a74e:	f240 1269 	movw	r2, #361	; 0x169
    a752:	4639      	mov	r1, r7
    a754:	4640      	mov	r0, r8
    a756:	f00f fe66 	bl	1a426 <printk>
    a75a:	f240 1169 	movw	r1, #361	; 0x169
    a75e:	4638      	mov	r0, r7
    a760:	f010 f907 	bl	1a972 <assert_post_action>
		onoff_transition_fn transit = NULL;
    a764:	462e      	mov	r6, r5
    a766:	e78d      	b.n	a684 <process_event+0x194>
    a768:	0001f9c9 	.word	0x0001f9c9
    a76c:	0001f98f 	.word	0x0001f98f
    a770:	0001f9a7 	.word	0x0001f9a7
				   && !sys_slist_is_empty(&mgr->monitors);
    a774:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a778:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a77c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a77e:	f104 0314 	add.w	r3, r4, #20
    a782:	4618      	mov	r0, r3
    a784:	9301      	str	r3, [sp, #4]
    a786:	f00e fe73 	bl	19470 <z_spin_unlock_valid>
    a78a:	b940      	cbnz	r0, a79e <process_event+0x2ae>
    a78c:	4640      	mov	r0, r8
    a78e:	4931      	ldr	r1, [pc, #196]	; (a854 <process_event+0x364>)
    a790:	22a7      	movs	r2, #167	; 0xa7
    a792:	f00f fe48 	bl	1a426 <printk>
    a796:	21a7      	movs	r1, #167	; 0xa7
    a798:	482e      	ldr	r0, [pc, #184]	; (a854 <process_event+0x364>)
    a79a:	f010 f8ea 	bl	1a972 <assert_post_action>
    a79e:	f38b 8811 	msr	BASEPRI, fp
    a7a2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a7a6:	f1ba 0f00 	cmp.w	sl, #0
    a7aa:	d130      	bne.n	a80e <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a7ac:	2d00      	cmp	r5, #0
    a7ae:	d140      	bne.n	a832 <process_event+0x342>
			if (transit != NULL) {
    a7b0:	b116      	cbz	r6, a7b8 <process_event+0x2c8>
				transit(mgr, transition_complete);
    a7b2:	4620      	mov	r0, r4
    a7b4:	4928      	ldr	r1, [pc, #160]	; (a858 <process_event+0x368>)
    a7b6:	47b0      	blx	r6
	__asm__ volatile(
    a7b8:	f04f 0320 	mov.w	r3, #32
    a7bc:	f3ef 8b11 	mrs	fp, BASEPRI
    a7c0:	f383 8811 	msr	BASEPRI, r3
    a7c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a7c8:	9801      	ldr	r0, [sp, #4]
    a7ca:	f00e fe43 	bl	19454 <z_spin_lock_valid>
    a7ce:	b940      	cbnz	r0, a7e2 <process_event+0x2f2>
    a7d0:	4640      	mov	r0, r8
    a7d2:	4920      	ldr	r1, [pc, #128]	; (a854 <process_event+0x364>)
    a7d4:	227c      	movs	r2, #124	; 0x7c
    a7d6:	f00f fe26 	bl	1a426 <printk>
    a7da:	217c      	movs	r1, #124	; 0x7c
    a7dc:	481d      	ldr	r0, [pc, #116]	; (a854 <process_event+0x364>)
    a7de:	f010 f8c8 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
    a7e2:	9801      	ldr	r0, [sp, #4]
    a7e4:	f00e fe52 	bl	1948c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a7e8:	8ba3      	ldrh	r3, [r4, #28]
    a7ea:	f023 0308 	bic.w	r3, r3, #8
    a7ee:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a7f0:	8ba3      	ldrh	r3, [r4, #28]
    a7f2:	06da      	lsls	r2, r3, #27
    a7f4:	d525      	bpl.n	a842 <process_event+0x352>
			evt = EVT_COMPLETE;
    a7f6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a7f8:	f023 0310 	bic.w	r3, r3, #16
    a7fc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a7fe:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    a802:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    a806:	2900      	cmp	r1, #0
    a808:	f47f ae9d 	bne.w	a546 <process_event+0x56>
out:
    a80c:	e681      	b.n	a512 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a80e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a810:	2900      	cmp	r1, #0
    a812:	d0cb      	beq.n	a7ac <process_event+0x2bc>
	return node->next;
    a814:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    a818:	464b      	mov	r3, r9
    a81a:	4620      	mov	r0, r4
    a81c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a820:	9a00      	ldr	r2, [sp, #0]
    a822:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a824:	f1ba 0f00 	cmp.w	sl, #0
    a828:	d0c0      	beq.n	a7ac <process_event+0x2bc>
    a82a:	4651      	mov	r1, sl
    a82c:	f8da a000 	ldr.w	sl, [sl]
    a830:	e7f2      	b.n	a818 <process_event+0x328>
    a832:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a834:	464b      	mov	r3, r9
    a836:	4620      	mov	r0, r4
    a838:	9a00      	ldr	r2, [sp, #0]
    a83a:	682d      	ldr	r5, [r5, #0]
    a83c:	f00f fe29 	bl	1a492 <notify_one>
    a840:	e7b4      	b.n	a7ac <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a842:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a846:	bf1e      	ittt	ne
    a848:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a84c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a84e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a850:	e7d5      	b.n	a7fe <process_event+0x30e>
    a852:	bf00      	nop
    a854:	0001f9c9 	.word	0x0001f9c9
    a858:	0000a85d 	.word	0x0000a85d

0000a85c <transition_complete>:
{
    a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a85e:	4604      	mov	r4, r0
    a860:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a862:	f100 0614 	add.w	r6, r0, #20
    a866:	f04f 0320 	mov.w	r3, #32
    a86a:	f3ef 8711 	mrs	r7, BASEPRI
    a86e:	f383 8811 	msr	BASEPRI, r3
    a872:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a876:	4630      	mov	r0, r6
    a878:	f00e fdec 	bl	19454 <z_spin_lock_valid>
    a87c:	b940      	cbnz	r0, a890 <transition_complete+0x34>
    a87e:	490a      	ldr	r1, [pc, #40]	; (a8a8 <transition_complete+0x4c>)
    a880:	480a      	ldr	r0, [pc, #40]	; (a8ac <transition_complete+0x50>)
    a882:	227c      	movs	r2, #124	; 0x7c
    a884:	f00f fdcf 	bl	1a426 <printk>
    a888:	217c      	movs	r1, #124	; 0x7c
    a88a:	4807      	ldr	r0, [pc, #28]	; (a8a8 <transition_complete+0x4c>)
    a88c:	f010 f871 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
    a890:	4630      	mov	r0, r6
    a892:	f00e fdfb 	bl	1948c <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a896:	463a      	mov	r2, r7
    a898:	4620      	mov	r0, r4
	mgr->last_res = res;
    a89a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a89c:	2101      	movs	r1, #1
}
    a89e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a8a2:	f7ff be25 	b.w	a4f0 <process_event>
    a8a6:	bf00      	nop
    a8a8:	0001f9c9 	.word	0x0001f9c9
    a8ac:	0001f98f 	.word	0x0001f98f

0000a8b0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8b4:	4604      	mov	r4, r0
    a8b6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a8b8:	f00f fe01 	bl	1a4be <validate_args>

	if (rv < 0) {
    a8bc:	1e05      	subs	r5, r0, #0
    a8be:	db54      	blt.n	a96a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a8c0:	f104 0914 	add.w	r9, r4, #20
    a8c4:	f04f 0320 	mov.w	r3, #32
    a8c8:	f3ef 8a11 	mrs	sl, BASEPRI
    a8cc:	f383 8811 	msr	BASEPRI, r3
    a8d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a8d4:	4648      	mov	r0, r9
    a8d6:	f00e fdbd 	bl	19454 <z_spin_lock_valid>
    a8da:	b940      	cbnz	r0, a8ee <onoff_request+0x3e>
    a8dc:	4933      	ldr	r1, [pc, #204]	; (a9ac <onoff_request+0xfc>)
    a8de:	4834      	ldr	r0, [pc, #208]	; (a9b0 <onoff_request+0x100>)
    a8e0:	227c      	movs	r2, #124	; 0x7c
    a8e2:	f00f fda0 	bl	1a426 <printk>
    a8e6:	217c      	movs	r1, #124	; 0x7c
    a8e8:	4830      	ldr	r0, [pc, #192]	; (a9ac <onoff_request+0xfc>)
    a8ea:	f010 f842 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
    a8ee:	4648      	mov	r0, r9
    a8f0:	f00e fdcc 	bl	1948c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a8f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a8f8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a8fa:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a8fc:	428b      	cmp	r3, r1
    a8fe:	f002 0607 	and.w	r6, r2, #7
    a902:	d04a      	beq.n	a99a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a904:	2e02      	cmp	r6, #2
    a906:	d11f      	bne.n	a948 <onoff_request+0x98>
	rv = state;
    a908:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a90a:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a90e:	3301      	adds	r3, #1
    a910:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a912:	4648      	mov	r0, r9
    a914:	f00e fdac 	bl	19470 <z_spin_unlock_valid>
    a918:	b940      	cbnz	r0, a92c <onoff_request+0x7c>
    a91a:	4924      	ldr	r1, [pc, #144]	; (a9ac <onoff_request+0xfc>)
    a91c:	4824      	ldr	r0, [pc, #144]	; (a9b0 <onoff_request+0x100>)
    a91e:	22a7      	movs	r2, #167	; 0xa7
    a920:	f00f fd81 	bl	1a426 <printk>
    a924:	21a7      	movs	r1, #167	; 0xa7
    a926:	4821      	ldr	r0, [pc, #132]	; (a9ac <onoff_request+0xfc>)
    a928:	f010 f823 	bl	1a972 <assert_post_action>
	__asm__ volatile(
    a92c:	f38a 8811 	msr	BASEPRI, sl
    a930:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a934:	f1b8 0f00 	cmp.w	r8, #0
    a938:	d017      	beq.n	a96a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a93a:	2300      	movs	r3, #0
    a93c:	4632      	mov	r2, r6
    a93e:	4639      	mov	r1, r7
    a940:	4620      	mov	r0, r4
    a942:	f00f fda6 	bl	1a492 <notify_one>
    a946:	e010      	b.n	a96a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a948:	0793      	lsls	r3, r2, #30
    a94a:	d001      	beq.n	a950 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a94c:	2e06      	cmp	r6, #6
    a94e:	d10f      	bne.n	a970 <onoff_request+0xc0>
	parent->next = child;
    a950:	2300      	movs	r3, #0
    a952:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a954:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a956:	b9eb      	cbnz	r3, a994 <onoff_request+0xe4>
	list->head = node;
    a958:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a95c:	4635      	mov	r5, r6
    a95e:	b9f6      	cbnz	r6, a99e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a960:	4652      	mov	r2, sl
    a962:	2102      	movs	r1, #2
    a964:	4620      	mov	r0, r4
    a966:	f7ff fdc3 	bl	a4f0 <process_event>
		}
	}

	return rv;
}
    a96a:	4628      	mov	r0, r5
    a96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a970:	2e05      	cmp	r6, #5
    a972:	d017      	beq.n	a9a4 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a974:	2e01      	cmp	r6, #1
    a976:	d00a      	beq.n	a98e <onoff_request+0xde>
    a978:	490e      	ldr	r1, [pc, #56]	; (a9b4 <onoff_request+0x104>)
    a97a:	480d      	ldr	r0, [pc, #52]	; (a9b0 <onoff_request+0x100>)
    a97c:	f240 12c5 	movw	r2, #453	; 0x1c5
    a980:	f00f fd51 	bl	1a426 <printk>
    a984:	f240 11c5 	movw	r1, #453	; 0x1c5
    a988:	480a      	ldr	r0, [pc, #40]	; (a9b4 <onoff_request+0x104>)
    a98a:	f00f fff2 	bl	1a972 <assert_post_action>
		rv = -EIO;
    a98e:	f06f 0504 	mvn.w	r5, #4
    a992:	e004      	b.n	a99e <onoff_request+0xee>
	parent->next = child;
    a994:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a996:	6067      	str	r7, [r4, #4]
}
    a998:	e7e0      	b.n	a95c <onoff_request+0xac>
		rv = -EAGAIN;
    a99a:	f06f 050a 	mvn.w	r5, #10
    a99e:	f04f 0800 	mov.w	r8, #0
    a9a2:	e7b6      	b.n	a912 <onoff_request+0x62>
		rv = -ENOTSUP;
    a9a4:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a9a8:	e7f9      	b.n	a99e <onoff_request+0xee>
    a9aa:	bf00      	nop
    a9ac:	0001f9c9 	.word	0x0001f9c9
    a9b0:	0001f98f 	.word	0x0001f98f
    a9b4:	0001f9a7 	.word	0x0001f9a7

0000a9b8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9bc:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a9be:	4e14      	ldr	r6, [pc, #80]	; (aa10 <z_work_q_main+0x58>)
    a9c0:	f8df 8050 	ldr.w	r8, [pc, #80]	; aa14 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a9c4:	f04f 32ff 	mov.w	r2, #4294967295
    a9c8:	f04f 33ff 	mov.w	r3, #4294967295
    a9cc:	4628      	mov	r0, r5
    a9ce:	f00d fae9 	bl	17fa4 <z_impl_k_queue_get>
		if (work == NULL) {
    a9d2:	4604      	mov	r4, r0
    a9d4:	2800      	cmp	r0, #0
    a9d6:	d0f5      	beq.n	a9c4 <z_work_q_main+0xc>
		handler = work->handler;
    a9d8:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a9da:	b947      	cbnz	r7, a9ee <z_work_q_main+0x36>
    a9dc:	4631      	mov	r1, r6
    a9de:	4640      	mov	r0, r8
    a9e0:	221c      	movs	r2, #28
    a9e2:	f00f fd20 	bl	1a426 <printk>
    a9e6:	211c      	movs	r1, #28
    a9e8:	4630      	mov	r0, r6
    a9ea:	f00f ffc2 	bl	1a972 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a9ee:	f104 0308 	add.w	r3, r4, #8
    a9f2:	e8d3 2fef 	ldaex	r2, [r3]
    a9f6:	f022 0101 	bic.w	r1, r2, #1
    a9fa:	e8c3 1fe0 	stlex	r0, r1, [r3]
    a9fe:	2800      	cmp	r0, #0
    aa00:	d1f7      	bne.n	a9f2 <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    aa02:	07d3      	lsls	r3, r2, #31
    aa04:	d501      	bpl.n	aa0a <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    aa06:	4620      	mov	r0, r4
    aa08:	47b8      	blx	r7
	z_impl_k_yield();
    aa0a:	f00e f9f5 	bl	18df8 <z_impl_k_yield>
    aa0e:	e7d9      	b.n	a9c4 <z_work_q_main+0xc>
    aa10:	0001f9ef 	.word	0x0001f9ef
    aa14:	0001f98f 	.word	0x0001f98f

0000aa18 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    aa18:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    aa1a:	2900      	cmp	r1, #0
    aa1c:	d039      	beq.n	aa92 <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    aa1e:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    aa20:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    aa22:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    aa24:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    aa26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    aa2a:	bf2c      	ite	cs
    aa2c:	2408      	movcs	r4, #8
    aa2e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    aa30:	1b0c      	subs	r4, r1, r4
    aa32:	1b64      	subs	r4, r4, r5
    aa34:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    aa36:	4621      	mov	r1, r4
    aa38:	f00f fd6d 	bl	1a516 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    aa3c:	07c3      	lsls	r3, r0, #31
    aa3e:	d408      	bmi.n	aa52 <sys_heap_free+0x3a>
    aa40:	4914      	ldr	r1, [pc, #80]	; (aa94 <sys_heap_free+0x7c>)
    aa42:	4815      	ldr	r0, [pc, #84]	; (aa98 <sys_heap_free+0x80>)
    aa44:	229a      	movs	r2, #154	; 0x9a
    aa46:	f00f fcee 	bl	1a426 <printk>
    aa4a:	219a      	movs	r1, #154	; 0x9a
    aa4c:	4811      	ldr	r0, [pc, #68]	; (aa94 <sys_heap_free+0x7c>)
    aa4e:	f00f ff90 	bl	1a972 <assert_post_action>
	return c + chunk_size(h, c);
    aa52:	4621      	mov	r1, r4
    aa54:	4628      	mov	r0, r5
    aa56:	f00f fd74 	bl	1a542 <chunk_size>
    aa5a:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    aa5c:	4631      	mov	r1, r6
    aa5e:	2200      	movs	r2, #0
    aa60:	4628      	mov	r0, r5
    aa62:	f00f fd58 	bl	1a516 <chunk_field>
    aa66:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    aa68:	42b4      	cmp	r4, r6
    aa6a:	d008      	beq.n	aa7e <sys_heap_free+0x66>
    aa6c:	4909      	ldr	r1, [pc, #36]	; (aa94 <sys_heap_free+0x7c>)
    aa6e:	480a      	ldr	r0, [pc, #40]	; (aa98 <sys_heap_free+0x80>)
    aa70:	22a2      	movs	r2, #162	; 0xa2
    aa72:	f00f fcd8 	bl	1a426 <printk>
    aa76:	21a2      	movs	r1, #162	; 0xa2
    aa78:	4806      	ldr	r0, [pc, #24]	; (aa94 <sys_heap_free+0x7c>)
    aa7a:	f00f ff7a 	bl	1a972 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    aa7e:	4621      	mov	r1, r4
    aa80:	4628      	mov	r0, r5
    aa82:	2200      	movs	r2, #0
    aa84:	f00f fd63 	bl	1a54e <set_chunk_used>
	free_chunk(h, c);
    aa88:	4621      	mov	r1, r4
}
    aa8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    aa8e:	f00f bea0 	b.w	1a7d2 <free_chunk>
}
    aa92:	bd70      	pop	{r4, r5, r6, pc}
    aa94:	0001fa12 	.word	0x0001fa12
    aa98:	0001f98f 	.word	0x0001f98f

0000aa9c <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    aa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    aaa0:	f101 39ff 	add.w	r9, r1, #4294967295
    aaa4:	ea19 0f01 	tst.w	r9, r1
{
    aaa8:	4680      	mov	r8, r0
    aaaa:	460f      	mov	r7, r1
    aaac:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    aaae:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    aab0:	d008      	beq.n	aac4 <sys_heap_aligned_alloc+0x28>
    aab2:	4931      	ldr	r1, [pc, #196]	; (ab78 <sys_heap_aligned_alloc+0xdc>)
    aab4:	4831      	ldr	r0, [pc, #196]	; (ab7c <sys_heap_aligned_alloc+0xe0>)
    aab6:	22fc      	movs	r2, #252	; 0xfc
    aab8:	f00f fcb5 	bl	1a426 <printk>
    aabc:	21fc      	movs	r1, #252	; 0xfc
    aabe:	482e      	ldr	r0, [pc, #184]	; (ab78 <sys_heap_aligned_alloc+0xdc>)
    aac0:	f00f ff57 	bl	1a972 <assert_post_action>
	return big_heap_chunks(h->len);
    aac4:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    aac6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    aaca:	bf2c      	ite	cs
    aacc:	2308      	movcs	r3, #8
    aace:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    aad0:	429f      	cmp	r7, r3
    aad2:	d805      	bhi.n	aae0 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    aad4:	4621      	mov	r1, r4
    aad6:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    aad8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    aadc:	f00f bebb 	b.w	1a856 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    aae0:	b91c      	cbnz	r4, aaea <sys_heap_aligned_alloc+0x4e>
		return NULL;
    aae2:	2600      	movs	r6, #0
}
    aae4:	4630      	mov	r0, r6
    aae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    aaea:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    aaee:	d9f8      	bls.n	aae2 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    aaf0:	1939      	adds	r1, r7, r4
    aaf2:	1ac9      	subs	r1, r1, r3
    aaf4:	f00f fd47 	bl	1a586 <bytes_to_chunksz.isra.0>
    aaf8:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    aafa:	4628      	mov	r0, r5
    aafc:	f00f fd9e 	bl	1a63c <alloc_chunk>
	if (c0 == 0) {
    ab00:	4680      	mov	r8, r0
    ab02:	2800      	cmp	r0, #0
    ab04:	d0ed      	beq.n	aae2 <sys_heap_aligned_alloc+0x46>
    ab06:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    ab08:	427f      	negs	r7, r7
    ab0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ab0e:	bf2c      	ite	cs
    ab10:	2308      	movcs	r3, #8
    ab12:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    ab14:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    ab18:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    ab1a:	444e      	add	r6, r9
    ab1c:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ab1e:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ab20:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ab22:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ab24:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ab26:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ab2a:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    ab2c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ab30:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ab34:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ab38:	d208      	bcs.n	ab4c <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    ab3a:	4601      	mov	r1, r0
    ab3c:	463a      	mov	r2, r7
    ab3e:	4628      	mov	r0, r5
    ab40:	f00f fdbf 	bl	1a6c2 <split_chunks>
		free_list_add(h, c0);
    ab44:	4641      	mov	r1, r8
    ab46:	4628      	mov	r0, r5
    ab48:	f00f fe00 	bl	1a74c <free_list_add>
	return c + chunk_size(h, c);
    ab4c:	4639      	mov	r1, r7
    ab4e:	4628      	mov	r0, r5
    ab50:	f00f fcf7 	bl	1a542 <chunk_size>
    ab54:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ab56:	4284      	cmp	r4, r0
    ab58:	d208      	bcs.n	ab6c <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    ab5a:	4639      	mov	r1, r7
    ab5c:	4628      	mov	r0, r5
    ab5e:	4622      	mov	r2, r4
    ab60:	f00f fdaf 	bl	1a6c2 <split_chunks>
		free_list_add(h, c_end);
    ab64:	4621      	mov	r1, r4
    ab66:	4628      	mov	r0, r5
    ab68:	f00f fdf0 	bl	1a74c <free_list_add>
	set_chunk_used(h, c, true);
    ab6c:	2201      	movs	r2, #1
    ab6e:	4639      	mov	r1, r7
    ab70:	4628      	mov	r0, r5
    ab72:	f00f fcec 	bl	1a54e <set_chunk_used>
	return mem;
    ab76:	e7b5      	b.n	aae4 <sys_heap_aligned_alloc+0x48>
    ab78:	0001fa12 	.word	0x0001fa12
    ab7c:	0001f98f 	.word	0x0001f98f

0000ab80 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    ab80:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab86:	4607      	mov	r7, r0
    ab88:	460c      	mov	r4, r1
    ab8a:	4616      	mov	r6, r2
    ab8c:	d20e      	bcs.n	abac <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    ab8e:	2a04      	cmp	r2, #4
    ab90:	d80a      	bhi.n	aba8 <sys_heap_init+0x28>
    ab92:	493d      	ldr	r1, [pc, #244]	; (ac88 <sys_heap_init+0x108>)
    ab94:	483d      	ldr	r0, [pc, #244]	; (ac8c <sys_heap_init+0x10c>)
    ab96:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    ab9a:	f00f fc44 	bl	1a426 <printk>
    ab9e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    aba2:	4839      	ldr	r0, [pc, #228]	; (ac88 <sys_heap_init+0x108>)
    aba4:	f00f fee5 	bl	1a972 <assert_post_action>
    aba8:	2204      	movs	r2, #4
    abaa:	e000      	b.n	abae <sys_heap_init+0x2e>
    abac:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    abae:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    abb0:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    abb2:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    abb4:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    abb8:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    abbc:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    abbe:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    abc0:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    abc4:	d80a      	bhi.n	abdc <sys_heap_init+0x5c>
    abc6:	4930      	ldr	r1, [pc, #192]	; (ac88 <sys_heap_init+0x108>)
    abc8:	4830      	ldr	r0, [pc, #192]	; (ac8c <sys_heap_init+0x10c>)
    abca:	f240 1275 	movw	r2, #373	; 0x175
    abce:	f00f fc2a 	bl	1a426 <printk>
    abd2:	f240 1175 	movw	r1, #373	; 0x175
    abd6:	482c      	ldr	r0, [pc, #176]	; (ac88 <sys_heap_init+0x108>)
    abd8:	f00f fecb 	bl	1a972 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    abdc:	2300      	movs	r3, #0
    abde:	2200      	movs	r2, #0
	heap->heap = h;
    abe0:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    abe2:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    abe6:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    abe8:	4631      	mov	r1, r6
    abea:	4630      	mov	r0, r6
	h->len = buf_sz;
    abec:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    abee:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    abf0:	f00f fcd2 	bl	1a598 <bucket_idx.isra.0>
    abf4:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    abf6:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    abf8:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    abfa:	4630      	mov	r0, r6
    abfc:	f00f fcc3 	bl	1a586 <bytes_to_chunksz.isra.0>
    ac00:	341b      	adds	r4, #27
    ac02:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    ac04:	4420      	add	r0, r4
    ac06:	42b0      	cmp	r0, r6
    ac08:	d30a      	bcc.n	ac20 <sys_heap_init+0xa0>
    ac0a:	491f      	ldr	r1, [pc, #124]	; (ac88 <sys_heap_init+0x108>)
    ac0c:	481f      	ldr	r0, [pc, #124]	; (ac8c <sys_heap_init+0x10c>)
    ac0e:	f240 1281 	movw	r2, #385	; 0x181
    ac12:	f00f fc08 	bl	1a426 <printk>
    ac16:	f240 1181 	movw	r1, #385	; 0x181
    ac1a:	481b      	ldr	r0, [pc, #108]	; (ac88 <sys_heap_init+0x108>)
    ac1c:	f00f fea9 	bl	1a972 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    ac20:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    ac22:	4619      	mov	r1, r3
    ac24:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    ac28:	42bb      	cmp	r3, r7
    ac2a:	db28      	blt.n	ac7e <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    ac2c:	4622      	mov	r2, r4
    ac2e:	4628      	mov	r0, r5
    ac30:	2100      	movs	r1, #0
    ac32:	f00f fca4 	bl	1a57e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    ac36:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    ac38:	4628      	mov	r0, r5
    ac3a:	2201      	movs	r2, #1
    ac3c:	2100      	movs	r1, #0
    ac3e:	f00f fc86 	bl	1a54e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    ac42:	463a      	mov	r2, r7
    ac44:	4621      	mov	r1, r4
    ac46:	f00f fc9a 	bl	1a57e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    ac4a:	4623      	mov	r3, r4
    ac4c:	2200      	movs	r2, #0
    ac4e:	4621      	mov	r1, r4
    ac50:	4628      	mov	r0, r5
    ac52:	f00f fc6b 	bl	1a52c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    ac56:	4631      	mov	r1, r6
    ac58:	4628      	mov	r0, r5
    ac5a:	f00f fc90 	bl	1a57e <set_chunk_size>
    ac5e:	463b      	mov	r3, r7
    ac60:	4631      	mov	r1, r6
    ac62:	4628      	mov	r0, r5
    ac64:	2200      	movs	r2, #0
    ac66:	f00f fc61 	bl	1a52c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    ac6a:	4631      	mov	r1, r6
    ac6c:	4628      	mov	r0, r5
    ac6e:	2201      	movs	r2, #1
    ac70:	f00f fc6d 	bl	1a54e <set_chunk_used>

	free_list_add(h, chunk0_size);
    ac74:	4621      	mov	r1, r4
}
    ac76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    ac7a:	f00f bd67 	b.w	1a74c <free_list_add>
		h->buckets[i].next = 0;
    ac7e:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    ac82:	3301      	adds	r3, #1
    ac84:	e7d0      	b.n	ac28 <sys_heap_init+0xa8>
    ac86:	bf00      	nop
    ac88:	0001fa12 	.word	0x0001fa12
    ac8c:	0001f98f 	.word	0x0001f98f

0000ac90 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac94:	468b      	mov	fp, r1
    ac96:	4692      	mov	sl, r2
    ac98:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    ac9a:	2500      	movs	r5, #0
{
    ac9c:	b091      	sub	sp, #68	; 0x44
    ac9e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    aca0:	f89a 0000 	ldrb.w	r0, [sl]
    aca4:	b908      	cbnz	r0, acaa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    aca6:	4628      	mov	r0, r5
    aca8:	e35f      	b.n	b36a <cbvprintf+0x6da>
		if (*fp != '%') {
    acaa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    acac:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    acb0:	d007      	beq.n	acc2 <cbvprintf+0x32>
			OUTC('%');
    acb2:	4659      	mov	r1, fp
    acb4:	9b02      	ldr	r3, [sp, #8]
    acb6:	4798      	blx	r3
    acb8:	2800      	cmp	r0, #0
    acba:	f2c0 8356 	blt.w	b36a <cbvprintf+0x6da>
    acbe:	3501      	adds	r5, #1
			break;
    acc0:	e212      	b.n	b0e8 <cbvprintf+0x458>
		} state = {
    acc2:	2218      	movs	r2, #24
    acc4:	2100      	movs	r1, #0
    acc6:	a80a      	add	r0, sp, #40	; 0x28
    acc8:	f010 fe1c 	bl	1b904 <memset>
	if (*sp == '%') {
    accc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    acd0:	2b25      	cmp	r3, #37	; 0x25
    acd2:	d078      	beq.n	adc6 <cbvprintf+0x136>
    acd4:	2200      	movs	r2, #0
    acd6:	4694      	mov	ip, r2
    acd8:	4696      	mov	lr, r2
    acda:	4616      	mov	r6, r2
    acdc:	4610      	mov	r0, r2
    acde:	4639      	mov	r1, r7
		switch (*sp) {
    ace0:	f817 3b01 	ldrb.w	r3, [r7], #1
    ace4:	2b2b      	cmp	r3, #43	; 0x2b
    ace6:	f000 809d 	beq.w	ae24 <cbvprintf+0x194>
    acea:	f200 8094 	bhi.w	ae16 <cbvprintf+0x186>
    acee:	2b20      	cmp	r3, #32
    acf0:	f000 809a 	beq.w	ae28 <cbvprintf+0x198>
    acf4:	2b23      	cmp	r3, #35	; 0x23
    acf6:	f000 809a 	beq.w	ae2e <cbvprintf+0x19e>
    acfa:	b128      	cbz	r0, ad08 <cbvprintf+0x78>
    acfc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    ad00:	f040 0004 	orr.w	r0, r0, #4
    ad04:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ad08:	b12e      	cbz	r6, ad16 <cbvprintf+0x86>
    ad0a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    ad0e:	f040 0008 	orr.w	r0, r0, #8
    ad12:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ad16:	f1be 0f00 	cmp.w	lr, #0
    ad1a:	d005      	beq.n	ad28 <cbvprintf+0x98>
    ad1c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    ad20:	f040 0010 	orr.w	r0, r0, #16
    ad24:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ad28:	f1bc 0f00 	cmp.w	ip, #0
    ad2c:	d005      	beq.n	ad3a <cbvprintf+0xaa>
    ad2e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    ad32:	f040 0020 	orr.w	r0, r0, #32
    ad36:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ad3a:	b12a      	cbz	r2, ad48 <cbvprintf+0xb8>
    ad3c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    ad40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ad44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    ad48:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    ad4c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    ad50:	2844      	cmp	r0, #68	; 0x44
    ad52:	d103      	bne.n	ad5c <cbvprintf+0xcc>
		conv->flag_zero = false;
    ad54:	f36f 1286 	bfc	r2, #6, #1
    ad58:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    ad5c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    ad60:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    ad62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ad66:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    ad6a:	d17b      	bne.n	ae64 <cbvprintf+0x1d4>
		conv->width_star = true;
    ad6c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    ad70:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    ad72:	f042 0201 	orr.w	r2, r2, #1
    ad76:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    ad7a:	781a      	ldrb	r2, [r3, #0]
    ad7c:	2a2e      	cmp	r2, #46	; 0x2e
    ad7e:	bf0c      	ite	eq
    ad80:	2101      	moveq	r1, #1
    ad82:	2100      	movne	r1, #0
    ad84:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ad88:	f361 0241 	bfi	r2, r1, #1, #1
    ad8c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    ad90:	d174      	bne.n	ae7c <cbvprintf+0x1ec>
	if (*sp == '*') {
    ad92:	785a      	ldrb	r2, [r3, #1]
    ad94:	2a2a      	cmp	r2, #42	; 0x2a
    ad96:	d06a      	beq.n	ae6e <cbvprintf+0x1de>
	size_t val = 0;
    ad98:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    ad9a:	260a      	movs	r6, #10
	++sp;
    ad9c:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    ad9e:	4618      	mov	r0, r3
    ada0:	f810 2b01 	ldrb.w	r2, [r0], #1
    ada4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    ada8:	2f09      	cmp	r7, #9
    adaa:	f240 808e 	bls.w	aeca <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    adae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    adb2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    adb4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    adb8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    adbc:	f361 0241 	bfi	r2, r1, #1, #1
    adc0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    adc4:	e05a      	b.n	ae7c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    adc6:	f10a 0702 	add.w	r7, sl, #2
    adca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    adce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    add2:	07d9      	lsls	r1, r3, #31
    add4:	f140 8149 	bpl.w	b06a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    add8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    addc:	f1b9 0f00 	cmp.w	r9, #0
    ade0:	da07      	bge.n	adf2 <cbvprintf+0x162>
				conv->flag_dash = true;
    ade2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    ade6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    adea:	f042 0204 	orr.w	r2, r2, #4
    adee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    adf2:	075a      	lsls	r2, r3, #29
    adf4:	f140 8142 	bpl.w	b07c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    adf8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    adfc:	f1b8 0f00 	cmp.w	r8, #0
    ae00:	f280 8141 	bge.w	b086 <cbvprintf+0x3f6>
				conv->prec_present = false;
    ae04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ae08:	f36f 0341 	bfc	r3, #1, #1
    ae0c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    ae10:	f04f 38ff 	mov.w	r8, #4294967295
    ae14:	e137      	b.n	b086 <cbvprintf+0x3f6>
		switch (*sp) {
    ae16:	2b2d      	cmp	r3, #45	; 0x2d
    ae18:	d00c      	beq.n	ae34 <cbvprintf+0x1a4>
    ae1a:	2b30      	cmp	r3, #48	; 0x30
    ae1c:	f47f af6d 	bne.w	acfa <cbvprintf+0x6a>
			conv->flag_zero = true;
    ae20:	2201      	movs	r2, #1
	} while (loop);
    ae22:	e75c      	b.n	acde <cbvprintf+0x4e>
			conv->flag_plus = true;
    ae24:	2601      	movs	r6, #1
    ae26:	e75a      	b.n	acde <cbvprintf+0x4e>
			conv->flag_space = true;
    ae28:	f04f 0e01 	mov.w	lr, #1
    ae2c:	e757      	b.n	acde <cbvprintf+0x4e>
			conv->flag_hash = true;
    ae2e:	f04f 0c01 	mov.w	ip, #1
    ae32:	e754      	b.n	acde <cbvprintf+0x4e>
		switch (*sp) {
    ae34:	2001      	movs	r0, #1
    ae36:	e752      	b.n	acde <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    ae38:	4633      	mov	r3, r6
    ae3a:	fb0c 0202 	mla	r2, ip, r2, r0
    ae3e:	3a30      	subs	r2, #48	; 0x30
    ae40:	461e      	mov	r6, r3
    ae42:	f816 0b01 	ldrb.w	r0, [r6], #1
    ae46:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    ae4a:	2f09      	cmp	r7, #9
    ae4c:	d9f4      	bls.n	ae38 <cbvprintf+0x1a8>
	if (sp != wp) {
    ae4e:	4299      	cmp	r1, r3
    ae50:	d093      	beq.n	ad7a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    ae52:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    ae56:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    ae58:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    ae5a:	f362 0141 	bfi	r1, r2, #1, #1
    ae5e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    ae62:	e78a      	b.n	ad7a <cbvprintf+0xea>
    ae64:	460b      	mov	r3, r1
	size_t val = 0;
    ae66:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    ae68:	f04f 0c0a 	mov.w	ip, #10
    ae6c:	e7e8      	b.n	ae40 <cbvprintf+0x1b0>
		conv->prec_star = true;
    ae6e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    ae72:	3302      	adds	r3, #2
		conv->prec_star = true;
    ae74:	f042 0204 	orr.w	r2, r2, #4
    ae78:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    ae7c:	461f      	mov	r7, r3
    ae7e:	f817 2b01 	ldrb.w	r2, [r7], #1
    ae82:	2a6c      	cmp	r2, #108	; 0x6c
    ae84:	d041      	beq.n	af0a <cbvprintf+0x27a>
    ae86:	d825      	bhi.n	aed4 <cbvprintf+0x244>
    ae88:	2a68      	cmp	r2, #104	; 0x68
    ae8a:	d02b      	beq.n	aee4 <cbvprintf+0x254>
    ae8c:	2a6a      	cmp	r2, #106	; 0x6a
    ae8e:	d046      	beq.n	af1e <cbvprintf+0x28e>
    ae90:	2a4c      	cmp	r2, #76	; 0x4c
    ae92:	d04c      	beq.n	af2e <cbvprintf+0x29e>
    ae94:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    ae96:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    ae9a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    ae9e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    aea0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    aea4:	f200 80d9 	bhi.w	b05a <cbvprintf+0x3ca>
    aea8:	2a57      	cmp	r2, #87	; 0x57
    aeaa:	d84d      	bhi.n	af48 <cbvprintf+0x2b8>
    aeac:	2a41      	cmp	r2, #65	; 0x41
    aeae:	d003      	beq.n	aeb8 <cbvprintf+0x228>
    aeb0:	3a45      	subs	r2, #69	; 0x45
    aeb2:	2a02      	cmp	r2, #2
    aeb4:	f200 80d1 	bhi.w	b05a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    aeb8:	2204      	movs	r2, #4
    aeba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    aebe:	f362 0302 	bfi	r3, r2, #0, #3
    aec2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    aec6:	2301      	movs	r3, #1
			break;
    aec8:	e09e      	b.n	b008 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    aeca:	fb06 2101 	mla	r1, r6, r1, r2
    aece:	4603      	mov	r3, r0
    aed0:	3930      	subs	r1, #48	; 0x30
    aed2:	e764      	b.n	ad9e <cbvprintf+0x10e>
	switch (*sp) {
    aed4:	2a74      	cmp	r2, #116	; 0x74
    aed6:	d026      	beq.n	af26 <cbvprintf+0x296>
    aed8:	2a7a      	cmp	r2, #122	; 0x7a
    aeda:	d1db      	bne.n	ae94 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    aedc:	2206      	movs	r2, #6
    aede:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aee2:	e00d      	b.n	af00 <cbvprintf+0x270>
		if (*++sp == 'h') {
    aee4:	785a      	ldrb	r2, [r3, #1]
    aee6:	2a68      	cmp	r2, #104	; 0x68
    aee8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    aeec:	d106      	bne.n	aefc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    aeee:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    aef0:	f361 02c6 	bfi	r2, r1, #3, #4
    aef4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    aef8:	1c9f      	adds	r7, r3, #2
    aefa:	e7cc      	b.n	ae96 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    aefc:	4613      	mov	r3, r2
    aefe:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    af00:	f362 03c6 	bfi	r3, r2, #3, #4
    af04:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    af08:	e7c5      	b.n	ae96 <cbvprintf+0x206>
		if (*++sp == 'l') {
    af0a:	785a      	ldrb	r2, [r3, #1]
    af0c:	2a6c      	cmp	r2, #108	; 0x6c
    af0e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    af12:	d101      	bne.n	af18 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    af14:	2104      	movs	r1, #4
    af16:	e7eb      	b.n	aef0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    af18:	4613      	mov	r3, r2
    af1a:	2203      	movs	r2, #3
    af1c:	e7f0      	b.n	af00 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    af1e:	2205      	movs	r2, #5
    af20:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    af24:	e7ec      	b.n	af00 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    af26:	2207      	movs	r2, #7
    af28:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    af2c:	e7e8      	b.n	af00 <cbvprintf+0x270>
		conv->unsupported = true;
    af2e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    af32:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    af36:	f023 0302 	bic.w	r3, r3, #2
    af3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    af3e:	f043 0302 	orr.w	r3, r3, #2
    af42:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    af46:	e7a6      	b.n	ae96 <cbvprintf+0x206>
    af48:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    af4c:	2920      	cmp	r1, #32
    af4e:	f200 8084 	bhi.w	b05a <cbvprintf+0x3ca>
    af52:	a001      	add	r0, pc, #4	; (adr r0, af58 <cbvprintf+0x2c8>)
    af54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    af58:	0000b01d 	.word	0x0000b01d
    af5c:	0000b05b 	.word	0x0000b05b
    af60:	0000b05b 	.word	0x0000b05b
    af64:	0000b05b 	.word	0x0000b05b
    af68:	0000b05b 	.word	0x0000b05b
    af6c:	0000b05b 	.word	0x0000b05b
    af70:	0000b05b 	.word	0x0000b05b
    af74:	0000b05b 	.word	0x0000b05b
    af78:	0000b05b 	.word	0x0000b05b
    af7c:	0000aeb9 	.word	0x0000aeb9
    af80:	0000b05b 	.word	0x0000b05b
    af84:	0000b01d 	.word	0x0000b01d
    af88:	0000afdd 	.word	0x0000afdd
    af8c:	0000aeb9 	.word	0x0000aeb9
    af90:	0000aeb9 	.word	0x0000aeb9
    af94:	0000aeb9 	.word	0x0000aeb9
    af98:	0000b05b 	.word	0x0000b05b
    af9c:	0000afdd 	.word	0x0000afdd
    afa0:	0000b05b 	.word	0x0000b05b
    afa4:	0000b05b 	.word	0x0000b05b
    afa8:	0000b05b 	.word	0x0000b05b
    afac:	0000b05b 	.word	0x0000b05b
    afb0:	0000b025 	.word	0x0000b025
    afb4:	0000b01d 	.word	0x0000b01d
    afb8:	0000b041 	.word	0x0000b041
    afbc:	0000b05b 	.word	0x0000b05b
    afc0:	0000b05b 	.word	0x0000b05b
    afc4:	0000b041 	.word	0x0000b041
    afc8:	0000b05b 	.word	0x0000b05b
    afcc:	0000b01d 	.word	0x0000b01d
    afd0:	0000b05b 	.word	0x0000b05b
    afd4:	0000b05b 	.word	0x0000b05b
    afd8:	0000b01d 	.word	0x0000b01d
		conv->specifier_cat = SPECIFIER_SINT;
    afdc:	2001      	movs	r0, #1
    afde:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    afe2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    afe6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    afea:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    afec:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    aff0:	bf02      	ittt	eq
    aff2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    aff6:	f041 0101 	orreq.w	r1, r1, #1
    affa:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    affe:	2a63      	cmp	r2, #99	; 0x63
    b000:	d131      	bne.n	b066 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b002:	3b00      	subs	r3, #0
    b004:	bf18      	it	ne
    b006:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    b008:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b00c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b010:	430b      	orrs	r3, r1
    b012:	f363 0241 	bfi	r2, r3, #1, #1
    b016:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b01a:	e6d8      	b.n	adce <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    b01c:	2002      	movs	r0, #2
    b01e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    b022:	e7de      	b.n	afe2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    b024:	2103      	movs	r1, #3
    b026:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b02a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b02e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    b032:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b036:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    b038:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b03c:	4143      	adcs	r3, r0
    b03e:	e7e3      	b.n	b008 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    b040:	2103      	movs	r1, #3
    b042:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b046:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b04a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    b04e:	bf14      	ite	ne
    b050:	2301      	movne	r3, #1
    b052:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    b054:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b058:	e7d6      	b.n	b008 <cbvprintf+0x378>
		conv->invalid = true;
    b05a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b05e:	f043 0301 	orr.w	r3, r3, #1
    b062:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    b066:	2300      	movs	r3, #0
    b068:	e7ce      	b.n	b008 <cbvprintf+0x378>
		} else if (conv->width_present) {
    b06a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    b06e:	2a00      	cmp	r2, #0
		int width = -1;
    b070:	bfac      	ite	ge
    b072:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    b076:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    b07a:	e6ba      	b.n	adf2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    b07c:	079b      	lsls	r3, r3, #30
    b07e:	f57f aec7 	bpl.w	ae10 <cbvprintf+0x180>
			precision = conv->prec_value;
    b082:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    b086:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b088:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    b08c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    b090:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    b094:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b098:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b09a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b09e:	d138      	bne.n	b112 <cbvprintf+0x482>
			switch (length_mod) {
    b0a0:	1ecb      	subs	r3, r1, #3
    b0a2:	2b04      	cmp	r3, #4
    b0a4:	d822      	bhi.n	b0ec <cbvprintf+0x45c>
    b0a6:	e8df f003 	tbb	[pc, r3]
    b0aa:	0903      	.short	0x0903
    b0ac:	2109      	.short	0x2109
    b0ae:	21          	.byte	0x21
    b0af:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    b0b0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    b0b4:	17da      	asrs	r2, r3, #31
    b0b6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    b0ba:	e006      	b.n	b0ca <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    b0bc:	3407      	adds	r4, #7
    b0be:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    b0c2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b0c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    b0ca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b0ce:	f013 0603 	ands.w	r6, r3, #3
    b0d2:	d056      	beq.n	b182 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    b0d4:	463b      	mov	r3, r7
    b0d6:	4652      	mov	r2, sl
    b0d8:	4659      	mov	r1, fp
    b0da:	9802      	ldr	r0, [sp, #8]
    b0dc:	f00f fc33 	bl	1a946 <outs>
    b0e0:	2800      	cmp	r0, #0
    b0e2:	f2c0 8142 	blt.w	b36a <cbvprintf+0x6da>
    b0e6:	4405      	add	r5, r0
			continue;
    b0e8:	46ba      	mov	sl, r7
    b0ea:	e5d9      	b.n	aca0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b0ec:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b0f0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b0f2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b0f6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    b0fa:	d105      	bne.n	b108 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    b0fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    b100:	930a      	str	r3, [sp, #40]	; 0x28
    b102:	2300      	movs	r3, #0
    b104:	930b      	str	r3, [sp, #44]	; 0x2c
    b106:	e7e0      	b.n	b0ca <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    b108:	2902      	cmp	r1, #2
    b10a:	d1de      	bne.n	b0ca <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    b10c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    b110:	e7d0      	b.n	b0b4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b112:	2b02      	cmp	r3, #2
    b114:	d123      	bne.n	b15e <cbvprintf+0x4ce>
			switch (length_mod) {
    b116:	1ecb      	subs	r3, r1, #3
    b118:	2b04      	cmp	r3, #4
    b11a:	d813      	bhi.n	b144 <cbvprintf+0x4b4>
    b11c:	e8df f003 	tbb	[pc, r3]
    b120:	120a0a03 	.word	0x120a0a03
    b124:	12          	.byte	0x12
    b125:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    b126:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    b128:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    b12a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    b12c:	920a      	str	r2, [sp, #40]	; 0x28
    b12e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    b130:	4604      	mov	r4, r0
    b132:	e7ca      	b.n	b0ca <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    b134:	1de0      	adds	r0, r4, #7
    b136:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    b13a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    b13e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    b142:	e7f5      	b.n	b130 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    b144:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b148:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    b14a:	930a      	str	r3, [sp, #40]	; 0x28
    b14c:	f04f 0300 	mov.w	r3, #0
    b150:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    b152:	d0d3      	beq.n	b0fc <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    b154:	2902      	cmp	r1, #2
    b156:	d1b8      	bne.n	b0ca <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    b158:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b15c:	e7d0      	b.n	b100 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    b15e:	2b04      	cmp	r3, #4
    b160:	d109      	bne.n	b176 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    b162:	1de3      	adds	r3, r4, #7
    b164:	f023 0307 	bic.w	r3, r3, #7
    b168:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b170:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b174:	e7a9      	b.n	b0ca <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b176:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    b178:	bf04      	itt	eq
    b17a:	f854 3b04 	ldreq.w	r3, [r4], #4
    b17e:	930a      	streq	r3, [sp, #40]	; 0x28
    b180:	e7a3      	b.n	b0ca <cbvprintf+0x43a>
		switch (conv->specifier) {
    b182:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b186:	2878      	cmp	r0, #120	; 0x78
    b188:	d8ae      	bhi.n	b0e8 <cbvprintf+0x458>
    b18a:	2862      	cmp	r0, #98	; 0x62
    b18c:	d822      	bhi.n	b1d4 <cbvprintf+0x544>
    b18e:	2825      	cmp	r0, #37	; 0x25
    b190:	f43f ad8f 	beq.w	acb2 <cbvprintf+0x22>
    b194:	2858      	cmp	r0, #88	; 0x58
    b196:	d1a7      	bne.n	b0e8 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b198:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b19c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b1a0:	9300      	str	r3, [sp, #0]
    b1a2:	aa0c      	add	r2, sp, #48	; 0x30
    b1a4:	ab04      	add	r3, sp, #16
    b1a6:	f00f fb88 	bl	1a8ba <encode_uint>
    b1aa:	4682      	mov	sl, r0
			if (precision >= 0) {
    b1ac:	f1b8 0f00 	cmp.w	r8, #0
    b1b0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    b1b4:	db0c      	blt.n	b1d0 <cbvprintf+0x540>
				conv->flag_zero = false;
    b1b6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    b1ba:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    b1be:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b1c2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    b1c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    b1c8:	d902      	bls.n	b1d0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    b1ca:	eba8 0303 	sub.w	r3, r8, r3
    b1ce:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    b1d0:	4680      	mov	r8, r0
    b1d2:	e03d      	b.n	b250 <cbvprintf+0x5c0>
    b1d4:	3863      	subs	r0, #99	; 0x63
    b1d6:	2815      	cmp	r0, #21
    b1d8:	d886      	bhi.n	b0e8 <cbvprintf+0x458>
    b1da:	a201      	add	r2, pc, #4	; (adr r2, b1e0 <cbvprintf+0x550>)
    b1dc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b1e0:	0000b261 	.word	0x0000b261
    b1e4:	0000b2c5 	.word	0x0000b2c5
    b1e8:	0000b0e9 	.word	0x0000b0e9
    b1ec:	0000b0e9 	.word	0x0000b0e9
    b1f0:	0000b0e9 	.word	0x0000b0e9
    b1f4:	0000b0e9 	.word	0x0000b0e9
    b1f8:	0000b2c5 	.word	0x0000b2c5
    b1fc:	0000b0e9 	.word	0x0000b0e9
    b200:	0000b0e9 	.word	0x0000b0e9
    b204:	0000b0e9 	.word	0x0000b0e9
    b208:	0000b0e9 	.word	0x0000b0e9
    b20c:	0000b31f 	.word	0x0000b31f
    b210:	0000b2ed 	.word	0x0000b2ed
    b214:	0000b2f1 	.word	0x0000b2f1
    b218:	0000b0e9 	.word	0x0000b0e9
    b21c:	0000b0e9 	.word	0x0000b0e9
    b220:	0000b239 	.word	0x0000b239
    b224:	0000b0e9 	.word	0x0000b0e9
    b228:	0000b2ed 	.word	0x0000b2ed
    b22c:	0000b0e9 	.word	0x0000b0e9
    b230:	0000b0e9 	.word	0x0000b0e9
    b234:	0000b2ed 	.word	0x0000b2ed
			if (precision >= 0) {
    b238:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    b23c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    b240:	db0a      	blt.n	b258 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    b242:	4641      	mov	r1, r8
    b244:	4650      	mov	r0, sl
    b246:	f010 fafb 	bl	1b840 <strnlen>
		char sign = 0;
    b24a:	2600      	movs	r6, #0
			bpe = bps + len;
    b24c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    b250:	f1ba 0f00 	cmp.w	sl, #0
    b254:	d10c      	bne.n	b270 <cbvprintf+0x5e0>
    b256:	e747      	b.n	b0e8 <cbvprintf+0x458>
				len = strlen(bps);
    b258:	4650      	mov	r0, sl
    b25a:	f010 faea 	bl	1b832 <strlen>
    b25e:	e7f4      	b.n	b24a <cbvprintf+0x5ba>
			break;
    b260:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    b264:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b268:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    b26c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    b270:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    b274:	b106      	cbz	r6, b278 <cbvprintf+0x5e8>
			nj_len += 1U;
    b276:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    b278:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    b27c:	06d0      	lsls	r0, r2, #27
    b27e:	d568      	bpl.n	b352 <cbvprintf+0x6c2>
			nj_len += 2U;
    b280:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    b282:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    b284:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    b286:	bf48      	it	mi
    b288:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    b28a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    b28c:	bf48      	it	mi
    b28e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    b290:	f1b9 0f00 	cmp.w	r9, #0
    b294:	dd76      	ble.n	b384 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    b296:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    b29a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    b29e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b2a2:	9303      	str	r3, [sp, #12]
    b2a4:	0753      	lsls	r3, r2, #29
    b2a6:	d46d      	bmi.n	b384 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    b2a8:	0650      	lsls	r0, r2, #25
    b2aa:	d561      	bpl.n	b370 <cbvprintf+0x6e0>
					if (sign != 0) {
    b2ac:	b146      	cbz	r6, b2c0 <cbvprintf+0x630>
						OUTC(sign);
    b2ae:	4659      	mov	r1, fp
    b2b0:	4630      	mov	r0, r6
    b2b2:	9b02      	ldr	r3, [sp, #8]
    b2b4:	4798      	blx	r3
    b2b6:	2800      	cmp	r0, #0
    b2b8:	db57      	blt.n	b36a <cbvprintf+0x6da>
						sign = 0;
    b2ba:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    b2bc:	3501      	adds	r5, #1
						sign = 0;
    b2be:	461e      	mov	r6, r3
					pad = '0';
    b2c0:	2330      	movs	r3, #48	; 0x30
    b2c2:	e056      	b.n	b372 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    b2c4:	071e      	lsls	r6, r3, #28
    b2c6:	d40f      	bmi.n	b2e8 <cbvprintf+0x658>
				sign = ' ';
    b2c8:	f013 0610 	ands.w	r6, r3, #16
    b2cc:	bf18      	it	ne
    b2ce:	2620      	movne	r6, #32
			if (value->sint < 0) {
    b2d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b2d4:	2b00      	cmp	r3, #0
    b2d6:	f6bf af5f 	bge.w	b198 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    b2da:	4252      	negs	r2, r2
    b2dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    b2e0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    b2e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b2e6:	e757      	b.n	b198 <cbvprintf+0x508>
				sign = '+';
    b2e8:	262b      	movs	r6, #43	; 0x2b
    b2ea:	e7f1      	b.n	b2d0 <cbvprintf+0x640>
		switch (conv->specifier) {
    b2ec:	2600      	movs	r6, #0
    b2ee:	e753      	b.n	b198 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    b2f0:	980a      	ldr	r0, [sp, #40]	; 0x28
    b2f2:	b340      	cbz	r0, b346 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b2f4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b2f8:	9300      	str	r3, [sp, #0]
    b2fa:	2100      	movs	r1, #0
    b2fc:	ab04      	add	r3, sp, #16
    b2fe:	aa0c      	add	r2, sp, #48	; 0x30
    b300:	f00f fadb 	bl	1a8ba <encode_uint>
				conv->altform_0c = true;
    b304:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b308:	4682      	mov	sl, r0
				conv->altform_0c = true;
    b30a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b30e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b312:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    b316:	2600      	movs	r6, #0
				conv->altform_0c = true;
    b318:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    b31c:	e746      	b.n	b1ac <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    b31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    b320:	2907      	cmp	r1, #7
    b322:	f63f aee1 	bhi.w	b0e8 <cbvprintf+0x458>
    b326:	e8df f001 	tbb	[pc, r1]
    b32a:	040c      	.short	0x040c
    b32c:	08080c06 	.word	0x08080c06
    b330:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    b332:	701d      	strb	r5, [r3, #0]
		break;
    b334:	e6d8      	b.n	b0e8 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    b336:	801d      	strh	r5, [r3, #0]
		break;
    b338:	e6d6      	b.n	b0e8 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    b33a:	17ea      	asrs	r2, r5, #31
    b33c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    b340:	e6d2      	b.n	b0e8 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b342:	601d      	str	r5, [r3, #0]
		break;
    b344:	e6d0      	b.n	b0e8 <cbvprintf+0x458>
			bps = "(nil)";
    b346:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b410 <cbvprintf+0x780>
    b34a:	4606      	mov	r6, r0
			bpe = bps + 5;
    b34c:	f10a 0805 	add.w	r8, sl, #5
    b350:	e78e      	b.n	b270 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    b352:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    b354:	bf48      	it	mi
    b356:	3301      	addmi	r3, #1
    b358:	e793      	b.n	b282 <cbvprintf+0x5f2>
					OUTC(pad);
    b35a:	4618      	mov	r0, r3
    b35c:	9303      	str	r3, [sp, #12]
    b35e:	4659      	mov	r1, fp
    b360:	9b02      	ldr	r3, [sp, #8]
    b362:	4798      	blx	r3
    b364:	2800      	cmp	r0, #0
    b366:	9b03      	ldr	r3, [sp, #12]
    b368:	da04      	bge.n	b374 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    b36a:	b011      	add	sp, #68	; 0x44
    b36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b370:	2320      	movs	r3, #32
    b372:	444d      	add	r5, r9
    b374:	464a      	mov	r2, r9
				while (width-- > 0) {
    b376:	2a00      	cmp	r2, #0
    b378:	eba5 0109 	sub.w	r1, r5, r9
    b37c:	f109 39ff 	add.w	r9, r9, #4294967295
    b380:	dceb      	bgt.n	b35a <cbvprintf+0x6ca>
    b382:	460d      	mov	r5, r1
		if (sign != 0) {
    b384:	b136      	cbz	r6, b394 <cbvprintf+0x704>
			OUTC(sign);
    b386:	4659      	mov	r1, fp
    b388:	4630      	mov	r0, r6
    b38a:	9b02      	ldr	r3, [sp, #8]
    b38c:	4798      	blx	r3
    b38e:	2800      	cmp	r0, #0
    b390:	dbeb      	blt.n	b36a <cbvprintf+0x6da>
    b392:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b394:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b398:	06d9      	lsls	r1, r3, #27
    b39a:	d401      	bmi.n	b3a0 <cbvprintf+0x710>
    b39c:	071a      	lsls	r2, r3, #28
    b39e:	d506      	bpl.n	b3ae <cbvprintf+0x71e>
				OUTC('0');
    b3a0:	4659      	mov	r1, fp
    b3a2:	2030      	movs	r0, #48	; 0x30
    b3a4:	9b02      	ldr	r3, [sp, #8]
    b3a6:	4798      	blx	r3
    b3a8:	2800      	cmp	r0, #0
    b3aa:	dbde      	blt.n	b36a <cbvprintf+0x6da>
    b3ac:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b3ae:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b3b2:	06db      	lsls	r3, r3, #27
    b3b4:	d507      	bpl.n	b3c6 <cbvprintf+0x736>
				OUTC(conv->specifier);
    b3b6:	4659      	mov	r1, fp
    b3b8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b3bc:	9b02      	ldr	r3, [sp, #8]
    b3be:	4798      	blx	r3
    b3c0:	2800      	cmp	r0, #0
    b3c2:	dbd2      	blt.n	b36a <cbvprintf+0x6da>
    b3c4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b3c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b3c8:	442e      	add	r6, r5
    b3ca:	1b73      	subs	r3, r6, r5
    b3cc:	2b00      	cmp	r3, #0
    b3ce:	dc16      	bgt.n	b3fe <cbvprintf+0x76e>
			OUTS(bps, bpe);
    b3d0:	4643      	mov	r3, r8
    b3d2:	4652      	mov	r2, sl
    b3d4:	4659      	mov	r1, fp
    b3d6:	9802      	ldr	r0, [sp, #8]
    b3d8:	f00f fab5 	bl	1a946 <outs>
    b3dc:	2800      	cmp	r0, #0
    b3de:	dbc4      	blt.n	b36a <cbvprintf+0x6da>
    b3e0:	4405      	add	r5, r0
		while (width > 0) {
    b3e2:	44a9      	add	r9, r5
    b3e4:	eba9 0305 	sub.w	r3, r9, r5
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	f77f ae7d 	ble.w	b0e8 <cbvprintf+0x458>
			OUTC(' ');
    b3ee:	4659      	mov	r1, fp
    b3f0:	2020      	movs	r0, #32
    b3f2:	9b02      	ldr	r3, [sp, #8]
    b3f4:	4798      	blx	r3
    b3f6:	2800      	cmp	r0, #0
    b3f8:	dbb7      	blt.n	b36a <cbvprintf+0x6da>
    b3fa:	3501      	adds	r5, #1
			--width;
    b3fc:	e7f2      	b.n	b3e4 <cbvprintf+0x754>
				OUTC('0');
    b3fe:	4659      	mov	r1, fp
    b400:	2030      	movs	r0, #48	; 0x30
    b402:	9b02      	ldr	r3, [sp, #8]
    b404:	4798      	blx	r3
    b406:	2800      	cmp	r0, #0
    b408:	dbaf      	blt.n	b36a <cbvprintf+0x6da>
    b40a:	3501      	adds	r5, #1
    b40c:	e7dd      	b.n	b3ca <cbvprintf+0x73a>
    b40e:	bf00      	nop
    b410:	0001fa33 	.word	0x0001fa33

0000b414 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b414:	b148      	cbz	r0, b42a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    b416:	4b05      	ldr	r3, [pc, #20]	; (b42c <arch_busy_wait+0x18>)
    b418:	681a      	ldr	r2, [r3, #0]
    b41a:	4b05      	ldr	r3, [pc, #20]	; (b430 <arch_busy_wait+0x1c>)
    b41c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    b420:	4b04      	ldr	r3, [pc, #16]	; (b434 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    b422:	4350      	muls	r0, r2
    b424:	f043 0301 	orr.w	r3, r3, #1
    b428:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b42a:	4770      	bx	lr
    b42c:	20008534 	.word	0x20008534
    b430:	000f4240 	.word	0x000f4240
    b434:	0001e3a0 	.word	0x0001e3a0

0000b438 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b438:	4b01      	ldr	r3, [pc, #4]	; (b440 <virtio_set_status+0x8>)
    b43a:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b43c:	4770      	bx	lr
    b43e:	bf00      	nop
    b440:	20070000 	.word	0x20070000

0000b444 <init_status_flag>:
    b444:	2000      	movs	r0, #0
    b446:	4b01      	ldr	r3, [pc, #4]	; (b44c <init_status_flag+0x8>)
    b448:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b44a:	4770      	bx	lr
    b44c:	20070000 	.word	0x20070000

0000b450 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b450:	4b01      	ldr	r3, [pc, #4]	; (b458 <ipm_callback_process+0x8>)
    b452:	6818      	ldr	r0, [r3, #0]
    b454:	f012 b9e3 	b.w	1d81e <virtqueue_notification>
    b458:	2000a650 	.word	0x2000a650

0000b45c <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b45c:	4b0a      	ldr	r3, [pc, #40]	; (b488 <virtio_notify+0x2c>)
{
    b45e:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b460:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b462:	2300      	movs	r3, #0
    b464:	6882      	ldr	r2, [r0, #8]
    b466:	9300      	str	r3, [sp, #0]
    b468:	6814      	ldr	r4, [r2, #0]
    b46a:	4619      	mov	r1, r3
    b46c:	461a      	mov	r2, r3
    b46e:	47a0      	blx	r4
	if (status != 0) {
    b470:	4602      	mov	r2, r0
    b472:	b130      	cbz	r0, b482 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    b474:	2145      	movs	r1, #69	; 0x45
    b476:	4805      	ldr	r0, [pc, #20]	; (b48c <virtio_notify+0x30>)
}
    b478:	b002      	add	sp, #8
    b47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    b47e:	f00e bfd2 	b.w	1a426 <printk>
}
    b482:	b002      	add	sp, #8
    b484:	bd10      	pop	{r4, pc}
    b486:	bf00      	nop
    b488:	2000a640 	.word	0x2000a640
    b48c:	0001fa65 	.word	0x0001fa65

0000b490 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b490:	4907      	ldr	r1, [pc, #28]	; (b4b0 <ipm_callback+0x20>)
    b492:	e8d1 3fef 	ldaex	r3, [r1]
    b496:	f043 0201 	orr.w	r2, r3, #1
    b49a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b49e:	2800      	cmp	r0, #0
    b4a0:	d1f7      	bne.n	b492 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b4a2:	07db      	lsls	r3, r3, #31
    b4a4:	d403      	bmi.n	b4ae <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    b4a6:	4803      	ldr	r0, [pc, #12]	; (b4b4 <ipm_callback+0x24>)
    b4a8:	3908      	subs	r1, #8
    b4aa:	f012 bb79 	b.w	1dba0 <k_queue_append>
}
    b4ae:	4770      	bx	lr
    b4b0:	2000a64c 	.word	0x2000a64c
    b4b4:	200089c8 	.word	0x200089c8

0000b4b8 <rpmsg_backend_init>:
{
    b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b4ba:	4b47      	ldr	r3, [pc, #284]	; (b5d8 <rpmsg_backend_init+0x120>)
{
    b4bc:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b4be:	ac02      	add	r4, sp, #8
{
    b4c0:	4606      	mov	r6, r0
    b4c2:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b4c4:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b4c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b4cc:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b4d0:	f04f 33ff 	mov.w	r3, #4294967295
    b4d4:	4941      	ldr	r1, [pc, #260]	; (b5dc <rpmsg_backend_init+0x124>)
    b4d6:	4842      	ldr	r0, [pc, #264]	; (b5e0 <rpmsg_backend_init+0x128>)
    b4d8:	f00e f80c 	bl	194f4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b4dc:	4941      	ldr	r1, [pc, #260]	; (b5e4 <rpmsg_backend_init+0x12c>)
    b4de:	4842      	ldr	r0, [pc, #264]	; (b5e8 <rpmsg_backend_init+0x130>)
    b4e0:	f012 fbd0 	bl	1dc84 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b4e4:	2200      	movs	r2, #0
    b4e6:	4b41      	ldr	r3, [pc, #260]	; (b5ec <rpmsg_backend_init+0x134>)
    b4e8:	4941      	ldr	r1, [pc, #260]	; (b5f0 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b4ea:	4620      	mov	r0, r4
    b4ec:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b4f0:	601a      	str	r2, [r3, #0]
    b4f2:	f00b fcd5 	bl	16ea0 <metal_init>
	if (err) {
    b4f6:	4604      	mov	r4, r0
    b4f8:	b138      	cbz	r0, b50a <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b4fa:	2145      	movs	r1, #69	; 0x45
    b4fc:	4602      	mov	r2, r0
    b4fe:	483d      	ldr	r0, [pc, #244]	; (b5f4 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b500:	f00e ff91 	bl	1a426 <printk>
}
    b504:	4620      	mov	r0, r4
    b506:	b005      	add	sp, #20
    b508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b50a:	483b      	ldr	r0, [pc, #236]	; (b5f8 <rpmsg_backend_init+0x140>)
    b50c:	f00b fca8 	bl	16e60 <metal_register_generic_device>
	if (err) {
    b510:	4604      	mov	r4, r0
    b512:	b118      	cbz	r0, b51c <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b514:	4602      	mov	r2, r0
    b516:	2145      	movs	r1, #69	; 0x45
    b518:	4838      	ldr	r0, [pc, #224]	; (b5fc <rpmsg_backend_init+0x144>)
    b51a:	e7f1      	b.n	b500 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b51c:	4938      	ldr	r1, [pc, #224]	; (b600 <rpmsg_backend_init+0x148>)
    b51e:	4839      	ldr	r0, [pc, #228]	; (b604 <rpmsg_backend_init+0x14c>)
    b520:	aa01      	add	r2, sp, #4
    b522:	f011 fefc 	bl	1d31e <metal_device_open>
	if (err) {
    b526:	4604      	mov	r4, r0
    b528:	b118      	cbz	r0, b532 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    b52a:	4602      	mov	r2, r0
    b52c:	2145      	movs	r1, #69	; 0x45
    b52e:	4836      	ldr	r0, [pc, #216]	; (b608 <rpmsg_backend_init+0x150>)
    b530:	e7e6      	b.n	b500 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    b532:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b534:	689a      	ldr	r2, [r3, #8]
    b536:	b92a      	cbnz	r2, b544 <rpmsg_backend_init+0x8c>
    b538:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    b53a:	2145      	movs	r1, #69	; 0x45
    b53c:	4833      	ldr	r0, [pc, #204]	; (b60c <rpmsg_backend_init+0x154>)
    b53e:	f00e ff72 	bl	1a426 <printk>
		return err;
    b542:	e7df      	b.n	b504 <rpmsg_backend_init+0x4c>
    b544:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    b546:	6033      	str	r3, [r6, #0]
	if (!*io) {
    b548:	2b00      	cmp	r3, #0
    b54a:	d0f6      	beq.n	b53a <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b54c:	4830      	ldr	r0, [pc, #192]	; (b610 <rpmsg_backend_init+0x158>)
    b54e:	f00b ffbf 	bl	174d0 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    b552:	4f30      	ldr	r7, [pc, #192]	; (b614 <rpmsg_backend_init+0x15c>)
    b554:	6038      	str	r0, [r7, #0]
    b556:	4830      	ldr	r0, [pc, #192]	; (b618 <rpmsg_backend_init+0x160>)
    b558:	f00b ffba 	bl	174d0 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    b55c:	683a      	ldr	r2, [r7, #0]
    b55e:	b932      	cbnz	r2, b56e <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    b560:	2145      	movs	r1, #69	; 0x45
    b562:	482e      	ldr	r0, [pc, #184]	; (b61c <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    b564:	f00e ff5f 	bl	1a426 <printk>
		return -ENODEV;
    b568:	f06f 0412 	mvn.w	r4, #18
    b56c:	e7ca      	b.n	b504 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    b56e:	b910      	cbnz	r0, b576 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    b570:	2145      	movs	r1, #69	; 0x45
    b572:	482b      	ldr	r0, [pc, #172]	; (b620 <rpmsg_backend_init+0x168>)
    b574:	e7f6      	b.n	b564 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    b576:	6883      	ldr	r3, [r0, #8]
    b578:	4622      	mov	r2, r4
    b57a:	685b      	ldr	r3, [r3, #4]
    b57c:	4929      	ldr	r1, [pc, #164]	; (b624 <rpmsg_backend_init+0x16c>)
    b57e:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    b580:	f00f fa37 	bl	1a9f2 <virtqueue_allocate.constprop.0>
    b584:	4f28      	ldr	r7, [pc, #160]	; (b628 <rpmsg_backend_init+0x170>)
    b586:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    b588:	b930      	cbnz	r0, b598 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    b58a:	2145      	movs	r1, #69	; 0x45
    b58c:	4827      	ldr	r0, [pc, #156]	; (b62c <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b58e:	f00e ff4a 	bl	1a426 <printk>
		return -ENOMEM;
    b592:	f06f 040b 	mvn.w	r4, #11
    b596:	e7b5      	b.n	b504 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    b598:	f00f fa2b 	bl	1a9f2 <virtqueue_allocate.constprop.0>
    b59c:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    b59e:	b910      	cbnz	r0, b5a6 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b5a0:	2145      	movs	r1, #69	; 0x45
    b5a2:	4823      	ldr	r0, [pc, #140]	; (b630 <rpmsg_backend_init+0x178>)
    b5a4:	e7f3      	b.n	b58e <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    b5a6:	6832      	ldr	r2, [r6, #0]
    b5a8:	4b22      	ldr	r3, [pc, #136]	; (b634 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    b5aa:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    b5ac:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b5ae:	4a22      	ldr	r2, [pc, #136]	; (b638 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    b5b0:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b5b2:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b5b4:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    b5b6:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b5b8:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    b5ba:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    b5bc:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    b5be:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b5c0:	4e1e      	ldr	r6, [pc, #120]	; (b63c <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    b5c2:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    b5c4:	4a1e      	ldr	r2, [pc, #120]	; (b640 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    b5c6:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b5c8:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    b5ca:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    b5cc:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    b5ce:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    b5d0:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    b5d2:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    b5d4:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    b5d6:	e795      	b.n	b504 <rpmsg_backend_init+0x4c>
    b5d8:	0001e318 	.word	0x0001e318
    b5dc:	2000c7f0 	.word	0x2000c7f0
    b5e0:	200089c8 	.word	0x200089c8
    b5e4:	0001fa88 	.word	0x0001fa88
    b5e8:	200089e8 	.word	0x200089e8
    b5ec:	2000a644 	.word	0x2000a644
    b5f0:	0000b451 	.word	0x0000b451
    b5f4:	0001fa93 	.word	0x0001fa93
    b5f8:	2000824c 	.word	0x2000824c
    b5fc:	0001fabb 	.word	0x0001fabb
    b600:	0001faeb 	.word	0x0001faeb
    b604:	0001faf5 	.word	0x0001faf5
    b608:	0001fafd 	.word	0x0001fafd
    b60c:	0001fb1f 	.word	0x0001fb1f
    b610:	0001fb50 	.word	0x0001fb50
    b614:	2000a640 	.word	0x2000a640
    b618:	0001fb56 	.word	0x0001fb56
    b61c:	0001fb5c 	.word	0x0001fb5c
    b620:	0001fb84 	.word	0x0001fb84
    b624:	0000b491 	.word	0x0000b491
    b628:	2000a650 	.word	0x2000a650
    b62c:	0001fbac 	.word	0x0001fbac
    b630:	0001fbda 	.word	0x0001fbda
    b634:	2000821c 	.word	0x2000821c
    b638:	2007fc00 	.word	0x2007fc00
    b63c:	2007f800 	.word	0x2007f800
    b640:	0001e52c 	.word	0x0001e52c

0000b644 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b644:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b648:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b64a:	4e1b      	ldr	r6, [pc, #108]	; (b6b8 <ns_bind_cb+0x74>)
{
    b64c:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b64e:	6831      	ldr	r1, [r6, #0]
    b650:	4628      	mov	r0, r5
{
    b652:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b654:	f010 f8fd 	bl	1b852 <strcmp>
    b658:	b168      	cbz	r0, b676 <ns_bind_cb+0x32>
    b65a:	4628      	mov	r0, r5
    b65c:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b65e:	f010 f8f8 	bl	1b852 <strcmp>
    b662:	b138      	cbz	r0, b674 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b664:	462a      	mov	r2, r5
    b666:	2145      	movs	r1, #69	; 0x45
    b668:	4814      	ldr	r0, [pc, #80]	; (b6bc <ns_bind_cb+0x78>)
}
    b66a:	b004      	add	sp, #16
    b66c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b670:	f00e bed9 	b.w	1a426 <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b674:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b676:	244c      	movs	r4, #76	; 0x4c
    b678:	4344      	muls	r4, r0
    b67a:	4b11      	ldr	r3, [pc, #68]	; (b6c0 <ns_bind_cb+0x7c>)
    b67c:	f104 0008 	add.w	r0, r4, #8
    b680:	9302      	str	r3, [sp, #8]
    b682:	4434      	add	r4, r6
    b684:	6863      	ldr	r3, [r4, #4]
    b686:	462a      	mov	r2, r5
    b688:	e9cd 8300 	strd	r8, r3, [sp]
    b68c:	4639      	mov	r1, r7
    b68e:	f04f 33ff 	mov.w	r3, #4294967295
    b692:	4430      	add	r0, r6
    b694:	f00b fcd0 	bl	17038 <rpmsg_create_ept>
			if (err != 0) {
    b698:	4603      	mov	r3, r0
    b69a:	b138      	cbz	r0, b6ac <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b69c:	462a      	mov	r2, r5
    b69e:	2145      	movs	r1, #69	; 0x45
    b6a0:	4808      	ldr	r0, [pc, #32]	; (b6c4 <ns_bind_cb+0x80>)
}
    b6a2:	b004      	add	sp, #16
    b6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    b6a8:	f00e bebd 	b.w	1a426 <printk>
				endpoints[i].bound = true;
    b6ac:	2301      	movs	r3, #1
    b6ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    b6b2:	b004      	add	sp, #16
    b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6b8:	2000a658 	.word	0x2000a658
    b6bc:	0001fc16 	.word	0x0001fc16
    b6c0:	0001aa0d 	.word	0x0001aa0d
    b6c4:	0001fc45 	.word	0x0001fc45

0000b6c8 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    b6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    b6ca:	4d13      	ldr	r5, [pc, #76]	; (b718 <rpmsg_service_init+0x50>)
    b6cc:	4913      	ldr	r1, [pc, #76]	; (b71c <rpmsg_service_init+0x54>)
    b6ce:	4628      	mov	r0, r5
    b6d0:	f7ff fef2 	bl	b4b8 <rpmsg_backend_init>
	if (err) {
    b6d4:	4604      	mov	r4, r0
    b6d6:	b138      	cbz	r0, b6e8 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    b6d8:	2145      	movs	r1, #69	; 0x45
    b6da:	4602      	mov	r2, r0
    b6dc:	4810      	ldr	r0, [pc, #64]	; (b720 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b6de:	f00e fea2 	bl	1a426 <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    b6e2:	4620      	mov	r0, r4
    b6e4:	b003      	add	sp, #12
    b6e6:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    b6e8:	4c0e      	ldr	r4, [pc, #56]	; (b724 <rpmsg_service_init+0x5c>)
    b6ea:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    b6ee:	4620      	mov	r0, r4
    b6f0:	490d      	ldr	r1, [pc, #52]	; (b728 <rpmsg_service_init+0x60>)
    b6f2:	f012 fa1e 	bl	1db32 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    b6f6:	9400      	str	r4, [sp, #0]
    b6f8:	682b      	ldr	r3, [r5, #0]
    b6fa:	4a0c      	ldr	r2, [pc, #48]	; (b72c <rpmsg_service_init+0x64>)
    b6fc:	4907      	ldr	r1, [pc, #28]	; (b71c <rpmsg_service_init+0x54>)
    b6fe:	480c      	ldr	r0, [pc, #48]	; (b730 <rpmsg_service_init+0x68>)
    b700:	f00b fdc6 	bl	17290 <rpmsg_init_vdev>
	if (err) {
    b704:	4604      	mov	r4, r0
    b706:	b118      	cbz	r0, b710 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b708:	4602      	mov	r2, r0
    b70a:	2145      	movs	r1, #69	; 0x45
    b70c:	4809      	ldr	r0, [pc, #36]	; (b734 <rpmsg_service_init+0x6c>)
    b70e:	e7e6      	b.n	b6de <rpmsg_service_init+0x16>
	ep_crt_started = true;
    b710:	2201      	movs	r2, #1
    b712:	4b09      	ldr	r3, [pc, #36]	; (b738 <rpmsg_service_init+0x70>)
    b714:	701a      	strb	r2, [r3, #0]
	return 0;
    b716:	e7e4      	b.n	b6e2 <rpmsg_service_init+0x1a>
    b718:	2000a6f0 	.word	0x2000a6f0
    b71c:	20008a78 	.word	0x20008a78
    b720:	0001fc7b 	.word	0x0001fc7b
    b724:	2000a784 	.word	0x2000a784
    b728:	20070400 	.word	0x20070400
    b72c:	0000b645 	.word	0x0000b645
    b730:	2000a6f4 	.word	0x2000a6f4
    b734:	0001fca8 	.word	0x0001fca8
    b738:	2000c2f6 	.word	0x2000c2f6

0000b73c <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    b73c:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    b73e:	4b0d      	ldr	r3, [pc, #52]	; (b774 <rpmsg_service_register_endpoint+0x38>)
{
    b740:	4602      	mov	r2, r0
	if (ep_crt_started) {
    b742:	781b      	ldrb	r3, [r3, #0]
    b744:	b993      	cbnz	r3, b76c <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    b746:	4c0c      	ldr	r4, [pc, #48]	; (b778 <rpmsg_service_register_endpoint+0x3c>)
    b748:	6820      	ldr	r0, [r4, #0]
    b74a:	b148      	cbz	r0, b760 <rpmsg_service_register_endpoint+0x24>
    b74c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b74e:	b133      	cbz	r3, b75e <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    b750:	480a      	ldr	r0, [pc, #40]	; (b77c <rpmsg_service_register_endpoint+0x40>)
    b752:	2145      	movs	r1, #69	; 0x45
    b754:	f00e fe67 	bl	1a426 <printk>

	return -ENOMEM;
    b758:	f06f 000b 	mvn.w	r0, #11
}
    b75c:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b75e:	2001      	movs	r0, #1
			endpoints[i].name = name;
    b760:	234c      	movs	r3, #76	; 0x4c
    b762:	4343      	muls	r3, r0
    b764:	18e5      	adds	r5, r4, r3
    b766:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    b768:	6069      	str	r1, [r5, #4]
			return i;
    b76a:	e7f7      	b.n	b75c <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    b76c:	f06f 0043 	mvn.w	r0, #67	; 0x43
    b770:	e7f4      	b.n	b75c <rpmsg_service_register_endpoint+0x20>
    b772:	bf00      	nop
    b774:	2000c2f6 	.word	0x2000c2f6
    b778:	2000a658 	.word	0x2000a658
    b77c:	0001fcc7 	.word	0x0001fcc7

0000b780 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    b780:	224c      	movs	r2, #76	; 0x4c
    b782:	4b03      	ldr	r3, [pc, #12]	; (b790 <rpmsg_service_endpoint_is_bound+0x10>)
    b784:	fb02 3300 	mla	r3, r2, r0, r3
    b788:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b78c:	4770      	bx	lr
    b78e:	bf00      	nop
    b790:	2000a658 	.word	0x2000a658

0000b794 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    b794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b796:	244c      	movs	r4, #76	; 0x4c
    b798:	460b      	mov	r3, r1
    b79a:	2101      	movs	r1, #1
    b79c:	4344      	muls	r4, r0
    b79e:	e9cd 2100 	strd	r2, r1, [sp]
    b7a2:	4d05      	ldr	r5, [pc, #20]	; (b7b8 <rpmsg_service_send+0x24>)
    b7a4:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    b7a6:	3408      	adds	r4, #8
    b7a8:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    b7ac:	1928      	adds	r0, r5, r4
    b7ae:	f00b fc31 	bl	17014 <rpmsg_send_offchannel_raw>
}
    b7b2:	b003      	add	sp, #12
    b7b4:	bd30      	pop	{r4, r5, pc}
    b7b6:	bf00      	nop
    b7b8:	2000a658 	.word	0x2000a658

0000b7bc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    b7bc:	4b10      	ldr	r3, [pc, #64]	; (b800 <settings_save_one+0x44>)
{
    b7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    b7c2:	681c      	ldr	r4, [r3, #0]
{
    b7c4:	4605      	mov	r5, r0
    b7c6:	460e      	mov	r6, r1
    b7c8:	4617      	mov	r7, r2
	if (!cs) {
    b7ca:	b1ac      	cbz	r4, b7f8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    b7cc:	f04f 32ff 	mov.w	r2, #4294967295
    b7d0:	f04f 33ff 	mov.w	r3, #4294967295
    b7d4:	480b      	ldr	r0, [pc, #44]	; (b804 <settings_save_one+0x48>)
    b7d6:	f00c f99d 	bl	17b14 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    b7da:	6863      	ldr	r3, [r4, #4]
    b7dc:	4632      	mov	r2, r6
    b7de:	f8d3 8008 	ldr.w	r8, [r3, #8]
    b7e2:	4629      	mov	r1, r5
    b7e4:	463b      	mov	r3, r7
    b7e6:	4620      	mov	r0, r4
    b7e8:	47c0      	blx	r8
    b7ea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b7ec:	4805      	ldr	r0, [pc, #20]	; (b804 <settings_save_one+0x48>)
    b7ee:	f00c fa5d 	bl	17cac <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    b7f2:	4620      	mov	r0, r4
    b7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    b7f8:	f06f 0401 	mvn.w	r4, #1
    b7fc:	e7f9      	b.n	b7f2 <settings_save_one+0x36>
    b7fe:	bf00      	nop
    b800:	2000a798 	.word	0x2000a798
    b804:	2000868c 	.word	0x2000868c

0000b808 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    b808:	2300      	movs	r3, #0
{
    b80a:	b530      	push	{r4, r5, lr}
    b80c:	b085      	sub	sp, #20
    b80e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    b810:	e9cd 3302 	strd	r3, r3, [sp, #8]
    b814:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b816:	f04f 33ff 	mov.w	r3, #4294967295
    b81a:	f04f 32ff 	mov.w	r2, #4294967295
    b81e:	480b      	ldr	r0, [pc, #44]	; (b84c <settings_load_subtree+0x44>)
    b820:	f00c f978 	bl	17b14 <z_impl_k_mutex_lock>
	return list->head;
    b824:	4b0a      	ldr	r3, [pc, #40]	; (b850 <settings_load_subtree+0x48>)
    b826:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b828:	b134      	cbz	r4, b838 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    b82a:	6863      	ldr	r3, [r4, #4]
    b82c:	4620      	mov	r0, r4
    b82e:	681b      	ldr	r3, [r3, #0]
    b830:	a901      	add	r1, sp, #4
    b832:	4798      	blx	r3
	return node->next;
    b834:	6824      	ldr	r4, [r4, #0]
    b836:	e7f7      	b.n	b828 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    b838:	4628      	mov	r0, r5
    b83a:	f000 f83b 	bl	b8b4 <settings_commit_subtree>
    b83e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b840:	4802      	ldr	r0, [pc, #8]	; (b84c <settings_load_subtree+0x44>)
    b842:	f00c fa33 	bl	17cac <z_impl_k_mutex_unlock>
}
    b846:	4620      	mov	r0, r4
    b848:	b005      	add	sp, #20
    b84a:	bd30      	pop	{r4, r5, pc}
    b84c:	2000868c 	.word	0x2000868c
    b850:	2000a790 	.word	0x2000a790

0000b854 <settings_load_subtree_direct>:
{
    b854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    b856:	e9cd 0101 	strd	r0, r1, [sp, #4]
    b85a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    b85c:	f04f 33ff 	mov.w	r3, #4294967295
    b860:	f04f 32ff 	mov.w	r2, #4294967295
    b864:	4809      	ldr	r0, [pc, #36]	; (b88c <settings_load_subtree_direct+0x38>)
    b866:	f00c f955 	bl	17b14 <z_impl_k_mutex_lock>
	return list->head;
    b86a:	4b09      	ldr	r3, [pc, #36]	; (b890 <settings_load_subtree_direct+0x3c>)
    b86c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b86e:	b134      	cbz	r4, b87e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    b870:	6863      	ldr	r3, [r4, #4]
    b872:	4620      	mov	r0, r4
    b874:	681b      	ldr	r3, [r3, #0]
    b876:	a901      	add	r1, sp, #4
    b878:	4798      	blx	r3
	return node->next;
    b87a:	6824      	ldr	r4, [r4, #0]
    b87c:	e7f7      	b.n	b86e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    b87e:	4803      	ldr	r0, [pc, #12]	; (b88c <settings_load_subtree_direct+0x38>)
    b880:	f00c fa14 	bl	17cac <z_impl_k_mutex_unlock>
}
    b884:	2000      	movs	r0, #0
    b886:	b004      	add	sp, #16
    b888:	bd10      	pop	{r4, pc}
    b88a:	bf00      	nop
    b88c:	2000868c 	.word	0x2000868c
    b890:	2000a790 	.word	0x2000a790

0000b894 <settings_store_init>:
	list->head = NULL;
    b894:	2200      	movs	r2, #0
    b896:	4b02      	ldr	r3, [pc, #8]	; (b8a0 <settings_store_init+0xc>)
	list->tail = NULL;
    b898:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    b89c:	4770      	bx	lr
    b89e:	bf00      	nop
    b8a0:	2000a790 	.word	0x2000a790

0000b8a4 <settings_init>:
	list->head = NULL;
    b8a4:	2200      	movs	r2, #0
    b8a6:	4b02      	ldr	r3, [pc, #8]	; (b8b0 <settings_init+0xc>)
	list->tail = NULL;
    b8a8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    b8ac:	f7ff bff2 	b.w	b894 <settings_store_init>
    b8b0:	2000a79c 	.word	0x2000a79c

0000b8b4 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    b8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8b8:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    b8ba:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b8bc:	4c1f      	ldr	r4, [pc, #124]	; (b93c <settings_commit_subtree+0x88>)
    b8be:	4f20      	ldr	r7, [pc, #128]	; (b940 <settings_commit_subtree+0x8c>)
    b8c0:	f8df 8080 	ldr.w	r8, [pc, #128]	; b944 <settings_commit_subtree+0x90>
    b8c4:	42bc      	cmp	r4, r7
    b8c6:	d908      	bls.n	b8da <settings_commit_subtree+0x26>
    b8c8:	4641      	mov	r1, r8
    b8ca:	481f      	ldr	r0, [pc, #124]	; (b948 <settings_commit_subtree+0x94>)
    b8cc:	22f4      	movs	r2, #244	; 0xf4
    b8ce:	f00e fdaa 	bl	1a426 <printk>
    b8d2:	21f4      	movs	r1, #244	; 0xf4
    b8d4:	4640      	mov	r0, r8
    b8d6:	f00f f84c 	bl	1a972 <assert_post_action>
    b8da:	42bc      	cmp	r4, r7
    b8dc:	d307      	bcc.n	b8ee <settings_commit_subtree+0x3a>
	return list->head;
    b8de:	4b1b      	ldr	r3, [pc, #108]	; (b94c <settings_commit_subtree+0x98>)
    b8e0:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    b8e2:	b10c      	cbz	r4, b8e8 <settings_commit_subtree+0x34>
    b8e4:	3c14      	subs	r4, #20
    b8e6:	b9a4      	cbnz	r4, b912 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    b8e8:	4628      	mov	r0, r5
    b8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b8ee:	b91e      	cbnz	r6, b8f8 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    b8f0:	68e3      	ldr	r3, [r4, #12]
    b8f2:	b94b      	cbnz	r3, b908 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b8f4:	3414      	adds	r4, #20
    b8f6:	e7e5      	b.n	b8c4 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b8f8:	2200      	movs	r2, #0
    b8fa:	4631      	mov	r1, r6
    b8fc:	6820      	ldr	r0, [r4, #0]
    b8fe:	f00f f88e 	bl	1aa1e <settings_name_steq>
    b902:	2800      	cmp	r0, #0
    b904:	d1f4      	bne.n	b8f0 <settings_commit_subtree+0x3c>
    b906:	e7f5      	b.n	b8f4 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    b908:	4798      	blx	r3
				rc = rc2;
    b90a:	2d00      	cmp	r5, #0
    b90c:	bf08      	it	eq
    b90e:	4605      	moveq	r5, r0
    b910:	e7f0      	b.n	b8f4 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b912:	b936      	cbnz	r6, b922 <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    b914:	68e3      	ldr	r3, [r4, #12]
    b916:	b963      	cbnz	r3, b932 <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b918:	f114 0f14 	cmn.w	r4, #20
    b91c:	d0e4      	beq.n	b8e8 <settings_commit_subtree+0x34>
	return node->next;
    b91e:	6964      	ldr	r4, [r4, #20]
    b920:	e7df      	b.n	b8e2 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b922:	2200      	movs	r2, #0
    b924:	4631      	mov	r1, r6
    b926:	6820      	ldr	r0, [r4, #0]
    b928:	f00f f879 	bl	1aa1e <settings_name_steq>
    b92c:	2800      	cmp	r0, #0
    b92e:	d1f1      	bne.n	b914 <settings_commit_subtree+0x60>
    b930:	e7f2      	b.n	b918 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    b932:	4798      	blx	r3
				rc = rc2;
    b934:	2d00      	cmp	r5, #0
    b936:	bf08      	it	eq
    b938:	4605      	moveq	r5, r0
    b93a:	e7ed      	b.n	b918 <settings_commit_subtree+0x64>
    b93c:	0001e1b8 	.word	0x0001e1b8
    b940:	0001e21c 	.word	0x0001e21c
    b944:	0001fd00 	.word	0x0001fd00
    b948:	0001f98f 	.word	0x0001f98f
    b94c:	2000a79c 	.word	0x2000a79c

0000b950 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    b950:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    b952:	4c06      	ldr	r4, [pc, #24]	; (b96c <settings_subsys_init+0x1c>)
    b954:	7823      	ldrb	r3, [r4, #0]
    b956:	b93b      	cbnz	r3, b968 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    b958:	f7ff ffa4 	bl	b8a4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    b95c:	f00f f898 	bl	1aa90 <settings_backend_init>

	if (!err) {
    b960:	b908      	cbnz	r0, b966 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    b962:	2301      	movs	r3, #1
    b964:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    b966:	bd10      	pop	{r4, pc}
		return 0;
    b968:	2000      	movs	r0, #0
    b96a:	e7fc      	b.n	b966 <settings_subsys_init+0x16>
    b96c:	2000c2f7 	.word	0x2000c2f7

0000b970 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    b970:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    b972:	4c04      	ldr	r4, [pc, #16]	; (b984 <rtt_console_init+0x14>)
    b974:	4620      	mov	r0, r4
    b976:	f7fe fd93 	bl	a4a0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    b97a:	4620      	mov	r0, r4
    b97c:	f002 fc7e 	bl	e27c <__stdout_hook_install>

	return 0;
}
    b980:	2000      	movs	r0, #0
    b982:	bd10      	pop	{r4, pc}
    b984:	0000b989 	.word	0x0000b989

0000b988 <rtt_console_out>:
{
    b988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b98c:	4604      	mov	r4, r0
	char c = (char)character;
    b98e:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    b990:	f8df 8058 	ldr.w	r8, [pc, #88]	; b9ec <rtt_console_out+0x64>
    b994:	4e16      	ldr	r6, [pc, #88]	; (b9f0 <rtt_console_out+0x68>)
    b996:	f88d 0007 	strb.w	r0, [sp, #7]
    b99a:	f04f 33ff 	mov.w	r3, #4294967295
    b99e:	f04f 32ff 	mov.w	r2, #4294967295
    b9a2:	4640      	mov	r0, r8
    b9a4:	f00c f8b6 	bl	17b14 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    b9a8:	2201      	movs	r2, #1
    b9aa:	f10d 0107 	add.w	r1, sp, #7
    b9ae:	2000      	movs	r0, #0
    b9b0:	f001 fd02 	bl	d3b8 <SEGGER_RTT_WriteNoLock>
    b9b4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    b9b6:	4640      	mov	r0, r8
    b9b8:	f00c f978 	bl	17cac <z_impl_k_mutex_unlock>
		if (cnt) {
    b9bc:	b12f      	cbz	r7, b9ca <rtt_console_out+0x42>
			host_present = true;
    b9be:	2301      	movs	r3, #1
    b9c0:	7033      	strb	r3, [r6, #0]
}
    b9c2:	4620      	mov	r0, r4
    b9c4:	b002      	add	sp, #8
    b9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    b9ca:	7833      	ldrb	r3, [r6, #0]
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d0f8      	beq.n	b9c2 <rtt_console_out+0x3a>
			if (max_cnt) {
    b9d0:	3d01      	subs	r5, #1
    b9d2:	d008      	beq.n	b9e6 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    b9d4:	f012 f94c 	bl	1dc70 <k_is_in_isr>
    b9d8:	2800      	cmp	r0, #0
    b9da:	d1de      	bne.n	b99a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    b9dc:	2100      	movs	r1, #0
    b9de:	2042      	movs	r0, #66	; 0x42
    b9e0:	f00d fb16 	bl	19010 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b9e4:	e7d9      	b.n	b99a <rtt_console_out+0x12>
				host_present = false;
    b9e6:	7035      	strb	r5, [r6, #0]
    b9e8:	e7eb      	b.n	b9c2 <rtt_console_out+0x3a>
    b9ea:	bf00      	nop
    b9ec:	20008664 	.word	0x20008664
    b9f0:	2000c2f8 	.word	0x2000c2f8

0000b9f4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    b9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b9f6:	2340      	movs	r3, #64	; 0x40
{
    b9f8:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b9fa:	490a      	ldr	r1, [pc, #40]	; (ba24 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b9fc:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    b9fe:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ba00:	1149      	asrs	r1, r1, #5
{
    ba02:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ba04:	4623      	mov	r3, r4
    ba06:	4a08      	ldr	r2, [pc, #32]	; (ba28 <onoff_start+0x34>)
    ba08:	4808      	ldr	r0, [pc, #32]	; (ba2c <onoff_start+0x38>)
    ba0a:	f00f f856 	bl	1aaba <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    ba0e:	1e01      	subs	r1, r0, #0
    ba10:	da05      	bge.n	ba1e <onoff_start+0x2a>
		notify(mgr, err);
    ba12:	4628      	mov	r0, r5
    ba14:	4623      	mov	r3, r4
	}
}
    ba16:	b003      	add	sp, #12
    ba18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    ba1c:	4718      	bx	r3
}
    ba1e:	b003      	add	sp, #12
    ba20:	bd30      	pop	{r4, r5, pc}
    ba22:	bf00      	nop
    ba24:	2000a7b4 	.word	0x2000a7b4
    ba28:	0001ab2d 	.word	0x0001ab2d
    ba2c:	20008584 	.word	0x20008584

0000ba30 <get_status>:
{
    ba30:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ba32:	b2cc      	uxtb	r4, r1
    ba34:	2c03      	cmp	r4, #3
{
    ba36:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ba38:	d908      	bls.n	ba4c <get_status+0x1c>
    ba3a:	4909      	ldr	r1, [pc, #36]	; (ba60 <get_status+0x30>)
    ba3c:	4809      	ldr	r0, [pc, #36]	; (ba64 <get_status+0x34>)
    ba3e:	227e      	movs	r2, #126	; 0x7e
    ba40:	f00e fcf1 	bl	1a426 <printk>
    ba44:	217e      	movs	r1, #126	; 0x7e
    ba46:	4806      	ldr	r0, [pc, #24]	; (ba60 <get_status+0x30>)
    ba48:	f00e ff93 	bl	1a972 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    ba4c:	230c      	movs	r3, #12
    ba4e:	68e9      	ldr	r1, [r5, #12]
    ba50:	fb04 1403 	mla	r4, r4, r3, r1
    ba54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    ba58:	f000 0007 	and.w	r0, r0, #7
    ba5c:	bd38      	pop	{r3, r4, r5, pc}
    ba5e:	bf00      	nop
    ba60:	0001fd38 	.word	0x0001fd38
    ba64:	0001f98f 	.word	0x0001f98f

0000ba68 <stop>:
{
    ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba6a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ba6c:	2c03      	cmp	r4, #3
{
    ba6e:	4605      	mov	r5, r0
    ba70:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    ba72:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ba74:	d90a      	bls.n	ba8c <stop+0x24>
    ba76:	4919      	ldr	r1, [pc, #100]	; (badc <stop+0x74>)
    ba78:	4819      	ldr	r0, [pc, #100]	; (bae0 <stop+0x78>)
    ba7a:	f240 1253 	movw	r2, #339	; 0x153
    ba7e:	f00e fcd2 	bl	1a426 <printk>
    ba82:	f240 1153 	movw	r1, #339	; 0x153
    ba86:	4815      	ldr	r0, [pc, #84]	; (badc <stop+0x74>)
    ba88:	f00e ff73 	bl	1a972 <assert_post_action>
	__asm__ volatile(
    ba8c:	f04f 0320 	mov.w	r3, #32
    ba90:	f3ef 8111 	mrs	r1, BASEPRI
    ba94:	f383 8811 	msr	BASEPRI, r3
    ba98:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ba9c:	220c      	movs	r2, #12
    ba9e:	fb02 6304 	mla	r3, r2, r4, r6
    baa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    baa6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    baaa:	d001      	beq.n	bab0 <stop+0x48>
    baac:	429f      	cmp	r7, r3
    baae:	d112      	bne.n	bad6 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bab0:	2301      	movs	r3, #1
	int err = 0;
    bab2:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bab4:	fb02 6604 	mla	r6, r2, r4, r6
    bab8:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    babc:	f381 8811 	msr	BASEPRI, r1
    bac0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bac4:	b930      	cbnz	r0, bad4 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    bac6:	230c      	movs	r3, #12
    bac8:	6869      	ldr	r1, [r5, #4]
    baca:	fb03 1404 	mla	r4, r3, r4, r1
    bace:	6863      	ldr	r3, [r4, #4]
    bad0:	4798      	blx	r3
	return 0;
    bad2:	2000      	movs	r0, #0
}
    bad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    bad6:	f04f 30ff 	mov.w	r0, #4294967295
    bada:	e7ef      	b.n	babc <stop+0x54>
    badc:	0001fd38 	.word	0x0001fd38
    bae0:	0001f98f 	.word	0x0001f98f

0000bae4 <onoff_stop>:
{
    bae4:	b570      	push	{r4, r5, r6, lr}
    bae6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bae8:	4906      	ldr	r1, [pc, #24]	; (bb04 <onoff_stop+0x20>)
{
    baea:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    baec:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    baee:	1149      	asrs	r1, r1, #5
    baf0:	2240      	movs	r2, #64	; 0x40
    baf2:	4805      	ldr	r0, [pc, #20]	; (bb08 <onoff_stop+0x24>)
    baf4:	f7ff ffb8 	bl	ba68 <stop>
	notify(mgr, res);
    baf8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bafa:	4601      	mov	r1, r0
	notify(mgr, res);
    bafc:	4620      	mov	r0, r4
}
    bafe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    bb02:	4718      	bx	r3
    bb04:	2000a7b4 	.word	0x2000a7b4
    bb08:	20008584 	.word	0x20008584

0000bb0c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    bb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bb10:	2200      	movs	r2, #0
    bb12:	2101      	movs	r1, #1
{
    bb14:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bb16:	2005      	movs	r0, #5
    bb18:	f001 fe6a 	bl	d7f0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    bb1c:	2005      	movs	r0, #5
    bb1e:	f001 fe49 	bl	d7b4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    bb22:	4811      	ldr	r0, [pc, #68]	; (bb68 <clk_init+0x5c>)
    bb24:	f00a fe4c 	bl	167c0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    bb28:	4b10      	ldr	r3, [pc, #64]	; (bb6c <clk_init+0x60>)
    bb2a:	4298      	cmp	r0, r3
    bb2c:	d119      	bne.n	bb62 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    bb2e:	f00a fe67 	bl	16800 <nrfx_clock_enable>
    bb32:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bb34:	f04f 080c 	mov.w	r8, #12
    bb38:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bb3a:	f8df 9034 	ldr.w	r9, [pc, #52]	; bb70 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    bb3e:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bb40:	4649      	mov	r1, r9
    bb42:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    bb46:	f00e fcc9 	bl	1a4dc <onoff_manager_init>
		if (err < 0) {
    bb4a:	2800      	cmp	r0, #0
    bb4c:	db07      	blt.n	bb5e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bb4e:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    bb52:	3401      	adds	r4, #1
    bb54:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bb56:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    bb5a:	d1f0      	bne.n	bb3e <clk_init+0x32>
	}

	return 0;
    bb5c:	2000      	movs	r0, #0
}
    bb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    bb62:	f06f 0004 	mvn.w	r0, #4
    bb66:	e7fa      	b.n	bb5e <clk_init+0x52>
    bb68:	0000bbad 	.word	0x0000bbad
    bb6c:	0bad0000 	.word	0x0bad0000
    bb70:	0001e594 	.word	0x0001e594

0000bb74 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    bb74:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    bb76:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    bb78:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    bb7a:	434b      	muls	r3, r1
    bb7c:	4809      	ldr	r0, [pc, #36]	; (bba4 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    bb7e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    bb80:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    bb82:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    bb84:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bb88:	4418      	add	r0, r3
	sub_data->cb = NULL;
    bb8a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bb8e:	f00e ff81 	bl	1aa94 <set_on_state>
	if (callback) {
    bb92:	b12d      	cbz	r5, bba0 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    bb94:	4632      	mov	r2, r6
    bb96:	462b      	mov	r3, r5
}
    bb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    bb9c:	4802      	ldr	r0, [pc, #8]	; (bba8 <clkstarted_handle.constprop.0+0x34>)
    bb9e:	4718      	bx	r3
}
    bba0:	bd70      	pop	{r4, r5, r6, pc}
    bba2:	bf00      	nop
    bba4:	2000a7b4 	.word	0x2000a7b4
    bba8:	20008584 	.word	0x20008584

0000bbac <clock_event_handler>:
{
    bbac:	b508      	push	{r3, lr}
    bbae:	2805      	cmp	r0, #5
    bbb0:	d821      	bhi.n	bbf6 <clock_event_handler+0x4a>
    bbb2:	e8df f000 	tbb	[pc, r0]
    bbb6:	1103      	.short	0x1103
    bbb8:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    bbbc:	4b13      	ldr	r3, [pc, #76]	; (bc0c <clock_event_handler+0x60>)
    bbbe:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    bbc2:	f010 0007 	ands.w	r0, r0, #7
    bbc6:	d11f      	bne.n	bc08 <clock_event_handler+0x5c>
}
    bbc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    bbcc:	f7ff bfd2 	b.w	bb74 <clkstarted_handle.constprop.0>
    bbd0:	2002      	movs	r0, #2
    bbd2:	e7f9      	b.n	bbc8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    bbd4:	2003      	movs	r0, #3
    bbd6:	e7f7      	b.n	bbc8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    bbd8:	2001      	movs	r0, #1
    bbda:	e7f5      	b.n	bbc8 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    bbdc:	490c      	ldr	r1, [pc, #48]	; (bc10 <clock_event_handler+0x64>)
    bbde:	f240 2266 	movw	r2, #614	; 0x266
    bbe2:	480c      	ldr	r0, [pc, #48]	; (bc14 <clock_event_handler+0x68>)
    bbe4:	f00e fc1f 	bl	1a426 <printk>
    bbe8:	f240 2166 	movw	r1, #614	; 0x266
}
    bbec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    bbf0:	4807      	ldr	r0, [pc, #28]	; (bc10 <clock_event_handler+0x64>)
    bbf2:	f00e bebe 	b.w	1a972 <assert_post_action>
    bbf6:	4906      	ldr	r1, [pc, #24]	; (bc10 <clock_event_handler+0x64>)
    bbf8:	f240 226a 	movw	r2, #618	; 0x26a
    bbfc:	4805      	ldr	r0, [pc, #20]	; (bc14 <clock_event_handler+0x68>)
    bbfe:	f00e fc12 	bl	1a426 <printk>
    bc02:	f240 216a 	movw	r1, #618	; 0x26a
    bc06:	e7f1      	b.n	bbec <clock_event_handler+0x40>
}
    bc08:	bd08      	pop	{r3, pc}
    bc0a:	bf00      	nop
    bc0c:	2000a7b4 	.word	0x2000a7b4
    bc10:	0001fd38 	.word	0x0001fd38
    bc14:	0001f98f 	.word	0x0001f98f

0000bc18 <generic_hfclk_start>:
{
    bc18:	b508      	push	{r3, lr}
	__asm__ volatile(
    bc1a:	f04f 0320 	mov.w	r3, #32
    bc1e:	f3ef 8111 	mrs	r1, BASEPRI
    bc22:	f383 8811 	msr	BASEPRI, r3
    bc26:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    bc2a:	4a11      	ldr	r2, [pc, #68]	; (bc70 <generic_hfclk_start+0x58>)
    bc2c:	6813      	ldr	r3, [r2, #0]
    bc2e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    bc32:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    bc36:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    bc38:	d00b      	beq.n	bc52 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    bc3a:	4a0e      	ldr	r2, [pc, #56]	; (bc74 <generic_hfclk_start+0x5c>)
    bc3c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    bc40:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    bc44:	f013 0301 	ands.w	r3, r3, #1
    bc48:	d003      	beq.n	bc52 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    bc4a:	480b      	ldr	r0, [pc, #44]	; (bc78 <generic_hfclk_start+0x60>)
    bc4c:	f00e ff22 	bl	1aa94 <set_on_state>
			already_started = true;
    bc50:	2301      	movs	r3, #1
	__asm__ volatile(
    bc52:	f381 8811 	msr	BASEPRI, r1
    bc56:	f3bf 8f6f 	isb	sy
	if (already_started) {
    bc5a:	b123      	cbz	r3, bc66 <generic_hfclk_start+0x4e>
}
    bc5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    bc60:	2000      	movs	r0, #0
    bc62:	f7ff bf87 	b.w	bb74 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    bc66:	2001      	movs	r0, #1
}
    bc68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bc6c:	f00a bdec 	b.w	16848 <nrfx_clock_start>
    bc70:	2000a864 	.word	0x2000a864
    bc74:	40005000 	.word	0x40005000
    bc78:	2000a83c 	.word	0x2000a83c

0000bc7c <api_blocking_start>:
{
    bc7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    bc7e:	2200      	movs	r2, #0
    bc80:	2301      	movs	r3, #1
    bc82:	e9cd 2302 	strd	r2, r3, [sp, #8]
    bc86:	ab04      	add	r3, sp, #16
    bc88:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    bc8c:	4a09      	ldr	r2, [pc, #36]	; (bcb4 <api_blocking_start+0x38>)
    bc8e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    bc90:	f8cd d000 	str.w	sp, [sp]
    bc94:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    bc98:	f00e ff41 	bl	1ab1e <api_start>
	if (err < 0) {
    bc9c:	2800      	cmp	r0, #0
    bc9e:	db05      	blt.n	bcac <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    bca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    bca4:	2300      	movs	r3, #0
    bca6:	4668      	mov	r0, sp
    bca8:	f00d fa24 	bl	190f4 <z_impl_k_sem_take>
}
    bcac:	b007      	add	sp, #28
    bcae:	f85d fb04 	ldr.w	pc, [sp], #4
    bcb2:	bf00      	nop
    bcb4:	0001ab63 	.word	0x0001ab63

0000bcb8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bcb8:	4b07      	ldr	r3, [pc, #28]	; (bcd8 <generic_hfclk_stop+0x20>)
    bcba:	e8d3 2fef 	ldaex	r2, [r3]
    bcbe:	f022 0102 	bic.w	r1, r2, #2
    bcc2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    bcc6:	2800      	cmp	r0, #0
    bcc8:	d1f7      	bne.n	bcba <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    bcca:	07d3      	lsls	r3, r2, #31
    bccc:	d402      	bmi.n	bcd4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    bcce:	2001      	movs	r0, #1
    bcd0:	f00a be24 	b.w	1691c <nrfx_clock_stop>
}
    bcd4:	4770      	bx	lr
    bcd6:	bf00      	nop
    bcd8:	2000a864 	.word	0x2000a864

0000bcdc <z_nrf_clock_control_lf_on>:
{
    bcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bce0:	2201      	movs	r2, #1
    bce2:	4606      	mov	r6, r0
    bce4:	4942      	ldr	r1, [pc, #264]	; (bdf0 <z_nrf_clock_control_lf_on+0x114>)
    bce6:	e8d1 3fef 	ldaex	r3, [r1]
    bcea:	e8c1 2fe0 	stlex	r0, r2, [r1]
    bcee:	2800      	cmp	r0, #0
    bcf0:	d1f9      	bne.n	bce6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    bcf2:	b99b      	cbnz	r3, bd1c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    bcf4:	493f      	ldr	r1, [pc, #252]	; (bdf4 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    bcf6:	4840      	ldr	r0, [pc, #256]	; (bdf8 <z_nrf_clock_control_lf_on+0x11c>)
    bcf8:	604b      	str	r3, [r1, #4]
    bcfa:	60cb      	str	r3, [r1, #12]
    bcfc:	608a      	str	r2, [r1, #8]
    bcfe:	f7fe fdd7 	bl	a8b0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    bd02:	2800      	cmp	r0, #0
    bd04:	da0a      	bge.n	bd1c <z_nrf_clock_control_lf_on+0x40>
    bd06:	493d      	ldr	r1, [pc, #244]	; (bdfc <z_nrf_clock_control_lf_on+0x120>)
    bd08:	483d      	ldr	r0, [pc, #244]	; (be00 <z_nrf_clock_control_lf_on+0x124>)
    bd0a:	f240 2226 	movw	r2, #550	; 0x226
    bd0e:	f00e fb8a 	bl	1a426 <printk>
    bd12:	f240 2126 	movw	r1, #550	; 0x226
    bd16:	4839      	ldr	r0, [pc, #228]	; (bdfc <z_nrf_clock_control_lf_on+0x120>)
    bd18:	f00e fe2b 	bl	1a972 <assert_post_action>
	switch (start_mode) {
    bd1c:	b386      	cbz	r6, bd80 <z_nrf_clock_control_lf_on+0xa4>
    bd1e:	1e73      	subs	r3, r6, #1
    bd20:	2b01      	cmp	r3, #1
    bd22:	d852      	bhi.n	bdca <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    bd24:	2e01      	cmp	r6, #1
    bd26:	d106      	bne.n	bd36 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    bd28:	4b36      	ldr	r3, [pc, #216]	; (be04 <z_nrf_clock_control_lf_on+0x128>)
    bd2a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    bd2e:	f003 0303 	and.w	r3, r3, #3
    bd32:	2b02      	cmp	r3, #2
    bd34:	d024      	beq.n	bd80 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    bd36:	f011 ff9b 	bl	1dc70 <k_is_in_isr>
    bd3a:	4604      	mov	r4, r0
    bd3c:	b918      	cbnz	r0, bd46 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    bd3e:	4b32      	ldr	r3, [pc, #200]	; (be08 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    bd40:	781b      	ldrb	r3, [r3, #0]
    bd42:	2b00      	cmp	r3, #0
    bd44:	d14e      	bne.n	bde4 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    bd46:	f04f 0320 	mov.w	r3, #32
    bd4a:	f3ef 8711 	mrs	r7, BASEPRI
    bd4e:	f383 8811 	msr	BASEPRI, r3
    bd52:	f3bf 8f6f 	isb	sy
    bd56:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    bd58:	4d2a      	ldr	r5, [pc, #168]	; (be04 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bd5a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; be0c <z_nrf_clock_control_lf_on+0x130>
    bd5e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    bd62:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    bd66:	03d2      	lsls	r2, r2, #15
    bd68:	d50c      	bpl.n	bd84 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    bd6a:	f003 0303 	and.w	r3, r3, #3
    bd6e:	2b02      	cmp	r3, #2
    bd70:	d001      	beq.n	bd76 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    bd72:	2e01      	cmp	r6, #1
    bd74:	d106      	bne.n	bd84 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    bd76:	b324      	cbz	r4, bdc2 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    bd78:	f387 8811 	msr	BASEPRI, r7
    bd7c:	f3bf 8f6f 	isb	sy
}
    bd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    bd84:	b1c4      	cbz	r4, bdb8 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    bd86:	4638      	mov	r0, r7
    bd88:	f001 fda2 	bl	d8d0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    bd8c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    bd90:	b2db      	uxtb	r3, r3
    bd92:	2b01      	cmp	r3, #1
    bd94:	d1e3      	bne.n	bd5e <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    bd96:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    bd9a:	2a00      	cmp	r2, #0
    bd9c:	d0df      	beq.n	bd5e <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bd9e:	2200      	movs	r2, #0
    bda0:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    bda4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    bda8:	2202      	movs	r2, #2
    bdaa:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    bdae:	2220      	movs	r2, #32
    bdb0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bdb4:	60ab      	str	r3, [r5, #8]
}
    bdb6:	e7d2      	b.n	bd5e <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    bdb8:	2100      	movs	r1, #0
    bdba:	2021      	movs	r0, #33	; 0x21
    bdbc:	f00d f928 	bl	19010 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bdc0:	e7e4      	b.n	bd8c <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    bdc2:	2302      	movs	r3, #2
    bdc4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    bdc8:	e7da      	b.n	bd80 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    bdca:	490c      	ldr	r1, [pc, #48]	; (bdfc <z_nrf_clock_control_lf_on+0x120>)
    bdcc:	480c      	ldr	r0, [pc, #48]	; (be00 <z_nrf_clock_control_lf_on+0x124>)
    bdce:	f44f 720e 	mov.w	r2, #568	; 0x238
    bdd2:	f00e fb28 	bl	1a426 <printk>
}
    bdd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    bdda:	f44f 710e 	mov.w	r1, #568	; 0x238
    bdde:	4807      	ldr	r0, [pc, #28]	; (bdfc <z_nrf_clock_control_lf_on+0x120>)
    bde0:	f00e bdc7 	b.w	1a972 <assert_post_action>
    p_reg->INTENCLR = mask;
    bde4:	2202      	movs	r2, #2
    bde6:	4b07      	ldr	r3, [pc, #28]	; (be04 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    bde8:	4607      	mov	r7, r0
    bdea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    bdee:	e7b3      	b.n	bd58 <z_nrf_clock_control_lf_on+0x7c>
    bdf0:	2000a868 	.word	0x2000a868
    bdf4:	2000a7a4 	.word	0x2000a7a4
    bdf8:	2000a7d4 	.word	0x2000a7d4
    bdfc:	0001fd38 	.word	0x0001fd38
    be00:	0001f98f 	.word	0x0001f98f
    be04:	40005000 	.word	0x40005000
    be08:	2000c7ee 	.word	0x2000c7ee
    be0c:	e000e100 	.word	0xe000e100

0000be10 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    be10:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    be12:	f000 f905 	bl	c020 <bt_rpmsg_platform_init>
	if (err < 0) {
    be16:	1e04      	subs	r4, r0, #0
    be18:	da06      	bge.n	be28 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    be1a:	4622      	mov	r2, r4
    be1c:	2145      	movs	r1, #69	; 0x45
    be1e:	4807      	ldr	r0, [pc, #28]	; (be3c <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    be20:	f00e fb01 	bl	1a426 <printk>
	}

	return err;
}
    be24:	4620      	mov	r0, r4
    be26:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    be28:	4805      	ldr	r0, [pc, #20]	; (be40 <bt_rpmsg_init+0x30>)
    be2a:	f003 ffd5 	bl	fdd8 <bt_hci_driver_register>
	if (err < 0) {
    be2e:	1e04      	subs	r4, r0, #0
    be30:	daf8      	bge.n	be24 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    be32:	4622      	mov	r2, r4
    be34:	2145      	movs	r1, #69	; 0x45
    be36:	4803      	ldr	r0, [pc, #12]	; (be44 <bt_rpmsg_init+0x34>)
    be38:	e7f2      	b.n	be20 <bt_rpmsg_init+0x10>
    be3a:	bf00      	nop
    be3c:	0001fdaa 	.word	0x0001fdaa
    be40:	0001e5a0 	.word	0x0001e5a0
    be44:	0001fdd6 	.word	0x0001fdd6

0000be48 <bt_rpmsg_send>:
{
    be48:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    be4a:	7d02      	ldrb	r2, [r0, #20]
    be4c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    be4e:	2a02      	cmp	r2, #2
    be50:	d00c      	beq.n	be6c <bt_rpmsg_send+0x24>
    be52:	2a04      	cmp	r2, #4
    be54:	d009      	beq.n	be6a <bt_rpmsg_send+0x22>
    be56:	b1b2      	cbz	r2, be86 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    be58:	2145      	movs	r1, #69	; 0x45
    be5a:	480c      	ldr	r0, [pc, #48]	; (be8c <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    be5c:	f00e fae3 	bl	1a426 <printk>
	net_buf_unref(buf);
    be60:	4620      	mov	r0, r4
    be62:	f009 fa6d 	bl	15340 <net_buf_unref>
}
    be66:	2000      	movs	r0, #0
    be68:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    be6a:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    be6c:	4611      	mov	r1, r2
    be6e:	f104 0008 	add.w	r0, r4, #8
    be72:	f011 f837 	bl	1cee4 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    be76:	4620      	mov	r0, r4
    be78:	f000 f8ee 	bl	c058 <bt_rpmsg_platform_send>
	if (err < 0) {
    be7c:	1e02      	subs	r2, r0, #0
    be7e:	daef      	bge.n	be60 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    be80:	2145      	movs	r1, #69	; 0x45
    be82:	4803      	ldr	r0, [pc, #12]	; (be90 <bt_rpmsg_send+0x48>)
    be84:	e7ea      	b.n	be5c <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    be86:	2201      	movs	r2, #1
    be88:	e7f0      	b.n	be6c <bt_rpmsg_send+0x24>
    be8a:	bf00      	nop
    be8c:	0001fe05 	.word	0x0001fe05
    be90:	0001fe1a 	.word	0x0001fe1a

0000be94 <bt_rpmsg_rx>:
{
    be94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    be98:	4680      	mov	r8, r0
{
    be9a:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    be9c:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    bea0:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    bea2:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    bea4:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    bea8:	d009      	beq.n	bebe <bt_rpmsg_rx+0x2a>
    beaa:	2805      	cmp	r0, #5
    beac:	d074      	beq.n	bf98 <bt_rpmsg_rx+0x104>
    beae:	2802      	cmp	r0, #2
    beb0:	f040 8099 	bne.w	bfe6 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    beb4:	2b03      	cmp	r3, #3
    beb6:	d84a      	bhi.n	bf4e <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    beb8:	2145      	movs	r1, #69	; 0x45
    beba:	484f      	ldr	r0, [pc, #316]	; (bff8 <bt_rpmsg_rx+0x164>)
    bebc:	e003      	b.n	bec6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    bebe:	2b01      	cmp	r3, #1
    bec0:	d806      	bhi.n	bed0 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    bec2:	2145      	movs	r1, #69	; 0x45
    bec4:	484d      	ldr	r0, [pc, #308]	; (bffc <bt_rpmsg_rx+0x168>)
}
    bec6:	b002      	add	sp, #8
    bec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    becc:	f00e baab 	b.w	1a426 <printk>
	switch (evt_type) {
    bed0:	7873      	ldrb	r3, [r6, #1]
    bed2:	2b3e      	cmp	r3, #62	; 0x3e
    bed4:	d117      	bne.n	bf06 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    bed6:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    bed8:	2f02      	cmp	r7, #2
    beda:	d016      	beq.n	bf0a <bt_rpmsg_rx+0x76>
    bedc:	f1a7 030d 	sub.w	r3, r7, #13
    bee0:	425f      	negs	r7, r3
    bee2:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    bee4:	2202      	movs	r2, #2
    bee6:	4641      	mov	r1, r8
    bee8:	a801      	add	r0, sp, #4
    beea:	f00f fce0 	bl	1b8ae <memcpy>
	if (remaining != hdr.len) {
    beee:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    bef2:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    bef4:	429d      	cmp	r5, r3
    bef6:	d00a      	beq.n	bf0e <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    bef8:	2145      	movs	r1, #69	; 0x45
    befa:	4841      	ldr	r0, [pc, #260]	; (c000 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    befc:	f00e fa93 	bl	1a426 <printk>
}
    bf00:	b002      	add	sp, #8
    bf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    bf06:	2700      	movs	r7, #0
    bf08:	e7ec      	b.n	bee4 <bt_rpmsg_rx+0x50>
			return true;
    bf0a:	2701      	movs	r7, #1
    bf0c:	e7ea      	b.n	bee4 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    bf0e:	2200      	movs	r2, #0
    bf10:	2300      	movs	r3, #0
    bf12:	4639      	mov	r1, r7
    bf14:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bf18:	f002 fb88 	bl	e62c <bt_buf_get_evt>
	if (!buf) {
    bf1c:	4604      	mov	r4, r0
    bf1e:	b920      	cbnz	r0, bf2a <bt_rpmsg_rx+0x96>
		if (discardable) {
    bf20:	2f00      	cmp	r7, #0
    bf22:	d1ed      	bne.n	bf00 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    bf24:	2145      	movs	r1, #69	; 0x45
    bf26:	4837      	ldr	r0, [pc, #220]	; (c004 <bt_rpmsg_rx+0x170>)
    bf28:	e7e8      	b.n	befc <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    bf2a:	f100 0708 	add.w	r7, r0, #8
    bf2e:	2202      	movs	r2, #2
    bf30:	a901      	add	r1, sp, #4
    bf32:	4638      	mov	r0, r7
    bf34:	f010 fff9 	bl	1cf2a <net_buf_simple_add_mem>
    bf38:	462a      	mov	r2, r5
    bf3a:	1cf1      	adds	r1, r6, #3
    bf3c:	4638      	mov	r0, r7
    bf3e:	f010 fff4 	bl	1cf2a <net_buf_simple_add_mem>
		bt_recv(buf);
    bf42:	4620      	mov	r0, r4
}
    bf44:	b002      	add	sp, #8
    bf46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    bf4a:	f003 bf1b 	b.w	fd84 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    bf4e:	2200      	movs	r2, #0
    bf50:	2300      	movs	r3, #0
    bf52:	2003      	movs	r0, #3
    bf54:	f002 fb18 	bl	e588 <bt_buf_get_rx>
	if (buf) {
    bf58:	4604      	mov	r4, r0
    bf5a:	b1d0      	cbz	r0, bf92 <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    bf5c:	2204      	movs	r2, #4
    bf5e:	4641      	mov	r1, r8
    bf60:	eb0d 0002 	add.w	r0, sp, r2
    bf64:	f00f fca3 	bl	1b8ae <memcpy>
    bf68:	2204      	movs	r2, #4
    bf6a:	f104 0708 	add.w	r7, r4, #8
    bf6e:	4638      	mov	r0, r7
    bf70:	eb0d 0102 	add.w	r1, sp, r2
    bf74:	f010 ffd9 	bl	1cf2a <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    bf78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    bf7c:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    bf7e:	429d      	cmp	r5, r3
    bf80:	d02e      	beq.n	bfe0 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    bf82:	2145      	movs	r1, #69	; 0x45
    bf84:	4820      	ldr	r0, [pc, #128]	; (c008 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    bf86:	f00e fa4e 	bl	1a426 <printk>
		net_buf_unref(buf);
    bf8a:	4620      	mov	r0, r4
    bf8c:	f009 f9d8 	bl	15340 <net_buf_unref>
	if (buf) {
    bf90:	e7b6      	b.n	bf00 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    bf92:	2145      	movs	r1, #69	; 0x45
    bf94:	481d      	ldr	r0, [pc, #116]	; (c00c <bt_rpmsg_rx+0x178>)
    bf96:	e796      	b.n	bec6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    bf98:	2b03      	cmp	r3, #3
    bf9a:	d802      	bhi.n	bfa2 <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    bf9c:	2145      	movs	r1, #69	; 0x45
    bf9e:	481c      	ldr	r0, [pc, #112]	; (c010 <bt_rpmsg_rx+0x17c>)
    bfa0:	e791      	b.n	bec6 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    bfa2:	2200      	movs	r2, #0
    bfa4:	2300      	movs	r3, #0
    bfa6:	f002 faef 	bl	e588 <bt_buf_get_rx>
	if (buf) {
    bfaa:	4604      	mov	r4, r0
    bfac:	b1a8      	cbz	r0, bfda <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    bfae:	2204      	movs	r2, #4
    bfb0:	4641      	mov	r1, r8
    bfb2:	eb0d 0002 	add.w	r0, sp, r2
    bfb6:	f00f fc7a 	bl	1b8ae <memcpy>
    bfba:	2204      	movs	r2, #4
    bfbc:	f104 0708 	add.w	r7, r4, #8
    bfc0:	4638      	mov	r0, r7
    bfc2:	eb0d 0102 	add.w	r1, sp, r2
    bfc6:	f010 ffb0 	bl	1cf2a <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    bfca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    bfce:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    bfd0:	429d      	cmp	r5, r3
    bfd2:	d005      	beq.n	bfe0 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    bfd4:	2145      	movs	r1, #69	; 0x45
    bfd6:	480f      	ldr	r0, [pc, #60]	; (c014 <bt_rpmsg_rx+0x180>)
    bfd8:	e7d5      	b.n	bf86 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    bfda:	2145      	movs	r1, #69	; 0x45
    bfdc:	480e      	ldr	r0, [pc, #56]	; (c018 <bt_rpmsg_rx+0x184>)
    bfde:	e772      	b.n	bec6 <bt_rpmsg_rx+0x32>
    bfe0:	462a      	mov	r2, r5
    bfe2:	1d71      	adds	r1, r6, #5
    bfe4:	e7aa      	b.n	bf3c <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    bfe6:	4602      	mov	r2, r0
    bfe8:	2145      	movs	r1, #69	; 0x45
    bfea:	480c      	ldr	r0, [pc, #48]	; (c01c <bt_rpmsg_rx+0x188>)
}
    bfec:	b002      	add	sp, #8
    bfee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    bff2:	f00e ba18 	b.w	1a426 <printk>
    bff6:	bf00      	nop
    bff8:	0001fea7 	.word	0x0001fea7
    bffc:	0001fe37 	.word	0x0001fe37
    c000:	0001fe5d 	.word	0x0001fe5d
    c004:	0001fe86 	.word	0x0001fe86
    c008:	0001feea 	.word	0x0001feea
    c00c:	0001fecb 	.word	0x0001fecb
    c010:	0001ff11 	.word	0x0001ff11
    c014:	0001ff54 	.word	0x0001ff54
    c018:	0001ff35 	.word	0x0001ff35
    c01c:	0001ff7b 	.word	0x0001ff7b

0000c020 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c020:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c022:	4908      	ldr	r1, [pc, #32]	; (c044 <bt_rpmsg_platform_init+0x24>)
    c024:	4808      	ldr	r0, [pc, #32]	; (c048 <bt_rpmsg_platform_init+0x28>)
    c026:	f7ff fb89 	bl	b73c <rpmsg_service_register_endpoint>

	if (err < 0) {
    c02a:	1e02      	subs	r2, r0, #0
    c02c:	da05      	bge.n	c03a <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c02e:	4807      	ldr	r0, [pc, #28]	; (c04c <bt_rpmsg_platform_init+0x2c>)
    c030:	2145      	movs	r1, #69	; 0x45
    c032:	f00e f9f8 	bl	1a426 <printk>
		return RPMSG_ERR_INIT;
    c036:	4806      	ldr	r0, [pc, #24]	; (c050 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c038:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c03a:	4b06      	ldr	r3, [pc, #24]	; (c054 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c03c:	2000      	movs	r0, #0
	endpoint_id = err;
    c03e:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c040:	e7fa      	b.n	c038 <bt_rpmsg_platform_init+0x18>
    c042:	bf00      	nop
    c044:	0001ab7f 	.word	0x0001ab7f
    c048:	0001ffa8 	.word	0x0001ffa8
    c04c:	0001ffb3 	.word	0x0001ffb3
    c050:	fffff82a 	.word	0xfffff82a
    c054:	2000a86c 	.word	0x2000a86c

0000c058 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c058:	4b02      	ldr	r3, [pc, #8]	; (c064 <bt_rpmsg_platform_send+0xc>)
    c05a:	8982      	ldrh	r2, [r0, #12]
    c05c:	6881      	ldr	r1, [r0, #8]
    c05e:	6818      	ldr	r0, [r3, #0]
    c060:	f7ff bb98 	b.w	b794 <rpmsg_service_send>
    c064:	2000a86c 	.word	0x2000a86c

0000c068 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c068:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c06a:	4b02      	ldr	r3, [pc, #8]	; (c074 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c06c:	6818      	ldr	r0, [r3, #0]
    c06e:	f7ff fb87 	bl	b780 <rpmsg_service_endpoint_is_bound>
}
    c072:	bd08      	pop	{r3, pc}
    c074:	2000a86c 	.word	0x2000a86c

0000c078 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c078:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c07a:	4c06      	ldr	r4, [pc, #24]	; (c094 <z_clock_isr+0x1c>)
    c07c:	4806      	ldr	r0, [pc, #24]	; (c098 <z_clock_isr+0x20>)
    c07e:	4621      	mov	r1, r4
    c080:	2217      	movs	r2, #23
    c082:	f00e f9d0 	bl	1a426 <printk>
    c086:	4620      	mov	r0, r4
}
    c088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c08c:	2117      	movs	r1, #23
    c08e:	f00e bc70 	b.w	1a972 <assert_post_action>
    c092:	bf00      	nop
    c094:	0001fff0 	.word	0x0001fff0
    c098:	0001f98f 	.word	0x0001f98f

0000c09c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c09c:	4a04      	ldr	r2, [pc, #16]	; (c0b0 <sys_clock_timeout_handler+0x14>)
    c09e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c0a0:	1ac8      	subs	r0, r1, r3
    c0a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c0a6:	4403      	add	r3, r0
    c0a8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c0aa:	f00d bcc7 	b.w	19a3c <z_clock_announce>
    c0ae:	bf00      	nop
    c0b0:	2000a87c 	.word	0x2000a87c

0000c0b4 <set_absolute_alarm>:
{
    c0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c0b8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c0bc:	f04f 0900 	mov.w	r9, #0
    c0c0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c0c2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c0c6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c0ca:	00a4      	lsls	r4, r4, #2
    c0cc:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c0d0:	b2a4      	uxth	r4, r4
    c0d2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c0d6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c0da:	f8df 806c 	ldr.w	r8, [pc, #108]	; c148 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c0de:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c0e2:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c0e6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c0e8:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c0ec:	eba3 030a 	sub.w	r3, r3, sl
    c0f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c0f4:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c0f8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c0fa:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c0fe:	d102      	bne.n	c106 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c100:	2013      	movs	r0, #19
    c102:	f011 fdbb 	bl	1dc7c <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c106:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c10a:	1aab      	subs	r3, r5, r2
    c10c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c114:	bf88      	it	hi
    c116:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c118:	f8c4 9000 	str.w	r9, [r4]
    c11c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c11e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c122:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c126:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c12a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c12e:	459a      	cmp	sl, r3
    c130:	d006      	beq.n	c140 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c132:	1aeb      	subs	r3, r5, r3
    c134:	3b02      	subs	r3, #2
    c136:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c13a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c13e:	d801      	bhi.n	c144 <set_absolute_alarm+0x90>
}
    c140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c144:	462b      	mov	r3, r5
    c146:	e7cf      	b.n	c0e8 <set_absolute_alarm+0x34>
    c148:	40015000 	.word	0x40015000

0000c14c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c14e:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c150:	462f      	mov	r7, r5
    c152:	4c10      	ldr	r4, [pc, #64]	; (c194 <rtc_nrf_isr+0x48>)
    c154:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c156:	4b10      	ldr	r3, [pc, #64]	; (c198 <rtc_nrf_isr+0x4c>)
    c158:	b105      	cbz	r5, c15c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c15c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c160:	03d2      	lsls	r2, r2, #15
    c162:	d5fa      	bpl.n	c15a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c164:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c168:	2a00      	cmp	r2, #0
    c16a:	d0f6      	beq.n	c15a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c16c:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c170:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c174:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c178:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c17c:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c17e:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c182:	b126      	cbz	r6, c18e <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c184:	2000      	movs	r0, #0
    c186:	6862      	ldr	r2, [r4, #4]
    c188:	6027      	str	r7, [r4, #0]
    c18a:	47b0      	blx	r6
    c18c:	e7e2      	b.n	c154 <rtc_nrf_isr+0x8>
    c18e:	6026      	str	r6, [r4, #0]
}
    c190:	e7e3      	b.n	c15a <rtc_nrf_isr+0xe>
    c192:	bf00      	nop
    c194:	2000a870 	.word	0x2000a870
    c198:	40015000 	.word	0x40015000

0000c19c <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c19c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c19e:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c1a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c1a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c1a8:	4c0c      	ldr	r4, [pc, #48]	; (c1dc <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c1aa:	2101      	movs	r1, #1
    c1ac:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c1b0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c1b4:	4b0a      	ldr	r3, [pc, #40]	; (c1e0 <z_clock_driver_init+0x44>)
    c1b6:	2015      	movs	r0, #21
    c1b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c1bc:	462a      	mov	r2, r5
    c1be:	f001 fb17 	bl	d7f0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c1c2:	2015      	movs	r0, #21
    c1c4:	f001 faf6 	bl	d7b4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c1c8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c1ca:	4a06      	ldr	r2, [pc, #24]	; (c1e4 <z_clock_driver_init+0x48>)
    c1cc:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c1ce:	2002      	movs	r0, #2
    c1d0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c1d2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c1d4:	f7ff fd82 	bl	bcdc <z_nrf_clock_control_lf_on>

	return 0;
}
    c1d8:	4628      	mov	r0, r5
    c1da:	bd38      	pop	{r3, r4, r5, pc}
    c1dc:	40015000 	.word	0x40015000
    c1e0:	e000e100 	.word	0xe000e100
    c1e4:	2000a878 	.word	0x2000a878

0000c1e8 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c1e8:	4a13      	ldr	r2, [pc, #76]	; (c238 <z_clock_set_timeout+0x50>)
    c1ea:	f1b0 3fff 	cmp.w	r0, #4294967295
    c1ee:	bf14      	ite	ne
    c1f0:	4603      	movne	r3, r0
    c1f2:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c1f4:	3b01      	subs	r3, #1
    c1f6:	2b00      	cmp	r3, #0
    c1f8:	dd1c      	ble.n	c234 <z_clock_set_timeout+0x4c>
    c1fa:	4293      	cmp	r3, r2
    c1fc:	bfa8      	it	ge
    c1fe:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c200:	4a0e      	ldr	r2, [pc, #56]	; (c23c <z_clock_set_timeout+0x54>)
    c202:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c206:	4a0e      	ldr	r2, [pc, #56]	; (c240 <z_clock_set_timeout+0x58>)
    c208:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c20a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c20c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c210:	bf18      	it	ne
    c212:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c214:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c218:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c21a:	480a      	ldr	r0, [pc, #40]	; (c244 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c21c:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c21e:	4a0a      	ldr	r2, [pc, #40]	; (c248 <z_clock_set_timeout+0x60>)
    c220:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c222:	2000      	movs	r0, #0
    c224:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c226:	4a04      	ldr	r2, [pc, #16]	; (c238 <z_clock_set_timeout+0x50>)
    c228:	4293      	cmp	r3, r2
    c22a:	bf94      	ite	ls
    c22c:	18c9      	addls	r1, r1, r3
    c22e:	1889      	addhi	r1, r1, r2
    c230:	f7ff bf40 	b.w	c0b4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c234:	2300      	movs	r3, #0
    c236:	e7e3      	b.n	c200 <z_clock_set_timeout+0x18>
    c238:	007fffff 	.word	0x007fffff
    c23c:	40015000 	.word	0x40015000
    c240:	2000a87c 	.word	0x2000a87c
    c244:	0000c09d 	.word	0x0000c09d
    c248:	2000a870 	.word	0x2000a870

0000c24c <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c24c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c24e:	f04f 0320 	mov.w	r3, #32
    c252:	f3ef 8511 	mrs	r5, BASEPRI
    c256:	f383 8811 	msr	BASEPRI, r3
    c25a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c25e:	4815      	ldr	r0, [pc, #84]	; (c2b4 <z_clock_elapsed+0x68>)
    c260:	f00d f8f8 	bl	19454 <z_spin_lock_valid>
    c264:	b940      	cbnz	r0, c278 <z_clock_elapsed+0x2c>
    c266:	4914      	ldr	r1, [pc, #80]	; (c2b8 <z_clock_elapsed+0x6c>)
    c268:	4814      	ldr	r0, [pc, #80]	; (c2bc <z_clock_elapsed+0x70>)
    c26a:	227c      	movs	r2, #124	; 0x7c
    c26c:	f00e f8db 	bl	1a426 <printk>
    c270:	217c      	movs	r1, #124	; 0x7c
    c272:	4811      	ldr	r0, [pc, #68]	; (c2b8 <z_clock_elapsed+0x6c>)
    c274:	f00e fb7d 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
    c278:	480e      	ldr	r0, [pc, #56]	; (c2b4 <z_clock_elapsed+0x68>)
    c27a:	f00d f907 	bl	1948c <z_spin_lock_set_owner>
    c27e:	4b10      	ldr	r3, [pc, #64]	; (c2c0 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c280:	480c      	ldr	r0, [pc, #48]	; (c2b4 <z_clock_elapsed+0x68>)
    c282:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c286:	4b0f      	ldr	r3, [pc, #60]	; (c2c4 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c288:	681b      	ldr	r3, [r3, #0]
    c28a:	1ae4      	subs	r4, r4, r3
    c28c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c290:	f00d f8ee 	bl	19470 <z_spin_unlock_valid>
    c294:	b940      	cbnz	r0, c2a8 <z_clock_elapsed+0x5c>
    c296:	4908      	ldr	r1, [pc, #32]	; (c2b8 <z_clock_elapsed+0x6c>)
    c298:	4808      	ldr	r0, [pc, #32]	; (c2bc <z_clock_elapsed+0x70>)
    c29a:	22a7      	movs	r2, #167	; 0xa7
    c29c:	f00e f8c3 	bl	1a426 <printk>
    c2a0:	21a7      	movs	r1, #167	; 0xa7
    c2a2:	4805      	ldr	r0, [pc, #20]	; (c2b8 <z_clock_elapsed+0x6c>)
    c2a4:	f00e fb65 	bl	1a972 <assert_post_action>
	__asm__ volatile(
    c2a8:	f385 8811 	msr	BASEPRI, r5
    c2ac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c2b0:	4620      	mov	r0, r4
    c2b2:	bd38      	pop	{r3, r4, r5, pc}
    c2b4:	2000a880 	.word	0x2000a880
    c2b8:	0001f9c9 	.word	0x0001f9c9
    c2bc:	0001f98f 	.word	0x0001f98f
    c2c0:	40015000 	.word	0x40015000
    c2c4:	2000a87c 	.word	0x2000a87c

0000c2c8 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c2c8:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c2ca:	1cc5      	adds	r5, r0, #3
    c2cc:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c2d0:	2d74      	cmp	r5, #116	; 0x74
    c2d2:	d908      	bls.n	c2e6 <user_data_alloc.constprop.0+0x1e>
    c2d4:	4917      	ldr	r1, [pc, #92]	; (c334 <user_data_alloc.constprop.0+0x6c>)
    c2d6:	4818      	ldr	r0, [pc, #96]	; (c338 <user_data_alloc.constprop.0+0x70>)
    c2d8:	2250      	movs	r2, #80	; 0x50
    c2da:	f00e f8a4 	bl	1a426 <printk>
    c2de:	2150      	movs	r1, #80	; 0x50
    c2e0:	4814      	ldr	r0, [pc, #80]	; (c334 <user_data_alloc.constprop.0+0x6c>)
    c2e2:	f00e fb46 	bl	1a972 <assert_post_action>
	return list->head;
    c2e6:	4c15      	ldr	r4, [pc, #84]	; (c33c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c2e8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c2ec:	b123      	cbz	r3, c2f8 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c2ee:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c2f2:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c2f4:	2b74      	cmp	r3, #116	; 0x74
    c2f6:	d919      	bls.n	c32c <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c2f8:	2178      	movs	r1, #120	; 0x78
    c2fa:	2004      	movs	r0, #4
    c2fc:	f00d ff9a 	bl	1a234 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c300:	b178      	cbz	r0, c322 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c302:	2300      	movs	r3, #0
	return list->tail;
    c304:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c308:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c30a:	b95a      	cbnz	r2, c324 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c30c:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c310:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c314:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c318:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c31a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c31c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c31e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c322:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c324:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c326:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c32a:	e7f1      	b.n	c310 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c32c:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c330:	e7f0      	b.n	c314 <user_data_alloc.constprop.0+0x4c>
    c332:	bf00      	nop
    c334:	0002005d 	.word	0x0002005d
    c338:	0001f98f 	.word	0x0001f98f
    c33c:	2000a884 	.word	0x2000a884

0000c340 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c340:	4808      	ldr	r0, [pc, #32]	; (c364 <discovery_complete.constprop.0+0x24>)
    c342:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c346:	e8d3 2fef 	ldaex	r2, [r3]
    c34a:	f042 0202 	orr.w	r2, r2, #2
    c34e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c352:	2900      	cmp	r1, #0
    c354:	d1f7      	bne.n	c346 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c356:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	b10b      	cbz	r3, c362 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    c35e:	6841      	ldr	r1, [r0, #4]
    c360:	4718      	bx	r3
	}
}
    c362:	4770      	bx	lr
    c364:	2000a884 	.word	0x2000a884

0000c368 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c368:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    c36a:	4c0b      	ldr	r4, [pc, #44]	; (c398 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c36c:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    c36e:	4620      	mov	r0, r4
    c370:	f00e fc2b 	bl	1abca <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c374:	f06f 0101 	mvn.w	r1, #1
    c378:	f504 709c 	add.w	r0, r4, #312	; 0x138
    c37c:	f00e fc3c 	bl	1abf8 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    c380:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c384:	689b      	ldr	r3, [r3, #8]
    c386:	b12b      	cbz	r3, c394 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    c388:	4629      	mov	r1, r5
    c38a:	6862      	ldr	r2, [r4, #4]
    c38c:	6820      	ldr	r0, [r4, #0]
	}
}
    c38e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    c392:	4718      	bx	r3
}
    c394:	bd70      	pop	{r4, r5, r6, pc}
    c396:	bf00      	nop
    c398:	2000a884 	.word	0x2000a884

0000c39c <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c3a0:	4c1f      	ldr	r4, [pc, #124]	; (c420 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c3a2:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c3a4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c3a8:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c3aa:	2b22      	cmp	r3, #34	; 0x22
    c3ac:	d907      	bls.n	c3be <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    c3ae:	2145      	movs	r1, #69	; 0x45
    c3b0:	481c      	ldr	r0, [pc, #112]	; (c424 <attr_store.constprop.0+0x88>)
    c3b2:	f00e f838 	bl	1a426 <printk>
		return NULL;
    c3b6:	2500      	movs	r5, #0
}
    c3b8:	4628      	mov	r0, r5
    c3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    c3be:	6803      	ldr	r3, [r0, #0]
    c3c0:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    c3c2:	2b02      	cmp	r3, #2
    c3c4:	d80d      	bhi.n	c3e2 <attr_store.constprop.0+0x46>
    c3c6:	4a18      	ldr	r2, [pc, #96]	; (c428 <attr_store.constprop.0+0x8c>)
    c3c8:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    c3cc:	eb06 0009 	add.w	r0, r6, r9
    c3d0:	f7ff ff7a 	bl	c2c8 <user_data_alloc.constprop.0>
	if (!attr_data) {
    c3d4:	4605      	mov	r5, r0
    c3d6:	b958      	cbnz	r0, c3f0 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    c3d8:	2145      	movs	r1, #69	; 0x45
    c3da:	4814      	ldr	r0, [pc, #80]	; (c42c <attr_store.constprop.0+0x90>)
    c3dc:	f00e f823 	bl	1a426 <printk>
		return NULL;
    c3e0:	e7ea      	b.n	c3b8 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    c3e2:	2145      	movs	r1, #69	; 0x45
    c3e4:	4812      	ldr	r0, [pc, #72]	; (c430 <attr_store.constprop.0+0x94>)
    c3e6:	f00e f81e 	bl	1a426 <printk>
    c3ea:	f04f 0900 	mov.w	r9, #0
    c3ee:	e7ed      	b.n	c3cc <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c3f0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c3f4:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c3f6:	1c5a      	adds	r2, r3, #1
    c3f8:	3303      	adds	r3, #3
    c3fa:	00db      	lsls	r3, r3, #3
    c3fc:	f103 0804 	add.w	r8, r3, #4
    c400:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    c404:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    c406:	441c      	add	r4, r3
    c408:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c40a:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    c40c:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    c40e:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c410:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    c412:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c414:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c416:	f00f fa4a 	bl	1b8ae <memcpy>
	return cur_attr;
    c41a:	4645      	mov	r5, r8
    c41c:	e7cc      	b.n	c3b8 <attr_store.constprop.0+0x1c>
    c41e:	bf00      	nop
    c420:	2000a884 	.word	0x2000a884
    c424:	00020088 	.word	0x00020088
    c428:	00020253 	.word	0x00020253
    c42c:	000200c5 	.word	0x000200c5
    c430:	000200a9 	.word	0x000200a9

0000c434 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    c434:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    c436:	4604      	mov	r4, r0
    c438:	b930      	cbnz	r0, c448 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    c43a:	2145      	movs	r1, #69	; 0x45
    c43c:	480c      	ldr	r0, [pc, #48]	; (c470 <uuid_store.constprop.0+0x3c>)
    c43e:	f00d fff2 	bl	1a426 <printk>
    c442:	4625      	mov	r5, r4
}
    c444:	4628      	mov	r0, r5
    c446:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    c448:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    c44a:	2b02      	cmp	r3, #2
    c44c:	d80a      	bhi.n	c464 <uuid_store.constprop.0+0x30>
    c44e:	4a09      	ldr	r2, [pc, #36]	; (c474 <uuid_store.constprop.0+0x40>)
    c450:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    c452:	4630      	mov	r0, r6
    c454:	f7ff ff38 	bl	c2c8 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    c458:	4632      	mov	r2, r6
    c45a:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    c45c:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    c45e:	f00f fa26 	bl	1b8ae <memcpy>
	return (struct bt_uuid *)buffer;
    c462:	e7ef      	b.n	c444 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    c464:	2145      	movs	r1, #69	; 0x45
    c466:	4804      	ldr	r0, [pc, #16]	; (c478 <uuid_store.constprop.0+0x44>)
    c468:	f00d ffdd 	bl	1a426 <printk>
    c46c:	2600      	movs	r6, #0
    c46e:	e7f0      	b.n	c452 <uuid_store.constprop.0+0x1e>
    c470:	000200e7 	.word	0x000200e7
    c474:	00020253 	.word	0x00020253
    c478:	000200a9 	.word	0x000200a9

0000c47c <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    c47c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    c480:	4e79      	ldr	r6, [pc, #484]	; (c668 <discovery_callback+0x1ec>)
{
    c482:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    c484:	6833      	ldr	r3, [r6, #0]
    c486:	4283      	cmp	r3, r0
    c488:	d008      	beq.n	c49c <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    c48a:	4878      	ldr	r0, [pc, #480]	; (c66c <discovery_callback+0x1f0>)
    c48c:	2145      	movs	r1, #69	; 0x45
    c48e:	f00d ffca 	bl	1a426 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    c492:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    c496:	f7ff ff67 	bl	c368 <discovery_complete_error.constprop.0>
    c49a:	e031      	b.n	c500 <discovery_callback+0x84>
    c49c:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    c49e:	2b03      	cmp	r3, #3
    c4a0:	f000 80ae 	beq.w	c600 <discovery_callback+0x184>
    c4a4:	d80d      	bhi.n	c4c2 <discovery_callback+0x46>
    c4a6:	2b02      	cmp	r3, #2
    c4a8:	d126      	bne.n	c4f8 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    c4aa:	f240 12b3 	movw	r2, #435	; 0x1b3
    c4ae:	4970      	ldr	r1, [pc, #448]	; (c670 <discovery_callback+0x1f4>)
    c4b0:	4870      	ldr	r0, [pc, #448]	; (c674 <discovery_callback+0x1f8>)
    c4b2:	f00d ffb8 	bl	1a426 <printk>
    c4b6:	f240 11b3 	movw	r1, #435	; 0x1b3
    c4ba:	486d      	ldr	r0, [pc, #436]	; (c670 <discovery_callback+0x1f4>)
    c4bc:	f00e fa59 	bl	1a972 <assert_post_action>
    c4c0:	e01e      	b.n	c500 <discovery_callback+0x84>
	switch (params->type) {
    c4c2:	2b05      	cmp	r3, #5
    c4c4:	d1f1      	bne.n	c4aa <discovery_callback+0x2e>
	if (!attr) {
    c4c6:	2900      	cmp	r1, #0
    c4c8:	f040 8081 	bne.w	c5ce <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    c4cc:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    c4d0:	2b01      	cmp	r3, #1
    c4d2:	d979      	bls.n	c5c8 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    c4d4:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    c4d6:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    c4da:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    c4dc:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    c4de:	2303      	movs	r3, #3
    c4e0:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    c4e2:	f007 fded 	bl	140c0 <bt_gatt_discover>
			if (err) {
    c4e6:	4604      	mov	r4, r0
    c4e8:	b150      	cbz	r0, c500 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    c4ea:	4602      	mov	r2, r0
    c4ec:	2145      	movs	r1, #69	; 0x45
    c4ee:	4862      	ldr	r0, [pc, #392]	; (c678 <discovery_callback+0x1fc>)
    c4f0:	f00d ff99 	bl	1a426 <printk>
				discovery_complete_error(dm, err);
    c4f4:	4620      	mov	r0, r4
    c4f6:	e7ce      	b.n	c496 <discovery_callback+0x1a>
	if (!attr) {
    c4f8:	b921      	cbnz	r1, c504 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    c4fa:	4630      	mov	r0, r6
    c4fc:	f00e fb87 	bl	1ac0e <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    c500:	2400      	movs	r4, #0
    c502:	e04a      	b.n	c59a <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    c504:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    c508:	4628      	mov	r0, r5
    c50a:	2108      	movs	r1, #8
    c50c:	f7ff ff46 	bl	c39c <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c510:	2400      	movs	r4, #0
    c512:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    c516:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c518:	4669      	mov	r1, sp
    c51a:	6828      	ldr	r0, [r5, #0]
    c51c:	f88d 4000 	strb.w	r4, [sp]
    c520:	f8ad 3002 	strh.w	r3, [sp, #2]
    c524:	f00f fa38 	bl	1b998 <bt_uuid_cmp>
    c528:	b1a8      	cbz	r0, c556 <discovery_callback+0xda>
    c52a:	f642 0301 	movw	r3, #10241	; 0x2801
    c52e:	6828      	ldr	r0, [r5, #0]
    c530:	a901      	add	r1, sp, #4
    c532:	f88d 4004 	strb.w	r4, [sp, #4]
    c536:	f8ad 3006 	strh.w	r3, [sp, #6]
    c53a:	f00f fa2d 	bl	1b998 <bt_uuid_cmp>
    c53e:	b150      	cbz	r0, c556 <discovery_callback+0xda>
    c540:	494b      	ldr	r1, [pc, #300]	; (c670 <discovery_callback+0x1f4>)
    c542:	484c      	ldr	r0, [pc, #304]	; (c674 <discovery_callback+0x1f8>)
    c544:	f240 1217 	movw	r2, #279	; 0x117
    c548:	f00d ff6d 	bl	1a426 <printk>
    c54c:	f240 1117 	movw	r1, #279	; 0x117
    c550:	4847      	ldr	r0, [pc, #284]	; (c670 <discovery_callback+0x1f4>)
    c552:	f00e fa0e 	bl	1a972 <assert_post_action>
	if (!cur_attr) {
    c556:	b937      	cbnz	r7, c566 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    c558:	4848      	ldr	r0, [pc, #288]	; (c67c <discovery_callback+0x200>)
    c55a:	2145      	movs	r1, #69	; 0x45
    c55c:	f00d ff63 	bl	1a426 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c560:	f06f 000b 	mvn.w	r0, #11
    c564:	e797      	b.n	c496 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    c566:	4638      	mov	r0, r7
    c568:	f00e fb65 	bl	1ac36 <bt_gatt_dm_attr_service_val>
    c56c:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    c56e:	2208      	movs	r2, #8
    c570:	4641      	mov	r1, r8
    c572:	f00f f99c 	bl	1b8ae <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    c576:	6828      	ldr	r0, [r5, #0]
    c578:	f7ff ff5c 	bl	c434 <uuid_store.constprop.0>
    c57c:	4604      	mov	r4, r0
    c57e:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    c580:	b930      	cbnz	r0, c590 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    c582:	2145      	movs	r1, #69	; 0x45
    c584:	483e      	ldr	r0, [pc, #248]	; (c680 <discovery_callback+0x204>)
    c586:	f00d ff4e 	bl	1a426 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c58a:	f06f 000b 	mvn.w	r0, #11
    c58e:	e058      	b.n	c642 <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    c590:	88bb      	ldrh	r3, [r7, #4]
    c592:	88aa      	ldrh	r2, [r5, #4]
    c594:	4293      	cmp	r3, r2
    c596:	d104      	bne.n	c5a2 <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    c598:	2401      	movs	r4, #1
}
    c59a:	4620      	mov	r0, r4
    c59c:	b002      	add	sp, #8
    c59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c5a2:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    c5a4:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c5a6:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c5a8:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c5aa:	4936      	ldr	r1, [pc, #216]	; (c684 <discovery_callback+0x208>)
    c5ac:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    c5ae:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    c5b0:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c5b2:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c5b4:	f007 fd84 	bl	140c0 <bt_gatt_discover>
	if (err) {
    c5b8:	4602      	mov	r2, r0
    c5ba:	2800      	cmp	r0, #0
    c5bc:	d0a0      	beq.n	c500 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    c5be:	2145      	movs	r1, #69	; 0x45
    c5c0:	4831      	ldr	r0, [pc, #196]	; (c688 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    c5c2:	f00d ff30 	bl	1a426 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c5c6:	e7e0      	b.n	c58a <discovery_callback+0x10e>
			discovery_complete(dm);
    c5c8:	f7ff feba 	bl	c340 <discovery_complete.constprop.0>
    c5cc:	e798      	b.n	c500 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    c5ce:	2400      	movs	r4, #0
    c5d0:	f642 0303 	movw	r3, #10243	; 0x2803
    c5d4:	6828      	ldr	r0, [r5, #0]
    c5d6:	a901      	add	r1, sp, #4
    c5d8:	f88d 4004 	strb.w	r4, [sp, #4]
    c5dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    c5e0:	f00f f9da 	bl	1b998 <bt_uuid_cmp>
    c5e4:	b950      	cbnz	r0, c5fc <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    c5e6:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    c5e8:	4628      	mov	r0, r5
    c5ea:	f7ff fed7 	bl	c39c <attr_store.constprop.0>
    c5ee:	4604      	mov	r4, r0
	if (!cur_attr) {
    c5f0:	2800      	cmp	r0, #0
    c5f2:	d1d1      	bne.n	c598 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    c5f4:	2145      	movs	r1, #69	; 0x45
    c5f6:	8a2a      	ldrh	r2, [r5, #16]
    c5f8:	4824      	ldr	r0, [pc, #144]	; (c68c <discovery_callback+0x210>)
    c5fa:	e7e2      	b.n	c5c2 <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    c5fc:	4621      	mov	r1, r4
    c5fe:	e7f3      	b.n	c5e8 <discovery_callback+0x16c>
	if (!attr) {
    c600:	2900      	cmp	r1, #0
    c602:	d0e1      	beq.n	c5c8 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    c604:	2300      	movs	r3, #0
    c606:	f88d 3004 	strb.w	r3, [sp, #4]
    c60a:	f642 0303 	movw	r3, #10243	; 0x2803
    c60e:	6828      	ldr	r0, [r5, #0]
    c610:	a901      	add	r1, sp, #4
    c612:	f8ad 3006 	strh.w	r3, [sp, #6]
    c616:	f00f f9bf 	bl	1b998 <bt_uuid_cmp>
    c61a:	b150      	cbz	r0, c632 <discovery_callback+0x1b6>
    c61c:	4914      	ldr	r1, [pc, #80]	; (c670 <discovery_callback+0x1f4>)
    c61e:	4815      	ldr	r0, [pc, #84]	; (c674 <discovery_callback+0x1f8>)
    c620:	f44f 72c0 	mov.w	r2, #384	; 0x180
    c624:	f00d feff 	bl	1a426 <printk>
    c628:	f44f 71c0 	mov.w	r1, #384	; 0x180
    c62c:	4810      	ldr	r0, [pc, #64]	; (c670 <discovery_callback+0x1f4>)
    c62e:	f00e f9a0 	bl	1a972 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    c632:	8a29      	ldrh	r1, [r5, #16]
    c634:	480c      	ldr	r0, [pc, #48]	; (c668 <discovery_callback+0x1ec>)
    c636:	f00e faaa 	bl	1ab8e <attr_find_by_handle>
	if (!cur_attr) {
    c63a:	4604      	mov	r4, r0
    c63c:	b920      	cbnz	r0, c648 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    c63e:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    c642:	f7ff fe91 	bl	c368 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    c646:	e7a8      	b.n	c59a <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    c648:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    c64a:	f00e fb14 	bl	1ac76 <bt_gatt_dm_attr_chrc_val>
    c64e:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    c650:	4621      	mov	r1, r4
    c652:	2208      	movs	r2, #8
    c654:	f00f f92b 	bl	1b8ae <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    c658:	6828      	ldr	r0, [r5, #0]
    c65a:	f7ff feeb 	bl	c434 <uuid_store.constprop.0>
    c65e:	4604      	mov	r4, r0
    c660:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    c662:	2800      	cmp	r0, #0
    c664:	d198      	bne.n	c598 <discovery_callback+0x11c>
    c666:	e790      	b.n	c58a <discovery_callback+0x10e>
    c668:	2000a884 	.word	0x2000a884
    c66c:	00020100 	.word	0x00020100
    c670:	0002005d 	.word	0x0002005d
    c674:	0001f98f 	.word	0x0001f98f
    c678:	000201b4 	.word	0x000201b4
    c67c:	00020127 	.word	0x00020127
    c680:	00020155 	.word	0x00020155
    c684:	2000a88c 	.word	0x2000a88c
    c688:	00020188 	.word	0x00020188
    c68c:	000201e4 	.word	0x000201e4

0000c690 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    c690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c694:	4606      	mov	r6, r0
    c696:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    c698:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    c69a:	f8df 8044 	ldr.w	r8, [pc, #68]	; c6e0 <bt_gatt_dm_char_by_uuid+0x50>
    c69e:	f8df 9044 	ldr.w	r9, [pc, #68]	; c6e4 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    c6a2:	4621      	mov	r1, r4
    c6a4:	4630      	mov	r0, r6
    c6a6:	f00e fafe 	bl	1aca6 <bt_gatt_dm_char_next>
    c6aa:	4604      	mov	r4, r0
    c6ac:	b1a0      	cbz	r0, c6d8 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    c6ae:	f00e fae2 	bl	1ac76 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    c6b2:	4605      	mov	r5, r0
    c6b4:	b950      	cbnz	r0, c6cc <bt_gatt_dm_char_by_uuid+0x3c>
    c6b6:	4641      	mov	r1, r8
    c6b8:	4648      	mov	r0, r9
    c6ba:	f240 12fb 	movw	r2, #507	; 0x1fb
    c6be:	f00d feb2 	bl	1a426 <printk>
    c6c2:	f240 11fb 	movw	r1, #507	; 0x1fb
    c6c6:	4640      	mov	r0, r8
    c6c8:	f00e f953 	bl	1a972 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    c6cc:	4638      	mov	r0, r7
    c6ce:	6829      	ldr	r1, [r5, #0]
    c6d0:	f00f f962 	bl	1b998 <bt_uuid_cmp>
    c6d4:	2800      	cmp	r0, #0
    c6d6:	d1e4      	bne.n	c6a2 <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    c6d8:	4620      	mov	r0, r4
    c6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c6de:	bf00      	nop
    c6e0:	0002005d 	.word	0x0002005d
    c6e4:	0001f98f 	.word	0x0001f98f

0000c6e8 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    c6e8:	b570      	push	{r4, r5, r6, lr}
    c6ea:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    c6ec:	4608      	mov	r0, r1
    c6ee:	b119      	cbz	r1, c6f8 <bt_gatt_dm_start+0x10>
    c6f0:	7809      	ldrb	r1, [r1, #0]
    c6f2:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    c6f6:	d139      	bne.n	c76c <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    c6f8:	2a00      	cmp	r2, #0
    c6fa:	d037      	beq.n	c76c <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6fc:	4c1e      	ldr	r4, [pc, #120]	; (c778 <bt_gatt_dm_start+0x90>)
    c6fe:	f504 769c 	add.w	r6, r4, #312	; 0x138
    c702:	e8d6 1fef 	ldaex	r1, [r6]
    c706:	f041 0c01 	orr.w	ip, r1, #1
    c70a:	e8c6 cfee 	stlex	lr, ip, [r6]
    c70e:	f1be 0f00 	cmp.w	lr, #0
    c712:	d1f6      	bne.n	c702 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    c714:	f011 0101 	ands.w	r1, r1, #1
    c718:	d12b      	bne.n	c772 <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    c71a:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    c71e:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    c722:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    c726:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    c72a:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c72e:	b108      	cbz	r0, c734 <bt_gatt_dm_start+0x4c>
    c730:	f7ff fe80 	bl	c434 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    c734:	4b11      	ldr	r3, [pc, #68]	; (c77c <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c736:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    c738:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    c73a:	2301      	movs	r3, #1
    c73c:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    c73e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c742:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c744:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    c746:	4628      	mov	r0, r5
    c748:	490d      	ldr	r1, [pc, #52]	; (c780 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c74a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    c74c:	f007 fcb8 	bl	140c0 <bt_gatt_discover>
	if (err) {
    c750:	4604      	mov	r4, r0
    c752:	b148      	cbz	r0, c768 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    c754:	4602      	mov	r2, r0
    c756:	2145      	movs	r1, #69	; 0x45
    c758:	480a      	ldr	r0, [pc, #40]	; (c784 <bt_gatt_dm_start+0x9c>)
    c75a:	f00d fe64 	bl	1a426 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c75e:	f06f 0101 	mvn.w	r1, #1
    c762:	4809      	ldr	r0, [pc, #36]	; (c788 <bt_gatt_dm_start+0xa0>)
    c764:	f00e fa48 	bl	1abf8 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    c768:	4620      	mov	r0, r4
    c76a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c76c:	f06f 0415 	mvn.w	r4, #21
    c770:	e7fa      	b.n	c768 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    c772:	f06f 0444 	mvn.w	r4, #68	; 0x44
    c776:	e7f7      	b.n	c768 <bt_gatt_dm_start+0x80>
    c778:	2000a884 	.word	0x2000a884
    c77c:	0000c47d 	.word	0x0000c47d
    c780:	2000a88c 	.word	0x2000a88c
    c784:	00020227 	.word	0x00020227
    c788:	2000a9bc 	.word	0x2000a9bc

0000c78c <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    c78c:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c78e:	4c06      	ldr	r4, [pc, #24]	; (c7a8 <scan_default_param_set+0x1c>)
{
    c790:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c792:	ad01      	add	r5, sp, #4
    c794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c798:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    c79a:	4c04      	ldr	r4, [pc, #16]	; (c7ac <scan_default_param_set+0x20>)
    c79c:	ad01      	add	r5, sp, #4
    c79e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c7a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c7a2:	6026      	str	r6, [r4, #0]
}
    c7a4:	b006      	add	sp, #24
    c7a6:	bd70      	pop	{r4, r5, r6, pc}
    c7a8:	0001e320 	.word	0x0001e320
    c7ac:	2000aa30 	.word	0x2000aa30

0000c7b0 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    c7b0:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    c7b4:	4b02      	ldr	r3, [pc, #8]	; (c7c0 <scan_default_conn_param_set+0x10>)
    c7b6:	4903      	ldr	r1, [pc, #12]	; (c7c4 <scan_default_conn_param_set+0x14>)
    c7b8:	e9c3 121d 	strd	r1, r2, [r3, #116]	; 0x74
}
    c7bc:	4770      	bx	lr
    c7be:	bf00      	nop
    c7c0:	2000a9d0 	.word	0x2000a9d0
    c7c4:	00280018 	.word	0x00280018

0000c7c8 <uuid_check>:
{
    c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    c7cc:	4c29      	ldr	r4, [pc, #164]	; (c874 <uuid_check+0xac>)
{
    c7ce:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    c7d0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
{
    c7d4:	4606      	mov	r6, r0
    c7d6:	9100      	str	r1, [sp, #0]
    c7d8:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    c7da:	2b00      	cmp	r3, #0
    c7dc:	d03c      	beq.n	c858 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    c7de:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    c7e0:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    c7e2:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    c7e4:	f894 b058 	ldrb.w	fp, [r4, #88]	; 0x58
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c7e8:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
	uint8_t data_len = data->data_len;
    c7ec:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    c7ee:	4557      	cmp	r7, sl
    c7f0:	d30e      	bcc.n	c810 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    c7f2:	f886 5044 	strb.w	r5, [r6, #68]	; 0x44
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    c7f6:	f1bb 0f00 	cmp.w	fp, #0
    c7fa:	d02b      	beq.n	c854 <uuid_check+0x8c>
    c7fc:	45aa      	cmp	sl, r5
    c7fe:	d12b      	bne.n	c858 <uuid_check+0x90>
			control->filter_match_cnt++;
    c800:	7873      	ldrb	r3, [r6, #1]
    c802:	3301      	adds	r3, #1
    c804:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    c806:	2301      	movs	r3, #1
    c808:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    c80c:	70b3      	strb	r3, [r6, #2]
}
    c80e:	e023      	b.n	c858 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c810:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    c814:	9b00      	ldr	r3, [sp, #0]
    c816:	9a03      	ldr	r2, [sp, #12]
    c818:	685b      	ldr	r3, [r3, #4]
    c81a:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    c81c:	4b16      	ldr	r3, [pc, #88]	; (c878 <uuid_check+0xb0>)
    c81e:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c822:	9b01      	ldr	r3, [sp, #4]
    c824:	4599      	cmp	r9, r3
    c826:	d305      	bcc.n	c834 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    c828:	f1bb 0f00 	cmp.w	fp, #0
    c82c:	d1e1      	bne.n	c7f2 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    c82e:	3701      	adds	r7, #1
    c830:	3418      	adds	r4, #24
    c832:	e7dc      	b.n	c7ee <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    c834:	9b02      	ldr	r3, [sp, #8]
    c836:	4642      	mov	r2, r8
    c838:	eb03 0109 	add.w	r1, r3, r9
    c83c:	a805      	add	r0, sp, #20
    c83e:	f00f f8d9 	bl	1b9f4 <bt_uuid_create>
    c842:	2800      	cmp	r0, #0
    c844:	d0f0      	beq.n	c828 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    c846:	68a1      	ldr	r1, [r4, #8]
    c848:	a805      	add	r0, sp, #20
    c84a:	f00f f8a5 	bl	1b998 <bt_uuid_cmp>
    c84e:	b130      	cbz	r0, c85e <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c850:	44c1      	add	r9, r8
    c852:	e7e6      	b.n	c822 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    c854:	2d00      	cmp	r5, #0
    c856:	d1d3      	bne.n	c800 <uuid_check+0x38>
}
    c858:	b00b      	add	sp, #44	; 0x2c
    c85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    c85e:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c860:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    c864:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c866:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    c868:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    c86a:	f1bb 0f00 	cmp.w	fp, #0
    c86e:	d1de      	bne.n	c82e <uuid_check+0x66>
    c870:	e7bf      	b.n	c7f2 <uuid_check+0x2a>
    c872:	bf00      	nop
    c874:	2000a9d0 	.word	0x2000a9d0
    c878:	00020262 	.word	0x00020262

0000c87c <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    c880:	7803      	ldrb	r3, [r0, #0]
{
    c882:	4605      	mov	r5, r0
	switch (data->type) {
    c884:	2b19      	cmp	r3, #25
{
    c886:	460c      	mov	r4, r1
	switch (data->type) {
    c888:	d812      	bhi.n	c8b0 <adv_data_found+0x34>
    c88a:	2b01      	cmp	r3, #1
    c88c:	d912      	bls.n	c8b4 <adv_data_found+0x38>
    c88e:	3b02      	subs	r3, #2
    c890:	2b17      	cmp	r3, #23
    c892:	d80f      	bhi.n	c8b4 <adv_data_found+0x38>
    c894:	e8df f003 	tbb	[pc, r3]
    c898:	80807a7a 	.word	0x80807a7a
    c89c:	11318282 	.word	0x11318282
    c8a0:	0e0e0e0e 	.word	0x0e0e0e0e
    c8a4:	0e0e0e0e 	.word	0x0e0e0e0e
    c8a8:	0e0e0e0e 	.word	0x0e0e0e0e
    c8ac:	560e0e0e 	.word	0x560e0e0e
    c8b0:	2bff      	cmp	r3, #255	; 0xff
    c8b2:	d075      	beq.n	c9a0 <adv_data_found+0x124>
	default:
		break;
	}

	return true;
}
    c8b4:	2001      	movs	r0, #1
    c8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    c8ba:	4f4e      	ldr	r7, [pc, #312]	; (c9f4 <adv_data_found+0x178>)
	if (is_name_filter_enabled()) {
    c8bc:	787b      	ldrb	r3, [r7, #1]
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d0f8      	beq.n	c8b4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c8c2:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    c8c4:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    c8c8:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c8cc:	4556      	cmp	r6, sl
    c8ce:	d2f1      	bcs.n	c8b4 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    c8d0:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    c8d4:	4642      	mov	r2, r8
    c8d6:	4648      	mov	r0, r9
    c8d8:	6869      	ldr	r1, [r5, #4]
    c8da:	f00e ffc6 	bl	1b86a <strncmp>
		if (adv_name_cmp(data->data,
    c8de:	b950      	cbnz	r0, c8f6 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    c8e0:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    c8e2:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    c8e6:	3301      	adds	r3, #1
    c8e8:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    c8ea:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    c8ec:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    c8f0:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    c8f2:	70a3      	strb	r3, [r4, #2]
    c8f4:	e7de      	b.n	c8b4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c8f6:	3601      	adds	r6, #1
    c8f8:	e7e8      	b.n	c8cc <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    c8fa:	4e3e      	ldr	r6, [pc, #248]	; (c9f4 <adv_data_found+0x178>)
	if (is_short_name_filter_enabled()) {
    c8fc:	78f3      	ldrb	r3, [r6, #3]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d0d8      	beq.n	c8b4 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    c902:	78b3      	ldrb	r3, [r6, #2]
    c904:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c908:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    c90c:	18f7      	adds	r7, r6, r3
    c90e:	42be      	cmp	r6, r7
    c910:	d0d0      	beq.n	c8b4 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    c912:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c916:	4543      	cmp	r3, r8
    c918:	d812      	bhi.n	c940 <adv_data_found+0xc4>
    c91a:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    c91e:	4642      	mov	r2, r8
    c920:	4648      	mov	r0, r9
    c922:	6869      	ldr	r1, [r5, #4]
    c924:	f00e ffa1 	bl	1b86a <strncmp>
	if ((data_len >= short_name_min_len) &&
    c928:	b950      	cbnz	r0, c940 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    c92a:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    c92c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    c930:	3301      	adds	r3, #1
    c932:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    c934:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    c936:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    c93a:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    c93e:	e7d8      	b.n	c8f2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c940:	3621      	adds	r6, #33	; 0x21
    c942:	e7e4      	b.n	c90e <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    c944:	482b      	ldr	r0, [pc, #172]	; (c9f4 <adv_data_found+0x178>)
	if (is_appearance_filter_enabled()) {
    c946:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    c94a:	2b00      	cmp	r3, #0
    c94c:	d0b2      	beq.n	c8b4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c94e:	2300      	movs	r3, #0
	const uint8_t counter =
    c950:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
	uint8_t data_len = data->data_len;
    c954:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    c956:	42b3      	cmp	r3, r6
    c958:	d2ac      	bcs.n	c8b4 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    c95a:	2f02      	cmp	r7, #2
    c95c:	d114      	bne.n	c988 <adv_data_found+0x10c>
	if (decoded_appearance == *appearance) {
    c95e:	686a      	ldr	r2, [r5, #4]
    c960:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    c964:	8812      	ldrh	r2, [r2, #0]
    c966:	f8b1 1054 	ldrh.w	r1, [r1, #84]	; 0x54
    c96a:	ba52      	rev16	r2, r2
    c96c:	b292      	uxth	r2, r2
    c96e:	4291      	cmp	r1, r2
    c970:	d10a      	bne.n	c988 <adv_data_found+0x10c>
		if (find_appearance(data->data,
    c972:	332a      	adds	r3, #42	; 0x2a
    c974:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    c978:	64e3      	str	r3, [r4, #76]	; 0x4c
			control->filter_match_cnt++;
    c97a:	7863      	ldrb	r3, [r4, #1]
    c97c:	3301      	adds	r3, #1
    c97e:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    c980:	2301      	movs	r3, #1
    c982:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			control->filter_match = true;
    c986:	e7b4      	b.n	c8f2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c988:	3301      	adds	r3, #1
    c98a:	e7e4      	b.n	c956 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    c98c:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c98e:	4629      	mov	r1, r5
    c990:	4620      	mov	r0, r4
    c992:	f7ff ff19 	bl	c7c8 <uuid_check>
		break;
    c996:	e78d      	b.n	c8b4 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    c998:	2201      	movs	r2, #1
    c99a:	e7f8      	b.n	c98e <adv_data_found+0x112>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c99c:	2202      	movs	r2, #2
    c99e:	e7f6      	b.n	c98e <adv_data_found+0x112>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    c9a0:	f8df 8050 	ldr.w	r8, [pc, #80]	; c9f4 <adv_data_found+0x178>
	if (is_manufacturer_data_filter_enabled()) {
    c9a4:	f898 3057 	ldrb.w	r3, [r8, #87]	; 0x57
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	d083      	beq.n	c8b4 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c9ac:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    c9ae:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c9b0:	f817 9f56 	ldrb.w	r9, [r7, #86]!
	for (size_t i = 0; i < counter; i++) {
    c9b4:	454e      	cmp	r6, r9
    c9b6:	f4bf af7d 	bcs.w	c8b4 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    c9ba:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    c9be:	786b      	ldrb	r3, [r5, #1]
    c9c0:	4293      	cmp	r3, r2
    c9c2:	d313      	bcc.n	c9ec <adv_data_found+0x170>
	if (memcmp(target_data, data, target_data_len) != 0) {
    c9c4:	4638      	mov	r0, r7
    c9c6:	6869      	ldr	r1, [r5, #4]
    c9c8:	f00e ff60 	bl	1b88c <memcmp>
    c9cc:	b970      	cbnz	r0, c9ec <adv_data_found+0x170>
				md_filter->manufacturer_data[i].data_len;
    c9ce:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    c9d2:	6567      	str	r7, [r4, #84]	; 0x54
				md_filter->manufacturer_data[i].data_len;
    c9d4:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    c9d6:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    c9da:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			control->filter_match_cnt++;
    c9de:	7863      	ldrb	r3, [r4, #1]
    c9e0:	3301      	adds	r3, #1
    c9e2:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    c9e4:	2301      	movs	r3, #1
    c9e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    c9ea:	e782      	b.n	c8f2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c9ec:	3601      	adds	r6, #1
    c9ee:	3721      	adds	r7, #33	; 0x21
    c9f0:	e7e0      	b.n	c9b4 <adv_data_found+0x138>
    c9f2:	bf00      	nop
    c9f4:	2000a9d0 	.word	0x2000a9d0

0000c9f8 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9fa:	4605      	mov	r5, r0
    c9fc:	460e      	mov	r6, r1
    c9fe:	4617      	mov	r7, r2
	return list->head;
    ca00:	4b08      	ldr	r3, [pc, #32]	; (ca24 <notify_filter_matched.constprop.0+0x2c>)
    ca02:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ca04:	b10c      	cbz	r4, ca0a <notify_filter_matched.constprop.0+0x12>
    ca06:	3c04      	subs	r4, #4
    ca08:	b904      	cbnz	r4, ca0c <notify_filter_matched.constprop.0+0x14>
}
    ca0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    ca0c:	6823      	ldr	r3, [r4, #0]
    ca0e:	681b      	ldr	r3, [r3, #0]
    ca10:	b11b      	cbz	r3, ca1a <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    ca12:	463a      	mov	r2, r7
    ca14:	4631      	mov	r1, r6
    ca16:	4628      	mov	r0, r5
    ca18:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    ca1a:	1d23      	adds	r3, r4, #4
    ca1c:	d0f5      	beq.n	ca0a <notify_filter_matched.constprop.0+0x12>
	return node->next;
    ca1e:	6864      	ldr	r4, [r4, #4]
    ca20:	e7f0      	b.n	ca04 <notify_filter_matched.constprop.0+0xc>
    ca22:	bf00      	nop
    ca24:	2000aa4c 	.word	0x2000aa4c

0000ca28 <bt_scan_cb_register>:
	if (!cb) {
    ca28:	b150      	cbz	r0, ca40 <bt_scan_cb_register+0x18>
	parent->next = child;
    ca2a:	2300      	movs	r3, #0
    ca2c:	6043      	str	r3, [r0, #4]
	return list->tail;
    ca2e:	4b05      	ldr	r3, [pc, #20]	; (ca44 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    ca30:	1d02      	adds	r2, r0, #4
    ca32:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    ca34:	b911      	cbnz	r1, ca3c <bt_scan_cb_register+0x14>
	list->head = node;
    ca36:	e9c3 2200 	strd	r2, r2, [r3]
}
    ca3a:	4770      	bx	lr
	parent->next = child;
    ca3c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    ca3e:	605a      	str	r2, [r3, #4]
}
    ca40:	4770      	bx	lr
    ca42:	bf00      	nop
    ca44:	2000aa4c 	.word	0x2000aa4c

0000ca48 <bt_scan_filter_add>:
{
    ca48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca4c:	4604      	mov	r4, r0
	if (!data) {
    ca4e:	460d      	mov	r5, r1
    ca50:	2900      	cmp	r1, #0
    ca52:	d06a      	beq.n	cb2a <bt_scan_filter_add+0xe2>
	return z_impl_k_mutex_lock(mutex, timeout);
    ca54:	f04f 32ff 	mov.w	r2, #4294967295
    ca58:	f04f 33ff 	mov.w	r3, #4294967295
    ca5c:	4834      	ldr	r0, [pc, #208]	; (cb30 <bt_scan_filter_add+0xe8>)
    ca5e:	f00b f859 	bl	17b14 <z_impl_k_mutex_lock>
	switch (type) {
    ca62:	2c03      	cmp	r4, #3
    ca64:	d006      	beq.n	ca74 <bt_scan_filter_add+0x2c>
    ca66:	d902      	bls.n	ca6e <bt_scan_filter_add+0x26>
    ca68:	3c04      	subs	r4, #4
    ca6a:	2c01      	cmp	r4, #1
    ca6c:	d85a      	bhi.n	cb24 <bt_scan_filter_add+0xdc>
		return -ENOMEM;
    ca6e:	f06f 060b 	mvn.w	r6, #11
    ca72:	e020      	b.n	cab6 <bt_scan_filter_add+0x6e>
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    ca74:	4f2f      	ldr	r7, [pc, #188]	; (cb34 <bt_scan_filter_add+0xec>)
    ca76:	f897 4050 	ldrb.w	r4, [r7, #80]	; 0x50
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    ca7a:	2c02      	cmp	r4, #2
    ca7c:	d8f7      	bhi.n	ca6e <bt_scan_filter_add+0x26>
    ca7e:	46b9      	mov	r9, r7
	for (size_t i = 0; i < counter; i++) {
    ca80:	f04f 0800 	mov.w	r8, #0
    ca84:	45a0      	cmp	r8, r4
    ca86:	d31c      	bcc.n	cac2 <bt_scan_filter_add+0x7a>
	switch (uuid->type) {
    ca88:	782b      	ldrb	r3, [r5, #0]
    ca8a:	2b01      	cmp	r3, #1
    ca8c:	d026      	beq.n	cadc <bt_scan_filter_add+0x94>
    ca8e:	2b02      	cmp	r3, #2
    ca90:	d031      	beq.n	caf6 <bt_scan_filter_add+0xae>
    ca92:	2b00      	cmp	r3, #0
    ca94:	d146      	bne.n	cb24 <bt_scan_filter_add+0xdc>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    ca96:	4b28      	ldr	r3, [pc, #160]	; (cb38 <bt_scan_filter_add+0xf0>)
    ca98:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ca9c:	6828      	ldr	r0, [r5, #0]
    ca9e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    caa2:	1d11      	adds	r1, r2, #4
    caa4:	6050      	str	r0, [r2, #4]
		uuid_filter[counter].uuid =
    caa6:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	return 0;
    caaa:	2600      	movs	r6, #0
	bt_scan.scan_filters.uuid.cnt++;
    caac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    cab0:	3301      	adds	r3, #1
    cab2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	return z_impl_k_mutex_unlock(mutex);
    cab6:	481e      	ldr	r0, [pc, #120]	; (cb30 <bt_scan_filter_add+0xe8>)
    cab8:	f00b f8f8 	bl	17cac <z_impl_k_mutex_unlock>
}
    cabc:	4630      	mov	r0, r6
    cabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    cac2:	f8d9 0008 	ldr.w	r0, [r9, #8]
    cac6:	4629      	mov	r1, r5
    cac8:	f00e ff66 	bl	1b998 <bt_uuid_cmp>
    cacc:	f109 0918 	add.w	r9, r9, #24
    cad0:	4606      	mov	r6, r0
    cad2:	2800      	cmp	r0, #0
    cad4:	d0ef      	beq.n	cab6 <bt_scan_filter_add+0x6e>
	for (size_t i = 0; i < counter; i++) {
    cad6:	f108 0801 	add.w	r8, r8, #1
    cada:	e7d3      	b.n	ca84 <bt_scan_filter_add+0x3c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    cadc:	4a16      	ldr	r2, [pc, #88]	; (cb38 <bt_scan_filter_add+0xf0>)
    cade:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cae2:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    cae6:	3304      	adds	r3, #4
    cae8:	e895 0003 	ldmia.w	r5, {r0, r1}
    caec:	e883 0003 	stmia.w	r3, {r0, r1}
		uuid_filter[counter].uuid =
    caf0:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
		break;
    caf4:	e7d9      	b.n	caaa <bt_scan_filter_add+0x62>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    caf6:	4a10      	ldr	r2, [pc, #64]	; (cb38 <bt_scan_filter_add+0xf0>)
    caf8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cafc:	00e6      	lsls	r6, r4, #3
    cafe:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    cb02:	3404      	adds	r4, #4
    cb04:	46a4      	mov	ip, r4
    cb06:	f105 0e10 	add.w	lr, r5, #16
    cb0a:	4623      	mov	r3, r4
    cb0c:	6828      	ldr	r0, [r5, #0]
    cb0e:	6869      	ldr	r1, [r5, #4]
    cb10:	3508      	adds	r5, #8
    cb12:	c303      	stmia	r3!, {r0, r1}
    cb14:	4575      	cmp	r5, lr
    cb16:	461c      	mov	r4, r3
    cb18:	d1f7      	bne.n	cb0a <bt_scan_filter_add+0xc2>
    cb1a:	782b      	ldrb	r3, [r5, #0]
    cb1c:	7023      	strb	r3, [r4, #0]
		uuid_filter[counter].uuid =
    cb1e:	f842 c006 	str.w	ip, [r2, r6]
		break;
    cb22:	e7c2      	b.n	caaa <bt_scan_filter_add+0x62>
		err = -EINVAL;
    cb24:	f06f 0615 	mvn.w	r6, #21
		break;
    cb28:	e7c5      	b.n	cab6 <bt_scan_filter_add+0x6e>
		return -EINVAL;
    cb2a:	f06f 0615 	mvn.w	r6, #21
    cb2e:	e7c5      	b.n	cabc <bt_scan_filter_add+0x74>
    cb30:	20008678 	.word	0x20008678
    cb34:	2000a9d0 	.word	0x2000a9d0
    cb38:	2000a9d8 	.word	0x2000a9d8

0000cb3c <bt_scan_filter_remove_all>:
{
    cb3c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    cb3e:	4c0c      	ldr	r4, [pc, #48]	; (cb70 <bt_scan_filter_remove_all+0x34>)
    cb40:	f04f 32ff 	mov.w	r2, #4294967295
    cb44:	f04f 33ff 	mov.w	r3, #4294967295
    cb48:	4620      	mov	r0, r4
    cb4a:	f00a ffe3 	bl	17b14 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    cb4e:	2200      	movs	r2, #0
    cb50:	4b08      	ldr	r3, [pc, #32]	; (cb74 <bt_scan_filter_remove_all+0x38>)
    cb52:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    cb54:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    cb56:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    cb58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	appearance_filter->cnt = 0;
    cb5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	manufacturer_data_filter->cnt = 0;
    cb60:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return z_impl_k_mutex_unlock(mutex);
    cb64:	4620      	mov	r0, r4
}
    cb66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb6a:	f00b b89f 	b.w	17cac <z_impl_k_mutex_unlock>
    cb6e:	bf00      	nop
    cb70:	20008678 	.word	0x20008678
    cb74:	2000a9d0 	.word	0x2000a9d0

0000cb78 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    cb78:	2200      	movs	r2, #0
    cb7a:	4b05      	ldr	r3, [pc, #20]	; (cb90 <bt_scan_filter_disable+0x18>)
    cb7c:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    cb7e:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    cb80:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    cb82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	bt_scan.scan_filters.appearance.enabled = false;
    cb86:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    cb8a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
    cb8e:	4770      	bx	lr
    cb90:	2000a9d0 	.word	0x2000a9d0

0000cb94 <bt_scan_filter_enable>:
{
    cb94:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    cb96:	0683      	lsls	r3, r0, #26
    cb98:	d025      	beq.n	cbe6 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    cb9a:	f7ff ffed 	bl	cb78 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    cb9e:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    cba2:	bf18      	it	ne
    cba4:	2201      	movne	r2, #1
    cba6:	4b11      	ldr	r3, [pc, #68]	; (cbec <bt_scan_filter_enable+0x58>)
    cba8:	bf18      	it	ne
    cbaa:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    cbac:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    cbae:	bf44      	itt	mi
    cbb0:	2201      	movmi	r2, #1
    cbb2:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    cbb4:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    cbb6:	bf44      	itt	mi
    cbb8:	2201      	movmi	r2, #1
    cbba:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    cbbc:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    cbbe:	bf44      	itt	mi
    cbc0:	2201      	movmi	r2, #1
    cbc2:	f883 2051 	strbmi.w	r2, [r3, #81]	; 0x51
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    cbc6:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    cbc8:	bf44      	itt	mi
    cbca:	2201      	movmi	r2, #1
    cbcc:	f883 2055 	strbmi.w	r2, [r3, #85]	; 0x55
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    cbd0:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    cbd2:	bf48      	it	mi
    cbd4:	2201      	movmi	r2, #1
	return 0;
    cbd6:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    cbda:	bf48      	it	mi
    cbdc:	f883 2057 	strbmi.w	r2, [r3, #87]	; 0x57
	filters->all_mode = match_all;
    cbe0:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
}
    cbe4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    cbe6:	f06f 0015 	mvn.w	r0, #21
    cbea:	e7fb      	b.n	cbe4 <bt_scan_filter_enable+0x50>
    cbec:	2000a9d0 	.word	0x2000a9d0

0000cbf0 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    cbf0:	b570      	push	{r4, r5, r6, lr}
    cbf2:	460e      	mov	r6, r1
    cbf4:	b086      	sub	sp, #24
    cbf6:	4605      	mov	r5, r0
	bt_scan_stop();
    cbf8:	f00e f8ca 	bl	1ad90 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    cbfc:	4b18      	ldr	r3, [pc, #96]	; (cc60 <scan_connect_with_target.part.0+0x70>)
    cbfe:	ac02      	add	r4, sp, #8
    cc00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    cc02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    cc06:	4621      	mov	r1, r4
    cc08:	ab01      	add	r3, sp, #4
    cc0a:	4630      	mov	r0, r6
    cc0c:	4a15      	ldr	r2, [pc, #84]	; (cc64 <scan_connect_with_target.part.0+0x74>)
    cc0e:	f004 fc77 	bl	11500 <bt_conn_le_create>
	if (err) {
    cc12:	4b15      	ldr	r3, [pc, #84]	; (cc68 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    cc14:	3508      	adds	r5, #8
	return list->head;
    cc16:	681c      	ldr	r4, [r3, #0]
	if (err) {
    cc18:	b168      	cbz	r0, cc36 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc1a:	b10c      	cbz	r4, cc20 <scan_connect_with_target.part.0+0x30>
    cc1c:	3c04      	subs	r4, #4
    cc1e:	b90c      	cbnz	r4, cc24 <scan_connect_with_target.part.0+0x34>
}
    cc20:	b006      	add	sp, #24
    cc22:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    cc24:	6823      	ldr	r3, [r4, #0]
    cc26:	689b      	ldr	r3, [r3, #8]
    cc28:	b10b      	cbz	r3, cc2e <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    cc2a:	4628      	mov	r0, r5
    cc2c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc2e:	1d22      	adds	r2, r4, #4
    cc30:	d0f6      	beq.n	cc20 <scan_connect_with_target.part.0+0x30>
	return node->next;
    cc32:	6864      	ldr	r4, [r4, #4]
    cc34:	e7f1      	b.n	cc1a <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc36:	b91c      	cbnz	r4, cc40 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    cc38:	9801      	ldr	r0, [sp, #4]
    cc3a:	f004 faa3 	bl	11184 <bt_conn_unref>
    cc3e:	e7ef      	b.n	cc20 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    cc40:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc42:	3c04      	subs	r4, #4
    cc44:	2c00      	cmp	r4, #0
    cc46:	d0f7      	beq.n	cc38 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    cc48:	6823      	ldr	r3, [r4, #0]
    cc4a:	68db      	ldr	r3, [r3, #12]
    cc4c:	b113      	cbz	r3, cc54 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    cc4e:	4631      	mov	r1, r6
    cc50:	4628      	mov	r0, r5
    cc52:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc54:	1d23      	adds	r3, r4, #4
    cc56:	d0ef      	beq.n	cc38 <scan_connect_with_target.part.0+0x48>
	return node->next;
    cc58:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc5a:	2c00      	cmp	r4, #0
    cc5c:	d1f1      	bne.n	cc42 <scan_connect_with_target.part.0+0x52>
    cc5e:	e7eb      	b.n	cc38 <scan_connect_with_target.part.0+0x48>
    cc60:	0001e334 	.word	0x0001e334
    cc64:	2000aa44 	.word	0x2000aa44
    cc68:	2000aa4c 	.word	0x2000aa4c

0000cc6c <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    cc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cc70:	4c54      	ldr	r4, [pc, #336]	; (cdc4 <scan_recv+0x158>)
{
    cc72:	b099      	sub	sp, #100	; 0x64
	memset(&scan_control, 0, sizeof(scan_control));
    cc74:	225c      	movs	r2, #92	; 0x5c
{
    cc76:	4606      	mov	r6, r0
    cc78:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    cc7a:	a801      	add	r0, sp, #4
    cc7c:	2100      	movs	r1, #0
    cc7e:	f00e fe41 	bl	1b904 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cc82:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
	return bt_scan.scan_filters.addr.enabled;
    cc86:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cc88:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    cc8c:	2300      	movs	r3, #0
    cc8e:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    cc92:	b112      	cbz	r2, cc9a <scan_recv+0x2e>
		control->filter_cnt++;
    cc94:	2301      	movs	r3, #1
    cc96:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    cc9a:	7863      	ldrb	r3, [r4, #1]
    cc9c:	b123      	cbz	r3, cca8 <scan_recv+0x3c>
		control->filter_cnt++;
    cc9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cca2:	3301      	adds	r3, #1
    cca4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    cca8:	78e3      	ldrb	r3, [r4, #3]
    ccaa:	b123      	cbz	r3, ccb6 <scan_recv+0x4a>
		control->filter_cnt++;
    ccac:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ccb0:	3301      	adds	r3, #1
    ccb2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    ccb6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    ccba:	b123      	cbz	r3, ccc6 <scan_recv+0x5a>
		control->filter_cnt++;
    ccbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ccc0:	3301      	adds	r3, #1
    ccc2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    ccc6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    ccca:	b123      	cbz	r3, ccd6 <scan_recv+0x6a>
		control->filter_cnt++;
    cccc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ccd0:	3301      	adds	r3, #1
    ccd2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    ccd6:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
    ccda:	b123      	cbz	r3, cce6 <scan_recv+0x7a>
		control->filter_cnt++;
    ccdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cce0:	3301      	adds	r3, #1
    cce2:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    cce6:	7a33      	ldrb	r3, [r6, #8]
    cce8:	f003 0301 	and.w	r3, r3, #1
    ccec:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    ccf0:	b1ea      	cbz	r2, cd2e <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    ccf2:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    ccf6:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    ccfa:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    ccfe:	4f32      	ldr	r7, [pc, #200]	; (cdc8 <scan_recv+0x15c>)
    cd00:	45c8      	cmp	r8, r9
    cd02:	d214      	bcs.n	cd2e <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    cd04:	4639      	mov	r1, r7
    cd06:	2207      	movs	r2, #7
    cd08:	4650      	mov	r0, sl
    cd0a:	f00e fdbf 	bl	1b88c <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    cd0e:	46bb      	mov	fp, r7
    cd10:	3707      	adds	r7, #7
    cd12:	2800      	cmp	r0, #0
    cd14:	d13a      	bne.n	cd8c <scan_recv+0x120>
			control->filter_match_cnt++;
    cd16:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    cd1a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    cd1e:	3301      	adds	r3, #1
    cd20:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    cd24:	2301      	movs	r3, #1
    cd26:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    cd2a:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    cd2e:	4628      	mov	r0, r5
    cd30:	f010 f8ef 	bl	1cf12 <net_buf_simple_headroom>
    cd34:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    cd36:	4925      	ldr	r1, [pc, #148]	; (cdcc <scan_recv+0x160>)
    cd38:	4628      	mov	r0, r5
    cd3a:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    cd3c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    cd40:	f002 fd36 	bl	f7b0 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    cd44:	4b22      	ldr	r3, [pc, #136]	; (cdd0 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    cd46:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    cd48:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    cd4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cd50:	fa10 f787 	uxtah	r7, r0, r7
    cd54:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    cd56:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    cd5a:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    cd5c:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    cd5e:	b1c3      	cbz	r3, cd92 <scan_recv+0x126>
    cd60:	f89d 2005 	ldrb.w	r2, [sp, #5]
    cd64:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cd68:	429a      	cmp	r2, r3
    cd6a:	d116      	bne.n	cd9a <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    cd6c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    cd70:	a906      	add	r1, sp, #24
    cd72:	a803      	add	r0, sp, #12
    cd74:	f7ff fe40 	bl	c9f8 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    cd78:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    cd7c:	b11b      	cbz	r3, cd86 <scan_recv+0x11a>
    cd7e:	4629      	mov	r1, r5
    cd80:	a801      	add	r0, sp, #4
    cd82:	f7ff ff35 	bl	cbf0 <scan_connect_with_target.part.0>
}
    cd86:	b019      	add	sp, #100	; 0x64
    cd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    cd8c:	f108 0801 	add.w	r8, r8, #1
    cd90:	e7b6      	b.n	cd00 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    cd92:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cd96:	2b00      	cmp	r3, #0
    cd98:	d1e8      	bne.n	cd6c <scan_recv+0x100>
	return list->head;
    cd9a:	4b0e      	ldr	r3, [pc, #56]	; (cdd4 <scan_recv+0x168>)
    cd9c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cd9e:	2c00      	cmp	r4, #0
    cda0:	d0f1      	beq.n	cd86 <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    cda2:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cda6:	3c04      	subs	r4, #4
    cda8:	2c00      	cmp	r4, #0
    cdaa:	d0ec      	beq.n	cd86 <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    cdac:	6823      	ldr	r3, [r4, #0]
    cdae:	685b      	ldr	r3, [r3, #4]
    cdb0:	b113      	cbz	r3, cdb8 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    cdb2:	4629      	mov	r1, r5
    cdb4:	a803      	add	r0, sp, #12
    cdb6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cdb8:	1d23      	adds	r3, r4, #4
    cdba:	d0e4      	beq.n	cd86 <scan_recv+0x11a>
	return node->next;
    cdbc:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cdbe:	2c00      	cmp	r4, #0
    cdc0:	d1f1      	bne.n	cda6 <scan_recv+0x13a>
    cdc2:	e7e0      	b.n	cd86 <scan_recv+0x11a>
    cdc4:	2000a9d0 	.word	0x2000a9d0
    cdc8:	2000a9d4 	.word	0x2000a9d4
    cdcc:	0000c87d 	.word	0x0000c87d
    cdd0:	2000aa44 	.word	0x2000aa44
    cdd4:	2000aa4c 	.word	0x2000aa4c

0000cdd8 <bt_scan_init>:
{
    cdd8:	b570      	push	{r4, r5, r6, lr}
    cdda:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    cddc:	4c14      	ldr	r4, [pc, #80]	; (ce30 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    cdde:	4815      	ldr	r0, [pc, #84]	; (ce34 <bt_scan_init+0x5c>)
    cde0:	f003 feb6 	bl	10b50 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    cde4:	225c      	movs	r2, #92	; 0x5c
    cde6:	2100      	movs	r1, #0
    cde8:	4620      	mov	r0, r4
    cdea:	f00e fd8b 	bl	1b904 <memset>
	if (init) {
    cdee:	b1be      	cbz	r6, ce20 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    cdf0:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    cdf2:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    cdf4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (init->scan_param) {
    cdf8:	b15d      	cbz	r5, ce12 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    cdfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cdfc:	3460      	adds	r4, #96	; 0x60
    cdfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ce00:	682b      	ldr	r3, [r5, #0]
    ce02:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    ce04:	68b2      	ldr	r2, [r6, #8]
    ce06:	b13a      	cbz	r2, ce18 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    ce08:	4b0b      	ldr	r3, [pc, #44]	; (ce38 <bt_scan_init+0x60>)
    ce0a:	6810      	ldr	r0, [r2, #0]
    ce0c:	6851      	ldr	r1, [r2, #4]
    ce0e:	c303      	stmia	r3!, {r0, r1}
}
    ce10:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    ce12:	f7ff fcbb 	bl	c78c <scan_default_param_set>
    ce16:	e7f5      	b.n	ce04 <bt_scan_init+0x2c>
}
    ce18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    ce1c:	f7ff bcc8 	b.w	c7b0 <scan_default_conn_param_set>
		scan_default_param_set();
    ce20:	f7ff fcb4 	bl	c78c <scan_default_param_set>
		scan_default_conn_param_set();
    ce24:	f7ff fcc4 	bl	c7b0 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    ce28:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
}
    ce2c:	e7f0      	b.n	ce10 <bt_scan_init+0x38>
    ce2e:	bf00      	nop
    ce30:	2000a9d0 	.word	0x2000a9d0
    ce34:	200082a4 	.word	0x200082a4
    ce38:	2000aa44 	.word	0x2000aa44

0000ce3c <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    ce3c:	b108      	cbz	r0, ce42 <bt_scan_start+0x6>
    ce3e:	2801      	cmp	r0, #1
    ce40:	d106      	bne.n	ce50 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    ce42:	4b05      	ldr	r3, [pc, #20]	; (ce58 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    ce44:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    ce46:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    ce4a:	4804      	ldr	r0, [pc, #16]	; (ce5c <bt_scan_start+0x20>)
    ce4c:	f003 be06 	b.w	10a5c <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    ce50:	f06f 0015 	mvn.w	r0, #21
    ce54:	4770      	bx	lr
    ce56:	bf00      	nop
    ce58:	2000a9d0 	.word	0x2000a9d0
    ce5c:	2000aa30 	.word	0x2000aa30

0000ce60 <notify_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t notify_process(struct bt_conn *conn,
			   struct bt_gatt_subscribe_params *params,
			   const void *data, uint16_t length)
{
    ce60:	b570      	push	{r4, r5, r6, lr}
    ce62:	460d      	mov	r5, r1
    ce64:	461c      	mov	r4, r3
	struct bt_bas_client *bas;
	uint8_t battery_level;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, notify_params);
    ce66:	1f0e      	subs	r6, r1, #4
	if (!data || !length) {
    ce68:	b102      	cbz	r2, ce6c <notify_process+0xc>
    ce6a:	b953      	cbnz	r3, ce82 <notify_process+0x22>
		LOG_INF("Notifications disabled.");
    ce6c:	2149      	movs	r1, #73	; 0x49
    ce6e:	480e      	ldr	r0, [pc, #56]	; (cea8 <notify_process+0x48>)
		return BT_GATT_ITER_STOP;
	}

	battery_level = bdata[0];
	if (battery_level > BT_BAS_VAL_MAX) {
		LOG_ERR("Unexpected notification value.");
    ce70:	f00d fad9 	bl	1a426 <printk>
		if (bas->notify_cb) {
    ce74:	6f6b      	ldr	r3, [r5, #116]	; 0x74
    ce76:	b113      	cbz	r3, ce7e <notify_process+0x1e>
			bas->notify_cb(bas, BT_BAS_VAL_INVALID);
    ce78:	21ff      	movs	r1, #255	; 0xff
    ce7a:	4630      	mov	r0, r6
    ce7c:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
    ce7e:	2000      	movs	r0, #0
	if (bas->notify_cb) {
		bas->notify_cb(bas, battery_level);
	}

	return BT_GATT_ITER_CONTINUE;
}
    ce80:	bd70      	pop	{r4, r5, r6, pc}
	if (length != 1) {
    ce82:	2b01      	cmp	r3, #1
    ce84:	d002      	beq.n	ce8c <notify_process+0x2c>
		LOG_ERR("Unexpected notification value size.");
    ce86:	2145      	movs	r1, #69	; 0x45
    ce88:	4808      	ldr	r0, [pc, #32]	; (ceac <notify_process+0x4c>)
    ce8a:	e7f1      	b.n	ce70 <notify_process+0x10>
	battery_level = bdata[0];
    ce8c:	7811      	ldrb	r1, [r2, #0]
	if (battery_level > BT_BAS_VAL_MAX) {
    ce8e:	2964      	cmp	r1, #100	; 0x64
    ce90:	d902      	bls.n	ce98 <notify_process+0x38>
		LOG_ERR("Unexpected notification value.");
    ce92:	2145      	movs	r1, #69	; 0x45
    ce94:	4806      	ldr	r0, [pc, #24]	; (ceb0 <notify_process+0x50>)
    ce96:	e7eb      	b.n	ce70 <notify_process+0x10>
	if (bas->notify_cb) {
    ce98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
	bas->battery_level = battery_level;
    ce9a:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
	if (bas->notify_cb) {
    ce9e:	b10b      	cbz	r3, cea4 <notify_process+0x44>
		bas->notify_cb(bas, battery_level);
    cea0:	4630      	mov	r0, r6
    cea2:	4798      	blx	r3
	return BT_GATT_ITER_CONTINUE;
    cea4:	4620      	mov	r0, r4
    cea6:	e7eb      	b.n	ce80 <notify_process+0x20>
    cea8:	00020265 	.word	0x00020265
    ceac:	00020282 	.word	0x00020282
    ceb0:	000202ab 	.word	0x000202ab

0000ceb4 <read_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t read_process(struct bt_conn *conn, uint8_t err,
			     struct bt_gatt_read_params *params,
			     const void *data, uint16_t length)
{
    ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t battery_level = BT_BAS_VAL_INVALID;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);

	if (!bas->read_cb) {
    ceb6:	6e17      	ldr	r7, [r2, #96]	; 0x60
{
    ceb8:	460d      	mov	r5, r1
    ceba:	4614      	mov	r4, r2
	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);
    cebc:	f1a2 061c 	sub.w	r6, r2, #28
	if (!bas->read_cb) {
    cec0:	b937      	cbnz	r7, ced0 <read_process+0x1c>
		LOG_ERR("No read callback present");
    cec2:	2145      	movs	r1, #69	; 0x45
    cec4:	4814      	ldr	r0, [pc, #80]	; (cf18 <read_process+0x64>)
    cec6:	f00d faae 	bl	1a426 <printk>
			bas->battery_level = battery_level;
			bas->read_cb(bas, battery_level, err);
		}
	}

	bas->read_cb = NULL;
    ceca:	2000      	movs	r0, #0
    cecc:	6620      	str	r0, [r4, #96]	; 0x60

	return BT_GATT_ITER_STOP;
}
    cece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else  if (err) {
    ced0:	b151      	cbz	r1, cee8 <read_process+0x34>
		LOG_ERR("Read value error: %d", err);
    ced2:	460a      	mov	r2, r1
    ced4:	4811      	ldr	r0, [pc, #68]	; (cf1c <read_process+0x68>)
    ced6:	2145      	movs	r1, #69	; 0x45
    ced8:	f00d faa5 	bl	1a426 <printk>
			bas->read_cb(bas, BT_BAS_VAL_INVALID, err);
    cedc:	462a      	mov	r2, r5
    cede:	21ff      	movs	r1, #255	; 0xff
    cee0:	4630      	mov	r0, r6
    cee2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    cee4:	4798      	blx	r3
    cee6:	e7f0      	b.n	ceca <read_process+0x16>
	} else if (!data || length != 1) {
    cee8:	b11b      	cbz	r3, cef2 <read_process+0x3e>
    ceea:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    ceee:	2a01      	cmp	r2, #1
    cef0:	d005      	beq.n	cefe <read_process+0x4a>
		bas->read_cb(bas,  battery_level, -EMSGSIZE);
    cef2:	f06f 0223 	mvn.w	r2, #35	; 0x23
    cef6:	21ff      	movs	r1, #255	; 0xff
			bas->read_cb(bas, battery_level, err);
    cef8:	4630      	mov	r0, r6
    cefa:	47b8      	blx	r7
    cefc:	e7e5      	b.n	ceca <read_process+0x16>
		battery_level = bdata[0];
    cefe:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    cf00:	2964      	cmp	r1, #100	; 0x64
    cf02:	d904      	bls.n	cf0e <read_process+0x5a>
			LOG_ERR("Unexpected read value.");
    cf04:	2145      	movs	r1, #69	; 0x45
    cf06:	4806      	ldr	r0, [pc, #24]	; (cf20 <read_process+0x6c>)
    cf08:	f00d fa8d 	bl	1a426 <printk>
    cf0c:	e7e6      	b.n	cedc <read_process+0x28>
			bas->read_cb(bas, battery_level, err);
    cf0e:	462a      	mov	r2, r5
			bas->battery_level = battery_level;
    cf10:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
			bas->read_cb(bas, battery_level, err);
    cf14:	e7f0      	b.n	cef8 <read_process+0x44>
    cf16:	bf00      	nop
    cf18:	000202cf 	.word	0x000202cf
    cf1c:	000202ed 	.word	0x000202ed
    cf20:	00020307 	.word	0x00020307

0000cf24 <bas_read_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void bas_read_value_handler(struct k_work *work)
{
    cf24:	4601      	mov	r1, r0
	struct bt_bas_client *bas;

	bas = CONTAINER_OF(work, struct bt_bas_client,
			     periodic_read.read_work);

	if (!bas->conn) {
    cf26:	f850 0c30 	ldr.w	r0, [r0, #-48]
{
    cf2a:	b508      	push	{r3, lr}
	if (!bas->conn) {
    cf2c:	b928      	cbnz	r0, cf3a <bas_read_value_handler+0x16>
	 */
	if (err) {
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
			err);
	}
}
    cf2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("No connection object.");
    cf32:	2145      	movs	r1, #69	; 0x45
    cf34:	480b      	ldr	r0, [pc, #44]	; (cf64 <bas_read_value_handler+0x40>)
    cf36:	f00d ba76 	b.w	1a426 <printk>
	bas->periodic_read.params.func = periodic_read_process;
    cf3a:	4b0b      	ldr	r3, [pc, #44]	; (cf68 <bas_read_value_handler+0x44>)
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    cf3c:	3130      	adds	r1, #48	; 0x30
	bas->periodic_read.params.func = periodic_read_process;
    cf3e:	600b      	str	r3, [r1, #0]
	bas->periodic_read.params.handle_count  = 1;
    cf40:	2301      	movs	r3, #1
    cf42:	604b      	str	r3, [r1, #4]
	bas->periodic_read.params.single.handle = bas->val_handle;
    cf44:	8c0b      	ldrh	r3, [r1, #32]
    cf46:	810b      	strh	r3, [r1, #8]
	bas->periodic_read.params.single.offset = 0;
    cf48:	2300      	movs	r3, #0
    cf4a:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    cf4c:	f007 fc62 	bl	14814 <bt_gatt_read>
	if (err) {
    cf50:	4602      	mov	r2, r0
    cf52:	b128      	cbz	r0, cf60 <bas_read_value_handler+0x3c>
}
    cf54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
    cf58:	2145      	movs	r1, #69	; 0x45
    cf5a:	4804      	ldr	r0, [pc, #16]	; (cf6c <bas_read_value_handler+0x48>)
    cf5c:	f00d ba63 	b.w	1a426 <printk>
}
    cf60:	bd08      	pop	{r3, pc}
    cf62:	bf00      	nop
    cf64:	00020323 	.word	0x00020323
    cf68:	0000cf71 	.word	0x0000cf71
    cf6c:	0002033e 	.word	0x0002033e

0000cf70 <periodic_read_process>:
{
    cf70:	b538      	push	{r3, r4, r5, lr}
    cf72:	4614      	mov	r4, r2
	if (!bas->notify_cb) {
    cf74:	6992      	ldr	r2, [r2, #24]
    cf76:	b922      	cbnz	r2, cf82 <periodic_read_process+0x12>
		LOG_ERR("No notification callback present");
    cf78:	2145      	movs	r1, #69	; 0x45
    cf7a:	4826      	ldr	r0, [pc, #152]	; (d014 <periodic_read_process+0xa4>)
		LOG_ERR("Unexpected read value size.");
    cf7c:	f00d fa53 	bl	1a426 <printk>
    cf80:	e005      	b.n	cf8e <periodic_read_process+0x1e>
	} else  if (err) {
    cf82:	b359      	cbz	r1, cfdc <periodic_read_process+0x6c>
		LOG_ERR("Read value error: %d", err);
    cf84:	460a      	mov	r2, r1
    cf86:	4824      	ldr	r0, [pc, #144]	; (d018 <periodic_read_process+0xa8>)
    cf88:	2145      	movs	r1, #69	; 0x45
    cf8a:	f00d fa4c 	bl	1a426 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf8e:	f104 0314 	add.w	r3, r4, #20
    cf92:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(&bas->periodic_read.process,
    cf96:	079b      	lsls	r3, r3, #30
    cf98:	d51e      	bpl.n	cfd8 <periodic_read_process+0x68>
		k_delayed_work_submit(&bas->periodic_read.read_work,
    cf9a:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
				      K_MSEC(atomic_get(
    cf9e:	3410      	adds	r4, #16
    cfa0:	e8d4 3faf 	lda	r3, [r4]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	dd31      	ble.n	d00c <periodic_read_process+0x9c>
    cfa8:	e8d4 0faf 	lda	r0, [r4]
    cfac:	17c1      	asrs	r1, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    cfae:	f240 33e7 	movw	r3, #999	; 0x3e7
    cfb2:	03c9      	lsls	r1, r1, #15
    cfb4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    cfb8:	03c0      	lsls	r0, r0, #15
    cfba:	18c0      	adds	r0, r0, r3
    cfbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cfc0:	f04f 0300 	mov.w	r3, #0
    cfc4:	f141 0100 	adc.w	r1, r1, #0
    cfc8:	f7fb fdb0 	bl	8b2c <__aeabi_uldivmod>
    cfcc:	4602      	mov	r2, r0
    cfce:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    cfd0:	4812      	ldr	r0, [pc, #72]	; (d01c <periodic_read_process+0xac>)
    cfd2:	4629      	mov	r1, r5
    cfd4:	f00c fab4 	bl	19540 <k_delayed_work_submit_to_queue>
}
    cfd8:	2000      	movs	r0, #0
    cfda:	bd38      	pop	{r3, r4, r5, pc}
	} else if (!data || length != 1) {
    cfdc:	b11b      	cbz	r3, cfe6 <periodic_read_process+0x76>
    cfde:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    cfe2:	2901      	cmp	r1, #1
    cfe4:	d002      	beq.n	cfec <periodic_read_process+0x7c>
		LOG_ERR("Unexpected read value size.");
    cfe6:	2145      	movs	r1, #69	; 0x45
    cfe8:	480d      	ldr	r0, [pc, #52]	; (d020 <periodic_read_process+0xb0>)
    cfea:	e7c7      	b.n	cf7c <periodic_read_process+0xc>
		battery_level = bdata[0];
    cfec:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    cfee:	2964      	cmp	r1, #100	; 0x64
    cff0:	d902      	bls.n	cff8 <periodic_read_process+0x88>
			LOG_ERR("Unexpected read value.");
    cff2:	2145      	movs	r1, #69	; 0x45
    cff4:	480b      	ldr	r0, [pc, #44]	; (d024 <periodic_read_process+0xb4>)
    cff6:	e7c1      	b.n	cf7c <periodic_read_process+0xc>
		} else if (bas->battery_level != battery_level) {
    cff8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    cffc:	428b      	cmp	r3, r1
    cffe:	d0c6      	beq.n	cf8e <periodic_read_process+0x1e>
			bas->battery_level = battery_level;
    d000:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			bas->notify_cb(bas, battery_level);
    d004:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
    d008:	4790      	blx	r2
    d00a:	e7c0      	b.n	cf8e <periodic_read_process+0x1e>
				      K_MSEC(atomic_get(
    d00c:	2000      	movs	r0, #0
    d00e:	4601      	mov	r1, r0
    d010:	e7cd      	b.n	cfae <periodic_read_process+0x3e>
    d012:	bf00      	nop
    d014:	00020378 	.word	0x00020378
    d018:	000202ed 	.word	0x000202ed
    d01c:	2000a558 	.word	0x2000a558
    d020:	0002039e 	.word	0x0002039e
    d024:	00020307 	.word	0x00020307

0000d028 <bt_bas_client_init>:
	bas->notify = false;
}


void bt_bas_client_init(struct bt_bas_client *bas)
{
    d028:	b510      	push	{r4, lr}
	memset(bas, 0, sizeof(*bas));
    d02a:	2288      	movs	r2, #136	; 0x88
    d02c:	2100      	movs	r1, #0
{
    d02e:	4604      	mov	r4, r0
	memset(bas, 0, sizeof(*bas));
    d030:	f00e fc68 	bl	1b904 <memset>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d034:	23ff      	movs	r3, #255	; 0xff
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d036:	2230      	movs	r2, #48	; 0x30
    d038:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    d03c:	2100      	movs	r1, #0
    d03e:	18a0      	adds	r0, r4, r2
    d040:	f00e fc60 	bl	1b904 <memset>
    d044:	4b01      	ldr	r3, [pc, #4]	; (d04c <bt_bas_client_init+0x24>)
    d046:	6363      	str	r3, [r4, #52]	; 0x34

	k_delayed_work_init(&bas->periodic_read.read_work,
			    bas_read_value_handler);
}
    d048:	bd10      	pop	{r4, pc}
    d04a:	bf00      	nop
    d04c:	0000cf25 	.word	0x0000cf25

0000d050 <bt_bas_handles_assign>:


int bt_bas_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_bas_client *bas)
{
    d050:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d054:	460c      	mov	r4, r1
    d056:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    d058:	f00d fe23 	bl	1aca2 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    d05c:	f00d fdeb 	bl	1ac36 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_BAS)) {
    d060:	2300      	movs	r3, #0
    d062:	6800      	ldr	r0, [r0, #0]
    d064:	f88d 300c 	strb.w	r3, [sp, #12]
    d068:	f641 030f 	movw	r3, #6159	; 0x180f
    d06c:	a903      	add	r1, sp, #12
    d06e:	f8ad 300e 	strh.w	r3, [sp, #14]
    d072:	f00e fc91 	bl	1b998 <bt_uuid_cmp>
    d076:	4605      	mov	r5, r0
    d078:	b128      	cbz	r0, d086 <bt_bas_handles_assign+0x36>
		return -ENOTSUP;
    d07a:	f06f 0522 	mvn.w	r5, #34	; 0x22
	}

	/* Finally - save connection object */
	bas->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    d07e:	4628      	mov	r0, r5
    d080:	b004      	add	sp, #16
    d082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_delayed_work_cancel(&bas->periodic_read.read_work);
    d086:	f104 0030 	add.w	r0, r4, #48	; 0x30
    d08a:	f00c fac9 	bl	19620 <k_delayed_work_cancel>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d08e:	23ff      	movs	r3, #255	; 0xff
    d090:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d094:	f642 2319 	movw	r3, #10777	; 0x2a19
    d098:	4630      	mov	r0, r6
	bas->read_cb = NULL;
    d09a:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	bas->conn = NULL;
    d09e:	6025      	str	r5, [r4, #0]
	bas->val_handle = 0;
    d0a0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	bas->notify = false;
    d0a4:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d0a8:	a901      	add	r1, sp, #4
    d0aa:	f88d 5004 	strb.w	r5, [sp, #4]
    d0ae:	f8ad 3006 	strh.w	r3, [sp, #6]
    d0b2:	f7ff faed 	bl	c690 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    d0b6:	4607      	mov	r7, r0
    d0b8:	b930      	cbnz	r0, d0c8 <bt_bas_handles_assign+0x78>
		LOG_ERR("No battery level characteristic found.");
    d0ba:	2145      	movs	r1, #69	; 0x45
    d0bc:	4824      	ldr	r0, [pc, #144]	; (d150 <bt_bas_handles_assign+0x100>)
		LOG_ERR("No battery level characteristic value found.");
    d0be:	f00d f9b2 	bl	1a426 <printk>
		return -EINVAL;
    d0c2:	f06f 0515 	mvn.w	r5, #21
    d0c6:	e7da      	b.n	d07e <bt_bas_handles_assign+0x2e>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
    d0c8:	f00d fdd5 	bl	1ac76 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
    d0cc:	4680      	mov	r8, r0
    d0ce:	b950      	cbnz	r0, d0e6 <bt_bas_handles_assign+0x96>
    d0d0:	4920      	ldr	r1, [pc, #128]	; (d154 <bt_bas_handles_assign+0x104>)
    d0d2:	4821      	ldr	r0, [pc, #132]	; (d158 <bt_bas_handles_assign+0x108>)
    d0d4:	f44f 7285 	mov.w	r2, #266	; 0x10a
    d0d8:	f00d f9a5 	bl	1a426 <printk>
    d0dc:	f44f 7185 	mov.w	r1, #266	; 0x10a
    d0e0:	481c      	ldr	r0, [pc, #112]	; (d154 <bt_bas_handles_assign+0x104>)
    d0e2:	f00d fc46 	bl	1a972 <assert_post_action>
	bas->properties = chrc_val->properties;
    d0e6:	f898 3006 	ldrb.w	r3, [r8, #6]
					    BT_UUID_BAS_BATTERY_LEVEL);
    d0ea:	f04f 0800 	mov.w	r8, #0
	bas->properties = chrc_val->properties;
    d0ee:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
					    BT_UUID_BAS_BATTERY_LEVEL);
    d0f2:	f642 2319 	movw	r3, #10777	; 0x2a19
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d0f6:	4639      	mov	r1, r7
    d0f8:	4630      	mov	r0, r6
    d0fa:	aa02      	add	r2, sp, #8
					    BT_UUID_BAS_BATTERY_LEVEL);
    d0fc:	f88d 8008 	strb.w	r8, [sp, #8]
    d100:	f8ad 300a 	strh.w	r3, [sp, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d104:	f00d fe1a 	bl	1ad3c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d108:	b910      	cbnz	r0, d110 <bt_bas_handles_assign+0xc0>
		LOG_ERR("No battery level characteristic value found.");
    d10a:	2145      	movs	r1, #69	; 0x45
    d10c:	4813      	ldr	r0, [pc, #76]	; (d15c <bt_bas_handles_assign+0x10c>)
    d10e:	e7d6      	b.n	d0be <bt_bas_handles_assign+0x6e>
	bas->val_handle = gatt_desc->handle;
    d110:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d112:	4639      	mov	r1, r7
	bas->val_handle = gatt_desc->handle;
    d114:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d118:	f642 1302 	movw	r3, #10498	; 0x2902
    d11c:	4630      	mov	r0, r6
    d11e:	aa03      	add	r2, sp, #12
    d120:	f88d 800c 	strb.w	r8, [sp, #12]
    d124:	f8ad 300e 	strh.w	r3, [sp, #14]
    d128:	f00d fe08 	bl	1ad3c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d12c:	b940      	cbnz	r0, d140 <bt_bas_handles_assign+0xf0>
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
    d12e:	2149      	movs	r1, #73	; 0x49
    d130:	480b      	ldr	r0, [pc, #44]	; (d160 <bt_bas_handles_assign+0x110>)
    d132:	f00d f978 	bl	1a426 <printk>
	bas->conn = bt_gatt_dm_conn_get(dm);
    d136:	4630      	mov	r0, r6
    d138:	f00d fdb1 	bl	1ac9e <bt_gatt_dm_conn_get>
    d13c:	6020      	str	r0, [r4, #0]
	return 0;
    d13e:	e79e      	b.n	d07e <bt_bas_handles_assign+0x2e>
		bas->notify = true;
    d140:	2301      	movs	r3, #1
    d142:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
		bas->ccc_handle = gatt_desc->handle;
    d146:	8883      	ldrh	r3, [r0, #4]
    d148:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    d14c:	e7f3      	b.n	d136 <bt_bas_handles_assign+0xe6>
    d14e:	bf00      	nop
    d150:	000203bf 	.word	0x000203bf
    d154:	000203eb 	.word	0x000203eb
    d158:	0001f98f 	.word	0x0001f98f
    d15c:	00020422 	.word	0x00020422
    d160:	00020454 	.word	0x00020454

0000d164 <bt_bas_subscribe_battery_level>:

int bt_bas_subscribe_battery_level(struct bt_bas_client *bas,
				   bt_bas_notify_cb func)
{
    d164:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bas || !func) {
    d166:	4604      	mov	r4, r0
    d168:	b340      	cbz	r0, d1bc <bt_bas_subscribe_battery_level+0x58>
    d16a:	b339      	cbz	r1, d1bc <bt_bas_subscribe_battery_level+0x58>
		return -EINVAL;
	}
	if (!bas->conn) {
    d16c:	6803      	ldr	r3, [r0, #0]
    d16e:	b32b      	cbz	r3, d1bc <bt_bas_subscribe_battery_level+0x58>
		return -EINVAL;
	}
	if (!(bas->properties & BT_GATT_CHRC_NOTIFY)) {
    d170:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    d174:	06db      	lsls	r3, r3, #27
    d176:	d524      	bpl.n	d1c2 <bt_bas_subscribe_battery_level+0x5e>
		return -ENOTSUP;
	}
	if (bas->notify_cb) {
    d178:	6f86      	ldr	r6, [r0, #120]	; 0x78
    d17a:	bb2e      	cbnz	r6, d1c8 <bt_bas_subscribe_battery_level+0x64>
		return -EALREADY;
	}

	bas->notify_cb = func;

	bas->notify_params.notify = notify_process;
    d17c:	4b14      	ldr	r3, [pc, #80]	; (d1d0 <bt_bas_subscribe_battery_level+0x6c>)
	bas->notify_cb = func;
    d17e:	6781      	str	r1, [r0, #120]	; 0x78
	bas->notify_params.notify = notify_process;
    d180:	6043      	str	r3, [r0, #4]
	bas->notify_params.value = BT_GATT_CCC_NOTIFY;
    d182:	2301      	movs	r3, #1
    d184:	8203      	strh	r3, [r0, #16]
	bas->notify_params.value_handle = bas->val_handle;
    d186:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    d18a:	60c3      	str	r3, [r0, #12]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d18c:	f100 0314 	add.w	r3, r0, #20
    d190:	e8d3 2fef 	ldaex	r2, [r3]
    d194:	f042 0201 	orr.w	r2, r2, #1
    d198:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d19c:	2900      	cmp	r1, #0
    d19e:	d1f7      	bne.n	d190 <bt_bas_subscribe_battery_level+0x2c>
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	LOG_DBG("Subscribe: val: %u, ccc: %u",
		bas->notify_params.value_handle,
		bas->notify_params.ccc_handle);
	err = bt_gatt_subscribe(bas->conn, &bas->notify_params);
    d1a0:	6820      	ldr	r0, [r4, #0]
    d1a2:	1d21      	adds	r1, r4, #4
    d1a4:	f007 fc4a 	bl	14a3c <bt_gatt_subscribe>
	if (err) {
    d1a8:	4605      	mov	r5, r0
    d1aa:	b128      	cbz	r0, d1b8 <bt_bas_subscribe_battery_level+0x54>
		LOG_ERR("Report notification subscribe error: %d.", err);
    d1ac:	4602      	mov	r2, r0
    d1ae:	2145      	movs	r1, #69	; 0x45
    d1b0:	4808      	ldr	r0, [pc, #32]	; (d1d4 <bt_bas_subscribe_battery_level+0x70>)
    d1b2:	f00d f938 	bl	1a426 <printk>
		bas->notify_cb = NULL;
    d1b6:	67a6      	str	r6, [r4, #120]	; 0x78
		return err;
	}
	LOG_DBG("Report subscribed.");
	return err;
}
    d1b8:	4628      	mov	r0, r5
    d1ba:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    d1bc:	f06f 0515 	mvn.w	r5, #21
    d1c0:	e7fa      	b.n	d1b8 <bt_bas_subscribe_battery_level+0x54>
		return -ENOTSUP;
    d1c2:	f06f 0522 	mvn.w	r5, #34	; 0x22
    d1c6:	e7f7      	b.n	d1b8 <bt_bas_subscribe_battery_level+0x54>
		return -EALREADY;
    d1c8:	f06f 0544 	mvn.w	r5, #68	; 0x44
    d1cc:	e7f4      	b.n	d1b8 <bt_bas_subscribe_battery_level+0x54>
    d1ce:	bf00      	nop
    d1d0:	0000ce61 	.word	0x0000ce61
    d1d4:	000204a9 	.word	0x000204a9

0000d1d8 <bt_bas_read_battery_level>:
	return bas->conn;
}


int bt_bas_read_battery_level(struct bt_bas_client *bas, bt_bas_read_cb func)
{
    d1d8:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!bas || !func) {
    d1da:	4604      	mov	r4, r0
    d1dc:	b1a0      	cbz	r0, d208 <bt_bas_read_battery_level+0x30>
    d1de:	b199      	cbz	r1, d208 <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (!bas->conn) {
    d1e0:	6800      	ldr	r0, [r0, #0]
    d1e2:	b188      	cbz	r0, d208 <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (bas->read_cb) {
    d1e4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    d1e6:	b995      	cbnz	r5, d20e <bt_bas_read_battery_level+0x36>
		return -EBUSY;
	}
	bas->read_cb = func;
	bas->read_params.func = read_process;
    d1e8:	4b0a      	ldr	r3, [pc, #40]	; (d214 <bt_bas_read_battery_level+0x3c>)
	bas->read_cb = func;
    d1ea:	67e1      	str	r1, [r4, #124]	; 0x7c
	bas->read_params.func = read_process;
    d1ec:	61e3      	str	r3, [r4, #28]
	bas->read_params.handle_count  = 1;
    d1ee:	2301      	movs	r3, #1
    d1f0:	6223      	str	r3, [r4, #32]
	bas->read_params.single.handle = bas->val_handle;
    d1f2:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
	bas->read_params.single.offset = 0;
    d1f6:	84e5      	strh	r5, [r4, #38]	; 0x26
	bas->read_params.single.handle = bas->val_handle;
    d1f8:	84a3      	strh	r3, [r4, #36]	; 0x24

	err = bt_gatt_read(bas->conn, &bas->read_params);
    d1fa:	f104 011c 	add.w	r1, r4, #28
    d1fe:	f007 fb09 	bl	14814 <bt_gatt_read>
	if (err) {
    d202:	b100      	cbz	r0, d206 <bt_bas_read_battery_level+0x2e>
		bas->read_cb = NULL;
    d204:	67e5      	str	r5, [r4, #124]	; 0x7c
		return err;
	}
	return 0;
}
    d206:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d208:	f06f 0015 	mvn.w	r0, #21
    d20c:	e7fb      	b.n	d206 <bt_bas_read_battery_level+0x2e>
		return -EBUSY;
    d20e:	f06f 000f 	mvn.w	r0, #15
    d212:	e7f8      	b.n	d206 <bt_bas_read_battery_level+0x2e>
    d214:	0000ceb5 	.word	0x0000ceb5

0000d218 <bt_bas_start_per_read_battery_level>:


int bt_bas_start_per_read_battery_level(struct bt_bas_client *bas,
					int32_t interval,
					bt_bas_notify_cb func)
{
    d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!bas || !func) {
    d21a:	4605      	mov	r5, r0
    d21c:	b380      	cbz	r0, d280 <bt_bas_start_per_read_battery_level+0x68>
    d21e:	b37a      	cbz	r2, d280 <bt_bas_start_per_read_battery_level+0x68>
		return -EINVAL;
	}

	if (bt_bas_notify_supported(bas)) {
    d220:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    d224:	bb78      	cbnz	r0, d286 <bt_bas_start_per_read_battery_level+0x6e>
		return -ENOTSUP;
	}

	bas->notify_cb = func;
    d226:	67aa      	str	r2, [r5, #120]	; 0x78
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d228:	f105 0370 	add.w	r3, r5, #112	; 0x70
    d22c:	e8d3 2fef 	ldaex	r2, [r3]
    d230:	e8c3 1fe4 	stlex	r4, r1, [r3]
    d234:	2c00      	cmp	r4, #0
    d236:	d1f9      	bne.n	d22c <bt_bas_start_per_read_battery_level+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d238:	f105 0374 	add.w	r3, r5, #116	; 0x74
    d23c:	e8d3 4fef 	ldaex	r4, [r3]
    d240:	f044 0202 	orr.w	r2, r4, #2
    d244:	e8c3 2fe6 	stlex	r6, r2, [r3]
    d248:	2e00      	cmp	r6, #0
    d24a:	d1f7      	bne.n	d23c <bt_bas_start_per_read_battery_level+0x24>
	atomic_set(&bas->periodic_read.interval, interval);

	if (!atomic_test_and_set_bit(&bas->periodic_read.process,
    d24c:	f014 0402 	ands.w	r4, r4, #2
    d250:	d11c      	bne.n	d28c <bt_bas_start_per_read_battery_level+0x74>
				     BAS_PERIODIC_READ_PROC_BIT)) {
		k_delayed_work_submit(&bas->periodic_read.read_work,
				      K_MSEC(interval));
    d252:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
    d256:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    d25a:	f240 30e7 	movw	r0, #999	; 0x3e7
    d25e:	4621      	mov	r1, r4
    d260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d264:	2300      	movs	r3, #0
    d266:	fbc6 0107 	smlal	r0, r1, r6, r7
    d26a:	f7fb fc5f 	bl	8b2c <__aeabi_uldivmod>
    d26e:	4602      	mov	r2, r0
    d270:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d272:	4807      	ldr	r0, [pc, #28]	; (d290 <bt_bas_start_per_read_battery_level+0x78>)
    d274:	f105 0130 	add.w	r1, r5, #48	; 0x30
    d278:	f00c f962 	bl	19540 <k_delayed_work_submit_to_queue>
	}

	return 0;
}
    d27c:	4620      	mov	r0, r4
    d27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    d280:	f06f 0415 	mvn.w	r4, #21
    d284:	e7fa      	b.n	d27c <bt_bas_start_per_read_battery_level+0x64>
		return -ENOTSUP;
    d286:	f06f 0422 	mvn.w	r4, #34	; 0x22
    d28a:	e7f7      	b.n	d27c <bt_bas_start_per_read_battery_level+0x64>
	return 0;
    d28c:	4604      	mov	r4, r0
    d28e:	e7f5      	b.n	d27c <bt_bas_start_per_read_battery_level+0x64>
    d290:	2000a558 	.word	0x2000a558

0000d294 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d294:	1e4b      	subs	r3, r1, #1
    d296:	4259      	negs	r1, r3
    d298:	4159      	adcs	r1, r3
    d29a:	4b01      	ldr	r3, [pc, #4]	; (d2a0 <lbslc_ccc_cfg_changed+0xc>)
    d29c:	7019      	strb	r1, [r3, #0]
}
    d29e:	4770      	bx	lr
    d2a0:	2000c2fa 	.word	0x2000c2fa

0000d2a4 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d2a4:	b510      	push	{r4, lr}
    d2a6:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d2a8:	4b03      	ldr	r3, [pc, #12]	; (d2b8 <write_led+0x14>)
    d2aa:	681b      	ldr	r3, [r3, #0]
    d2ac:	b10b      	cbz	r3, d2b2 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d2ae:	7810      	ldrb	r0, [r2, #0]
    d2b0:	4798      	blx	r3
	}

	return len;
}
    d2b2:	4620      	mov	r0, r4
    d2b4:	bd10      	pop	{r4, pc}
    d2b6:	bf00      	nop
    d2b8:	2000aa54 	.word	0x2000aa54

0000d2bc <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d2bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d2c0:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d2c2:	4b0d      	ldr	r3, [pc, #52]	; (d2f8 <read_button+0x3c>)
{
    d2c4:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d2c6:	6858      	ldr	r0, [r3, #4]
{
    d2c8:	460c      	mov	r4, r1
    d2ca:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d2cc:	b180      	cbz	r0, d2f0 <read_button+0x34>
	const char *value = attr->user_data;
    d2ce:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d2d2:	4780      	blx	r0
    d2d4:	4b09      	ldr	r3, [pc, #36]	; (d2fc <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d2d6:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d2d8:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d2da:	2301      	movs	r3, #1
    d2dc:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d2e0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d2e4:	4621      	mov	r1, r4
    d2e6:	9300      	str	r3, [sp, #0]
    d2e8:	4628      	mov	r0, r5
    d2ea:	463b      	mov	r3, r7
    d2ec:	f00f fc6f 	bl	1cbce <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d2f0:	b004      	add	sp, #16
    d2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d2f6:	bf00      	nop
    d2f8:	2000aa54 	.word	0x2000aa54
    d2fc:	2000c2f9 	.word	0x2000c2f9

0000d300 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d300:	b120      	cbz	r0, d30c <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d302:	4b03      	ldr	r3, [pc, #12]	; (d310 <bt_lbs_init+0x10>)
    d304:	6802      	ldr	r2, [r0, #0]
    d306:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d308:	6842      	ldr	r2, [r0, #4]
    d30a:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d30c:	2000      	movs	r0, #0
    d30e:	4770      	bx	lr
    d310:	2000aa54 	.word	0x2000aa54

0000d314 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d314:	b500      	push	{lr}
	if (!notify_enabled) {
    d316:	4b0e      	ldr	r3, [pc, #56]	; (d350 <bt_lbs_send_button_state+0x3c>)
{
    d318:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d31a:	781b      	ldrb	r3, [r3, #0]
{
    d31c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d320:	b19b      	cbz	r3, d34a <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d322:	2100      	movs	r1, #0
    d324:	2218      	movs	r2, #24
    d326:	a802      	add	r0, sp, #8
    d328:	f00e faec 	bl	1b904 <memset>

	params.attr = attr;
    d32c:	4b09      	ldr	r3, [pc, #36]	; (d354 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d32e:	2000      	movs	r0, #0
	params.attr = attr;
    d330:	9303      	str	r3, [sp, #12]
	params.data = data;
    d332:	f10d 0307 	add.w	r3, sp, #7
    d336:	9304      	str	r3, [sp, #16]
	params.len = len;
    d338:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d33a:	a902      	add	r1, sp, #8
	params.len = len;
    d33c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d340:	f006 fc72 	bl	13c28 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d344:	b009      	add	sp, #36	; 0x24
    d346:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d34a:	f06f 000c 	mvn.w	r0, #12
    d34e:	e7f9      	b.n	d344 <bt_lbs_send_button_state+0x30>
    d350:	2000c2fa 	.word	0x2000c2fa
    d354:	0001e5dc 	.word	0x0001e5dc

0000d358 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d358:	2303      	movs	r3, #3
static void _DoInit(void) {
    d35a:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d35c:	4c10      	ldr	r4, [pc, #64]	; (d3a0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d35e:	4a11      	ldr	r2, [pc, #68]	; (d3a4 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d360:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d364:	4b10      	ldr	r3, [pc, #64]	; (d3a8 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d366:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d368:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d36e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d370:	4a0e      	ldr	r2, [pc, #56]	; (d3ac <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d372:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d374:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d376:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d378:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d37a:	490d      	ldr	r1, [pc, #52]	; (d3b0 <_DoInit+0x58>)
    d37c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d37e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d380:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d382:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d384:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d386:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d388:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d38a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d38c:	f00e fa35 	bl	1b7fa <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d390:	4620      	mov	r0, r4
    d392:	4908      	ldr	r1, [pc, #32]	; (d3b4 <_DoInit+0x5c>)
    d394:	f00e fa31 	bl	1b7fa <strcpy>
  p->acID[6] = ' ';
    d398:	2320      	movs	r3, #32
    d39a:	71a3      	strb	r3, [r4, #6]
}
    d39c:	bd10      	pop	{r4, pc}
    d39e:	bf00      	nop
    d3a0:	2000aa5c 	.word	0x2000aa5c
    d3a4:	0002053e 	.word	0x0002053e
    d3a8:	2000c30b 	.word	0x2000c30b
    d3ac:	2000c2fb 	.word	0x2000c2fb
    d3b0:	00020547 	.word	0x00020547
    d3b4:	0002054b 	.word	0x0002054b

0000d3b8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d3b8:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d3ba:	2418      	movs	r4, #24
    d3bc:	fb00 4504 	mla	r5, r0, r4, r4
    d3c0:	4b14      	ldr	r3, [pc, #80]	; (d414 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d3c2:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d3c4:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d3c6:	fb04 3300 	mla	r3, r4, r0, r3
    d3ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d3cc:	2c01      	cmp	r4, #1
    d3ce:	d00e      	beq.n	d3ee <SEGGER_RTT_WriteNoLock+0x36>
    d3d0:	2c02      	cmp	r4, #2
    d3d2:	d018      	beq.n	d406 <SEGGER_RTT_WriteNoLock+0x4e>
    d3d4:	b9e4      	cbnz	r4, d410 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d3d6:	4628      	mov	r0, r5
    d3d8:	f00d fcde 	bl	1ad98 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d3dc:	4286      	cmp	r6, r0
    d3de:	d804      	bhi.n	d3ea <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d3e0:	4632      	mov	r2, r6
    d3e2:	4628      	mov	r0, r5
    d3e4:	f00d fce1 	bl	1adaa <_WriteNoCheck>
    d3e8:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d3ea:	4620      	mov	r0, r4
    d3ec:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d3ee:	4628      	mov	r0, r5
    d3f0:	f00d fcd2 	bl	1ad98 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d3f4:	4286      	cmp	r6, r0
    d3f6:	4634      	mov	r4, r6
    d3f8:	bf28      	it	cs
    d3fa:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d3fc:	4628      	mov	r0, r5
    d3fe:	4622      	mov	r2, r4
    d400:	f00d fcd3 	bl	1adaa <_WriteNoCheck>
    break;
    d404:	e7f1      	b.n	d3ea <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d406:	4628      	mov	r0, r5
}
    d408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d40c:	f00d bce9 	b.w	1ade2 <_WriteBlocking>
  switch (pRing->Flags) {
    d410:	2400      	movs	r4, #0
  return Status;
    d412:	e7ea      	b.n	d3ea <SEGGER_RTT_WriteNoLock+0x32>
    d414:	2000aa5c 	.word	0x2000aa5c

0000d418 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d418:	4904      	ldr	r1, [pc, #16]	; (d42c <sub_bytes+0x14>)
    d41a:	1e43      	subs	r3, r0, #1
    d41c:	300f      	adds	r0, #15
    d41e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d422:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d424:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d426:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d428:	d1f9      	bne.n	d41e <sub_bytes+0x6>
	}
}
    d42a:	4770      	bx	lr
    d42c:	00020552 	.word	0x00020552

0000d430 <tc_aes128_set_encrypt_key>:
{
    d430:	b5f0      	push	{r4, r5, r6, r7, lr}
    d432:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d434:	4e26      	ldr	r6, [pc, #152]	; (d4d0 <tc_aes128_set_encrypt_key+0xa0>)
{
    d436:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d438:	ad01      	add	r5, sp, #4
{
    d43a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d43c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d43e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d444:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d448:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d44c:	4638      	mov	r0, r7
    d44e:	2f00      	cmp	r7, #0
    d450:	d039      	beq.n	d4c6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d452:	2c00      	cmp	r4, #0
    d454:	d039      	beq.n	d4ca <tc_aes128_set_encrypt_key+0x9a>
    d456:	1f38      	subs	r0, r7, #4
    d458:	4602      	mov	r2, r0
    d45a:	4621      	mov	r1, r4
    d45c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d45e:	784b      	ldrb	r3, [r1, #1]
    d460:	780d      	ldrb	r5, [r1, #0]
    d462:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d464:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d468:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d46a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d46c:	432b      	orrs	r3, r5
    d46e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d472:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d474:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d478:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d47c:	d1ef      	bne.n	d45e <tc_aes128_set_encrypt_key+0x2e>
    d47e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d480:	4c14      	ldr	r4, [pc, #80]	; (d4d4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d482:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d484:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d486:	d116      	bne.n	d4b6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d488:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d48c:	5ca5      	ldrb	r5, [r4, r2]
    d48e:	0e1a      	lsrs	r2, r3, #24
    d490:	5ca2      	ldrb	r2, [r4, r2]
    d492:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d496:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d49a:	5d65      	ldrb	r5, [r4, r5]
    d49c:	b2db      	uxtb	r3, r3
    d49e:	5ce3      	ldrb	r3, [r4, r3]
    d4a0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d4a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d4a8:	ad0c      	add	r5, sp, #48	; 0x30
    d4aa:	f021 0303 	bic.w	r3, r1, #3
    d4ae:	442b      	add	r3, r5
    d4b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d4b4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d4b6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d4ba:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d4bc:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d4be:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d4c0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d4c2:	d1de      	bne.n	d482 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d4c4:	2001      	movs	r0, #1
}
    d4c6:	b00d      	add	sp, #52	; 0x34
    d4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d4ca:	4620      	mov	r0, r4
    d4cc:	e7fb      	b.n	d4c6 <tc_aes128_set_encrypt_key+0x96>
    d4ce:	bf00      	nop
    d4d0:	0001e344 	.word	0x0001e344
    d4d4:	00020552 	.word	0x00020552

0000d4d8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d4dc:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d4de:	6803      	ldr	r3, [r0, #0]
{
    d4e0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d4e2:	9302      	str	r3, [sp, #8]
    d4e4:	6843      	ldr	r3, [r0, #4]
    d4e6:	f8df a1b8 	ldr.w	sl, [pc, #440]	; d6a0 <compress+0x1c8>
    d4ea:	9303      	str	r3, [sp, #12]
    d4ec:	6883      	ldr	r3, [r0, #8]
    d4ee:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d4f2:	9304      	str	r3, [sp, #16]
    d4f4:	68c3      	ldr	r3, [r0, #12]
    d4f6:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d4f8:	6903      	ldr	r3, [r0, #16]
    d4fa:	9306      	str	r3, [sp, #24]
    d4fc:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d4fe:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d502:	9307      	str	r3, [sp, #28]
    d504:	6983      	ldr	r3, [r0, #24]
    d506:	9308      	str	r3, [sp, #32]
    d508:	69c3      	ldr	r3, [r0, #28]
    d50a:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d50e:	4698      	mov	r8, r3
    d510:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d512:	9b04      	ldr	r3, [sp, #16]
    d514:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d516:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d518:	ab0c      	add	r3, sp, #48	; 0x30
    d51a:	ba2d      	rev	r5, r5
    d51c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d51e:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d522:	3704      	adds	r7, #4
    d524:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d528:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d52c:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d530:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d534:	444d      	add	r5, r9
    d536:	ea2b 0302 	bic.w	r3, fp, r2
    d53a:	ea02 090c 	and.w	r9, r2, ip
    d53e:	ea83 0309 	eor.w	r3, r3, r9
    d542:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d544:	9d00      	ldr	r5, [sp, #0]
    d546:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d54a:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d54c:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d54e:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d552:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d556:	4025      	ands	r5, r4
    d558:	ea06 0909 	and.w	r9, r6, r9
    d55c:	ea85 0509 	eor.w	r5, r5, r9
    d560:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d564:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d566:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d568:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d56c:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d56e:	f8dd e000 	ldr.w	lr, [sp]
    d572:	46d8      	mov	r8, fp
    d574:	f040 8085 	bne.w	d682 <compress+0x1aa>
    d578:	f04f 0a10 	mov.w	sl, #16
    d57c:	4949      	ldr	r1, [pc, #292]	; (d6a4 <compress+0x1cc>)
    d57e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d580:	4651      	mov	r1, sl
    d582:	f10a 0a01 	add.w	sl, sl, #1
    d586:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d58a:	f00a 070f 	and.w	r7, sl, #15
    d58e:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d592:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d596:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d59a:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d59e:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d5a0:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d5a4:	f101 070e 	add.w	r7, r1, #14
    d5a8:	f007 070f 	and.w	r7, r7, #15
    d5ac:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d5b0:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5b4:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d5b6:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d5ba:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    d5be:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5c2:	f001 010f 	and.w	r1, r1, #15
    d5c6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d5ca:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    d5ce:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    d5d2:	f851 1c40 	ldr.w	r1, [r1, #-64]
    d5d6:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    d5da:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5de:	4471      	add	r1, lr
		s0 = sigma0(s0);
    d5e0:	f8dd e004 	ldr.w	lr, [sp, #4]
    d5e4:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    d5e8:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5ec:	4441      	add	r1, r8
		s1 = sigma1(s1);
    d5ee:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d5f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5f4:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d5f6:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5fa:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    d5fe:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d602:	ea05 0802 	and.w	r8, r5, r2
    d606:	970a      	str	r7, [sp, #40]	; 0x28
    d608:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    d60c:	ea2c 0705 	bic.w	r7, ip, r5
    d610:	ea87 0708 	eor.w	r7, r7, r8
    d614:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    d618:	444f      	add	r7, r9
    d61a:	4477      	add	r7, lr
    d61c:	4439      	add	r1, r7
    d61e:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    d620:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d624:	ea84 0b06 	eor.w	fp, r4, r6
    d628:	ea0b 0b03 	and.w	fp, fp, r3
    d62c:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    d630:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    d634:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    d638:	ea8b 0e0e 	eor.w	lr, fp, lr
    d63c:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    d640:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    d642:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    d644:	46e3      	mov	fp, ip
    d646:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    d648:	9600      	str	r6, [sp, #0]
    d64a:	d121      	bne.n	d690 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    d64c:	9f02      	ldr	r7, [sp, #8]
    d64e:	440f      	add	r7, r1
    d650:	9903      	ldr	r1, [sp, #12]
    d652:	6007      	str	r7, [r0, #0]
    d654:	4419      	add	r1, r3
    d656:	9b04      	ldr	r3, [sp, #16]
    d658:	6041      	str	r1, [r0, #4]
    d65a:	4423      	add	r3, r4
    d65c:	6083      	str	r3, [r0, #8]
    d65e:	9b05      	ldr	r3, [sp, #20]
    d660:	4433      	add	r3, r6
    d662:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    d664:	9b06      	ldr	r3, [sp, #24]
    d666:	4443      	add	r3, r8
    d668:	6103      	str	r3, [r0, #16]
    d66a:	9b07      	ldr	r3, [sp, #28]
    d66c:	442b      	add	r3, r5
    d66e:	6143      	str	r3, [r0, #20]
    d670:	9b08      	ldr	r3, [sp, #32]
    d672:	4413      	add	r3, r2
    d674:	6183      	str	r3, [r0, #24]
    d676:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d678:	4463      	add	r3, ip
    d67a:	61c3      	str	r3, [r0, #28]
}
    d67c:	b01d      	add	sp, #116	; 0x74
    d67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d682:	46e3      	mov	fp, ip
    d684:	9600      	str	r6, [sp, #0]
    d686:	4694      	mov	ip, r2
    d688:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    d68a:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    d68c:	461c      	mov	r4, r3
    d68e:	e742      	b.n	d516 <compress+0x3e>
    d690:	4694      	mov	ip, r2
    d692:	4626      	mov	r6, r4
    d694:	462a      	mov	r2, r5
    d696:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    d698:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    d69a:	460b      	mov	r3, r1
    d69c:	e770      	b.n	d580 <compress+0xa8>
    d69e:	bf00      	nop
    d6a0:	0001e62c 	.word	0x0001e62c
    d6a4:	0001e66c 	.word	0x0001e66c

0000d6a8 <tc_sha256_init>:
{
    d6a8:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    d6aa:	4604      	mov	r4, r0
    d6ac:	b1c8      	cbz	r0, d6e2 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    d6ae:	2270      	movs	r2, #112	; 0x70
    d6b0:	2100      	movs	r1, #0
    d6b2:	f00d fbd3 	bl	1ae5c <_set>
	s->iv[1] = 0xbb67ae85;
    d6b6:	4b0b      	ldr	r3, [pc, #44]	; (d6e4 <tc_sha256_init+0x3c>)
    d6b8:	4a0b      	ldr	r2, [pc, #44]	; (d6e8 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    d6ba:	490c      	ldr	r1, [pc, #48]	; (d6ec <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    d6bc:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    d6c0:	4b0b      	ldr	r3, [pc, #44]	; (d6f0 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    d6c2:	480c      	ldr	r0, [pc, #48]	; (d6f4 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    d6c4:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    d6c8:	4b0b      	ldr	r3, [pc, #44]	; (d6f8 <tc_sha256_init+0x50>)
    d6ca:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    d6ce:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    d6d0:	4b0a      	ldr	r3, [pc, #40]	; (d6fc <tc_sha256_init+0x54>)
    d6d2:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    d6d4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    d6d8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    d6dc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    d6e0:	61e3      	str	r3, [r4, #28]
}
    d6e2:	bd10      	pop	{r4, pc}
    d6e4:	bb67ae85 	.word	0xbb67ae85
    d6e8:	6a09e667 	.word	0x6a09e667
    d6ec:	3c6ef372 	.word	0x3c6ef372
    d6f0:	a54ff53a 	.word	0xa54ff53a
    d6f4:	510e527f 	.word	0x510e527f
    d6f8:	9b05688c 	.word	0x9b05688c
    d6fc:	1f83d9ab 	.word	0x1f83d9ab

0000d700 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d700:	4a0a      	ldr	r2, [pc, #40]	; (d72c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d702:	490b      	ldr	r1, [pc, #44]	; (d730 <arch_swap+0x30>)
	_current->arch.basepri = key;
    d704:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d706:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d708:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    d70c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d710:	4908      	ldr	r1, [pc, #32]	; (d734 <arch_swap+0x34>)
    d712:	684b      	ldr	r3, [r1, #4]
    d714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d718:	604b      	str	r3, [r1, #4]
    d71a:	2300      	movs	r3, #0
    d71c:	f383 8811 	msr	BASEPRI, r3
    d720:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d724:	6893      	ldr	r3, [r2, #8]
}
    d726:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    d72a:	4770      	bx	lr
    d72c:	2000afc4 	.word	0x2000afc4
    d730:	0001ec98 	.word	0x0001ec98
    d734:	e000ed00 	.word	0xe000ed00

0000d738 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d738:	4914      	ldr	r1, [pc, #80]	; (d78c <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d73a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d73c:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    d740:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d742:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d746:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d74a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d74c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d750:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d754:	4f0e      	ldr	r7, [pc, #56]	; (d790 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d756:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d75a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    d75c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d75e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d760:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    d764:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d766:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d76a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d76e:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    d772:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d776:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d77a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d77e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d780:	f00d ffaf 	bl	1b6e2 <configure_builtin_stack_guard>
    pop {r2, lr}
    d784:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d788:	4770      	bx	lr
    d78a:	0000      	.short	0x0000
    ldr r1, =_kernel
    d78c:	2000afc4 	.word	0x2000afc4
    ldr v4, =_SCS_ICSR
    d790:	e000ed04 	.word	0xe000ed04

0000d794 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d794:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d798:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d79a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d79e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d7a2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d7a4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d7a8:	2902      	cmp	r1, #2
    beq _oops
    d7aa:	d0ff      	beq.n	d7ac <_oops>

0000d7ac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d7ac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d7ae:	f00d ff9c 	bl	1b6ea <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d7b2:	bd01      	pop	{r0, pc}

0000d7b4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d7b4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	db08      	blt.n	d7cc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d7ba:	2201      	movs	r2, #1
    d7bc:	f000 001f 	and.w	r0, r0, #31
    d7c0:	fa02 f000 	lsl.w	r0, r2, r0
    d7c4:	4a02      	ldr	r2, [pc, #8]	; (d7d0 <arch_irq_enable+0x1c>)
    d7c6:	095b      	lsrs	r3, r3, #5
    d7c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d7cc:	4770      	bx	lr
    d7ce:	bf00      	nop
    d7d0:	e000e100 	.word	0xe000e100

0000d7d4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d7d4:	4b05      	ldr	r3, [pc, #20]	; (d7ec <arch_irq_is_enabled+0x18>)
    d7d6:	0942      	lsrs	r2, r0, #5
    d7d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d7dc:	2301      	movs	r3, #1
    d7de:	f000 001f 	and.w	r0, r0, #31
    d7e2:	fa03 f000 	lsl.w	r0, r3, r0
}
    d7e6:	4010      	ands	r0, r2
    d7e8:	4770      	bx	lr
    d7ea:	bf00      	nop
    d7ec:	e000e100 	.word	0xe000e100

0000d7f0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    d7f0:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    d7f2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d7f4:	2c07      	cmp	r4, #7
{
    d7f6:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d7f8:	d908      	bls.n	d80c <z_arm_irq_priority_set+0x1c>
    d7fa:	490d      	ldr	r1, [pc, #52]	; (d830 <z_arm_irq_priority_set+0x40>)
    d7fc:	480d      	ldr	r0, [pc, #52]	; (d834 <z_arm_irq_priority_set+0x44>)
    d7fe:	225c      	movs	r2, #92	; 0x5c
    d800:	f00c fe11 	bl	1a426 <printk>
    d804:	215c      	movs	r1, #92	; 0x5c
    d806:	480a      	ldr	r0, [pc, #40]	; (d830 <z_arm_irq_priority_set+0x40>)
    d808:	f00d f8b3 	bl	1a972 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d80c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d80e:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d810:	bfac      	ite	ge
    d812:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d816:	4b08      	ldrlt	r3, [pc, #32]	; (d838 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d818:	ea4f 1444 	mov.w	r4, r4, lsl #5
    d81c:	b2e4      	uxtb	r4, r4
    d81e:	bfab      	itete	ge
    d820:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d824:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d828:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d82c:	555c      	strblt	r4, [r3, r5]
}
    d82e:	bd38      	pop	{r3, r4, r5, pc}
    d830:	00020652 	.word	0x00020652
    d834:	0001f98f 	.word	0x0001f98f
    d838:	e000ed14 	.word	0xe000ed14

0000d83c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    d83c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    d840:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    d842:	490b      	ldr	r1, [pc, #44]	; (d870 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    d844:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    d848:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    d84a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    d84e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    d852:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    d854:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    d858:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    d85c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d860:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    d864:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    d866:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    d868:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    d86a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d86e:	4770      	bx	lr
    d870:	0001a503 	.word	0x0001a503

0000d874 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    d874:	4604      	mov	r4, r0
    d876:	b508      	push	{r3, lr}
    d878:	460e      	mov	r6, r1
    d87a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    d87c:	f000 faf6 	bl	de6c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    d880:	4b08      	ldr	r3, [pc, #32]	; (d8a4 <arch_switch_to_main_thread+0x30>)
    d882:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d884:	6f63      	ldr	r3, [r4, #116]	; 0x74
    d886:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d88a:	4628      	mov	r0, r5
    d88c:	f386 8809 	msr	PSP, r6
    d890:	2100      	movs	r1, #0
    d892:	b663      	cpsie	if
    d894:	f381 8811 	msr	BASEPRI, r1
    d898:	f3bf 8f6f 	isb	sy
    d89c:	2200      	movs	r2, #0
    d89e:	2300      	movs	r3, #0
    d8a0:	f00c fe2f 	bl	1a502 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d8a4:	2000afc4 	.word	0x2000afc4

0000d8a8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d8a8:	4901      	ldr	r1, [pc, #4]	; (d8b0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d8aa:	2210      	movs	r2, #16
	str	r2, [r1]
    d8ac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d8ae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d8b0:	e000ed10 	.word	0xe000ed10

0000d8b4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d8b4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d8b6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d8b8:	f380 8811 	msr	BASEPRI, r0
	isb
    d8bc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d8c0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d8c4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d8c6:	b662      	cpsie	i
	isb
    d8c8:	f3bf 8f6f 	isb	sy

	bx	lr
    d8cc:	4770      	bx	lr
    d8ce:	bf00      	nop

0000d8d0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    d8d0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    d8d2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    d8d4:	f381 8811 	msr	BASEPRI, r1

	wfe
    d8d8:	bf20      	wfe

	msr	BASEPRI, r0
    d8da:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    d8de:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    d8e0:	4770      	bx	lr
    d8e2:	bf00      	nop

0000d8e4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d8e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d8e6:	4605      	mov	r5, r0

	if (esf != NULL) {
    d8e8:	460c      	mov	r4, r1
    d8ea:	b1c9      	cbz	r1, d920 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d8ec:	688b      	ldr	r3, [r1, #8]
    d8ee:	4810      	ldr	r0, [pc, #64]	; (d930 <z_arm_fatal_error+0x4c>)
    d8f0:	9300      	str	r3, [sp, #0]
    d8f2:	e9d1 2300 	ldrd	r2, r3, [r1]
    d8f6:	2145      	movs	r1, #69	; 0x45
    d8f8:	f00c fd95 	bl	1a426 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d8fc:	6963      	ldr	r3, [r4, #20]
    d8fe:	2145      	movs	r1, #69	; 0x45
    d900:	9300      	str	r3, [sp, #0]
    d902:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    d906:	480b      	ldr	r0, [pc, #44]	; (d934 <z_arm_fatal_error+0x50>)
    d908:	f00c fd8d 	bl	1a426 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d90c:	2145      	movs	r1, #69	; 0x45
    d90e:	69e2      	ldr	r2, [r4, #28]
    d910:	4809      	ldr	r0, [pc, #36]	; (d938 <z_arm_fatal_error+0x54>)
    d912:	f00c fd88 	bl	1a426 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d916:	2145      	movs	r1, #69	; 0x45
    d918:	69a2      	ldr	r2, [r4, #24]
    d91a:	4808      	ldr	r0, [pc, #32]	; (d93c <z_arm_fatal_error+0x58>)
    d91c:	f00c fd83 	bl	1a426 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d920:	4621      	mov	r1, r4
    d922:	4628      	mov	r0, r5
}
    d924:	b003      	add	sp, #12
    d926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    d92a:	f009 bdfd 	b.w	17528 <z_fatal_error>
    d92e:	bf00      	nop
    d930:	00020688 	.word	0x00020688
    d934:	000206bc 	.word	0x000206bc
    d938:	000206f0 	.word	0x000206f0
    d93c:	00020704 	.word	0x00020704

0000d940 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d940:	bf30      	wfi
    b z_SysNmiOnReset
    d942:	f7ff bffd 	b.w	d940 <z_SysNmiOnReset>
    d946:	bf00      	nop

0000d948 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d948:	4a0e      	ldr	r2, [pc, #56]	; (d984 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d94a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d94c:	4b0e      	ldr	r3, [pc, #56]	; (d988 <z_arm_prep_c+0x40>)
    d94e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d952:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d954:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d958:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d95c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d960:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d968:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d96c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d970:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d974:	f009 fe64 	bl	17640 <z_bss_zero>
	z_data_copy();
    d978:	f00b fe9a 	bl	196b0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d97c:	f000 fa48 	bl	de10 <z_arm_interrupt_init>
	z_cstart();
    d980:	f009 fe82 	bl	17688 <z_cstart>
    d984:	00008000 	.word	0x00008000
    d988:	e000ed00 	.word	0xe000ed00

0000d98c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d98c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    d98e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d990:	4a0b      	ldr	r2, [pc, #44]	; (d9c0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d992:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    d994:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d996:	bf1e      	ittt	ne
	movne	r1, #0
    d998:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d99a:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    d99c:	f010 f8ce 	blne	1db3c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d9a0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d9a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d9a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d9aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    d9ae:	4905      	ldr	r1, [pc, #20]	; (d9c4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d9b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d9b2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    d9b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d9b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d9ba:	4903      	ldr	r1, [pc, #12]	; (d9c8 <_isr_wrapper+0x3c>)
	bx r1
    d9bc:	4708      	bx	r1
    d9be:	0000      	.short	0x0000
	ldr r2, =_kernel
    d9c0:	2000afc4 	.word	0x2000afc4
	ldr r1, =_sw_isr_table
    d9c4:	0001df3c 	.word	0x0001df3c
	ldr r1, =z_arm_int_exit
    d9c8:	0000ddd1 	.word	0x0000ddd1

0000d9cc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    d9cc:	f00c fff0 	bl	1a9b0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d9d0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d9d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d9d6:	4808      	ldr	r0, [pc, #32]	; (d9f8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d9d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d9dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d9de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d9e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d9e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d9e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d9ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d9ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d9f2:	f7ff ffa9 	bl	d948 <z_arm_prep_c>
    d9f6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    d9f8:	2000ee48 	.word	0x2000ee48

0000d9fc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d9fc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    da00:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    da04:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    da06:	4672      	mov	r2, lr
	bl z_arm_fault
    da08:	f000 f91a 	bl	dc40 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    da0c:	bd01      	pop	{r0, pc}
    da0e:	bf00      	nop

0000da10 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    da10:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    da12:	4c21      	ldr	r4, [pc, #132]	; (da98 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    da14:	2145      	movs	r1, #69	; 0x45
    da16:	4821      	ldr	r0, [pc, #132]	; (da9c <usage_fault.constprop.0+0x8c>)
    da18:	f00c fd05 	bl	1a426 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    da1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da1e:	019d      	lsls	r5, r3, #6
    da20:	d503      	bpl.n	da2a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    da22:	2145      	movs	r1, #69	; 0x45
    da24:	481e      	ldr	r0, [pc, #120]	; (daa0 <usage_fault.constprop.0+0x90>)
    da26:	f00c fcfe 	bl	1a426 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    da2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da2c:	01dc      	lsls	r4, r3, #7
    da2e:	d503      	bpl.n	da38 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    da30:	2145      	movs	r1, #69	; 0x45
    da32:	481c      	ldr	r0, [pc, #112]	; (daa4 <usage_fault.constprop.0+0x94>)
    da34:	f00c fcf7 	bl	1a426 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    da38:	4d17      	ldr	r5, [pc, #92]	; (da98 <usage_fault.constprop.0+0x88>)
    da3a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    da3c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    da40:	d004      	beq.n	da4c <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    da42:	2145      	movs	r1, #69	; 0x45
    da44:	4818      	ldr	r0, [pc, #96]	; (daa8 <usage_fault.constprop.0+0x98>)
    da46:	f00c fcee 	bl	1a426 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    da4a:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    da4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    da4e:	0318      	lsls	r0, r3, #12
    da50:	d503      	bpl.n	da5a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    da52:	2145      	movs	r1, #69	; 0x45
    da54:	4815      	ldr	r0, [pc, #84]	; (daac <usage_fault.constprop.0+0x9c>)
    da56:	f00c fce6 	bl	1a426 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    da5a:	4d0f      	ldr	r5, [pc, #60]	; (da98 <usage_fault.constprop.0+0x88>)
    da5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    da5e:	0359      	lsls	r1, r3, #13
    da60:	d503      	bpl.n	da6a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    da62:	2145      	movs	r1, #69	; 0x45
    da64:	4812      	ldr	r0, [pc, #72]	; (dab0 <usage_fault.constprop.0+0xa0>)
    da66:	f00c fcde 	bl	1a426 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    da6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    da6c:	039a      	lsls	r2, r3, #14
    da6e:	d503      	bpl.n	da78 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    da70:	2145      	movs	r1, #69	; 0x45
    da72:	4810      	ldr	r0, [pc, #64]	; (dab4 <usage_fault.constprop.0+0xa4>)
    da74:	f00c fcd7 	bl	1a426 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    da78:	4d07      	ldr	r5, [pc, #28]	; (da98 <usage_fault.constprop.0+0x88>)
    da7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    da7c:	03db      	lsls	r3, r3, #15
    da7e:	d503      	bpl.n	da88 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    da80:	2145      	movs	r1, #69	; 0x45
    da82:	480d      	ldr	r0, [pc, #52]	; (dab8 <usage_fault.constprop.0+0xa8>)
    da84:	f00c fccf 	bl	1a426 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    da88:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    da8a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    da8c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    da90:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    da94:	62ab      	str	r3, [r5, #40]	; 0x28
}
    da96:	bd38      	pop	{r3, r4, r5, pc}
    da98:	e000ed00 	.word	0xe000ed00
    da9c:	00020737 	.word	0x00020737
    daa0:	00020754 	.word	0x00020754
    daa4:	0002076c 	.word	0x0002076c
    daa8:	0002078b 	.word	0x0002078b
    daac:	000207ba 	.word	0x000207ba
    dab0:	000207dd 	.word	0x000207dd
    dab4:	00020807 	.word	0x00020807
    dab8:	00020826 	.word	0x00020826

0000dabc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dabc:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dabe:	4c23      	ldr	r4, [pc, #140]	; (db4c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dac0:	4606      	mov	r6, r0
    dac2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dac4:	4822      	ldr	r0, [pc, #136]	; (db50 <bus_fault.constprop.0+0x94>)
    dac6:	2145      	movs	r1, #69	; 0x45
    dac8:	f00c fcad 	bl	1a426 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dacc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dace:	04d9      	lsls	r1, r3, #19
    dad0:	d503      	bpl.n	dada <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    dad2:	2145      	movs	r1, #69	; 0x45
    dad4:	481f      	ldr	r0, [pc, #124]	; (db54 <bus_fault.constprop.0+0x98>)
    dad6:	f00c fca6 	bl	1a426 <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    dada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dadc:	051a      	lsls	r2, r3, #20
    dade:	d503      	bpl.n	dae8 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dae0:	2145      	movs	r1, #69	; 0x45
    dae2:	481d      	ldr	r0, [pc, #116]	; (db58 <bus_fault.constprop.0+0x9c>)
    dae4:	f00c fc9f 	bl	1a426 <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    dae8:	4c18      	ldr	r4, [pc, #96]	; (db4c <bus_fault.constprop.0+0x90>)
    daea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    daec:	059b      	lsls	r3, r3, #22
    daee:	d510      	bpl.n	db12 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    daf0:	481a      	ldr	r0, [pc, #104]	; (db5c <bus_fault.constprop.0+0xa0>)
    daf2:	2145      	movs	r1, #69	; 0x45
    daf4:	f00c fc97 	bl	1a426 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    daf8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    dafa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dafc:	0418      	lsls	r0, r3, #16
    dafe:	d508      	bpl.n	db12 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    db00:	2145      	movs	r1, #69	; 0x45
    db02:	4817      	ldr	r0, [pc, #92]	; (db60 <bus_fault.constprop.0+0xa4>)
    db04:	f00c fc8f 	bl	1a426 <printk>
			if (from_hard_fault) {
    db08:	b11e      	cbz	r6, db12 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    db0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    db10:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    db12:	4c0e      	ldr	r4, [pc, #56]	; (db4c <bus_fault.constprop.0+0x90>)
    db14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db16:	0559      	lsls	r1, r3, #21
    db18:	d503      	bpl.n	db22 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    db1a:	2145      	movs	r1, #69	; 0x45
    db1c:	4811      	ldr	r0, [pc, #68]	; (db64 <bus_fault.constprop.0+0xa8>)
    db1e:	f00c fc82 	bl	1a426 <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    db22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db24:	05da      	lsls	r2, r3, #23
    db26:	d50b      	bpl.n	db40 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    db28:	2145      	movs	r1, #69	; 0x45
    db2a:	480f      	ldr	r0, [pc, #60]	; (db68 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    db2c:	f00c fc7b 	bl	1a426 <printk>
	*recoverable = memory_fault_recoverable(esf);
    db30:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    db32:	4a06      	ldr	r2, [pc, #24]	; (db4c <bus_fault.constprop.0+0x90>)
    db34:	6a93      	ldr	r3, [r2, #40]	; 0x28
    db36:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    db3a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    db3c:	7028      	strb	r0, [r5, #0]
}
    db3e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    db40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db42:	049b      	lsls	r3, r3, #18
    db44:	d5f4      	bpl.n	db30 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    db46:	2145      	movs	r1, #69	; 0x45
    db48:	4808      	ldr	r0, [pc, #32]	; (db6c <bus_fault.constprop.0+0xb0>)
    db4a:	e7ef      	b.n	db2c <bus_fault.constprop.0+0x70>
    db4c:	e000ed00 	.word	0xe000ed00
    db50:	00020856 	.word	0x00020856
    db54:	00020871 	.word	0x00020871
    db58:	00020887 	.word	0x00020887
    db5c:	0002089f 	.word	0x0002089f
    db60:	000208bd 	.word	0x000208bd
    db64:	000208d7 	.word	0x000208d7
    db68:	000208f7 	.word	0x000208f7
    db6c:	00020914 	.word	0x00020914

0000db70 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    db70:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    db72:	4c29      	ldr	r4, [pc, #164]	; (dc18 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    db74:	4606      	mov	r6, r0
    db76:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    db78:	4828      	ldr	r0, [pc, #160]	; (dc1c <mem_manage_fault.constprop.0+0xac>)
    db7a:	2145      	movs	r1, #69	; 0x45
    db7c:	f00c fc53 	bl	1a426 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    db80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db82:	06d8      	lsls	r0, r3, #27
    db84:	d503      	bpl.n	db8e <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    db86:	2145      	movs	r1, #69	; 0x45
    db88:	4825      	ldr	r0, [pc, #148]	; (dc20 <mem_manage_fault.constprop.0+0xb0>)
    db8a:	f00c fc4c 	bl	1a426 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    db8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db90:	0719      	lsls	r1, r3, #28
    db92:	d503      	bpl.n	db9c <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    db94:	2145      	movs	r1, #69	; 0x45
    db96:	4823      	ldr	r0, [pc, #140]	; (dc24 <mem_manage_fault.constprop.0+0xb4>)
    db98:	f00c fc45 	bl	1a426 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    db9c:	4c1e      	ldr	r4, [pc, #120]	; (dc18 <mem_manage_fault.constprop.0+0xa8>)
    db9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dba0:	079a      	lsls	r2, r3, #30
    dba2:	d510      	bpl.n	dbc6 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    dba4:	2145      	movs	r1, #69	; 0x45
    dba6:	4820      	ldr	r0, [pc, #128]	; (dc28 <mem_manage_fault.constprop.0+0xb8>)
    dba8:	f00c fc3d 	bl	1a426 <printk>
		uint32_t temp = SCB->MMFAR;
    dbac:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dbae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbb0:	061b      	lsls	r3, r3, #24
    dbb2:	d508      	bpl.n	dbc6 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dbb4:	2145      	movs	r1, #69	; 0x45
    dbb6:	481d      	ldr	r0, [pc, #116]	; (dc2c <mem_manage_fault.constprop.0+0xbc>)
    dbb8:	f00c fc35 	bl	1a426 <printk>
			if (from_hard_fault) {
    dbbc:	b11e      	cbz	r6, dbc6 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dbbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dbc4:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dbc6:	4c14      	ldr	r4, [pc, #80]	; (dc18 <mem_manage_fault.constprop.0+0xa8>)
    dbc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbca:	07d8      	lsls	r0, r3, #31
    dbcc:	d503      	bpl.n	dbd6 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    dbce:	2145      	movs	r1, #69	; 0x45
    dbd0:	4817      	ldr	r0, [pc, #92]	; (dc30 <mem_manage_fault.constprop.0+0xc0>)
    dbd2:	f00c fc28 	bl	1a426 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dbd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbd8:	0699      	lsls	r1, r3, #26
    dbda:	d503      	bpl.n	dbe4 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    dbdc:	2145      	movs	r1, #69	; 0x45
    dbde:	4815      	ldr	r0, [pc, #84]	; (dc34 <mem_manage_fault.constprop.0+0xc4>)
    dbe0:	f00c fc21 	bl	1a426 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dbe4:	4b0c      	ldr	r3, [pc, #48]	; (dc18 <mem_manage_fault.constprop.0+0xa8>)
    dbe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dbe8:	06d2      	lsls	r2, r2, #27
    dbea:	d402      	bmi.n	dbf2 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    dbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dbee:	079b      	lsls	r3, r3, #30
    dbf0:	d50a      	bpl.n	dc08 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    dbf2:	4911      	ldr	r1, [pc, #68]	; (dc38 <mem_manage_fault.constprop.0+0xc8>)
    dbf4:	4811      	ldr	r0, [pc, #68]	; (dc3c <mem_manage_fault.constprop.0+0xcc>)
    dbf6:	f240 1247 	movw	r2, #327	; 0x147
    dbfa:	f00c fc14 	bl	1a426 <printk>
    dbfe:	f240 1147 	movw	r1, #327	; 0x147
    dc02:	480d      	ldr	r0, [pc, #52]	; (dc38 <mem_manage_fault.constprop.0+0xc8>)
    dc04:	f00c feb5 	bl	1a972 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    dc08:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dc0a:	4a03      	ldr	r2, [pc, #12]	; (dc18 <mem_manage_fault.constprop.0+0xa8>)
    dc0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dc0e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    dc12:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dc14:	7028      	strb	r0, [r5, #0]
}
    dc16:	bd70      	pop	{r4, r5, r6, pc}
    dc18:	e000ed00 	.word	0xe000ed00
    dc1c:	00020948 	.word	0x00020948
    dc20:	00020963 	.word	0x00020963
    dc24:	00020887 	.word	0x00020887
    dc28:	0002099b 	.word	0x0002099b
    dc2c:	000209b8 	.word	0x000209b8
    dc30:	000209d3 	.word	0x000209d3
    dc34:	00020914 	.word	0x00020914
    dc38:	000209f7 	.word	0x000209f7
    dc3c:	0001f98f 	.word	0x0001f98f

0000dc40 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    dc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dc44:	4b51      	ldr	r3, [pc, #324]	; (dd8c <z_arm_fault+0x14c>)
{
    dc46:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dc48:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    dc4c:	4689      	mov	r9, r1
    dc4e:	4614      	mov	r4, r2
    dc50:	2600      	movs	r6, #0
    dc52:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dc54:	f3c8 0708 	ubfx	r7, r8, #0, #9
    dc58:	f386 8811 	msr	BASEPRI, r6
    dc5c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dc60:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    dc64:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    dc68:	d111      	bne.n	dc8e <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    dc6a:	07d0      	lsls	r0, r2, #31
    dc6c:	d40f      	bmi.n	dc8e <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    dc6e:	0651      	lsls	r1, r2, #25
    dc70:	d403      	bmi.n	dc7a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    dc72:	0722      	lsls	r2, r4, #28
    dc74:	d408      	bmi.n	dc88 <z_arm_fault+0x48>
			*nested_exc = true;
    dc76:	2601      	movs	r6, #1
    dc78:	e008      	b.n	dc8c <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    dc7a:	2145      	movs	r1, #69	; 0x45
    dc7c:	4844      	ldr	r0, [pc, #272]	; (dd90 <z_arm_fault+0x150>)
    dc7e:	f00c fbd2 	bl	1a426 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    dc82:	f014 0404 	ands.w	r4, r4, #4
    dc86:	d000      	beq.n	dc8a <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    dc88:	464d      	mov	r5, r9
	*nested_exc = false;
    dc8a:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    dc8c:	b95d      	cbnz	r5, dca6 <z_arm_fault+0x66>
    dc8e:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    dc92:	4940      	ldr	r1, [pc, #256]	; (dd94 <z_arm_fault+0x154>)
    dc94:	4840      	ldr	r0, [pc, #256]	; (dd98 <z_arm_fault+0x158>)
    dc96:	f00c fbc6 	bl	1a426 <printk>
    dc9a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    dc9e:	483d      	ldr	r0, [pc, #244]	; (dd94 <z_arm_fault+0x154>)
    dca0:	f00c fe67 	bl	1a972 <assert_post_action>
    dca4:	2500      	movs	r5, #0
	*recoverable = false;
    dca6:	2400      	movs	r4, #0
    dca8:	1efb      	subs	r3, r7, #3
    dcaa:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    dcae:	2b09      	cmp	r3, #9
    dcb0:	d85a      	bhi.n	dd68 <z_arm_fault+0x128>
    dcb2:	e8df f003 	tbb	[pc, r3]
    dcb6:	4e05      	.short	0x4e05
    dcb8:	59593252 	.word	0x59593252
    dcbc:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dcc0:	4f32      	ldr	r7, [pc, #200]	; (dd8c <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    dcc2:	2145      	movs	r1, #69	; 0x45
    dcc4:	4835      	ldr	r0, [pc, #212]	; (dd9c <z_arm_fault+0x15c>)
    dcc6:	f00c fbae 	bl	1a426 <printk>
	*recoverable = false;
    dcca:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dcce:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    dcd0:	f014 0402 	ands.w	r4, r4, #2
    dcd4:	d005      	beq.n	dce2 <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    dcd6:	2145      	movs	r1, #69	; 0x45
    dcd8:	4831      	ldr	r0, [pc, #196]	; (dda0 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    dcda:	f00c fba4 	bl	1a426 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    dcde:	2400      	movs	r4, #0
}
    dce0:	e01e      	b.n	dd20 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dce4:	005b      	lsls	r3, r3, #1
    dce6:	d51b      	bpl.n	dd20 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    dce8:	2145      	movs	r1, #69	; 0x45
    dcea:	482e      	ldr	r0, [pc, #184]	; (dda4 <z_arm_fault+0x164>)
    dcec:	f00c fb9b 	bl	1a426 <printk>
		if (SCB_MMFSR != 0) {
    dcf0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    dcf4:	b12b      	cbz	r3, dd02 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    dcf6:	2001      	movs	r0, #1
    dcf8:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dcfc:	f7ff ff38 	bl	db70 <mem_manage_fault.constprop.0>
    dd00:	e00d      	b.n	dd1e <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    dd02:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    dd06:	b12b      	cbz	r3, dd14 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    dd08:	2001      	movs	r0, #1
    dd0a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dd0e:	f7ff fed5 	bl	dabc <bus_fault.constprop.0>
    dd12:	e004      	b.n	dd1e <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    dd14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    dd16:	b29b      	uxth	r3, r3
    dd18:	b113      	cbz	r3, dd20 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    dd1a:	f7ff fe79 	bl	da10 <usage_fault.constprop.0>
    dd1e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    dd20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd24:	b993      	cbnz	r3, dd4c <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    dd26:	2220      	movs	r2, #32
    dd28:	4629      	mov	r1, r5
    dd2a:	a802      	add	r0, sp, #8
    dd2c:	f00d fdbf 	bl	1b8ae <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    dd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd32:	b336      	cbz	r6, dd82 <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    dd34:	f3c3 0208 	ubfx	r2, r3, #0, #9
    dd38:	b922      	cbnz	r2, dd44 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    dd3a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    dd3e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dd42:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    dd44:	4620      	mov	r0, r4
    dd46:	a902      	add	r1, sp, #8
    dd48:	f7ff fdcc 	bl	d8e4 <z_arm_fatal_error>
}
    dd4c:	b00b      	add	sp, #44	; 0x2c
    dd4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    dd52:	2000      	movs	r0, #0
    dd54:	f10d 0107 	add.w	r1, sp, #7
    dd58:	e7d0      	b.n	dcfc <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    dd5a:	2000      	movs	r0, #0
    dd5c:	f10d 0107 	add.w	r1, sp, #7
    dd60:	e7d5      	b.n	dd0e <z_arm_fault+0xce>
	PR_FAULT_INFO(
    dd62:	2145      	movs	r1, #69	; 0x45
    dd64:	4810      	ldr	r0, [pc, #64]	; (dda8 <z_arm_fault+0x168>)
    dd66:	e7b8      	b.n	dcda <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    dd68:	4910      	ldr	r1, [pc, #64]	; (ddac <z_arm_fault+0x16c>)
    dd6a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    dd6e:	4a10      	ldr	r2, [pc, #64]	; (ddb0 <z_arm_fault+0x170>)
    dd70:	4810      	ldr	r0, [pc, #64]	; (ddb4 <z_arm_fault+0x174>)
    dd72:	bf08      	it	eq
    dd74:	460a      	moveq	r2, r1
    dd76:	f1a7 0310 	sub.w	r3, r7, #16
    dd7a:	2145      	movs	r1, #69	; 0x45
    dd7c:	f00c fb53 	bl	1a426 <printk>
    dd80:	e7ad      	b.n	dcde <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dd82:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    dd86:	f023 0301 	bic.w	r3, r3, #1
    dd8a:	e7da      	b.n	dd42 <z_arm_fault+0x102>
    dd8c:	e000ed00 	.word	0xe000ed00
    dd90:	00020a5f 	.word	0x00020a5f
    dd94:	000209f7 	.word	0x000209f7
    dd98:	0001f98f 	.word	0x0001f98f
    dd9c:	00020a87 	.word	0x00020a87
    dda0:	00020aa3 	.word	0x00020aa3
    dda4:	00020ac9 	.word	0x00020ac9
    dda8:	00020aed 	.word	0x00020aed
    ddac:	00020a31 	.word	0x00020a31
    ddb0:	00020a46 	.word	0x00020a46
    ddb4:	00020b28 	.word	0x00020b28

0000ddb8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    ddb8:	4b04      	ldr	r3, [pc, #16]	; (ddcc <z_arm_fault_init+0x14>)
    ddba:	695a      	ldr	r2, [r3, #20]
    ddbc:	f042 0210 	orr.w	r2, r2, #16
    ddc0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    ddc2:	695a      	ldr	r2, [r3, #20]
    ddc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    ddc8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    ddca:	4770      	bx	lr
    ddcc:	e000ed00 	.word	0xe000ed00

0000ddd0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    ddd0:	4b04      	ldr	r3, [pc, #16]	; (dde4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    ddd2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    ddd4:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    ddd6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    ddd8:	d003      	beq.n	dde2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    ddda:	4903      	ldr	r1, [pc, #12]	; (dde8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    dddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    dde0:	600a      	str	r2, [r1, #0]

0000dde2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    dde2:	4770      	bx	lr
	ldr r3, =_kernel
    dde4:	2000afc4 	.word	0x2000afc4
	ldr r1, =_SCS_ICSR
    dde8:	e000ed04 	.word	0xe000ed04

0000ddec <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    ddec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    ddf0:	4905      	ldr	r1, [pc, #20]	; (de08 <sys_arch_reboot+0x1c>)
    ddf2:	4b06      	ldr	r3, [pc, #24]	; (de0c <sys_arch_reboot+0x20>)
    ddf4:	68ca      	ldr	r2, [r1, #12]
    ddf6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    ddfa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    ddfc:	60cb      	str	r3, [r1, #12]
    ddfe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    de02:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    de04:	e7fd      	b.n	de02 <sys_arch_reboot+0x16>
    de06:	bf00      	nop
    de08:	e000ed00 	.word	0xe000ed00
    de0c:	05fa0004 	.word	0x05fa0004

0000de10 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    de10:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    de12:	2120      	movs	r1, #32
    de14:	4803      	ldr	r0, [pc, #12]	; (de24 <z_arm_interrupt_init+0x14>)
    de16:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    de18:	3301      	adds	r3, #1
    de1a:	2b45      	cmp	r3, #69	; 0x45
    de1c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    de20:	d1f9      	bne.n	de16 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    de22:	4770      	bx	lr
    de24:	e000e100 	.word	0xe000e100

0000de28 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    de28:	b508      	push	{r3, lr}
	if (_current == thread) {
    de2a:	4b0e      	ldr	r3, [pc, #56]	; (de64 <z_impl_k_thread_abort+0x3c>)
    de2c:	689b      	ldr	r3, [r3, #8]
    de2e:	4283      	cmp	r3, r0
    de30:	d107      	bne.n	de42 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    de32:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    de36:	b193      	cbz	r3, de5e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    de38:	4a0b      	ldr	r2, [pc, #44]	; (de68 <z_impl_k_thread_abort+0x40>)
    de3a:	6853      	ldr	r3, [r2, #4]
    de3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    de40:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    de42:	f00a fd1d 	bl	18880 <z_thread_single_abort>
	__asm__ volatile(
    de46:	f04f 0320 	mov.w	r3, #32
    de4a:	f3ef 8011 	mrs	r0, BASEPRI
    de4e:	f383 8811 	msr	BASEPRI, r3
    de52:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    de56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    de5a:	f00f bebf 	b.w	1dbdc <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    de5e:	f00b fb1d 	bl	1949c <z_self_abort>
    de62:	bf00      	nop
    de64:	2000afc4 	.word	0x2000afc4
    de68:	e000ed00 	.word	0xe000ed00

0000de6c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    de6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    de6e:	4c09      	ldr	r4, [pc, #36]	; (de94 <z_arm_configure_static_mpu_regions+0x28>)
    de70:	4a09      	ldr	r2, [pc, #36]	; (de98 <z_arm_configure_static_mpu_regions+0x2c>)
    de72:	4623      	mov	r3, r4
    de74:	2101      	movs	r1, #1
    de76:	4809      	ldr	r0, [pc, #36]	; (de9c <z_arm_configure_static_mpu_regions+0x30>)
    de78:	f000 f976 	bl	e168 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    de7c:	2300      	movs	r3, #0
    de7e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    de80:	4b07      	ldr	r3, [pc, #28]	; (dea0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    de82:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    de84:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    de86:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    de88:	9301      	str	r3, [sp, #4]
    de8a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    de8c:	f000 f988 	bl	e1a0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    de90:	b004      	add	sp, #16
    de92:	bd10      	pop	{r4, pc}
    de94:	20070000 	.word	0x20070000
    de98:	20008000 	.word	0x20008000
    de9c:	0001e72c 	.word	0x0001e72c
    dea0:	200087f0 	.word	0x200087f0

0000dea4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    dea4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    dea6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    dea8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    deaa:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    deae:	f004 031f 	and.w	r3, r4, #31
    deb2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    deb4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    deb6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    deb8:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    debc:	4905      	ldr	r1, [pc, #20]	; (ded4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    debe:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    dec2:	f043 0301 	orr.w	r3, r3, #1
    dec6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    deca:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    dece:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    ded2:	bd10      	pop	{r4, pc}
    ded4:	e000ed00 	.word	0xe000ed00

0000ded8 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    ded8:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    deda:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    dedc:	680c      	ldr	r4, [r1, #0]
{
    dede:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    dee0:	890a      	ldrh	r2, [r1, #8]
    dee2:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    dee4:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    dee6:	3b01      	subs	r3, #1
    dee8:	f024 041f 	bic.w	r4, r4, #31
    deec:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    deee:	f002 021f 	and.w	r2, r2, #31
    def2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    def6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    defa:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    defc:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    defe:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    df02:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    df04:	d909      	bls.n	df1a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    df06:	4602      	mov	r2, r0
    df08:	2145      	movs	r1, #69	; 0x45
    df0a:	4806      	ldr	r0, [pc, #24]	; (df24 <mpu_configure_region+0x4c>)
    df0c:	f00c fa8b 	bl	1a426 <printk>
    df10:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    df14:	4620      	mov	r0, r4
    df16:	b005      	add	sp, #20
    df18:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    df1a:	4669      	mov	r1, sp
    df1c:	f7ff ffc2 	bl	dea4 <region_init>
	return region_allocate_and_init(index,
    df20:	e7f8      	b.n	df14 <mpu_configure_region+0x3c>
    df22:	bf00      	nop
    df24:	00020b44 	.word	0x00020b44

0000df28 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df2c:	4689      	mov	r9, r1
    df2e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    df30:	4606      	mov	r6, r0
    df32:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    df36:	4d59      	ldr	r5, [pc, #356]	; (e09c <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    df38:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    df3a:	45c8      	cmp	r8, r9
    df3c:	da27      	bge.n	df8e <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    df3e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    df42:	f1ba 0f00 	cmp.w	sl, #0
    df46:	d045      	beq.n	dfd4 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    df48:	f1ba 0f1f 	cmp.w	sl, #31
    df4c:	d918      	bls.n	df80 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    df4e:	f01a 0f1f 	tst.w	sl, #31
    df52:	d115      	bne.n	df80 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    df54:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    df58:	f01b 0f1f 	tst.w	fp, #31
    df5c:	d110      	bne.n	df80 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    df5e:	4658      	mov	r0, fp
    df60:	f00d fbce 	bl	1b700 <arm_cmse_mpu_region_get>
    df64:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    df66:	eb0a 000b 	add.w	r0, sl, fp
    df6a:	3801      	subs	r0, #1
    df6c:	f00d fbc8 	bl	1b700 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    df70:	4287      	cmp	r7, r0
    df72:	d010      	beq.n	df96 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    df74:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    df78:	463a      	mov	r2, r7
    df7a:	2145      	movs	r1, #69	; 0x45
    df7c:	4848      	ldr	r0, [pc, #288]	; (e0a0 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    df7e:	e002      	b.n	df86 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    df80:	4642      	mov	r2, r8
    df82:	2145      	movs	r1, #69	; 0x45
    df84:	4847      	ldr	r0, [pc, #284]	; (e0a4 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    df86:	f00c fa4e 	bl	1a426 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    df8a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    df8e:	4620      	mov	r0, r4
    df90:	b005      	add	sp, #20
    df92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    df96:	f117 0f16 	cmn.w	r7, #22
    df9a:	d0ed      	beq.n	df78 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    df9c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    df9e:	42bb      	cmp	r3, r7
    dfa0:	dbea      	blt.n	df78 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    dfa2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    dfa6:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    dfaa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    dfae:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    dfb2:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    dfb6:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    dfba:	e9d6 3200 	ldrd	r3, r2, [r6]
    dfbe:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    dfc0:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    dfc2:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    dfc6:	d11d      	bne.n	e004 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    dfc8:	45d3      	cmp	fp, sl
    dfca:	d107      	bne.n	dfdc <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    dfcc:	4631      	mov	r1, r6
    dfce:	b2f8      	uxtb	r0, r7
    dfd0:	f7ff ff82 	bl	ded8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    dfd4:	f108 0801 	add.w	r8, r8, #1
    dfd8:	360c      	adds	r6, #12
    dfda:	e7ae      	b.n	df3a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    dfdc:	4631      	mov	r1, r6
	MPU->RNR = index;
    dfde:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    dfe2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    dfe6:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    dfea:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    dfee:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    dff0:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    dff4:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    dff6:	f7ff ff6f 	bl	ded8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    dffa:	f110 0f16 	cmn.w	r0, #22
    dffe:	d0c4      	beq.n	df8a <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e000:	1c44      	adds	r4, r0, #1
    e002:	e7e7      	b.n	dfd4 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    e004:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e006:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e008:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e00a:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e00e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e012:	d108      	bne.n	e026 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e014:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e018:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e01a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e01e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e020:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e024:	e7e7      	b.n	dff6 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e026:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e02a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e02e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e030:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e034:	4631      	mov	r1, r6
    e036:	f7ff ff4f 	bl	ded8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e03a:	f110 0f16 	cmn.w	r0, #22
    e03e:	d0a4      	beq.n	df8a <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e040:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e044:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e048:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e04c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e050:	f362 0304 	bfi	r3, r2, #0, #5
    e054:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e058:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e05c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e060:	085b      	lsrs	r3, r3, #1
    e062:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e066:	e9d6 3100 	ldrd	r3, r1, [r6]
    e06a:	440b      	add	r3, r1
    e06c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e06e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e072:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e074:	445b      	add	r3, fp
    e076:	eba3 030a 	sub.w	r3, r3, sl
    e07a:	b2c0      	uxtb	r0, r0
    e07c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e080:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e082:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e086:	9303      	str	r3, [sp, #12]
    e088:	d903      	bls.n	e092 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e08a:	4602      	mov	r2, r0
    e08c:	2145      	movs	r1, #69	; 0x45
    e08e:	4806      	ldr	r0, [pc, #24]	; (e0a8 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    e090:	e779      	b.n	df86 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e092:	4669      	mov	r1, sp
    e094:	f7ff ff06 	bl	dea4 <region_init>
    e098:	e7b2      	b.n	e000 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e09a:	bf00      	nop
    e09c:	e000ed00 	.word	0xe000ed00
    e0a0:	00020b97 	.word	0x00020b97
    e0a4:	00020b6f 	.word	0x00020b6f
    e0a8:	00020b44 	.word	0x00020b44

0000e0ac <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e0ac:	2205      	movs	r2, #5
    e0ae:	4b04      	ldr	r3, [pc, #16]	; (e0c0 <arm_core_mpu_enable+0x14>)
    e0b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e0b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e0b8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e0bc:	4770      	bx	lr
    e0be:	bf00      	nop
    e0c0:	e000ed00 	.word	0xe000ed00

0000e0c4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e0c4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e0c8:	2200      	movs	r2, #0
    e0ca:	4b02      	ldr	r3, [pc, #8]	; (e0d4 <arm_core_mpu_disable+0x10>)
    e0cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e0d0:	4770      	bx	lr
    e0d2:	bf00      	nop
    e0d4:	e000ed00 	.word	0xe000ed00

0000e0d8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e0d8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e0da:	4d1d      	ldr	r5, [pc, #116]	; (e150 <arm_mpu_init+0x78>)
    e0dc:	682c      	ldr	r4, [r5, #0]
    e0de:	2c08      	cmp	r4, #8
    e0e0:	d90d      	bls.n	e0fe <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e0e2:	f240 123b 	movw	r2, #315	; 0x13b
    e0e6:	491b      	ldr	r1, [pc, #108]	; (e154 <arm_mpu_init+0x7c>)
    e0e8:	481b      	ldr	r0, [pc, #108]	; (e158 <arm_mpu_init+0x80>)
    e0ea:	f00c f99c 	bl	1a426 <printk>
    e0ee:	4819      	ldr	r0, [pc, #100]	; (e154 <arm_mpu_init+0x7c>)
    e0f0:	f240 113b 	movw	r1, #315	; 0x13b
    e0f4:	f00c fc3d 	bl	1a972 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e0f8:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e0fc:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e0fe:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e100:	f7ff ffe0 	bl	e0c4 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e104:	4b15      	ldr	r3, [pc, #84]	; (e15c <arm_mpu_init+0x84>)
    e106:	4a16      	ldr	r2, [pc, #88]	; (e160 <arm_mpu_init+0x88>)
    e108:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e10c:	4284      	cmp	r4, r0
    e10e:	d117      	bne.n	e140 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e110:	4b14      	ldr	r3, [pc, #80]	; (e164 <arm_mpu_init+0x8c>)
    e112:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e114:	f7ff ffca 	bl	e0ac <arm_core_mpu_enable>
	__ASSERT(
    e118:	4b10      	ldr	r3, [pc, #64]	; (e15c <arm_mpu_init+0x84>)
    e11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e11e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e122:	2b08      	cmp	r3, #8
    e124:	d00a      	beq.n	e13c <arm_mpu_init+0x64>
    e126:	490b      	ldr	r1, [pc, #44]	; (e154 <arm_mpu_init+0x7c>)
    e128:	480b      	ldr	r0, [pc, #44]	; (e158 <arm_mpu_init+0x80>)
    e12a:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e12e:	f00c f97a 	bl	1a426 <printk>
    e132:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e136:	4807      	ldr	r0, [pc, #28]	; (e154 <arm_mpu_init+0x7c>)
    e138:	f00c fc1b 	bl	1a972 <assert_post_action>
	return 0;
    e13c:	2000      	movs	r0, #0
    e13e:	e7dd      	b.n	e0fc <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e140:	6869      	ldr	r1, [r5, #4]
    e142:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e146:	f7ff fead 	bl	dea4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e14a:	3001      	adds	r0, #1
    e14c:	e7de      	b.n	e10c <arm_mpu_init+0x34>
    e14e:	bf00      	nop
    e150:	0001e738 	.word	0x0001e738
    e154:	00020bbf 	.word	0x00020bbf
    e158:	0001f98f 	.word	0x0001f98f
    e15c:	e000ed00 	.word	0xe000ed00
    e160:	0044ffaa 	.word	0x0044ffaa
    e164:	2000c70b 	.word	0x2000c70b

0000e168 <arm_core_mpu_configure_static_mpu_regions>:
{
    e168:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e16a:	4c0a      	ldr	r4, [pc, #40]	; (e194 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e16c:	7822      	ldrb	r2, [r4, #0]
    e16e:	f7ff fedb 	bl	df28 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e172:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e174:	3016      	adds	r0, #22
    e176:	d10c      	bne.n	e192 <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e178:	4907      	ldr	r1, [pc, #28]	; (e198 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e17a:	4808      	ldr	r0, [pc, #32]	; (e19c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e17c:	f44f 7282 	mov.w	r2, #260	; 0x104
    e180:	f00c f951 	bl	1a426 <printk>
}
    e184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e188:	f44f 7182 	mov.w	r1, #260	; 0x104
    e18c:	4802      	ldr	r0, [pc, #8]	; (e198 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e18e:	f00c bbf0 	b.w	1a972 <assert_post_action>
}
    e192:	bd10      	pop	{r4, pc}
    e194:	2000c70b 	.word	0x2000c70b
    e198:	00020bbf 	.word	0x00020bbf
    e19c:	0001f98f 	.word	0x0001f98f

0000e1a0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1a4:	4d30      	ldr	r5, [pc, #192]	; (e268 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e1a6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e1a8:	4606      	mov	r6, r0
    e1aa:	f04f 0800 	mov.w	r8, #0
    e1ae:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e1b0:	4f2e      	ldr	r7, [pc, #184]	; (e26c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e1b2:	45d0      	cmp	r8, sl
    e1b4:	db02      	blt.n	e1bc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e1b6:	b003      	add	sp, #12
    e1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e1bc:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e1c0:	f1b9 0f00 	cmp.w	r9, #0
    e1c4:	d04a      	beq.n	e25c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e1c6:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e1c8:	4608      	mov	r0, r1
    e1ca:	9101      	str	r1, [sp, #4]
    e1cc:	f00d fa98 	bl	1b700 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e1d0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e1d2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e1d4:	eb09 0001 	add.w	r0, r9, r1
    e1d8:	3801      	subs	r0, #1
    e1da:	f00d fa91 	bl	1b700 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e1de:	4284      	cmp	r4, r0
    e1e0:	f04f 0214 	mov.w	r2, #20
    e1e4:	4b22      	ldr	r3, [pc, #136]	; (e270 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e1e6:	d013      	beq.n	e210 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e1e8:	f06f 0315 	mvn.w	r3, #21
    e1ec:	fb02 f808 	mul.w	r8, r2, r8
    e1f0:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e1f4:	f44f 728a 	mov.w	r2, #276	; 0x114
    e1f8:	491e      	ldr	r1, [pc, #120]	; (e274 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e1fa:	481f      	ldr	r0, [pc, #124]	; (e278 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e1fc:	f00c f913 	bl	1a426 <printk>
    e200:	f44f 718a 	mov.w	r1, #276	; 0x114
    e204:	481b      	ldr	r0, [pc, #108]	; (e274 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e206:	b003      	add	sp, #12
    e208:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e20c:	f00c bbb1 	b.w	1a972 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e210:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e214:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e216:	d0ed      	beq.n	e1f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e218:	7819      	ldrb	r1, [r3, #0]
    e21a:	42a1      	cmp	r1, r4
    e21c:	ddea      	ble.n	e1f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e21e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e222:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e226:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e22a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e22e:	f100 0108 	add.w	r1, r0, #8
    e232:	7b00      	ldrb	r0, [r0, #12]
    e234:	f364 0004 	bfi	r0, r4, #0, #5
    e238:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e23a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e23e:	790c      	ldrb	r4, [r1, #4]
    e240:	0840      	lsrs	r0, r0, #1
    e242:	f360 1447 	bfi	r4, r0, #5, #3
    e246:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e248:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e24c:	f021 011f 	bic.w	r1, r1, #31
    e250:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e252:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e256:	f021 011f 	bic.w	r1, r1, #31
    e25a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e25c:	f108 0801 	add.w	r8, r8, #1
    e260:	3514      	adds	r5, #20
    e262:	360c      	adds	r6, #12
    e264:	e7a5      	b.n	e1b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e266:	bf00      	nop
    e268:	2000ab04 	.word	0x2000ab04
    e26c:	e000ed00 	.word	0xe000ed00
    e270:	2000c70b 	.word	0x2000c70b
    e274:	00020bbf 	.word	0x00020bbf
    e278:	0001f98f 	.word	0x0001f98f

0000e27c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e27c:	4b01      	ldr	r3, [pc, #4]	; (e284 <__stdout_hook_install+0x8>)
    e27e:	6018      	str	r0, [r3, #0]
}
    e280:	4770      	bx	lr
    e282:	bf00      	nop
    e284:	20008334 	.word	0x20008334

0000e288 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e288:	2000      	movs	r0, #0
    e28a:	4b02      	ldr	r3, [pc, #8]	; (e294 <remoteproc_mgr_boot+0xc>)
    e28c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e290:	4770      	bx	lr
    e292:	bf00      	nop
    e294:	40005000 	.word	0x40005000

0000e298 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e298:	4b0e      	ldr	r3, [pc, #56]	; (e2d4 <bt_hex_real+0x3c>)
    e29a:	2940      	cmp	r1, #64	; 0x40
    e29c:	bf28      	it	cs
    e29e:	2140      	movcs	r1, #64	; 0x40
{
    e2a0:	b570      	push	{r4, r5, r6, lr}
    e2a2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e2a4:	4c0c      	ldr	r4, [pc, #48]	; (e2d8 <bt_hex_real+0x40>)
    e2a6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e2a8:	42b0      	cmp	r0, r6
    e2aa:	f103 0302 	add.w	r3, r3, #2
    e2ae:	d104      	bne.n	e2ba <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e2b0:	2300      	movs	r3, #0
    e2b2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e2b6:	4807      	ldr	r0, [pc, #28]	; (e2d4 <bt_hex_real+0x3c>)
    e2b8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e2ba:	7802      	ldrb	r2, [r0, #0]
    e2bc:	0912      	lsrs	r2, r2, #4
    e2be:	5ca2      	ldrb	r2, [r4, r2]
    e2c0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
    e2c8:	f002 020f 	and.w	r2, r2, #15
    e2cc:	5ca2      	ldrb	r2, [r4, r2]
    e2ce:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e2d2:	e7e9      	b.n	e2a8 <bt_hex_real+0x10>
    e2d4:	2000c72a 	.word	0x2000c72a
    e2d8:	00020c28 	.word	0x00020c28

0000e2dc <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e2dc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e2de:	7803      	ldrb	r3, [r0, #0]
    e2e0:	b08b      	sub	sp, #44	; 0x2c
    e2e2:	4604      	mov	r4, r0
    e2e4:	ad07      	add	r5, sp, #28
    e2e6:	2b03      	cmp	r3, #3
    e2e8:	d821      	bhi.n	e32e <bt_addr_le_str_real+0x52>
    e2ea:	e8df f003 	tbb	[pc, r3]
    e2ee:	1a02      	.short	0x1a02
    e2f0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e2f2:	4912      	ldr	r1, [pc, #72]	; (e33c <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e2f4:	4628      	mov	r0, r5
    e2f6:	f00d fa80 	bl	1b7fa <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e2fa:	7863      	ldrb	r3, [r4, #1]
    e2fc:	211e      	movs	r1, #30
    e2fe:	9304      	str	r3, [sp, #16]
    e300:	78a3      	ldrb	r3, [r4, #2]
    e302:	4a0f      	ldr	r2, [pc, #60]	; (e340 <bt_addr_le_str_real+0x64>)
    e304:	9303      	str	r3, [sp, #12]
    e306:	78e3      	ldrb	r3, [r4, #3]
    e308:	9505      	str	r5, [sp, #20]
    e30a:	9302      	str	r3, [sp, #8]
    e30c:	7923      	ldrb	r3, [r4, #4]
    e30e:	480d      	ldr	r0, [pc, #52]	; (e344 <bt_addr_le_str_real+0x68>)
    e310:	9301      	str	r3, [sp, #4]
    e312:	7963      	ldrb	r3, [r4, #5]
    e314:	9300      	str	r3, [sp, #0]
    e316:	79a3      	ldrb	r3, [r4, #6]
    e318:	f00c f892 	bl	1a440 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e31c:	4809      	ldr	r0, [pc, #36]	; (e344 <bt_addr_le_str_real+0x68>)
    e31e:	b00b      	add	sp, #44	; 0x2c
    e320:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e322:	4909      	ldr	r1, [pc, #36]	; (e348 <bt_addr_le_str_real+0x6c>)
    e324:	e7e6      	b.n	e2f4 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e326:	4909      	ldr	r1, [pc, #36]	; (e34c <bt_addr_le_str_real+0x70>)
    e328:	e7e4      	b.n	e2f4 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e32a:	4909      	ldr	r1, [pc, #36]	; (e350 <bt_addr_le_str_real+0x74>)
    e32c:	e7e2      	b.n	e2f4 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e32e:	210a      	movs	r1, #10
    e330:	4628      	mov	r0, r5
    e332:	4a08      	ldr	r2, [pc, #32]	; (e354 <bt_addr_le_str_real+0x78>)
    e334:	f00c f884 	bl	1a440 <snprintk>
		break;
    e338:	e7df      	b.n	e2fa <bt_addr_le_str_real+0x1e>
    e33a:	bf00      	nop
    e33c:	0001efac 	.word	0x0001efac
    e340:	0001efd5 	.word	0x0001efd5
    e344:	2000c70c 	.word	0x2000c70c
    e348:	0001efb3 	.word	0x0001efb3
    e34c:	0001efba 	.word	0x0001efba
    e350:	0001efc4 	.word	0x0001efc4
    e354:	0001efce 	.word	0x0001efce

0000e358 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e358:	2149      	movs	r1, #73	; 0x49
{
    e35a:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e35c:	4809      	ldr	r0, [pc, #36]	; (e384 <save_id+0x2c>)
    e35e:	f00c f862 	bl	1a426 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e362:	4909      	ldr	r1, [pc, #36]	; (e388 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e364:	4809      	ldr	r0, [pc, #36]	; (e38c <save_id+0x34>)
    e366:	79ca      	ldrb	r2, [r1, #7]
    e368:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e36c:	f7fd fa26 	bl	b7bc <settings_save_one>
	if (err) {
    e370:	4602      	mov	r2, r0
    e372:	b128      	cbz	r0, e380 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e378:	2145      	movs	r1, #69	; 0x45
    e37a:	4805      	ldr	r0, [pc, #20]	; (e390 <save_id+0x38>)
    e37c:	f00c b853 	b.w	1a426 <printk>
}
    e380:	bd08      	pop	{r3, pc}
    e382:	bf00      	nop
    e384:	00020c39 	.word	0x00020c39
    e388:	20008000 	.word	0x20008000
    e38c:	00020c48 	.word	0x00020c48
    e390:	00020c4e 	.word	0x00020c4e

0000e394 <set>:
{
    e394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e396:	4616      	mov	r6, r2
    e398:	461f      	mov	r7, r3
	if (!name) {
    e39a:	4604      	mov	r4, r0
    e39c:	b930      	cbnz	r0, e3ac <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e39e:	2145      	movs	r1, #69	; 0x45
    e3a0:	4819      	ldr	r0, [pc, #100]	; (e408 <set+0x74>)
    e3a2:	f00c f840 	bl	1a426 <printk>
	return -ENOENT;
    e3a6:	f06f 0401 	mvn.w	r4, #1
    e3aa:	e013      	b.n	e3d4 <set+0x40>
	len = settings_name_next(name, &next);
    e3ac:	a901      	add	r1, sp, #4
    e3ae:	f00c fb59 	bl	1aa64 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e3b2:	4916      	ldr	r1, [pc, #88]	; (e40c <set+0x78>)
	len = settings_name_next(name, &next);
    e3b4:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e3b6:	4620      	mov	r0, r4
    e3b8:	f00d fa57 	bl	1b86a <strncmp>
    e3bc:	4604      	mov	r4, r0
    e3be:	2800      	cmp	r0, #0
    e3c0:	d1f1      	bne.n	e3a6 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e3c2:	4d13      	ldr	r5, [pc, #76]	; (e410 <set+0x7c>)
    e3c4:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e3c8:	075b      	lsls	r3, r3, #29
    e3ca:	d506      	bpl.n	e3da <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e3cc:	2157      	movs	r1, #87	; 0x57
    e3ce:	4811      	ldr	r0, [pc, #68]	; (e414 <set+0x80>)
    e3d0:	f00c f829 	bl	1a426 <printk>
}
    e3d4:	4620      	mov	r0, r4
    e3d6:	b003      	add	sp, #12
    e3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e3da:	3d94      	subs	r5, #148	; 0x94
    e3dc:	2207      	movs	r2, #7
    e3de:	4629      	mov	r1, r5
    e3e0:	4638      	mov	r0, r7
    e3e2:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e3e4:	2806      	cmp	r0, #6
    e3e6:	d80a      	bhi.n	e3fe <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e3e8:	2145      	movs	r1, #69	; 0x45
    e3ea:	480b      	ldr	r0, [pc, #44]	; (e418 <set+0x84>)
    e3ec:	f00c f81b 	bl	1a426 <printk>
			(void)memset(bt_dev.id_addr, 0,
    e3f0:	2207      	movs	r2, #7
    e3f2:	4621      	mov	r1, r4
    e3f4:	4628      	mov	r0, r5
    e3f6:	f00d fa85 	bl	1b904 <memset>
			bt_dev.id_count = 0U;
    e3fa:	71ec      	strb	r4, [r5, #7]
    e3fc:	e7ea      	b.n	e3d4 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e3fe:	2307      	movs	r3, #7
    e400:	fbb0 f0f3 	udiv	r0, r0, r3
    e404:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e406:	e7e5      	b.n	e3d4 <set+0x40>
    e408:	00020c6e 	.word	0x00020c6e
    e40c:	0001efc1 	.word	0x0001efc1
    e410:	20008094 	.word	0x20008094
    e414:	00020c94 	.word	0x00020c94
    e418:	00020cbd 	.word	0x00020cbd

0000e41c <bt_settings_encode_key>:
{
    e41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e420:	b088      	sub	sp, #32
    e422:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e426:	799c      	ldrb	r4, [r3, #6]
    e428:	795d      	ldrb	r5, [r3, #5]
    e42a:	791e      	ldrb	r6, [r3, #4]
    e42c:	78df      	ldrb	r7, [r3, #3]
    e42e:	f893 c002 	ldrb.w	ip, [r3, #2]
    e432:	f893 e001 	ldrb.w	lr, [r3, #1]
    e436:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e438:	f1b8 0f00 	cmp.w	r8, #0
    e43c:	d00e      	beq.n	e45c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e43e:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e442:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e446:	4613      	mov	r3, r2
    e448:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e44c:	e9cd 4500 	strd	r4, r5, [sp]
    e450:	4a08      	ldr	r2, [pc, #32]	; (e474 <bt_settings_encode_key+0x58>)
    e452:	f00b fff5 	bl	1a440 <snprintk>
}
    e456:	b008      	add	sp, #32
    e458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e45c:	e9cd e305 	strd	lr, r3, [sp, #20]
    e460:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e464:	4613      	mov	r3, r2
    e466:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e46a:	4a03      	ldr	r2, [pc, #12]	; (e478 <bt_settings_encode_key+0x5c>)
    e46c:	9400      	str	r4, [sp, #0]
    e46e:	f00b ffe7 	bl	1a440 <snprintk>
}
    e472:	e7f0      	b.n	e456 <bt_settings_encode_key+0x3a>
    e474:	00020ce7 	.word	0x00020ce7
    e478:	00020d0b 	.word	0x00020d0b

0000e47c <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e47c:	4907      	ldr	r1, [pc, #28]	; (e49c <bt_settings_save_id+0x20>)
    e47e:	e8d1 3fef 	ldaex	r3, [r1]
    e482:	f043 0201 	orr.w	r2, r3, #1
    e486:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e48a:	2800      	cmp	r0, #0
    e48c:	d1f7      	bne.n	e47e <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e48e:	07db      	lsls	r3, r3, #31
    e490:	d403      	bmi.n	e49a <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e492:	4803      	ldr	r0, [pc, #12]	; (e4a0 <bt_settings_save_id+0x24>)
    e494:	3908      	subs	r1, #8
    e496:	f00f bb83 	b.w	1dba0 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e49a:	4770      	bx	lr
    e49c:	20008340 	.word	0x20008340
    e4a0:	2000a558 	.word	0x2000a558

0000e4a4 <commit>:

static int commit(void)
{
    e4a4:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e4a6:	4c13      	ldr	r4, [pc, #76]	; (e4f4 <commit+0x50>)
    e4a8:	79e3      	ldrb	r3, [r4, #7]
    e4aa:	b96b      	cbnz	r3, e4c8 <commit+0x24>
		bt_setup_public_id_addr();
    e4ac:	f001 ffc0 	bl	10430 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e4b0:	79e3      	ldrb	r3, [r4, #7]
    e4b2:	b94b      	cbnz	r3, e4c8 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e4b4:	f002 f84a 	bl	1054c <bt_setup_random_id_addr>
		if (err) {
    e4b8:	4604      	mov	r4, r0
    e4ba:	b128      	cbz	r0, e4c8 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e4bc:	2145      	movs	r1, #69	; 0x45
    e4be:	480e      	ldr	r0, [pc, #56]	; (e4f8 <commit+0x54>)
    e4c0:	f00b ffb1 	bl	1a426 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e4c4:	4620      	mov	r0, r4
    e4c6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e4c8:	4d0c      	ldr	r5, [pc, #48]	; (e4fc <commit+0x58>)
    e4ca:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e4ce:	079b      	lsls	r3, r3, #30
    e4d0:	d401      	bmi.n	e4d6 <commit+0x32>
		bt_finalize_init();
    e4d2:	f001 fc95 	bl	fe00 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e4d6:	e8d5 4fef 	ldaex	r4, [r5]
    e4da:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e4de:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e4e2:	2a00      	cmp	r2, #0
    e4e4:	d1f7      	bne.n	e4d6 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e4e6:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e4ea:	d0eb      	beq.n	e4c4 <commit+0x20>
		bt_settings_save_id();
    e4ec:	f7ff ffc6 	bl	e47c <bt_settings_save_id>
	return 0;
    e4f0:	2400      	movs	r4, #0
    e4f2:	e7e7      	b.n	e4c4 <commit+0x20>
    e4f4:	20008000 	.word	0x20008000
    e4f8:	00020d2c 	.word	0x00020d2c
    e4fc:	20008094 	.word	0x20008094

0000e500 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e500:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e502:	f7fd fa25 	bl	b950 <settings_subsys_init>
	if (err) {
    e506:	4604      	mov	r4, r0
    e508:	b120      	cbz	r0, e514 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e50a:	4602      	mov	r2, r0
    e50c:	2145      	movs	r1, #69	; 0x45
    e50e:	4802      	ldr	r0, [pc, #8]	; (e518 <bt_settings_init+0x18>)
    e510:	f00b ff89 	bl	1a426 <printk>
		return err;
	}

	return 0;
}
    e514:	4620      	mov	r0, r4
    e516:	bd10      	pop	{r4, pc}
    e518:	00020d55 	.word	0x00020d55

0000e51c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e51c:	4603      	mov	r3, r0
    e51e:	b430      	push	{r4, r5}
	switch (src->type) {
    e520:	781a      	ldrb	r2, [r3, #0]
{
    e522:	4608      	mov	r0, r1
	switch (src->type) {
    e524:	2a01      	cmp	r2, #1
    e526:	d013      	beq.n	e550 <uuid_to_uuid128+0x34>
    e528:	2a02      	cmp	r2, #2
    e52a:	d026      	beq.n	e57a <uuid_to_uuid128+0x5e>
    e52c:	b972      	cbnz	r2, e54c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e52e:	4a15      	ldr	r2, [pc, #84]	; (e584 <uuid_to_uuid128+0x68>)
    e530:	f102 0410 	add.w	r4, r2, #16
    e534:	f852 5b04 	ldr.w	r5, [r2], #4
    e538:	42a2      	cmp	r2, r4
    e53a:	f841 5b04 	str.w	r5, [r1], #4
    e53e:	d1f9      	bne.n	e534 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e540:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e542:	7812      	ldrb	r2, [r2, #0]
    e544:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e546:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e548:	0a1b      	lsrs	r3, r3, #8
    e54a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e54c:	bc30      	pop	{r4, r5}
    e54e:	4770      	bx	lr
		*dst = uuid128_base;
    e550:	4a0c      	ldr	r2, [pc, #48]	; (e584 <uuid_to_uuid128+0x68>)
    e552:	f102 0410 	add.w	r4, r2, #16
    e556:	f852 5b04 	ldr.w	r5, [r2], #4
    e55a:	42a2      	cmp	r2, r4
    e55c:	f841 5b04 	str.w	r5, [r1], #4
    e560:	d1f9      	bne.n	e556 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e562:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e564:	7812      	ldrb	r2, [r2, #0]
    e566:	700a      	strb	r2, [r1, #0]
    e568:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e56c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e56e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e570:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e572:	0a1b      	lsrs	r3, r3, #8
    e574:	7382      	strb	r2, [r0, #14]
    e576:	7403      	strb	r3, [r0, #16]
}
    e578:	e7e8      	b.n	e54c <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e57a:	2211      	movs	r2, #17
}
    e57c:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e57e:	4619      	mov	r1, r3
    e580:	f00d b995 	b.w	1b8ae <memcpy>
    e584:	00020d8e 	.word	0x00020d8e

0000e588 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e588:	2801      	cmp	r0, #1
{
    e58a:	b570      	push	{r4, r5, r6, lr}
    e58c:	4605      	mov	r5, r0
    e58e:	4616      	mov	r6, r2
    e590:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e592:	d010      	beq.n	e5b6 <bt_buf_get_rx+0x2e>
    e594:	2803      	cmp	r0, #3
    e596:	d00a      	beq.n	e5ae <bt_buf_get_rx+0x26>
    e598:	2805      	cmp	r0, #5
    e59a:	d008      	beq.n	e5ae <bt_buf_get_rx+0x26>
    e59c:	490c      	ldr	r1, [pc, #48]	; (e5d0 <bt_buf_get_rx+0x48>)
    e59e:	480d      	ldr	r0, [pc, #52]	; (e5d4 <bt_buf_get_rx+0x4c>)
    e5a0:	2233      	movs	r2, #51	; 0x33
    e5a2:	f00b ff40 	bl	1a426 <printk>
    e5a6:	2133      	movs	r1, #51	; 0x33
    e5a8:	4809      	ldr	r0, [pc, #36]	; (e5d0 <bt_buf_get_rx+0x48>)
    e5aa:	f00c f9e2 	bl	1a972 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e5ae:	4632      	mov	r2, r6
    e5b0:	4623      	mov	r3, r4
    e5b2:	4809      	ldr	r0, [pc, #36]	; (e5d8 <bt_buf_get_rx+0x50>)
    e5b4:	e000      	b.n	e5b8 <bt_buf_get_rx+0x30>
    e5b6:	4809      	ldr	r0, [pc, #36]	; (e5dc <bt_buf_get_rx+0x54>)
    e5b8:	f00e fc89 	bl	1cece <net_buf_alloc_fixed>
    e5bc:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e5be:	b12c      	cbz	r4, e5cc <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    e5c0:	2101      	movs	r1, #1
    e5c2:	f104 0008 	add.w	r0, r4, #8
    e5c6:	f006 fe69 	bl	1529c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e5ca:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e5cc:	4620      	mov	r0, r4
    e5ce:	bd70      	pop	{r4, r5, r6, pc}
    e5d0:	00020d9f 	.word	0x00020d9f
    e5d4:	0001f98f 	.word	0x0001f98f
    e5d8:	200086bc 	.word	0x200086bc
    e5dc:	20008798 	.word	0x20008798

0000e5e0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e5e0:	4602      	mov	r2, r0
    e5e2:	460b      	mov	r3, r1
    e5e4:	b570      	push	{r4, r5, r6, lr}
    e5e6:	f04f 0120 	mov.w	r1, #32
    e5ea:	f3ef 8511 	mrs	r5, BASEPRI
    e5ee:	f381 8811 	msr	BASEPRI, r1
    e5f2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    e5f6:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    e5f8:	490b      	ldr	r1, [pc, #44]	; (e628 <bt_buf_get_cmd_complete+0x48>)
    e5fa:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    e5fe:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    e602:	f385 8811 	msr	BASEPRI, r5
    e606:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    e60a:	b924      	cbnz	r4, e616 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    e60c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e610:	2001      	movs	r0, #1
    e612:	f7ff bfb9 	b.w	e588 <bt_buf_get_rx>
    e616:	2101      	movs	r1, #1
		buf->len = 0U;
    e618:	81a0      	strh	r0, [r4, #12]
    e61a:	7521      	strb	r1, [r4, #20]
    e61c:	f104 0008 	add.w	r0, r4, #8
    e620:	f006 fe3c 	bl	1529c <net_buf_simple_reserve>
}
    e624:	4620      	mov	r0, r4
    e626:	bd70      	pop	{r4, r5, r6, pc}
    e628:	20008000 	.word	0x20008000

0000e62c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e62c:	b570      	push	{r4, r5, r6, lr}
    e62e:	4604      	mov	r4, r0
	switch (evt) {
    e630:	2c0f      	cmp	r4, #15
{
    e632:	460d      	mov	r5, r1
    e634:	4610      	mov	r0, r2
    e636:	4619      	mov	r1, r3
	switch (evt) {
    e638:	d805      	bhi.n	e646 <bt_buf_get_evt+0x1a>
    e63a:	2c0d      	cmp	r4, #13
    e63c:	d912      	bls.n	e664 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    e63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    e642:	f7ff bfcd 	b.w	e5e0 <bt_buf_get_cmd_complete>
	switch (evt) {
    e646:	2c13      	cmp	r4, #19
    e648:	d10c      	bne.n	e664 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    e64a:	480b      	ldr	r0, [pc, #44]	; (e678 <bt_buf_get_evt+0x4c>)
    e64c:	f00e fc3f 	bl	1cece <net_buf_alloc_fixed>
			if (buf) {
    e650:	4604      	mov	r4, r0
    e652:	b128      	cbz	r0, e660 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    e654:	2101      	movs	r1, #1
    e656:	3008      	adds	r0, #8
    e658:	f006 fe20 	bl	1529c <net_buf_simple_reserve>
    e65c:	2301      	movs	r3, #1
    e65e:	7523      	strb	r3, [r4, #20]
}
    e660:	4620      	mov	r0, r4
    e662:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    e664:	4602      	mov	r2, r0
    e666:	460b      	mov	r3, r1
		if (discardable) {
    e668:	b10d      	cbz	r5, e66e <bt_buf_get_evt+0x42>
    e66a:	4804      	ldr	r0, [pc, #16]	; (e67c <bt_buf_get_evt+0x50>)
    e66c:	e7ee      	b.n	e64c <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e66e:	2001      	movs	r0, #1
}
    e670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e674:	f7ff bf88 	b.w	e588 <bt_buf_get_rx>
    e678:	200087c4 	.word	0x200087c4
    e67c:	20008714 	.word	0x20008714

0000e680 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    e680:	6883      	ldr	r3, [r0, #8]
    e682:	2157      	movs	r1, #87	; 0x57
    e684:	781a      	ldrb	r2, [r3, #0]
    e686:	4801      	ldr	r0, [pc, #4]	; (e68c <hci_data_buf_overflow+0xc>)
    e688:	f00b becd 	b.w	1a426 <printk>
    e68c:	00020dd5 	.word	0x00020dd5

0000e690 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e692:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e694:	2500      	movs	r5, #0
    e696:	4f09      	ldr	r7, [pc, #36]	; (e6bc <id_find+0x2c>)
    e698:	79fb      	ldrb	r3, [r7, #7]
    e69a:	b2ec      	uxtb	r4, r5
    e69c:	42a3      	cmp	r3, r4
    e69e:	d802      	bhi.n	e6a6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e6a0:	f06f 0401 	mvn.w	r4, #1
    e6a4:	e008      	b.n	e6b8 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    e6a6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e6aa:	4630      	mov	r0, r6
    e6ac:	4439      	add	r1, r7
    e6ae:	f00d f9fc 	bl	1baaa <bt_addr_le_cmp>
    e6b2:	3501      	adds	r5, #1
    e6b4:	2800      	cmp	r0, #0
    e6b6:	d1ef      	bne.n	e698 <id_find+0x8>
}
    e6b8:	4620      	mov	r0, r4
    e6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6bc:	20008000 	.word	0x20008000

0000e6c0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e6c0:	6843      	ldr	r3, [r0, #4]
{
    e6c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e6c4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e6c6:	0558      	lsls	r0, r3, #21
    e6c8:	d502      	bpl.n	e6d0 <valid_adv_param+0x10>
		return false;
    e6ca:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    e6cc:	b003      	add	sp, #12
    e6ce:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e6d0:	6922      	ldr	r2, [r4, #16]
    e6d2:	b10a      	cbz	r2, e6d8 <valid_adv_param+0x18>
    e6d4:	07d9      	lsls	r1, r3, #31
    e6d6:	d5f8      	bpl.n	e6ca <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    e6d8:	4d1a      	ldr	r5, [pc, #104]	; (e744 <valid_adv_param+0x84>)
    e6da:	7820      	ldrb	r0, [r4, #0]
    e6dc:	79eb      	ldrb	r3, [r5, #7]
    e6de:	4283      	cmp	r3, r0
    e6e0:	d9f3      	bls.n	e6ca <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    e6e2:	2300      	movs	r3, #0
    e6e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e6e8:	4669      	mov	r1, sp
    e6ea:	4428      	add	r0, r5
    e6ec:	9300      	str	r3, [sp, #0]
    e6ee:	f8cd 3003 	str.w	r3, [sp, #3]
    e6f2:	f00d f9da 	bl	1baaa <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    e6f6:	2800      	cmp	r0, #0
    e6f8:	d0e7      	beq.n	e6ca <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e6fa:	6860      	ldr	r0, [r4, #4]
    e6fc:	07c2      	lsls	r2, r0, #31
    e6fe:	d406      	bmi.n	e70e <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    e700:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    e704:	2b08      	cmp	r3, #8
    e706:	d802      	bhi.n	e70e <valid_adv_param+0x4e>
    e708:	68a3      	ldr	r3, [r4, #8]
    e70a:	2b9f      	cmp	r3, #159	; 0x9f
    e70c:	d9dd      	bls.n	e6ca <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    e70e:	f010 0f30 	tst.w	r0, #48	; 0x30
    e712:	d002      	beq.n	e71a <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    e714:	6923      	ldr	r3, [r4, #16]
    e716:	2b00      	cmp	r3, #0
    e718:	d0d7      	beq.n	e6ca <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    e71a:	06c3      	lsls	r3, r0, #27
    e71c:	d401      	bmi.n	e722 <valid_adv_param+0x62>
    e71e:	6923      	ldr	r3, [r4, #16]
    e720:	b943      	cbnz	r3, e734 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    e722:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e726:	429a      	cmp	r2, r3
    e728:	d8cf      	bhi.n	e6ca <valid_adv_param+0xa>
    e72a:	2a1f      	cmp	r2, #31
    e72c:	d9cd      	bls.n	e6ca <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    e72e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e732:	d8ca      	bhi.n	e6ca <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    e734:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    e738:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    e73c:	bf18      	it	ne
    e73e:	2001      	movne	r0, #1
    e740:	e7c4      	b.n	e6cc <valid_adv_param+0xc>
    e742:	bf00      	nop
    e744:	20008000 	.word	0x20008000

0000e748 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e748:	6883      	ldr	r3, [r0, #8]
{
    e74a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e74c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    e74e:	4620      	mov	r0, r4
    e750:	f002 fd3c 	bl	111cc <bt_conn_lookup_handle>
	if (!conn) {
    e754:	b930      	cbnz	r0, e764 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e756:	4622      	mov	r2, r4
}
    e758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e75c:	2145      	movs	r1, #69	; 0x45
    e75e:	4803      	ldr	r0, [pc, #12]	; (e76c <le_data_len_change+0x24>)
    e760:	f00b be61 	b.w	1a426 <printk>
}
    e764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    e768:	f002 bd0c 	b.w	11184 <bt_conn_unref>
    e76c:	00020e02 	.word	0x00020e02

0000e770 <hci_disconn_complete_prio>:
{
    e770:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e772:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    e774:	781a      	ldrb	r2, [r3, #0]
    e776:	b9aa      	cbnz	r2, e7a4 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e778:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    e77c:	4628      	mov	r0, r5
    e77e:	f002 fd25 	bl	111cc <bt_conn_lookup_handle>
	if (!conn) {
    e782:	4604      	mov	r4, r0
    e784:	b930      	cbnz	r0, e794 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e786:	462a      	mov	r2, r5
}
    e788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    e78c:	2145      	movs	r1, #69	; 0x45
    e78e:	4806      	ldr	r0, [pc, #24]	; (e7a8 <hci_disconn_complete_prio+0x38>)
    e790:	f00b be49 	b.w	1a426 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e794:	2101      	movs	r1, #1
    e796:	f002 fd21 	bl	111dc <bt_conn_set_state>
	bt_conn_unref(conn);
    e79a:	4620      	mov	r0, r4
}
    e79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    e7a0:	f002 bcf0 	b.w	11184 <bt_conn_unref>
}
    e7a4:	bd38      	pop	{r3, r4, r5, pc}
    e7a6:	bf00      	nop
    e7a8:	00020e2b 	.word	0x00020e2b

0000e7ac <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    e7ac:	2101      	movs	r1, #1
{
    e7ae:	b508      	push	{r3, lr}
    e7b0:	3008      	adds	r0, #8
    e7b2:	f006 febd 	bl	15530 <net_buf_simple_pull_mem>
}
    e7b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    e7ba:	7802      	ldrb	r2, [r0, #0]
    e7bc:	2145      	movs	r1, #69	; 0x45
    e7be:	4801      	ldr	r0, [pc, #4]	; (e7c4 <hci_hardware_error+0x18>)
    e7c0:	f00b be31 	b.w	1a426 <printk>
    e7c4:	00020e56 	.word	0x00020e56

0000e7c8 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    e7c8:	8981      	ldrh	r1, [r0, #12]
{
    e7ca:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e7cc:	6880      	ldr	r0, [r0, #8]
    e7ce:	f7ff fd63 	bl	e298 <bt_hex_real>
}
    e7d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e7d6:	4602      	mov	r2, r0
    e7d8:	2157      	movs	r1, #87	; 0x57
    e7da:	4801      	ldr	r0, [pc, #4]	; (e7e0 <hci_vendor_event+0x18>)
    e7dc:	f00b be23 	b.w	1a426 <printk>
    e7e0:	00020e7d 	.word	0x00020e7d

0000e7e4 <le_conn_update_complete>:
{
    e7e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    e7e6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    e7e8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e7ec:	4630      	mov	r0, r6
    e7ee:	f002 fced 	bl	111cc <bt_conn_lookup_handle>
	if (!conn) {
    e7f2:	4604      	mov	r4, r0
    e7f4:	b938      	cbnz	r0, e806 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e7f6:	4632      	mov	r2, r6
    e7f8:	2145      	movs	r1, #69	; 0x45
    e7fa:	4821      	ldr	r0, [pc, #132]	; (e880 <le_conn_update_complete+0x9c>)
}
    e7fc:	b002      	add	sp, #8
    e7fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e802:	f00b be10 	b.w	1a426 <printk>
	if (!evt->status) {
    e806:	782b      	ldrb	r3, [r5, #0]
    e808:	b9cb      	cbnz	r3, e83e <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    e80a:	792a      	ldrb	r2, [r5, #4]
    e80c:	78eb      	ldrb	r3, [r5, #3]
    e80e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e812:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    e816:	79aa      	ldrb	r2, [r5, #6]
    e818:	796b      	ldrb	r3, [r5, #5]
    e81a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e81e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e822:	79eb      	ldrb	r3, [r5, #7]
    e824:	7a2a      	ldrb	r2, [r5, #8]
    e826:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e82a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    e82e:	f002 faeb 	bl	10e08 <notify_le_param_updated>
	bt_conn_unref(conn);
    e832:	4620      	mov	r0, r4
}
    e834:	b002      	add	sp, #8
    e836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    e83a:	f002 bca3 	b.w	11184 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    e83e:	2b1a      	cmp	r3, #26
    e840:	d1f7      	bne.n	e832 <le_conn_update_complete+0x4e>
    e842:	78c3      	ldrb	r3, [r0, #3]
    e844:	2b01      	cmp	r3, #1
    e846:	d1f4      	bne.n	e832 <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e848:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e84c:	3004      	adds	r0, #4
    e84e:	f00d f921 	bl	1ba94 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    e852:	0543      	lsls	r3, r0, #21
    e854:	d4ed      	bmi.n	e832 <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    e856:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    e85a:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    e85c:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    e860:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    e864:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    e866:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    e86a:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    e86e:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    e872:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    e876:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    e87a:	f003 f9f9 	bl	11c70 <bt_l2cap_update_conn_param>
    e87e:	e7d8      	b.n	e832 <le_conn_update_complete+0x4e>
    e880:	00020e02 	.word	0x00020e02

0000e884 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    e884:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e886:	4c0c      	ldr	r4, [pc, #48]	; (e8b8 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    e888:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e88a:	2205      	movs	r2, #5
    e88c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    e890:	f002 fdda 	bl	11448 <bt_conn_lookup_state_le>
		if (!conn) {
    e894:	b970      	cbnz	r0, e8b4 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    e896:	4b09      	ldr	r3, [pc, #36]	; (e8bc <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e898:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    e89a:	6818      	ldr	r0, [r3, #0]
    e89c:	889a      	ldrh	r2, [r3, #4]
    e89e:	799b      	ldrb	r3, [r3, #6]
    e8a0:	9000      	str	r0, [sp, #0]
    e8a2:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e8a6:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    e8aa:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    e8ac:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e8b0:	f002 fdca 	bl	11448 <bt_conn_lookup_state_le>
}
    e8b4:	b002      	add	sp, #8
    e8b6:	bd10      	pop	{r4, pc}
    e8b8:	20008000 	.word	0x20008000
    e8bc:	0001e390 	.word	0x0001e390

0000e8c0 <handle_event>:
{
    e8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e8c2:	4605      	mov	r5, r0
    e8c4:	4614      	mov	r4, r2
    e8c6:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    e8c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    e8cc:	7822      	ldrb	r2, [r4, #0]
    e8ce:	42aa      	cmp	r2, r5
    e8d0:	d010      	beq.n	e8f4 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    e8d2:	3408      	adds	r4, #8
    e8d4:	429c      	cmp	r4, r3
    e8d6:	d1f9      	bne.n	e8cc <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    e8d8:	8984      	ldrh	r4, [r0, #12]
    e8da:	6880      	ldr	r0, [r0, #8]
    e8dc:	4621      	mov	r1, r4
    e8de:	f7ff fcdb 	bl	e298 <bt_hex_real>
    e8e2:	4623      	mov	r3, r4
    e8e4:	9000      	str	r0, [sp, #0]
    e8e6:	462a      	mov	r2, r5
    e8e8:	2157      	movs	r1, #87	; 0x57
    e8ea:	480b      	ldr	r0, [pc, #44]	; (e918 <handle_event+0x58>)
    e8ec:	f00b fd9b 	bl	1a426 <printk>
}
    e8f0:	b003      	add	sp, #12
    e8f2:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    e8f4:	8982      	ldrh	r2, [r0, #12]
    e8f6:	7863      	ldrb	r3, [r4, #1]
    e8f8:	4293      	cmp	r3, r2
    e8fa:	d907      	bls.n	e90c <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    e8fc:	462b      	mov	r3, r5
    e8fe:	2145      	movs	r1, #69	; 0x45
    e900:	4806      	ldr	r0, [pc, #24]	; (e91c <handle_event+0x5c>)
}
    e902:	b003      	add	sp, #12
    e904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    e908:	f00b bd8d 	b.w	1a426 <printk>
		handler->handler(buf);
    e90c:	6863      	ldr	r3, [r4, #4]
}
    e90e:	b003      	add	sp, #12
    e910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    e914:	4718      	bx	r3
    e916:	bf00      	nop
    e918:	00020ecd 	.word	0x00020ecd
    e91c:	00020ea6 	.word	0x00020ea6

0000e920 <hci_le_meta_event>:
{
    e920:	b510      	push	{r4, lr}
    e922:	2101      	movs	r1, #1
    e924:	4604      	mov	r4, r0
    e926:	3008      	adds	r0, #8
    e928:	f006 fe02 	bl	15530 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e92c:	4621      	mov	r1, r4
}
    e92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e932:	2308      	movs	r3, #8
    e934:	4a01      	ldr	r2, [pc, #4]	; (e93c <hci_le_meta_event+0x1c>)
    e936:	7800      	ldrb	r0, [r0, #0]
    e938:	f7ff bfc2 	b.w	e8c0 <handle_event>
    e93c:	0001e7a0 	.word	0x0001e7a0

0000e940 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e940:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e942:	4d18      	ldr	r5, [pc, #96]	; (e9a4 <id_create.constprop.0+0x64>)
    e944:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e948:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e94a:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e94c:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e94e:	b1b1      	cbz	r1, e97e <id_create.constprop.0+0x3e>
    e950:	2300      	movs	r3, #0
    e952:	4620      	mov	r0, r4
    e954:	a902      	add	r1, sp, #8
    e956:	9302      	str	r3, [sp, #8]
    e958:	f8cd 300b 	str.w	r3, [sp, #11]
    e95c:	f00d f8a5 	bl	1baaa <bt_addr_le_cmp>
    e960:	b168      	cbz	r0, e97e <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e962:	4621      	mov	r1, r4
    e964:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e966:	f00d f892 	bl	1ba8e <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e96a:	480f      	ldr	r0, [pc, #60]	; (e9a8 <id_create.constprop.0+0x68>)
    e96c:	f00d f88c 	bl	1ba88 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e970:	0783      	lsls	r3, r0, #30
    e972:	d515      	bpl.n	e9a0 <id_create.constprop.0+0x60>
}
    e974:	b005      	add	sp, #20
    e976:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    e97a:	f7ff bd7f 	b.w	e47c <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    e97e:	4668      	mov	r0, sp
    e980:	f00d f853 	bl	1ba2a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    e984:	4668      	mov	r0, sp
    e986:	f7ff fe83 	bl	e690 <id_find>
    e98a:	2800      	cmp	r0, #0
    e98c:	daf7      	bge.n	e97e <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e98e:	4669      	mov	r1, sp
    e990:	4628      	mov	r0, r5
    e992:	f00d f87c 	bl	1ba8e <bt_addr_le_copy>
		if (addr) {
    e996:	2c00      	cmp	r4, #0
    e998:	d0e7      	beq.n	e96a <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e99a:	4629      	mov	r1, r5
    e99c:	4620      	mov	r0, r4
    e99e:	e7e2      	b.n	e966 <id_create.constprop.0+0x26>
}
    e9a0:	b005      	add	sp, #20
    e9a2:	bd30      	pop	{r4, r5, pc}
    e9a4:	20008000 	.word	0x20008000
    e9a8:	20008094 	.word	0x20008094

0000e9ac <hci_rx_thread>:
{
    e9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    e9b0:	4f40      	ldr	r7, [pc, #256]	; (eab4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    e9b2:	f8df 8104 	ldr.w	r8, [pc, #260]	; eab8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    e9b6:	4e41      	ldr	r6, [pc, #260]	; (eabc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    e9b8:	f04f 32ff 	mov.w	r2, #4294967295
    e9bc:	f04f 33ff 	mov.w	r3, #4294967295
    e9c0:	4638      	mov	r0, r7
    e9c2:	f006 fc3b 	bl	1523c <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e9c6:	7d02      	ldrb	r2, [r0, #20]
    e9c8:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    e9ca:	2a01      	cmp	r2, #1
    e9cc:	d041      	beq.n	ea52 <hci_rx_thread+0xa6>
    e9ce:	2a03      	cmp	r2, #3
    e9d0:	d16c      	bne.n	eaac <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e9d2:	8983      	ldrh	r3, [r0, #12]
    e9d4:	2b03      	cmp	r3, #3
    e9d6:	d80b      	bhi.n	e9f0 <hci_rx_thread+0x44>
    e9d8:	f240 42ac 	movw	r2, #1196	; 0x4ac
    e9dc:	4631      	mov	r1, r6
    e9de:	4838      	ldr	r0, [pc, #224]	; (eac0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    e9e0:	f00b fd21 	bl	1a426 <printk>
    e9e4:	4040      	eors	r0, r0
    e9e6:	f380 8811 	msr	BASEPRI, r0
    e9ea:	f04f 0003 	mov.w	r0, #3
    e9ee:	df02      	svc	2
    e9f0:	2104      	movs	r1, #4
    e9f2:	f104 0008 	add.w	r0, r4, #8
    e9f6:	f006 fd9b 	bl	15530 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e9fa:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    e9fc:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    e9fe:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ea02:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ea04:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ea06:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    ea0a:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    ea0c:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    ea0e:	d007      	beq.n	ea20 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ea10:	2145      	movs	r1, #69	; 0x45
    ea12:	482c      	ldr	r0, [pc, #176]	; (eac4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
    ea14:	f00b fd07 	bl	1a426 <printk>
			net_buf_unref(buf);
    ea18:	4620      	mov	r0, r4
    ea1a:	f006 fc91 	bl	15340 <net_buf_unref>
			break;
    ea1e:	e015      	b.n	ea4c <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    ea20:	f002 fbd4 	bl	111cc <bt_conn_lookup_handle>
	if (!conn) {
    ea24:	4605      	mov	r5, r0
    ea26:	b928      	cbnz	r0, ea34 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ea28:	2145      	movs	r1, #69	; 0x45
    ea2a:	8ae2      	ldrh	r2, [r4, #22]
    ea2c:	4826      	ldr	r0, [pc, #152]	; (eac8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ea2e:	f00b fcfa 	bl	1a426 <printk>
    ea32:	e7f1      	b.n	ea18 <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    ea34:	f002 ff4a 	bl	118cc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ea38:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ea3a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    ea3c:	ea4f 3219 	mov.w	r2, r9, lsr #12
    ea40:	4628      	mov	r0, r5
    ea42:	f002 fa79 	bl	10f38 <bt_conn_recv>
	bt_conn_unref(conn);
    ea46:	4628      	mov	r0, r5
    ea48:	f002 fb9c 	bl	11184 <bt_conn_unref>
	z_impl_k_yield();
    ea4c:	f00a f9d4 	bl	18df8 <z_impl_k_yield>
	while (1) {
    ea50:	e7b2      	b.n	e9b8 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ea52:	8983      	ldrh	r3, [r0, #12]
    ea54:	2b01      	cmp	r3, #1
    ea56:	d80b      	bhi.n	ea70 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
    ea58:	f241 32fb 	movw	r2, #5115	; 0x13fb
    ea5c:	4631      	mov	r1, r6
    ea5e:	4818      	ldr	r0, [pc, #96]	; (eac0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    ea60:	f00b fce1 	bl	1a426 <printk>
    ea64:	4040      	eors	r0, r0
    ea66:	f380 8811 	msr	BASEPRI, r0
    ea6a:	f04f 0003 	mov.w	r0, #3
    ea6e:	df02      	svc	2
    ea70:	2102      	movs	r1, #2
    ea72:	f104 0008 	add.w	r0, r4, #8
    ea76:	f006 fd5b 	bl	15530 <net_buf_simple_pull_mem>
    ea7a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ea7c:	7800      	ldrb	r0, [r0, #0]
    ea7e:	f00c ffe2 	bl	1ba46 <bt_hci_evt_get_flags>
    ea82:	0783      	lsls	r3, r0, #30
    ea84:	d40b      	bmi.n	ea9e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    ea86:	f241 32ff 	movw	r2, #5119	; 0x13ff
    ea8a:	4631      	mov	r1, r6
    ea8c:	480c      	ldr	r0, [pc, #48]	; (eac0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    ea8e:	f00b fcca 	bl	1a426 <printk>
    ea92:	4040      	eors	r0, r0
    ea94:	f380 8811 	msr	BASEPRI, r0
    ea98:	f04f 0003 	mov.w	r0, #3
    ea9c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ea9e:	2304      	movs	r3, #4
    eaa0:	4642      	mov	r2, r8
    eaa2:	4621      	mov	r1, r4
    eaa4:	7828      	ldrb	r0, [r5, #0]
    eaa6:	f7ff ff0b 	bl	e8c0 <handle_event>
	net_buf_unref(buf);
    eaaa:	e7b5      	b.n	ea18 <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    eaac:	2145      	movs	r1, #69	; 0x45
    eaae:	4807      	ldr	r0, [pc, #28]	; (eacc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
    eab0:	e7bd      	b.n	ea2e <hci_rx_thread+0x82>
    eab2:	bf00      	nop
    eab4:	200080fc 	.word	0x200080fc
    eab8:	0001e7f0 	.word	0x0001e7f0
    eabc:	00020ef4 	.word	0x00020ef4
    eac0:	0001f98f 	.word	0x0001f98f
    eac4:	00020f28 	.word	0x00020f28
    eac8:	00020f51 	.word	0x00020f51
    eacc:	00020f78 	.word	0x00020f78

0000ead0 <hci_cmd_done>:
{
    ead0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ead4:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ead6:	7990      	ldrb	r0, [r2, #6]
{
    ead8:	460f      	mov	r7, r1
    eada:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    eadc:	f006 fab0 	bl	15040 <net_buf_pool_get>
    eae0:	4d2a      	ldr	r5, [pc, #168]	; (eb8c <hci_cmd_done+0xbc>)
    eae2:	4285      	cmp	r5, r0
    eae4:	d00e      	beq.n	eb04 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    eae6:	79a4      	ldrb	r4, [r4, #6]
    eae8:	4620      	mov	r0, r4
    eaea:	f006 faa9 	bl	15040 <net_buf_pool_get>
    eaee:	4623      	mov	r3, r4
    eaf0:	e9cd 0500 	strd	r0, r5, [sp]
    eaf4:	4632      	mov	r2, r6
    eaf6:	2157      	movs	r1, #87	; 0x57
    eaf8:	4825      	ldr	r0, [pc, #148]	; (eb90 <hci_cmd_done+0xc0>)
    eafa:	f00b fc94 	bl	1a426 <printk>
}
    eafe:	b002      	add	sp, #8
    eb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    eb04:	4620      	mov	r0, r4
    eb06:	f006 faa3 	bl	15050 <net_buf_id>
    eb0a:	f04f 080c 	mov.w	r8, #12
    eb0e:	4d21      	ldr	r5, [pc, #132]	; (eb94 <hci_cmd_done+0xc4>)
    eb10:	fb08 5000 	mla	r0, r8, r0, r5
    eb14:	8843      	ldrh	r3, [r0, #2]
    eb16:	42b3      	cmp	r3, r6
    eb18:	d00a      	beq.n	eb30 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    eb1a:	4620      	mov	r0, r4
    eb1c:	f006 fa98 	bl	15050 <net_buf_id>
    eb20:	fb08 5000 	mla	r0, r8, r0, r5
    eb24:	4632      	mov	r2, r6
    eb26:	8843      	ldrh	r3, [r0, #2]
    eb28:	2157      	movs	r1, #87	; 0x57
    eb2a:	481b      	ldr	r0, [pc, #108]	; (eb98 <hci_cmd_done+0xc8>)
    eb2c:	f00b fc7b 	bl	1a426 <printk>
	if (cmd(buf)->state && !status) {
    eb30:	4620      	mov	r0, r4
    eb32:	f006 fa8d 	bl	15050 <net_buf_id>
    eb36:	260c      	movs	r6, #12
    eb38:	fb06 5000 	mla	r0, r6, r0, r5
    eb3c:	6843      	ldr	r3, [r0, #4]
    eb3e:	b15b      	cbz	r3, eb58 <hci_cmd_done+0x88>
    eb40:	b957      	cbnz	r7, eb58 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    eb42:	4620      	mov	r0, r4
    eb44:	f006 fa84 	bl	15050 <net_buf_id>
    eb48:	fb06 5000 	mla	r0, r6, r0, r5
    eb4c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    eb4e:	7a1a      	ldrb	r2, [r3, #8]
    eb50:	e9d3 0100 	ldrd	r0, r1, [r3]
    eb54:	f00c ffb7 	bl	1bac6 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    eb58:	4620      	mov	r0, r4
    eb5a:	f006 fa79 	bl	15050 <net_buf_id>
    eb5e:	260c      	movs	r6, #12
    eb60:	fb06 5000 	mla	r0, r6, r0, r5
    eb64:	6883      	ldr	r3, [r0, #8]
    eb66:	2b00      	cmp	r3, #0
    eb68:	d0c9      	beq.n	eafe <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    eb6a:	4620      	mov	r0, r4
    eb6c:	f006 fa70 	bl	15050 <net_buf_id>
    eb70:	4370      	muls	r0, r6
    eb72:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    eb74:	4620      	mov	r0, r4
    eb76:	f006 fa6b 	bl	15050 <net_buf_id>
    eb7a:	fb06 5500 	mla	r5, r6, r0, r5
    eb7e:	68a8      	ldr	r0, [r5, #8]
}
    eb80:	b002      	add	sp, #8
    eb82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    eb86:	f00a ba79 	b.w	1907c <z_impl_k_sem_give>
    eb8a:	bf00      	nop
    eb8c:	2000876c 	.word	0x2000876c
    eb90:	00020f91 	.word	0x00020f91
    eb94:	2000ab18 	.word	0x2000ab18
    eb98:	00020fcb 	.word	0x00020fcb

0000eb9c <hci_cmd_status>:
{
    eb9c:	b538      	push	{r3, r4, r5, lr}
    eb9e:	2104      	movs	r1, #4
    eba0:	4604      	mov	r4, r0
    eba2:	3008      	adds	r0, #8
    eba4:	f006 fcc4 	bl	15530 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    eba8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    ebaa:	7801      	ldrb	r1, [r0, #0]
    ebac:	4622      	mov	r2, r4
    ebae:	8840      	ldrh	r0, [r0, #2]
    ebb0:	f7ff ff8e 	bl	ead0 <hci_cmd_done>
	if (ncmd) {
    ebb4:	b125      	cbz	r5, ebc0 <hci_cmd_status+0x24>
}
    ebb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ebba:	4802      	ldr	r0, [pc, #8]	; (ebc4 <hci_cmd_status+0x28>)
    ebbc:	f00a ba5e 	b.w	1907c <z_impl_k_sem_give>
    ebc0:	bd38      	pop	{r3, r4, r5, pc}
    ebc2:	bf00      	nop
    ebc4:	200080e0 	.word	0x200080e0

0000ebc8 <hci_cmd_complete>:
{
    ebc8:	b538      	push	{r3, r4, r5, lr}
    ebca:	2103      	movs	r1, #3
    ebcc:	4604      	mov	r4, r0
    ebce:	3008      	adds	r0, #8
    ebd0:	f006 fcae 	bl	15530 <net_buf_simple_pull_mem>
	status = buf->data[0];
    ebd4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    ebd6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    ebd8:	4622      	mov	r2, r4
    ebda:	7819      	ldrb	r1, [r3, #0]
    ebdc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    ebe0:	f7ff ff76 	bl	ead0 <hci_cmd_done>
	if (ncmd) {
    ebe4:	b125      	cbz	r5, ebf0 <hci_cmd_complete+0x28>
}
    ebe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ebea:	4802      	ldr	r0, [pc, #8]	; (ebf4 <hci_cmd_complete+0x2c>)
    ebec:	f00a ba46 	b.w	1907c <z_impl_k_sem_give>
    ebf0:	bd38      	pop	{r3, r4, r5, pc}
    ebf2:	bf00      	nop
    ebf4:	200080e0 	.word	0x200080e0

0000ebf8 <hci_num_completed_packets>:
{
    ebf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    ebfc:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    ebfe:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    ec00:	6887      	ldr	r7, [r0, #8]
    ec02:	f8df 90dc 	ldr.w	r9, [pc, #220]	; ece0 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    ec06:	783b      	ldrb	r3, [r7, #0]
    ec08:	429d      	cmp	r5, r3
    ec0a:	db01      	blt.n	ec10 <hci_num_completed_packets+0x18>
}
    ec0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    ec10:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    ec14:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    ec18:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    ec1c:	4650      	mov	r0, sl
    ec1e:	f002 fad5 	bl	111cc <bt_conn_lookup_handle>
		if (!conn) {
    ec22:	4604      	mov	r4, r0
    ec24:	b1d0      	cbz	r0, ec5c <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ec26:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    ec2a:	b37e      	cbz	r6, ec8c <hci_num_completed_packets+0x94>
	__asm__ volatile(
    ec2c:	f04f 0320 	mov.w	r3, #32
    ec30:	f3ef 8211 	mrs	r2, BASEPRI
    ec34:	f383 8811 	msr	BASEPRI, r3
    ec38:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ec3c:	69e3      	ldr	r3, [r4, #28]
    ec3e:	b1a3      	cbz	r3, ec6a <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    ec40:	3b01      	subs	r3, #1
    ec42:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    ec44:	f382 8811 	msr	BASEPRI, r2
    ec48:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    ec4c:	4620      	mov	r0, r4
    ec4e:	f002 f8d7 	bl	10e00 <bt_conn_get_pkts>
    ec52:	3e01      	subs	r6, #1
    ec54:	f00a fa12 	bl	1907c <z_impl_k_sem_give>
    ec58:	b2b6      	uxth	r6, r6
    ec5a:	e7e6      	b.n	ec2a <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    ec5c:	4652      	mov	r2, sl
    ec5e:	2145      	movs	r1, #69	; 0x45
    ec60:	4820      	ldr	r0, [pc, #128]	; (ece4 <hci_num_completed_packets+0xec>)
    ec62:	f00b fbe0 	bl	1a426 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    ec66:	3501      	adds	r5, #1
    ec68:	e7cd      	b.n	ec06 <hci_num_completed_packets+0xe>
	return list->head;
    ec6a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ec6c:	b12b      	cbz	r3, ec7a <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ec6e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    ec70:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ec72:	428b      	cmp	r3, r1
	list->head = node;
    ec74:	6160      	str	r0, [r4, #20]
	list->tail = node;
    ec76:	bf08      	it	eq
    ec78:	61a0      	streq	r0, [r4, #24]
    ec7a:	f382 8811 	msr	BASEPRI, r2
    ec7e:	f3bf 8f6f 	isb	sy
			if (!node) {
    ec82:	b93b      	cbnz	r3, ec94 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    ec84:	2145      	movs	r1, #69	; 0x45
    ec86:	4818      	ldr	r0, [pc, #96]	; (ece8 <hci_num_completed_packets+0xf0>)
    ec88:	f00b fbcd 	bl	1a426 <printk>
		bt_conn_unref(conn);
    ec8c:	4620      	mov	r0, r4
    ec8e:	f002 fa79 	bl	11184 <bt_conn_unref>
    ec92:	e7e8      	b.n	ec66 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    ec94:	f04f 0220 	mov.w	r2, #32
    ec98:	f3ef 8111 	mrs	r1, BASEPRI
    ec9c:	f382 8811 	msr	BASEPRI, r2
    eca0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    eca4:	68da      	ldr	r2, [r3, #12]
    eca6:	61e2      	str	r2, [r4, #28]
	return list->tail;
    eca8:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    ecaa:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    ecae:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    ecb2:	b98a      	cbnz	r2, ecd8 <hci_num_completed_packets+0xe0>
	list->head = node;
    ecb4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    ecb8:	f381 8811 	msr	BASEPRI, r1
    ecbc:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ecc0:	2101      	movs	r1, #1
    ecc2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ecc6:	f00c fee5 	bl	1ba94 <atomic_or>
    ecca:	07c3      	lsls	r3, r0, #31
    eccc:	d4be      	bmi.n	ec4c <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    ecce:	4651      	mov	r1, sl
    ecd0:	4648      	mov	r0, r9
    ecd2:	f00e ff65 	bl	1dba0 <k_queue_append>
    ecd6:	e7b9      	b.n	ec4c <hci_num_completed_packets+0x54>
	parent->next = child;
    ecd8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ecda:	6263      	str	r3, [r4, #36]	; 0x24
}
    ecdc:	e7ec      	b.n	ecb8 <hci_num_completed_packets+0xc0>
    ecde:	bf00      	nop
    ece0:	2000a558 	.word	0x2000a558
    ece4:	00021003 	.word	0x00021003
    ece8:	00021024 	.word	0x00021024

0000ecec <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    ecec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    ecee:	7803      	ldrb	r3, [r0, #0]
{
    ecf0:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    ecf2:	f88d 3004 	strb.w	r3, [sp, #4]
    ecf6:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    ecf8:	4c24      	ldr	r4, [pc, #144]	; (ed8c <le_adv_start_add_conn+0xa0>)
{
    ecfa:	4605      	mov	r5, r0
    ecfc:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    ecfe:	f104 0018 	add.w	r0, r4, #24
    ed02:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    ed04:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    ed08:	f00c feee 	bl	1bae8 <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    ed0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ed10:	bb93      	cbnz	r3, ed78 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    ed12:	462e      	mov	r6, r5
    ed14:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ed18:	a902      	add	r1, sp, #8
    ed1a:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    ed1c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ed20:	9302      	str	r3, [sp, #8]
    ed22:	f8cd 300b 	str.w	r3, [sp, #11]
    ed26:	f00c fec0 	bl	1baaa <bt_addr_le_cmp>
    ed2a:	782a      	ldrb	r2, [r5, #0]
    ed2c:	4604      	mov	r4, r0
    ed2e:	b9a8      	cbnz	r0, ed5c <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    ed30:	4b17      	ldr	r3, [pc, #92]	; (ed90 <le_adv_start_add_conn+0xa4>)
    ed32:	6818      	ldr	r0, [r3, #0]
    ed34:	8899      	ldrh	r1, [r3, #4]
    ed36:	799b      	ldrb	r3, [r3, #6]
    ed38:	9004      	str	r0, [sp, #16]
    ed3a:	f8ad 1014 	strh.w	r1, [sp, #20]
    ed3e:	4610      	mov	r0, r2
    ed40:	a904      	add	r1, sp, #16
    ed42:	f88d 3016 	strb.w	r3, [sp, #22]
    ed46:	f002 f9f1 	bl	1112c <bt_conn_add_le>
		if (!conn) {
    ed4a:	4605      	mov	r5, r0
    ed4c:	b1d0      	cbz	r0, ed84 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    ed4e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    ed50:	f002 fa44 	bl	111dc <bt_conn_set_state>
	*out_conn = conn;
    ed54:	603d      	str	r5, [r7, #0]
	return 0;
}
    ed56:	4620      	mov	r0, r4
    ed58:	b007      	add	sp, #28
    ed5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    ed5c:	4631      	mov	r1, r6
    ed5e:	4610      	mov	r0, r2
    ed60:	f002 fb56 	bl	11410 <bt_conn_exists_le>
    ed64:	4604      	mov	r4, r0
    ed66:	b950      	cbnz	r0, ed7e <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    ed68:	7828      	ldrb	r0, [r5, #0]
    ed6a:	4631      	mov	r1, r6
    ed6c:	f002 f9de 	bl	1112c <bt_conn_add_le>
	if (!conn) {
    ed70:	4605      	mov	r5, r0
    ed72:	b138      	cbz	r0, ed84 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    ed74:	2105      	movs	r1, #5
    ed76:	e7eb      	b.n	ed50 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    ed78:	f06f 0422 	mvn.w	r4, #34	; 0x22
    ed7c:	e7eb      	b.n	ed56 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    ed7e:	f06f 0415 	mvn.w	r4, #21
    ed82:	e7e8      	b.n	ed56 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    ed84:	f06f 040b 	mvn.w	r4, #11
    ed88:	e7e5      	b.n	ed56 <le_adv_start_add_conn+0x6a>
    ed8a:	bf00      	nop
    ed8c:	20008000 	.word	0x20008000
    ed90:	0001e390 	.word	0x0001e390

0000ed94 <bt_hci_cmd_create>:
{
    ed94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    ed98:	f04f 32ff 	mov.w	r2, #4294967295
    ed9c:	4606      	mov	r6, r0
    ed9e:	f04f 33ff 	mov.w	r3, #4294967295
    eda2:	481d      	ldr	r0, [pc, #116]	; (ee18 <bt_hci_cmd_create+0x84>)
    eda4:	460f      	mov	r7, r1
    eda6:	f00e f892 	bl	1cece <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    edaa:	4604      	mov	r4, r0
    edac:	b950      	cbnz	r0, edc4 <bt_hci_cmd_create+0x30>
    edae:	491b      	ldr	r1, [pc, #108]	; (ee1c <bt_hci_cmd_create+0x88>)
    edb0:	481b      	ldr	r0, [pc, #108]	; (ee20 <bt_hci_cmd_create+0x8c>)
    edb2:	f44f 7281 	mov.w	r2, #258	; 0x102
    edb6:	f00b fb36 	bl	1a426 <printk>
    edba:	f44f 7181 	mov.w	r1, #258	; 0x102
    edbe:	4817      	ldr	r0, [pc, #92]	; (ee1c <bt_hci_cmd_create+0x88>)
    edc0:	f00b fdd7 	bl	1a972 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    edc4:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    edc8:	f104 0a08 	add.w	sl, r4, #8
    edcc:	2101      	movs	r1, #1
    edce:	4650      	mov	r0, sl
    edd0:	f006 fa64 	bl	1529c <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    edd4:	4620      	mov	r0, r4
    edd6:	f884 8014 	strb.w	r8, [r4, #20]
    edda:	f006 f939 	bl	15050 <net_buf_id>
    edde:	f04f 090c 	mov.w	r9, #12
    ede2:	4d10      	ldr	r5, [pc, #64]	; (ee24 <bt_hci_cmd_create+0x90>)
    ede4:	fb09 5000 	mla	r0, r9, r0, r5
    ede8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    edea:	4620      	mov	r0, r4
    edec:	f006 f930 	bl	15050 <net_buf_id>
    edf0:	fb09 5000 	mla	r0, r9, r0, r5
    edf4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    edf8:	4620      	mov	r0, r4
    edfa:	f006 f929 	bl	15050 <net_buf_id>
    edfe:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    ee02:	2103      	movs	r1, #3
    ee04:	4650      	mov	r0, sl
    ee06:	f8c5 8004 	str.w	r8, [r5, #4]
    ee0a:	f006 fbaf 	bl	1556c <net_buf_simple_add>
	hdr->param_len = param_len;
    ee0e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    ee10:	8006      	strh	r6, [r0, #0]
}
    ee12:	4620      	mov	r0, r4
    ee14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee18:	2000876c 	.word	0x2000876c
    ee1c:	00020ef4 	.word	0x00020ef4
    ee20:	0001f98f 	.word	0x0001f98f
    ee24:	2000ab18 	.word	0x2000ab18

0000ee28 <bt_hci_cmd_send_sync>:
{
    ee28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee2a:	4607      	mov	r7, r0
    ee2c:	4615      	mov	r5, r2
	if (!buf) {
    ee2e:	460c      	mov	r4, r1
{
    ee30:	b087      	sub	sp, #28
	if (!buf) {
    ee32:	b921      	cbnz	r1, ee3e <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    ee34:	f7ff ffae 	bl	ed94 <bt_hci_cmd_create>
		if (!buf) {
    ee38:	4604      	mov	r4, r0
    ee3a:	2800      	cmp	r0, #0
    ee3c:	d048      	beq.n	eed0 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    ee3e:	2201      	movs	r2, #1
    ee40:	2100      	movs	r1, #0
    ee42:	4668      	mov	r0, sp
    ee44:	f00e ff04 	bl	1dc50 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    ee48:	4620      	mov	r0, r4
    ee4a:	f006 f901 	bl	15050 <net_buf_id>
    ee4e:	230c      	movs	r3, #12
    ee50:	4e21      	ldr	r6, [pc, #132]	; (eed8 <bt_hci_cmd_send_sync+0xb0>)
    ee52:	fb03 6000 	mla	r0, r3, r0, r6
    ee56:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    ee5a:	4620      	mov	r0, r4
    ee5c:	f006 fab4 	bl	153c8 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    ee60:	4621      	mov	r1, r4
    ee62:	481e      	ldr	r0, [pc, #120]	; (eedc <bt_hci_cmd_send_sync+0xb4>)
    ee64:	f006 fa3e 	bl	152e4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    ee68:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ee6c:	2300      	movs	r3, #0
    ee6e:	4668      	mov	r0, sp
    ee70:	f00a f940 	bl	190f4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    ee74:	b158      	cbz	r0, ee8e <bt_hci_cmd_send_sync+0x66>
    ee76:	f240 124d 	movw	r2, #333	; 0x14d
    ee7a:	4919      	ldr	r1, [pc, #100]	; (eee0 <bt_hci_cmd_send_sync+0xb8>)
    ee7c:	4819      	ldr	r0, [pc, #100]	; (eee4 <bt_hci_cmd_send_sync+0xbc>)
    ee7e:	f00b fad2 	bl	1a426 <printk>
    ee82:	4040      	eors	r0, r0
    ee84:	f380 8811 	msr	BASEPRI, r0
    ee88:	f04f 0003 	mov.w	r0, #3
    ee8c:	df02      	svc	2
	status = cmd(buf)->status;
    ee8e:	4620      	mov	r0, r4
    ee90:	f006 f8de 	bl	15050 <net_buf_id>
    ee94:	230c      	movs	r3, #12
    ee96:	4358      	muls	r0, r3
    ee98:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    ee9a:	b186      	cbz	r6, eebe <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    ee9c:	4633      	mov	r3, r6
    ee9e:	463a      	mov	r2, r7
    eea0:	2157      	movs	r1, #87	; 0x57
    eea2:	4811      	ldr	r0, [pc, #68]	; (eee8 <bt_hci_cmd_send_sync+0xc0>)
    eea4:	f00b fabf 	bl	1a426 <printk>
		net_buf_unref(buf);
    eea8:	4620      	mov	r0, r4
    eeaa:	f006 fa49 	bl	15340 <net_buf_unref>
			return -EIO;
    eeae:	2e09      	cmp	r6, #9
    eeb0:	bf0c      	ite	eq
    eeb2:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    eeb6:	f06f 0004 	mvnne.w	r0, #4
}
    eeba:	b007      	add	sp, #28
    eebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    eebe:	b115      	cbz	r5, eec6 <bt_hci_cmd_send_sync+0x9e>
	return 0;
    eec0:	4630      	mov	r0, r6
		*rsp = buf;
    eec2:	602c      	str	r4, [r5, #0]
    eec4:	e7f9      	b.n	eeba <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    eec6:	4620      	mov	r0, r4
    eec8:	f006 fa3a 	bl	15340 <net_buf_unref>
	return 0;
    eecc:	4628      	mov	r0, r5
    eece:	e7f4      	b.n	eeba <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    eed0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    eed4:	e7f1      	b.n	eeba <bt_hci_cmd_send_sync+0x92>
    eed6:	bf00      	nop
    eed8:	2000ab18 	.word	0x2000ab18
    eedc:	20008118 	.word	0x20008118
    eee0:	00020ef4 	.word	0x00020ef4
    eee4:	0001f98f 	.word	0x0001f98f
    eee8:	00021040 	.word	0x00021040

0000eeec <hci_le_read_max_data_len>:
{
    eeec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    eeee:	4606      	mov	r6, r0
    eef0:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    eef2:	f242 002f 	movw	r0, #8239	; 0x202f
    eef6:	2100      	movs	r1, #0
    eef8:	aa01      	add	r2, sp, #4
    eefa:	f7ff ff95 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    eefe:	4604      	mov	r4, r0
    ef00:	b130      	cbz	r0, ef10 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    ef02:	2145      	movs	r1, #69	; 0x45
    ef04:	4808      	ldr	r0, [pc, #32]	; (ef28 <hci_le_read_max_data_len+0x3c>)
    ef06:	f00b fa8e 	bl	1a426 <printk>
}
    ef0a:	4620      	mov	r0, r4
    ef0c:	b002      	add	sp, #8
    ef0e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    ef10:	9801      	ldr	r0, [sp, #4]
    ef12:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    ef14:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    ef18:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    ef1a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    ef1e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    ef20:	f006 fa0e 	bl	15340 <net_buf_unref>
	return 0;
    ef24:	e7f1      	b.n	ef0a <hci_le_read_max_data_len+0x1e>
    ef26:	bf00      	nop
    ef28:	00021061 	.word	0x00021061

0000ef2c <set_random_address>:
{
    ef2c:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    ef2e:	4e15      	ldr	r6, [pc, #84]	; (ef84 <set_random_address+0x58>)
    ef30:	2206      	movs	r2, #6
    ef32:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    ef36:	4605      	mov	r5, r0
    ef38:	f00c fca8 	bl	1b88c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    ef3c:	4604      	mov	r4, r0
    ef3e:	b1e0      	cbz	r0, ef7a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    ef40:	2106      	movs	r1, #6
    ef42:	f242 0005 	movw	r0, #8197	; 0x2005
    ef46:	f7ff ff25 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    ef4a:	4604      	mov	r4, r0
    ef4c:	b1b8      	cbz	r0, ef7e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ef4e:	2206      	movs	r2, #6
    ef50:	4629      	mov	r1, r5
    ef52:	3008      	adds	r0, #8
    ef54:	f00d ffe9 	bl	1cf2a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    ef58:	4621      	mov	r1, r4
    ef5a:	2200      	movs	r2, #0
    ef5c:	f242 0005 	movw	r0, #8197	; 0x2005
    ef60:	f7ff ff62 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    ef64:	4604      	mov	r4, r0
    ef66:	b940      	cbnz	r0, ef7a <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    ef68:	2206      	movs	r2, #6
    ef6a:	4629      	mov	r1, r5
    ef6c:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    ef70:	f00c fc9d 	bl	1b8ae <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    ef74:	2301      	movs	r3, #1
    ef76:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    ef7a:	4620      	mov	r0, r4
    ef7c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    ef7e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    ef82:	e7fa      	b.n	ef7a <set_random_address+0x4e>
    ef84:	20008000 	.word	0x20008000

0000ef88 <set_le_scan_enable_legacy>:
{
    ef88:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    ef8a:	2102      	movs	r1, #2
{
    ef8c:	4604      	mov	r4, r0
    ef8e:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    ef90:	f242 000c 	movw	r0, #8204	; 0x200c
    ef94:	f7ff fefe 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    ef98:	4605      	mov	r5, r0
    ef9a:	b348      	cbz	r0, eff0 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    ef9c:	2102      	movs	r1, #2
    ef9e:	3008      	adds	r0, #8
    efa0:	f006 fae4 	bl	1556c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    efa4:	2c01      	cmp	r4, #1
    efa6:	4603      	mov	r3, r0
    efa8:	d11f      	bne.n	efea <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    efaa:	4813      	ldr	r0, [pc, #76]	; (eff8 <set_le_scan_enable_legacy+0x70>)
    efac:	f00c fd6c 	bl	1ba88 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    efb0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    efb4:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    efb6:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    efb8:	4b0f      	ldr	r3, [pc, #60]	; (eff8 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    efba:	4628      	mov	r0, r5
    efbc:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    efbe:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    efc0:	f004 0401 	and.w	r4, r4, #1
    efc4:	9302      	str	r3, [sp, #8]
    efc6:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    efca:	f006 f841 	bl	15050 <net_buf_id>
    efce:	220c      	movs	r2, #12
    efd0:	4b0a      	ldr	r3, [pc, #40]	; (effc <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    efd2:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    efd4:	fb02 3300 	mla	r3, r2, r0, r3
    efd8:	aa01      	add	r2, sp, #4
    efda:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    efdc:	f242 000c 	movw	r0, #8204	; 0x200c
    efe0:	2200      	movs	r2, #0
    efe2:	f7ff ff21 	bl	ee28 <bt_hci_cmd_send_sync>
}
    efe6:	b005      	add	sp, #20
    efe8:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    efea:	2200      	movs	r2, #0
    efec:	7042      	strb	r2, [r0, #1]
    efee:	e7e2      	b.n	efb6 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    eff0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    eff4:	e7f7      	b.n	efe6 <set_le_scan_enable_legacy+0x5e>
    eff6:	bf00      	nop
    eff8:	20008094 	.word	0x20008094
    effc:	2000ab18 	.word	0x2000ab18

0000f000 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f000:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f004:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f006:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f00a:	460e      	mov	r6, r1
    f00c:	4691      	mov	r9, r2
    f00e:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f010:	d02c      	beq.n	f06c <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f012:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f0f4 <le_adv_set_random_addr.isra.0+0xf4>
    f016:	b12a      	cbz	r2, f024 <le_adv_set_random_addr.isra.0+0x24>
    f018:	068c      	lsls	r4, r1, #26
    f01a:	d503      	bpl.n	f024 <le_adv_set_random_addr.isra.0+0x24>
    f01c:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f020:	0658      	lsls	r0, r3, #25
    f022:	d563      	bpl.n	f0ec <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f024:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f028:	f818 3003 	ldrb.w	r3, [r8, r3]
    f02c:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f030:	2b01      	cmp	r3, #1
    f032:	d009      	beq.n	f048 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f034:	ebaa 0505 	sub.w	r5, sl, r5
    f038:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f03c:	f1b9 0f00 	cmp.w	r9, #0
    f040:	d10f      	bne.n	f062 <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f042:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f044:	703b      	strb	r3, [r7, #0]
    f046:	e008      	b.n	f05a <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f048:	2007      	movs	r0, #7
    f04a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f04e:	4440      	add	r0, r8
    f050:	f7ff ff6c 	bl	ef2c <set_random_address>
				if (err) {
    f054:	4604      	mov	r4, r0
    f056:	2800      	cmp	r0, #0
    f058:	d0ec      	beq.n	f034 <le_adv_set_random_addr.isra.0+0x34>
}
    f05a:	4620      	mov	r0, r4
    f05c:	b002      	add	sp, #8
    f05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f062:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f064:	bf48      	it	mi
    f066:	f043 0302 	orrmi.w	r3, r3, #2
    f06a:	e7ea      	b.n	f042 <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f06c:	f011 0604 	ands.w	r6, r1, #4
    f070:	d014      	beq.n	f09c <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f072:	f8df 8080 	ldr.w	r8, [pc, #128]	; f0f4 <le_adv_set_random_addr.isra.0+0xf4>
    f076:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f07a:	f818 3003 	ldrb.w	r3, [r8, r3]
    f07e:	00ee      	lsls	r6, r5, #3
    f080:	2b01      	cmp	r3, #1
    f082:	d105      	bne.n	f090 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f084:	2007      	movs	r0, #7
    f086:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f08a:	4440      	add	r0, r8
    f08c:	f7ff ff4e 	bl	ef2c <set_random_address>
			*own_addr_type = id_addr->type;
    f090:	1b75      	subs	r5, r6, r5
    f092:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f096:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f098:	703b      	strb	r3, [r7, #0]
    f09a:	e7de      	b.n	f05a <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f09c:	4816      	ldr	r0, [pc, #88]	; (f0f8 <le_adv_set_random_addr.isra.0+0xf8>)
    f09e:	f00c fcf3 	bl	1ba88 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f0a2:	0682      	lsls	r2, r0, #26
    f0a4:	d417      	bmi.n	f0d6 <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f0a6:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f0a8:	2106      	movs	r1, #6
    f0aa:	4668      	mov	r0, sp
    f0ac:	f001 fdce 	bl	10c4c <bt_rand>
	if (err) {
    f0b0:	4604      	mov	r4, r0
    f0b2:	b948      	cbnz	r0, f0c8 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f0b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f0b8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f0ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f0be:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f0c2:	f7ff ff33 	bl	ef2c <set_random_address>
    f0c6:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f0c8:	2001      	movs	r0, #1
    f0ca:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f0cc:	2d00      	cmp	r5, #0
    f0ce:	d0c4      	beq.n	f05a <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    f0d0:	f7ff ff5a 	bl	ef88 <set_le_scan_enable_legacy>
		if (err) {
    f0d4:	e7c1      	b.n	f05a <le_adv_set_random_addr.isra.0+0x5a>
    f0d6:	4808      	ldr	r0, [pc, #32]	; (f0f8 <le_adv_set_random_addr.isra.0+0xf8>)
    f0d8:	f00c fcd6 	bl	1ba88 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f0dc:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f0de:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f0e2:	d5e0      	bpl.n	f0a6 <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    f0e4:	4630      	mov	r0, r6
    f0e6:	f7ff ff4f 	bl	ef88 <set_le_scan_enable_legacy>
    f0ea:	e7dd      	b.n	f0a8 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f0ec:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f0f0:	e7b3      	b.n	f05a <le_adv_set_random_addr.isra.0+0x5a>
    f0f2:	bf00      	nop
    f0f4:	20008000 	.word	0x20008000
    f0f8:	20008094 	.word	0x20008094

0000f0fc <hci_set_ad>:
{
    f0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f100:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f102:	2120      	movs	r1, #32
{
    f104:	4682      	mov	sl, r0
    f106:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f108:	f7ff fe44 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    f10c:	4606      	mov	r6, r0
    f10e:	2800      	cmp	r0, #0
    f110:	d056      	beq.n	f1c0 <hci_set_ad+0xc4>
    f112:	2120      	movs	r1, #32
    f114:	3008      	adds	r0, #8
    f116:	f006 fa29 	bl	1556c <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f11a:	2220      	movs	r2, #32
    f11c:	4681      	mov	r9, r0
    f11e:	2100      	movs	r1, #0
    f120:	f00c fbf0 	bl	1b904 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f124:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f128:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f12a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f12e:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f130:	2300      	movs	r3, #0
    f132:	f8d4 8000 	ldr.w	r8, [r4]
    f136:	6862      	ldr	r2, [r4, #4]
    f138:	4293      	cmp	r3, r2
    f13a:	d30d      	bcc.n	f158 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f13c:	9b00      	ldr	r3, [sp, #0]
    f13e:	3408      	adds	r4, #8
    f140:	429c      	cmp	r4, r3
    f142:	d1f5      	bne.n	f130 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f144:	2200      	movs	r2, #0
    f146:	4631      	mov	r1, r6
    f148:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f14a:	f889 5000 	strb.w	r5, [r9]
}
    f14e:	b003      	add	sp, #12
    f150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f154:	f7ff be68 	b.w	ee28 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f158:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f15c:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f15e:	1881      	adds	r1, r0, r2
    f160:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f162:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f166:	d914      	bls.n	f192 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f168:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f16c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f170:	d101      	bne.n	f176 <hci_set_ad+0x7a>
    f172:	2a00      	cmp	r2, #0
    f174:	dc0b      	bgt.n	f18e <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f176:	2145      	movs	r1, #69	; 0x45
    f178:	4813      	ldr	r0, [pc, #76]	; (f1c8 <hci_set_ad+0xcc>)
    f17a:	f00b f954 	bl	1a426 <printk>
		net_buf_unref(buf);
    f17e:	4630      	mov	r0, r6
    f180:	f006 f8de 	bl	15340 <net_buf_unref>
					return -EINVAL;
    f184:	f06f 0015 	mvn.w	r0, #21
}
    f188:	b003      	add	sp, #12
    f18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f18e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f192:	b2d7      	uxtb	r7, r2
    f194:	1c79      	adds	r1, r7, #1
    f196:	f80b 1005 	strb.w	r1, [fp, r5]
    f19a:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f19c:	b2c9      	uxtb	r1, r1
    f19e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f1a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f1a6:	fa5b f080 	uxtab	r0, fp, r0
    f1aa:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f1ac:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f1ae:	f00c fb7e 	bl	1b8ae <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f1b2:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f1b4:	443d      	add	r5, r7
    f1b6:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f1b8:	3301      	adds	r3, #1
    f1ba:	f108 0808 	add.w	r8, r8, #8
    f1be:	e7ba      	b.n	f136 <hci_set_ad+0x3a>
		return -ENOBUFS;
    f1c0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f1c4:	e7e0      	b.n	f188 <hci_set_ad+0x8c>
    f1c6:	bf00      	nop
    f1c8:	00021086 	.word	0x00021086

0000f1cc <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1d0:	b087      	sub	sp, #28
    f1d2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f1d6:	4606      	mov	r6, r0
    f1d8:	460c      	mov	r4, r1
    f1da:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f1dc:	2100      	movs	r1, #0
    f1de:	2210      	movs	r2, #16
    f1e0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f1e2:	461d      	mov	r5, r3
    f1e4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f1e8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f1ec:	f00c fb8a 	bl	1b904 <memset>
	if (use_name) {
    f1f0:	f1b8 0f00 	cmp.w	r8, #0
    f1f4:	d00e      	beq.n	f214 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f1f6:	bbb4      	cbnz	r4, f266 <le_adv_update.constprop.0+0x9a>
    f1f8:	2d00      	cmp	r5, #0
    f1fa:	d13f      	bne.n	f27c <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f1fc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f2b0 <le_adv_update.constprop.0+0xe4>
    f200:	4658      	mov	r0, fp
    f202:	f00c fb16 	bl	1b832 <strlen>
    f206:	2309      	movs	r3, #9
    f208:	f88d 0001 	strb.w	r0, [sp, #1]
    f20c:	f88d 3000 	strb.w	r3, [sp]
    f210:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f214:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f218:	f1b8 0f00 	cmp.w	r8, #0
    f21c:	d030      	beq.n	f280 <le_adv_update.constprop.0+0xb4>
    f21e:	f1ba 0f00 	cmp.w	sl, #0
    f222:	d12d      	bne.n	f280 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f224:	2301      	movs	r3, #1
			d_len = 2;
    f226:	2202      	movs	r2, #2
			d[1].data = &data;
    f228:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f22c:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f22e:	f242 0008 	movw	r0, #8200	; 0x2008
    f232:	a902      	add	r1, sp, #8
    f234:	f7ff ff62 	bl	f0fc <hci_set_ad>
		if (err) {
    f238:	4604      	mov	r4, r0
    f23a:	b938      	cbnz	r0, f24c <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f23c:	f1ba 0f00 	cmp.w	sl, #0
    f240:	d120      	bne.n	f284 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f242:	2104      	movs	r1, #4
    f244:	f106 0010 	add.w	r0, r6, #16
    f248:	f00c fc24 	bl	1ba94 <atomic_or>
}
    f24c:	4620      	mov	r0, r4
    f24e:	b007      	add	sp, #28
    f250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f254:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f258:	3a08      	subs	r2, #8
    f25a:	2a01      	cmp	r2, #1
    f25c:	d925      	bls.n	f2aa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f25e:	3301      	adds	r3, #1
    f260:	429f      	cmp	r7, r3
    f262:	d1f7      	bne.n	f254 <le_adv_update.constprop.0+0x88>
    f264:	e7c8      	b.n	f1f8 <le_adv_update.constprop.0+0x2c>
    f266:	2300      	movs	r3, #0
    f268:	e7fa      	b.n	f260 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f26a:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f26e:	3a08      	subs	r2, #8
    f270:	2a01      	cmp	r2, #1
    f272:	d91a      	bls.n	f2aa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f274:	3301      	adds	r3, #1
    f276:	4599      	cmp	r9, r3
    f278:	d1f7      	bne.n	f26a <le_adv_update.constprop.0+0x9e>
    f27a:	e7bf      	b.n	f1fc <le_adv_update.constprop.0+0x30>
    f27c:	2300      	movs	r3, #0
    f27e:	e7fa      	b.n	f276 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f280:	2201      	movs	r2, #1
    f282:	e7d4      	b.n	f22e <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f284:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f286:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f28a:	f1b8 0f00 	cmp.w	r8, #0
    f28e:	d003      	beq.n	f298 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f290:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f292:	2202      	movs	r2, #2
			d[1].data = &data;
    f294:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f298:	f242 0009 	movw	r0, #8201	; 0x2009
    f29c:	a902      	add	r1, sp, #8
    f29e:	f7ff ff2d 	bl	f0fc <hci_set_ad>
		if (err) {
    f2a2:	2800      	cmp	r0, #0
    f2a4:	d0cd      	beq.n	f242 <le_adv_update.constprop.0+0x76>
    f2a6:	4604      	mov	r4, r0
    f2a8:	e7d0      	b.n	f24c <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f2aa:	f06f 0415 	mvn.w	r4, #21
    f2ae:	e7cd      	b.n	f24c <le_adv_update.constprop.0+0x80>
    f2b0:	0001f407 	.word	0x0001f407

0000f2b4 <set_le_adv_enable_legacy>:
{
    f2b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f2b6:	4606      	mov	r6, r0
    f2b8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    f2ba:	f242 000a 	movw	r0, #8202	; 0x200a
    f2be:	2101      	movs	r1, #1
    f2c0:	f7ff fd68 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    f2c4:	4604      	mov	r4, r0
    f2c6:	b1e8      	cbz	r0, f304 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    f2c8:	3008      	adds	r0, #8
	if (enable) {
    f2ca:	b1cd      	cbz	r5, f300 <set_le_adv_enable_legacy+0x4c>
    f2cc:	2101      	movs	r1, #1
    f2ce:	f00d fe38 	bl	1cf42 <net_buf_simple_add_u8>
    f2d2:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    f2d4:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    f2d6:	3610      	adds	r6, #16
    f2d8:	9302      	str	r3, [sp, #8]
	state->target = target;
    f2da:	9601      	str	r6, [sp, #4]
	state->val = val;
    f2dc:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f2e0:	f005 feb6 	bl	15050 <net_buf_id>
    f2e4:	220c      	movs	r2, #12
    f2e6:	4b09      	ldr	r3, [pc, #36]	; (f30c <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f2e8:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f2ea:	fb02 3300 	mla	r3, r2, r0, r3
    f2ee:	aa01      	add	r2, sp, #4
    f2f0:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f2f2:	f242 000a 	movw	r0, #8202	; 0x200a
    f2f6:	2200      	movs	r2, #0
    f2f8:	f7ff fd96 	bl	ee28 <bt_hci_cmd_send_sync>
}
    f2fc:	b004      	add	sp, #16
    f2fe:	bd70      	pop	{r4, r5, r6, pc}
    f300:	4629      	mov	r1, r5
    f302:	e7e4      	b.n	f2ce <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    f304:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f308:	e7f8      	b.n	f2fc <set_le_adv_enable_legacy+0x48>
    f30a:	bf00      	nop
    f30c:	2000ab18 	.word	0x2000ab18

0000f310 <start_le_scan_legacy>:
{
    f310:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f312:	460e      	mov	r6, r1
    f314:	4605      	mov	r5, r0
    f316:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f318:	2100      	movs	r1, #0
    f31a:	2207      	movs	r2, #7
    f31c:	4668      	mov	r0, sp
    f31e:	f00c faf1 	bl	1b904 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f322:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f326:	4e26      	ldr	r6, [pc, #152]	; (f3c0 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f328:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f32a:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f32c:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f330:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f334:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f338:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f33c:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f340:	f00c fba2 	bl	1ba88 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f344:	0641      	lsls	r1, r0, #25
    f346:	d413      	bmi.n	f370 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f348:	f00c fbe3 	bl	1bb12 <le_set_private_addr.constprop.0>
			if (err) {
    f34c:	4604      	mov	r4, r0
    f34e:	b160      	cbz	r0, f36a <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f350:	2d01      	cmp	r5, #1
    f352:	d02e      	beq.n	f3b2 <start_le_scan_legacy+0xa2>
    f354:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f358:	f00c fb96 	bl	1ba88 <atomic_get>
    f35c:	0642      	lsls	r2, r0, #25
    f35e:	d528      	bpl.n	f3b2 <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f360:	4622      	mov	r2, r4
    f362:	2157      	movs	r1, #87	; 0x57
    f364:	4817      	ldr	r0, [pc, #92]	; (f3c4 <start_le_scan_legacy+0xb4>)
    f366:	f00b f85e 	bl	1a426 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f36a:	2301      	movs	r3, #1
    f36c:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f370:	2107      	movs	r1, #7
    f372:	f242 000b 	movw	r0, #8203	; 0x200b
    f376:	f7ff fd0d 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    f37a:	4604      	mov	r4, r0
    f37c:	b1e0      	cbz	r0, f3b8 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f37e:	2207      	movs	r2, #7
    f380:	4669      	mov	r1, sp
    f382:	3008      	adds	r0, #8
    f384:	f00d fdd1 	bl	1cf2a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f388:	4621      	mov	r1, r4
    f38a:	2200      	movs	r2, #0
    f38c:	f242 000b 	movw	r0, #8203	; 0x200b
    f390:	f7ff fd4a 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    f394:	4604      	mov	r4, r0
    f396:	b960      	cbnz	r0, f3b2 <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f398:	2001      	movs	r0, #1
    f39a:	f7ff fdf5 	bl	ef88 <set_le_scan_enable_legacy>
	if (err) {
    f39e:	4604      	mov	r4, r0
    f3a0:	b938      	cbnz	r0, f3b2 <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f3a2:	1e6b      	subs	r3, r5, #1
    f3a4:	425a      	negs	r2, r3
    f3a6:	f04f 0107 	mov.w	r1, #7
    f3aa:	4807      	ldr	r0, [pc, #28]	; (f3c8 <start_le_scan_legacy+0xb8>)
    f3ac:	415a      	adcs	r2, r3
    f3ae:	f00c fb8a 	bl	1bac6 <atomic_set_bit_to>
}
    f3b2:	4620      	mov	r0, r4
    f3b4:	b002      	add	sp, #8
    f3b6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f3b8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f3bc:	e7f9      	b.n	f3b2 <start_le_scan_legacy+0xa2>
    f3be:	bf00      	nop
    f3c0:	20008000 	.word	0x20008000
    f3c4:	000210a4 	.word	0x000210a4
    f3c8:	20008094 	.word	0x20008094

0000f3cc <bt_le_scan_random_addr_check>:
{
    f3cc:	b508      	push	{r3, lr}
    f3ce:	4802      	ldr	r0, [pc, #8]	; (f3d8 <bt_le_scan_random_addr_check+0xc>)
    f3d0:	f00c fb5a 	bl	1ba88 <atomic_get>
}
    f3d4:	2001      	movs	r0, #1
    f3d6:	bd08      	pop	{r3, pc}
    f3d8:	20008028 	.word	0x20008028

0000f3dc <bt_le_create_conn_legacy>:
{
    f3dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f3e0:	4f2b      	ldr	r7, [pc, #172]	; (f490 <bt_le_create_conn_legacy+0xb4>)
{
    f3e2:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f3e4:	783b      	ldrb	r3, [r7, #0]
    f3e6:	2b01      	cmp	r3, #1
    f3e8:	d00b      	beq.n	f402 <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f3ea:	2119      	movs	r1, #25
    f3ec:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f3f0:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f3f4:	f7ff fcce 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    f3f8:	4606      	mov	r6, r0
    f3fa:	b950      	cbnz	r0, f412 <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f3fc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f400:	e004      	b.n	f40c <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f402:	1c78      	adds	r0, r7, #1
    f404:	f7ff fd92 	bl	ef2c <set_random_address>
			if (err) {
    f408:	2800      	cmp	r0, #0
    f40a:	d0ee      	beq.n	f3ea <bt_le_create_conn_legacy+0xe>
}
    f40c:	b004      	add	sp, #16
    f40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f412:	2119      	movs	r1, #25
    f414:	3008      	adds	r0, #8
    f416:	f006 f8a9 	bl	1556c <net_buf_simple_add>
    f41a:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f41c:	2219      	movs	r2, #25
    f41e:	2100      	movs	r1, #0
    f420:	f00c fa70 	bl	1b904 <memset>
	cp->own_addr_type = own_addr_type;
    f424:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f428:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f42c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f430:	1d60      	adds	r0, r4, #5
    f432:	f00c fb2c 	bl	1ba8e <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f436:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f43a:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    f43c:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f43e:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f440:	89fb      	ldrh	r3, [r7, #14]
    f442:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f444:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f448:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f44c:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f450:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f454:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f458:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f45c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f460:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f464:	4b0b      	ldr	r3, [pc, #44]	; (f494 <bt_le_create_conn_legacy+0xb8>)
    f466:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f468:	230b      	movs	r3, #11
    f46a:	9302      	str	r3, [sp, #8]
	state->val = val;
    f46c:	2301      	movs	r3, #1
    f46e:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f472:	f005 fded 	bl	15050 <net_buf_id>
    f476:	220c      	movs	r2, #12
    f478:	4b07      	ldr	r3, [pc, #28]	; (f498 <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f47a:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    f47c:	fb02 3300 	mla	r3, r2, r0, r3
    f480:	aa01      	add	r2, sp, #4
    f482:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f484:	f242 000d 	movw	r0, #8205	; 0x200d
    f488:	4642      	mov	r2, r8
    f48a:	f7ff fccd 	bl	ee28 <bt_hci_cmd_send_sync>
    f48e:	e7bd      	b.n	f40c <bt_le_create_conn_legacy+0x30>
    f490:	20008000 	.word	0x20008000
    f494:	20008094 	.word	0x20008094
    f498:	2000ab18 	.word	0x2000ab18

0000f49c <bt_le_create_conn_cancel>:
{
    f49c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f49e:	2100      	movs	r1, #0
{
    f4a0:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f4a2:	f242 000e 	movw	r0, #8206	; 0x200e
    f4a6:	f7ff fc75 	bl	ed94 <bt_hci_cmd_create>
	state->target = target;
    f4aa:	4b0c      	ldr	r3, [pc, #48]	; (f4dc <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f4ac:	2500      	movs	r5, #0
	state->target = target;
    f4ae:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f4b0:	230b      	movs	r3, #11
    f4b2:	4604      	mov	r4, r0
    f4b4:	9302      	str	r3, [sp, #8]
	state->val = val;
    f4b6:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f4ba:	f005 fdc9 	bl	15050 <net_buf_id>
    f4be:	220c      	movs	r2, #12
    f4c0:	4b07      	ldr	r3, [pc, #28]	; (f4e0 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f4c2:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f4c4:	fb02 3300 	mla	r3, r2, r0, r3
    f4c8:	aa01      	add	r2, sp, #4
    f4ca:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f4cc:	f242 000e 	movw	r0, #8206	; 0x200e
    f4d0:	462a      	mov	r2, r5
    f4d2:	f7ff fca9 	bl	ee28 <bt_hci_cmd_send_sync>
}
    f4d6:	b005      	add	sp, #20
    f4d8:	bd30      	pop	{r4, r5, pc}
    f4da:	bf00      	nop
    f4dc:	20008094 	.word	0x20008094
    f4e0:	2000ab18 	.word	0x2000ab18

0000f4e4 <bt_le_scan_update>:
{
    f4e4:	b570      	push	{r4, r5, r6, lr}
    f4e6:	4606      	mov	r6, r0
    f4e8:	481c      	ldr	r0, [pc, #112]	; (f55c <bt_le_scan_update+0x78>)
    f4ea:	f00c facd 	bl	1ba88 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f4ee:	0641      	lsls	r1, r0, #25
    f4f0:	f3c0 1380 	ubfx	r3, r0, #6, #1
    f4f4:	d501      	bpl.n	f4fa <bt_le_scan_update+0x16>
			return 0;
    f4f6:	2000      	movs	r0, #0
    f4f8:	e02b      	b.n	f552 <bt_le_scan_update+0x6e>
    f4fa:	4818      	ldr	r0, [pc, #96]	; (f55c <bt_le_scan_update+0x78>)
    f4fc:	f00c fac4 	bl	1ba88 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f500:	0682      	lsls	r2, r0, #26
    f502:	d421      	bmi.n	f548 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f504:	2100      	movs	r1, #0
    f506:	2206      	movs	r2, #6
    f508:	4608      	mov	r0, r1
    f50a:	f001 ff9d 	bl	11448 <bt_conn_lookup_state_le>
		if (conn) {
    f50e:	4604      	mov	r4, r0
    f510:	bb00      	cbnz	r0, f554 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f512:	2202      	movs	r2, #2
    f514:	4601      	mov	r1, r0
    f516:	f001 ff97 	bl	11448 <bt_conn_lookup_state_le>
		if (conn) {
    f51a:	4605      	mov	r5, r0
    f51c:	2800      	cmp	r0, #0
    f51e:	d0ea      	beq.n	f4f6 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f520:	f44f 7180 	mov.w	r1, #256	; 0x100
    f524:	480d      	ldr	r0, [pc, #52]	; (f55c <bt_le_scan_update+0x78>)
    f526:	f00c fab5 	bl	1ba94 <atomic_or>
			bt_conn_unref(conn);
    f52a:	4628      	mov	r0, r5
    f52c:	f001 fe2a 	bl	11184 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    f530:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f532:	4620      	mov	r0, r4
}
    f534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f538:	bf15      	itete	ne
    f53a:	2230      	movne	r2, #48	; 0x30
    f53c:	2212      	moveq	r2, #18
    f53e:	2160      	movne	r1, #96	; 0x60
    f540:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    f544:	f7ff bee4 	b.w	f310 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    f548:	4618      	mov	r0, r3
    f54a:	f7ff fd1d 	bl	ef88 <set_le_scan_enable_legacy>
		if (err) {
    f54e:	2800      	cmp	r0, #0
    f550:	d0d8      	beq.n	f504 <bt_le_scan_update+0x20>
}
    f552:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    f554:	f001 fe16 	bl	11184 <bt_conn_unref>
    f558:	e7cd      	b.n	f4f6 <bt_le_scan_update+0x12>
    f55a:	bf00      	nop
    f55c:	20008094 	.word	0x20008094

0000f560 <hci_disconn_complete>:
{
    f560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    f562:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    f564:	7835      	ldrb	r5, [r6, #0]
    f566:	bb45      	cbnz	r5, f5ba <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f568:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    f56c:	4638      	mov	r0, r7
    f56e:	f001 fe2d 	bl	111cc <bt_conn_lookup_handle>
	if (!conn) {
    f572:	4604      	mov	r4, r0
    f574:	b930      	cbnz	r0, f584 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f576:	463a      	mov	r2, r7
}
    f578:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f57c:	2145      	movs	r1, #69	; 0x45
    f57e:	480f      	ldr	r0, [pc, #60]	; (f5bc <hci_disconn_complete+0x5c>)
    f580:	f00a bf51 	b.w	1a426 <printk>
	conn->err = evt->reason;
    f584:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f586:	4629      	mov	r1, r5
	conn->err = evt->reason;
    f588:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f58a:	f001 fe27 	bl	111dc <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    f58e:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    f590:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    f592:	2b01      	cmp	r3, #1
    f594:	d004      	beq.n	f5a0 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    f596:	4620      	mov	r0, r4
}
    f598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    f59c:	f001 bdf2 	b.w	11184 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f5a0:	1d20      	adds	r0, r4, #4
    f5a2:	f00c fa71 	bl	1ba88 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    f5a6:	07c3      	lsls	r3, r0, #31
    f5a8:	d5f5      	bpl.n	f596 <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    f5aa:	4620      	mov	r0, r4
    f5ac:	2102      	movs	r1, #2
    f5ae:	f001 fe15 	bl	111dc <bt_conn_set_state>
		bt_le_scan_update(false);
    f5b2:	4628      	mov	r0, r5
    f5b4:	f7ff ff96 	bl	f4e4 <bt_le_scan_update>
    f5b8:	e7ed      	b.n	f596 <hci_disconn_complete+0x36>
}
    f5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5bc:	00020e2b 	.word	0x00020e2b

0000f5c0 <le_adv_report>:
{
    f5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    f5c4:	f100 0708 	add.w	r7, r0, #8
    f5c8:	b08d      	sub	sp, #52	; 0x34
    f5ca:	4604      	mov	r4, r0
    f5cc:	4638      	mov	r0, r7
    f5ce:	f00d fc90 	bl	1cef2 <net_buf_simple_pull_u8>
    f5d2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; f79c <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    f5d6:	f8df a1c8 	ldr.w	sl, [pc, #456]	; f7a0 <le_adv_report+0x1e0>
    f5da:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    f5dc:	9b01      	ldr	r3, [sp, #4]
    f5de:	b913      	cbnz	r3, f5e6 <le_adv_report+0x26>
}
    f5e0:	b00d      	add	sp, #52	; 0x34
    f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    f5e6:	89a3      	ldrh	r3, [r4, #12]
    f5e8:	2b08      	cmp	r3, #8
    f5ea:	d806      	bhi.n	f5fa <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    f5ec:	2145      	movs	r1, #69	; 0x45
    f5ee:	486d      	ldr	r0, [pc, #436]	; (f7a4 <le_adv_report+0x1e4>)
}
    f5f0:	b00d      	add	sp, #52	; 0x34
    f5f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    f5f6:	f00a bf16 	b.w	1a426 <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    f5fa:	2109      	movs	r1, #9
    f5fc:	4638      	mov	r0, r7
    f5fe:	f005 ff97 	bl	15530 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    f602:	237f      	movs	r3, #127	; 0x7f
    f604:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    f608:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f60a:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    f60c:	9300      	str	r3, [sp, #0]
    f60e:	18c3      	adds	r3, r0, r3
    f610:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f612:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    f616:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    f61a:	23ff      	movs	r3, #255	; 0xff
    f61c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    f620:	2300      	movs	r3, #0
    f622:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    f626:	7802      	ldrb	r2, [r0, #0]
    f628:	4606      	mov	r6, r0
    f62a:	2a04      	cmp	r2, #4
    f62c:	bf98      	it	ls
    f62e:	4b5e      	ldrls	r3, [pc, #376]	; (f7a8 <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    f630:	f100 0901 	add.w	r9, r0, #1
    f634:	bf98      	it	ls
    f636:	5c9b      	ldrbls	r3, [r3, r2]
    f638:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    f63a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    f63e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    f642:	f00c fa21 	bl	1ba88 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f646:	0645      	lsls	r5, r0, #25
    f648:	d50d      	bpl.n	f666 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    f64a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f64e:	0758      	lsls	r0, r3, #29
    f650:	d509      	bpl.n	f666 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    f652:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    f654:	4638      	mov	r0, r7
    f656:	3101      	adds	r1, #1
    f658:	f005 ff4e 	bl	154f8 <net_buf_simple_pull>
    f65c:	9b01      	ldr	r3, [sp, #4]
    f65e:	1e58      	subs	r0, r3, #1
    f660:	b2c3      	uxtb	r3, r0
    f662:	9301      	str	r3, [sp, #4]
    f664:	e7ba      	b.n	f5dc <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    f666:	7873      	ldrb	r3, [r6, #1]
    f668:	1e9a      	subs	r2, r3, #2
    f66a:	2a01      	cmp	r2, #1
    f66c:	d84c      	bhi.n	f708 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    f66e:	4649      	mov	r1, r9
    f670:	a804      	add	r0, sp, #16
    f672:	f00c fa0c 	bl	1ba8e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    f676:	f89d 3010 	ldrb.w	r3, [sp, #16]
    f67a:	3b02      	subs	r3, #2
    f67c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    f680:	ab04      	add	r3, sp, #16
    f682:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    f684:	f8da 3000 	ldr.w	r3, [sl]
    f688:	b1a3      	cbz	r3, f6b4 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    f68a:	4638      	mov	r0, r7
    f68c:	f00d fc41 	bl	1cf12 <net_buf_simple_headroom>
    f690:	4683      	mov	fp, r0
		buf->len = len;
    f692:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    f694:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    f696:	a804      	add	r0, sp, #16
		buf->len = len;
    f698:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    f69a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    f69e:	463b      	mov	r3, r7
    f6a0:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    f6a4:	f8da c000 	ldr.w	ip, [sl]
    f6a8:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    f6aa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f6ac:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f6ae:	fa10 f08b 	uxtah	r0, r0, fp
    f6b2:	60a0      	str	r0, [r4, #8]
	return list->head;
    f6b4:	4b3d      	ldr	r3, [pc, #244]	; (f7ac <le_adv_report+0x1ec>)
    f6b6:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    f6b8:	2b00      	cmp	r3, #0
    f6ba:	d032      	beq.n	f722 <le_adv_report+0x162>
    f6bc:	f1b3 0208 	subs.w	r2, r3, #8
    f6c0:	d02f      	beq.n	f722 <le_adv_report+0x162>
	return node->next;
    f6c2:	681d      	ldr	r5, [r3, #0]
    f6c4:	b105      	cbz	r5, f6c8 <le_adv_report+0x108>
    f6c6:	3d08      	subs	r5, #8
		if (listener->recv) {
    f6c8:	6813      	ldr	r3, [r2, #0]
    f6ca:	9203      	str	r2, [sp, #12]
    f6cc:	b193      	cbz	r3, f6f4 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    f6ce:	4638      	mov	r0, r7
    f6d0:	f00d fc1f 	bl	1cf12 <net_buf_simple_headroom>
    f6d4:	4683      	mov	fp, r0
	state->len = buf->len;
    f6d6:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    f6d8:	9a03      	ldr	r2, [sp, #12]
    f6da:	9302      	str	r3, [sp, #8]
			buf->len = len;
    f6dc:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    f6de:	a808      	add	r0, sp, #32
			buf->len = len;
    f6e0:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    f6e2:	4639      	mov	r1, r7
    f6e4:	6812      	ldr	r2, [r2, #0]
    f6e6:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    f6e8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f6ea:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    f6ec:	fa10 f08b 	uxtah	r0, r0, fp
    f6f0:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    f6f2:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    f6f4:	b1ad      	cbz	r5, f722 <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    f6f6:	f115 0308 	adds.w	r3, r5, #8
    f6fa:	d002      	beq.n	f702 <le_adv_report+0x142>
	return node->next;
    f6fc:	68ab      	ldr	r3, [r5, #8]
    f6fe:	b103      	cbz	r3, f702 <le_adv_report+0x142>
    f700:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    f702:	462a      	mov	r2, r5
    f704:	461d      	mov	r5, r3
    f706:	e7df      	b.n	f6c8 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    f708:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f70a:	bf0a      	itet	eq
    f70c:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    f70e:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f710:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    f712:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f714:	bf04      	itt	eq
    f716:	9306      	streq	r3, [sp, #24]
    f718:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    f71c:	f00c f9b7 	bl	1ba8e <bt_addr_le_copy>
    f720:	e7ae      	b.n	f680 <le_adv_report+0xc0>
    f722:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    f724:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f728:	f00c f9ae 	bl	1ba88 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f72c:	0641      	lsls	r1, r0, #25
    f72e:	f3c0 1580 	ubfx	r5, r0, #6, #1
    f732:	d48e      	bmi.n	f652 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    f734:	07da      	lsls	r2, r3, #31
    f736:	d58c      	bpl.n	f652 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    f738:	2202      	movs	r2, #2
    f73a:	4628      	mov	r0, r5
    f73c:	a904      	add	r1, sp, #16
    f73e:	f001 fe83 	bl	11448 <bt_conn_lookup_state_le>
	if (!conn) {
    f742:	4683      	mov	fp, r0
    f744:	2800      	cmp	r0, #0
    f746:	d084      	beq.n	f652 <le_adv_report+0x92>
    f748:	4640      	mov	r0, r8
    f74a:	f00c f99d 	bl	1ba88 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f74e:	0683      	lsls	r3, r0, #26
    f750:	d410      	bmi.n	f774 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    f752:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    f756:	4649      	mov	r1, r9
    f758:	f00c f999 	bl	1ba8e <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    f75c:	4658      	mov	r0, fp
    f75e:	f7ff fe3d 	bl	f3dc <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    f762:	b960      	cbnz	r0, f77e <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    f764:	4658      	mov	r0, fp
    f766:	2106      	movs	r1, #6
    f768:	f001 fd38 	bl	111dc <bt_conn_set_state>
	bt_conn_unref(conn);
    f76c:	4658      	mov	r0, fp
    f76e:	f001 fd09 	bl	11184 <bt_conn_unref>
	return;
    f772:	e76e      	b.n	f652 <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    f774:	4628      	mov	r0, r5
    f776:	f7ff fc07 	bl	ef88 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f77a:	2800      	cmp	r0, #0
    f77c:	d0e9      	beq.n	f752 <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    f77e:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f780:	2100      	movs	r1, #0
    f782:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    f784:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f788:	f001 fd28 	bl	111dc <bt_conn_set_state>
	bt_conn_unref(conn);
    f78c:	4658      	mov	r0, fp
    f78e:	f001 fcf9 	bl	11184 <bt_conn_unref>
	bt_le_scan_update(false);
    f792:	2000      	movs	r0, #0
    f794:	f7ff fea6 	bl	f4e4 <bt_le_scan_update>
    f798:	e75b      	b.n	f652 <le_adv_report+0x92>
    f79a:	bf00      	nop
    f79c:	20008094 	.word	0x20008094
    f7a0:	2000ab3c 	.word	0x2000ab3c
    f7a4:	000210df 	.word	0x000210df
    f7a8:	00021563 	.word	0x00021563
    f7ac:	2000ab34 	.word	0x2000ab34

0000f7b0 <bt_data_parse>:
{
    f7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f7b2:	4604      	mov	r4, r0
    f7b4:	460e      	mov	r6, r1
    f7b6:	4617      	mov	r7, r2
	while (ad->len > 1) {
    f7b8:	88a3      	ldrh	r3, [r4, #4]
    f7ba:	2b01      	cmp	r3, #1
    f7bc:	d801      	bhi.n	f7c2 <bt_data_parse+0x12>
}
    f7be:	b003      	add	sp, #12
    f7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    f7c2:	4620      	mov	r0, r4
    f7c4:	f00d fb95 	bl	1cef2 <net_buf_simple_pull_u8>
		if (len == 0U) {
    f7c8:	4605      	mov	r5, r0
    f7ca:	2800      	cmp	r0, #0
    f7cc:	d0f7      	beq.n	f7be <bt_data_parse+0xe>
		if (len > ad->len) {
    f7ce:	88a2      	ldrh	r2, [r4, #4]
    f7d0:	b283      	uxth	r3, r0
    f7d2:	429a      	cmp	r2, r3
    f7d4:	d206      	bcs.n	f7e4 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    f7d6:	2157      	movs	r1, #87	; 0x57
    f7d8:	480c      	ldr	r0, [pc, #48]	; (f80c <bt_data_parse+0x5c>)
}
    f7da:	b003      	add	sp, #12
    f7dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    f7e0:	f00a be21 	b.w	1a426 <printk>
		data.type = net_buf_simple_pull_u8(ad);
    f7e4:	4620      	mov	r0, r4
    f7e6:	f00d fb84 	bl	1cef2 <net_buf_simple_pull_u8>
		data.data = ad->data;
    f7ea:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    f7ec:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    f7f0:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    f7f2:	4639      	mov	r1, r7
    f7f4:	4668      	mov	r0, sp
		data.data_len = len - 1;
    f7f6:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    f7fa:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    f7fc:	47b0      	blx	r6
    f7fe:	2800      	cmp	r0, #0
    f800:	d0dd      	beq.n	f7be <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    f802:	4629      	mov	r1, r5
    f804:	4620      	mov	r0, r4
    f806:	f005 fe77 	bl	154f8 <net_buf_simple_pull>
    f80a:	e7d5      	b.n	f7b8 <bt_data_parse+0x8>
    f80c:	000210fd 	.word	0x000210fd

0000f810 <bt_send>:
	return bt_dev.drv->send(buf);
    f810:	4b02      	ldr	r3, [pc, #8]	; (f81c <bt_send+0xc>)
    f812:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    f816:	691b      	ldr	r3, [r3, #16]
    f818:	4718      	bx	r3
    f81a:	bf00      	nop
    f81c:	20008000 	.word	0x20008000

0000f820 <bt_hci_cmd_send>:
{
    f820:	b538      	push	{r3, r4, r5, lr}
    f822:	4605      	mov	r5, r0
	if (!buf) {
    f824:	460c      	mov	r4, r1
    f826:	b919      	cbnz	r1, f830 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    f828:	f7ff fab4 	bl	ed94 <bt_hci_cmd_create>
		if (!buf) {
    f82c:	4604      	mov	r4, r0
    f82e:	b1c0      	cbz	r0, f862 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    f830:	f640 4335 	movw	r3, #3125	; 0xc35
    f834:	429d      	cmp	r5, r3
    f836:	d10e      	bne.n	f856 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    f838:	4620      	mov	r0, r4
    f83a:	f7ff ffe9 	bl	f810 <bt_send>
		if (err) {
    f83e:	4605      	mov	r5, r0
    f840:	b138      	cbz	r0, f852 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    f842:	4602      	mov	r2, r0
    f844:	2145      	movs	r1, #69	; 0x45
    f846:	4808      	ldr	r0, [pc, #32]	; (f868 <bt_hci_cmd_send+0x48>)
    f848:	f00a fded 	bl	1a426 <printk>
			net_buf_unref(buf);
    f84c:	4620      	mov	r0, r4
    f84e:	f005 fd77 	bl	15340 <net_buf_unref>
}
    f852:	4628      	mov	r0, r5
    f854:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    f856:	4621      	mov	r1, r4
    f858:	4804      	ldr	r0, [pc, #16]	; (f86c <bt_hci_cmd_send+0x4c>)
    f85a:	f005 fd43 	bl	152e4 <net_buf_put>
	return 0;
    f85e:	2500      	movs	r5, #0
    f860:	e7f7      	b.n	f852 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    f862:	f06f 0536 	mvn.w	r5, #54	; 0x36
    f866:	e7f4      	b.n	f852 <bt_hci_cmd_send+0x32>
    f868:	00021111 	.word	0x00021111
    f86c:	20008118 	.word	0x20008118

0000f870 <bt_hci_host_num_completed_packets>:
{
    f870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f872:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    f874:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    f876:	7980      	ldrb	r0, [r0, #6]
    f878:	f005 fbe2 	bl	15040 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    f87c:	4621      	mov	r1, r4
    f87e:	f00e f99a 	bl	1dbb6 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f882:	4b24      	ldr	r3, [pc, #144]	; (f914 <bt_hci_host_num_completed_packets+0xa4>)
    f884:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    f888:	069b      	lsls	r3, r3, #26
    f88a:	d541      	bpl.n	f910 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    f88c:	7d60      	ldrb	r0, [r4, #21]
    f88e:	f002 f83d 	bl	1190c <bt_conn_lookup_index>
	if (!conn) {
    f892:	4605      	mov	r5, r0
    f894:	b930      	cbnz	r0, f8a4 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    f896:	7d62      	ldrb	r2, [r4, #21]
    f898:	2157      	movs	r1, #87	; 0x57
}
    f89a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    f89e:	481e      	ldr	r0, [pc, #120]	; (f918 <bt_hci_host_num_completed_packets+0xa8>)
    f8a0:	f00a bdc1 	b.w	1a426 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    f8a4:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    f8a6:	2b01      	cmp	r3, #1
    f8a8:	d002      	beq.n	f8b0 <bt_hci_host_num_completed_packets+0x40>
    f8aa:	3b07      	subs	r3, #7
    f8ac:	2b01      	cmp	r3, #1
    f8ae:	d80f      	bhi.n	f8d0 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    f8b0:	4628      	mov	r0, r5
    f8b2:	f001 fc67 	bl	11184 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    f8b6:	2105      	movs	r1, #5
    f8b8:	f640 4035 	movw	r0, #3125	; 0xc35
    f8bc:	f7ff fa6a 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    f8c0:	4604      	mov	r4, r0
    f8c2:	b970      	cbnz	r0, f8e2 <bt_hci_host_num_completed_packets+0x72>
}
    f8c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    f8c8:	2145      	movs	r1, #69	; 0x45
    f8ca:	4814      	ldr	r0, [pc, #80]	; (f91c <bt_hci_host_num_completed_packets+0xac>)
    f8cc:	f00a bdab 	b.w	1a426 <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    f8d0:	4813      	ldr	r0, [pc, #76]	; (f920 <bt_hci_host_num_completed_packets+0xb0>)
    f8d2:	2157      	movs	r1, #87	; 0x57
    f8d4:	f00a fda7 	bl	1a426 <printk>
		bt_conn_unref(conn);
    f8d8:	4628      	mov	r0, r5
}
    f8da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    f8de:	f001 bc51 	b.w	11184 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    f8e2:	f100 0708 	add.w	r7, r0, #8
    f8e6:	2101      	movs	r1, #1
    f8e8:	4638      	mov	r0, r7
    f8ea:	f005 fe3f 	bl	1556c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    f8ee:	2501      	movs	r5, #1
    f8f0:	2104      	movs	r1, #4
    f8f2:	7005      	strb	r5, [r0, #0]
    f8f4:	4638      	mov	r0, r7
    f8f6:	f005 fe39 	bl	1556c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    f8fa:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    f8fc:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    f8fe:	7085      	strb	r5, [r0, #2]
    f900:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    f902:	4621      	mov	r1, r4
}
    f904:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    f908:	f640 4035 	movw	r0, #3125	; 0xc35
    f90c:	f7ff bf88 	b.w	f820 <bt_hci_cmd_send>
}
    f910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f912:	bf00      	nop
    f914:	20008000 	.word	0x20008000
    f918:	00021138 	.word	0x00021138
    f91c:	00021197 	.word	0x00021197
    f920:	00021166 	.word	0x00021166

0000f924 <conn_auto_initiate>:
{
    f924:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    f926:	7a83      	ldrb	r3, [r0, #10]
{
    f928:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    f92a:	2b07      	cmp	r3, #7
    f92c:	d15d      	bne.n	f9ea <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    f92e:	1d06      	adds	r6, r0, #4
    f930:	4630      	mov	r0, r6
    f932:	f00c f8a9 	bl	1ba88 <atomic_get>
    f936:	0483      	lsls	r3, r0, #18
    f938:	d41b      	bmi.n	f972 <conn_auto_initiate+0x4e>
    f93a:	78e3      	ldrb	r3, [r4, #3]
    f93c:	b123      	cbz	r3, f948 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    f93e:	4b2c      	ldr	r3, [pc, #176]	; (f9f0 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    f940:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f944:	071d      	lsls	r5, r3, #28
    f946:	d514      	bpl.n	f972 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    f948:	2102      	movs	r1, #2
    f94a:	f242 0016 	movw	r0, #8214	; 0x2016
    f94e:	f7ff fa21 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    f952:	4605      	mov	r5, r0
    f954:	b168      	cbz	r0, f972 <conn_auto_initiate+0x4e>
    f956:	2102      	movs	r1, #2
    f958:	3008      	adds	r0, #8
    f95a:	f005 fe07 	bl	1556c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    f95e:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f960:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    f962:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f964:	f242 0016 	movw	r0, #8214	; 0x2016
}
    f968:	b004      	add	sp, #16
    f96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f96e:	f7ff bf57 	b.w	f820 <bt_hci_cmd_send>
    f972:	4630      	mov	r0, r6
    f974:	f00c f888 	bl	1ba88 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    f978:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    f97c:	4d1c      	ldr	r5, [pc, #112]	; (f9f0 <conn_auto_initiate+0xcc>)
    f97e:	f3c0 3100 	ubfx	r1, r0, #12, #1
    f982:	d116      	bne.n	f9b2 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    f984:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    f988:	07d8      	lsls	r0, r3, #31
    f98a:	d512      	bpl.n	f9b2 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    f98c:	2302      	movs	r3, #2
    f98e:	4620      	mov	r0, r4
    f990:	461a      	mov	r2, r3
    f992:	9100      	str	r1, [sp, #0]
    f994:	f00c f92c 	bl	1bbf0 <bt_le_set_phy>
		if (!err) {
    f998:	4602      	mov	r2, r0
    f99a:	b930      	cbnz	r0, f9aa <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f99c:	2180      	movs	r1, #128	; 0x80
    f99e:	4630      	mov	r0, r6
}
    f9a0:	b004      	add	sp, #16
    f9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f9a6:	f00c b875 	b.w	1ba94 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    f9aa:	2145      	movs	r1, #69	; 0x45
    f9ac:	4811      	ldr	r0, [pc, #68]	; (f9f4 <conn_auto_initiate+0xd0>)
    f9ae:	f00a fd3a 	bl	1a426 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    f9b2:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    f9b6:	069a      	lsls	r2, r3, #26
    f9b8:	d517      	bpl.n	f9ea <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    f9ba:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f9be:	689b      	ldr	r3, [r3, #8]
    f9c0:	079b      	lsls	r3, r3, #30
    f9c2:	d512      	bpl.n	f9ea <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f9c4:	f10d 010e 	add.w	r1, sp, #14
    f9c8:	a803      	add	r0, sp, #12
    f9ca:	f7ff fa8f 	bl	eeec <hci_le_read_max_data_len>
			if (!err) {
    f9ce:	b960      	cbnz	r0, f9ea <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    f9d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    f9d4:	4620      	mov	r0, r4
    f9d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f9da:	f00c f8ec 	bl	1bbb6 <bt_le_set_data_len>
				if (err) {
    f9de:	4602      	mov	r2, r0
    f9e0:	b118      	cbz	r0, f9ea <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    f9e2:	2145      	movs	r1, #69	; 0x45
    f9e4:	4804      	ldr	r0, [pc, #16]	; (f9f8 <conn_auto_initiate+0xd4>)
    f9e6:	f00a fd1e 	bl	1a426 <printk>
}
    f9ea:	b004      	add	sp, #16
    f9ec:	bd70      	pop	{r4, r5, r6, pc}
    f9ee:	bf00      	nop
    f9f0:	20008000 	.word	0x20008000
    f9f4:	000211bf 	.word	0x000211bf
    f9f8:	000211de 	.word	0x000211de

0000f9fc <le_phy_update_complete>:
{
    f9fc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f9fe:	6883      	ldr	r3, [r0, #8]
    fa00:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    fa04:	4628      	mov	r0, r5
    fa06:	f001 fbe1 	bl	111cc <bt_conn_lookup_handle>
	if (!conn) {
    fa0a:	4604      	mov	r4, r0
    fa0c:	b930      	cbnz	r0, fa1c <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa0e:	462a      	mov	r2, r5
}
    fa10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa14:	2145      	movs	r1, #69	; 0x45
    fa16:	480c      	ldr	r0, [pc, #48]	; (fa48 <le_phy_update_complete+0x4c>)
    fa18:	f00a bd05 	b.w	1a426 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    fa1c:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fa1e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    fa22:	4628      	mov	r0, r5
    fa24:	f00c f844 	bl	1bab0 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fa28:	0603      	lsls	r3, r0, #24
    fa2a:	d507      	bpl.n	fa3c <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fa2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fa30:	4628      	mov	r0, r5
    fa32:	f00c f82f 	bl	1ba94 <atomic_or>
		conn_auto_initiate(conn);
    fa36:	4620      	mov	r0, r4
    fa38:	f7ff ff74 	bl	f924 <conn_auto_initiate>
	bt_conn_unref(conn);
    fa3c:	4620      	mov	r0, r4
}
    fa3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    fa42:	f001 bb9f 	b.w	11184 <bt_conn_unref>
    fa46:	bf00      	nop
    fa48:	00020e02 	.word	0x00020e02

0000fa4c <le_remote_feat_complete>:
{
    fa4c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    fa4e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fa50:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    fa54:	4630      	mov	r0, r6
    fa56:	f001 fbb9 	bl	111cc <bt_conn_lookup_handle>
	if (!conn) {
    fa5a:	4604      	mov	r4, r0
    fa5c:	b930      	cbnz	r0, fa6c <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa5e:	4632      	mov	r2, r6
}
    fa60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa64:	2145      	movs	r1, #69	; 0x45
    fa66:	480b      	ldr	r0, [pc, #44]	; (fa94 <le_remote_feat_complete+0x48>)
    fa68:	f00a bcdd 	b.w	1a426 <printk>
	if (!evt->status) {
    fa6c:	782b      	ldrb	r3, [r5, #0]
    fa6e:	b923      	cbnz	r3, fa7a <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    fa70:	2208      	movs	r2, #8
    fa72:	1ce9      	adds	r1, r5, #3
    fa74:	30ac      	adds	r0, #172	; 0xac
    fa76:	f00b ff1a 	bl	1b8ae <memcpy>
    fa7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fa7e:	1d20      	adds	r0, r4, #4
    fa80:	f00c f808 	bl	1ba94 <atomic_or>
	conn_auto_initiate(conn);
    fa84:	4620      	mov	r0, r4
    fa86:	f7ff ff4d 	bl	f924 <conn_auto_initiate>
	bt_conn_unref(conn);
    fa8a:	4620      	mov	r0, r4
}
    fa8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    fa90:	f001 bb78 	b.w	11184 <bt_conn_unref>
    fa94:	00020e02 	.word	0x00020e02

0000fa98 <le_conn_param_neg_reply>:
{
    fa98:	b570      	push	{r4, r5, r6, lr}
    fa9a:	4606      	mov	r6, r0
    fa9c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    fa9e:	f242 0021 	movw	r0, #8225	; 0x2021
    faa2:	2103      	movs	r1, #3
    faa4:	f7ff f976 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    faa8:	4604      	mov	r4, r0
    faaa:	b928      	cbnz	r0, fab8 <le_conn_param_neg_reply+0x20>
}
    faac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    fab0:	2145      	movs	r1, #69	; 0x45
    fab2:	4808      	ldr	r0, [pc, #32]	; (fad4 <le_conn_param_neg_reply+0x3c>)
    fab4:	f00a bcb7 	b.w	1a426 <printk>
    fab8:	2103      	movs	r1, #3
    faba:	3008      	adds	r0, #8
    fabc:	f005 fd56 	bl	1556c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    fac0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    fac2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fac4:	4621      	mov	r1, r4
}
    fac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    faca:	f242 0021 	movw	r0, #8225	; 0x2021
    face:	f7ff bea7 	b.w	f820 <bt_hci_cmd_send>
    fad2:	bf00      	nop
    fad4:	000211ff 	.word	0x000211ff

0000fad8 <le_conn_param_req>:
{
    fad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    fada:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fadc:	78d9      	ldrb	r1, [r3, #3]
    fade:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    fae0:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fae2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fae6:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    faea:	7959      	ldrb	r1, [r3, #5]
    faec:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    faee:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    faf0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    faf4:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    faf8:	799a      	ldrb	r2, [r3, #6]
    fafa:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    fafc:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    fafe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb02:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    fb06:	7a1a      	ldrb	r2, [r3, #8]
    fb08:	7a5b      	ldrb	r3, [r3, #9]
    fb0a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fb0e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    fb12:	f001 fb5b 	bl	111cc <bt_conn_lookup_handle>
	if (!conn) {
    fb16:	4606      	mov	r6, r0
    fb18:	b950      	cbnz	r0, fb30 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fb1a:	2145      	movs	r1, #69	; 0x45
    fb1c:	481c      	ldr	r0, [pc, #112]	; (fb90 <le_conn_param_req+0xb8>)
    fb1e:	4622      	mov	r2, r4
    fb20:	f00a fc81 	bl	1a426 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    fb24:	2102      	movs	r1, #2
    fb26:	4620      	mov	r0, r4
    fb28:	f7ff ffb6 	bl	fa98 <le_conn_param_neg_reply>
}
    fb2c:	b003      	add	sp, #12
    fb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    fb30:	4669      	mov	r1, sp
    fb32:	f001 f999 	bl	10e68 <le_param_req>
    fb36:	b938      	cbnz	r0, fb48 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    fb38:	211e      	movs	r1, #30
    fb3a:	4620      	mov	r0, r4
    fb3c:	f7ff ffac 	bl	fa98 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    fb40:	4630      	mov	r0, r6
    fb42:	f001 fb1f 	bl	11184 <bt_conn_unref>
    fb46:	e7f1      	b.n	fb2c <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    fb48:	210e      	movs	r1, #14
    fb4a:	f242 0020 	movw	r0, #8224	; 0x2020
    fb4e:	f7ff f921 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    fb52:	4605      	mov	r5, r0
    fb54:	2800      	cmp	r0, #0
    fb56:	d0f3      	beq.n	fb40 <le_conn_param_req+0x68>
    fb58:	210e      	movs	r1, #14
    fb5a:	3008      	adds	r0, #8
    fb5c:	f005 fd06 	bl	1556c <net_buf_simple_add>
    fb60:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    fb62:	220e      	movs	r2, #14
    fb64:	2100      	movs	r1, #0
    fb66:	f00b fecd 	bl	1b904 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    fb6a:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fb6e:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    fb70:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    fb72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    fb76:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    fb78:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    fb7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fb7e:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    fb82:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    fb84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fb88:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fb8a:	f7ff fe49 	bl	f820 <bt_hci_cmd_send>
    fb8e:	e7d7      	b.n	fb40 <le_conn_param_req+0x68>
    fb90:	00020e02 	.word	0x00020e02

0000fb94 <hci_tx_thread>:
{
    fb94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    fb98:	f8df 8128 	ldr.w	r8, [pc, #296]	; fcc4 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    fb9c:	f8df 9128 	ldr.w	r9, [pc, #296]	; fcc8 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
    fba0:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    fba4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fba8:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    fbaa:	f36f 3310 	bfc	r3, #12, #5
    fbae:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fbb2:	f001 fa7b 	bl	110ac <bt_conn_prepare_events>
    fbb6:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    fbb8:	f04f 32ff 	mov.w	r2, #4294967295
    fbbc:	f04f 33ff 	mov.w	r3, #4294967295
    fbc0:	4631      	mov	r1, r6
    fbc2:	4840      	ldr	r0, [pc, #256]	; (fcc4 <hci_tx_thread+0x130>)
    fbc4:	f00a fa16 	bl	19ff4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    fbc8:	b158      	cbz	r0, fbe2 <hci_tx_thread+0x4e>
    fbca:	f241 4271 	movw	r2, #5233	; 0x1471
    fbce:	4649      	mov	r1, r9
    fbd0:	483e      	ldr	r0, [pc, #248]	; (fccc <hci_tx_thread+0x138>)
    fbd2:	f00a fc28 	bl	1a426 <printk>
    fbd6:	4040      	eors	r0, r0
    fbd8:	f380 8811 	msr	BASEPRI, r0
    fbdc:	f04f 0003 	mov.w	r0, #3
    fbe0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    fbe2:	4d3b      	ldr	r5, [pc, #236]	; (fcd0 <hci_tx_thread+0x13c>)
{
    fbe4:	4f37      	ldr	r7, [pc, #220]	; (fcc4 <hci_tx_thread+0x130>)
    fbe6:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
    fbea:	b916      	cbnz	r6, fbf2 <hci_tx_thread+0x5e>
	z_impl_k_yield();
    fbec:	f009 f904 	bl	18df8 <z_impl_k_yield>
	while (1) {
    fbf0:	e7d8      	b.n	fba4 <hci_tx_thread+0x10>
		switch (ev->state) {
    fbf2:	68fa      	ldr	r2, [r7, #12]
    fbf4:	f3c2 3204 	ubfx	r2, r2, #12, #5
    fbf8:	2a01      	cmp	r2, #1
    fbfa:	d953      	bls.n	fca4 <hci_tx_thread+0x110>
    fbfc:	2a04      	cmp	r2, #4
    fbfe:	d15b      	bne.n	fcb8 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    fc00:	7b3b      	ldrb	r3, [r7, #12]
    fc02:	2b00      	cmp	r3, #0
    fc04:	d151      	bne.n	fcaa <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    fc06:	2200      	movs	r2, #0
    fc08:	2300      	movs	r3, #0
    fc0a:	4832      	ldr	r0, [pc, #200]	; (fcd4 <hci_tx_thread+0x140>)
    fc0c:	f005 fb16 	bl	1523c <net_buf_get>
	BT_ASSERT(buf);
    fc10:	4604      	mov	r4, r0
    fc12:	b958      	cbnz	r0, fc2c <hci_tx_thread+0x98>
    fc14:	f241 420e 	movw	r2, #5134	; 0x140e
    fc18:	4649      	mov	r1, r9
    fc1a:	482c      	ldr	r0, [pc, #176]	; (fccc <hci_tx_thread+0x138>)
    fc1c:	f00a fc03 	bl	1a426 <printk>
    fc20:	4040      	eors	r0, r0
    fc22:	f380 8811 	msr	BASEPRI, r0
    fc26:	f04f 0003 	mov.w	r0, #3
    fc2a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    fc2c:	f04f 33ff 	mov.w	r3, #4294967295
    fc30:	f04f 32ff 	mov.w	r2, #4294967295
    fc34:	4658      	mov	r0, fp
    fc36:	f009 fa5d 	bl	190f4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    fc3a:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    fc3e:	b153      	cbz	r3, fc56 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    fc40:	2145      	movs	r1, #69	; 0x45
    fc42:	4825      	ldr	r0, [pc, #148]	; (fcd8 <hci_tx_thread+0x144>)
    fc44:	f00a fbef 	bl	1a426 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    fc48:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    fc4c:	f005 fb78 	bl	15340 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fc50:	2300      	movs	r3, #0
    fc52:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    fc56:	4620      	mov	r0, r4
    fc58:	f005 fbb6 	bl	153c8 <net_buf_ref>
    fc5c:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
    fc60:	4620      	mov	r0, r4
    fc62:	f7ff fdd5 	bl	f810 <bt_send>
	if (err) {
    fc66:	4602      	mov	r2, r0
    fc68:	b1e0      	cbz	r0, fca4 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    fc6a:	2145      	movs	r1, #69	; 0x45
    fc6c:	481b      	ldr	r0, [pc, #108]	; (fcdc <hci_tx_thread+0x148>)
    fc6e:	f00a fbda 	bl	1a426 <printk>
	z_impl_k_sem_give(sem);
    fc72:	481b      	ldr	r0, [pc, #108]	; (fce0 <hci_tx_thread+0x14c>)
    fc74:	f009 fa02 	bl	1907c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    fc78:	4620      	mov	r0, r4
    fc7a:	f005 f9e9 	bl	15050 <net_buf_id>
    fc7e:	220c      	movs	r2, #12
    fc80:	4b18      	ldr	r3, [pc, #96]	; (fce4 <hci_tx_thread+0x150>)
    fc82:	211f      	movs	r1, #31
    fc84:	fb02 3000 	mla	r0, r2, r0, r3
    fc88:	4622      	mov	r2, r4
    fc8a:	8840      	ldrh	r0, [r0, #2]
    fc8c:	f7fe ff20 	bl	ead0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    fc90:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    fc94:	f005 fb54 	bl	15340 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fc98:	2300      	movs	r3, #0
		net_buf_unref(buf);
    fc9a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    fc9c:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
    fca0:	f005 fb4e 	bl	15340 <net_buf_unref>
	for (; count; ev++, count--) {
    fca4:	3714      	adds	r7, #20
    fca6:	3e01      	subs	r6, #1
    fca8:	e79f      	b.n	fbea <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    fcaa:	2b01      	cmp	r3, #1
    fcac:	d1fa      	bne.n	fca4 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    fcae:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    fcb0:	3834      	subs	r0, #52	; 0x34
    fcb2:	f001 fdab 	bl	1180c <bt_conn_process_tx>
    fcb6:	e7f5      	b.n	fca4 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    fcb8:	2157      	movs	r1, #87	; 0x57
    fcba:	480b      	ldr	r0, [pc, #44]	; (fce8 <hci_tx_thread+0x154>)
    fcbc:	f00a fbb3 	bl	1a426 <printk>
    fcc0:	e7f0      	b.n	fca4 <hci_tx_thread+0x110>
    fcc2:	bf00      	nop
    fcc4:	20008344 	.word	0x20008344
    fcc8:	00020ef4 	.word	0x00020ef4
    fccc:	0001f98f 	.word	0x0001f98f
    fcd0:	20008000 	.word	0x20008000
    fcd4:	20008118 	.word	0x20008118
    fcd8:	0002121e 	.word	0x0002121e
    fcdc:	00021111 	.word	0x00021111
    fce0:	200080e0 	.word	0x200080e0
    fce4:	2000ab18 	.word	0x2000ab18
    fce8:	0002123e 	.word	0x0002123e

0000fcec <hci_event_prio>:
{
    fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fcf0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    fcf2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    fcf6:	4630      	mov	r0, r6
    fcf8:	f00d f90b 	bl	1cf12 <net_buf_simple_headroom>
	state->len = buf->len;
    fcfc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    fd00:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    fd02:	f1b8 0f01 	cmp.w	r8, #1
    fd06:	d80b      	bhi.n	fd20 <hci_event_prio+0x34>
    fd08:	f641 02ae 	movw	r2, #6318	; 0x18ae
    fd0c:	491a      	ldr	r1, [pc, #104]	; (fd78 <hci_event_prio+0x8c>)
    fd0e:	481b      	ldr	r0, [pc, #108]	; (fd7c <hci_event_prio+0x90>)
    fd10:	f00a fb89 	bl	1a426 <printk>
    fd14:	4040      	eors	r0, r0
    fd16:	f380 8811 	msr	BASEPRI, r0
    fd1a:	f04f 0003 	mov.w	r0, #3
    fd1e:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    fd20:	4630      	mov	r0, r6
    fd22:	2102      	movs	r1, #2
    fd24:	f005 fc04 	bl	15530 <net_buf_simple_pull_mem>
    fd28:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fd2a:	7800      	ldrb	r0, [r0, #0]
    fd2c:	f00b fe8b 	bl	1ba46 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fd30:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fd32:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fd34:	d40b      	bmi.n	fd4e <hci_event_prio+0x62>
    fd36:	f641 02b2 	movw	r2, #6322	; 0x18b2
    fd3a:	490f      	ldr	r1, [pc, #60]	; (fd78 <hci_event_prio+0x8c>)
    fd3c:	480f      	ldr	r0, [pc, #60]	; (fd7c <hci_event_prio+0x90>)
    fd3e:	f00a fb72 	bl	1a426 <printk>
    fd42:	4040      	eors	r0, r0
    fd44:	f380 8811 	msr	BASEPRI, r0
    fd48:	f04f 0003 	mov.w	r0, #3
    fd4c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    fd4e:	2305      	movs	r3, #5
    fd50:	4621      	mov	r1, r4
    fd52:	4a0b      	ldr	r2, [pc, #44]	; (fd80 <hci_event_prio+0x94>)
    fd54:	7838      	ldrb	r0, [r7, #0]
    fd56:	f7fe fdb3 	bl	e8c0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fd5a:	07b3      	lsls	r3, r6, #30
    fd5c:	d507      	bpl.n	fd6e <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    fd5e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fd60:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    fd64:	fa10 f585 	uxtah	r5, r0, r5
    fd68:	60a5      	str	r5, [r4, #8]
}
    fd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    fd6e:	4620      	mov	r0, r4
}
    fd70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    fd74:	f005 bae4 	b.w	15340 <net_buf_unref>
    fd78:	00020ef4 	.word	0x00020ef4
    fd7c:	0001f98f 	.word	0x0001f98f
    fd80:	0001e810 	.word	0x0001e810

0000fd84 <bt_recv>:
{
    fd84:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    fd86:	7d02      	ldrb	r2, [r0, #20]
    fd88:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    fd8a:	2a01      	cmp	r2, #1
    fd8c:	d007      	beq.n	fd9e <bt_recv+0x1a>
    fd8e:	2a03      	cmp	r2, #3
    fd90:	d113      	bne.n	fdba <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    fd92:	480f      	ldr	r0, [pc, #60]	; (fdd0 <bt_recv+0x4c>)
    fd94:	4629      	mov	r1, r5
    fd96:	f005 faa5 	bl	152e4 <net_buf_put>
		return 0;
    fd9a:	2000      	movs	r0, #0
    fd9c:	e00c      	b.n	fdb8 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fd9e:	6883      	ldr	r3, [r0, #8]
    fda0:	7818      	ldrb	r0, [r3, #0]
    fda2:	f00b fe50 	bl	1ba46 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    fda6:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fda8:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    fdaa:	d502      	bpl.n	fdb2 <bt_recv+0x2e>
			hci_event_prio(buf);
    fdac:	4628      	mov	r0, r5
    fdae:	f7ff ff9d 	bl	fcec <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fdb2:	f014 0002 	ands.w	r0, r4, #2
    fdb6:	d1ec      	bne.n	fd92 <bt_recv+0xe>
}
    fdb8:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    fdba:	2145      	movs	r1, #69	; 0x45
    fdbc:	4805      	ldr	r0, [pc, #20]	; (fdd4 <bt_recv+0x50>)
    fdbe:	f00a fb32 	bl	1a426 <printk>
		net_buf_unref(buf);
    fdc2:	4628      	mov	r0, r5
    fdc4:	f005 fabc 	bl	15340 <net_buf_unref>
		return -EINVAL;
    fdc8:	f06f 0015 	mvn.w	r0, #21
    fdcc:	e7f4      	b.n	fdb8 <bt_recv+0x34>
    fdce:	bf00      	nop
    fdd0:	200080fc 	.word	0x200080fc
    fdd4:	00021264 	.word	0x00021264

0000fdd8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    fdd8:	4a08      	ldr	r2, [pc, #32]	; (fdfc <bt_hci_driver_register+0x24>)
{
    fdda:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    fddc:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
    fde0:	b930      	cbnz	r0, fdf0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    fde2:	68d9      	ldr	r1, [r3, #12]
    fde4:	b139      	cbz	r1, fdf6 <bt_hci_driver_register+0x1e>
    fde6:	6919      	ldr	r1, [r3, #16]
    fde8:	b129      	cbz	r1, fdf6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    fdea:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
    fdee:	4770      	bx	lr
		return -EALREADY;
    fdf0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    fdf4:	4770      	bx	lr
		return -EINVAL;
    fdf6:	f06f 0015 	mvn.w	r0, #21
}
    fdfa:	4770      	bx	lr
    fdfc:	20008000 	.word	0x20008000

0000fe00 <bt_finalize_init>:
{
    fe00:	b508      	push	{r3, lr}
    fe02:	2102      	movs	r1, #2
    fe04:	4803      	ldr	r0, [pc, #12]	; (fe14 <bt_finalize_init+0x14>)
    fe06:	f00b fe45 	bl	1ba94 <atomic_or>
}
    fe0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    fe0e:	2000      	movs	r0, #0
    fe10:	f7ff bb68 	b.w	f4e4 <bt_le_scan_update>
    fe14:	20008094 	.word	0x20008094

0000fe18 <bt_init>:
{
    fe18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    fe1a:	4d60      	ldr	r5, [pc, #384]	; (ff9c <bt_init+0x184>)
    fe1c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    fe20:	6899      	ldr	r1, [r3, #8]
    fe22:	f011 0101 	ands.w	r1, r1, #1
    fe26:	d11e      	bne.n	fe66 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    fe28:	f640 4003 	movw	r0, #3075	; 0xc03
    fe2c:	aa01      	add	r2, sp, #4
    fe2e:	f7fe fffb 	bl	ee28 <bt_hci_cmd_send_sync>
		if (err) {
    fe32:	4604      	mov	r4, r0
    fe34:	2800      	cmp	r0, #0
    fe36:	f040 80ad 	bne.w	ff94 <bt_init+0x17c>
	uint8_t status = buf->data[0];
    fe3a:	9b01      	ldr	r3, [sp, #4]
    fe3c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    fe3e:	781b      	ldrb	r3, [r3, #0]
    fe40:	b973      	cbnz	r3, fe60 <bt_init+0x48>
	scan_dev_found_cb = NULL;
    fe42:	4a57      	ldr	r2, [pc, #348]	; (ffa0 <bt_init+0x188>)
    fe44:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    fe46:	f105 0394 	add.w	r3, r5, #148	; 0x94
    fe4a:	4618      	mov	r0, r3
    fe4c:	f00b fe1c 	bl	1ba88 <atomic_get>
    fe50:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fe54:	e8d3 2fef 	ldaex	r2, [r3]
    fe58:	e8c3 0fe1 	stlex	r1, r0, [r3]
    fe5c:	2900      	cmp	r1, #0
    fe5e:	d1f9      	bne.n	fe54 <bt_init+0x3c>
		net_buf_unref(rsp);
    fe60:	9801      	ldr	r0, [sp, #4]
    fe62:	f005 fa6d 	bl	15340 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    fe66:	2100      	movs	r1, #0
    fe68:	f241 0003 	movw	r0, #4099	; 0x1003
    fe6c:	aa01      	add	r2, sp, #4
    fe6e:	f7fe ffdb 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    fe72:	4604      	mov	r4, r0
    fe74:	2800      	cmp	r0, #0
    fe76:	f040 808d 	bne.w	ff94 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    fe7a:	9b01      	ldr	r3, [sp, #4]
    fe7c:	2208      	movs	r2, #8
    fe7e:	6899      	ldr	r1, [r3, #8]
    fe80:	4848      	ldr	r0, [pc, #288]	; (ffa4 <bt_init+0x18c>)
    fe82:	3101      	adds	r1, #1
    fe84:	f00b fd13 	bl	1b8ae <memcpy>
	net_buf_unref(rsp);
    fe88:	9801      	ldr	r0, [sp, #4]
    fe8a:	f005 fa59 	bl	15340 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    fe8e:	4621      	mov	r1, r4
    fe90:	f241 0001 	movw	r0, #4097	; 0x1001
    fe94:	aa01      	add	r2, sp, #4
    fe96:	f7fe ffc7 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    fe9a:	4604      	mov	r4, r0
    fe9c:	2800      	cmp	r0, #0
    fe9e:	d179      	bne.n	ff94 <bt_init+0x17c>
	read_local_ver_complete(rsp);
    fea0:	9801      	ldr	r0, [sp, #4]
    fea2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    fea4:	785a      	ldrb	r2, [r3, #1]
    fea6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    feaa:	78d9      	ldrb	r1, [r3, #3]
    feac:	789a      	ldrb	r2, [r3, #2]
    feae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    feb2:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    feb4:	791a      	ldrb	r2, [r3, #4]
    feb6:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    feba:	7a19      	ldrb	r1, [r3, #8]
    febc:	79da      	ldrb	r2, [r3, #7]
    febe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fec2:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    fec4:	795a      	ldrb	r2, [r3, #5]
    fec6:	799b      	ldrb	r3, [r3, #6]
    fec8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fecc:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    fece:	f005 fa37 	bl	15340 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    fed2:	4621      	mov	r1, r4
    fed4:	f241 0002 	movw	r0, #4098	; 0x1002
    fed8:	aa01      	add	r2, sp, #4
    feda:	f7fe ffa5 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    fede:	4604      	mov	r4, r0
    fee0:	2800      	cmp	r0, #0
    fee2:	d157      	bne.n	ff94 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
    fee4:	9b01      	ldr	r3, [sp, #4]
    fee6:	2240      	movs	r2, #64	; 0x40
    fee8:	6899      	ldr	r1, [r3, #8]
    feea:	482f      	ldr	r0, [pc, #188]	; (ffa8 <bt_init+0x190>)
    feec:	3101      	adds	r1, #1
    feee:	f00b fcde 	bl	1b8ae <memcpy>
	net_buf_unref(rsp);
    fef2:	9801      	ldr	r0, [sp, #4]
    fef4:	f005 fa24 	bl	15340 <net_buf_unref>
		err = prng_init();
    fef8:	f000 fe7a 	bl	10bf0 <prng_init>
		if (err) {
    fefc:	4604      	mov	r4, r0
    fefe:	2800      	cmp	r0, #0
    ff00:	d148      	bne.n	ff94 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    ff02:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    ff06:	069f      	lsls	r7, r3, #26
    ff08:	d40e      	bmi.n	ff28 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    ff0a:	2157      	movs	r1, #87	; 0x57
    ff0c:	4827      	ldr	r0, [pc, #156]	; (ffac <bt_init+0x194>)
    ff0e:	f00a fa8a 	bl	1a426 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    ff12:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    ff16:	065e      	lsls	r6, r3, #25
    ff18:	d44c      	bmi.n	ffb4 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
    ff1a:	2145      	movs	r1, #69	; 0x45
    ff1c:	4824      	ldr	r0, [pc, #144]	; (ffb0 <bt_init+0x198>)
    ff1e:	f00a fa82 	bl	1a426 <printk>
		return -ENODEV;
    ff22:	f06f 0412 	mvn.w	r4, #18
    ff26:	e035      	b.n	ff94 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    ff28:	2107      	movs	r1, #7
    ff2a:	f640 4033 	movw	r0, #3123	; 0xc33
    ff2e:	f7fe ff31 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    ff32:	4607      	mov	r7, r0
    ff34:	b910      	cbnz	r0, ff3c <bt_init+0x124>
		return -ENOBUFS;
    ff36:	f06f 0436 	mvn.w	r4, #54	; 0x36
    ff3a:	e02b      	b.n	ff94 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
    ff3c:	2107      	movs	r1, #7
    ff3e:	3008      	adds	r0, #8
    ff40:	f005 fb14 	bl	1556c <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    ff44:	4621      	mov	r1, r4
    ff46:	2207      	movs	r2, #7
    ff48:	4606      	mov	r6, r0
    ff4a:	f00b fcdb 	bl	1b904 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    ff4e:	231b      	movs	r3, #27
    ff50:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    ff52:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    ff54:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    ff56:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    ff58:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    ff5a:	4639      	mov	r1, r7
    ff5c:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    ff60:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    ff62:	f7fe ff61 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    ff66:	4604      	mov	r4, r0
    ff68:	b9a0      	cbnz	r0, ff94 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    ff6a:	2101      	movs	r1, #1
    ff6c:	f640 4031 	movw	r0, #3121	; 0xc31
    ff70:	f7fe ff10 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
    ff74:	4606      	mov	r6, r0
    ff76:	2800      	cmp	r0, #0
    ff78:	d0dd      	beq.n	ff36 <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
    ff7a:	2101      	movs	r1, #1
    ff7c:	3008      	adds	r0, #8
    ff7e:	f00c ffe0 	bl	1cf42 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    ff82:	4622      	mov	r2, r4
    ff84:	4631      	mov	r1, r6
    ff86:	f640 4031 	movw	r0, #3121	; 0xc31
    ff8a:	f7fe ff4d 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    ff8e:	4604      	mov	r4, r0
    ff90:	2800      	cmp	r0, #0
    ff92:	d0be      	beq.n	ff12 <bt_init+0xfa>
}
    ff94:	4620      	mov	r0, r4
    ff96:	b003      	add	sp, #12
    ff98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff9a:	bf00      	nop
    ff9c:	20008000 	.word	0x20008000
    ffa0:	2000ab3c 	.word	0x2000ab3c
    ffa4:	2000803c 	.word	0x2000803c
    ffa8:	20008044 	.word	0x20008044
    ffac:	0002127d 	.word	0x0002127d
    ffb0:	000212b0 	.word	0x000212b0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    ffb4:	2100      	movs	r1, #0
    ffb6:	f242 0003 	movw	r0, #8195	; 0x2003
    ffba:	aa01      	add	r2, sp, #4
    ffbc:	f7fe ff34 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
    ffc0:	4604      	mov	r4, r0
    ffc2:	2800      	cmp	r0, #0
    ffc4:	d1e6      	bne.n	ff94 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    ffc6:	9b01      	ldr	r3, [sp, #4]
    ffc8:	2208      	movs	r2, #8
    ffca:	6899      	ldr	r1, [r3, #8]
    ffcc:	48a6      	ldr	r0, [pc, #664]	; (10268 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x268>)
    ffce:	3101      	adds	r1, #1
    ffd0:	f00b fc6d 	bl	1b8ae <memcpy>
	net_buf_unref(rsp);
    ffd4:	9801      	ldr	r0, [sp, #4]
    ffd6:	f005 f9b3 	bl	15340 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    ffda:	4621      	mov	r1, r4
    ffdc:	f242 0002 	movw	r0, #8194	; 0x2002
    ffe0:	aa01      	add	r2, sp, #4
    ffe2:	f7fe ff21 	bl	ee28 <bt_hci_cmd_send_sync>
		if (err) {
    ffe6:	4604      	mov	r4, r0
    ffe8:	2800      	cmp	r0, #0
    ffea:	d1d3      	bne.n	ff94 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
    ffec:	9b01      	ldr	r3, [sp, #4]
    ffee:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    fff0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    fff4:	b291      	uxth	r1, r2
    fff6:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    fffa:	b121      	cbz	r1, 10006 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    fffc:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    fffe:	489b      	ldr	r0, [pc, #620]	; (1026c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x26c>)
   10000:	4611      	mov	r1, r2
   10002:	f00d fe25 	bl	1dc50 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   10006:	9801      	ldr	r0, [sp, #4]
   10008:	f005 f99a 	bl	15340 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1000c:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   10010:	f016 0620 	ands.w	r6, r6, #32
   10014:	f000 80d4 	beq.w	101c0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10018:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   1001c:	071c      	lsls	r4, r3, #28
   1001e:	d512      	bpl.n	10046 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x46>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10020:	2100      	movs	r1, #0
   10022:	f242 001c 	movw	r0, #8220	; 0x201c
   10026:	aa01      	add	r2, sp, #4
   10028:	f7fe fefe 	bl	ee28 <bt_hci_cmd_send_sync>
		if (err) {
   1002c:	4604      	mov	r4, r0
   1002e:	2800      	cmp	r0, #0
   10030:	d1b0      	bne.n	ff94 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
   10032:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10034:	6883      	ldr	r3, [r0, #8]
   10036:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1003a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1003e:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   10042:	f005 f97d 	bl	15340 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10046:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   1004a:	0698      	lsls	r0, r3, #26
   1004c:	d524      	bpl.n	10098 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x98>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1004e:	4668      	mov	r0, sp
   10050:	f10d 0102 	add.w	r1, sp, #2
   10054:	f7fe ff4a 	bl	eeec <hci_le_read_max_data_len>
		if (err) {
   10058:	4604      	mov	r4, r0
   1005a:	2800      	cmp	r0, #0
   1005c:	d19a      	bne.n	ff94 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1005e:	2104      	movs	r1, #4
   10060:	f242 0024 	movw	r0, #8228	; 0x2024
   10064:	f7fe fe96 	bl	ed94 <bt_hci_cmd_create>
		if (!buf) {
   10068:	4606      	mov	r6, r0
   1006a:	2800      	cmp	r0, #0
   1006c:	f43f af63 	beq.w	ff36 <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
   10070:	2104      	movs	r1, #4
   10072:	3008      	adds	r0, #8
   10074:	f005 fa7a 	bl	1556c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10078:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1007c:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1007e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10080:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10084:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10086:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10088:	f242 0024 	movw	r0, #8228	; 0x2024
   1008c:	f7fe fecc 	bl	ee28 <bt_hci_cmd_send_sync>
		if (err) {
   10090:	4604      	mov	r4, r0
   10092:	2800      	cmp	r0, #0
   10094:	f47f af7e 	bne.w	ff94 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   10098:	2108      	movs	r1, #8
   1009a:	f242 0001 	movw	r0, #8193	; 0x2001
   1009e:	f7fe fe79 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
   100a2:	4604      	mov	r4, r0
   100a4:	2800      	cmp	r0, #0
   100a6:	f43f af46 	beq.w	ff36 <bt_init+0x11e>
   100aa:	2108      	movs	r1, #8
   100ac:	4408      	add	r0, r1
   100ae:	f005 fa5d 	bl	1556c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   100b2:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   100b6:	f012 0f02 	tst.w	r2, #2
   100ba:	bf14      	ite	ne
   100bc:	232f      	movne	r3, #47	; 0x2f
   100be:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   100c0:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   100c2:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   100c6:	bf48      	it	mi
   100c8:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   100cc:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   100d0:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   100d4:	bf18      	it	ne
   100d6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   100da:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   100dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   100e0:	4621      	mov	r1, r4
   100e2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   100e4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   100e6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   100e8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   100ea:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   100ec:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   100ee:	71c2      	strb	r2, [r0, #7]
   100f0:	f242 0001 	movw	r0, #8193	; 0x2001
   100f4:	f7fe fe98 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
   100f8:	4604      	mov	r4, r0
   100fa:	2800      	cmp	r0, #0
   100fc:	f47f af4a 	bne.w	ff94 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10100:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   10104:	069a      	lsls	r2, r3, #26
   10106:	d41e      	bmi.n	10146 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x146>
	if (bt_dev.le.acl_mtu) {
   10108:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
   1010c:	b9d9      	cbnz	r1, 10146 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x146>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1010e:	f241 0005 	movw	r0, #4101	; 0x1005
   10112:	aa01      	add	r2, sp, #4
   10114:	f7fe fe88 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
   10118:	4604      	mov	r4, r0
   1011a:	2800      	cmp	r0, #0
   1011c:	f47f af3a 	bne.w	ff94 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
   10120:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
   10124:	b963      	cbnz	r3, 10140 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x140>
   10126:	9b01      	ldr	r3, [sp, #4]
   10128:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1012a:	785a      	ldrb	r2, [r3, #1]
   1012c:	7899      	ldrb	r1, [r3, #2]
   1012e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10132:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10136:	889a      	ldrh	r2, [r3, #4]
   10138:	484c      	ldr	r0, [pc, #304]	; (1026c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x26c>)
   1013a:	4611      	mov	r1, r2
   1013c:	f00d fd88 	bl	1dc50 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10140:	9801      	ldr	r0, [sp, #4]
   10142:	f005 f8fd 	bl	15340 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10146:	2108      	movs	r1, #8
   10148:	f640 4001 	movw	r0, #3073	; 0xc01
   1014c:	f7fe fe22 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
   10150:	4604      	mov	r4, r0
   10152:	2800      	cmp	r0, #0
   10154:	f43f aeef 	beq.w	ff36 <bt_init+0x11e>
   10158:	2108      	movs	r1, #8
   1015a:	4408      	add	r0, r1
   1015c:	f005 fa06 	bl	1556c <net_buf_simple_add>
	dst[0] = val;
   10160:	2310      	movs	r3, #16
   10162:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   10164:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   10166:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   10168:	7043      	strb	r3, [r0, #1]
   1016a:	2602      	movs	r6, #2
   1016c:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1016e:	4621      	mov	r1, r4
	dst[0] = val;
   10170:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   10172:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   10174:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   10176:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   10178:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1017a:	71c3      	strb	r3, [r0, #7]
   1017c:	f640 4001 	movw	r0, #3073	; 0xc01
   10180:	f7fe fe52 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
   10184:	4604      	mov	r4, r0
   10186:	2800      	cmp	r0, #0
   10188:	f47f af04 	bne.w	ff94 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1018c:	4601      	mov	r1, r0
   1018e:	aa01      	add	r2, sp, #4
   10190:	f64f 4001 	movw	r0, #64513	; 0xfc01
   10194:	f7fe fe48 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
   10198:	4604      	mov	r4, r0
   1019a:	b360      	cbz	r0, 101f6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1f6>
		BT_WARN("Vendor HCI extensions not available");
   1019c:	2157      	movs	r1, #87	; 0x57
   1019e:	4834      	ldr	r0, [pc, #208]	; (10270 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x270>)
			BT_WARN("Failed to read supported vendor features");
   101a0:	f00a f941 	bl	1a426 <printk>
		err = bt_conn_init();
   101a4:	f001 fbc0 	bl	11928 <bt_conn_init>
		if (err) {
   101a8:	4604      	mov	r4, r0
   101aa:	2800      	cmp	r0, #0
   101ac:	f47f aef2 	bne.w	ff94 <bt_init+0x17c>
		if (!bt_dev.id_count) {
   101b0:	79eb      	ldrb	r3, [r5, #7]
   101b2:	2b00      	cmp	r3, #0
   101b4:	d150      	bne.n	10258 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x258>
			BT_INFO("No ID address. App must call settings_load()");
   101b6:	2149      	movs	r1, #73	; 0x49
   101b8:	482e      	ldr	r0, [pc, #184]	; (10274 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x274>)
   101ba:	f00a f934 	bl	1a426 <printk>
			return 0;
   101be:	e6e9      	b.n	ff94 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   101c0:	2102      	movs	r1, #2
   101c2:	f640 406d 	movw	r0, #3181	; 0xc6d
   101c6:	f7fe fde5 	bl	ed94 <bt_hci_cmd_create>
		if (!buf) {
   101ca:	4604      	mov	r4, r0
   101cc:	2800      	cmp	r0, #0
   101ce:	f43f aeb2 	beq.w	ff36 <bt_init+0x11e>
   101d2:	2102      	movs	r1, #2
   101d4:	3008      	adds	r0, #8
   101d6:	f005 f9c9 	bl	1556c <net_buf_simple_add>
		cp_le->le = 0x01;
   101da:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   101dc:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   101de:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   101e0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   101e2:	4632      	mov	r2, r6
   101e4:	f640 406d 	movw	r0, #3181	; 0xc6d
   101e8:	f7fe fe1e 	bl	ee28 <bt_hci_cmd_send_sync>
		if (err) {
   101ec:	4604      	mov	r4, r0
   101ee:	2800      	cmp	r0, #0
   101f0:	f43f af12 	beq.w	10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>
   101f4:	e6ce      	b.n	ff94 <bt_init+0x17c>
	net_buf_unref(rsp);
   101f6:	9801      	ldr	r0, [sp, #4]
   101f8:	f005 f8a2 	bl	15340 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   101fc:	4621      	mov	r1, r4
   101fe:	f64f 4002 	movw	r0, #64514	; 0xfc02
   10202:	aa01      	add	r2, sp, #4
   10204:	f7fe fe10 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
   10208:	4604      	mov	r4, r0
   1020a:	b110      	cbz	r0, 10212 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x212>
		BT_WARN("Failed to read supported vendor commands");
   1020c:	2157      	movs	r1, #87	; 0x57
   1020e:	481a      	ldr	r0, [pc, #104]	; (10278 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x278>)
   10210:	e7c6      	b.n	101a0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1a0>
	rp.cmds = (void *)rsp->data;
   10212:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10214:	4632      	mov	r2, r6
   10216:	6899      	ldr	r1, [r3, #8]
   10218:	4818      	ldr	r0, [pc, #96]	; (1027c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x27c>)
   1021a:	3101      	adds	r1, #1
   1021c:	f00b fb47 	bl	1b8ae <memcpy>
	net_buf_unref(rsp);
   10220:	9801      	ldr	r0, [sp, #4]
   10222:	f005 f88d 	bl	15340 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   10226:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   1022a:	075b      	lsls	r3, r3, #29
   1022c:	d5ba      	bpl.n	101a4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1a4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1022e:	4621      	mov	r1, r4
   10230:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10234:	aa01      	add	r2, sp, #4
   10236:	f7fe fdf7 	bl	ee28 <bt_hci_cmd_send_sync>
		if (err) {
   1023a:	b110      	cbz	r0, 10242 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x242>
			BT_WARN("Failed to read supported vendor features");
   1023c:	2157      	movs	r1, #87	; 0x57
   1023e:	4810      	ldr	r0, [pc, #64]	; (10280 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x280>)
   10240:	e7ae      	b.n	101a0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1a0>
		memcpy(bt_dev.vs_features, rp.feat->features,
   10242:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
   10244:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10246:	480f      	ldr	r0, [pc, #60]	; (10284 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x284>)
   10248:	6899      	ldr	r1, [r3, #8]
   1024a:	4411      	add	r1, r2
   1024c:	f00b fb2f 	bl	1b8ae <memcpy>
		net_buf_unref(rsp);
   10250:	9801      	ldr	r0, [sp, #4]
   10252:	f005 f875 	bl	15340 <net_buf_unref>
   10256:	e7a5      	b.n	101a4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1a4>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10258:	2104      	movs	r1, #4
   1025a:	480b      	ldr	r0, [pc, #44]	; (10288 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x288>)
   1025c:	f00b fc1a 	bl	1ba94 <atomic_or>
	bt_finalize_init();
   10260:	f7ff fdce 	bl	fe00 <bt_finalize_init>
	return 0;
   10264:	e696      	b.n	ff94 <bt_init+0x17c>
   10266:	bf00      	nop
   10268:	20008098 	.word	0x20008098
   1026c:	200080c8 	.word	0x200080c8
   10270:	000212d9 	.word	0x000212d9
   10274:	0002135e 	.word	0x0002135e
   10278:	00021302 	.word	0x00021302
   1027c:	20008085 	.word	0x20008085
   10280:	00021330 	.word	0x00021330
   10284:	20008084 	.word	0x20008084
   10288:	20008094 	.word	0x20008094

0001028c <init_work>:
{
   1028c:	b510      	push	{r4, lr}
	err = bt_init();
   1028e:	f7ff fdc3 	bl	fe18 <bt_init>
	if (ready_cb) {
   10292:	4b03      	ldr	r3, [pc, #12]	; (102a0 <init_work+0x14>)
   10294:	681b      	ldr	r3, [r3, #0]
   10296:	b113      	cbz	r3, 1029e <init_work+0x12>
}
   10298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1029c:	4718      	bx	r3
}
   1029e:	bd10      	pop	{r4, pc}
   102a0:	2000ab30 	.word	0x2000ab30

000102a4 <bt_enable>:
{
   102a4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   102a8:	4d35      	ldr	r5, [pc, #212]	; (10380 <bt_enable+0xdc>)
{
   102aa:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   102ac:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
   102b0:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   102b2:	b94b      	cbnz	r3, 102c8 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   102b4:	2145      	movs	r1, #69	; 0x45
   102b6:	4833      	ldr	r0, [pc, #204]	; (10384 <bt_enable+0xe0>)
   102b8:	f00a f8b5 	bl	1a426 <printk>
		return -ENODEV;
   102bc:	f06f 0412 	mvn.w	r4, #18
}
   102c0:	4620      	mov	r0, r4
   102c2:	b008      	add	sp, #32
   102c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   102c8:	2101      	movs	r1, #1
   102ca:	f105 0094 	add.w	r0, r5, #148	; 0x94
   102ce:	f00b fbe1 	bl	1ba94 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   102d2:	07c2      	lsls	r2, r0, #31
   102d4:	d451      	bmi.n	1037a <bt_enable+0xd6>
		err = bt_settings_init();
   102d6:	f7fe f913 	bl	e500 <bt_settings_init>
		if (err) {
   102da:	4604      	mov	r4, r0
   102dc:	2800      	cmp	r0, #0
   102de:	d1ef      	bne.n	102c0 <bt_enable+0x1c>
	ready_cb = cb;
   102e0:	4b29      	ldr	r3, [pc, #164]	; (10388 <bt_enable+0xe4>)
   102e2:	f04f 0800 	mov.w	r8, #0
   102e6:	f04f 0900 	mov.w	r9, #0
   102ea:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   102ec:	f06f 0308 	mvn.w	r3, #8
   102f0:	e9cd 0000 	strd	r0, r0, [sp]
   102f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
   102f8:	9004      	str	r0, [sp, #16]
   102fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   102fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10302:	4b22      	ldr	r3, [pc, #136]	; (1038c <bt_enable+0xe8>)
   10304:	4922      	ldr	r1, [pc, #136]	; (10390 <bt_enable+0xec>)
   10306:	4823      	ldr	r0, [pc, #140]	; (10394 <bt_enable+0xf0>)
   10308:	f008 ffe0 	bl	192cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1030c:	4922      	ldr	r1, [pc, #136]	; (10398 <bt_enable+0xf4>)
   1030e:	4821      	ldr	r0, [pc, #132]	; (10394 <bt_enable+0xf0>)
   10310:	f00d fcb8 	bl	1dc84 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10314:	f06f 0307 	mvn.w	r3, #7
   10318:	f640 0298 	movw	r2, #2200	; 0x898
   1031c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   10320:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10324:	e9cd 4400 	strd	r4, r4, [sp]
   10328:	4b1c      	ldr	r3, [pc, #112]	; (1039c <bt_enable+0xf8>)
   1032a:	491d      	ldr	r1, [pc, #116]	; (103a0 <bt_enable+0xfc>)
   1032c:	9404      	str	r4, [sp, #16]
   1032e:	481d      	ldr	r0, [pc, #116]	; (103a4 <bt_enable+0x100>)
   10330:	f008 ffcc 	bl	192cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10334:	491c      	ldr	r1, [pc, #112]	; (103a8 <bt_enable+0x104>)
   10336:	481b      	ldr	r0, [pc, #108]	; (103a4 <bt_enable+0x100>)
   10338:	f00d fca4 	bl	1dc84 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1033c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   10340:	68db      	ldr	r3, [r3, #12]
   10342:	4798      	blx	r3
	if (err) {
   10344:	4604      	mov	r4, r0
   10346:	b128      	cbz	r0, 10354 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   10348:	4602      	mov	r2, r0
   1034a:	2145      	movs	r1, #69	; 0x45
   1034c:	4817      	ldr	r0, [pc, #92]	; (103ac <bt_enable+0x108>)
   1034e:	f00a f86a 	bl	1a426 <printk>
		return err;
   10352:	e7b5      	b.n	102c0 <bt_enable+0x1c>
	if (!cb) {
   10354:	b926      	cbnz	r6, 10360 <bt_enable+0xbc>
}
   10356:	b008      	add	sp, #32
   10358:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   1035c:	f7ff bd5c 	b.w	fe18 <bt_init>
   10360:	2101      	movs	r1, #1
   10362:	f105 0090 	add.w	r0, r5, #144	; 0x90
   10366:	f00b fb95 	bl	1ba94 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1036a:	07c3      	lsls	r3, r0, #31
   1036c:	d4a8      	bmi.n	102c0 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   1036e:	4810      	ldr	r0, [pc, #64]	; (103b0 <bt_enable+0x10c>)
   10370:	f105 0188 	add.w	r1, r5, #136	; 0x88
   10374:	f00d fc14 	bl	1dba0 <k_queue_append>
   10378:	e7a2      	b.n	102c0 <bt_enable+0x1c>
		return -EALREADY;
   1037a:	f06f 0444 	mvn.w	r4, #68	; 0x44
   1037e:	e79f      	b.n	102c0 <bt_enable+0x1c>
   10380:	20008000 	.word	0x20008000
   10384:	00021390 	.word	0x00021390
   10388:	2000ab30 	.word	0x2000ab30
   1038c:	0000fb95 	.word	0x0000fb95
   10390:	2000d888 	.word	0x2000d888
   10394:	20008b38 	.word	0x20008b38
   10398:	000213ae 	.word	0x000213ae
   1039c:	0000e9ad 	.word	0x0000e9ad
   103a0:	2000cff0 	.word	0x2000cff0
   103a4:	20008aa8 	.word	0x20008aa8
   103a8:	000213b4 	.word	0x000213b4
   103ac:	000213ba 	.word	0x000213ba
   103b0:	2000a558 	.word	0x2000a558

000103b4 <bt_get_name>:
}
   103b4:	4800      	ldr	r0, [pc, #0]	; (103b8 <bt_get_name+0x4>)
   103b6:	4770      	bx	lr
   103b8:	0001f407 	.word	0x0001f407

000103bc <bt_id_create>:
{
   103bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   103be:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   103c0:	4605      	mov	r5, r0
   103c2:	b918      	cbnz	r0, 103cc <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   103c4:	b314      	cbz	r4, 1040c <bt_id_create+0x50>
		return -EINVAL;
   103c6:	f06f 0415 	mvn.w	r4, #21
   103ca:	e01c      	b.n	10406 <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   103cc:	2300      	movs	r3, #0
   103ce:	4669      	mov	r1, sp
   103d0:	9300      	str	r3, [sp, #0]
   103d2:	f8cd 3003 	str.w	r3, [sp, #3]
   103d6:	f00b fb68 	bl	1baaa <bt_addr_le_cmp>
   103da:	2800      	cmp	r0, #0
   103dc:	d0f2      	beq.n	103c4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   103de:	782b      	ldrb	r3, [r5, #0]
   103e0:	2b01      	cmp	r3, #1
   103e2:	d104      	bne.n	103ee <bt_id_create+0x32>
   103e4:	79ab      	ldrb	r3, [r5, #6]
   103e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   103ea:	2bc0      	cmp	r3, #192	; 0xc0
   103ec:	d004      	beq.n	103f8 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   103ee:	2145      	movs	r1, #69	; 0x45
   103f0:	480d      	ldr	r0, [pc, #52]	; (10428 <bt_id_create+0x6c>)
   103f2:	f00a f818 	bl	1a426 <printk>
			return -EINVAL;
   103f6:	e7e6      	b.n	103c6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   103f8:	4628      	mov	r0, r5
   103fa:	f7fe f949 	bl	e690 <id_find>
   103fe:	2800      	cmp	r0, #0
   10400:	dbe0      	blt.n	103c4 <bt_id_create+0x8>
			return -EALREADY;
   10402:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   10406:	4620      	mov	r0, r4
   10408:	b003      	add	sp, #12
   1040a:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1040c:	4b07      	ldr	r3, [pc, #28]	; (1042c <bt_id_create+0x70>)
   1040e:	79dc      	ldrb	r4, [r3, #7]
   10410:	2c01      	cmp	r4, #1
   10412:	d006      	beq.n	10422 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   10414:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   10416:	4629      	mov	r1, r5
   10418:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1041a:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   1041c:	f7fe fa90 	bl	e940 <id_create.constprop.0>
	return new_id;
   10420:	e7f1      	b.n	10406 <bt_id_create+0x4a>
		return -ENOMEM;
   10422:	f06f 040b 	mvn.w	r4, #11
   10426:	e7ee      	b.n	10406 <bt_id_create+0x4a>
   10428:	000213db 	.word	0x000213db
   1042c:	20008000 	.word	0x20008000

00010430 <bt_setup_public_id_addr>:
{
   10430:	b570      	push	{r4, r5, r6, lr}
   10432:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10434:	2100      	movs	r1, #0
   10436:	f241 0009 	movw	r0, #4105	; 0x1009
   1043a:	aa01      	add	r2, sp, #4
   1043c:	f7fe fcf4 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
   10440:	4e1d      	ldr	r6, [pc, #116]	; (104b8 <bt_setup_public_id_addr+0x88>)
   10442:	4604      	mov	r4, r0
   10444:	b138      	cbz	r0, 10456 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   10446:	2157      	movs	r1, #87	; 0x57
   10448:	481c      	ldr	r0, [pc, #112]	; (104bc <bt_setup_public_id_addr+0x8c>)
   1044a:	f009 ffec 	bl	1a426 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1044e:	2300      	movs	r3, #0
   10450:	71f3      	strb	r3, [r6, #7]
}
   10452:	b006      	add	sp, #24
   10454:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   10456:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   10458:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1045a:	689d      	ldr	r5, [r3, #8]
   1045c:	a904      	add	r1, sp, #16
   1045e:	3501      	adds	r5, #1
   10460:	9004      	str	r0, [sp, #16]
   10462:	f8ad 0014 	strh.w	r0, [sp, #20]
   10466:	4628      	mov	r0, r5
   10468:	f00b fa10 	bl	1b88c <memcmp>
   1046c:	b918      	cbnz	r0, 10476 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   1046e:	9801      	ldr	r0, [sp, #4]
   10470:	f004 ff66 	bl	15340 <net_buf_unref>
   10474:	e7eb      	b.n	1044e <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   10476:	4b12      	ldr	r3, [pc, #72]	; (104c0 <bt_setup_public_id_addr+0x90>)
   10478:	2206      	movs	r2, #6
   1047a:	f8d3 0007 	ldr.w	r0, [r3, #7]
   1047e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   10482:	9002      	str	r0, [sp, #8]
   10484:	a902      	add	r1, sp, #8
   10486:	4628      	mov	r0, r5
   10488:	f8ad 300c 	strh.w	r3, [sp, #12]
   1048c:	f00b f9fe 	bl	1b88c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10490:	2800      	cmp	r0, #0
   10492:	d0ec      	beq.n	1046e <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   10494:	4629      	mov	r1, r5
   10496:	2206      	movs	r2, #6
   10498:	f10d 0011 	add.w	r0, sp, #17
   1049c:	f00b fa07 	bl	1b8ae <memcpy>
	net_buf_unref(rsp);
   104a0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   104a2:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   104a6:	f004 ff4b 	bl	15340 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   104aa:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   104ac:	4620      	mov	r0, r4
   104ae:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   104b0:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   104b2:	f7fe fa45 	bl	e940 <id_create.constprop.0>
   104b6:	e7cc      	b.n	10452 <bt_setup_public_id_addr+0x22>
   104b8:	20008000 	.word	0x20008000
   104bc:	0002140e 	.word	0x0002140e
   104c0:	0001e390 	.word	0x0001e390

000104c4 <bt_read_static_addr>:
{
   104c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   104c8:	4b1c      	ldr	r3, [pc, #112]	; (1053c <bt_read_static_addr+0x78>)
{
   104ca:	4607      	mov	r7, r0
   104cc:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   104d0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   104d2:	f014 0401 	ands.w	r4, r4, #1
   104d6:	d104      	bne.n	104e2 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   104d8:	2157      	movs	r1, #87	; 0x57
   104da:	4819      	ldr	r0, [pc, #100]	; (10540 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   104dc:	f009 ffa3 	bl	1a426 <printk>
   104e0:	e00c      	b.n	104fc <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   104e2:	2100      	movs	r1, #0
   104e4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   104e8:	aa01      	add	r2, sp, #4
   104ea:	f7fe fc9d 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
   104ee:	4605      	mov	r5, r0
   104f0:	b140      	cbz	r0, 10504 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   104f2:	2157      	movs	r1, #87	; 0x57
   104f4:	4813      	ldr	r0, [pc, #76]	; (10544 <bt_read_static_addr+0x80>)
   104f6:	f009 ff96 	bl	1a426 <printk>
		return 0;
   104fa:	2400      	movs	r4, #0
}
   104fc:	4620      	mov	r0, r4
   104fe:	b002      	add	sp, #8
   10500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10504:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   10508:	9b01      	ldr	r3, [sp, #4]
   1050a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1050c:	785c      	ldrb	r4, [r3, #1]
   1050e:	42b4      	cmp	r4, r6
   10510:	bf28      	it	cs
   10512:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10514:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   10516:	42a5      	cmp	r5, r4
   10518:	db07      	blt.n	1052a <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   1051a:	9801      	ldr	r0, [sp, #4]
   1051c:	f004 ff10 	bl	15340 <net_buf_unref>
	if (!cnt) {
   10520:	2c00      	cmp	r4, #0
   10522:	d1eb      	bne.n	104fc <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   10524:	2157      	movs	r1, #87	; 0x57
   10526:	4808      	ldr	r0, [pc, #32]	; (10548 <bt_read_static_addr+0x84>)
   10528:	e7d8      	b.n	104dc <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1052a:	fb08 7005 	mla	r0, r8, r5, r7
   1052e:	2216      	movs	r2, #22
   10530:	4631      	mov	r1, r6
   10532:	f00b f9bc 	bl	1b8ae <memcpy>
	for (i = 0; i < cnt; i++) {
   10536:	3501      	adds	r5, #1
   10538:	e7ed      	b.n	10516 <bt_read_static_addr+0x52>
   1053a:	bf00      	nop
   1053c:	20008000 	.word	0x20008000
   10540:	00021431 	.word	0x00021431
   10544:	00021462 	.word	0x00021462
   10548:	00021487 	.word	0x00021487

0001054c <bt_setup_random_id_addr>:
{
   1054c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   1054e:	4d15      	ldr	r5, [pc, #84]	; (105a4 <bt_setup_random_id_addr+0x58>)
{
   10550:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   10552:	79ec      	ldrb	r4, [r5, #7]
   10554:	b9f4      	cbnz	r4, 10594 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   10556:	2101      	movs	r1, #1
   10558:	a802      	add	r0, sp, #8
   1055a:	f7ff ffb3 	bl	104c4 <bt_read_static_addr>
   1055e:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   10560:	b1c0      	cbz	r0, 10594 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   10562:	2716      	movs	r7, #22
   10564:	b2e6      	uxtb	r6, r4
   10566:	ab02      	add	r3, sp, #8
   10568:	2206      	movs	r2, #6
   1056a:	fb07 3106 	mla	r1, r7, r6, r3
   1056e:	f10d 0001 	add.w	r0, sp, #1
   10572:	f00b f99c 	bl	1b8ae <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   10576:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   10578:	4669      	mov	r1, sp
   1057a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1057c:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   10580:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   10582:	f7fe f9dd 	bl	e940 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   10586:	79ea      	ldrb	r2, [r5, #7]
   10588:	b2e3      	uxtb	r3, r4
   1058a:	429a      	cmp	r2, r3
   1058c:	d8ea      	bhi.n	10564 <bt_setup_random_id_addr+0x18>
}
   1058e:	2000      	movs	r0, #0
   10590:	b009      	add	sp, #36	; 0x24
   10592:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   10594:	2100      	movs	r1, #0
   10596:	4608      	mov	r0, r1
}
   10598:	b009      	add	sp, #36	; 0x24
   1059a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   1059e:	f7ff bf0d 	b.w	103bc <bt_id_create>
   105a2:	bf00      	nop
   105a4:	20008000 	.word	0x20008000

000105a8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   105a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105ac:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   105ae:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   105b0:	690d      	ldr	r5, [r1, #16]
{
   105b2:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   105b4:	ebb5 0b03 	subs.w	fp, r5, r3
{
   105b8:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   105ba:	4884      	ldr	r0, [pc, #528]	; (107cc <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   105bc:	bf18      	it	ne
   105be:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   105c2:	9307      	str	r3, [sp, #28]
   105c4:	f00b fa60 	bl	1ba88 <atomic_get>
{
   105c8:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   105ca:	0782      	lsls	r2, r0, #30
{
   105cc:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   105ce:	f140 80ef 	bpl.w	107b0 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   105d2:	4608      	mov	r0, r1
   105d4:	f7fe f874 	bl	e6c0 <valid_adv_param>
   105d8:	4607      	mov	r7, r0
   105da:	2800      	cmp	r0, #0
   105dc:	f000 80eb 	beq.w	107b6 <bt_le_adv_start_legacy+0x20e>
   105e0:	487a      	ldr	r0, [pc, #488]	; (107cc <bt_le_adv_start_legacy+0x224>)
   105e2:	f00b fa51 	bl	1ba88 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   105e6:	0503      	lsls	r3, r0, #20
   105e8:	d402      	bmi.n	105f0 <bt_le_adv_start_legacy+0x48>
   105ea:	4878      	ldr	r0, [pc, #480]	; (107cc <bt_le_adv_start_legacy+0x224>)
   105ec:	f00b fa4c 	bl	1ba88 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   105f0:	f106 0810 	add.w	r8, r6, #16
   105f4:	4640      	mov	r0, r8
   105f6:	f00b fa47 	bl	1ba88 <atomic_get>
   105fa:	f3c0 1180 	ubfx	r1, r0, #6, #1
   105fe:	0640      	lsls	r0, r0, #25
   10600:	f100 80dc 	bmi.w	107bc <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   10604:	220f      	movs	r2, #15
   10606:	a80a      	add	r0, sp, #40	; 0x28
   10608:	9105      	str	r1, [sp, #20]
   1060a:	f00b f97b 	bl	1b904 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1060e:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   10610:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10612:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   10616:	68e3      	ldr	r3, [r4, #12]
   10618:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1061c:	f00b fa25 	bl	1ba6a <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   10620:	7832      	ldrb	r2, [r6, #0]
   10622:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   10624:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   10626:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   10628:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   1062c:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   10630:	d004      	beq.n	1063c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10632:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10636:	4865      	ldr	r0, [pc, #404]	; (107cc <bt_le_adv_start_legacy+0x224>)
   10638:	f00b fa3a 	bl	1bab0 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   1063c:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   1063e:	4b64      	ldr	r3, [pc, #400]	; (107d0 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   10640:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   10642:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   10646:	465a      	mov	r2, fp
   10648:	6861      	ldr	r1, [r4, #4]
   1064a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1064e:	f7fe fcd7 	bl	f000 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   10652:	4683      	mov	fp, r0
   10654:	2800      	cmp	r0, #0
   10656:	d169      	bne.n	1072c <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10658:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   1065c:	2d00      	cmp	r5, #0
   1065e:	d042      	beq.n	106e6 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10660:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10662:	f00b fa14 	bl	1ba8e <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10666:	6860      	ldr	r0, [r4, #4]
   10668:	07c1      	lsls	r1, r0, #31
   1066a:	d544      	bpl.n	106f6 <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   1066c:	2d00      	cmp	r5, #0
   1066e:	d03f      	beq.n	106f0 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   10670:	f010 0f10 	tst.w	r0, #16
   10674:	bf14      	ite	ne
   10676:	2304      	movne	r3, #4
   10678:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1067a:	6921      	ldr	r1, [r4, #16]
   1067c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   10680:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10684:	f00b fa03 	bl	1ba8e <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   10688:	210f      	movs	r1, #15
   1068a:	f242 0006 	movw	r0, #8198	; 0x2006
   1068e:	f7fe fb81 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
   10692:	4683      	mov	fp, r0
   10694:	2800      	cmp	r0, #0
   10696:	f000 8094 	beq.w	107c2 <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1069a:	220f      	movs	r2, #15
   1069c:	a90a      	add	r1, sp, #40	; 0x28
   1069e:	3008      	adds	r0, #8
   106a0:	f00c fc43 	bl	1cf2a <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   106a4:	2200      	movs	r2, #0
   106a6:	4659      	mov	r1, fp
   106a8:	f242 0006 	movw	r0, #8198	; 0x2006
   106ac:	f7fe fbbc 	bl	ee28 <bt_hci_cmd_send_sync>
	if (err) {
   106b0:	2800      	cmp	r0, #0
   106b2:	f040 8089 	bne.w	107c8 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   106b6:	b34d      	cbz	r5, 1070c <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   106b8:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   106ba:	07da      	lsls	r2, r3, #31
   106bc:	d43a      	bmi.n	10734 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   106be:	2101      	movs	r1, #1
   106c0:	4630      	mov	r0, r6
   106c2:	f7fe fdf7 	bl	f2b4 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   106c6:	4683      	mov	fp, r0
   106c8:	2800      	cmp	r0, #0
   106ca:	d06a      	beq.n	107a2 <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   106cc:	4841      	ldr	r0, [pc, #260]	; (107d4 <bt_le_adv_start_legacy+0x22c>)
   106ce:	2145      	movs	r1, #69	; 0x45
   106d0:	f009 fea9 	bl	1a426 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   106d4:	9807      	ldr	r0, [sp, #28]
   106d6:	b348      	cbz	r0, 1072c <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   106d8:	2100      	movs	r1, #0
   106da:	f000 fd7f 	bl	111dc <bt_conn_set_state>
			bt_conn_unref(conn);
   106de:	9807      	ldr	r0, [sp, #28]
   106e0:	f000 fd50 	bl	11184 <bt_conn_unref>
   106e4:	e022      	b.n	1072c <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   106e6:	9508      	str	r5, [sp, #32]
   106e8:	a908      	add	r1, sp, #32
   106ea:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   106ee:	e7b8      	b.n	10662 <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   106f0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   106f4:	e7c8      	b.n	10688 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   106f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   106f8:	b933      	cbnz	r3, 10708 <bt_le_adv_start_legacy+0x160>
   106fa:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   106fe:	f1c7 0303 	rsb	r3, r7, #3
   10702:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10706:	e7bf      	b.n	10688 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10708:	2701      	movs	r7, #1
   1070a:	e7f8      	b.n	106fe <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1070c:	6863      	ldr	r3, [r4, #4]
   1070e:	4652      	mov	r2, sl
   10710:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10714:	e9cd 7301 	strd	r7, r3, [sp, #4]
   10718:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1071a:	4649      	mov	r1, r9
   1071c:	9300      	str	r3, [sp, #0]
   1071e:	4630      	mov	r0, r6
   10720:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10722:	f7fe fd53 	bl	f1cc <le_adv_update.constprop.0>
		if (err) {
   10726:	4683      	mov	fp, r0
   10728:	2800      	cmp	r0, #0
   1072a:	d0c5      	beq.n	106b8 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1072c:	4658      	mov	r0, fp
   1072e:	b00f      	add	sp, #60	; 0x3c
   10730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   10734:	4630      	mov	r0, r6
   10736:	a907      	add	r1, sp, #28
   10738:	f7fe fad8 	bl	ecec <le_adv_start_add_conn>
		if (err) {
   1073c:	4683      	mov	fp, r0
   1073e:	2800      	cmp	r0, #0
   10740:	d0bd      	beq.n	106be <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   10742:	f110 0f0c 	cmn.w	r0, #12
   10746:	d1f1      	bne.n	1072c <bt_le_adv_start_legacy+0x184>
   10748:	2d00      	cmp	r5, #0
   1074a:	d1ef      	bne.n	1072c <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1074c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1074e:	079b      	lsls	r3, r3, #30
   10750:	d4ec      	bmi.n	1072c <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10752:	6860      	ldr	r0, [r4, #4]
   10754:	f080 0002 	eor.w	r0, r0, #2
   10758:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   1075c:	f00b 0201 	and.w	r2, fp, #1
   10760:	210c      	movs	r1, #12
   10762:	4640      	mov	r0, r8
   10764:	f00b f9af 	bl	1bac6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   10768:	6862      	ldr	r2, [r4, #4]
   1076a:	2107      	movs	r1, #7
   1076c:	4640      	mov	r0, r8
   1076e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10772:	f00b f9a8 	bl	1bac6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10776:	6862      	ldr	r2, [r4, #4]
   10778:	2108      	movs	r1, #8
   1077a:	4640      	mov	r0, r8
   1077c:	f002 0201 	and.w	r2, r2, #1
   10780:	f00b f9a1 	bl	1bac6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   10784:	463a      	mov	r2, r7
   10786:	2109      	movs	r1, #9
   10788:	4640      	mov	r0, r8
   1078a:	f00b f99c 	bl	1bac6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1078e:	6862      	ldr	r2, [r4, #4]
   10790:	210b      	movs	r1, #11
   10792:	4640      	mov	r0, r8
   10794:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10798:	f00b f995 	bl	1bac6 <atomic_set_bit_to>
	return 0;
   1079c:	f04f 0b00 	mov.w	fp, #0
   107a0:	e7c4      	b.n	1072c <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   107a2:	9807      	ldr	r0, [sp, #28]
   107a4:	b108      	cbz	r0, 107aa <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   107a6:	f000 fced 	bl	11184 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   107aa:	2d00      	cmp	r5, #0
   107ac:	d1d6      	bne.n	1075c <bt_le_adv_start_legacy+0x1b4>
   107ae:	e7d0      	b.n	10752 <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   107b0:	f06f 0b0a 	mvn.w	fp, #10
   107b4:	e7ba      	b.n	1072c <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   107b6:	f06f 0b15 	mvn.w	fp, #21
   107ba:	e7b7      	b.n	1072c <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   107bc:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   107c0:	e7b4      	b.n	1072c <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   107c2:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   107c6:	e7b1      	b.n	1072c <bt_le_adv_start_legacy+0x184>
   107c8:	4683      	mov	fp, r0
   107ca:	e7af      	b.n	1072c <bt_le_adv_start_legacy+0x184>
   107cc:	20008094 	.word	0x20008094
   107d0:	20008000 	.word	0x20008000
   107d4:	000214b5 	.word	0x000214b5

000107d8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   107d8:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   107da:	9c04      	ldr	r4, [sp, #16]
   107dc:	e9cd 3400 	strd	r3, r4, [sp]
   107e0:	4613      	mov	r3, r2
   107e2:	460a      	mov	r2, r1
   107e4:	4601      	mov	r1, r0
   107e6:	4802      	ldr	r0, [pc, #8]	; (107f0 <bt_le_adv_start+0x18>)
   107e8:	f7ff fede 	bl	105a8 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   107ec:	b002      	add	sp, #8
   107ee:	bd10      	pop	{r4, pc}
   107f0:	20008018 	.word	0x20008018

000107f4 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   107f4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   107f6:	4818      	ldr	r0, [pc, #96]	; (10858 <bt_le_adv_resume+0x64>)
   107f8:	f00b f946 	bl	1ba88 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   107fc:	04c1      	lsls	r1, r0, #19
   107fe:	d529      	bpl.n	10854 <bt_le_adv_resume+0x60>
   10800:	4815      	ldr	r0, [pc, #84]	; (10858 <bt_le_adv_resume+0x64>)
   10802:	f00b f941 	bl	1ba88 <atomic_get>
   10806:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10808:	f3c0 1480 	ubfx	r4, r0, #6, #1
   1080c:	d422      	bmi.n	10854 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1080e:	4812      	ldr	r0, [pc, #72]	; (10858 <bt_le_adv_resume+0x64>)
   10810:	f00b f93a 	bl	1ba88 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10814:	05c3      	lsls	r3, r0, #23
   10816:	d51d      	bpl.n	10854 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   10818:	4810      	ldr	r0, [pc, #64]	; (1085c <bt_le_adv_resume+0x68>)
   1081a:	a901      	add	r1, sp, #4
   1081c:	f7fe fa66 	bl	ecec <le_adv_start_add_conn>
	if (err) {
   10820:	b9c0      	cbnz	r0, 10854 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   10822:	2101      	movs	r1, #1
   10824:	480d      	ldr	r0, [pc, #52]	; (1085c <bt_le_adv_resume+0x68>)
   10826:	f7fe fd45 	bl	f2b4 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   1082a:	b150      	cbz	r0, 10842 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1082c:	4621      	mov	r1, r4
   1082e:	9801      	ldr	r0, [sp, #4]
   10830:	f000 fcd4 	bl	111dc <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10834:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10838:	4807      	ldr	r0, [pc, #28]	; (10858 <bt_le_adv_resume+0x64>)
   1083a:	f00b f939 	bl	1bab0 <atomic_and>
	return (old & mask) != 0;
   1083e:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   10842:	9801      	ldr	r0, [sp, #4]
   10844:	f000 fc9e 	bl	11184 <bt_conn_unref>
	if (persist_paused) {
   10848:	b124      	cbz	r4, 10854 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1084a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1084e:	4802      	ldr	r0, [pc, #8]	; (10858 <bt_le_adv_resume+0x64>)
   10850:	f00b f920 	bl	1ba94 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   10854:	b002      	add	sp, #8
   10856:	bd10      	pop	{r4, pc}
   10858:	20008028 	.word	0x20008028
   1085c:	20008018 	.word	0x20008018

00010860 <enh_conn_complete>:
{
   10860:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   10864:	7804      	ldrb	r4, [r0, #0]
{
   10866:	4605      	mov	r5, r0
	if (evt->status) {
   10868:	2c00      	cmp	r4, #0
   1086a:	d048      	beq.n	108fe <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1086c:	2c3c      	cmp	r4, #60	; 0x3c
   1086e:	d11a      	bne.n	108a6 <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10870:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10874:	4872      	ldr	r0, [pc, #456]	; (10a40 <enh_conn_complete+0x1e0>)
   10876:	f00b f91b 	bl	1bab0 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1087a:	2000      	movs	r0, #0
   1087c:	f7fe f802 	bl	e884 <find_pending_connect.part.0>
		if (!conn) {
   10880:	4605      	mov	r5, r0
   10882:	b930      	cbnz	r0, 10892 <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
   10884:	2145      	movs	r1, #69	; 0x45
   10886:	486f      	ldr	r0, [pc, #444]	; (10a44 <enh_conn_complete+0x1e4>)
}
   10888:	b004      	add	sp, #16
   1088a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   1088e:	f009 bdca 	b.w	1a426 <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10892:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10894:	2100      	movs	r1, #0
   10896:	f000 fca1 	bl	111dc <bt_conn_set_state>
		bt_conn_unref(conn);
   1089a:	4628      	mov	r0, r5
}
   1089c:	b004      	add	sp, #16
   1089e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   108a2:	f000 bc6f 	b.w	11184 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   108a6:	2c02      	cmp	r4, #2
   108a8:	d121      	bne.n	108ee <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   108aa:	2100      	movs	r1, #0
   108ac:	2206      	movs	r2, #6
   108ae:	4608      	mov	r0, r1
   108b0:	f000 fdca 	bl	11448 <bt_conn_lookup_state_le>
	if (!conn) {
   108b4:	4605      	mov	r5, r0
   108b6:	b948      	cbnz	r0, 108cc <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
   108b8:	2145      	movs	r1, #69	; 0x45
   108ba:	4863      	ldr	r0, [pc, #396]	; (10a48 <enh_conn_complete+0x1e8>)
   108bc:	f009 fdb3 	bl	1a426 <printk>
			bt_le_scan_update(false);
   108c0:	2000      	movs	r0, #0
   108c2:	f7fe fe0f 	bl	f4e4 <bt_le_scan_update>
}
   108c6:	b004      	add	sp, #16
   108c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   108cc:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   108ce:	2100      	movs	r1, #0
   108d0:	f000 fc84 	bl	111dc <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   108d4:	1d28      	adds	r0, r5, #4
   108d6:	f00b f8d7 	bl	1ba88 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   108da:	07c2      	lsls	r2, r0, #31
   108dc:	d503      	bpl.n	108e6 <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   108de:	4621      	mov	r1, r4
   108e0:	4628      	mov	r0, r5
   108e2:	f000 fc7b 	bl	111dc <bt_conn_set_state>
	bt_conn_unref(conn);
   108e6:	4628      	mov	r0, r5
   108e8:	f000 fc4c 	bl	11184 <bt_conn_unref>
   108ec:	e7e8      	b.n	108c0 <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   108ee:	4622      	mov	r2, r4
   108f0:	2157      	movs	r1, #87	; 0x57
   108f2:	4856      	ldr	r0, [pc, #344]	; (10a4c <enh_conn_complete+0x1ec>)
}
   108f4:	b004      	add	sp, #16
   108f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   108fa:	f009 bd94 	b.w	1a426 <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   108fe:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10900:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10904:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10906:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10908:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1090a:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1090c:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10910:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10912:	d834      	bhi.n	1097e <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10914:	f00b f8bb 	bl	1ba8e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   10918:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1091c:	2206      	movs	r2, #6
   1091e:	3b02      	subs	r3, #2
   10920:	f105 0111 	add.w	r1, r5, #17
   10924:	f10d 0001 	add.w	r0, sp, #1
   10928:	f88d 3008 	strb.w	r3, [sp, #8]
   1092c:	f00a ffbf 	bl	1b8ae <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10930:	2301      	movs	r3, #1
   10932:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   10936:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   10938:	bb40      	cbnz	r0, 1098c <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1093a:	2206      	movs	r2, #6
   1093c:	a902      	add	r1, sp, #8
   1093e:	f000 fd83 	bl	11448 <bt_conn_lookup_state_le>
   10942:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10944:	78eb      	ldrb	r3, [r5, #3]
   10946:	2b01      	cmp	r3, #1
   10948:	d104      	bne.n	10954 <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1094a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1094e:	483c      	ldr	r0, [pc, #240]	; (10a40 <enh_conn_complete+0x1e0>)
   10950:	f00b f8ae 	bl	1bab0 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10954:	78eb      	ldrb	r3, [r5, #3]
   10956:	b923      	cbnz	r3, 10962 <enh_conn_complete+0x102>
   10958:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   1095c:	483c      	ldr	r0, [pc, #240]	; (10a50 <enh_conn_complete+0x1f0>)
   1095e:	f00b f8a7 	bl	1bab0 <atomic_and>
	if (!conn) {
   10962:	b9dc      	cbnz	r4, 1099c <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
   10964:	4630      	mov	r0, r6
   10966:	f7fd fcb9 	bl	e2dc <bt_addr_le_str_real>
   1096a:	2145      	movs	r1, #69	; 0x45
   1096c:	4602      	mov	r2, r0
   1096e:	4839      	ldr	r0, [pc, #228]	; (10a54 <enh_conn_complete+0x1f4>)
   10970:	f009 fd59 	bl	1a426 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10974:	211f      	movs	r1, #31
   10976:	4640      	mov	r0, r8
   10978:	f00b f8e1 	bl	1bb3e <bt_hci_disconnect>
		return;
   1097c:	e7a3      	b.n	108c6 <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
   1097e:	f00b f886 	bl	1ba8e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10982:	4631      	mov	r1, r6
   10984:	4668      	mov	r0, sp
   10986:	f00b f882 	bl	1ba8e <bt_addr_le_copy>
   1098a:	e7d4      	b.n	10936 <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1098c:	2801      	cmp	r0, #1
   1098e:	d103      	bne.n	10998 <enh_conn_complete+0x138>
   10990:	a802      	add	r0, sp, #8
   10992:	f7fd ff77 	bl	e884 <find_pending_connect.part.0>
   10996:	e7d4      	b.n	10942 <enh_conn_complete+0xe2>
	return NULL;
   10998:	2400      	movs	r4, #0
   1099a:	e7d3      	b.n	10944 <enh_conn_complete+0xe4>
	conn->handle = handle;
   1099c:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1099e:	a902      	add	r1, sp, #8
	conn->handle = handle;
   109a0:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   109a4:	f00b f873 	bl	1ba8e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   109a8:	7e2a      	ldrb	r2, [r5, #24]
   109aa:	7deb      	ldrb	r3, [r5, #23]
   109ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   109b0:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   109b4:	7eaa      	ldrb	r2, [r5, #26]
   109b6:	7e6b      	ldrb	r3, [r5, #25]
   109b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   109bc:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   109c0:	7f2a      	ldrb	r2, [r5, #28]
   109c2:	7eeb      	ldrb	r3, [r5, #27]
   109c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   109c8:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   109ca:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   109ce:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   109d0:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   109d2:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   109d4:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   109d6:	d113      	bne.n	10a00 <enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   109d8:	4669      	mov	r1, sp
   109da:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   109de:	f00b f856 	bl	1ba8e <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   109e2:	7a21      	ldrb	r1, [r4, #8]
   109e4:	4d1c      	ldr	r5, [pc, #112]	; (10a58 <enh_conn_complete+0x1f8>)
   109e6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   109ea:	4429      	add	r1, r5
   109ec:	f104 0096 	add.w	r0, r4, #150	; 0x96
   109f0:	f00b f84d 	bl	1ba8e <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   109f4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   109f8:	065b      	lsls	r3, r3, #25
   109fa:	d501      	bpl.n	10a00 <enh_conn_complete+0x1a0>
			bt_le_adv_resume();
   109fc:	f7ff fefa 	bl	107f4 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10a00:	78e3      	ldrb	r3, [r4, #3]
   10a02:	b96b      	cbnz	r3, 10a20 <enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10a04:	4669      	mov	r1, sp
   10a06:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10a0a:	f00b f840 	bl	1ba8e <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10a0e:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10a10:	4b11      	ldr	r3, [pc, #68]	; (10a58 <enh_conn_complete+0x1f8>)
					&bt_dev.id_addr[conn->id]);
   10a12:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10a16:	4419      	add	r1, r3
   10a18:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10a1c:	f00b f837 	bl	1ba8e <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10a20:	2107      	movs	r1, #7
   10a22:	4620      	mov	r0, r4
   10a24:	f000 fbda 	bl	111dc <bt_conn_set_state>
	conn_auto_initiate(conn);
   10a28:	4620      	mov	r0, r4
   10a2a:	f7fe ff7b 	bl	f924 <conn_auto_initiate>
	bt_conn_unref(conn);
   10a2e:	4620      	mov	r0, r4
   10a30:	f000 fba8 	bl	11184 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10a34:	78e3      	ldrb	r3, [r4, #3]
   10a36:	2b00      	cmp	r3, #0
   10a38:	f47f af45 	bne.w	108c6 <enh_conn_complete+0x66>
   10a3c:	e740      	b.n	108c0 <enh_conn_complete+0x60>
   10a3e:	bf00      	nop
   10a40:	20008028 	.word	0x20008028
   10a44:	000214d5 	.word	0x000214d5
   10a48:	000214f6 	.word	0x000214f6
   10a4c:	00021518 	.word	0x00021518
   10a50:	20008094 	.word	0x20008094
   10a54:	00021536 	.word	0x00021536
   10a58:	20008000 	.word	0x20008000

00010a5c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10a5c:	b570      	push	{r4, r5, r6, lr}
   10a5e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10a60:	482e      	ldr	r0, [pc, #184]	; (10b1c <bt_le_scan_start+0xc0>)
   10a62:	f00b f811 	bl	1ba88 <atomic_get>
   10a66:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10a68:	0781      	lsls	r1, r0, #30
   10a6a:	d554      	bpl.n	10b16 <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10a6c:	782a      	ldrb	r2, [r5, #0]
   10a6e:	2a01      	cmp	r2, #1
   10a70:	d903      	bls.n	10a7a <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10a72:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10a76:	4620      	mov	r0, r4
   10a78:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10a7a:	686b      	ldr	r3, [r5, #4]
   10a7c:	f033 030f 	bics.w	r3, r3, #15
   10a80:	d1f7      	bne.n	10a72 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10a82:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10a86:	8928      	ldrh	r0, [r5, #8]
   10a88:	1f03      	subs	r3, r0, #4
   10a8a:	b29b      	uxth	r3, r3
   10a8c:	42a3      	cmp	r3, r4
   10a8e:	d8f0      	bhi.n	10a72 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10a90:	8969      	ldrh	r1, [r5, #10]
   10a92:	1f0b      	subs	r3, r1, #4
   10a94:	b29b      	uxth	r3, r3
   10a96:	42a3      	cmp	r3, r4
   10a98:	d8eb      	bhi.n	10a72 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10a9a:	4288      	cmp	r0, r1
   10a9c:	d3e9      	bcc.n	10a72 <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10a9e:	b94a      	cbnz	r2, 10ab4 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10aa0:	2140      	movs	r1, #64	; 0x40
   10aa2:	481e      	ldr	r0, [pc, #120]	; (10b1c <bt_le_scan_start+0xc0>)
   10aa4:	f00a fff6 	bl	1ba94 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10aa8:	ea10 0301 	ands.w	r3, r0, r1
   10aac:	d007      	beq.n	10abe <bt_le_scan_start+0x62>
		return -EALREADY;
   10aae:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10ab2:	e7e0      	b.n	10a76 <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10ab4:	f7fe fc8a 	bl	f3cc <bt_le_scan_random_addr_check>
   10ab8:	2800      	cmp	r0, #0
   10aba:	d1f1      	bne.n	10aa0 <bt_le_scan_start+0x44>
   10abc:	e7d9      	b.n	10a72 <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10abe:	4817      	ldr	r0, [pc, #92]	; (10b1c <bt_le_scan_start+0xc0>)
   10ac0:	f00a ffe2 	bl	1ba88 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10ac4:	0682      	lsls	r2, r0, #26
   10ac6:	d50a      	bpl.n	10ade <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   10ac8:	4618      	mov	r0, r3
   10aca:	f7fe fa5d 	bl	ef88 <set_le_scan_enable_legacy>
		if (err) {
   10ace:	4604      	mov	r4, r0
   10ad0:	b128      	cbz	r0, 10ade <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10ad2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10ad6:	4811      	ldr	r0, [pc, #68]	; (10b1c <bt_le_scan_start+0xc0>)
   10ad8:	f00a ffea 	bl	1bab0 <atomic_and>
		return err;
   10adc:	e7cb      	b.n	10a76 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10ade:	686a      	ldr	r2, [r5, #4]
   10ae0:	2108      	movs	r1, #8
   10ae2:	480e      	ldr	r0, [pc, #56]	; (10b1c <bt_le_scan_start+0xc0>)
   10ae4:	f002 0201 	and.w	r2, r2, #1
   10ae8:	f00a ffed 	bl	1bac6 <atomic_set_bit_to>
		if (param->timeout) {
   10aec:	89ab      	ldrh	r3, [r5, #12]
   10aee:	b13b      	cbz	r3, 10b00 <bt_le_scan_start+0xa4>
   10af0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10af4:	4809      	ldr	r0, [pc, #36]	; (10b1c <bt_le_scan_start+0xc0>)
   10af6:	f00a ffdb 	bl	1bab0 <atomic_and>
			return -ENOTSUP;
   10afa:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10afe:	e7ba      	b.n	10a76 <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10b00:	896a      	ldrh	r2, [r5, #10]
   10b02:	8929      	ldrh	r1, [r5, #8]
   10b04:	7828      	ldrb	r0, [r5, #0]
   10b06:	f7fe fc03 	bl	f310 <start_le_scan_legacy>
	if (err) {
   10b0a:	4604      	mov	r4, r0
   10b0c:	2800      	cmp	r0, #0
   10b0e:	d1e0      	bne.n	10ad2 <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   10b10:	4b03      	ldr	r3, [pc, #12]	; (10b20 <bt_le_scan_start+0xc4>)
   10b12:	601e      	str	r6, [r3, #0]
	return 0;
   10b14:	e7af      	b.n	10a76 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   10b16:	f06f 040a 	mvn.w	r4, #10
   10b1a:	e7ac      	b.n	10a76 <bt_le_scan_start+0x1a>
   10b1c:	20008094 	.word	0x20008094
   10b20:	2000ab3c 	.word	0x2000ab3c

00010b24 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   10b24:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10b26:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10b2a:	4807      	ldr	r0, [pc, #28]	; (10b48 <bt_le_scan_stop+0x24>)
   10b2c:	f00a ffc0 	bl	1bab0 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10b30:	0643      	lsls	r3, r0, #25
   10b32:	d506      	bpl.n	10b42 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   10b34:	2000      	movs	r0, #0
   10b36:	4b05      	ldr	r3, [pc, #20]	; (10b4c <bt_le_scan_stop+0x28>)
   10b38:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   10b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10b3e:	f7fe bcd1 	b.w	f4e4 <bt_le_scan_update>
}
   10b42:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10b46:	bd08      	pop	{r3, pc}
   10b48:	20008094 	.word	0x20008094
   10b4c:	2000ab3c 	.word	0x2000ab3c

00010b50 <bt_le_scan_cb_register>:
	parent->next = child;
   10b50:	2300      	movs	r3, #0
   10b52:	6083      	str	r3, [r0, #8]
	return list->tail;
   10b54:	4b05      	ldr	r3, [pc, #20]	; (10b6c <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   10b56:	f100 0208 	add.w	r2, r0, #8
   10b5a:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10b5c:	b911      	cbnz	r1, 10b64 <bt_le_scan_cb_register+0x14>
	list->head = node;
   10b5e:	e9c3 2200 	strd	r2, r2, [r3]
}
   10b62:	4770      	bx	lr
	parent->next = child;
   10b64:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10b66:	605a      	str	r2, [r3, #4]
}
   10b68:	4770      	bx	lr
   10b6a:	bf00      	nop
   10b6c:	2000ab34 	.word	0x2000ab34

00010b70 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b72:	b08d      	sub	sp, #52	; 0x34
   10b74:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10b76:	2700      	movs	r7, #0
   10b78:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10b7a:	2100      	movs	r1, #0
   10b7c:	f242 0018 	movw	r0, #8216	; 0x2018
   10b80:	aa02      	add	r2, sp, #8
   10b82:	f7fe f951 	bl	ee28 <bt_hci_cmd_send_sync>
		if (ret) {
   10b86:	4604      	mov	r4, r0
   10b88:	bb58      	cbnz	r0, 10be2 <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   10b8a:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10b8c:	2208      	movs	r2, #8
   10b8e:	6899      	ldr	r1, [r3, #8]
   10b90:	4630      	mov	r0, r6
   10b92:	3101      	adds	r1, #1
   10b94:	f00a fe8b 	bl	1b8ae <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10b98:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   10b9a:	9802      	ldr	r0, [sp, #8]
   10b9c:	f004 fbd0 	bl	15340 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10ba0:	2f04      	cmp	r7, #4
   10ba2:	f106 0608 	add.w	r6, r6, #8
   10ba6:	d1e8      	bne.n	10b7a <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   10ba8:	f00d f8ce 	bl	1dd48 <z_impl_k_uptime_ticks>
   10bac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   10bb0:	fba0 3206 	umull	r3, r2, r0, r6
   10bb4:	fb06 2101 	mla	r1, r6, r1, r2
   10bb8:	0bdb      	lsrs	r3, r3, #15
   10bba:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10bbe:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   10bc0:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10bc4:	2308      	movs	r3, #8
   10bc6:	2220      	movs	r2, #32
   10bc8:	9300      	str	r3, [sp, #0]
   10bca:	4629      	mov	r1, r5
   10bcc:	4806      	ldr	r0, [pc, #24]	; (10be8 <prng_reseed.constprop.0+0x78>)
   10bce:	446b      	add	r3, sp
   10bd0:	f00a fd23 	bl	1b61a <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   10bd4:	b928      	cbnz	r0, 10be2 <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   10bd6:	2145      	movs	r1, #69	; 0x45
   10bd8:	4804      	ldr	r0, [pc, #16]	; (10bec <prng_reseed.constprop.0+0x7c>)
   10bda:	f009 fc24 	bl	1a426 <printk>
		return -EIO;
   10bde:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   10be2:	4620      	mov	r0, r4
   10be4:	b00d      	add	sp, #52	; 0x34
   10be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10be8:	20008bc8 	.word	0x20008bc8
   10bec:	00021568 	.word	0x00021568

00010bf0 <prng_init>:

int prng_init(void)
{
   10bf0:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10bf2:	4b13      	ldr	r3, [pc, #76]	; (10c40 <prng_init+0x50>)
   10bf4:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	da1d      	bge.n	10c38 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10bfc:	2100      	movs	r1, #0
   10bfe:	f242 0018 	movw	r0, #8216	; 0x2018
   10c02:	aa01      	add	r2, sp, #4
   10c04:	f7fe f910 	bl	ee28 <bt_hci_cmd_send_sync>
	if (ret) {
   10c08:	b988      	cbnz	r0, 10c2e <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   10c0a:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   10c0c:	2208      	movs	r2, #8
   10c0e:	6899      	ldr	r1, [r3, #8]
   10c10:	480c      	ldr	r0, [pc, #48]	; (10c44 <prng_init+0x54>)
   10c12:	3101      	adds	r1, #1
   10c14:	f00a fce1 	bl	1b5da <tc_hmac_prng_init>
   10c18:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   10c1a:	9801      	ldr	r0, [sp, #4]
   10c1c:	f004 fb90 	bl	15340 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   10c20:	b93c      	cbnz	r4, 10c32 <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   10c22:	4809      	ldr	r0, [pc, #36]	; (10c48 <prng_init+0x58>)
   10c24:	2145      	movs	r1, #69	; 0x45
   10c26:	f009 fbfe 	bl	1a426 <printk>
		return -EIO;
   10c2a:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   10c2e:	b002      	add	sp, #8
   10c30:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   10c32:	f7ff ff9d 	bl	10b70 <prng_reseed.constprop.0>
   10c36:	e7fa      	b.n	10c2e <prng_init+0x3e>
		return -ENOTSUP;
   10c38:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10c3c:	e7f7      	b.n	10c2e <prng_init+0x3e>
   10c3e:	bf00      	nop
   10c40:	20008000 	.word	0x20008000
   10c44:	20008bc8 	.word	0x20008bc8
   10c48:	00021584 	.word	0x00021584

00010c4c <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   10c4c:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   10c4e:	4a0a      	ldr	r2, [pc, #40]	; (10c78 <bt_rand+0x2c>)
{
   10c50:	4604      	mov	r4, r0
   10c52:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   10c54:	f00a fcfa 	bl	1b64c <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   10c58:	1c43      	adds	r3, r0, #1
   10c5a:	d107      	bne.n	10c6c <bt_rand+0x20>
		ret = prng_reseed(&prng);
   10c5c:	f7ff ff88 	bl	10b70 <prng_reseed.constprop.0>
		if (ret) {
   10c60:	b948      	cbnz	r0, 10c76 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   10c62:	4629      	mov	r1, r5
   10c64:	4620      	mov	r0, r4
   10c66:	4a04      	ldr	r2, [pc, #16]	; (10c78 <bt_rand+0x2c>)
   10c68:	f00a fcf0 	bl	1b64c <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   10c6c:	2801      	cmp	r0, #1
   10c6e:	bf14      	ite	ne
   10c70:	f06f 0004 	mvnne.w	r0, #4
   10c74:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   10c76:	bd38      	pop	{r3, r4, r5, pc}
   10c78:	20008bc8 	.word	0x20008bc8

00010c7c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10c7c:	2300      	movs	r3, #0
{
   10c7e:	4601      	mov	r1, r0
	tx->user_data = NULL;
   10c80:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   10c84:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   10c86:	4801      	ldr	r0, [pc, #4]	; (10c8c <tx_free+0x10>)
   10c88:	f00c bf8a 	b.w	1dba0 <k_queue_append>
   10c8c:	200086a0 	.word	0x200086a0

00010c90 <notify_connected>:
{
   10c90:	b538      	push	{r3, r4, r5, lr}
   10c92:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   10c94:	4b08      	ldr	r3, [pc, #32]	; (10cb8 <notify_connected+0x28>)
   10c96:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   10c98:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   10c9a:	b92d      	cbnz	r5, 10ca8 <notify_connected+0x18>
	if (!conn->err) {
   10c9c:	b951      	cbnz	r1, 10cb4 <notify_connected+0x24>
		bt_gatt_connected(conn);
   10c9e:	4620      	mov	r0, r4
}
   10ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   10ca4:	f004 b846 	b.w	14d34 <bt_gatt_connected>
		if (cb->connected) {
   10ca8:	682b      	ldr	r3, [r5, #0]
   10caa:	b10b      	cbz	r3, 10cb0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   10cac:	4620      	mov	r0, r4
   10cae:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10cb0:	692d      	ldr	r5, [r5, #16]
   10cb2:	e7f1      	b.n	10c98 <notify_connected+0x8>
}
   10cb4:	bd38      	pop	{r3, r4, r5, pc}
   10cb6:	bf00      	nop
   10cb8:	2000ab40 	.word	0x2000ab40

00010cbc <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   10cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10cc0:	4604      	mov	r4, r0
   10cc2:	460e      	mov	r6, r1
   10cc4:	4691      	mov	r9, r2
   10cc6:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10cc8:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   10cca:	f04f 33ff 	mov.w	r3, #4294967295
   10cce:	f04f 32ff 	mov.w	r2, #4294967295
   10cd2:	4847      	ldr	r0, [pc, #284]	; (10df0 <send_frag+0x134>)
   10cd4:	f008 fa0e 	bl	190f4 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   10cd8:	7aa3      	ldrb	r3, [r4, #10]
   10cda:	2b07      	cmp	r3, #7
   10cdc:	d14b      	bne.n	10d76 <send_frag+0xba>
	__asm__ volatile(
   10cde:	f04f 0320 	mov.w	r3, #32
   10ce2:	f3ef 8211 	mrs	r2, BASEPRI
   10ce6:	f383 8811 	msr	BASEPRI, r3
   10cea:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   10cee:	69a3      	ldr	r3, [r4, #24]
   10cf0:	2d00      	cmp	r5, #0
   10cf2:	d052      	beq.n	10d9a <send_frag+0xde>
	parent->next = child;
   10cf4:	2100      	movs	r1, #0
   10cf6:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   10cf8:	2b00      	cmp	r3, #0
   10cfa:	d14b      	bne.n	10d94 <send_frag+0xd8>
	list->head = node;
   10cfc:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   10d00:	f382 8811 	msr	BASEPRI, r2
   10d04:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   10d08:	2104      	movs	r1, #4
   10d0a:	f106 0008 	add.w	r0, r6, #8
   10d0e:	f004 fbd5 	bl	154bc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10d12:	8823      	ldrh	r3, [r4, #0]
   10d14:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   10d18:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10d1c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10d1e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10d22:	3b04      	subs	r3, #4
   10d24:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10d26:	2302      	movs	r3, #2
	return bt_send(buf);
   10d28:	4630      	mov	r0, r6
   10d2a:	7533      	strb	r3, [r6, #20]
   10d2c:	f7fe fd70 	bl	f810 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   10d30:	4602      	mov	r2, r0
   10d32:	2800      	cmp	r0, #0
   10d34:	d059      	beq.n	10dea <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   10d36:	2145      	movs	r1, #69	; 0x45
   10d38:	482e      	ldr	r0, [pc, #184]	; (10df4 <send_frag+0x138>)
   10d3a:	f009 fb74 	bl	1a426 <printk>
	__asm__ volatile(
   10d3e:	f04f 0320 	mov.w	r3, #32
   10d42:	f3ef 8911 	mrs	r9, BASEPRI
   10d46:	f383 8811 	msr	BASEPRI, r3
   10d4a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   10d4e:	2d00      	cmp	r5, #0
   10d50:	d037      	beq.n	10dc2 <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10d52:	2200      	movs	r2, #0
	return list->head;
   10d54:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10d56:	b153      	cbz	r3, 10d6e <send_frag+0xb2>
   10d58:	429d      	cmp	r5, r3
   10d5a:	d12f      	bne.n	10dbc <send_frag+0x100>
	return node->next;
   10d5c:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   10d5e:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   10d60:	bb3a      	cbnz	r2, 10db2 <send_frag+0xf6>
   10d62:	42a9      	cmp	r1, r5
	list->head = node;
   10d64:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   10d66:	d100      	bne.n	10d6a <send_frag+0xae>
	list->tail = node;
   10d68:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   10d6a:	2300      	movs	r3, #0
   10d6c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   10d6e:	f389 8811 	msr	BASEPRI, r9
   10d72:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   10d76:	481e      	ldr	r0, [pc, #120]	; (10df0 <send_frag+0x134>)
   10d78:	f008 f980 	bl	1907c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   10d7c:	b115      	cbz	r5, 10d84 <send_frag+0xc8>
		tx_free(tx);
   10d7e:	4628      	mov	r0, r5
   10d80:	f7ff ff7c 	bl	10c7c <tx_free>
	}

	if (always_consume) {
   10d84:	b11f      	cbz	r7, 10d8e <send_frag+0xd2>
		net_buf_unref(buf);
   10d86:	4630      	mov	r0, r6
   10d88:	f004 fada 	bl	15340 <net_buf_unref>
	}
	return false;
   10d8c:	2700      	movs	r7, #0
}
   10d8e:	4638      	mov	r0, r7
   10d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d94:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10d96:	61a5      	str	r5, [r4, #24]
}
   10d98:	e7b2      	b.n	10d00 <send_frag+0x44>
		if (tail_tx) {
   10d9a:	b133      	cbz	r3, 10daa <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   10d9c:	f103 080c 	add.w	r8, r3, #12
   10da0:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   10da2:	3301      	adds	r3, #1
   10da4:	f8c8 3000 	str.w	r3, [r8]
   10da8:	e7aa      	b.n	10d00 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   10daa:	69e3      	ldr	r3, [r4, #28]
   10dac:	f104 081c 	add.w	r8, r4, #28
   10db0:	e7f7      	b.n	10da2 <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   10db2:	42a9      	cmp	r1, r5
	parent->next = child;
   10db4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10db6:	bf08      	it	eq
   10db8:	61a2      	streq	r2, [r4, #24]
}
   10dba:	e7d6      	b.n	10d6a <send_frag+0xae>
	return node->next;
   10dbc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10dbe:	681b      	ldr	r3, [r3, #0]
   10dc0:	e7c9      	b.n	10d56 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   10dc2:	f8d8 3000 	ldr.w	r3, [r8]
   10dc6:	b953      	cbnz	r3, 10dde <send_frag+0x122>
   10dc8:	490b      	ldr	r1, [pc, #44]	; (10df8 <send_frag+0x13c>)
   10dca:	480c      	ldr	r0, [pc, #48]	; (10dfc <send_frag+0x140>)
   10dcc:	f240 4292 	movw	r2, #1170	; 0x492
   10dd0:	f009 fb29 	bl	1a426 <printk>
   10dd4:	f240 4192 	movw	r1, #1170	; 0x492
   10dd8:	4807      	ldr	r0, [pc, #28]	; (10df8 <send_frag+0x13c>)
   10dda:	f009 fdca 	bl	1a972 <assert_post_action>
			(*pending_no_cb)--;
   10dde:	f8d8 3000 	ldr.w	r3, [r8]
   10de2:	3b01      	subs	r3, #1
   10de4:	f8c8 3000 	str.w	r3, [r8]
   10de8:	e7c1      	b.n	10d6e <send_frag+0xb2>
	return true;
   10dea:	2701      	movs	r7, #1
   10dec:	e7cf      	b.n	10d8e <send_frag+0xd2>
   10dee:	bf00      	nop
   10df0:	200080c8 	.word	0x200080c8
   10df4:	00021111 	.word	0x00021111
   10df8:	000215ad 	.word	0x000215ad
   10dfc:	0001f98f 	.word	0x0001f98f

00010e00 <bt_conn_get_pkts>:
}
   10e00:	4800      	ldr	r0, [pc, #0]	; (10e04 <bt_conn_get_pkts+0x4>)
   10e02:	4770      	bx	lr
   10e04:	200080c8 	.word	0x200080c8

00010e08 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10e08:	1d03      	adds	r3, r0, #4
{
   10e0a:	b570      	push	{r4, r5, r6, lr}
   10e0c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10e0e:	4618      	mov	r0, r3
   10e10:	f00a ff52 	bl	1bcb8 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10e14:	0582      	lsls	r2, r0, #22
   10e16:	d515      	bpl.n	10e44 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   10e18:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10e1c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   10e20:	4291      	cmp	r1, r2
   10e22:	d80f      	bhi.n	10e44 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   10e24:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   10e28:	4291      	cmp	r1, r2
   10e2a:	d30b      	bcc.n	10e44 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   10e2c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   10e30:	4291      	cmp	r1, r2
   10e32:	d107      	bne.n	10e44 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10e34:	e8d3 2fef 	ldaex	r2, [r3]
   10e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   10e3c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   10e40:	2900      	cmp	r1, #0
   10e42:	d1f7      	bne.n	10e34 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   10e44:	4b07      	ldr	r3, [pc, #28]	; (10e64 <notify_le_param_updated+0x5c>)
   10e46:	681d      	ldr	r5, [r3, #0]
   10e48:	b905      	cbnz	r5, 10e4c <notify_le_param_updated+0x44>
}
   10e4a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   10e4c:	68ee      	ldr	r6, [r5, #12]
   10e4e:	b13e      	cbz	r6, 10e60 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   10e50:	4620      	mov	r0, r4
   10e52:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   10e56:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   10e5a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   10e5e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   10e60:	692d      	ldr	r5, [r5, #16]
   10e62:	e7f1      	b.n	10e48 <notify_le_param_updated+0x40>
   10e64:	2000ab40 	.word	0x2000ab40

00010e68 <le_param_req>:
{
   10e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e6a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   10e6c:	4608      	mov	r0, r1
{
   10e6e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10e70:	f00a fe80 	bl	1bb74 <bt_le_conn_params_valid>
   10e74:	4604      	mov	r4, r0
   10e76:	b910      	cbnz	r0, 10e7e <le_param_req+0x16>
		return false;
   10e78:	2400      	movs	r4, #0
}
   10e7a:	4620      	mov	r0, r4
   10e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   10e7e:	4b09      	ldr	r3, [pc, #36]	; (10ea4 <le_param_req+0x3c>)
   10e80:	681e      	ldr	r6, [r3, #0]
   10e82:	2e00      	cmp	r6, #0
   10e84:	d0f9      	beq.n	10e7a <le_param_req+0x12>
		if (!cb->le_param_req) {
   10e86:	68b3      	ldr	r3, [r6, #8]
   10e88:	b90b      	cbnz	r3, 10e8e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   10e8a:	6936      	ldr	r6, [r6, #16]
   10e8c:	e7f9      	b.n	10e82 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   10e8e:	4629      	mov	r1, r5
   10e90:	4638      	mov	r0, r7
   10e92:	4798      	blx	r3
   10e94:	2800      	cmp	r0, #0
   10e96:	d0ef      	beq.n	10e78 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   10e98:	4628      	mov	r0, r5
   10e9a:	f00a fe6b 	bl	1bb74 <bt_le_conn_params_valid>
   10e9e:	2800      	cmp	r0, #0
   10ea0:	d1f3      	bne.n	10e8a <le_param_req+0x22>
   10ea2:	e7e9      	b.n	10e78 <le_param_req+0x10>
   10ea4:	2000ab40 	.word	0x2000ab40

00010ea8 <bt_conn_cb_register>:
	cb->_next = callback_list;
   10ea8:	4b02      	ldr	r3, [pc, #8]	; (10eb4 <bt_conn_cb_register+0xc>)
   10eaa:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   10eac:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   10eae:	6102      	str	r2, [r0, #16]
}
   10eb0:	4770      	bx	lr
   10eb2:	bf00      	nop
   10eb4:	2000ab40 	.word	0x2000ab40

00010eb8 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   10eb8:	b570      	push	{r4, r5, r6, lr}
   10eba:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   10ebc:	f100 0634 	add.w	r6, r0, #52	; 0x34
   10ec0:	2200      	movs	r2, #0
   10ec2:	2300      	movs	r3, #0
   10ec4:	4630      	mov	r0, r6
   10ec6:	f004 f9b9 	bl	1523c <net_buf_get>
   10eca:	4605      	mov	r5, r0
   10ecc:	bb28      	cbnz	r0, 10f1a <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   10ece:	6963      	ldr	r3, [r4, #20]
   10ed0:	b153      	cbz	r3, 10ee8 <conn_cleanup+0x30>
   10ed2:	4916      	ldr	r1, [pc, #88]	; (10f2c <conn_cleanup+0x74>)
   10ed4:	4816      	ldr	r0, [pc, #88]	; (10f30 <conn_cleanup+0x78>)
   10ed6:	f240 520c 	movw	r2, #1292	; 0x50c
   10eda:	f009 faa4 	bl	1a426 <printk>
   10ede:	f240 510c 	movw	r1, #1292	; 0x50c
   10ee2:	4812      	ldr	r0, [pc, #72]	; (10f2c <conn_cleanup+0x74>)
   10ee4:	f009 fd45 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   10ee8:	69e3      	ldr	r3, [r4, #28]
   10eea:	b153      	cbz	r3, 10f02 <conn_cleanup+0x4a>
   10eec:	490f      	ldr	r1, [pc, #60]	; (10f2c <conn_cleanup+0x74>)
   10eee:	4810      	ldr	r0, [pc, #64]	; (10f30 <conn_cleanup+0x78>)
   10ef0:	f240 520d 	movw	r2, #1293	; 0x50d
   10ef4:	f009 fa97 	bl	1a426 <printk>
   10ef8:	f240 510d 	movw	r1, #1293	; 0x50d
   10efc:	480b      	ldr	r0, [pc, #44]	; (10f2c <conn_cleanup+0x74>)
   10efe:	f009 fd38 	bl	1a972 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   10f02:	4620      	mov	r0, r4
   10f04:	f00a ff25 	bl	1bd52 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10f08:	f104 0158 	add.w	r1, r4, #88	; 0x58
   10f0c:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   10f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10f12:	2300      	movs	r3, #0
   10f14:	4807      	ldr	r0, [pc, #28]	; (10f34 <conn_cleanup+0x7c>)
   10f16:	f008 bb13 	b.w	19540 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   10f1a:	6968      	ldr	r0, [r5, #20]
   10f1c:	b108      	cbz	r0, 10f22 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   10f1e:	f7ff fead 	bl	10c7c <tx_free>
		net_buf_unref(buf);
   10f22:	4628      	mov	r0, r5
   10f24:	f004 fa0c 	bl	15340 <net_buf_unref>
   10f28:	e7ca      	b.n	10ec0 <conn_cleanup+0x8>
   10f2a:	bf00      	nop
   10f2c:	000215ad 	.word	0x000215ad
   10f30:	0001f98f 	.word	0x0001f98f
   10f34:	2000a558 	.word	0x2000a558

00010f38 <bt_conn_recv>:
{
   10f38:	b570      	push	{r4, r5, r6, lr}
   10f3a:	4616      	mov	r6, r2
   10f3c:	4604      	mov	r4, r0
   10f3e:	460d      	mov	r5, r1
	tx_notify(conn);
   10f40:	f00a febd 	bl	1bcbe <tx_notify>
	switch (flags) {
   10f44:	2e01      	cmp	r6, #1
   10f46:	d01f      	beq.n	10f88 <bt_conn_recv+0x50>
   10f48:	2e02      	cmp	r6, #2
   10f4a:	d140      	bne.n	10fce <bt_conn_recv+0x96>
		if (conn->rx) {
   10f4c:	6923      	ldr	r3, [r4, #16]
   10f4e:	b133      	cbz	r3, 10f5e <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   10f50:	4826      	ldr	r0, [pc, #152]	; (10fec <bt_conn_recv+0xb4>)
   10f52:	2145      	movs	r1, #69	; 0x45
   10f54:	f009 fa67 	bl	1a426 <printk>
			bt_conn_reset_rx_state(conn);
   10f58:	4620      	mov	r0, r4
   10f5a:	f00a fefa 	bl	1bd52 <bt_conn_reset_rx_state>
		conn->rx = buf;
   10f5e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   10f60:	6921      	ldr	r1, [r4, #16]
   10f62:	898a      	ldrh	r2, [r1, #12]
   10f64:	2a01      	cmp	r2, #1
   10f66:	d93f      	bls.n	10fe8 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   10f68:	688b      	ldr	r3, [r1, #8]
   10f6a:	881b      	ldrh	r3, [r3, #0]
   10f6c:	3304      	adds	r3, #4
   10f6e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   10f70:	429a      	cmp	r2, r3
   10f72:	d339      	bcc.n	10fe8 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   10f74:	d931      	bls.n	10fda <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   10f76:	481e      	ldr	r0, [pc, #120]	; (10ff0 <bt_conn_recv+0xb8>)
   10f78:	2145      	movs	r1, #69	; 0x45
   10f7a:	f009 fa54 	bl	1a426 <printk>
		bt_conn_reset_rx_state(conn);
   10f7e:	4620      	mov	r0, r4
}
   10f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   10f84:	f00a bee5 	b.w	1bd52 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   10f88:	6920      	ldr	r0, [r4, #16]
   10f8a:	b938      	cbnz	r0, 10f9c <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   10f8c:	2145      	movs	r1, #69	; 0x45
   10f8e:	4819      	ldr	r0, [pc, #100]	; (10ff4 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   10f90:	f009 fa49 	bl	1a426 <printk>
			bt_conn_reset_rx_state(conn);
   10f94:	4620      	mov	r0, r4
   10f96:	f00a fedc 	bl	1bd52 <bt_conn_reset_rx_state>
   10f9a:	e001      	b.n	10fa0 <bt_conn_recv+0x68>
		if (!buf->len) {
   10f9c:	89ae      	ldrh	r6, [r5, #12]
   10f9e:	b926      	cbnz	r6, 10faa <bt_conn_recv+0x72>
			net_buf_unref(buf);
   10fa0:	4628      	mov	r0, r5
}
   10fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   10fa6:	f004 b9cb 	b.w	15340 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   10faa:	3008      	adds	r0, #8
   10fac:	f00b ffb5 	bl	1cf1a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   10fb0:	4286      	cmp	r6, r0
   10fb2:	d902      	bls.n	10fba <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   10fb4:	2145      	movs	r1, #69	; 0x45
   10fb6:	4810      	ldr	r0, [pc, #64]	; (10ff8 <bt_conn_recv+0xc0>)
   10fb8:	e7ea      	b.n	10f90 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10fba:	6920      	ldr	r0, [r4, #16]
   10fbc:	89aa      	ldrh	r2, [r5, #12]
   10fbe:	68a9      	ldr	r1, [r5, #8]
   10fc0:	3008      	adds	r0, #8
   10fc2:	f00b ffb2 	bl	1cf2a <net_buf_simple_add_mem>
		net_buf_unref(buf);
   10fc6:	4628      	mov	r0, r5
   10fc8:	f004 f9ba 	bl	15340 <net_buf_unref>
		break;
   10fcc:	e7c8      	b.n	10f60 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   10fce:	4632      	mov	r2, r6
   10fd0:	2145      	movs	r1, #69	; 0x45
   10fd2:	480a      	ldr	r0, [pc, #40]	; (10ffc <bt_conn_recv+0xc4>)
   10fd4:	f009 fa27 	bl	1a426 <printk>
		bt_conn_reset_rx_state(conn);
   10fd8:	e7dc      	b.n	10f94 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   10fda:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   10fdc:	4620      	mov	r0, r4
	conn->rx = NULL;
   10fde:	6123      	str	r3, [r4, #16]
}
   10fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   10fe4:	f000 be1c 	b.w	11c20 <bt_l2cap_recv>
}
   10fe8:	bd70      	pop	{r4, r5, r6, pc}
   10fea:	bf00      	nop
   10fec:	000215dd 	.word	0x000215dd
   10ff0:	00021671 	.word	0x00021671
   10ff4:	000215ff 	.word	0x000215ff
   10ff8:	00021622 	.word	0x00021622
   10ffc:	0002164e 	.word	0x0002164e

00011000 <bt_conn_send_cb>:
{
   11000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11004:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   11006:	7a83      	ldrb	r3, [r0, #10]
{
   11008:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1100a:	2b07      	cmp	r3, #7
{
   1100c:	460d      	mov	r5, r1
   1100e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   11010:	d009      	beq.n	11026 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   11012:	4821      	ldr	r0, [pc, #132]	; (11098 <bt_conn_send_cb+0x98>)
   11014:	2145      	movs	r1, #69	; 0x45
   11016:	f009 fa06 	bl	1a426 <printk>
		net_buf_unref(buf);
   1101a:	4628      	mov	r0, r5
   1101c:	f004 f990 	bl	15340 <net_buf_unref>
			return -ENOTCONN;
   11020:	f06f 0038 	mvn.w	r0, #56	; 0x38
   11024:	e01a      	b.n	1105c <bt_conn_send_cb+0x5c>
	if (cb) {
   11026:	2a00      	cmp	r2, #0
   11028:	d034      	beq.n	11094 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   1102a:	f008 f821 	bl	19070 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1102e:	4b1b      	ldr	r3, [pc, #108]	; (1109c <bt_conn_send_cb+0x9c>)
   11030:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   11032:	481b      	ldr	r0, [pc, #108]	; (110a0 <bt_conn_send_cb+0xa0>)
   11034:	bf07      	ittee	eq
   11036:	2200      	moveq	r2, #0
   11038:	2300      	moveq	r3, #0
   1103a:	f04f 32ff 	movne.w	r2, #4294967295
   1103e:	f04f 33ff 	movne.w	r3, #4294967295
   11042:	f006 ffaf 	bl	17fa4 <z_impl_k_queue_get>
   11046:	4604      	mov	r4, r0
		if (!tx) {
   11048:	b950      	cbnz	r0, 11060 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   1104a:	2145      	movs	r1, #69	; 0x45
   1104c:	4815      	ldr	r0, [pc, #84]	; (110a4 <bt_conn_send_cb+0xa4>)
   1104e:	f009 f9ea 	bl	1a426 <printk>
			net_buf_unref(buf);
   11052:	4628      	mov	r0, r5
   11054:	f004 f974 	bl	15340 <net_buf_unref>
			return -ENOBUFS;
   11058:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   11060:	7ab3      	ldrb	r3, [r6, #10]
   11062:	2b07      	cmp	r3, #7
   11064:	d00a      	beq.n	1107c <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   11066:	2157      	movs	r1, #87	; 0x57
   11068:	480f      	ldr	r0, [pc, #60]	; (110a8 <bt_conn_send_cb+0xa8>)
   1106a:	f009 f9dc 	bl	1a426 <printk>
			net_buf_unref(buf);
   1106e:	4628      	mov	r0, r5
   11070:	f004 f966 	bl	15340 <net_buf_unref>
			tx_free(tx);
   11074:	4620      	mov	r0, r4
   11076:	f7ff fe01 	bl	10c7c <tx_free>
   1107a:	e7d1      	b.n	11020 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   1107c:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1107e:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   11082:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   11084:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   11086:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1108a:	4629      	mov	r1, r5
   1108c:	f004 f92a 	bl	152e4 <net_buf_put>
	return 0;
   11090:	2000      	movs	r0, #0
   11092:	e7e3      	b.n	1105c <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   11094:	614a      	str	r2, [r1, #20]
   11096:	e7f6      	b.n	11086 <bt_conn_send_cb+0x86>
   11098:	00021691 	.word	0x00021691
   1109c:	2000a578 	.word	0x2000a578
   110a0:	200086a0 	.word	0x200086a0
   110a4:	000216a5 	.word	0x000216a5
   110a8:	000216c8 	.word	0x000216c8

000110ac <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   110ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   110b0:	2500      	movs	r5, #0
   110b2:	4b1c      	ldr	r3, [pc, #112]	; (11124 <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   110b4:	462a      	mov	r2, r5
   110b6:	2101      	movs	r1, #1
{
   110b8:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   110ba:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   110bc:	2601      	movs	r6, #1
   110be:	f008 ff63 	bl	19f88 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   110c2:	f04f 0914 	mov.w	r9, #20
   110c6:	4c18      	ldr	r4, [pc, #96]	; (11128 <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   110c8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   110cc:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   110d0:	f00a fdf2 	bl	1bcb8 <atomic_get>
   110d4:	b178      	cbz	r0, 110f6 <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   110d6:	7aa3      	ldrb	r3, [r4, #10]
   110d8:	b9ab      	cbnz	r3, 11106 <bt_conn_prepare_events+0x5a>
   110da:	1d23      	adds	r3, r4, #4
   110dc:	e8d3 2fef 	ldaex	r2, [r3]
   110e0:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   110e4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   110e8:	2800      	cmp	r0, #0
   110ea:	d1f7      	bne.n	110dc <bt_conn_prepare_events+0x30>
   110ec:	0653      	lsls	r3, r2, #25
   110ee:	d50a      	bpl.n	11106 <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   110f0:	4620      	mov	r0, r4
   110f2:	f7ff fee1 	bl	10eb8 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   110f6:	3501      	adds	r5, #1
   110f8:	2d0a      	cmp	r5, #10
   110fa:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   110fe:	d1e3      	bne.n	110c8 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   11100:	4630      	mov	r0, r6
   11102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   11106:	7aa3      	ldrb	r3, [r4, #10]
   11108:	2b07      	cmp	r3, #7
   1110a:	d1f4      	bne.n	110f6 <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   1110c:	f104 0334 	add.w	r3, r4, #52	; 0x34
   11110:	2200      	movs	r2, #0
   11112:	2104      	movs	r1, #4
   11114:	4640      	mov	r0, r8
   11116:	f008 ff37 	bl	19f88 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1111a:	2301      	movs	r3, #1
   1111c:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   11120:	441e      	add	r6, r3
   11122:	e7e8      	b.n	110f6 <bt_conn_prepare_events+0x4a>
   11124:	20008434 	.word	0x20008434
   11128:	20008d00 	.word	0x20008d00

0001112c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1112c:	b570      	push	{r4, r5, r6, lr}
   1112e:	4606      	mov	r6, r0
   11130:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   11132:	4810      	ldr	r0, [pc, #64]	; (11174 <bt_conn_add_le+0x48>)
   11134:	210a      	movs	r1, #10
   11136:	f00a fde8 	bl	1bd0a <bt_conn_new>
	if (!conn) {
   1113a:	4604      	mov	r4, r0
   1113c:	b1b8      	cbz	r0, 1116e <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1113e:	2230      	movs	r2, #48	; 0x30
   11140:	2100      	movs	r1, #0
   11142:	3058      	adds	r0, #88	; 0x58
   11144:	f00a fbde 	bl	1b904 <memset>
   11148:	4b0b      	ldr	r3, [pc, #44]	; (11178 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1114a:	4a0c      	ldr	r2, [pc, #48]	; (1117c <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1114c:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1114e:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   11150:	4629      	mov	r1, r5
   11152:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   11156:	62a3      	str	r3, [r4, #40]	; 0x28
   11158:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   1115a:	7226      	strb	r6, [r4, #8]
   1115c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   11160:	f00a fba5 	bl	1b8ae <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   11164:	2301      	movs	r3, #1
   11166:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   11168:	4b05      	ldr	r3, [pc, #20]	; (11180 <bt_conn_add_le+0x54>)
   1116a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1116e:	4620      	mov	r0, r4
   11170:	bd70      	pop	{r4, r5, r6, pc}
   11172:	bf00      	nop
   11174:	20008d00 	.word	0x20008d00
   11178:	0001167d 	.word	0x0001167d
   1117c:	0001bd05 	.word	0x0001bd05
   11180:	00280018 	.word	0x00280018

00011184 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   11184:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   11186:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1118a:	e8d4 3fef 	ldaex	r3, [r4]
   1118e:	1e5a      	subs	r2, r3, #1
   11190:	e8c4 2fe1 	stlex	r1, r2, [r4]
   11194:	2900      	cmp	r1, #0
   11196:	d1f8      	bne.n	1118a <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   11198:	2b00      	cmp	r3, #0
   1119a:	dc0a      	bgt.n	111b2 <bt_conn_unref+0x2e>
   1119c:	4909      	ldr	r1, [pc, #36]	; (111c4 <bt_conn_unref+0x40>)
   1119e:	480a      	ldr	r0, [pc, #40]	; (111c8 <bt_conn_unref+0x44>)
   111a0:	f240 7265 	movw	r2, #1893	; 0x765
   111a4:	f009 f93f 	bl	1a426 <printk>
   111a8:	f240 7165 	movw	r1, #1893	; 0x765
   111ac:	4805      	ldr	r0, [pc, #20]	; (111c4 <bt_conn_unref+0x40>)
   111ae:	f009 fbe0 	bl	1a972 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   111b2:	4620      	mov	r0, r4
   111b4:	f00a fd80 	bl	1bcb8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   111b8:	b918      	cbnz	r0, 111c2 <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   111ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   111be:	f7ff bb19 	b.w	107f4 <bt_le_adv_resume>
}
   111c2:	bd10      	pop	{r4, pc}
   111c4:	000215ad 	.word	0x000215ad
   111c8:	0001f98f 	.word	0x0001f98f

000111cc <bt_conn_lookup_handle>:
{
   111cc:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   111ce:	210a      	movs	r1, #10
   111d0:	4801      	ldr	r0, [pc, #4]	; (111d8 <bt_conn_lookup_handle+0xc>)
   111d2:	f00a bdfe 	b.w	1bdd2 <conn_lookup_handle>
   111d6:	bf00      	nop
   111d8:	20008d00 	.word	0x20008d00

000111dc <bt_conn_set_state>:
{
   111dc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   111de:	7a85      	ldrb	r5, [r0, #10]
{
   111e0:	4604      	mov	r4, r0
	if (conn->state == state) {
   111e2:	428d      	cmp	r5, r1
{
   111e4:	460e      	mov	r6, r1
	if (conn->state == state) {
   111e6:	d10b      	bne.n	11200 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   111e8:	2157      	movs	r1, #87	; 0x57
   111ea:	2d08      	cmp	r5, #8
   111ec:	bf96      	itet	ls
   111ee:	4b6d      	ldrls	r3, [pc, #436]	; (113a4 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   111f0:	4a6d      	ldrhi	r2, [pc, #436]	; (113a8 <bt_conn_set_state+0x1cc>)
   111f2:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   111f6:	486d      	ldr	r0, [pc, #436]	; (113ac <bt_conn_set_state+0x1d0>)
}
   111f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   111fc:	f009 b913 	b.w	1a426 <printk>
	conn->state = state;
   11200:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   11202:	b165      	cbz	r5, 1121e <bt_conn_set_state+0x42>
   11204:	2d06      	cmp	r5, #6
   11206:	d00d      	beq.n	11224 <bt_conn_set_state+0x48>
	switch (conn->state) {
   11208:	7aa3      	ldrb	r3, [r4, #10]
   1120a:	2b08      	cmp	r3, #8
   1120c:	f200 80c5 	bhi.w	1139a <bt_conn_set_state+0x1be>
   11210:	e8df f003 	tbb	[pc, r3]
   11214:	c7c70f4a 	.word	0xc7c70f4a
   11218:	278ec7c7 	.word	0x278ec7c7
   1121c:	c7          	.byte	0xc7
   1121d:	00          	.byte	0x00
		bt_conn_ref(conn);
   1121e:	f00a fdc1 	bl	1bda4 <bt_conn_ref>
		break;
   11222:	e7f1      	b.n	11208 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11224:	7883      	ldrb	r3, [r0, #2]
   11226:	2b01      	cmp	r3, #1
   11228:	d1ee      	bne.n	11208 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   1122a:	3058      	adds	r0, #88	; 0x58
   1122c:	f008 f9f8 	bl	19620 <k_delayed_work_cancel>
   11230:	e7ea      	b.n	11208 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   11232:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   11234:	4d5e      	ldr	r5, [pc, #376]	; (113b0 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   11236:	f04f 0320 	mov.w	r3, #32
   1123a:	f3ef 8211 	mrs	r2, BASEPRI
   1123e:	f383 8811 	msr	BASEPRI, r3
   11242:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   11246:	69e3      	ldr	r3, [r4, #28]
   11248:	2b00      	cmp	r3, #0
   1124a:	f000 8087 	beq.w	1135c <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   1124e:	3b01      	subs	r3, #1
   11250:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   11252:	f382 8811 	msr	BASEPRI, r2
   11256:	f3bf 8f6f 	isb	sy
   1125a:	4628      	mov	r0, r5
   1125c:	f007 ff0e 	bl	1907c <z_impl_k_sem_give>
}
   11260:	e7e9      	b.n	11236 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11262:	78a3      	ldrb	r3, [r4, #2]
   11264:	2b04      	cmp	r3, #4
   11266:	f000 809c 	beq.w	113a2 <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   1126a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1126e:	f00c fc8a 	bl	1db86 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   11272:	2100      	movs	r1, #0
   11274:	484f      	ldr	r0, [pc, #316]	; (113b4 <bt_conn_set_state+0x1d8>)
   11276:	f008 ff93 	bl	1a1a0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1127a:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   1127c:	4620      	mov	r0, r4
	list->tail = NULL;
   1127e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   11282:	f000 fbdb 	bl	11a3c <bt_l2cap_connected>
		notify_connected(conn);
   11286:	4620      	mov	r0, r4
   11288:	f7ff fd02 	bl	10c90 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1128c:	78e3      	ldrb	r3, [r4, #3]
   1128e:	2b01      	cmp	r3, #1
   11290:	f040 8087 	bne.w	113a2 <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11294:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   11298:	2300      	movs	r3, #0
   1129a:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1129e:	4846      	ldr	r0, [pc, #280]	; (113b8 <bt_conn_set_state+0x1dc>)
}
   112a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   112a4:	f008 b94c 	b.w	19540 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   112a8:	78a3      	ldrb	r3, [r4, #2]
   112aa:	2b04      	cmp	r3, #4
   112ac:	d104      	bne.n	112b8 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   112ae:	4620      	mov	r0, r4
}
   112b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   112b4:	f7ff bf66 	b.w	11184 <bt_conn_unref>
		switch (old_state) {
   112b8:	2d08      	cmp	r5, #8
   112ba:	d872      	bhi.n	113a2 <bt_conn_set_state+0x1c6>
   112bc:	a301      	add	r3, pc, #4	; (adr r3, 112c4 <bt_conn_set_state+0xe8>)
   112be:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   112c2:	bf00      	nop
   112c4:	00011329 	.word	0x00011329
   112c8:	000112e9 	.word	0x000112e9
   112cc:	0001131b 	.word	0x0001131b
   112d0:	000112af 	.word	0x000112af
   112d4:	000112af 	.word	0x000112af
   112d8:	0001131b 	.word	0x0001131b
   112dc:	0001131b 	.word	0x0001131b
   112e0:	00011329 	.word	0x00011329
   112e4:	00011329 	.word	0x00011329
			tx_notify(conn);
   112e8:	4620      	mov	r0, r4
   112ea:	f00a fce8 	bl	1bcbe <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   112ee:	78a3      	ldrb	r3, [r4, #2]
   112f0:	2b01      	cmp	r3, #1
   112f2:	d103      	bne.n	112fc <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   112f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   112f8:	f008 f992 	bl	19620 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   112fc:	3404      	adds	r4, #4
   112fe:	e8d4 3fef 	ldaex	r3, [r4]
   11302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11306:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1130a:	2a00      	cmp	r2, #0
   1130c:	d1f7      	bne.n	112fe <bt_conn_set_state+0x122>
}
   1130e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11312:	2100      	movs	r1, #0
   11314:	4827      	ldr	r0, [pc, #156]	; (113b4 <bt_conn_set_state+0x1d8>)
   11316:	f008 bf43 	b.w	1a1a0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1131a:	7a63      	ldrb	r3, [r4, #9]
   1131c:	2b00      	cmp	r3, #0
   1131e:	d0c6      	beq.n	112ae <bt_conn_set_state+0xd2>
				notify_connected(conn);
   11320:	4620      	mov	r0, r4
   11322:	f7ff fcb5 	bl	10c90 <notify_connected>
   11326:	e7c2      	b.n	112ae <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   11328:	4632      	mov	r2, r6
   1132a:	2157      	movs	r1, #87	; 0x57
   1132c:	4823      	ldr	r0, [pc, #140]	; (113bc <bt_conn_set_state+0x1e0>)
   1132e:	e763      	b.n	111f8 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11330:	78a3      	ldrb	r3, [r4, #2]
   11332:	2b01      	cmp	r3, #1
   11334:	d135      	bne.n	113a2 <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   11336:	4b22      	ldr	r3, [pc, #136]	; (113c0 <bt_conn_set_state+0x1e4>)
   11338:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1133c:	8a9d      	ldrh	r5, [r3, #20]
   1133e:	230a      	movs	r3, #10
   11340:	f240 30e7 	movw	r0, #999	; 0x3e7
   11344:	2100      	movs	r1, #0
   11346:	435d      	muls	r5, r3
   11348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1134c:	2300      	movs	r3, #0
   1134e:	fbc5 0106 	smlal	r0, r1, r5, r6
   11352:	f7f7 fbeb 	bl	8b2c <__aeabi_uldivmod>
   11356:	4602      	mov	r2, r0
   11358:	460b      	mov	r3, r1
   1135a:	e79e      	b.n	1129a <bt_conn_set_state+0xbe>
	return list->head;
   1135c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1135e:	b128      	cbz	r0, 1136c <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11360:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   11362:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11364:	4288      	cmp	r0, r1
	list->head = node;
   11366:	6163      	str	r3, [r4, #20]
	list->tail = node;
   11368:	bf08      	it	eq
   1136a:	61a3      	streq	r3, [r4, #24]
   1136c:	f382 8811 	msr	BASEPRI, r2
   11370:	f3bf 8f6f 	isb	sy
		if (!node) {
   11374:	b1a8      	cbz	r0, 113a2 <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   11376:	f04f 0220 	mov.w	r2, #32
   1137a:	f3ef 8311 	mrs	r3, BASEPRI
   1137e:	f382 8811 	msr	BASEPRI, r2
   11382:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   11386:	68c2      	ldr	r2, [r0, #12]
   11388:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1138a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   1138c:	f383 8811 	msr	BASEPRI, r3
   11390:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   11394:	f7ff fc72 	bl	10c7c <tx_free>
   11398:	e75f      	b.n	1125a <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   1139a:	4632      	mov	r2, r6
   1139c:	2157      	movs	r1, #87	; 0x57
   1139e:	4809      	ldr	r0, [pc, #36]	; (113c4 <bt_conn_set_state+0x1e8>)
   113a0:	e72a      	b.n	111f8 <bt_conn_set_state+0x1c>
}
   113a2:	bd70      	pop	{r4, r5, r6, pc}
   113a4:	0001e838 	.word	0x0001e838
   113a8:	000216f3 	.word	0x000216f3
   113ac:	000216fd 	.word	0x000216fd
   113b0:	200080c8 	.word	0x200080c8
   113b4:	20008434 	.word	0x20008434
   113b8:	2000a558 	.word	0x2000a558
   113bc:	00021713 	.word	0x00021713
   113c0:	20008000 	.word	0x20008000
   113c4:	0002172f 	.word	0x0002172f

000113c8 <bt_conn_lookup_addr_le>:
{
   113c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113cc:	4607      	mov	r7, r0
   113ce:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   113d0:	2500      	movs	r5, #0
   113d2:	4e0e      	ldr	r6, [pc, #56]	; (1140c <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   113d4:	4630      	mov	r0, r6
   113d6:	f00a fce5 	bl	1bda4 <bt_conn_ref>
		if (!conn) {
   113da:	4604      	mov	r4, r0
   113dc:	b120      	cbz	r0, 113e8 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   113de:	7883      	ldrb	r3, [r0, #2]
   113e0:	2b01      	cmp	r3, #1
   113e2:	d00a      	beq.n	113fa <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   113e4:	f7ff fece 	bl	11184 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   113e8:	3501      	adds	r5, #1
   113ea:	2d0a      	cmp	r5, #10
   113ec:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   113f0:	d1f0      	bne.n	113d4 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   113f2:	2400      	movs	r4, #0
}
   113f4:	4620      	mov	r0, r4
   113f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   113fa:	4642      	mov	r2, r8
   113fc:	4639      	mov	r1, r7
   113fe:	f00a fcb1 	bl	1bd64 <bt_conn_is_peer_addr_le>
   11402:	2800      	cmp	r0, #0
   11404:	d1f6      	bne.n	113f4 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   11406:	4620      	mov	r0, r4
   11408:	e7ec      	b.n	113e4 <bt_conn_lookup_addr_le+0x1c>
   1140a:	bf00      	nop
   1140c:	20008d00 	.word	0x20008d00

00011410 <bt_conn_exists_le>:
{
   11410:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   11412:	f7ff ffd9 	bl	113c8 <bt_conn_lookup_addr_le>
	if (conn) {
   11416:	4604      	mov	r4, r0
   11418:	b170      	cbz	r0, 11438 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   1141a:	7a83      	ldrb	r3, [r0, #10]
   1141c:	2157      	movs	r1, #87	; 0x57
   1141e:	2b08      	cmp	r3, #8
   11420:	bf96      	itet	ls
   11422:	4a06      	ldrls	r2, [pc, #24]	; (1143c <bt_conn_exists_le+0x2c>)
   11424:	4a06      	ldrhi	r2, [pc, #24]	; (11440 <bt_conn_exists_le+0x30>)
   11426:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1142a:	4806      	ldr	r0, [pc, #24]	; (11444 <bt_conn_exists_le+0x34>)
   1142c:	f008 fffb 	bl	1a426 <printk>
		bt_conn_unref(conn);
   11430:	4620      	mov	r0, r4
   11432:	f7ff fea7 	bl	11184 <bt_conn_unref>
		return true;
   11436:	2001      	movs	r0, #1
}
   11438:	bd10      	pop	{r4, pc}
   1143a:	bf00      	nop
   1143c:	0001e838 	.word	0x0001e838
   11440:	000216f3 	.word	0x000216f3
   11444:	00021750 	.word	0x00021750

00011448 <bt_conn_lookup_state_le>:
{
   11448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1144c:	4606      	mov	r6, r0
   1144e:	460f      	mov	r7, r1
   11450:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11452:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11454:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   11458:	f8df a048 	ldr.w	sl, [pc, #72]	; 114a4 <bt_conn_lookup_state_le+0x5c>
   1145c:	fb09 a005 	mla	r0, r9, r5, sl
   11460:	f00a fca0 	bl	1bda4 <bt_conn_ref>
		if (!conn) {
   11464:	4604      	mov	r4, r0
   11466:	b120      	cbz	r0, 11472 <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   11468:	7883      	ldrb	r3, [r0, #2]
   1146a:	2b01      	cmp	r3, #1
   1146c:	d006      	beq.n	1147c <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   1146e:	f00a fc99 	bl	1bda4 <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11472:	3501      	adds	r5, #1
   11474:	2d0a      	cmp	r5, #10
   11476:	d1f1      	bne.n	1145c <bt_conn_lookup_state_le+0x14>
	return NULL;
   11478:	2400      	movs	r4, #0
   1147a:	e00f      	b.n	1149c <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1147c:	b147      	cbz	r7, 11490 <bt_conn_lookup_state_le+0x48>
   1147e:	463a      	mov	r2, r7
   11480:	4631      	mov	r1, r6
   11482:	f00a fc6f 	bl	1bd64 <bt_conn_is_peer_addr_le>
   11486:	b918      	cbnz	r0, 11490 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   11488:	4620      	mov	r0, r4
   1148a:	f7ff fe7b 	bl	11184 <bt_conn_unref>
			continue;
   1148e:	e7f0      	b.n	11472 <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   11490:	7aa3      	ldrb	r3, [r4, #10]
   11492:	4543      	cmp	r3, r8
   11494:	d1f8      	bne.n	11488 <bt_conn_lookup_state_le+0x40>
   11496:	7a23      	ldrb	r3, [r4, #8]
   11498:	42b3      	cmp	r3, r6
   1149a:	d1f5      	bne.n	11488 <bt_conn_lookup_state_le+0x40>
}
   1149c:	4620      	mov	r0, r4
   1149e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   114a2:	bf00      	nop
   114a4:	20008d00 	.word	0x20008d00

000114a8 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   114a8:	b510      	push	{r4, lr}
	info->type = conn->type;
   114aa:	7882      	ldrb	r2, [r0, #2]
   114ac:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   114ae:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   114b0:	2a01      	cmp	r2, #1
	info->role = conn->role;
   114b2:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   114b4:	7a03      	ldrb	r3, [r0, #8]
   114b6:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   114b8:	d11c      	bne.n	114f4 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   114ba:	f100 0288 	add.w	r2, r0, #136	; 0x88
   114be:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   114c0:	4a0e      	ldr	r2, [pc, #56]	; (114fc <bt_conn_get_info+0x54>)
   114c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   114c6:	4413      	add	r3, r2
   114c8:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   114ca:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   114ce:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   114d2:	b964      	cbnz	r4, 114ee <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   114d4:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   114d8:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   114dc:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   114de:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   114e2:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   114e4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   114e8:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   114ea:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   114ec:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   114ee:	e9c1 2303 	strd	r2, r3, [r1, #12]
   114f2:	e7f1      	b.n	114d8 <bt_conn_get_info+0x30>
	return -EINVAL;
   114f4:	f06f 0015 	mvn.w	r0, #21
   114f8:	e7f8      	b.n	114ec <bt_conn_get_info+0x44>
   114fa:	bf00      	nop
   114fc:	20008000 	.word	0x20008000

00011500 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   11500:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11504:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11506:	4844      	ldr	r0, [pc, #272]	; (11618 <bt_conn_le_create+0x118>)
   11508:	f00a fbd6 	bl	1bcb8 <atomic_get>
   1150c:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1150e:	0781      	lsls	r1, r0, #30
{
   11510:	4615      	mov	r5, r2
   11512:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11514:	d576      	bpl.n	11604 <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   11516:	4610      	mov	r0, r2
   11518:	f00a fb2c 	bl	1bb74 <bt_le_conn_params_valid>
   1151c:	b928      	cbnz	r0, 1152a <bt_conn_le_create+0x2a>
		return -EINVAL;
   1151e:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   11522:	4628      	mov	r0, r5
   11524:	b002      	add	sp, #8
   11526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1152a:	483b      	ldr	r0, [pc, #236]	; (11618 <bt_conn_le_create+0x118>)
   1152c:	f00a fbc4 	bl	1bcb8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   11530:	0642      	lsls	r2, r0, #25
   11532:	d4f4      	bmi.n	1151e <bt_conn_le_create+0x1e>
   11534:	4838      	ldr	r0, [pc, #224]	; (11618 <bt_conn_le_create+0x118>)
   11536:	f00a fbbf 	bl	1bcb8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1153a:	0503      	lsls	r3, r0, #20
   1153c:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   11540:	d463      	bmi.n	1160a <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   11542:	f7fd ff43 	bl	f3cc <bt_le_scan_random_addr_check>
   11546:	2800      	cmp	r0, #0
   11548:	d0e9      	beq.n	1151e <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   1154a:	4621      	mov	r1, r4
   1154c:	4640      	mov	r0, r8
   1154e:	f7ff ff5f 	bl	11410 <bt_conn_exists_le>
   11552:	2800      	cmp	r0, #0
   11554:	d1e3      	bne.n	1151e <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   11556:	7823      	ldrb	r3, [r4, #0]
   11558:	3b02      	subs	r3, #2
   1155a:	2b01      	cmp	r3, #1
   1155c:	d847      	bhi.n	115ee <bt_conn_le_create+0xee>
   1155e:	2207      	movs	r2, #7
   11560:	4621      	mov	r1, r4
   11562:	4668      	mov	r0, sp
   11564:	f00a f9a3 	bl	1b8ae <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   11568:	f89d 3000 	ldrb.w	r3, [sp]
   1156c:	3b02      	subs	r3, #2
   1156e:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   11572:	4669      	mov	r1, sp
   11574:	2000      	movs	r0, #0
   11576:	f7ff fdd9 	bl	1112c <bt_conn_add_le>
	if (!conn) {
   1157a:	4604      	mov	r4, r0
   1157c:	2800      	cmp	r0, #0
   1157e:	d047      	beq.n	11610 <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   11580:	882b      	ldrh	r3, [r5, #0]
   11582:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11586:	886b      	ldrh	r3, [r5, #2]
   11588:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   1158c:	88ab      	ldrh	r3, [r5, #4]
   1158e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11592:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   11594:	4d21      	ldr	r5, [pc, #132]	; (1161c <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   11596:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   1159a:	f105 0c08 	add.w	ip, r5, #8
   1159e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   115a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   115a6:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   115a8:	2b00      	cmp	r3, #0
   115aa:	bf08      	it	eq
   115ac:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   115b0:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   115b2:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   115b4:	b903      	cbnz	r3, 115b8 <bt_conn_le_create+0xb8>
   115b6:	89ab      	ldrh	r3, [r5, #12]
   115b8:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   115ba:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   115bc:	b903      	cbnz	r3, 115c0 <bt_conn_le_create+0xc0>
   115be:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   115c0:	2106      	movs	r1, #6
   115c2:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   115c4:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   115c6:	f7ff fe09 	bl	111dc <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   115ca:	4620      	mov	r0, r4
   115cc:	f00a fab5 	bl	1bb3a <bt_le_create_conn>
	if (err) {
   115d0:	4605      	mov	r5, r0
   115d2:	b1a8      	cbz	r0, 11600 <bt_conn_le_create+0x100>
		conn->err = 0;
   115d4:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   115d6:	4620      	mov	r0, r4
   115d8:	4631      	mov	r1, r6
		conn->err = 0;
   115da:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   115dc:	f7ff fdfe 	bl	111dc <bt_conn_set_state>
		bt_conn_unref(conn);
   115e0:	4620      	mov	r0, r4
   115e2:	f7ff fdcf 	bl	11184 <bt_conn_unref>
		bt_le_scan_update(false);
   115e6:	4630      	mov	r0, r6
   115e8:	f7fd ff7c 	bl	f4e4 <bt_le_scan_update>
		return err;
   115ec:	e799      	b.n	11522 <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   115ee:	4621      	mov	r1, r4
   115f0:	f00a faa1 	bl	1bb36 <bt_lookup_id_addr>
   115f4:	2207      	movs	r2, #7
   115f6:	4601      	mov	r1, r0
   115f8:	4668      	mov	r0, sp
   115fa:	f00a f958 	bl	1b8ae <memcpy>
}
   115fe:	e7b8      	b.n	11572 <bt_conn_le_create+0x72>
	*ret_conn = conn;
   11600:	603c      	str	r4, [r7, #0]
	return 0;
   11602:	e78e      	b.n	11522 <bt_conn_le_create+0x22>
		return -EAGAIN;
   11604:	f06f 050a 	mvn.w	r5, #10
   11608:	e78b      	b.n	11522 <bt_conn_le_create+0x22>
		return -EALREADY;
   1160a:	f06f 0544 	mvn.w	r5, #68	; 0x44
   1160e:	e788      	b.n	11522 <bt_conn_le_create+0x22>
		return -ENOMEM;
   11610:	f06f 050b 	mvn.w	r5, #11
   11614:	e785      	b.n	11522 <bt_conn_le_create+0x22>
   11616:	bf00      	nop
   11618:	20008094 	.word	0x20008094
   1161c:	20008000 	.word	0x20008000

00011620 <send_conn_le_param_update>:
{
   11620:	b538      	push	{r3, r4, r5, lr}
   11622:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11624:	4608      	mov	r0, r1
{
   11626:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11628:	f00a faa4 	bl	1bb74 <bt_le_conn_params_valid>
   1162c:	b308      	cbz	r0, 11672 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1162e:	4b12      	ldr	r3, [pc, #72]	; (11678 <send_conn_le_param_update+0x58>)
   11630:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11634:	0799      	lsls	r1, r3, #30
   11636:	d407      	bmi.n	11648 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11638:	78e3      	ldrb	r3, [r4, #3]
   1163a:	b173      	cbz	r3, 1165a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1163c:	4629      	mov	r1, r5
   1163e:	4620      	mov	r0, r4
}
   11640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11644:	f000 bb14 	b.w	11c70 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11648:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   1164c:	079a      	lsls	r2, r3, #30
   1164e:	d5f3      	bpl.n	11638 <send_conn_le_param_update+0x18>
   11650:	1d20      	adds	r0, r4, #4
   11652:	f00a fb31 	bl	1bcb8 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11656:	0543      	lsls	r3, r0, #21
   11658:	d4ee      	bmi.n	11638 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1165a:	4629      	mov	r1, r5
   1165c:	4620      	mov	r0, r4
   1165e:	f00a fbdc 	bl	1be1a <bt_conn_le_conn_update>
		if (rc == 0) {
   11662:	b928      	cbnz	r0, 11670 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   11664:	88ab      	ldrh	r3, [r5, #4]
   11666:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1166a:	88eb      	ldrh	r3, [r5, #6]
   1166c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11670:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11672:	f06f 0015 	mvn.w	r0, #21
   11676:	e7fb      	b.n	11670 <send_conn_le_param_update+0x50>
   11678:	20008000 	.word	0x20008000

0001167c <deferred_work>:
{
   1167c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1167e:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   11682:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   11684:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11688:	b99b      	cbnz	r3, 116b2 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   1168a:	4630      	mov	r0, r6
   1168c:	f00a fc25 	bl	1beda <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11690:	4b26      	ldr	r3, [pc, #152]	; (1172c <deferred_work+0xb0>)
   11692:	681d      	ldr	r5, [r3, #0]
   11694:	b92d      	cbnz	r5, 116a2 <deferred_work+0x26>
		bt_conn_unref(conn);
   11696:	4630      	mov	r0, r6
}
   11698:	b002      	add	sp, #8
   1169a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   1169e:	f7ff bd71 	b.w	11184 <bt_conn_unref>
		if (cb->disconnected) {
   116a2:	686b      	ldr	r3, [r5, #4]
   116a4:	b11b      	cbz	r3, 116ae <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   116a6:	4630      	mov	r0, r6
   116a8:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   116ac:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   116ae:	692d      	ldr	r5, [r5, #16]
   116b0:	e7f0      	b.n	11694 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   116b2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   116b6:	2b01      	cmp	r3, #1
   116b8:	d12f      	bne.n	1171a <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   116ba:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   116be:	b923      	cbnz	r3, 116ca <deferred_work+0x4e>
}
   116c0:	b002      	add	sp, #8
   116c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   116c6:	f7fd bee9 	b.w	f49c <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   116ca:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   116ce:	e8d5 3fef 	ldaex	r3, [r5]
   116d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   116d6:	e8c5 2fe1 	stlex	r1, r2, [r5]
   116da:	2900      	cmp	r1, #0
   116dc:	d1f7      	bne.n	116ce <deferred_work+0x52>
   116de:	059b      	lsls	r3, r3, #22
   116e0:	d51d      	bpl.n	1171e <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   116e2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   116e6:	f8ad 3000 	strh.w	r3, [sp]
   116ea:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   116ee:	f8ad 3002 	strh.w	r3, [sp, #2]
   116f2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   116f6:	f8ad 3004 	strh.w	r3, [sp, #4]
   116fa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   116fe:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   11702:	4669      	mov	r1, sp
   11704:	4630      	mov	r0, r6
   11706:	f7ff ff8b 	bl	11620 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1170a:	e8d5 3fef 	ldaex	r3, [r5]
   1170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11712:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11716:	2a00      	cmp	r2, #0
   11718:	d1f7      	bne.n	1170a <deferred_work+0x8e>
}
   1171a:	b002      	add	sp, #8
   1171c:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   1171e:	466b      	mov	r3, sp
   11720:	4a03      	ldr	r2, [pc, #12]	; (11730 <deferred_work+0xb4>)
   11722:	6810      	ldr	r0, [r2, #0]
   11724:	6851      	ldr	r1, [r2, #4]
   11726:	c303      	stmia	r3!, {r0, r1}
   11728:	e7eb      	b.n	11702 <deferred_work+0x86>
   1172a:	bf00      	nop
   1172c:	2000ab40 	.word	0x2000ab40
   11730:	0001e388 	.word	0x0001e388

00011734 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11736:	4604      	mov	r4, r0
   11738:	460d      	mov	r5, r1
   1173a:	4617      	mov	r7, r2
   1173c:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   1173e:	f00c fa97 	bl	1dc70 <k_is_in_isr>
   11742:	b150      	cbz	r0, 1175a <bt_conn_create_pdu_timeout+0x26>
   11744:	490f      	ldr	r1, [pc, #60]	; (11784 <bt_conn_create_pdu_timeout+0x50>)
   11746:	4810      	ldr	r0, [pc, #64]	; (11788 <bt_conn_create_pdu_timeout+0x54>)
   11748:	f640 12ee 	movw	r2, #2542	; 0x9ee
   1174c:	f008 fe6b 	bl	1a426 <printk>
   11750:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11754:	480b      	ldr	r0, [pc, #44]	; (11784 <bt_conn_create_pdu_timeout+0x50>)
   11756:	f009 f90c 	bl	1a972 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1175a:	480c      	ldr	r0, [pc, #48]	; (1178c <bt_conn_create_pdu_timeout+0x58>)
   1175c:	463a      	mov	r2, r7
   1175e:	2c00      	cmp	r4, #0
   11760:	bf18      	it	ne
   11762:	4620      	movne	r0, r4
   11764:	4633      	mov	r3, r6
   11766:	f00b fbb2 	bl	1cece <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   1176a:	4604      	mov	r4, r0
   1176c:	b928      	cbnz	r0, 1177a <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   1176e:	2157      	movs	r1, #87	; 0x57
   11770:	4807      	ldr	r0, [pc, #28]	; (11790 <bt_conn_create_pdu_timeout+0x5c>)
   11772:	f008 fe58 	bl	1a426 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11776:	4620      	mov	r0, r4
   11778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1177a:	1d69      	adds	r1, r5, #5
   1177c:	3008      	adds	r0, #8
   1177e:	f003 fd8d 	bl	1529c <net_buf_simple_reserve>
	return buf;
   11782:	e7f8      	b.n	11776 <bt_conn_create_pdu_timeout+0x42>
   11784:	000215ad 	.word	0x000215ad
   11788:	0001f98f 	.word	0x0001f98f
   1178c:	200086e8 	.word	0x200086e8
   11790:	00021778 	.word	0x00021778

00011794 <bt_conn_create_frag_timeout>:
{
   11794:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11796:	4801      	ldr	r0, [pc, #4]	; (1179c <bt_conn_create_frag_timeout+0x8>)
   11798:	f7ff bfcc 	b.w	11734 <bt_conn_create_pdu_timeout>
   1179c:	20008740 	.word	0x20008740

000117a0 <create_frag>:
{
   117a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117a4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   117a6:	f04f 33ff 	mov.w	r3, #4294967295
   117aa:	f04f 32ff 	mov.w	r2, #4294967295
   117ae:	2000      	movs	r0, #0
{
   117b0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   117b2:	f7ff ffef 	bl	11794 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   117b6:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   117b8:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   117ba:	2b07      	cmp	r3, #7
   117bc:	f04f 0600 	mov.w	r6, #0
   117c0:	d005      	beq.n	117ce <create_frag+0x2e>
		net_buf_unref(frag);
   117c2:	f003 fdbd 	bl	15340 <net_buf_unref>
		return NULL;
   117c6:	4635      	mov	r5, r6
}
   117c8:	4628      	mov	r0, r5
   117ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   117ce:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   117d0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   117d4:	4e0c      	ldr	r6, [pc, #48]	; (11808 <create_frag+0x68>)
   117d6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   117d8:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   117dc:	f00b fb9d 	bl	1cf1a <net_buf_simple_tailroom>
   117e0:	4580      	cmp	r8, r0
   117e2:	d20c      	bcs.n	117fe <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   117e4:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   117e8:	f854 1f08 	ldr.w	r1, [r4, #8]!
   117ec:	4632      	mov	r2, r6
   117ee:	4638      	mov	r0, r7
   117f0:	f00b fb9b 	bl	1cf2a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   117f4:	4631      	mov	r1, r6
   117f6:	4620      	mov	r0, r4
   117f8:	f003 fe7e 	bl	154f8 <net_buf_simple_pull>
   117fc:	e7e4      	b.n	117c8 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   117fe:	4638      	mov	r0, r7
   11800:	f00b fb8b 	bl	1cf1a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11804:	b286      	uxth	r6, r0
   11806:	e7ef      	b.n	117e8 <create_frag+0x48>
   11808:	20008000 	.word	0x20008000

0001180c <bt_conn_process_tx>:
{
   1180c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1180e:	7a83      	ldrb	r3, [r0, #10]
{
   11810:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11812:	b973      	cbnz	r3, 11832 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11814:	1d03      	adds	r3, r0, #4
   11816:	e8d3 2fef 	ldaex	r2, [r3]
   1181a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1181e:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11822:	2d00      	cmp	r5, #0
   11824:	d1f7      	bne.n	11816 <bt_conn_process_tx+0xa>
   11826:	0653      	lsls	r3, r2, #25
   11828:	d503      	bpl.n	11832 <bt_conn_process_tx+0x26>
}
   1182a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1182e:	f7ff bb43 	b.w	10eb8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11832:	2200      	movs	r2, #0
   11834:	2300      	movs	r3, #0
   11836:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1183a:	f003 fcff 	bl	1523c <net_buf_get>
	BT_ASSERT(buf);
   1183e:	4605      	mov	r5, r0
   11840:	b958      	cbnz	r0, 1185a <bt_conn_process_tx+0x4e>
   11842:	f240 525f 	movw	r2, #1375	; 0x55f
   11846:	491e      	ldr	r1, [pc, #120]	; (118c0 <bt_conn_process_tx+0xb4>)
   11848:	481e      	ldr	r0, [pc, #120]	; (118c4 <bt_conn_process_tx+0xb8>)
   1184a:	f008 fdec 	bl	1a426 <printk>
   1184e:	4040      	eors	r0, r0
   11850:	f380 8811 	msr	BASEPRI, r0
   11854:	f04f 0003 	mov.w	r0, #3
   11858:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1185a:	4e1b      	ldr	r6, [pc, #108]	; (118c8 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   1185c:	89aa      	ldrh	r2, [r5, #12]
   1185e:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11862:	429a      	cmp	r2, r3
   11864:	d807      	bhi.n	11876 <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11866:	2300      	movs	r3, #0
   11868:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1186a:	4629      	mov	r1, r5
   1186c:	4620      	mov	r0, r4
   1186e:	f7ff fa25 	bl	10cbc <send_frag>
	if (!send_buf(conn, buf)) {
   11872:	b130      	cbz	r0, 11882 <bt_conn_process_tx+0x76>
}
   11874:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11876:	4629      	mov	r1, r5
   11878:	4620      	mov	r0, r4
   1187a:	f7ff ff91 	bl	117a0 <create_frag>
	if (!frag) {
   1187e:	4601      	mov	r1, r0
   11880:	b920      	cbnz	r0, 1188c <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   11882:	4628      	mov	r0, r5
}
   11884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11888:	f003 bd5a 	b.w	15340 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1188c:	2301      	movs	r3, #1
   1188e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11890:	4620      	mov	r0, r4
   11892:	f7ff fa13 	bl	10cbc <send_frag>
   11896:	2800      	cmp	r0, #0
   11898:	d0f3      	beq.n	11882 <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   1189a:	89aa      	ldrh	r2, [r5, #12]
   1189c:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   118a0:	429a      	cmp	r2, r3
   118a2:	d802      	bhi.n	118aa <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   118a4:	2300      	movs	r3, #0
   118a6:	2203      	movs	r2, #3
   118a8:	e7df      	b.n	1186a <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   118aa:	4629      	mov	r1, r5
   118ac:	4620      	mov	r0, r4
   118ae:	f7ff ff77 	bl	117a0 <create_frag>
		if (!frag) {
   118b2:	4601      	mov	r1, r0
   118b4:	2800      	cmp	r0, #0
   118b6:	d0e4      	beq.n	11882 <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   118b8:	2301      	movs	r3, #1
   118ba:	461a      	mov	r2, r3
   118bc:	e7e8      	b.n	11890 <bt_conn_process_tx+0x84>
   118be:	bf00      	nop
   118c0:	000215ad 	.word	0x000215ad
   118c4:	0001f98f 	.word	0x0001f98f
   118c8:	20008000 	.word	0x20008000

000118cc <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   118cc:	4b0b      	ldr	r3, [pc, #44]	; (118fc <bt_conn_index+0x30>)
{
   118ce:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   118d0:	1ac0      	subs	r0, r0, r3
   118d2:	4b0b      	ldr	r3, [pc, #44]	; (11900 <bt_conn_index+0x34>)
   118d4:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   118d6:	f5b0 6fd8 	cmp.w	r0, #1728	; 0x6c0
		index = conn - acl_conns;
   118da:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   118de:	d90a      	bls.n	118f6 <bt_conn_index+0x2a>
   118e0:	4908      	ldr	r1, [pc, #32]	; (11904 <bt_conn_index+0x38>)
   118e2:	4809      	ldr	r0, [pc, #36]	; (11908 <bt_conn_index+0x3c>)
   118e4:	f640 2295 	movw	r2, #2709	; 0xa95
   118e8:	f008 fd9d 	bl	1a426 <printk>
   118ec:	f640 2195 	movw	r1, #2709	; 0xa95
   118f0:	4804      	ldr	r0, [pc, #16]	; (11904 <bt_conn_index+0x38>)
   118f2:	f009 f83e 	bl	1a972 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   118f6:	b2e0      	uxtb	r0, r4
   118f8:	bd10      	pop	{r4, pc}
   118fa:	bf00      	nop
   118fc:	20008d00 	.word	0x20008d00
   11900:	aaaaaaab 	.word	0xaaaaaaab
   11904:	000215ad 	.word	0x000215ad
   11908:	0001f98f 	.word	0x0001f98f

0001190c <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1190c:	2809      	cmp	r0, #9
   1190e:	d806      	bhi.n	1191e <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11910:	4b04      	ldr	r3, [pc, #16]	; (11924 <bt_conn_lookup_index+0x18>)
   11912:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11916:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1191a:	f00a ba43 	b.w	1bda4 <bt_conn_ref>
}
   1191e:	2000      	movs	r0, #0
   11920:	4770      	bx	lr
   11922:	bf00      	nop
   11924:	20008d00 	.word	0x20008d00

00011928 <bt_conn_init>:

int bt_conn_init(void)
{
   11928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1192a:	4917      	ldr	r1, [pc, #92]	; (11988 <bt_conn_init+0x60>)
   1192c:	4817      	ldr	r0, [pc, #92]	; (1198c <bt_conn_init+0x64>)
   1192e:	f00c f937 	bl	1dba0 <k_queue_append>
   11932:	4917      	ldr	r1, [pc, #92]	; (11990 <bt_conn_init+0x68>)
   11934:	4815      	ldr	r0, [pc, #84]	; (1198c <bt_conn_init+0x64>)
   11936:	f00c f933 	bl	1dba0 <k_queue_append>
   1193a:	4916      	ldr	r1, [pc, #88]	; (11994 <bt_conn_init+0x6c>)
   1193c:	4813      	ldr	r0, [pc, #76]	; (1198c <bt_conn_init+0x64>)
   1193e:	f00c f92f 	bl	1dba0 <k_queue_append>
	}

	bt_att_init();
   11942:	f00a fe4a 	bl	1c5da <bt_att_init>

	err = bt_smp_init();
   11946:	f00b fabf 	bl	1cec8 <bt_smp_init>
	if (err) {
   1194a:	4605      	mov	r5, r0
   1194c:	b9d0      	cbnz	r0, 11984 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   1194e:	f00a fb2d 	bl	1bfac <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11952:	462e      	mov	r6, r5
   11954:	4f10      	ldr	r7, [pc, #64]	; (11998 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11956:	4638      	mov	r0, r7
   11958:	f00a fa24 	bl	1bda4 <bt_conn_ref>

			if (!conn) {
   1195c:	4604      	mov	r4, r0
   1195e:	b160      	cbz	r0, 1197a <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11960:	3004      	adds	r0, #4
   11962:	f00a f9a9 	bl	1bcb8 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11966:	07c3      	lsls	r3, r0, #31
   11968:	d504      	bpl.n	11974 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1196a:	2102      	movs	r1, #2
   1196c:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   1196e:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11970:	f7ff fc34 	bl	111dc <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11974:	4620      	mov	r0, r4
   11976:	f7ff fc05 	bl	11184 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1197a:	3601      	adds	r6, #1
   1197c:	2e0a      	cmp	r6, #10
   1197e:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   11982:	d1e8      	bne.n	11956 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11984:	4628      	mov	r0, r5
   11986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11988:	2000ab44 	.word	0x2000ab44
   1198c:	200086a0 	.word	0x200086a0
   11990:	2000ab54 	.word	0x2000ab54
   11994:	2000ab64 	.word	0x2000ab64
   11998:	20008d00 	.word	0x20008d00

0001199c <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1199c:	b570      	push	{r4, r5, r6, lr}
   1199e:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   119a0:	2400      	movs	r4, #0
   119a2:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   119a4:	4b09      	ldr	r3, [pc, #36]	; (119cc <l2cap_accept+0x30>)
   119a6:	fb06 f504 	mul.w	r5, r6, r4
   119aa:	58e8      	ldr	r0, [r5, r3]
   119ac:	b148      	cbz	r0, 119c2 <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   119ae:	3401      	adds	r4, #1
   119b0:	2c0a      	cmp	r4, #10
   119b2:	d1f8      	bne.n	119a6 <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   119b4:	4806      	ldr	r0, [pc, #24]	; (119d0 <l2cap_accept+0x34>)
   119b6:	2145      	movs	r1, #69	; 0x45
   119b8:	f008 fd35 	bl	1a426 <printk>
   119bc:	f06f 000b 	mvn.w	r0, #11
   119c0:	e003      	b.n	119ca <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   119c2:	4a04      	ldr	r2, [pc, #16]	; (119d4 <l2cap_accept+0x38>)
   119c4:	442b      	add	r3, r5
   119c6:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   119c8:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   119ca:	bd70      	pop	{r4, r5, r6, pc}
   119cc:	20009480 	.word	0x20009480
   119d0:	00021810 	.word	0x00021810
   119d4:	0001e87c 	.word	0x0001e87c

000119d8 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   119d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119da:	4605      	mov	r5, r0
   119dc:	460f      	mov	r7, r1
   119de:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   119e0:	2300      	movs	r3, #0
   119e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   119e6:	2104      	movs	r1, #4
   119e8:	2000      	movs	r0, #0
   119ea:	f7ff fea3 	bl	11734 <bt_conn_create_pdu_timeout>
	if (!buf) {
   119ee:	4604      	mov	r4, r0
   119f0:	b930      	cbnz	r0, 11a00 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   119f2:	462a      	mov	r2, r5
   119f4:	2145      	movs	r1, #69	; 0x45
   119f6:	4806      	ldr	r0, [pc, #24]	; (11a10 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   119f8:	f008 fd15 	bl	1a426 <printk>
}
   119fc:	4620      	mov	r0, r4
   119fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   11a00:	2104      	movs	r1, #4
   11a02:	3008      	adds	r0, #8
   11a04:	f003 fdb2 	bl	1556c <net_buf_simple_add>
	hdr->code = code;
   11a08:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   11a0a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   11a0c:	8046      	strh	r6, [r0, #2]
	return buf;
   11a0e:	e7f5      	b.n	119fc <l2cap_create_le_sig_pdu.constprop.0+0x24>
   11a10:	0002183c 	.word	0x0002183c

00011a14 <l2cap_rtx_timeout>:
{
   11a14:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11a16:	4604      	mov	r4, r0
   11a18:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   11a1c:	2145      	movs	r1, #69	; 0x45
   11a1e:	4622      	mov	r2, r4
   11a20:	4805      	ldr	r0, [pc, #20]	; (11a38 <l2cap_rtx_timeout+0x24>)
   11a22:	f008 fd00 	bl	1a426 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11a26:	4628      	mov	r0, r5
   11a28:	4621      	mov	r1, r4
   11a2a:	f00a fa20 	bl	1be6e <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   11a2e:	4620      	mov	r0, r4
}
   11a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   11a34:	f00a ba3c 	b.w	1beb0 <bt_l2cap_chan_del>
   11a38:	00021869 	.word	0x00021869

00011a3c <bt_l2cap_connected>:
{
   11a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11a40:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11a42:	4e2d      	ldr	r6, [pc, #180]	; (11af8 <bt_l2cap_connected+0xbc>)
   11a44:	4f2d      	ldr	r7, [pc, #180]	; (11afc <bt_l2cap_connected+0xc0>)
   11a46:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11b00 <bt_l2cap_connected+0xc4>
   11a4a:	42be      	cmp	r6, r7
   11a4c:	d90a      	bls.n	11a64 <bt_l2cap_connected+0x28>
   11a4e:	4641      	mov	r1, r8
   11a50:	482c      	ldr	r0, [pc, #176]	; (11b04 <bt_l2cap_connected+0xc8>)
   11a52:	f240 1267 	movw	r2, #359	; 0x167
   11a56:	f008 fce6 	bl	1a426 <printk>
   11a5a:	f240 1167 	movw	r1, #359	; 0x167
   11a5e:	4640      	mov	r0, r8
   11a60:	f008 ff87 	bl	1a972 <assert_post_action>
   11a64:	42be      	cmp	r6, r7
   11a66:	d302      	bcc.n	11a6e <bt_l2cap_connected+0x32>
}
   11a68:	b003      	add	sp, #12
   11a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   11a6e:	4628      	mov	r0, r5
   11a70:	6873      	ldr	r3, [r6, #4]
   11a72:	a901      	add	r1, sp, #4
   11a74:	4798      	blx	r3
   11a76:	2800      	cmp	r0, #0
   11a78:	db38      	blt.n	11aec <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   11a7a:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   11a7c:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11a7e:	2230      	movs	r2, #48	; 0x30
   11a80:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   11a84:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   11a88:	2100      	movs	r1, #0
   11a8a:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   11a8e:	f8d6 9008 	ldr.w	r9, [r6, #8]
   11a92:	f009 ff37 	bl	1b904 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11a96:	2200      	movs	r2, #0
   11a98:	4b1b      	ldr	r3, [pc, #108]	; (11b08 <bt_l2cap_connected+0xcc>)
   11a9a:	6163      	str	r3, [r4, #20]
   11a9c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11aa0:	e8d3 1fef 	ldaex	r1, [r3]
   11aa4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11aa8:	2800      	cmp	r0, #0
   11aaa:	d1f9      	bne.n	11aa0 <bt_l2cap_connected+0x64>
	parent->next = child;
   11aac:	60a2      	str	r2, [r4, #8]
	return list->tail;
   11aae:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   11ab0:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   11ab4:	b9e2      	cbnz	r2, 11af0 <bt_l2cap_connected+0xb4>
	list->head = node;
   11ab6:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   11aba:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   11abc:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   11abe:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   11ac0:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   11ac4:	681b      	ldr	r3, [r3, #0]
   11ac6:	b103      	cbz	r3, 11aca <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   11ac8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11aca:	9b01      	ldr	r3, [sp, #4]
   11acc:	3340      	adds	r3, #64	; 0x40
   11ace:	e8d3 2fef 	ldaex	r2, [r3]
   11ad2:	f042 0201 	orr.w	r2, r2, #1
   11ad6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11ada:	2900      	cmp	r1, #0
   11adc:	d1f7      	bne.n	11ace <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   11ade:	9801      	ldr	r0, [sp, #4]
   11ae0:	6843      	ldr	r3, [r0, #4]
   11ae2:	699b      	ldr	r3, [r3, #24]
   11ae4:	b113      	cbz	r3, 11aec <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   11ae6:	f100 0140 	add.w	r1, r0, #64	; 0x40
   11aea:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11aec:	360c      	adds	r6, #12
   11aee:	e7ac      	b.n	11a4a <bt_l2cap_connected+0xe>
	parent->next = child;
   11af0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11af2:	656b      	str	r3, [r5, #84]	; 0x54
}
   11af4:	e7e1      	b.n	11aba <bt_l2cap_connected+0x7e>
   11af6:	bf00      	nop
   11af8:	0001e164 	.word	0x0001e164
   11afc:	0001e188 	.word	0x0001e188
   11b00:	0002187e 	.word	0x0002187e
   11b04:	0001f98f 	.word	0x0001f98f
   11b08:	00011a15 	.word	0x00011a15

00011b0c <l2cap_recv>:
{
   11b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   11b0e:	898b      	ldrh	r3, [r1, #12]
{
   11b10:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11b12:	2b03      	cmp	r3, #3
{
   11b14:	460d      	mov	r5, r1
   11b16:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   11b18:	d804      	bhi.n	11b24 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   11b1a:	2145      	movs	r1, #69	; 0x45
   11b1c:	483a      	ldr	r0, [pc, #232]	; (11c08 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   11b1e:	f008 fc82 	bl	1a426 <printk>
		return 0;
   11b22:	e00d      	b.n	11b40 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   11b24:	2104      	movs	r1, #4
   11b26:	f105 0008 	add.w	r0, r5, #8
   11b2a:	f003 fd01 	bl	15530 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   11b2e:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   11b30:	8843      	ldrh	r3, [r0, #2]
   11b32:	4604      	mov	r4, r0
	if (buf->len != len) {
   11b34:	4293      	cmp	r3, r2
   11b36:	d006      	beq.n	11b46 <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   11b38:	2145      	movs	r1, #69	; 0x45
   11b3a:	4834      	ldr	r0, [pc, #208]	; (11c0c <l2cap_recv+0x100>)
   11b3c:	f008 fc73 	bl	1a426 <printk>
}
   11b40:	2000      	movs	r0, #0
   11b42:	b005      	add	sp, #20
   11b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   11b46:	7841      	ldrb	r1, [r0, #1]
   11b48:	b911      	cbnz	r1, 11b50 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   11b4a:	2145      	movs	r1, #69	; 0x45
   11b4c:	4830      	ldr	r0, [pc, #192]	; (11c10 <l2cap_recv+0x104>)
   11b4e:	e7e6      	b.n	11b1e <l2cap_recv+0x12>
	switch (hdr->code) {
   11b50:	7802      	ldrb	r2, [r0, #0]
   11b52:	2a12      	cmp	r2, #18
   11b54:	d00f      	beq.n	11b76 <l2cap_recv+0x6a>
   11b56:	2a13      	cmp	r2, #19
   11b58:	d008      	beq.n	11b6c <l2cap_recv+0x60>
   11b5a:	2a01      	cmp	r2, #1
   11b5c:	d0f0      	beq.n	11b40 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   11b5e:	2157      	movs	r1, #87	; 0x57
   11b60:	482c      	ldr	r0, [pc, #176]	; (11c14 <l2cap_recv+0x108>)
   11b62:	f008 fc60 	bl	1a426 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   11b66:	7861      	ldrb	r1, [r4, #1]
   11b68:	6830      	ldr	r0, [r6, #0]
   11b6a:	e00d      	b.n	11b88 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   11b6c:	2b01      	cmp	r3, #1
   11b6e:	d8e7      	bhi.n	11b40 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   11b70:	2145      	movs	r1, #69	; 0x45
   11b72:	4829      	ldr	r0, [pc, #164]	; (11c18 <l2cap_recv+0x10c>)
   11b74:	e7d3      	b.n	11b1e <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   11b76:	2b07      	cmp	r3, #7
   11b78:	d802      	bhi.n	11b80 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   11b7a:	2145      	movs	r1, #69	; 0x45
   11b7c:	4827      	ldr	r0, [pc, #156]	; (11c1c <l2cap_recv+0x110>)
   11b7e:	e7ce      	b.n	11b1e <l2cap_recv+0x12>
   11b80:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   11b82:	78e7      	ldrb	r7, [r4, #3]
   11b84:	b11f      	cbz	r7, 11b8e <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   11b86:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   11b88:	f00a f9d9 	bl	1bf3e <l2cap_send_reject.constprop.0>
		break;
   11b8c:	e7d8      	b.n	11b40 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   11b8e:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   11b90:	7850      	ldrb	r0, [r2, #1]
   11b92:	7813      	ldrb	r3, [r2, #0]
   11b94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11b98:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   11b9c:	78d0      	ldrb	r0, [r2, #3]
   11b9e:	7893      	ldrb	r3, [r2, #2]
   11ba0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11ba4:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   11ba8:	7950      	ldrb	r0, [r2, #5]
   11baa:	7913      	ldrb	r3, [r2, #4]
   11bac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11bb0:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   11bb4:	7993      	ldrb	r3, [r2, #6]
   11bb6:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11bb8:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   11bba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11bbe:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   11bc0:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11bc4:	f7ff ff08 	bl	119d8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11bc8:	4605      	mov	r5, r0
   11bca:	2800      	cmp	r0, #0
   11bcc:	d0b8      	beq.n	11b40 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   11bce:	a902      	add	r1, sp, #8
   11bd0:	4620      	mov	r0, r4
   11bd2:	f7ff f949 	bl	10e68 <le_param_req>
   11bd6:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   11bd8:	2102      	movs	r1, #2
   11bda:	f105 0008 	add.w	r0, r5, #8
   11bde:	f003 fcc5 	bl	1556c <net_buf_simple_add>
	if (accepted) {
   11be2:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   11be6:	b2db      	uxtb	r3, r3
   11be8:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   11bea:	462a      	mov	r2, r5
   11bec:	463b      	mov	r3, r7
   11bee:	2105      	movs	r1, #5
   11bf0:	4620      	mov	r0, r4
   11bf2:	9700      	str	r7, [sp, #0]
   11bf4:	f00a f98a 	bl	1bf0c <bt_l2cap_send_cb>
	if (accepted) {
   11bf8:	2e00      	cmp	r6, #0
   11bfa:	d0a1      	beq.n	11b40 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   11bfc:	4620      	mov	r0, r4
   11bfe:	a902      	add	r1, sp, #8
   11c00:	f00a f90b 	bl	1be1a <bt_conn_le_conn_update>
   11c04:	e79c      	b.n	11b40 <l2cap_recv+0x34>
   11c06:	bf00      	nop
   11c08:	000218af 	.word	0x000218af
   11c0c:	000218d2 	.word	0x000218d2
   11c10:	000218f8 	.word	0x000218f8
   11c14:	00021967 	.word	0x00021967
   11c18:	0002191e 	.word	0x0002191e
   11c1c:	0002193f 	.word	0x0002193f

00011c20 <bt_l2cap_recv>:
{
   11c20:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   11c22:	898b      	ldrh	r3, [r1, #12]
{
   11c24:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   11c26:	2b03      	cmp	r3, #3
{
   11c28:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   11c2a:	d808      	bhi.n	11c3e <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   11c2c:	2145      	movs	r1, #69	; 0x45
   11c2e:	480e      	ldr	r0, [pc, #56]	; (11c68 <bt_l2cap_recv+0x48>)
   11c30:	f008 fbf9 	bl	1a426 <printk>
	net_buf_unref(buf);
   11c34:	4620      	mov	r0, r4
}
   11c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   11c3a:	f003 bb81 	b.w	15340 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   11c3e:	2104      	movs	r1, #4
   11c40:	f104 0008 	add.w	r0, r4, #8
   11c44:	f003 fc74 	bl	15530 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   11c48:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   11c4a:	4628      	mov	r0, r5
   11c4c:	4611      	mov	r1, r2
   11c4e:	f00a f99d 	bl	1bf8c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11c52:	b920      	cbnz	r0, 11c5e <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   11c54:	2157      	movs	r1, #87	; 0x57
   11c56:	4805      	ldr	r0, [pc, #20]	; (11c6c <bt_l2cap_recv+0x4c>)
   11c58:	f008 fbe5 	bl	1a426 <printk>
		net_buf_unref(buf);
   11c5c:	e7ea      	b.n	11c34 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   11c5e:	6843      	ldr	r3, [r0, #4]
   11c60:	4621      	mov	r1, r4
   11c62:	691b      	ldr	r3, [r3, #16]
   11c64:	4798      	blx	r3
   11c66:	e7e5      	b.n	11c34 <bt_l2cap_recv+0x14>
   11c68:	0002198a 	.word	0x0002198a
   11c6c:	000219ac 	.word	0x000219ac

00011c70 <bt_l2cap_update_conn_param>:
{
   11c70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11c72:	460c      	mov	r4, r1
	ident++;
   11c74:	4914      	ldr	r1, [pc, #80]	; (11cc8 <bt_l2cap_update_conn_param+0x58>)
{
   11c76:	4605      	mov	r5, r0
	ident++;
   11c78:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11c7a:	2208      	movs	r2, #8
	ident++;
   11c7c:	3301      	adds	r3, #1
	if (!ident) {
   11c7e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   11c82:	bf08      	it	eq
   11c84:	2301      	moveq	r3, #1
   11c86:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11c88:	2012      	movs	r0, #18
   11c8a:	7809      	ldrb	r1, [r1, #0]
   11c8c:	f7ff fea4 	bl	119d8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11c90:	4606      	mov	r6, r0
   11c92:	b1b0      	cbz	r0, 11cc2 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   11c94:	2108      	movs	r1, #8
   11c96:	4408      	add	r0, r1
   11c98:	f003 fc68 	bl	1556c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   11c9c:	8822      	ldrh	r2, [r4, #0]
   11c9e:	2105      	movs	r1, #5
   11ca0:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   11ca2:	8862      	ldrh	r2, [r4, #2]
   11ca4:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   11ca6:	88a2      	ldrh	r2, [r4, #4]
   11ca8:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   11caa:	88e2      	ldrh	r2, [r4, #6]
   11cac:	2400      	movs	r4, #0
   11cae:	80c2      	strh	r2, [r0, #6]
   11cb0:	4623      	mov	r3, r4
   11cb2:	4632      	mov	r2, r6
   11cb4:	4628      	mov	r0, r5
   11cb6:	9400      	str	r4, [sp, #0]
   11cb8:	f00a f928 	bl	1bf0c <bt_l2cap_send_cb>
	return 0;
   11cbc:	4620      	mov	r0, r4
}
   11cbe:	b002      	add	sp, #8
   11cc0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   11cc2:	f06f 000b 	mvn.w	r0, #11
   11cc6:	e7fa      	b.n	11cbe <bt_l2cap_update_conn_param+0x4e>
   11cc8:	2000c7ab 	.word	0x2000c7ab

00011ccc <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   11ccc:	4b02      	ldr	r3, [pc, #8]	; (11cd8 <att_cfm_sent+0xc>)
   11cce:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11cd2:	f00a b97e 	b.w	1bfd2 <att_sent>
   11cd6:	bf00      	nop
   11cd8:	0001c3e1 	.word	0x0001c3e1

00011cdc <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   11cdc:	4b02      	ldr	r3, [pc, #8]	; (11ce8 <att_rsp_sent+0xc>)
   11cde:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11ce2:	f00a b976 	b.w	1bfd2 <att_sent>
   11ce6:	bf00      	nop
   11ce8:	0001c3cd 	.word	0x0001c3cd

00011cec <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   11cec:	4b02      	ldr	r3, [pc, #8]	; (11cf8 <att_req_sent+0xc>)
   11cee:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11cf2:	f00a b96e 	b.w	1bfd2 <att_sent>
   11cf6:	bf00      	nop
   11cf8:	00011ea9 	.word	0x00011ea9

00011cfc <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   11cfc:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   11cfe:	7a83      	ldrb	r3, [r0, #10]
   11d00:	2b07      	cmp	r3, #7
   11d02:	d005      	beq.n	11d10 <att_get+0x14>
		BT_WARN("Not connected");
   11d04:	2157      	movs	r1, #87	; 0x57
   11d06:	480e      	ldr	r0, [pc, #56]	; (11d40 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   11d08:	f008 fb8d 	bl	1a426 <printk>
		return NULL;
   11d0c:	2400      	movs	r4, #0
   11d0e:	e008      	b.n	11d22 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   11d10:	2104      	movs	r1, #4
   11d12:	f00a f93b 	bl	1bf8c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11d16:	4604      	mov	r4, r0
   11d18:	b928      	cbnz	r0, 11d26 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   11d1a:	2145      	movs	r1, #69	; 0x45
   11d1c:	4809      	ldr	r0, [pc, #36]	; (11d44 <att_get+0x48>)
   11d1e:	f008 fb82 	bl	1a426 <printk>
	}

	return att_chan->att;
}
   11d22:	4620      	mov	r0, r4
   11d24:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11d26:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   11d2a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   11d2e:	075b      	lsls	r3, r3, #29
   11d30:	d502      	bpl.n	11d38 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   11d32:	2157      	movs	r1, #87	; 0x57
   11d34:	4804      	ldr	r0, [pc, #16]	; (11d48 <att_get+0x4c>)
   11d36:	e7e7      	b.n	11d08 <att_get+0xc>
	return att_chan->att;
   11d38:	f850 4c08 	ldr.w	r4, [r0, #-8]
   11d3c:	e7f1      	b.n	11d22 <att_get+0x26>
   11d3e:	bf00      	nop
   11d40:	000219e6 	.word	0x000219e6
   11d44:	000219f9 	.word	0x000219f9
   11d48:	00021a19 	.word	0x00021a19

00011d4c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   11d4c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   11d4e:	3808      	subs	r0, #8
   11d50:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   11d52:	a901      	add	r1, sp, #4
   11d54:	4802      	ldr	r0, [pc, #8]	; (11d60 <bt_att_released+0x14>)
   11d56:	f005 fe8f 	bl	17a78 <k_mem_slab_free>
}
   11d5a:	b003      	add	sp, #12
   11d5c:	f85d fb04 	ldr.w	pc, [sp], #4
   11d60:	20008614 	.word	0x20008614

00011d64 <find_type_cb>:
{
   11d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11d68:	f642 0301 	movw	r3, #10241	; 0x2801
   11d6c:	2500      	movs	r5, #0
{
   11d6e:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   11d70:	f8d2 9000 	ldr.w	r9, [r2]
{
   11d74:	4607      	mov	r7, r0
   11d76:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11d78:	6800      	ldr	r0, [r0, #0]
   11d7a:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   11d7c:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   11d80:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11d82:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   11d86:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   11d8a:	f009 fe05 	bl	1b998 <bt_uuid_cmp>
   11d8e:	2800      	cmp	r0, #0
   11d90:	d060      	beq.n	11e54 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   11d92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11d96:	6838      	ldr	r0, [r7, #0]
   11d98:	a90b      	add	r1, sp, #44	; 0x2c
   11d9a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   11d9e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   11da2:	f009 fdf9 	bl	1b998 <bt_uuid_cmp>
   11da6:	b138      	cbz	r0, 11db8 <find_type_cb+0x54>
		if (data->group &&
   11da8:	68a3      	ldr	r3, [r4, #8]
   11daa:	b11b      	cbz	r3, 11db4 <find_type_cb+0x50>
   11dac:	885a      	ldrh	r2, [r3, #2]
   11dae:	42b2      	cmp	r2, r6
   11db0:	d200      	bcs.n	11db4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   11db2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   11db4:	2001      	movs	r0, #1
   11db6:	e009      	b.n	11dcc <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   11db8:	6861      	ldr	r1, [r4, #4]
   11dba:	4608      	mov	r0, r1
   11dbc:	f00a f901 	bl	1bfc2 <net_buf_frags_len>
   11dc0:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   11dc4:	1a1b      	subs	r3, r3, r0
   11dc6:	2b03      	cmp	r3, #3
   11dc8:	d803      	bhi.n	11dd2 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   11dca:	2000      	movs	r0, #0
}
   11dcc:	b011      	add	sp, #68	; 0x44
   11dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   11dd2:	4608      	mov	r0, r1
   11dd4:	f003 fb10 	bl	153f8 <net_buf_frag_last>
   11dd8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   11dda:	6860      	ldr	r0, [r4, #4]
   11ddc:	f00a f8f1 	bl	1bfc2 <net_buf_frags_len>
   11de0:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   11de4:	f105 0b08 	add.w	fp, r5, #8
   11de8:	ebaa 0a00 	sub.w	sl, sl, r0
   11dec:	4658      	mov	r0, fp
   11dee:	f00b f894 	bl	1cf1a <net_buf_simple_tailroom>
   11df2:	4582      	cmp	sl, r0
   11df4:	d231      	bcs.n	11e5a <find_type_cb+0xf6>
   11df6:	6860      	ldr	r0, [r4, #4]
   11df8:	f00a f8e3 	bl	1bfc2 <net_buf_frags_len>
   11dfc:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   11e00:	1a18      	subs	r0, r3, r0
	if (!len) {
   11e02:	b970      	cbnz	r0, 11e22 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   11e04:	6863      	ldr	r3, [r4, #4]
   11e06:	7998      	ldrb	r0, [r3, #6]
   11e08:	f003 f91a 	bl	15040 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   11e0c:	2200      	movs	r2, #0
   11e0e:	2300      	movs	r3, #0
   11e10:	f00b f85d 	bl	1cece <net_buf_alloc_fixed>
		if (!frag) {
   11e14:	4605      	mov	r5, r0
   11e16:	2800      	cmp	r0, #0
   11e18:	d0d7      	beq.n	11dca <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   11e1a:	4601      	mov	r1, r0
   11e1c:	6860      	ldr	r0, [r4, #4]
   11e1e:	f003 fb2b 	bl	15478 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   11e22:	2300      	movs	r3, #0
   11e24:	9300      	str	r3, [sp, #0]
   11e26:	4639      	mov	r1, r7
   11e28:	f8d7 9004 	ldr.w	r9, [r7, #4]
   11e2c:	2310      	movs	r3, #16
   11e2e:	4640      	mov	r0, r8
   11e30:	aa02      	add	r2, sp, #8
   11e32:	47c8      	blx	r9
	if (read < 0) {
   11e34:	1e07      	subs	r7, r0, #0
   11e36:	db0d      	blt.n	11e54 <find_type_cb+0xf0>
	if (read != data->value_len) {
   11e38:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   11e3a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   11e3c:	42ba      	cmp	r2, r7
   11e3e:	d02b      	beq.n	11e98 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   11e40:	4601      	mov	r1, r0
   11e42:	a80b      	add	r0, sp, #44	; 0x2c
   11e44:	f009 fdd6 	bl	1b9f4 <bt_uuid_create>
   11e48:	b958      	cbnz	r0, 11e62 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   11e4a:	2157      	movs	r1, #87	; 0x57
   11e4c:	7c22      	ldrb	r2, [r4, #16]
   11e4e:	4814      	ldr	r0, [pc, #80]	; (11ea0 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   11e50:	f008 fae9 	bl	1a426 <printk>
	data->group = NULL;
   11e54:	2300      	movs	r3, #0
   11e56:	60a3      	str	r3, [r4, #8]
   11e58:	e7ac      	b.n	11db4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   11e5a:	4658      	mov	r0, fp
   11e5c:	f00b f85d 	bl	1cf1a <net_buf_simple_tailroom>
   11e60:	e7cf      	b.n	11e02 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   11e62:	b2fa      	uxtb	r2, r7
   11e64:	a902      	add	r1, sp, #8
   11e66:	a806      	add	r0, sp, #24
   11e68:	f009 fdc4 	bl	1b9f4 <bt_uuid_create>
   11e6c:	b918      	cbnz	r0, 11e76 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   11e6e:	463a      	mov	r2, r7
   11e70:	2157      	movs	r1, #87	; 0x57
   11e72:	480c      	ldr	r0, [pc, #48]	; (11ea4 <find_type_cb+0x140>)
   11e74:	e7ec      	b.n	11e50 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   11e76:	a906      	add	r1, sp, #24
   11e78:	a80b      	add	r0, sp, #44	; 0x2c
   11e7a:	f009 fd8d 	bl	1b998 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   11e7e:	2800      	cmp	r0, #0
   11e80:	d1e8      	bne.n	11e54 <find_type_cb+0xf0>
	data->err = 0x00;
   11e82:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   11e84:	2104      	movs	r1, #4
   11e86:	7463      	strb	r3, [r4, #17]
   11e88:	f105 0008 	add.w	r0, r5, #8
   11e8c:	f003 fb6e 	bl	1556c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   11e90:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   11e92:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11e94:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   11e96:	e78d      	b.n	11db4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   11e98:	a902      	add	r1, sp, #8
   11e9a:	f009 fcf7 	bl	1b88c <memcmp>
   11e9e:	e7ee      	b.n	11e7e <find_type_cb+0x11a>
   11ea0:	00021a42 	.word	0x00021a42
   11ea4:	00021a66 	.word	0x00021a66

00011ea8 <chan_req_sent>:
	if (chan->req) {
   11ea8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   11eac:	b13b      	cbz	r3, 11ebe <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11eae:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   11eb2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   11eb6:	2300      	movs	r3, #0
   11eb8:	4801      	ldr	r0, [pc, #4]	; (11ec0 <chan_req_sent+0x18>)
   11eba:	f007 bb41 	b.w	19540 <k_delayed_work_submit_to_queue>
}
   11ebe:	4770      	bx	lr
   11ec0:	2000a558 	.word	0x2000a558

00011ec4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   11ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   11ec6:	2300      	movs	r3, #0
{
   11ec8:	4606      	mov	r6, r0
   11eca:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   11ecc:	2200      	movs	r2, #0
   11ece:	4669      	mov	r1, sp
   11ed0:	4823      	ldr	r0, [pc, #140]	; (11f60 <bt_att_accept+0x9c>)
   11ed2:	f005 fd77 	bl	179c4 <k_mem_slab_alloc>
   11ed6:	4604      	mov	r4, r0
   11ed8:	b148      	cbz	r0, 11eee <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   11eda:	4632      	mov	r2, r6
   11edc:	2145      	movs	r1, #69	; 0x45
   11ede:	4821      	ldr	r0, [pc, #132]	; (11f64 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   11ee0:	f008 faa1 	bl	1a426 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   11ee4:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   11ee8:	4620      	mov	r0, r4
   11eea:	b003      	add	sp, #12
   11eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   11eee:	4601      	mov	r1, r0
   11ef0:	2230      	movs	r2, #48	; 0x30
   11ef2:	9800      	ldr	r0, [sp, #0]
   11ef4:	f009 fd06 	bl	1b904 <memset>
	att->conn = conn;
   11ef8:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11efa:	2200      	movs	r2, #0
	list->head = NULL;
   11efc:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   11f00:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   11f04:	60ac      	str	r4, [r5, #8]
   11f06:	2300      	movs	r3, #0
   11f08:	4817      	ldr	r0, [pc, #92]	; (11f68 <bt_att_accept+0xa4>)
   11f0a:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   11f0c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11f0e:	f005 fd59 	bl	179c4 <k_mem_slab_alloc>
   11f12:	4604      	mov	r4, r0
   11f14:	b118      	cbz	r0, 11f1e <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   11f16:	2145      	movs	r1, #69	; 0x45
   11f18:	682a      	ldr	r2, [r5, #0]
   11f1a:	4814      	ldr	r0, [pc, #80]	; (11f6c <bt_att_accept+0xa8>)
   11f1c:	e7e0      	b.n	11ee0 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   11f1e:	4601      	mov	r1, r0
   11f20:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11f24:	9801      	ldr	r0, [sp, #4]
   11f26:	f009 fced 	bl	1b904 <memset>
	chan->chan.chan.ops = &ops;
   11f2a:	9801      	ldr	r0, [sp, #4]
   11f2c:	4b10      	ldr	r3, [pc, #64]	; (11f70 <bt_att_accept+0xac>)
   11f2e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   11f30:	30d0      	adds	r0, #208	; 0xd0
   11f32:	f00b fe28 	bl	1db86 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   11f36:	9801      	ldr	r0, [sp, #4]
   11f38:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   11f3c:	2203      	movs	r2, #3
   11f3e:	4611      	mov	r1, r2
   11f40:	f00b fe86 	bl	1dc50 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11f44:	9b01      	ldr	r3, [sp, #4]
   11f46:	33c8      	adds	r3, #200	; 0xc8
   11f48:	e8d3 2fef 	ldaex	r2, [r3]
   11f4c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   11f50:	2900      	cmp	r1, #0
   11f52:	d1f9      	bne.n	11f48 <bt_att_accept+0x84>
	chan->att = att;
   11f54:	9b01      	ldr	r3, [sp, #4]
   11f56:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   11f5a:	603b      	str	r3, [r7, #0]
	return 0;
   11f5c:	e7c4      	b.n	11ee8 <bt_att_accept+0x24>
   11f5e:	bf00      	nop
   11f60:	200085f8 	.word	0x200085f8
   11f64:	00021a8a 	.word	0x00021a8a
   11f68:	20008614 	.word	0x20008614
   11f6c:	00021ab4 	.word	0x00021ab4
   11f70:	20008444 	.word	0x20008444

00011f74 <read_group_cb>:
{
   11f74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11f78:	f04f 0800 	mov.w	r8, #0
   11f7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   11f80:	4605      	mov	r5, r0
   11f82:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11f84:	6800      	ldr	r0, [r0, #0]
   11f86:	a902      	add	r1, sp, #8
{
   11f88:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   11f8a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11f8c:	f88d 8008 	strb.w	r8, [sp, #8]
   11f90:	f8ad 300a 	strh.w	r3, [sp, #10]
   11f94:	f009 fd00 	bl	1b998 <bt_uuid_cmp>
   11f98:	b1a0      	cbz	r0, 11fc4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11f9a:	f642 0301 	movw	r3, #10241	; 0x2801
   11f9e:	6828      	ldr	r0, [r5, #0]
   11fa0:	a903      	add	r1, sp, #12
   11fa2:	f88d 800c 	strb.w	r8, [sp, #12]
   11fa6:	f8ad 300e 	strh.w	r3, [sp, #14]
   11faa:	f009 fcf5 	bl	1b998 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11fae:	b148      	cbz	r0, 11fc4 <read_group_cb+0x50>
		if (data->group &&
   11fb0:	6923      	ldr	r3, [r4, #16]
   11fb2:	b11b      	cbz	r3, 11fbc <read_group_cb+0x48>
   11fb4:	885a      	ldrh	r2, [r3, #2]
   11fb6:	42b2      	cmp	r2, r6
   11fb8:	d200      	bcs.n	11fbc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   11fba:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   11fbc:	2001      	movs	r0, #1
}
   11fbe:	b004      	add	sp, #16
   11fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11fc4:	6861      	ldr	r1, [r4, #4]
   11fc6:	6828      	ldr	r0, [r5, #0]
   11fc8:	f009 fce6 	bl	1b998 <bt_uuid_cmp>
   11fcc:	b110      	cbz	r0, 11fd4 <read_group_cb+0x60>
		data->group = NULL;
   11fce:	2300      	movs	r3, #0
   11fd0:	6123      	str	r3, [r4, #16]
   11fd2:	e7f3      	b.n	11fbc <read_group_cb+0x48>
	if (data->rsp->len &&
   11fd4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11fd6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   11fd8:	781a      	ldrb	r2, [r3, #0]
   11fda:	b13a      	cbz	r2, 11fec <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11fdc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   11fe0:	8981      	ldrh	r1, [r0, #12]
   11fe2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   11fe4:	4293      	cmp	r3, r2
   11fe6:	da01      	bge.n	11fec <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   11fe8:	2000      	movs	r0, #0
   11fea:	e7e8      	b.n	11fbe <read_group_cb+0x4a>
   11fec:	2104      	movs	r1, #4
   11fee:	3008      	adds	r0, #8
   11ff0:	f003 fabc 	bl	1556c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11ff4:	4b09      	ldr	r3, [pc, #36]	; (1201c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   11ff6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11ff8:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   11ffa:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11ffc:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11ffe:	68a2      	ldr	r2, [r4, #8]
   12000:	9300      	str	r3, [sp, #0]
   12002:	4638      	mov	r0, r7
   12004:	2300      	movs	r3, #0
   12006:	9401      	str	r4, [sp, #4]
   12008:	f00a f8d6 	bl	1c1b8 <att_chan_read>
	if (read < 0) {
   1200c:	2800      	cmp	r0, #0
   1200e:	dbeb      	blt.n	11fe8 <read_group_cb+0x74>
	if (!data->group) {
   12010:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   12012:	3800      	subs	r0, #0
   12014:	bf18      	it	ne
   12016:	2001      	movne	r0, #1
   12018:	e7d1      	b.n	11fbe <read_group_cb+0x4a>
   1201a:	bf00      	nop
   1201c:	0001c13d 	.word	0x0001c13d

00012020 <chan_send>:
{
   12020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12024:	688b      	ldr	r3, [r1, #8]
{
   12026:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12028:	781b      	ldrb	r3, [r3, #0]
{
   1202a:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1202c:	2bd2      	cmp	r3, #210	; 0xd2
{
   1202e:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12030:	d110      	bne.n	12054 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   12032:	6803      	ldr	r3, [r0, #0]
   12034:	6818      	ldr	r0, [r3, #0]
   12036:	f00a ff44 	bl	1cec2 <bt_smp_sign>
		if (err) {
   1203a:	4606      	mov	r6, r0
   1203c:	b150      	cbz	r0, 12054 <chan_send+0x34>
			BT_ERR("Error signing data");
   1203e:	2145      	movs	r1, #69	; 0x45
   12040:	4824      	ldr	r0, [pc, #144]	; (120d4 <chan_send+0xb4>)
   12042:	f008 f9f0 	bl	1a426 <printk>
		net_buf_unref(buf);
   12046:	4620      	mov	r0, r4
   12048:	f003 f97a 	bl	15340 <net_buf_unref>
}
   1204c:	4630      	mov	r0, r6
   1204e:	b003      	add	sp, #12
   12050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   12054:	f104 0008 	add.w	r0, r4, #8
   12058:	f00a ff5b 	bl	1cf12 <net_buf_simple_headroom>
	state->len = buf->len;
   1205c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   12060:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   12062:	f1b9 0f00 	cmp.w	r9, #0
   12066:	d10a      	bne.n	1207e <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   12068:	68a3      	ldr	r3, [r4, #8]
   1206a:	7818      	ldrb	r0, [r3, #0]
   1206c:	f009 ffc9 	bl	1c002 <att_op_get_type>
   12070:	1e43      	subs	r3, r0, #1
   12072:	b2db      	uxtb	r3, r3
   12074:	2b04      	cmp	r3, #4
   12076:	bf9c      	itt	ls
   12078:	4a17      	ldrls	r2, [pc, #92]	; (120d8 <chan_send+0xb8>)
   1207a:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1207e:	682b      	ldr	r3, [r5, #0]
   12080:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   12082:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12086:	681e      	ldr	r6, [r3, #0]
   12088:	f003 f99e 	bl	153c8 <net_buf_ref>
   1208c:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   12090:	4b12      	ldr	r3, [pc, #72]	; (120dc <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12092:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   12094:	4299      	cmp	r1, r3
   12096:	d019      	beq.n	120cc <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   12098:	4b11      	ldr	r3, [pc, #68]	; (120e0 <chan_send+0xc0>)
   1209a:	4299      	cmp	r1, r3
   1209c:	d018      	beq.n	120d0 <chan_send+0xb0>
		return att_sent;
   1209e:	f8df c044 	ldr.w	ip, [pc, #68]	; 120e4 <chan_send+0xc4>
   120a2:	4b11      	ldr	r3, [pc, #68]	; (120e8 <chan_send+0xc8>)
   120a4:	4811      	ldr	r0, [pc, #68]	; (120ec <chan_send+0xcc>)
   120a6:	4561      	cmp	r1, ip
   120a8:	bf18      	it	ne
   120aa:	4603      	movne	r3, r0
				&chan->chan.chan);
   120ac:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   120ae:	4630      	mov	r0, r6
   120b0:	2104      	movs	r1, #4
   120b2:	9500      	str	r5, [sp, #0]
   120b4:	f009 ff2a 	bl	1bf0c <bt_l2cap_send_cb>
	if (!err) {
   120b8:	4606      	mov	r6, r0
   120ba:	2800      	cmp	r0, #0
   120bc:	d0c3      	beq.n	12046 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   120be:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   120c0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   120c4:	fa10 f787 	uxtah	r7, r0, r7
   120c8:	60a7      	str	r7, [r4, #8]
}
   120ca:	e7bf      	b.n	1204c <chan_send+0x2c>
		return att_rsp_sent;
   120cc:	4b08      	ldr	r3, [pc, #32]	; (120f0 <chan_send+0xd0>)
   120ce:	e7ed      	b.n	120ac <chan_send+0x8c>
		return att_cfm_sent;
   120d0:	4b08      	ldr	r3, [pc, #32]	; (120f4 <chan_send+0xd4>)
   120d2:	e7eb      	b.n	120ac <chan_send+0x8c>
   120d4:	00021ade 	.word	0x00021ade
   120d8:	0001e89c 	.word	0x0001e89c
   120dc:	0001c3cd 	.word	0x0001c3cd
   120e0:	0001c3e1 	.word	0x0001c3e1
   120e4:	00011ea9 	.word	0x00011ea9
   120e8:	00011ced 	.word	0x00011ced
   120ec:	0001bfd3 	.word	0x0001bfd3
   120f0:	00011cdd 	.word	0x00011cdd
   120f4:	00011ccd 	.word	0x00011ccd

000120f8 <bt_att_chan_req_send>:
{
   120f8:	b570      	push	{r4, r5, r6, lr}
   120fa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   120fc:	4604      	mov	r4, r0
   120fe:	b950      	cbnz	r0, 12116 <bt_att_chan_req_send+0x1e>
   12100:	4924      	ldr	r1, [pc, #144]	; (12194 <bt_att_chan_req_send+0x9c>)
   12102:	4825      	ldr	r0, [pc, #148]	; (12198 <bt_att_chan_req_send+0xa0>)
   12104:	f240 224f 	movw	r2, #591	; 0x24f
   12108:	f008 f98d 	bl	1a426 <printk>
   1210c:	f240 214f 	movw	r1, #591	; 0x24f
   12110:	4820      	ldr	r0, [pc, #128]	; (12194 <bt_att_chan_req_send+0x9c>)
   12112:	f008 fc2e 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(req);
   12116:	b955      	cbnz	r5, 1212e <bt_att_chan_req_send+0x36>
   12118:	491e      	ldr	r1, [pc, #120]	; (12194 <bt_att_chan_req_send+0x9c>)
   1211a:	481f      	ldr	r0, [pc, #124]	; (12198 <bt_att_chan_req_send+0xa0>)
   1211c:	f44f 7214 	mov.w	r2, #592	; 0x250
   12120:	f008 f981 	bl	1a426 <printk>
   12124:	f44f 7114 	mov.w	r1, #592	; 0x250
   12128:	481a      	ldr	r0, [pc, #104]	; (12194 <bt_att_chan_req_send+0x9c>)
   1212a:	f008 fc22 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1212e:	686b      	ldr	r3, [r5, #4]
   12130:	b953      	cbnz	r3, 12148 <bt_att_chan_req_send+0x50>
   12132:	4918      	ldr	r1, [pc, #96]	; (12194 <bt_att_chan_req_send+0x9c>)
   12134:	4818      	ldr	r0, [pc, #96]	; (12198 <bt_att_chan_req_send+0xa0>)
   12136:	f240 2251 	movw	r2, #593	; 0x251
   1213a:	f008 f974 	bl	1a426 <printk>
   1213e:	f240 2151 	movw	r1, #593	; 0x251
   12142:	4814      	ldr	r0, [pc, #80]	; (12194 <bt_att_chan_req_send+0x9c>)
   12144:	f008 fc15 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   12148:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1214c:	b153      	cbz	r3, 12164 <bt_att_chan_req_send+0x6c>
   1214e:	4911      	ldr	r1, [pc, #68]	; (12194 <bt_att_chan_req_send+0x9c>)
   12150:	4811      	ldr	r0, [pc, #68]	; (12198 <bt_att_chan_req_send+0xa0>)
   12152:	f240 2252 	movw	r2, #594	; 0x252
   12156:	f008 f966 	bl	1a426 <printk>
   1215a:	f240 2152 	movw	r1, #594	; 0x252
   1215e:	480d      	ldr	r0, [pc, #52]	; (12194 <bt_att_chan_req_send+0x9c>)
   12160:	f008 fc07 	bl	1a972 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   12164:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   12168:	2200      	movs	r2, #0
   1216a:	2300      	movs	r3, #0
   1216c:	4630      	mov	r0, r6
   1216e:	f006 ffc1 	bl	190f4 <z_impl_k_sem_take>
   12172:	2800      	cmp	r0, #0
   12174:	db0a      	blt.n	1218c <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   12176:	4620      	mov	r0, r4
   12178:	4629      	mov	r1, r5
   1217a:	f00a f901 	bl	1c380 <chan_req_send>
	if (err < 0) {
   1217e:	1e04      	subs	r4, r0, #0
   12180:	da02      	bge.n	12188 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   12182:	4630      	mov	r0, r6
   12184:	f006 ff7a 	bl	1907c <z_impl_k_sem_give>
}
   12188:	4620      	mov	r0, r4
   1218a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1218c:	f06f 040a 	mvn.w	r4, #10
   12190:	e7fa      	b.n	12188 <bt_att_chan_req_send+0x90>
   12192:	bf00      	nop
   12194:	00021af6 	.word	0x00021af6
   12198:	0001f98f 	.word	0x0001f98f

0001219c <read_type_cb>:
{
   1219c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   121a0:	f8d2 8000 	ldr.w	r8, [r2]
{
   121a4:	4606      	mov	r6, r0
   121a6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   121a8:	6800      	ldr	r0, [r0, #0]
   121aa:	6851      	ldr	r1, [r2, #4]
{
   121ac:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   121ae:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   121b2:	f009 fbf1 	bl	1b998 <bt_uuid_cmp>
   121b6:	4607      	mov	r7, r0
   121b8:	2800      	cmp	r0, #0
   121ba:	d13e      	bne.n	1223a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   121bc:	4628      	mov	r0, r5
   121be:	2215      	movs	r2, #21
   121c0:	4631      	mov	r1, r6
   121c2:	f00a fd77 	bl	1ccb4 <bt_gatt_check_perm>
   121c6:	4605      	mov	r5, r0
   121c8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   121ca:	b148      	cbz	r0, 121e0 <read_type_cb+0x44>
		if (data->rsp->len) {
   121cc:	68e3      	ldr	r3, [r4, #12]
   121ce:	781b      	ldrb	r3, [r3, #0]
   121d0:	b923      	cbnz	r3, 121dc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   121d2:	2500      	movs	r5, #0
}
   121d4:	4628      	mov	r0, r5
   121d6:	b003      	add	sp, #12
   121d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   121dc:	7527      	strb	r7, [r4, #20]
   121de:	e7f8      	b.n	121d2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   121e0:	68a0      	ldr	r0, [r4, #8]
   121e2:	f003 f909 	bl	153f8 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   121e6:	2102      	movs	r1, #2
   121e8:	3008      	adds	r0, #8
   121ea:	f003 f9bf 	bl	1556c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   121ee:	4b14      	ldr	r3, [pc, #80]	; (12240 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   121f0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   121f2:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   121f4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   121f8:	68a2      	ldr	r2, [r4, #8]
   121fa:	9300      	str	r3, [sp, #0]
   121fc:	4640      	mov	r0, r8
   121fe:	462b      	mov	r3, r5
   12200:	9401      	str	r4, [sp, #4]
   12202:	f009 ffd9 	bl	1c1b8 <att_chan_read>
	if (read < 0) {
   12206:	2800      	cmp	r0, #0
   12208:	da07      	bge.n	1221a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1220a:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1220e:	bf32      	itee	cc
   12210:	200e      	movcc	r0, #14
		return -err;
   12212:	4240      	negcs	r0, r0
   12214:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   12216:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   12218:	e7dc      	b.n	121d4 <read_type_cb+0x38>
	if (!data->item) {
   1221a:	6923      	ldr	r3, [r4, #16]
   1221c:	2b00      	cmp	r3, #0
   1221e:	d0d8      	beq.n	121d2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12220:	68a0      	ldr	r0, [r4, #8]
   12222:	f009 fece 	bl	1bfc2 <net_buf_frags_len>
   12226:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1222a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1222c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1222e:	7818      	ldrb	r0, [r3, #0]
   12230:	4285      	cmp	r5, r0
   12232:	bf94      	ite	ls
   12234:	2500      	movls	r5, #0
   12236:	2501      	movhi	r5, #1
   12238:	e7cc      	b.n	121d4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1223a:	2501      	movs	r5, #1
   1223c:	e7ca      	b.n	121d4 <read_type_cb+0x38>
   1223e:	bf00      	nop
   12240:	0001bfdf 	.word	0x0001bfdf

00012244 <bt_att_connected>:
{
   12244:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   12246:	2104      	movs	r1, #4
{
   12248:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1224a:	6800      	ldr	r0, [r0, #0]
   1224c:	f009 fe8e 	bl	1bf6c <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   12250:	4605      	mov	r5, r0
   12252:	b950      	cbnz	r0, 1226a <bt_att_connected+0x26>
   12254:	4919      	ldr	r1, [pc, #100]	; (122bc <bt_att_connected+0x78>)
   12256:	481a      	ldr	r0, [pc, #104]	; (122c0 <bt_att_connected+0x7c>)
   12258:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   1225c:	f008 f8e3 	bl	1a426 <printk>
   12260:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   12264:	4815      	ldr	r0, [pc, #84]	; (122bc <bt_att_connected+0x78>)
   12266:	f008 fb84 	bl	1a972 <assert_post_action>
	struct bt_att *att = att_chan->att;
   1226a:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1226e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12270:	b91b      	cbnz	r3, 1227a <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   12272:	f105 000c 	add.w	r0, r5, #12
   12276:	f00b fc86 	bl	1db86 <z_impl_k_queue_init>
	parent->next = child;
   1227a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1227c:	f504 739a 	add.w	r3, r4, #308	; 0x134
   12280:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   12284:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   12286:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   12288:	b902      	cbnz	r2, 1228c <bt_att_connected+0x48>
	list->tail = node;
   1228a:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1228c:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   12290:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   12294:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   12296:	bf58      	it	pl
   12298:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1229a:	f04f 0230 	mov.w	r2, #48	; 0x30
   1229e:	bf5c      	itt	pl
   122a0:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   122a4:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   122a8:	2100      	movs	r1, #0
   122aa:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   122ae:	f009 fb29 	bl	1b904 <memset>
   122b2:	4b04      	ldr	r3, [pc, #16]	; (122c4 <bt_att_connected+0x80>)
   122b4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   122b8:	bd38      	pop	{r3, r4, r5, pc}
   122ba:	bf00      	nop
   122bc:	00021af6 	.word	0x00021af6
   122c0:	0001f98f 	.word	0x0001f98f
   122c4:	00012bd1 	.word	0x00012bd1

000122c8 <bt_att_chan_create_pdu>:
{
   122c8:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   122ca:	1c53      	adds	r3, r2, #1
   122cc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   122d0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   122d2:	4293      	cmp	r3, r2
   122d4:	d906      	bls.n	122e4 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   122d6:	2157      	movs	r1, #87	; 0x57
   122d8:	4813      	ldr	r0, [pc, #76]	; (12328 <bt_att_chan_create_pdu+0x60>)
   122da:	f008 f8a4 	bl	1a426 <printk>
		return NULL;
   122de:	2400      	movs	r4, #0
}
   122e0:	4620      	mov	r0, r4
   122e2:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   122e4:	4608      	mov	r0, r1
   122e6:	f009 fe8c 	bl	1c002 <att_op_get_type>
   122ea:	2802      	cmp	r0, #2
   122ec:	d001      	beq.n	122f2 <bt_att_chan_create_pdu+0x2a>
   122ee:	2804      	cmp	r0, #4
   122f0:	d10e      	bne.n	12310 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   122f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   122f6:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   122f8:	2100      	movs	r1, #0
   122fa:	4608      	mov	r0, r1
   122fc:	f009 fe03 	bl	1bf06 <bt_l2cap_create_pdu_timeout>
   12300:	4604      	mov	r4, r0
	if (!buf) {
   12302:	b950      	cbnz	r0, 1231a <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   12304:	462a      	mov	r2, r5
   12306:	2145      	movs	r1, #69	; 0x45
   12308:	4808      	ldr	r0, [pc, #32]	; (1232c <bt_att_chan_create_pdu+0x64>)
   1230a:	f008 f88c 	bl	1a426 <printk>
		return NULL;
   1230e:	e7e7      	b.n	122e0 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   12310:	f04f 32ff 	mov.w	r2, #4294967295
   12314:	f04f 33ff 	mov.w	r3, #4294967295
   12318:	e7ee      	b.n	122f8 <bt_att_chan_create_pdu+0x30>
   1231a:	2101      	movs	r1, #1
   1231c:	3008      	adds	r0, #8
   1231e:	f003 f925 	bl	1556c <net_buf_simple_add>
	hdr->code = op;
   12322:	7005      	strb	r5, [r0, #0]
	return buf;
   12324:	e7dc      	b.n	122e0 <bt_att_chan_create_pdu+0x18>
   12326:	bf00      	nop
   12328:	00021b25 	.word	0x00021b25
   1232c:	0002183c 	.word	0x0002183c

00012330 <att_indicate>:
{
   12330:	b570      	push	{r4, r5, r6, lr}
   12332:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   12334:	f101 0008 	add.w	r0, r1, #8
   12338:	460d      	mov	r5, r1
   1233a:	f00a fde2 	bl	1cf02 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1233e:	6826      	ldr	r6, [r4, #0]
   12340:	4601      	mov	r1, r0
   12342:	89ab      	ldrh	r3, [r5, #12]
   12344:	68aa      	ldr	r2, [r5, #8]
   12346:	6830      	ldr	r0, [r6, #0]
   12348:	f00a fd43 	bl	1cdd2 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1234c:	211e      	movs	r1, #30
   1234e:	2200      	movs	r2, #0
   12350:	4620      	mov	r0, r4
   12352:	f7ff ffb9 	bl	122c8 <bt_att_chan_create_pdu>
	if (!buf) {
   12356:	4601      	mov	r1, r0
   12358:	b118      	cbz	r0, 12362 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1235a:	4620      	mov	r0, r4
   1235c:	4a02      	ldr	r2, [pc, #8]	; (12368 <att_indicate+0x38>)
   1235e:	f009 ffcd 	bl	1c2fc <bt_att_chan_send_rsp>
}
   12362:	2000      	movs	r0, #0
   12364:	bd70      	pop	{r4, r5, r6, pc}
   12366:	bf00      	nop
   12368:	0001c3e1 	.word	0x0001c3e1

0001236c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12370:	4688      	mov	r8, r1
   12372:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   12374:	2101      	movs	r1, #1
   12376:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   12378:	4605      	mov	r5, r0
   1237a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1237c:	f7ff ffa4 	bl	122c8 <bt_att_chan_create_pdu>
	if (!buf) {
   12380:	4604      	mov	r4, r0
   12382:	b178      	cbz	r0, 123a4 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   12384:	2104      	movs	r1, #4
   12386:	3008      	adds	r0, #8
   12388:	f003 f8f0 	bl	1556c <net_buf_simple_add>
	rsp->request = req;
   1238c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   12390:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   12392:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   12396:	4621      	mov	r1, r4
   12398:	4628      	mov	r0, r5
}
   1239a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1239e:	4a02      	ldr	r2, [pc, #8]	; (123a8 <send_err_rsp.part.0+0x3c>)
   123a0:	f009 bfac 	b.w	1c2fc <bt_att_chan_send_rsp>
}
   123a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123a8:	0001c3cd 	.word	0x0001c3cd

000123ac <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   123ac:	898b      	ldrh	r3, [r1, #12]
{
   123ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123b2:	4604      	mov	r4, r0
   123b4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   123b6:	b933      	cbnz	r3, 123c6 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   123b8:	2145      	movs	r1, #69	; 0x45
   123ba:	4838      	ldr	r0, [pc, #224]	; (1249c <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   123bc:	f008 f833 	bl	1a426 <printk>
}
   123c0:	2000      	movs	r0, #0
   123c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   123c6:	2101      	movs	r1, #1
   123c8:	f108 0008 	add.w	r0, r8, #8
   123cc:	f003 f8b0 	bl	15530 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   123d0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   123d4:	4605      	mov	r5, r0
   123d6:	2b00      	cmp	r3, #0
   123d8:	d0f2      	beq.n	123c0 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   123da:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   123dc:	7802      	ldrb	r2, [r0, #0]
   123de:	4930      	ldr	r1, [pc, #192]	; (124a0 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   123e0:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   123e4:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   123e8:	4290      	cmp	r0, r2
   123ea:	d114      	bne.n	12416 <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   123ec:	00d8      	lsls	r0, r3, #3
   123ee:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   123f2:	789f      	ldrb	r7, [r3, #2]
   123f4:	2f01      	cmp	r7, #1
   123f6:	d123      	bne.n	12440 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   123f8:	34c0      	adds	r4, #192	; 0xc0
   123fa:	e8d4 3fef 	ldaex	r3, [r4]
   123fe:	f043 0201 	orr.w	r2, r3, #1
   12402:	e8c4 2fec 	stlex	ip, r2, [r4]
   12406:	f1bc 0f00 	cmp.w	ip, #0
   1240a:	d1f6      	bne.n	123fa <bt_att_recv+0x4e>
   1240c:	07da      	lsls	r2, r3, #31
   1240e:	d528      	bpl.n	12462 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   12410:	2157      	movs	r1, #87	; 0x57
   12412:	4824      	ldr	r0, [pc, #144]	; (124a4 <bt_att_recv+0xf8>)
   12414:	e7d2      	b.n	123bc <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12416:	3301      	adds	r3, #1
   12418:	2b1c      	cmp	r3, #28
   1241a:	d1e3      	bne.n	123e4 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1241c:	2157      	movs	r1, #87	; 0x57
   1241e:	4822      	ldr	r0, [pc, #136]	; (124a8 <bt_att_recv+0xfc>)
   12420:	f008 f801 	bl	1a426 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   12424:	7829      	ldrb	r1, [r5, #0]
   12426:	4608      	mov	r0, r1
   12428:	f009 fdeb 	bl	1c002 <att_op_get_type>
   1242c:	2800      	cmp	r0, #0
   1242e:	d0c7      	beq.n	123c0 <bt_att_recv+0x14>
	if (!req) {
   12430:	2900      	cmp	r1, #0
   12432:	d0c5      	beq.n	123c0 <bt_att_recv+0x14>
   12434:	2306      	movs	r3, #6
   12436:	2200      	movs	r2, #0
   12438:	4630      	mov	r0, r6
   1243a:	f7ff ff97 	bl	1236c <send_err_rsp.part.0>
   1243e:	e7bf      	b.n	123c0 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   12440:	2f05      	cmp	r7, #5
   12442:	d10e      	bne.n	12462 <bt_att_recv+0xb6>
   12444:	34c0      	adds	r4, #192	; 0xc0
   12446:	e8d4 3fef 	ldaex	r3, [r4]
   1244a:	f043 0202 	orr.w	r2, r3, #2
   1244e:	e8c4 2fec 	stlex	ip, r2, [r4]
   12452:	f1bc 0f00 	cmp.w	ip, #0
   12456:	d1f6      	bne.n	12446 <bt_att_recv+0x9a>
   12458:	079b      	lsls	r3, r3, #30
   1245a:	d502      	bpl.n	12462 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   1245c:	2157      	movs	r1, #87	; 0x57
   1245e:	4813      	ldr	r0, [pc, #76]	; (124ac <bt_att_recv+0x100>)
   12460:	e7ac      	b.n	123bc <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   12462:	180b      	adds	r3, r1, r0
   12464:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   12468:	7859      	ldrb	r1, [r3, #1]
   1246a:	4291      	cmp	r1, r2
   1246c:	d908      	bls.n	12480 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1246e:	2145      	movs	r1, #69	; 0x45
   12470:	782b      	ldrb	r3, [r5, #0]
   12472:	480f      	ldr	r0, [pc, #60]	; (124b0 <bt_att_recv+0x104>)
   12474:	f007 ffd7 	bl	1a426 <printk>
	if (handler->type == ATT_REQUEST && err) {
   12478:	2f01      	cmp	r7, #1
   1247a:	d1a1      	bne.n	123c0 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   1247c:	2304      	movs	r3, #4
   1247e:	e008      	b.n	12492 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   12480:	685b      	ldr	r3, [r3, #4]
   12482:	4641      	mov	r1, r8
   12484:	4630      	mov	r0, r6
   12486:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   12488:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   1248a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1248c:	d198      	bne.n	123c0 <bt_att_recv+0x14>
   1248e:	2800      	cmp	r0, #0
   12490:	d096      	beq.n	123c0 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   12492:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   12494:	2900      	cmp	r1, #0
   12496:	d093      	beq.n	123c0 <bt_att_recv+0x14>
   12498:	e7cd      	b.n	12436 <bt_att_recv+0x8a>
   1249a:	bf00      	nop
   1249c:	00021b4f 	.word	0x00021b4f
   124a0:	0001e8b0 	.word	0x0001e8b0
   124a4:	00021b6f 	.word	0x00021b6f
   124a8:	00021bd8 	.word	0x00021bd8
   124ac:	00021b90 	.word	0x00021b90
   124b0:	00021bb4 	.word	0x00021bb4

000124b4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   124b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   124b8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   124ba:	6803      	ldr	r3, [r0, #0]
   124bc:	460e      	mov	r6, r1
   124be:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   124c0:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   124c2:	bf18      	it	ne
   124c4:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   124c6:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   124c8:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   124ca:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   124cc:	f00a fcac 	bl	1ce28 <bt_gatt_change_aware>
   124d0:	2800      	cmp	r0, #0
   124d2:	d04b      	beq.n	1256c <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   124d4:	2f00      	cmp	r7, #0
   124d6:	d04b      	beq.n	12570 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   124d8:	2218      	movs	r2, #24
   124da:	2100      	movs	r1, #0
   124dc:	4668      	mov	r0, sp
   124de:	f009 fa11 	bl	1b904 <memset>
	if (rsp) {
   124e2:	f1b8 0f00 	cmp.w	r8, #0
   124e6:	d122      	bne.n	1252e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   124e8:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   124ea:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   124ee:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   124f0:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   124f2:	9300      	str	r3, [sp, #0]
	data.value = value;
   124f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   124f6:	4638      	mov	r0, r7
	data.value = value;
   124f8:	9303      	str	r3, [sp, #12]
	data.len = len;
   124fa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   124fe:	4a1d      	ldr	r2, [pc, #116]	; (12574 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   12500:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12504:	2301      	movs	r3, #1
   12506:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1250a:	466b      	mov	r3, sp
	data.req = req;
   1250c:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   12510:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12514:	f009 fdbb 	bl	1c08e <bt_gatt_foreach_attr>
	if (data.err) {
   12518:	f89d 4014 	ldrb.w	r4, [sp, #20]
   1251c:	b1f4      	cbz	r4, 1255c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   1251e:	f1b8 0f00 	cmp.w	r8, #0
   12522:	d10e      	bne.n	12542 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12524:	2400      	movs	r4, #0
}
   12526:	4620      	mov	r0, r4
   12528:	b007      	add	sp, #28
   1252a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1252e:	2200      	movs	r2, #0
   12530:	4641      	mov	r1, r8
   12532:	4628      	mov	r0, r5
   12534:	f7ff fec8 	bl	122c8 <bt_att_chan_create_pdu>
   12538:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1253a:	2800      	cmp	r0, #0
   1253c:	d1d4      	bne.n	124e8 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   1253e:	240e      	movs	r4, #14
   12540:	e7f1      	b.n	12526 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12542:	9801      	ldr	r0, [sp, #4]
   12544:	f002 fefc 	bl	15340 <net_buf_unref>
	if (!req) {
   12548:	2e00      	cmp	r6, #0
   1254a:	d0eb      	beq.n	12524 <att_write_rsp.constprop.0+0x70>
   1254c:	463a      	mov	r2, r7
   1254e:	4631      	mov	r1, r6
   12550:	4628      	mov	r0, r5
   12552:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12556:	f7ff ff09 	bl	1236c <send_err_rsp.part.0>
   1255a:	e7e3      	b.n	12524 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   1255c:	9901      	ldr	r1, [sp, #4]
   1255e:	2900      	cmp	r1, #0
   12560:	d0e0      	beq.n	12524 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12562:	4628      	mov	r0, r5
   12564:	4a04      	ldr	r2, [pc, #16]	; (12578 <att_write_rsp.constprop.0+0xc4>)
   12566:	f009 fec9 	bl	1c2fc <bt_att_chan_send_rsp>
   1256a:	e7dc      	b.n	12526 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1256c:	2412      	movs	r4, #18
   1256e:	e7da      	b.n	12526 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   12570:	2401      	movs	r4, #1
   12572:	e7d8      	b.n	12526 <att_write_rsp.constprop.0+0x72>
   12574:	0001c15d 	.word	0x0001c15d
   12578:	0001c3cd 	.word	0x0001c3cd

0001257c <bt_att_create_pdu>:
{
   1257c:	b570      	push	{r4, r5, r6, lr}
   1257e:	460e      	mov	r6, r1
   12580:	4615      	mov	r5, r2
	att = att_get(conn);
   12582:	f7ff fbbb 	bl	11cfc <att_get>
	if (!att) {
   12586:	b190      	cbz	r0, 125ae <bt_att_create_pdu+0x32>
	return list->head;
   12588:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1258a:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1258c:	b15b      	cbz	r3, 125a6 <bt_att_create_pdu+0x2a>
   1258e:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12592:	d008      	beq.n	125a6 <bt_att_create_pdu+0x2a>
	return node->next;
   12594:	681b      	ldr	r3, [r3, #0]
   12596:	b10b      	cbz	r3, 1259c <bt_att_create_pdu+0x20>
   12598:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1259c:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   125a0:	428a      	cmp	r2, r1
   125a2:	d906      	bls.n	125b2 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   125a4:	b95b      	cbnz	r3, 125be <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   125a6:	2157      	movs	r1, #87	; 0x57
   125a8:	480a      	ldr	r0, [pc, #40]	; (125d4 <bt_att_create_pdu+0x58>)
   125aa:	f007 ff3c 	bl	1a426 <printk>
}
   125ae:	2000      	movs	r0, #0
   125b0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   125b2:	462a      	mov	r2, r5
   125b4:	4631      	mov	r1, r6
}
   125b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   125ba:	f7ff be85 	b.w	122c8 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   125be:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   125c2:	d004      	beq.n	125ce <bt_att_create_pdu+0x52>
	return node->next;
   125c4:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   125c8:	b10c      	cbz	r4, 125ce <bt_att_create_pdu+0x52>
   125ca:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   125ce:	4618      	mov	r0, r3
   125d0:	4623      	mov	r3, r4
   125d2:	e7e3      	b.n	1259c <bt_att_create_pdu+0x20>
   125d4:	00021bf7 	.word	0x00021bf7

000125d8 <att_read_group_req>:
{
   125d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   125dc:	898c      	ldrh	r4, [r1, #12]
{
   125de:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   125e0:	3c04      	subs	r4, #4
   125e2:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   125e4:	2c02      	cmp	r4, #2
{
   125e6:	4608      	mov	r0, r1
   125e8:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   125ea:	d001      	beq.n	125f0 <att_read_group_req+0x18>
   125ec:	2c10      	cmp	r4, #16
   125ee:	d16f      	bne.n	126d0 <att_read_group_req+0xf8>
   125f0:	2104      	movs	r1, #4
   125f2:	3008      	adds	r0, #8
   125f4:	f002 ff9c 	bl	15530 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   125f8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   125fc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   125fe:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12600:	1d01      	adds	r1, r0, #4
   12602:	4622      	mov	r2, r4
   12604:	4640      	mov	r0, r8
   12606:	f009 f9f5 	bl	1b9f4 <bt_uuid_create>
   1260a:	2800      	cmp	r0, #0
   1260c:	d062      	beq.n	126d4 <att_read_group_req+0xfc>
	if (!start || !end) {
   1260e:	2e00      	cmp	r6, #0
   12610:	d03a      	beq.n	12688 <att_read_group_req+0xb0>
   12612:	2400      	movs	r4, #0
   12614:	2f00      	cmp	r7, #0
   12616:	d036      	beq.n	12686 <att_read_group_req+0xae>
	if (start > end) {
   12618:	42be      	cmp	r6, r7
   1261a:	d835      	bhi.n	12688 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1261c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12620:	4640      	mov	r0, r8
   12622:	a901      	add	r1, sp, #4
   12624:	f88d 4004 	strb.w	r4, [sp, #4]
   12628:	f8ad 3006 	strh.w	r3, [sp, #6]
   1262c:	f009 f9b4 	bl	1b998 <bt_uuid_cmp>
   12630:	2800      	cmp	r0, #0
   12632:	d134      	bne.n	1269e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12634:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12636:	2214      	movs	r2, #20
   12638:	2100      	movs	r1, #0
   1263a:	a807      	add	r0, sp, #28
   1263c:	f009 f962 	bl	1b904 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12640:	2201      	movs	r2, #1
   12642:	2111      	movs	r1, #17
   12644:	4620      	mov	r0, r4
   12646:	f7ff ff99 	bl	1257c <bt_att_create_pdu>
   1264a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1264c:	2800      	cmp	r0, #0
   1264e:	d041      	beq.n	126d4 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   12650:	2101      	movs	r1, #1
   12652:	3008      	adds	r0, #8
	data.uuid = uuid;
   12654:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12658:	f002 ff88 	bl	1556c <net_buf_simple_add>
	data.rsp->len = 0U;
   1265c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12660:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12662:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12664:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12668:	4639      	mov	r1, r7
   1266a:	4630      	mov	r0, r6
   1266c:	4a1a      	ldr	r2, [pc, #104]	; (126d8 <att_read_group_req+0x100>)
	data.group = NULL;
   1266e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12672:	f009 fd0c 	bl	1c08e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12678:	781c      	ldrb	r4, [r3, #0]
   1267a:	bb1c      	cbnz	r4, 126c4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1267c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1267e:	f002 fe5f 	bl	15340 <net_buf_unref>
	if (!req) {
   12682:	230a      	movs	r3, #10
   12684:	e018      	b.n	126b8 <att_read_group_req+0xe0>
			*err = 0U;
   12686:	463e      	mov	r6, r7
	if (!req) {
   12688:	2301      	movs	r3, #1
   1268a:	4632      	mov	r2, r6
   1268c:	2110      	movs	r1, #16
   1268e:	4628      	mov	r0, r5
   12690:	f7ff fe6c 	bl	1236c <send_err_rsp.part.0>
		return 0;
   12694:	2400      	movs	r4, #0
}
   12696:	4620      	mov	r0, r4
   12698:	b00c      	add	sp, #48	; 0x30
   1269a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1269e:	f642 0301 	movw	r3, #10241	; 0x2801
   126a2:	4640      	mov	r0, r8
   126a4:	a907      	add	r1, sp, #28
   126a6:	f88d 401c 	strb.w	r4, [sp, #28]
   126aa:	f8ad 301e 	strh.w	r3, [sp, #30]
   126ae:	f009 f973 	bl	1b998 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   126b2:	2800      	cmp	r0, #0
   126b4:	d0be      	beq.n	12634 <att_read_group_req+0x5c>
	if (!req) {
   126b6:	2310      	movs	r3, #16
   126b8:	4632      	mov	r2, r6
   126ba:	2110      	movs	r1, #16
   126bc:	4628      	mov	r0, r5
   126be:	f7ff fe55 	bl	1236c <send_err_rsp.part.0>
		return 0;
   126c2:	e7e8      	b.n	12696 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   126c4:	4628      	mov	r0, r5
   126c6:	4a05      	ldr	r2, [pc, #20]	; (126dc <att_read_group_req+0x104>)
   126c8:	9909      	ldr	r1, [sp, #36]	; 0x24
   126ca:	f009 fe17 	bl	1c2fc <bt_att_chan_send_rsp>
	return 0;
   126ce:	e7e1      	b.n	12694 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   126d0:	2404      	movs	r4, #4
   126d2:	e7e0      	b.n	12696 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   126d4:	240e      	movs	r4, #14
   126d6:	e7de      	b.n	12696 <att_read_group_req+0xbe>
   126d8:	00011f75 	.word	0x00011f75
   126dc:	0001c3cd 	.word	0x0001c3cd

000126e0 <att_read_mult_req>:
{
   126e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   126e4:	6886      	ldr	r6, [r0, #8]
{
   126e6:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   126e8:	2210      	movs	r2, #16
{
   126ea:	4604      	mov	r4, r0
   126ec:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   126ee:	4668      	mov	r0, sp
   126f0:	2100      	movs	r1, #0
   126f2:	f009 f907 	bl	1b904 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   126f6:	2200      	movs	r2, #0
   126f8:	210f      	movs	r1, #15
   126fa:	4630      	mov	r0, r6
   126fc:	f7ff ff3e 	bl	1257c <bt_att_create_pdu>
   12700:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12702:	b360      	cbz	r0, 1275e <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12704:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12708:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12764 <att_read_mult_req+0x84>
	data.chan = chan;
   1270c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1270e:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12712:	89ab      	ldrh	r3, [r5, #12]
   12714:	2b01      	cmp	r3, #1
   12716:	d805      	bhi.n	12724 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12718:	4620      	mov	r0, r4
   1271a:	4a13      	ldr	r2, [pc, #76]	; (12768 <att_read_mult_req+0x88>)
   1271c:	9902      	ldr	r1, [sp, #8]
   1271e:	f009 fded 	bl	1c2fc <bt_att_chan_send_rsp>
   12722:	e018      	b.n	12756 <att_read_mult_req+0x76>
   12724:	4638      	mov	r0, r7
   12726:	f00a fbec 	bl	1cf02 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1272a:	466b      	mov	r3, sp
   1272c:	464a      	mov	r2, r9
   1272e:	4601      	mov	r1, r0
   12730:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12732:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12736:	f009 fcaa 	bl	1c08e <bt_gatt_foreach_attr>
		if (data.err) {
   1273a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1273e:	2b00      	cmp	r3, #0
   12740:	d0e7      	beq.n	12712 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   12742:	9802      	ldr	r0, [sp, #8]
   12744:	f002 fdfc 	bl	15340 <net_buf_unref>
	if (!req) {
   12748:	4632      	mov	r2, r6
   1274a:	210e      	movs	r1, #14
   1274c:	4620      	mov	r0, r4
   1274e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12752:	f7ff fe0b 	bl	1236c <send_err_rsp.part.0>
	return 0;
   12756:	2000      	movs	r0, #0
}
   12758:	b005      	add	sp, #20
   1275a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   1275e:	200e      	movs	r0, #14
   12760:	e7fa      	b.n	12758 <att_read_mult_req+0x78>
   12762:	bf00      	nop
   12764:	0001c3f5 	.word	0x0001c3f5
   12768:	0001c3cd 	.word	0x0001c3cd

0001276c <att_read_rsp>:
{
   1276c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12770:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12774:	4605      	mov	r5, r0
   12776:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12778:	4640      	mov	r0, r8
   1277a:	2101      	movs	r1, #1
{
   1277c:	4614      	mov	r4, r2
   1277e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12780:	f00a fb52 	bl	1ce28 <bt_gatt_change_aware>
   12784:	b390      	cbz	r0, 127ec <att_read_rsp+0x80>
	if (!handle) {
   12786:	b39e      	cbz	r6, 127f0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12788:	2210      	movs	r2, #16
   1278a:	2100      	movs	r1, #0
   1278c:	4668      	mov	r0, sp
   1278e:	f009 f8b9 	bl	1b904 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12792:	2200      	movs	r2, #0
   12794:	4621      	mov	r1, r4
   12796:	4640      	mov	r0, r8
   12798:	f7ff fef0 	bl	1257c <bt_att_create_pdu>
   1279c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1279e:	b348      	cbz	r0, 127f4 <att_read_rsp+0x88>
	data.offset = offset;
   127a0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   127a4:	4631      	mov	r1, r6
	data.offset = offset;
   127a6:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   127aa:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   127ac:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   127ae:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   127b2:	4a11      	ldr	r2, [pc, #68]	; (127f8 <att_read_rsp+0x8c>)
   127b4:	466b      	mov	r3, sp
	data.chan = chan;
   127b6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   127b8:	f009 fc69 	bl	1c08e <bt_gatt_foreach_attr>
	if (data.err) {
   127bc:	f89d 400c 	ldrb.w	r4, [sp, #12]
   127c0:	b174      	cbz	r4, 127e0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   127c2:	9802      	ldr	r0, [sp, #8]
   127c4:	f002 fdbc 	bl	15340 <net_buf_unref>
	if (!req) {
   127c8:	4632      	mov	r2, r6
   127ca:	4639      	mov	r1, r7
   127cc:	4628      	mov	r0, r5
   127ce:	f89d 300c 	ldrb.w	r3, [sp, #12]
   127d2:	f7ff fdcb 	bl	1236c <send_err_rsp.part.0>
		return 0;
   127d6:	2400      	movs	r4, #0
}
   127d8:	4620      	mov	r0, r4
   127da:	b004      	add	sp, #16
   127dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   127e0:	4628      	mov	r0, r5
   127e2:	4a06      	ldr	r2, [pc, #24]	; (127fc <att_read_rsp+0x90>)
   127e4:	9902      	ldr	r1, [sp, #8]
   127e6:	f009 fd89 	bl	1c2fc <bt_att_chan_send_rsp>
	return 0;
   127ea:	e7f5      	b.n	127d8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   127ec:	2412      	movs	r4, #18
   127ee:	e7f3      	b.n	127d8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   127f0:	2401      	movs	r4, #1
   127f2:	e7f1      	b.n	127d8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   127f4:	240e      	movs	r4, #14
   127f6:	e7ef      	b.n	127d8 <att_read_rsp+0x6c>
   127f8:	0001c3f5 	.word	0x0001c3f5
   127fc:	0001c3cd 	.word	0x0001c3cd

00012800 <att_read_type_req>:
{
   12800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12804:	898c      	ldrh	r4, [r1, #12]
{
   12806:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12808:	3c04      	subs	r4, #4
   1280a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1280c:	2c02      	cmp	r4, #2
{
   1280e:	4608      	mov	r0, r1
   12810:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12812:	d001      	beq.n	12818 <att_read_type_req+0x18>
   12814:	2c10      	cmp	r4, #16
   12816:	d150      	bne.n	128ba <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12818:	2104      	movs	r1, #4
   1281a:	3008      	adds	r0, #8
   1281c:	f002 fe88 	bl	15530 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12820:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12824:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12826:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12828:	1d01      	adds	r1, r0, #4
   1282a:	4622      	mov	r2, r4
   1282c:	4640      	mov	r0, r8
   1282e:	f009 f8e1 	bl	1b9f4 <bt_uuid_create>
   12832:	b188      	cbz	r0, 12858 <att_read_type_req+0x58>
	if (!start || !end) {
   12834:	b19e      	cbz	r6, 1285e <att_read_type_req+0x5e>
   12836:	b18f      	cbz	r7, 1285c <att_read_type_req+0x5c>
	if (start > end) {
   12838:	42b7      	cmp	r7, r6
   1283a:	d310      	bcc.n	1285e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1283c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1283e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12840:	2100      	movs	r1, #0
   12842:	eb0d 0002 	add.w	r0, sp, r2
   12846:	f009 f85d 	bl	1b904 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1284a:	2201      	movs	r2, #1
   1284c:	2109      	movs	r1, #9
   1284e:	4620      	mov	r0, r4
   12850:	f7ff fe94 	bl	1257c <bt_att_create_pdu>
   12854:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12856:	b968      	cbnz	r0, 12874 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12858:	240e      	movs	r4, #14
   1285a:	e007      	b.n	1286c <att_read_type_req+0x6c>
			*err = 0U;
   1285c:	463e      	mov	r6, r7
	if (!req) {
   1285e:	2301      	movs	r3, #1
   12860:	4632      	mov	r2, r6
   12862:	2108      	movs	r1, #8
   12864:	4628      	mov	r0, r5
   12866:	f7ff fd81 	bl	1236c <send_err_rsp.part.0>
		return 0;
   1286a:	2400      	movs	r4, #0
}
   1286c:	4620      	mov	r0, r4
   1286e:	b00c      	add	sp, #48	; 0x30
   12870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12874:	2101      	movs	r1, #1
   12876:	3008      	adds	r0, #8
	data.uuid = uuid;
   12878:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1287c:	f002 fe76 	bl	1556c <net_buf_simple_add>
	data.rsp->len = 0U;
   12880:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12884:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12886:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12888:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1288a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1288e:	4a0c      	ldr	r2, [pc, #48]	; (128c0 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12890:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12894:	4630      	mov	r0, r6
   12896:	ab06      	add	r3, sp, #24
   12898:	f009 fbf9 	bl	1c08e <bt_gatt_foreach_attr>
	if (data.err) {
   1289c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   128a0:	b12c      	cbz	r4, 128ae <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   128a2:	9808      	ldr	r0, [sp, #32]
   128a4:	f002 fd4c 	bl	15340 <net_buf_unref>
	if (!req) {
   128a8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   128ac:	e7d8      	b.n	12860 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   128ae:	4628      	mov	r0, r5
   128b0:	4a04      	ldr	r2, [pc, #16]	; (128c4 <att_read_type_req+0xc4>)
   128b2:	9908      	ldr	r1, [sp, #32]
   128b4:	f009 fd22 	bl	1c2fc <bt_att_chan_send_rsp>
	return 0;
   128b8:	e7d8      	b.n	1286c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   128ba:	2404      	movs	r4, #4
   128bc:	e7d6      	b.n	1286c <att_read_type_req+0x6c>
   128be:	bf00      	nop
   128c0:	0001219d 	.word	0x0001219d
   128c4:	0001c3cd 	.word	0x0001c3cd

000128c8 <att_find_type_req>:
{
   128c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   128cc:	4688      	mov	r8, r1
   128ce:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   128d0:	2106      	movs	r1, #6
   128d2:	b086      	sub	sp, #24
   128d4:	f108 0008 	add.w	r0, r8, #8
   128d8:	f002 fe2a 	bl	15530 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   128dc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   128de:	b317      	cbz	r7, 12926 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   128e0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   128e4:	f1b9 0f00 	cmp.w	r9, #0
   128e8:	d01c      	beq.n	12924 <att_find_type_req+0x5c>
	if (start > end) {
   128ea:	454f      	cmp	r7, r9
   128ec:	d81b      	bhi.n	12926 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   128ee:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   128f0:	2400      	movs	r4, #0
   128f2:	f8ad 3002 	strh.w	r3, [sp, #2]
   128f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   128fa:	4668      	mov	r0, sp
   128fc:	a901      	add	r1, sp, #4
	value = buf->data;
   128fe:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12902:	f88d 4000 	strb.w	r4, [sp]
   12906:	f88d 4004 	strb.w	r4, [sp, #4]
   1290a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1290e:	f009 f843 	bl	1b998 <bt_uuid_cmp>
   12912:	4606      	mov	r6, r0
   12914:	b190      	cbz	r0, 1293c <att_find_type_req+0x74>
	if (!req) {
   12916:	230a      	movs	r3, #10
   12918:	463a      	mov	r2, r7
   1291a:	2106      	movs	r1, #6
   1291c:	4628      	mov	r0, r5
   1291e:	f7ff fd25 	bl	1236c <send_err_rsp.part.0>
		return 0;
   12922:	e007      	b.n	12934 <att_find_type_req+0x6c>
			*err = 0U;
   12924:	464f      	mov	r7, r9
	if (!req) {
   12926:	2301      	movs	r3, #1
   12928:	463a      	mov	r2, r7
   1292a:	2106      	movs	r1, #6
   1292c:	4628      	mov	r0, r5
   1292e:	f7ff fd1d 	bl	1236c <send_err_rsp.part.0>
		return 0;
   12932:	2400      	movs	r4, #0
}
   12934:	4620      	mov	r0, r4
   12936:	b006      	add	sp, #24
   12938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1293c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12940:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12944:	4601      	mov	r1, r0
   12946:	2214      	movs	r2, #20
   12948:	a801      	add	r0, sp, #4
   1294a:	f008 ffdb 	bl	1b904 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1294e:	4632      	mov	r2, r6
   12950:	2107      	movs	r1, #7
   12952:	4640      	mov	r0, r8
   12954:	f7ff fe12 	bl	1257c <bt_att_create_pdu>
   12958:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1295a:	b1e0      	cbz	r0, 12996 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1295c:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1295e:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12960:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12964:	4638      	mov	r0, r7
   12966:	4a0d      	ldr	r2, [pc, #52]	; (1299c <att_find_type_req+0xd4>)
   12968:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   1296a:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   1296e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12972:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12974:	f009 fb8b 	bl	1c08e <bt_gatt_foreach_attr>
	if (data.err) {
   12978:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1297c:	b12c      	cbz	r4, 1298a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1297e:	9802      	ldr	r0, [sp, #8]
   12980:	f002 fcde 	bl	15340 <net_buf_unref>
	if (!req) {
   12984:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12988:	e7ce      	b.n	12928 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1298a:	4628      	mov	r0, r5
   1298c:	4a04      	ldr	r2, [pc, #16]	; (129a0 <att_find_type_req+0xd8>)
   1298e:	9902      	ldr	r1, [sp, #8]
   12990:	f009 fcb4 	bl	1c2fc <bt_att_chan_send_rsp>
	return 0;
   12994:	e7ce      	b.n	12934 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12996:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12998:	e7cc      	b.n	12934 <att_find_type_req+0x6c>
   1299a:	bf00      	nop
   1299c:	00011d65 	.word	0x00011d65
   129a0:	0001c3cd 	.word	0x0001c3cd

000129a4 <att_find_info_req>:
{
   129a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   129a6:	688b      	ldr	r3, [r1, #8]
{
   129a8:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   129aa:	881e      	ldrh	r6, [r3, #0]
{
   129ac:	b085      	sub	sp, #20
	if (!start || !end) {
   129ae:	b19e      	cbz	r6, 129d8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   129b0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   129b2:	b184      	cbz	r4, 129d6 <att_find_info_req+0x32>
	if (start > end) {
   129b4:	42b4      	cmp	r4, r6
   129b6:	d30f      	bcc.n	129d8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   129b8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   129ba:	2210      	movs	r2, #16
   129bc:	2100      	movs	r1, #0
   129be:	4668      	mov	r0, sp
   129c0:	f008 ffa0 	bl	1b904 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   129c4:	2200      	movs	r2, #0
   129c6:	2105      	movs	r1, #5
   129c8:	4638      	mov	r0, r7
   129ca:	f7ff fdd7 	bl	1257c <bt_att_create_pdu>
   129ce:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   129d0:	b958      	cbnz	r0, 129ea <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   129d2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   129d4:	e007      	b.n	129e6 <att_find_info_req+0x42>
			*err = 0U;
   129d6:	4626      	mov	r6, r4
	if (!req) {
   129d8:	2301      	movs	r3, #1
   129da:	4632      	mov	r2, r6
   129dc:	2104      	movs	r1, #4
   129de:	4628      	mov	r0, r5
   129e0:	f7ff fcc4 	bl	1236c <send_err_rsp.part.0>
	return 0;
   129e4:	2000      	movs	r0, #0
}
   129e6:	b005      	add	sp, #20
   129e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   129ea:	4621      	mov	r1, r4
   129ec:	466b      	mov	r3, sp
   129ee:	4630      	mov	r0, r6
   129f0:	4a08      	ldr	r2, [pc, #32]	; (12a14 <att_find_info_req+0x70>)
	data.chan = chan;
   129f2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   129f4:	f009 fb4b 	bl	1c08e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   129f8:	9c02      	ldr	r4, [sp, #8]
   129fa:	b924      	cbnz	r4, 12a06 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   129fc:	9801      	ldr	r0, [sp, #4]
   129fe:	f002 fc9f 	bl	15340 <net_buf_unref>
	if (!req) {
   12a02:	230a      	movs	r3, #10
   12a04:	e7e9      	b.n	129da <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12a06:	4628      	mov	r0, r5
   12a08:	4a03      	ldr	r2, [pc, #12]	; (12a18 <att_find_info_req+0x74>)
   12a0a:	9901      	ldr	r1, [sp, #4]
   12a0c:	f009 fc76 	bl	1c2fc <bt_att_chan_send_rsp>
   12a10:	e7e8      	b.n	129e4 <att_find_info_req+0x40>
   12a12:	bf00      	nop
   12a14:	0001c0a5 	.word	0x0001c0a5
   12a18:	0001c3cd 	.word	0x0001c3cd

00012a1c <att_mtu_req>:
{
   12a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   12a1e:	4603      	mov	r3, r0
   12a20:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12a24:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12a26:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12a28:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   12a2c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   12a30:	071b      	lsls	r3, r3, #28
   12a32:	d41b      	bmi.n	12a6c <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   12a34:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   12a36:	881b      	ldrh	r3, [r3, #0]
   12a38:	2b16      	cmp	r3, #22
   12a3a:	d919      	bls.n	12a70 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   12a3c:	2202      	movs	r2, #2
   12a3e:	2103      	movs	r1, #3
   12a40:	f7ff fd9c 	bl	1257c <bt_att_create_pdu>
	if (!pdu) {
   12a44:	4606      	mov	r6, r0
   12a46:	b1a8      	cbz	r0, 12a74 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   12a48:	2102      	movs	r1, #2
   12a4a:	3008      	adds	r0, #8
   12a4c:	f002 fd8e 	bl	1556c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   12a50:	2717      	movs	r7, #23
   12a52:	7044      	strb	r4, [r0, #1]
   12a54:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   12a56:	4631      	mov	r1, r6
   12a58:	4628      	mov	r0, r5
   12a5a:	4a07      	ldr	r2, [pc, #28]	; (12a78 <att_mtu_req+0x5c>)
   12a5c:	f009 fc4e 	bl	1c2fc <bt_att_chan_send_rsp>
	return 0;
   12a60:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   12a62:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   12a66:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   12a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   12a6c:	2006      	movs	r0, #6
   12a6e:	e7fc      	b.n	12a6a <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   12a70:	2004      	movs	r0, #4
   12a72:	e7fa      	b.n	12a6a <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   12a74:	200e      	movs	r0, #14
   12a76:	e7f8      	b.n	12a6a <att_mtu_req+0x4e>
   12a78:	0001c3cd 	.word	0x0001c3cd

00012a7c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   12a7c:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   12a7e:	2400      	movs	r4, #0
{
   12a80:	4602      	mov	r2, r0
   12a82:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12a84:	4807      	ldr	r0, [pc, #28]	; (12aa4 <bt_att_req_alloc+0x28>)
   12a86:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   12a88:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12a8a:	f004 ff9b 	bl	179c4 <k_mem_slab_alloc>
   12a8e:	4601      	mov	r1, r0
   12a90:	b930      	cbnz	r0, 12aa0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   12a92:	2218      	movs	r2, #24
   12a94:	9801      	ldr	r0, [sp, #4]
   12a96:	f008 ff35 	bl	1b904 <memset>

	return req;
   12a9a:	9801      	ldr	r0, [sp, #4]
}
   12a9c:	b002      	add	sp, #8
   12a9e:	bd10      	pop	{r4, pc}
		return NULL;
   12aa0:	4620      	mov	r0, r4
   12aa2:	e7fb      	b.n	12a9c <bt_att_req_alloc+0x20>
   12aa4:	20008630 	.word	0x20008630

00012aa8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   12aa8:	b507      	push	{r0, r1, r2, lr}
   12aaa:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   12aac:	a901      	add	r1, sp, #4
   12aae:	4803      	ldr	r0, [pc, #12]	; (12abc <bt_att_req_free+0x14>)
   12ab0:	f004 ffe2 	bl	17a78 <k_mem_slab_free>
}
   12ab4:	b003      	add	sp, #12
   12ab6:	f85d fb04 	ldr.w	pc, [sp], #4
   12aba:	bf00      	nop
   12abc:	20008630 	.word	0x20008630

00012ac0 <att_handle_rsp>:
{
   12ac0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12ac4:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   12ac6:	30f0      	adds	r0, #240	; 0xf0
{
   12ac8:	460f      	mov	r7, r1
   12aca:	4690      	mov	r8, r2
   12acc:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   12ace:	f006 fda7 	bl	19620 <k_delayed_work_cancel>
	if (!chan->req) {
   12ad2:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   12ad6:	f04f 0a00 	mov.w	sl, #0
   12ada:	b99d      	cbnz	r5, 12b04 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   12adc:	2157      	movs	r1, #87	; 0x57
   12ade:	4818      	ldr	r0, [pc, #96]	; (12b40 <att_handle_rsp+0x80>)
   12ae0:	f007 fca1 	bl	1a426 <printk>
	att_req_send_process(chan->att);
   12ae4:	6820      	ldr	r0, [r4, #0]
   12ae6:	f009 fced 	bl	1c4c4 <att_req_send_process>
	if (func) {
   12aea:	b13d      	cbz	r5, 12afc <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   12aec:	6820      	ldr	r0, [r4, #0]
   12aee:	f8cd 9000 	str.w	r9, [sp]
   12af2:	4643      	mov	r3, r8
   12af4:	463a      	mov	r2, r7
   12af6:	4631      	mov	r1, r6
   12af8:	6800      	ldr	r0, [r0, #0]
   12afa:	47a8      	blx	r5
}
   12afc:	2000      	movs	r0, #0
   12afe:	b002      	add	sp, #8
   12b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12b04:	4b0f      	ldr	r3, [pc, #60]	; (12b44 <att_handle_rsp+0x84>)
   12b06:	429d      	cmp	r5, r3
   12b08:	d103      	bne.n	12b12 <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   12b0a:	4655      	mov	r5, sl
		chan->req = NULL;
   12b0c:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   12b10:	e7e8      	b.n	12ae4 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   12b12:	6928      	ldr	r0, [r5, #16]
   12b14:	b128      	cbz	r0, 12b22 <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   12b16:	f002 fc13 	bl	15340 <net_buf_unref>
		chan->req->buf = NULL;
   12b1a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12b1e:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   12b22:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   12b26:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   12b2a:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   12b2c:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   12b30:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   12b34:	f009 fd74 	bl	1c620 <att_req_destroy>
	chan->req = NULL;
   12b38:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   12b3c:	e7d2      	b.n	12ae4 <att_handle_rsp+0x24>
   12b3e:	bf00      	nop
   12b40:	00021c17 	.word	0x00021c17
   12b44:	2000ab74 	.word	0x2000ab74

00012b48 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   12b48:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   12b4c:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   12b4e:	b18b      	cbz	r3, 12b74 <att_error_rsp+0x2c>
   12b50:	4a09      	ldr	r2, [pc, #36]	; (12b78 <att_error_rsp+0x30>)
   12b52:	4293      	cmp	r3, r2
   12b54:	d00e      	beq.n	12b74 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   12b56:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   12b58:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   12b5a:	b12a      	cbz	r2, 12b68 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   12b5c:	899d      	ldrh	r5, [r3, #12]
   12b5e:	89dc      	ldrh	r4, [r3, #14]
   12b60:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   12b62:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   12b64:	442b      	add	r3, r5
   12b66:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   12b68:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   12b6a:	2200      	movs	r2, #0
}
   12b6c:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   12b6e:	4611      	mov	r1, r2
   12b70:	f7ff bfa6 	b.w	12ac0 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   12b74:	230e      	movs	r3, #14
   12b76:	e7f8      	b.n	12b6a <att_error_rsp+0x22>
   12b78:	2000ab74 	.word	0x2000ab74

00012b7c <att_reset>:
{
   12b7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12b7e:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12b80:	9803      	ldr	r0, [sp, #12]
   12b82:	2200      	movs	r2, #0
   12b84:	2300      	movs	r3, #0
   12b86:	300c      	adds	r0, #12
   12b88:	f002 fb58 	bl	1523c <net_buf_get>
   12b8c:	b948      	cbnz	r0, 12ba2 <att_reset+0x26>
	att->conn = NULL;
   12b8e:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   12b90:	6854      	ldr	r4, [r2, #4]
   12b92:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12b94:	b944      	cbnz	r4, 12ba8 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   12b96:	480d      	ldr	r0, [pc, #52]	; (12bcc <att_reset+0x50>)
   12b98:	a903      	add	r1, sp, #12
   12b9a:	f004 ff6d 	bl	17a78 <k_mem_slab_free>
}
   12b9e:	b004      	add	sp, #16
   12ba0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   12ba2:	f002 fbcd 	bl	15340 <net_buf_unref>
   12ba6:	e7eb      	b.n	12b80 <att_reset+0x4>
	return node->next;
   12ba8:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   12baa:	6866      	ldr	r6, [r4, #4]
   12bac:	b136      	cbz	r6, 12bbc <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   12bae:	6963      	ldr	r3, [r4, #20]
   12bb0:	210e      	movs	r1, #14
   12bb2:	9300      	str	r3, [sp, #0]
   12bb4:	2300      	movs	r3, #0
   12bb6:	461a      	mov	r2, r3
   12bb8:	4618      	mov	r0, r3
   12bba:	47b0      	blx	r6
		att_req_destroy(req);
   12bbc:	4620      	mov	r0, r4
   12bbe:	f009 fd2f 	bl	1c620 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12bc2:	2d00      	cmp	r5, #0
   12bc4:	d0e7      	beq.n	12b96 <att_reset+0x1a>
   12bc6:	462c      	mov	r4, r5
   12bc8:	682d      	ldr	r5, [r5, #0]
   12bca:	e7ee      	b.n	12baa <att_reset+0x2e>
   12bcc:	200085f8 	.word	0x200085f8

00012bd0 <att_timeout>:
{
   12bd0:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   12bd2:	4605      	mov	r5, r0
   12bd4:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   12bd8:	2145      	movs	r1, #69	; 0x45
{
   12bda:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   12bdc:	4808      	ldr	r0, [pc, #32]	; (12c00 <att_timeout+0x30>)
   12bde:	f007 fc22 	bl	1a426 <printk>
	att_chan_detach(chan);
   12be2:	4628      	mov	r0, r5
   12be4:	f009 fd59 	bl	1c69a <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   12be8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   12bea:	b945      	cbnz	r5, 12bfe <att_timeout+0x2e>
	att_reset(att);
   12bec:	4630      	mov	r0, r6
   12bee:	f7ff ffc5 	bl	12b7c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   12bf2:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   12bf6:	f002 f94f 	bl	14e98 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   12bfa:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   12bfe:	bd70      	pop	{r4, r5, r6, pc}
   12c00:	00021c33 	.word	0x00021c33

00012c04 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   12c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12c08:	460c      	mov	r4, r1
   12c0a:	4617      	mov	r7, r2
   12c0c:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   12c0e:	4605      	mov	r5, r0
   12c10:	b950      	cbnz	r0, 12c28 <bt_att_send+0x24>
   12c12:	492e      	ldr	r1, [pc, #184]	; (12ccc <bt_att_send+0xc8>)
   12c14:	482e      	ldr	r0, [pc, #184]	; (12cd0 <bt_att_send+0xcc>)
   12c16:	f640 32ce 	movw	r2, #3022	; 0xbce
   12c1a:	f007 fc04 	bl	1a426 <printk>
   12c1e:	f640 31ce 	movw	r1, #3022	; 0xbce
   12c22:	482a      	ldr	r0, [pc, #168]	; (12ccc <bt_att_send+0xc8>)
   12c24:	f007 fea5 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   12c28:	b954      	cbnz	r4, 12c40 <bt_att_send+0x3c>
   12c2a:	4928      	ldr	r1, [pc, #160]	; (12ccc <bt_att_send+0xc8>)
   12c2c:	4828      	ldr	r0, [pc, #160]	; (12cd0 <bt_att_send+0xcc>)
   12c2e:	f640 32cf 	movw	r2, #3023	; 0xbcf
   12c32:	f007 fbf8 	bl	1a426 <printk>
   12c36:	f640 31cf 	movw	r1, #3023	; 0xbcf
   12c3a:	4824      	ldr	r0, [pc, #144]	; (12ccc <bt_att_send+0xc8>)
   12c3c:	f007 fe99 	bl	1a972 <assert_post_action>

	att = att_get(conn);
   12c40:	4628      	mov	r0, r5
   12c42:	f7ff f85b 	bl	11cfc <att_get>
	if (!att) {
   12c46:	4606      	mov	r6, r0
   12c48:	b938      	cbnz	r0, 12c5a <bt_att_send+0x56>
		net_buf_unref(buf);
   12c4a:	4620      	mov	r0, r4
   12c4c:	f002 fb78 	bl	15340 <net_buf_unref>
		return -ENOTCONN;
   12c50:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   12c54:	b002      	add	sp, #8
   12c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   12c5a:	b147      	cbz	r7, 12c6e <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   12c5c:	463b      	mov	r3, r7
   12c5e:	4622      	mov	r2, r4
   12c60:	2104      	movs	r1, #4
   12c62:	4628      	mov	r0, r5
   12c64:	f8cd 8000 	str.w	r8, [sp]
   12c68:	f009 f950 	bl	1bf0c <bt_l2cap_send_cb>
   12c6c:	e7f2      	b.n	12c54 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   12c6e:	f100 070c 	add.w	r7, r0, #12
   12c72:	4621      	mov	r1, r4
   12c74:	4638      	mov	r0, r7
   12c76:	f002 fb35 	bl	152e4 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   12c7a:	2200      	movs	r2, #0
   12c7c:	2300      	movs	r3, #0
   12c7e:	4638      	mov	r0, r7
   12c80:	f002 fadc 	bl	1523c <net_buf_get>
	if (!buf) {
   12c84:	4605      	mov	r5, r0
   12c86:	b908      	cbnz	r0, 12c8c <bt_att_send+0x88>
	return 0;
   12c88:	2000      	movs	r0, #0
   12c8a:	e7e3      	b.n	12c54 <bt_att_send+0x50>
	return list->head;
   12c8c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c8e:	b1c3      	cbz	r3, 12cc2 <bt_att_send+0xbe>
   12c90:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12c94:	d015      	beq.n	12cc2 <bt_att_send+0xbe>
	return node->next;
   12c96:	681c      	ldr	r4, [r3, #0]
   12c98:	b10c      	cbz	r4, 12c9e <bt_att_send+0x9a>
   12c9a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   12c9e:	2200      	movs	r2, #0
   12ca0:	4629      	mov	r1, r5
   12ca2:	f009 fb14 	bl	1c2ce <bt_att_chan_send>
		if (err >= 0) {
   12ca6:	2800      	cmp	r0, #0
   12ca8:	daee      	bge.n	12c88 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12caa:	b154      	cbz	r4, 12cc2 <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12cac:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   12cb0:	d004      	beq.n	12cbc <bt_att_send+0xb8>
	return node->next;
   12cb2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12cb6:	b10b      	cbz	r3, 12cbc <bt_att_send+0xb8>
   12cb8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   12cbc:	4620      	mov	r0, r4
   12cbe:	461c      	mov	r4, r3
   12cc0:	e7ed      	b.n	12c9e <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   12cc2:	4629      	mov	r1, r5
   12cc4:	4638      	mov	r0, r7
   12cc6:	f00a ff76 	bl	1dbb6 <k_queue_prepend>
   12cca:	e7dd      	b.n	12c88 <bt_att_send+0x84>
   12ccc:	00021af6 	.word	0x00021af6
   12cd0:	0001f98f 	.word	0x0001f98f

00012cd4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   12cd4:	b538      	push	{r3, r4, r5, lr}
   12cd6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   12cd8:	4605      	mov	r5, r0
   12cda:	b950      	cbnz	r0, 12cf2 <bt_att_req_send+0x1e>
   12cdc:	4918      	ldr	r1, [pc, #96]	; (12d40 <bt_att_req_send+0x6c>)
   12cde:	4819      	ldr	r0, [pc, #100]	; (12d44 <bt_att_req_send+0x70>)
   12ce0:	f640 32eb 	movw	r2, #3051	; 0xbeb
   12ce4:	f007 fb9f 	bl	1a426 <printk>
   12ce8:	f640 31eb 	movw	r1, #3051	; 0xbeb
   12cec:	4814      	ldr	r0, [pc, #80]	; (12d40 <bt_att_req_send+0x6c>)
   12cee:	f007 fe40 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(req);
   12cf2:	b954      	cbnz	r4, 12d0a <bt_att_req_send+0x36>
   12cf4:	4912      	ldr	r1, [pc, #72]	; (12d40 <bt_att_req_send+0x6c>)
   12cf6:	4813      	ldr	r0, [pc, #76]	; (12d44 <bt_att_req_send+0x70>)
   12cf8:	f640 32ec 	movw	r2, #3052	; 0xbec
   12cfc:	f007 fb93 	bl	1a426 <printk>
   12d00:	f640 31ec 	movw	r1, #3052	; 0xbec
   12d04:	480e      	ldr	r0, [pc, #56]	; (12d40 <bt_att_req_send+0x6c>)
   12d06:	f007 fe34 	bl	1a972 <assert_post_action>

	att = att_get(conn);
   12d0a:	4628      	mov	r0, r5
   12d0c:	f7fe fff6 	bl	11cfc <att_get>
	if (!att) {
   12d10:	4605      	mov	r5, r0
   12d12:	b930      	cbnz	r0, 12d22 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   12d14:	6920      	ldr	r0, [r4, #16]
   12d16:	f002 fb13 	bl	15340 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   12d1a:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   12d1e:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   12d20:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   12d22:	2300      	movs	r3, #0
   12d24:	6023      	str	r3, [r4, #0]
	return list->tail;
   12d26:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   12d28:	b933      	cbnz	r3, 12d38 <bt_att_req_send+0x64>
	list->head = node;
   12d2a:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   12d2e:	4628      	mov	r0, r5
   12d30:	f009 fbc8 	bl	1c4c4 <att_req_send_process>
	return 0;
   12d34:	2000      	movs	r0, #0
   12d36:	e7f3      	b.n	12d20 <bt_att_req_send+0x4c>
	parent->next = child;
   12d38:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12d3a:	6084      	str	r4, [r0, #8]
}
   12d3c:	e7f7      	b.n	12d2e <bt_att_req_send+0x5a>
   12d3e:	bf00      	nop
   12d40:	00021af6 	.word	0x00021af6
   12d44:	0001f98f 	.word	0x0001f98f

00012d48 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   12d48:	b510      	push	{r4, lr}
   12d4a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   12d4c:	b350      	cbz	r0, 12da4 <bt_att_req_cancel+0x5c>
   12d4e:	b349      	cbz	r1, 12da4 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   12d50:	f7fe ffd4 	bl	11cfc <att_get>
	if (!att) {
   12d54:	b330      	cbz	r0, 12da4 <bt_att_req_cancel+0x5c>
	return list->head;
   12d56:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12d58:	b15b      	cbz	r3, 12d72 <bt_att_req_cancel+0x2a>
   12d5a:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   12d5e:	d008      	beq.n	12d72 <bt_att_req_cancel+0x2a>
	return node->next;
   12d60:	681b      	ldr	r3, [r3, #0]
   12d62:	b10b      	cbz	r3, 12d68 <bt_att_req_cancel+0x20>
   12d64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   12d68:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   12d6c:	4294      	cmp	r4, r2
   12d6e:	d006      	beq.n	12d7e <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12d70:	b96b      	cbnz	r3, 12d8e <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   12d72:	3004      	adds	r0, #4
   12d74:	4621      	mov	r1, r4
   12d76:	f009 fae9 	bl	1c34c <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   12d7a:	4620      	mov	r0, r4
   12d7c:	e003      	b.n	12d86 <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   12d7e:	4620      	mov	r0, r4
	chan->req = &cancel;
   12d80:	4b09      	ldr	r3, [pc, #36]	; (12da8 <bt_att_req_cancel+0x60>)
   12d82:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   12d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   12d8a:	f009 bc49 	b.w	1c620 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12d8e:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   12d92:	d004      	beq.n	12d9e <bt_att_req_cancel+0x56>
	return node->next;
   12d94:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12d98:	b10a      	cbz	r2, 12d9e <bt_att_req_cancel+0x56>
   12d9a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   12d9e:	4619      	mov	r1, r3
   12da0:	4613      	mov	r3, r2
   12da2:	e7e1      	b.n	12d68 <bt_att_req_cancel+0x20>
}
   12da4:	bd10      	pop	{r4, pc}
   12da6:	bf00      	nop
   12da8:	2000ab74 	.word	0x2000ab74

00012dac <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   12dac:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   12dae:	4618      	mov	r0, r3
{
   12db0:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   12db2:	4907      	ldr	r1, [pc, #28]	; (12dd0 <db_hash_set+0x24>)
   12db4:	2210      	movs	r2, #16
   12db6:	47a0      	blx	r4
	if (len < 0) {
   12db8:	1e04      	subs	r4, r0, #0
   12dba:	da06      	bge.n	12dca <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   12dbc:	4622      	mov	r2, r4
   12dbe:	2145      	movs	r1, #69	; 0x45
   12dc0:	4804      	ldr	r0, [pc, #16]	; (12dd4 <db_hash_set+0x28>)
   12dc2:	f007 fb30 	bl	1a426 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   12dc6:	4620      	mov	r0, r4
   12dc8:	bd10      	pop	{r4, pc}
	return 0;
   12dca:	2400      	movs	r4, #0
   12dcc:	e7fb      	b.n	12dc6 <db_hash_set+0x1a>
   12dce:	bf00      	nop
   12dd0:	2000c7bc 	.word	0x2000c7bc
   12dd4:	00021c4b 	.word	0x00021c4b

00012dd8 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   12dd8:	2210      	movs	r2, #16
{
   12dda:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   12ddc:	4906      	ldr	r1, [pc, #24]	; (12df8 <db_hash_store+0x20>)
   12dde:	4807      	ldr	r0, [pc, #28]	; (12dfc <db_hash_store+0x24>)
   12de0:	f7f8 fcec 	bl	b7bc <settings_save_one>
	if (err) {
   12de4:	4602      	mov	r2, r0
   12de6:	b128      	cbz	r0, 12df4 <db_hash_store+0x1c>
}
   12de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   12dec:	2145      	movs	r1, #69	; 0x45
   12dee:	4804      	ldr	r0, [pc, #16]	; (12e00 <db_hash_store+0x28>)
   12df0:	f007 bb19 	b.w	1a426 <printk>
}
   12df4:	bd08      	pop	{r3, pc}
   12df6:	bf00      	nop
   12df8:	2000c7ac 	.word	0x2000c7ac
   12dfc:	00021c71 	.word	0x00021c71
   12e00:	00021c79 	.word	0x00021c79

00012e04 <find_cf_cfg>:
{
   12e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12e06:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12e08:	2600      	movs	r6, #0
   12e0a:	4d0e      	ldr	r5, [pc, #56]	; (12e44 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   12e0c:	462f      	mov	r7, r5
		if (!conn) {
   12e0e:	1c6a      	adds	r2, r5, #1
   12e10:	b954      	cbnz	r4, 12e28 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   12e12:	4669      	mov	r1, sp
   12e14:	4610      	mov	r0, r2
   12e16:	9400      	str	r4, [sp, #0]
   12e18:	f8cd 4003 	str.w	r4, [sp, #3]
   12e1c:	f009 fd02 	bl	1c824 <bt_addr_le_cmp>
   12e20:	b940      	cbnz	r0, 12e34 <find_cf_cfg+0x30>
}
   12e22:	4638      	mov	r0, r7
   12e24:	b003      	add	sp, #12
   12e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12e28:	4620      	mov	r0, r4
   12e2a:	7829      	ldrb	r1, [r5, #0]
   12e2c:	f008 ff9a 	bl	1bd64 <bt_conn_is_peer_addr_le>
   12e30:	2800      	cmp	r0, #0
   12e32:	d1f6      	bne.n	12e22 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12e34:	3601      	adds	r6, #1
   12e36:	2e0a      	cmp	r6, #10
   12e38:	f105 0510 	add.w	r5, r5, #16
   12e3c:	d1e6      	bne.n	12e0c <find_cf_cfg+0x8>
	return NULL;
   12e3e:	2700      	movs	r7, #0
   12e40:	e7ef      	b.n	12e22 <find_cf_cfg+0x1e>
   12e42:	bf00      	nop
   12e44:	2000ab8c 	.word	0x2000ab8c

00012e48 <find_sc_cfg>:
{
   12e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e4a:	4606      	mov	r6, r0
   12e4c:	460f      	mov	r7, r1
   12e4e:	2400      	movs	r4, #0
   12e50:	4d09      	ldr	r5, [pc, #36]	; (12e78 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   12e52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   12e56:	42b3      	cmp	r3, r6
   12e58:	d107      	bne.n	12e6a <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   12e5a:	4639      	mov	r1, r7
   12e5c:	4628      	mov	r0, r5
   12e5e:	f009 fce1 	bl	1c824 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   12e62:	b910      	cbnz	r0, 12e6a <find_sc_cfg+0x22>
			return &sc_cfg[i];
   12e64:	4805      	ldr	r0, [pc, #20]	; (12e7c <find_sc_cfg+0x34>)
   12e66:	4420      	add	r0, r4
}
   12e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12e6a:	340c      	adds	r4, #12
   12e6c:	2c78      	cmp	r4, #120	; 0x78
   12e6e:	f105 050c 	add.w	r5, r5, #12
   12e72:	d1ee      	bne.n	12e52 <find_sc_cfg+0xa>
	return NULL;
   12e74:	2000      	movs	r0, #0
   12e76:	e7f7      	b.n	12e68 <find_sc_cfg+0x20>
   12e78:	2000c01f 	.word	0x2000c01f
   12e7c:	2000c01e 	.word	0x2000c01e

00012e80 <gatt_sub_find>:
{
   12e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12e82:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   12e84:	2600      	movs	r6, #0
   12e86:	4d0e      	ldr	r5, [pc, #56]	; (12ec0 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   12e88:	462f      	mov	r7, r5
		if (!conn) {
   12e8a:	1c6a      	adds	r2, r5, #1
   12e8c:	b954      	cbnz	r4, 12ea4 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   12e8e:	4669      	mov	r1, sp
   12e90:	4610      	mov	r0, r2
   12e92:	9400      	str	r4, [sp, #0]
   12e94:	f8cd 4003 	str.w	r4, [sp, #3]
   12e98:	f009 fcc4 	bl	1c824 <bt_addr_le_cmp>
   12e9c:	b940      	cbnz	r0, 12eb0 <gatt_sub_find+0x30>
}
   12e9e:	4638      	mov	r0, r7
   12ea0:	b003      	add	sp, #12
   12ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   12ea4:	4620      	mov	r0, r4
   12ea6:	7829      	ldrb	r1, [r5, #0]
   12ea8:	f008 ff5c 	bl	1bd64 <bt_conn_is_peer_addr_le>
   12eac:	2800      	cmp	r0, #0
   12eae:	d1f6      	bne.n	12e9e <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   12eb0:	3601      	adds	r6, #1
   12eb2:	2e0a      	cmp	r6, #10
   12eb4:	f105 0510 	add.w	r5, r5, #16
   12eb8:	d1e6      	bne.n	12e88 <gatt_sub_find+0x8>
	return NULL;
   12eba:	2700      	movs	r7, #0
   12ebc:	e7ef      	b.n	12e9e <gatt_sub_find+0x1e>
   12ebe:	bf00      	nop
   12ec0:	2000ad24 	.word	0x2000ad24

00012ec4 <find_cf_cfg_by_addr>:
{
   12ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ec6:	4606      	mov	r6, r0
   12ec8:	460f      	mov	r7, r1
   12eca:	2400      	movs	r4, #0
   12ecc:	4d09      	ldr	r5, [pc, #36]	; (12ef4 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   12ece:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   12ed2:	42b3      	cmp	r3, r6
   12ed4:	d107      	bne.n	12ee6 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   12ed6:	4629      	mov	r1, r5
   12ed8:	4638      	mov	r0, r7
   12eda:	f009 fca3 	bl	1c824 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   12ede:	b910      	cbnz	r0, 12ee6 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   12ee0:	4805      	ldr	r0, [pc, #20]	; (12ef8 <find_cf_cfg_by_addr+0x34>)
   12ee2:	4420      	add	r0, r4
}
   12ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12ee6:	3410      	adds	r4, #16
   12ee8:	2ca0      	cmp	r4, #160	; 0xa0
   12eea:	f105 0510 	add.w	r5, r5, #16
   12eee:	d1ee      	bne.n	12ece <find_cf_cfg_by_addr+0xa>
	return NULL;
   12ef0:	2000      	movs	r0, #0
   12ef2:	e7f7      	b.n	12ee4 <find_cf_cfg_by_addr+0x20>
   12ef4:	2000ab8d 	.word	0x2000ab8d
   12ef8:	2000ab8c 	.word	0x2000ab8c

00012efc <bt_gatt_attr_write_ccc>:
{
   12efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12f00:	461f      	mov	r7, r3
   12f02:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12f06:	4604      	mov	r4, r0
   12f08:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   12f0a:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   12f0e:	2b00      	cmp	r3, #0
   12f10:	d141      	bne.n	12f96 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   12f12:	1e7b      	subs	r3, r7, #1
   12f14:	2b01      	cmp	r3, #1
   12f16:	d841      	bhi.n	12f9c <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   12f18:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   12f1a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   12f1c:	4649      	mov	r1, r9
   12f1e:	bf14      	ite	ne
   12f20:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   12f22:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   12f24:	f009 fc81 	bl	1c82a <find_ccc_cfg>
	if (!cfg) {
   12f28:	4605      	mov	r5, r0
   12f2a:	b9b0      	cbnz	r0, 12f5a <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   12f2c:	b916      	cbnz	r6, 12f34 <bt_gatt_attr_write_ccc+0x38>
			return len;
   12f2e:	4638      	mov	r0, r7
}
   12f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   12f34:	4649      	mov	r1, r9
   12f36:	f009 fc78 	bl	1c82a <find_ccc_cfg>
		if (!cfg) {
   12f3a:	4605      	mov	r5, r0
   12f3c:	b930      	cbnz	r0, 12f4c <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   12f3e:	4819      	ldr	r0, [pc, #100]	; (12fa4 <bt_gatt_attr_write_ccc+0xa8>)
   12f40:	2157      	movs	r1, #87	; 0x57
   12f42:	f007 fa70 	bl	1a426 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   12f46:	f06f 0010 	mvn.w	r0, #16
   12f4a:	e7f1      	b.n	12f30 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12f4c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   12f50:	3001      	adds	r0, #1
   12f52:	f009 fca3 	bl	1c89c <bt_addr_le_copy>
		cfg->id = conn->id;
   12f56:	7a23      	ldrb	r3, [r4, #8]
   12f58:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   12f5a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
   12f5e:	b973      	cbnz	r3, 12f7e <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   12f60:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
	cfg->value = value;
   12f64:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   12f66:	42b3      	cmp	r3, r6
   12f68:	d003      	beq.n	12f72 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   12f6a:	4649      	mov	r1, r9
   12f6c:	4640      	mov	r0, r8
   12f6e:	f009 fbd2 	bl	1c716 <gatt_ccc_changed>
	if (!value) {
   12f72:	2e00      	cmp	r6, #0
   12f74:	d1db      	bne.n	12f2e <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   12f76:	4628      	mov	r0, r5
   12f78:	f009 fc93 	bl	1c8a2 <clear_ccc_cfg>
   12f7c:	e7d7      	b.n	12f2e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   12f7e:	4632      	mov	r2, r6
   12f80:	4641      	mov	r1, r8
   12f82:	4620      	mov	r0, r4
   12f84:	4798      	blx	r3
		if (write < 0) {
   12f86:	2800      	cmp	r0, #0
   12f88:	dbd2      	blt.n	12f30 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   12f8a:	1e44      	subs	r4, r0, #1
   12f8c:	2c01      	cmp	r4, #1
   12f8e:	d9e7      	bls.n	12f60 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   12f90:	f06f 000d 	mvn.w	r0, #13
   12f94:	e7cc      	b.n	12f30 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12f96:	f06f 0006 	mvn.w	r0, #6
   12f9a:	e7c9      	b.n	12f30 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12f9c:	f06f 000c 	mvn.w	r0, #12
   12fa0:	e7c6      	b.n	12f30 <bt_gatt_attr_write_ccc+0x34>
   12fa2:	bf00      	nop
   12fa4:	00021ca4 	.word	0x00021ca4

00012fa8 <cf_write>:
{
   12fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12fac:	461f      	mov	r7, r3
   12fae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12fb2:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   12fb4:	2b01      	cmp	r3, #1
{
   12fb6:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   12fb8:	d845      	bhi.n	13046 <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   12fba:	443b      	add	r3, r7
   12fbc:	2b01      	cmp	r3, #1
   12fbe:	463d      	mov	r5, r7
   12fc0:	dc44      	bgt.n	1304c <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   12fc2:	f7ff ff1f 	bl	12e04 <find_cf_cfg>
	if (!cfg) {
   12fc6:	4604      	mov	r4, r0
   12fc8:	b918      	cbnz	r0, 12fd2 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   12fca:	f7ff ff1b 	bl	12e04 <find_cf_cfg>
	if (!cfg) {
   12fce:	4604      	mov	r4, r0
   12fd0:	b1d8      	cbz	r0, 1300a <cf_write+0x62>
   12fd2:	4632      	mov	r2, r6
   12fd4:	f104 0008 	add.w	r0, r4, #8
   12fd8:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   12fdc:	4596      	cmp	lr, r2
   12fde:	d11d      	bne.n	1301c <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   12fe0:	b12f      	cbz	r7, 12fee <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   12fe2:	7833      	ldrb	r3, [r6, #0]
   12fe4:	7a22      	ldrb	r2, [r4, #8]
   12fe6:	f003 0307 	and.w	r3, r3, #7
   12fea:	4313      	orrs	r3, r2
   12fec:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12fee:	f108 0188 	add.w	r1, r8, #136	; 0x88
   12ff2:	1c60      	adds	r0, r4, #1
   12ff4:	f009 fc52 	bl	1c89c <bt_addr_le_copy>
	cfg->id = conn->id;
   12ff8:	4620      	mov	r0, r4
   12ffa:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12ffe:	2101      	movs	r1, #1
   13000:	f800 3b0c 	strb.w	r3, [r0], #12
   13004:	f009 fc5b 	bl	1c8be <atomic_or>
}
   13008:	e005      	b.n	13016 <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   1300a:	2157      	movs	r1, #87	; 0x57
   1300c:	4812      	ldr	r0, [pc, #72]	; (13058 <cf_write+0xb0>)
   1300e:	f007 fa0a 	bl	1a426 <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13012:	f06f 0510 	mvn.w	r5, #16
}
   13016:	4628      	mov	r0, r5
   13018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1301c:	2300      	movs	r3, #0
   1301e:	f812 1b01 	ldrb.w	r1, [r2], #1
   13022:	f810 cb01 	ldrb.w	ip, [r0], #1
   13026:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   1302a:	fa21 f903 	lsr.w	r9, r1, r3
   1302e:	f019 0f01 	tst.w	r9, #1
   13032:	d004      	beq.n	1303e <cf_write+0x96>
   13034:	fa2c f903 	lsr.w	r9, ip, r3
   13038:	f019 0f01 	tst.w	r9, #1
   1303c:	d109      	bne.n	13052 <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   1303e:	3301      	adds	r3, #1
   13040:	2b03      	cmp	r3, #3
   13042:	d1f2      	bne.n	1302a <cf_write+0x82>
   13044:	e7ca      	b.n	12fdc <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13046:	f06f 0506 	mvn.w	r5, #6
   1304a:	e7e4      	b.n	13016 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1304c:	f06f 050c 	mvn.w	r5, #12
   13050:	e7e1      	b.n	13016 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   13052:	f06f 0512 	mvn.w	r5, #18
   13056:	e7de      	b.n	13016 <cf_write+0x6e>
   13058:	00021cc3 	.word	0x00021cc3

0001305c <sc_store>:
{
   1305c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1305e:	4605      	mov	r5, r0
   13060:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   13064:	4604      	mov	r4, r0
   13066:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   13068:	b1ca      	cbz	r2, 1309e <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1306a:	ae02      	add	r6, sp, #8
   1306c:	2104      	movs	r1, #4
   1306e:	4630      	mov	r0, r6
   13070:	f007 f93f 	bl	1a2f2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   13074:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   13076:	462b      	mov	r3, r5
   13078:	2124      	movs	r1, #36	; 0x24
   1307a:	4a0a      	ldr	r2, [pc, #40]	; (130a4 <sc_store+0x48>)
   1307c:	a803      	add	r0, sp, #12
   1307e:	f7fb f9cd 	bl	e41c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   13082:	2204      	movs	r2, #4
   13084:	f104 0108 	add.w	r1, r4, #8
   13088:	a803      	add	r0, sp, #12
   1308a:	f7f8 fb97 	bl	b7bc <settings_save_one>
	if (err) {
   1308e:	4602      	mov	r2, r0
   13090:	b118      	cbz	r0, 1309a <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   13092:	2145      	movs	r1, #69	; 0x45
   13094:	4804      	ldr	r0, [pc, #16]	; (130a8 <sc_store+0x4c>)
   13096:	f007 f9c6 	bl	1a426 <printk>
}
   1309a:	b00c      	add	sp, #48	; 0x30
   1309c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1309e:	9200      	str	r2, [sp, #0]
   130a0:	e7e9      	b.n	13076 <sc_store+0x1a>
   130a2:	bf00      	nop
   130a4:	00022013 	.word	0x00022013
   130a8:	00021cf4 	.word	0x00021cf4

000130ac <sc_save>:
{
   130ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   130b0:	4680      	mov	r8, r0
   130b2:	460f      	mov	r7, r1
   130b4:	4616      	mov	r6, r2
   130b6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   130b8:	f7ff fec6 	bl	12e48 <find_sc_cfg>
	if (!cfg) {
   130bc:	4604      	mov	r4, r0
   130be:	b998      	cbnz	r0, 130e8 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   130c0:	4669      	mov	r1, sp
   130c2:	9000      	str	r0, [sp, #0]
   130c4:	f8cd 0003 	str.w	r0, [sp, #3]
   130c8:	f7ff febe 	bl	12e48 <find_sc_cfg>
		if (!cfg) {
   130cc:	4604      	mov	r4, r0
   130ce:	b930      	cbnz	r0, 130de <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   130d0:	2145      	movs	r1, #69	; 0x45
   130d2:	4813      	ldr	r0, [pc, #76]	; (13120 <sc_save+0x74>)
   130d4:	f007 f9a7 	bl	1a426 <printk>
}
   130d8:	b002      	add	sp, #8
   130da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   130de:	4639      	mov	r1, r7
		cfg->id = id;
   130e0:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   130e4:	f009 fbda 	bl	1c89c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   130e8:	8922      	ldrh	r2, [r4, #8]
   130ea:	8963      	ldrh	r3, [r4, #10]
   130ec:	b97a      	cbnz	r2, 1310e <sc_save+0x62>
   130ee:	b983      	cbnz	r3, 13112 <sc_save+0x66>
		cfg->data.start = start;
   130f0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   130f2:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   130f4:	4621      	mov	r1, r4
   130f6:	f811 0b01 	ldrb.w	r0, [r1], #1
   130fa:	f008 fd9f 	bl	1bc3c <bt_addr_le_is_bonded>
   130fe:	2800      	cmp	r0, #0
   13100:	d0ea      	beq.n	130d8 <sc_save+0x2c>
		sc_store(cfg);
   13102:	4620      	mov	r0, r4
}
   13104:	b002      	add	sp, #8
   13106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1310a:	f7ff bfa7 	b.w	1305c <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1310e:	4296      	cmp	r6, r2
   13110:	d302      	bcc.n	13118 <sc_save+0x6c>
   13112:	429d      	cmp	r5, r3
   13114:	d8ed      	bhi.n	130f2 <sc_save+0x46>
   13116:	e7df      	b.n	130d8 <sc_save+0x2c>
	if (*end < new_end) {
   13118:	429d      	cmp	r5, r3
		*start = new_start;
   1311a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1311c:	d9ea      	bls.n	130f4 <sc_save+0x48>
   1311e:	e7e8      	b.n	130f2 <sc_save+0x46>
   13120:	00021d15 	.word	0x00021d15

00013124 <sc_set>:
{
   13124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13128:	460e      	mov	r6, r1
   1312a:	4690      	mov	r8, r2
   1312c:	4699      	mov	r9, r3
	if (!name) {
   1312e:	4604      	mov	r4, r0
{
   13130:	b087      	sub	sp, #28
	if (!name) {
   13132:	b948      	cbnz	r0, 13148 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13134:	2145      	movs	r1, #69	; 0x45
   13136:	4829      	ldr	r0, [pc, #164]	; (131dc <sc_set+0xb8>)
   13138:	f007 f975 	bl	1a426 <printk>
		return -EINVAL;
   1313c:	f06f 0515 	mvn.w	r5, #21
}
   13140:	4628      	mov	r0, r5
   13142:	b007      	add	sp, #28
   13144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   13148:	a902      	add	r1, sp, #8
   1314a:	f008 fc01 	bl	1b950 <bt_settings_decode_key>
	if (err) {
   1314e:	4605      	mov	r5, r0
   13150:	b128      	cbz	r0, 1315e <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   13152:	4622      	mov	r2, r4
   13154:	2145      	movs	r1, #69	; 0x45
   13156:	4822      	ldr	r0, [pc, #136]	; (131e0 <sc_set+0xbc>)
   13158:	f007 f965 	bl	1a426 <printk>
   1315c:	e7ee      	b.n	1313c <sc_set+0x18>
	settings_name_next(name, &next);
   1315e:	4620      	mov	r0, r4
   13160:	a901      	add	r1, sp, #4
   13162:	f007 fc7f 	bl	1aa64 <settings_name_next>
	if (!next) {
   13166:	9801      	ldr	r0, [sp, #4]
   13168:	b1d8      	cbz	r0, 131a2 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   1316a:	220a      	movs	r2, #10
   1316c:	4629      	mov	r1, r5
   1316e:	f008 fad0 	bl	1b712 <strtol>
   13172:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   13174:	4638      	mov	r0, r7
   13176:	a902      	add	r1, sp, #8
   13178:	f7ff fe66 	bl	12e48 <find_sc_cfg>
	if (!cfg && len_rd) {
   1317c:	4604      	mov	r4, r0
   1317e:	bb28      	cbnz	r0, 131cc <sc_set+0xa8>
   13180:	2e00      	cmp	r6, #0
   13182:	d0dd      	beq.n	13140 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13184:	a904      	add	r1, sp, #16
   13186:	9004      	str	r0, [sp, #16]
   13188:	f8cd 0013 	str.w	r0, [sp, #19]
   1318c:	f7ff fe5c 	bl	12e48 <find_sc_cfg>
		if (!cfg) {
   13190:	4604      	mov	r4, r0
   13192:	b940      	cbnz	r0, 131a6 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   13194:	2145      	movs	r1, #69	; 0x45
   13196:	4813      	ldr	r0, [pc, #76]	; (131e4 <sc_set+0xc0>)
   13198:	f007 f945 	bl	1a426 <printk>
			return -ENOMEM;
   1319c:	f06f 050b 	mvn.w	r5, #11
   131a0:	e7ce      	b.n	13140 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   131a2:	462f      	mov	r7, r5
   131a4:	e7e6      	b.n	13174 <sc_set+0x50>
		cfg->id = id;
   131a6:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   131aa:	a902      	add	r1, sp, #8
   131ac:	f009 fb76 	bl	1c89c <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   131b0:	f104 0108 	add.w	r1, r4, #8
   131b4:	2204      	movs	r2, #4
   131b6:	4648      	mov	r0, r9
   131b8:	47c0      	blx	r8
		if (len < 0) {
   131ba:	1e04      	subs	r4, r0, #0
   131bc:	dac0      	bge.n	13140 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   131be:	4622      	mov	r2, r4
   131c0:	2145      	movs	r1, #69	; 0x45
   131c2:	4809      	ldr	r0, [pc, #36]	; (131e8 <sc_set+0xc4>)
   131c4:	f007 f92f 	bl	1a426 <printk>
			return len;
   131c8:	4625      	mov	r5, r4
   131ca:	e7b9      	b.n	13140 <sc_set+0x1c>
	if (len_rd) {
   131cc:	2e00      	cmp	r6, #0
   131ce:	d1ef      	bne.n	131b0 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   131d0:	220c      	movs	r2, #12
   131d2:	4631      	mov	r1, r6
   131d4:	f008 fb96 	bl	1b904 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   131d8:	e7b2      	b.n	13140 <sc_set+0x1c>
   131da:	bf00      	nop
   131dc:	00020c6e 	.word	0x00020c6e
   131e0:	00021d39 	.word	0x00021d39
   131e4:	00021d5a 	.word	0x00021d5a
   131e8:	00021c4b 	.word	0x00021c4b

000131ec <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   131ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131f0:	4606      	mov	r6, r0
   131f2:	4688      	mov	r8, r1
   131f4:	4617      	mov	r7, r2
	if (params) {
   131f6:	461c      	mov	r4, r3
   131f8:	b31b      	cbz	r3, 13242 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   131fa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   131fe:	2100      	movs	r1, #0
   13200:	f7ff fc3c 	bl	12a7c <bt_att_req_alloc>
		if (!req) {
   13204:	4605      	mov	r5, r0
   13206:	b920      	cbnz	r0, 13212 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   13208:	f06f 040b 	mvn.w	r4, #11
}
   1320c:	4620      	mov	r0, r4
   1320e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   13212:	2300      	movs	r3, #0
		req->user_data = params;
   13214:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   13216:	4601      	mov	r1, r0
		req->buf = buf;
   13218:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   1321c:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   1321e:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   13220:	4630      	mov	r0, r6
   13222:	f7ff fd57 	bl	12cd4 <bt_att_req_send>
		if (err) {
   13226:	4604      	mov	r4, r0
   13228:	2800      	cmp	r0, #0
   1322a:	d0ef      	beq.n	1320c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   1322c:	4628      	mov	r0, r5
   1322e:	f7ff fc3b 	bl	12aa8 <bt_att_req_free>
	if (err) {
   13232:	2c00      	cmp	r4, #0
   13234:	d0ea      	beq.n	1320c <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   13236:	4622      	mov	r2, r4
   13238:	2145      	movs	r1, #69	; 0x45
   1323a:	4804      	ldr	r0, [pc, #16]	; (1324c <gatt_send.constprop.0+0x60>)
   1323c:	f007 f8f3 	bl	1a426 <printk>
   13240:	e7e4      	b.n	1320c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   13242:	461a      	mov	r2, r3
   13244:	f7ff fcde 	bl	12c04 <bt_att_send>
   13248:	4604      	mov	r4, r0
   1324a:	e7f2      	b.n	13232 <gatt_send.constprop.0+0x46>
   1324c:	00021d81 	.word	0x00021d81

00013250 <cf_set>:
{
   13250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13254:	4689      	mov	r9, r1
   13256:	4617      	mov	r7, r2
   13258:	4698      	mov	r8, r3
	if (!name) {
   1325a:	4605      	mov	r5, r0
{
   1325c:	b085      	sub	sp, #20
	if (!name) {
   1325e:	b948      	cbnz	r0, 13274 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13260:	2145      	movs	r1, #69	; 0x45
   13262:	4826      	ldr	r0, [pc, #152]	; (132fc <cf_set+0xac>)
   13264:	f007 f8df 	bl	1a426 <printk>
		return -EINVAL;
   13268:	f06f 0415 	mvn.w	r4, #21
}
   1326c:	4620      	mov	r0, r4
   1326e:	b005      	add	sp, #20
   13270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   13274:	a902      	add	r1, sp, #8
   13276:	f008 fb6b 	bl	1b950 <bt_settings_decode_key>
	if (err) {
   1327a:	4604      	mov	r4, r0
   1327c:	b128      	cbz	r0, 1328a <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1327e:	462a      	mov	r2, r5
   13280:	2145      	movs	r1, #69	; 0x45
   13282:	481f      	ldr	r0, [pc, #124]	; (13300 <cf_set+0xb0>)
   13284:	f007 f8cf 	bl	1a426 <printk>
   13288:	e7ee      	b.n	13268 <cf_set+0x18>
	settings_name_next(name, &next);
   1328a:	4628      	mov	r0, r5
   1328c:	a901      	add	r1, sp, #4
   1328e:	f007 fbe9 	bl	1aa64 <settings_name_next>
	if (!next) {
   13292:	9801      	ldr	r0, [sp, #4]
   13294:	b1a8      	cbz	r0, 132c2 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   13296:	220a      	movs	r2, #10
   13298:	4621      	mov	r1, r4
   1329a:	f008 fa3a 	bl	1b712 <strtol>
   1329e:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   132a0:	4630      	mov	r0, r6
   132a2:	a902      	add	r1, sp, #8
   132a4:	f7ff fe0e 	bl	12ec4 <find_cf_cfg_by_addr>
	if (!cfg) {
   132a8:	4605      	mov	r5, r0
   132aa:	b988      	cbnz	r0, 132d0 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   132ac:	f7ff fdaa 	bl	12e04 <find_cf_cfg>
		if (!cfg) {
   132b0:	4605      	mov	r5, r0
   132b2:	b940      	cbnz	r0, 132c6 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   132b4:	2145      	movs	r1, #69	; 0x45
   132b6:	4813      	ldr	r0, [pc, #76]	; (13304 <cf_set+0xb4>)
   132b8:	f007 f8b5 	bl	1a426 <printk>
			return -ENOMEM;
   132bc:	f06f 040b 	mvn.w	r4, #11
   132c0:	e7d4      	b.n	1326c <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   132c2:	4626      	mov	r6, r4
   132c4:	e7ec      	b.n	132a0 <cf_set+0x50>
		cfg->id = id;
   132c6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   132ca:	a902      	add	r1, sp, #8
   132cc:	f009 fae6 	bl	1c89c <bt_addr_le_copy>
	if (len_rd) {
   132d0:	f1b9 0f00 	cmp.w	r9, #0
   132d4:	d00d      	beq.n	132f2 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   132d6:	f105 0108 	add.w	r1, r5, #8
   132da:	2201      	movs	r2, #1
   132dc:	4640      	mov	r0, r8
   132de:	47b8      	blx	r7
		if (len < 0) {
   132e0:	1e05      	subs	r5, r0, #0
   132e2:	dac3      	bge.n	1326c <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   132e4:	462a      	mov	r2, r5
   132e6:	2145      	movs	r1, #69	; 0x45
   132e8:	4807      	ldr	r0, [pc, #28]	; (13308 <cf_set+0xb8>)
   132ea:	f007 f89c 	bl	1a426 <printk>
			return len;
   132ee:	462c      	mov	r4, r5
   132f0:	e7bc      	b.n	1326c <cf_set+0x1c>
		clear_cf_cfg(cfg);
   132f2:	4628      	mov	r0, r5
   132f4:	f009 fb18 	bl	1c928 <clear_cf_cfg>
   132f8:	e7b8      	b.n	1326c <cf_set+0x1c>
   132fa:	bf00      	nop
   132fc:	00020c6e 	.word	0x00020c6e
   13300:	00021d39 	.word	0x00021d39
   13304:	00021da0 	.word	0x00021da0
   13308:	00021c4b 	.word	0x00021c4b

0001330c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1330c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1330e:	6881      	ldr	r1, [r0, #8]
{
   13310:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13312:	4a07      	ldr	r2, [pc, #28]	; (13330 <remove_peer_from_attr+0x24>)
   13314:	4291      	cmp	r1, r2
   13316:	d109      	bne.n	1332c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   13318:	791a      	ldrb	r2, [r3, #4]
   1331a:	6819      	ldr	r1, [r3, #0]
   1331c:	68c0      	ldr	r0, [r0, #12]
   1331e:	f009 faa3 	bl	1c868 <ccc_find_cfg>
	if (cfg) {
   13322:	b118      	cbz	r0, 1332c <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   13324:	220a      	movs	r2, #10
   13326:	2100      	movs	r1, #0
   13328:	f008 faec 	bl	1b904 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1332c:	2001      	movs	r0, #1
   1332e:	bd08      	pop	{r3, pc}
   13330:	00012efd 	.word	0x00012efd

00013334 <ccc_load>:
{
   13334:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13336:	4b21      	ldr	r3, [pc, #132]	; (133bc <ccc_load+0x88>)
{
   13338:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1333a:	6882      	ldr	r2, [r0, #8]
   1333c:	429a      	cmp	r2, r3
   1333e:	d002      	beq.n	13346 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   13340:	2001      	movs	r0, #1
}
   13342:	b002      	add	sp, #8
   13344:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   13346:	68a3      	ldr	r3, [r4, #8]
   13348:	68c6      	ldr	r6, [r0, #12]
   1334a:	b94b      	cbnz	r3, 13360 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1334c:	4630      	mov	r0, r6
   1334e:	7922      	ldrb	r2, [r4, #4]
   13350:	6821      	ldr	r1, [r4, #0]
   13352:	f009 fa89 	bl	1c868 <ccc_find_cfg>
	if (!cfg) {
   13356:	2800      	cmp	r0, #0
   13358:	d0f2      	beq.n	13340 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1335a:	f009 faa2 	bl	1c8a2 <clear_ccc_cfg>
   1335e:	e7ef      	b.n	13340 <ccc_load+0xc>
	} else if (!load->count) {
   13360:	68e0      	ldr	r0, [r4, #12]
   13362:	2800      	cmp	r0, #0
   13364:	d0ed      	beq.n	13342 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   13366:	881b      	ldrh	r3, [r3, #0]
   13368:	4299      	cmp	r1, r3
   1336a:	d00a      	beq.n	13382 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1336c:	d9e8      	bls.n	13340 <ccc_load+0xc>
	load->count--;
   1336e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   13370:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   13372:	3801      	subs	r0, #1
	load->entry++;
   13374:	3304      	adds	r3, #4
	load->count--;
   13376:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13378:	3800      	subs	r0, #0
   1337a:	bf18      	it	ne
   1337c:	2001      	movne	r0, #1
	load->entry++;
   1337e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13380:	e7df      	b.n	13342 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   13382:	4630      	mov	r0, r6
   13384:	7922      	ldrb	r2, [r4, #4]
   13386:	6821      	ldr	r1, [r4, #0]
   13388:	f009 fa6e 	bl	1c868 <ccc_find_cfg>
	if (!cfg) {
   1338c:	4605      	mov	r5, r0
   1338e:	b980      	cbnz	r0, 133b2 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   13390:	9000      	str	r0, [sp, #0]
   13392:	4602      	mov	r2, r0
   13394:	f8cd 0003 	str.w	r0, [sp, #3]
   13398:	4669      	mov	r1, sp
   1339a:	4630      	mov	r0, r6
   1339c:	f009 fa64 	bl	1c868 <ccc_find_cfg>
		if (!cfg) {
   133a0:	4605      	mov	r5, r0
   133a2:	2800      	cmp	r0, #0
   133a4:	d0e3      	beq.n	1336e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   133a6:	6821      	ldr	r1, [r4, #0]
   133a8:	3001      	adds	r0, #1
   133aa:	f009 fa77 	bl	1c89c <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   133ae:	7923      	ldrb	r3, [r4, #4]
   133b0:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   133b2:	68a3      	ldr	r3, [r4, #8]
   133b4:	885b      	ldrh	r3, [r3, #2]
   133b6:	812b      	strh	r3, [r5, #8]
   133b8:	e7d9      	b.n	1336e <ccc_load+0x3a>
   133ba:	bf00      	nop
   133bc:	00012efd 	.word	0x00012efd

000133c0 <ccc_save>:
{
   133c0:	b538      	push	{r3, r4, r5, lr}
   133c2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   133c4:	4b0b      	ldr	r3, [pc, #44]	; (133f4 <ccc_save+0x34>)
   133c6:	6882      	ldr	r2, [r0, #8]
{
   133c8:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   133ca:	429a      	cmp	r2, r3
   133cc:	d10f      	bne.n	133ee <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   133ce:	7922      	ldrb	r2, [r4, #4]
   133d0:	6821      	ldr	r1, [r4, #0]
   133d2:	68c0      	ldr	r0, [r0, #12]
   133d4:	f009 fa48 	bl	1c868 <ccc_find_cfg>
	if (!cfg) {
   133d8:	b148      	cbz	r0, 133ee <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   133da:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   133de:	8901      	ldrh	r1, [r0, #8]
   133e0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   133e4:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   133e6:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   133e8:	8151      	strh	r1, [r2, #10]
	save->count++;
   133ea:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   133ee:	2001      	movs	r0, #1
   133f0:	bd38      	pop	{r3, r4, r5, pc}
   133f2:	bf00      	nop
   133f4:	00012efd 	.word	0x00012efd

000133f8 <gatt_indicate>:
{
   133f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   133fc:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   133fe:	8a92      	ldrh	r2, [r2, #20]
{
   13400:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13402:	3202      	adds	r2, #2
   13404:	211d      	movs	r1, #29
{
   13406:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13408:	f7ff f8b8 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   1340c:	4605      	mov	r5, r0
   1340e:	b1e8      	cbz	r0, 1344c <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   13410:	f100 0808 	add.w	r8, r0, #8
   13414:	2102      	movs	r1, #2
   13416:	4640      	mov	r0, r8
   13418:	f002 f8a8 	bl	1556c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1341c:	4606      	mov	r6, r0
   1341e:	8aa1      	ldrh	r1, [r4, #20]
   13420:	f826 9b02 	strh.w	r9, [r6], #2
   13424:	4640      	mov	r0, r8
   13426:	f002 f8a1 	bl	1556c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1342a:	4630      	mov	r0, r6
   1342c:	8aa2      	ldrh	r2, [r4, #20]
   1342e:	6921      	ldr	r1, [r4, #16]
   13430:	f008 fa3d 	bl	1b8ae <memcpy>
	if (!params->func) {
   13434:	68a3      	ldr	r3, [r4, #8]
   13436:	b933      	cbnz	r3, 13446 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   13438:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   1343a:	4629      	mov	r1, r5
   1343c:	4638      	mov	r0, r7
}
   1343e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13442:	f7ff bed3 	b.w	131ec <gatt_send.constprop.0>
   13446:	4623      	mov	r3, r4
   13448:	4a04      	ldr	r2, [pc, #16]	; (1345c <gatt_indicate+0x64>)
   1344a:	e7f6      	b.n	1343a <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   1344c:	2157      	movs	r1, #87	; 0x57
   1344e:	4804      	ldr	r0, [pc, #16]	; (13460 <gatt_indicate+0x68>)
   13450:	f006 ffe9 	bl	1a426 <printk>
}
   13454:	f06f 000b 	mvn.w	r0, #11
   13458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1345c:	0001c749 	.word	0x0001c749
   13460:	00021dc7 	.word	0x00021dc7

00013464 <gatt_notify>:
{
   13464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13468:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1346a:	8992      	ldrh	r2, [r2, #12]
{
   1346c:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1346e:	3202      	adds	r2, #2
   13470:	211b      	movs	r1, #27
{
   13472:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13474:	f7ff f882 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   13478:	4605      	mov	r5, r0
   1347a:	b1c8      	cbz	r0, 134b0 <gatt_notify+0x4c>
   1347c:	f100 0908 	add.w	r9, r0, #8
   13480:	2102      	movs	r1, #2
   13482:	4648      	mov	r0, r9
   13484:	f002 f872 	bl	1556c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   13488:	4606      	mov	r6, r0
   1348a:	89a1      	ldrh	r1, [r4, #12]
   1348c:	f826 8b02 	strh.w	r8, [r6], #2
   13490:	4648      	mov	r0, r9
   13492:	f002 f86b 	bl	1556c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   13496:	89a2      	ldrh	r2, [r4, #12]
   13498:	68a1      	ldr	r1, [r4, #8]
   1349a:	4630      	mov	r0, r6
   1349c:	f008 fa07 	bl	1b8ae <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   134a0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   134a4:	4629      	mov	r1, r5
   134a6:	4638      	mov	r0, r7
}
   134a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   134ac:	f7ff bbaa 	b.w	12c04 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   134b0:	2157      	movs	r1, #87	; 0x57
   134b2:	4803      	ldr	r0, [pc, #12]	; (134c0 <gatt_notify+0x5c>)
   134b4:	f006 ffb7 	bl	1a426 <printk>
}
   134b8:	f06f 000b 	mvn.w	r0, #11
   134bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   134c0:	00021df3 	.word	0x00021df3

000134c4 <notify_cb>:
{
   134c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   134c8:	4b38      	ldr	r3, [pc, #224]	; (135ac <notify_cb+0xe8>)
{
   134ca:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   134cc:	6882      	ldr	r2, [r0, #8]
{
   134ce:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   134d0:	429a      	cmp	r2, r3
   134d2:	d003      	beq.n	134dc <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   134d4:	2001      	movs	r0, #1
}
   134d6:	b003      	add	sp, #12
   134d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   134dc:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   134e0:	4b33      	ldr	r3, [pc, #204]	; (135b0 <notify_cb+0xec>)
   134e2:	4599      	cmp	r9, r3
   134e4:	d01a      	beq.n	1351c <notify_cb+0x58>
   134e6:	f04f 0b00 	mov.w	fp, #0
   134ea:	f109 0701 	add.w	r7, r9, #1
   134ee:	f109 0a65 	add.w	sl, r9, #101	; 0x65
		if (cfg->value != data->type) {
   134f2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   134f6:	89a3      	ldrh	r3, [r4, #12]
   134f8:	429a      	cmp	r2, r3
   134fa:	d10b      	bne.n	13514 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   134fc:	4639      	mov	r1, r7
   134fe:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13502:	f7fd ff61 	bl	113c8 <bt_conn_lookup_addr_le>
		if (!conn) {
   13506:	4605      	mov	r5, r0
   13508:	b120      	cbz	r0, 13514 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   1350a:	7a83      	ldrb	r3, [r0, #10]
   1350c:	2b07      	cmp	r3, #7
   1350e:	d029      	beq.n	13564 <notify_cb+0xa0>
			bt_conn_unref(conn);
   13510:	f7fd fe38 	bl	11184 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13514:	370a      	adds	r7, #10
   13516:	4557      	cmp	r7, sl
   13518:	d1eb      	bne.n	134f2 <notify_cb+0x2e>
   1351a:	e7db      	b.n	134d4 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1351c:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1351e:	4637      	mov	r7, r6
   13520:	4d24      	ldr	r5, [pc, #144]	; (135b4 <notify_cb+0xf0>)
   13522:	4669      	mov	r1, sp
   13524:	4628      	mov	r0, r5
   13526:	9700      	str	r7, [sp, #0]
   13528:	f8cd 7003 	str.w	r7, [sp, #3]
   1352c:	f009 f97a 	bl	1c824 <bt_addr_le_cmp>
   13530:	b178      	cbz	r0, 13552 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13532:	2207      	movs	r2, #7
   13534:	4629      	mov	r1, r5
   13536:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1353a:	f7fd ff85 	bl	11448 <bt_conn_lookup_state_le>
			if (!conn) {
   1353e:	b970      	cbnz	r0, 1355e <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13540:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13542:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13544:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13546:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1354a:	8853      	ldrh	r3, [r2, #2]
   1354c:	8812      	ldrh	r2, [r2, #0]
   1354e:	f7ff fdad 	bl	130ac <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13552:	3601      	adds	r6, #1
   13554:	2e0a      	cmp	r6, #10
   13556:	f105 050c 	add.w	r5, r5, #12
   1355a:	d1e2      	bne.n	13522 <notify_cb+0x5e>
   1355c:	e7c3      	b.n	134e6 <notify_cb+0x22>
			bt_conn_unref(conn);
   1355e:	f7fd fe11 	bl	11184 <bt_conn_unref>
   13562:	e7f6      	b.n	13552 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13564:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
   13568:	b123      	cbz	r3, 13574 <notify_cb+0xb0>
   1356a:	4641      	mov	r1, r8
   1356c:	4798      	blx	r3
   1356e:	b908      	cbnz	r0, 13574 <notify_cb+0xb0>
			bt_conn_unref(conn);
   13570:	4628      	mov	r0, r5
   13572:	e7cd      	b.n	13510 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   13574:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   13576:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   13578:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1357a:	88a1      	ldrh	r1, [r4, #4]
   1357c:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   1357e:	d10f      	bne.n	135a0 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   13580:	f7ff ff3a 	bl	133f8 <gatt_indicate>
			if (err == 0) {
   13584:	4606      	mov	r6, r0
   13586:	b918      	cbnz	r0, 13590 <notify_cb+0xcc>
				data->ind_params->_ref++;
   13588:	6922      	ldr	r2, [r4, #16]
   1358a:	7d93      	ldrb	r3, [r2, #22]
   1358c:	3301      	adds	r3, #1
   1358e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   13590:	4628      	mov	r0, r5
   13592:	f7fd fdf7 	bl	11184 <bt_conn_unref>
		if (err < 0) {
   13596:	2e00      	cmp	r6, #0
   13598:	db06      	blt.n	135a8 <notify_cb+0xe4>
		data->err = 0;
   1359a:	f8c4 b008 	str.w	fp, [r4, #8]
   1359e:	e7b9      	b.n	13514 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   135a0:	f7ff ff60 	bl	13464 <gatt_notify>
   135a4:	4606      	mov	r6, r0
   135a6:	e7f3      	b.n	13590 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   135a8:	2000      	movs	r0, #0
   135aa:	e794      	b.n	134d6 <notify_cb+0x12>
   135ac:	00012efd 	.word	0x00012efd
   135b0:	20008494 	.word	0x20008494
   135b4:	2000c01f 	.word	0x2000c01f

000135b8 <bt_gatt_clear_sc>:
{
   135b8:	b570      	push	{r4, r5, r6, lr}
   135ba:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   135bc:	f7ff fc44 	bl	12e48 <find_sc_cfg>
	if (!cfg) {
   135c0:	4604      	mov	r4, r0
   135c2:	b1e8      	cbz	r0, 13600 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   135c4:	4605      	mov	r5, r0
   135c6:	f815 2b01 	ldrb.w	r2, [r5], #1
   135ca:	b1e2      	cbz	r2, 13606 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   135cc:	ae02      	add	r6, sp, #8
   135ce:	2104      	movs	r1, #4
   135d0:	4630      	mov	r0, r6
   135d2:	f006 fe8e 	bl	1a2f2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   135d6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   135d8:	4a0c      	ldr	r2, [pc, #48]	; (1360c <bt_gatt_clear_sc+0x54>)
   135da:	462b      	mov	r3, r5
   135dc:	2124      	movs	r1, #36	; 0x24
   135de:	a803      	add	r0, sp, #12
   135e0:	f7fa ff1c 	bl	e41c <bt_settings_encode_key>
		err = settings_delete(key);
   135e4:	a803      	add	r0, sp, #12
   135e6:	f007 fa16 	bl	1aa16 <settings_delete>
		if (err) {
   135ea:	4602      	mov	r2, r0
   135ec:	b118      	cbz	r0, 135f6 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   135ee:	2145      	movs	r1, #69	; 0x45
   135f0:	4807      	ldr	r0, [pc, #28]	; (13610 <bt_gatt_clear_sc+0x58>)
   135f2:	f006 ff18 	bl	1a426 <printk>
	memset(cfg, 0, sizeof(*cfg));
   135f6:	220c      	movs	r2, #12
   135f8:	2100      	movs	r1, #0
   135fa:	4620      	mov	r0, r4
   135fc:	f008 f982 	bl	1b904 <memset>
}
   13600:	2000      	movs	r0, #0
   13602:	b00c      	add	sp, #48	; 0x30
   13604:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13606:	9200      	str	r2, [sp, #0]
   13608:	e7e6      	b.n	135d8 <bt_gatt_clear_sc+0x20>
   1360a:	bf00      	nop
   1360c:	00022013 	.word	0x00022013
   13610:	00021e21 	.word	0x00021e21

00013614 <sc_clear>:
{
   13614:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13616:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1361a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1361c:	4631      	mov	r1, r6
   1361e:	7a00      	ldrb	r0, [r0, #8]
   13620:	f008 fb0c 	bl	1bc3c <bt_addr_le_is_bonded>
   13624:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13626:	4631      	mov	r1, r6
   13628:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1362a:	b14d      	cbz	r5, 13640 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1362c:	f7ff ffc4 	bl	135b8 <bt_gatt_clear_sc>
		if (err) {
   13630:	4602      	mov	r2, r0
   13632:	b170      	cbz	r0, 13652 <sc_clear+0x3e>
}
   13634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13638:	2145      	movs	r1, #69	; 0x45
   1363a:	4806      	ldr	r0, [pc, #24]	; (13654 <sc_clear+0x40>)
   1363c:	f006 bef3 	b.w	1a426 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13640:	f7ff fc02 	bl	12e48 <find_sc_cfg>
		if (cfg) {
   13644:	b128      	cbz	r0, 13652 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13646:	4629      	mov	r1, r5
}
   13648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1364c:	220c      	movs	r2, #12
   1364e:	f008 b959 	b.w	1b904 <memset>
}
   13652:	bd70      	pop	{r4, r5, r6, pc}
   13654:	00021e43 	.word	0x00021e43

00013658 <disconnected_cb>:
{
   13658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1365c:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1365e:	4b26      	ldr	r3, [pc, #152]	; (136f8 <disconnected_cb+0xa0>)
   13660:	6882      	ldr	r2, [r0, #8]
{
   13662:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13664:	429a      	cmp	r2, r3
   13666:	d130      	bne.n	136ca <disconnected_cb+0x72>
	ccc = attr->user_data;
   13668:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   1366a:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   1366e:	b363      	cbz	r3, 136ca <disconnected_cb+0x72>
	value_used = false;
   13670:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   13674:	f8df b084 	ldr.w	fp, [pc, #132]	; 136fc <disconnected_cb+0xa4>
   13678:	1c6c      	adds	r4, r5, #1
   1367a:	f105 0a65 	add.w	sl, r5, #101	; 0x65
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1367e:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   13682:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13686:	b19b      	cbz	r3, 136b0 <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13688:	4622      	mov	r2, r4
   1368a:	4630      	mov	r0, r6
   1368c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13690:	f008 fb68 	bl	1bd64 <bt_conn_is_peer_addr_le>
   13694:	b9e0      	cbnz	r0, 136d0 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13696:	4621      	mov	r1, r4
   13698:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1369c:	f7fd fe94 	bl	113c8 <bt_conn_lookup_addr_le>
			if (tmp) {
   136a0:	b130      	cbz	r0, 136b0 <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   136a2:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   136a4:	2b07      	cmp	r3, #7
   136a6:	bf08      	it	eq
   136a8:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   136ac:	f7fd fd6a 	bl	11184 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   136b0:	340a      	adds	r4, #10
   136b2:	45a2      	cmp	sl, r4
   136b4:	d1e5      	bne.n	13682 <disconnected_cb+0x2a>
	if (!value_used) {
   136b6:	f1b8 0f00 	cmp.w	r8, #0
   136ba:	d106      	bne.n	136ca <disconnected_cb+0x72>
		if (ccc->cfg_changed) {
   136bc:	6eab      	ldr	r3, [r5, #104]	; 0x68
		ccc->value = 0U;
   136be:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
		if (ccc->cfg_changed) {
   136c2:	b113      	cbz	r3, 136ca <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   136c4:	4641      	mov	r1, r8
   136c6:	4638      	mov	r0, r7
   136c8:	4798      	blx	r3
}
   136ca:	2001      	movs	r0, #1
   136cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   136d0:	4649      	mov	r1, r9
   136d2:	7a30      	ldrb	r0, [r6, #8]
   136d4:	f008 fab2 	bl	1bc3c <bt_addr_le_is_bonded>
   136d8:	b940      	cbnz	r0, 136ec <disconnected_cb+0x94>
				if (ccc == &sc_ccc) {
   136da:	455d      	cmp	r5, fp
   136dc:	d102      	bne.n	136e4 <disconnected_cb+0x8c>
					sc_clear(conn);
   136de:	4630      	mov	r0, r6
   136e0:	f7ff ff98 	bl	13614 <sc_clear>
				clear_ccc_cfg(cfg);
   136e4:	1e60      	subs	r0, r4, #1
   136e6:	f009 f8dc 	bl	1c8a2 <clear_ccc_cfg>
   136ea:	e7e1      	b.n	136b0 <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   136ec:	4649      	mov	r1, r9
   136ee:	4620      	mov	r0, r4
   136f0:	f009 f8d4 	bl	1c89c <bt_addr_le_copy>
   136f4:	e7dc      	b.n	136b0 <disconnected_cb+0x58>
   136f6:	bf00      	nop
   136f8:	00012efd 	.word	0x00012efd
   136fc:	20008494 	.word	0x20008494

00013700 <sc_commit>:
{
   13700:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13702:	490b      	ldr	r1, [pc, #44]	; (13730 <sc_commit+0x30>)
   13704:	e8d1 3fef 	ldaex	r3, [r1]
   13708:	f023 0302 	bic.w	r3, r3, #2
   1370c:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13710:	2a00      	cmp	r2, #0
   13712:	d1f7      	bne.n	13704 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13714:	4608      	mov	r0, r1
   13716:	f009 f8dd 	bl	1c8d4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1371a:	07c3      	lsls	r3, r0, #31
   1371c:	d506      	bpl.n	1372c <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1371e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13722:	2300      	movs	r3, #0
   13724:	4803      	ldr	r0, [pc, #12]	; (13734 <sc_commit+0x34>)
   13726:	3930      	subs	r1, #48	; 0x30
   13728:	f005 ff0a 	bl	19540 <k_delayed_work_submit_to_queue>
}
   1372c:	2000      	movs	r0, #0
   1372e:	bd08      	pop	{r3, pc}
   13730:	20009c80 	.word	0x20009c80
   13734:	2000a558 	.word	0x2000a558

00013738 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1373c:	4688      	mov	r8, r1
   1373e:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13740:	2112      	movs	r1, #18
   13742:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13744:	4606      	mov	r6, r0
   13746:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13748:	f7fe ff18 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   1374c:	4604      	mov	r4, r0
   1374e:	b1c0      	cbz	r0, 13782 <gatt_write_ccc.constprop.0+0x4a>
   13750:	f100 0908 	add.w	r9, r0, #8
   13754:	2102      	movs	r1, #2
   13756:	4648      	mov	r0, r9
   13758:	f001 ff08 	bl	1556c <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   1375c:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   1375e:	f8a0 8000 	strh.w	r8, [r0]
   13762:	4648      	mov	r0, r9
   13764:	f009 fbf4 	bl	1cf50 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13768:	2104      	movs	r1, #4
   1376a:	f105 0010 	add.w	r0, r5, #16
   1376e:	f009 f8a6 	bl	1c8be <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   13772:	462b      	mov	r3, r5
   13774:	4621      	mov	r1, r4
   13776:	4630      	mov	r0, r6
}
   13778:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   1377c:	4a03      	ldr	r2, [pc, #12]	; (1378c <gatt_write_ccc.constprop.0+0x54>)
   1377e:	f7ff bd35 	b.w	131ec <gatt_send.constprop.0>
}
   13782:	f06f 000b 	mvn.w	r0, #11
   13786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1378a:	bf00      	nop
   1378c:	0001c9b7 	.word	0x0001c9b7

00013790 <sc_indicate_rsp>:
{
   13790:	b510      	push	{r4, lr}
   13792:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13794:	4910      	ldr	r1, [pc, #64]	; (137d8 <sc_indicate_rsp+0x48>)
   13796:	e8d1 3fef 	ldaex	r3, [r1]
   1379a:	f023 0302 	bic.w	r3, r3, #2
   1379e:	e8c1 3fe2 	stlex	r2, r3, [r1]
   137a2:	2a00      	cmp	r2, #0
   137a4:	d1f7      	bne.n	13796 <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   137a6:	4608      	mov	r0, r1
   137a8:	f009 f894 	bl	1c8d4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   137ac:	07c2      	lsls	r2, r0, #31
   137ae:	d505      	bpl.n	137bc <sc_indicate_rsp+0x2c>
   137b0:	2200      	movs	r2, #0
   137b2:	2300      	movs	r3, #0
   137b4:	4809      	ldr	r0, [pc, #36]	; (137dc <sc_indicate_rsp+0x4c>)
   137b6:	3930      	subs	r1, #48	; 0x30
   137b8:	f005 fec2 	bl	19540 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   137bc:	4620      	mov	r0, r4
   137be:	f7ff fb21 	bl	12e04 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   137c2:	b140      	cbz	r0, 137d6 <sc_indicate_rsp+0x46>
   137c4:	7a03      	ldrb	r3, [r0, #8]
   137c6:	07db      	lsls	r3, r3, #31
   137c8:	d505      	bpl.n	137d6 <sc_indicate_rsp+0x46>
}
   137ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   137ce:	2101      	movs	r1, #1
   137d0:	300c      	adds	r0, #12
   137d2:	f009 b874 	b.w	1c8be <atomic_or>
   137d6:	bd10      	pop	{r4, pc}
   137d8:	20009c80 	.word	0x20009c80
   137dc:	2000a558 	.word	0x2000a558

000137e0 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   137e0:	2201      	movs	r2, #1
{
   137e2:	b570      	push	{r4, r5, r6, lr}
   137e4:	4b26      	ldr	r3, [pc, #152]	; (13880 <bt_gatt_init+0xa0>)
   137e6:	e8d3 1fef 	ldaex	r1, [r3]
   137ea:	2900      	cmp	r1, #0
   137ec:	d103      	bne.n	137f6 <bt_gatt_init+0x16>
   137ee:	e8c3 2fe0 	stlex	r0, r2, [r3]
   137f2:	2800      	cmp	r0, #0
   137f4:	d1f7      	bne.n	137e6 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   137f6:	d142      	bne.n	1387e <bt_gatt_init+0x9e>
   137f8:	4b22      	ldr	r3, [pc, #136]	; (13884 <bt_gatt_init+0xa4>)
   137fa:	e8d3 1fef 	ldaex	r1, [r3]
   137fe:	2900      	cmp	r1, #0
   13800:	d103      	bne.n	1380a <bt_gatt_init+0x2a>
   13802:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13806:	2800      	cmp	r0, #0
   13808:	d1f7      	bne.n	137fa <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1380a:	d034      	beq.n	13876 <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1380c:	4c1e      	ldr	r4, [pc, #120]	; (13888 <bt_gatt_init+0xa8>)
   1380e:	2230      	movs	r2, #48	; 0x30
   13810:	2100      	movs	r1, #0
   13812:	4620      	mov	r0, r4
   13814:	f008 f876 	bl	1b904 <memset>
   13818:	4b1c      	ldr	r3, [pc, #112]	; (1388c <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1381a:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1381c:	6063      	str	r3, [r4, #4]
   1381e:	4c1c      	ldr	r4, [pc, #112]	; (13890 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13820:	2300      	movs	r3, #0
   13822:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13826:	481b      	ldr	r0, [pc, #108]	; (13894 <bt_gatt_init+0xb4>)
   13828:	f005 fe8a 	bl	19540 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1382c:	2100      	movs	r1, #0
   1382e:	f104 0020 	add.w	r0, r4, #32
   13832:	2230      	movs	r2, #48	; 0x30
   13834:	f008 f866 	bl	1b904 <memset>
   13838:	4b17      	ldr	r3, [pc, #92]	; (13898 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1383a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1383e:	6263      	str	r3, [r4, #36]	; 0x24
   13840:	2102      	movs	r1, #2
}
   13842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13846:	f009 b83a 	b.w	1c8be <atomic_or>
		last_static_handle += svc->attr_count;
   1384a:	4a14      	ldr	r2, [pc, #80]	; (1389c <bt_gatt_init+0xbc>)
   1384c:	6863      	ldr	r3, [r4, #4]
   1384e:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13850:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13852:	440b      	add	r3, r1
   13854:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13856:	42ac      	cmp	r4, r5
   13858:	d90a      	bls.n	13870 <bt_gatt_init+0x90>
   1385a:	4631      	mov	r1, r6
   1385c:	4810      	ldr	r0, [pc, #64]	; (138a0 <bt_gatt_init+0xc0>)
   1385e:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13862:	f006 fde0 	bl	1a426 <printk>
   13866:	f44f 6183 	mov.w	r1, #1048	; 0x418
   1386a:	4630      	mov	r0, r6
   1386c:	f007 f881 	bl	1a972 <assert_post_action>
   13870:	42ac      	cmp	r4, r5
   13872:	d3ea      	bcc.n	1384a <bt_gatt_init+0x6a>
   13874:	e7ca      	b.n	1380c <bt_gatt_init+0x2c>
   13876:	4c0b      	ldr	r4, [pc, #44]	; (138a4 <bt_gatt_init+0xc4>)
   13878:	4d0b      	ldr	r5, [pc, #44]	; (138a8 <bt_gatt_init+0xc8>)
   1387a:	4e0c      	ldr	r6, [pc, #48]	; (138ac <bt_gatt_init+0xcc>)
   1387c:	e7eb      	b.n	13856 <bt_gatt_init+0x76>
}
   1387e:	bd70      	pop	{r4, r5, r6, pc}
   13880:	2000ac2c 	.word	0x2000ac2c
   13884:	2000ad20 	.word	0x2000ad20
   13888:	20009c00 	.word	0x20009c00
   1388c:	0001ccaf 	.word	0x0001ccaf
   13890:	20009c30 	.word	0x20009c30
   13894:	2000a558 	.word	0x2000a558
   13898:	00013e71 	.word	0x00013e71
   1389c:	2000c01c 	.word	0x2000c01c
   138a0:	0001f98f 	.word	0x0001f98f
   138a4:	0001e188 	.word	0x0001e188
   138a8:	0001e1b8 	.word	0x0001e1b8
   138ac:	00021e5e 	.word	0x00021e5e

000138b0 <bt_gatt_attr_get_handle>:
{
   138b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   138b4:	4604      	mov	r4, r0
   138b6:	b910      	cbnz	r0, 138be <bt_gatt_attr_get_handle+0xe>
		return 0;
   138b8:	2000      	movs	r0, #0
}
   138ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   138be:	8a00      	ldrh	r0, [r0, #16]
   138c0:	2800      	cmp	r0, #0
   138c2:	d1fa      	bne.n	138ba <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   138c4:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   138c8:	4d17      	ldr	r5, [pc, #92]	; (13928 <bt_gatt_attr_get_handle+0x78>)
   138ca:	4e18      	ldr	r6, [pc, #96]	; (1392c <bt_gatt_attr_get_handle+0x7c>)
   138cc:	4f18      	ldr	r7, [pc, #96]	; (13930 <bt_gatt_attr_get_handle+0x80>)
   138ce:	42b5      	cmp	r5, r6
   138d0:	d90a      	bls.n	138e8 <bt_gatt_attr_get_handle+0x38>
   138d2:	4639      	mov	r1, r7
   138d4:	4817      	ldr	r0, [pc, #92]	; (13934 <bt_gatt_attr_get_handle+0x84>)
   138d6:	f240 522d 	movw	r2, #1325	; 0x52d
   138da:	f006 fda4 	bl	1a426 <printk>
   138de:	f240 512d 	movw	r1, #1325	; 0x52d
   138e2:	4638      	mov	r0, r7
   138e4:	f007 f845 	bl	1a972 <assert_post_action>
   138e8:	42b5      	cmp	r5, r6
   138ea:	d2e5      	bcs.n	138b8 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   138ec:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   138f0:	4564      	cmp	r4, ip
   138f2:	d306      	bcc.n	13902 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   138f4:	f04f 0e14 	mov.w	lr, #20
   138f8:	fb0e c301 	mla	r3, lr, r1, ip
   138fc:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   138fe:	429c      	cmp	r4, r3
   13900:	d910      	bls.n	13924 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13902:	eb08 0001 	add.w	r0, r8, r1
   13906:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13908:	4680      	mov	r8, r0
   1390a:	3508      	adds	r5, #8
   1390c:	e7df      	b.n	138ce <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   1390e:	fb0e c302 	mla	r3, lr, r2, ip
   13912:	429c      	cmp	r4, r3
   13914:	d0d1      	beq.n	138ba <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13916:	3201      	adds	r2, #1
   13918:	eb08 0302 	add.w	r3, r8, r2
   1391c:	4291      	cmp	r1, r2
   1391e:	b298      	uxth	r0, r3
   13920:	d1f5      	bne.n	1390e <bt_gatt_attr_get_handle+0x5e>
   13922:	e7f1      	b.n	13908 <bt_gatt_attr_get_handle+0x58>
   13924:	2200      	movs	r2, #0
   13926:	e7f7      	b.n	13918 <bt_gatt_attr_get_handle+0x68>
   13928:	0001e188 	.word	0x0001e188
   1392c:	0001e1b8 	.word	0x0001e1b8
   13930:	00021e5e 	.word	0x00021e5e
   13934:	0001f98f 	.word	0x0001f98f

00013938 <bt_gatt_foreach_attr_type>:
{
   13938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1393c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1393e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13942:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13946:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13948:	2d00      	cmp	r5, #0
   1394a:	bf08      	it	eq
   1394c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1394e:	4b2b      	ldr	r3, [pc, #172]	; (139fc <bt_gatt_foreach_attr_type+0xc4>)
{
   13950:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13952:	881b      	ldrh	r3, [r3, #0]
{
   13954:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13956:	4283      	cmp	r3, r0
   13958:	d24b      	bcs.n	139f2 <bt_gatt_foreach_attr_type+0xba>
}
   1395a:	b003      	add	sp, #12
   1395c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13960:	6873      	ldr	r3, [r6, #4]
   13962:	4423      	add	r3, r4
   13964:	42bb      	cmp	r3, r7
   13966:	d241      	bcs.n	139ec <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13968:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1396a:	3608      	adds	r6, #8
   1396c:	4b24      	ldr	r3, [pc, #144]	; (13a00 <bt_gatt_foreach_attr_type+0xc8>)
   1396e:	429e      	cmp	r6, r3
   13970:	d90a      	bls.n	13988 <bt_gatt_foreach_attr_type+0x50>
   13972:	4659      	mov	r1, fp
   13974:	4823      	ldr	r0, [pc, #140]	; (13a04 <bt_gatt_foreach_attr_type+0xcc>)
   13976:	f240 52f1 	movw	r2, #1521	; 0x5f1
   1397a:	f006 fd54 	bl	1a426 <printk>
   1397e:	f240 51f1 	movw	r1, #1521	; 0x5f1
   13982:	4658      	mov	r0, fp
   13984:	f006 fff5 	bl	1a972 <assert_post_action>
   13988:	4b1d      	ldr	r3, [pc, #116]	; (13a00 <bt_gatt_foreach_attr_type+0xc8>)
   1398a:	429e      	cmp	r6, r3
   1398c:	d3e8      	bcc.n	13960 <bt_gatt_foreach_attr_type+0x28>
   1398e:	e7e4      	b.n	1395a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13990:	4640      	mov	r0, r8
   13992:	5889      	ldr	r1, [r1, r2]
   13994:	9301      	str	r3, [sp, #4]
   13996:	f007 ffff 	bl	1b998 <bt_uuid_cmp>
   1399a:	9b01      	ldr	r3, [sp, #4]
   1399c:	b198      	cbz	r0, 139c6 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1399e:	3401      	adds	r4, #1
   139a0:	f10a 0a01 	add.w	sl, sl, #1
   139a4:	b2a4      	uxth	r4, r4
   139a6:	6873      	ldr	r3, [r6, #4]
   139a8:	4553      	cmp	r3, sl
   139aa:	d9de      	bls.n	1396a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   139ac:	9b00      	ldr	r3, [sp, #0]
   139ae:	429c      	cmp	r4, r3
   139b0:	d8d3      	bhi.n	1395a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   139b2:	42bc      	cmp	r4, r7
   139b4:	d3f3      	bcc.n	1399e <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   139b6:	2314      	movs	r3, #20
   139b8:	fb03 f20a 	mul.w	r2, r3, sl
   139bc:	6831      	ldr	r1, [r6, #0]
   139be:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   139c0:	f1b8 0f00 	cmp.w	r8, #0
   139c4:	d1e4      	bne.n	13990 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   139c6:	f1b9 0f00 	cmp.w	r9, #0
   139ca:	d10b      	bne.n	139e4 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   139cc:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   139ce:	4618      	mov	r0, r3
	*num_matches -= 1;
   139d0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   139d2:	4621      	mov	r1, r4
   139d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   139d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   139d8:	4798      	blx	r3
	if (!*num_matches) {
   139da:	2d00      	cmp	r5, #0
   139dc:	d0bd      	beq.n	1395a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   139de:	2800      	cmp	r0, #0
   139e0:	d1dd      	bne.n	1399e <bt_gatt_foreach_attr_type+0x66>
   139e2:	e7ba      	b.n	1395a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   139e4:	68da      	ldr	r2, [r3, #12]
   139e6:	4591      	cmp	r9, r2
   139e8:	d1d9      	bne.n	1399e <bt_gatt_foreach_attr_type+0x66>
   139ea:	e7ef      	b.n	139cc <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   139ec:	f04f 0a00 	mov.w	sl, #0
   139f0:	e7d9      	b.n	139a6 <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   139f2:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   139f4:	4e04      	ldr	r6, [pc, #16]	; (13a08 <bt_gatt_foreach_attr_type+0xd0>)
   139f6:	f8df b014 	ldr.w	fp, [pc, #20]	; 13a0c <bt_gatt_foreach_attr_type+0xd4>
   139fa:	e7b7      	b.n	1396c <bt_gatt_foreach_attr_type+0x34>
   139fc:	2000c01c 	.word	0x2000c01c
   13a00:	0001e1b8 	.word	0x0001e1b8
   13a04:	0001f98f 	.word	0x0001f98f
   13a08:	0001e188 	.word	0x0001e188
   13a0c:	00021e5e 	.word	0x00021e5e

00013a10 <db_hash_gen>:
	uint8_t key[16] = {};
   13a10:	2300      	movs	r3, #0
{
   13a12:	b530      	push	{r4, r5, lr}
   13a14:	b0c9      	sub	sp, #292	; 0x124
   13a16:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13a18:	4669      	mov	r1, sp
   13a1a:	aa1c      	add	r2, sp, #112	; 0x70
   13a1c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   13a1e:	e9cd 3300 	strd	r3, r3, [sp]
   13a22:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13a26:	f007 fb6b 	bl	1b100 <tc_cmac_setup>
   13a2a:	b928      	cbnz	r0, 13a38 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   13a2c:	2145      	movs	r1, #69	; 0x45
   13a2e:	4812      	ldr	r0, [pc, #72]	; (13a78 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   13a30:	f006 fcf9 	bl	1a426 <printk>
}
   13a34:	b049      	add	sp, #292	; 0x124
   13a36:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13a38:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13a3c:	2001      	movs	r0, #1
   13a3e:	4a0f      	ldr	r2, [pc, #60]	; (13a7c <db_hash_gen+0x6c>)
   13a40:	ab04      	add	r3, sp, #16
   13a42:	f009 f929 	bl	1cc98 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13a46:	480e      	ldr	r0, [pc, #56]	; (13a80 <db_hash_gen+0x70>)
   13a48:	a904      	add	r1, sp, #16
   13a4a:	f007 fbef 	bl	1b22c <tc_cmac_final>
   13a4e:	b910      	cbnz	r0, 13a56 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   13a50:	2145      	movs	r1, #69	; 0x45
   13a52:	480c      	ldr	r0, [pc, #48]	; (13a84 <db_hash_gen+0x74>)
   13a54:	e7ec      	b.n	13a30 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13a56:	2208      	movs	r2, #8
   13a58:	4b09      	ldr	r3, [pc, #36]	; (13a80 <db_hash_gen+0x70>)
   13a5a:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   13a5e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13a60:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   13a64:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13a66:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   13a6a:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   13a6c:	d1f7      	bne.n	13a5e <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   13a6e:	2c00      	cmp	r4, #0
   13a70:	d0e0      	beq.n	13a34 <db_hash_gen+0x24>
		db_hash_store();
   13a72:	f7ff f9b1 	bl	12dd8 <db_hash_store>
   13a76:	e7dd      	b.n	13a34 <db_hash_gen+0x24>
   13a78:	00021e8e 	.word	0x00021e8e
   13a7c:	0001c779 	.word	0x0001c779
   13a80:	2000c7ac 	.word	0x2000c7ac
   13a84:	00021eac 	.word	0x00021eac

00013a88 <db_hash_commit>:
{
   13a88:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   13a8a:	4821      	ldr	r0, [pc, #132]	; (13b10 <db_hash_commit+0x88>)
   13a8c:	f005 fdc8 	bl	19620 <k_delayed_work_cancel>
	if (!err) {
   13a90:	b908      	cbnz	r0, 13a96 <db_hash_commit+0xe>
		db_hash_gen(false);
   13a92:	f7ff ffbd 	bl	13a10 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   13a96:	2210      	movs	r2, #16
   13a98:	491e      	ldr	r1, [pc, #120]	; (13b14 <db_hash_commit+0x8c>)
   13a9a:	481f      	ldr	r0, [pc, #124]	; (13b18 <db_hash_commit+0x90>)
   13a9c:	f007 fef6 	bl	1b88c <memcmp>
   13aa0:	b968      	cbnz	r0, 13abe <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   13aa2:	481e      	ldr	r0, [pc, #120]	; (13b1c <db_hash_commit+0x94>)
   13aa4:	f005 fdbc 	bl	19620 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13aa8:	4b1d      	ldr	r3, [pc, #116]	; (13b20 <db_hash_commit+0x98>)
   13aaa:	e8d3 2fef 	ldaex	r2, [r3]
   13aae:	f022 0201 	bic.w	r2, r2, #1
   13ab2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13ab6:	2900      	cmp	r1, #0
   13ab8:	d1f7      	bne.n	13aaa <db_hash_commit+0x22>
}
   13aba:	2000      	movs	r0, #0
   13abc:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13abe:	4c19      	ldr	r4, [pc, #100]	; (13b24 <db_hash_commit+0x9c>)
   13ac0:	2101      	movs	r1, #1
   13ac2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13ac6:	f008 fefa 	bl	1c8be <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13aca:	07c2      	lsls	r2, r0, #31
   13acc:	d410      	bmi.n	13af0 <db_hash_commit+0x68>
		gatt_sc.start = start;
   13ace:	4b16      	ldr	r3, [pc, #88]	; (13b28 <db_hash_commit+0xa0>)
   13ad0:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13ad2:	4813      	ldr	r0, [pc, #76]	; (13b20 <db_hash_commit+0x98>)
   13ad4:	f008 fefe 	bl	1c8d4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   13ad8:	0783      	lsls	r3, r0, #30
   13ada:	d406      	bmi.n	13aea <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13adc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13ae0:	2300      	movs	r3, #0
   13ae2:	490e      	ldr	r1, [pc, #56]	; (13b1c <db_hash_commit+0x94>)
   13ae4:	4811      	ldr	r0, [pc, #68]	; (13b2c <db_hash_commit+0xa4>)
   13ae6:	f005 fd2b 	bl	19540 <k_delayed_work_submit_to_queue>
	db_hash_store();
   13aea:	f7ff f975 	bl	12dd8 <db_hash_store>
	return 0;
   13aee:	e7e4      	b.n	13aba <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   13af0:	8b23      	ldrh	r3, [r4, #24]
   13af2:	8b62      	ldrh	r2, [r4, #26]
   13af4:	2b01      	cmp	r3, #1
   13af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13afa:	d805      	bhi.n	13b08 <db_hash_commit+0x80>
   13afc:	429a      	cmp	r2, r3
   13afe:	d0f4      	beq.n	13aea <db_hash_commit+0x62>
		*end = new_end;
   13b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13b04:	8363      	strh	r3, [r4, #26]
   13b06:	e7e4      	b.n	13ad2 <db_hash_commit+0x4a>
	if (*end < new_end) {
   13b08:	429a      	cmp	r2, r3
		*start = new_start;
   13b0a:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   13b0c:	d0e1      	beq.n	13ad2 <db_hash_commit+0x4a>
   13b0e:	e7f7      	b.n	13b00 <db_hash_commit+0x78>
   13b10:	20009c00 	.word	0x20009c00
   13b14:	2000c7ac 	.word	0x2000c7ac
   13b18:	2000c7bc 	.word	0x2000c7bc
   13b1c:	20009c50 	.word	0x20009c50
   13b20:	20009c80 	.word	0x20009c80
   13b24:	20009c30 	.word	0x20009c30
   13b28:	ffff0001 	.word	0xffff0001
   13b2c:	2000a558 	.word	0x2000a558

00013b30 <ccc_set_direct>:
{
   13b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b34:	b0b9      	sub	sp, #228	; 0xe4
   13b36:	4688      	mov	r8, r1
   13b38:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13b3a:	492c      	ldr	r1, [pc, #176]	; (13bec <ccc_set_direct+0xbc>)
   13b3c:	466a      	mov	r2, sp
   13b3e:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   13b40:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13b42:	f006 ff6c 	bl	1aa1e <settings_name_steq>
   13b46:	b948      	cbnz	r0, 13b5c <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   13b48:	2145      	movs	r1, #69	; 0x45
   13b4a:	4829      	ldr	r0, [pc, #164]	; (13bf0 <ccc_set_direct+0xc0>)
   13b4c:	f006 fc6b 	bl	1a426 <printk>
   13b50:	f06f 0515 	mvn.w	r5, #21
}
   13b54:	4628      	mov	r0, r5
   13b56:	b039      	add	sp, #228	; 0xe4
   13b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   13b5c:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   13b5e:	a901      	add	r1, sp, #4
   13b60:	4620      	mov	r0, r4
   13b62:	f006 ff7f 	bl	1aa64 <settings_name_next>
		if (!name) {
   13b66:	b93c      	cbnz	r4, 13b78 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   13b68:	2145      	movs	r1, #69	; 0x45
   13b6a:	4822      	ldr	r0, [pc, #136]	; (13bf4 <ccc_set_direct+0xc4>)
   13b6c:	f006 fc5b 	bl	1a426 <printk>
			return -EINVAL;
   13b70:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   13b74:	4625      	mov	r5, r4
   13b76:	e7ed      	b.n	13b54 <ccc_set_direct+0x24>
		} else if (!next) {
   13b78:	9801      	ldr	r0, [sp, #4]
   13b7a:	b978      	cbnz	r0, 13b9c <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   13b7c:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   13b80:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   13b84:	4649      	mov	r1, r9
   13b86:	4620      	mov	r0, r4
   13b88:	f007 fee2 	bl	1b950 <bt_settings_decode_key>
		if (err) {
   13b8c:	4605      	mov	r5, r0
   13b8e:	b150      	cbz	r0, 13ba6 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   13b90:	4622      	mov	r2, r4
   13b92:	2145      	movs	r1, #69	; 0x45
   13b94:	4818      	ldr	r0, [pc, #96]	; (13bf8 <ccc_set_direct+0xc8>)
   13b96:	f006 fc46 	bl	1a426 <printk>
   13b9a:	e7e9      	b.n	13b70 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   13b9c:	220a      	movs	r2, #10
   13b9e:	2100      	movs	r1, #0
   13ba0:	f007 fdb7 	bl	1b712 <strtol>
   13ba4:	e7ea      	b.n	13b7c <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   13ba6:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   13baa:	f1b8 0f00 	cmp.w	r8, #0
   13bae:	d019      	beq.n	13be4 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   13bb0:	f10d 0820 	add.w	r8, sp, #32
   13bb4:	22c0      	movs	r2, #192	; 0xc0
   13bb6:	4641      	mov	r1, r8
   13bb8:	4638      	mov	r0, r7
   13bba:	47b0      	blx	r6
			if (len < 0) {
   13bbc:	1e04      	subs	r4, r0, #0
   13bbe:	da05      	bge.n	13bcc <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   13bc0:	4622      	mov	r2, r4
   13bc2:	2145      	movs	r1, #69	; 0x45
   13bc4:	480d      	ldr	r0, [pc, #52]	; (13bfc <ccc_set_direct+0xcc>)
   13bc6:	f006 fc2e 	bl	1a426 <printk>
				return len;
   13bca:	e7d3      	b.n	13b74 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   13bcc:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   13bce:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   13bd2:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   13bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13bd8:	2001      	movs	r0, #1
   13bda:	4a09      	ldr	r2, [pc, #36]	; (13c00 <ccc_set_direct+0xd0>)
   13bdc:	ab04      	add	r3, sp, #16
   13bde:	f009 f85b 	bl	1cc98 <bt_gatt_foreach_attr>
	return 0;
   13be2:	e7b7      	b.n	13b54 <ccc_set_direct+0x24>
			load.count = 0;
   13be4:	e9cd 0006 	strd	r0, r0, [sp, #24]
   13be8:	e7f4      	b.n	13bd4 <ccc_set_direct+0xa4>
   13bea:	bf00      	nop
   13bec:	00021eca 	.word	0x00021eca
   13bf0:	00021ed1 	.word	0x00021ed1
   13bf4:	00020c6e 	.word	0x00020c6e
   13bf8:	00021d39 	.word	0x00021d39
   13bfc:	00021c4b 	.word	0x00021c4b
   13c00:	00013335 	.word	0x00013335

00013c04 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   13c04:	2300      	movs	r3, #0
{
   13c06:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   13c08:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   13c0a:	f7ff fe51 	bl	138b0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   13c0e:	1c41      	adds	r1, r0, #1
   13c10:	b289      	uxth	r1, r1
   13c12:	4608      	mov	r0, r1
   13c14:	4a03      	ldr	r2, [pc, #12]	; (13c24 <bt_gatt_attr_next+0x20>)
   13c16:	ab01      	add	r3, sp, #4
   13c18:	f009 f83e 	bl	1cc98 <bt_gatt_foreach_attr>
}
   13c1c:	9801      	ldr	r0, [sp, #4]
   13c1e:	b003      	add	sp, #12
   13c20:	f85d fb04 	ldr.w	pc, [sp], #4
   13c24:	0001c711 	.word	0x0001c711

00013c28 <bt_gatt_notify_cb>:
{
   13c28:	b530      	push	{r4, r5, lr}
   13c2a:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   13c2c:	460d      	mov	r5, r1
{
   13c2e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13c30:	b951      	cbnz	r1, 13c48 <bt_gatt_notify_cb+0x20>
   13c32:	4940      	ldr	r1, [pc, #256]	; (13d34 <bt_gatt_notify_cb+0x10c>)
   13c34:	4840      	ldr	r0, [pc, #256]	; (13d38 <bt_gatt_notify_cb+0x110>)
   13c36:	f640 023d 	movw	r2, #2109	; 0x83d
   13c3a:	f006 fbf4 	bl	1a426 <printk>
   13c3e:	f640 013d 	movw	r1, #2109	; 0x83d
   13c42:	483c      	ldr	r0, [pc, #240]	; (13d34 <bt_gatt_notify_cb+0x10c>)
   13c44:	f006 fe95 	bl	1a972 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   13c48:	686b      	ldr	r3, [r5, #4]
   13c4a:	b953      	cbnz	r3, 13c62 <bt_gatt_notify_cb+0x3a>
   13c4c:	4939      	ldr	r1, [pc, #228]	; (13d34 <bt_gatt_notify_cb+0x10c>)
   13c4e:	483a      	ldr	r0, [pc, #232]	; (13d38 <bt_gatt_notify_cb+0x110>)
   13c50:	f640 023e 	movw	r2, #2110	; 0x83e
   13c54:	f006 fbe7 	bl	1a426 <printk>
   13c58:	f640 013e 	movw	r1, #2110	; 0x83e
   13c5c:	4835      	ldr	r0, [pc, #212]	; (13d34 <bt_gatt_notify_cb+0x10c>)
   13c5e:	f006 fe88 	bl	1a972 <assert_post_action>
   13c62:	4836      	ldr	r0, [pc, #216]	; (13d3c <bt_gatt_notify_cb+0x114>)
   13c64:	f008 fe36 	bl	1c8d4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13c68:	0782      	lsls	r2, r0, #30
   13c6a:	d55d      	bpl.n	13d28 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   13c6c:	6868      	ldr	r0, [r5, #4]
   13c6e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13c70:	b114      	cbz	r4, 13c78 <bt_gatt_notify_cb+0x50>
   13c72:	7aa3      	ldrb	r3, [r4, #10]
   13c74:	2b07      	cmp	r3, #7
   13c76:	d15a      	bne.n	13d2e <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13c78:	f7ff fe1a 	bl	138b0 <bt_gatt_attr_get_handle>
   13c7c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   13c80:	b918      	cbnz	r0, 13c8a <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   13c82:	f06f 0001 	mvn.w	r0, #1
}
   13c86:	b00b      	add	sp, #44	; 0x2c
   13c88:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   13c8a:	682a      	ldr	r2, [r5, #0]
   13c8c:	b9aa      	cbnz	r2, 13cba <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13c8e:	9b05      	ldr	r3, [sp, #20]
   13c90:	a904      	add	r1, sp, #16
   13c92:	6818      	ldr	r0, [r3, #0]
   13c94:	2300      	movs	r3, #0
   13c96:	f88d 3010 	strb.w	r3, [sp, #16]
   13c9a:	f642 0303 	movw	r3, #10243	; 0x2803
   13c9e:	f8ad 3012 	strh.w	r3, [sp, #18]
   13ca2:	f007 fe79 	bl	1b998 <bt_uuid_cmp>
   13ca6:	b1c0      	cbz	r0, 13cda <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   13ca8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13cac:	b314      	cbz	r4, 13cf4 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   13cae:	4601      	mov	r1, r0
   13cb0:	462a      	mov	r2, r5
   13cb2:	4620      	mov	r0, r4
   13cb4:	f7ff fbd6 	bl	13464 <gatt_notify>
   13cb8:	e7e5      	b.n	13c86 <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13cba:	a905      	add	r1, sp, #20
   13cbc:	9102      	str	r1, [sp, #8]
   13cbe:	4920      	ldr	r1, [pc, #128]	; (13d40 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   13cc0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13cc2:	9101      	str	r1, [sp, #4]
   13cc4:	2101      	movs	r1, #1
   13cc6:	9100      	str	r1, [sp, #0]
   13cc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13ccc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13cce:	f7ff fe33 	bl	13938 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13cd2:	9b05      	ldr	r3, [sp, #20]
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d1da      	bne.n	13c8e <bt_gatt_notify_cb+0x66>
   13cd8:	e7d3      	b.n	13c82 <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13cda:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   13cdc:	68c3      	ldr	r3, [r0, #12]
   13cde:	799b      	ldrb	r3, [r3, #6]
   13ce0:	06db      	lsls	r3, r3, #27
   13ce2:	d402      	bmi.n	13cea <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   13ce4:	f06f 0015 	mvn.w	r0, #21
   13ce8:	e7cd      	b.n	13c86 <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13cea:	f008 ff87 	bl	1cbfc <bt_gatt_attr_value_handle>
   13cee:	f8ad 0018 	strh.w	r0, [sp, #24]
   13cf2:	e7d9      	b.n	13ca8 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   13cf4:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13cf8:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   13cfc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   13cfe:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13d00:	f8ad 2012 	strh.w	r2, [sp, #18]
   13d04:	aa05      	add	r2, sp, #20
   13d06:	9202      	str	r2, [sp, #8]
   13d08:	4a0e      	ldr	r2, [pc, #56]	; (13d44 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   13d0a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13d0e:	e9cd 3200 	strd	r3, r2, [sp]
   13d12:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13d16:	4623      	mov	r3, r4
   13d18:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   13d1a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13d1c:	f88d 4010 	strb.w	r4, [sp, #16]
   13d20:	f7ff fe0a 	bl	13938 <bt_gatt_foreach_attr_type>
	return data.err;
   13d24:	9807      	ldr	r0, [sp, #28]
   13d26:	e7ae      	b.n	13c86 <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   13d28:	f06f 000a 	mvn.w	r0, #10
   13d2c:	e7ab      	b.n	13c86 <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   13d2e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13d32:	e7a8      	b.n	13c86 <bt_gatt_notify_cb+0x5e>
   13d34:	00021e5e 	.word	0x00021e5e
   13d38:	0001f98f 	.word	0x0001f98f
   13d3c:	20008094 	.word	0x20008094
   13d40:	0001c76d 	.word	0x0001c76d
   13d44:	000134c5 	.word	0x000134c5

00013d48 <bt_gatt_indicate>:
{
   13d48:	b530      	push	{r4, r5, lr}
   13d4a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   13d4c:	460c      	mov	r4, r1
{
   13d4e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13d50:	b951      	cbnz	r1, 13d68 <bt_gatt_indicate+0x20>
   13d52:	4942      	ldr	r1, [pc, #264]	; (13e5c <bt_gatt_indicate+0x114>)
   13d54:	4842      	ldr	r0, [pc, #264]	; (13e60 <bt_gatt_indicate+0x118>)
   13d56:	f640 0289 	movw	r2, #2185	; 0x889
   13d5a:	f006 fb64 	bl	1a426 <printk>
   13d5e:	f640 0189 	movw	r1, #2185	; 0x889
   13d62:	483e      	ldr	r0, [pc, #248]	; (13e5c <bt_gatt_indicate+0x114>)
   13d64:	f006 fe05 	bl	1a972 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   13d68:	6863      	ldr	r3, [r4, #4]
   13d6a:	b953      	cbnz	r3, 13d82 <bt_gatt_indicate+0x3a>
   13d6c:	493b      	ldr	r1, [pc, #236]	; (13e5c <bt_gatt_indicate+0x114>)
   13d6e:	483c      	ldr	r0, [pc, #240]	; (13e60 <bt_gatt_indicate+0x118>)
   13d70:	f640 028a 	movw	r2, #2186	; 0x88a
   13d74:	f006 fb57 	bl	1a426 <printk>
   13d78:	f640 018a 	movw	r1, #2186	; 0x88a
   13d7c:	4837      	ldr	r0, [pc, #220]	; (13e5c <bt_gatt_indicate+0x114>)
   13d7e:	f006 fdf8 	bl	1a972 <assert_post_action>
   13d82:	4838      	ldr	r0, [pc, #224]	; (13e64 <bt_gatt_indicate+0x11c>)
   13d84:	f008 fda6 	bl	1c8d4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13d88:	0782      	lsls	r2, r0, #30
   13d8a:	d561      	bpl.n	13e50 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   13d8c:	6860      	ldr	r0, [r4, #4]
   13d8e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13d90:	b115      	cbz	r5, 13d98 <bt_gatt_indicate+0x50>
   13d92:	7aab      	ldrb	r3, [r5, #10]
   13d94:	2b07      	cmp	r3, #7
   13d96:	d15e      	bne.n	13e56 <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13d98:	f7ff fd8a 	bl	138b0 <bt_gatt_attr_get_handle>
   13d9c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   13da0:	b918      	cbnz	r0, 13daa <bt_gatt_indicate+0x62>
		return -ENOENT;
   13da2:	f06f 0001 	mvn.w	r0, #1
}
   13da6:	b00b      	add	sp, #44	; 0x2c
   13da8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   13daa:	6822      	ldr	r2, [r4, #0]
   13dac:	b9ba      	cbnz	r2, 13dde <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13dae:	9b05      	ldr	r3, [sp, #20]
   13db0:	a904      	add	r1, sp, #16
   13db2:	6818      	ldr	r0, [r3, #0]
   13db4:	2300      	movs	r3, #0
   13db6:	f88d 3010 	strb.w	r3, [sp, #16]
   13dba:	f642 0303 	movw	r3, #10243	; 0x2803
   13dbe:	f8ad 3012 	strh.w	r3, [sp, #18]
   13dc2:	f007 fde9 	bl	1b998 <bt_uuid_cmp>
   13dc6:	b1d0      	cbz	r0, 13dfe <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   13dc8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13dcc:	b325      	cbz	r5, 13e18 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   13dce:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   13dd0:	4601      	mov	r1, r0
   13dd2:	4622      	mov	r2, r4
   13dd4:	4628      	mov	r0, r5
		params->_ref = 1;
   13dd6:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   13dd8:	f7ff fb0e 	bl	133f8 <gatt_indicate>
   13ddc:	e7e3      	b.n	13da6 <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13dde:	a905      	add	r1, sp, #20
   13de0:	9102      	str	r1, [sp, #8]
   13de2:	4921      	ldr	r1, [pc, #132]	; (13e68 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   13de4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13de6:	9101      	str	r1, [sp, #4]
   13de8:	2101      	movs	r1, #1
   13dea:	9100      	str	r1, [sp, #0]
   13dec:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13df0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13df2:	f7ff fda1 	bl	13938 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13df6:	9b05      	ldr	r3, [sp, #20]
   13df8:	2b00      	cmp	r3, #0
   13dfa:	d1d8      	bne.n	13dae <bt_gatt_indicate+0x66>
   13dfc:	e7d1      	b.n	13da2 <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13dfe:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   13e00:	68c3      	ldr	r3, [r0, #12]
   13e02:	799b      	ldrb	r3, [r3, #6]
   13e04:	069b      	lsls	r3, r3, #26
   13e06:	d402      	bmi.n	13e0e <bt_gatt_indicate+0xc6>
			return -EINVAL;
   13e08:	f06f 0015 	mvn.w	r0, #21
   13e0c:	e7cb      	b.n	13da6 <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13e0e:	f008 fef5 	bl	1cbfc <bt_gatt_attr_value_handle>
   13e12:	f8ad 0018 	strh.w	r0, [sp, #24]
   13e16:	e7d7      	b.n	13dc8 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   13e18:	f06f 0338 	mvn.w	r3, #56	; 0x38
   13e1c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   13e1e:	2302      	movs	r3, #2
   13e20:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13e24:	f642 1302 	movw	r3, #10498	; 0x2902
   13e28:	f8ad 3012 	strh.w	r3, [sp, #18]
   13e2c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   13e2e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13e30:	9302      	str	r3, [sp, #8]
   13e32:	4b0e      	ldr	r3, [pc, #56]	; (13e6c <bt_gatt_indicate+0x124>)
   13e34:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13e38:	9301      	str	r3, [sp, #4]
   13e3a:	2301      	movs	r3, #1
   13e3c:	aa04      	add	r2, sp, #16
   13e3e:	9300      	str	r3, [sp, #0]
   13e40:	462b      	mov	r3, r5
	data.ind_params = params;
   13e42:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13e44:	f88d 5010 	strb.w	r5, [sp, #16]
   13e48:	f7ff fd76 	bl	13938 <bt_gatt_foreach_attr_type>
	return data.err;
   13e4c:	9807      	ldr	r0, [sp, #28]
   13e4e:	e7aa      	b.n	13da6 <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   13e50:	f06f 000a 	mvn.w	r0, #10
   13e54:	e7a7      	b.n	13da6 <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   13e56:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13e5a:	e7a4      	b.n	13da6 <bt_gatt_indicate+0x5e>
   13e5c:	00021e5e 	.word	0x00021e5e
   13e60:	0001f98f 	.word	0x0001f98f
   13e64:	20008094 	.word	0x20008094
   13e68:	0001c76d 	.word	0x0001c76d
   13e6c:	000134c5 	.word	0x000134c5

00013e70 <sc_process>:
{
   13e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   13e72:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   13e76:	4604      	mov	r4, r0
   13e78:	4628      	mov	r0, r5
   13e7a:	f008 fd2b 	bl	1c8d4 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   13e7e:	0783      	lsls	r3, r0, #30
   13e80:	d50a      	bpl.n	13e98 <sc_process+0x28>
   13e82:	491b      	ldr	r1, [pc, #108]	; (13ef0 <sc_process+0x80>)
   13e84:	481b      	ldr	r0, [pc, #108]	; (13ef4 <sc_process+0x84>)
   13e86:	f240 32ae 	movw	r2, #942	; 0x3ae
   13e8a:	f006 facc 	bl	1a426 <printk>
   13e8e:	f240 31ae 	movw	r1, #942	; 0x3ae
   13e92:	4817      	ldr	r0, [pc, #92]	; (13ef0 <sc_process+0x80>)
   13e94:	f006 fd6d 	bl	1a972 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   13e98:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   13e9c:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   13ea0:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   13ea4:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13ea8:	e8d5 3fef 	ldaex	r3, [r5]
   13eac:	f023 0301 	bic.w	r3, r3, #1
   13eb0:	e8c5 3fe2 	stlex	r2, r3, [r5]
   13eb4:	2a00      	cmp	r2, #0
   13eb6:	d1f7      	bne.n	13ea8 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13eb8:	4b0f      	ldr	r3, [pc, #60]	; (13ef8 <sc_process+0x88>)
	sc->start = 0U;
   13eba:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13ebc:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   13ec0:	4b0e      	ldr	r3, [pc, #56]	; (13efc <sc_process+0x8c>)
	sc->start = 0U;
   13ec2:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   13ec6:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   13eca:	ab01      	add	r3, sp, #4
   13ecc:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   13ed0:	2304      	movs	r3, #4
	sc->end = 0U;
   13ed2:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   13ed6:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   13eda:	f1a4 0120 	sub.w	r1, r4, #32
   13ede:	f7ff ff33 	bl	13d48 <bt_gatt_indicate>
   13ee2:	b918      	cbnz	r0, 13eec <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13ee4:	2102      	movs	r1, #2
   13ee6:	4628      	mov	r0, r5
   13ee8:	f008 fce9 	bl	1c8be <atomic_or>
}
   13eec:	b003      	add	sp, #12
   13eee:	bd30      	pop	{r4, r5, pc}
   13ef0:	00021e5e 	.word	0x00021e5e
   13ef4:	0001f98f 	.word	0x0001f98f
   13ef8:	0001e9b8 	.word	0x0001e9b8
   13efc:	00013791 	.word	0x00013791

00013f00 <update_ccc>:
{
   13f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13f04:	4b32      	ldr	r3, [pc, #200]	; (13fd0 <update_ccc+0xd0>)
   13f06:	6881      	ldr	r1, [r0, #8]
{
   13f08:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13f0a:	4299      	cmp	r1, r3
   13f0c:	d15c      	bne.n	13fc8 <update_ccc+0xc8>
	ccc = attr->user_data;
   13f0e:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   13f10:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   13f12:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 13fd4 <update_ccc+0xd4>
   13f16:	1c7d      	adds	r5, r7, #1
   13f18:	f107 0865 	add.w	r8, r7, #101	; 0x65
		if (!cfg->value ||
   13f1c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   13f20:	b193      	cbz	r3, 13f48 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13f22:	462a      	mov	r2, r5
   13f24:	4630      	mov	r0, r6
   13f26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   13f2a:	f007 ff1b 	bl	1bd64 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   13f2e:	b158      	cbz	r0, 13f48 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   13f30:	222a      	movs	r2, #42	; 0x2a
   13f32:	4621      	mov	r1, r4
   13f34:	4630      	mov	r0, r6
   13f36:	f008 febd 	bl	1ccb4 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   13f3a:	2803      	cmp	r0, #3
   13f3c:	d108      	bne.n	13f50 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   13f3e:	4622      	mov	r2, r4
   13f40:	2157      	movs	r1, #87	; 0x57
   13f42:	4648      	mov	r0, r9
   13f44:	f006 fa6f 	bl	1a426 <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13f48:	350a      	adds	r5, #10
   13f4a:	4545      	cmp	r5, r8
   13f4c:	d1e6      	bne.n	13f1c <update_ccc+0x1c>
   13f4e:	e03b      	b.n	13fc8 <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   13f50:	4639      	mov	r1, r7
   13f52:	4620      	mov	r0, r4
   13f54:	f008 fbdf 	bl	1c716 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   13f58:	4b1f      	ldr	r3, [pc, #124]	; (13fd8 <update_ccc+0xd8>)
   13f5a:	429f      	cmp	r7, r3
   13f5c:	d134      	bne.n	13fc8 <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13f5e:	7a30      	ldrb	r0, [r6, #8]
   13f60:	f106 0188 	add.w	r1, r6, #136	; 0x88
   13f64:	f7fe ff70 	bl	12e48 <find_sc_cfg>
	if (!cfg) {
   13f68:	4604      	mov	r4, r0
   13f6a:	b368      	cbz	r0, 13fc8 <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   13f6c:	8902      	ldrh	r2, [r0, #8]
   13f6e:	8943      	ldrh	r3, [r0, #10]
   13f70:	ea52 0103 	orrs.w	r1, r2, r3
   13f74:	d028      	beq.n	13fc8 <update_ccc+0xc8>
	index = bt_conn_index(conn);
   13f76:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   13f78:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   13f7c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   13f80:	f7fd fca4 	bl	118cc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   13f84:	2318      	movs	r3, #24
   13f86:	4915      	ldr	r1, [pc, #84]	; (13fdc <update_ccc+0xdc>)
   13f88:	4a15      	ldr	r2, [pc, #84]	; (13fe0 <update_ccc+0xe0>)
   13f8a:	fb03 1300 	mla	r3, r3, r0, r1
   13f8e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   13f90:	4a14      	ldr	r2, [pc, #80]	; (13fe4 <update_ccc+0xe4>)
   13f92:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   13f94:	aa01      	add	r2, sp, #4
   13f96:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   13f98:	2204      	movs	r2, #4
   13f9a:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13f9c:	b203      	sxth	r3, r0
   13f9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13fa2:	4630      	mov	r0, r6
   13fa4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   13fa8:	f7ff fece 	bl	13d48 <bt_gatt_indicate>
   13fac:	b118      	cbz	r0, 13fb6 <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   13fae:	2145      	movs	r1, #69	; 0x45
   13fb0:	480d      	ldr	r0, [pc, #52]	; (13fe8 <update_ccc+0xe8>)
   13fb2:	f006 fa38 	bl	1a426 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   13fb6:	2204      	movs	r2, #4
   13fb8:	2100      	movs	r1, #0
   13fba:	f104 0008 	add.w	r0, r4, #8
   13fbe:	f007 fca1 	bl	1b904 <memset>
		sc_store(cfg);
   13fc2:	4620      	mov	r0, r4
   13fc4:	f7ff f84a 	bl	1305c <sc_store>
}
   13fc8:	2001      	movs	r0, #1
   13fca:	b003      	add	sp, #12
   13fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13fd0:	00012efd 	.word	0x00012efd
   13fd4:	00021ee2 	.word	0x00021ee2
   13fd8:	20008494 	.word	0x20008494
   13fdc:	2000ac30 	.word	0x2000ac30
   13fe0:	0001e9b8 	.word	0x0001e9b8
   13fe4:	0001cbb3 	.word	0x0001cbb3
   13fe8:	00021efb 	.word	0x00021efb

00013fec <bt_gatt_is_subscribed>:
{
   13fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13fee:	460c      	mov	r4, r1
   13ff0:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   13ff2:	4606      	mov	r6, r0
   13ff4:	b950      	cbnz	r0, 1400c <bt_gatt_is_subscribed+0x20>
   13ff6:	4930      	ldr	r1, [pc, #192]	; (140b8 <bt_gatt_is_subscribed+0xcc>)
   13ff8:	4830      	ldr	r0, [pc, #192]	; (140bc <bt_gatt_is_subscribed+0xd0>)
   13ffa:	f640 12b5 	movw	r2, #2485	; 0x9b5
   13ffe:	f006 fa12 	bl	1a426 <printk>
   14002:	f640 11b5 	movw	r1, #2485	; 0x9b5
   14006:	482c      	ldr	r0, [pc, #176]	; (140b8 <bt_gatt_is_subscribed+0xcc>)
   14008:	f006 fcb3 	bl	1a972 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1400c:	b954      	cbnz	r4, 14024 <bt_gatt_is_subscribed+0x38>
   1400e:	492a      	ldr	r1, [pc, #168]	; (140b8 <bt_gatt_is_subscribed+0xcc>)
   14010:	482a      	ldr	r0, [pc, #168]	; (140bc <bt_gatt_is_subscribed+0xd0>)
   14012:	f640 12b6 	movw	r2, #2486	; 0x9b6
   14016:	f006 fa06 	bl	1a426 <printk>
   1401a:	f640 11b6 	movw	r1, #2486	; 0x9b6
   1401e:	4826      	ldr	r0, [pc, #152]	; (140b8 <bt_gatt_is_subscribed+0xcc>)
   14020:	f006 fca7 	bl	1a972 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14024:	7ab3      	ldrb	r3, [r6, #10]
   14026:	2b07      	cmp	r3, #7
   14028:	d130      	bne.n	1408c <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1402a:	2300      	movs	r3, #0
   1402c:	f88d 3004 	strb.w	r3, [sp, #4]
   14030:	f642 0303 	movw	r3, #10243	; 0x2803
   14034:	6820      	ldr	r0, [r4, #0]
   14036:	a901      	add	r1, sp, #4
   14038:	f8ad 3006 	strh.w	r3, [sp, #6]
   1403c:	f007 fcac 	bl	1b998 <bt_uuid_cmp>
   14040:	b940      	cbnz	r0, 14054 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   14042:	68e3      	ldr	r3, [r4, #12]
   14044:	799b      	ldrb	r3, [r3, #6]
   14046:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   1404a:	d020      	beq.n	1408e <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   1404c:	4620      	mov	r0, r4
   1404e:	f7ff fdd9 	bl	13c04 <bt_gatt_attr_next>
   14052:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14054:	2300      	movs	r3, #0
   14056:	6820      	ldr	r0, [r4, #0]
   14058:	f88d 3004 	strb.w	r3, [sp, #4]
   1405c:	f642 1302 	movw	r3, #10498	; 0x2902
   14060:	a901      	add	r1, sp, #4
   14062:	f8ad 3006 	strh.w	r3, [sp, #6]
   14066:	f007 fc97 	bl	1b998 <bt_uuid_cmp>
   1406a:	b118      	cbz	r0, 14074 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   1406c:	4620      	mov	r0, r4
   1406e:	f7ff fdc9 	bl	13c04 <bt_gatt_attr_next>
   14072:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14074:	2500      	movs	r5, #0
   14076:	f642 1302 	movw	r3, #10498	; 0x2902
   1407a:	6820      	ldr	r0, [r4, #0]
   1407c:	a901      	add	r1, sp, #4
   1407e:	f88d 5004 	strb.w	r5, [sp, #4]
   14082:	f8ad 3006 	strh.w	r3, [sp, #6]
   14086:	f007 fc87 	bl	1b998 <bt_uuid_cmp>
   1408a:	b110      	cbz	r0, 14092 <bt_gatt_is_subscribed+0xa6>
		return false;
   1408c:	2000      	movs	r0, #0
}
   1408e:	b003      	add	sp, #12
   14090:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   14092:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   14094:	1c6c      	adds	r4, r5, #1
   14096:	3565      	adds	r5, #101	; 0x65
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   14098:	4622      	mov	r2, r4
   1409a:	4630      	mov	r0, r6
   1409c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   140a0:	f007 fe60 	bl	1bd64 <bt_conn_is_peer_addr_le>
   140a4:	b118      	cbz	r0, 140ae <bt_gatt_is_subscribed+0xc2>
   140a6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   140aa:	421f      	tst	r7, r3
   140ac:	d1ef      	bne.n	1408e <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   140ae:	340a      	adds	r4, #10
   140b0:	42ac      	cmp	r4, r5
   140b2:	d1f1      	bne.n	14098 <bt_gatt_is_subscribed+0xac>
   140b4:	e7ea      	b.n	1408c <bt_gatt_is_subscribed+0xa0>
   140b6:	bf00      	nop
   140b8:	00021e5e 	.word	0x00021e5e
   140bc:	0001f98f 	.word	0x0001f98f

000140c0 <bt_gatt_discover>:
{
   140c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   140c2:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   140c4:	4605      	mov	r5, r0
{
   140c6:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   140c8:	b950      	cbnz	r0, 140e0 <bt_gatt_discover+0x20>
   140ca:	4989      	ldr	r1, [pc, #548]	; (142f0 <bt_gatt_discover+0x230>)
   140cc:	4889      	ldr	r0, [pc, #548]	; (142f4 <bt_gatt_discover+0x234>)
   140ce:	f640 5277 	movw	r2, #3447	; 0xd77
   140d2:	f006 f9a8 	bl	1a426 <printk>
   140d6:	f640 5177 	movw	r1, #3447	; 0xd77
   140da:	4885      	ldr	r0, [pc, #532]	; (142f0 <bt_gatt_discover+0x230>)
   140dc:	f006 fc49 	bl	1a972 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   140e0:	b10c      	cbz	r4, 140e6 <bt_gatt_discover+0x26>
   140e2:	6863      	ldr	r3, [r4, #4]
   140e4:	b953      	cbnz	r3, 140fc <bt_gatt_discover+0x3c>
   140e6:	4982      	ldr	r1, [pc, #520]	; (142f0 <bt_gatt_discover+0x230>)
   140e8:	4882      	ldr	r0, [pc, #520]	; (142f4 <bt_gatt_discover+0x234>)
   140ea:	f640 5278 	movw	r2, #3448	; 0xd78
   140ee:	f006 f99a 	bl	1a426 <printk>
   140f2:	f640 5178 	movw	r1, #3448	; 0xd78
   140f6:	487e      	ldr	r0, [pc, #504]	; (142f0 <bt_gatt_discover+0x230>)
   140f8:	f006 fc3b 	bl	1a972 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   140fc:	8923      	ldrh	r3, [r4, #8]
   140fe:	b10b      	cbz	r3, 14104 <bt_gatt_discover+0x44>
   14100:	89e3      	ldrh	r3, [r4, #14]
   14102:	b953      	cbnz	r3, 1411a <bt_gatt_discover+0x5a>
   14104:	497a      	ldr	r1, [pc, #488]	; (142f0 <bt_gatt_discover+0x230>)
   14106:	487b      	ldr	r0, [pc, #492]	; (142f4 <bt_gatt_discover+0x234>)
   14108:	f640 5279 	movw	r2, #3449	; 0xd79
   1410c:	f006 f98b 	bl	1a426 <printk>
   14110:	f640 5179 	movw	r1, #3449	; 0xd79
   14114:	4876      	ldr	r0, [pc, #472]	; (142f0 <bt_gatt_discover+0x230>)
   14116:	f006 fc2c 	bl	1a972 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1411a:	8922      	ldrh	r2, [r4, #8]
   1411c:	89e3      	ldrh	r3, [r4, #14]
   1411e:	429a      	cmp	r2, r3
   14120:	d90a      	bls.n	14138 <bt_gatt_discover+0x78>
   14122:	4973      	ldr	r1, [pc, #460]	; (142f0 <bt_gatt_discover+0x230>)
   14124:	4873      	ldr	r0, [pc, #460]	; (142f4 <bt_gatt_discover+0x234>)
   14126:	f640 527b 	movw	r2, #3451	; 0xd7b
   1412a:	f006 f97c 	bl	1a426 <printk>
   1412e:	f640 517b 	movw	r1, #3451	; 0xd7b
   14132:	486f      	ldr	r0, [pc, #444]	; (142f0 <bt_gatt_discover+0x230>)
   14134:	f006 fc1d 	bl	1a972 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14138:	7aab      	ldrb	r3, [r5, #10]
   1413a:	2b07      	cmp	r3, #7
   1413c:	f040 80d5 	bne.w	142ea <bt_gatt_discover+0x22a>
	switch (params->type) {
   14140:	7c22      	ldrb	r2, [r4, #16]
   14142:	2a05      	cmp	r2, #5
   14144:	f200 80cc 	bhi.w	142e0 <bt_gatt_discover+0x220>
   14148:	e8df f002 	tbb	[pc, r2]
   1414c:	64640303 	.word	0x64640303
   14150:	b683      	.short	0xb683
		if (params->uuid) {
   14152:	6823      	ldr	r3, [r4, #0]
   14154:	2b00      	cmp	r3, #0
   14156:	d03e      	beq.n	141d6 <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   14158:	2206      	movs	r2, #6
   1415a:	4628      	mov	r0, r5
   1415c:	4611      	mov	r1, r2
   1415e:	f7fe fa0d 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   14162:	4606      	mov	r6, r0
   14164:	b918      	cbnz	r0, 1416e <bt_gatt_discover+0xae>
		return -ENOMEM;
   14166:	f06f 000b 	mvn.w	r0, #11
}
   1416a:	b005      	add	sp, #20
   1416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1416e:	f100 0708 	add.w	r7, r0, #8
   14172:	2106      	movs	r1, #6
   14174:	4638      	mov	r0, r7
   14176:	f001 f9f9 	bl	1556c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1417a:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   1417c:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1417e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14180:	89e3      	ldrh	r3, [r4, #14]
   14182:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14184:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   14186:	2b00      	cmp	r3, #0
   14188:	f642 0301 	movw	r3, #10241	; 0x2801
   1418c:	bf08      	it	eq
   1418e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   14192:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   14194:	780a      	ldrb	r2, [r1, #0]
   14196:	b15a      	cbz	r2, 141b0 <bt_gatt_discover+0xf0>
   14198:	2a02      	cmp	r2, #2
   1419a:	d016      	beq.n	141ca <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   1419c:	4856      	ldr	r0, [pc, #344]	; (142f8 <bt_gatt_discover+0x238>)
   1419e:	2145      	movs	r1, #69	; 0x45
   141a0:	f006 f941 	bl	1a426 <printk>
		net_buf_unref(buf);
   141a4:	4630      	mov	r0, r6
   141a6:	f001 f8cb 	bl	15340 <net_buf_unref>
	return -EINVAL;
   141aa:	f06f 0015 	mvn.w	r0, #21
   141ae:	e7dc      	b.n	1416a <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   141b0:	4638      	mov	r0, r7
   141b2:	8849      	ldrh	r1, [r1, #2]
   141b4:	f008 fecc 	bl	1cf50 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   141b8:	4623      	mov	r3, r4
   141ba:	4a50      	ldr	r2, [pc, #320]	; (142fc <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   141bc:	4631      	mov	r1, r6
   141be:	4628      	mov	r0, r5
}
   141c0:	b005      	add	sp, #20
   141c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   141c6:	f7ff b811 	b.w	131ec <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   141ca:	2210      	movs	r2, #16
   141cc:	4638      	mov	r0, r7
   141ce:	3101      	adds	r1, #1
   141d0:	f008 feab 	bl	1cf2a <net_buf_simple_add_mem>
   141d4:	e7f0      	b.n	141b8 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   141d6:	2204      	movs	r2, #4
   141d8:	2110      	movs	r1, #16
   141da:	4628      	mov	r0, r5
   141dc:	f7fe f9ce 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   141e0:	4606      	mov	r6, r0
   141e2:	2800      	cmp	r0, #0
   141e4:	d0bf      	beq.n	14166 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   141e6:	f100 0708 	add.w	r7, r0, #8
   141ea:	2104      	movs	r1, #4
   141ec:	4638      	mov	r0, r7
   141ee:	f001 f9bd 	bl	1556c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   141f2:	8923      	ldrh	r3, [r4, #8]
   141f4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   141f6:	89e3      	ldrh	r3, [r4, #14]
   141f8:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   141fa:	7c23      	ldrb	r3, [r4, #16]
   141fc:	b93b      	cbnz	r3, 1420e <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   141fe:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   14202:	4638      	mov	r0, r7
   14204:	f008 fea4 	bl	1cf50 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   14208:	4623      	mov	r3, r4
   1420a:	4a3d      	ldr	r2, [pc, #244]	; (14300 <bt_gatt_discover+0x240>)
   1420c:	e7d6      	b.n	141bc <bt_gatt_discover+0xfc>
   1420e:	f642 0101 	movw	r1, #10241	; 0x2801
   14212:	e7f6      	b.n	14202 <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14214:	2204      	movs	r2, #4
   14216:	2108      	movs	r1, #8
   14218:	4628      	mov	r0, r5
   1421a:	f7fe f9af 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   1421e:	4606      	mov	r6, r0
   14220:	2800      	cmp	r0, #0
   14222:	d0a0      	beq.n	14166 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14224:	f100 0708 	add.w	r7, r0, #8
   14228:	2104      	movs	r1, #4
   1422a:	4638      	mov	r0, r7
   1422c:	f001 f99e 	bl	1556c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14230:	8923      	ldrh	r3, [r4, #8]
   14232:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14234:	89e3      	ldrh	r3, [r4, #14]
   14236:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14238:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   1423a:	4638      	mov	r0, r7
   1423c:	2b02      	cmp	r3, #2
   1423e:	bf0c      	ite	eq
   14240:	f642 0102 	movweq	r1, #10242	; 0x2802
   14244:	f642 0103 	movwne	r1, #10243	; 0x2803
   14248:	f008 fe82 	bl	1cf50 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   1424c:	4623      	mov	r3, r4
   1424e:	4a2d      	ldr	r2, [pc, #180]	; (14304 <bt_gatt_discover+0x244>)
   14250:	e7b4      	b.n	141bc <bt_gatt_discover+0xfc>
		if (params->uuid &&
   14252:	6820      	ldr	r0, [r4, #0]
   14254:	b380      	cbz	r0, 142b8 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   14256:	2600      	movs	r6, #0
   14258:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1425c:	4669      	mov	r1, sp
   1425e:	f88d 6000 	strb.w	r6, [sp]
   14262:	f8ad 3002 	strh.w	r3, [sp, #2]
   14266:	f007 fb97 	bl	1b998 <bt_uuid_cmp>
		if (params->uuid &&
   1426a:	2800      	cmp	r0, #0
   1426c:	d09d      	beq.n	141aa <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1426e:	f642 0301 	movw	r3, #10241	; 0x2801
   14272:	6820      	ldr	r0, [r4, #0]
   14274:	a901      	add	r1, sp, #4
   14276:	f88d 6004 	strb.w	r6, [sp, #4]
   1427a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1427e:	f007 fb8b 	bl	1b998 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   14282:	2800      	cmp	r0, #0
   14284:	d091      	beq.n	141aa <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   14286:	f642 0302 	movw	r3, #10242	; 0x2802
   1428a:	6820      	ldr	r0, [r4, #0]
   1428c:	a902      	add	r1, sp, #8
   1428e:	f88d 6008 	strb.w	r6, [sp, #8]
   14292:	f8ad 300a 	strh.w	r3, [sp, #10]
   14296:	f007 fb7f 	bl	1b998 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1429a:	2800      	cmp	r0, #0
   1429c:	d085      	beq.n	141aa <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1429e:	f642 0303 	movw	r3, #10243	; 0x2803
   142a2:	6820      	ldr	r0, [r4, #0]
   142a4:	a903      	add	r1, sp, #12
   142a6:	f88d 600c 	strb.w	r6, [sp, #12]
   142aa:	f8ad 300e 	strh.w	r3, [sp, #14]
   142ae:	f007 fb73 	bl	1b998 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   142b2:	2800      	cmp	r0, #0
   142b4:	f43f af79 	beq.w	141aa <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   142b8:	2204      	movs	r2, #4
   142ba:	4628      	mov	r0, r5
   142bc:	4611      	mov	r1, r2
   142be:	f7fe f95d 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   142c2:	4606      	mov	r6, r0
   142c4:	2800      	cmp	r0, #0
   142c6:	f43f af4e 	beq.w	14166 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   142ca:	2104      	movs	r1, #4
   142cc:	3008      	adds	r0, #8
   142ce:	f001 f94d 	bl	1556c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   142d2:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   142d4:	4a0c      	ldr	r2, [pc, #48]	; (14308 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   142d6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   142d8:	89e3      	ldrh	r3, [r4, #14]
   142da:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   142dc:	4623      	mov	r3, r4
   142de:	e76d      	b.n	141bc <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   142e0:	2145      	movs	r1, #69	; 0x45
   142e2:	480a      	ldr	r0, [pc, #40]	; (1430c <bt_gatt_discover+0x24c>)
   142e4:	f006 f89f 	bl	1a426 <printk>
   142e8:	e75f      	b.n	141aa <bt_gatt_discover+0xea>
		return -ENOTCONN;
   142ea:	f06f 0038 	mvn.w	r0, #56	; 0x38
   142ee:	e73c      	b.n	1416a <bt_gatt_discover+0xaa>
   142f0:	00021e5e 	.word	0x00021e5e
   142f4:	0001f98f 	.word	0x0001f98f
   142f8:	00021f1d 	.word	0x00021f1d
   142fc:	0001cd35 	.word	0x0001cd35
   14300:	00014311 	.word	0x00014311
   14304:	00014419 	.word	0x00014419
   14308:	000146c9 	.word	0x000146c9
   1430c:	00021f37 	.word	0x00021f37

00014310 <gatt_read_group_rsp>:
{
   14310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14314:	b08f      	sub	sp, #60	; 0x3c
   14316:	4681      	mov	r9, r0
   14318:	4617      	mov	r7, r2
   1431a:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   1431c:	b131      	cbz	r1, 1432c <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   1431e:	462a      	mov	r2, r5
   14320:	2100      	movs	r1, #0
   14322:	686b      	ldr	r3, [r5, #4]
}
   14324:	b00f      	add	sp, #60	; 0x3c
   14326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1432a:	4718      	bx	r3
	switch (rsp->len) {
   1432c:	7812      	ldrb	r2, [r2, #0]
   1432e:	2a06      	cmp	r2, #6
   14330:	d00d      	beq.n	1434e <gatt_read_group_rsp+0x3e>
   14332:	2a14      	cmp	r2, #20
   14334:	d021      	beq.n	1437a <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   14336:	2145      	movs	r1, #69	; 0x45
   14338:	4836      	ldr	r0, [pc, #216]	; (14414 <gatt_read_group_rsp+0x104>)
   1433a:	f006 f874 	bl	1a426 <printk>
	params->func(conn, NULL, params);
   1433e:	462a      	mov	r2, r5
   14340:	2100      	movs	r1, #0
   14342:	4648      	mov	r0, r9
   14344:	686b      	ldr	r3, [r5, #4]
   14346:	4798      	blx	r3
}
   14348:	b00f      	add	sp, #60	; 0x3c
   1434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   1434e:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   14352:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14354:	3b01      	subs	r3, #1
   14356:	b29c      	uxth	r4, r3
   14358:	f107 0801 	add.w	r8, r7, #1
   1435c:	783b      	ldrb	r3, [r7, #0]
   1435e:	42a3      	cmp	r3, r4
   14360:	d90f      	bls.n	14382 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   14362:	2c00      	cmp	r4, #0
   14364:	d1eb      	bne.n	1433e <gatt_read_group_rsp+0x2e>
   14366:	2e00      	cmp	r6, #0
   14368:	d0e9      	beq.n	1433e <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   1436a:	462a      	mov	r2, r5
   1436c:	4631      	mov	r1, r6
   1436e:	4648      	mov	r0, r9
}
   14370:	b00f      	add	sp, #60	; 0x3c
   14372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14376:	f008 bcc0 	b.w	1ccfa <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   1437a:	2202      	movs	r2, #2
   1437c:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14380:	e7e7      	b.n	14352 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   14382:	2214      	movs	r2, #20
   14384:	2100      	movs	r1, #0
   14386:	a809      	add	r0, sp, #36	; 0x24
   14388:	f007 fabc 	bl	1b904 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1438c:	f8b8 a000 	ldrh.w	sl, [r8]
   14390:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   14394:	2b00      	cmp	r3, #0
   14396:	d0d2      	beq.n	1433e <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   14398:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   1439c:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   143a0:	2e00      	cmp	r6, #0
   143a2:	d0cc      	beq.n	1433e <gatt_read_group_rsp+0x2e>
   143a4:	42b3      	cmp	r3, r6
   143a6:	d8ca      	bhi.n	1433e <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   143a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   143ac:	b323      	cbz	r3, 143f8 <gatt_read_group_rsp+0xe8>
   143ae:	2b02      	cmp	r3, #2
   143b0:	d02a      	beq.n	14408 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   143b2:	f04f 0300 	mov.w	r3, #0
   143b6:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   143ba:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   143bc:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   143be:	2b00      	cmp	r3, #0
   143c0:	f642 0301 	movw	r3, #10241	; 0x2801
   143c4:	bf08      	it	eq
   143c6:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   143ca:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   143ce:	ab04      	add	r3, sp, #16
   143d0:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   143d2:	ab01      	add	r3, sp, #4
   143d4:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   143d6:	ab02      	add	r3, sp, #8
   143d8:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   143da:	4648      	mov	r0, r9
   143dc:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   143de:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   143e2:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   143e6:	a909      	add	r1, sp, #36	; 0x24
   143e8:	4798      	blx	r3
   143ea:	2800      	cmp	r0, #0
   143ec:	d0ac      	beq.n	14348 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   143ee:	783a      	ldrb	r2, [r7, #0]
   143f0:	1aa4      	subs	r4, r4, r2
   143f2:	b2a4      	uxth	r4, r4
   143f4:	4490      	add	r8, r2
   143f6:	e7b1      	b.n	1435c <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   143f8:	2202      	movs	r2, #2
   143fa:	f108 0104 	add.w	r1, r8, #4
   143fe:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14402:	f007 fa54 	bl	1b8ae <memcpy>
			break;
   14406:	e7d4      	b.n	143b2 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14408:	2210      	movs	r2, #16
   1440a:	f108 0104 	add.w	r1, r8, #4
   1440e:	f10d 0011 	add.w	r0, sp, #17
   14412:	e7f6      	b.n	14402 <gatt_read_group_rsp+0xf2>
   14414:	00021f57 	.word	0x00021f57

00014418 <gatt_read_type_rsp>:
{
   14418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1441c:	b091      	sub	sp, #68	; 0x44
   1441e:	4607      	mov	r7, r0
   14420:	4690      	mov	r8, r2
   14422:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   14424:	b131      	cbz	r1, 14434 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   14426:	462a      	mov	r2, r5
   14428:	2100      	movs	r1, #0
   1442a:	686b      	ldr	r3, [r5, #4]
}
   1442c:	b011      	add	sp, #68	; 0x44
   1442e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   14432:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14434:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   14436:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14438:	2802      	cmp	r0, #2
   1443a:	f040 8089 	bne.w	14550 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   1443e:	2a06      	cmp	r2, #6
   14440:	d01c      	beq.n	1447c <gatt_read_type_rsp+0x64>
   14442:	2a08      	cmp	r2, #8
   14444:	f040 8088 	bne.w	14558 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   14448:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   1444c:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1444e:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   14450:	1e5c      	subs	r4, r3, #1
   14452:	b2a4      	uxth	r4, r4
   14454:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   14458:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   1445c:	f898 3000 	ldrb.w	r3, [r8]
   14460:	42a3      	cmp	r3, r4
   14462:	d90e      	bls.n	14482 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   14464:	2c00      	cmp	r4, #0
   14466:	d17b      	bne.n	14560 <gatt_read_type_rsp+0x148>
   14468:	2e00      	cmp	r6, #0
   1446a:	d079      	beq.n	14560 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   1446c:	462a      	mov	r2, r5
   1446e:	4631      	mov	r1, r6
   14470:	4638      	mov	r0, r7
}
   14472:	b011      	add	sp, #68	; 0x44
   14474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14478:	f008 bc3f 	b.w	1ccfa <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   1447c:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   14480:	e7e4      	b.n	1444c <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   14482:	f8b9 3000 	ldrh.w	r3, [r9]
   14486:	b29e      	uxth	r6, r3
		if (!handle) {
   14488:	2e00      	cmp	r6, #0
   1448a:	d069      	beq.n	14560 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1448c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   14490:	f8ad 2014 	strh.w	r2, [sp, #20]
   14494:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   14496:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   1449a:	b291      	uxth	r1, r2
   1449c:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   144a0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   144a4:	b182      	cbz	r2, 144c8 <gatt_read_type_rsp+0xb0>
   144a6:	2a02      	cmp	r2, #2
   144a8:	d019      	beq.n	144de <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   144aa:	6829      	ldr	r1, [r5, #0]
   144ac:	2900      	cmp	r1, #0
   144ae:	d036      	beq.n	1451e <gatt_read_type_rsp+0x106>
   144b0:	4650      	mov	r0, sl
   144b2:	9301      	str	r3, [sp, #4]
   144b4:	f007 fa70 	bl	1b998 <bt_uuid_cmp>
   144b8:	9b01      	ldr	r3, [sp, #4]
   144ba:	b380      	cbz	r0, 1451e <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   144bc:	f898 2000 	ldrb.w	r2, [r8]
   144c0:	1aa4      	subs	r4, r4, r2
   144c2:	b2a4      	uxth	r4, r4
   144c4:	4491      	add	r9, r2
   144c6:	e7c9      	b.n	1445c <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   144c8:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   144cc:	f899 2006 	ldrb.w	r2, [r9, #6]
   144d0:	f899 1007 	ldrb.w	r1, [r9, #7]
   144d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   144d8:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   144dc:	e7e5      	b.n	144aa <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   144de:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   144e0:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   144e2:	4638      	mov	r0, r7
   144e4:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   144e6:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   144e8:	9201      	str	r2, [sp, #4]
   144ea:	f7fe f847 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   144ee:	4604      	mov	r4, r0
   144f0:	b190      	cbz	r0, 14518 <gatt_read_type_rsp+0x100>
   144f2:	9a01      	ldr	r2, [sp, #4]
   144f4:	3008      	adds	r0, #8
   144f6:	4611      	mov	r1, r2
   144f8:	f001 f838 	bl	1556c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   144fc:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   144fe:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14500:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14502:	4a49      	ldr	r2, [pc, #292]	; (14628 <gatt_read_type_rsp+0x210>)
   14504:	462b      	mov	r3, r5
   14506:	4638      	mov	r0, r7
   14508:	f7fe fe70 	bl	131ec <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   1450c:	b286      	uxth	r6, r0
	if (!handle) {
   1450e:	2e00      	cmp	r6, #0
   14510:	d1ac      	bne.n	1446c <gatt_read_type_rsp+0x54>
}
   14512:	b011      	add	sp, #68	; 0x44
   14514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   14518:	f06f 000b 	mvn.w	r0, #11
   1451c:	e7f6      	b.n	1450c <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1451e:	f642 0202 	movw	r2, #10242	; 0x2802
   14522:	f8ad 200e 	strh.w	r2, [sp, #14]
   14526:	aa03      	add	r2, sp, #12
   14528:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   1452c:	aa04      	add	r2, sp, #16
   1452e:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14530:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14534:	462a      	mov	r2, r5
   14536:	4638      	mov	r0, r7
   14538:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1453a:	f88d b00c 	strb.w	fp, [sp, #12]
   1453e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   14542:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14546:	a90b      	add	r1, sp, #44	; 0x2c
   14548:	4798      	blx	r3
   1454a:	2800      	cmp	r0, #0
   1454c:	d1b6      	bne.n	144bc <gatt_read_type_rsp+0xa4>
   1454e:	e7e0      	b.n	14512 <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   14550:	2a07      	cmp	r2, #7
   14552:	d00b      	beq.n	1456c <gatt_read_type_rsp+0x154>
   14554:	2a15      	cmp	r2, #21
   14556:	d02e      	beq.n	145b6 <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   14558:	2145      	movs	r1, #69	; 0x45
   1455a:	4834      	ldr	r0, [pc, #208]	; (1462c <gatt_read_type_rsp+0x214>)
   1455c:	f005 ff63 	bl	1a426 <printk>
	params->func(conn, NULL, params);
   14560:	462a      	mov	r2, r5
   14562:	2100      	movs	r1, #0
   14564:	4638      	mov	r0, r7
   14566:	686b      	ldr	r3, [r5, #4]
   14568:	4798      	blx	r3
	if (!handle) {
   1456a:	e7d2      	b.n	14512 <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   1456c:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14570:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14572:	1e5c      	subs	r4, r3, #1
   14574:	b2a4      	uxth	r4, r4
   14576:	f108 0901 	add.w	r9, r8, #1
   1457a:	f10d 0a18 	add.w	sl, sp, #24
   1457e:	f898 3000 	ldrb.w	r3, [r8]
   14582:	42a3      	cmp	r3, r4
   14584:	f63f af6e 	bhi.w	14464 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   14588:	f8b9 b000 	ldrh.w	fp, [r9]
   1458c:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   14590:	2e00      	cmp	r6, #0
   14592:	d0e5      	beq.n	14560 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   14594:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14598:	b18b      	cbz	r3, 145be <gatt_read_type_rsp+0x1a6>
   1459a:	2b02      	cmp	r3, #2
   1459c:	d018      	beq.n	145d0 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1459e:	6829      	ldr	r1, [r5, #0]
   145a0:	b1f1      	cbz	r1, 145e0 <gatt_read_type_rsp+0x1c8>
   145a2:	4650      	mov	r0, sl
   145a4:	f007 f9f8 	bl	1b998 <bt_uuid_cmp>
   145a8:	b1d0      	cbz	r0, 145e0 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   145aa:	f898 2000 	ldrb.w	r2, [r8]
   145ae:	1aa4      	subs	r4, r4, r2
   145b0:	b2a4      	uxth	r4, r4
   145b2:	4491      	add	r9, r2
   145b4:	e7e3      	b.n	1457e <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   145b6:	2202      	movs	r2, #2
   145b8:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   145bc:	e7d8      	b.n	14570 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   145be:	f899 3005 	ldrb.w	r3, [r9, #5]
   145c2:	f899 2006 	ldrb.w	r2, [r9, #6]
   145c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   145ca:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   145ce:	e7e6      	b.n	1459e <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   145d0:	2210      	movs	r2, #16
   145d2:	f109 0105 	add.w	r1, r9, #5
   145d6:	f10d 0019 	add.w	r0, sp, #25
   145da:	f007 f968 	bl	1b8ae <memcpy>
			break;
   145de:	e7de      	b.n	1459e <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   145e0:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   145e4:	f899 3002 	ldrb.w	r3, [r9, #2]
   145e8:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   145ec:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   145f0:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   145f4:	2300      	movs	r3, #0
   145f6:	f8ad 200e 	strh.w	r2, [sp, #14]
   145fa:	aa03      	add	r2, sp, #12
   145fc:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14600:	aa04      	add	r2, sp, #16
   14602:	f88d 300c 	strb.w	r3, [sp, #12]
   14606:	930d      	str	r3, [sp, #52]	; 0x34
   14608:	920e      	str	r2, [sp, #56]	; 0x38
   1460a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1460e:	462a      	mov	r2, r5
   14610:	4638      	mov	r0, r7
   14612:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14614:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14618:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1461c:	a90b      	add	r1, sp, #44	; 0x2c
   1461e:	4798      	blx	r3
   14620:	2800      	cmp	r0, #0
   14622:	d1c2      	bne.n	145aa <gatt_read_type_rsp+0x192>
   14624:	e775      	b.n	14512 <gatt_read_type_rsp+0xfa>
   14626:	bf00      	nop
   14628:	00014631 	.word	0x00014631
   1462c:	00021f57 	.word	0x00021f57

00014630 <read_included_uuid_cb>:
{
   14630:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14632:	2b10      	cmp	r3, #16
{
   14634:	b08e      	sub	sp, #56	; 0x38
   14636:	4611      	mov	r1, r2
   14638:	4605      	mov	r5, r0
   1463a:	461a      	mov	r2, r3
   1463c:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   1463e:	d00b      	beq.n	14658 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14640:	2145      	movs	r1, #69	; 0x45
   14642:	4820      	ldr	r0, [pc, #128]	; (146c4 <read_included_uuid_cb+0x94>)
   14644:	f005 feef 	bl	1a426 <printk>
		params->func(conn, NULL, params);
   14648:	4622      	mov	r2, r4
   1464a:	2100      	movs	r1, #0
   1464c:	4628      	mov	r0, r5
   1464e:	6863      	ldr	r3, [r4, #4]
}
   14650:	b00e      	add	sp, #56	; 0x38
   14652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14656:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14658:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   1465a:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   1465c:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   14660:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   14662:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   14666:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   1466a:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   1466c:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   1466e:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   14672:	f007 f91c 	bl	1b8ae <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14676:	6821      	ldr	r1, [r4, #0]
   14678:	b9c9      	cbnz	r1, 146ae <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1467a:	f642 0202 	movw	r2, #10242	; 0x2802
   1467e:	2300      	movs	r3, #0
   14680:	f8ad 2006 	strh.w	r2, [sp, #6]
   14684:	aa01      	add	r2, sp, #4
   14686:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   1468a:	f88d 3004 	strb.w	r3, [sp, #4]
   1468e:	930b      	str	r3, [sp, #44]	; 0x2c
   14690:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   14694:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14696:	aa02      	add	r2, sp, #8
   14698:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   1469a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1469e:	4622      	mov	r2, r4
   146a0:	4628      	mov	r0, r5
   146a2:	6863      	ldr	r3, [r4, #4]
   146a4:	a909      	add	r1, sp, #36	; 0x24
   146a6:	4798      	blx	r3
   146a8:	b930      	cbnz	r0, 146b8 <read_included_uuid_cb+0x88>
}
   146aa:	b00e      	add	sp, #56	; 0x38
   146ac:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   146ae:	4630      	mov	r0, r6
   146b0:	f007 f972 	bl	1b998 <bt_uuid_cmp>
   146b4:	2800      	cmp	r0, #0
   146b6:	d0e0      	beq.n	1467a <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   146b8:	4622      	mov	r2, r4
   146ba:	4628      	mov	r0, r5
   146bc:	8921      	ldrh	r1, [r4, #8]
   146be:	f008 fb1c 	bl	1ccfa <gatt_discover_next>
	return;
   146c2:	e7f2      	b.n	146aa <read_included_uuid_cb+0x7a>
   146c4:	00021f57 	.word	0x00021f57

000146c8 <gatt_find_info_rsp>:
{
   146c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146cc:	b08f      	sub	sp, #60	; 0x3c
   146ce:	4680      	mov	r8, r0
   146d0:	4614      	mov	r4, r2
   146d2:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   146d4:	b941      	cbnz	r1, 146e8 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   146d6:	7812      	ldrb	r2, [r2, #0]
   146d8:	2a01      	cmp	r2, #1
   146da:	d00b      	beq.n	146f4 <gatt_find_info_rsp+0x2c>
   146dc:	2a02      	cmp	r2, #2
   146de:	d022      	beq.n	14726 <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   146e0:	2145      	movs	r1, #69	; 0x45
   146e2:	484b      	ldr	r0, [pc, #300]	; (14810 <gatt_find_info_rsp+0x148>)
   146e4:	f005 fe9f 	bl	1a426 <printk>
	params->func(conn, NULL, params);
   146e8:	4632      	mov	r2, r6
   146ea:	2100      	movs	r1, #0
   146ec:	4640      	mov	r0, r8
   146ee:	6873      	ldr	r3, [r6, #4]
   146f0:	4798      	blx	r3
   146f2:	e08a      	b.n	1480a <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   146f4:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   146f8:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   146fc:	3b01      	subs	r3, #1
   146fe:	b29b      	uxth	r3, r3
	if (length < len) {
   14700:	4553      	cmp	r3, sl
   14702:	d3f1      	bcc.n	146e8 <gatt_find_info_rsp+0x20>
	bool skip = false;
   14704:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14708:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   1470c:	46cb      	mov	fp, r9
			skip = false;
   1470e:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14710:	9300      	str	r3, [sp, #0]
   14712:	3401      	adds	r4, #1
   14714:	af04      	add	r7, sp, #16
   14716:	9b00      	ldr	r3, [sp, #0]
   14718:	b953      	cbnz	r3, 14730 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   1471a:	4632      	mov	r2, r6
   1471c:	4659      	mov	r1, fp
   1471e:	4640      	mov	r0, r8
   14720:	f008 faeb 	bl	1ccfa <gatt_discover_next>
	return;
   14724:	e071      	b.n	1480a <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14726:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   1472a:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   1472e:	e7e5      	b.n	146fc <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14730:	8823      	ldrh	r3, [r4, #0]
   14732:	9301      	str	r3, [sp, #4]
   14734:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14738:	f1b9 0f00 	cmp.w	r9, #0
   1473c:	d151      	bne.n	147e2 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   1473e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14742:	2b00      	cmp	r3, #0
   14744:	d03a      	beq.n	147bc <gatt_find_info_rsp+0xf4>
   14746:	2b02      	cmp	r3, #2
   14748:	d03f      	beq.n	147ca <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1474a:	6831      	ldr	r1, [r6, #0]
   1474c:	2900      	cmp	r1, #0
   1474e:	d143      	bne.n	147d8 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14750:	7c33      	ldrb	r3, [r6, #16]
   14752:	2b04      	cmp	r3, #4
   14754:	d148      	bne.n	147e8 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14756:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1475a:	4638      	mov	r0, r7
   1475c:	a902      	add	r1, sp, #8
   1475e:	f88d 5008 	strb.w	r5, [sp, #8]
   14762:	f8ad 300a 	strh.w	r3, [sp, #10]
   14766:	f007 f917 	bl	1b998 <bt_uuid_cmp>
   1476a:	b310      	cbz	r0, 147b2 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1476c:	f642 0301 	movw	r3, #10241	; 0x2801
   14770:	4638      	mov	r0, r7
   14772:	a903      	add	r1, sp, #12
   14774:	f88d 500c 	strb.w	r5, [sp, #12]
   14778:	f8ad 300e 	strh.w	r3, [sp, #14]
   1477c:	f007 f90c 	bl	1b998 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14780:	b1b8      	cbz	r0, 147b2 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   14782:	f642 0302 	movw	r3, #10242	; 0x2802
   14786:	4638      	mov	r0, r7
   14788:	a909      	add	r1, sp, #36	; 0x24
   1478a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   1478e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14792:	f007 f901 	bl	1b998 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14796:	b160      	cbz	r0, 147b2 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   14798:	f642 0303 	movw	r3, #10243	; 0x2803
   1479c:	4638      	mov	r0, r7
   1479e:	a909      	add	r1, sp, #36	; 0x24
   147a0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   147a4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   147a8:	f007 f8f6 	bl	1b998 <bt_uuid_cmp>
   147ac:	b9e0      	cbnz	r0, 147e8 <gatt_find_info_rsp+0x120>
				skip = true;
   147ae:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   147b2:	9b00      	ldr	r3, [sp, #0]
   147b4:	4454      	add	r4, sl
   147b6:	3b01      	subs	r3, #1
   147b8:	9300      	str	r3, [sp, #0]
   147ba:	e7ac      	b.n	14716 <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   147bc:	78a3      	ldrb	r3, [r4, #2]
   147be:	78e2      	ldrb	r2, [r4, #3]
   147c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   147c4:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   147c8:	e7bf      	b.n	1474a <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   147ca:	2210      	movs	r2, #16
   147cc:	1ca1      	adds	r1, r4, #2
   147ce:	f10d 0011 	add.w	r0, sp, #17
   147d2:	f007 f86c 	bl	1b8ae <memcpy>
			break;
   147d6:	e7b8      	b.n	1474a <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   147d8:	4638      	mov	r0, r7
   147da:	f007 f8dd 	bl	1b998 <bt_uuid_cmp>
   147de:	2800      	cmp	r0, #0
   147e0:	d0b6      	beq.n	14750 <gatt_find_info_rsp+0x88>
			skip = false;
   147e2:	f04f 0900 	mov.w	r9, #0
   147e6:	e7e4      	b.n	147b2 <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   147e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   147ec:	4632      	mov	r2, r6
		attr.handle = handle;
   147ee:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   147f2:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   147f4:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   147f8:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   147fc:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   147fe:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14802:	a909      	add	r1, sp, #36	; 0x24
   14804:	4798      	blx	r3
   14806:	2800      	cmp	r0, #0
   14808:	d1d3      	bne.n	147b2 <gatt_find_info_rsp+0xea>
}
   1480a:	b00f      	add	sp, #60	; 0x3c
   1480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14810:	00021f70 	.word	0x00021f70

00014814 <bt_gatt_read>:
{
   14814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14818:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1481a:	4605      	mov	r5, r0
   1481c:	b950      	cbnz	r0, 14834 <bt_gatt_read+0x20>
   1481e:	4945      	ldr	r1, [pc, #276]	; (14934 <bt_gatt_read+0x120>)
   14820:	4845      	ldr	r0, [pc, #276]	; (14938 <bt_gatt_read+0x124>)
   14822:	f640 62a6 	movw	r2, #3750	; 0xea6
   14826:	f005 fdfe 	bl	1a426 <printk>
   1482a:	f640 61a6 	movw	r1, #3750	; 0xea6
   1482e:	4841      	ldr	r0, [pc, #260]	; (14934 <bt_gatt_read+0x120>)
   14830:	f006 f89f 	bl	1a972 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14834:	b10c      	cbz	r4, 1483a <bt_gatt_read+0x26>
   14836:	6823      	ldr	r3, [r4, #0]
   14838:	b953      	cbnz	r3, 14850 <bt_gatt_read+0x3c>
   1483a:	493e      	ldr	r1, [pc, #248]	; (14934 <bt_gatt_read+0x120>)
   1483c:	483e      	ldr	r0, [pc, #248]	; (14938 <bt_gatt_read+0x124>)
   1483e:	f640 62a7 	movw	r2, #3751	; 0xea7
   14842:	f005 fdf0 	bl	1a426 <printk>
   14846:	f640 61a7 	movw	r1, #3751	; 0xea7
   1484a:	483a      	ldr	r0, [pc, #232]	; (14934 <bt_gatt_read+0x120>)
   1484c:	f006 f891 	bl	1a972 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14850:	7aab      	ldrb	r3, [r5, #10]
   14852:	2b07      	cmp	r3, #7
   14854:	d16a      	bne.n	1492c <bt_gatt_read+0x118>
	if (params->handle_count == 0) {
   14856:	6862      	ldr	r2, [r4, #4]
   14858:	bb22      	cbnz	r2, 148a4 <bt_gatt_read+0x90>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   1485a:	2204      	movs	r2, #4
   1485c:	2108      	movs	r1, #8
   1485e:	4628      	mov	r0, r5
   14860:	f7fd fe8c 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   14864:	4606      	mov	r6, r0
   14866:	b918      	cbnz	r0, 14870 <bt_gatt_read+0x5c>
		return -ENOMEM;
   14868:	f06f 000b 	mvn.w	r0, #11
}
   1486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14870:	f100 0708 	add.w	r7, r0, #8
   14874:	2104      	movs	r1, #4
   14876:	4638      	mov	r0, r7
   14878:	f000 fe78 	bl	1556c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   1487c:	8923      	ldrh	r3, [r4, #8]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   1487e:	68e1      	ldr	r1, [r4, #12]
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14880:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   14882:	8963      	ldrh	r3, [r4, #10]
   14884:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14886:	780b      	ldrb	r3, [r1, #0]
   14888:	b933      	cbnz	r3, 14898 <bt_gatt_read+0x84>
	net_buf_simple_add_le16(&buf->b, val);
   1488a:	4638      	mov	r0, r7
   1488c:	8849      	ldrh	r1, [r1, #2]
   1488e:	f008 fb5f 	bl	1cf50 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14892:	4623      	mov	r3, r4
   14894:	4a29      	ldr	r2, [pc, #164]	; (1493c <bt_gatt_read+0x128>)
   14896:	e01a      	b.n	148ce <bt_gatt_read+0xba>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14898:	2210      	movs	r2, #16
   1489a:	4638      	mov	r0, r7
   1489c:	3101      	adds	r1, #1
   1489e:	f008 fb44 	bl	1cf2a <net_buf_simple_add_mem>
   148a2:	e7f6      	b.n	14892 <bt_gatt_read+0x7e>
	if (params->handle_count > 1) {
   148a4:	2a01      	cmp	r2, #1
   148a6:	d01f      	beq.n	148e8 <bt_gatt_read+0xd4>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
   148a8:	210e      	movs	r1, #14
   148aa:	4628      	mov	r0, r5
   148ac:	0052      	lsls	r2, r2, #1
   148ae:	f7fd fe65 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   148b2:	4606      	mov	r6, r0
   148b4:	2800      	cmp	r0, #0
   148b6:	d0d7      	beq.n	14868 <bt_gatt_read+0x54>
   148b8:	2700      	movs	r7, #0
	net_buf_simple_add_le16(&buf->b, val);
   148ba:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
   148be:	6862      	ldr	r2, [r4, #4]
   148c0:	b2fb      	uxtb	r3, r7
   148c2:	429a      	cmp	r2, r3
   148c4:	f107 0701 	add.w	r7, r7, #1
   148c8:	d807      	bhi.n	148da <bt_gatt_read+0xc6>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
   148ca:	4623      	mov	r3, r4
   148cc:	4a1c      	ldr	r2, [pc, #112]	; (14940 <bt_gatt_read+0x12c>)
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   148ce:	4631      	mov	r1, r6
   148d0:	4628      	mov	r0, r5
}
   148d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   148d6:	f7fe bc89 	b.w	131ec <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
   148da:	68a2      	ldr	r2, [r4, #8]
   148dc:	4640      	mov	r0, r8
   148de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   148e2:	f008 fb35 	bl	1cf50 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   148e6:	e7ea      	b.n	148be <bt_gatt_read+0xaa>
	if (params->single.offset) {
   148e8:	8963      	ldrh	r3, [r4, #10]
   148ea:	b183      	cbz	r3, 1490e <bt_gatt_read+0xfa>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
   148ec:	2204      	movs	r2, #4
   148ee:	210c      	movs	r1, #12
   148f0:	4628      	mov	r0, r5
   148f2:	f7fd fe43 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   148f6:	4606      	mov	r6, r0
   148f8:	2800      	cmp	r0, #0
   148fa:	d0b5      	beq.n	14868 <bt_gatt_read+0x54>
	return net_buf_simple_add(&buf->b, len);
   148fc:	2104      	movs	r1, #4
   148fe:	3008      	adds	r0, #8
   14900:	f000 fe34 	bl	1556c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14904:	8923      	ldrh	r3, [r4, #8]
   14906:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   14908:	8963      	ldrh	r3, [r4, #10]
   1490a:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   1490c:	e7c1      	b.n	14892 <bt_gatt_read+0x7e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   1490e:	2202      	movs	r2, #2
   14910:	210a      	movs	r1, #10
   14912:	4628      	mov	r0, r5
   14914:	f7fd fe32 	bl	1257c <bt_att_create_pdu>
	if (!buf) {
   14918:	4606      	mov	r6, r0
   1491a:	2800      	cmp	r0, #0
   1491c:	d0a4      	beq.n	14868 <bt_gatt_read+0x54>
   1491e:	2102      	movs	r1, #2
   14920:	3008      	adds	r0, #8
   14922:	f000 fe23 	bl	1556c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14926:	8923      	ldrh	r3, [r4, #8]
   14928:	8003      	strh	r3, [r0, #0]
   1492a:	e7b2      	b.n	14892 <bt_gatt_read+0x7e>
		return -ENOTCONN;
   1492c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14930:	e79c      	b.n	1486c <bt_gatt_read+0x58>
   14932:	bf00      	nop
   14934:	00021e5e 	.word	0x00021e5e
   14938:	0001f98f 	.word	0x0001f98f
   1493c:	00014945 	.word	0x00014945
   14940:	0001c8db 	.word	0x0001c8db

00014944 <gatt_read_rsp>:
{
   14944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14948:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1494a:	4606      	mov	r6, r0
   1494c:	4690      	mov	r8, r2
   1494e:	461d      	mov	r5, r3
	if (err || !length) {
   14950:	460f      	mov	r7, r1
   14952:	b901      	cbnz	r1, 14956 <gatt_read_rsp+0x12>
   14954:	b953      	cbnz	r3, 1496c <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   14956:	2300      	movs	r3, #0
   14958:	4622      	mov	r2, r4
   1495a:	4639      	mov	r1, r7
   1495c:	930a      	str	r3, [sp, #40]	; 0x28
   1495e:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14960:	4630      	mov	r0, r6
   14962:	46ac      	mov	ip, r5
}
   14964:	b003      	add	sp, #12
   14966:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1496a:	4760      	bx	ip
	if (!params->handle_count) {
   1496c:	6863      	ldr	r3, [r4, #4]
   1496e:	2b00      	cmp	r3, #0
   14970:	d141      	bne.n	149f6 <gatt_read_rsp+0xb2>
	for (length--, pdu = rsp->data; length;
   14972:	3d01      	subs	r5, #1
   14974:	b2ad      	uxth	r5, r5
   14976:	f102 0901 	add.w	r9, r2, #1
   1497a:	b305      	cbz	r5, 149be <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   1497c:	f8b9 2000 	ldrh.w	r2, [r9]
   14980:	b293      	uxth	r3, r2
		if (!handle) {
   14982:	b933      	cbnz	r3, 14992 <gatt_read_rsp+0x4e>
			BT_ERR("Invalid handle");
   14984:	2145      	movs	r1, #69	; 0x45
   14986:	482c      	ldr	r0, [pc, #176]	; (14a38 <gatt_read_rsp+0xf4>)
}
   14988:	b003      	add	sp, #12
   1498a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   1498e:	f005 bd4a 	b.w	1a426 <printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14992:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   14996:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14998:	42ab      	cmp	r3, r5
   1499a:	bf8c      	ite	hi
   1499c:	1eab      	subhi	r3, r5, #2
   1499e:	3b02      	subls	r3, #2
   149a0:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   149a2:	9300      	str	r3, [sp, #0]
   149a4:	4622      	mov	r2, r4
   149a6:	2100      	movs	r1, #0
   149a8:	4630      	mov	r0, r6
   149aa:	6827      	ldr	r7, [r4, #0]
   149ac:	f109 0302 	add.w	r3, r9, #2
   149b0:	47b8      	blx	r7
   149b2:	2800      	cmp	r0, #0
   149b4:	d03d      	beq.n	14a32 <gatt_read_rsp+0xee>
		if (rsp->len > length) {
   149b6:	f898 1000 	ldrb.w	r1, [r8]
   149ba:	428d      	cmp	r5, r1
   149bc:	d20b      	bcs.n	149d6 <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   149be:	4621      	mov	r1, r4
   149c0:	4630      	mov	r0, r6
   149c2:	f7ff ff27 	bl	14814 <bt_gatt_read>
   149c6:	2800      	cmp	r0, #0
   149c8:	da33      	bge.n	14a32 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   149ca:	2300      	movs	r3, #0
   149cc:	930a      	str	r3, [sp, #40]	; 0x28
   149ce:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   149d0:	4622      	mov	r2, r4
   149d2:	210e      	movs	r1, #14
   149d4:	e7c4      	b.n	14960 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   149d6:	8922      	ldrh	r2, [r4, #8]
   149d8:	8960      	ldrh	r0, [r4, #10]
   149da:	4290      	cmp	r0, r2
   149dc:	d105      	bne.n	149ea <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   149de:	2300      	movs	r3, #0
   149e0:	930a      	str	r3, [sp, #40]	; 0x28
   149e2:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   149e4:	4622      	mov	r2, r4
   149e6:	4619      	mov	r1, r3
   149e8:	e7ba      	b.n	14960 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   149ea:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   149ec:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   149ee:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   149f0:	b2ad      	uxth	r5, r5
   149f2:	4489      	add	r9, r1
   149f4:	e7c1      	b.n	1497a <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   149f6:	9500      	str	r5, [sp, #0]
   149f8:	4613      	mov	r3, r2
   149fa:	f8d4 c000 	ldr.w	ip, [r4]
   149fe:	4622      	mov	r2, r4
   14a00:	47e0      	blx	ip
   14a02:	b1b0      	cbz	r0, 14a32 <gatt_read_rsp+0xee>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   14a04:	4630      	mov	r0, r6
   14a06:	f007 fdea 	bl	1c5de <bt_att_get_mtu>
   14a0a:	3801      	subs	r0, #1
   14a0c:	4285      	cmp	r5, r0
   14a0e:	da03      	bge.n	14a18 <gatt_read_rsp+0xd4>
		params->func(conn, 0, params, NULL, 0);
   14a10:	970a      	str	r7, [sp, #40]	; 0x28
   14a12:	463b      	mov	r3, r7
   14a14:	6825      	ldr	r5, [r4, #0]
   14a16:	e7e5      	b.n	149e4 <gatt_read_rsp+0xa0>
	params->single.offset += length;
   14a18:	8963      	ldrh	r3, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   14a1a:	4621      	mov	r1, r4
	params->single.offset += length;
   14a1c:	441d      	add	r5, r3
	if (bt_gatt_read(conn, params) < 0) {
   14a1e:	4630      	mov	r0, r6
	params->single.offset += length;
   14a20:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   14a22:	f7ff fef7 	bl	14814 <bt_gatt_read>
   14a26:	2800      	cmp	r0, #0
   14a28:	da03      	bge.n	14a32 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14a2a:	970a      	str	r7, [sp, #40]	; 0x28
   14a2c:	463b      	mov	r3, r7
   14a2e:	6825      	ldr	r5, [r4, #0]
   14a30:	e7ce      	b.n	149d0 <gatt_read_rsp+0x8c>
}
   14a32:	b003      	add	sp, #12
   14a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14a38:	00021f87 	.word	0x00021f87

00014a3c <bt_gatt_subscribe>:
{
   14a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a3e:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14a40:	4606      	mov	r6, r0
   14a42:	b950      	cbnz	r0, 14a5a <bt_gatt_subscribe+0x1e>
   14a44:	4944      	ldr	r1, [pc, #272]	; (14b58 <bt_gatt_subscribe+0x11c>)
   14a46:	4845      	ldr	r0, [pc, #276]	; (14b5c <bt_gatt_subscribe+0x120>)
   14a48:	f640 72fb 	movw	r2, #4091	; 0xffb
   14a4c:	f005 fceb 	bl	1a426 <printk>
   14a50:	f640 71fb 	movw	r1, #4091	; 0xffb
   14a54:	4840      	ldr	r0, [pc, #256]	; (14b58 <bt_gatt_subscribe+0x11c>)
   14a56:	f005 ff8c 	bl	1a972 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   14a5a:	b10d      	cbz	r5, 14a60 <bt_gatt_subscribe+0x24>
   14a5c:	682b      	ldr	r3, [r5, #0]
   14a5e:	b953      	cbnz	r3, 14a76 <bt_gatt_subscribe+0x3a>
   14a60:	493d      	ldr	r1, [pc, #244]	; (14b58 <bt_gatt_subscribe+0x11c>)
   14a62:	483e      	ldr	r0, [pc, #248]	; (14b5c <bt_gatt_subscribe+0x120>)
   14a64:	f640 72fc 	movw	r2, #4092	; 0xffc
   14a68:	f005 fcdd 	bl	1a426 <printk>
   14a6c:	f640 71fc 	movw	r1, #4092	; 0xffc
   14a70:	4839      	ldr	r0, [pc, #228]	; (14b58 <bt_gatt_subscribe+0x11c>)
   14a72:	f005 ff7e 	bl	1a972 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   14a76:	89ab      	ldrh	r3, [r5, #12]
   14a78:	b953      	cbnz	r3, 14a90 <bt_gatt_subscribe+0x54>
   14a7a:	4937      	ldr	r1, [pc, #220]	; (14b58 <bt_gatt_subscribe+0x11c>)
   14a7c:	4837      	ldr	r0, [pc, #220]	; (14b5c <bt_gatt_subscribe+0x120>)
   14a7e:	f640 72fd 	movw	r2, #4093	; 0xffd
   14a82:	f005 fcd0 	bl	1a426 <printk>
   14a86:	f640 71fd 	movw	r1, #4093	; 0xffd
   14a8a:	4833      	ldr	r0, [pc, #204]	; (14b58 <bt_gatt_subscribe+0x11c>)
   14a8c:	f005 ff71 	bl	1a972 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   14a90:	896b      	ldrh	r3, [r5, #10]
   14a92:	b953      	cbnz	r3, 14aaa <bt_gatt_subscribe+0x6e>
   14a94:	4930      	ldr	r1, [pc, #192]	; (14b58 <bt_gatt_subscribe+0x11c>)
   14a96:	4831      	ldr	r0, [pc, #196]	; (14b5c <bt_gatt_subscribe+0x120>)
   14a98:	f241 0203 	movw	r2, #4099	; 0x1003
   14a9c:	f005 fcc3 	bl	1a426 <printk>
   14aa0:	f241 0103 	movw	r1, #4099	; 0x1003
   14aa4:	482c      	ldr	r0, [pc, #176]	; (14b58 <bt_gatt_subscribe+0x11c>)
   14aa6:	f005 ff64 	bl	1a972 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14aaa:	7ab3      	ldrb	r3, [r6, #10]
   14aac:	2b07      	cmp	r3, #7
   14aae:	d14b      	bne.n	14b48 <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   14ab0:	4630      	mov	r0, r6
   14ab2:	f7fe f9e5 	bl	12e80 <gatt_sub_find>
	if (!sub) {
   14ab6:	4604      	mov	r4, r0
   14ab8:	b958      	cbnz	r0, 14ad2 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   14aba:	f7fe f9e1 	bl	12e80 <gatt_sub_find>
		if (sub) {
   14abe:	4604      	mov	r4, r0
   14ac0:	2800      	cmp	r0, #0
   14ac2:	d044      	beq.n	14b4e <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14ac4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14ac8:	3001      	adds	r0, #1
   14aca:	f007 fee7 	bl	1c89c <bt_addr_le_copy>
			sub->id = conn->id;
   14ace:	7a33      	ldrb	r3, [r6, #8]
   14ad0:	7023      	strb	r3, [r4, #0]
	return list->head;
   14ad2:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14ad4:	b90a      	cbnz	r2, 14ada <bt_gatt_subscribe+0x9e>
   14ad6:	4613      	mov	r3, r2
   14ad8:	e001      	b.n	14ade <bt_gatt_subscribe+0xa2>
   14ada:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   14ade:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14ae0:	b97b      	cbnz	r3, 14b02 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   14ae2:	bb41      	cbnz	r1, 14b36 <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   14ae4:	4630      	mov	r0, r6
   14ae6:	462b      	mov	r3, r5
   14ae8:	89aa      	ldrh	r2, [r5, #12]
   14aea:	8969      	ldrh	r1, [r5, #10]
   14aec:	f7fe fe24 	bl	13738 <gatt_write_ccc.constprop.0>
		if (err) {
   14af0:	4606      	mov	r6, r0
   14af2:	b300      	cbz	r0, 14b36 <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   14af4:	68a3      	ldr	r3, [r4, #8]
   14af6:	b913      	cbnz	r3, 14afe <bt_gatt_subscribe+0xc2>
   14af8:	4620      	mov	r0, r4
   14afa:	f007 ff09 	bl	1c910 <gatt_sub_remove.part.0>
}
   14afe:	4630      	mov	r0, r6
   14b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   14b02:	42ab      	cmp	r3, r5
   14b04:	d106      	bne.n	14b14 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   14b06:	b912      	cbnz	r2, 14b0e <bt_gatt_subscribe+0xd2>
   14b08:	4620      	mov	r0, r4
   14b0a:	f007 ff01 	bl	1c910 <gatt_sub_remove.part.0>
			return -EALREADY;
   14b0e:	f06f 0644 	mvn.w	r6, #68	; 0x44
   14b12:	e7f4      	b.n	14afe <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   14b14:	891f      	ldrh	r7, [r3, #8]
   14b16:	8928      	ldrh	r0, [r5, #8]
   14b18:	4287      	cmp	r7, r0
   14b1a:	d104      	bne.n	14b26 <bt_gatt_subscribe+0xea>
   14b1c:	899f      	ldrh	r7, [r3, #12]
   14b1e:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   14b20:	4287      	cmp	r7, r0
   14b22:	bf28      	it	cs
   14b24:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   14b26:	f113 0f14 	cmn.w	r3, #20
   14b2a:	d0da      	beq.n	14ae2 <bt_gatt_subscribe+0xa6>
	return node->next;
   14b2c:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14b2e:	2b00      	cmp	r3, #0
   14b30:	d0d7      	beq.n	14ae2 <bt_gatt_subscribe+0xa6>
   14b32:	3b14      	subs	r3, #20
   14b34:	e7d4      	b.n	14ae0 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   14b36:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14b38:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   14b3a:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   14b3e:	616a      	str	r2, [r5, #20]
	list->head = node;
   14b40:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14b42:	b93e      	cbnz	r6, 14b54 <bt_gatt_subscribe+0x118>
	list->tail = node;
   14b44:	60e3      	str	r3, [r4, #12]
}
   14b46:	e7da      	b.n	14afe <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   14b48:	f06f 0638 	mvn.w	r6, #56	; 0x38
   14b4c:	e7d7      	b.n	14afe <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   14b4e:	f06f 060b 	mvn.w	r6, #11
   14b52:	e7d4      	b.n	14afe <bt_gatt_subscribe+0xc2>
	return 0;
   14b54:	2600      	movs	r6, #0
   14b56:	e7d2      	b.n	14afe <bt_gatt_subscribe+0xc2>
   14b58:	00021e5e 	.word	0x00021e5e
   14b5c:	0001f98f 	.word	0x0001f98f

00014b60 <bt_gatt_unsubscribe>:
{
   14b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b64:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   14b66:	4607      	mov	r7, r0
   14b68:	b950      	cbnz	r0, 14b80 <bt_gatt_unsubscribe+0x20>
   14b6a:	4947      	ldr	r1, [pc, #284]	; (14c88 <bt_gatt_unsubscribe+0x128>)
   14b6c:	4847      	ldr	r0, [pc, #284]	; (14c8c <bt_gatt_unsubscribe+0x12c>)
   14b6e:	f241 025c 	movw	r2, #4188	; 0x105c
   14b72:	f005 fc58 	bl	1a426 <printk>
   14b76:	f241 015c 	movw	r1, #4188	; 0x105c
   14b7a:	4843      	ldr	r0, [pc, #268]	; (14c88 <bt_gatt_unsubscribe+0x128>)
   14b7c:	f005 fef9 	bl	1a972 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   14b80:	b956      	cbnz	r6, 14b98 <bt_gatt_unsubscribe+0x38>
   14b82:	4941      	ldr	r1, [pc, #260]	; (14c88 <bt_gatt_unsubscribe+0x128>)
   14b84:	4841      	ldr	r0, [pc, #260]	; (14c8c <bt_gatt_unsubscribe+0x12c>)
   14b86:	f241 025d 	movw	r2, #4189	; 0x105d
   14b8a:	f005 fc4c 	bl	1a426 <printk>
   14b8e:	f241 015d 	movw	r1, #4189	; 0x105d
   14b92:	483d      	ldr	r0, [pc, #244]	; (14c88 <bt_gatt_unsubscribe+0x128>)
   14b94:	f005 feed 	bl	1a972 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14b98:	7abb      	ldrb	r3, [r7, #10]
   14b9a:	2b07      	cmp	r3, #7
   14b9c:	d170      	bne.n	14c80 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   14b9e:	4638      	mov	r0, r7
   14ba0:	f7fe f96e 	bl	12e80 <gatt_sub_find>
	if (!sub) {
   14ba4:	4680      	mov	r8, r0
   14ba6:	b920      	cbnz	r0, 14bb2 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   14ba8:	f06f 0015 	mvn.w	r0, #21
}
   14bac:	b003      	add	sp, #12
   14bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14bb2:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14bb4:	b1cc      	cbz	r4, 14bea <bt_gatt_unsubscribe+0x8a>
   14bb6:	f1b4 0514 	subs.w	r5, r4, #20
   14bba:	d018      	beq.n	14bee <bt_gatt_unsubscribe+0x8e>
	return node->next;
   14bbc:	6824      	ldr	r4, [r4, #0]
   14bbe:	b104      	cbz	r4, 14bc2 <bt_gatt_unsubscribe+0x62>
   14bc0:	3c14      	subs	r4, #20
   14bc2:	f04f 0900 	mov.w	r9, #0
   14bc6:	464b      	mov	r3, r9
   14bc8:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   14bca:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14bce:	b985      	cbnz	r5, 14bf2 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   14bd0:	2b00      	cmp	r3, #0
   14bd2:	d0e9      	beq.n	14ba8 <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   14bd4:	f1ba 0f00 	cmp.w	sl, #0
   14bd8:	d047      	beq.n	14c6a <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   14bda:	462b      	mov	r3, r5
   14bdc:	462a      	mov	r2, r5
   14bde:	4631      	mov	r1, r6
   14be0:	4638      	mov	r0, r7
   14be2:	6834      	ldr	r4, [r6, #0]
   14be4:	47a0      	blx	r4
		return 0;
   14be6:	4628      	mov	r0, r5
   14be8:	e7e0      	b.n	14bac <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14bea:	4625      	mov	r5, r4
   14bec:	e7e9      	b.n	14bc2 <bt_gatt_unsubscribe+0x62>
   14bee:	462c      	mov	r4, r5
   14bf0:	e7e7      	b.n	14bc2 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   14bf2:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14bf4:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   14bf8:	d12b      	bne.n	14c52 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   14bfa:	696b      	ldr	r3, [r5, #20]
   14bfc:	f8d8 000c 	ldr.w	r0, [r8, #12]
   14c00:	f1b9 0f00 	cmp.w	r9, #0
   14c04:	d11e      	bne.n	14c44 <bt_gatt_unsubscribe+0xe4>
   14c06:	4281      	cmp	r1, r0
	list->head = node;
   14c08:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   14c0c:	d101      	bne.n	14c12 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   14c0e:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   14c12:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14c14:	4658      	mov	r0, fp
   14c16:	616b      	str	r3, [r5, #20]
   14c18:	f007 fe5c 	bl	1c8d4 <atomic_get>
			if (atomic_test_bit(params->flags,
   14c1c:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14c1e:	f3c0 0380 	ubfx	r3, r0, #2, #1
   14c22:	d51e      	bpl.n	14c62 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   14c24:	4631      	mov	r1, r6
   14c26:	4638      	mov	r0, r7
   14c28:	9301      	str	r3, [sp, #4]
   14c2a:	f7fe f88d 	bl	12d48 <bt_att_req_cancel>
}
   14c2e:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14c30:	b1cc      	cbz	r4, 14c66 <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14c32:	f114 0114 	adds.w	r1, r4, #20
   14c36:	d002      	beq.n	14c3e <bt_gatt_unsubscribe+0xde>
	return node->next;
   14c38:	6961      	ldr	r1, [r4, #20]
   14c3a:	b101      	cbz	r1, 14c3e <bt_gatt_unsubscribe+0xde>
   14c3c:	3914      	subs	r1, #20
   14c3e:	4625      	mov	r5, r4
   14c40:	460c      	mov	r4, r1
   14c42:	e7c4      	b.n	14bce <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   14c44:	4288      	cmp	r0, r1
	parent->next = child;
   14c46:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   14c4a:	bf08      	it	eq
   14c4c:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   14c50:	e7df      	b.n	14c12 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   14c52:	892d      	ldrh	r5, [r5, #8]
   14c54:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14c56:	4689      	mov	r9, r1
   14c58:	4285      	cmp	r5, r0
   14c5a:	bf08      	it	eq
   14c5c:	f04f 0a01 	moveq.w	sl, #1
   14c60:	e7e6      	b.n	14c30 <bt_gatt_unsubscribe+0xd0>
			found = true;
   14c62:	2301      	movs	r3, #1
   14c64:	e7e4      	b.n	14c30 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14c66:	4621      	mov	r1, r4
   14c68:	e7e9      	b.n	14c3e <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14c6a:	4633      	mov	r3, r6
   14c6c:	4652      	mov	r2, sl
   14c6e:	4638      	mov	r0, r7
   14c70:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   14c72:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   14c76:	b003      	add	sp, #12
   14c78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14c7c:	f7fe bd5c 	b.w	13738 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   14c80:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14c84:	e792      	b.n	14bac <bt_gatt_unsubscribe+0x4c>
   14c86:	bf00      	nop
   14c88:	00021e5e 	.word	0x00021e5e
   14c8c:	0001f98f 	.word	0x0001f98f

00014c90 <bt_gatt_mult_notification>:
{
   14c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c94:	b085      	sub	sp, #20
   14c96:	4680      	mov	r8, r0
   14c98:	460c      	mov	r4, r1
   14c9a:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   14c9c:	f7fe f8f0 	bl	12e80 <gatt_sub_find>
	if (!sub) {
   14ca0:	4606      	mov	r6, r0
   14ca2:	b1d0      	cbz	r0, 14cda <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   14ca4:	464a      	mov	r2, r9
   14ca6:	4621      	mov	r1, r4
   14ca8:	a801      	add	r0, sp, #4
   14caa:	f008 f915 	bl	1ced8 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   14cae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14cb2:	2b04      	cmp	r3, #4
   14cb4:	d911      	bls.n	14cda <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   14cb6:	2104      	movs	r1, #4
   14cb8:	eb0d 0001 	add.w	r0, sp, r1
   14cbc:	f000 fc38 	bl	15530 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   14cc0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   14cc4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   14cc8:	4605      	mov	r5, r0
		if (len > buf.len) {
   14cca:	4553      	cmp	r3, sl
   14ccc:	d208      	bcs.n	14ce0 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   14cce:	464b      	mov	r3, r9
   14cd0:	4652      	mov	r2, sl
   14cd2:	2145      	movs	r1, #69	; 0x45
   14cd4:	4816      	ldr	r0, [pc, #88]	; (14d30 <bt_gatt_mult_notification+0xa0>)
   14cd6:	f005 fba6 	bl	1a426 <printk>
}
   14cda:	b005      	add	sp, #20
   14cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14ce0:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   14ce2:	b303      	cbz	r3, 14d26 <bt_gatt_mult_notification+0x96>
   14ce4:	f1b3 0714 	subs.w	r7, r3, #20
   14ce8:	d01d      	beq.n	14d26 <bt_gatt_mult_notification+0x96>
	return node->next;
   14cea:	681c      	ldr	r4, [r3, #0]
   14cec:	b104      	cbz	r4, 14cf0 <bt_gatt_mult_notification+0x60>
   14cee:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   14cf0:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   14cf4:	893b      	ldrh	r3, [r7, #8]
   14cf6:	455b      	cmp	r3, fp
   14cf8:	d10b      	bne.n	14d12 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   14cfa:	4653      	mov	r3, sl
   14cfc:	462a      	mov	r2, r5
   14cfe:	4639      	mov	r1, r7
   14d00:	4640      	mov	r0, r8
   14d02:	f8d7 c000 	ldr.w	ip, [r7]
   14d06:	47e0      	blx	ip
   14d08:	b918      	cbnz	r0, 14d12 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   14d0a:	4639      	mov	r1, r7
   14d0c:	4640      	mov	r0, r8
   14d0e:	f7ff ff27 	bl	14b60 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   14d12:	b144      	cbz	r4, 14d26 <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14d14:	f114 0314 	adds.w	r3, r4, #20
   14d18:	d002      	beq.n	14d20 <bt_gatt_mult_notification+0x90>
	return node->next;
   14d1a:	6963      	ldr	r3, [r4, #20]
   14d1c:	b103      	cbz	r3, 14d20 <bt_gatt_mult_notification+0x90>
   14d1e:	3b14      	subs	r3, #20
{
   14d20:	4627      	mov	r7, r4
   14d22:	461c      	mov	r4, r3
   14d24:	e7e6      	b.n	14cf4 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   14d26:	4651      	mov	r1, sl
   14d28:	a801      	add	r0, sp, #4
   14d2a:	f000 fc01 	bl	15530 <net_buf_simple_pull_mem>
   14d2e:	e7be      	b.n	14cae <bt_gatt_mult_notification+0x1e>
   14d30:	00021f9b 	.word	0x00021f9b

00014d34 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   14d34:	2301      	movs	r3, #1
{
   14d36:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14d38:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   14d3c:	b08e      	sub	sp, #56	; 0x38
   14d3e:	4605      	mov	r5, r0
	data.conn = conn;
   14d40:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14d42:	4631      	mov	r1, r6
   14d44:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   14d46:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14d4a:	f006 ff77 	bl	1bc3c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14d4e:	b190      	cbz	r0, 14d76 <bt_gatt_connected+0x42>
		if (conn->id) {
   14d50:	7a2a      	ldrb	r2, [r5, #8]
   14d52:	b30a      	cbz	r2, 14d98 <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14d54:	ac02      	add	r4, sp, #8
   14d56:	2104      	movs	r1, #4
   14d58:	4620      	mov	r0, r4
   14d5a:	f005 faca 	bl	1a2f2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14d5e:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14d60:	2124      	movs	r1, #36	; 0x24
   14d62:	4a19      	ldr	r2, [pc, #100]	; (14dc8 <bt_gatt_connected+0x94>)
   14d64:	a805      	add	r0, sp, #20
   14d66:	4633      	mov	r3, r6
   14d68:	f7f9 fb58 	bl	e41c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   14d6c:	aa05      	add	r2, sp, #20
   14d6e:	4610      	mov	r0, r2
   14d70:	4916      	ldr	r1, [pc, #88]	; (14dcc <bt_gatt_connected+0x98>)
   14d72:	f7f6 fd6f 	bl	b854 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14d76:	2001      	movs	r0, #1
   14d78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14d7c:	4a14      	ldr	r2, [pc, #80]	; (14dd0 <bt_gatt_connected+0x9c>)
   14d7e:	ab03      	add	r3, sp, #12
   14d80:	f007 ff8a 	bl	1cc98 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   14d84:	4628      	mov	r0, r5
   14d86:	f7fe f87b 	bl	12e80 <gatt_sub_find>
	if (!sub) {
   14d8a:	b118      	cbz	r0, 14d94 <bt_gatt_connected+0x60>
	return list->head;
   14d8c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   14d8e:	b10c      	cbz	r4, 14d94 <bt_gatt_connected+0x60>
   14d90:	3c14      	subs	r4, #20
   14d92:	b91c      	cbnz	r4, 14d9c <bt_gatt_connected+0x68>
}
   14d94:	b00e      	add	sp, #56	; 0x38
   14d96:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14d98:	9200      	str	r2, [sp, #0]
   14d9a:	e7e1      	b.n	14d60 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   14d9c:	4631      	mov	r1, r6
   14d9e:	7a28      	ldrb	r0, [r5, #8]
   14da0:	f006 ff4c 	bl	1bc3c <bt_addr_le_is_bonded>
   14da4:	b158      	cbz	r0, 14dbe <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14da6:	f104 0010 	add.w	r0, r4, #16
   14daa:	f007 fd93 	bl	1c8d4 <atomic_get>
   14dae:	0783      	lsls	r3, r0, #30
   14db0:	d405      	bmi.n	14dbe <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   14db2:	4623      	mov	r3, r4
   14db4:	4628      	mov	r0, r5
   14db6:	89a2      	ldrh	r2, [r4, #12]
   14db8:	8961      	ldrh	r1, [r4, #10]
   14dba:	f7fe fcbd 	bl	13738 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14dbe:	f114 0f14 	cmn.w	r4, #20
   14dc2:	d0e7      	beq.n	14d94 <bt_gatt_connected+0x60>
	return node->next;
   14dc4:	6964      	ldr	r4, [r4, #20]
   14dc6:	e7e2      	b.n	14d8e <bt_gatt_connected+0x5a>
   14dc8:	00021ecd 	.word	0x00021ecd
   14dcc:	00013b31 	.word	0x00013b31
   14dd0:	00013f01 	.word	0x00013f01

00014dd4 <db_hash_read>:
{
   14dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dd6:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   14dd8:	4810      	ldr	r0, [pc, #64]	; (14e1c <db_hash_read+0x48>)
{
   14dda:	4615      	mov	r5, r2
   14ddc:	461f      	mov	r7, r3
   14dde:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   14de2:	f004 fc1d 	bl	19620 <k_delayed_work_cancel>
	if (!err) {
   14de6:	b910      	cbnz	r0, 14dee <db_hash_read+0x1a>
		db_hash_gen(true);
   14de8:	2001      	movs	r0, #1
   14dea:	f7fe fe11 	bl	13a10 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   14dee:	2101      	movs	r1, #1
   14df0:	4620      	mov	r0, r4
   14df2:	f008 f819 	bl	1ce28 <bt_gatt_change_aware>
	if (offset > value_len) {
   14df6:	2e10      	cmp	r6, #16
   14df8:	d80c      	bhi.n	14e14 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   14dfa:	f1c6 0410 	rsb	r4, r6, #16
   14dfe:	42bc      	cmp	r4, r7
   14e00:	bfa8      	it	ge
   14e02:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   14e04:	4906      	ldr	r1, [pc, #24]	; (14e20 <db_hash_read+0x4c>)
   14e06:	4622      	mov	r2, r4
   14e08:	4628      	mov	r0, r5
   14e0a:	4431      	add	r1, r6
   14e0c:	f006 fd4f 	bl	1b8ae <memcpy>
}
   14e10:	4620      	mov	r0, r4
   14e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14e14:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   14e18:	e7fa      	b.n	14e10 <db_hash_read+0x3c>
   14e1a:	bf00      	nop
   14e1c:	20009c00 	.word	0x20009c00
   14e20:	2000c7ac 	.word	0x2000c7ac

00014e24 <bt_gatt_store_ccc>:
	save.count = 0;
   14e24:	2300      	movs	r3, #0
{
   14e26:	b570      	push	{r4, r5, r6, lr}
   14e28:	4604      	mov	r4, r0
   14e2a:	b0c0      	sub	sp, #256	; 0x100
   14e2c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   14e2e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   14e30:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   14e34:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   14e36:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14e3a:	2001      	movs	r0, #1
   14e3c:	4a13      	ldr	r2, [pc, #76]	; (14e8c <bt_gatt_store_ccc+0x68>)
   14e3e:	ab0d      	add	r3, sp, #52	; 0x34
   14e40:	f007 ff2a 	bl	1cc98 <bt_gatt_foreach_attr>
	if (id) {
   14e44:	b1ec      	cbz	r4, 14e82 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   14e46:	ae03      	add	r6, sp, #12
   14e48:	4622      	mov	r2, r4
   14e4a:	2104      	movs	r1, #4
   14e4c:	4630      	mov	r0, r6
   14e4e:	f005 fa50 	bl	1a2f2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   14e52:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   14e54:	4a0e      	ldr	r2, [pc, #56]	; (14e90 <bt_gatt_store_ccc+0x6c>)
   14e56:	462b      	mov	r3, r5
   14e58:	2124      	movs	r1, #36	; 0x24
   14e5a:	a804      	add	r0, sp, #16
   14e5c:	f7f9 fade 	bl	e41c <bt_settings_encode_key>
	if (save.count) {
   14e60:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   14e62:	b182      	cbz	r2, 14e86 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   14e64:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   14e66:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   14e68:	a804      	add	r0, sp, #16
   14e6a:	f7f6 fca7 	bl	b7bc <settings_save_one>
	if (err) {
   14e6e:	4604      	mov	r4, r0
   14e70:	b120      	cbz	r0, 14e7c <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   14e72:	4602      	mov	r2, r0
   14e74:	2145      	movs	r1, #69	; 0x45
   14e76:	4807      	ldr	r0, [pc, #28]	; (14e94 <bt_gatt_store_ccc+0x70>)
   14e78:	f005 fad5 	bl	1a426 <printk>
}
   14e7c:	4620      	mov	r0, r4
   14e7e:	b040      	add	sp, #256	; 0x100
   14e80:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   14e82:	9400      	str	r4, [sp, #0]
   14e84:	e7e6      	b.n	14e54 <bt_gatt_store_ccc+0x30>
		str = NULL;
   14e86:	4611      	mov	r1, r2
   14e88:	e7ee      	b.n	14e68 <bt_gatt_store_ccc+0x44>
   14e8a:	bf00      	nop
   14e8c:	000133c1 	.word	0x000133c1
   14e90:	00021ecd 	.word	0x00021ecd
   14e94:	00021fb9 	.word	0x00021fb9

00014e98 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   14e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e9c:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14e9e:	4603      	mov	r3, r0
   14ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14ea4:	2001      	movs	r0, #1
{
   14ea6:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14ea8:	4a52      	ldr	r2, [pc, #328]	; (14ff4 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14eaa:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14eae:	f007 fef3 	bl	1cc98 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14eb2:	4629      	mov	r1, r5
   14eb4:	7a20      	ldrb	r0, [r4, #8]
   14eb6:	f006 fec1 	bl	1bc3c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14eba:	b378      	cbz	r0, 14f1c <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   14ebc:	4629      	mov	r1, r5
   14ebe:	7a20      	ldrb	r0, [r4, #8]
   14ec0:	f7ff ffb0 	bl	14e24 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   14ec4:	4620      	mov	r0, r4
   14ec6:	f7fd ff9d 	bl	12e04 <find_cf_cfg>
	if (!cfg) {
   14eca:	4606      	mov	r6, r0
   14ecc:	2800      	cmp	r0, #0
   14ece:	d05e      	beq.n	14f8e <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   14ed0:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   14ed2:	3608      	adds	r6, #8
		if (conn->id) {
   14ed4:	2a00      	cmp	r2, #0
   14ed6:	d05c      	beq.n	14f92 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14ed8:	af02      	add	r7, sp, #8
   14eda:	2104      	movs	r1, #4
   14edc:	4638      	mov	r0, r7
   14ede:	f005 fa08 	bl	1a2f2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   14ee2:	462b      	mov	r3, r5
   14ee4:	9700      	str	r7, [sp, #0]
   14ee6:	2124      	movs	r1, #36	; 0x24
   14ee8:	4a43      	ldr	r2, [pc, #268]	; (14ff8 <bt_gatt_disconnected+0x160>)
   14eea:	a803      	add	r0, sp, #12
   14eec:	f7f9 fa96 	bl	e41c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   14ef0:	7a23      	ldrb	r3, [r4, #8]
   14ef2:	2701      	movs	r7, #1
   14ef4:	b93b      	cbnz	r3, 14f06 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   14ef6:	2300      	movs	r3, #0
   14ef8:	2124      	movs	r1, #36	; 0x24
   14efa:	9300      	str	r3, [sp, #0]
   14efc:	4a3e      	ldr	r2, [pc, #248]	; (14ff8 <bt_gatt_disconnected+0x160>)
   14efe:	462b      	mov	r3, r5
   14f00:	a803      	add	r0, sp, #12
   14f02:	f7f9 fa8b 	bl	e41c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   14f06:	463a      	mov	r2, r7
   14f08:	4631      	mov	r1, r6
   14f0a:	a803      	add	r0, sp, #12
   14f0c:	f7f6 fc56 	bl	b7bc <settings_save_one>
	if (err) {
   14f10:	4602      	mov	r2, r0
   14f12:	b118      	cbz	r0, 14f1c <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   14f14:	2145      	movs	r1, #69	; 0x45
   14f16:	4839      	ldr	r0, [pc, #228]	; (14ffc <bt_gatt_disconnected+0x164>)
   14f18:	f005 fa85 	bl	1a426 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14f1c:	4629      	mov	r1, r5
   14f1e:	7a20      	ldrb	r0, [r4, #8]
   14f20:	f006 fe8c 	bl	1bc3c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14f24:	b150      	cbz	r0, 14f3c <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   14f26:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14f28:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   14f2c:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14f30:	2001      	movs	r0, #1
   14f32:	4a33      	ldr	r2, [pc, #204]	; (15000 <bt_gatt_disconnected+0x168>)
   14f34:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   14f36:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14f38:	f007 feae 	bl	1cc98 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   14f3c:	4620      	mov	r0, r4
   14f3e:	f7fd ff9f 	bl	12e80 <gatt_sub_find>
	if (!sub) {
   14f42:	4607      	mov	r7, r0
   14f44:	b3b0      	cbz	r0, 14fb4 <bt_gatt_disconnected+0x11c>
	return list->head;
   14f46:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14f48:	b3a3      	cbz	r3, 14fb4 <bt_gatt_disconnected+0x11c>
   14f4a:	f1b3 0b14 	subs.w	fp, r3, #20
   14f4e:	d031      	beq.n	14fb4 <bt_gatt_disconnected+0x11c>
	return node->next;
   14f50:	681e      	ldr	r6, [r3, #0]
   14f52:	b106      	cbz	r6, 14f56 <bt_gatt_disconnected+0xbe>
   14f54:	3e14      	subs	r6, #20
   14f56:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   14f5a:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14f5c:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   14f60:	4629      	mov	r1, r5
   14f62:	7a20      	ldrb	r0, [r4, #8]
   14f64:	f006 fe6a 	bl	1bc3c <bt_addr_le_is_bonded>
   14f68:	b9a8      	cbnz	r0, 14f96 <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   14f6a:	465b      	mov	r3, fp
   14f6c:	4642      	mov	r2, r8
   14f6e:	4639      	mov	r1, r7
   14f70:	4620      	mov	r0, r4
			params->value = 0U;
   14f72:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   14f76:	f007 fcf0 	bl	1c95a <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14f7a:	b1de      	cbz	r6, 14fb4 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14f7c:	f116 0214 	adds.w	r2, r6, #20
   14f80:	d002      	beq.n	14f88 <bt_gatt_disconnected+0xf0>
	return node->next;
   14f82:	6972      	ldr	r2, [r6, #20]
   14f84:	b102      	cbz	r2, 14f88 <bt_gatt_disconnected+0xf0>
   14f86:	3a14      	subs	r2, #20
   14f88:	46b3      	mov	fp, r6
   14f8a:	4616      	mov	r6, r2
   14f8c:	e7e8      	b.n	14f60 <bt_gatt_disconnected+0xc8>
		len = 0;
   14f8e:	4607      	mov	r7, r0
   14f90:	e7b1      	b.n	14ef6 <bt_gatt_disconnected+0x5e>
   14f92:	2701      	movs	r7, #1
   14f94:	e7af      	b.n	14ef6 <bt_gatt_disconnected+0x5e>
   14f96:	f10b 0010 	add.w	r0, fp, #16
   14f9a:	f007 fc9b 	bl	1c8d4 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   14f9e:	07c3      	lsls	r3, r0, #31
   14fa0:	d4e3      	bmi.n	14f6a <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   14fa2:	787b      	ldrb	r3, [r7, #1]
   14fa4:	b11b      	cbz	r3, 14fae <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14fa6:	4629      	mov	r1, r5
   14fa8:	4648      	mov	r0, r9
   14faa:	f007 fc77 	bl	1c89c <bt_addr_le_copy>
			prev = &params->node;
   14fae:	f10b 0814 	add.w	r8, fp, #20
   14fb2:	e7e2      	b.n	14f7a <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   14fb4:	4620      	mov	r0, r4
   14fb6:	f7fd ff25 	bl	12e04 <find_cf_cfg>
	if (!cfg) {
   14fba:	4606      	mov	r6, r0
   14fbc:	b1b8      	cbz	r0, 14fee <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14fbe:	4629      	mov	r1, r5
   14fc0:	7a20      	ldrb	r0, [r4, #8]
   14fc2:	f006 fe3b 	bl	1bc3c <bt_addr_le_is_bonded>
   14fc6:	b928      	cbnz	r0, 14fd4 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   14fc8:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   14fca:	b00d      	add	sp, #52	; 0x34
   14fcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   14fd0:	f007 bcaa 	b.w	1c928 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   14fd4:	1c70      	adds	r0, r6, #1
   14fd6:	4629      	mov	r1, r5
   14fd8:	f007 fc60 	bl	1c89c <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14fdc:	360c      	adds	r6, #12
   14fde:	e8d6 3fef 	ldaex	r3, [r6]
   14fe2:	f023 0302 	bic.w	r3, r3, #2
   14fe6:	e8c6 3fe2 	stlex	r2, r3, [r6]
   14fea:	2a00      	cmp	r2, #0
   14fec:	d1f7      	bne.n	14fde <bt_gatt_disconnected+0x146>
}
   14fee:	b00d      	add	sp, #52	; 0x34
   14ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ff4:	00013659 	.word	0x00013659
   14ff8:	0002200d 	.word	0x0002200d
   14ffc:	00021fdc 	.word	0x00021fdc
   15000:	0001330d 	.word	0x0001330d

00015004 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   15004:	b570      	push	{r4, r5, r6, lr}
   15006:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15008:	2400      	movs	r4, #0
   1500a:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1500c:	4b09      	ldr	r3, [pc, #36]	; (15034 <bt_smp_accept+0x30>)
   1500e:	fb06 f504 	mul.w	r5, r6, r4
   15012:	58e8      	ldr	r0, [r5, r3]
   15014:	b148      	cbz	r0, 1502a <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15016:	3401      	adds	r4, #1
   15018:	2c0a      	cmp	r4, #10
   1501a:	d1f8      	bne.n	1500e <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1501c:	4806      	ldr	r0, [pc, #24]	; (15038 <bt_smp_accept+0x34>)
   1501e:	2145      	movs	r1, #69	; 0x45
   15020:	f005 fa01 	bl	1a426 <printk>
   15024:	f06f 000b 	mvn.w	r0, #11
   15028:	e003      	b.n	15032 <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   1502a:	4a04      	ldr	r2, [pc, #16]	; (1503c <bt_smp_accept+0x38>)
   1502c:	442b      	add	r3, r5
   1502e:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   15030:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   15032:	bd70      	pop	{r4, r5, r6, pc}
   15034:	20009c88 	.word	0x20009c88
   15038:	0002201e 	.word	0x0002201e
   1503c:	0001eabc 	.word	0x0001eabc

00015040 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   15040:	222c      	movs	r2, #44	; 0x2c
   15042:	4b02      	ldr	r3, [pc, #8]	; (1504c <net_buf_pool_get+0xc>)
   15044:	fb02 3000 	mla	r0, r2, r0, r3
   15048:	4770      	bx	lr
   1504a:	bf00      	nop
   1504c:	200086bc 	.word	0x200086bc

00015050 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   15050:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15052:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   15054:	4b04      	ldr	r3, [pc, #16]	; (15068 <net_buf_id+0x18>)
   15056:	fb01 3302 	mla	r3, r1, r2, r3
   1505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1505c:	1ac0      	subs	r0, r0, r3
}
   1505e:	4b03      	ldr	r3, [pc, #12]	; (1506c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   15060:	10c0      	asrs	r0, r0, #3
}
   15062:	4358      	muls	r0, r3
   15064:	4770      	bx	lr
   15066:	bf00      	nop
   15068:	200086bc 	.word	0x200086bc
   1506c:	aaaaaaab 	.word	0xaaaaaaab

00015070 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   15070:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15072:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15074:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15076:	4b09      	ldr	r3, [pc, #36]	; (1509c <fixed_data_alloc+0x2c>)
   15078:	fb04 3302 	mla	r3, r4, r2, r3
   1507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1507e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15080:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   15082:	6823      	ldr	r3, [r4, #0]
   15084:	429a      	cmp	r2, r3
   15086:	bf94      	ite	ls
   15088:	600a      	strls	r2, [r1, #0]
   1508a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1508c:	f7ff ffe0 	bl	15050 <net_buf_id>
   15090:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   15094:	fb02 3000 	mla	r0, r2, r0, r3
   15098:	bd10      	pop	{r4, pc}
   1509a:	bf00      	nop
   1509c:	200086bc 	.word	0x200086bc

000150a0 <net_buf_reset>:
{
   150a0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   150a2:	7943      	ldrb	r3, [r0, #5]
{
   150a4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   150a6:	b143      	cbz	r3, 150ba <net_buf_reset+0x1a>
   150a8:	490c      	ldr	r1, [pc, #48]	; (150dc <net_buf_reset+0x3c>)
   150aa:	480d      	ldr	r0, [pc, #52]	; (150e0 <net_buf_reset+0x40>)
   150ac:	224f      	movs	r2, #79	; 0x4f
   150ae:	f005 f9ba 	bl	1a426 <printk>
   150b2:	214f      	movs	r1, #79	; 0x4f
   150b4:	4809      	ldr	r0, [pc, #36]	; (150dc <net_buf_reset+0x3c>)
   150b6:	f005 fc5c 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   150ba:	6823      	ldr	r3, [r4, #0]
   150bc:	b143      	cbz	r3, 150d0 <net_buf_reset+0x30>
   150be:	4907      	ldr	r1, [pc, #28]	; (150dc <net_buf_reset+0x3c>)
   150c0:	4807      	ldr	r0, [pc, #28]	; (150e0 <net_buf_reset+0x40>)
   150c2:	2250      	movs	r2, #80	; 0x50
   150c4:	f005 f9af 	bl	1a426 <printk>
   150c8:	2150      	movs	r1, #80	; 0x50
   150ca:	4804      	ldr	r0, [pc, #16]	; (150dc <net_buf_reset+0x3c>)
   150cc:	f005 fc51 	bl	1a972 <assert_post_action>
	buf->len  = 0U;
   150d0:	2300      	movs	r3, #0
   150d2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   150d4:	6923      	ldr	r3, [r4, #16]
   150d6:	60a3      	str	r3, [r4, #8]
}
   150d8:	bd10      	pop	{r4, pc}
   150da:	bf00      	nop
   150dc:	0002204f 	.word	0x0002204f
   150e0:	0001f98f 	.word	0x0001f98f

000150e4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   150e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150e8:	4605      	mov	r5, r0
   150ea:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   150ec:	4610      	mov	r0, r2
   150ee:	4619      	mov	r1, r3
{
   150f0:	4691      	mov	r9, r2
   150f2:	4698      	mov	r8, r3
   150f4:	4617      	mov	r7, r2
   150f6:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   150f8:	f008 fe28 	bl	1dd4c <z_timeout_end_calc>
   150fc:	4682      	mov	sl, r0
   150fe:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   15100:	b945      	cbnz	r5, 15114 <net_buf_alloc_len+0x30>
   15102:	494a      	ldr	r1, [pc, #296]	; (1522c <net_buf_alloc_len+0x148>)
   15104:	484a      	ldr	r0, [pc, #296]	; (15230 <net_buf_alloc_len+0x14c>)
   15106:	22ed      	movs	r2, #237	; 0xed
   15108:	f005 f98d 	bl	1a426 <printk>
   1510c:	21ed      	movs	r1, #237	; 0xed
   1510e:	4847      	ldr	r0, [pc, #284]	; (1522c <net_buf_alloc_len+0x148>)
   15110:	f005 fc2f 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   15114:	f04f 0320 	mov.w	r3, #32
   15118:	f3ef 8111 	mrs	r1, BASEPRI
   1511c:	f383 8811 	msr	BASEPRI, r3
   15120:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15124:	8beb      	ldrh	r3, [r5, #30]
   15126:	2b00      	cmp	r3, #0
   15128:	d055      	beq.n	151d6 <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1512a:	8baa      	ldrh	r2, [r5, #28]
   1512c:	429a      	cmp	r2, r3
   1512e:	d93e      	bls.n	151ae <net_buf_alloc_len+0xca>
   15130:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   15132:	2200      	movs	r2, #0
   15134:	2300      	movs	r3, #0
   15136:	4628      	mov	r0, r5
   15138:	f002 ff34 	bl	17fa4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1513c:	9900      	ldr	r1, [sp, #0]
   1513e:	4604      	mov	r4, r0
   15140:	2800      	cmp	r0, #0
   15142:	d034      	beq.n	151ae <net_buf_alloc_len+0xca>
	__asm__ volatile(
   15144:	f381 8811 	msr	BASEPRI, r1
   15148:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1514c:	9d01      	ldr	r5, [sp, #4]
   1514e:	2d00      	cmp	r5, #0
   15150:	d069      	beq.n	15226 <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15152:	ea58 0309 	orrs.w	r3, r8, r9
   15156:	d00f      	beq.n	15178 <net_buf_alloc_len+0x94>
   15158:	f1b8 3fff 	cmp.w	r8, #4294967295
   1515c:	bf08      	it	eq
   1515e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   15162:	d009      	beq.n	15178 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   15164:	f004 fd08 	bl	19b78 <z_tick_get>
   15168:	ebba 0700 	subs.w	r7, sl, r0
   1516c:	eb6b 0601 	sbc.w	r6, fp, r1
   15170:	2e00      	cmp	r6, #0
   15172:	bfbc      	itt	lt
   15174:	2700      	movlt	r7, #0
   15176:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   15178:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1517c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1517e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 15234 <net_buf_alloc_len+0x150>
   15182:	463a      	mov	r2, r7
   15184:	fb09 8303 	mla	r3, r9, r3, r8
   15188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1518a:	4620      	mov	r0, r4
   1518c:	681b      	ldr	r3, [r3, #0]
   1518e:	a901      	add	r1, sp, #4
   15190:	f8d3 a000 	ldr.w	sl, [r3]
   15194:	4633      	mov	r3, r6
   15196:	47d0      	blx	sl
   15198:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1519a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1519c:	bb58      	cbnz	r0, 151f6 <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   1519e:	79a0      	ldrb	r0, [r4, #6]
   151a0:	4621      	mov	r1, r4
   151a2:	fb00 8009 	mla	r0, r0, r9, r8
   151a6:	f008 fd06 	bl	1dbb6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   151aa:	4634      	mov	r4, r6
}
   151ac:	e01f      	b.n	151ee <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   151ae:	8beb      	ldrh	r3, [r5, #30]
   151b0:	1e5a      	subs	r2, r3, #1
   151b2:	83ea      	strh	r2, [r5, #30]
   151b4:	f381 8811 	msr	BASEPRI, r1
   151b8:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   151bc:	2018      	movs	r0, #24
   151be:	8bac      	ldrh	r4, [r5, #28]
   151c0:	1ae3      	subs	r3, r4, r3
   151c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   151c4:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   151c8:	481a      	ldr	r0, [pc, #104]	; (15234 <net_buf_alloc_len+0x150>)
   151ca:	4b1b      	ldr	r3, [pc, #108]	; (15238 <net_buf_alloc_len+0x154>)
   151cc:	1a2d      	subs	r5, r5, r0
   151ce:	10ad      	asrs	r5, r5, #2
   151d0:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   151d2:	71a5      	strb	r5, [r4, #6]
		goto success;
   151d4:	e7ba      	b.n	1514c <net_buf_alloc_len+0x68>
   151d6:	f381 8811 	msr	BASEPRI, r1
   151da:	f3bf 8f6f 	isb	sy
   151de:	464a      	mov	r2, r9
   151e0:	4643      	mov	r3, r8
   151e2:	4628      	mov	r0, r5
   151e4:	f002 fede 	bl	17fa4 <z_impl_k_queue_get>
	if (!buf) {
   151e8:	4604      	mov	r4, r0
   151ea:	2800      	cmp	r0, #0
   151ec:	d1ae      	bne.n	1514c <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   151ee:	4620      	mov	r0, r4
   151f0:	b003      	add	sp, #12
   151f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   151f6:	9b01      	ldr	r3, [sp, #4]
   151f8:	429d      	cmp	r5, r3
   151fa:	d90a      	bls.n	15212 <net_buf_alloc_len+0x12e>
   151fc:	490b      	ldr	r1, [pc, #44]	; (1522c <net_buf_alloc_len+0x148>)
   151fe:	480c      	ldr	r0, [pc, #48]	; (15230 <net_buf_alloc_len+0x14c>)
   15200:	f240 124d 	movw	r2, #333	; 0x14d
   15204:	f005 f90f 	bl	1a426 <printk>
   15208:	f240 114d 	movw	r1, #333	; 0x14d
   1520c:	4807      	ldr	r0, [pc, #28]	; (1522c <net_buf_alloc_len+0x148>)
   1520e:	f005 fbb0 	bl	1a972 <assert_post_action>
	buf->frags = NULL;
   15212:	2300      	movs	r3, #0
   15214:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15216:	2301      	movs	r3, #1
   15218:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1521a:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   1521c:	4620      	mov	r0, r4
	buf->size  = size;
   1521e:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   15220:	f7ff ff3e 	bl	150a0 <net_buf_reset>
	return buf;
   15224:	e7e3      	b.n	151ee <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   15226:	6125      	str	r5, [r4, #16]
   15228:	e7f3      	b.n	15212 <net_buf_alloc_len+0x12e>
   1522a:	bf00      	nop
   1522c:	0002204f 	.word	0x0002204f
   15230:	0001f98f 	.word	0x0001f98f
   15234:	200086bc 	.word	0x200086bc
   15238:	ba2e8ba3 	.word	0xba2e8ba3

0001523c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15240:	4606      	mov	r6, r0
   15242:	f002 feaf 	bl	17fa4 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   15246:	4605      	mov	r5, r0
   15248:	b140      	cbz	r0, 1525c <net_buf_get+0x20>
   1524a:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1524c:	4f11      	ldr	r7, [pc, #68]	; (15294 <net_buf_get+0x58>)
   1524e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 15298 <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   15252:	7963      	ldrb	r3, [r4, #5]
   15254:	f013 0301 	ands.w	r3, r3, #1
   15258:	d103      	bne.n	15262 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1525a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1525c:	4628      	mov	r0, r5
   1525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15262:	2200      	movs	r2, #0
   15264:	2300      	movs	r3, #0
   15266:	4630      	mov	r0, r6
   15268:	f002 fe9c 	bl	17fa4 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1526c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1526e:	b950      	cbnz	r0, 15286 <net_buf_get+0x4a>
   15270:	4639      	mov	r1, r7
   15272:	4640      	mov	r0, r8
   15274:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   15278:	f005 f8d5 	bl	1a426 <printk>
   1527c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   15280:	4638      	mov	r0, r7
   15282:	f005 fb76 	bl	1a972 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   15286:	7963      	ldrb	r3, [r4, #5]
   15288:	f023 0301 	bic.w	r3, r3, #1
   1528c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1528e:	6824      	ldr	r4, [r4, #0]
   15290:	e7df      	b.n	15252 <net_buf_get+0x16>
   15292:	bf00      	nop
   15294:	0002204f 	.word	0x0002204f
   15298:	0001f98f 	.word	0x0001f98f

0001529c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1529c:	b538      	push	{r3, r4, r5, lr}
   1529e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   152a0:	4604      	mov	r4, r0
   152a2:	b950      	cbnz	r0, 152ba <net_buf_simple_reserve+0x1e>
   152a4:	490d      	ldr	r1, [pc, #52]	; (152dc <net_buf_simple_reserve+0x40>)
   152a6:	480e      	ldr	r0, [pc, #56]	; (152e0 <net_buf_simple_reserve+0x44>)
   152a8:	f240 12bb 	movw	r2, #443	; 0x1bb
   152ac:	f005 f8bb 	bl	1a426 <printk>
   152b0:	f240 11bb 	movw	r1, #443	; 0x1bb
   152b4:	4809      	ldr	r0, [pc, #36]	; (152dc <net_buf_simple_reserve+0x40>)
   152b6:	f005 fb5c 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   152ba:	88a3      	ldrh	r3, [r4, #4]
   152bc:	b153      	cbz	r3, 152d4 <net_buf_simple_reserve+0x38>
   152be:	4907      	ldr	r1, [pc, #28]	; (152dc <net_buf_simple_reserve+0x40>)
   152c0:	4807      	ldr	r0, [pc, #28]	; (152e0 <net_buf_simple_reserve+0x44>)
   152c2:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   152c6:	f005 f8ae 	bl	1a426 <printk>
   152ca:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   152ce:	4803      	ldr	r0, [pc, #12]	; (152dc <net_buf_simple_reserve+0x40>)
   152d0:	f005 fb4f 	bl	1a972 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   152d4:	68a3      	ldr	r3, [r4, #8]
   152d6:	442b      	add	r3, r5
   152d8:	6023      	str	r3, [r4, #0]
}
   152da:	bd38      	pop	{r3, r4, r5, pc}
   152dc:	0002204f 	.word	0x0002204f
   152e0:	0001f98f 	.word	0x0001f98f

000152e4 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   152e4:	b538      	push	{r3, r4, r5, lr}
   152e6:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   152e8:	4605      	mov	r5, r0
   152ea:	b950      	cbnz	r0, 15302 <net_buf_put+0x1e>
   152ec:	4912      	ldr	r1, [pc, #72]	; (15338 <net_buf_put+0x54>)
   152ee:	4813      	ldr	r0, [pc, #76]	; (1533c <net_buf_put+0x58>)
   152f0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   152f4:	f005 f897 	bl	1a426 <printk>
   152f8:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   152fc:	480e      	ldr	r0, [pc, #56]	; (15338 <net_buf_put+0x54>)
   152fe:	f005 fb38 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   15302:	b954      	cbnz	r4, 1531a <net_buf_put+0x36>
   15304:	490c      	ldr	r1, [pc, #48]	; (15338 <net_buf_put+0x54>)
   15306:	480d      	ldr	r0, [pc, #52]	; (1533c <net_buf_put+0x58>)
   15308:	f240 12f9 	movw	r2, #505	; 0x1f9
   1530c:	f005 f88b 	bl	1a426 <printk>
   15310:	f240 11f9 	movw	r1, #505	; 0x1f9
   15314:	4808      	ldr	r0, [pc, #32]	; (15338 <net_buf_put+0x54>)
   15316:	f005 fb2c 	bl	1a972 <assert_post_action>
{
   1531a:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1531c:	6811      	ldr	r1, [r2, #0]
   1531e:	b929      	cbnz	r1, 1532c <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   15320:	4621      	mov	r1, r4
   15322:	4628      	mov	r0, r5
}
   15324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   15328:	f002 bde8 	b.w	17efc <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1532c:	7953      	ldrb	r3, [r2, #5]
   1532e:	f043 0301 	orr.w	r3, r3, #1
   15332:	7153      	strb	r3, [r2, #5]
   15334:	460a      	mov	r2, r1
   15336:	e7f1      	b.n	1531c <net_buf_put+0x38>
   15338:	0002204f 	.word	0x0002204f
   1533c:	0001f98f 	.word	0x0001f98f

00015340 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   15340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   15344:	4605      	mov	r5, r0
   15346:	b328      	cbz	r0, 15394 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   15348:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1534a:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1534e:	4e1b      	ldr	r6, [pc, #108]	; (153bc <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   15350:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   15352:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   15354:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   15356:	3b01      	subs	r3, #1
   15358:	b2db      	uxtb	r3, r3
   1535a:	7123      	strb	r3, [r4, #4]
   1535c:	b9c3      	cbnz	r3, 15390 <net_buf_unref+0x50>
		if (buf->__buf) {
   1535e:	6921      	ldr	r1, [r4, #16]
   15360:	b159      	cbz	r1, 1537a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   15362:	7963      	ldrb	r3, [r4, #5]
   15364:	079b      	lsls	r3, r3, #30
   15366:	d407      	bmi.n	15378 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15368:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1536a:	4620      	mov	r0, r4
   1536c:	fb08 6303 	mla	r3, r8, r3, r6
   15370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15372:	681b      	ldr	r3, [r3, #0]
   15374:	689b      	ldr	r3, [r3, #8]
   15376:	4798      	blx	r3
			buf->__buf = NULL;
   15378:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1537a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1537c:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1537e:	fb08 6300 	mla	r3, r8, r0, r6
   15382:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   15384:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   15386:	b193      	cbz	r3, 153ae <net_buf_unref+0x6e>
			pool->destroy(buf);
   15388:	4620      	mov	r0, r4
   1538a:	4798      	blx	r3
	while (buf) {
   1538c:	2d00      	cmp	r5, #0
   1538e:	d1df      	bne.n	15350 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   15390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   15394:	490a      	ldr	r1, [pc, #40]	; (153c0 <net_buf_unref+0x80>)
   15396:	480b      	ldr	r0, [pc, #44]	; (153c4 <net_buf_unref+0x84>)
   15398:	f44f 7202 	mov.w	r2, #520	; 0x208
   1539c:	f005 f843 	bl	1a426 <printk>
}
   153a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   153a4:	f44f 7102 	mov.w	r1, #520	; 0x208
   153a8:	4805      	ldr	r0, [pc, #20]	; (153c0 <net_buf_unref+0x80>)
   153aa:	f005 bae2 	b.w	1a972 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   153ae:	4621      	mov	r1, r4
   153b0:	fb00 6008 	mla	r0, r0, r8, r6
   153b4:	f008 fbff 	bl	1dbb6 <k_queue_prepend>
}
   153b8:	e7e8      	b.n	1538c <net_buf_unref+0x4c>
   153ba:	bf00      	nop
   153bc:	200086bc 	.word	0x200086bc
   153c0:	0002204f 	.word	0x0002204f
   153c4:	0001f98f 	.word	0x0001f98f

000153c8 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   153c8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   153ca:	4604      	mov	r4, r0
   153cc:	b950      	cbnz	r0, 153e4 <net_buf_ref+0x1c>
   153ce:	4908      	ldr	r1, [pc, #32]	; (153f0 <net_buf_ref+0x28>)
   153d0:	4808      	ldr	r0, [pc, #32]	; (153f4 <net_buf_ref+0x2c>)
   153d2:	f240 2237 	movw	r2, #567	; 0x237
   153d6:	f005 f826 	bl	1a426 <printk>
   153da:	f240 2137 	movw	r1, #567	; 0x237
   153de:	4804      	ldr	r0, [pc, #16]	; (153f0 <net_buf_ref+0x28>)
   153e0:	f005 fac7 	bl	1a972 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   153e4:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   153e6:	4620      	mov	r0, r4
	buf->ref++;
   153e8:	3301      	adds	r3, #1
   153ea:	7123      	strb	r3, [r4, #4]
}
   153ec:	bd10      	pop	{r4, pc}
   153ee:	bf00      	nop
   153f0:	0002204f 	.word	0x0002204f
   153f4:	0001f98f 	.word	0x0001f98f

000153f8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   153f8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   153fa:	4604      	mov	r4, r0
   153fc:	b950      	cbnz	r0, 15414 <net_buf_frag_last+0x1c>
   153fe:	4908      	ldr	r1, [pc, #32]	; (15420 <net_buf_frag_last+0x28>)
   15400:	4808      	ldr	r0, [pc, #32]	; (15424 <net_buf_frag_last+0x2c>)
   15402:	f44f 721d 	mov.w	r2, #628	; 0x274
   15406:	f005 f80e 	bl	1a426 <printk>
   1540a:	f44f 711d 	mov.w	r1, #628	; 0x274
   1540e:	4804      	ldr	r0, [pc, #16]	; (15420 <net_buf_frag_last+0x28>)
   15410:	f005 faaf 	bl	1a972 <assert_post_action>

	while (buf->frags) {
   15414:	4620      	mov	r0, r4
   15416:	6824      	ldr	r4, [r4, #0]
   15418:	2c00      	cmp	r4, #0
   1541a:	d1fb      	bne.n	15414 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1541c:	bd10      	pop	{r4, pc}
   1541e:	bf00      	nop
   15420:	0002204f 	.word	0x0002204f
   15424:	0001f98f 	.word	0x0001f98f

00015428 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   15428:	b538      	push	{r3, r4, r5, lr}
   1542a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1542c:	4604      	mov	r4, r0
   1542e:	b950      	cbnz	r0, 15446 <net_buf_frag_insert+0x1e>
   15430:	490f      	ldr	r1, [pc, #60]	; (15470 <net_buf_frag_insert+0x48>)
   15432:	4810      	ldr	r0, [pc, #64]	; (15474 <net_buf_frag_insert+0x4c>)
   15434:	f240 227f 	movw	r2, #639	; 0x27f
   15438:	f004 fff5 	bl	1a426 <printk>
   1543c:	f240 217f 	movw	r1, #639	; 0x27f
   15440:	480b      	ldr	r0, [pc, #44]	; (15470 <net_buf_frag_insert+0x48>)
   15442:	f005 fa96 	bl	1a972 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   15446:	b955      	cbnz	r5, 1545e <net_buf_frag_insert+0x36>
   15448:	4909      	ldr	r1, [pc, #36]	; (15470 <net_buf_frag_insert+0x48>)
   1544a:	480a      	ldr	r0, [pc, #40]	; (15474 <net_buf_frag_insert+0x4c>)
   1544c:	f44f 7220 	mov.w	r2, #640	; 0x280
   15450:	f004 ffe9 	bl	1a426 <printk>
   15454:	f44f 7120 	mov.w	r1, #640	; 0x280
   15458:	4805      	ldr	r0, [pc, #20]	; (15470 <net_buf_frag_insert+0x48>)
   1545a:	f005 fa8a 	bl	1a972 <assert_post_action>

	if (parent->frags) {
   1545e:	6823      	ldr	r3, [r4, #0]
   15460:	b123      	cbz	r3, 1546c <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   15462:	4628      	mov	r0, r5
   15464:	f7ff ffc8 	bl	153f8 <net_buf_frag_last>
   15468:	6823      	ldr	r3, [r4, #0]
   1546a:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1546c:	6025      	str	r5, [r4, #0]
}
   1546e:	bd38      	pop	{r3, r4, r5, pc}
   15470:	0002204f 	.word	0x0002204f
   15474:	0001f98f 	.word	0x0001f98f

00015478 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   15478:	b538      	push	{r3, r4, r5, lr}
   1547a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1547c:	460d      	mov	r5, r1
   1547e:	b951      	cbnz	r1, 15496 <net_buf_frag_add+0x1e>
   15480:	490c      	ldr	r1, [pc, #48]	; (154b4 <net_buf_frag_add+0x3c>)
   15482:	480d      	ldr	r0, [pc, #52]	; (154b8 <net_buf_frag_add+0x40>)
   15484:	f240 228b 	movw	r2, #651	; 0x28b
   15488:	f004 ffcd 	bl	1a426 <printk>
   1548c:	f240 218b 	movw	r1, #651	; 0x28b
   15490:	4808      	ldr	r0, [pc, #32]	; (154b4 <net_buf_frag_add+0x3c>)
   15492:	f005 fa6e 	bl	1a972 <assert_post_action>

	if (!head) {
   15496:	b924      	cbnz	r4, 154a2 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   15498:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1549a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1549e:	f7ff bf93 	b.w	153c8 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   154a2:	4620      	mov	r0, r4
   154a4:	f7ff ffa8 	bl	153f8 <net_buf_frag_last>
   154a8:	4629      	mov	r1, r5
   154aa:	f7ff ffbd 	bl	15428 <net_buf_frag_insert>
}
   154ae:	4620      	mov	r0, r4
   154b0:	bd38      	pop	{r3, r4, r5, pc}
   154b2:	bf00      	nop
   154b4:	0002204f 	.word	0x0002204f
   154b8:	0001f98f 	.word	0x0001f98f

000154bc <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   154bc:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   154be:	6882      	ldr	r2, [r0, #8]
   154c0:	6803      	ldr	r3, [r0, #0]
{
   154c2:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   154c4:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   154c6:	4299      	cmp	r1, r3
{
   154c8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   154ca:	d90a      	bls.n	154e2 <net_buf_simple_push+0x26>
   154cc:	4908      	ldr	r1, [pc, #32]	; (154f0 <net_buf_simple_push+0x34>)
   154ce:	4809      	ldr	r0, [pc, #36]	; (154f4 <net_buf_simple_push+0x38>)
   154d0:	f240 4204 	movw	r2, #1028	; 0x404
   154d4:	f004 ffa7 	bl	1a426 <printk>
   154d8:	f240 4104 	movw	r1, #1028	; 0x404
   154dc:	4804      	ldr	r0, [pc, #16]	; (154f0 <net_buf_simple_push+0x34>)
   154de:	f005 fa48 	bl	1a972 <assert_post_action>
	buf->data -= len;
   154e2:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   154e4:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   154e6:	1b40      	subs	r0, r0, r5
	buf->len += len;
   154e8:	440d      	add	r5, r1
	buf->data -= len;
   154ea:	6020      	str	r0, [r4, #0]
	buf->len += len;
   154ec:	80a5      	strh	r5, [r4, #4]
}
   154ee:	bd38      	pop	{r3, r4, r5, pc}
   154f0:	0002204f 	.word	0x0002204f
   154f4:	0001f98f 	.word	0x0001f98f

000154f8 <net_buf_simple_pull>:
{
   154f8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   154fa:	8883      	ldrh	r3, [r0, #4]
{
   154fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   154fe:	428b      	cmp	r3, r1
{
   15500:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   15502:	d20a      	bcs.n	1551a <net_buf_simple_pull+0x22>
   15504:	4908      	ldr	r1, [pc, #32]	; (15528 <net_buf_simple_pull+0x30>)
   15506:	4809      	ldr	r0, [pc, #36]	; (1552c <net_buf_simple_pull+0x34>)
   15508:	f240 4264 	movw	r2, #1124	; 0x464
   1550c:	f004 ff8b 	bl	1a426 <printk>
   15510:	f240 4164 	movw	r1, #1124	; 0x464
   15514:	4804      	ldr	r0, [pc, #16]	; (15528 <net_buf_simple_pull+0x30>)
   15516:	f005 fa2c 	bl	1a972 <assert_post_action>
	buf->len -= len;
   1551a:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1551c:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1551e:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   15520:	4428      	add	r0, r5
	buf->len -= len;
   15522:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   15524:	6020      	str	r0, [r4, #0]
}
   15526:	bd38      	pop	{r3, r4, r5, pc}
   15528:	0002204f 	.word	0x0002204f
   1552c:	0001f98f 	.word	0x0001f98f

00015530 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   15530:	8883      	ldrh	r3, [r0, #4]
{
   15532:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15534:	428b      	cmp	r3, r1
{
   15536:	4604      	mov	r4, r0
   15538:	460d      	mov	r5, r1
	void *data = buf->data;
   1553a:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1553c:	d20a      	bcs.n	15554 <net_buf_simple_pull_mem+0x24>
   1553e:	4909      	ldr	r1, [pc, #36]	; (15564 <net_buf_simple_pull_mem+0x34>)
   15540:	4809      	ldr	r0, [pc, #36]	; (15568 <net_buf_simple_pull_mem+0x38>)
   15542:	f44f 628e 	mov.w	r2, #1136	; 0x470
   15546:	f004 ff6e 	bl	1a426 <printk>
   1554a:	f44f 618e 	mov.w	r1, #1136	; 0x470
   1554e:	4805      	ldr	r0, [pc, #20]	; (15564 <net_buf_simple_pull_mem+0x34>)
   15550:	f005 fa0f 	bl	1a972 <assert_post_action>
	buf->len -= len;
   15554:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   15556:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   15558:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1555a:	4429      	add	r1, r5
}
   1555c:	4630      	mov	r0, r6
	buf->len -= len;
   1555e:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   15560:	6021      	str	r1, [r4, #0]
}
   15562:	bd70      	pop	{r4, r5, r6, pc}
   15564:	0002204f 	.word	0x0002204f
   15568:	0001f98f 	.word	0x0001f98f

0001556c <net_buf_simple_add>:
{
   1556c:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1556e:	6803      	ldr	r3, [r0, #0]
   15570:	8886      	ldrh	r6, [r0, #4]
   15572:	4604      	mov	r4, r0
   15574:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   15576:	f007 fcd0 	bl	1cf1a <net_buf_simple_tailroom>
   1557a:	4288      	cmp	r0, r1
{
   1557c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1557e:	d20a      	bcs.n	15596 <net_buf_simple_add+0x2a>
   15580:	4907      	ldr	r1, [pc, #28]	; (155a0 <net_buf_simple_add+0x34>)
   15582:	4808      	ldr	r0, [pc, #32]	; (155a4 <net_buf_simple_add+0x38>)
   15584:	f240 3215 	movw	r2, #789	; 0x315
   15588:	f004 ff4d 	bl	1a426 <printk>
   1558c:	f240 3115 	movw	r1, #789	; 0x315
   15590:	4803      	ldr	r0, [pc, #12]	; (155a0 <net_buf_simple_add+0x34>)
   15592:	f005 f9ee 	bl	1a972 <assert_post_action>
	buf->len += len;
   15596:	88a1      	ldrh	r1, [r4, #4]
}
   15598:	4630      	mov	r0, r6
	buf->len += len;
   1559a:	440d      	add	r5, r1
   1559c:	80a5      	strh	r5, [r4, #4]
}
   1559e:	bd70      	pop	{r4, r5, r6, pc}
   155a0:	0002204f 	.word	0x0002204f
   155a4:	0001f98f 	.word	0x0001f98f

000155a8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   155a8:	b570      	push	{r4, r5, r6, lr}
   155aa:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   155ac:	460c      	mov	r4, r1
	return port->data;
   155ae:	68c5      	ldr	r5, [r0, #12]
   155b0:	b941      	cbnz	r1, 155c4 <gpio_nrfx_manage_callback+0x1c>
   155b2:	491e      	ldr	r1, [pc, #120]	; (1562c <gpio_nrfx_manage_callback+0x84>)
   155b4:	481e      	ldr	r0, [pc, #120]	; (15630 <gpio_nrfx_manage_callback+0x88>)
   155b6:	2224      	movs	r2, #36	; 0x24
   155b8:	f004 ff35 	bl	1a426 <printk>
   155bc:	2124      	movs	r1, #36	; 0x24
   155be:	481b      	ldr	r0, [pc, #108]	; (1562c <gpio_nrfx_manage_callback+0x84>)
   155c0:	f005 f9d7 	bl	1a972 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   155c4:	6863      	ldr	r3, [r4, #4]
   155c6:	b943      	cbnz	r3, 155da <gpio_nrfx_manage_callback+0x32>
   155c8:	4918      	ldr	r1, [pc, #96]	; (1562c <gpio_nrfx_manage_callback+0x84>)
   155ca:	4819      	ldr	r0, [pc, #100]	; (15630 <gpio_nrfx_manage_callback+0x88>)
   155cc:	2225      	movs	r2, #37	; 0x25
   155ce:	f004 ff2a 	bl	1a426 <printk>
   155d2:	2125      	movs	r1, #37	; 0x25
   155d4:	4815      	ldr	r0, [pc, #84]	; (1562c <gpio_nrfx_manage_callback+0x84>)
   155d6:	f005 f9cc 	bl	1a972 <assert_post_action>
	return list->head;
   155da:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   155dc:	b15b      	cbz	r3, 155f6 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   155de:	2200      	movs	r2, #0
   155e0:	429c      	cmp	r4, r3
   155e2:	d112      	bne.n	1560a <gpio_nrfx_manage_callback+0x62>
	return node->next;
   155e4:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   155e6:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   155e8:	b952      	cbnz	r2, 15600 <gpio_nrfx_manage_callback+0x58>
   155ea:	42a1      	cmp	r1, r4
	list->head = node;
   155ec:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   155ee:	d100      	bne.n	155f2 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   155f0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   155f2:	2300      	movs	r3, #0
   155f4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   155f6:	b96e      	cbnz	r6, 15614 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   155f8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   155fa:	bd70      	pop	{r4, r5, r6, pc}
   155fc:	460b      	mov	r3, r1
   155fe:	e7ef      	b.n	155e0 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   15600:	42a1      	cmp	r1, r4
	parent->next = child;
   15602:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15604:	bf08      	it	eq
   15606:	60aa      	streq	r2, [r5, #8]
}
   15608:	e7f3      	b.n	155f2 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   1560a:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1560c:	461a      	mov	r2, r3
   1560e:	2900      	cmp	r1, #0
   15610:	d1f4      	bne.n	155fc <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   15612:	b13e      	cbz	r6, 15624 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   15614:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15616:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   15618:	6023      	str	r3, [r4, #0]
	list->head = node;
   1561a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1561c:	2800      	cmp	r0, #0
   1561e:	d1eb      	bne.n	155f8 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   15620:	60ac      	str	r4, [r5, #8]
}
   15622:	e7ea      	b.n	155fa <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   15624:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15628:	e7e7      	b.n	155fa <gpio_nrfx_manage_callback+0x52>
   1562a:	bf00      	nop
   1562c:	0002207b 	.word	0x0002207b
   15630:	0001f98f 	.word	0x0001f98f

00015634 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15634:	6802      	ldr	r2, [r0, #0]
{
   15636:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15638:	0953      	lsrs	r3, r2, #5
{
   1563a:	4604      	mov	r4, r0
    switch (port)
   1563c:	d029      	beq.n	15692 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1563e:	2b01      	cmp	r3, #1
   15640:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15644:	bf18      	it	ne
   15646:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15648:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1564c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1564e:	07db      	lsls	r3, r3, #31
   15650:	d40a      	bmi.n	15668 <nrf_gpio_pin_port_decode+0x34>
   15652:	4912      	ldr	r1, [pc, #72]	; (1569c <nrf_gpio_pin_port_decode+0x68>)
   15654:	4812      	ldr	r0, [pc, #72]	; (156a0 <nrf_gpio_pin_port_decode+0x6c>)
   15656:	f240 221a 	movw	r2, #538	; 0x21a
   1565a:	f004 fee4 	bl	1a426 <printk>
   1565e:	f240 211a 	movw	r1, #538	; 0x21a
   15662:	480e      	ldr	r0, [pc, #56]	; (1569c <nrf_gpio_pin_port_decode+0x68>)
   15664:	f005 f985 	bl	1a972 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15668:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1566a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1566e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15670:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15672:	d00c      	beq.n	1568e <nrf_gpio_pin_port_decode+0x5a>
   15674:	2b01      	cmp	r3, #1
   15676:	d00f      	beq.n	15698 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   15678:	4908      	ldr	r1, [pc, #32]	; (1569c <nrf_gpio_pin_port_decode+0x68>)
   1567a:	4809      	ldr	r0, [pc, #36]	; (156a0 <nrf_gpio_pin_port_decode+0x6c>)
   1567c:	f240 221f 	movw	r2, #543	; 0x21f
   15680:	f004 fed1 	bl	1a426 <printk>
   15684:	f240 211f 	movw	r1, #543	; 0x21f
   15688:	4804      	ldr	r0, [pc, #16]	; (1569c <nrf_gpio_pin_port_decode+0x68>)
   1568a:	f005 f972 	bl	1a972 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1568e:	4805      	ldr	r0, [pc, #20]	; (156a4 <nrf_gpio_pin_port_decode+0x70>)
}
   15690:	bd10      	pop	{r4, pc}
    switch (port)
   15692:	f04f 33ff 	mov.w	r3, #4294967295
   15696:	e7d7      	b.n	15648 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   15698:	4803      	ldr	r0, [pc, #12]	; (156a8 <nrf_gpio_pin_port_decode+0x74>)
   1569a:	e7f9      	b.n	15690 <nrf_gpio_pin_port_decode+0x5c>
   1569c:	000220a8 	.word	0x000220a8
   156a0:	0001f98f 	.word	0x0001f98f
   156a4:	40842500 	.word	0x40842500
   156a8:	40842800 	.word	0x40842800

000156ac <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   156ac:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   156ae:	4b09      	ldr	r3, [pc, #36]	; (156d4 <gpio_nrfx_init+0x28>)
   156b0:	781a      	ldrb	r2, [r3, #0]
   156b2:	b96a      	cbnz	r2, 156d0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   156b4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   156b6:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   156b8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   156ba:	2105      	movs	r1, #5
   156bc:	f7f8 f898 	bl	d7f0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   156c0:	202f      	movs	r0, #47	; 0x2f
   156c2:	f7f8 f877 	bl	d7b4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   156c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   156ca:	4b03      	ldr	r3, [pc, #12]	; (156d8 <gpio_nrfx_init+0x2c>)
   156cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   156d0:	2000      	movs	r0, #0
   156d2:	bd08      	pop	{r3, pc}
   156d4:	2000c7cc 	.word	0x2000c7cc
   156d8:	4002f000 	.word	0x4002f000

000156dc <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   156dc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   156e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   156e4:	4680      	mov	r8, r0
   156e6:	460e      	mov	r6, r1
   156e8:	4617      	mov	r7, r2
   156ea:	4699      	mov	r9, r3
	return port->data;
   156ec:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   156ee:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   156f2:	f040 80ab 	bne.w	1584c <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   156f6:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   156f8:	a801      	add	r0, sp, #4
   156fa:	7a1b      	ldrb	r3, [r3, #8]
   156fc:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   15700:	9301      	str	r3, [sp, #4]
   15702:	f7ff ff97 	bl	15634 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15706:	9b01      	ldr	r3, [sp, #4]
   15708:	3380      	adds	r3, #128	; 0x80
   1570a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1570e:	07d8      	lsls	r0, r3, #31
   15710:	f100 80bb 	bmi.w	1588a <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15714:	2101      	movs	r1, #1
   15716:	68e3      	ldr	r3, [r4, #12]
   15718:	40b1      	lsls	r1, r6
   1571a:	4319      	orrs	r1, r3
   1571c:	60e1      	str	r1, [r4, #12]
   1571e:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15720:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15722:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15724:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15726:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   1572a:	bf0c      	ite	eq
   1572c:	430b      	orreq	r3, r1
   1572e:	438b      	bicne	r3, r1
   15730:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15732:	69a3      	ldr	r3, [r4, #24]
   15734:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15738:	bf0c      	ite	eq
   1573a:	430b      	orreq	r3, r1
   1573c:	438b      	bicne	r3, r1
   1573e:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15740:	6923      	ldr	r3, [r4, #16]
   15742:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15746:	bf0c      	ite	eq
   15748:	4319      	orreq	r1, r3
   1574a:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1574e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15752:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15754:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15756:	4a4e      	ldr	r2, [pc, #312]	; (15890 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15758:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   1575c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   15760:	f8d8 700c 	ldr.w	r7, [r8, #12]
   15764:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15766:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1576a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1576e:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15772:	428d      	cmp	r5, r1
   15774:	d175      	bne.n	15862 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   15776:	fa23 f100 	lsr.w	r1, r3, r0
   1577a:	07c9      	lsls	r1, r1, #31
   1577c:	d571      	bpl.n	15862 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1577e:	0083      	lsls	r3, r0, #2
   15780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15784:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15788:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1578c:	f021 0101 	bic.w	r1, r1, #1
   15790:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   15794:	2301      	movs	r3, #1
   15796:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   15798:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1579c:	b2c0      	uxtb	r0, r0
   1579e:	f001 f9bf 	bl	16b20 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   157a2:	4628      	mov	r0, r5
   157a4:	2100      	movs	r1, #0
   157a6:	f007 fbfc 	bl	1cfa2 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   157aa:	68f8      	ldr	r0, [r7, #12]
   157ac:	40f0      	lsrs	r0, r6
   157ae:	f010 0001 	ands.w	r0, r0, #1
   157b2:	d048      	beq.n	15846 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   157b4:	6978      	ldr	r0, [r7, #20]
   157b6:	40f0      	lsrs	r0, r6
   157b8:	f010 0401 	ands.w	r4, r0, #1
   157bc:	d059      	beq.n	15872 <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   157be:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   157c0:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   157c2:	40f3      	lsrs	r3, r6
   157c4:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   157c6:	bf57      	itett	pl
   157c8:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   157ca:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   157cc:	fa21 f606 	lsrpl.w	r6, r1, r6
   157d0:	f006 0601 	andpl.w	r6, r6, #1
   157d4:	bf5c      	itt	pl
   157d6:	f1c6 0602 	rsbpl	r6, r6, #2
   157da:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   157dc:	f001 f9c0 	bl	16b60 <nrfx_gpiote_channel_alloc>
   157e0:	4b2c      	ldr	r3, [pc, #176]	; (15894 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   157e2:	4298      	cmp	r0, r3
   157e4:	d142      	bne.n	1586c <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   157e6:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   157e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   157ec:	022d      	lsls	r5, r5, #8
   157ee:	008b      	lsls	r3, r1, #2
   157f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   157f4:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   157f8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   157fc:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15800:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   15804:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   15808:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1580c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15810:	4315      	orrs	r5, r2
   15812:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   15816:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1581a:	4b1f      	ldr	r3, [pc, #124]	; (15898 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   1581c:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1581e:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   15820:	f89d 1004 	ldrb.w	r1, [sp, #4]
   15824:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15826:	008b      	lsls	r3, r1, #2
   15828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1582c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15830:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15834:	f042 0201 	orr.w	r2, r2, #1
   15838:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1583c:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   1583e:	4a14      	ldr	r2, [pc, #80]	; (15890 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15840:	408b      	lsls	r3, r1
   15842:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15846:	b003      	add	sp, #12
   15848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1584c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15850:	f47f af60 	bne.w	15714 <gpio_nrfx_pin_interrupt_configure+0x38>
   15854:	2101      	movs	r1, #1
   15856:	fa01 f306 	lsl.w	r3, r1, r6
   1585a:	68e1      	ldr	r1, [r4, #12]
   1585c:	ea21 0103 	bic.w	r1, r1, r3
   15860:	e75c      	b.n	1571c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15862:	3001      	adds	r0, #1
   15864:	2808      	cmp	r0, #8
   15866:	f47f af7e 	bne.w	15766 <gpio_nrfx_pin_interrupt_configure+0x8a>
   1586a:	e79a      	b.n	157a2 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   1586c:	f06f 0012 	mvn.w	r0, #18
   15870:	e7e9      	b.n	15846 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15872:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15874:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15876:	40f1      	lsrs	r1, r6
   15878:	f001 0101 	and.w	r1, r1, #1
   1587c:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15880:	b2c9      	uxtb	r1, r1
   15882:	f007 fb8e 	bl	1cfa2 <nrf_gpio_cfg_sense_set>
	int res = 0;
   15886:	4620      	mov	r0, r4
   15888:	e7dd      	b.n	15846 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   1588a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1588e:	e7da      	b.n	15846 <gpio_nrfx_pin_interrupt_configure+0x16a>
   15890:	4002f000 	.word	0x4002f000
   15894:	0bad0000 	.word	0x0bad0000
   15898:	4002f100 	.word	0x4002f100

0001589c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1589c:	4b2e      	ldr	r3, [pc, #184]	; (15958 <gpio_nrfx_config+0xbc>)
{
   1589e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   158a0:	4c2e      	ldr	r4, [pc, #184]	; (1595c <gpio_nrfx_config+0xc0>)
   158a2:	4013      	ands	r3, r2
   158a4:	42a3      	cmp	r3, r4
	return port->config;
   158a6:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   158a8:	d044      	beq.n	15934 <gpio_nrfx_config+0x98>
   158aa:	d80e      	bhi.n	158ca <gpio_nrfx_config+0x2e>
   158ac:	2b06      	cmp	r3, #6
   158ae:	d043      	beq.n	15938 <gpio_nrfx_config+0x9c>
   158b0:	d806      	bhi.n	158c0 <gpio_nrfx_config+0x24>
   158b2:	2b00      	cmp	r3, #0
   158b4:	d040      	beq.n	15938 <gpio_nrfx_config+0x9c>
   158b6:	2b02      	cmp	r3, #2
   158b8:	d040      	beq.n	1593c <gpio_nrfx_config+0xa0>
   158ba:	f06f 0015 	mvn.w	r0, #21
   158be:	e037      	b.n	15930 <gpio_nrfx_config+0x94>
   158c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   158c4:	d1f9      	bne.n	158ba <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   158c6:	2401      	movs	r4, #1
   158c8:	e009      	b.n	158de <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   158ca:	4c25      	ldr	r4, [pc, #148]	; (15960 <gpio_nrfx_config+0xc4>)
   158cc:	42a3      	cmp	r3, r4
   158ce:	d037      	beq.n	15940 <gpio_nrfx_config+0xa4>
   158d0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   158d4:	d036      	beq.n	15944 <gpio_nrfx_config+0xa8>
   158d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   158da:	d1ee      	bne.n	158ba <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   158dc:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   158de:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   158e0:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   158e4:	bf4c      	ite	mi
   158e6:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   158e8:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   158ec:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   158f0:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   158f2:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   158f6:	d507      	bpl.n	15908 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   158f8:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   158fa:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   158fe:	d523      	bpl.n	15948 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15900:	2301      	movs	r3, #1
   15902:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15904:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15908:	7a03      	ldrb	r3, [r0, #8]
   1590a:	f001 011f 	and.w	r1, r1, #31
   1590e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15912:	a801      	add	r0, sp, #4
   15914:	9101      	str	r1, [sp, #4]
   15916:	f7ff fe8d 	bl	15634 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1591a:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1591c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15920:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15924:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15928:	3280      	adds	r2, #128	; 0x80
   1592a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   1592e:	2000      	movs	r0, #0
}
   15930:	b003      	add	sp, #12
   15932:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15934:	2407      	movs	r4, #7
   15936:	e7d2      	b.n	158de <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15938:	461c      	mov	r4, r3
   1593a:	e7d0      	b.n	158de <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   1593c:	2404      	movs	r4, #4
   1593e:	e7ce      	b.n	158de <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15940:	2405      	movs	r4, #5
   15942:	e7cc      	b.n	158de <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15944:	2403      	movs	r4, #3
   15946:	e7ca      	b.n	158de <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15948:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1594a:	bf42      	ittt	mi
   1594c:	2301      	movmi	r3, #1
   1594e:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15950:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15954:	e7d8      	b.n	15908 <gpio_nrfx_config+0x6c>
   15956:	bf00      	nop
   15958:	00f00006 	.word	0x00f00006
   1595c:	00100006 	.word	0x00100006
   15960:	00400002 	.word	0x00400002

00015964 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   15964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15968:	460f      	mov	r7, r1
   1596a:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1596c:	4604      	mov	r4, r0
   1596e:	b1e0      	cbz	r0, 159aa <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   15970:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   15972:	f8df 803c 	ldr.w	r8, [pc, #60]	; 159b0 <gpio_fire_callbacks.isra.0+0x4c>
   15976:	f8df 903c 	ldr.w	r9, [pc, #60]	; 159b4 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   1597a:	68a3      	ldr	r3, [r4, #8]
   1597c:	421e      	tst	r6, r3
   1597e:	d010      	beq.n	159a2 <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   15980:	6863      	ldr	r3, [r4, #4]
   15982:	b943      	cbnz	r3, 15996 <gpio_fire_callbacks.isra.0+0x32>
   15984:	4641      	mov	r1, r8
   15986:	4648      	mov	r0, r9
   15988:	2245      	movs	r2, #69	; 0x45
   1598a:	f004 fd4c 	bl	1a426 <printk>
   1598e:	2145      	movs	r1, #69	; 0x45
   15990:	4640      	mov	r0, r8
   15992:	f004 ffee 	bl	1a972 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15996:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1599a:	4621      	mov	r1, r4
   1599c:	4638      	mov	r0, r7
   1599e:	4032      	ands	r2, r6
   159a0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   159a2:	b115      	cbz	r5, 159aa <gpio_fire_callbacks.isra.0+0x46>
   159a4:	462c      	mov	r4, r5
   159a6:	682d      	ldr	r5, [r5, #0]
   159a8:	e7e7      	b.n	1597a <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   159aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   159ae:	bf00      	nop
   159b0:	0002207b 	.word	0x0002207b
   159b4:	0001f98f 	.word	0x0001f98f

000159b8 <gpiote_event_handler>:
{
   159b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   159ba:	2600      	movs	r6, #0
   159bc:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   159c0:	4d28      	ldr	r5, [pc, #160]	; (15a64 <gpiote_event_handler+0xac>)
   159c2:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   159c6:	b15c      	cbz	r4, 159e0 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   159c8:	4827      	ldr	r0, [pc, #156]	; (15a68 <gpiote_event_handler+0xb0>)
   159ca:	f007 fb23 	bl	1d014 <check_level_trigger_pins>
		fired_triggers[0] =
   159ce:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   159d0:	4826      	ldr	r0, [pc, #152]	; (15a6c <gpiote_event_handler+0xb4>)
   159d2:	f007 fb1f 	bl	1d014 <check_level_trigger_pins>
		fired_triggers[1] =
   159d6:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   159d8:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   159dc:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   159e0:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   159e2:	2601      	movs	r6, #1
   159e4:	4694      	mov	ip, r2
{
   159e6:	4922      	ldr	r1, [pc, #136]	; (15a70 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   159e8:	4d1e      	ldr	r5, [pc, #120]	; (15a64 <gpiote_event_handler+0xac>)
   159ea:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   159ee:	fa06 f002 	lsl.w	r0, r6, r2
   159f2:	4218      	tst	r0, r3
   159f4:	d016      	beq.n	15a24 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   159f6:	680b      	ldr	r3, [r1, #0]
   159f8:	b1a3      	cbz	r3, 15a24 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   159fa:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   159fe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15a02:	af02      	add	r7, sp, #8
   15a04:	f3c3 3040 	ubfx	r0, r3, #13, #1
   15a08:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   15a0c:	f850 7c08 	ldr.w	r7, [r0, #-8]
   15a10:	f3c3 2304 	ubfx	r3, r3, #8, #5
   15a14:	fa06 f303 	lsl.w	r3, r6, r3
   15a18:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15a1a:	f8c1 c000 	str.w	ip, [r1]
   15a1e:	f840 3c08 	str.w	r3, [r0, #-8]
   15a22:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15a24:	3201      	adds	r2, #1
   15a26:	2a08      	cmp	r2, #8
   15a28:	f101 0104 	add.w	r1, r1, #4
   15a2c:	d1dd      	bne.n	159ea <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   15a2e:	9a00      	ldr	r2, [sp, #0]
   15a30:	b122      	cbz	r2, 15a3c <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   15a32:	4b10      	ldr	r3, [pc, #64]	; (15a74 <gpiote_event_handler+0xbc>)
   15a34:	490c      	ldr	r1, [pc, #48]	; (15a68 <gpiote_event_handler+0xb0>)
   15a36:	6858      	ldr	r0, [r3, #4]
   15a38:	f7ff ff94 	bl	15964 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   15a3c:	9a01      	ldr	r2, [sp, #4]
   15a3e:	b122      	cbz	r2, 15a4a <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   15a40:	4b0d      	ldr	r3, [pc, #52]	; (15a78 <gpiote_event_handler+0xc0>)
   15a42:	490a      	ldr	r1, [pc, #40]	; (15a6c <gpiote_event_handler+0xb4>)
   15a44:	6858      	ldr	r0, [r3, #4]
   15a46:	f7ff ff8d 	bl	15964 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   15a4a:	b144      	cbz	r4, 15a5e <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   15a4c:	4806      	ldr	r0, [pc, #24]	; (15a68 <gpiote_event_handler+0xb0>)
   15a4e:	f007 fabb 	bl	1cfc8 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   15a52:	4806      	ldr	r0, [pc, #24]	; (15a6c <gpiote_event_handler+0xb4>)
}
   15a54:	b003      	add	sp, #12
   15a56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   15a5a:	f007 bab5 	b.w	1cfc8 <cfg_level_pins>
}
   15a5e:	b003      	add	sp, #12
   15a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a62:	bf00      	nop
   15a64:	4002f000 	.word	0x4002f000
   15a68:	200085d4 	.word	0x200085d4
   15a6c:	200085e4 	.word	0x200085e4
   15a70:	4002f100 	.word	0x4002f100
   15a74:	2000adc4 	.word	0x2000adc4
   15a78:	2000ade0 	.word	0x2000ade0

00015a7c <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15a7c:	4b02      	ldr	r3, [pc, #8]	; (15a88 <vipm_nrf_1_register_callback+0xc>)
   15a7e:	6059      	str	r1, [r3, #4]
   15a80:	645a      	str	r2, [r3, #68]	; 0x44
   15a82:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   15a86:	4770      	bx	lr
   15a88:	2000ae04 	.word	0x2000ae04

00015a8c <vipm_nrf_0_set_enabled>:
   15a8c:	b508      	push	{r3, lr}
   15a8e:	2145      	movs	r1, #69	; 0x45
   15a90:	4802      	ldr	r0, [pc, #8]	; (15a9c <vipm_nrf_0_set_enabled+0x10>)
   15a92:	f004 fcc8 	bl	1a426 <printk>
   15a96:	f06f 0015 	mvn.w	r0, #21
   15a9a:	bd08      	pop	{r3, pc}
   15a9c:	000220e9 	.word	0x000220e9

00015aa0 <vipm_nrf_0_register_callback>:
   15aa0:	2157      	movs	r1, #87	; 0x57
   15aa2:	4801      	ldr	r0, [pc, #4]	; (15aa8 <vipm_nrf_0_register_callback+0x8>)
   15aa4:	f004 bcbf 	b.w	1a426 <printk>
   15aa8:	0002210a 	.word	0x0002210a

00015aac <vipm_nrf_1_send>:
   15aac:	b508      	push	{r3, lr}
   15aae:	2145      	movs	r1, #69	; 0x45
   15ab0:	4802      	ldr	r0, [pc, #8]	; (15abc <vipm_nrf_1_send+0x10>)
   15ab2:	f004 fcb8 	bl	1a426 <printk>
   15ab6:	f06f 0015 	mvn.w	r0, #21
   15aba:	bd08      	pop	{r3, pc}
   15abc:	00022141 	.word	0x00022141

00015ac0 <vipm_nrf_init>:
{
   15ac0:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   15ac2:	4d0b      	ldr	r5, [pc, #44]	; (15af0 <vipm_nrf_init+0x30>)
   15ac4:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   15ac8:	b97c      	cbnz	r4, 15aea <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   15aca:	4a0a      	ldr	r2, [pc, #40]	; (15af4 <vipm_nrf_init+0x34>)
   15acc:	490a      	ldr	r1, [pc, #40]	; (15af8 <vipm_nrf_init+0x38>)
   15ace:	4620      	mov	r0, r4
   15ad0:	f001 f87e 	bl	16bd0 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   15ad4:	4622      	mov	r2, r4
   15ad6:	2101      	movs	r1, #1
   15ad8:	202a      	movs	r0, #42	; 0x2a
   15ada:	f7f7 fe89 	bl	d7f0 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   15ade:	4807      	ldr	r0, [pc, #28]	; (15afc <vipm_nrf_init+0x3c>)
   15ae0:	f001 f89c 	bl	16c1c <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   15ae4:	2301      	movs	r3, #1
   15ae6:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   15aea:	2000      	movs	r0, #0
   15aec:	bd38      	pop	{r3, r4, r5, pc}
   15aee:	bf00      	nop
   15af0:	2000ae04 	.word	0x2000ae04
   15af4:	2000adfc 	.word	0x2000adfc
   15af8:	00015b01 	.word	0x00015b01
   15afc:	0001eb24 	.word	0x0001eb24

00015b00 <vipm_dispatcher>:
{
   15b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15b04:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   15b06:	4f17      	ldr	r7, [pc, #92]	; (15b64 <vipm_dispatcher+0x64>)
   15b08:	f8df 805c 	ldr.w	r8, [pc, #92]	; 15b68 <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15b0c:	4e17      	ldr	r6, [pc, #92]	; (15b6c <vipm_dispatcher+0x6c>)
	while (event_mask) {
   15b0e:	b90d      	cbnz	r5, 15b14 <vipm_dispatcher+0x14>
}
   15b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   15b14:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   15b18:	b30c      	cbz	r4, 15b5e <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   15b1a:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   15b1e:	2b0f      	cmp	r3, #15
   15b20:	461c      	mov	r4, r3
   15b22:	dd08      	ble.n	15b36 <vipm_dispatcher+0x36>
   15b24:	4639      	mov	r1, r7
   15b26:	4640      	mov	r0, r8
   15b28:	2283      	movs	r2, #131	; 0x83
   15b2a:	f004 fc7c 	bl	1a426 <printk>
   15b2e:	2183      	movs	r1, #131	; 0x83
   15b30:	4638      	mov	r0, r7
   15b32:	f004 ff1e 	bl	1a972 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   15b36:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15b38:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   15b3c:	40a3      	lsls	r3, r4
   15b3e:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15b42:	f1b9 0f00 	cmp.w	r9, #0
   15b46:	d0e2      	beq.n	15b0e <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   15b48:	2300      	movs	r3, #0
   15b4a:	f104 0110 	add.w	r1, r4, #16
   15b4e:	3420      	adds	r4, #32
   15b50:	461a      	mov	r2, r3
   15b52:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   15b56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   15b5a:	47c8      	blx	r9
   15b5c:	e7d7      	b.n	15b0e <vipm_dispatcher+0xe>
    return 32U;
   15b5e:	2420      	movs	r4, #32
   15b60:	e7e0      	b.n	15b24 <vipm_dispatcher+0x24>
   15b62:	bf00      	nop
   15b64:	00022162 	.word	0x00022162
   15b68:	0001f98f 	.word	0x0001f98f
   15b6c:	2000ae04 	.word	0x2000ae04

00015b70 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15b70:	2a10      	cmp	r2, #16
   15b72:	b508      	push	{r3, lr}
   15b74:	d810      	bhi.n	15b98 <vipm_nrf_0_send+0x28>
   15b76:	b11a      	cbz	r2, 15b80 <vipm_nrf_0_send+0x10>
   15b78:	2157      	movs	r1, #87	; 0x57
   15b7a:	4809      	ldr	r0, [pc, #36]	; (15ba0 <vipm_nrf_0_send+0x30>)
   15b7c:	f004 fc53 	bl	1a426 <printk>
   15b80:	9b02      	ldr	r3, [sp, #8]
   15b82:	2b00      	cmp	r3, #0
   15b84:	dd03      	ble.n	15b8e <vipm_nrf_0_send+0x1e>
   15b86:	2157      	movs	r1, #87	; 0x57
   15b88:	4806      	ldr	r0, [pc, #24]	; (15ba4 <vipm_nrf_0_send+0x34>)
   15b8a:	f004 fc4c 	bl	1a426 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15b8e:	2201      	movs	r2, #1
   15b90:	2000      	movs	r0, #0
   15b92:	4b05      	ldr	r3, [pc, #20]	; (15ba8 <vipm_nrf_0_send+0x38>)
   15b94:	601a      	str	r2, [r3, #0]
   15b96:	bd08      	pop	{r3, pc}
   15b98:	f06f 0015 	mvn.w	r0, #21
   15b9c:	e7fb      	b.n	15b96 <vipm_nrf_0_send+0x26>
   15b9e:	bf00      	nop
   15ba0:	00022190 	.word	0x00022190
   15ba4:	000221c9 	.word	0x000221c9
   15ba8:	4002a000 	.word	0x4002a000

00015bac <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15bac:	6802      	ldr	r2, [r0, #0]
{
   15bae:	b510      	push	{r4, lr}
    switch (port)
   15bb0:	0953      	lsrs	r3, r2, #5
{
   15bb2:	4604      	mov	r4, r0
    switch (port)
   15bb4:	d029      	beq.n	15c0a <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   15bb6:	2b01      	cmp	r3, #1
   15bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15bbc:	bf18      	it	ne
   15bbe:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   15bc0:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   15bc4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15bc6:	07db      	lsls	r3, r3, #31
   15bc8:	d40a      	bmi.n	15be0 <nrf_gpio_pin_port_decode+0x34>
   15bca:	4912      	ldr	r1, [pc, #72]	; (15c14 <nrf_gpio_pin_port_decode+0x68>)
   15bcc:	4812      	ldr	r0, [pc, #72]	; (15c18 <nrf_gpio_pin_port_decode+0x6c>)
   15bce:	f240 221a 	movw	r2, #538	; 0x21a
   15bd2:	f004 fc28 	bl	1a426 <printk>
   15bd6:	f240 211a 	movw	r1, #538	; 0x21a
   15bda:	480e      	ldr	r0, [pc, #56]	; (15c14 <nrf_gpio_pin_port_decode+0x68>)
   15bdc:	f004 fec9 	bl	1a972 <assert_post_action>
    uint32_t pin_number = *p_pin;
   15be0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15be2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15be6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15be8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15bea:	d00c      	beq.n	15c06 <nrf_gpio_pin_port_decode+0x5a>
   15bec:	2b01      	cmp	r3, #1
   15bee:	d00f      	beq.n	15c10 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   15bf0:	4908      	ldr	r1, [pc, #32]	; (15c14 <nrf_gpio_pin_port_decode+0x68>)
   15bf2:	4809      	ldr	r0, [pc, #36]	; (15c18 <nrf_gpio_pin_port_decode+0x6c>)
   15bf4:	f240 221f 	movw	r2, #543	; 0x21f
   15bf8:	f004 fc15 	bl	1a426 <printk>
   15bfc:	f240 211f 	movw	r1, #543	; 0x21f
   15c00:	4804      	ldr	r0, [pc, #16]	; (15c14 <nrf_gpio_pin_port_decode+0x68>)
   15c02:	f004 feb6 	bl	1a972 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15c06:	4805      	ldr	r0, [pc, #20]	; (15c1c <nrf_gpio_pin_port_decode+0x70>)
}
   15c08:	bd10      	pop	{r4, pc}
    switch (port)
   15c0a:	f04f 33ff 	mov.w	r3, #4294967295
   15c0e:	e7d7      	b.n	15bc0 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   15c10:	4803      	ldr	r0, [pc, #12]	; (15c20 <nrf_gpio_pin_port_decode+0x74>)
   15c12:	e7f9      	b.n	15c08 <nrf_gpio_pin_port_decode+0x5c>
   15c14:	000220a8 	.word	0x000220a8
   15c18:	0001f98f 	.word	0x0001f98f
   15c1c:	40842500 	.word	0x40842500
   15c20:	40842800 	.word	0x40842800

00015c24 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15c24:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   15c26:	794b      	ldrb	r3, [r1, #5]
   15c28:	2b01      	cmp	r3, #1
   15c2a:	d02b      	beq.n	15c84 <uarte_nrfx_configure+0x60>
   15c2c:	2b03      	cmp	r3, #3
   15c2e:	d126      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15c30:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15c32:	798b      	ldrb	r3, [r1, #6]
   15c34:	2b03      	cmp	r3, #3
   15c36:	d122      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15c38:	79cd      	ldrb	r5, [r1, #7]
   15c3a:	b125      	cbz	r5, 15c46 <uarte_nrfx_configure+0x22>
   15c3c:	2d01      	cmp	r5, #1
   15c3e:	d11e      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15c40:	6843      	ldr	r3, [r0, #4]
   15c42:	791b      	ldrb	r3, [r3, #4]
   15c44:	b1db      	cbz	r3, 15c7e <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   15c46:	790a      	ldrb	r2, [r1, #4]
   15c48:	2a01      	cmp	r2, #1
   15c4a:	d01d      	beq.n	15c88 <uarte_nrfx_configure+0x64>
   15c4c:	2a02      	cmp	r2, #2
   15c4e:	d01f      	beq.n	15c90 <uarte_nrfx_configure+0x6c>
   15c50:	b9aa      	cbnz	r2, 15c7e <uarte_nrfx_configure+0x5a>
   15c52:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15c54:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   15c56:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   15c58:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15c5c:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   15c5e:	d06e      	beq.n	15d3e <uarte_nrfx_configure+0x11a>
   15c60:	d833      	bhi.n	15cca <uarte_nrfx_configure+0xa6>
   15c62:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15c66:	d06d      	beq.n	15d44 <uarte_nrfx_configure+0x120>
   15c68:	d81c      	bhi.n	15ca4 <uarte_nrfx_configure+0x80>
   15c6a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15c6e:	d06b      	beq.n	15d48 <uarte_nrfx_configure+0x124>
   15c70:	d810      	bhi.n	15c94 <uarte_nrfx_configure+0x70>
   15c72:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15c76:	d06a      	beq.n	15d4e <uarte_nrfx_configure+0x12a>
   15c78:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15c7c:	d06a      	beq.n	15d54 <uarte_nrfx_configure+0x130>
   15c7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15c82:	e05b      	b.n	15d3c <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   15c84:	2700      	movs	r7, #0
   15c86:	e7d4      	b.n	15c32 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   15c88:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15c8c:	220e      	movs	r2, #14
   15c8e:	e7e1      	b.n	15c54 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   15c90:	2400      	movs	r4, #0
   15c92:	e7fb      	b.n	15c8c <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   15c94:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15c98:	d05f      	beq.n	15d5a <uarte_nrfx_configure+0x136>
   15c9a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15c9e:	d1ee      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15ca0:	4b38      	ldr	r3, [pc, #224]	; (15d84 <uarte_nrfx_configure+0x160>)
   15ca2:	e03e      	b.n	15d22 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15ca4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15ca8:	d05a      	beq.n	15d60 <uarte_nrfx_configure+0x13c>
   15caa:	d807      	bhi.n	15cbc <uarte_nrfx_configure+0x98>
   15cac:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15cb0:	d058      	beq.n	15d64 <uarte_nrfx_configure+0x140>
   15cb2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15cb6:	d1e2      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15cb8:	4b33      	ldr	r3, [pc, #204]	; (15d88 <uarte_nrfx_configure+0x164>)
   15cba:	e032      	b.n	15d22 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15cbc:	f647 2c12 	movw	ip, #31250	; 0x7a12
   15cc0:	4563      	cmp	r3, ip
   15cc2:	d1dc      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15cc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15cc8:	e02b      	b.n	15d22 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15cca:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15cce:	d04b      	beq.n	15d68 <uarte_nrfx_configure+0x144>
   15cd0:	d813      	bhi.n	15cfa <uarte_nrfx_configure+0xd6>
   15cd2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   15cd6:	d04a      	beq.n	15d6e <uarte_nrfx_configure+0x14a>
   15cd8:	d809      	bhi.n	15cee <uarte_nrfx_configure+0xca>
   15cda:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   15cde:	4563      	cmp	r3, ip
   15ce0:	d047      	beq.n	15d72 <uarte_nrfx_configure+0x14e>
   15ce2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15ce6:	d1ca      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15ce8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15cec:	e019      	b.n	15d22 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15cee:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15cf2:	d1c4      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15cf4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15cf8:	e013      	b.n	15d22 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15cfa:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15cfe:	d03b      	beq.n	15d78 <uarte_nrfx_configure+0x154>
   15d00:	d809      	bhi.n	15d16 <uarte_nrfx_configure+0xf2>
   15d02:	f8df c088 	ldr.w	ip, [pc, #136]	; 15d8c <uarte_nrfx_configure+0x168>
   15d06:	4563      	cmp	r3, ip
   15d08:	d039      	beq.n	15d7e <uarte_nrfx_configure+0x15a>
   15d0a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15d0e:	d1b6      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15d10:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15d14:	e005      	b.n	15d22 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15d16:	f8df c078 	ldr.w	ip, [pc, #120]	; 15d90 <uarte_nrfx_configure+0x16c>
   15d1a:	4563      	cmp	r3, ip
   15d1c:	d1af      	bne.n	15c7e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15d1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15d22:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   15d26:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   15d28:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   15d2a:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   15d2c:	4322      	orrs	r2, r4
   15d2e:	3304      	adds	r3, #4
   15d30:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   15d32:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   15d36:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15d3a:	2000      	movs	r0, #0
}
   15d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15d3e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15d42:	e7ee      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15d44:	4b13      	ldr	r3, [pc, #76]	; (15d94 <uarte_nrfx_configure+0x170>)
   15d46:	e7ec      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15d48:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15d4c:	e7e9      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   15d4e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15d52:	e7e6      	b.n	15d22 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15d54:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15d58:	e7e3      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15d5a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15d5e:	e7e0      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15d60:	4b0d      	ldr	r3, [pc, #52]	; (15d98 <uarte_nrfx_configure+0x174>)
   15d62:	e7de      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15d64:	4b0d      	ldr	r3, [pc, #52]	; (15d9c <uarte_nrfx_configure+0x178>)
   15d66:	e7dc      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15d68:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15d6c:	e7d9      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   15d6e:	4b0c      	ldr	r3, [pc, #48]	; (15da0 <uarte_nrfx_configure+0x17c>)
   15d70:	e7d7      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   15d72:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15d76:	e7d4      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15d78:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15d7c:	e7d1      	b.n	15d22 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   15d7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15d82:	e7ce      	b.n	15d22 <uarte_nrfx_configure+0xfe>
   15d84:	0013b000 	.word	0x0013b000
   15d88:	004ea000 	.word	0x004ea000
   15d8c:	0003d090 	.word	0x0003d090
   15d90:	000f4240 	.word	0x000f4240
   15d94:	00275000 	.word	0x00275000
   15d98:	0075c000 	.word	0x0075c000
   15d9c:	003af000 	.word	0x003af000
   15da0:	013a9000 	.word	0x013a9000

00015da4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   15da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15da8:	4606      	mov	r6, r0
   15daa:	4688      	mov	r8, r1
	return dev->data;
   15dac:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15dae:	f007 ff5f 	bl	1dc70 <k_is_in_isr>
   15db2:	b9b8      	cbnz	r0, 15de4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   15db4:	4b28      	ldr	r3, [pc, #160]	; (15e58 <uarte_nrfx_poll_out+0xb4>)
   15db6:	781b      	ldrb	r3, [r3, #0]
   15db8:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   15dbc:	6872      	ldr	r2, [r6, #4]
   15dbe:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   15dc0:	b193      	cbz	r3, 15de8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   15dc2:	f04f 0320 	mov.w	r3, #32
   15dc6:	f3ef 8411 	mrs	r4, BASEPRI
   15dca:	f383 8811 	msr	BASEPRI, r3
   15dce:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   15dd2:	6870      	ldr	r0, [r6, #4]
   15dd4:	f007 fa01 	bl	1d1da <is_tx_ready.isra.0>
   15dd8:	bb38      	cbnz	r0, 15e2a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   15dda:	f384 8811 	msr	BASEPRI, r4
   15dde:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   15de2:	e7ee      	b.n	15dc2 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15de4:	2301      	movs	r3, #1
   15de6:	e7e9      	b.n	15dbc <uarte_nrfx_poll_out+0x18>
   15de8:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   15dea:	6870      	ldr	r0, [r6, #4]
   15dec:	f007 f9f5 	bl	1d1da <is_tx_ready.isra.0>
   15df0:	b970      	cbnz	r0, 15e10 <uarte_nrfx_poll_out+0x6c>
   15df2:	2001      	movs	r0, #1
   15df4:	f007 fa91 	bl	1d31a <nrfx_busy_wait>
   15df8:	3c01      	subs	r4, #1
   15dfa:	d1f6      	bne.n	15dea <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   15dfc:	2100      	movs	r1, #0
   15dfe:	2021      	movs	r0, #33	; 0x21
   15e00:	f003 f906 	bl	19010 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15e04:	e7f0      	b.n	15de8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   15e06:	f384 8811 	msr	BASEPRI, r4
   15e0a:	f3bf 8f6f 	isb	sy
}
   15e0e:	e7f5      	b.n	15dfc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   15e10:	f04f 0320 	mov.w	r3, #32
   15e14:	f3ef 8411 	mrs	r4, BASEPRI
   15e18:	f383 8811 	msr	BASEPRI, r3
   15e1c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   15e20:	6870      	ldr	r0, [r6, #4]
   15e22:	f007 f9da 	bl	1d1da <is_tx_ready.isra.0>
   15e26:	2800      	cmp	r0, #0
   15e28:	d0ed      	beq.n	15e06 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   15e2a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e2c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   15e2e:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15e32:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15e36:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e3a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   15e3e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   15e42:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   15e46:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e4a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   15e4c:	f384 8811 	msr	BASEPRI, r4
   15e50:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   15e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e58:	2000c7ee 	.word	0x2000c7ee

00015e5c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e60:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15e62:	f04f 0800 	mov.w	r8, #0
   15e66:	f04f 0914 	mov.w	r9, #20
   15e6a:	2200      	movs	r2, #0
   15e6c:	2101      	movs	r1, #1
   15e6e:	2008      	movs	r0, #8
   15e70:	f7f7 fcbe 	bl	d7f0 <z_arm_irq_priority_set>
   15e74:	2008      	movs	r0, #8
   15e76:	f7f7 fc9d 	bl	d7b4 <arch_irq_enable>
	return config->uarte_regs;
   15e7a:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   15e7c:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   15e7e:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15e80:	2701      	movs	r7, #1
   15e82:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15e86:	a801      	add	r0, sp, #4
	data->dev = dev;
   15e88:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   15e8a:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15e8e:	f7ff fe8d 	bl	15bac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15e92:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15e94:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15e98:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   15e9c:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15e9e:	a801      	add	r0, sp, #4
   15ea0:	f8cd 9004 	str.w	r9, [sp, #4]
   15ea4:	f7ff fe82 	bl	15bac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15ea8:	f04f 0b16 	mov.w	fp, #22
   15eac:	9b01      	ldr	r3, [sp, #4]
   15eae:	3380      	adds	r3, #128	; 0x80
   15eb0:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15eb4:	a801      	add	r0, sp, #4
   15eb6:	f8cd b004 	str.w	fp, [sp, #4]
   15eba:	f7ff fe77 	bl	15bac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15ebe:	9b01      	ldr	r3, [sp, #4]
   15ec0:	3380      	adds	r3, #128	; 0x80
   15ec2:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   15ec6:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15eca:	f04f 0915 	mov.w	r9, #21
   15ece:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ed2:	a801      	add	r0, sp, #4
   15ed4:	f8cd 9004 	str.w	r9, [sp, #4]
   15ed8:	f7ff fe68 	bl	15bac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15edc:	9b01      	ldr	r3, [sp, #4]
   15ede:	3380      	adds	r3, #128	; 0x80
   15ee0:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   15ee4:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ee8:	a801      	add	r0, sp, #4
   15eea:	f8cd 8004 	str.w	r8, [sp, #4]
   15eee:	f7ff fe5d 	bl	15bac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15ef2:	9b01      	ldr	r3, [sp, #4]
   15ef4:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   15ef6:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ef8:	a801      	add	r0, sp, #4
   15efa:	f8cd 8004 	str.w	r8, [sp, #4]
   15efe:	f7ff fe55 	bl	15bac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15f02:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15f04:	68e9      	ldr	r1, [r5, #12]
   15f06:	3380      	adds	r3, #128	; 0x80
   15f08:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   15f0c:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   15f0e:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   15f12:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   15f14:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   15f18:	f7ff fe84 	bl	15c24 <uarte_nrfx_configure>
	if (err) {
   15f1c:	4607      	mov	r7, r0
   15f1e:	b980      	cbnz	r0, 15f42 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   15f20:	686b      	ldr	r3, [r5, #4]
   15f22:	799b      	ldrb	r3, [r3, #6]
   15f24:	2b00      	cmp	r3, #0
   15f26:	d03a      	beq.n	15f9e <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   15f28:	eb06 000b 	add.w	r0, r6, fp
   15f2c:	f000 fddc 	bl	16ae8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   15f30:	4b2b      	ldr	r3, [pc, #172]	; (15fe0 <uarte_0_init+0x184>)
   15f32:	4298      	cmp	r0, r3
   15f34:	d009      	beq.n	15f4a <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   15f36:	2145      	movs	r1, #69	; 0x45
   15f38:	482a      	ldr	r0, [pc, #168]	; (15fe4 <uarte_0_init+0x188>)
   15f3a:	f004 fa74 	bl	1a426 <printk>
		return -EIO;
   15f3e:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   15f42:	4638      	mov	r0, r7
   15f44:	b003      	add	sp, #12
   15f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   15f4a:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   15f4e:	f896 8016 	ldrb.w	r8, [r6, #22]
   15f52:	d10a      	bne.n	15f6a <uarte_0_init+0x10e>
   15f54:	4924      	ldr	r1, [pc, #144]	; (15fe8 <uarte_0_init+0x18c>)
   15f56:	4825      	ldr	r0, [pc, #148]	; (15fec <uarte_0_init+0x190>)
   15f58:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   15f5c:	f004 fa63 	bl	1a426 <printk>
   15f60:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   15f64:	4820      	ldr	r0, [pc, #128]	; (15fe8 <uarte_0_init+0x18c>)
   15f66:	f004 fd04 	bl	1a972 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15f6a:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   15f6e:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15f72:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   15f76:	d10a      	bne.n	15f8e <uarte_0_init+0x132>
   15f78:	491b      	ldr	r1, [pc, #108]	; (15fe8 <uarte_0_init+0x18c>)
   15f7a:	481c      	ldr	r0, [pc, #112]	; (15fec <uarte_0_init+0x190>)
   15f7c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   15f80:	f004 fa51 	bl	1a426 <printk>
   15f84:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   15f88:	4817      	ldr	r0, [pc, #92]	; (15fe8 <uarte_0_init+0x18c>)
   15f8a:	f004 fcf2 	bl	1a972 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   15f8e:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15f90:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   15f94:	7db2      	ldrb	r2, [r6, #22]
   15f96:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   15f98:	4a15      	ldr	r2, [pc, #84]	; (15ff0 <uarte_0_init+0x194>)
   15f9a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15f9e:	2308      	movs	r3, #8
   15fa0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fa4:	2300      	movs	r3, #0
   15fa6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   15faa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   15fae:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15fb2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15fb6:	2301      	movs	r3, #1
   15fb8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15fbc:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   15fbe:	686b      	ldr	r3, [r5, #4]
   15fc0:	799b      	ldrb	r3, [r3, #6]
   15fc2:	b91b      	cbnz	r3, 15fcc <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   15fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
   15fc8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   15fcc:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   15fce:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15fd0:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15fd4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15fd8:	2301      	movs	r3, #1
   15fda:	60a3      	str	r3, [r4, #8]
   15fdc:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   15fde:	e7b0      	b.n	15f42 <uarte_0_init+0xe6>
   15fe0:	0bad0000 	.word	0x0bad0000
   15fe4:	0002220c 	.word	0x0002220c
   15fe8:	00022230 	.word	0x00022230
   15fec:	0001f98f 	.word	0x0001f98f
   15ff0:	40017000 	.word	0x40017000

00015ff4 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   15ff4:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   15ff8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   15ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   16000:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   16004:	4605      	mov	r5, r0
   16006:	460e      	mov	r6, r1
   16008:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   1600a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1600e:	d14f      	bne.n	160b0 <z_impl_gpio_pin_interrupt_configure+0xbc>
   16010:	492d      	ldr	r1, [pc, #180]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16012:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   16016:	482d      	ldr	r0, [pc, #180]	; (160cc <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16018:	f004 fa05 	bl	1a426 <printk>
   1601c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   16020:	4829      	ldr	r0, [pc, #164]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16022:	f004 fca6 	bl	1a972 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   16026:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1602a:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   1602e:	d10a      	bne.n	16046 <z_impl_gpio_pin_interrupt_configure+0x52>
   16030:	4925      	ldr	r1, [pc, #148]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16032:	4826      	ldr	r0, [pc, #152]	; (160cc <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16034:	f240 12f1 	movw	r2, #497	; 0x1f1
   16038:	f004 f9f5 	bl	1a426 <printk>
   1603c:	f240 11f1 	movw	r1, #497	; 0x1f1
   16040:	4821      	ldr	r0, [pc, #132]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16042:	f004 fc96 	bl	1a972 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   16046:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1604a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1604e:	d10a      	bne.n	16066 <z_impl_gpio_pin_interrupt_configure+0x72>
   16050:	491d      	ldr	r1, [pc, #116]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16052:	481e      	ldr	r0, [pc, #120]	; (160cc <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16054:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   16058:	f004 f9e5 	bl	1a426 <printk>
   1605c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   16060:	4819      	ldr	r0, [pc, #100]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16062:	f004 fc86 	bl	1a972 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16066:	2701      	movs	r7, #1
   16068:	f8da 3000 	ldr.w	r3, [sl]
   1606c:	40b7      	lsls	r7, r6
   1606e:	421f      	tst	r7, r3
   16070:	d10a      	bne.n	16088 <z_impl_gpio_pin_interrupt_configure+0x94>
   16072:	4915      	ldr	r1, [pc, #84]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16074:	4815      	ldr	r0, [pc, #84]	; (160cc <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16076:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   1607a:	f004 f9d4 	bl	1a426 <printk>
   1607e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   16082:	4811      	ldr	r0, [pc, #68]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16084:	f004 fc75 	bl	1a972 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   16088:	0423      	lsls	r3, r4, #16
   1608a:	d505      	bpl.n	16098 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1608c:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   16090:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   16092:	bf18      	it	ne
   16094:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   16098:	f8d8 7018 	ldr.w	r7, [r8, #24]
   1609c:	4631      	mov	r1, r6
   1609e:	4628      	mov	r0, r5
   160a0:	46bc      	mov	ip, r7
   160a2:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   160a6:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   160aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   160ae:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   160b0:	2b00      	cmp	r3, #0
   160b2:	d1b8      	bne.n	16026 <z_impl_gpio_pin_interrupt_configure+0x32>
   160b4:	4904      	ldr	r1, [pc, #16]	; (160c8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   160b6:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   160ba:	4804      	ldr	r0, [pc, #16]	; (160cc <z_impl_gpio_pin_interrupt_configure+0xd8>)
   160bc:	f004 f9b3 	bl	1a426 <printk>
   160c0:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   160c4:	e7ac      	b.n	16020 <z_impl_gpio_pin_interrupt_configure+0x2c>
   160c6:	bf00      	nop
   160c8:	0002227f 	.word	0x0002227f
   160cc:	0001f98f 	.word	0x0001f98f

000160d0 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   160d0:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   160d2:	2501      	movs	r5, #1
   160d4:	6843      	ldr	r3, [r0, #4]
   160d6:	408d      	lsls	r5, r1
   160d8:	681b      	ldr	r3, [r3, #0]
{
   160da:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   160dc:	421d      	tst	r5, r3
{
   160de:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   160e0:	d10a      	bne.n	160f8 <gpio_pin_set_raw+0x28>
   160e2:	490b      	ldr	r1, [pc, #44]	; (16110 <gpio_pin_set_raw+0x40>)
   160e4:	480b      	ldr	r0, [pc, #44]	; (16114 <gpio_pin_set_raw+0x44>)
   160e6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   160ea:	f004 f99c 	bl	1a426 <printk>
   160ee:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   160f2:	4807      	ldr	r0, [pc, #28]	; (16110 <gpio_pin_set_raw+0x40>)
   160f4:	f004 fc3d 	bl	1a972 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   160f8:	b136      	cbz	r6, 16108 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   160fa:	68a3      	ldr	r3, [r4, #8]
   160fc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   160fe:	4629      	mov	r1, r5
   16100:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   16102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   16106:	4718      	bx	r3
   16108:	68a3      	ldr	r3, [r4, #8]
   1610a:	691b      	ldr	r3, [r3, #16]
   1610c:	e7f7      	b.n	160fe <gpio_pin_set_raw+0x2e>
   1610e:	bf00      	nop
   16110:	0002227f 	.word	0x0002227f
   16114:	0001f98f 	.word	0x0001f98f

00016118 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   16118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1611c:	4606      	mov	r6, r0
   1611e:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16120:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   16122:	f8df 8044 	ldr.w	r8, [pc, #68]	; 16168 <dk_set_leds_state.part.0+0x50>
   16126:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1616c <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1612a:	fa26 f204 	lsr.w	r2, r6, r4
   1612e:	fa27 f304 	lsr.w	r3, r7, r4
   16132:	4313      	orrs	r3, r2
   16134:	07db      	lsls	r3, r3, #31
   16136:	d512      	bpl.n	1615e <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   16138:	43d2      	mvns	r2, r2
   1613a:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1613e:	7919      	ldrb	r1, [r3, #4]
   16140:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   16144:	f002 0201 	and.w	r2, r2, #1
   16148:	f7ff ffc2 	bl	160d0 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   1614c:	4605      	mov	r5, r0
   1614e:	b130      	cbz	r0, 1615e <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   16150:	2145      	movs	r1, #69	; 0x45
   16152:	4807      	ldr	r0, [pc, #28]	; (16170 <dk_set_leds_state.part.0+0x58>)
   16154:	f004 f967 	bl	1a426 <printk>
			}
		}
	}

	return 0;
}
   16158:	4628      	mov	r0, r5
   1615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1615e:	3401      	adds	r4, #1
   16160:	2c04      	cmp	r4, #4
   16162:	d1e2      	bne.n	1612a <dk_set_leds_state.part.0+0x12>
	return 0;
   16164:	2500      	movs	r5, #0
   16166:	e7f7      	b.n	16158 <dk_set_leds_state.part.0+0x40>
   16168:	0001ec44 	.word	0x0001ec44
   1616c:	2000af0c 	.word	0x2000af0c
   16170:	000222a9 	.word	0x000222a9

00016174 <buttons_scan_fn>:
{
   16174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   16178:	2400      	movs	r4, #0
   1617a:	4e6c      	ldr	r6, [pc, #432]	; (1632c <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1617c:	4625      	mov	r5, r4
{
   1617e:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   16180:	4f6b      	ldr	r7, [pc, #428]	; (16330 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16182:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 16334 <buttons_scan_fn+0x1c0>
   16186:	f04f 0801 	mov.w	r8, #1
   1618a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   1618e:	791b      	ldrb	r3, [r3, #4]
   16190:	f859 bb04 	ldr.w	fp, [r9], #4
   16194:	fa08 f803 	lsl.w	r8, r8, r3
   16198:	f8db 3004 	ldr.w	r3, [fp, #4]
   1619c:	681b      	ldr	r3, [r3, #0]
   1619e:	ea18 0f03 	tst.w	r8, r3
   161a2:	d10a      	bne.n	161ba <buttons_scan_fn+0x46>
   161a4:	4651      	mov	r1, sl
   161a6:	4864      	ldr	r0, [pc, #400]	; (16338 <buttons_scan_fn+0x1c4>)
   161a8:	f44f 725e 	mov.w	r2, #888	; 0x378
   161ac:	f004 f93b 	bl	1a426 <printk>
   161b0:	f44f 715e 	mov.w	r1, #888	; 0x378
   161b4:	4650      	mov	r0, sl
   161b6:	f004 fbdc 	bl	1a972 <assert_post_action>
	return api->port_get_raw(port, value);
   161ba:	f8db 3008 	ldr.w	r3, [fp, #8]
   161be:	4658      	mov	r0, fp
   161c0:	685b      	ldr	r3, [r3, #4]
   161c2:	a901      	add	r1, sp, #4
   161c4:	4798      	blx	r3
	if (ret == 0) {
   161c6:	2800      	cmp	r0, #0
   161c8:	d16b      	bne.n	162a2 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   161ca:	9b01      	ldr	r3, [sp, #4]
   161cc:	ea18 0f03 	tst.w	r8, r3
   161d0:	d003      	beq.n	161da <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   161d2:	3501      	adds	r5, #1
   161d4:	2d04      	cmp	r5, #4
   161d6:	d1d6      	bne.n	16186 <buttons_scan_fn+0x12>
   161d8:	e069      	b.n	162ae <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   161da:	2301      	movs	r3, #1
   161dc:	40ab      	lsls	r3, r5
   161de:	431c      	orrs	r4, r3
   161e0:	e7f7      	b.n	161d2 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   161e2:	3d04      	subs	r5, #4
   161e4:	2d00      	cmp	r5, #0
   161e6:	f000 8087 	beq.w	162f8 <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   161ea:	46aa      	mov	sl, r5
   161ec:	f85a 3b04 	ldr.w	r3, [sl], #4
   161f0:	4641      	mov	r1, r8
   161f2:	4620      	mov	r0, r4
   161f4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   161f6:	f1ba 0f00 	cmp.w	sl, #0
   161fa:	d07d      	beq.n	162f8 <buttons_scan_fn+0x184>
	return node->next;
   161fc:	686d      	ldr	r5, [r5, #4]
   161fe:	e078      	b.n	162f2 <buttons_scan_fn+0x17e>
		initial_run = false;
   16200:	2200      	movs	r2, #0
   16202:	701a      	strb	r2, [r3, #0]
   16204:	e07b      	b.n	162fe <buttons_scan_fn+0x18a>
	__asm__ volatile(
   16206:	f04f 0320 	mov.w	r3, #32
   1620a:	f3ef 8811 	mrs	r8, BASEPRI
   1620e:	f383 8811 	msr	BASEPRI, r3
   16212:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16216:	4849      	ldr	r0, [pc, #292]	; (1633c <buttons_scan_fn+0x1c8>)
   16218:	f003 f91c 	bl	19454 <z_spin_lock_valid>
   1621c:	b940      	cbnz	r0, 16230 <buttons_scan_fn+0xbc>
   1621e:	4948      	ldr	r1, [pc, #288]	; (16340 <buttons_scan_fn+0x1cc>)
   16220:	4845      	ldr	r0, [pc, #276]	; (16338 <buttons_scan_fn+0x1c4>)
   16222:	227c      	movs	r2, #124	; 0x7c
   16224:	f004 f8ff 	bl	1a426 <printk>
   16228:	217c      	movs	r1, #124	; 0x7c
   1622a:	4845      	ldr	r0, [pc, #276]	; (16340 <buttons_scan_fn+0x1cc>)
   1622c:	f004 fba1 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   16230:	4842      	ldr	r0, [pc, #264]	; (1633c <buttons_scan_fn+0x1c8>)
   16232:	f003 f92b 	bl	1948c <z_spin_lock_set_owner>
		switch (state) {
   16236:	4b43      	ldr	r3, [pc, #268]	; (16344 <buttons_scan_fn+0x1d0>)
   16238:	781a      	ldrb	r2, [r3, #0]
   1623a:	2a01      	cmp	r2, #1
   1623c:	d126      	bne.n	1628c <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   1623e:	2200      	movs	r2, #0
   16240:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   16242:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   16246:	f856 0b04 	ldr.w	r0, [r6], #4
   1624a:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1624c:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   16250:	f7ff fed0 	bl	15ff4 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16254:	3401      	adds	r4, #1
   16256:	2c04      	cmp	r4, #4
   16258:	4605      	mov	r5, r0
   1625a:	d001      	beq.n	16260 <buttons_scan_fn+0xec>
   1625c:	2800      	cmp	r0, #0
   1625e:	d0f0      	beq.n	16242 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16260:	4836      	ldr	r0, [pc, #216]	; (1633c <buttons_scan_fn+0x1c8>)
   16262:	f003 f905 	bl	19470 <z_spin_unlock_valid>
   16266:	b940      	cbnz	r0, 1627a <buttons_scan_fn+0x106>
   16268:	4935      	ldr	r1, [pc, #212]	; (16340 <buttons_scan_fn+0x1cc>)
   1626a:	4833      	ldr	r0, [pc, #204]	; (16338 <buttons_scan_fn+0x1c4>)
   1626c:	22a7      	movs	r2, #167	; 0xa7
   1626e:	f004 f8da 	bl	1a426 <printk>
   16272:	21a7      	movs	r1, #167	; 0xa7
   16274:	4832      	ldr	r0, [pc, #200]	; (16340 <buttons_scan_fn+0x1cc>)
   16276:	f004 fb7c 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1627a:	f388 8811 	msr	BASEPRI, r8
   1627e:	f3bf 8f6f 	isb	sy
		if (err) {
   16282:	2d00      	cmp	r5, #0
   16284:	d04f      	beq.n	16326 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   16286:	2145      	movs	r1, #69	; 0x45
   16288:	482f      	ldr	r0, [pc, #188]	; (16348 <buttons_scan_fn+0x1d4>)
   1628a:	e047      	b.n	1631c <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   1628c:	22b4      	movs	r2, #180	; 0xb4
   1628e:	492f      	ldr	r1, [pc, #188]	; (1634c <buttons_scan_fn+0x1d8>)
   16290:	4829      	ldr	r0, [pc, #164]	; (16338 <buttons_scan_fn+0x1c4>)
   16292:	f004 f8c8 	bl	1a426 <printk>
   16296:	21b4      	movs	r1, #180	; 0xb4
   16298:	482c      	ldr	r0, [pc, #176]	; (1634c <buttons_scan_fn+0x1d8>)
   1629a:	f004 fb6a 	bl	1a972 <assert_post_action>
		int err = 0;
   1629e:	2500      	movs	r5, #0
			break;
   162a0:	e7de      	b.n	16260 <buttons_scan_fn+0xec>
		if (val < 0) {
   162a2:	da96      	bge.n	161d2 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   162a4:	2145      	movs	r1, #69	; 0x45
   162a6:	482a      	ldr	r0, [pc, #168]	; (16350 <buttons_scan_fn+0x1dc>)
   162a8:	f004 f8bd 	bl	1a426 <printk>
			return 0;
   162ac:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   162ae:	4b29      	ldr	r3, [pc, #164]	; (16354 <buttons_scan_fn+0x1e0>)
   162b0:	e8d3 2fef 	ldaex	r2, [r3]
   162b4:	e8c3 4fe1 	stlex	r1, r4, [r3]
   162b8:	2900      	cmp	r1, #0
   162ba:	d1f9      	bne.n	162b0 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   162bc:	4b26      	ldr	r3, [pc, #152]	; (16358 <buttons_scan_fn+0x1e4>)
   162be:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1635c <buttons_scan_fn+0x1e8>
   162c2:	781a      	ldrb	r2, [r3, #0]
   162c4:	2a00      	cmp	r2, #0
   162c6:	d19b      	bne.n	16200 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   162c8:	f8d9 3000 	ldr.w	r3, [r9]
   162cc:	42a3      	cmp	r3, r4
   162ce:	d016      	beq.n	162fe <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   162d0:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   162d4:	4b22      	ldr	r3, [pc, #136]	; (16360 <buttons_scan_fn+0x1ec>)
   162d6:	681b      	ldr	r3, [r3, #0]
   162d8:	b113      	cbz	r3, 162e0 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   162da:	4641      	mov	r1, r8
   162dc:	4620      	mov	r0, r4
   162de:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   162e0:	f04f 33ff 	mov.w	r3, #4294967295
   162e4:	f04f 32ff 	mov.w	r2, #4294967295
   162e8:	481e      	ldr	r0, [pc, #120]	; (16364 <buttons_scan_fn+0x1f0>)
   162ea:	f001 fc13 	bl	17b14 <z_impl_k_mutex_lock>
	return list->head;
   162ee:	4b1e      	ldr	r3, [pc, #120]	; (16368 <buttons_scan_fn+0x1f4>)
   162f0:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   162f2:	2d00      	cmp	r5, #0
   162f4:	f47f af75 	bne.w	161e2 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   162f8:	481a      	ldr	r0, [pc, #104]	; (16364 <buttons_scan_fn+0x1f0>)
   162fa:	f001 fcd7 	bl	17cac <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   162fe:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   16302:	2c00      	cmp	r4, #0
   16304:	f43f af7f 	beq.w	16206 <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16308:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1630c:	2300      	movs	r3, #0
   1630e:	4917      	ldr	r1, [pc, #92]	; (1636c <buttons_scan_fn+0x1f8>)
   16310:	4817      	ldr	r0, [pc, #92]	; (16370 <buttons_scan_fn+0x1fc>)
   16312:	f003 f915 	bl	19540 <k_delayed_work_submit_to_queue>
		if (err) {
   16316:	b130      	cbz	r0, 16326 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   16318:	2145      	movs	r1, #69	; 0x45
   1631a:	4816      	ldr	r0, [pc, #88]	; (16374 <buttons_scan_fn+0x200>)
}
   1631c:	b003      	add	sp, #12
   1631e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   16322:	f004 b880 	b.w	1a426 <printk>
}
   16326:	b003      	add	sp, #12
   16328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1632c:	2000aec8 	.word	0x2000aec8
   16330:	0001ec24 	.word	0x0001ec24
   16334:	0002227f 	.word	0x0002227f
   16338:	0001f98f 	.word	0x0001f98f
   1633c:	2000af1c 	.word	0x2000af1c
   16340:	0001f9c9 	.word	0x0001f9c9
   16344:	2000c7ed 	.word	0x2000c7ed
   16348:	0002233e 	.word	0x0002233e
   1634c:	00022300 	.word	0x00022300
   16350:	000222c4 	.word	0x000222c4
   16354:	2000af20 	.word	0x2000af20
   16358:	20008581 	.word	0x20008581
   1635c:	2000af04 	.word	0x2000af04
   16360:	2000aed8 	.word	0x2000aed8
   16364:	2000aedc 	.word	0x2000aedc
   16368:	2000aef0 	.word	0x2000aef0
   1636c:	2000a408 	.word	0x2000a408
   16370:	2000a558 	.word	0x2000a558
   16374:	000222de 	.word	0x000222de

00016378 <button_pressed>:
{
   16378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1637a:	f04f 0320 	mov.w	r3, #32
   1637e:	f3ef 8611 	mrs	r6, BASEPRI
   16382:	f383 8811 	msr	BASEPRI, r3
   16386:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1638a:	4827      	ldr	r0, [pc, #156]	; (16428 <button_pressed+0xb0>)
   1638c:	f003 f862 	bl	19454 <z_spin_lock_valid>
   16390:	b940      	cbnz	r0, 163a4 <button_pressed+0x2c>
   16392:	4926      	ldr	r1, [pc, #152]	; (1642c <button_pressed+0xb4>)
   16394:	4826      	ldr	r0, [pc, #152]	; (16430 <button_pressed+0xb8>)
   16396:	227c      	movs	r2, #124	; 0x7c
   16398:	f004 f845 	bl	1a426 <printk>
   1639c:	217c      	movs	r1, #124	; 0x7c
   1639e:	4823      	ldr	r0, [pc, #140]	; (1642c <button_pressed+0xb4>)
   163a0:	f004 fae7 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   163a4:	4820      	ldr	r0, [pc, #128]	; (16428 <button_pressed+0xb0>)
   163a6:	f003 f871 	bl	1948c <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   163aa:	2400      	movs	r4, #0
   163ac:	4d21      	ldr	r5, [pc, #132]	; (16434 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   163ae:	4f22      	ldr	r7, [pc, #136]	; (16438 <button_pressed+0xc0>)
   163b0:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   163b4:	f855 0b04 	ldr.w	r0, [r5], #4
   163b8:	7919      	ldrb	r1, [r3, #4]
   163ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   163be:	3401      	adds	r4, #1
   163c0:	f7ff fe18 	bl	15ff4 <z_impl_gpio_pin_interrupt_configure>
   163c4:	2c04      	cmp	r4, #4
   163c6:	d006      	beq.n	163d6 <button_pressed+0x5e>
   163c8:	2800      	cmp	r0, #0
   163ca:	d0f1      	beq.n	163b0 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   163cc:	2145      	movs	r1, #69	; 0x45
   163ce:	481b      	ldr	r0, [pc, #108]	; (1643c <button_pressed+0xc4>)
   163d0:	f004 f829 	bl	1a426 <printk>
   163d4:	e001      	b.n	163da <button_pressed+0x62>
	if (err) {
   163d6:	2800      	cmp	r0, #0
   163d8:	d1f8      	bne.n	163cc <button_pressed+0x54>
	switch (state) {
   163da:	4b19      	ldr	r3, [pc, #100]	; (16440 <button_pressed+0xc8>)
   163dc:	781a      	ldrb	r2, [r3, #0]
   163de:	b9ca      	cbnz	r2, 16414 <button_pressed+0x9c>
		state = STATE_SCANNING;
   163e0:	2201      	movs	r2, #1
   163e2:	4918      	ldr	r1, [pc, #96]	; (16444 <button_pressed+0xcc>)
   163e4:	701a      	strb	r2, [r3, #0]
   163e6:	4818      	ldr	r0, [pc, #96]	; (16448 <button_pressed+0xd0>)
   163e8:	2221      	movs	r2, #33	; 0x21
   163ea:	2300      	movs	r3, #0
   163ec:	f003 f8a8 	bl	19540 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   163f0:	480d      	ldr	r0, [pc, #52]	; (16428 <button_pressed+0xb0>)
   163f2:	f003 f83d 	bl	19470 <z_spin_unlock_valid>
   163f6:	b940      	cbnz	r0, 1640a <button_pressed+0x92>
   163f8:	490c      	ldr	r1, [pc, #48]	; (1642c <button_pressed+0xb4>)
   163fa:	480d      	ldr	r0, [pc, #52]	; (16430 <button_pressed+0xb8>)
   163fc:	22a7      	movs	r2, #167	; 0xa7
   163fe:	f004 f812 	bl	1a426 <printk>
   16402:	21a7      	movs	r1, #167	; 0xa7
   16404:	4809      	ldr	r0, [pc, #36]	; (1642c <button_pressed+0xb4>)
   16406:	f004 fab4 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1640a:	f386 8811 	msr	BASEPRI, r6
   1640e:	f3bf 8f6f 	isb	sy
}
   16412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   16414:	22eb      	movs	r2, #235	; 0xeb
   16416:	490d      	ldr	r1, [pc, #52]	; (1644c <button_pressed+0xd4>)
   16418:	4805      	ldr	r0, [pc, #20]	; (16430 <button_pressed+0xb8>)
   1641a:	f004 f804 	bl	1a426 <printk>
   1641e:	21eb      	movs	r1, #235	; 0xeb
   16420:	480a      	ldr	r0, [pc, #40]	; (1644c <button_pressed+0xd4>)
   16422:	f004 faa6 	bl	1a972 <assert_post_action>
		break;
   16426:	e7e3      	b.n	163f0 <button_pressed+0x78>
   16428:	2000af1c 	.word	0x2000af1c
   1642c:	0001f9c9 	.word	0x0001f9c9
   16430:	0001f98f 	.word	0x0001f98f
   16434:	2000aec8 	.word	0x2000aec8
   16438:	0001ec24 	.word	0x0001ec24
   1643c:	0002235b 	.word	0x0002235b
   16440:	2000c7ed 	.word	0x2000c7ed
   16444:	2000a408 	.word	0x2000a408
   16448:	2000a558 	.word	0x2000a558
   1644c:	00022300 	.word	0x00022300

00016450 <dk_leds_init>:
{
   16450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16454:	2600      	movs	r6, #0
   16456:	4d23      	ldr	r5, [pc, #140]	; (164e4 <dk_leds_init+0x94>)
   16458:	f8df 908c 	ldr.w	r9, [pc, #140]	; 164e8 <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1645c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 164ec <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   16460:	6828      	ldr	r0, [r5, #0]
   16462:	f001 f835 	bl	174d0 <z_impl_device_get_binding>
   16466:	4604      	mov	r4, r0
   16468:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   1646c:	b940      	cbnz	r0, 16480 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   1646e:	2145      	movs	r1, #69	; 0x45
   16470:	481f      	ldr	r0, [pc, #124]	; (164f0 <dk_leds_init+0xa0>)
   16472:	f003 ffd8 	bl	1a426 <printk>
			return -ENODEV;
   16476:	f06f 0412 	mvn.w	r4, #18
}
   1647a:	4620      	mov	r0, r4
   1647c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16480:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   16482:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   16486:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16488:	fa03 f80b 	lsl.w	r8, r3, fp
   1648c:	6843      	ldr	r3, [r0, #4]
   1648e:	681b      	ldr	r3, [r3, #0]
   16490:	ea18 0f03 	tst.w	r8, r3
   16494:	d10a      	bne.n	164ac <dk_leds_init+0x5c>
   16496:	4651      	mov	r1, sl
   16498:	4816      	ldr	r0, [pc, #88]	; (164f4 <dk_leds_init+0xa4>)
   1649a:	f44f 7211 	mov.w	r2, #580	; 0x244
   1649e:	f003 ffc2 	bl	1a426 <printk>
   164a2:	f44f 7111 	mov.w	r1, #580	; 0x244
   164a6:	4650      	mov	r0, sl
   164a8:	f004 fa63 	bl	1a972 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   164ac:	68a3      	ldr	r3, [r4, #8]
   164ae:	4620      	mov	r0, r4
   164b0:	f44f 7200 	mov.w	r2, #512	; 0x200
   164b4:	4659      	mov	r1, fp
   164b6:	681b      	ldr	r3, [r3, #0]
   164b8:	4798      	blx	r3
	if (ret != 0) {
   164ba:	4604      	mov	r4, r0
   164bc:	b968      	cbnz	r0, 164da <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   164be:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   164c0:	3601      	adds	r6, #1
   164c2:	ea23 0308 	bic.w	r3, r3, r8
   164c6:	2e04      	cmp	r6, #4
   164c8:	603b      	str	r3, [r7, #0]
   164ca:	f105 0508 	add.w	r5, r5, #8
   164ce:	d1c7      	bne.n	16460 <dk_leds_init+0x10>
}
   164d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164d4:	210f      	movs	r1, #15
   164d6:	f7ff be1f 	b.w	16118 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   164da:	2145      	movs	r1, #69	; 0x45
   164dc:	4806      	ldr	r0, [pc, #24]	; (164f8 <dk_leds_init+0xa8>)
   164de:	f003 ffa2 	bl	1a426 <printk>
			return err;
   164e2:	e7ca      	b.n	1647a <dk_leds_init+0x2a>
   164e4:	0001ec44 	.word	0x0001ec44
   164e8:	2000af0c 	.word	0x2000af0c
   164ec:	0002227f 	.word	0x0002227f
   164f0:	00022379 	.word	0x00022379
   164f4:	0001f98f 	.word	0x0001f98f
   164f8:	00022396 	.word	0x00022396

000164fc <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   164fc:	4b05      	ldr	r3, [pc, #20]	; (16514 <dk_read_buttons+0x18>)
   164fe:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   16502:	b100      	cbz	r0, 16506 <dk_read_buttons+0xa>
		*button_state = current_state;
   16504:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   16506:	4804      	ldr	r0, [pc, #16]	; (16518 <dk_read_buttons+0x1c>)
   16508:	b111      	cbz	r1, 16510 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1650a:	6802      	ldr	r2, [r0, #0]
   1650c:	405a      	eors	r2, r3
   1650e:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   16510:	6003      	str	r3, [r0, #0]
}
   16512:	4770      	bx	lr
   16514:	2000af20 	.word	0x2000af20
   16518:	2000af08 	.word	0x2000af08

0001651c <dk_buttons_init>:
	button_handler_cb = button_handler;
   1651c:	4b4f      	ldr	r3, [pc, #316]	; (1665c <dk_buttons_init+0x140>)
{
   1651e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   16522:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   16524:	4e4e      	ldr	r6, [pc, #312]	; (16660 <dk_buttons_init+0x144>)
   16526:	484f      	ldr	r0, [pc, #316]	; (16664 <dk_buttons_init+0x148>)
   16528:	f007 fb1a 	bl	1db60 <z_impl_k_mutex_init>
   1652c:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1652e:	2700      	movs	r7, #0
   16530:	4d4d      	ldr	r5, [pc, #308]	; (16668 <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16532:	f8df a138 	ldr.w	sl, [pc, #312]	; 1666c <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   16536:	6828      	ldr	r0, [r5, #0]
   16538:	f000 ffca 	bl	174d0 <z_impl_device_get_binding>
   1653c:	4604      	mov	r4, r0
   1653e:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   16542:	b948      	cbnz	r0, 16558 <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   16544:	2145      	movs	r1, #69	; 0x45
   16546:	484a      	ldr	r0, [pc, #296]	; (16670 <dk_buttons_init+0x154>)
   16548:	f003 ff6d 	bl	1a426 <printk>
			return -ENODEV;
   1654c:	f06f 0412 	mvn.w	r4, #18
}
   16550:	4620      	mov	r0, r4
   16552:	b003      	add	sp, #12
   16554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16558:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1655a:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   1655e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16562:	fa03 f30b 	lsl.w	r3, r3, fp
   16566:	9301      	str	r3, [sp, #4]
   16568:	6843      	ldr	r3, [r0, #4]
   1656a:	9a01      	ldr	r2, [sp, #4]
   1656c:	681b      	ldr	r3, [r3, #0]
   1656e:	421a      	tst	r2, r3
   16570:	d10a      	bne.n	16588 <dk_buttons_init+0x6c>
   16572:	4651      	mov	r1, sl
   16574:	483f      	ldr	r0, [pc, #252]	; (16674 <dk_buttons_init+0x158>)
   16576:	f44f 7211 	mov.w	r2, #580	; 0x244
   1657a:	f003 ff54 	bl	1a426 <printk>
   1657e:	f44f 7111 	mov.w	r1, #580	; 0x244
   16582:	4650      	mov	r0, sl
   16584:	f004 f9f5 	bl	1a972 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   16588:	68a3      	ldr	r3, [r4, #8]
   1658a:	4620      	mov	r0, r4
   1658c:	f44f 7288 	mov.w	r2, #272	; 0x110
   16590:	4659      	mov	r1, fp
   16592:	681b      	ldr	r3, [r3, #0]
   16594:	4798      	blx	r3
	if (ret != 0) {
   16596:	4604      	mov	r4, r0
   16598:	bb08      	cbnz	r0, 165de <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1659a:	f8d8 3000 	ldr.w	r3, [r8]
   1659e:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165a0:	3701      	adds	r7, #1
   165a2:	ea23 0302 	bic.w	r3, r3, r2
   165a6:	2f04      	cmp	r7, #4
   165a8:	f8c8 3000 	str.w	r3, [r8]
   165ac:	f105 0508 	add.w	r5, r5, #8
   165b0:	d1c1      	bne.n	16536 <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165b2:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   165b4:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   165b6:	f04f 0a01 	mov.w	sl, #1
   165ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 16660 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   165be:	4b2a      	ldr	r3, [pc, #168]	; (16668 <dk_buttons_init+0x14c>)
   165c0:	f859 0b04 	ldr.w	r0, [r9], #4
   165c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   165c8:	791f      	ldrb	r7, [r3, #4]
   165ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   165ce:	4639      	mov	r1, r7
   165d0:	f7ff fd10 	bl	15ff4 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   165d4:	4604      	mov	r4, r0
   165d6:	b138      	cbz	r0, 165e8 <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   165d8:	2145      	movs	r1, #69	; 0x45
   165da:	4827      	ldr	r0, [pc, #156]	; (16678 <dk_buttons_init+0x15c>)
   165dc:	e001      	b.n	165e2 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   165de:	2145      	movs	r1, #69	; 0x45
   165e0:	4826      	ldr	r0, [pc, #152]	; (1667c <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   165e2:	f003 ff20 	bl	1a426 <printk>
		return err;
   165e6:	e7b3      	b.n	16550 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165e8:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   165ea:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165ee:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   165f0:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165f4:	d1e3      	bne.n	165be <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165f6:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   165f8:	4f21      	ldr	r7, [pc, #132]	; (16680 <dk_buttons_init+0x164>)
   165fa:	4b22      	ldr	r3, [pc, #136]	; (16684 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   165fc:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   16600:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   16604:	6883      	ldr	r3, [r0, #8]
   16606:	69db      	ldr	r3, [r3, #28]
   16608:	b13b      	cbz	r3, 1661a <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1660a:	2201      	movs	r2, #1
   1660c:	4639      	mov	r1, r7
   1660e:	4798      	blx	r3
		if (err) {
   16610:	4604      	mov	r4, r0
   16612:	b128      	cbz	r0, 16620 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   16614:	2145      	movs	r1, #69	; 0x45
   16616:	481c      	ldr	r0, [pc, #112]	; (16688 <dk_buttons_init+0x16c>)
   16618:	e7e3      	b.n	165e2 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   1661a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1661e:	e7f9      	b.n	16614 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16620:	3501      	adds	r5, #1
   16622:	2d04      	cmp	r5, #4
   16624:	d1ec      	bne.n	16600 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16626:	4d19      	ldr	r5, [pc, #100]	; (1668c <dk_buttons_init+0x170>)
   16628:	4601      	mov	r1, r0
   1662a:	2230      	movs	r2, #48	; 0x30
   1662c:	4628      	mov	r0, r5
   1662e:	f005 f969 	bl	1b904 <memset>
	state = STATE_SCANNING;
   16632:	2201      	movs	r2, #1
   16634:	4b16      	ldr	r3, [pc, #88]	; (16690 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16636:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16638:	606b      	str	r3, [r5, #4]
   1663a:	4b16      	ldr	r3, [pc, #88]	; (16694 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1663c:	4816      	ldr	r0, [pc, #88]	; (16698 <dk_buttons_init+0x17c>)
   1663e:	701a      	strb	r2, [r3, #0]
   16640:	2200      	movs	r2, #0
   16642:	2300      	movs	r3, #0
   16644:	f002 ff7c 	bl	19540 <k_delayed_work_submit_to_queue>
	if (err) {
   16648:	4604      	mov	r4, r0
   1664a:	b110      	cbz	r0, 16652 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   1664c:	2145      	movs	r1, #69	; 0x45
   1664e:	4813      	ldr	r0, [pc, #76]	; (1669c <dk_buttons_init+0x180>)
   16650:	e7c7      	b.n	165e2 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   16652:	4601      	mov	r1, r0
   16654:	f7ff ff52 	bl	164fc <dk_read_buttons>
	return 0;
   16658:	e77a      	b.n	16550 <dk_buttons_init+0x34>
   1665a:	bf00      	nop
   1665c:	2000aed8 	.word	0x2000aed8
   16660:	2000aec8 	.word	0x2000aec8
   16664:	2000aedc 	.word	0x2000aedc
   16668:	0001ec24 	.word	0x0001ec24
   1666c:	0002227f 	.word	0x0002227f
   16670:	00022379 	.word	0x00022379
   16674:	0001f98f 	.word	0x0001f98f
   16678:	000223d7 	.word	0x000223d7
   1667c:	000223b5 	.word	0x000223b5
   16680:	2000aef8 	.word	0x2000aef8
   16684:	00016379 	.word	0x00016379
   16688:	000223f7 	.word	0x000223f7
   1668c:	2000a408 	.word	0x2000a408
   16690:	00016175 	.word	0x00016175
   16694:	2000c7ed 	.word	0x2000c7ed
   16698:	2000a558 	.word	0x2000a558
   1669c:	000222de 	.word	0x000222de

000166a0 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   166a0:	2804      	cmp	r0, #4
{
   166a2:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   166a4:	d907      	bls.n	166b6 <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   166a6:	2145      	movs	r1, #69	; 0x45
   166a8:	480d      	ldr	r0, [pc, #52]	; (166e0 <dk_set_led+0x40>)
   166aa:	f003 febc 	bl	1a426 <printk>
   166ae:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   166b2:	4620      	mov	r0, r4
   166b4:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   166b6:	fab1 f281 	clz	r2, r1
   166ba:	4b0a      	ldr	r3, [pc, #40]	; (166e4 <dk_set_led+0x44>)
   166bc:	0952      	lsrs	r2, r2, #5
   166be:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   166c2:	7919      	ldrb	r1, [r3, #4]
   166c4:	4b08      	ldr	r3, [pc, #32]	; (166e8 <dk_set_led+0x48>)
   166c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   166ca:	f7ff fd01 	bl	160d0 <gpio_pin_set_raw>
	if (err) {
   166ce:	4604      	mov	r4, r0
   166d0:	2800      	cmp	r0, #0
   166d2:	d0ee      	beq.n	166b2 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   166d4:	2145      	movs	r1, #69	; 0x45
   166d6:	4805      	ldr	r0, [pc, #20]	; (166ec <dk_set_led+0x4c>)
   166d8:	f003 fea5 	bl	1a426 <printk>
   166dc:	e7e9      	b.n	166b2 <dk_set_led+0x12>
   166de:	bf00      	nop
   166e0:	00022410 	.word	0x00022410
   166e4:	0001ec44 	.word	0x0001ec44
   166e8:	2000af0c 	.word	0x2000af0c
   166ec:	000222a9 	.word	0x000222a9

000166f0 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   166f0:	4803      	ldr	r0, [pc, #12]	; (16700 <k_sys_fatal_error_handler+0x10>)
   166f2:	2145      	movs	r1, #69	; 0x45
{
   166f4:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   166f6:	f003 fe96 	bl	1a426 <printk>
	sys_arch_reboot(0);
   166fa:	2000      	movs	r0, #0
   166fc:	f7f7 fb76 	bl	ddec <sys_arch_reboot>

	CODE_UNREACHABLE;
   16700:	00022444 	.word	0x00022444

00016704 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   16704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16708:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1670a:	4c21      	ldr	r4, [pc, #132]	; (16790 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   1670c:	4e21      	ldr	r6, [pc, #132]	; (16794 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1670e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   16712:	f8df 9084 	ldr.w	r9, [pc, #132]	; 16798 <check_ext_api_requests+0x94>
{
   16716:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16718:	45a8      	cmp	r8, r5
   1671a:	d803      	bhi.n	16724 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1671c:	2000      	movs	r0, #0
   1671e:	b005      	add	sp, #20
   16720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   16724:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16726:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1672a:	681f      	ldr	r7, [r3, #0]
   1672c:	ab01      	add	r3, sp, #4
   1672e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   16732:	220c      	movs	r2, #12
   16734:	4619      	mov	r1, r3
   16736:	4638      	mov	r0, r7
   16738:	f005 f8a8 	bl	1b88c <memcmp>
   1673c:	b990      	cbnz	r0, 16764 <check_ext_api_requests+0x60>
   1673e:	b18f      	cbz	r7, 16764 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16740:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   16742:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16744:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   16746:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16748:	4291      	cmp	r1, r2
   1674a:	d10b      	bne.n	16764 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1674c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1674e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   16750:	4291      	cmp	r1, r2
   16752:	d807      	bhi.n	16764 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   16754:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   16756:	4291      	cmp	r1, r2
   16758:	d904      	bls.n	16764 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1675a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1675c:	695b      	ldr	r3, [r3, #20]
   1675e:	ea32 0303 	bics.w	r3, r2, r3
   16762:	d00a      	beq.n	1677a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   16764:	6a27      	ldr	r7, [r4, #32]
   16766:	b167      	cbz	r7, 16782 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   16768:	480c      	ldr	r0, [pc, #48]	; (1679c <check_ext_api_requests+0x98>)
   1676a:	f003 fe5c 	bl	1a426 <printk>
			k_panic();
   1676e:	4040      	eors	r0, r0
   16770:	f380 8811 	msr	BASEPRI, r0
   16774:	f04f 0004 	mov.w	r0, #4
   16778:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1677a:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1677c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1677e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16780:	e7ca      	b.n	16718 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   16782:	4648      	mov	r0, r9
   16784:	f003 fe4f 	bl	1a426 <printk>
			*ext_api_req->ext_api = NULL;
   16788:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1678a:	601f      	str	r7, [r3, #0]
   1678c:	e7f5      	b.n	1677a <check_ext_api_requests+0x76>
   1678e:	bf00      	nop
   16790:	0000823c 	.word	0x0000823c
   16794:	0001e370 	.word	0x0001e370
   16798:	0002248f 	.word	0x0002248f
   1679c:	00022466 	.word	0x00022466

000167a0 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   167a0:	4b04      	ldr	r3, [pc, #16]	; (167b4 <SystemCoreClockUpdate+0x14>)
   167a2:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   167a6:	4b04      	ldr	r3, [pc, #16]	; (167b8 <SystemCoreClockUpdate+0x18>)
   167a8:	f002 0203 	and.w	r2, r2, #3
   167ac:	40d3      	lsrs	r3, r2
   167ae:	4a03      	ldr	r2, [pc, #12]	; (167bc <SystemCoreClockUpdate+0x1c>)
   167b0:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   167b2:	4770      	bx	lr
   167b4:	40005000 	.word	0x40005000
   167b8:	07a12000 	.word	0x07a12000
   167bc:	20008534 	.word	0x20008534

000167c0 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   167c0:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   167c2:	4604      	mov	r4, r0
   167c4:	b940      	cbnz	r0, 167d8 <nrfx_clock_init+0x18>
   167c6:	4909      	ldr	r1, [pc, #36]	; (167ec <nrfx_clock_init+0x2c>)
   167c8:	4809      	ldr	r0, [pc, #36]	; (167f0 <nrfx_clock_init+0x30>)
   167ca:	22b3      	movs	r2, #179	; 0xb3
   167cc:	f003 fe2b 	bl	1a426 <printk>
   167d0:	21b3      	movs	r1, #179	; 0xb3
   167d2:	4806      	ldr	r0, [pc, #24]	; (167ec <nrfx_clock_init+0x2c>)
   167d4:	f004 f8cd 	bl	1a972 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   167d8:	4b06      	ldr	r3, [pc, #24]	; (167f4 <nrfx_clock_init+0x34>)
   167da:	791a      	ldrb	r2, [r3, #4]
   167dc:	b922      	cbnz	r2, 167e8 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   167de:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   167e0:	4805      	ldr	r0, [pc, #20]	; (167f8 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   167e2:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   167e4:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   167e6:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   167e8:	4804      	ldr	r0, [pc, #16]	; (167fc <nrfx_clock_init+0x3c>)
    return err_code;
   167ea:	e7fc      	b.n	167e6 <nrfx_clock_init+0x26>
   167ec:	000224c2 	.word	0x000224c2
   167f0:	0001f98f 	.word	0x0001f98f
   167f4:	2000af24 	.word	0x2000af24
   167f8:	0bad0000 	.word	0x0bad0000
   167fc:	0bad000c 	.word	0x0bad000c

00016800 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   16800:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16802:	4b0d      	ldr	r3, [pc, #52]	; (16838 <nrfx_clock_enable+0x38>)
   16804:	791b      	ldrb	r3, [r3, #4]
   16806:	b943      	cbnz	r3, 1681a <nrfx_clock_enable+0x1a>
   16808:	490c      	ldr	r1, [pc, #48]	; (1683c <nrfx_clock_enable+0x3c>)
   1680a:	480d      	ldr	r0, [pc, #52]	; (16840 <nrfx_clock_enable+0x40>)
   1680c:	22cc      	movs	r2, #204	; 0xcc
   1680e:	f003 fe0a 	bl	1a426 <printk>
   16812:	21cc      	movs	r1, #204	; 0xcc
   16814:	4809      	ldr	r0, [pc, #36]	; (1683c <nrfx_clock_enable+0x3c>)
   16816:	f004 f8ac 	bl	1a972 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1681a:	2005      	movs	r0, #5
   1681c:	f7f6 ffda 	bl	d7d4 <arch_irq_is_enabled>
   16820:	b910      	cbnz	r0, 16828 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   16822:	2005      	movs	r0, #5
   16824:	f7f6 ffc6 	bl	d7b4 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   16828:	2201      	movs	r2, #1
   1682a:	4b06      	ldr	r3, [pc, #24]	; (16844 <nrfx_clock_enable+0x44>)
   1682c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   16830:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   16834:	bd08      	pop	{r3, pc}
   16836:	bf00      	nop
   16838:	2000af24 	.word	0x2000af24
   1683c:	000224c2 	.word	0x000224c2
   16840:	0001f98f 	.word	0x0001f98f
   16844:	40005000 	.word	0x40005000

00016848 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16848:	4b30      	ldr	r3, [pc, #192]	; (1690c <nrfx_clock_start+0xc4>)
{
   1684a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1684c:	791b      	ldrb	r3, [r3, #4]
{
   1684e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16850:	b953      	cbnz	r3, 16868 <nrfx_clock_start+0x20>
   16852:	492f      	ldr	r1, [pc, #188]	; (16910 <nrfx_clock_start+0xc8>)
   16854:	482f      	ldr	r0, [pc, #188]	; (16914 <nrfx_clock_start+0xcc>)
   16856:	f44f 7284 	mov.w	r2, #264	; 0x108
   1685a:	f003 fde4 	bl	1a426 <printk>
   1685e:	f44f 7184 	mov.w	r1, #264	; 0x108
   16862:	482b      	ldr	r0, [pc, #172]	; (16910 <nrfx_clock_start+0xc8>)
   16864:	f004 f885 	bl	1a972 <assert_post_action>
    switch (domain)
   16868:	2c03      	cmp	r4, #3
   1686a:	d842      	bhi.n	168f2 <nrfx_clock_start+0xaa>
   1686c:	e8df f004 	tbb	[pc, r4]
   16870:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16874:	4b28      	ldr	r3, [pc, #160]	; (16918 <nrfx_clock_start+0xd0>)
   16876:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1687a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1687e:	03c9      	lsls	r1, r1, #15
   16880:	d510      	bpl.n	168a4 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16882:	f002 0203 	and.w	r2, r2, #3
   16886:	2a02      	cmp	r2, #2
   16888:	d10c      	bne.n	168a4 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1688a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1688e:	2200      	movs	r2, #0
   16890:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16894:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   16898:	2202      	movs	r2, #2
   1689a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1689e:	2201      	movs	r2, #1
   168a0:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   168a2:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   168a4:	2201      	movs	r2, #1
   168a6:	e7f0      	b.n	1688a <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168a8:	2200      	movs	r2, #0
   168aa:	4b1b      	ldr	r3, [pc, #108]	; (16918 <nrfx_clock_start+0xd0>)
   168ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   168b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   168b4:	2201      	movs	r2, #1
   168b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   168ba:	601a      	str	r2, [r3, #0]
}
   168bc:	e7f1      	b.n	168a2 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168be:	2200      	movs	r2, #0
   168c0:	4b15      	ldr	r3, [pc, #84]	; (16918 <nrfx_clock_start+0xd0>)
   168c2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   168c6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   168ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   168ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   168d2:	2201      	movs	r2, #1
   168d4:	621a      	str	r2, [r3, #32]
}
   168d6:	e7e4      	b.n	168a2 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168d8:	2200      	movs	r2, #0
   168da:	4b0f      	ldr	r3, [pc, #60]	; (16918 <nrfx_clock_start+0xd0>)
   168dc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   168e0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   168e4:	f44f 7280 	mov.w	r2, #256	; 0x100
   168e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   168ec:	2201      	movs	r2, #1
   168ee:	619a      	str	r2, [r3, #24]
}
   168f0:	e7d7      	b.n	168a2 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   168f2:	4907      	ldr	r1, [pc, #28]	; (16910 <nrfx_clock_start+0xc8>)
   168f4:	4807      	ldr	r0, [pc, #28]	; (16914 <nrfx_clock_start+0xcc>)
   168f6:	f44f 729d 	mov.w	r2, #314	; 0x13a
   168fa:	f003 fd94 	bl	1a426 <printk>
}
   168fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   16902:	f44f 719d 	mov.w	r1, #314	; 0x13a
   16906:	4802      	ldr	r0, [pc, #8]	; (16910 <nrfx_clock_start+0xc8>)
   16908:	f004 b833 	b.w	1a972 <assert_post_action>
   1690c:	2000af24 	.word	0x2000af24
   16910:	000224c2 	.word	0x000224c2
   16914:	0001f98f 	.word	0x0001f98f
   16918:	40005000 	.word	0x40005000

0001691c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1691c:	4b42      	ldr	r3, [pc, #264]	; (16a28 <nrfx_clock_stop+0x10c>)
{
   1691e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16920:	791b      	ldrb	r3, [r3, #4]
{
   16922:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16924:	b953      	cbnz	r3, 1693c <nrfx_clock_stop+0x20>
   16926:	4941      	ldr	r1, [pc, #260]	; (16a2c <nrfx_clock_stop+0x110>)
   16928:	4841      	ldr	r0, [pc, #260]	; (16a30 <nrfx_clock_stop+0x114>)
   1692a:	f240 1241 	movw	r2, #321	; 0x141
   1692e:	f003 fd7a 	bl	1a426 <printk>
   16932:	f240 1141 	movw	r1, #321	; 0x141
   16936:	483d      	ldr	r0, [pc, #244]	; (16a2c <nrfx_clock_stop+0x110>)
   16938:	f004 f81b 	bl	1a972 <assert_post_action>
    switch (domain)
   1693c:	2c03      	cmp	r4, #3
   1693e:	d856      	bhi.n	169ee <nrfx_clock_stop+0xd2>
   16940:	e8df f004 	tbb	[pc, r4]
   16944:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   16948:	2202      	movs	r2, #2
   1694a:	4b3a      	ldr	r3, [pc, #232]	; (16a34 <nrfx_clock_stop+0x118>)
   1694c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16950:	2200      	movs	r2, #0
   16952:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16956:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1695a:	2201      	movs	r2, #1
   1695c:	60da      	str	r2, [r3, #12]
   1695e:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16962:	4e34      	ldr	r6, [pc, #208]	; (16a34 <nrfx_clock_stop+0x118>)
    switch (domain)
   16964:	2c02      	cmp	r4, #2
   16966:	d04f      	beq.n	16a08 <nrfx_clock_stop+0xec>
   16968:	2c03      	cmp	r4, #3
   1696a:	d050      	beq.n	16a0e <nrfx_clock_stop+0xf2>
   1696c:	2c00      	cmp	r4, #0
   1696e:	d151      	bne.n	16a14 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16970:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16974:	03db      	lsls	r3, r3, #15
   16976:	d51f      	bpl.n	169b8 <nrfx_clock_stop+0x9c>
   16978:	2001      	movs	r0, #1
   1697a:	f006 fcce 	bl	1d31a <nrfx_busy_wait>
   1697e:	3d01      	subs	r5, #1
   16980:	d1f0      	bne.n	16964 <nrfx_clock_stop+0x48>
   16982:	e019      	b.n	169b8 <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   16984:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16986:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16988:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   1698c:	4c29      	ldr	r4, [pc, #164]	; (16a34 <nrfx_clock_stop+0x118>)
   1698e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16992:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16996:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1699a:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1699c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   169a0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   169a4:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   169a8:	03d2      	lsls	r2, r2, #15
   169aa:	d505      	bpl.n	169b8 <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   169ac:	b123      	cbz	r3, 169b8 <nrfx_clock_stop+0x9c>
   169ae:	2001      	movs	r0, #1
   169b0:	f006 fcb3 	bl	1d31a <nrfx_busy_wait>
   169b4:	3d01      	subs	r5, #1
   169b6:	d1f1      	bne.n	1699c <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   169b8:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   169ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   169be:	4b1d      	ldr	r3, [pc, #116]	; (16a34 <nrfx_clock_stop+0x118>)
   169c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   169c4:	2200      	movs	r2, #0
   169c6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   169ca:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   169ce:	2201      	movs	r2, #1
   169d0:	625a      	str	r2, [r3, #36]	; 0x24
}
   169d2:	e7c4      	b.n	1695e <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   169d4:	f44f 7280 	mov.w	r2, #256	; 0x100
   169d8:	4b16      	ldr	r3, [pc, #88]	; (16a34 <nrfx_clock_stop+0x118>)
   169da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   169de:	2200      	movs	r2, #0
   169e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   169e4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   169e8:	2201      	movs	r2, #1
   169ea:	61da      	str	r2, [r3, #28]
}
   169ec:	e7b7      	b.n	1695e <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   169ee:	490f      	ldr	r1, [pc, #60]	; (16a2c <nrfx_clock_stop+0x110>)
   169f0:	480f      	ldr	r0, [pc, #60]	; (16a30 <nrfx_clock_stop+0x114>)
   169f2:	f240 125d 	movw	r2, #349	; 0x15d
   169f6:	f003 fd16 	bl	1a426 <printk>
   169fa:	f240 115d 	movw	r1, #349	; 0x15d
   169fe:	480b      	ldr	r0, [pc, #44]	; (16a2c <nrfx_clock_stop+0x110>)
}
   16a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   16a04:	f003 bfb5 	b.w	1a972 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16a08:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   16a0c:	e7b2      	b.n	16974 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   16a0e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   16a12:	e7af      	b.n	16974 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   16a14:	4908      	ldr	r1, [pc, #32]	; (16a38 <nrfx_clock_stop+0x11c>)
   16a16:	4806      	ldr	r0, [pc, #24]	; (16a30 <nrfx_clock_stop+0x114>)
   16a18:	f240 3242 	movw	r2, #834	; 0x342
   16a1c:	f003 fd03 	bl	1a426 <printk>
   16a20:	f240 3142 	movw	r1, #834	; 0x342
   16a24:	4804      	ldr	r0, [pc, #16]	; (16a38 <nrfx_clock_stop+0x11c>)
   16a26:	e7eb      	b.n	16a00 <nrfx_clock_stop+0xe4>
   16a28:	2000af24 	.word	0x2000af24
   16a2c:	000224c2 	.word	0x000224c2
   16a30:	0001f98f 	.word	0x0001f98f
   16a34:	40005000 	.word	0x40005000
   16a38:	000224ff 	.word	0x000224ff

00016a3c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16a3c:	4b28      	ldr	r3, [pc, #160]	; (16ae0 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16a3e:	b510      	push	{r4, lr}
   16a40:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   16a44:	b152      	cbz	r2, 16a5c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16a46:	2000      	movs	r0, #0
   16a48:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   16a4c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   16a50:	2201      	movs	r2, #1
   16a52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16a56:	4b23      	ldr	r3, [pc, #140]	; (16ae4 <nrfx_power_clock_irq_handler+0xa8>)
   16a58:	681b      	ldr	r3, [r3, #0]
   16a5a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16a5c:	4b20      	ldr	r3, [pc, #128]	; (16ae0 <nrfx_power_clock_irq_handler+0xa4>)
   16a5e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   16a62:	b18a      	cbz	r2, 16a88 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16a64:	2200      	movs	r2, #0
   16a66:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16a6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16a6e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16a72:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   16a76:	f002 0203 	and.w	r2, r2, #3
   16a7a:	2a01      	cmp	r2, #1
   16a7c:	f04f 0102 	mov.w	r1, #2
   16a80:	d126      	bne.n	16ad0 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16a82:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16a86:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16a88:	4b15      	ldr	r3, [pc, #84]	; (16ae0 <nrfx_power_clock_irq_handler+0xa4>)
   16a8a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   16a8e:	b162      	cbz	r2, 16aaa <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16a90:	2200      	movs	r2, #0
   16a92:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16a96:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   16a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
   16a9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   16aa2:	4b10      	ldr	r3, [pc, #64]	; (16ae4 <nrfx_power_clock_irq_handler+0xa8>)
   16aa4:	2004      	movs	r0, #4
   16aa6:	681b      	ldr	r3, [r3, #0]
   16aa8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16aaa:	4b0d      	ldr	r3, [pc, #52]	; (16ae0 <nrfx_power_clock_irq_handler+0xa4>)
   16aac:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   16ab0:	b1aa      	cbz	r2, 16ade <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   16ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16ab6:	2200      	movs	r2, #0
   16ab8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16abc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   16ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
   16ac4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   16ac8:	4b06      	ldr	r3, [pc, #24]	; (16ae4 <nrfx_power_clock_irq_handler+0xa8>)
   16aca:	2005      	movs	r0, #5
   16acc:	681b      	ldr	r3, [r3, #0]
   16ace:	4718      	bx	r3
   16ad0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16ad4:	4b03      	ldr	r3, [pc, #12]	; (16ae4 <nrfx_power_clock_irq_handler+0xa8>)
   16ad6:	2001      	movs	r0, #1
   16ad8:	681b      	ldr	r3, [r3, #0]
   16ada:	4798      	blx	r3
   16adc:	e7d4      	b.n	16a88 <nrfx_power_clock_irq_handler+0x4c>
}
   16ade:	bd10      	pop	{r4, pc}
   16ae0:	40005000 	.word	0x40005000
   16ae4:	2000af24 	.word	0x2000af24

00016ae8 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   16ae8:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   16aea:	4c0a      	ldr	r4, [pc, #40]	; (16b14 <nrfx_dppi_channel_alloc+0x2c>)
   16aec:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   16aee:	43ce      	mvns	r6, r1
   16af0:	d00e      	beq.n	16b10 <nrfx_dppi_channel_alloc+0x28>
   16af2:	2300      	movs	r3, #0
   16af4:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   16af6:	fa26 f502 	lsr.w	r5, r6, r2
   16afa:	07ed      	lsls	r5, r5, #31
   16afc:	f103 0301 	add.w	r3, r3, #1
   16b00:	d5f8      	bpl.n	16af4 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   16b02:	2301      	movs	r3, #1
   16b04:	4093      	lsls	r3, r2
   16b06:	430b      	orrs	r3, r1
    *p_channel = channel;
   16b08:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   16b0a:	4803      	ldr	r0, [pc, #12]	; (16b18 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   16b0c:	6023      	str	r3, [r4, #0]
}
   16b0e:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   16b10:	4802      	ldr	r0, [pc, #8]	; (16b1c <nrfx_dppi_channel_alloc+0x34>)
   16b12:	e7fc      	b.n	16b0e <nrfx_dppi_channel_alloc+0x26>
   16b14:	2000af2c 	.word	0x2000af2c
   16b18:	0bad0000 	.word	0x0bad0000
   16b1c:	0bad0002 	.word	0x0bad0002

00016b20 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   16b20:	2301      	movs	r3, #1
   16b22:	fa03 f000 	lsl.w	r0, r3, r0
   16b26:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   16b28:	b193      	cbz	r3, 16b50 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   16b2a:	f04f 0320 	mov.w	r3, #32
   16b2e:	f3ef 8111 	mrs	r1, BASEPRI
   16b32:	f383 8811 	msr	BASEPRI, r3
   16b36:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   16b3a:	4a06      	ldr	r2, [pc, #24]	; (16b54 <nrfx_gpiote_channel_free+0x34>)
   16b3c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   16b3e:	ea23 0000 	bic.w	r0, r3, r0
   16b42:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   16b44:	f381 8811 	msr	BASEPRI, r1
   16b48:	f3bf 8f6f 	isb	sy
   16b4c:	4802      	ldr	r0, [pc, #8]	; (16b58 <nrfx_gpiote_channel_free+0x38>)
   16b4e:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   16b50:	4802      	ldr	r0, [pc, #8]	; (16b5c <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16b52:	4770      	bx	lr
   16b54:	2000af30 	.word	0x2000af30
   16b58:	0bad0000 	.word	0x0bad0000
   16b5c:	0bad0004 	.word	0x0bad0004

00016b60 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   16b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   16b64:	22ff      	movs	r2, #255	; 0xff
{
   16b66:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   16b68:	2601      	movs	r6, #1
{
   16b6a:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   16b6c:	f8df e054 	ldr.w	lr, [pc, #84]	; 16bc4 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   16b70:	4815      	ldr	r0, [pc, #84]	; (16bc8 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   16b72:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16bcc <nrfx_gpiote_channel_alloc+0x6c>
   16b76:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   16b78:	f04f 0120 	mov.w	r1, #32
   16b7c:	f3ef 8c11 	mrs	ip, BASEPRI
   16b80:	f381 8811 	msr	BASEPRI, r1
   16b84:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16b88:	fa22 f103 	lsr.w	r1, r2, r3
   16b8c:	07c9      	lsls	r1, r1, #31
   16b8e:	d50a      	bpl.n	16ba6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   16b90:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   16b94:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16b98:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   16b9a:	bf01      	itttt	eq
   16b9c:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   16b9e:	4339      	orreq	r1, r7
   16ba0:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   16ba4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   16ba6:	f38c 8811 	msr	BASEPRI, ip
   16baa:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   16bae:	4540      	cmp	r0, r8
   16bb0:	d005      	beq.n	16bbe <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   16bb2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   16bb6:	439a      	bics	r2, r3
   16bb8:	f104 0401 	add.w	r4, r4, #1
   16bbc:	d1db      	bne.n	16b76 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16bc2:	bf00      	nop
   16bc4:	2000af30 	.word	0x2000af30
   16bc8:	0bad0002 	.word	0x0bad0002
   16bcc:	0bad0000 	.word	0x0bad0000

00016bd0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   16bd0:	b570      	push	{r4, r5, r6, lr}
   16bd2:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   16bd4:	460d      	mov	r5, r1
   16bd6:	b941      	cbnz	r1, 16bea <nrfx_ipc_init+0x1a>
   16bd8:	490b      	ldr	r1, [pc, #44]	; (16c08 <nrfx_ipc_init+0x38>)
   16bda:	480c      	ldr	r0, [pc, #48]	; (16c0c <nrfx_ipc_init+0x3c>)
   16bdc:	2232      	movs	r2, #50	; 0x32
   16bde:	f003 fc22 	bl	1a426 <printk>
   16be2:	2132      	movs	r1, #50	; 0x32
   16be4:	4808      	ldr	r0, [pc, #32]	; (16c08 <nrfx_ipc_init+0x38>)
   16be6:	f003 fec4 	bl	1a972 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16bea:	4c09      	ldr	r4, [pc, #36]	; (16c10 <nrfx_ipc_init+0x40>)
   16bec:	7923      	ldrb	r3, [r4, #4]
   16bee:	b943      	cbnz	r3, 16c02 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   16bf0:	202a      	movs	r0, #42	; 0x2a
   16bf2:	f7f6 fddf 	bl	d7b4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16bf6:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   16bf8:	4806      	ldr	r0, [pc, #24]	; (16c14 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16bfa:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   16bfc:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   16bfe:	60a6      	str	r6, [r4, #8]
}
   16c00:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   16c02:	4805      	ldr	r0, [pc, #20]	; (16c18 <nrfx_ipc_init+0x48>)
   16c04:	e7fc      	b.n	16c00 <nrfx_ipc_init+0x30>
   16c06:	bf00      	nop
   16c08:	00022533 	.word	0x00022533
   16c0c:	0001f98f 	.word	0x0001f98f
   16c10:	2000af90 	.word	0x2000af90
   16c14:	0bad0000 	.word	0x0bad0000
   16c18:	0bad000c 	.word	0x0bad000c

00016c1c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   16c1c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   16c1e:	4604      	mov	r4, r0
   16c20:	b940      	cbnz	r0, 16c34 <nrfx_ipc_config_load+0x18>
   16c22:	4919      	ldr	r1, [pc, #100]	; (16c88 <nrfx_ipc_config_load+0x6c>)
   16c24:	4819      	ldr	r0, [pc, #100]	; (16c8c <nrfx_ipc_config_load+0x70>)
   16c26:	2244      	movs	r2, #68	; 0x44
   16c28:	f003 fbfd 	bl	1a426 <printk>
   16c2c:	2144      	movs	r1, #68	; 0x44
   16c2e:	4816      	ldr	r0, [pc, #88]	; (16c88 <nrfx_ipc_config_load+0x6c>)
   16c30:	f003 fe9f 	bl	1a972 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16c34:	4b16      	ldr	r3, [pc, #88]	; (16c90 <nrfx_ipc_config_load+0x74>)
   16c36:	791b      	ldrb	r3, [r3, #4]
   16c38:	2b01      	cmp	r3, #1
   16c3a:	d008      	beq.n	16c4e <nrfx_ipc_config_load+0x32>
   16c3c:	4912      	ldr	r1, [pc, #72]	; (16c88 <nrfx_ipc_config_load+0x6c>)
   16c3e:	4813      	ldr	r0, [pc, #76]	; (16c8c <nrfx_ipc_config_load+0x70>)
   16c40:	2245      	movs	r2, #69	; 0x45
   16c42:	f003 fbf0 	bl	1a426 <printk>
   16c46:	2145      	movs	r1, #69	; 0x45
   16c48:	480f      	ldr	r0, [pc, #60]	; (16c88 <nrfx_ipc_config_load+0x6c>)
   16c4a:	f003 fe92 	bl	1a972 <assert_post_action>
{
   16c4e:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   16c50:	4a10      	ldr	r2, [pc, #64]	; (16c94 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   16c52:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   16c56:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16c5a:	3301      	adds	r3, #1
   16c5c:	2b10      	cmp	r3, #16
   16c5e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   16c62:	d1f6      	bne.n	16c52 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   16c64:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   16c66:	4a0b      	ldr	r2, [pc, #44]	; (16c94 <nrfx_ipc_config_load+0x78>)
   16c68:	f104 0140 	add.w	r1, r4, #64	; 0x40
   16c6c:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   16c70:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16c74:	3301      	adds	r3, #1
   16c76:	2b10      	cmp	r3, #16
   16c78:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   16c7c:	d1f6      	bne.n	16c6c <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   16c7e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   16c82:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16c86:	bd38      	pop	{r3, r4, r5, pc}
   16c88:	00022533 	.word	0x00022533
   16c8c:	0001f98f 	.word	0x0001f98f
   16c90:	2000af90 	.word	0x2000af90
   16c94:	4002a000 	.word	0x4002a000

00016c98 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   16c98:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16c9a:	4b0a      	ldr	r3, [pc, #40]	; (16cc4 <nrfx_ipc_receive_event_enable+0x2c>)
{
   16c9c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16c9e:	791b      	ldrb	r3, [r3, #4]
   16ca0:	2b01      	cmp	r3, #1
   16ca2:	d008      	beq.n	16cb6 <nrfx_ipc_receive_event_enable+0x1e>
   16ca4:	4908      	ldr	r1, [pc, #32]	; (16cc8 <nrfx_ipc_receive_event_enable+0x30>)
   16ca6:	4809      	ldr	r0, [pc, #36]	; (16ccc <nrfx_ipc_receive_event_enable+0x34>)
   16ca8:	226a      	movs	r2, #106	; 0x6a
   16caa:	f003 fbbc 	bl	1a426 <printk>
   16cae:	216a      	movs	r1, #106	; 0x6a
   16cb0:	4805      	ldr	r0, [pc, #20]	; (16cc8 <nrfx_ipc_receive_event_enable+0x30>)
   16cb2:	f003 fe5e 	bl	1a972 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   16cb6:	2301      	movs	r3, #1
   16cb8:	fa03 f404 	lsl.w	r4, r3, r4
   16cbc:	4b04      	ldr	r3, [pc, #16]	; (16cd0 <nrfx_ipc_receive_event_enable+0x38>)
   16cbe:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   16cc2:	bd10      	pop	{r4, pc}
   16cc4:	2000af90 	.word	0x2000af90
   16cc8:	00022533 	.word	0x00022533
   16ccc:	0001f98f 	.word	0x0001f98f
   16cd0:	4002a000 	.word	0x4002a000

00016cd4 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   16cd4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16cd6:	4b0a      	ldr	r3, [pc, #40]	; (16d00 <nrfx_ipc_receive_event_disable+0x2c>)
{
   16cd8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16cda:	791b      	ldrb	r3, [r3, #4]
   16cdc:	2b01      	cmp	r3, #1
   16cde:	d008      	beq.n	16cf2 <nrfx_ipc_receive_event_disable+0x1e>
   16ce0:	4908      	ldr	r1, [pc, #32]	; (16d04 <nrfx_ipc_receive_event_disable+0x30>)
   16ce2:	4809      	ldr	r0, [pc, #36]	; (16d08 <nrfx_ipc_receive_event_disable+0x34>)
   16ce4:	2270      	movs	r2, #112	; 0x70
   16ce6:	f003 fb9e 	bl	1a426 <printk>
   16cea:	2170      	movs	r1, #112	; 0x70
   16cec:	4805      	ldr	r0, [pc, #20]	; (16d04 <nrfx_ipc_receive_event_disable+0x30>)
   16cee:	f003 fe40 	bl	1a972 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   16cf2:	2301      	movs	r3, #1
   16cf4:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   16cf8:	4b04      	ldr	r3, [pc, #16]	; (16d0c <nrfx_ipc_receive_event_disable+0x38>)
   16cfa:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   16cfe:	bd10      	pop	{r4, pc}
   16d00:	2000af90 	.word	0x2000af90
   16d04:	00022533 	.word	0x00022533
   16d08:	0001f98f 	.word	0x0001f98f
   16d0c:	4002a000 	.word	0x4002a000

00016d10 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   16d10:	4b15      	ldr	r3, [pc, #84]	; (16d68 <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   16d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d16:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   16d1a:	4f14      	ldr	r7, [pc, #80]	; (16d6c <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   16d1c:	4635      	mov	r5, r6
   16d1e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 16d70 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   16d22:	b935      	cbnz	r5, 16d32 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16d24:	4b13      	ldr	r3, [pc, #76]	; (16d74 <nrfx_ipc_irq_handler+0x64>)
   16d26:	4630      	mov	r0, r6
}
   16d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16d2c:	681a      	ldr	r2, [r3, #0]
   16d2e:	6899      	ldr	r1, [r3, #8]
   16d30:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   16d32:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   16d36:	2301      	movs	r3, #1
  return __builtin_clz(value);
   16d38:	fab4 f484 	clz	r4, r4
   16d3c:	40a3      	lsls	r3, r4
   16d3e:	2c0f      	cmp	r4, #15
   16d40:	ea25 0503 	bic.w	r5, r5, r3
   16d44:	d90a      	bls.n	16d5c <nrfx_ipc_irq_handler+0x4c>
   16d46:	4639      	mov	r1, r7
   16d48:	4640      	mov	r0, r8
   16d4a:	f240 12e5 	movw	r2, #485	; 0x1e5
   16d4e:	f003 fb6a 	bl	1a426 <printk>
   16d52:	f240 11e5 	movw	r1, #485	; 0x1e5
   16d56:	4638      	mov	r0, r7
   16d58:	f003 fe0b 	bl	1a972 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16d5c:	2200      	movs	r2, #0
   16d5e:	4b06      	ldr	r3, [pc, #24]	; (16d78 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   16d60:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16d62:	511a      	str	r2, [r3, r4]
}
   16d64:	e7dd      	b.n	16d22 <nrfx_ipc_irq_handler+0x12>
   16d66:	bf00      	nop
   16d68:	4002a000 	.word	0x4002a000
   16d6c:	0002256e 	.word	0x0002256e
   16d70:	0001f98f 	.word	0x0001f98f
   16d74:	2000af90 	.word	0x2000af90
   16d78:	4002a100 	.word	0x4002a100

00016d7c <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   16d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d80:	460e      	mov	r6, r1
   16d82:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   16d84:	4d0c      	ldr	r5, [pc, #48]	; (16db8 <metal_generic_dev_open+0x3c>)
   16d86:	f855 4f18 	ldr.w	r4, [r5, #24]!
   16d8a:	42ac      	cmp	r4, r5
   16d8c:	d103      	bne.n	16d96 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   16d8e:	f06f 0012 	mvn.w	r0, #18
   16d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   16d96:	4631      	mov	r1, r6
   16d98:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   16d9c:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   16da0:	f004 fd57 	bl	1b852 <strcmp>
   16da4:	b930      	cbnz	r0, 16db4 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   16da6:	4640      	mov	r0, r8
			*device = dev;
   16da8:	f8c7 8000 	str.w	r8, [r7]
}
   16dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   16db0:	f006 bb8c 	b.w	1d4cc <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   16db4:	6824      	ldr	r4, [r4, #0]
   16db6:	e7e8      	b.n	16d8a <metal_generic_dev_open+0xe>
   16db8:	2000af9c 	.word	0x2000af9c

00016dbc <metal_bus_find>:
{
   16dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16dc0:	4607      	mov	r7, r0
   16dc2:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   16dc4:	4e0b      	ldr	r6, [pc, #44]	; (16df4 <metal_bus_find+0x38>)
   16dc6:	f856 4f08 	ldr.w	r4, [r6, #8]!
   16dca:	42b4      	cmp	r4, r6
   16dcc:	d102      	bne.n	16dd4 <metal_bus_find+0x18>
	return -ENOENT;
   16dce:	f06f 0001 	mvn.w	r0, #1
   16dd2:	e00a      	b.n	16dea <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   16dd4:	4639      	mov	r1, r7
   16dd6:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   16dda:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   16dde:	f004 fd38 	bl	1b852 <strcmp>
   16de2:	b920      	cbnz	r0, 16dee <metal_bus_find+0x32>
   16de4:	b11d      	cbz	r5, 16dee <metal_bus_find+0x32>
			*result = bus;
   16de6:	f8c5 8000 	str.w	r8, [r5]
}
   16dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   16dee:	6824      	ldr	r4, [r4, #0]
   16df0:	e7eb      	b.n	16dca <metal_bus_find+0xe>
   16df2:	bf00      	nop
   16df4:	2000af9c 	.word	0x2000af9c

00016df8 <metal_bus_register>:
{
   16df8:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   16dfa:	4604      	mov	r4, r0
   16dfc:	b910      	cbnz	r0, 16e04 <metal_bus_register+0xc>
		return -EINVAL;
   16dfe:	f06f 0015 	mvn.w	r0, #21
}
   16e02:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   16e04:	6800      	ldr	r0, [r0, #0]
   16e06:	2800      	cmp	r0, #0
   16e08:	d0f9      	beq.n	16dfe <metal_bus_register+0x6>
   16e0a:	f004 fd12 	bl	1b832 <strlen>
   16e0e:	2800      	cmp	r0, #0
   16e10:	d0f5      	beq.n	16dfe <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   16e12:	2100      	movs	r1, #0
   16e14:	6820      	ldr	r0, [r4, #0]
   16e16:	f7ff ffd1 	bl	16dbc <metal_bus_find>
   16e1a:	b1c0      	cbz	r0, 16e4e <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   16e1c:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   16e20:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   16e24:	4b0c      	ldr	r3, [pc, #48]	; (16e58 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   16e26:	f104 0224 	add.w	r2, r4, #36	; 0x24
   16e2a:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   16e2c:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   16e30:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   16e32:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   16e34:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   16e36:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   16e38:	781a      	ldrb	r2, [r3, #0]
   16e3a:	2a06      	cmp	r2, #6
   16e3c:	d905      	bls.n	16e4a <metal_bus_register+0x52>
   16e3e:	685b      	ldr	r3, [r3, #4]
   16e40:	b143      	cbz	r3, 16e54 <metal_bus_register+0x5c>
   16e42:	2007      	movs	r0, #7
   16e44:	6822      	ldr	r2, [r4, #0]
   16e46:	4905      	ldr	r1, [pc, #20]	; (16e5c <metal_bus_register+0x64>)
   16e48:	4798      	blx	r3
	return 0;
   16e4a:	2000      	movs	r0, #0
   16e4c:	e7d9      	b.n	16e02 <metal_bus_register+0xa>
		return -EEXIST;
   16e4e:	f06f 0010 	mvn.w	r0, #16
   16e52:	e7d6      	b.n	16e02 <metal_bus_register+0xa>
	return 0;
   16e54:	4618      	mov	r0, r3
   16e56:	e7d4      	b.n	16e02 <metal_bus_register+0xa>
   16e58:	2000af9c 	.word	0x2000af9c
   16e5c:	000225a0 	.word	0x000225a0

00016e60 <metal_register_generic_device>:
{
   16e60:	b510      	push	{r4, lr}
   16e62:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   16e64:	6800      	ldr	r0, [r0, #0]
   16e66:	b910      	cbnz	r0, 16e6e <metal_register_generic_device+0xe>
		return -EINVAL;
   16e68:	f06f 0015 	mvn.w	r0, #21
}
   16e6c:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   16e6e:	f004 fce0 	bl	1b832 <strlen>
   16e72:	2800      	cmp	r0, #0
   16e74:	d0f8      	beq.n	16e68 <metal_register_generic_device+0x8>
   16e76:	68a3      	ldr	r3, [r4, #8]
   16e78:	2b01      	cmp	r3, #1
   16e7a:	d8f5      	bhi.n	16e68 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   16e7c:	4b06      	ldr	r3, [pc, #24]	; (16e98 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   16e7e:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   16e82:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   16e84:	4b05      	ldr	r3, [pc, #20]	; (16e9c <metal_register_generic_device+0x3c>)
   16e86:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   16e88:	f103 0018 	add.w	r0, r3, #24
   16e8c:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   16e8e:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   16e90:	61d9      	str	r1, [r3, #28]
	return 0;
   16e92:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   16e94:	6011      	str	r1, [r2, #0]
}
   16e96:	e7e9      	b.n	16e6c <metal_register_generic_device+0xc>
   16e98:	20008538 	.word	0x20008538
   16e9c:	2000af9c 	.word	0x2000af9c

00016ea0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   16ea0:	b538      	push	{r3, r4, r5, lr}
   16ea2:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   16ea4:	4c0d      	ldr	r4, [pc, #52]	; (16edc <metal_init+0x3c>)
   16ea6:	2220      	movs	r2, #32
   16ea8:	4620      	mov	r0, r4
   16eaa:	2100      	movs	r1, #0
   16eac:	f004 fd2a 	bl	1b904 <memset>

	_metal.common.log_handler   = params->log_handler;
   16eb0:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   16eb2:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   16eb4:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   16eb6:	4623      	mov	r3, r4
   16eb8:	792a      	ldrb	r2, [r5, #4]
   16eba:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   16ebe:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   16ec2:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   16ec6:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   16eca:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   16ece:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   16ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   16ed6:	f000 b803 	b.w	16ee0 <metal_sys_init>
   16eda:	bf00      	nop
   16edc:	2000af9c 	.word	0x2000af9c

00016ee0 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   16ee0:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   16ee2:	4802      	ldr	r0, [pc, #8]	; (16eec <metal_sys_init+0xc>)
   16ee4:	f7ff ff88 	bl	16df8 <metal_bus_register>
	return 0;
}
   16ee8:	2000      	movs	r0, #0
   16eea:	bd08      	pop	{r3, pc}
   16eec:	20008538 	.word	0x20008538

00016ef0 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   16ef0:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   16ef2:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   16ef4:	2b06      	cmp	r3, #6
{
   16ef6:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   16ef8:	bf88      	it	hi
   16efa:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   16efc:	4b09      	ldr	r3, [pc, #36]	; (16f24 <metal_zephyr_log_handler+0x34>)
{
   16efe:	ac05      	add	r4, sp, #20
   16f00:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   16f04:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   16f08:	4807      	ldr	r0, [pc, #28]	; (16f28 <metal_zephyr_log_handler+0x38>)
   16f0a:	f003 fa8c 	bl	1a426 <printk>

	va_start(args, format);
	vprintk(format, args);
   16f0e:	4621      	mov	r1, r4
   16f10:	4628      	mov	r0, r5
	va_start(args, format);
   16f12:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   16f14:	f7f3 faca 	bl	a4ac <vprintk>
	va_end(args);
}
   16f18:	b002      	add	sp, #8
   16f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   16f1e:	b003      	add	sp, #12
   16f20:	4770      	bx	lr
   16f22:	bf00      	nop
   16f24:	0001ec64 	.word	0x0001ec64
   16f28:	00020d08 	.word	0x00020d08

00016f2c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   16f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f30:	b087      	sub	sp, #28
   16f32:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   16f34:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   16f36:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   16f38:	4293      	cmp	r3, r2
{
   16f3a:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   16f3c:	d349      	bcc.n	16fd2 <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   16f3e:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   16f40:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   16f44:	42b4      	cmp	r4, r6
   16f46:	d103      	bne.n	16f50 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   16f48:	2000      	movs	r0, #0
}
   16f4a:	b007      	add	sp, #28
   16f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   16f50:	fb0b f704 	mul.w	r7, fp, r4
   16f54:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   16f58:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   16f5a:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   16f5e:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   16f62:	bb02      	cbnz	r2, 16fa6 <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   16f64:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   16f68:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16f6c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   16f70:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   16f72:	f8dc c008 	ldr.w	ip, [ip, #8]
   16f76:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   16f78:	f10c 33ff 	add.w	r3, ip, #4294967295
   16f7c:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   16f80:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   16f84:	f1cc 0c00 	rsb	ip, ip, #0
   16f88:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   16f8c:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   16f90:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   16f94:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   16f98:	4561      	cmp	r1, ip
   16f9a:	bf28      	it	cs
   16f9c:	f04f 31ff 	movcs.w	r1, #4294967295
   16fa0:	3306      	adds	r3, #6
   16fa2:	f006 fa5a 	bl	1d45a <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   16fa6:	f858 3007 	ldr.w	r3, [r8, r7]
   16faa:	9a05      	ldr	r2, [sp, #20]
   16fac:	9302      	str	r3, [sp, #8]
   16fae:	6a2b      	ldr	r3, [r5, #32]
   16fb0:	4628      	mov	r0, r5
   16fb2:	6a1b      	ldr	r3, [r3, #32]
   16fb4:	b2a1      	uxth	r1, r4
   16fb6:	9301      	str	r3, [sp, #4]
   16fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16fba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16fbe:	9300      	str	r3, [sp, #0]
   16fc0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   16fc4:	464b      	mov	r3, r9
   16fc6:	f006 fa9e 	bl	1d506 <virtqueue_create>
		if (ret)
   16fca:	2800      	cmp	r0, #0
   16fcc:	d1bd      	bne.n	16f4a <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   16fce:	3401      	adds	r4, #1
   16fd0:	e7b8      	b.n	16f44 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   16fd2:	4801      	ldr	r0, [pc, #4]	; (16fd8 <virtio_create_virtqueues+0xac>)
   16fd4:	e7b9      	b.n	16f4a <virtio_create_virtqueues+0x1e>
   16fd6:	bf00      	nop
   16fd8:	fffff440 	.word	0xfffff440

00016fdc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   16fdc:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   16fde:	8944      	ldrh	r4, [r0, #10]
   16fe0:	428c      	cmp	r4, r1
   16fe2:	d312      	bcc.n	1700a <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   16fe4:	6a03      	ldr	r3, [r0, #32]
   16fe6:	3c01      	subs	r4, #1
   16fe8:	885d      	ldrh	r5, [r3, #2]
   16fea:	402c      	ands	r4, r5
   16fec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   16ff0:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   16ff2:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   16ff4:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   16ff8:	6a02      	ldr	r2, [r0, #32]
   16ffa:	8853      	ldrh	r3, [r2, #2]
   16ffc:	3301      	adds	r3, #1
   16ffe:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   17000:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   17002:	3301      	adds	r3, #1
   17004:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   17006:	2000      	movs	r0, #0
}
   17008:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1700a:	4801      	ldr	r0, [pc, #4]	; (17010 <virtqueue_add_consumed_buffer+0x34>)
   1700c:	e7fc      	b.n	17008 <virtqueue_add_consumed_buffer+0x2c>
   1700e:	bf00      	nop
   17010:	fffff441 	.word	0xfffff441

00017014 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   17014:	b4f0      	push	{r4, r5, r6, r7}
   17016:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   17018:	b148      	cbz	r0, 1702e <rpmsg_send_offchannel_raw+0x1a>
   1701a:	6a00      	ldr	r0, [r0, #32]
   1701c:	b138      	cbz	r0, 1702e <rpmsg_send_offchannel_raw+0x1a>
   1701e:	b133      	cbz	r3, 1702e <rpmsg_send_offchannel_raw+0x1a>
   17020:	3401      	adds	r4, #1
   17022:	d004      	beq.n	1702e <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   17024:	6f44      	ldr	r4, [r0, #116]	; 0x74
   17026:	b114      	cbz	r4, 1702e <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   17028:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   1702a:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1702c:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1702e:	4801      	ldr	r0, [pc, #4]	; (17034 <rpmsg_send_offchannel_raw+0x20>)
}
   17030:	bcf0      	pop	{r4, r5, r6, r7}
   17032:	4770      	bx	lr
   17034:	fffff82d 	.word	0xfffff82d

00017038 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   17038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1703c:	460e      	mov	r6, r1
   1703e:	4690      	mov	r8, r2
   17040:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   17042:	4605      	mov	r5, r0
   17044:	2800      	cmp	r0, #0
   17046:	d06a      	beq.n	1711e <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   17048:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1704c:	4638      	mov	r0, r7
   1704e:	f006 fbec 	bl	1d82a <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   17052:	1c63      	adds	r3, r4, #1
   17054:	d11a      	bne.n	1708c <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   17056:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   17058:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1705c:	095a      	lsrs	r2, r3, #5
   1705e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   17062:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   17066:	f003 011f 	and.w	r1, r3, #31
   1706a:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1706e:	07e4      	lsls	r4, r4, #31
   17070:	d407      	bmi.n	17082 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   17072:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   17076:	2301      	movs	r3, #1
   17078:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1707a:	4313      	orrs	r3, r2
   1707c:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   17080:	e01d      	b.n	170be <rpmsg_create_ept+0x86>
	     bit++)
   17082:	3301      	adds	r3, #1
	for (bit = start;
   17084:	2b80      	cmp	r3, #128	; 0x80
   17086:	d1e9      	bne.n	1705c <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   17088:	4c27      	ldr	r4, [pc, #156]	; (17128 <rpmsg_create_ept+0xf0>)
   1708a:	e044      	b.n	17116 <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1708c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   17090:	d315      	bcc.n	170be <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   17092:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   17096:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   17098:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   1709c:	d83a      	bhi.n	17114 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1709e:	0958      	lsrs	r0, r3, #5
   170a0:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   170a4:	f003 031f 	and.w	r3, r3, #31
   170a8:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   170ac:	07d2      	lsls	r2, r2, #31
   170ae:	d4eb      	bmi.n	17088 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   170b0:	2201      	movs	r2, #1
   170b2:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   170b6:	ea43 030c 	orr.w	r3, r3, ip
   170ba:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   170be:	491b      	ldr	r1, [pc, #108]	; (1712c <rpmsg_create_ept+0xf4>)
   170c0:	2220      	movs	r2, #32
   170c2:	f1b8 0f00 	cmp.w	r8, #0
   170c6:	bf18      	it	ne
   170c8:	4641      	movne	r1, r8
   170ca:	4628      	mov	r0, r5
   170cc:	f004 fb9f 	bl	1b80e <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   170d0:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   170d2:	4629      	mov	r1, r5
   170d4:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   170d6:	9b07      	ldr	r3, [sp, #28]
   170d8:	4630      	mov	r0, r6
   170da:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   170dc:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   170de:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   170e0:	632b      	str	r3, [r5, #48]	; 0x30
   170e2:	f006 fc1c 	bl	1d91e <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   170e6:	4638      	mov	r0, r7
   170e8:	f001 ffc8 	bl	1907c <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   170ec:	782c      	ldrb	r4, [r5, #0]
   170ee:	b174      	cbz	r4, 1710e <rpmsg_create_ept+0xd6>
   170f0:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   170f4:	b15c      	cbz	r4, 1710e <rpmsg_create_ept+0xd6>
   170f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   170f8:	3301      	adds	r3, #1
   170fa:	d112      	bne.n	17122 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   170fc:	2100      	movs	r1, #0
   170fe:	4628      	mov	r0, r5
   17100:	f006 fbc4 	bl	1d88c <rpmsg_send_ns_message>

	if (status)
   17104:	4604      	mov	r4, r0
   17106:	b110      	cbz	r0, 1710e <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   17108:	4628      	mov	r0, r5
   1710a:	f006 fb94 	bl	1d836 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1710e:	4620      	mov	r0, r4
   17110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17114:	4c06      	ldr	r4, [pc, #24]	; (17130 <rpmsg_create_ept+0xf8>)
   17116:	4638      	mov	r0, r7
   17118:	f001 ffb0 	bl	1907c <z_impl_k_sem_give>
}
   1711c:	e7f7      	b.n	1710e <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   1711e:	4c04      	ldr	r4, [pc, #16]	; (17130 <rpmsg_create_ept+0xf8>)
   17120:	e7f5      	b.n	1710e <rpmsg_create_ept+0xd6>
   17122:	2400      	movs	r4, #0
   17124:	e7f3      	b.n	1710e <rpmsg_create_ept+0xd6>
   17126:	bf00      	nop
   17128:	fffff829 	.word	0xfffff829
   1712c:	000226c2 	.word	0x000226c2
   17130:	fffff82d 	.word	0xfffff82d

00017134 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   17134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17138:	4605      	mov	r5, r0
   1713a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   1713c:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1713e:	6a03      	ldr	r3, [r0, #32]
   17140:	b08d      	sub	sp, #52	; 0x34
   17142:	681b      	ldr	r3, [r3, #0]
   17144:	4692      	mov	sl, r2
   17146:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   1714a:	9103      	str	r1, [sp, #12]
   1714c:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   1714e:	0743      	lsls	r3, r0, #29
   17150:	d57b      	bpl.n	1724a <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   17152:	f643 2398 	movw	r3, #15000	; 0x3a98
   17156:	2f00      	cmp	r7, #0
   17158:	bf18      	it	ne
   1715a:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   1715c:	f105 0858 	add.w	r8, r5, #88	; 0x58
   17160:	4640      	mov	r0, r8
   17162:	f006 fc00 	bl	1d966 <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   17166:	4628      	mov	r0, r5
   17168:	f006 fcc2 	bl	1daf0 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   1716c:	4681      	mov	r9, r0
   1716e:	b130      	cbz	r0, 1717e <rpmsg_virtio_send_offchannel_raw+0x4a>
   17170:	42b0      	cmp	r0, r6
   17172:	da04      	bge.n	1717e <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   17174:	4640      	mov	r0, r8
   17176:	f006 fbf4 	bl	1d962 <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   1717a:	4e42      	ldr	r6, [pc, #264]	; (17284 <rpmsg_virtio_send_offchannel_raw+0x150>)
   1717c:	e061      	b.n	17242 <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   1717e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   17180:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   17182:	b9f3      	cbnz	r3, 171c2 <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   17184:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17188:	f10d 0212 	add.w	r2, sp, #18
   1718c:	a905      	add	r1, sp, #20
   1718e:	f006 fa4a 	bl	1d626 <virtqueue_get_buffer>
		if (!data) {
   17192:	4604      	mov	r4, r0
   17194:	b948      	cbnz	r0, 171aa <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   17196:	f44f 7100 	mov.w	r1, #512	; 0x200
   1719a:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   1719e:	f006 fcba 	bl	1db16 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   171a2:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   171a6:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   171a8:	9305      	str	r3, [sp, #20]
   171aa:	4640      	mov	r0, r8
   171ac:	f006 fbd9 	bl	1d962 <k_sem_give>
		if (buffer || !tick_count)
   171b0:	2c00      	cmp	r4, #0
   171b2:	d14e      	bne.n	17252 <rpmsg_virtio_send_offchannel_raw+0x11e>
   171b4:	2f00      	cmp	r7, #0
   171b6:	d04a      	beq.n	1724e <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   171b8:	f1b9 0f00 	cmp.w	r9, #0
   171bc:	d1dd      	bne.n	1717a <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   171be:	3f01      	subs	r7, #1
	while (1) {
   171c0:	e7ce      	b.n	17160 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   171c2:	2b01      	cmp	r3, #1
   171c4:	d108      	bne.n	171d8 <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   171c6:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   171ca:	aa05      	add	r2, sp, #20
   171cc:	f10d 0112 	add.w	r1, sp, #18
   171d0:	f006 fa63 	bl	1d69a <virtqueue_get_available_buffer>
   171d4:	4604      	mov	r4, r0
   171d6:	e7e8      	b.n	171aa <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   171d8:	2400      	movs	r4, #0
   171da:	e7e6      	b.n	171aa <rpmsg_virtio_send_offchannel_raw+0x76>
   171dc:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   171de:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   171e0:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   171e4:	1ac9      	subs	r1, r1, r3
   171e6:	4281      	cmp	r1, r0
   171e8:	bf28      	it	cs
   171ea:	f04f 31ff 	movcs.w	r1, #4294967295
   171ee:	4633      	mov	r3, r6
   171f0:	465a      	mov	r2, fp
   171f2:	4638      	mov	r0, r7
   171f4:	f006 f8f6 	bl	1d3e4 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   171f8:	4286      	cmp	r6, r0
   171fa:	d000      	beq.n	171fe <rpmsg_virtio_send_offchannel_raw+0xca>
   171fc:	e7fe      	b.n	171fc <rpmsg_virtio_send_offchannel_raw+0xc8>
   171fe:	4640      	mov	r0, r8
   17200:	f006 fbb1 	bl	1d966 <__metal_mutex_acquire>
   17204:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   17206:	9a05      	ldr	r2, [sp, #20]
   17208:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1720a:	b953      	cbnz	r3, 17222 <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   1720c:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   17210:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17214:	2201      	movs	r2, #1
   17216:	9400      	str	r4, [sp, #0]
   17218:	a906      	add	r1, sp, #24
   1721a:	f006 f9a4 	bl	1d566 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1721e:	b148      	cbz	r0, 17234 <rpmsg_virtio_send_offchannel_raw+0x100>
   17220:	e7fe      	b.n	17220 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   17222:	2b01      	cmp	r3, #1
   17224:	d106      	bne.n	17234 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   17226:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1722a:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1722e:	f7ff fed5 	bl	16fdc <virtqueue_add_consumed_buffer>
   17232:	e7f4      	b.n	1721e <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   17234:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17238:	f006 faa9 	bl	1d78e <virtqueue_kick>
   1723c:	4640      	mov	r0, r8
   1723e:	f006 fb90 	bl	1d962 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   17242:	4630      	mov	r0, r6
   17244:	b00d      	add	sp, #52	; 0x34
   17246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   1724a:	4e0f      	ldr	r6, [pc, #60]	; (17288 <rpmsg_virtio_send_offchannel_raw+0x154>)
   1724c:	e7f9      	b.n	17242 <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   1724e:	4e0f      	ldr	r6, [pc, #60]	; (1728c <rpmsg_virtio_send_offchannel_raw+0x158>)
   17250:	e7f7      	b.n	17242 <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   17252:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   17254:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   17258:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   1725a:	2300      	movs	r3, #0
   1725c:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1725e:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   17260:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   17262:	4281      	cmp	r1, r0
   17264:	bf28      	it	cs
   17266:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   1726a:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1726c:	4638      	mov	r0, r7
   1726e:	2310      	movs	r3, #16
   17270:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   17272:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   17276:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1727a:	f006 f8b3 	bl	1d3e4 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1727e:	2810      	cmp	r0, #16
   17280:	d0ac      	beq.n	171dc <rpmsg_virtio_send_offchannel_raw+0xa8>
   17282:	e7fe      	b.n	17282 <rpmsg_virtio_send_offchannel_raw+0x14e>
   17284:	fffff82b 	.word	0xfffff82b
   17288:	fffff82c 	.word	0xfffff82c
   1728c:	fffff82e 	.word	0xfffff82e

00017290 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   17290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17294:	460d      	mov	r5, r1
   17296:	b088      	sub	sp, #32
   17298:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   1729a:	2100      	movs	r1, #0
   1729c:	227c      	movs	r2, #124	; 0x7c
{
   1729e:	4604      	mov	r4, r0
   172a0:	461e      	mov	r6, r3
   172a2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   172a6:	f004 fb2d 	bl	1b904 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   172aa:	2201      	movs	r2, #1
   172ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
   172b0:	4611      	mov	r1, r2
   172b2:	f006 fccd 	bl	1dc50 <z_impl_k_sem_init>
   172b6:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   172ba:	4b5d      	ldr	r3, [pc, #372]	; (17430 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   172bc:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   172c0:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   172c2:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   172c4:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   172c6:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   172c8:	d020      	beq.n	1730c <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   172ca:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   172cc:	6a03      	ldr	r3, [r0, #32]
   172ce:	689b      	ldr	r3, [r3, #8]
   172d0:	4798      	blx	r3
   172d2:	2300      	movs	r3, #0
   172d4:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   172d6:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   172da:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   172dc:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   172e0:	f1b8 0f00 	cmp.w	r8, #0
   172e4:	d01e      	beq.n	17324 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   172e6:	f1b8 0f01 	cmp.w	r8, #1
   172ea:	d133      	bne.n	17354 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   172ec:	4b51      	ldr	r3, [pc, #324]	; (17434 <rpmsg_init_vdev+0x1a4>)
   172ee:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   172f0:	4b51      	ldr	r3, [pc, #324]	; (17438 <rpmsg_init_vdev+0x1a8>)
   172f2:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   172f4:	4b51      	ldr	r3, [pc, #324]	; (1743c <rpmsg_init_vdev+0x1ac>)
   172f6:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   172f8:	4b51      	ldr	r3, [pc, #324]	; (17440 <rpmsg_init_vdev+0x1b0>)
   172fa:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   172fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   172fe:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   17300:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   17302:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   17306:	e023      	b.n	17350 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   17308:	0743      	lsls	r3, r0, #29
   1730a:	d4de      	bmi.n	172ca <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   1730c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1730e:	6a03      	ldr	r3, [r0, #32]
   17310:	681b      	ldr	r3, [r3, #0]
   17312:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   17314:	0642      	lsls	r2, r0, #25
   17316:	d5f7      	bpl.n	17308 <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   17318:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1731a:	2100      	movs	r1, #0
   1731c:	6a03      	ldr	r3, [r0, #32]
   1731e:	685b      	ldr	r3, [r3, #4]
   17320:	4798      	blx	r3
}
   17322:	e7f3      	b.n	1730c <rpmsg_init_vdev+0x7c>
		if (!shpool)
   17324:	f1b9 0f00 	cmp.w	r9, #0
   17328:	d07d      	beq.n	17426 <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   1732a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1732e:	2b00      	cmp	r3, #0
   17330:	d07b      	beq.n	1742a <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   17332:	4b41      	ldr	r3, [pc, #260]	; (17438 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   17334:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   17338:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   1733a:	4b3e      	ldr	r3, [pc, #248]	; (17434 <rpmsg_init_vdev+0x1a4>)
   1733c:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   1733e:	4b40      	ldr	r3, [pc, #256]	; (17440 <rpmsg_init_vdev+0x1b0>)
   17340:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   17342:	4b3e      	ldr	r3, [pc, #248]	; (1743c <rpmsg_init_vdev+0x1ac>)
   17344:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   17346:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   17348:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   1734a:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1734c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   17350:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   17354:	ab04      	add	r3, sp, #16
   17356:	9300      	str	r3, [sp, #0]
   17358:	2202      	movs	r2, #2
   1735a:	2100      	movs	r1, #0
   1735c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   1735e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   17362:	ab02      	add	r3, sp, #8
   17364:	f7ff fde2 	bl	16f2c <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   17368:	4607      	mov	r7, r0
   1736a:	2800      	cmp	r0, #0
   1736c:	d157      	bne.n	1741e <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   1736e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   17372:	f006 f9e6 	bl	1d742 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   17376:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   17378:	681a      	ldr	r2, [r3, #0]
   1737a:	699b      	ldr	r3, [r3, #24]
   1737c:	6296      	str	r6, [r2, #40]	; 0x28
   1737e:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   17380:	f1b8 0f00 	cmp.w	r8, #0
   17384:	d108      	bne.n	17398 <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   17386:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1738a:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   1738c:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1738e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   17392:	895b      	ldrh	r3, [r3, #10]
   17394:	4553      	cmp	r3, sl
   17396:	d81f      	bhi.n	173d8 <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   17398:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1739c:	e9c4 4400 	strd	r4, r4, [r4]
   173a0:	b18b      	cbz	r3, 173c6 <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   173a2:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   173a6:	4927      	ldr	r1, [pc, #156]	; (17444 <rpmsg_init_vdev+0x1b4>)
   173a8:	2220      	movs	r2, #32
   173aa:	4628      	mov	r0, r5
   173ac:	f004 fa2f 	bl	1b80e <strncpy>
	ept->addr = src;
   173b0:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   173b2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   173b6:	4b24      	ldr	r3, [pc, #144]	; (17448 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   173b8:	4629      	mov	r1, r5
   173ba:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   173bc:	2300      	movs	r3, #0
   173be:	4620      	mov	r0, r4
   173c0:	63a3      	str	r3, [r4, #56]	; 0x38
   173c2:	f006 faac 	bl	1d91e <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   173c6:	f1b8 0f00 	cmp.w	r8, #0
   173ca:	d128      	bne.n	1741e <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   173cc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   173ce:	2104      	movs	r1, #4
   173d0:	6a03      	ldr	r3, [r0, #32]
   173d2:	685b      	ldr	r3, [r3, #4]
   173d4:	4798      	blx	r3
}
   173d6:	e022      	b.n	1741e <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   173d8:	f44f 7100 	mov.w	r1, #512	; 0x200
   173dc:	4648      	mov	r0, r9
   173de:	f006 fb9a 	bl	1db16 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   173e2:	4605      	mov	r5, r0
   173e4:	b1c8      	cbz	r0, 1741a <rpmsg_init_vdev+0x18a>
   173e6:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   173e8:	9006      	str	r0, [sp, #24]
   173ea:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   173ec:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   173ee:	f44f 7300 	mov.w	r3, #512	; 0x200
   173f2:	4281      	cmp	r1, r0
   173f4:	bf28      	it	cs
   173f6:	f04f 31ff 	movcs.w	r1, #4294967295
   173fa:	2200      	movs	r2, #0
   173fc:	4630      	mov	r0, r6
   173fe:	f006 f82c 	bl	1d45a <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   17402:	2301      	movs	r3, #1
   17404:	2200      	movs	r2, #0
   17406:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1740a:	9500      	str	r5, [sp, #0]
   1740c:	a906      	add	r1, sp, #24
   1740e:	f006 f8aa 	bl	1d566 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   17412:	b918      	cbnz	r0, 1741c <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17414:	f10a 0a01 	add.w	sl, sl, #1
   17418:	e7b9      	b.n	1738e <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   1741a:	480c      	ldr	r0, [pc, #48]	; (1744c <rpmsg_init_vdev+0x1bc>)
   1741c:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   1741e:	4638      	mov	r0, r7
   17420:	b008      	add	sp, #32
   17422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   17426:	4f0a      	ldr	r7, [pc, #40]	; (17450 <rpmsg_init_vdev+0x1c0>)
   17428:	e7f9      	b.n	1741e <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   1742a:	4f08      	ldr	r7, [pc, #32]	; (1744c <rpmsg_init_vdev+0x1bc>)
   1742c:	e7f7      	b.n	1741e <rpmsg_init_vdev+0x18e>
   1742e:	bf00      	nop
   17430:	00017135 	.word	0x00017135
   17434:	00022651 	.word	0x00022651
   17438:	0002264b 	.word	0x0002264b
   1743c:	0001d961 	.word	0x0001d961
   17440:	0001da31 	.word	0x0001da31
   17444:	00022657 	.word	0x00022657
   17448:	0001d973 	.word	0x0001d973
   1744c:	fffff82e 	.word	0xfffff82e
   17450:	fffff82d 	.word	0xfffff82d

00017454 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   17454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17456:	4b10      	ldr	r3, [pc, #64]	; (17498 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   17458:	4f10      	ldr	r7, [pc, #64]	; (1749c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1745a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1745e:	3001      	adds	r0, #1
   17460:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17464:	42ae      	cmp	r6, r5
   17466:	d800      	bhi.n	1746a <z_sys_init_run_level+0x16>
		}
	}
}
   17468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1746a:	e9d5 3400 	ldrd	r3, r4, [r5]
   1746e:	4620      	mov	r0, r4
   17470:	4798      	blx	r3
   17472:	b170      	cbz	r0, 17492 <z_sys_init_run_level+0x3e>
   17474:	b16c      	cbz	r4, 17492 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   17476:	2301      	movs	r3, #1
				(dev - __device_start));
   17478:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1747a:	4a09      	ldr	r2, [pc, #36]	; (174a0 <z_sys_init_run_level+0x4c>)
   1747c:	1124      	asrs	r4, r4, #4
   1747e:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   17480:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17484:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   17488:	fa03 f404 	lsl.w	r4, r3, r4
   1748c:	4304      	orrs	r4, r0
   1748e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17492:	3508      	adds	r5, #8
   17494:	e7e6      	b.n	17464 <z_sys_init_run_level+0x10>
   17496:	bf00      	nop
   17498:	0001ec84 	.word	0x0001ec84
   1749c:	20008584 	.word	0x20008584
   174a0:	200085f4 	.word	0x200085f4

000174a4 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   174a4:	4b08      	ldr	r3, [pc, #32]	; (174c8 <z_device_ready+0x24>)
   174a6:	1ac0      	subs	r0, r0, r3
   174a8:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   174aa:	4b08      	ldr	r3, [pc, #32]	; (174cc <z_device_ready+0x28>)
   174ac:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   174ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   174b2:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   174b4:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   174b8:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   174bc:	4210      	tst	r0, r2
}
   174be:	bf0c      	ite	eq
   174c0:	4618      	moveq	r0, r3
   174c2:	2000      	movne	r0, #0
   174c4:	4770      	bx	lr
   174c6:	bf00      	nop
   174c8:	20008584 	.word	0x20008584
   174cc:	200085f4 	.word	0x200085f4

000174d0 <z_impl_device_get_binding>:
{
   174d0:	b570      	push	{r4, r5, r6, lr}
   174d2:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   174d4:	4c0f      	ldr	r4, [pc, #60]	; (17514 <z_impl_device_get_binding+0x44>)
   174d6:	4e10      	ldr	r6, [pc, #64]	; (17518 <z_impl_device_get_binding+0x48>)
   174d8:	42b4      	cmp	r4, r6
   174da:	d104      	bne.n	174e6 <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   174dc:	4c0d      	ldr	r4, [pc, #52]	; (17514 <z_impl_device_get_binding+0x44>)
   174de:	42b4      	cmp	r4, r6
   174e0:	d10a      	bne.n	174f8 <z_impl_device_get_binding+0x28>
	return NULL;
   174e2:	2400      	movs	r4, #0
   174e4:	e014      	b.n	17510 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   174e6:	4620      	mov	r0, r4
   174e8:	f7ff ffdc 	bl	174a4 <z_device_ready>
   174ec:	b110      	cbz	r0, 174f4 <z_impl_device_get_binding+0x24>
   174ee:	6823      	ldr	r3, [r4, #0]
   174f0:	42ab      	cmp	r3, r5
   174f2:	d00d      	beq.n	17510 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   174f4:	3410      	adds	r4, #16
   174f6:	e7ef      	b.n	174d8 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   174f8:	4620      	mov	r0, r4
   174fa:	f7ff ffd3 	bl	174a4 <z_device_ready>
   174fe:	b908      	cbnz	r0, 17504 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   17500:	3410      	adds	r4, #16
   17502:	e7ec      	b.n	174de <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17504:	4628      	mov	r0, r5
   17506:	6821      	ldr	r1, [r4, #0]
   17508:	f004 f9a3 	bl	1b852 <strcmp>
   1750c:	2800      	cmp	r0, #0
   1750e:	d1f7      	bne.n	17500 <z_impl_device_get_binding+0x30>
}
   17510:	4620      	mov	r0, r4
   17512:	bd70      	pop	{r4, r5, r6, pc}
   17514:	20008584 	.word	0x20008584
   17518:	200085f4 	.word	0x200085f4

0001751c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1751c:	4b01      	ldr	r3, [pc, #4]	; (17524 <z_impl_z_errno+0x8>)
   1751e:	6898      	ldr	r0, [r3, #8]
}
   17520:	3070      	adds	r0, #112	; 0x70
   17522:	4770      	bx	lr
   17524:	2000afc4 	.word	0x2000afc4

00017528 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1752a:	4604      	mov	r4, r0
   1752c:	460e      	mov	r6, r1
	__asm__ volatile(
   1752e:	f04f 0320 	mov.w	r3, #32
   17532:	f3ef 8711 	mrs	r7, BASEPRI
   17536:	f383 8811 	msr	BASEPRI, r3
   1753a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1753e:	f001 fd97 	bl	19070 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17542:	2200      	movs	r2, #0
   17544:	2c04      	cmp	r4, #4
   17546:	bf98      	it	ls
   17548:	4b1d      	ldrls	r3, [pc, #116]	; (175c0 <z_fatal_error+0x98>)
   1754a:	4605      	mov	r5, r0
	switch (reason) {
   1754c:	bf94      	ite	ls
   1754e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   17552:	4b1c      	ldrhi	r3, [pc, #112]	; (175c4 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17554:	9200      	str	r2, [sp, #0]
   17556:	2145      	movs	r1, #69	; 0x45
   17558:	4622      	mov	r2, r4
   1755a:	481b      	ldr	r0, [pc, #108]	; (175c8 <z_fatal_error+0xa0>)
   1755c:	f002 ff63 	bl	1a426 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   17560:	b13e      	cbz	r6, 17572 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   17562:	69f3      	ldr	r3, [r6, #28]
   17564:	f3c3 0308 	ubfx	r3, r3, #0, #9
   17568:	b11b      	cbz	r3, 17572 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   1756a:	2145      	movs	r1, #69	; 0x45
   1756c:	4817      	ldr	r0, [pc, #92]	; (175cc <z_fatal_error+0xa4>)
   1756e:	f002 ff5a 	bl	1a426 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   17572:	b135      	cbz	r5, 17582 <z_fatal_error+0x5a>
   17574:	4628      	mov	r0, r5
   17576:	f006 fb88 	bl	1dc8a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1757a:	4603      	mov	r3, r0
   1757c:	b108      	cbz	r0, 17582 <z_fatal_error+0x5a>
   1757e:	7802      	ldrb	r2, [r0, #0]
   17580:	b902      	cbnz	r2, 17584 <z_fatal_error+0x5c>
		thread_name = "unknown";
   17582:	4b13      	ldr	r3, [pc, #76]	; (175d0 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   17584:	462a      	mov	r2, r5
   17586:	2145      	movs	r1, #69	; 0x45
   17588:	4812      	ldr	r0, [pc, #72]	; (175d4 <z_fatal_error+0xac>)
   1758a:	f002 ff4c 	bl	1a426 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1758e:	4631      	mov	r1, r6
   17590:	4620      	mov	r0, r4
   17592:	f7ff f8ad 	bl	166f0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   17596:	2c04      	cmp	r4, #4
   17598:	d108      	bne.n	175ac <z_fatal_error+0x84>
   1759a:	490f      	ldr	r1, [pc, #60]	; (175d8 <z_fatal_error+0xb0>)
   1759c:	480f      	ldr	r0, [pc, #60]	; (175dc <z_fatal_error+0xb4>)
   1759e:	228e      	movs	r2, #142	; 0x8e
   175a0:	f002 ff41 	bl	1a426 <printk>
   175a4:	218e      	movs	r1, #142	; 0x8e
   175a6:	480c      	ldr	r0, [pc, #48]	; (175d8 <z_fatal_error+0xb0>)
   175a8:	f003 f9e3 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   175ac:	f387 8811 	msr	BASEPRI, r7
   175b0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   175b4:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   175b6:	b003      	add	sp, #12
   175b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   175bc:	f7f6 bc34 	b.w	de28 <z_impl_k_thread_abort>
   175c0:	0001ec9c 	.word	0x0001ec9c
   175c4:	0002265a 	.word	0x0002265a
   175c8:	00022670 	.word	0x00022670
   175cc:	0002269d 	.word	0x0002269d
   175d0:	00022668 	.word	0x00022668
   175d4:	000226c3 	.word	0x000226c3
   175d8:	000226e0 	.word	0x000226e0
   175dc:	0001f98f 	.word	0x0001f98f

000175e0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   175e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175e2:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   175e4:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   175e6:	4e15      	ldr	r6, [pc, #84]	; (1763c <idle+0x5c>)
	__asm__ volatile(
   175e8:	f04f 0220 	mov.w	r2, #32
   175ec:	f3ef 8311 	mrs	r3, BASEPRI
   175f0:	f382 8811 	msr	BASEPRI, r2
   175f4:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   175f8:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   175fa:	b188      	cbz	r0, 17620 <idle+0x40>
			cpu->pending_abort = NULL;
   175fc:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   175fe:	f383 8811 	msr	BASEPRI, r3
   17602:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   17606:	f001 f93b 	bl	18880 <z_thread_single_abort>
	__asm__ volatile(
   1760a:	f04f 0320 	mov.w	r3, #32
   1760e:	f3ef 8011 	mrs	r0, BASEPRI
   17612:	f383 8811 	msr	BASEPRI, r3
   17616:	f3bf 8f6f 	isb	sy
   1761a:	f006 fadf 	bl	1dbdc <z_reschedule_irqlock>
			continue;
   1761e:	e7e3      	b.n	175e8 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   17620:	f002 f998 	bl	19954 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17624:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   17626:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17628:	2802      	cmp	r0, #2
   1762a:	bfd8      	it	le
   1762c:	4608      	movle	r0, r1
   1762e:	f002 f9c7 	bl	199c0 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   17632:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   17634:	f7f6 f93e 	bl	d8b4 <arch_cpu_idle>
}
   17638:	e7d6      	b.n	175e8 <idle+0x8>
   1763a:	bf00      	nop
   1763c:	2000afc4 	.word	0x2000afc4

00017640 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17640:	4802      	ldr	r0, [pc, #8]	; (1764c <z_bss_zero+0xc>)
   17642:	4a03      	ldr	r2, [pc, #12]	; (17650 <z_bss_zero+0x10>)
   17644:	2100      	movs	r1, #0
   17646:	1a12      	subs	r2, r2, r0
   17648:	f004 b95c 	b.w	1b904 <memset>
   1764c:	200087f0 	.word	0x200087f0
   17650:	2000c7f0 	.word	0x2000c7f0

00017654 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   17654:	2201      	movs	r2, #1
{
   17656:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   17658:	4b09      	ldr	r3, [pc, #36]	; (17680 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1765a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1765c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1765e:	f7ff fef9 	bl	17454 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17662:	f002 f819 	bl	19698 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   17666:	2003      	movs	r0, #3
   17668:	f7ff fef4 	bl	17454 <z_sys_init_run_level>

	z_init_static_threads();
   1766c:	f001 fe76 	bl	1935c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17670:	f7f1 fcfe 	bl	9070 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17674:	4a03      	ldr	r2, [pc, #12]	; (17684 <bg_thread_main+0x30>)
   17676:	7b13      	ldrb	r3, [r2, #12]
   17678:	f023 0301 	bic.w	r3, r3, #1
   1767c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1767e:	bd08      	pop	{r3, pc}
   17680:	2000c7ee 	.word	0x2000c7ee
   17684:	2000a4c8 	.word	0x2000a4c8

00017688 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   17688:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1768c:	4b34      	ldr	r3, [pc, #208]	; (17760 <z_cstart+0xd8>)
   1768e:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   17690:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17694:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   17698:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1769c:	2400      	movs	r4, #0
   1769e:	23e0      	movs	r3, #224	; 0xe0
   176a0:	4d30      	ldr	r5, [pc, #192]	; (17764 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   176a2:	f04f 0b01 	mov.w	fp, #1
   176a6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   176aa:	77ec      	strb	r4, [r5, #31]
   176ac:	762c      	strb	r4, [r5, #24]
   176ae:	766c      	strb	r4, [r5, #25]
   176b0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   176b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   176b4:	4e2c      	ldr	r6, [pc, #176]	; (17768 <z_cstart+0xe0>)
   176b6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   176ba:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   176bc:	f7f6 fb7c 	bl	ddb8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   176c0:	f7f6 f8f2 	bl	d8a8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   176c4:	f04f 33ff 	mov.w	r3, #4294967295
   176c8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   176ca:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   176cc:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   176d0:	4d26      	ldr	r5, [pc, #152]	; (1776c <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   176d2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   176d6:	ab06      	add	r3, sp, #24
   176d8:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   176da:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   176dc:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   176e0:	f7ff feb8 	bl	17454 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   176e4:	2001      	movs	r0, #1
   176e6:	f7ff feb5 	bl	17454 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   176ea:	f8df a084 	ldr.w	sl, [pc, #132]	; 17770 <z_cstart+0xe8>
	z_sched_init();
   176ee:	f001 fb77 	bl	18de0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   176f2:	4b20      	ldr	r3, [pc, #128]	; (17774 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   176f4:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   176f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   176fa:	491f      	ldr	r1, [pc, #124]	; (17778 <z_cstart+0xf0>)
   176fc:	9305      	str	r3, [sp, #20]
   176fe:	4630      	mov	r0, r6
   17700:	4653      	mov	r3, sl
   17702:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   17706:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1770a:	9400      	str	r4, [sp, #0]
   1770c:	f001 fd74 	bl	191f8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17710:	7b73      	ldrb	r3, [r6, #13]
   17712:	4680      	mov	r8, r0
   17714:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   17718:	4630      	mov	r0, r6
   1771a:	7373      	strb	r3, [r6, #13]
   1771c:	f000 feec 	bl	184f8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   17720:	230f      	movs	r3, #15
   17722:	4f16      	ldr	r7, [pc, #88]	; (1777c <z_cstart+0xf4>)
   17724:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17728:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1772c:	4914      	ldr	r1, [pc, #80]	; (17780 <z_cstart+0xf8>)
   1772e:	4b15      	ldr	r3, [pc, #84]	; (17784 <z_cstart+0xfc>)
   17730:	4638      	mov	r0, r7
   17732:	e9cd b404 	strd	fp, r4, [sp, #16]
   17736:	e9cd 5400 	strd	r5, r4, [sp]
   1773a:	f001 fd5d 	bl	191f8 <z_setup_new_thread>
   1773e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17740:	4652      	mov	r2, sl
   17742:	f023 0304 	bic.w	r3, r3, #4
   17746:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   17748:	f105 031c 	add.w	r3, r5, #28
   1774c:	4641      	mov	r1, r8
   1774e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   17750:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   17754:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   17756:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   17758:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1775c:	f7f6 f88a 	bl	d874 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17760:	2000ee48 	.word	0x2000ee48
   17764:	e000ed00 	.word	0xe000ed00
   17768:	2000a4c8 	.word	0x2000a4c8
   1776c:	2000afc4 	.word	0x2000afc4
   17770:	00017655 	.word	0x00017655
   17774:	0002274c 	.word	0x0002274c
   17778:	2000e908 	.word	0x2000e908
   1777c:	2000a438 	.word	0x2000a438
   17780:	2000ed08 	.word	0x2000ed08
   17784:	000175e1 	.word	0x000175e1

00017788 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   17788:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1778a:	4c0c      	ldr	r4, [pc, #48]	; (177bc <statics_init+0x34>)
   1778c:	4d0c      	ldr	r5, [pc, #48]	; (177c0 <statics_init+0x38>)
   1778e:	4e0d      	ldr	r6, [pc, #52]	; (177c4 <statics_init+0x3c>)
   17790:	42ac      	cmp	r4, r5
   17792:	d908      	bls.n	177a6 <statics_init+0x1e>
   17794:	4631      	mov	r1, r6
   17796:	480c      	ldr	r0, [pc, #48]	; (177c8 <statics_init+0x40>)
   17798:	2215      	movs	r2, #21
   1779a:	f002 fe44 	bl	1a426 <printk>
   1779e:	2115      	movs	r1, #21
   177a0:	4630      	mov	r0, r6
   177a2:	f003 f8e6 	bl	1a972 <assert_post_action>
   177a6:	42ac      	cmp	r4, r5
   177a8:	d301      	bcc.n	177ae <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   177aa:	2000      	movs	r0, #0
   177ac:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   177ae:	4620      	mov	r0, r4
   177b0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   177b4:	f006 f9c4 	bl	1db40 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   177b8:	3418      	adds	r4, #24
   177ba:	e7e9      	b.n	17790 <statics_init+0x8>
   177bc:	2000864c 	.word	0x2000864c
   177c0:	20008664 	.word	0x20008664
   177c4:	00022754 	.word	0x00022754
   177c8:	0001f98f 	.word	0x0001f98f

000177cc <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   177cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177d0:	b085      	sub	sp, #20
   177d2:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   177d6:	4606      	mov	r6, r0
   177d8:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   177da:	4648      	mov	r0, r9
   177dc:	4639      	mov	r1, r7
{
   177de:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   177e0:	f006 fab4 	bl	1dd4c <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   177e4:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   177e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   177ec:	f04f 0320 	mov.w	r3, #32
   177f0:	f3ef 8411 	mrs	r4, BASEPRI
   177f4:	f383 8811 	msr	BASEPRI, r3
   177f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   177fc:	4628      	mov	r0, r5
   177fe:	f001 fe29 	bl	19454 <z_spin_lock_valid>
   17802:	b940      	cbnz	r0, 17816 <k_heap_aligned_alloc+0x4a>
   17804:	4932      	ldr	r1, [pc, #200]	; (178d0 <k_heap_aligned_alloc+0x104>)
   17806:	4833      	ldr	r0, [pc, #204]	; (178d4 <k_heap_aligned_alloc+0x108>)
   17808:	227c      	movs	r2, #124	; 0x7c
   1780a:	f002 fe0c 	bl	1a426 <printk>
   1780e:	217c      	movs	r1, #124	; 0x7c
   17810:	482f      	ldr	r0, [pc, #188]	; (178d0 <k_heap_aligned_alloc+0x104>)
   17812:	f003 f8ae 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17816:	4628      	mov	r0, r5
   17818:	f001 fe38 	bl	1948c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1781c:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17820:	b15b      	cbz	r3, 1783a <k_heap_aligned_alloc+0x6e>
   17822:	ea59 0307 	orrs.w	r3, r9, r7
   17826:	d008      	beq.n	1783a <k_heap_aligned_alloc+0x6e>
   17828:	492b      	ldr	r1, [pc, #172]	; (178d8 <k_heap_aligned_alloc+0x10c>)
   1782a:	482a      	ldr	r0, [pc, #168]	; (178d4 <k_heap_aligned_alloc+0x108>)
   1782c:	2224      	movs	r2, #36	; 0x24
   1782e:	f002 fdfa 	bl	1a426 <printk>
   17832:	2124      	movs	r1, #36	; 0x24
   17834:	4828      	ldr	r0, [pc, #160]	; (178d8 <k_heap_aligned_alloc+0x10c>)
   17836:	f003 f89c 	bl	1a972 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1783a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 178d0 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1783e:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17842:	4642      	mov	r2, r8
   17844:	4659      	mov	r1, fp
   17846:	4630      	mov	r0, r6
   17848:	f7f3 f928 	bl	aa9c <sys_heap_aligned_alloc>
   1784c:	4607      	mov	r7, r0
		now = z_tick_get();
   1784e:	f002 f993 	bl	19b78 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   17852:	b1a7      	cbz	r7, 1787e <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17854:	4628      	mov	r0, r5
   17856:	f001 fe0b 	bl	19470 <z_spin_unlock_valid>
   1785a:	b940      	cbnz	r0, 1786e <k_heap_aligned_alloc+0xa2>
   1785c:	491c      	ldr	r1, [pc, #112]	; (178d0 <k_heap_aligned_alloc+0x104>)
   1785e:	481d      	ldr	r0, [pc, #116]	; (178d4 <k_heap_aligned_alloc+0x108>)
   17860:	22a7      	movs	r2, #167	; 0xa7
   17862:	f002 fde0 	bl	1a426 <printk>
   17866:	21a7      	movs	r1, #167	; 0xa7
   17868:	4819      	ldr	r0, [pc, #100]	; (178d0 <k_heap_aligned_alloc+0x104>)
   1786a:	f003 f882 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1786e:	f384 8811 	msr	BASEPRI, r4
   17872:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17876:	4638      	mov	r0, r7
   17878:	b005      	add	sp, #20
   1787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1787e:	9b02      	ldr	r3, [sp, #8]
   17880:	1a18      	subs	r0, r3, r0
   17882:	9b03      	ldr	r3, [sp, #12]
   17884:	eb63 0101 	sbc.w	r1, r3, r1
   17888:	2801      	cmp	r0, #1
   1788a:	f171 0300 	sbcs.w	r3, r1, #0
   1788e:	dbe1      	blt.n	17854 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17890:	e9cd 0100 	strd	r0, r1, [sp]
   17894:	4652      	mov	r2, sl
   17896:	4621      	mov	r1, r4
   17898:	4628      	mov	r0, r5
   1789a:	f001 f997 	bl	18bcc <z_pend_curr>
	__asm__ volatile(
   1789e:	f04f 0320 	mov.w	r3, #32
   178a2:	f3ef 8411 	mrs	r4, BASEPRI
   178a6:	f383 8811 	msr	BASEPRI, r3
   178aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   178ae:	4628      	mov	r0, r5
   178b0:	f001 fdd0 	bl	19454 <z_spin_lock_valid>
   178b4:	b940      	cbnz	r0, 178c8 <k_heap_aligned_alloc+0xfc>
   178b6:	4649      	mov	r1, r9
   178b8:	4806      	ldr	r0, [pc, #24]	; (178d4 <k_heap_aligned_alloc+0x108>)
   178ba:	227c      	movs	r2, #124	; 0x7c
   178bc:	f002 fdb3 	bl	1a426 <printk>
   178c0:	217c      	movs	r1, #124	; 0x7c
   178c2:	4648      	mov	r0, r9
   178c4:	f003 f855 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   178c8:	4628      	mov	r0, r5
   178ca:	f001 fddf 	bl	1948c <z_spin_lock_set_owner>
	return k;
   178ce:	e7b8      	b.n	17842 <k_heap_aligned_alloc+0x76>
   178d0:	0001f9c9 	.word	0x0001f9c9
   178d4:	0001f98f 	.word	0x0001f98f
   178d8:	00022754 	.word	0x00022754

000178dc <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   178dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   178de:	4604      	mov	r4, r0
   178e0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   178e2:	f100 0514 	add.w	r5, r0, #20
   178e6:	f04f 0320 	mov.w	r3, #32
   178ea:	f3ef 8711 	mrs	r7, BASEPRI
   178ee:	f383 8811 	msr	BASEPRI, r3
   178f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   178f6:	4628      	mov	r0, r5
   178f8:	f001 fdac 	bl	19454 <z_spin_lock_valid>
   178fc:	b940      	cbnz	r0, 17910 <k_heap_free+0x34>
   178fe:	4916      	ldr	r1, [pc, #88]	; (17958 <k_heap_free+0x7c>)
   17900:	4816      	ldr	r0, [pc, #88]	; (1795c <k_heap_free+0x80>)
   17902:	227c      	movs	r2, #124	; 0x7c
   17904:	f002 fd8f 	bl	1a426 <printk>
   17908:	217c      	movs	r1, #124	; 0x7c
   1790a:	4813      	ldr	r0, [pc, #76]	; (17958 <k_heap_free+0x7c>)
   1790c:	f003 f831 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17910:	4628      	mov	r0, r5
   17912:	f001 fdbb 	bl	1948c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   17916:	4620      	mov	r0, r4
   17918:	4631      	mov	r1, r6
   1791a:	f7f3 f87d 	bl	aa18 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1791e:	f104 000c 	add.w	r0, r4, #12
   17922:	f006 f985 	bl	1dc30 <z_unpend_all>
   17926:	b128      	cbz	r0, 17934 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   17928:	4639      	mov	r1, r7
   1792a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1792c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   17930:	f000 bc0e 	b.w	18150 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17934:	4628      	mov	r0, r5
   17936:	f001 fd9b 	bl	19470 <z_spin_unlock_valid>
   1793a:	b940      	cbnz	r0, 1794e <k_heap_free+0x72>
   1793c:	4906      	ldr	r1, [pc, #24]	; (17958 <k_heap_free+0x7c>)
   1793e:	4807      	ldr	r0, [pc, #28]	; (1795c <k_heap_free+0x80>)
   17940:	22a7      	movs	r2, #167	; 0xa7
   17942:	f002 fd70 	bl	1a426 <printk>
   17946:	21a7      	movs	r1, #167	; 0xa7
   17948:	4803      	ldr	r0, [pc, #12]	; (17958 <k_heap_free+0x7c>)
   1794a:	f003 f812 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1794e:	f387 8811 	msr	BASEPRI, r7
   17952:	f3bf 8f6f 	isb	sy
}
   17956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17958:	0001f9c9 	.word	0x0001f9c9
   1795c:	0001f98f 	.word	0x0001f98f

00017960 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   17960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17962:	4c14      	ldr	r4, [pc, #80]	; (179b4 <init_mem_slab_module+0x54>)
   17964:	4d14      	ldr	r5, [pc, #80]	; (179b8 <init_mem_slab_module+0x58>)
   17966:	4e15      	ldr	r6, [pc, #84]	; (179bc <init_mem_slab_module+0x5c>)
   17968:	42ac      	cmp	r4, r5
   1796a:	d908      	bls.n	1797e <init_mem_slab_module+0x1e>
   1796c:	4631      	mov	r1, r6
   1796e:	4814      	ldr	r0, [pc, #80]	; (179c0 <init_mem_slab_module+0x60>)
   17970:	2242      	movs	r2, #66	; 0x42
   17972:	f002 fd58 	bl	1a426 <printk>
   17976:	2142      	movs	r1, #66	; 0x42
   17978:	4630      	mov	r0, r6
   1797a:	f002 fffa 	bl	1a972 <assert_post_action>
   1797e:	42ac      	cmp	r4, r5
   17980:	d301      	bcc.n	17986 <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   17982:	2000      	movs	r0, #0
	return rc;
}
   17984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   17986:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1798a:	ea42 0301 	orr.w	r3, r2, r1
   1798e:	f013 0303 	ands.w	r3, r3, #3
   17992:	d10b      	bne.n	179ac <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   17994:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   17996:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17998:	4283      	cmp	r3, r0
   1799a:	d101      	bne.n	179a0 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1799c:	341c      	adds	r4, #28
   1799e:	e7e3      	b.n	17968 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   179a0:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   179a2:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   179a4:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   179a6:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   179a8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   179aa:	e7f5      	b.n	17998 <init_mem_slab_module+0x38>
	return rc;
   179ac:	f06f 0015 	mvn.w	r0, #21
   179b0:	e7e8      	b.n	17984 <init_mem_slab_module+0x24>
   179b2:	bf00      	nop
   179b4:	200085f8 	.word	0x200085f8
   179b8:	2000864c 	.word	0x2000864c
   179bc:	00022776 	.word	0x00022776
   179c0:	0001f98f 	.word	0x0001f98f

000179c4 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   179c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   179c8:	4604      	mov	r4, r0
   179ca:	460d      	mov	r5, r1
   179cc:	4617      	mov	r7, r2
   179ce:	461e      	mov	r6, r3
	__asm__ volatile(
   179d0:	f04f 0320 	mov.w	r3, #32
   179d4:	f3ef 8811 	mrs	r8, BASEPRI
   179d8:	f383 8811 	msr	BASEPRI, r3
   179dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   179e0:	4821      	ldr	r0, [pc, #132]	; (17a68 <k_mem_slab_alloc+0xa4>)
   179e2:	f001 fd37 	bl	19454 <z_spin_lock_valid>
   179e6:	b940      	cbnz	r0, 179fa <k_mem_slab_alloc+0x36>
   179e8:	4920      	ldr	r1, [pc, #128]	; (17a6c <k_mem_slab_alloc+0xa8>)
   179ea:	4821      	ldr	r0, [pc, #132]	; (17a70 <k_mem_slab_alloc+0xac>)
   179ec:	227c      	movs	r2, #124	; 0x7c
   179ee:	f002 fd1a 	bl	1a426 <printk>
   179f2:	217c      	movs	r1, #124	; 0x7c
   179f4:	481d      	ldr	r0, [pc, #116]	; (17a6c <k_mem_slab_alloc+0xa8>)
   179f6:	f002 ffbc 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   179fa:	481b      	ldr	r0, [pc, #108]	; (17a68 <k_mem_slab_alloc+0xa4>)
   179fc:	f001 fd46 	bl	1948c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   17a00:	6963      	ldr	r3, [r4, #20]
   17a02:	b1c3      	cbz	r3, 17a36 <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   17a04:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   17a06:	681b      	ldr	r3, [r3, #0]
   17a08:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   17a0a:	69a3      	ldr	r3, [r4, #24]
   17a0c:	3301      	adds	r3, #1
   17a0e:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17a10:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17a12:	4815      	ldr	r0, [pc, #84]	; (17a68 <k_mem_slab_alloc+0xa4>)
   17a14:	f001 fd2c 	bl	19470 <z_spin_unlock_valid>
   17a18:	b940      	cbnz	r0, 17a2c <k_mem_slab_alloc+0x68>
   17a1a:	4914      	ldr	r1, [pc, #80]	; (17a6c <k_mem_slab_alloc+0xa8>)
   17a1c:	4814      	ldr	r0, [pc, #80]	; (17a70 <k_mem_slab_alloc+0xac>)
   17a1e:	22a7      	movs	r2, #167	; 0xa7
   17a20:	f002 fd01 	bl	1a426 <printk>
   17a24:	21a7      	movs	r1, #167	; 0xa7
   17a26:	4811      	ldr	r0, [pc, #68]	; (17a6c <k_mem_slab_alloc+0xa8>)
   17a28:	f002 ffa3 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   17a2c:	f388 8811 	msr	BASEPRI, r8
   17a30:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   17a34:	e013      	b.n	17a5e <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17a36:	ea57 0206 	orrs.w	r2, r7, r6
   17a3a:	d103      	bne.n	17a44 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   17a3c:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   17a40:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   17a42:	e7e6      	b.n	17a12 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   17a44:	4622      	mov	r2, r4
   17a46:	4641      	mov	r1, r8
   17a48:	e9cd 7600 	strd	r7, r6, [sp]
   17a4c:	4806      	ldr	r0, [pc, #24]	; (17a68 <k_mem_slab_alloc+0xa4>)
   17a4e:	f001 f8bd 	bl	18bcc <z_pend_curr>
		if (result == 0) {
   17a52:	4604      	mov	r4, r0
   17a54:	b918      	cbnz	r0, 17a5e <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   17a56:	4b07      	ldr	r3, [pc, #28]	; (17a74 <k_mem_slab_alloc+0xb0>)
   17a58:	689b      	ldr	r3, [r3, #8]
   17a5a:	695b      	ldr	r3, [r3, #20]
   17a5c:	602b      	str	r3, [r5, #0]
}
   17a5e:	4620      	mov	r0, r4
   17a60:	b002      	add	sp, #8
   17a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a66:	bf00      	nop
   17a68:	2000afbc 	.word	0x2000afbc
   17a6c:	0001f9c9 	.word	0x0001f9c9
   17a70:	0001f98f 	.word	0x0001f98f
   17a74:	2000afc4 	.word	0x2000afc4

00017a78 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   17a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a7a:	4604      	mov	r4, r0
   17a7c:	460d      	mov	r5, r1
	__asm__ volatile(
   17a7e:	f04f 0320 	mov.w	r3, #32
   17a82:	f3ef 8611 	mrs	r6, BASEPRI
   17a86:	f383 8811 	msr	BASEPRI, r3
   17a8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17a8e:	481e      	ldr	r0, [pc, #120]	; (17b08 <k_mem_slab_free+0x90>)
   17a90:	f001 fce0 	bl	19454 <z_spin_lock_valid>
   17a94:	b940      	cbnz	r0, 17aa8 <k_mem_slab_free+0x30>
   17a96:	491d      	ldr	r1, [pc, #116]	; (17b0c <k_mem_slab_free+0x94>)
   17a98:	481d      	ldr	r0, [pc, #116]	; (17b10 <k_mem_slab_free+0x98>)
   17a9a:	227c      	movs	r2, #124	; 0x7c
   17a9c:	f002 fcc3 	bl	1a426 <printk>
   17aa0:	217c      	movs	r1, #124	; 0x7c
   17aa2:	481a      	ldr	r0, [pc, #104]	; (17b0c <k_mem_slab_free+0x94>)
   17aa4:	f002 ff65 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17aa8:	4817      	ldr	r0, [pc, #92]	; (17b08 <k_mem_slab_free+0x90>)
   17aaa:	f001 fcef 	bl	1948c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   17aae:	6967      	ldr	r7, [r4, #20]
   17ab0:	b97f      	cbnz	r7, 17ad2 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   17ab2:	4620      	mov	r0, r4
   17ab4:	f001 f92c 	bl	18d10 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   17ab8:	b158      	cbz	r0, 17ad2 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   17aba:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17abc:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   17ac0:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   17ac2:	f000 fd19 	bl	184f8 <z_ready_thread>
			z_reschedule(&lock, key);
   17ac6:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   17ac8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   17acc:	480e      	ldr	r0, [pc, #56]	; (17b08 <k_mem_slab_free+0x90>)
   17ace:	f000 bb3f 	b.w	18150 <z_reschedule>
	**(char ***) mem = slab->free_list;
   17ad2:	682b      	ldr	r3, [r5, #0]
   17ad4:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ad6:	480c      	ldr	r0, [pc, #48]	; (17b08 <k_mem_slab_free+0x90>)
   17ad8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   17ada:	682b      	ldr	r3, [r5, #0]
   17adc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   17ade:	69a3      	ldr	r3, [r4, #24]
   17ae0:	3b01      	subs	r3, #1
   17ae2:	61a3      	str	r3, [r4, #24]
   17ae4:	f001 fcc4 	bl	19470 <z_spin_unlock_valid>
   17ae8:	b940      	cbnz	r0, 17afc <k_mem_slab_free+0x84>
   17aea:	4908      	ldr	r1, [pc, #32]	; (17b0c <k_mem_slab_free+0x94>)
   17aec:	4808      	ldr	r0, [pc, #32]	; (17b10 <k_mem_slab_free+0x98>)
   17aee:	22a7      	movs	r2, #167	; 0xa7
   17af0:	f002 fc99 	bl	1a426 <printk>
   17af4:	21a7      	movs	r1, #167	; 0xa7
   17af6:	4805      	ldr	r0, [pc, #20]	; (17b0c <k_mem_slab_free+0x94>)
   17af8:	f002 ff3b 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   17afc:	f386 8811 	msr	BASEPRI, r6
   17b00:	f3bf 8f6f 	isb	sy
}
   17b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17b06:	bf00      	nop
   17b08:	2000afbc 	.word	0x2000afbc
   17b0c:	0001f9c9 	.word	0x0001f9c9
   17b10:	0001f98f 	.word	0x0001f98f

00017b14 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   17b14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17b18:	4604      	mov	r4, r0
   17b1a:	4617      	mov	r7, r2
   17b1c:	461e      	mov	r6, r3
   17b1e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17b22:	b143      	cbz	r3, 17b36 <z_impl_k_mutex_lock+0x22>
   17b24:	495c      	ldr	r1, [pc, #368]	; (17c98 <z_impl_k_mutex_lock+0x184>)
   17b26:	485d      	ldr	r0, [pc, #372]	; (17c9c <z_impl_k_mutex_lock+0x188>)
   17b28:	227d      	movs	r2, #125	; 0x7d
   17b2a:	f002 fc7c 	bl	1a426 <printk>
   17b2e:	217d      	movs	r1, #125	; 0x7d
   17b30:	4859      	ldr	r0, [pc, #356]	; (17c98 <z_impl_k_mutex_lock+0x184>)
   17b32:	f002 ff1e 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   17b36:	f04f 0320 	mov.w	r3, #32
   17b3a:	f3ef 8811 	mrs	r8, BASEPRI
   17b3e:	f383 8811 	msr	BASEPRI, r3
   17b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17b46:	4856      	ldr	r0, [pc, #344]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
   17b48:	f001 fc84 	bl	19454 <z_spin_lock_valid>
   17b4c:	b940      	cbnz	r0, 17b60 <z_impl_k_mutex_lock+0x4c>
   17b4e:	4955      	ldr	r1, [pc, #340]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17b50:	4852      	ldr	r0, [pc, #328]	; (17c9c <z_impl_k_mutex_lock+0x188>)
   17b52:	227c      	movs	r2, #124	; 0x7c
   17b54:	f002 fc67 	bl	1a426 <printk>
   17b58:	217c      	movs	r1, #124	; 0x7c
   17b5a:	4852      	ldr	r0, [pc, #328]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17b5c:	f002 ff09 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17b60:	484f      	ldr	r0, [pc, #316]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
   17b62:	f001 fc93 	bl	1948c <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17b66:	68e3      	ldr	r3, [r4, #12]
   17b68:	4a4f      	ldr	r2, [pc, #316]	; (17ca8 <z_impl_k_mutex_lock+0x194>)
   17b6a:	b1d3      	cbz	r3, 17ba2 <z_impl_k_mutex_lock+0x8e>
   17b6c:	68a0      	ldr	r0, [r4, #8]
   17b6e:	6891      	ldr	r1, [r2, #8]
   17b70:	4288      	cmp	r0, r1
   17b72:	d033      	beq.n	17bdc <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   17b74:	ea57 0306 	orrs.w	r3, r7, r6
   17b78:	d132      	bne.n	17be0 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17b7a:	4849      	ldr	r0, [pc, #292]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
   17b7c:	f001 fc78 	bl	19470 <z_spin_unlock_valid>
   17b80:	b940      	cbnz	r0, 17b94 <z_impl_k_mutex_lock+0x80>
   17b82:	4948      	ldr	r1, [pc, #288]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17b84:	4845      	ldr	r0, [pc, #276]	; (17c9c <z_impl_k_mutex_lock+0x188>)
   17b86:	22a7      	movs	r2, #167	; 0xa7
   17b88:	f002 fc4d 	bl	1a426 <printk>
   17b8c:	21a7      	movs	r1, #167	; 0xa7
   17b8e:	4845      	ldr	r0, [pc, #276]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17b90:	f002 feef 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   17b94:	f388 8811 	msr	BASEPRI, r8
   17b98:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   17b9c:	f06f 000f 	mvn.w	r0, #15
   17ba0:	e019      	b.n	17bd6 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   17ba2:	6891      	ldr	r1, [r2, #8]
   17ba4:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   17ba8:	3301      	adds	r3, #1
   17baa:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17bac:	6893      	ldr	r3, [r2, #8]
   17bae:	483c      	ldr	r0, [pc, #240]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17bb0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   17bb2:	60a3      	str	r3, [r4, #8]
   17bb4:	f001 fc5c 	bl	19470 <z_spin_unlock_valid>
   17bb8:	b940      	cbnz	r0, 17bcc <z_impl_k_mutex_lock+0xb8>
   17bba:	493a      	ldr	r1, [pc, #232]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17bbc:	4837      	ldr	r0, [pc, #220]	; (17c9c <z_impl_k_mutex_lock+0x188>)
   17bbe:	22a7      	movs	r2, #167	; 0xa7
   17bc0:	f002 fc31 	bl	1a426 <printk>
   17bc4:	21a7      	movs	r1, #167	; 0xa7
   17bc6:	4837      	ldr	r0, [pc, #220]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17bc8:	f002 fed3 	bl	1a972 <assert_post_action>
   17bcc:	f388 8811 	msr	BASEPRI, r8
   17bd0:	f3bf 8f6f 	isb	sy
		return 0;
   17bd4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   17bd6:	b002      	add	sp, #8
   17bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   17bdc:	6921      	ldr	r1, [r4, #16]
   17bde:	e7e3      	b.n	17ba8 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17be0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17be4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   17be8:	4299      	cmp	r1, r3
   17bea:	bfa8      	it	ge
   17bec:	4619      	movge	r1, r3
   17bee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17bf2:	4299      	cmp	r1, r3
   17bf4:	da3b      	bge.n	17c6e <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   17bf6:	f005 ffab 	bl	1db50 <adjust_owner_prio.isra.0>
   17bfa:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17bfc:	4622      	mov	r2, r4
   17bfe:	4641      	mov	r1, r8
   17c00:	e9cd 7600 	strd	r7, r6, [sp]
   17c04:	4826      	ldr	r0, [pc, #152]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
   17c06:	f000 ffe1 	bl	18bcc <z_pend_curr>
	if (got_mutex == 0) {
   17c0a:	2800      	cmp	r0, #0
   17c0c:	d0e3      	beq.n	17bd6 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   17c0e:	f04f 0320 	mov.w	r3, #32
   17c12:	f3ef 8611 	mrs	r6, BASEPRI
   17c16:	f383 8811 	msr	BASEPRI, r3
   17c1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c1e:	4820      	ldr	r0, [pc, #128]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
   17c20:	f001 fc18 	bl	19454 <z_spin_lock_valid>
   17c24:	b940      	cbnz	r0, 17c38 <z_impl_k_mutex_lock+0x124>
   17c26:	491f      	ldr	r1, [pc, #124]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17c28:	481c      	ldr	r0, [pc, #112]	; (17c9c <z_impl_k_mutex_lock+0x188>)
   17c2a:	227c      	movs	r2, #124	; 0x7c
   17c2c:	f002 fbfb 	bl	1a426 <printk>
   17c30:	217c      	movs	r1, #124	; 0x7c
   17c32:	481c      	ldr	r0, [pc, #112]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17c34:	f002 fe9d 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17c38:	4819      	ldr	r0, [pc, #100]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
   17c3a:	f001 fc27 	bl	1948c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17c3e:	6823      	ldr	r3, [r4, #0]
   17c40:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17c42:	42a3      	cmp	r3, r4
   17c44:	d007      	beq.n	17c56 <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   17c46:	b133      	cbz	r3, 17c56 <z_impl_k_mutex_lock+0x142>
   17c48:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17c4c:	4299      	cmp	r1, r3
   17c4e:	bfa8      	it	ge
   17c50:	4619      	movge	r1, r3
   17c52:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   17c56:	68a0      	ldr	r0, [r4, #8]
   17c58:	f005 ff7a 	bl	1db50 <adjust_owner_prio.isra.0>
   17c5c:	b900      	cbnz	r0, 17c60 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   17c5e:	b145      	cbz	r5, 17c72 <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   17c60:	4631      	mov	r1, r6
   17c62:	480f      	ldr	r0, [pc, #60]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
   17c64:	f000 fa74 	bl	18150 <z_reschedule>
	return -EAGAIN;
   17c68:	f06f 000a 	mvn.w	r0, #10
   17c6c:	e7b3      	b.n	17bd6 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   17c6e:	2500      	movs	r5, #0
   17c70:	e7c4      	b.n	17bfc <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c72:	480b      	ldr	r0, [pc, #44]	; (17ca0 <z_impl_k_mutex_lock+0x18c>)
   17c74:	f001 fbfc 	bl	19470 <z_spin_unlock_valid>
   17c78:	b940      	cbnz	r0, 17c8c <z_impl_k_mutex_lock+0x178>
   17c7a:	490a      	ldr	r1, [pc, #40]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17c7c:	4807      	ldr	r0, [pc, #28]	; (17c9c <z_impl_k_mutex_lock+0x188>)
   17c7e:	22a7      	movs	r2, #167	; 0xa7
   17c80:	f002 fbd1 	bl	1a426 <printk>
   17c84:	21a7      	movs	r1, #167	; 0xa7
   17c86:	4807      	ldr	r0, [pc, #28]	; (17ca4 <z_impl_k_mutex_lock+0x190>)
   17c88:	f002 fe73 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   17c8c:	f386 8811 	msr	BASEPRI, r6
   17c90:	f3bf 8f6f 	isb	sy
   17c94:	e7e8      	b.n	17c68 <z_impl_k_mutex_lock+0x154>
   17c96:	bf00      	nop
   17c98:	0002279b 	.word	0x0002279b
   17c9c:	0001f98f 	.word	0x0001f98f
   17ca0:	2000afc0 	.word	0x2000afc0
   17ca4:	0001f9c9 	.word	0x0001f9c9
   17ca8:	2000afc4 	.word	0x2000afc4

00017cac <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   17cac:	b538      	push	{r3, r4, r5, lr}
   17cae:	4604      	mov	r4, r0
   17cb0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17cb4:	b143      	cbz	r3, 17cc8 <z_impl_k_mutex_unlock+0x1c>
   17cb6:	4946      	ldr	r1, [pc, #280]	; (17dd0 <z_impl_k_mutex_unlock+0x124>)
   17cb8:	4846      	ldr	r0, [pc, #280]	; (17dd4 <z_impl_k_mutex_unlock+0x128>)
   17cba:	22d8      	movs	r2, #216	; 0xd8
   17cbc:	f002 fbb3 	bl	1a426 <printk>
   17cc0:	21d8      	movs	r1, #216	; 0xd8
   17cc2:	4843      	ldr	r0, [pc, #268]	; (17dd0 <z_impl_k_mutex_unlock+0x124>)
   17cc4:	f002 fe55 	bl	1a972 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   17cc8:	68a3      	ldr	r3, [r4, #8]
   17cca:	2b00      	cmp	r3, #0
   17ccc:	d079      	beq.n	17dc2 <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   17cce:	4d42      	ldr	r5, [pc, #264]	; (17dd8 <z_impl_k_mutex_unlock+0x12c>)
   17cd0:	68aa      	ldr	r2, [r5, #8]
   17cd2:	4293      	cmp	r3, r2
   17cd4:	d178      	bne.n	17dc8 <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   17cd6:	68e3      	ldr	r3, [r4, #12]
   17cd8:	b943      	cbnz	r3, 17cec <z_impl_k_mutex_unlock+0x40>
   17cda:	493d      	ldr	r1, [pc, #244]	; (17dd0 <z_impl_k_mutex_unlock+0x124>)
   17cdc:	483d      	ldr	r0, [pc, #244]	; (17dd4 <z_impl_k_mutex_unlock+0x128>)
   17cde:	22ea      	movs	r2, #234	; 0xea
   17ce0:	f002 fba1 	bl	1a426 <printk>
   17ce4:	21ea      	movs	r1, #234	; 0xea
   17ce6:	483a      	ldr	r0, [pc, #232]	; (17dd0 <z_impl_k_mutex_unlock+0x124>)
   17ce8:	f002 fe43 	bl	1a972 <assert_post_action>
   17cec:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   17cf0:	b153      	cbz	r3, 17d08 <z_impl_k_mutex_unlock+0x5c>
   17cf2:	493a      	ldr	r1, [pc, #232]	; (17ddc <z_impl_k_mutex_unlock+0x130>)
   17cf4:	4837      	ldr	r0, [pc, #220]	; (17dd4 <z_impl_k_mutex_unlock+0x128>)
   17cf6:	f44f 7289 	mov.w	r2, #274	; 0x112
   17cfa:	f002 fb94 	bl	1a426 <printk>
   17cfe:	f44f 7189 	mov.w	r1, #274	; 0x112
   17d02:	4836      	ldr	r0, [pc, #216]	; (17ddc <z_impl_k_mutex_unlock+0x130>)
   17d04:	f002 fe35 	bl	1a972 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   17d08:	68ab      	ldr	r3, [r5, #8]
   17d0a:	7bdb      	ldrb	r3, [r3, #15]
   17d0c:	2b01      	cmp	r3, #1
   17d0e:	d10a      	bne.n	17d26 <z_impl_k_mutex_unlock+0x7a>
   17d10:	4932      	ldr	r1, [pc, #200]	; (17ddc <z_impl_k_mutex_unlock+0x130>)
   17d12:	4830      	ldr	r0, [pc, #192]	; (17dd4 <z_impl_k_mutex_unlock+0x128>)
   17d14:	f240 1213 	movw	r2, #275	; 0x113
   17d18:	f002 fb85 	bl	1a426 <printk>
   17d1c:	f240 1113 	movw	r1, #275	; 0x113
   17d20:	482e      	ldr	r0, [pc, #184]	; (17ddc <z_impl_k_mutex_unlock+0x130>)
   17d22:	f002 fe26 	bl	1a972 <assert_post_action>

	--_current->base.sched_locked;
   17d26:	68aa      	ldr	r2, [r5, #8]
   17d28:	7bd3      	ldrb	r3, [r2, #15]
   17d2a:	3b01      	subs	r3, #1
   17d2c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   17d2e:	68e3      	ldr	r3, [r4, #12]
   17d30:	2b01      	cmp	r3, #1
   17d32:	d005      	beq.n	17d40 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   17d34:	3b01      	subs	r3, #1
   17d36:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   17d38:	f000 fb38 	bl	183ac <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   17d3c:	2000      	movs	r0, #0
}
   17d3e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17d40:	f04f 0320 	mov.w	r3, #32
   17d44:	f3ef 8511 	mrs	r5, BASEPRI
   17d48:	f383 8811 	msr	BASEPRI, r3
   17d4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d50:	4823      	ldr	r0, [pc, #140]	; (17de0 <z_impl_k_mutex_unlock+0x134>)
   17d52:	f001 fb7f 	bl	19454 <z_spin_lock_valid>
   17d56:	b940      	cbnz	r0, 17d6a <z_impl_k_mutex_unlock+0xbe>
   17d58:	4922      	ldr	r1, [pc, #136]	; (17de4 <z_impl_k_mutex_unlock+0x138>)
   17d5a:	481e      	ldr	r0, [pc, #120]	; (17dd4 <z_impl_k_mutex_unlock+0x128>)
   17d5c:	227c      	movs	r2, #124	; 0x7c
   17d5e:	f002 fb62 	bl	1a426 <printk>
   17d62:	217c      	movs	r1, #124	; 0x7c
   17d64:	481f      	ldr	r0, [pc, #124]	; (17de4 <z_impl_k_mutex_unlock+0x138>)
   17d66:	f002 fe04 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17d6a:	481d      	ldr	r0, [pc, #116]	; (17de0 <z_impl_k_mutex_unlock+0x134>)
   17d6c:	f001 fb8e 	bl	1948c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   17d70:	6921      	ldr	r1, [r4, #16]
   17d72:	68a0      	ldr	r0, [r4, #8]
   17d74:	f005 feec 	bl	1db50 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17d78:	4620      	mov	r0, r4
   17d7a:	f000 ffc9 	bl	18d10 <z_unpend_first_thread>
	mutex->owner = new_owner;
   17d7e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   17d80:	b160      	cbz	r0, 17d9c <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   17d82:	f990 200e 	ldrsb.w	r2, [r0, #14]
   17d86:	6122      	str	r2, [r4, #16]
   17d88:	2200      	movs	r2, #0
   17d8a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   17d8e:	f000 fbb3 	bl	184f8 <z_ready_thread>
		z_reschedule(&lock, key);
   17d92:	4629      	mov	r1, r5
   17d94:	4812      	ldr	r0, [pc, #72]	; (17de0 <z_impl_k_mutex_unlock+0x134>)
   17d96:	f000 f9db 	bl	18150 <z_reschedule>
   17d9a:	e7cd      	b.n	17d38 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   17d9c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d9e:	4810      	ldr	r0, [pc, #64]	; (17de0 <z_impl_k_mutex_unlock+0x134>)
   17da0:	f001 fb66 	bl	19470 <z_spin_unlock_valid>
   17da4:	b940      	cbnz	r0, 17db8 <z_impl_k_mutex_unlock+0x10c>
   17da6:	490f      	ldr	r1, [pc, #60]	; (17de4 <z_impl_k_mutex_unlock+0x138>)
   17da8:	480a      	ldr	r0, [pc, #40]	; (17dd4 <z_impl_k_mutex_unlock+0x128>)
   17daa:	22a7      	movs	r2, #167	; 0xa7
   17dac:	f002 fb3b 	bl	1a426 <printk>
   17db0:	21a7      	movs	r1, #167	; 0xa7
   17db2:	480c      	ldr	r0, [pc, #48]	; (17de4 <z_impl_k_mutex_unlock+0x138>)
   17db4:	f002 fddd 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   17db8:	f385 8811 	msr	BASEPRI, r5
   17dbc:	f3bf 8f6f 	isb	sy
   17dc0:	e7ba      	b.n	17d38 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   17dc2:	f06f 0015 	mvn.w	r0, #21
   17dc6:	e7ba      	b.n	17d3e <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   17dc8:	f04f 30ff 	mov.w	r0, #4294967295
   17dcc:	e7b7      	b.n	17d3e <z_impl_k_mutex_unlock+0x92>
   17dce:	bf00      	nop
   17dd0:	0002279b 	.word	0x0002279b
   17dd4:	0001f98f 	.word	0x0001f98f
   17dd8:	2000afc4 	.word	0x2000afc4
   17ddc:	000227bd 	.word	0x000227bd
   17de0:	2000afc0 	.word	0x2000afc0
   17de4:	0001f9c9 	.word	0x0001f9c9

00017de8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   17de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17dec:	4604      	mov	r4, r0
   17dee:	460d      	mov	r5, r1
   17df0:	4690      	mov	r8, r2
   17df2:	4699      	mov	r9, r3
   17df4:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17df8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   17dfc:	f04f 0320 	mov.w	r3, #32
   17e00:	f3ef 8711 	mrs	r7, BASEPRI
   17e04:	f383 8811 	msr	BASEPRI, r3
   17e08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e0c:	4630      	mov	r0, r6
   17e0e:	f001 fb21 	bl	19454 <z_spin_lock_valid>
   17e12:	b940      	cbnz	r0, 17e26 <queue_insert+0x3e>
   17e14:	4937      	ldr	r1, [pc, #220]	; (17ef4 <queue_insert+0x10c>)
   17e16:	4838      	ldr	r0, [pc, #224]	; (17ef8 <queue_insert+0x110>)
   17e18:	227c      	movs	r2, #124	; 0x7c
   17e1a:	f002 fb04 	bl	1a426 <printk>
   17e1e:	217c      	movs	r1, #124	; 0x7c
   17e20:	4834      	ldr	r0, [pc, #208]	; (17ef4 <queue_insert+0x10c>)
   17e22:	f002 fda6 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17e26:	4630      	mov	r0, r6
   17e28:	f001 fb30 	bl	1948c <z_spin_lock_set_owner>

	if (is_append) {
   17e2c:	f1ba 0f00 	cmp.w	sl, #0
   17e30:	d000      	beq.n	17e34 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   17e32:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   17e34:	f104 000c 	add.w	r0, r4, #12
   17e38:	f000 ff6a 	bl	18d10 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   17e3c:	b160      	cbz	r0, 17e58 <queue_insert+0x70>
   17e3e:	2400      	movs	r4, #0
   17e40:	f8c0 8014 	str.w	r8, [r0, #20]
   17e44:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   17e48:	f000 fb56 	bl	184f8 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17e4c:	4630      	mov	r0, r6
   17e4e:	4639      	mov	r1, r7
   17e50:	f000 f97e 	bl	18150 <z_reschedule>
	return 0;
   17e54:	2000      	movs	r0, #0
   17e56:	e019      	b.n	17e8c <queue_insert+0xa4>
	if (alloc) {
   17e58:	f1b9 0f00 	cmp.w	r9, #0
   17e5c:	d028      	beq.n	17eb0 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   17e5e:	2108      	movs	r1, #8
   17e60:	f002 fa12 	bl	1a288 <z_thread_aligned_alloc>
		if (anode == NULL) {
   17e64:	b9a0      	cbnz	r0, 17e90 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e66:	4630      	mov	r0, r6
   17e68:	f001 fb02 	bl	19470 <z_spin_unlock_valid>
   17e6c:	b940      	cbnz	r0, 17e80 <queue_insert+0x98>
   17e6e:	4921      	ldr	r1, [pc, #132]	; (17ef4 <queue_insert+0x10c>)
   17e70:	4821      	ldr	r0, [pc, #132]	; (17ef8 <queue_insert+0x110>)
   17e72:	22a7      	movs	r2, #167	; 0xa7
   17e74:	f002 fad7 	bl	1a426 <printk>
   17e78:	21a7      	movs	r1, #167	; 0xa7
   17e7a:	481e      	ldr	r0, [pc, #120]	; (17ef4 <queue_insert+0x10c>)
   17e7c:	f002 fd79 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   17e80:	f387 8811 	msr	BASEPRI, r7
   17e84:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   17e88:	f06f 000b 	mvn.w	r0, #11
}
   17e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   17e90:	2301      	movs	r3, #1
		anode->data = data;
   17e92:	f8c0 8004 	str.w	r8, [r0, #4]
   17e96:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17e98:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17e9a:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   17e9e:	b95d      	cbnz	r5, 17eb8 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ea0:	6823      	ldr	r3, [r4, #0]
   17ea2:	4313      	orrs	r3, r2
   17ea4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   17ea6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   17ea8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   17eaa:	b973      	cbnz	r3, 17eca <queue_insert+0xe2>
	list->tail = node;
   17eac:	6060      	str	r0, [r4, #4]
}
   17eae:	e00c      	b.n	17eca <queue_insert+0xe2>
}
   17eb0:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   17eb2:	f8c8 9000 	str.w	r9, [r8]
}
   17eb6:	e7ef      	b.n	17e98 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17eb8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   17eba:	f033 0303 	bics.w	r3, r3, #3
   17ebe:	d110      	bne.n	17ee2 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ec0:	6002      	str	r2, [r0, #0]
	return list->tail;
   17ec2:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   17ec4:	b93a      	cbnz	r2, 17ed6 <queue_insert+0xee>
	list->head = node;
   17ec6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   17eca:	2104      	movs	r1, #4
   17ecc:	f104 0014 	add.w	r0, r4, #20
   17ed0:	f005 ffad 	bl	1de2e <z_handle_obj_poll_events>
   17ed4:	e7ba      	b.n	17e4c <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17ed6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ed8:	f003 0303 	and.w	r3, r3, #3
   17edc:	4303      	orrs	r3, r0
   17ede:	6013      	str	r3, [r2, #0]
   17ee0:	e7e4      	b.n	17eac <queue_insert+0xc4>
   17ee2:	4313      	orrs	r3, r2
   17ee4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17ee6:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ee8:	f003 0303 	and.w	r3, r3, #3
   17eec:	4303      	orrs	r3, r0
   17eee:	602b      	str	r3, [r5, #0]
}
   17ef0:	e7eb      	b.n	17eca <queue_insert+0xe2>
   17ef2:	bf00      	nop
   17ef4:	0001f9c9 	.word	0x0001f9c9
   17ef8:	0001f98f 	.word	0x0001f98f

00017efc <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   17efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17f00:	4605      	mov	r5, r0
   17f02:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   17f04:	460c      	mov	r4, r1
   17f06:	2900      	cmp	r1, #0
   17f08:	d045      	beq.n	17f96 <k_queue_append_list+0x9a>
   17f0a:	2a00      	cmp	r2, #0
   17f0c:	d043      	beq.n	17f96 <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17f0e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   17f12:	f04f 0320 	mov.w	r3, #32
   17f16:	f3ef 8911 	mrs	r9, BASEPRI
   17f1a:	f383 8811 	msr	BASEPRI, r3
   17f1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f22:	4638      	mov	r0, r7
   17f24:	f001 fa96 	bl	19454 <z_spin_lock_valid>
   17f28:	b940      	cbnz	r0, 17f3c <k_queue_append_list+0x40>
   17f2a:	491c      	ldr	r1, [pc, #112]	; (17f9c <k_queue_append_list+0xa0>)
   17f2c:	481c      	ldr	r0, [pc, #112]	; (17fa0 <k_queue_append_list+0xa4>)
   17f2e:	227c      	movs	r2, #124	; 0x7c
   17f30:	f002 fa79 	bl	1a426 <printk>
   17f34:	217c      	movs	r1, #124	; 0x7c
   17f36:	4819      	ldr	r0, [pc, #100]	; (17f9c <k_queue_append_list+0xa0>)
   17f38:	f002 fd1b 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17f3c:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   17f3e:	f105 080c 	add.w	r8, r5, #12
   17f42:	f001 faa3 	bl	1948c <z_spin_lock_set_owner>
   17f46:	4640      	mov	r0, r8
   17f48:	f000 fee2 	bl	18d10 <z_unpend_first_thread>
   17f4c:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   17f50:	b920      	cbnz	r0, 17f5c <k_queue_append_list+0x60>
	return list->tail;
   17f52:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   17f54:	b9ca      	cbnz	r2, 17f8a <k_queue_append_list+0x8e>
	list->head = node;
   17f56:	602c      	str	r4, [r5, #0]
	list->tail = node;
   17f58:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   17f5a:	e00a      	b.n	17f72 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   17f5c:	6144      	str	r4, [r0, #20]
   17f5e:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   17f62:	f000 fac9 	bl	184f8 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   17f66:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   17f68:	4640      	mov	r0, r8
   17f6a:	f000 fed1 	bl	18d10 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   17f6e:	2c00      	cmp	r4, #0
   17f70:	d1ee      	bne.n	17f50 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   17f72:	2104      	movs	r1, #4
   17f74:	f105 0014 	add.w	r0, r5, #20
   17f78:	f005 ff59 	bl	1de2e <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17f7c:	4638      	mov	r0, r7
   17f7e:	4649      	mov	r1, r9
   17f80:	f000 f8e6 	bl	18150 <z_reschedule>
	return 0;
   17f84:	2000      	movs	r0, #0
}
   17f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17f8a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17f8c:	f003 0303 	and.w	r3, r3, #3
   17f90:	431c      	orrs	r4, r3
   17f92:	6014      	str	r4, [r2, #0]
}
   17f94:	e7e0      	b.n	17f58 <k_queue_append_list+0x5c>
		return -EINVAL;
   17f96:	f06f 0015 	mvn.w	r0, #21
   17f9a:	e7f4      	b.n	17f86 <k_queue_append_list+0x8a>
   17f9c:	0001f9c9 	.word	0x0001f9c9
   17fa0:	0001f98f 	.word	0x0001f98f

00017fa4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   17fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17fa8:	4605      	mov	r5, r0
   17faa:	4690      	mov	r8, r2
   17fac:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17fae:	f100 0608 	add.w	r6, r0, #8
   17fb2:	f04f 0320 	mov.w	r3, #32
   17fb6:	f3ef 8911 	mrs	r9, BASEPRI
   17fba:	f383 8811 	msr	BASEPRI, r3
   17fbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17fc2:	4630      	mov	r0, r6
   17fc4:	f001 fa46 	bl	19454 <z_spin_lock_valid>
   17fc8:	b940      	cbnz	r0, 17fdc <z_impl_k_queue_get+0x38>
   17fca:	4921      	ldr	r1, [pc, #132]	; (18050 <z_impl_k_queue_get+0xac>)
   17fcc:	4821      	ldr	r0, [pc, #132]	; (18054 <z_impl_k_queue_get+0xb0>)
   17fce:	227c      	movs	r2, #124	; 0x7c
   17fd0:	f002 fa29 	bl	1a426 <printk>
   17fd4:	217c      	movs	r1, #124	; 0x7c
   17fd6:	481e      	ldr	r0, [pc, #120]	; (18050 <z_impl_k_queue_get+0xac>)
   17fd8:	f002 fccb 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   17fdc:	4630      	mov	r0, r6
   17fde:	f001 fa55 	bl	1948c <z_spin_lock_set_owner>
	return list->head;
   17fe2:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17fe4:	b314      	cbz	r4, 1802c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17fe6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17fe8:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17fea:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17fee:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17ff0:	4620      	mov	r0, r4
   17ff2:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   17ff6:	602b      	str	r3, [r5, #0]
	list->tail = node;
   17ff8:	bf08      	it	eq
   17ffa:	606b      	streq	r3, [r5, #4]
   17ffc:	f005 fdb7 	bl	1db6e <z_queue_node_peek>
   18000:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18002:	4630      	mov	r0, r6
   18004:	f001 fa34 	bl	19470 <z_spin_unlock_valid>
   18008:	b940      	cbnz	r0, 1801c <z_impl_k_queue_get+0x78>
   1800a:	4911      	ldr	r1, [pc, #68]	; (18050 <z_impl_k_queue_get+0xac>)
   1800c:	4811      	ldr	r0, [pc, #68]	; (18054 <z_impl_k_queue_get+0xb0>)
   1800e:	22a7      	movs	r2, #167	; 0xa7
   18010:	f002 fa09 	bl	1a426 <printk>
   18014:	21a7      	movs	r1, #167	; 0xa7
   18016:	480e      	ldr	r0, [pc, #56]	; (18050 <z_impl_k_queue_get+0xac>)
   18018:	f002 fcab 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1801c:	f389 8811 	msr	BASEPRI, r9
   18020:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18024:	4620      	mov	r0, r4
   18026:	b003      	add	sp, #12
   18028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1802c:	ea58 0307 	orrs.w	r3, r8, r7
   18030:	d0e7      	beq.n	18002 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18032:	4649      	mov	r1, r9
   18034:	4630      	mov	r0, r6
   18036:	e9cd 8700 	strd	r8, r7, [sp]
   1803a:	f105 020c 	add.w	r2, r5, #12
   1803e:	f000 fdc5 	bl	18bcc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18042:	2800      	cmp	r0, #0
   18044:	d1ee      	bne.n	18024 <z_impl_k_queue_get+0x80>
   18046:	4b04      	ldr	r3, [pc, #16]	; (18058 <z_impl_k_queue_get+0xb4>)
   18048:	689b      	ldr	r3, [r3, #8]
   1804a:	695c      	ldr	r4, [r3, #20]
   1804c:	e7ea      	b.n	18024 <z_impl_k_queue_get+0x80>
   1804e:	bf00      	nop
   18050:	0001f9c9 	.word	0x0001f9c9
   18054:	0001f98f 	.word	0x0001f98f
   18058:	2000afc4 	.word	0x2000afc4

0001805c <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   1805c:	6883      	ldr	r3, [r0, #8]
{
   1805e:	b510      	push	{r4, lr}
   18060:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   18062:	b953      	cbnz	r3, 1807a <pended_on+0x1e>
   18064:	4906      	ldr	r1, [pc, #24]	; (18080 <pended_on+0x24>)
   18066:	4807      	ldr	r0, [pc, #28]	; (18084 <pended_on+0x28>)
   18068:	f44f 7201 	mov.w	r2, #516	; 0x204
   1806c:	f002 f9db 	bl	1a426 <printk>
   18070:	f44f 7101 	mov.w	r1, #516	; 0x204
   18074:	4802      	ldr	r0, [pc, #8]	; (18080 <pended_on+0x24>)
   18076:	f002 fc7c 	bl	1a972 <assert_post_action>

	return thread->base.pended_on;
}
   1807a:	68a0      	ldr	r0, [r4, #8]
   1807c:	bd10      	pop	{r4, pc}
   1807e:	bf00      	nop
   18080:	000227e8 	.word	0x000227e8
   18084:	0001f98f 	.word	0x0001f98f

00018088 <z_reset_time_slice>:
{
   18088:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1808a:	4c08      	ldr	r4, [pc, #32]	; (180ac <z_reset_time_slice+0x24>)
   1808c:	6823      	ldr	r3, [r4, #0]
   1808e:	b15b      	cbz	r3, 180a8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18090:	f7f4 f8dc 	bl	c24c <z_clock_elapsed>
   18094:	4603      	mov	r3, r0
   18096:	6820      	ldr	r0, [r4, #0]
   18098:	4a05      	ldr	r2, [pc, #20]	; (180b0 <z_reset_time_slice+0x28>)
   1809a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   1809c:	2100      	movs	r1, #0
}
   1809e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   180a2:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   180a4:	f001 bc8c 	b.w	199c0 <z_set_timeout_expiry>
}
   180a8:	bd10      	pop	{r4, pc}
   180aa:	bf00      	nop
   180ac:	2000b004 	.word	0x2000b004
   180b0:	2000afc4 	.word	0x2000afc4

000180b4 <k_sched_time_slice_set>:
{
   180b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180b6:	4604      	mov	r4, r0
   180b8:	460d      	mov	r5, r1
	__asm__ volatile(
   180ba:	f04f 0320 	mov.w	r3, #32
   180be:	f3ef 8711 	mrs	r7, BASEPRI
   180c2:	f383 8811 	msr	BASEPRI, r3
   180c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   180ca:	481b      	ldr	r0, [pc, #108]	; (18138 <k_sched_time_slice_set+0x84>)
   180cc:	f001 f9c2 	bl	19454 <z_spin_lock_valid>
   180d0:	b940      	cbnz	r0, 180e4 <k_sched_time_slice_set+0x30>
   180d2:	491a      	ldr	r1, [pc, #104]	; (1813c <k_sched_time_slice_set+0x88>)
   180d4:	481a      	ldr	r0, [pc, #104]	; (18140 <k_sched_time_slice_set+0x8c>)
   180d6:	227c      	movs	r2, #124	; 0x7c
   180d8:	f002 f9a5 	bl	1a426 <printk>
   180dc:	217c      	movs	r1, #124	; 0x7c
   180de:	4817      	ldr	r0, [pc, #92]	; (1813c <k_sched_time_slice_set+0x88>)
   180e0:	f002 fc47 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   180e4:	4814      	ldr	r0, [pc, #80]	; (18138 <k_sched_time_slice_set+0x84>)
   180e6:	f001 f9d1 	bl	1948c <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   180ea:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   180ee:	2100      	movs	r1, #0
   180f0:	f240 30e7 	movw	r0, #999	; 0x3e7
   180f4:	4b13      	ldr	r3, [pc, #76]	; (18144 <k_sched_time_slice_set+0x90>)
   180f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   180fa:	6159      	str	r1, [r3, #20]
   180fc:	2300      	movs	r3, #0
   180fe:	fbe4 0106 	umlal	r0, r1, r4, r6
   18102:	f7f0 fd13 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   18106:	4b10      	ldr	r3, [pc, #64]	; (18148 <k_sched_time_slice_set+0x94>)
   18108:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1810a:	4b10      	ldr	r3, [pc, #64]	; (1814c <k_sched_time_slice_set+0x98>)
   1810c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1810e:	f7ff ffbb 	bl	18088 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18112:	4809      	ldr	r0, [pc, #36]	; (18138 <k_sched_time_slice_set+0x84>)
   18114:	f001 f9ac 	bl	19470 <z_spin_unlock_valid>
   18118:	b940      	cbnz	r0, 1812c <k_sched_time_slice_set+0x78>
   1811a:	4908      	ldr	r1, [pc, #32]	; (1813c <k_sched_time_slice_set+0x88>)
   1811c:	4808      	ldr	r0, [pc, #32]	; (18140 <k_sched_time_slice_set+0x8c>)
   1811e:	22a7      	movs	r2, #167	; 0xa7
   18120:	f002 f981 	bl	1a426 <printk>
   18124:	21a7      	movs	r1, #167	; 0xa7
   18126:	4805      	ldr	r0, [pc, #20]	; (1813c <k_sched_time_slice_set+0x88>)
   18128:	f002 fc23 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1812c:	f387 8811 	msr	BASEPRI, r7
   18130:	f3bf 8f6f 	isb	sy
}
   18134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18136:	bf00      	nop
   18138:	2000affc 	.word	0x2000affc
   1813c:	0001f9c9 	.word	0x0001f9c9
   18140:	0001f98f 	.word	0x0001f98f
   18144:	2000afc4 	.word	0x2000afc4
   18148:	2000b004 	.word	0x2000b004
   1814c:	2000b000 	.word	0x2000b000

00018150 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   18150:	b510      	push	{r4, lr}
   18152:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18154:	460c      	mov	r4, r1
   18156:	b9c1      	cbnz	r1, 1818a <z_reschedule+0x3a>
   18158:	f3ef 8205 	mrs	r2, IPSR
   1815c:	b9aa      	cbnz	r2, 1818a <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   1815e:	4a14      	ldr	r2, [pc, #80]	; (181b0 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   18160:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18162:	6892      	ldr	r2, [r2, #8]
   18164:	4291      	cmp	r1, r2
   18166:	d010      	beq.n	1818a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18168:	f001 f982 	bl	19470 <z_spin_unlock_valid>
   1816c:	b940      	cbnz	r0, 18180 <z_reschedule+0x30>
   1816e:	4911      	ldr	r1, [pc, #68]	; (181b4 <z_reschedule+0x64>)
   18170:	4811      	ldr	r0, [pc, #68]	; (181b8 <z_reschedule+0x68>)
   18172:	22be      	movs	r2, #190	; 0xbe
   18174:	f002 f957 	bl	1a426 <printk>
   18178:	21be      	movs	r1, #190	; 0xbe
   1817a:	480e      	ldr	r0, [pc, #56]	; (181b4 <z_reschedule+0x64>)
   1817c:	f002 fbf9 	bl	1a972 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   18180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   18184:	2000      	movs	r0, #0
   18186:	f7f5 babb 	b.w	d700 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1818a:	4618      	mov	r0, r3
   1818c:	f001 f970 	bl	19470 <z_spin_unlock_valid>
   18190:	b940      	cbnz	r0, 181a4 <z_reschedule+0x54>
   18192:	4908      	ldr	r1, [pc, #32]	; (181b4 <z_reschedule+0x64>)
   18194:	4808      	ldr	r0, [pc, #32]	; (181b8 <z_reschedule+0x68>)
   18196:	22a7      	movs	r2, #167	; 0xa7
   18198:	f002 f945 	bl	1a426 <printk>
   1819c:	21a7      	movs	r1, #167	; 0xa7
   1819e:	4805      	ldr	r0, [pc, #20]	; (181b4 <z_reschedule+0x64>)
   181a0:	f002 fbe7 	bl	1a972 <assert_post_action>
   181a4:	f384 8811 	msr	BASEPRI, r4
   181a8:	f3bf 8f6f 	isb	sy
   181ac:	bd10      	pop	{r4, pc}
   181ae:	bf00      	nop
   181b0:	2000afc4 	.word	0x2000afc4
   181b4:	0001f9c9 	.word	0x0001f9c9
   181b8:	0001f98f 	.word	0x0001f98f

000181bc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   181bc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   181be:	f04f 0320 	mov.w	r3, #32
   181c2:	f3ef 8511 	mrs	r5, BASEPRI
   181c6:	f383 8811 	msr	BASEPRI, r3
   181ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181ce:	4822      	ldr	r0, [pc, #136]	; (18258 <k_sched_lock+0x9c>)
   181d0:	f001 f940 	bl	19454 <z_spin_lock_valid>
   181d4:	b940      	cbnz	r0, 181e8 <k_sched_lock+0x2c>
   181d6:	4921      	ldr	r1, [pc, #132]	; (1825c <k_sched_lock+0xa0>)
   181d8:	4821      	ldr	r0, [pc, #132]	; (18260 <k_sched_lock+0xa4>)
   181da:	227c      	movs	r2, #124	; 0x7c
   181dc:	f002 f923 	bl	1a426 <printk>
   181e0:	217c      	movs	r1, #124	; 0x7c
   181e2:	481e      	ldr	r0, [pc, #120]	; (1825c <k_sched_lock+0xa0>)
   181e4:	f002 fbc5 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   181e8:	481b      	ldr	r0, [pc, #108]	; (18258 <k_sched_lock+0x9c>)
   181ea:	f001 f94f 	bl	1948c <z_spin_lock_set_owner>
   181ee:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   181f2:	b153      	cbz	r3, 1820a <k_sched_lock+0x4e>
   181f4:	491b      	ldr	r1, [pc, #108]	; (18264 <k_sched_lock+0xa8>)
   181f6:	481a      	ldr	r0, [pc, #104]	; (18260 <k_sched_lock+0xa4>)
   181f8:	f44f 7289 	mov.w	r2, #274	; 0x112
   181fc:	f002 f913 	bl	1a426 <printk>
   18200:	f44f 7189 	mov.w	r1, #274	; 0x112
   18204:	4817      	ldr	r0, [pc, #92]	; (18264 <k_sched_lock+0xa8>)
   18206:	f002 fbb4 	bl	1a972 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1820a:	4c17      	ldr	r4, [pc, #92]	; (18268 <k_sched_lock+0xac>)
   1820c:	68a3      	ldr	r3, [r4, #8]
   1820e:	7bdb      	ldrb	r3, [r3, #15]
   18210:	2b01      	cmp	r3, #1
   18212:	d10a      	bne.n	1822a <k_sched_lock+0x6e>
   18214:	4913      	ldr	r1, [pc, #76]	; (18264 <k_sched_lock+0xa8>)
   18216:	4812      	ldr	r0, [pc, #72]	; (18260 <k_sched_lock+0xa4>)
   18218:	f240 1213 	movw	r2, #275	; 0x113
   1821c:	f002 f903 	bl	1a426 <printk>
   18220:	f240 1113 	movw	r1, #275	; 0x113
   18224:	480f      	ldr	r0, [pc, #60]	; (18264 <k_sched_lock+0xa8>)
   18226:	f002 fba4 	bl	1a972 <assert_post_action>
	--_current->base.sched_locked;
   1822a:	68a2      	ldr	r2, [r4, #8]
   1822c:	7bd3      	ldrb	r3, [r2, #15]
   1822e:	3b01      	subs	r3, #1
   18230:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18232:	4809      	ldr	r0, [pc, #36]	; (18258 <k_sched_lock+0x9c>)
   18234:	f001 f91c 	bl	19470 <z_spin_unlock_valid>
   18238:	b940      	cbnz	r0, 1824c <k_sched_lock+0x90>
   1823a:	4908      	ldr	r1, [pc, #32]	; (1825c <k_sched_lock+0xa0>)
   1823c:	4808      	ldr	r0, [pc, #32]	; (18260 <k_sched_lock+0xa4>)
   1823e:	22a7      	movs	r2, #167	; 0xa7
   18240:	f002 f8f1 	bl	1a426 <printk>
   18244:	21a7      	movs	r1, #167	; 0xa7
   18246:	4805      	ldr	r0, [pc, #20]	; (1825c <k_sched_lock+0xa0>)
   18248:	f002 fb93 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1824c:	f385 8811 	msr	BASEPRI, r5
   18250:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   18254:	bd38      	pop	{r3, r4, r5, pc}
   18256:	bf00      	nop
   18258:	2000affc 	.word	0x2000affc
   1825c:	0001f9c9 	.word	0x0001f9c9
   18260:	0001f98f 	.word	0x0001f98f
   18264:	000227bd 	.word	0x000227bd
   18268:	2000afc4 	.word	0x2000afc4

0001826c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1826c:	4b11      	ldr	r3, [pc, #68]	; (182b4 <z_priq_dumb_remove+0x48>)
{
   1826e:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18270:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   18274:	4282      	cmp	r2, r0
{
   18276:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18278:	d105      	bne.n	18286 <z_priq_dumb_remove+0x1a>
   1827a:	689b      	ldr	r3, [r3, #8]
   1827c:	428b      	cmp	r3, r1
   1827e:	d102      	bne.n	18286 <z_priq_dumb_remove+0x1a>
   18280:	7b4b      	ldrb	r3, [r1, #13]
   18282:	06db      	lsls	r3, r3, #27
   18284:	d114      	bne.n	182b0 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18286:	4b0c      	ldr	r3, [pc, #48]	; (182b8 <z_priq_dumb_remove+0x4c>)
   18288:	429c      	cmp	r4, r3
   1828a:	d10a      	bne.n	182a2 <z_priq_dumb_remove+0x36>
   1828c:	490b      	ldr	r1, [pc, #44]	; (182bc <z_priq_dumb_remove+0x50>)
   1828e:	480c      	ldr	r0, [pc, #48]	; (182c0 <z_priq_dumb_remove+0x54>)
   18290:	f240 32da 	movw	r2, #986	; 0x3da
   18294:	f002 f8c7 	bl	1a426 <printk>
   18298:	f240 31da 	movw	r1, #986	; 0x3da
   1829c:	4807      	ldr	r0, [pc, #28]	; (182bc <z_priq_dumb_remove+0x50>)
   1829e:	f002 fb68 	bl	1a972 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   182a2:	e9d4 3200 	ldrd	r3, r2, [r4]
   182a6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   182a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   182aa:	2300      	movs	r3, #0
	node->prev = NULL;
   182ac:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   182b0:	bd10      	pop	{r4, pc}
   182b2:	bf00      	nop
   182b4:	2000afc4 	.word	0x2000afc4
   182b8:	2000a438 	.word	0x2000a438
   182bc:	000227e8 	.word	0x000227e8
   182c0:	0001f98f 	.word	0x0001f98f

000182c4 <z_unpend_thread>:
{
   182c4:	b538      	push	{r3, r4, r5, lr}
   182c6:	4604      	mov	r4, r0
	__asm__ volatile(
   182c8:	f04f 0320 	mov.w	r3, #32
   182cc:	f3ef 8511 	mrs	r5, BASEPRI
   182d0:	f383 8811 	msr	BASEPRI, r3
   182d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   182d8:	4814      	ldr	r0, [pc, #80]	; (1832c <z_unpend_thread+0x68>)
   182da:	f001 f8bb 	bl	19454 <z_spin_lock_valid>
   182de:	b940      	cbnz	r0, 182f2 <z_unpend_thread+0x2e>
   182e0:	4913      	ldr	r1, [pc, #76]	; (18330 <z_unpend_thread+0x6c>)
   182e2:	4814      	ldr	r0, [pc, #80]	; (18334 <z_unpend_thread+0x70>)
   182e4:	227c      	movs	r2, #124	; 0x7c
   182e6:	f002 f89e 	bl	1a426 <printk>
   182ea:	217c      	movs	r1, #124	; 0x7c
   182ec:	4810      	ldr	r0, [pc, #64]	; (18330 <z_unpend_thread+0x6c>)
   182ee:	f002 fb40 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   182f2:	480e      	ldr	r0, [pc, #56]	; (1832c <z_unpend_thread+0x68>)
   182f4:	f001 f8ca 	bl	1948c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   182f8:	4620      	mov	r0, r4
   182fa:	f005 fc85 	bl	1dc08 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182fe:	480b      	ldr	r0, [pc, #44]	; (1832c <z_unpend_thread+0x68>)
   18300:	f001 f8b6 	bl	19470 <z_spin_unlock_valid>
   18304:	b940      	cbnz	r0, 18318 <z_unpend_thread+0x54>
   18306:	490a      	ldr	r1, [pc, #40]	; (18330 <z_unpend_thread+0x6c>)
   18308:	480a      	ldr	r0, [pc, #40]	; (18334 <z_unpend_thread+0x70>)
   1830a:	22a7      	movs	r2, #167	; 0xa7
   1830c:	f002 f88b 	bl	1a426 <printk>
   18310:	21a7      	movs	r1, #167	; 0xa7
   18312:	4807      	ldr	r0, [pc, #28]	; (18330 <z_unpend_thread+0x6c>)
   18314:	f002 fb2d 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18318:	f385 8811 	msr	BASEPRI, r5
   1831c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18320:	f104 0018 	add.w	r0, r4, #24
}
   18324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18328:	f001 bad8 	b.w	198dc <z_abort_timeout>
   1832c:	2000affc 	.word	0x2000affc
   18330:	0001f9c9 	.word	0x0001f9c9
   18334:	0001f98f 	.word	0x0001f98f

00018338 <update_cache>:
{
   18338:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   1833a:	4c19      	ldr	r4, [pc, #100]	; (183a0 <update_cache+0x68>)
{
   1833c:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   1833e:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   18340:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   18342:	b143      	cbz	r3, 18356 <update_cache+0x1e>
		return _current_cpu->idle_thread;
   18344:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   18346:	b1a8      	cbz	r0, 18374 <update_cache+0x3c>
		if (thread != _current) {
   18348:	68a3      	ldr	r3, [r4, #8]
   1834a:	42ab      	cmp	r3, r5
   1834c:	d001      	beq.n	18352 <update_cache+0x1a>
			z_reset_time_slice();
   1834e:	f7ff fe9b 	bl	18088 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18352:	62a5      	str	r5, [r4, #40]	; 0x28
}
   18354:	e023      	b.n	1839e <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   18356:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1835a:	f005 fc63 	bl	1dc24 <z_priq_dumb_best>
   1835e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   18360:	7b4b      	ldrb	r3, [r1, #13]
   18362:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   18364:	bf44      	itt	mi
   18366:	f043 0308 	orrmi.w	r3, r3, #8
   1836a:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1836c:	b905      	cbnz	r5, 18370 <update_cache+0x38>
   1836e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   18370:	b152      	cbz	r2, 18388 <update_cache+0x50>
   18372:	e7e9      	b.n	18348 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   18374:	b941      	cbnz	r1, 18388 <update_cache+0x50>
   18376:	490b      	ldr	r1, [pc, #44]	; (183a4 <update_cache+0x6c>)
   18378:	480b      	ldr	r0, [pc, #44]	; (183a8 <update_cache+0x70>)
   1837a:	2283      	movs	r2, #131	; 0x83
   1837c:	f002 f853 	bl	1a426 <printk>
   18380:	2183      	movs	r1, #131	; 0x83
   18382:	4808      	ldr	r0, [pc, #32]	; (183a4 <update_cache+0x6c>)
   18384:	f002 faf5 	bl	1a972 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   18388:	68a3      	ldr	r3, [r4, #8]
   1838a:	7b5a      	ldrb	r2, [r3, #13]
   1838c:	06d2      	lsls	r2, r2, #27
   1838e:	d1db      	bne.n	18348 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18390:	69aa      	ldr	r2, [r5, #24]
   18392:	2a00      	cmp	r2, #0
   18394:	d1d8      	bne.n	18348 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   18396:	89da      	ldrh	r2, [r3, #14]
   18398:	2a7f      	cmp	r2, #127	; 0x7f
   1839a:	d9d5      	bls.n	18348 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   1839c:	62a3      	str	r3, [r4, #40]	; 0x28
}
   1839e:	bd38      	pop	{r3, r4, r5, pc}
   183a0:	2000afc4 	.word	0x2000afc4
   183a4:	000227e8 	.word	0x000227e8
   183a8:	0001f98f 	.word	0x0001f98f

000183ac <k_sched_unlock>:
{
   183ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   183ae:	f04f 0320 	mov.w	r3, #32
   183b2:	f3ef 8511 	mrs	r5, BASEPRI
   183b6:	f383 8811 	msr	BASEPRI, r3
   183ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   183be:	4824      	ldr	r0, [pc, #144]	; (18450 <k_sched_unlock+0xa4>)
   183c0:	f001 f848 	bl	19454 <z_spin_lock_valid>
   183c4:	b940      	cbnz	r0, 183d8 <k_sched_unlock+0x2c>
   183c6:	4923      	ldr	r1, [pc, #140]	; (18454 <k_sched_unlock+0xa8>)
   183c8:	4823      	ldr	r0, [pc, #140]	; (18458 <k_sched_unlock+0xac>)
   183ca:	227c      	movs	r2, #124	; 0x7c
   183cc:	f002 f82b 	bl	1a426 <printk>
   183d0:	217c      	movs	r1, #124	; 0x7c
   183d2:	4820      	ldr	r0, [pc, #128]	; (18454 <k_sched_unlock+0xa8>)
   183d4:	f002 facd 	bl	1a972 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   183d8:	4c20      	ldr	r4, [pc, #128]	; (1845c <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   183da:	481d      	ldr	r0, [pc, #116]	; (18450 <k_sched_unlock+0xa4>)
   183dc:	f001 f856 	bl	1948c <z_spin_lock_set_owner>
   183e0:	68a3      	ldr	r3, [r4, #8]
   183e2:	7bdb      	ldrb	r3, [r3, #15]
   183e4:	b953      	cbnz	r3, 183fc <k_sched_unlock+0x50>
   183e6:	491e      	ldr	r1, [pc, #120]	; (18460 <k_sched_unlock+0xb4>)
   183e8:	481b      	ldr	r0, [pc, #108]	; (18458 <k_sched_unlock+0xac>)
   183ea:	f44f 725d 	mov.w	r2, #884	; 0x374
   183ee:	f002 f81a 	bl	1a426 <printk>
   183f2:	f44f 715d 	mov.w	r1, #884	; 0x374
   183f6:	481a      	ldr	r0, [pc, #104]	; (18460 <k_sched_unlock+0xb4>)
   183f8:	f002 fabb 	bl	1a972 <assert_post_action>
   183fc:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   18400:	b153      	cbz	r3, 18418 <k_sched_unlock+0x6c>
   18402:	4917      	ldr	r1, [pc, #92]	; (18460 <k_sched_unlock+0xb4>)
   18404:	4814      	ldr	r0, [pc, #80]	; (18458 <k_sched_unlock+0xac>)
   18406:	f240 3275 	movw	r2, #885	; 0x375
   1840a:	f002 f80c 	bl	1a426 <printk>
   1840e:	f240 3175 	movw	r1, #885	; 0x375
   18412:	4813      	ldr	r0, [pc, #76]	; (18460 <k_sched_unlock+0xb4>)
   18414:	f002 faad 	bl	1a972 <assert_post_action>
		++_current->base.sched_locked;
   18418:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1841a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1841c:	7bd3      	ldrb	r3, [r2, #15]
   1841e:	3301      	adds	r3, #1
   18420:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18422:	f7ff ff89 	bl	18338 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18426:	480a      	ldr	r0, [pc, #40]	; (18450 <k_sched_unlock+0xa4>)
   18428:	f001 f822 	bl	19470 <z_spin_unlock_valid>
   1842c:	b940      	cbnz	r0, 18440 <k_sched_unlock+0x94>
   1842e:	4909      	ldr	r1, [pc, #36]	; (18454 <k_sched_unlock+0xa8>)
   18430:	4809      	ldr	r0, [pc, #36]	; (18458 <k_sched_unlock+0xac>)
   18432:	22a7      	movs	r2, #167	; 0xa7
   18434:	f001 fff7 	bl	1a426 <printk>
   18438:	21a7      	movs	r1, #167	; 0xa7
   1843a:	4806      	ldr	r0, [pc, #24]	; (18454 <k_sched_unlock+0xa8>)
   1843c:	f002 fa99 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18440:	f385 8811 	msr	BASEPRI, r5
   18444:	f3bf 8f6f 	isb	sy
}
   18448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1844c:	f005 bbd2 	b.w	1dbf4 <z_reschedule_unlocked>
   18450:	2000affc 	.word	0x2000affc
   18454:	0001f9c9 	.word	0x0001f9c9
   18458:	0001f98f 	.word	0x0001f98f
   1845c:	2000afc4 	.word	0x2000afc4
   18460:	000227e8 	.word	0x000227e8

00018464 <ready_thread>:
{
   18464:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18466:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1846a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1846c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1846e:	7b43      	ldrb	r3, [r0, #13]
   18470:	db39      	blt.n	184e6 <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18472:	06db      	lsls	r3, r3, #27
   18474:	d137      	bne.n	184e6 <ready_thread+0x82>
   18476:	6983      	ldr	r3, [r0, #24]
   18478:	2b00      	cmp	r3, #0
   1847a:	d134      	bne.n	184e6 <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1847c:	4b1a      	ldr	r3, [pc, #104]	; (184e8 <ready_thread+0x84>)
   1847e:	4298      	cmp	r0, r3
   18480:	d10a      	bne.n	18498 <ready_thread+0x34>
   18482:	491a      	ldr	r1, [pc, #104]	; (184ec <ready_thread+0x88>)
   18484:	481a      	ldr	r0, [pc, #104]	; (184f0 <ready_thread+0x8c>)
   18486:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1848a:	f001 ffcc 	bl	1a426 <printk>
   1848e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18492:	4816      	ldr	r0, [pc, #88]	; (184ec <ready_thread+0x88>)
   18494:	f002 fa6d 	bl	1a972 <assert_post_action>
	return list->head == list;
   18498:	4a16      	ldr	r2, [pc, #88]	; (184f4 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1849a:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   1849e:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   184a2:	4283      	cmp	r3, r0
   184a4:	d019      	beq.n	184da <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   184a6:	b1c3      	cbz	r3, 184da <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   184a8:	f994 500e 	ldrsb.w	r5, [r4, #14]
   184ac:	f993 600e 	ldrsb.w	r6, [r3, #14]
   184b0:	42ae      	cmp	r6, r5
   184b2:	dd0d      	ble.n	184d0 <ready_thread+0x6c>
	node->prev = successor->prev;
   184b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   184b6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   184ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   184bc:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   184be:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   184c0:	2000      	movs	r0, #0
   184c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   184c6:	7363      	strb	r3, [r4, #13]
}
   184c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   184cc:	f7ff bf34 	b.w	18338 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   184d0:	428b      	cmp	r3, r1
   184d2:	d002      	beq.n	184da <ready_thread+0x76>
   184d4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   184d6:	2b00      	cmp	r3, #0
   184d8:	d1e8      	bne.n	184ac <ready_thread+0x48>
	node->prev = list->tail;
   184da:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   184de:	6b13      	ldr	r3, [r2, #48]	; 0x30
   184e0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   184e2:	6314      	str	r4, [r2, #48]	; 0x30
}
   184e4:	e7eb      	b.n	184be <ready_thread+0x5a>
}
   184e6:	bd70      	pop	{r4, r5, r6, pc}
   184e8:	2000a438 	.word	0x2000a438
   184ec:	000227e8 	.word	0x000227e8
   184f0:	0001f98f 	.word	0x0001f98f
   184f4:	2000afc4 	.word	0x2000afc4

000184f8 <z_ready_thread>:
{
   184f8:	b538      	push	{r3, r4, r5, lr}
   184fa:	4604      	mov	r4, r0
	__asm__ volatile(
   184fc:	f04f 0320 	mov.w	r3, #32
   18500:	f3ef 8511 	mrs	r5, BASEPRI
   18504:	f383 8811 	msr	BASEPRI, r3
   18508:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1850c:	4812      	ldr	r0, [pc, #72]	; (18558 <z_ready_thread+0x60>)
   1850e:	f000 ffa1 	bl	19454 <z_spin_lock_valid>
   18512:	b940      	cbnz	r0, 18526 <z_ready_thread+0x2e>
   18514:	4911      	ldr	r1, [pc, #68]	; (1855c <z_ready_thread+0x64>)
   18516:	4812      	ldr	r0, [pc, #72]	; (18560 <z_ready_thread+0x68>)
   18518:	227c      	movs	r2, #124	; 0x7c
   1851a:	f001 ff84 	bl	1a426 <printk>
   1851e:	217c      	movs	r1, #124	; 0x7c
   18520:	480e      	ldr	r0, [pc, #56]	; (1855c <z_ready_thread+0x64>)
   18522:	f002 fa26 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18526:	480c      	ldr	r0, [pc, #48]	; (18558 <z_ready_thread+0x60>)
   18528:	f000 ffb0 	bl	1948c <z_spin_lock_set_owner>
		ready_thread(thread);
   1852c:	4620      	mov	r0, r4
   1852e:	f7ff ff99 	bl	18464 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18532:	4809      	ldr	r0, [pc, #36]	; (18558 <z_ready_thread+0x60>)
   18534:	f000 ff9c 	bl	19470 <z_spin_unlock_valid>
   18538:	b940      	cbnz	r0, 1854c <z_ready_thread+0x54>
   1853a:	4908      	ldr	r1, [pc, #32]	; (1855c <z_ready_thread+0x64>)
   1853c:	4808      	ldr	r0, [pc, #32]	; (18560 <z_ready_thread+0x68>)
   1853e:	22a7      	movs	r2, #167	; 0xa7
   18540:	f001 ff71 	bl	1a426 <printk>
   18544:	21a7      	movs	r1, #167	; 0xa7
   18546:	4805      	ldr	r0, [pc, #20]	; (1855c <z_ready_thread+0x64>)
   18548:	f002 fa13 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1854c:	f385 8811 	msr	BASEPRI, r5
   18550:	f3bf 8f6f 	isb	sy
}
   18554:	bd38      	pop	{r3, r4, r5, pc}
   18556:	bf00      	nop
   18558:	2000affc 	.word	0x2000affc
   1855c:	0001f9c9 	.word	0x0001f9c9
   18560:	0001f98f 	.word	0x0001f98f

00018564 <z_sched_start>:
{
   18564:	b538      	push	{r3, r4, r5, lr}
   18566:	4604      	mov	r4, r0
	__asm__ volatile(
   18568:	f04f 0320 	mov.w	r3, #32
   1856c:	f3ef 8511 	mrs	r5, BASEPRI
   18570:	f383 8811 	msr	BASEPRI, r3
   18574:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18578:	4818      	ldr	r0, [pc, #96]	; (185dc <z_sched_start+0x78>)
   1857a:	f000 ff6b 	bl	19454 <z_spin_lock_valid>
   1857e:	b940      	cbnz	r0, 18592 <z_sched_start+0x2e>
   18580:	4917      	ldr	r1, [pc, #92]	; (185e0 <z_sched_start+0x7c>)
   18582:	4818      	ldr	r0, [pc, #96]	; (185e4 <z_sched_start+0x80>)
   18584:	227c      	movs	r2, #124	; 0x7c
   18586:	f001 ff4e 	bl	1a426 <printk>
   1858a:	217c      	movs	r1, #124	; 0x7c
   1858c:	4814      	ldr	r0, [pc, #80]	; (185e0 <z_sched_start+0x7c>)
   1858e:	f002 f9f0 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18592:	4812      	ldr	r0, [pc, #72]	; (185dc <z_sched_start+0x78>)
   18594:	f000 ff7a 	bl	1948c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18598:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   1859a:	075a      	lsls	r2, r3, #29
   1859c:	d411      	bmi.n	185c2 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1859e:	480f      	ldr	r0, [pc, #60]	; (185dc <z_sched_start+0x78>)
   185a0:	f000 ff66 	bl	19470 <z_spin_unlock_valid>
   185a4:	b940      	cbnz	r0, 185b8 <z_sched_start+0x54>
   185a6:	490e      	ldr	r1, [pc, #56]	; (185e0 <z_sched_start+0x7c>)
   185a8:	480e      	ldr	r0, [pc, #56]	; (185e4 <z_sched_start+0x80>)
   185aa:	22a7      	movs	r2, #167	; 0xa7
   185ac:	f001 ff3b 	bl	1a426 <printk>
   185b0:	21a7      	movs	r1, #167	; 0xa7
   185b2:	480b      	ldr	r0, [pc, #44]	; (185e0 <z_sched_start+0x7c>)
   185b4:	f002 f9dd 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   185b8:	f385 8811 	msr	BASEPRI, r5
   185bc:	f3bf 8f6f 	isb	sy
}
   185c0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   185c2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   185c6:	4620      	mov	r0, r4
   185c8:	7363      	strb	r3, [r4, #13]
   185ca:	f7ff ff4b 	bl	18464 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   185ce:	4629      	mov	r1, r5
}
   185d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   185d4:	4801      	ldr	r0, [pc, #4]	; (185dc <z_sched_start+0x78>)
   185d6:	f7ff bdbb 	b.w	18150 <z_reschedule>
   185da:	bf00      	nop
   185dc:	2000affc 	.word	0x2000affc
   185e0:	0001f9c9 	.word	0x0001f9c9
   185e4:	0001f98f 	.word	0x0001f98f

000185e8 <z_thread_timeout>:
{
   185e8:	b570      	push	{r4, r5, r6, lr}
   185ea:	4604      	mov	r4, r0
	__asm__ volatile(
   185ec:	f04f 0320 	mov.w	r3, #32
   185f0:	f3ef 8611 	mrs	r6, BASEPRI
   185f4:	f383 8811 	msr	BASEPRI, r3
   185f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   185fc:	4819      	ldr	r0, [pc, #100]	; (18664 <z_thread_timeout+0x7c>)
   185fe:	f000 ff29 	bl	19454 <z_spin_lock_valid>
   18602:	b940      	cbnz	r0, 18616 <z_thread_timeout+0x2e>
   18604:	4918      	ldr	r1, [pc, #96]	; (18668 <z_thread_timeout+0x80>)
   18606:	4819      	ldr	r0, [pc, #100]	; (1866c <z_thread_timeout+0x84>)
   18608:	227c      	movs	r2, #124	; 0x7c
   1860a:	f001 ff0c 	bl	1a426 <printk>
   1860e:	217c      	movs	r1, #124	; 0x7c
   18610:	4815      	ldr	r0, [pc, #84]	; (18668 <z_thread_timeout+0x80>)
   18612:	f002 f9ae 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18616:	4813      	ldr	r0, [pc, #76]	; (18664 <z_thread_timeout+0x7c>)
   18618:	f000 ff38 	bl	1948c <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   1861c:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   18620:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   18624:	b113      	cbz	r3, 1862c <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   18626:	4628      	mov	r0, r5
   18628:	f005 faee 	bl	1dc08 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1862c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   18630:	4628      	mov	r0, r5
   18632:	f023 0314 	bic.w	r3, r3, #20
   18636:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1863a:	f7ff ff13 	bl	18464 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1863e:	4809      	ldr	r0, [pc, #36]	; (18664 <z_thread_timeout+0x7c>)
   18640:	f000 ff16 	bl	19470 <z_spin_unlock_valid>
   18644:	b940      	cbnz	r0, 18658 <z_thread_timeout+0x70>
   18646:	4908      	ldr	r1, [pc, #32]	; (18668 <z_thread_timeout+0x80>)
   18648:	4808      	ldr	r0, [pc, #32]	; (1866c <z_thread_timeout+0x84>)
   1864a:	22a7      	movs	r2, #167	; 0xa7
   1864c:	f001 feeb 	bl	1a426 <printk>
   18650:	21a7      	movs	r1, #167	; 0xa7
   18652:	4805      	ldr	r0, [pc, #20]	; (18668 <z_thread_timeout+0x80>)
   18654:	f002 f98d 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18658:	f386 8811 	msr	BASEPRI, r6
   1865c:	f3bf 8f6f 	isb	sy
}
   18660:	bd70      	pop	{r4, r5, r6, pc}
   18662:	bf00      	nop
   18664:	2000affc 	.word	0x2000affc
   18668:	0001f9c9 	.word	0x0001f9c9
   1866c:	0001f98f 	.word	0x0001f98f

00018670 <move_thread_to_end_of_prio_q>:
{
   18670:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18672:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18676:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18678:	2b00      	cmp	r3, #0
   1867a:	da03      	bge.n	18684 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1867c:	4601      	mov	r1, r0
   1867e:	481d      	ldr	r0, [pc, #116]	; (186f4 <move_thread_to_end_of_prio_q+0x84>)
   18680:	f7ff fdf4 	bl	1826c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18684:	4b1c      	ldr	r3, [pc, #112]	; (186f8 <move_thread_to_end_of_prio_q+0x88>)
   18686:	429c      	cmp	r4, r3
   18688:	d10a      	bne.n	186a0 <move_thread_to_end_of_prio_q+0x30>
   1868a:	491c      	ldr	r1, [pc, #112]	; (186fc <move_thread_to_end_of_prio_q+0x8c>)
   1868c:	481c      	ldr	r0, [pc, #112]	; (18700 <move_thread_to_end_of_prio_q+0x90>)
   1868e:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18692:	f001 fec8 	bl	1a426 <printk>
   18696:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1869a:	4818      	ldr	r0, [pc, #96]	; (186fc <move_thread_to_end_of_prio_q+0x8c>)
   1869c:	f002 f969 	bl	1a972 <assert_post_action>
	return list->head == list;
   186a0:	4a18      	ldr	r2, [pc, #96]	; (18704 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   186a2:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   186a6:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   186aa:	4283      	cmp	r3, r0
   186ac:	d01c      	beq.n	186e8 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   186ae:	b1db      	cbz	r3, 186e8 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   186b0:	f994 500e 	ldrsb.w	r5, [r4, #14]
   186b4:	f993 600e 	ldrsb.w	r6, [r3, #14]
   186b8:	42ae      	cmp	r6, r5
   186ba:	dd10      	ble.n	186de <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   186bc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   186be:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   186c2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   186c4:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   186c6:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   186c8:	6890      	ldr	r0, [r2, #8]
   186ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
   186ce:	7363      	strb	r3, [r4, #13]
   186d0:	1b03      	subs	r3, r0, r4
   186d2:	4258      	negs	r0, r3
   186d4:	4158      	adcs	r0, r3
}
   186d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   186da:	f7ff be2d 	b.w	18338 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   186de:	428b      	cmp	r3, r1
   186e0:	d002      	beq.n	186e8 <move_thread_to_end_of_prio_q+0x78>
   186e2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   186e4:	2b00      	cmp	r3, #0
   186e6:	d1e5      	bne.n	186b4 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   186e8:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   186ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
   186ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   186f0:	6314      	str	r4, [r2, #48]	; 0x30
}
   186f2:	e7e8      	b.n	186c6 <move_thread_to_end_of_prio_q+0x56>
   186f4:	2000aff0 	.word	0x2000aff0
   186f8:	2000a438 	.word	0x2000a438
   186fc:	000227e8 	.word	0x000227e8
   18700:	0001f98f 	.word	0x0001f98f
   18704:	2000afc4 	.word	0x2000afc4

00018708 <z_time_slice>:
{
   18708:	b538      	push	{r3, r4, r5, lr}
   1870a:	4604      	mov	r4, r0
	__asm__ volatile(
   1870c:	f04f 0320 	mov.w	r3, #32
   18710:	f3ef 8511 	mrs	r5, BASEPRI
   18714:	f383 8811 	msr	BASEPRI, r3
   18718:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1871c:	4824      	ldr	r0, [pc, #144]	; (187b0 <z_time_slice+0xa8>)
   1871e:	f000 fe99 	bl	19454 <z_spin_lock_valid>
   18722:	b940      	cbnz	r0, 18736 <z_time_slice+0x2e>
   18724:	4923      	ldr	r1, [pc, #140]	; (187b4 <z_time_slice+0xac>)
   18726:	4824      	ldr	r0, [pc, #144]	; (187b8 <z_time_slice+0xb0>)
   18728:	227c      	movs	r2, #124	; 0x7c
   1872a:	f001 fe7c 	bl	1a426 <printk>
   1872e:	217c      	movs	r1, #124	; 0x7c
   18730:	4820      	ldr	r0, [pc, #128]	; (187b4 <z_time_slice+0xac>)
   18732:	f002 f91e 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18736:	481e      	ldr	r0, [pc, #120]	; (187b0 <z_time_slice+0xa8>)
   18738:	f000 fea8 	bl	1948c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1873c:	4b1f      	ldr	r3, [pc, #124]	; (187bc <z_time_slice+0xb4>)
   1873e:	4a20      	ldr	r2, [pc, #128]	; (187c0 <z_time_slice+0xb8>)
   18740:	6898      	ldr	r0, [r3, #8]
   18742:	6811      	ldr	r1, [r2, #0]
   18744:	4288      	cmp	r0, r1
   18746:	d113      	bne.n	18770 <z_time_slice+0x68>
			z_reset_time_slice();
   18748:	f7ff fc9e 	bl	18088 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1874c:	4818      	ldr	r0, [pc, #96]	; (187b0 <z_time_slice+0xa8>)
   1874e:	f000 fe8f 	bl	19470 <z_spin_unlock_valid>
   18752:	b940      	cbnz	r0, 18766 <z_time_slice+0x5e>
   18754:	4917      	ldr	r1, [pc, #92]	; (187b4 <z_time_slice+0xac>)
   18756:	4818      	ldr	r0, [pc, #96]	; (187b8 <z_time_slice+0xb0>)
   18758:	22a7      	movs	r2, #167	; 0xa7
   1875a:	f001 fe64 	bl	1a426 <printk>
   1875e:	21a7      	movs	r1, #167	; 0xa7
   18760:	4814      	ldr	r0, [pc, #80]	; (187b4 <z_time_slice+0xac>)
   18762:	f002 f906 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18766:	f385 8811 	msr	BASEPRI, r5
   1876a:	f3bf 8f6f 	isb	sy
}
   1876e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   18770:	2100      	movs	r1, #0
   18772:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   18774:	4a13      	ldr	r2, [pc, #76]	; (187c4 <z_time_slice+0xbc>)
   18776:	6812      	ldr	r2, [r2, #0]
   18778:	b1ba      	cbz	r2, 187aa <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   1877a:	89c2      	ldrh	r2, [r0, #14]
   1877c:	2a7f      	cmp	r2, #127	; 0x7f
   1877e:	d814      	bhi.n	187aa <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   18780:	7b42      	ldrb	r2, [r0, #13]
   18782:	06d2      	lsls	r2, r2, #27
   18784:	d111      	bne.n	187aa <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18786:	4a10      	ldr	r2, [pc, #64]	; (187c8 <z_time_slice+0xc0>)
   18788:	f990 100e 	ldrsb.w	r1, [r0, #14]
   1878c:	6812      	ldr	r2, [r2, #0]
   1878e:	4291      	cmp	r1, r2
   18790:	db0b      	blt.n	187aa <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18792:	4a0e      	ldr	r2, [pc, #56]	; (187cc <z_time_slice+0xc4>)
   18794:	4290      	cmp	r0, r2
   18796:	d008      	beq.n	187aa <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   18798:	695a      	ldr	r2, [r3, #20]
   1879a:	42a2      	cmp	r2, r4
   1879c:	dc02      	bgt.n	187a4 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   1879e:	f7ff ff67 	bl	18670 <move_thread_to_end_of_prio_q>
   187a2:	e7d1      	b.n	18748 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   187a4:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   187a6:	615a      	str	r2, [r3, #20]
   187a8:	e7d0      	b.n	1874c <z_time_slice+0x44>
   187aa:	2200      	movs	r2, #0
   187ac:	e7fb      	b.n	187a6 <z_time_slice+0x9e>
   187ae:	bf00      	nop
   187b0:	2000affc 	.word	0x2000affc
   187b4:	0001f9c9 	.word	0x0001f9c9
   187b8:	0001f98f 	.word	0x0001f98f
   187bc:	2000afc4 	.word	0x2000afc4
   187c0:	2000aff8 	.word	0x2000aff8
   187c4:	2000b004 	.word	0x2000b004
   187c8:	2000b000 	.word	0x2000b000
   187cc:	2000a438 	.word	0x2000a438

000187d0 <z_impl_k_thread_suspend>:
{
   187d0:	b570      	push	{r4, r5, r6, lr}
   187d2:	4604      	mov	r4, r0
   187d4:	3018      	adds	r0, #24
   187d6:	f001 f881 	bl	198dc <z_abort_timeout>
	__asm__ volatile(
   187da:	f04f 0320 	mov.w	r3, #32
   187de:	f3ef 8611 	mrs	r6, BASEPRI
   187e2:	f383 8811 	msr	BASEPRI, r3
   187e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   187ea:	4820      	ldr	r0, [pc, #128]	; (1886c <z_impl_k_thread_suspend+0x9c>)
   187ec:	f000 fe32 	bl	19454 <z_spin_lock_valid>
   187f0:	b940      	cbnz	r0, 18804 <z_impl_k_thread_suspend+0x34>
   187f2:	491f      	ldr	r1, [pc, #124]	; (18870 <z_impl_k_thread_suspend+0xa0>)
   187f4:	481f      	ldr	r0, [pc, #124]	; (18874 <z_impl_k_thread_suspend+0xa4>)
   187f6:	227c      	movs	r2, #124	; 0x7c
   187f8:	f001 fe15 	bl	1a426 <printk>
   187fc:	217c      	movs	r1, #124	; 0x7c
   187fe:	481c      	ldr	r0, [pc, #112]	; (18870 <z_impl_k_thread_suspend+0xa0>)
   18800:	f002 f8b7 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18804:	4819      	ldr	r0, [pc, #100]	; (1886c <z_impl_k_thread_suspend+0x9c>)
   18806:	f000 fe41 	bl	1948c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1880a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1880e:	2b00      	cmp	r3, #0
   18810:	da07      	bge.n	18822 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18812:	4621      	mov	r1, r4
   18814:	4818      	ldr	r0, [pc, #96]	; (18878 <z_impl_k_thread_suspend+0xa8>)
   18816:	f7ff fd29 	bl	1826c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1881a:	7b63      	ldrb	r3, [r4, #13]
   1881c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18820:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18822:	4d16      	ldr	r5, [pc, #88]	; (1887c <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18824:	7b63      	ldrb	r3, [r4, #13]
   18826:	68a8      	ldr	r0, [r5, #8]
   18828:	f043 0310 	orr.w	r3, r3, #16
   1882c:	7363      	strb	r3, [r4, #13]
   1882e:	1b03      	subs	r3, r0, r4
   18830:	4258      	negs	r0, r3
   18832:	4158      	adcs	r0, r3
   18834:	f7ff fd80 	bl	18338 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18838:	480c      	ldr	r0, [pc, #48]	; (1886c <z_impl_k_thread_suspend+0x9c>)
   1883a:	f000 fe19 	bl	19470 <z_spin_unlock_valid>
   1883e:	b940      	cbnz	r0, 18852 <z_impl_k_thread_suspend+0x82>
   18840:	490b      	ldr	r1, [pc, #44]	; (18870 <z_impl_k_thread_suspend+0xa0>)
   18842:	480c      	ldr	r0, [pc, #48]	; (18874 <z_impl_k_thread_suspend+0xa4>)
   18844:	22a7      	movs	r2, #167	; 0xa7
   18846:	f001 fdee 	bl	1a426 <printk>
   1884a:	21a7      	movs	r1, #167	; 0xa7
   1884c:	4808      	ldr	r0, [pc, #32]	; (18870 <z_impl_k_thread_suspend+0xa0>)
   1884e:	f002 f890 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18852:	f386 8811 	msr	BASEPRI, r6
   18856:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1885a:	68ab      	ldr	r3, [r5, #8]
   1885c:	42a3      	cmp	r3, r4
   1885e:	d103      	bne.n	18868 <z_impl_k_thread_suspend+0x98>
}
   18860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18864:	f005 b9c6 	b.w	1dbf4 <z_reschedule_unlocked>
}
   18868:	bd70      	pop	{r4, r5, r6, pc}
   1886a:	bf00      	nop
   1886c:	2000affc 	.word	0x2000affc
   18870:	0001f9c9 	.word	0x0001f9c9
   18874:	0001f98f 	.word	0x0001f98f
   18878:	2000aff0 	.word	0x2000aff0
   1887c:	2000afc4 	.word	0x2000afc4

00018880 <z_thread_single_abort>:
{
   18880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18884:	7b03      	ldrb	r3, [r0, #12]
{
   18886:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18888:	07dd      	lsls	r5, r3, #31
   1888a:	d50a      	bpl.n	188a2 <z_thread_single_abort+0x22>
   1888c:	4976      	ldr	r1, [pc, #472]	; (18a68 <z_thread_single_abort+0x1e8>)
   1888e:	4877      	ldr	r0, [pc, #476]	; (18a6c <z_thread_single_abort+0x1ec>)
   18890:	f240 220d 	movw	r2, #525	; 0x20d
   18894:	f001 fdc7 	bl	1a426 <printk>
   18898:	f240 210d 	movw	r1, #525	; 0x20d
   1889c:	4872      	ldr	r0, [pc, #456]	; (18a68 <z_thread_single_abort+0x1e8>)
   1889e:	f002 f868 	bl	1a972 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   188a2:	4e73      	ldr	r6, [pc, #460]	; (18a70 <z_thread_single_abort+0x1f0>)
   188a4:	68b3      	ldr	r3, [r6, #8]
   188a6:	42a3      	cmp	r3, r4
   188a8:	d10d      	bne.n	188c6 <z_thread_single_abort+0x46>
   188aa:	f3ef 8305 	mrs	r3, IPSR
   188ae:	b953      	cbnz	r3, 188c6 <z_thread_single_abort+0x46>
   188b0:	496d      	ldr	r1, [pc, #436]	; (18a68 <z_thread_single_abort+0x1e8>)
   188b2:	486e      	ldr	r0, [pc, #440]	; (18a6c <z_thread_single_abort+0x1ec>)
   188b4:	f240 220f 	movw	r2, #527	; 0x20f
   188b8:	f001 fdb5 	bl	1a426 <printk>
   188bc:	f240 210f 	movw	r1, #527	; 0x20f
   188c0:	4869      	ldr	r0, [pc, #420]	; (18a68 <z_thread_single_abort+0x1e8>)
   188c2:	f002 f856 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   188c6:	f04f 0320 	mov.w	r3, #32
   188ca:	f3ef 8511 	mrs	r5, BASEPRI
   188ce:	f383 8811 	msr	BASEPRI, r3
   188d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   188d6:	4867      	ldr	r0, [pc, #412]	; (18a74 <z_thread_single_abort+0x1f4>)
   188d8:	f000 fdbc 	bl	19454 <z_spin_lock_valid>
   188dc:	b940      	cbnz	r0, 188f0 <z_thread_single_abort+0x70>
   188de:	4966      	ldr	r1, [pc, #408]	; (18a78 <z_thread_single_abort+0x1f8>)
   188e0:	4862      	ldr	r0, [pc, #392]	; (18a6c <z_thread_single_abort+0x1ec>)
   188e2:	227c      	movs	r2, #124	; 0x7c
   188e4:	f001 fd9f 	bl	1a426 <printk>
   188e8:	217c      	movs	r1, #124	; 0x7c
   188ea:	4863      	ldr	r0, [pc, #396]	; (18a78 <z_thread_single_abort+0x1f8>)
   188ec:	f002 f841 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   188f0:	4860      	ldr	r0, [pc, #384]	; (18a74 <z_thread_single_abort+0x1f4>)
   188f2:	f000 fdcb 	bl	1948c <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   188f6:	7b63      	ldrb	r3, [r4, #13]
   188f8:	f013 0f28 	tst.w	r3, #40	; 0x28
   188fc:	d012      	beq.n	18924 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   188fe:	485d      	ldr	r0, [pc, #372]	; (18a74 <z_thread_single_abort+0x1f4>)
   18900:	f000 fdb6 	bl	19470 <z_spin_unlock_valid>
   18904:	b940      	cbnz	r0, 18918 <z_thread_single_abort+0x98>
   18906:	495c      	ldr	r1, [pc, #368]	; (18a78 <z_thread_single_abort+0x1f8>)
   18908:	4858      	ldr	r0, [pc, #352]	; (18a6c <z_thread_single_abort+0x1ec>)
   1890a:	22a7      	movs	r2, #167	; 0xa7
   1890c:	f001 fd8b 	bl	1a426 <printk>
   18910:	21a7      	movs	r1, #167	; 0xa7
   18912:	4859      	ldr	r0, [pc, #356]	; (18a78 <z_thread_single_abort+0x1f8>)
   18914:	f002 f82d 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18918:	f385 8811 	msr	BASEPRI, r5
   1891c:	f3bf 8f6f 	isb	sy
}
   18920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   18924:	f043 0320 	orr.w	r3, r3, #32
   18928:	4852      	ldr	r0, [pc, #328]	; (18a74 <z_thread_single_abort+0x1f4>)
   1892a:	7363      	strb	r3, [r4, #13]
   1892c:	f000 fda0 	bl	19470 <z_spin_unlock_valid>
   18930:	b940      	cbnz	r0, 18944 <z_thread_single_abort+0xc4>
   18932:	4951      	ldr	r1, [pc, #324]	; (18a78 <z_thread_single_abort+0x1f8>)
   18934:	484d      	ldr	r0, [pc, #308]	; (18a6c <z_thread_single_abort+0x1ec>)
   18936:	22a7      	movs	r2, #167	; 0xa7
   18938:	f001 fd75 	bl	1a426 <printk>
   1893c:	21a7      	movs	r1, #167	; 0xa7
   1893e:	484e      	ldr	r0, [pc, #312]	; (18a78 <z_thread_single_abort+0x1f8>)
   18940:	f002 f817 	bl	1a972 <assert_post_action>
   18944:	f385 8811 	msr	BASEPRI, r5
   18948:	f3bf 8f6f 	isb	sy
   1894c:	f104 0018 	add.w	r0, r4, #24
   18950:	f000 ffc4 	bl	198dc <z_abort_timeout>
	__asm__ volatile(
   18954:	f04f 0320 	mov.w	r3, #32
   18958:	f3ef 8711 	mrs	r7, BASEPRI
   1895c:	f383 8811 	msr	BASEPRI, r3
   18960:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18964:	4843      	ldr	r0, [pc, #268]	; (18a74 <z_thread_single_abort+0x1f4>)
   18966:	f000 fd75 	bl	19454 <z_spin_lock_valid>
   1896a:	b940      	cbnz	r0, 1897e <z_thread_single_abort+0xfe>
   1896c:	4942      	ldr	r1, [pc, #264]	; (18a78 <z_thread_single_abort+0x1f8>)
   1896e:	483f      	ldr	r0, [pc, #252]	; (18a6c <z_thread_single_abort+0x1ec>)
   18970:	227c      	movs	r2, #124	; 0x7c
   18972:	f001 fd58 	bl	1a426 <printk>
   18976:	217c      	movs	r1, #124	; 0x7c
   18978:	483f      	ldr	r0, [pc, #252]	; (18a78 <z_thread_single_abort+0x1f8>)
   1897a:	f001 fffa 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   1897e:	483d      	ldr	r0, [pc, #244]	; (18a74 <z_thread_single_abort+0x1f4>)
   18980:	f000 fd84 	bl	1948c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   18984:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18986:	06d8      	lsls	r0, r3, #27
   18988:	d116      	bne.n	189b8 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   1898a:	69a2      	ldr	r2, [r4, #24]
   1898c:	b9a2      	cbnz	r2, 189b8 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   1898e:	0619      	lsls	r1, r3, #24
   18990:	d507      	bpl.n	189a2 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   18992:	4621      	mov	r1, r4
   18994:	4839      	ldr	r0, [pc, #228]	; (18a7c <z_thread_single_abort+0x1fc>)
   18996:	f7ff fc69 	bl	1826c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1899a:	7b63      	ldrb	r3, [r4, #13]
   1899c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   189a0:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   189a2:	68b0      	ldr	r0, [r6, #8]
   189a4:	1b02      	subs	r2, r0, r4
   189a6:	4250      	negs	r0, r2
   189a8:	4150      	adcs	r0, r2
   189aa:	f7ff fcc5 	bl	18338 <update_cache>
			waiter->base.pended_on = NULL;
   189ae:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   189b2:	f104 0930 	add.w	r9, r4, #48	; 0x30
   189b6:	e023      	b.n	18a00 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   189b8:	079b      	lsls	r3, r3, #30
   189ba:	d5f8      	bpl.n	189ae <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   189bc:	4620      	mov	r0, r4
   189be:	f7ff fb4d 	bl	1805c <pended_on>
   189c2:	4621      	mov	r1, r4
   189c4:	f7ff fc52 	bl	1826c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   189c8:	7b63      	ldrb	r3, [r4, #13]
   189ca:	f023 0302 	bic.w	r3, r3, #2
   189ce:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   189d0:	2300      	movs	r3, #0
   189d2:	60a3      	str	r3, [r4, #8]
   189d4:	e7eb      	b.n	189ae <z_thread_single_abort+0x12e>
   189d6:	f105 0018 	add.w	r0, r5, #24
   189da:	f000 ff7f 	bl	198dc <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   189de:	4628      	mov	r0, r5
   189e0:	f7ff fb3c 	bl	1805c <pended_on>
   189e4:	4629      	mov	r1, r5
   189e6:	f7ff fc41 	bl	1826c <z_priq_dumb_remove>
   189ea:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   189ec:	4628      	mov	r0, r5
   189ee:	f023 0302 	bic.w	r3, r3, #2
   189f2:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   189f4:	f8c5 8008 	str.w	r8, [r5, #8]
   189f8:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   189fc:	f7ff fd32 	bl	18464 <ready_thread>
	return list->head == list;
   18a00:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a02:	454d      	cmp	r5, r9
   18a04:	d001      	beq.n	18a0a <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   18a06:	2d00      	cmp	r5, #0
   18a08:	d1e5      	bne.n	189d6 <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   18a0a:	68b2      	ldr	r2, [r6, #8]
   18a0c:	4b1c      	ldr	r3, [pc, #112]	; (18a80 <z_thread_single_abort+0x200>)
   18a0e:	429a      	cmp	r2, r3
   18a10:	d102      	bne.n	18a18 <z_thread_single_abort+0x198>
			update_cache(1);
   18a12:	2001      	movs	r0, #1
   18a14:	f7ff fc90 	bl	18338 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18a18:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   18a1a:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   18a1c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   18a1e:	f043 0308 	orr.w	r3, r3, #8
   18a22:	7363      	strb	r3, [r4, #13]
   18a24:	f104 0338 	add.w	r3, r4, #56	; 0x38
   18a28:	e8d3 1fef 	ldaex	r1, [r3]
   18a2c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   18a30:	2800      	cmp	r0, #0
   18a32:	d1f9      	bne.n	18a28 <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a34:	480f      	ldr	r0, [pc, #60]	; (18a74 <z_thread_single_abort+0x1f4>)
   18a36:	f000 fd1b 	bl	19470 <z_spin_unlock_valid>
   18a3a:	b940      	cbnz	r0, 18a4e <z_thread_single_abort+0x1ce>
   18a3c:	490e      	ldr	r1, [pc, #56]	; (18a78 <z_thread_single_abort+0x1f8>)
   18a3e:	480b      	ldr	r0, [pc, #44]	; (18a6c <z_thread_single_abort+0x1ec>)
   18a40:	22a7      	movs	r2, #167	; 0xa7
   18a42:	f001 fcf0 	bl	1a426 <printk>
   18a46:	21a7      	movs	r1, #167	; 0xa7
   18a48:	480b      	ldr	r0, [pc, #44]	; (18a78 <z_thread_single_abort+0x1f8>)
   18a4a:	f001 ff92 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18a4e:	f387 8811 	msr	BASEPRI, r7
   18a52:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   18a56:	2d00      	cmp	r5, #0
   18a58:	f43f af62 	beq.w	18920 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   18a5c:	4620      	mov	r0, r4
   18a5e:	462b      	mov	r3, r5
}
   18a60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   18a64:	4718      	bx	r3
   18a66:	bf00      	nop
   18a68:	000227e8 	.word	0x000227e8
   18a6c:	0001f98f 	.word	0x0001f98f
   18a70:	2000afc4 	.word	0x2000afc4
   18a74:	2000affc 	.word	0x2000affc
   18a78:	0001f9c9 	.word	0x0001f9c9
   18a7c:	2000aff0 	.word	0x2000aff0
   18a80:	2000a438 	.word	0x2000a438

00018a84 <unready_thread>:
{
   18a84:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   18a86:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18a8a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18a8c:	2b00      	cmp	r3, #0
   18a8e:	da07      	bge.n	18aa0 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18a90:	4601      	mov	r1, r0
   18a92:	4808      	ldr	r0, [pc, #32]	; (18ab4 <unready_thread+0x30>)
   18a94:	f7ff fbea 	bl	1826c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18a98:	7b63      	ldrb	r3, [r4, #13]
   18a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18a9e:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   18aa0:	4b05      	ldr	r3, [pc, #20]	; (18ab8 <unready_thread+0x34>)
   18aa2:	6898      	ldr	r0, [r3, #8]
   18aa4:	1b03      	subs	r3, r0, r4
   18aa6:	4258      	negs	r0, r3
   18aa8:	4158      	adcs	r0, r3
}
   18aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   18aae:	f7ff bc43 	b.w	18338 <update_cache>
   18ab2:	bf00      	nop
   18ab4:	2000aff0 	.word	0x2000aff0
   18ab8:	2000afc4 	.word	0x2000afc4

00018abc <add_to_waitq_locked>:
{
   18abc:	b538      	push	{r3, r4, r5, lr}
   18abe:	4604      	mov	r4, r0
   18ac0:	460d      	mov	r5, r1
	unready_thread(thread);
   18ac2:	f7ff ffdf 	bl	18a84 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   18ac6:	7b63      	ldrb	r3, [r4, #13]
   18ac8:	f043 0302 	orr.w	r3, r3, #2
   18acc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18ace:	b1ed      	cbz	r5, 18b0c <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18ad0:	4b15      	ldr	r3, [pc, #84]	; (18b28 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   18ad2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18ad4:	429c      	cmp	r4, r3
   18ad6:	d10a      	bne.n	18aee <add_to_waitq_locked+0x32>
   18ad8:	4914      	ldr	r1, [pc, #80]	; (18b2c <add_to_waitq_locked+0x70>)
   18ada:	4815      	ldr	r0, [pc, #84]	; (18b30 <add_to_waitq_locked+0x74>)
   18adc:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18ae0:	f001 fca1 	bl	1a426 <printk>
   18ae4:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18ae8:	4810      	ldr	r0, [pc, #64]	; (18b2c <add_to_waitq_locked+0x70>)
   18aea:	f001 ff42 	bl	1a972 <assert_post_action>
	return list->head == list;
   18aee:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18af0:	429d      	cmp	r5, r3
   18af2:	d012      	beq.n	18b1a <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18af4:	b18b      	cbz	r3, 18b1a <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   18af6:	f994 200e 	ldrsb.w	r2, [r4, #14]
   18afa:	f993 100e 	ldrsb.w	r1, [r3, #14]
   18afe:	4291      	cmp	r1, r2
   18b00:	dd05      	ble.n	18b0e <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   18b02:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18b04:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18b08:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18b0a:	605c      	str	r4, [r3, #4]
}
   18b0c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   18b0e:	6869      	ldr	r1, [r5, #4]
   18b10:	428b      	cmp	r3, r1
   18b12:	d002      	beq.n	18b1a <add_to_waitq_locked+0x5e>
   18b14:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18b16:	2b00      	cmp	r3, #0
   18b18:	d1ef      	bne.n	18afa <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   18b1a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18b1c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18b1e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18b20:	686b      	ldr	r3, [r5, #4]
   18b22:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18b24:	606c      	str	r4, [r5, #4]
}
   18b26:	e7f1      	b.n	18b0c <add_to_waitq_locked+0x50>
   18b28:	2000a438 	.word	0x2000a438
   18b2c:	000227e8 	.word	0x000227e8
   18b30:	0001f98f 	.word	0x0001f98f

00018b34 <pend>:
{
   18b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b38:	4604      	mov	r4, r0
   18b3a:	4688      	mov	r8, r1
   18b3c:	4616      	mov	r6, r2
   18b3e:	461d      	mov	r5, r3
	__asm__ volatile(
   18b40:	f04f 0320 	mov.w	r3, #32
   18b44:	f3ef 8711 	mrs	r7, BASEPRI
   18b48:	f383 8811 	msr	BASEPRI, r3
   18b4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b50:	481a      	ldr	r0, [pc, #104]	; (18bbc <pend+0x88>)
   18b52:	f000 fc7f 	bl	19454 <z_spin_lock_valid>
   18b56:	b940      	cbnz	r0, 18b6a <pend+0x36>
   18b58:	4919      	ldr	r1, [pc, #100]	; (18bc0 <pend+0x8c>)
   18b5a:	481a      	ldr	r0, [pc, #104]	; (18bc4 <pend+0x90>)
   18b5c:	227c      	movs	r2, #124	; 0x7c
   18b5e:	f001 fc62 	bl	1a426 <printk>
   18b62:	217c      	movs	r1, #124	; 0x7c
   18b64:	4816      	ldr	r0, [pc, #88]	; (18bc0 <pend+0x8c>)
   18b66:	f001 ff04 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18b6a:	4814      	ldr	r0, [pc, #80]	; (18bbc <pend+0x88>)
   18b6c:	f000 fc8e 	bl	1948c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   18b70:	4620      	mov	r0, r4
   18b72:	4641      	mov	r1, r8
   18b74:	f7ff ffa2 	bl	18abc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b78:	4810      	ldr	r0, [pc, #64]	; (18bbc <pend+0x88>)
   18b7a:	f000 fc79 	bl	19470 <z_spin_unlock_valid>
   18b7e:	b940      	cbnz	r0, 18b92 <pend+0x5e>
   18b80:	490f      	ldr	r1, [pc, #60]	; (18bc0 <pend+0x8c>)
   18b82:	4810      	ldr	r0, [pc, #64]	; (18bc4 <pend+0x90>)
   18b84:	22a7      	movs	r2, #167	; 0xa7
   18b86:	f001 fc4e 	bl	1a426 <printk>
   18b8a:	21a7      	movs	r1, #167	; 0xa7
   18b8c:	480c      	ldr	r0, [pc, #48]	; (18bc0 <pend+0x8c>)
   18b8e:	f001 fef0 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18b92:	f387 8811 	msr	BASEPRI, r7
   18b96:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18b9a:	f1b5 3fff 	cmp.w	r5, #4294967295
   18b9e:	bf08      	it	eq
   18ba0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18ba4:	d008      	beq.n	18bb8 <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18ba6:	4632      	mov	r2, r6
   18ba8:	462b      	mov	r3, r5
   18baa:	f104 0018 	add.w	r0, r4, #24
   18bae:	4906      	ldr	r1, [pc, #24]	; (18bc8 <pend+0x94>)
}
   18bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18bb4:	f000 bde2 	b.w	1977c <z_add_timeout>
   18bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18bbc:	2000affc 	.word	0x2000affc
   18bc0:	0001f9c9 	.word	0x0001f9c9
   18bc4:	0001f98f 	.word	0x0001f98f
   18bc8:	000185e9 	.word	0x000185e9

00018bcc <z_pend_curr>:
{
   18bcc:	b538      	push	{r3, r4, r5, lr}
   18bce:	4605      	mov	r5, r0
	pending_current = _current;
   18bd0:	4b0d      	ldr	r3, [pc, #52]	; (18c08 <z_pend_curr+0x3c>)
{
   18bd2:	460c      	mov	r4, r1
	pending_current = _current;
   18bd4:	6898      	ldr	r0, [r3, #8]
   18bd6:	4b0d      	ldr	r3, [pc, #52]	; (18c0c <z_pend_curr+0x40>)
{
   18bd8:	4611      	mov	r1, r2
	pending_current = _current;
   18bda:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   18bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18be0:	f7ff ffa8 	bl	18b34 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18be4:	4628      	mov	r0, r5
   18be6:	f000 fc43 	bl	19470 <z_spin_unlock_valid>
   18bea:	b940      	cbnz	r0, 18bfe <z_pend_curr+0x32>
   18bec:	4908      	ldr	r1, [pc, #32]	; (18c10 <z_pend_curr+0x44>)
   18bee:	4809      	ldr	r0, [pc, #36]	; (18c14 <z_pend_curr+0x48>)
   18bf0:	22be      	movs	r2, #190	; 0xbe
   18bf2:	f001 fc18 	bl	1a426 <printk>
   18bf6:	21be      	movs	r1, #190	; 0xbe
   18bf8:	4805      	ldr	r0, [pc, #20]	; (18c10 <z_pend_curr+0x44>)
   18bfa:	f001 feba 	bl	1a972 <assert_post_action>
   18bfe:	4620      	mov	r0, r4
}
   18c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18c04:	f7f4 bd7c 	b.w	d700 <arch_swap>
   18c08:	2000afc4 	.word	0x2000afc4
   18c0c:	2000aff8 	.word	0x2000aff8
   18c10:	0001f9c9 	.word	0x0001f9c9
   18c14:	0001f98f 	.word	0x0001f98f

00018c18 <z_set_prio>:
{
   18c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c1a:	4604      	mov	r4, r0
   18c1c:	460d      	mov	r5, r1
	__asm__ volatile(
   18c1e:	f04f 0320 	mov.w	r3, #32
   18c22:	f3ef 8611 	mrs	r6, BASEPRI
   18c26:	f383 8811 	msr	BASEPRI, r3
   18c2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c2e:	4831      	ldr	r0, [pc, #196]	; (18cf4 <z_set_prio+0xdc>)
   18c30:	f000 fc10 	bl	19454 <z_spin_lock_valid>
   18c34:	b940      	cbnz	r0, 18c48 <z_set_prio+0x30>
   18c36:	4930      	ldr	r1, [pc, #192]	; (18cf8 <z_set_prio+0xe0>)
   18c38:	4830      	ldr	r0, [pc, #192]	; (18cfc <z_set_prio+0xe4>)
   18c3a:	227c      	movs	r2, #124	; 0x7c
   18c3c:	f001 fbf3 	bl	1a426 <printk>
   18c40:	217c      	movs	r1, #124	; 0x7c
   18c42:	482d      	ldr	r0, [pc, #180]	; (18cf8 <z_set_prio+0xe0>)
   18c44:	f001 fe95 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18c48:	482a      	ldr	r0, [pc, #168]	; (18cf4 <z_set_prio+0xdc>)
   18c4a:	f000 fc1f 	bl	1948c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18c4e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   18c50:	b26d      	sxtb	r5, r5
   18c52:	06db      	lsls	r3, r3, #27
   18c54:	d14a      	bne.n	18cec <z_set_prio+0xd4>
		if (need_sched) {
   18c56:	69a3      	ldr	r3, [r4, #24]
   18c58:	2b00      	cmp	r3, #0
   18c5a:	d147      	bne.n	18cec <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   18c5c:	4621      	mov	r1, r4
   18c5e:	4828      	ldr	r0, [pc, #160]	; (18d00 <z_set_prio+0xe8>)
   18c60:	f7ff fb04 	bl	1826c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18c64:	4b27      	ldr	r3, [pc, #156]	; (18d04 <z_set_prio+0xec>)
				thread->base.prio = prio;
   18c66:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18c68:	429c      	cmp	r4, r3
   18c6a:	d10a      	bne.n	18c82 <z_set_prio+0x6a>
   18c6c:	4926      	ldr	r1, [pc, #152]	; (18d08 <z_set_prio+0xf0>)
   18c6e:	4823      	ldr	r0, [pc, #140]	; (18cfc <z_set_prio+0xe4>)
   18c70:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18c74:	f001 fbd7 	bl	1a426 <printk>
   18c78:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18c7c:	4822      	ldr	r0, [pc, #136]	; (18d08 <z_set_prio+0xf0>)
   18c7e:	f001 fe78 	bl	1a972 <assert_post_action>
	return list->head == list;
   18c82:	4a22      	ldr	r2, [pc, #136]	; (18d0c <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c84:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18c88:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c8c:	4283      	cmp	r3, r0
   18c8e:	d027      	beq.n	18ce0 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18c90:	b333      	cbz	r3, 18ce0 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   18c92:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18c96:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18c9a:	42af      	cmp	r7, r5
   18c9c:	dd1b      	ble.n	18cd6 <z_set_prio+0xbe>
	node->prev = successor->prev;
   18c9e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18ca0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18ca4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18ca6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   18ca8:	2001      	movs	r0, #1
   18caa:	f7ff fb45 	bl	18338 <update_cache>
   18cae:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18cb0:	4810      	ldr	r0, [pc, #64]	; (18cf4 <z_set_prio+0xdc>)
   18cb2:	f000 fbdd 	bl	19470 <z_spin_unlock_valid>
   18cb6:	b940      	cbnz	r0, 18cca <z_set_prio+0xb2>
   18cb8:	490f      	ldr	r1, [pc, #60]	; (18cf8 <z_set_prio+0xe0>)
   18cba:	4810      	ldr	r0, [pc, #64]	; (18cfc <z_set_prio+0xe4>)
   18cbc:	22a7      	movs	r2, #167	; 0xa7
   18cbe:	f001 fbb2 	bl	1a426 <printk>
   18cc2:	21a7      	movs	r1, #167	; 0xa7
   18cc4:	480c      	ldr	r0, [pc, #48]	; (18cf8 <z_set_prio+0xe0>)
   18cc6:	f001 fe54 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18cca:	f386 8811 	msr	BASEPRI, r6
   18cce:	f3bf 8f6f 	isb	sy
}
   18cd2:	4620      	mov	r0, r4
   18cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   18cd6:	4299      	cmp	r1, r3
   18cd8:	d002      	beq.n	18ce0 <z_set_prio+0xc8>
   18cda:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18cdc:	2b00      	cmp	r3, #0
   18cde:	d1da      	bne.n	18c96 <z_set_prio+0x7e>
	node->prev = list->tail;
   18ce0:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18ce4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18ce6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18ce8:	6314      	str	r4, [r2, #48]	; 0x30
}
   18cea:	e7dd      	b.n	18ca8 <z_set_prio+0x90>
			thread->base.prio = prio;
   18cec:	73a5      	strb	r5, [r4, #14]
   18cee:	2400      	movs	r4, #0
   18cf0:	e7de      	b.n	18cb0 <z_set_prio+0x98>
   18cf2:	bf00      	nop
   18cf4:	2000affc 	.word	0x2000affc
   18cf8:	0001f9c9 	.word	0x0001f9c9
   18cfc:	0001f98f 	.word	0x0001f98f
   18d00:	2000aff0 	.word	0x2000aff0
   18d04:	2000a438 	.word	0x2000a438
   18d08:	000227e8 	.word	0x000227e8
   18d0c:	2000afc4 	.word	0x2000afc4

00018d10 <z_unpend_first_thread>:
{
   18d10:	b538      	push	{r3, r4, r5, lr}
   18d12:	4604      	mov	r4, r0
	__asm__ volatile(
   18d14:	f04f 0320 	mov.w	r3, #32
   18d18:	f3ef 8511 	mrs	r5, BASEPRI
   18d1c:	f383 8811 	msr	BASEPRI, r3
   18d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d24:	482b      	ldr	r0, [pc, #172]	; (18dd4 <z_unpend_first_thread+0xc4>)
   18d26:	f000 fb95 	bl	19454 <z_spin_lock_valid>
   18d2a:	b940      	cbnz	r0, 18d3e <z_unpend_first_thread+0x2e>
   18d2c:	492a      	ldr	r1, [pc, #168]	; (18dd8 <z_unpend_first_thread+0xc8>)
   18d2e:	482b      	ldr	r0, [pc, #172]	; (18ddc <z_unpend_first_thread+0xcc>)
   18d30:	227c      	movs	r2, #124	; 0x7c
   18d32:	f001 fb78 	bl	1a426 <printk>
   18d36:	217c      	movs	r1, #124	; 0x7c
   18d38:	4827      	ldr	r0, [pc, #156]	; (18dd8 <z_unpend_first_thread+0xc8>)
   18d3a:	f001 fe1a 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18d3e:	4825      	ldr	r0, [pc, #148]	; (18dd4 <z_unpend_first_thread+0xc4>)
   18d40:	f000 fba4 	bl	1948c <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   18d44:	4620      	mov	r0, r4
   18d46:	f004 ff6d 	bl	1dc24 <z_priq_dumb_best>
   18d4a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18d4c:	4821      	ldr	r0, [pc, #132]	; (18dd4 <z_unpend_first_thread+0xc4>)
   18d4e:	f000 fb8f 	bl	19470 <z_spin_unlock_valid>
   18d52:	b940      	cbnz	r0, 18d66 <z_unpend_first_thread+0x56>
   18d54:	4920      	ldr	r1, [pc, #128]	; (18dd8 <z_unpend_first_thread+0xc8>)
   18d56:	4821      	ldr	r0, [pc, #132]	; (18ddc <z_unpend_first_thread+0xcc>)
   18d58:	22a7      	movs	r2, #167	; 0xa7
   18d5a:	f001 fb64 	bl	1a426 <printk>
   18d5e:	21a7      	movs	r1, #167	; 0xa7
   18d60:	481d      	ldr	r0, [pc, #116]	; (18dd8 <z_unpend_first_thread+0xc8>)
   18d62:	f001 fe06 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18d66:	f385 8811 	msr	BASEPRI, r5
   18d6a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   18d6e:	b37c      	cbz	r4, 18dd0 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   18d70:	f04f 0320 	mov.w	r3, #32
   18d74:	f3ef 8511 	mrs	r5, BASEPRI
   18d78:	f383 8811 	msr	BASEPRI, r3
   18d7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d80:	4814      	ldr	r0, [pc, #80]	; (18dd4 <z_unpend_first_thread+0xc4>)
   18d82:	f000 fb67 	bl	19454 <z_spin_lock_valid>
   18d86:	b940      	cbnz	r0, 18d9a <z_unpend_first_thread+0x8a>
   18d88:	4913      	ldr	r1, [pc, #76]	; (18dd8 <z_unpend_first_thread+0xc8>)
   18d8a:	4814      	ldr	r0, [pc, #80]	; (18ddc <z_unpend_first_thread+0xcc>)
   18d8c:	227c      	movs	r2, #124	; 0x7c
   18d8e:	f001 fb4a 	bl	1a426 <printk>
   18d92:	217c      	movs	r1, #124	; 0x7c
   18d94:	4810      	ldr	r0, [pc, #64]	; (18dd8 <z_unpend_first_thread+0xc8>)
   18d96:	f001 fdec 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18d9a:	480e      	ldr	r0, [pc, #56]	; (18dd4 <z_unpend_first_thread+0xc4>)
   18d9c:	f000 fb76 	bl	1948c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   18da0:	4620      	mov	r0, r4
   18da2:	f004 ff31 	bl	1dc08 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18da6:	480b      	ldr	r0, [pc, #44]	; (18dd4 <z_unpend_first_thread+0xc4>)
   18da8:	f000 fb62 	bl	19470 <z_spin_unlock_valid>
   18dac:	b940      	cbnz	r0, 18dc0 <z_unpend_first_thread+0xb0>
   18dae:	490a      	ldr	r1, [pc, #40]	; (18dd8 <z_unpend_first_thread+0xc8>)
   18db0:	480a      	ldr	r0, [pc, #40]	; (18ddc <z_unpend_first_thread+0xcc>)
   18db2:	22a7      	movs	r2, #167	; 0xa7
   18db4:	f001 fb37 	bl	1a426 <printk>
   18db8:	21a7      	movs	r1, #167	; 0xa7
   18dba:	4807      	ldr	r0, [pc, #28]	; (18dd8 <z_unpend_first_thread+0xc8>)
   18dbc:	f001 fdd9 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18dc0:	f385 8811 	msr	BASEPRI, r5
   18dc4:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   18dc8:	f104 0018 	add.w	r0, r4, #24
   18dcc:	f000 fd86 	bl	198dc <z_abort_timeout>
}
   18dd0:	4620      	mov	r0, r4
   18dd2:	bd38      	pop	{r3, r4, r5, pc}
   18dd4:	2000affc 	.word	0x2000affc
   18dd8:	0001f9c9 	.word	0x0001f9c9
   18ddc:	0001f98f 	.word	0x0001f98f

00018de0 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18de0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   18de2:	4b04      	ldr	r3, [pc, #16]	; (18df4 <z_sched_init+0x14>)
   18de4:	4608      	mov	r0, r1
   18de6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   18dea:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   18dee:	f7ff b961 	b.w	180b4 <k_sched_time_slice_set>
   18df2:	bf00      	nop
   18df4:	2000afc4 	.word	0x2000afc4

00018df8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   18df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18dfa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   18dfe:	b153      	cbz	r3, 18e16 <z_impl_k_yield+0x1e>
   18e00:	493d      	ldr	r1, [pc, #244]	; (18ef8 <z_impl_k_yield+0x100>)
   18e02:	483e      	ldr	r0, [pc, #248]	; (18efc <z_impl_k_yield+0x104>)
   18e04:	f240 42cf 	movw	r2, #1231	; 0x4cf
   18e08:	f001 fb0d 	bl	1a426 <printk>
   18e0c:	f240 41cf 	movw	r1, #1231	; 0x4cf
   18e10:	4839      	ldr	r0, [pc, #228]	; (18ef8 <z_impl_k_yield+0x100>)
   18e12:	f001 fdae 	bl	1a972 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   18e16:	4d3a      	ldr	r5, [pc, #232]	; (18f00 <z_impl_k_yield+0x108>)
   18e18:	4f3a      	ldr	r7, [pc, #232]	; (18f04 <z_impl_k_yield+0x10c>)
   18e1a:	68ab      	ldr	r3, [r5, #8]
   18e1c:	42bb      	cmp	r3, r7
   18e1e:	d054      	beq.n	18eca <z_impl_k_yield+0xd2>
	__asm__ volatile(
   18e20:	f04f 0320 	mov.w	r3, #32
   18e24:	f3ef 8611 	mrs	r6, BASEPRI
   18e28:	f383 8811 	msr	BASEPRI, r3
   18e2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e30:	4835      	ldr	r0, [pc, #212]	; (18f08 <z_impl_k_yield+0x110>)
   18e32:	f000 fb0f 	bl	19454 <z_spin_lock_valid>
   18e36:	b940      	cbnz	r0, 18e4a <z_impl_k_yield+0x52>
   18e38:	4934      	ldr	r1, [pc, #208]	; (18f0c <z_impl_k_yield+0x114>)
   18e3a:	4830      	ldr	r0, [pc, #192]	; (18efc <z_impl_k_yield+0x104>)
   18e3c:	227c      	movs	r2, #124	; 0x7c
   18e3e:	f001 faf2 	bl	1a426 <printk>
   18e42:	217c      	movs	r1, #124	; 0x7c
   18e44:	4831      	ldr	r0, [pc, #196]	; (18f0c <z_impl_k_yield+0x114>)
   18e46:	f001 fd94 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   18e4a:	482f      	ldr	r0, [pc, #188]	; (18f08 <z_impl_k_yield+0x110>)
   18e4c:	f000 fb1e 	bl	1948c <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   18e50:	68a9      	ldr	r1, [r5, #8]
   18e52:	482f      	ldr	r0, [pc, #188]	; (18f10 <z_impl_k_yield+0x118>)
   18e54:	f7ff fa0a 	bl	1826c <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   18e58:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18e5a:	42bc      	cmp	r4, r7
   18e5c:	d10a      	bne.n	18e74 <z_impl_k_yield+0x7c>
   18e5e:	4926      	ldr	r1, [pc, #152]	; (18ef8 <z_impl_k_yield+0x100>)
   18e60:	4826      	ldr	r0, [pc, #152]	; (18efc <z_impl_k_yield+0x104>)
   18e62:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18e66:	f001 fade 	bl	1a426 <printk>
   18e6a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18e6e:	4822      	ldr	r0, [pc, #136]	; (18ef8 <z_impl_k_yield+0x100>)
   18e70:	f001 fd7f 	bl	1a972 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   18e74:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e78:	4925      	ldr	r1, [pc, #148]	; (18f10 <z_impl_k_yield+0x118>)
   18e7a:	428b      	cmp	r3, r1
   18e7c:	d036      	beq.n	18eec <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18e7e:	2b00      	cmp	r3, #0
   18e80:	d034      	beq.n	18eec <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   18e82:	f994 000e 	ldrsb.w	r0, [r4, #14]
   18e86:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18e8a:	4287      	cmp	r7, r0
   18e8c:	dd29      	ble.n	18ee2 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   18e8e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18e90:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18e94:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18e96:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   18e98:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   18e9a:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   18e9c:	7b53      	ldrb	r3, [r2, #13]
   18e9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18ea2:	7353      	strb	r3, [r2, #13]
   18ea4:	f7ff fa48 	bl	18338 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ea8:	4817      	ldr	r0, [pc, #92]	; (18f08 <z_impl_k_yield+0x110>)
   18eaa:	f000 fae1 	bl	19470 <z_spin_unlock_valid>
   18eae:	b940      	cbnz	r0, 18ec2 <z_impl_k_yield+0xca>
   18eb0:	4916      	ldr	r1, [pc, #88]	; (18f0c <z_impl_k_yield+0x114>)
   18eb2:	4812      	ldr	r0, [pc, #72]	; (18efc <z_impl_k_yield+0x104>)
   18eb4:	22a7      	movs	r2, #167	; 0xa7
   18eb6:	f001 fab6 	bl	1a426 <printk>
   18eba:	21a7      	movs	r1, #167	; 0xa7
   18ebc:	4813      	ldr	r0, [pc, #76]	; (18f0c <z_impl_k_yield+0x114>)
   18ebe:	f001 fd58 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   18ec2:	f386 8811 	msr	BASEPRI, r6
   18ec6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18eca:	f04f 0320 	mov.w	r3, #32
   18ece:	f3ef 8011 	mrs	r0, BASEPRI
   18ed2:	f383 8811 	msr	BASEPRI, r3
   18ed6:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   18eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18ede:	f7f4 bc0f 	b.w	d700 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   18ee2:	4293      	cmp	r3, r2
   18ee4:	d002      	beq.n	18eec <z_impl_k_yield+0xf4>
   18ee6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18ee8:	2b00      	cmp	r3, #0
   18eea:	d1cc      	bne.n	18e86 <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   18eec:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   18ef0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   18ef2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18ef4:	632c      	str	r4, [r5, #48]	; 0x30
}
   18ef6:	e7cf      	b.n	18e98 <z_impl_k_yield+0xa0>
   18ef8:	000227e8 	.word	0x000227e8
   18efc:	0001f98f 	.word	0x0001f98f
   18f00:	2000afc4 	.word	0x2000afc4
   18f04:	2000a438 	.word	0x2000a438
   18f08:	2000affc 	.word	0x2000affc
   18f0c:	0001f9c9 	.word	0x0001f9c9
   18f10:	2000aff0 	.word	0x2000aff0

00018f14 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   18f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f18:	4605      	mov	r5, r0
   18f1a:	460f      	mov	r7, r1
   18f1c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   18f20:	b153      	cbz	r3, 18f38 <z_tick_sleep+0x24>
   18f22:	4934      	ldr	r1, [pc, #208]	; (18ff4 <z_tick_sleep+0xe0>)
   18f24:	4834      	ldr	r0, [pc, #208]	; (18ff8 <z_tick_sleep+0xe4>)
   18f26:	f240 42ed 	movw	r2, #1261	; 0x4ed
   18f2a:	f001 fa7c 	bl	1a426 <printk>
   18f2e:	f240 41ed 	movw	r1, #1261	; 0x4ed
   18f32:	4830      	ldr	r0, [pc, #192]	; (18ff4 <z_tick_sleep+0xe0>)
   18f34:	f001 fd1d 	bl	1a972 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   18f38:	ea55 0307 	orrs.w	r3, r5, r7
   18f3c:	d104      	bne.n	18f48 <z_tick_sleep+0x34>
	z_impl_k_yield();
   18f3e:	f7ff ff5b 	bl	18df8 <z_impl_k_yield>
		k_yield();
		return 0;
   18f42:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   18f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   18f48:	f004 fefa 	bl	1dd40 <z_tick_get_32>
   18f4c:	1944      	adds	r4, r0, r5
   18f4e:	f04f 0320 	mov.w	r3, #32
   18f52:	f3ef 8811 	mrs	r8, BASEPRI
   18f56:	f383 8811 	msr	BASEPRI, r3
   18f5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f5e:	4827      	ldr	r0, [pc, #156]	; (18ffc <z_tick_sleep+0xe8>)
   18f60:	f000 fa78 	bl	19454 <z_spin_lock_valid>
   18f64:	b940      	cbnz	r0, 18f78 <z_tick_sleep+0x64>
   18f66:	4926      	ldr	r1, [pc, #152]	; (19000 <z_tick_sleep+0xec>)
   18f68:	4823      	ldr	r0, [pc, #140]	; (18ff8 <z_tick_sleep+0xe4>)
   18f6a:	227c      	movs	r2, #124	; 0x7c
   18f6c:	f001 fa5b 	bl	1a426 <printk>
   18f70:	217c      	movs	r1, #124	; 0x7c
   18f72:	4823      	ldr	r0, [pc, #140]	; (19000 <z_tick_sleep+0xec>)
   18f74:	f001 fcfd 	bl	1a972 <assert_post_action>
	pending_current = _current;
   18f78:	4e22      	ldr	r6, [pc, #136]	; (19004 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   18f7a:	4820      	ldr	r0, [pc, #128]	; (18ffc <z_tick_sleep+0xe8>)
   18f7c:	f000 fa86 	bl	1948c <z_spin_lock_set_owner>
   18f80:	68b0      	ldr	r0, [r6, #8]
   18f82:	4b21      	ldr	r3, [pc, #132]	; (19008 <z_tick_sleep+0xf4>)
   18f84:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   18f86:	f7ff fd7d 	bl	18a84 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   18f8a:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18f8c:	462a      	mov	r2, r5
   18f8e:	463b      	mov	r3, r7
   18f90:	3018      	adds	r0, #24
   18f92:	491e      	ldr	r1, [pc, #120]	; (1900c <z_tick_sleep+0xf8>)
   18f94:	f000 fbf2 	bl	1977c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   18f98:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f9a:	4818      	ldr	r0, [pc, #96]	; (18ffc <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18f9c:	7b53      	ldrb	r3, [r2, #13]
   18f9e:	f043 0310 	orr.w	r3, r3, #16
   18fa2:	7353      	strb	r3, [r2, #13]
   18fa4:	f000 fa64 	bl	19470 <z_spin_unlock_valid>
   18fa8:	b940      	cbnz	r0, 18fbc <z_tick_sleep+0xa8>
   18faa:	4915      	ldr	r1, [pc, #84]	; (19000 <z_tick_sleep+0xec>)
   18fac:	4812      	ldr	r0, [pc, #72]	; (18ff8 <z_tick_sleep+0xe4>)
   18fae:	22be      	movs	r2, #190	; 0xbe
   18fb0:	f001 fa39 	bl	1a426 <printk>
   18fb4:	21be      	movs	r1, #190	; 0xbe
   18fb6:	4812      	ldr	r0, [pc, #72]	; (19000 <z_tick_sleep+0xec>)
   18fb8:	f001 fcdb 	bl	1a972 <assert_post_action>
   18fbc:	4640      	mov	r0, r8
   18fbe:	f7f4 fb9f 	bl	d700 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   18fc2:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   18fc4:	7b5b      	ldrb	r3, [r3, #13]
   18fc6:	06db      	lsls	r3, r3, #27
   18fc8:	d50a      	bpl.n	18fe0 <z_tick_sleep+0xcc>
   18fca:	490a      	ldr	r1, [pc, #40]	; (18ff4 <z_tick_sleep+0xe0>)
   18fcc:	480a      	ldr	r0, [pc, #40]	; (18ff8 <z_tick_sleep+0xe4>)
   18fce:	f240 520b 	movw	r2, #1291	; 0x50b
   18fd2:	f001 fa28 	bl	1a426 <printk>
   18fd6:	f240 510b 	movw	r1, #1291	; 0x50b
   18fda:	4806      	ldr	r0, [pc, #24]	; (18ff4 <z_tick_sleep+0xe0>)
   18fdc:	f001 fcc9 	bl	1a972 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   18fe0:	f004 feae 	bl	1dd40 <z_tick_get_32>
   18fe4:	1a20      	subs	r0, r4, r0
   18fe6:	eb63 0303 	sbc.w	r3, r3, r3
   18fea:	2b00      	cmp	r3, #0
   18fec:	bfb8      	it	lt
   18fee:	2000      	movlt	r0, #0
   18ff0:	e7a8      	b.n	18f44 <z_tick_sleep+0x30>
   18ff2:	bf00      	nop
   18ff4:	000227e8 	.word	0x000227e8
   18ff8:	0001f98f 	.word	0x0001f98f
   18ffc:	2000affc 	.word	0x2000affc
   19000:	0001f9c9 	.word	0x0001f9c9
   19004:	2000afc4 	.word	0x2000afc4
   19008:	2000aff8 	.word	0x2000aff8
   1900c:	000185e9 	.word	0x000185e9

00019010 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   19010:	b538      	push	{r3, r4, r5, lr}
   19012:	4605      	mov	r5, r0
   19014:	460c      	mov	r4, r1
   19016:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1901a:	b153      	cbz	r3, 19032 <z_impl_k_sleep+0x22>
   1901c:	4911      	ldr	r1, [pc, #68]	; (19064 <z_impl_k_sleep+0x54>)
   1901e:	4812      	ldr	r0, [pc, #72]	; (19068 <z_impl_k_sleep+0x58>)
   19020:	f240 521a 	movw	r2, #1306	; 0x51a
   19024:	f001 f9ff 	bl	1a426 <printk>
   19028:	f240 511a 	movw	r1, #1306	; 0x51a
   1902c:	480d      	ldr	r0, [pc, #52]	; (19064 <z_impl_k_sleep+0x54>)
   1902e:	f001 fca0 	bl	1a972 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19032:	f1b4 3fff 	cmp.w	r4, #4294967295
   19036:	bf08      	it	eq
   19038:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1903c:	d106      	bne.n	1904c <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   1903e:	4b0b      	ldr	r3, [pc, #44]	; (1906c <z_impl_k_sleep+0x5c>)
   19040:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   19042:	f7ff fbc5 	bl	187d0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   19046:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1904a:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1904c:	4628      	mov	r0, r5
   1904e:	4621      	mov	r1, r4
   19050:	f7ff ff60 	bl	18f14 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   19054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19058:	fb80 0303 	smull	r0, r3, r0, r3
   1905c:	0bc0      	lsrs	r0, r0, #15
   1905e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   19062:	e7f2      	b.n	1904a <z_impl_k_sleep+0x3a>
   19064:	000227e8 	.word	0x000227e8
   19068:	0001f98f 	.word	0x0001f98f
   1906c:	2000afc4 	.word	0x2000afc4

00019070 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   19070:	4b01      	ldr	r3, [pc, #4]	; (19078 <z_impl_k_current_get+0x8>)
   19072:	6898      	ldr	r0, [r3, #8]
   19074:	4770      	bx	lr
   19076:	bf00      	nop
   19078:	2000afc4 	.word	0x2000afc4

0001907c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1907c:	b538      	push	{r3, r4, r5, lr}
   1907e:	4604      	mov	r4, r0
   19080:	f04f 0320 	mov.w	r3, #32
   19084:	f3ef 8511 	mrs	r5, BASEPRI
   19088:	f383 8811 	msr	BASEPRI, r3
   1908c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19090:	4815      	ldr	r0, [pc, #84]	; (190e8 <z_impl_k_sem_give+0x6c>)
   19092:	f000 f9df 	bl	19454 <z_spin_lock_valid>
   19096:	b940      	cbnz	r0, 190aa <z_impl_k_sem_give+0x2e>
   19098:	4914      	ldr	r1, [pc, #80]	; (190ec <z_impl_k_sem_give+0x70>)
   1909a:	4815      	ldr	r0, [pc, #84]	; (190f0 <z_impl_k_sem_give+0x74>)
   1909c:	227c      	movs	r2, #124	; 0x7c
   1909e:	f001 f9c2 	bl	1a426 <printk>
   190a2:	217c      	movs	r1, #124	; 0x7c
   190a4:	4811      	ldr	r0, [pc, #68]	; (190ec <z_impl_k_sem_give+0x70>)
   190a6:	f001 fc64 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   190aa:	480f      	ldr	r0, [pc, #60]	; (190e8 <z_impl_k_sem_give+0x6c>)
   190ac:	f000 f9ee 	bl	1948c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   190b0:	4620      	mov	r0, r4
   190b2:	f7ff fe2d 	bl	18d10 <z_unpend_first_thread>

	if (thread != NULL) {
   190b6:	b150      	cbz	r0, 190ce <z_impl_k_sem_give+0x52>
   190b8:	2200      	movs	r2, #0
   190ba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   190be:	f7ff fa1b 	bl	184f8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   190c2:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   190c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   190c8:	4807      	ldr	r0, [pc, #28]	; (190e8 <z_impl_k_sem_give+0x6c>)
   190ca:	f7ff b841 	b.w	18150 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   190ce:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   190d2:	429a      	cmp	r2, r3
   190d4:	bf18      	it	ne
   190d6:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   190d8:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   190da:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   190dc:	f104 0010 	add.w	r0, r4, #16
   190e0:	f004 fea5 	bl	1de2e <z_handle_obj_poll_events>
}
   190e4:	e7ed      	b.n	190c2 <z_impl_k_sem_give+0x46>
   190e6:	bf00      	nop
   190e8:	2000b008 	.word	0x2000b008
   190ec:	0001f9c9 	.word	0x0001f9c9
   190f0:	0001f98f 	.word	0x0001f98f

000190f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   190f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   190f6:	4604      	mov	r4, r0
   190f8:	4616      	mov	r6, r2
   190fa:	461d      	mov	r5, r3
   190fc:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   19100:	b15b      	cbz	r3, 1911a <z_impl_k_sem_take+0x26>
   19102:	ea52 0305 	orrs.w	r3, r2, r5
   19106:	d008      	beq.n	1911a <z_impl_k_sem_take+0x26>
   19108:	492b      	ldr	r1, [pc, #172]	; (191b8 <z_impl_k_sem_take+0xc4>)
   1910a:	482c      	ldr	r0, [pc, #176]	; (191bc <z_impl_k_sem_take+0xc8>)
   1910c:	228c      	movs	r2, #140	; 0x8c
   1910e:	f001 f98a 	bl	1a426 <printk>
   19112:	218c      	movs	r1, #140	; 0x8c
   19114:	4828      	ldr	r0, [pc, #160]	; (191b8 <z_impl_k_sem_take+0xc4>)
   19116:	f001 fc2c 	bl	1a972 <assert_post_action>
   1911a:	f04f 0320 	mov.w	r3, #32
   1911e:	f3ef 8711 	mrs	r7, BASEPRI
   19122:	f383 8811 	msr	BASEPRI, r3
   19126:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1912a:	4825      	ldr	r0, [pc, #148]	; (191c0 <z_impl_k_sem_take+0xcc>)
   1912c:	f000 f992 	bl	19454 <z_spin_lock_valid>
   19130:	b940      	cbnz	r0, 19144 <z_impl_k_sem_take+0x50>
   19132:	4924      	ldr	r1, [pc, #144]	; (191c4 <z_impl_k_sem_take+0xd0>)
   19134:	4821      	ldr	r0, [pc, #132]	; (191bc <z_impl_k_sem_take+0xc8>)
   19136:	227c      	movs	r2, #124	; 0x7c
   19138:	f001 f975 	bl	1a426 <printk>
   1913c:	217c      	movs	r1, #124	; 0x7c
   1913e:	4821      	ldr	r0, [pc, #132]	; (191c4 <z_impl_k_sem_take+0xd0>)
   19140:	f001 fc17 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   19144:	481e      	ldr	r0, [pc, #120]	; (191c0 <z_impl_k_sem_take+0xcc>)
   19146:	f000 f9a1 	bl	1948c <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1914a:	68a3      	ldr	r3, [r4, #8]
   1914c:	b1ab      	cbz	r3, 1917a <z_impl_k_sem_take+0x86>
		sem->count--;
   1914e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19150:	481b      	ldr	r0, [pc, #108]	; (191c0 <z_impl_k_sem_take+0xcc>)
   19152:	60a3      	str	r3, [r4, #8]
   19154:	f000 f98c 	bl	19470 <z_spin_unlock_valid>
   19158:	b940      	cbnz	r0, 1916c <z_impl_k_sem_take+0x78>
   1915a:	491a      	ldr	r1, [pc, #104]	; (191c4 <z_impl_k_sem_take+0xd0>)
   1915c:	4817      	ldr	r0, [pc, #92]	; (191bc <z_impl_k_sem_take+0xc8>)
   1915e:	22a7      	movs	r2, #167	; 0xa7
   19160:	f001 f961 	bl	1a426 <printk>
   19164:	21a7      	movs	r1, #167	; 0xa7
   19166:	4817      	ldr	r0, [pc, #92]	; (191c4 <z_impl_k_sem_take+0xd0>)
   19168:	f001 fc03 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1916c:	f387 8811 	msr	BASEPRI, r7
   19170:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   19174:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   19176:	b003      	add	sp, #12
   19178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1917a:	ea56 0305 	orrs.w	r3, r6, r5
   1917e:	d113      	bne.n	191a8 <z_impl_k_sem_take+0xb4>
   19180:	480f      	ldr	r0, [pc, #60]	; (191c0 <z_impl_k_sem_take+0xcc>)
   19182:	f000 f975 	bl	19470 <z_spin_unlock_valid>
   19186:	b940      	cbnz	r0, 1919a <z_impl_k_sem_take+0xa6>
   19188:	490e      	ldr	r1, [pc, #56]	; (191c4 <z_impl_k_sem_take+0xd0>)
   1918a:	480c      	ldr	r0, [pc, #48]	; (191bc <z_impl_k_sem_take+0xc8>)
   1918c:	22a7      	movs	r2, #167	; 0xa7
   1918e:	f001 f94a 	bl	1a426 <printk>
   19192:	21a7      	movs	r1, #167	; 0xa7
   19194:	480b      	ldr	r0, [pc, #44]	; (191c4 <z_impl_k_sem_take+0xd0>)
   19196:	f001 fbec 	bl	1a972 <assert_post_action>
   1919a:	f387 8811 	msr	BASEPRI, r7
   1919e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   191a2:	f06f 000f 	mvn.w	r0, #15
   191a6:	e7e6      	b.n	19176 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   191a8:	4622      	mov	r2, r4
   191aa:	4639      	mov	r1, r7
   191ac:	e9cd 6500 	strd	r6, r5, [sp]
   191b0:	4803      	ldr	r0, [pc, #12]	; (191c0 <z_impl_k_sem_take+0xcc>)
   191b2:	f7ff fd0b 	bl	18bcc <z_pend_curr>
	return ret;
   191b6:	e7de      	b.n	19176 <z_impl_k_sem_take+0x82>
   191b8:	0002280a 	.word	0x0002280a
   191bc:	0001f98f 	.word	0x0001f98f
   191c0:	2000b008 	.word	0x2000b008
   191c4:	0001f9c9 	.word	0x0001f9c9

000191c8 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   191c8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   191ca:	4c08      	ldr	r4, [pc, #32]	; (191ec <k_sys_work_q_init+0x24>)
   191cc:	f04f 33ff 	mov.w	r3, #4294967295
   191d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   191d4:	4620      	mov	r0, r4
   191d6:	4906      	ldr	r1, [pc, #24]	; (191f0 <k_sys_work_q_init+0x28>)
   191d8:	f000 f98c 	bl	194f4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   191dc:	4905      	ldr	r1, [pc, #20]	; (191f4 <k_sys_work_q_init+0x2c>)
   191de:	f104 0020 	add.w	r0, r4, #32
   191e2:	f004 fd4f 	bl	1dc84 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   191e6:	2000      	movs	r0, #0
   191e8:	bd10      	pop	{r4, pc}
   191ea:	bf00      	nop
   191ec:	2000a558 	.word	0x2000a558
   191f0:	2000f648 	.word	0x2000f648
   191f4:	0002282a 	.word	0x0002282a

000191f8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   191f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   191fc:	4604      	mov	r4, r0
   191fe:	460f      	mov	r7, r1
   19200:	4698      	mov	r8, r3
   19202:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19204:	4b2c      	ldr	r3, [pc, #176]	; (192b8 <z_setup_new_thread+0xc0>)
   19206:	4616      	mov	r6, r2
   19208:	f100 0238 	add.w	r2, r0, #56	; 0x38
   1920c:	e8d2 1fef 	ldaex	r1, [r2]
   19210:	e8c2 3fe0 	stlex	r0, r3, [r2]
   19214:	2800      	cmp	r0, #0
   19216:	d1f9      	bne.n	1920c <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   19218:	4299      	cmp	r1, r3
   1921a:	d10a      	bne.n	19232 <z_setup_new_thread+0x3a>
   1921c:	4927      	ldr	r1, [pc, #156]	; (192bc <z_setup_new_thread+0xc4>)
   1921e:	4828      	ldr	r0, [pc, #160]	; (192c0 <z_setup_new_thread+0xc8>)
   19220:	f240 2223 	movw	r2, #547	; 0x223
   19224:	f001 f8ff 	bl	1a426 <printk>
   19228:	f240 2123 	movw	r1, #547	; 0x223
   1922c:	4823      	ldr	r0, [pc, #140]	; (192bc <z_setup_new_thread+0xc4>)
   1922e:	f001 fba0 	bl	1a972 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   19232:	2d0f      	cmp	r5, #15
   19234:	d12f      	bne.n	19296 <z_setup_new_thread+0x9e>
   19236:	4b23      	ldr	r3, [pc, #140]	; (192c4 <z_setup_new_thread+0xcc>)
   19238:	4598      	cmp	r8, r3
   1923a:	d130      	bne.n	1929e <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   1923c:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   19240:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   19244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   19246:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   19248:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1924a:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   1924c:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   1924e:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19252:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19254:	9302      	str	r3, [sp, #8]
   19256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19258:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1925c:	9301      	str	r3, [sp, #4]
   1925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   19260:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   19262:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19266:	9300      	str	r3, [sp, #0]
   19268:	4632      	mov	r2, r6
   1926a:	4643      	mov	r3, r8
   1926c:	4639      	mov	r1, r7
   1926e:	4620      	mov	r0, r4
	node->prev = NULL;
   19270:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   19274:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   19276:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19278:	f7f4 fae0 	bl	d83c <arch_new_thread>
	if (!_current) {
   1927c:	4b12      	ldr	r3, [pc, #72]	; (192c8 <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   1927e:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   19282:	689b      	ldr	r3, [r3, #8]
   19284:	b10b      	cbz	r3, 1928a <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   19286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1928a:	4630      	mov	r0, r6
   1928c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   19290:	b004      	add	sp, #16
   19292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   19296:	f105 0310 	add.w	r3, r5, #16
   1929a:	2b1e      	cmp	r3, #30
   1929c:	d9ce      	bls.n	1923c <z_setup_new_thread+0x44>
   1929e:	f240 2226 	movw	r2, #550	; 0x226
   192a2:	4906      	ldr	r1, [pc, #24]	; (192bc <z_setup_new_thread+0xc4>)
   192a4:	4806      	ldr	r0, [pc, #24]	; (192c0 <z_setup_new_thread+0xc8>)
   192a6:	f001 f8be 	bl	1a426 <printk>
   192aa:	f240 2126 	movw	r1, #550	; 0x226
   192ae:	4803      	ldr	r0, [pc, #12]	; (192bc <z_setup_new_thread+0xc4>)
   192b0:	f001 fb5f 	bl	1a972 <assert_post_action>
   192b4:	e7c2      	b.n	1923c <z_setup_new_thread+0x44>
   192b6:	bf00      	nop
   192b8:	1337c0d3 	.word	0x1337c0d3
   192bc:	00022833 	.word	0x00022833
   192c0:	0001f98f 	.word	0x0001f98f
   192c4:	000175e1 	.word	0x000175e1
   192c8:	2000afc4 	.word	0x2000afc4

000192cc <z_impl_k_thread_create>:
{
   192cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192d0:	b087      	sub	sp, #28
   192d2:	4604      	mov	r4, r0
   192d4:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   192d8:	460f      	mov	r7, r1
   192da:	4690      	mov	r8, r2
   192dc:	4699      	mov	r9, r3
   192de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   192e2:	b153      	cbz	r3, 192fa <z_impl_k_thread_create+0x2e>
   192e4:	491a      	ldr	r1, [pc, #104]	; (19350 <z_impl_k_thread_create+0x84>)
   192e6:	481b      	ldr	r0, [pc, #108]	; (19354 <z_impl_k_thread_create+0x88>)
   192e8:	f240 228f 	movw	r2, #655	; 0x28f
   192ec:	f001 f89b 	bl	1a426 <printk>
   192f0:	f240 218f 	movw	r1, #655	; 0x28f
   192f4:	4816      	ldr	r0, [pc, #88]	; (19350 <z_impl_k_thread_create+0x84>)
   192f6:	f001 fb3c 	bl	1a972 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   192fa:	2300      	movs	r3, #0
   192fc:	9305      	str	r3, [sp, #20]
   192fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19300:	4642      	mov	r2, r8
   19302:	9304      	str	r3, [sp, #16]
   19304:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19306:	4639      	mov	r1, r7
   19308:	9303      	str	r3, [sp, #12]
   1930a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1930c:	4620      	mov	r0, r4
   1930e:	9302      	str	r3, [sp, #8]
   19310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19312:	9301      	str	r3, [sp, #4]
   19314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19316:	9300      	str	r3, [sp, #0]
   19318:	464b      	mov	r3, r9
   1931a:	f7ff ff6d 	bl	191f8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1931e:	f1b5 3fff 	cmp.w	r5, #4294967295
   19322:	bf08      	it	eq
   19324:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19328:	d005      	beq.n	19336 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1932a:	ea55 0306 	orrs.w	r3, r5, r6
   1932e:	d106      	bne.n	1933e <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   19330:	4620      	mov	r0, r4
   19332:	f7ff f917 	bl	18564 <z_sched_start>
}
   19336:	4620      	mov	r0, r4
   19338:	b007      	add	sp, #28
   1933a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1933e:	4632      	mov	r2, r6
   19340:	462b      	mov	r3, r5
   19342:	4905      	ldr	r1, [pc, #20]	; (19358 <z_impl_k_thread_create+0x8c>)
   19344:	f104 0018 	add.w	r0, r4, #24
   19348:	f000 fa18 	bl	1977c <z_add_timeout>
   1934c:	e7f3      	b.n	19336 <z_impl_k_thread_create+0x6a>
   1934e:	bf00      	nop
   19350:	00022833 	.word	0x00022833
   19354:	0001f98f 	.word	0x0001f98f
   19358:	000185e9 	.word	0x000185e9

0001935c <z_init_static_threads>:
{
   1935c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19360:	4c37      	ldr	r4, [pc, #220]	; (19440 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   19362:	4d38      	ldr	r5, [pc, #224]	; (19444 <z_init_static_threads+0xe8>)
   19364:	4f38      	ldr	r7, [pc, #224]	; (19448 <z_init_static_threads+0xec>)
{
   19366:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   19368:	42ac      	cmp	r4, r5
   1936a:	4626      	mov	r6, r4
   1936c:	d90a      	bls.n	19384 <z_init_static_threads+0x28>
   1936e:	4639      	mov	r1, r7
   19370:	4836      	ldr	r0, [pc, #216]	; (1944c <z_init_static_threads+0xf0>)
   19372:	f240 22fd 	movw	r2, #765	; 0x2fd
   19376:	f001 f856 	bl	1a426 <printk>
   1937a:	f240 21fd 	movw	r1, #765	; 0x2fd
   1937e:	4638      	mov	r0, r7
   19380:	f001 faf7 	bl	1a972 <assert_post_action>
   19384:	42ae      	cmp	r6, r5
   19386:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1938a:	d31b      	bcc.n	193c4 <z_init_static_threads+0x68>
	k_sched_lock();
   1938c:	f7fe ff16 	bl	181bc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   19390:	4c2b      	ldr	r4, [pc, #172]	; (19440 <z_init_static_threads+0xe4>)
   19392:	4e2d      	ldr	r6, [pc, #180]	; (19448 <z_init_static_threads+0xec>)
   19394:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1944c <z_init_static_threads+0xf0>
   19398:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19450 <z_init_static_threads+0xf4>
   1939c:	42ac      	cmp	r4, r5
   1939e:	d90a      	bls.n	193b6 <z_init_static_threads+0x5a>
   193a0:	4631      	mov	r1, r6
   193a2:	4640      	mov	r0, r8
   193a4:	f44f 7247 	mov.w	r2, #796	; 0x31c
   193a8:	f001 f83d 	bl	1a426 <printk>
   193ac:	f44f 7147 	mov.w	r1, #796	; 0x31c
   193b0:	4630      	mov	r0, r6
   193b2:	f001 fade 	bl	1a972 <assert_post_action>
   193b6:	42ac      	cmp	r4, r5
   193b8:	d320      	bcc.n	193fc <z_init_static_threads+0xa0>
}
   193ba:	b007      	add	sp, #28
   193bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   193c0:	f7fe bff4 	b.w	183ac <k_sched_unlock>
		z_setup_new_thread(
   193c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   193c8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   193cc:	9305      	str	r3, [sp, #20]
   193ce:	f854 3c10 	ldr.w	r3, [r4, #-16]
   193d2:	9304      	str	r3, [sp, #16]
   193d4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   193d8:	9303      	str	r3, [sp, #12]
   193da:	f854 3c18 	ldr.w	r3, [r4, #-24]
   193de:	9302      	str	r3, [sp, #8]
   193e0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   193e4:	9301      	str	r3, [sp, #4]
   193e6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   193ea:	9300      	str	r3, [sp, #0]
   193ec:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   193f0:	f7ff ff02 	bl	191f8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   193f4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   193f8:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   193fa:	e7b5      	b.n	19368 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   193fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   193fe:	1c5a      	adds	r2, r3, #1
   19400:	d00f      	beq.n	19422 <z_init_static_threads+0xc6>
   19402:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   19406:	f240 30e7 	movw	r0, #999	; 0x3e7
   1940a:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   1940c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19410:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19414:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   19418:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1941a:	d104      	bne.n	19426 <z_init_static_threads+0xca>
	z_sched_start(thread);
   1941c:	4638      	mov	r0, r7
   1941e:	f7ff f8a1 	bl	18564 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19422:	3430      	adds	r4, #48	; 0x30
   19424:	e7ba      	b.n	1939c <z_init_static_threads+0x40>
   19426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1942a:	2300      	movs	r3, #0
   1942c:	f7ef fb7e 	bl	8b2c <__aeabi_uldivmod>
   19430:	4602      	mov	r2, r0
   19432:	460b      	mov	r3, r1
   19434:	f107 0018 	add.w	r0, r7, #24
   19438:	4649      	mov	r1, r9
   1943a:	f000 f99f 	bl	1977c <z_add_timeout>
   1943e:	e7f0      	b.n	19422 <z_init_static_threads+0xc6>
   19440:	200085f8 	.word	0x200085f8
   19444:	200085f8 	.word	0x200085f8
   19448:	00022833 	.word	0x00022833
   1944c:	0001f98f 	.word	0x0001f98f
   19450:	000185e9 	.word	0x000185e9

00019454 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   19454:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   19456:	b138      	cbz	r0, 19468 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   19458:	4b04      	ldr	r3, [pc, #16]	; (1946c <z_spin_lock_valid+0x18>)
   1945a:	f000 0003 	and.w	r0, r0, #3
   1945e:	7e1b      	ldrb	r3, [r3, #24]
   19460:	1ac0      	subs	r0, r0, r3
   19462:	bf18      	it	ne
   19464:	2001      	movne	r0, #1
   19466:	4770      	bx	lr
			return false;
		}
	}
	return true;
   19468:	2001      	movs	r0, #1
}
   1946a:	4770      	bx	lr
   1946c:	2000afc4 	.word	0x2000afc4

00019470 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19470:	4905      	ldr	r1, [pc, #20]	; (19488 <z_spin_unlock_valid+0x18>)
{
   19472:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19474:	688a      	ldr	r2, [r1, #8]
   19476:	7e08      	ldrb	r0, [r1, #24]
   19478:	6819      	ldr	r1, [r3, #0]
   1947a:	4302      	orrs	r2, r0
   1947c:	2000      	movs	r0, #0
   1947e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   19480:	bf04      	itt	eq
   19482:	6018      	streq	r0, [r3, #0]
	return true;
   19484:	2001      	moveq	r0, #1
}
   19486:	4770      	bx	lr
   19488:	2000afc4 	.word	0x2000afc4

0001948c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1948c:	4a02      	ldr	r2, [pc, #8]	; (19498 <z_spin_lock_set_owner+0xc>)
   1948e:	7e11      	ldrb	r1, [r2, #24]
   19490:	6893      	ldr	r3, [r2, #8]
   19492:	430b      	orrs	r3, r1
   19494:	6003      	str	r3, [r0, #0]
}
   19496:	4770      	bx	lr
   19498:	2000afc4 	.word	0x2000afc4

0001949c <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1949c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1949e:	f04f 0320 	mov.w	r3, #32
   194a2:	f3ef 8511 	mrs	r5, BASEPRI
   194a6:	f383 8811 	msr	BASEPRI, r3
   194aa:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   194ae:	4c0e      	ldr	r4, [pc, #56]	; (194e8 <z_self_abort+0x4c>)
   194b0:	6923      	ldr	r3, [r4, #16]
   194b2:	b143      	cbz	r3, 194c6 <z_self_abort+0x2a>
   194b4:	490d      	ldr	r1, [pc, #52]	; (194ec <z_self_abort+0x50>)
   194b6:	480e      	ldr	r0, [pc, #56]	; (194f0 <z_self_abort+0x54>)
   194b8:	2228      	movs	r2, #40	; 0x28
   194ba:	f000 ffb4 	bl	1a426 <printk>
   194be:	2128      	movs	r1, #40	; 0x28
   194c0:	480a      	ldr	r0, [pc, #40]	; (194ec <z_self_abort+0x50>)
   194c2:	f001 fa56 	bl	1a972 <assert_post_action>
	cpu->pending_abort = _current;
   194c6:	68a0      	ldr	r0, [r4, #8]
   194c8:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   194ca:	f7ff f981 	bl	187d0 <z_impl_k_thread_suspend>
   194ce:	4628      	mov	r0, r5
   194d0:	f7f4 f916 	bl	d700 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   194d4:	4905      	ldr	r1, [pc, #20]	; (194ec <z_self_abort+0x50>)
   194d6:	4806      	ldr	r0, [pc, #24]	; (194f0 <z_self_abort+0x54>)
   194d8:	2230      	movs	r2, #48	; 0x30
   194da:	f000 ffa4 	bl	1a426 <printk>
   194de:	2130      	movs	r1, #48	; 0x30
   194e0:	4802      	ldr	r0, [pc, #8]	; (194ec <z_self_abort+0x50>)
   194e2:	f001 fa46 	bl	1a972 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   194e6:	bf00      	nop
   194e8:	2000afc4 	.word	0x2000afc4
   194ec:	00022856 	.word	0x00022856
   194f0:	0001f98f 	.word	0x0001f98f

000194f4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   194f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194f8:	4604      	mov	r4, r0
   194fa:	b088      	sub	sp, #32
   194fc:	460d      	mov	r5, r1
   194fe:	4616      	mov	r6, r2
   19500:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   19502:	f004 fb40 	bl	1db86 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   19506:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1950a:	2200      	movs	r2, #0
   1950c:	2300      	movs	r3, #0
   1950e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   19512:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19516:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1951a:	4629      	mov	r1, r5
   1951c:	4632      	mov	r2, r6
   1951e:	4640      	mov	r0, r8
   19520:	4b05      	ldr	r3, [pc, #20]	; (19538 <k_work_q_start+0x44>)
   19522:	9400      	str	r4, [sp, #0]
   19524:	f7ff fed2 	bl	192cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19528:	4640      	mov	r0, r8
   1952a:	4904      	ldr	r1, [pc, #16]	; (1953c <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1952c:	b008      	add	sp, #32
   1952e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19532:	f004 bba7 	b.w	1dc84 <z_impl_k_thread_name_set>
   19536:	bf00      	nop
   19538:	0000a9b9 	.word	0x0000a9b9
   1953c:	0002287f 	.word	0x0002287f

00019540 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   19540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19544:	4606      	mov	r6, r0
   19546:	460d      	mov	r5, r1
   19548:	4690      	mov	r8, r2
   1954a:	461f      	mov	r7, r3
   1954c:	f04f 0320 	mov.w	r3, #32
   19550:	f3ef 8911 	mrs	r9, BASEPRI
   19554:	f383 8811 	msr	BASEPRI, r3
   19558:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1955c:	482c      	ldr	r0, [pc, #176]	; (19610 <k_delayed_work_submit_to_queue+0xd0>)
   1955e:	f7ff ff79 	bl	19454 <z_spin_lock_valid>
   19562:	b940      	cbnz	r0, 19576 <k_delayed_work_submit_to_queue+0x36>
   19564:	492b      	ldr	r1, [pc, #172]	; (19614 <k_delayed_work_submit_to_queue+0xd4>)
   19566:	482c      	ldr	r0, [pc, #176]	; (19618 <k_delayed_work_submit_to_queue+0xd8>)
   19568:	227c      	movs	r2, #124	; 0x7c
   1956a:	f000 ff5c 	bl	1a426 <printk>
   1956e:	217c      	movs	r1, #124	; 0x7c
   19570:	4828      	ldr	r0, [pc, #160]	; (19614 <k_delayed_work_submit_to_queue+0xd4>)
   19572:	f001 f9fe 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   19576:	4826      	ldr	r0, [pc, #152]	; (19610 <k_delayed_work_submit_to_queue+0xd0>)
   19578:	f7ff ff88 	bl	1948c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1957c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1957e:	b1e3      	cbz	r3, 195ba <k_delayed_work_submit_to_queue+0x7a>
   19580:	42b3      	cmp	r3, r6
   19582:	d142      	bne.n	1960a <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   19584:	4628      	mov	r0, r5
   19586:	f004 fb9b 	bl	1dcc0 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1958a:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1958e:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   19590:	d015      	beq.n	195be <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   19592:	2800      	cmp	r0, #0
   19594:	da14      	bge.n	195c0 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19596:	481e      	ldr	r0, [pc, #120]	; (19610 <k_delayed_work_submit_to_queue+0xd0>)
   19598:	f7ff ff6a 	bl	19470 <z_spin_unlock_valid>
   1959c:	b940      	cbnz	r0, 195b0 <k_delayed_work_submit_to_queue+0x70>
   1959e:	491d      	ldr	r1, [pc, #116]	; (19614 <k_delayed_work_submit_to_queue+0xd4>)
   195a0:	481d      	ldr	r0, [pc, #116]	; (19618 <k_delayed_work_submit_to_queue+0xd8>)
   195a2:	22a7      	movs	r2, #167	; 0xa7
   195a4:	f000 ff3f 	bl	1a426 <printk>
   195a8:	21a7      	movs	r1, #167	; 0xa7
   195aa:	481a      	ldr	r0, [pc, #104]	; (19614 <k_delayed_work_submit_to_queue+0xd4>)
   195ac:	f001 f9e1 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   195b0:	f389 8811 	msr	BASEPRI, r9
   195b4:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   195b8:	e01c      	b.n	195f4 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   195ba:	2e00      	cmp	r6, #0
   195bc:	d0e2      	beq.n	19584 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   195be:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   195c0:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   195c4:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   195c6:	d118      	bne.n	195fa <k_delayed_work_submit_to_queue+0xba>
   195c8:	4811      	ldr	r0, [pc, #68]	; (19610 <k_delayed_work_submit_to_queue+0xd0>)
   195ca:	f7ff ff51 	bl	19470 <z_spin_unlock_valid>
   195ce:	b940      	cbnz	r0, 195e2 <k_delayed_work_submit_to_queue+0xa2>
   195d0:	4910      	ldr	r1, [pc, #64]	; (19614 <k_delayed_work_submit_to_queue+0xd4>)
   195d2:	4811      	ldr	r0, [pc, #68]	; (19618 <k_delayed_work_submit_to_queue+0xd8>)
   195d4:	22a7      	movs	r2, #167	; 0xa7
   195d6:	f000 ff26 	bl	1a426 <printk>
   195da:	21a7      	movs	r1, #167	; 0xa7
   195dc:	480d      	ldr	r0, [pc, #52]	; (19614 <k_delayed_work_submit_to_queue+0xd4>)
   195de:	f001 f9c8 	bl	1a972 <assert_post_action>
   195e2:	f389 8811 	msr	BASEPRI, r9
   195e6:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   195ea:	4629      	mov	r1, r5
   195ec:	4630      	mov	r0, r6
   195ee:	f004 fb4e 	bl	1dc8e <k_work_submit_to_queue>
		return 0;
   195f2:	2400      	movs	r4, #0
}
   195f4:	4620      	mov	r0, r4
   195f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   195fa:	4642      	mov	r2, r8
   195fc:	463b      	mov	r3, r7
   195fe:	4907      	ldr	r1, [pc, #28]	; (1961c <k_delayed_work_submit_to_queue+0xdc>)
   19600:	f105 0010 	add.w	r0, r5, #16
   19604:	f000 f8ba 	bl	1977c <z_add_timeout>
   19608:	e7c5      	b.n	19596 <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   1960a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1960e:	e7c2      	b.n	19596 <k_delayed_work_submit_to_queue+0x56>
   19610:	2000b00c 	.word	0x2000b00c
   19614:	0001f9c9 	.word	0x0001f9c9
   19618:	0001f98f 	.word	0x0001f98f
   1961c:	0001dcb7 	.word	0x0001dcb7

00019620 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   19620:	b538      	push	{r3, r4, r5, lr}
   19622:	4604      	mov	r4, r0
	__asm__ volatile(
   19624:	f04f 0320 	mov.w	r3, #32
   19628:	f3ef 8511 	mrs	r5, BASEPRI
   1962c:	f383 8811 	msr	BASEPRI, r3
   19630:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19634:	4815      	ldr	r0, [pc, #84]	; (1968c <k_delayed_work_cancel+0x6c>)
   19636:	f7ff ff0d 	bl	19454 <z_spin_lock_valid>
   1963a:	b940      	cbnz	r0, 1964e <k_delayed_work_cancel+0x2e>
   1963c:	4914      	ldr	r1, [pc, #80]	; (19690 <k_delayed_work_cancel+0x70>)
   1963e:	4815      	ldr	r0, [pc, #84]	; (19694 <k_delayed_work_cancel+0x74>)
   19640:	227c      	movs	r2, #124	; 0x7c
   19642:	f000 fef0 	bl	1a426 <printk>
   19646:	217c      	movs	r1, #124	; 0x7c
   19648:	4811      	ldr	r0, [pc, #68]	; (19690 <k_delayed_work_cancel+0x70>)
   1964a:	f001 f992 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   1964e:	480f      	ldr	r0, [pc, #60]	; (1968c <k_delayed_work_cancel+0x6c>)
   19650:	f7ff ff1c 	bl	1948c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   19654:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19656:	b1b3      	cbz	r3, 19686 <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   19658:	4620      	mov	r0, r4
   1965a:	f004 fb31 	bl	1dcc0 <work_cancel>
   1965e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19660:	480a      	ldr	r0, [pc, #40]	; (1968c <k_delayed_work_cancel+0x6c>)
   19662:	f7ff ff05 	bl	19470 <z_spin_unlock_valid>
   19666:	b940      	cbnz	r0, 1967a <k_delayed_work_cancel+0x5a>
   19668:	4909      	ldr	r1, [pc, #36]	; (19690 <k_delayed_work_cancel+0x70>)
   1966a:	480a      	ldr	r0, [pc, #40]	; (19694 <k_delayed_work_cancel+0x74>)
   1966c:	22a7      	movs	r2, #167	; 0xa7
   1966e:	f000 feda 	bl	1a426 <printk>
   19672:	21a7      	movs	r1, #167	; 0xa7
   19674:	4806      	ldr	r0, [pc, #24]	; (19690 <k_delayed_work_cancel+0x70>)
   19676:	f001 f97c 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1967a:	f385 8811 	msr	BASEPRI, r5
   1967e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   19682:	4620      	mov	r0, r4
   19684:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19686:	f06f 0415 	mvn.w	r4, #21
   1968a:	e7e9      	b.n	19660 <k_delayed_work_cancel+0x40>
   1968c:	2000b00c 	.word	0x2000b00c
   19690:	0001f9c9 	.word	0x0001f9c9
   19694:	0001f98f 	.word	0x0001f98f

00019698 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19698:	4a02      	ldr	r2, [pc, #8]	; (196a4 <boot_banner+0xc>)
   1969a:	4903      	ldr	r1, [pc, #12]	; (196a8 <boot_banner+0x10>)
   1969c:	4803      	ldr	r0, [pc, #12]	; (196ac <boot_banner+0x14>)
   1969e:	f000 bec2 	b.w	1a426 <printk>
   196a2:	bf00      	nop
   196a4:	000226c2 	.word	0x000226c2
   196a8:	00022889 	.word	0x00022889
   196ac:	00022896 	.word	0x00022896

000196b0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   196b0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   196b2:	4806      	ldr	r0, [pc, #24]	; (196cc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   196b4:	4a06      	ldr	r2, [pc, #24]	; (196d0 <z_data_copy+0x20>)
   196b6:	4907      	ldr	r1, [pc, #28]	; (196d4 <z_data_copy+0x24>)
   196b8:	1a12      	subs	r2, r2, r0
   196ba:	f002 f8f8 	bl	1b8ae <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   196be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   196c2:	4a05      	ldr	r2, [pc, #20]	; (196d8 <z_data_copy+0x28>)
   196c4:	4905      	ldr	r1, [pc, #20]	; (196dc <z_data_copy+0x2c>)
   196c6:	4806      	ldr	r0, [pc, #24]	; (196e0 <z_data_copy+0x30>)
   196c8:	f002 b8f1 	b.w	1b8ae <memcpy>
   196cc:	20008000 	.word	0x20008000
   196d0:	200087f0 	.word	0x200087f0
   196d4:	0002292c 	.word	0x0002292c
   196d8:	00000000 	.word	0x00000000
   196dc:	0002292c 	.word	0x0002292c
   196e0:	20008000 	.word	0x20008000

000196e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   196e4:	4b03      	ldr	r3, [pc, #12]	; (196f4 <elapsed+0x10>)
   196e6:	681b      	ldr	r3, [r3, #0]
   196e8:	b90b      	cbnz	r3, 196ee <elapsed+0xa>
   196ea:	f7f2 bdaf 	b.w	c24c <z_clock_elapsed>
}
   196ee:	2000      	movs	r0, #0
   196f0:	4770      	bx	lr
   196f2:	bf00      	nop
   196f4:	2000b010 	.word	0x2000b010

000196f8 <next_timeout>:
	return list->head == list;
   196f8:	4b11      	ldr	r3, [pc, #68]	; (19740 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   196fa:	b510      	push	{r4, lr}
   196fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   196fe:	429c      	cmp	r4, r3
   19700:	bf08      	it	eq
   19702:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19704:	f7ff ffee 	bl	196e4 <elapsed>
   19708:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1970a:	b16c      	cbz	r4, 19728 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1970c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   19710:	1ac0      	subs	r0, r0, r3
   19712:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   19716:	2801      	cmp	r0, #1
   19718:	f173 0200 	sbcs.w	r2, r3, #0
   1971c:	db0d      	blt.n	1973a <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1971e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   19722:	f173 0300 	sbcs.w	r3, r3, #0
   19726:	db01      	blt.n	1972c <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   19728:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1972c:	4b05      	ldr	r3, [pc, #20]	; (19744 <next_timeout+0x4c>)
   1972e:	695b      	ldr	r3, [r3, #20]
   19730:	b113      	cbz	r3, 19738 <next_timeout+0x40>
   19732:	4298      	cmp	r0, r3
   19734:	bfa8      	it	ge
   19736:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19738:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1973a:	2000      	movs	r0, #0
   1973c:	e7f6      	b.n	1972c <next_timeout+0x34>
   1973e:	bf00      	nop
   19740:	20008564 	.word	0x20008564
   19744:	2000afc4 	.word	0x2000afc4

00019748 <remove_timeout>:
{
   19748:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1974a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1974c:	b168      	cbz	r0, 1976a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1974e:	4a0a      	ldr	r2, [pc, #40]	; (19778 <remove_timeout+0x30>)
   19750:	6852      	ldr	r2, [r2, #4]
   19752:	4290      	cmp	r0, r2
   19754:	d009      	beq.n	1976a <remove_timeout+0x22>
	if (next(t) != NULL) {
   19756:	b143      	cbz	r3, 1976a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19758:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1975c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19760:	1912      	adds	r2, r2, r4
   19762:	eb41 0105 	adc.w	r1, r1, r5
   19766:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1976a:	6842      	ldr	r2, [r0, #4]
   1976c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1976e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19770:	2300      	movs	r3, #0
	node->prev = NULL;
   19772:	e9c0 3300 	strd	r3, r3, [r0]
}
   19776:	bd30      	pop	{r4, r5, pc}
   19778:	20008564 	.word	0x20008564

0001977c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1977c:	f1b3 3fff 	cmp.w	r3, #4294967295
   19780:	bf08      	it	eq
   19782:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19786:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1978a:	4604      	mov	r4, r0
   1978c:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1978e:	f000 808c 	beq.w	198aa <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19792:	f06f 0601 	mvn.w	r6, #1
   19796:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1979a:	1c55      	adds	r5, r2, #1
   1979c:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   197a0:	1b73      	subs	r3, r6, r5
   197a2:	eb69 0307 	sbc.w	r3, r9, r7
   197a6:	2b00      	cmp	r3, #0
   197a8:	db0d      	blt.n	197c6 <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   197aa:	f7ff ff9b 	bl	196e4 <elapsed>
   197ae:	4b44      	ldr	r3, [pc, #272]	; (198c0 <z_add_timeout+0x144>)
   197b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   197b4:	1ab6      	subs	r6, r6, r2
   197b6:	eb69 0303 	sbc.w	r3, r9, r3
   197ba:	1b75      	subs	r5, r6, r5
   197bc:	eb63 0707 	sbc.w	r7, r3, r7
   197c0:	1a2d      	subs	r5, r5, r0
   197c2:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   197c6:	6823      	ldr	r3, [r4, #0]
   197c8:	b143      	cbz	r3, 197dc <z_add_timeout+0x60>
   197ca:	493e      	ldr	r1, [pc, #248]	; (198c4 <z_add_timeout+0x148>)
   197cc:	483e      	ldr	r0, [pc, #248]	; (198c8 <z_add_timeout+0x14c>)
   197ce:	2268      	movs	r2, #104	; 0x68
   197d0:	f000 fe29 	bl	1a426 <printk>
   197d4:	2168      	movs	r1, #104	; 0x68
   197d6:	483b      	ldr	r0, [pc, #236]	; (198c4 <z_add_timeout+0x148>)
   197d8:	f001 f8cb 	bl	1a972 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   197dc:	2d01      	cmp	r5, #1
   197de:	f177 0300 	sbcs.w	r3, r7, #0
   197e2:	bfbc      	itt	lt
   197e4:	2501      	movlt	r5, #1
   197e6:	2700      	movlt	r7, #0
	to->fn = fn;
   197e8:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   197ec:	f04f 0320 	mov.w	r3, #32
   197f0:	f3ef 8611 	mrs	r6, BASEPRI
   197f4:	f383 8811 	msr	BASEPRI, r3
   197f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   197fc:	4833      	ldr	r0, [pc, #204]	; (198cc <z_add_timeout+0x150>)
   197fe:	f7ff fe29 	bl	19454 <z_spin_lock_valid>
   19802:	b940      	cbnz	r0, 19816 <z_add_timeout+0x9a>
   19804:	4932      	ldr	r1, [pc, #200]	; (198d0 <z_add_timeout+0x154>)
   19806:	4830      	ldr	r0, [pc, #192]	; (198c8 <z_add_timeout+0x14c>)
   19808:	227c      	movs	r2, #124	; 0x7c
   1980a:	f000 fe0c 	bl	1a426 <printk>
   1980e:	217c      	movs	r1, #124	; 0x7c
   19810:	482f      	ldr	r0, [pc, #188]	; (198d0 <z_add_timeout+0x154>)
   19812:	f001 f8ae 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   19816:	482d      	ldr	r0, [pc, #180]	; (198cc <z_add_timeout+0x150>)
   19818:	f7ff fe38 	bl	1948c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1981c:	f7ff ff62 	bl	196e4 <elapsed>
	return list->head == list;
   19820:	4a2c      	ldr	r2, [pc, #176]	; (198d4 <z_add_timeout+0x158>)
   19822:	1945      	adds	r5, r0, r5
   19824:	6813      	ldr	r3, [r2, #0]
   19826:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1982a:	4293      	cmp	r3, r2
   1982c:	e9c4 5704 	strd	r5, r7, [r4, #16]
   19830:	d002      	beq.n	19838 <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   19832:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   19836:	b933      	cbnz	r3, 19846 <z_add_timeout+0xca>
	node->prev = list->tail;
   19838:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1983a:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   1983c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1983e:	6853      	ldr	r3, [r2, #4]
   19840:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19842:	6054      	str	r4, [r2, #4]
}
   19844:	e011      	b.n	1986a <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   19846:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   1984a:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   1984e:	4281      	cmp	r1, r0
   19850:	eb75 0e07 	sbcs.w	lr, r5, r7
   19854:	da2b      	bge.n	198ae <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   19856:	1a41      	subs	r1, r0, r1
   19858:	eb67 0505 	sbc.w	r5, r7, r5
   1985c:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   19860:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19862:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   19866:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19868:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1986a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1986c:	4293      	cmp	r3, r2
   1986e:	d00b      	beq.n	19888 <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19870:	429c      	cmp	r4, r3
   19872:	d109      	bne.n	19888 <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19874:	f7ff ff40 	bl	196f8 <next_timeout>

			if (next_time == 0 ||
   19878:	b118      	cbz	r0, 19882 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   1987a:	4b17      	ldr	r3, [pc, #92]	; (198d8 <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   1987c:	695b      	ldr	r3, [r3, #20]
   1987e:	4283      	cmp	r3, r0
   19880:	d002      	beq.n	19888 <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   19882:	2100      	movs	r1, #0
   19884:	f7f2 fcb0 	bl	c1e8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19888:	4810      	ldr	r0, [pc, #64]	; (198cc <z_add_timeout+0x150>)
   1988a:	f7ff fdf1 	bl	19470 <z_spin_unlock_valid>
   1988e:	b940      	cbnz	r0, 198a2 <z_add_timeout+0x126>
   19890:	490f      	ldr	r1, [pc, #60]	; (198d0 <z_add_timeout+0x154>)
   19892:	480d      	ldr	r0, [pc, #52]	; (198c8 <z_add_timeout+0x14c>)
   19894:	22a7      	movs	r2, #167	; 0xa7
   19896:	f000 fdc6 	bl	1a426 <printk>
   1989a:	21a7      	movs	r1, #167	; 0xa7
   1989c:	480c      	ldr	r0, [pc, #48]	; (198d0 <z_add_timeout+0x154>)
   1989e:	f001 f868 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   198a2:	f386 8811 	msr	BASEPRI, r6
   198a6:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   198aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   198ae:	1a09      	subs	r1, r1, r0
   198b0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   198b4:	4563      	cmp	r3, ip
   198b6:	e9c4 1504 	strd	r1, r5, [r4, #16]
   198ba:	d0bd      	beq.n	19838 <z_add_timeout+0xbc>
   198bc:	681b      	ldr	r3, [r3, #0]
   198be:	e7ba      	b.n	19836 <z_add_timeout+0xba>
   198c0:	2000a608 	.word	0x2000a608
   198c4:	000228bd 	.word	0x000228bd
   198c8:	0001f98f 	.word	0x0001f98f
   198cc:	2000b014 	.word	0x2000b014
   198d0:	0001f9c9 	.word	0x0001f9c9
   198d4:	20008564 	.word	0x20008564
   198d8:	2000afc4 	.word	0x2000afc4

000198dc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   198dc:	b538      	push	{r3, r4, r5, lr}
   198de:	4604      	mov	r4, r0
	__asm__ volatile(
   198e0:	f04f 0320 	mov.w	r3, #32
   198e4:	f3ef 8511 	mrs	r5, BASEPRI
   198e8:	f383 8811 	msr	BASEPRI, r3
   198ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   198f0:	4815      	ldr	r0, [pc, #84]	; (19948 <z_abort_timeout+0x6c>)
   198f2:	f7ff fdaf 	bl	19454 <z_spin_lock_valid>
   198f6:	b940      	cbnz	r0, 1990a <z_abort_timeout+0x2e>
   198f8:	4914      	ldr	r1, [pc, #80]	; (1994c <z_abort_timeout+0x70>)
   198fa:	4815      	ldr	r0, [pc, #84]	; (19950 <z_abort_timeout+0x74>)
   198fc:	227c      	movs	r2, #124	; 0x7c
   198fe:	f000 fd92 	bl	1a426 <printk>
   19902:	217c      	movs	r1, #124	; 0x7c
   19904:	4811      	ldr	r0, [pc, #68]	; (1994c <z_abort_timeout+0x70>)
   19906:	f001 f834 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   1990a:	480f      	ldr	r0, [pc, #60]	; (19948 <z_abort_timeout+0x6c>)
   1990c:	f7ff fdbe 	bl	1948c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   19910:	6823      	ldr	r3, [r4, #0]
   19912:	b1b3      	cbz	r3, 19942 <z_abort_timeout+0x66>
			remove_timeout(to);
   19914:	4620      	mov	r0, r4
   19916:	f7ff ff17 	bl	19748 <remove_timeout>
			ret = 0;
   1991a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1991c:	480a      	ldr	r0, [pc, #40]	; (19948 <z_abort_timeout+0x6c>)
   1991e:	f7ff fda7 	bl	19470 <z_spin_unlock_valid>
   19922:	b940      	cbnz	r0, 19936 <z_abort_timeout+0x5a>
   19924:	4909      	ldr	r1, [pc, #36]	; (1994c <z_abort_timeout+0x70>)
   19926:	480a      	ldr	r0, [pc, #40]	; (19950 <z_abort_timeout+0x74>)
   19928:	22a7      	movs	r2, #167	; 0xa7
   1992a:	f000 fd7c 	bl	1a426 <printk>
   1992e:	21a7      	movs	r1, #167	; 0xa7
   19930:	4806      	ldr	r0, [pc, #24]	; (1994c <z_abort_timeout+0x70>)
   19932:	f001 f81e 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   19936:	f385 8811 	msr	BASEPRI, r5
   1993a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1993e:	4620      	mov	r0, r4
   19940:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19942:	f06f 0415 	mvn.w	r4, #21
   19946:	e7e9      	b.n	1991c <z_abort_timeout+0x40>
   19948:	2000b014 	.word	0x2000b014
   1994c:	0001f9c9 	.word	0x0001f9c9
   19950:	0001f98f 	.word	0x0001f98f

00019954 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   19954:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19956:	f04f 0320 	mov.w	r3, #32
   1995a:	f3ef 8511 	mrs	r5, BASEPRI
   1995e:	f383 8811 	msr	BASEPRI, r3
   19962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19966:	4813      	ldr	r0, [pc, #76]	; (199b4 <z_get_next_timeout_expiry+0x60>)
   19968:	f7ff fd74 	bl	19454 <z_spin_lock_valid>
   1996c:	b940      	cbnz	r0, 19980 <z_get_next_timeout_expiry+0x2c>
   1996e:	4912      	ldr	r1, [pc, #72]	; (199b8 <z_get_next_timeout_expiry+0x64>)
   19970:	4812      	ldr	r0, [pc, #72]	; (199bc <z_get_next_timeout_expiry+0x68>)
   19972:	227c      	movs	r2, #124	; 0x7c
   19974:	f000 fd57 	bl	1a426 <printk>
   19978:	217c      	movs	r1, #124	; 0x7c
   1997a:	480f      	ldr	r0, [pc, #60]	; (199b8 <z_get_next_timeout_expiry+0x64>)
   1997c:	f000 fff9 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   19980:	480c      	ldr	r0, [pc, #48]	; (199b4 <z_get_next_timeout_expiry+0x60>)
   19982:	f7ff fd83 	bl	1948c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   19986:	f7ff feb7 	bl	196f8 <next_timeout>
   1998a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1998c:	4809      	ldr	r0, [pc, #36]	; (199b4 <z_get_next_timeout_expiry+0x60>)
   1998e:	f7ff fd6f 	bl	19470 <z_spin_unlock_valid>
   19992:	b940      	cbnz	r0, 199a6 <z_get_next_timeout_expiry+0x52>
   19994:	4908      	ldr	r1, [pc, #32]	; (199b8 <z_get_next_timeout_expiry+0x64>)
   19996:	4809      	ldr	r0, [pc, #36]	; (199bc <z_get_next_timeout_expiry+0x68>)
   19998:	22a7      	movs	r2, #167	; 0xa7
   1999a:	f000 fd44 	bl	1a426 <printk>
   1999e:	21a7      	movs	r1, #167	; 0xa7
   199a0:	4805      	ldr	r0, [pc, #20]	; (199b8 <z_get_next_timeout_expiry+0x64>)
   199a2:	f000 ffe6 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   199a6:	f385 8811 	msr	BASEPRI, r5
   199aa:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   199ae:	4620      	mov	r0, r4
   199b0:	bd38      	pop	{r3, r4, r5, pc}
   199b2:	bf00      	nop
   199b4:	2000b014 	.word	0x2000b014
   199b8:	0001f9c9 	.word	0x0001f9c9
   199bc:	0001f98f 	.word	0x0001f98f

000199c0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   199c0:	b570      	push	{r4, r5, r6, lr}
   199c2:	4604      	mov	r4, r0
   199c4:	460d      	mov	r5, r1
	__asm__ volatile(
   199c6:	f04f 0320 	mov.w	r3, #32
   199ca:	f3ef 8611 	mrs	r6, BASEPRI
   199ce:	f383 8811 	msr	BASEPRI, r3
   199d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   199d6:	4816      	ldr	r0, [pc, #88]	; (19a30 <z_set_timeout_expiry+0x70>)
   199d8:	f7ff fd3c 	bl	19454 <z_spin_lock_valid>
   199dc:	b940      	cbnz	r0, 199f0 <z_set_timeout_expiry+0x30>
   199de:	4915      	ldr	r1, [pc, #84]	; (19a34 <z_set_timeout_expiry+0x74>)
   199e0:	4815      	ldr	r0, [pc, #84]	; (19a38 <z_set_timeout_expiry+0x78>)
   199e2:	227c      	movs	r2, #124	; 0x7c
   199e4:	f000 fd1f 	bl	1a426 <printk>
   199e8:	217c      	movs	r1, #124	; 0x7c
   199ea:	4812      	ldr	r0, [pc, #72]	; (19a34 <z_set_timeout_expiry+0x74>)
   199ec:	f000 ffc1 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   199f0:	480f      	ldr	r0, [pc, #60]	; (19a30 <z_set_timeout_expiry+0x70>)
   199f2:	f7ff fd4b 	bl	1948c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   199f6:	f7ff fe7f 	bl	196f8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   199fa:	2801      	cmp	r0, #1
   199fc:	dd05      	ble.n	19a0a <z_set_timeout_expiry+0x4a>
   199fe:	42a0      	cmp	r0, r4
   19a00:	dd03      	ble.n	19a0a <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   19a02:	4629      	mov	r1, r5
   19a04:	4620      	mov	r0, r4
   19a06:	f7f2 fbef 	bl	c1e8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19a0a:	4809      	ldr	r0, [pc, #36]	; (19a30 <z_set_timeout_expiry+0x70>)
   19a0c:	f7ff fd30 	bl	19470 <z_spin_unlock_valid>
   19a10:	b940      	cbnz	r0, 19a24 <z_set_timeout_expiry+0x64>
   19a12:	4908      	ldr	r1, [pc, #32]	; (19a34 <z_set_timeout_expiry+0x74>)
   19a14:	4808      	ldr	r0, [pc, #32]	; (19a38 <z_set_timeout_expiry+0x78>)
   19a16:	22a7      	movs	r2, #167	; 0xa7
   19a18:	f000 fd05 	bl	1a426 <printk>
   19a1c:	21a7      	movs	r1, #167	; 0xa7
   19a1e:	4805      	ldr	r0, [pc, #20]	; (19a34 <z_set_timeout_expiry+0x74>)
   19a20:	f000 ffa7 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   19a24:	f386 8811 	msr	BASEPRI, r6
   19a28:	f3bf 8f6f 	isb	sy
		}
	}
}
   19a2c:	bd70      	pop	{r4, r5, r6, pc}
   19a2e:	bf00      	nop
   19a30:	2000b014 	.word	0x2000b014
   19a34:	0001f9c9 	.word	0x0001f9c9
   19a38:	0001f98f 	.word	0x0001f98f

00019a3c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   19a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19a40:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19a42:	f7fe fe61 	bl	18708 <z_time_slice>
	__asm__ volatile(
   19a46:	f04f 0320 	mov.w	r3, #32
   19a4a:	f3ef 8511 	mrs	r5, BASEPRI
   19a4e:	f383 8811 	msr	BASEPRI, r3
   19a52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19a56:	4842      	ldr	r0, [pc, #264]	; (19b60 <z_clock_announce+0x124>)
   19a58:	f7ff fcfc 	bl	19454 <z_spin_lock_valid>
   19a5c:	b940      	cbnz	r0, 19a70 <z_clock_announce+0x34>
   19a5e:	4941      	ldr	r1, [pc, #260]	; (19b64 <z_clock_announce+0x128>)
   19a60:	4841      	ldr	r0, [pc, #260]	; (19b68 <z_clock_announce+0x12c>)
   19a62:	227c      	movs	r2, #124	; 0x7c
   19a64:	f000 fcdf 	bl	1a426 <printk>
   19a68:	217c      	movs	r1, #124	; 0x7c
   19a6a:	483e      	ldr	r0, [pc, #248]	; (19b64 <z_clock_announce+0x128>)
   19a6c:	f000 ff81 	bl	1a972 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19a70:	4f3e      	ldr	r7, [pc, #248]	; (19b6c <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   19a72:	483b      	ldr	r0, [pc, #236]	; (19b60 <z_clock_announce+0x124>)
	return list->head == list;
   19a74:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 19b70 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   19a78:	4e3e      	ldr	r6, [pc, #248]	; (19b74 <z_clock_announce+0x138>)
   19a7a:	f7ff fd07 	bl	1948c <z_spin_lock_set_owner>
	announce_remaining = ticks;
   19a7e:	603c      	str	r4, [r7, #0]
   19a80:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19a84:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19a86:	4544      	cmp	r4, r8
   19a88:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   19a8c:	e9d6 1e00 	ldrd	r1, lr, [r6]
   19a90:	d00b      	beq.n	19aaa <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19a92:	b154      	cbz	r4, 19aaa <z_clock_announce+0x6e>
   19a94:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   19a98:	429a      	cmp	r2, r3
   19a9a:	eb70 090c 	sbcs.w	r9, r0, ip
   19a9e:	da23      	bge.n	19ae8 <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19aa0:	1a9b      	subs	r3, r3, r2
   19aa2:	eb6c 0c00 	sbc.w	ip, ip, r0
   19aa6:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   19aaa:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   19aac:	1852      	adds	r2, r2, r1
   19aae:	eb4e 0000 	adc.w	r0, lr, r0
   19ab2:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   19ab6:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   19ab8:	f7ff fe1e 	bl	196f8 <next_timeout>
   19abc:	4621      	mov	r1, r4
   19abe:	f7f2 fb93 	bl	c1e8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ac2:	4827      	ldr	r0, [pc, #156]	; (19b60 <z_clock_announce+0x124>)
   19ac4:	f7ff fcd4 	bl	19470 <z_spin_unlock_valid>
   19ac8:	b940      	cbnz	r0, 19adc <z_clock_announce+0xa0>
   19aca:	4926      	ldr	r1, [pc, #152]	; (19b64 <z_clock_announce+0x128>)
   19acc:	4826      	ldr	r0, [pc, #152]	; (19b68 <z_clock_announce+0x12c>)
   19ace:	22a7      	movs	r2, #167	; 0xa7
   19ad0:	f000 fca9 	bl	1a426 <printk>
   19ad4:	21a7      	movs	r1, #167	; 0xa7
   19ad6:	4823      	ldr	r0, [pc, #140]	; (19b64 <z_clock_announce+0x128>)
   19ad8:	f000 ff4b 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   19adc:	f385 8811 	msr	BASEPRI, r5
   19ae0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   19ae8:	1859      	adds	r1, r3, r1
   19aea:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   19aee:	1ad3      	subs	r3, r2, r3
   19af0:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   19af2:	2200      	movs	r2, #0
   19af4:	2300      	movs	r3, #0
		curr_tick += dt;
   19af6:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   19afa:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   19afe:	4620      	mov	r0, r4
   19b00:	f7ff fe22 	bl	19748 <remove_timeout>
   19b04:	4816      	ldr	r0, [pc, #88]	; (19b60 <z_clock_announce+0x124>)
   19b06:	f7ff fcb3 	bl	19470 <z_spin_unlock_valid>
   19b0a:	b940      	cbnz	r0, 19b1e <z_clock_announce+0xe2>
   19b0c:	4915      	ldr	r1, [pc, #84]	; (19b64 <z_clock_announce+0x128>)
   19b0e:	4816      	ldr	r0, [pc, #88]	; (19b68 <z_clock_announce+0x12c>)
   19b10:	22a7      	movs	r2, #167	; 0xa7
   19b12:	f000 fc88 	bl	1a426 <printk>
   19b16:	21a7      	movs	r1, #167	; 0xa7
   19b18:	4812      	ldr	r0, [pc, #72]	; (19b64 <z_clock_announce+0x128>)
   19b1a:	f000 ff2a 	bl	1a972 <assert_post_action>
   19b1e:	f385 8811 	msr	BASEPRI, r5
   19b22:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19b26:	4620      	mov	r0, r4
   19b28:	68a3      	ldr	r3, [r4, #8]
   19b2a:	4798      	blx	r3
	__asm__ volatile(
   19b2c:	f04f 0320 	mov.w	r3, #32
   19b30:	f3ef 8511 	mrs	r5, BASEPRI
   19b34:	f383 8811 	msr	BASEPRI, r3
   19b38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b3c:	4808      	ldr	r0, [pc, #32]	; (19b60 <z_clock_announce+0x124>)
   19b3e:	f7ff fc89 	bl	19454 <z_spin_lock_valid>
   19b42:	b940      	cbnz	r0, 19b56 <z_clock_announce+0x11a>
   19b44:	4907      	ldr	r1, [pc, #28]	; (19b64 <z_clock_announce+0x128>)
   19b46:	4808      	ldr	r0, [pc, #32]	; (19b68 <z_clock_announce+0x12c>)
   19b48:	227c      	movs	r2, #124	; 0x7c
   19b4a:	f000 fc6c 	bl	1a426 <printk>
   19b4e:	217c      	movs	r1, #124	; 0x7c
   19b50:	4804      	ldr	r0, [pc, #16]	; (19b64 <z_clock_announce+0x128>)
   19b52:	f000 ff0e 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   19b56:	4802      	ldr	r0, [pc, #8]	; (19b60 <z_clock_announce+0x124>)
   19b58:	f7ff fc98 	bl	1948c <z_spin_lock_set_owner>
	return k;
   19b5c:	e790      	b.n	19a80 <z_clock_announce+0x44>
   19b5e:	bf00      	nop
   19b60:	2000b014 	.word	0x2000b014
   19b64:	0001f9c9 	.word	0x0001f9c9
   19b68:	0001f98f 	.word	0x0001f98f
   19b6c:	2000b010 	.word	0x2000b010
   19b70:	20008564 	.word	0x20008564
   19b74:	2000a608 	.word	0x2000a608

00019b78 <z_tick_get>:

int64_t z_tick_get(void)
{
   19b78:	b570      	push	{r4, r5, r6, lr}
   19b7a:	f04f 0320 	mov.w	r3, #32
   19b7e:	f3ef 8611 	mrs	r6, BASEPRI
   19b82:	f383 8811 	msr	BASEPRI, r3
   19b86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b8a:	4816      	ldr	r0, [pc, #88]	; (19be4 <z_tick_get+0x6c>)
   19b8c:	f7ff fc62 	bl	19454 <z_spin_lock_valid>
   19b90:	b940      	cbnz	r0, 19ba4 <z_tick_get+0x2c>
   19b92:	4915      	ldr	r1, [pc, #84]	; (19be8 <z_tick_get+0x70>)
   19b94:	4815      	ldr	r0, [pc, #84]	; (19bec <z_tick_get+0x74>)
   19b96:	227c      	movs	r2, #124	; 0x7c
   19b98:	f000 fc45 	bl	1a426 <printk>
   19b9c:	217c      	movs	r1, #124	; 0x7c
   19b9e:	4812      	ldr	r0, [pc, #72]	; (19be8 <z_tick_get+0x70>)
   19ba0:	f000 fee7 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   19ba4:	480f      	ldr	r0, [pc, #60]	; (19be4 <z_tick_get+0x6c>)
   19ba6:	f7ff fc71 	bl	1948c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   19baa:	f7f2 fb4f 	bl	c24c <z_clock_elapsed>
   19bae:	4b10      	ldr	r3, [pc, #64]	; (19bf0 <z_tick_get+0x78>)
   19bb0:	e9d3 4500 	ldrd	r4, r5, [r3]
   19bb4:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19bb6:	480b      	ldr	r0, [pc, #44]	; (19be4 <z_tick_get+0x6c>)
   19bb8:	f145 0500 	adc.w	r5, r5, #0
   19bbc:	f7ff fc58 	bl	19470 <z_spin_unlock_valid>
   19bc0:	b940      	cbnz	r0, 19bd4 <z_tick_get+0x5c>
   19bc2:	4909      	ldr	r1, [pc, #36]	; (19be8 <z_tick_get+0x70>)
   19bc4:	4809      	ldr	r0, [pc, #36]	; (19bec <z_tick_get+0x74>)
   19bc6:	22a7      	movs	r2, #167	; 0xa7
   19bc8:	f000 fc2d 	bl	1a426 <printk>
   19bcc:	21a7      	movs	r1, #167	; 0xa7
   19bce:	4806      	ldr	r0, [pc, #24]	; (19be8 <z_tick_get+0x70>)
   19bd0:	f000 fecf 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   19bd4:	f386 8811 	msr	BASEPRI, r6
   19bd8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19bdc:	4620      	mov	r0, r4
   19bde:	4629      	mov	r1, r5
   19be0:	bd70      	pop	{r4, r5, r6, pc}
   19be2:	bf00      	nop
   19be4:	2000b014 	.word	0x2000b014
   19be8:	0001f9c9 	.word	0x0001f9c9
   19bec:	0001f98f 	.word	0x0001f98f
   19bf0:	2000a608 	.word	0x2000a608

00019bf4 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   19bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   19bf8:	6884      	ldr	r4, [r0, #8]
{
   19bfa:	4605      	mov	r5, r0
   19bfc:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   19bfe:	b1b4      	cbz	r4, 19c2e <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   19c00:	7863      	ldrb	r3, [r4, #1]
   19c02:	2b01      	cmp	r3, #1
   19c04:	d145      	bne.n	19c92 <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   19c06:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   19c0a:	d10a      	bne.n	19c22 <signal_poll_event+0x2e>
   19c0c:	22e3      	movs	r2, #227	; 0xe3
   19c0e:	492d      	ldr	r1, [pc, #180]	; (19cc4 <signal_poll_event+0xd0>)
   19c10:	482d      	ldr	r0, [pc, #180]	; (19cc8 <signal_poll_event+0xd4>)
   19c12:	f000 fc08 	bl	1a426 <printk>
   19c16:	21e3      	movs	r1, #227	; 0xe3
   19c18:	482a      	ldr	r0, [pc, #168]	; (19cc4 <signal_poll_event+0xd0>)
   19c1a:	f000 feaa 	bl	1a972 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   19c1e:	7b7b      	ldrb	r3, [r7, #13]
   19c20:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   19c22:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   19c26:	f013 0302 	ands.w	r3, r3, #2
   19c2a:	d10a      	bne.n	19c42 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   19c2c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   19c2e:	2000      	movs	r0, #0
	event->state |= state;
   19c30:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   19c32:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   19c34:	f3c3 3104 	ubfx	r1, r3, #12, #5
   19c38:	430e      	orrs	r6, r1
   19c3a:	f366 3310 	bfi	r3, r6, #12, #5
   19c3e:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   19c40:	e00b      	b.n	19c5a <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   19c42:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   19c46:	f1b3 3fff 	cmp.w	r3, #4294967295
   19c4a:	bf08      	it	eq
   19c4c:	f112 0f02 	cmneq.w	r2, #2
   19c50:	d105      	bne.n	19c5e <signal_poll_event+0x6a>
		poller->is_polling = false;
   19c52:	2300      	movs	r3, #0
		return -EAGAIN;
   19c54:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   19c58:	7023      	strb	r3, [r4, #0]
}
   19c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   19c5e:	4638      	mov	r0, r7
   19c60:	f7fe fb30 	bl	182c4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   19c64:	2e08      	cmp	r6, #8
   19c66:	bf0c      	ite	eq
   19c68:	f06f 0303 	mvneq.w	r3, #3
   19c6c:	2300      	movne	r3, #0
   19c6e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19c70:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   19c74:	06db      	lsls	r3, r3, #27
   19c76:	d104      	bne.n	19c82 <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   19c78:	f854 8c54 	ldr.w	r8, [r4, #-84]
   19c7c:	f1b8 0f00 	cmp.w	r8, #0
   19c80:	d001      	beq.n	19c86 <signal_poll_event+0x92>
		poller->is_polling = false;
   19c82:	2300      	movs	r3, #0
   19c84:	e7d2      	b.n	19c2c <signal_poll_event+0x38>
	z_ready_thread(thread);
   19c86:	4638      	mov	r0, r7
   19c88:	f7fe fc36 	bl	184f8 <z_ready_thread>
		poller->is_polling = false;
   19c8c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   19c90:	e7cd      	b.n	19c2e <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   19c92:	2b02      	cmp	r3, #2
   19c94:	d1f5      	bne.n	19c82 <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   19c96:	7823      	ldrb	r3, [r4, #0]
   19c98:	2b00      	cmp	r3, #0
   19c9a:	d0c8      	beq.n	19c2e <signal_poll_event+0x3a>
   19c9c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   19ca0:	b177      	cbz	r7, 19cc0 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   19ca2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   19ca6:	f1a4 0910 	sub.w	r9, r4, #16
   19caa:	f104 0010 	add.w	r0, r4, #16
   19cae:	f7ff fe15 	bl	198dc <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   19cb2:	4649      	mov	r1, r9
   19cb4:	4638      	mov	r0, r7
		twork->poll_result = 0;
   19cb6:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   19cba:	f004 f872 	bl	1dda2 <k_work_submit_to_queue>
   19cbe:	e7e5      	b.n	19c8c <signal_poll_event+0x98>
		poller->is_polling = false;
   19cc0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   19cc2:	e7b4      	b.n	19c2e <signal_poll_event+0x3a>
   19cc4:	000228e1 	.word	0x000228e1
   19cc8:	0001f98f 	.word	0x0001f98f

00019ccc <register_events>:
{
   19ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   19cd0:	2600      	movs	r6, #0
{
   19cd2:	4614      	mov	r4, r2
   19cd4:	4681      	mov	r9, r0
	int events_registered = 0;
   19cd6:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19cd8:	f8df a188 	ldr.w	sl, [pc, #392]	; 19e64 <register_events+0x198>
   19cdc:	4f62      	ldr	r7, [pc, #392]	; (19e68 <register_events+0x19c>)
   19cde:	4d63      	ldr	r5, [pc, #396]	; (19e6c <register_events+0x1a0>)
{
   19ce0:	9100      	str	r1, [sp, #0]
   19ce2:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   19ce4:	9b00      	ldr	r3, [sp, #0]
   19ce6:	429e      	cmp	r6, r3
   19ce8:	db03      	blt.n	19cf2 <register_events+0x26>
}
   19cea:	4640      	mov	r0, r8
   19cec:	b003      	add	sp, #12
   19cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   19cf2:	f04f 0220 	mov.w	r2, #32
   19cf6:	f3ef 8b11 	mrs	fp, BASEPRI
   19cfa:	f382 8811 	msr	BASEPRI, r2
   19cfe:	f3bf 8f6f 	isb	sy
   19d02:	4650      	mov	r0, sl
   19d04:	f7ff fba6 	bl	19454 <z_spin_lock_valid>
   19d08:	b940      	cbnz	r0, 19d1c <register_events+0x50>
   19d0a:	4639      	mov	r1, r7
   19d0c:	4628      	mov	r0, r5
   19d0e:	227c      	movs	r2, #124	; 0x7c
   19d10:	f000 fb89 	bl	1a426 <printk>
   19d14:	217c      	movs	r1, #124	; 0x7c
   19d16:	4638      	mov	r0, r7
   19d18:	f000 fe2b 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   19d1c:	4650      	mov	r0, sl
   19d1e:	f7ff fbb5 	bl	1948c <z_spin_lock_set_owner>
	switch (event->type) {
   19d22:	f899 200d 	ldrb.w	r2, [r9, #13]
   19d26:	f002 020f 	and.w	r2, r2, #15
   19d2a:	2a04      	cmp	r2, #4
   19d2c:	d848      	bhi.n	19dc0 <register_events+0xf4>
   19d2e:	e8df f002 	tbb	[pc, r2]
   19d32:	402f      	.short	0x402f
   19d34:	4703      	.short	0x4703
   19d36:	2b          	.byte	0x2b
   19d37:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   19d38:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19d3c:	6892      	ldr	r2, [r2, #8]
   19d3e:	b33a      	cbz	r2, 19d90 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   19d40:	2102      	movs	r1, #2
	event->poller = NULL;
   19d42:	2000      	movs	r0, #0
	event->state |= state;
   19d44:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   19d48:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   19d4c:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   19d50:	ea41 010c 	orr.w	r1, r1, ip
   19d54:	f361 3210 	bfi	r2, r1, #12, #5
   19d58:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   19d5c:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d5e:	4650      	mov	r0, sl
   19d60:	f7ff fb86 	bl	19470 <z_spin_unlock_valid>
   19d64:	b940      	cbnz	r0, 19d78 <register_events+0xac>
   19d66:	4639      	mov	r1, r7
   19d68:	4628      	mov	r0, r5
   19d6a:	22a7      	movs	r2, #167	; 0xa7
   19d6c:	f000 fb5b 	bl	1a426 <printk>
   19d70:	21a7      	movs	r1, #167	; 0xa7
   19d72:	4638      	mov	r0, r7
   19d74:	f000 fdfd 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   19d78:	f38b 8811 	msr	BASEPRI, fp
   19d7c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   19d80:	3601      	adds	r6, #1
   19d82:	f109 0914 	add.w	r9, r9, #20
   19d86:	e7ad      	b.n	19ce4 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   19d88:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19d8c:	6812      	ldr	r2, [r2, #0]
   19d8e:	bb0a      	cbnz	r2, 19dd4 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   19d90:	9b01      	ldr	r3, [sp, #4]
   19d92:	2b00      	cmp	r3, #0
   19d94:	d1e3      	bne.n	19d5e <register_events+0x92>
   19d96:	7822      	ldrb	r2, [r4, #0]
   19d98:	2a00      	cmp	r2, #0
   19d9a:	d0e0      	beq.n	19d5e <register_events+0x92>
	switch (event->type) {
   19d9c:	f899 200d 	ldrb.w	r2, [r9, #13]
   19da0:	f002 020f 	and.w	r2, r2, #15
   19da4:	2a04      	cmp	r2, #4
   19da6:	d852      	bhi.n	19e4e <register_events+0x182>
   19da8:	e8df f002 	tbb	[pc, r2]
   19dac:	51164029 	.word	0x51164029
   19db0:	2e          	.byte	0x2e
   19db1:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   19db2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19db6:	6892      	ldr	r2, [r2, #8]
   19db8:	2a00      	cmp	r2, #0
   19dba:	d0e9      	beq.n	19d90 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   19dbc:	2101      	movs	r1, #1
   19dbe:	e7c0      	b.n	19d42 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   19dc0:	4628      	mov	r0, r5
   19dc2:	2254      	movs	r2, #84	; 0x54
   19dc4:	492a      	ldr	r1, [pc, #168]	; (19e70 <register_events+0x1a4>)
   19dc6:	f000 fb2e 	bl	1a426 <printk>
   19dca:	2154      	movs	r1, #84	; 0x54
   19dcc:	4828      	ldr	r0, [pc, #160]	; (19e70 <register_events+0x1a4>)
   19dce:	f000 fdd0 	bl	1a972 <assert_post_action>
		break;
   19dd2:	e7dd      	b.n	19d90 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   19dd4:	2104      	movs	r1, #4
   19dd6:	e7b4      	b.n	19d42 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   19dd8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19ddc:	b942      	cbnz	r2, 19df0 <register_events+0x124>
   19dde:	4628      	mov	r0, r5
   19de0:	4923      	ldr	r1, [pc, #140]	; (19e70 <register_events+0x1a4>)
   19de2:	227e      	movs	r2, #126	; 0x7e
   19de4:	f000 fb1f 	bl	1a426 <printk>
   19de8:	217e      	movs	r1, #126	; 0x7e
   19dea:	4821      	ldr	r0, [pc, #132]	; (19e70 <register_events+0x1a4>)
   19dec:	f000 fdc1 	bl	1a972 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   19df0:	4622      	mov	r2, r4
   19df2:	4649      	mov	r1, r9
   19df4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19df8:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   19dfa:	f003 ffe6 	bl	1ddca <add_event>
	event->poller = poller;
   19dfe:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   19e02:	f108 0801 	add.w	r8, r8, #1
   19e06:	e7aa      	b.n	19d5e <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   19e08:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19e0c:	b942      	cbnz	r2, 19e20 <register_events+0x154>
   19e0e:	4628      	mov	r0, r5
   19e10:	4917      	ldr	r1, [pc, #92]	; (19e70 <register_events+0x1a4>)
   19e12:	2282      	movs	r2, #130	; 0x82
   19e14:	f000 fb07 	bl	1a426 <printk>
   19e18:	2182      	movs	r1, #130	; 0x82
   19e1a:	4815      	ldr	r0, [pc, #84]	; (19e70 <register_events+0x1a4>)
   19e1c:	f000 fda9 	bl	1a972 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   19e20:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19e24:	4622      	mov	r2, r4
   19e26:	4649      	mov	r1, r9
   19e28:	3014      	adds	r0, #20
   19e2a:	e7e6      	b.n	19dfa <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   19e2c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19e30:	b942      	cbnz	r2, 19e44 <register_events+0x178>
   19e32:	4628      	mov	r0, r5
   19e34:	490e      	ldr	r1, [pc, #56]	; (19e70 <register_events+0x1a4>)
   19e36:	2286      	movs	r2, #134	; 0x86
   19e38:	f000 faf5 	bl	1a426 <printk>
   19e3c:	2186      	movs	r1, #134	; 0x86
   19e3e:	480c      	ldr	r0, [pc, #48]	; (19e70 <register_events+0x1a4>)
   19e40:	f000 fd97 	bl	1a972 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   19e44:	4622      	mov	r2, r4
   19e46:	4649      	mov	r1, r9
   19e48:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19e4c:	e7d5      	b.n	19dfa <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   19e4e:	4628      	mov	r0, r5
   19e50:	228d      	movs	r2, #141	; 0x8d
   19e52:	4907      	ldr	r1, [pc, #28]	; (19e70 <register_events+0x1a4>)
   19e54:	f000 fae7 	bl	1a426 <printk>
   19e58:	218d      	movs	r1, #141	; 0x8d
   19e5a:	4805      	ldr	r0, [pc, #20]	; (19e70 <register_events+0x1a4>)
   19e5c:	f000 fd89 	bl	1a972 <assert_post_action>
		break;
   19e60:	e7cd      	b.n	19dfe <register_events+0x132>
   19e62:	bf00      	nop
   19e64:	2000b018 	.word	0x2000b018
   19e68:	0001f9c9 	.word	0x0001f9c9
   19e6c:	0001f98f 	.word	0x0001f98f
   19e70:	000228e1 	.word	0x000228e1

00019e74 <clear_event_registrations>:
{
   19e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e78:	2414      	movs	r4, #20
   19e7a:	4617      	mov	r7, r2
	while (num_events--) {
   19e7c:	460e      	mov	r6, r1
   19e7e:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   19e82:	4d3d      	ldr	r5, [pc, #244]	; (19f78 <clear_event_registrations+0x104>)
   19e84:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 19f7c <clear_event_registrations+0x108>
   19e88:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 19f80 <clear_event_registrations+0x10c>
	while (num_events--) {
   19e8c:	b90e      	cbnz	r6, 19e92 <clear_event_registrations+0x1e>
}
   19e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   19e92:	2300      	movs	r3, #0
   19e94:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   19e98:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   19e9c:	f1a4 0a14 	sub.w	sl, r4, #20
   19ea0:	f003 030f 	and.w	r3, r3, #15
   19ea4:	2b04      	cmp	r3, #4
   19ea6:	d831      	bhi.n	19f0c <clear_event_registrations+0x98>
   19ea8:	e8df f003 	tbb	[pc, r3]
   19eac:	30032539 	.word	0x30032539
   19eb0:	1a          	.byte	0x1a
   19eb1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   19eb2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19eb6:	b943      	cbnz	r3, 19eca <clear_event_registrations+0x56>
   19eb8:	4629      	mov	r1, r5
   19eba:	229d      	movs	r2, #157	; 0x9d
   19ebc:	4640      	mov	r0, r8
   19ebe:	f000 fab2 	bl	1a426 <printk>
   19ec2:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   19ec4:	4628      	mov	r0, r5
   19ec6:	f000 fd54 	bl	1a972 <assert_post_action>
	return node->next != NULL;
   19eca:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   19ece:	b333      	cbz	r3, 19f1e <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   19ed0:	f854 2c10 	ldr.w	r2, [r4, #-16]
   19ed4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19ed6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19ed8:	2300      	movs	r3, #0
	node->prev = NULL;
   19eda:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   19ede:	e01e      	b.n	19f1e <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   19ee0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19ee4:	2b00      	cmp	r3, #0
   19ee6:	d1f0      	bne.n	19eca <clear_event_registrations+0x56>
   19ee8:	4629      	mov	r1, r5
   19eea:	22a1      	movs	r2, #161	; 0xa1
   19eec:	4640      	mov	r0, r8
   19eee:	f000 fa9a 	bl	1a426 <printk>
   19ef2:	21a1      	movs	r1, #161	; 0xa1
   19ef4:	e7e6      	b.n	19ec4 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   19ef6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19efa:	2b00      	cmp	r3, #0
   19efc:	d1e5      	bne.n	19eca <clear_event_registrations+0x56>
   19efe:	4629      	mov	r1, r5
   19f00:	22a5      	movs	r2, #165	; 0xa5
   19f02:	4640      	mov	r0, r8
   19f04:	f000 fa8f 	bl	1a426 <printk>
   19f08:	21a5      	movs	r1, #165	; 0xa5
   19f0a:	e7db      	b.n	19ec4 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   19f0c:	4629      	mov	r1, r5
   19f0e:	4640      	mov	r0, r8
   19f10:	22ac      	movs	r2, #172	; 0xac
   19f12:	f000 fa88 	bl	1a426 <printk>
   19f16:	21ac      	movs	r1, #172	; 0xac
   19f18:	4628      	mov	r0, r5
   19f1a:	f000 fd2a 	bl	1a972 <assert_post_action>
   19f1e:	4648      	mov	r0, r9
   19f20:	f7ff faa6 	bl	19470 <z_spin_unlock_valid>
   19f24:	b940      	cbnz	r0, 19f38 <clear_event_registrations+0xc4>
   19f26:	4640      	mov	r0, r8
   19f28:	4916      	ldr	r1, [pc, #88]	; (19f84 <clear_event_registrations+0x110>)
   19f2a:	22a7      	movs	r2, #167	; 0xa7
   19f2c:	f000 fa7b 	bl	1a426 <printk>
   19f30:	21a7      	movs	r1, #167	; 0xa7
   19f32:	4814      	ldr	r0, [pc, #80]	; (19f84 <clear_event_registrations+0x110>)
   19f34:	f000 fd1d 	bl	1a972 <assert_post_action>
   19f38:	f387 8811 	msr	BASEPRI, r7
   19f3c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19f40:	f04f 0320 	mov.w	r3, #32
   19f44:	f3ef 8711 	mrs	r7, BASEPRI
   19f48:	f383 8811 	msr	BASEPRI, r3
   19f4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f50:	4648      	mov	r0, r9
   19f52:	f7ff fa7f 	bl	19454 <z_spin_lock_valid>
   19f56:	b940      	cbnz	r0, 19f6a <clear_event_registrations+0xf6>
   19f58:	4640      	mov	r0, r8
   19f5a:	490a      	ldr	r1, [pc, #40]	; (19f84 <clear_event_registrations+0x110>)
   19f5c:	227c      	movs	r2, #124	; 0x7c
   19f5e:	f000 fa62 	bl	1a426 <printk>
   19f62:	217c      	movs	r1, #124	; 0x7c
   19f64:	4807      	ldr	r0, [pc, #28]	; (19f84 <clear_event_registrations+0x110>)
   19f66:	f000 fd04 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   19f6a:	4648      	mov	r0, r9
   19f6c:	f7ff fa8e 	bl	1948c <z_spin_lock_set_owner>
	return k;
   19f70:	4654      	mov	r4, sl
   19f72:	3e01      	subs	r6, #1
   19f74:	e78a      	b.n	19e8c <clear_event_registrations+0x18>
   19f76:	bf00      	nop
   19f78:	000228e1 	.word	0x000228e1
   19f7c:	0001f98f 	.word	0x0001f98f
   19f80:	2000b018 	.word	0x2000b018
   19f84:	0001f9c9 	.word	0x0001f9c9

00019f88 <k_poll_event_init>:
{
   19f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f8a:	4605      	mov	r5, r0
   19f8c:	460f      	mov	r7, r1
   19f8e:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   19f90:	4614      	mov	r4, r2
   19f92:	b142      	cbz	r2, 19fa6 <k_poll_event_init+0x1e>
   19f94:	4915      	ldr	r1, [pc, #84]	; (19fec <k_poll_event_init+0x64>)
   19f96:	4816      	ldr	r0, [pc, #88]	; (19ff0 <k_poll_event_init+0x68>)
   19f98:	222d      	movs	r2, #45	; 0x2d
   19f9a:	f000 fa44 	bl	1a426 <printk>
   19f9e:	212d      	movs	r1, #45	; 0x2d
   19fa0:	4812      	ldr	r0, [pc, #72]	; (19fec <k_poll_event_init+0x64>)
   19fa2:	f000 fce6 	bl	1a972 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   19fa6:	2f0f      	cmp	r7, #15
   19fa8:	d908      	bls.n	19fbc <k_poll_event_init+0x34>
   19faa:	4910      	ldr	r1, [pc, #64]	; (19fec <k_poll_event_init+0x64>)
   19fac:	4810      	ldr	r0, [pc, #64]	; (19ff0 <k_poll_event_init+0x68>)
   19fae:	222f      	movs	r2, #47	; 0x2f
   19fb0:	f000 fa39 	bl	1a426 <printk>
   19fb4:	212f      	movs	r1, #47	; 0x2f
   19fb6:	480d      	ldr	r0, [pc, #52]	; (19fec <k_poll_event_init+0x64>)
   19fb8:	f000 fcdb 	bl	1a972 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   19fbc:	b946      	cbnz	r6, 19fd0 <k_poll_event_init+0x48>
   19fbe:	490b      	ldr	r1, [pc, #44]	; (19fec <k_poll_event_init+0x64>)
   19fc0:	480b      	ldr	r0, [pc, #44]	; (19ff0 <k_poll_event_init+0x68>)
   19fc2:	2230      	movs	r2, #48	; 0x30
   19fc4:	f000 fa2f 	bl	1a426 <printk>
   19fc8:	2130      	movs	r1, #48	; 0x30
   19fca:	4808      	ldr	r0, [pc, #32]	; (19fec <k_poll_event_init+0x64>)
   19fcc:	f000 fcd1 	bl	1a972 <assert_post_action>
	event->poller = NULL;
   19fd0:	2300      	movs	r3, #0
	event->type = type;
   19fd2:	0464      	lsls	r4, r4, #17
   19fd4:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   19fd6:	60ab      	str	r3, [r5, #8]
	event->type = type;
   19fd8:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   19fdc:	7b2b      	ldrb	r3, [r5, #12]
   19fde:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   19fe2:	433c      	orrs	r4, r7
   19fe4:	431c      	orrs	r4, r3
	event->obj = obj;
   19fe6:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   19fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19fec:	000228e1 	.word	0x000228e1
   19ff0:	0001f98f 	.word	0x0001f98f

00019ff4 <z_impl_k_poll>:
{
   19ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19ff8:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   19ffa:	4b64      	ldr	r3, [pc, #400]	; (1a18c <z_impl_k_poll+0x198>)
{
   19ffc:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   19ffe:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1a000:	2301      	movs	r3, #1
{
   1a002:	4688      	mov	r8, r1
   1a004:	4616      	mov	r6, r2
   1a006:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1a008:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1a00c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1a010:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1a014:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a018:	b153      	cbz	r3, 1a030 <z_impl_k_poll+0x3c>
   1a01a:	495d      	ldr	r1, [pc, #372]	; (1a190 <z_impl_k_poll+0x19c>)
   1a01c:	485d      	ldr	r0, [pc, #372]	; (1a194 <z_impl_k_poll+0x1a0>)
   1a01e:	f44f 7282 	mov.w	r2, #260	; 0x104
   1a022:	f000 fa00 	bl	1a426 <printk>
   1a026:	f44f 7182 	mov.w	r1, #260	; 0x104
   1a02a:	4859      	ldr	r0, [pc, #356]	; (1a190 <z_impl_k_poll+0x19c>)
   1a02c:	f000 fca1 	bl	1a972 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1a030:	b954      	cbnz	r4, 1a048 <z_impl_k_poll+0x54>
   1a032:	4957      	ldr	r1, [pc, #348]	; (1a190 <z_impl_k_poll+0x19c>)
   1a034:	4857      	ldr	r0, [pc, #348]	; (1a194 <z_impl_k_poll+0x1a0>)
   1a036:	f240 1205 	movw	r2, #261	; 0x105
   1a03a:	f000 f9f4 	bl	1a426 <printk>
   1a03e:	f240 1105 	movw	r1, #261	; 0x105
   1a042:	4853      	ldr	r0, [pc, #332]	; (1a190 <z_impl_k_poll+0x19c>)
   1a044:	f000 fc95 	bl	1a972 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1a048:	f1b8 0f00 	cmp.w	r8, #0
   1a04c:	da0a      	bge.n	1a064 <z_impl_k_poll+0x70>
   1a04e:	4950      	ldr	r1, [pc, #320]	; (1a190 <z_impl_k_poll+0x19c>)
   1a050:	4850      	ldr	r0, [pc, #320]	; (1a194 <z_impl_k_poll+0x1a0>)
   1a052:	f44f 7283 	mov.w	r2, #262	; 0x106
   1a056:	f000 f9e6 	bl	1a426 <printk>
   1a05a:	f44f 7183 	mov.w	r1, #262	; 0x106
   1a05e:	484c      	ldr	r0, [pc, #304]	; (1a190 <z_impl_k_poll+0x19c>)
   1a060:	f000 fc87 	bl	1a972 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1a064:	ea56 0305 	orrs.w	r3, r6, r5
   1a068:	bf0c      	ite	eq
   1a06a:	2301      	moveq	r3, #1
   1a06c:	2300      	movne	r3, #0
   1a06e:	4641      	mov	r1, r8
   1a070:	464a      	mov	r2, r9
   1a072:	4620      	mov	r0, r4
   1a074:	f7ff fe2a 	bl	19ccc <register_events>
   1a078:	4680      	mov	r8, r0
   1a07a:	f04f 0320 	mov.w	r3, #32
   1a07e:	f3ef 8911 	mrs	r9, BASEPRI
   1a082:	f383 8811 	msr	BASEPRI, r3
   1a086:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a08a:	4843      	ldr	r0, [pc, #268]	; (1a198 <z_impl_k_poll+0x1a4>)
   1a08c:	f7ff f9e2 	bl	19454 <z_spin_lock_valid>
   1a090:	b940      	cbnz	r0, 1a0a4 <z_impl_k_poll+0xb0>
   1a092:	4942      	ldr	r1, [pc, #264]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a094:	483f      	ldr	r0, [pc, #252]	; (1a194 <z_impl_k_poll+0x1a0>)
   1a096:	227c      	movs	r2, #124	; 0x7c
   1a098:	f000 f9c5 	bl	1a426 <printk>
   1a09c:	217c      	movs	r1, #124	; 0x7c
   1a09e:	483f      	ldr	r0, [pc, #252]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a0a0:	f000 fc67 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a0a4:	483c      	ldr	r0, [pc, #240]	; (1a198 <z_impl_k_poll+0x1a4>)
   1a0a6:	f7ff f9f1 	bl	1948c <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1a0aa:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1a0ae:	b9d3      	cbnz	r3, 1a0e6 <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1a0b0:	4620      	mov	r0, r4
   1a0b2:	464a      	mov	r2, r9
   1a0b4:	4641      	mov	r1, r8
   1a0b6:	f7ff fedd 	bl	19e74 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0ba:	4837      	ldr	r0, [pc, #220]	; (1a198 <z_impl_k_poll+0x1a4>)
   1a0bc:	f7ff f9d8 	bl	19470 <z_spin_unlock_valid>
   1a0c0:	b940      	cbnz	r0, 1a0d4 <z_impl_k_poll+0xe0>
   1a0c2:	4936      	ldr	r1, [pc, #216]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a0c4:	4833      	ldr	r0, [pc, #204]	; (1a194 <z_impl_k_poll+0x1a0>)
   1a0c6:	22a7      	movs	r2, #167	; 0xa7
   1a0c8:	f000 f9ad 	bl	1a426 <printk>
   1a0cc:	21a7      	movs	r1, #167	; 0xa7
   1a0ce:	4833      	ldr	r0, [pc, #204]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a0d0:	f000 fc4f 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1a0d4:	f389 8811 	msr	BASEPRI, r9
   1a0d8:	f3bf 8f6f 	isb	sy
		return 0;
   1a0dc:	2500      	movs	r5, #0
}
   1a0de:	4628      	mov	r0, r5
   1a0e0:	b005      	add	sp, #20
   1a0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1a0e6:	2300      	movs	r3, #0
   1a0e8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a0ec:	ea56 0305 	orrs.w	r3, r6, r5
   1a0f0:	d113      	bne.n	1a11a <z_impl_k_poll+0x126>
   1a0f2:	4829      	ldr	r0, [pc, #164]	; (1a198 <z_impl_k_poll+0x1a4>)
   1a0f4:	f7ff f9bc 	bl	19470 <z_spin_unlock_valid>
   1a0f8:	b940      	cbnz	r0, 1a10c <z_impl_k_poll+0x118>
   1a0fa:	4928      	ldr	r1, [pc, #160]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a0fc:	4825      	ldr	r0, [pc, #148]	; (1a194 <z_impl_k_poll+0x1a0>)
   1a0fe:	22a7      	movs	r2, #167	; 0xa7
   1a100:	f000 f991 	bl	1a426 <printk>
   1a104:	21a7      	movs	r1, #167	; 0xa7
   1a106:	4825      	ldr	r0, [pc, #148]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a108:	f000 fc33 	bl	1a972 <assert_post_action>
   1a10c:	f389 8811 	msr	BASEPRI, r9
   1a110:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1a114:	f06f 050a 	mvn.w	r5, #10
   1a118:	e7e1      	b.n	1a0de <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a11a:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a11e:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a120:	4649      	mov	r1, r9
   1a122:	481d      	ldr	r0, [pc, #116]	; (1a198 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a124:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a128:	f7fe fd50 	bl	18bcc <z_pend_curr>
   1a12c:	4605      	mov	r5, r0
	__asm__ volatile(
   1a12e:	f04f 0320 	mov.w	r3, #32
   1a132:	f3ef 8611 	mrs	r6, BASEPRI
   1a136:	f383 8811 	msr	BASEPRI, r3
   1a13a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a13e:	4816      	ldr	r0, [pc, #88]	; (1a198 <z_impl_k_poll+0x1a4>)
   1a140:	f7ff f988 	bl	19454 <z_spin_lock_valid>
   1a144:	b940      	cbnz	r0, 1a158 <z_impl_k_poll+0x164>
   1a146:	4915      	ldr	r1, [pc, #84]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a148:	4812      	ldr	r0, [pc, #72]	; (1a194 <z_impl_k_poll+0x1a0>)
   1a14a:	227c      	movs	r2, #124	; 0x7c
   1a14c:	f000 f96b 	bl	1a426 <printk>
   1a150:	217c      	movs	r1, #124	; 0x7c
   1a152:	4812      	ldr	r0, [pc, #72]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a154:	f000 fc0d 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a158:	480f      	ldr	r0, [pc, #60]	; (1a198 <z_impl_k_poll+0x1a4>)
   1a15a:	f7ff f997 	bl	1948c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1a15e:	4620      	mov	r0, r4
   1a160:	4632      	mov	r2, r6
   1a162:	4641      	mov	r1, r8
   1a164:	f7ff fe86 	bl	19e74 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a168:	480b      	ldr	r0, [pc, #44]	; (1a198 <z_impl_k_poll+0x1a4>)
   1a16a:	f7ff f981 	bl	19470 <z_spin_unlock_valid>
   1a16e:	b940      	cbnz	r0, 1a182 <z_impl_k_poll+0x18e>
   1a170:	490a      	ldr	r1, [pc, #40]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a172:	4808      	ldr	r0, [pc, #32]	; (1a194 <z_impl_k_poll+0x1a0>)
   1a174:	22a7      	movs	r2, #167	; 0xa7
   1a176:	f000 f956 	bl	1a426 <printk>
   1a17a:	21a7      	movs	r1, #167	; 0xa7
   1a17c:	4807      	ldr	r0, [pc, #28]	; (1a19c <z_impl_k_poll+0x1a8>)
   1a17e:	f000 fbf8 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1a182:	f386 8811 	msr	BASEPRI, r6
   1a186:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1a18a:	e7a8      	b.n	1a0de <z_impl_k_poll+0xea>
   1a18c:	2000afc4 	.word	0x2000afc4
   1a190:	000228e1 	.word	0x000228e1
   1a194:	0001f98f 	.word	0x0001f98f
   1a198:	2000b018 	.word	0x2000b018
   1a19c:	0001f9c9 	.word	0x0001f9c9

0001a1a0 <z_impl_k_poll_signal_raise>:
{
   1a1a0:	b570      	push	{r4, r5, r6, lr}
   1a1a2:	4604      	mov	r4, r0
   1a1a4:	460d      	mov	r5, r1
	__asm__ volatile(
   1a1a6:	f04f 0320 	mov.w	r3, #32
   1a1aa:	f3ef 8611 	mrs	r6, BASEPRI
   1a1ae:	f383 8811 	msr	BASEPRI, r3
   1a1b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a1b6:	481c      	ldr	r0, [pc, #112]	; (1a228 <z_impl_k_poll_signal_raise+0x88>)
   1a1b8:	f7ff f94c 	bl	19454 <z_spin_lock_valid>
   1a1bc:	b940      	cbnz	r0, 1a1d0 <z_impl_k_poll_signal_raise+0x30>
   1a1be:	491b      	ldr	r1, [pc, #108]	; (1a22c <z_impl_k_poll_signal_raise+0x8c>)
   1a1c0:	481b      	ldr	r0, [pc, #108]	; (1a230 <z_impl_k_poll_signal_raise+0x90>)
   1a1c2:	227c      	movs	r2, #124	; 0x7c
   1a1c4:	f000 f92f 	bl	1a426 <printk>
   1a1c8:	217c      	movs	r1, #124	; 0x7c
   1a1ca:	4818      	ldr	r0, [pc, #96]	; (1a22c <z_impl_k_poll_signal_raise+0x8c>)
   1a1cc:	f000 fbd1 	bl	1a972 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1d0:	4815      	ldr	r0, [pc, #84]	; (1a228 <z_impl_k_poll_signal_raise+0x88>)
   1a1d2:	f7ff f95b 	bl	1948c <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1a1d6:	2101      	movs	r1, #1
	return list->head == list;
   1a1d8:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1a1da:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a1dc:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1a1de:	60a1      	str	r1, [r4, #8]
   1a1e0:	d112      	bne.n	1a208 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1e2:	4811      	ldr	r0, [pc, #68]	; (1a228 <z_impl_k_poll_signal_raise+0x88>)
   1a1e4:	f7ff f944 	bl	19470 <z_spin_unlock_valid>
   1a1e8:	b940      	cbnz	r0, 1a1fc <z_impl_k_poll_signal_raise+0x5c>
   1a1ea:	4910      	ldr	r1, [pc, #64]	; (1a22c <z_impl_k_poll_signal_raise+0x8c>)
   1a1ec:	4810      	ldr	r0, [pc, #64]	; (1a230 <z_impl_k_poll_signal_raise+0x90>)
   1a1ee:	22a7      	movs	r2, #167	; 0xa7
   1a1f0:	f000 f919 	bl	1a426 <printk>
   1a1f4:	21a7      	movs	r1, #167	; 0xa7
   1a1f6:	480d      	ldr	r0, [pc, #52]	; (1a22c <z_impl_k_poll_signal_raise+0x8c>)
   1a1f8:	f000 fbbb 	bl	1a972 <assert_post_action>
	__asm__ volatile(
   1a1fc:	f386 8811 	msr	BASEPRI, r6
   1a200:	f3bf 8f6f 	isb	sy
		return 0;
   1a204:	2400      	movs	r4, #0
   1a206:	e00d      	b.n	1a224 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1a208:	e9d0 3200 	ldrd	r3, r2, [r0]
   1a20c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a20e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a210:	2300      	movs	r3, #0
	node->prev = NULL;
   1a212:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a216:	f7ff fced 	bl	19bf4 <signal_poll_event>
	z_reschedule(&lock, key);
   1a21a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a21c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1a21e:	4802      	ldr	r0, [pc, #8]	; (1a228 <z_impl_k_poll_signal_raise+0x88>)
   1a220:	f7fd ff96 	bl	18150 <z_reschedule>
}
   1a224:	4620      	mov	r0, r4
   1a226:	bd70      	pop	{r4, r5, r6, pc}
   1a228:	2000b018 	.word	0x2000b018
   1a22c:	0001f9c9 	.word	0x0001f9c9
   1a230:	0001f98f 	.word	0x0001f98f

0001a234 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1a234:	2803      	cmp	r0, #3
{
   1a236:	b538      	push	{r3, r4, r5, lr}
   1a238:	4604      	mov	r4, r0
   1a23a:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1a23c:	d901      	bls.n	1a242 <k_aligned_alloc+0xe>
   1a23e:	0783      	lsls	r3, r0, #30
   1a240:	d008      	beq.n	1a254 <k_aligned_alloc+0x20>
   1a242:	490e      	ldr	r1, [pc, #56]	; (1a27c <k_aligned_alloc+0x48>)
   1a244:	480e      	ldr	r0, [pc, #56]	; (1a280 <k_aligned_alloc+0x4c>)
   1a246:	223e      	movs	r2, #62	; 0x3e
   1a248:	f000 f8ed 	bl	1a426 <printk>
   1a24c:	213e      	movs	r1, #62	; 0x3e
   1a24e:	480b      	ldr	r0, [pc, #44]	; (1a27c <k_aligned_alloc+0x48>)
   1a250:	f000 fb8f 	bl	1a972 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1a254:	1e63      	subs	r3, r4, #1
   1a256:	4223      	tst	r3, r4
   1a258:	d008      	beq.n	1a26c <k_aligned_alloc+0x38>
   1a25a:	4908      	ldr	r1, [pc, #32]	; (1a27c <k_aligned_alloc+0x48>)
   1a25c:	4808      	ldr	r0, [pc, #32]	; (1a280 <k_aligned_alloc+0x4c>)
   1a25e:	2242      	movs	r2, #66	; 0x42
   1a260:	f000 f8e1 	bl	1a426 <printk>
   1a264:	2142      	movs	r1, #66	; 0x42
   1a266:	4805      	ldr	r0, [pc, #20]	; (1a27c <k_aligned_alloc+0x48>)
   1a268:	f000 fb83 	bl	1a972 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a26c:	462a      	mov	r2, r5
   1a26e:	4621      	mov	r1, r4
}
   1a270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a274:	4803      	ldr	r0, [pc, #12]	; (1a284 <k_aligned_alloc+0x50>)
   1a276:	f003 bde8 	b.w	1de4a <z_heap_aligned_alloc>
   1a27a:	bf00      	nop
   1a27c:	00022902 	.word	0x00022902
   1a280:	0001f98f 	.word	0x0001f98f
   1a284:	2000864c 	.word	0x2000864c

0001a288 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1a288:	b538      	push	{r3, r4, r5, lr}
   1a28a:	4604      	mov	r4, r0
   1a28c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1a28e:	f003 fcef 	bl	1dc70 <k_is_in_isr>
   1a292:	b958      	cbnz	r0, 1a2ac <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1a294:	4b07      	ldr	r3, [pc, #28]	; (1a2b4 <z_thread_aligned_alloc+0x2c>)
   1a296:	689b      	ldr	r3, [r3, #8]
   1a298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1a29c:	b143      	cbz	r3, 1a2b0 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1a29e:	462a      	mov	r2, r5
   1a2a0:	4621      	mov	r1, r4
   1a2a2:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1a2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1a2a8:	f003 bdcf 	b.w	1de4a <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1a2ac:	4b02      	ldr	r3, [pc, #8]	; (1a2b8 <z_thread_aligned_alloc+0x30>)
   1a2ae:	e7f6      	b.n	1a29e <z_thread_aligned_alloc+0x16>
}
   1a2b0:	bd38      	pop	{r3, r4, r5, pc}
   1a2b2:	bf00      	nop
   1a2b4:	2000afc4 	.word	0x2000afc4
   1a2b8:	2000864c 	.word	0x2000864c

0001a2bc <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   1a2bc:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1a2be:	2003      	movs	r0, #3
   1a2c0:	f7fc b9ee 	b.w	166a0 <dk_set_led>

0001a2c4 <_ZN13deviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   1a2c4:	f7ef b992 	b.w	95ec <_ZN13deviceManager8initScanEv>

0001a2c8 <_ZN13deviceManager14checkAddressesEPcS0_>:
	}
}

bool deviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   1a2c8:	2300      	movs	r3, #0
{
   1a2ca:	b530      	push	{r4, r5, lr}
   1a2cc:	1e42      	subs	r2, r0, #1
   1a2ce:	3901      	subs	r1, #1
   1a2d0:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   1a2d2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1a2d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a2da:	42a5      	cmp	r5, r4
		{
			cnt++;
   1a2dc:	bf04      	itt	eq
   1a2de:	3301      	addeq	r3, #1
   1a2e0:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   1a2e2:	4282      	cmp	r2, r0
   1a2e4:	d1f5      	bne.n	1a2d2 <_ZN13deviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   1a2e6:	3b11      	subs	r3, #17
   1a2e8:	4258      	negs	r0, r3
   1a2ea:	4158      	adcs	r0, r3
   1a2ec:	bd30      	pop	{r4, r5, pc}

0001a2ee <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1a2ee:	f001 bd92 	b.w	1be16 <bt_conn_get_dst>

0001a2f2 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1a2f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1a2f4:	2364      	movs	r3, #100	; 0x64
{
   1a2f6:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1a2f8:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1a2fa:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1a2fc:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1a300:	b111      	cbz	r1, 1a308 <u8_to_dec+0x16>
   1a302:	3d01      	subs	r5, #1
   1a304:	d101      	bne.n	1a30a <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1a306:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1a308:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1a30a:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a30e:	429a      	cmp	r2, r3
		digit = value / divisor;
   1a310:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a312:	d202      	bcs.n	1a31a <u8_to_dec+0x28>
   1a314:	2b01      	cmp	r3, #1
   1a316:	d000      	beq.n	1a31a <u8_to_dec+0x28>
   1a318:	b130      	cbz	r0, 1a328 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1a31a:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1a31c:	3901      	subs	r1, #1
			num_digits++;
   1a31e:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1a320:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1a324:	b2c9      	uxtb	r1, r1
			num_digits++;
   1a326:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1a328:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1a32c:	fbb3 f3fc 	udiv	r3, r3, ip
   1a330:	b2d2      	uxtb	r2, r2
   1a332:	e7e5      	b.n	1a300 <u8_to_dec+0xe>

0001a334 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1a334:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a338:	b2db      	uxtb	r3, r3
   1a33a:	2b09      	cmp	r3, #9
   1a33c:	d802      	bhi.n	1a344 <char2hex+0x10>
		*x = c - '0';
   1a33e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1a340:	2000      	movs	r0, #0
   1a342:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1a344:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a348:	2b05      	cmp	r3, #5
   1a34a:	d802      	bhi.n	1a352 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1a34c:	3857      	subs	r0, #87	; 0x57
   1a34e:	7008      	strb	r0, [r1, #0]
   1a350:	e7f6      	b.n	1a340 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1a352:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a356:	2b05      	cmp	r3, #5
   1a358:	d801      	bhi.n	1a35e <char2hex+0x2a>
		*x = c - 'A' + 10;
   1a35a:	3837      	subs	r0, #55	; 0x37
   1a35c:	e7f7      	b.n	1a34e <char2hex+0x1a>
		return -EINVAL;
   1a35e:	f06f 0015 	mvn.w	r0, #21
}
   1a362:	4770      	bx	lr

0001a364 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1a364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a366:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1a368:	f001 0001 	and.w	r0, r1, #1
   1a36c:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1a370:	429d      	cmp	r5, r3
   1a372:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1a376:	d903      	bls.n	1a380 <hex2bin+0x1c>
		return 0;
   1a378:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1a37a:	4628      	mov	r0, r5
   1a37c:	b003      	add	sp, #12
   1a37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1a380:	b158      	cbz	r0, 1a39a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1a382:	7820      	ldrb	r0, [r4, #0]
   1a384:	f10d 0107 	add.w	r1, sp, #7
   1a388:	f7ff ffd4 	bl	1a334 <char2hex>
   1a38c:	2800      	cmp	r0, #0
   1a38e:	dbf3      	blt.n	1a378 <hex2bin+0x14>
		buf[0] = dec;
   1a390:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1a394:	3401      	adds	r4, #1
		buf[0] = dec;
   1a396:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a39a:	3401      	adds	r4, #1
   1a39c:	4416      	add	r6, r2
   1a39e:	42b2      	cmp	r2, r6
   1a3a0:	d0eb      	beq.n	1a37a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1a3a2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1a3a6:	f10d 0107 	add.w	r1, sp, #7
   1a3aa:	f7ff ffc3 	bl	1a334 <char2hex>
   1a3ae:	2800      	cmp	r0, #0
   1a3b0:	dbe2      	blt.n	1a378 <hex2bin+0x14>
		buf[i] = dec << 4;
   1a3b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a3b6:	011b      	lsls	r3, r3, #4
   1a3b8:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1a3ba:	f814 0b02 	ldrb.w	r0, [r4], #2
   1a3be:	f7ff ffb9 	bl	1a334 <char2hex>
   1a3c2:	2800      	cmp	r0, #0
   1a3c4:	dbd8      	blt.n	1a378 <hex2bin+0x14>
		buf[i] += dec;
   1a3c6:	7813      	ldrb	r3, [r2, #0]
   1a3c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1a3cc:	440b      	add	r3, r1
   1a3ce:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a3d2:	e7e4      	b.n	1a39e <hex2bin+0x3a>

0001a3d4 <sys_notify_validate>:
	if (notify == NULL) {
   1a3d4:	4603      	mov	r3, r0
   1a3d6:	b140      	cbz	r0, 1a3ea <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a3d8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a3da:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1a3de:	2a02      	cmp	r2, #2
   1a3e0:	d006      	beq.n	1a3f0 <sys_notify_validate+0x1c>
   1a3e2:	2a03      	cmp	r2, #3
   1a3e4:	d004      	beq.n	1a3f0 <sys_notify_validate+0x1c>
   1a3e6:	2a01      	cmp	r2, #1
   1a3e8:	d005      	beq.n	1a3f6 <sys_notify_validate+0x22>
		return -EINVAL;
   1a3ea:	f06f 0015 	mvn.w	r0, #21
}
   1a3ee:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1a3f0:	681a      	ldr	r2, [r3, #0]
   1a3f2:	2a00      	cmp	r2, #0
   1a3f4:	d0f9      	beq.n	1a3ea <sys_notify_validate+0x16>
		notify->result = 0;
   1a3f6:	2000      	movs	r0, #0
   1a3f8:	6098      	str	r0, [r3, #8]
   1a3fa:	4770      	bx	lr

0001a3fc <arch_printk_char_out>:
}
   1a3fc:	2000      	movs	r0, #0
   1a3fe:	4770      	bx	lr

0001a400 <str_out>:
{
   1a400:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a402:	688a      	ldr	r2, [r1, #8]
   1a404:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1a406:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a408:	b114      	cbz	r4, 1a410 <str_out+0x10>
   1a40a:	684b      	ldr	r3, [r1, #4]
   1a40c:	4293      	cmp	r3, r2
   1a40e:	dc01      	bgt.n	1a414 <str_out+0x14>
		ctx->count++;
   1a410:	608d      	str	r5, [r1, #8]
}
   1a412:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1a414:	3b01      	subs	r3, #1
   1a416:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1a418:	bf08      	it	eq
   1a41a:	2200      	moveq	r2, #0
   1a41c:	608d      	str	r5, [r1, #8]
   1a41e:	bf0c      	ite	eq
   1a420:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1a422:	54a0      	strbne	r0, [r4, r2]
   1a424:	e7f5      	b.n	1a412 <str_out+0x12>

0001a426 <printk>:
{
   1a426:	b40f      	push	{r0, r1, r2, r3}
   1a428:	b507      	push	{r0, r1, r2, lr}
   1a42a:	a904      	add	r1, sp, #16
   1a42c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1a430:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1a432:	f7f0 f83b 	bl	a4ac <vprintk>
}
   1a436:	b003      	add	sp, #12
   1a438:	f85d eb04 	ldr.w	lr, [sp], #4
   1a43c:	b004      	add	sp, #16
   1a43e:	4770      	bx	lr

0001a440 <snprintk>:
{
   1a440:	b40c      	push	{r2, r3}
   1a442:	b507      	push	{r0, r1, r2, lr}
   1a444:	ab04      	add	r3, sp, #16
   1a446:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1a44a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1a44c:	f7f0 f83c 	bl	a4c8 <vsnprintk>
}
   1a450:	b003      	add	sp, #12
   1a452:	f85d eb04 	ldr.w	lr, [sp], #4
   1a456:	b002      	add	sp, #8
   1a458:	4770      	bx	lr

0001a45a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a45a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1a45c:	f013 0307 	ands.w	r3, r3, #7
   1a460:	d105      	bne.n	1a46e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a462:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1a464:	2b00      	cmp	r3, #0
   1a466:	bf0c      	ite	eq
   1a468:	2000      	moveq	r0, #0
   1a46a:	2003      	movne	r0, #3
   1a46c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a46e:	2b02      	cmp	r3, #2
   1a470:	d105      	bne.n	1a47e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1a472:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1a474:	2b00      	cmp	r3, #0
   1a476:	bf14      	ite	ne
   1a478:	2000      	movne	r0, #0
   1a47a:	2004      	moveq	r0, #4
   1a47c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1a47e:	2b01      	cmp	r3, #1
   1a480:	d105      	bne.n	1a48e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a482:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1a484:	2b00      	cmp	r3, #0
   1a486:	bf0c      	ite	eq
   1a488:	2000      	moveq	r0, #0
   1a48a:	2005      	movne	r0, #5
   1a48c:	4770      	bx	lr
	int evt = EVT_NOP;
   1a48e:	2000      	movs	r0, #0
}
   1a490:	4770      	bx	lr

0001a492 <notify_one>:
{
   1a492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a496:	460d      	mov	r5, r1
   1a498:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a49a:	4619      	mov	r1, r3
   1a49c:	1d28      	adds	r0, r5, #4
{
   1a49e:	4690      	mov	r8, r2
   1a4a0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a4a2:	f7ef ffc9 	bl	a438 <sys_notify_finalize>
	if (cb) {
   1a4a6:	4604      	mov	r4, r0
   1a4a8:	b138      	cbz	r0, 1a4ba <notify_one+0x28>
		cb(mgr, cli, state, res);
   1a4aa:	4633      	mov	r3, r6
   1a4ac:	4642      	mov	r2, r8
   1a4ae:	4629      	mov	r1, r5
   1a4b0:	4638      	mov	r0, r7
   1a4b2:	46a4      	mov	ip, r4
}
   1a4b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1a4b8:	4760      	bx	ip
}
   1a4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a4be <validate_args>:
{
   1a4be:	b510      	push	{r4, lr}
   1a4c0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a4c2:	b140      	cbz	r0, 1a4d6 <validate_args+0x18>
   1a4c4:	b139      	cbz	r1, 1a4d6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1a4c6:	1d08      	adds	r0, r1, #4
   1a4c8:	f7ff ff84 	bl	1a3d4 <sys_notify_validate>
	if ((rv == 0)
   1a4cc:	b928      	cbnz	r0, 1a4da <validate_args+0x1c>
	    && ((cli->notify.flags
   1a4ce:	68a3      	ldr	r3, [r4, #8]
   1a4d0:	f033 0303 	bics.w	r3, r3, #3
   1a4d4:	d001      	beq.n	1a4da <validate_args+0x1c>
		rv = -EINVAL;
   1a4d6:	f06f 0015 	mvn.w	r0, #21
}
   1a4da:	bd10      	pop	{r4, pc}

0001a4dc <onoff_manager_init>:
{
   1a4dc:	b538      	push	{r3, r4, r5, lr}
   1a4de:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1a4e0:	4605      	mov	r5, r0
   1a4e2:	b158      	cbz	r0, 1a4fc <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1a4e4:	b151      	cbz	r1, 1a4fc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1a4e6:	680b      	ldr	r3, [r1, #0]
   1a4e8:	b143      	cbz	r3, 1a4fc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1a4ea:	684b      	ldr	r3, [r1, #4]
   1a4ec:	b133      	cbz	r3, 1a4fc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a4ee:	2220      	movs	r2, #32
   1a4f0:	2100      	movs	r1, #0
   1a4f2:	f001 fa07 	bl	1b904 <memset>
	return 0;
   1a4f6:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a4f8:	612c      	str	r4, [r5, #16]
}
   1a4fa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a4fc:	f06f 0015 	mvn.w	r0, #21
   1a500:	e7fb      	b.n	1a4fa <onoff_manager_init+0x1e>

0001a502 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1a502:	4604      	mov	r4, r0
   1a504:	b508      	push	{r3, lr}
   1a506:	4608      	mov	r0, r1
   1a508:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1a50a:	461a      	mov	r2, r3
   1a50c:	47a0      	blx	r4
	return z_impl_k_current_get();
   1a50e:	f7fe fdaf 	bl	19070 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1a512:	f7f3 fc89 	bl	de28 <z_impl_k_thread_abort>

0001a516 <chunk_field>:
	if (big_heap(h)) {
   1a516:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1a518:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a51c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1a520:	bf2c      	ite	cs
   1a522:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1a526:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1a52a:	4770      	bx	lr

0001a52c <chunk_set>:
	void *cmem = &buf[c];
   1a52c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a530:	6880      	ldr	r0, [r0, #8]
   1a532:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1a536:	bf2c      	ite	cs
   1a538:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1a53c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1a540:	4770      	bx	lr

0001a542 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a542:	2201      	movs	r2, #1
{
   1a544:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a546:	f7ff ffe6 	bl	1a516 <chunk_field>
}
   1a54a:	40d0      	lsrs	r0, r2
   1a54c:	bd08      	pop	{r3, pc}

0001a54e <set_chunk_used>:
	if (big_heap(h)) {
   1a54e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1a550:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a558:	d308      	bcc.n	1a56c <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a55a:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1a55c:	b11a      	cbz	r2, 1a566 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a55e:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a562:	604b      	str	r3, [r1, #4]
   1a564:	4770      	bx	lr
   1a566:	f023 0301 	bic.w	r3, r3, #1
   1a56a:	e7fa      	b.n	1a562 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a56c:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1a56e:	b11a      	cbz	r2, 1a578 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a570:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a574:	804b      	strh	r3, [r1, #2]
}
   1a576:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a578:	f023 0301 	bic.w	r3, r3, #1
   1a57c:	e7fa      	b.n	1a574 <set_chunk_used+0x26>

0001a57e <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a57e:	0053      	lsls	r3, r2, #1
   1a580:	2201      	movs	r2, #1
   1a582:	f7ff bfd3 	b.w	1a52c <chunk_set>

0001a586 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1a586:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1a58a:	bf2c      	ite	cs
   1a58c:	2008      	movcs	r0, #8
   1a58e:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a590:	3107      	adds	r1, #7
   1a592:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1a594:	08c0      	lsrs	r0, r0, #3
   1a596:	4770      	bx	lr

0001a598 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1a598:	b508      	push	{r3, lr}
   1a59a:	460b      	mov	r3, r1
   1a59c:	2101      	movs	r1, #1
   1a59e:	f7ff fff2 	bl	1a586 <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1a5a2:	3301      	adds	r3, #1
   1a5a4:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1a5a6:	fab3 f083 	clz	r0, r3
}
   1a5aa:	f1c0 001f 	rsb	r0, r0, #31
   1a5ae:	bd08      	pop	{r3, pc}

0001a5b0 <free_list_remove_bidx>:
{
   1a5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5b4:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1a5b6:	2203      	movs	r2, #3
   1a5b8:	460e      	mov	r6, r1
   1a5ba:	4604      	mov	r4, r0
   1a5bc:	f7ff ffab 	bl	1a516 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1a5c0:	4286      	cmp	r6, r0
   1a5c2:	4605      	mov	r5, r0
   1a5c4:	f107 0804 	add.w	r8, r7, #4
   1a5c8:	d10b      	bne.n	1a5e2 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1a5ca:	2301      	movs	r3, #1
   1a5cc:	fa03 f707 	lsl.w	r7, r3, r7
   1a5d0:	68e3      	ldr	r3, [r4, #12]
   1a5d2:	ea23 0307 	bic.w	r3, r3, r7
   1a5d6:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1a5d8:	2300      	movs	r3, #0
   1a5da:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1a5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1a5e2:	4631      	mov	r1, r6
   1a5e4:	2202      	movs	r2, #2
   1a5e6:	4620      	mov	r0, r4
   1a5e8:	f7ff ff95 	bl	1a516 <chunk_field>
   1a5ec:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1a5ee:	462b      	mov	r3, r5
   1a5f0:	4601      	mov	r1, r0
   1a5f2:	2203      	movs	r2, #3
   1a5f4:	4620      	mov	r0, r4
		b->next = second;
   1a5f6:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1a5fa:	f7ff ff97 	bl	1a52c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1a5fe:	4633      	mov	r3, r6
   1a600:	4629      	mov	r1, r5
   1a602:	4620      	mov	r0, r4
}
   1a604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a608:	2202      	movs	r2, #2
   1a60a:	f7ff bf8f 	b.w	1a52c <chunk_set>

0001a60e <free_list_remove>:
{
   1a60e:	b570      	push	{r4, r5, r6, lr}
   1a610:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1a612:	6886      	ldr	r6, [r0, #8]
   1a614:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1a616:	f7ff ff94 	bl	1a542 <chunk_size>
   1a61a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1a61e:	4601      	mov	r1, r0
   1a620:	d301      	bcc.n	1a626 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1a622:	2801      	cmp	r0, #1
   1a624:	d009      	beq.n	1a63a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a626:	4630      	mov	r0, r6
   1a628:	f7ff ffb6 	bl	1a598 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1a62c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a62e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1a630:	4620      	mov	r0, r4
}
   1a632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1a636:	f7ff bfbb 	b.w	1a5b0 <free_list_remove_bidx>
}
   1a63a:	bd70      	pop	{r4, r5, r6, pc}

0001a63c <alloc_chunk>:
{
   1a63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a640:	6886      	ldr	r6, [r0, #8]
   1a642:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1a644:	4630      	mov	r0, r6
{
   1a646:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1a648:	f7ff ffa6 	bl	1a598 <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1a64c:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1a64e:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1a650:	4630      	mov	r0, r6
   1a652:	f7ff ffa1 	bl	1a598 <bucket_idx.isra.0>
   1a656:	42a8      	cmp	r0, r5
   1a658:	da03      	bge.n	1a662 <alloc_chunk+0x26>
		return 0;
   1a65a:	2600      	movs	r6, #0
}
   1a65c:	4630      	mov	r0, r6
   1a65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1a662:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1a666:	f8da 9010 	ldr.w	r9, [sl, #16]
   1a66a:	f1b9 0f00 	cmp.w	r9, #0
   1a66e:	d019      	beq.n	1a6a4 <alloc_chunk+0x68>
   1a670:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1a672:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1a676:	4620      	mov	r0, r4
   1a678:	4631      	mov	r1, r6
   1a67a:	f7ff ff62 	bl	1a542 <chunk_size>
   1a67e:	4540      	cmp	r0, r8
   1a680:	d305      	bcc.n	1a68e <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1a682:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1a684:	4631      	mov	r1, r6
   1a686:	4620      	mov	r0, r4
   1a688:	f7ff ff92 	bl	1a5b0 <free_list_remove_bidx>
		return c;
   1a68c:	e7e6      	b.n	1a65c <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1a68e:	2203      	movs	r2, #3
   1a690:	4631      	mov	r1, r6
   1a692:	4620      	mov	r0, r4
   1a694:	f7ff ff3f 	bl	1a516 <chunk_field>
		} while (--i && b->next != first);
   1a698:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1a69a:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1a69e:	d001      	beq.n	1a6a4 <alloc_chunk+0x68>
   1a6a0:	4581      	cmp	r9, r0
   1a6a2:	d1e6      	bne.n	1a672 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1a6a4:	f04f 32ff 	mov.w	r2, #4294967295
   1a6a8:	68e3      	ldr	r3, [r4, #12]
   1a6aa:	3501      	adds	r5, #1
   1a6ac:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1a6ae:	401a      	ands	r2, r3
   1a6b0:	d0d3      	beq.n	1a65a <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1a6b2:	fa92 f2a2 	rbit	r2, r2
   1a6b6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1a6ba:	1d13      	adds	r3, r2, #4
   1a6bc:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1a6c0:	e7e0      	b.n	1a684 <alloc_chunk+0x48>

0001a6c2 <split_chunks>:
{
   1a6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6c6:	4614      	mov	r4, r2
   1a6c8:	460e      	mov	r6, r1
   1a6ca:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1a6cc:	f7ff ff39 	bl	1a542 <chunk_size>
	size_t lsz = rc - lc;
   1a6d0:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1a6d4:	1b37      	subs	r7, r6, r4
   1a6d6:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1a6d8:	4642      	mov	r2, r8
   1a6da:	4631      	mov	r1, r6
   1a6dc:	4628      	mov	r0, r5
   1a6de:	f7ff ff4e 	bl	1a57e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1a6e2:	463a      	mov	r2, r7
   1a6e4:	4621      	mov	r1, r4
   1a6e6:	4628      	mov	r0, r5
   1a6e8:	f7ff ff49 	bl	1a57e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a6ec:	4643      	mov	r3, r8
   1a6ee:	2200      	movs	r2, #0
   1a6f0:	4621      	mov	r1, r4
   1a6f2:	4628      	mov	r0, r5
   1a6f4:	f7ff ff1a 	bl	1a52c <chunk_set>
	return c + chunk_size(h, c);
   1a6f8:	4621      	mov	r1, r4
   1a6fa:	4628      	mov	r0, r5
   1a6fc:	f7ff ff21 	bl	1a542 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a700:	463b      	mov	r3, r7
   1a702:	1821      	adds	r1, r4, r0
   1a704:	2200      	movs	r2, #0
   1a706:	4628      	mov	r0, r5
}
   1a708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a70c:	f7ff bf0e 	b.w	1a52c <chunk_set>

0001a710 <merge_chunks>:
{
   1a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a714:	4616      	mov	r6, r2
   1a716:	4604      	mov	r4, r0
   1a718:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1a71a:	f7ff ff12 	bl	1a542 <chunk_size>
   1a71e:	4631      	mov	r1, r6
   1a720:	4605      	mov	r5, r0
   1a722:	4620      	mov	r0, r4
   1a724:	f7ff ff0d 	bl	1a542 <chunk_size>
   1a728:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1a72a:	462a      	mov	r2, r5
   1a72c:	4639      	mov	r1, r7
   1a72e:	4620      	mov	r0, r4
   1a730:	f7ff ff25 	bl	1a57e <set_chunk_size>
	return c + chunk_size(h, c);
   1a734:	4631      	mov	r1, r6
   1a736:	4620      	mov	r0, r4
   1a738:	f7ff ff03 	bl	1a542 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a73c:	462b      	mov	r3, r5
   1a73e:	1831      	adds	r1, r6, r0
   1a740:	2200      	movs	r2, #0
   1a742:	4620      	mov	r0, r4
}
   1a744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a748:	f7ff bef0 	b.w	1a52c <chunk_set>

0001a74c <free_list_add>:
{
   1a74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a750:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1a752:	6886      	ldr	r6, [r0, #8]
   1a754:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1a756:	f7ff fef4 	bl	1a542 <chunk_size>
   1a75a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1a75e:	4601      	mov	r1, r0
   1a760:	d301      	bcc.n	1a766 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1a762:	2801      	cmp	r0, #1
   1a764:	d033      	beq.n	1a7ce <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a766:	4630      	mov	r0, r6
   1a768:	f7ff ff16 	bl	1a598 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1a76c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1a770:	6916      	ldr	r6, [r2, #16]
   1a772:	b99e      	cbnz	r6, 1a79c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1a774:	2301      	movs	r3, #1
   1a776:	fa03 f000 	lsl.w	r0, r3, r0
   1a77a:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1a77c:	4629      	mov	r1, r5
   1a77e:	4303      	orrs	r3, r0
   1a780:	60e3      	str	r3, [r4, #12]
   1a782:	4620      	mov	r0, r4
		b->next = c;
   1a784:	6115      	str	r5, [r2, #16]
   1a786:	462b      	mov	r3, r5
   1a788:	2202      	movs	r2, #2
   1a78a:	f7ff fecf 	bl	1a52c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a78e:	2203      	movs	r2, #3
   1a790:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1a792:	4620      	mov	r0, r4
}
   1a794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a798:	f7ff bec8 	b.w	1a52c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1a79c:	2202      	movs	r2, #2
   1a79e:	4631      	mov	r1, r6
   1a7a0:	4620      	mov	r0, r4
   1a7a2:	f7ff feb8 	bl	1a516 <chunk_field>
   1a7a6:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1a7a8:	4603      	mov	r3, r0
   1a7aa:	4629      	mov	r1, r5
   1a7ac:	4620      	mov	r0, r4
   1a7ae:	f7ff febd 	bl	1a52c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a7b2:	2203      	movs	r2, #3
   1a7b4:	4633      	mov	r3, r6
   1a7b6:	4629      	mov	r1, r5
   1a7b8:	4620      	mov	r0, r4
   1a7ba:	f7ff feb7 	bl	1a52c <chunk_set>
   1a7be:	4639      	mov	r1, r7
   1a7c0:	462b      	mov	r3, r5
   1a7c2:	4620      	mov	r0, r4
   1a7c4:	f7ff feb2 	bl	1a52c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1a7c8:	2202      	movs	r2, #2
   1a7ca:	4631      	mov	r1, r6
   1a7cc:	e7e1      	b.n	1a792 <free_list_add+0x46>
   1a7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a7d2 <free_chunk>:
{
   1a7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7d4:	460c      	mov	r4, r1
   1a7d6:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1a7d8:	f7ff feb3 	bl	1a542 <chunk_size>
   1a7dc:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1a7de:	2201      	movs	r2, #1
   1a7e0:	4631      	mov	r1, r6
   1a7e2:	4628      	mov	r0, r5
   1a7e4:	f7ff fe97 	bl	1a516 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1a7e8:	07c3      	lsls	r3, r0, #31
   1a7ea:	d40c      	bmi.n	1a806 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1a7ec:	4631      	mov	r1, r6
   1a7ee:	4628      	mov	r0, r5
   1a7f0:	f7ff ff0d 	bl	1a60e <free_list_remove>
	return c + chunk_size(h, c);
   1a7f4:	4621      	mov	r1, r4
   1a7f6:	4628      	mov	r0, r5
   1a7f8:	f7ff fea3 	bl	1a542 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1a7fc:	4621      	mov	r1, r4
   1a7fe:	1822      	adds	r2, r4, r0
   1a800:	4628      	mov	r0, r5
   1a802:	f7ff ff85 	bl	1a710 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1a806:	2200      	movs	r2, #0
   1a808:	4621      	mov	r1, r4
   1a80a:	4628      	mov	r0, r5
   1a80c:	f7ff fe83 	bl	1a516 <chunk_field>
   1a810:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1a812:	2201      	movs	r2, #1
   1a814:	4639      	mov	r1, r7
   1a816:	4628      	mov	r0, r5
   1a818:	f7ff fe7d 	bl	1a516 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1a81c:	ea10 0602 	ands.w	r6, r0, r2
   1a820:	d113      	bne.n	1a84a <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1a822:	4639      	mov	r1, r7
   1a824:	4628      	mov	r0, r5
   1a826:	f7ff fef2 	bl	1a60e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1a82a:	4621      	mov	r1, r4
   1a82c:	4632      	mov	r2, r6
   1a82e:	4628      	mov	r0, r5
   1a830:	f7ff fe71 	bl	1a516 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1a834:	4622      	mov	r2, r4
   1a836:	1a21      	subs	r1, r4, r0
   1a838:	4628      	mov	r0, r5
   1a83a:	f7ff ff69 	bl	1a710 <merge_chunks>
   1a83e:	4621      	mov	r1, r4
   1a840:	4632      	mov	r2, r6
   1a842:	4628      	mov	r0, r5
   1a844:	f7ff fe67 	bl	1a516 <chunk_field>
   1a848:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1a84a:	4621      	mov	r1, r4
   1a84c:	4628      	mov	r0, r5
}
   1a84e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1a852:	f7ff bf7b 	b.w	1a74c <free_list_add>

0001a856 <sys_heap_alloc>:
{
   1a856:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1a858:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1a85a:	b909      	cbnz	r1, 1a860 <sys_heap_alloc+0xa>
		return NULL;
   1a85c:	2000      	movs	r0, #0
}
   1a85e:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1a860:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1a862:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1a866:	d9f9      	bls.n	1a85c <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1a868:	f7ff fe8d 	bl	1a586 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1a86c:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1a86e:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1a870:	4630      	mov	r0, r6
   1a872:	f7ff fee3 	bl	1a63c <alloc_chunk>
	if (c == 0U) {
   1a876:	4604      	mov	r4, r0
   1a878:	2800      	cmp	r0, #0
   1a87a:	d0ef      	beq.n	1a85c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1a87c:	4601      	mov	r1, r0
   1a87e:	4630      	mov	r0, r6
   1a880:	f7ff fe5f 	bl	1a542 <chunk_size>
   1a884:	42a8      	cmp	r0, r5
   1a886:	d909      	bls.n	1a89c <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1a888:	4425      	add	r5, r4
   1a88a:	4621      	mov	r1, r4
   1a88c:	4630      	mov	r0, r6
   1a88e:	462a      	mov	r2, r5
   1a890:	f7ff ff17 	bl	1a6c2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1a894:	4629      	mov	r1, r5
   1a896:	4630      	mov	r0, r6
   1a898:	f7ff ff58 	bl	1a74c <free_list_add>
	set_chunk_used(h, c, true);
   1a89c:	4621      	mov	r1, r4
   1a89e:	4630      	mov	r0, r6
   1a8a0:	2201      	movs	r2, #1
   1a8a2:	f7ff fe54 	bl	1a54e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1a8a6:	68b3      	ldr	r3, [r6, #8]
   1a8a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a8ac:	bf2c      	ite	cs
   1a8ae:	2308      	movcs	r3, #8
   1a8b0:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1a8b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1a8b6:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1a8b8:	e7d1      	b.n	1a85e <sys_heap_alloc+0x8>

0001a8ba <encode_uint>:
{
   1a8ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8be:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1a8c0:	78d3      	ldrb	r3, [r2, #3]
{
   1a8c2:	4680      	mov	r8, r0
	switch (specifier) {
   1a8c4:	2b6f      	cmp	r3, #111	; 0x6f
{
   1a8c6:	460f      	mov	r7, r1
   1a8c8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1a8ca:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1a8ce:	d029      	beq.n	1a924 <encode_uint+0x6a>
   1a8d0:	d824      	bhi.n	1a91c <encode_uint+0x62>
		return 16;
   1a8d2:	2b58      	cmp	r3, #88	; 0x58
   1a8d4:	bf14      	ite	ne
   1a8d6:	260a      	movne	r6, #10
   1a8d8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1a8da:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1a8de:	4632      	mov	r2, r6
   1a8e0:	2300      	movs	r3, #0
   1a8e2:	4640      	mov	r0, r8
   1a8e4:	4639      	mov	r1, r7
   1a8e6:	f7ee f921 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a8ea:	2a09      	cmp	r2, #9
   1a8ec:	b2d4      	uxtb	r4, r2
   1a8ee:	d81e      	bhi.n	1a92e <encode_uint+0x74>
   1a8f0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1a8f2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a8f4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1a8f6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a8fa:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1a8fe:	d301      	bcc.n	1a904 <encode_uint+0x4a>
   1a900:	45d1      	cmp	r9, sl
   1a902:	d811      	bhi.n	1a928 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1a904:	782b      	ldrb	r3, [r5, #0]
   1a906:	069b      	lsls	r3, r3, #26
   1a908:	d505      	bpl.n	1a916 <encode_uint+0x5c>
		if (radix == 8) {
   1a90a:	2e08      	cmp	r6, #8
   1a90c:	d115      	bne.n	1a93a <encode_uint+0x80>
			conv->altform_0 = true;
   1a90e:	78ab      	ldrb	r3, [r5, #2]
   1a910:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1a914:	70ab      	strb	r3, [r5, #2]
}
   1a916:	4648      	mov	r0, r9
   1a918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1a91c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1a920:	2b70      	cmp	r3, #112	; 0x70
   1a922:	e7d7      	b.n	1a8d4 <encode_uint+0x1a>
	switch (specifier) {
   1a924:	2608      	movs	r6, #8
   1a926:	e7d8      	b.n	1a8da <encode_uint+0x20>
		value /= radix;
   1a928:	4680      	mov	r8, r0
   1a92a:	460f      	mov	r7, r1
   1a92c:	e7d7      	b.n	1a8de <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a92e:	f1bb 0f19 	cmp.w	fp, #25
   1a932:	bf94      	ite	ls
   1a934:	3437      	addls	r4, #55	; 0x37
   1a936:	3457      	addhi	r4, #87	; 0x57
   1a938:	e7db      	b.n	1a8f2 <encode_uint+0x38>
		} else if (radix == 16) {
   1a93a:	2e10      	cmp	r6, #16
   1a93c:	d1eb      	bne.n	1a916 <encode_uint+0x5c>
			conv->altform_0c = true;
   1a93e:	78ab      	ldrb	r3, [r5, #2]
   1a940:	f043 0310 	orr.w	r3, r3, #16
   1a944:	e7e6      	b.n	1a914 <encode_uint+0x5a>

0001a946 <outs>:
{
   1a946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a94a:	4607      	mov	r7, r0
   1a94c:	4688      	mov	r8, r1
   1a94e:	4615      	mov	r5, r2
   1a950:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1a952:	4614      	mov	r4, r2
   1a954:	42b4      	cmp	r4, r6
   1a956:	eba4 0005 	sub.w	r0, r4, r5
   1a95a:	d302      	bcc.n	1a962 <outs+0x1c>
   1a95c:	b93e      	cbnz	r6, 1a96e <outs+0x28>
   1a95e:	7823      	ldrb	r3, [r4, #0]
   1a960:	b12b      	cbz	r3, 1a96e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1a962:	4641      	mov	r1, r8
   1a964:	f814 0b01 	ldrb.w	r0, [r4], #1
   1a968:	47b8      	blx	r7
		if (rc < 0) {
   1a96a:	2800      	cmp	r0, #0
   1a96c:	daf2      	bge.n	1a954 <outs+0xe>
}
   1a96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a972 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1a972:	4040      	eors	r0, r0
   1a974:	f380 8811 	msr	BASEPRI, r0
   1a978:	f04f 0004 	mov.w	r0, #4
   1a97c:	df02      	svc	2
}
   1a97e:	4770      	bx	lr

0001a980 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1a980:	4770      	bx	lr

0001a982 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1a982:	f04f 0320 	mov.w	r3, #32
   1a986:	f3ef 8111 	mrs	r1, BASEPRI
   1a98a:	f383 8811 	msr	BASEPRI, r3
   1a98e:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1a992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1a996:	2201      	movs	r2, #1
   1a998:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1a99c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1a9a0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1a9a4:	f381 8811 	msr	BASEPRI, r1
   1a9a8:	f3bf 8f6f 	isb	sy
}
   1a9ac:	2000      	movs	r0, #0
   1a9ae:	4770      	bx	lr

0001a9b0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1a9b0:	f002 bcb0 	b.w	1d314 <SystemInit>

0001a9b4 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1a9b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1a9b8:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1a9bc:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1a9be:	4640      	mov	r0, r8
{
   1a9c0:	461f      	mov	r7, r3
   1a9c2:	460c      	mov	r4, r1
   1a9c4:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1a9c6:	f000 ff34 	bl	1b832 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1a9ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a9ce:	b280      	uxth	r0, r0
   1a9d0:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1a9d4:	9300      	str	r3, [sp, #0]
   1a9d6:	4632      	mov	r2, r6
   1a9d8:	463b      	mov	r3, r7
   1a9da:	4621      	mov	r1, r4
   1a9dc:	4628      	mov	r0, r5
   1a9de:	f002 f8f6 	bl	1cbce <bt_gatt_attr_read>
}
   1a9e2:	b004      	add	sp, #16
   1a9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a9e8 <virtio_get_status>:
}
   1a9e8:	2004      	movs	r0, #4
   1a9ea:	4770      	bx	lr

0001a9ec <virtio_get_features>:
}
   1a9ec:	2001      	movs	r0, #1
   1a9ee:	4770      	bx	lr

0001a9f0 <virtio_set_features>:
}
   1a9f0:	4770      	bx	lr

0001a9f2 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1a9f2:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1a9f4:	21b4      	movs	r1, #180	; 0xb4
   1a9f6:	2004      	movs	r0, #4
   1a9f8:	f7ff fc1c 	bl	1a234 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1a9fc:	4604      	mov	r4, r0
   1a9fe:	b118      	cbz	r0, 1aa08 <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1aa00:	22b4      	movs	r2, #180	; 0xb4
   1aa02:	2100      	movs	r1, #0
   1aa04:	f000 ff7e 	bl	1b904 <memset>
	}

	return vqs;
}
   1aa08:	4620      	mov	r0, r4
   1aa0a:	bd10      	pop	{r4, pc}

0001aa0c <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1aa0c:	f002 bf91 	b.w	1d932 <rpmsg_destroy_ept>

0001aa10 <settings_load>:
	return settings_load_subtree(NULL);
   1aa10:	2000      	movs	r0, #0
   1aa12:	f7f0 bef9 	b.w	b808 <settings_load_subtree>

0001aa16 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1aa16:	2200      	movs	r2, #0
   1aa18:	4611      	mov	r1, r2
   1aa1a:	f7f0 becf 	b.w	b7bc <settings_save_one>

0001aa1e <settings_name_steq>:
{
   1aa1e:	4603      	mov	r3, r0
   1aa20:	b530      	push	{r4, r5, lr}
   1aa22:	4608      	mov	r0, r1
	if (next) {
   1aa24:	b10a      	cbz	r2, 1aa2a <settings_name_steq+0xc>
		*next = NULL;
   1aa26:	2100      	movs	r1, #0
   1aa28:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1aa2a:	b163      	cbz	r3, 1aa46 <settings_name_steq+0x28>
   1aa2c:	b190      	cbz	r0, 1aa54 <settings_name_steq+0x36>
   1aa2e:	1e41      	subs	r1, r0, #1
   1aa30:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1aa32:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1aa36:	4604      	mov	r4, r0
   1aa38:	f810 3b01 	ldrb.w	r3, [r0], #1
   1aa3c:	b15d      	cbz	r5, 1aa56 <settings_name_steq+0x38>
   1aa3e:	429d      	cmp	r5, r3
   1aa40:	d101      	bne.n	1aa46 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1aa42:	2d3d      	cmp	r5, #61	; 0x3d
   1aa44:	d1f5      	bne.n	1aa32 <settings_name_steq+0x14>
	return 0;
   1aa46:	2000      	movs	r0, #0
   1aa48:	e004      	b.n	1aa54 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1aa4a:	2b3d      	cmp	r3, #61	; 0x3d
   1aa4c:	d008      	beq.n	1aa60 <settings_name_steq+0x42>
   1aa4e:	fab3 f083 	clz	r0, r3
   1aa52:	0940      	lsrs	r0, r0, #5
}
   1aa54:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1aa56:	2b2f      	cmp	r3, #47	; 0x2f
   1aa58:	d1f7      	bne.n	1aa4a <settings_name_steq+0x2c>
		if (next) {
   1aa5a:	b10a      	cbz	r2, 1aa60 <settings_name_steq+0x42>
			*next = name + 1;
   1aa5c:	3401      	adds	r4, #1
   1aa5e:	6014      	str	r4, [r2, #0]
		return 1;
   1aa60:	2001      	movs	r0, #1
   1aa62:	e7f7      	b.n	1aa54 <settings_name_steq+0x36>

0001aa64 <settings_name_next>:
{
   1aa64:	4603      	mov	r3, r0
   1aa66:	b530      	push	{r4, r5, lr}
	if (next) {
   1aa68:	b109      	cbz	r1, 1aa6e <settings_name_next+0xa>
		*next = NULL;
   1aa6a:	2200      	movs	r2, #0
   1aa6c:	600a      	str	r2, [r1, #0]
	if (!name) {
   1aa6e:	b16b      	cbz	r3, 1aa8c <settings_name_next+0x28>
   1aa70:	461a      	mov	r2, r3
   1aa72:	4614      	mov	r4, r2
   1aa74:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1aa76:	f812 5b01 	ldrb.w	r5, [r2], #1
   1aa7a:	b135      	cbz	r5, 1aa8a <settings_name_next+0x26>
   1aa7c:	2d3d      	cmp	r5, #61	; 0x3d
   1aa7e:	d004      	beq.n	1aa8a <settings_name_next+0x26>
   1aa80:	2d2f      	cmp	r5, #47	; 0x2f
   1aa82:	d1f6      	bne.n	1aa72 <settings_name_next+0xe>
		if (next) {
   1aa84:	b109      	cbz	r1, 1aa8a <settings_name_next+0x26>
			*next = name + 1;
   1aa86:	3401      	adds	r4, #1
   1aa88:	600c      	str	r4, [r1, #0]
}
   1aa8a:	bd30      	pop	{r4, r5, pc}
		return 0;
   1aa8c:	4618      	mov	r0, r3
   1aa8e:	e7fc      	b.n	1aa8a <settings_name_next+0x26>

0001aa90 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1aa90:	2000      	movs	r0, #0
   1aa92:	4770      	bx	lr

0001aa94 <set_on_state>:
	__asm__ volatile(
   1aa94:	f04f 0320 	mov.w	r3, #32
   1aa98:	f3ef 8211 	mrs	r2, BASEPRI
   1aa9c:	f383 8811 	msr	BASEPRI, r3
   1aaa0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1aaa4:	6803      	ldr	r3, [r0, #0]
   1aaa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1aaaa:	f043 0302 	orr.w	r3, r3, #2
   1aaae:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1aab0:	f382 8811 	msr	BASEPRI, r2
   1aab4:	f3bf 8f6f 	isb	sy
}
   1aab8:	4770      	bx	lr

0001aaba <async_start>:
{
   1aaba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aabc:	9f06      	ldr	r7, [sp, #24]
   1aabe:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1aac0:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1aac2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1aac4:	f04f 0020 	mov.w	r0, #32
   1aac8:	f3ef 8c11 	mrs	ip, BASEPRI
   1aacc:	f380 8811 	msr	BASEPRI, r0
   1aad0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1aad4:	260c      	movs	r6, #12
   1aad6:	fb06 4601 	mla	r6, r6, r1, r4
   1aada:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1aade:	f000 0e07 	and.w	lr, r0, #7
   1aae2:	f1be 0f01 	cmp.w	lr, #1
   1aae6:	d111      	bne.n	1ab0c <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1aae8:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1aaec:	2600      	movs	r6, #0
	__asm__ volatile(
   1aaee:	f38c 8811 	msr	BASEPRI, ip
   1aaf2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1aaf6:	b93e      	cbnz	r6, 1ab08 <async_start+0x4e>
	subdata->cb = cb;
   1aaf8:	200c      	movs	r0, #12
   1aafa:	4341      	muls	r1, r0
   1aafc:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1aafe:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1ab02:	686b      	ldr	r3, [r5, #4]
   1ab04:	585b      	ldr	r3, [r3, r1]
   1ab06:	4798      	blx	r3
}
   1ab08:	4630      	mov	r0, r6
   1ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1ab0c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1ab10:	4287      	cmp	r7, r0
   1ab12:	bf14      	ite	ne
   1ab14:	f04f 36ff 	movne.w	r6, #4294967295
   1ab18:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1ab1c:	e7e7      	b.n	1aaee <async_start+0x34>

0001ab1e <api_start>:
{
   1ab1e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1ab20:	2480      	movs	r4, #128	; 0x80
   1ab22:	9400      	str	r4, [sp, #0]
   1ab24:	f7ff ffc9 	bl	1aaba <async_start>
}
   1ab28:	b002      	add	sp, #8
   1ab2a:	bd10      	pop	{r4, pc}

0001ab2c <onoff_started_callback>:
	return &data->mgr[type];
   1ab2c:	68c0      	ldr	r0, [r0, #12]
   1ab2e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1ab30:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1ab34:	2100      	movs	r1, #0
   1ab36:	4710      	bx	r2

0001ab38 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1ab38:	2003      	movs	r0, #3
   1ab3a:	f7fb be85 	b.w	16848 <nrfx_clock_start>

0001ab3e <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1ab3e:	2002      	movs	r0, #2
   1ab40:	f7fb be82 	b.w	16848 <nrfx_clock_start>

0001ab44 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1ab44:	2000      	movs	r0, #0
   1ab46:	f7fb be7f 	b.w	16848 <nrfx_clock_start>

0001ab4a <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1ab4a:	2003      	movs	r0, #3
   1ab4c:	f7fb bee6 	b.w	1691c <nrfx_clock_stop>

0001ab50 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1ab50:	2002      	movs	r0, #2
   1ab52:	f7fb bee3 	b.w	1691c <nrfx_clock_stop>

0001ab56 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ab56:	2000      	movs	r0, #0
   1ab58:	f7fb bee0 	b.w	1691c <nrfx_clock_stop>

0001ab5c <api_stop>:
	return stop(dev, subsys, CTX_API);
   1ab5c:	2280      	movs	r2, #128	; 0x80
   1ab5e:	f7f0 bf83 	b.w	ba68 <stop>

0001ab62 <blocking_start_callback>:
{
   1ab62:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1ab64:	f7fe ba8a 	b.w	1907c <z_impl_k_sem_give>

0001ab68 <bt_rpmsg_open>:
{
   1ab68:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1ab6a:	f7f1 fa7d 	bl	c068 <bt_rpmsg_platform_endpoint_is_bound>
   1ab6e:	b108      	cbz	r0, 1ab74 <bt_rpmsg_open+0xc>
}
   1ab70:	2000      	movs	r0, #0
   1ab72:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1ab74:	2100      	movs	r1, #0
   1ab76:	2021      	movs	r0, #33	; 0x21
   1ab78:	f7fe fa4a 	bl	19010 <z_impl_k_sleep>
   1ab7c:	e7f5      	b.n	1ab6a <bt_rpmsg_open+0x2>

0001ab7e <endpoint_cb>:
{
   1ab7e:	b508      	push	{r3, lr}
   1ab80:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1ab82:	4611      	mov	r1, r2
   1ab84:	f7f1 f986 	bl	be94 <bt_rpmsg_rx>
}
   1ab88:	2000      	movs	r0, #0
   1ab8a:	bd08      	pop	{r3, pc}

0001ab8c <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1ab8c:	4770      	bx	lr

0001ab8e <attr_find_by_handle>:
{
   1ab8e:	b570      	push	{r4, r5, r6, lr}
   1ab90:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1ab92:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1ab96:	b1a8      	cbz	r0, 1abc4 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1ab98:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1ab9a:	3801      	subs	r0, #1
	while (upper >= lower) {
   1ab9c:	4286      	cmp	r6, r0
   1ab9e:	dd01      	ble.n	1aba4 <attr_find_by_handle+0x16>
		return NULL;
   1aba0:	2000      	movs	r0, #0
   1aba2:	e00f      	b.n	1abc4 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1aba4:	1832      	adds	r2, r6, r0
   1aba6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1abaa:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1abac:	1cd5      	adds	r5, r2, #3
   1abae:	00eb      	lsls	r3, r5, #3
   1abb0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1abb4:	892d      	ldrh	r5, [r5, #8]
   1abb6:	428d      	cmp	r5, r1
   1abb8:	d201      	bcs.n	1abbe <attr_find_by_handle+0x30>
			lower = m + 1;
   1abba:	1c56      	adds	r6, r2, #1
   1abbc:	e7ee      	b.n	1ab9c <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1abbe:	d802      	bhi.n	1abc6 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1abc0:	3304      	adds	r3, #4
   1abc2:	18e0      	adds	r0, r4, r3
}
   1abc4:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1abc6:	1e50      	subs	r0, r2, #1
   1abc8:	e7e8      	b.n	1ab9c <attr_find_by_handle+0xe>

0001abca <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1abca:	2300      	movs	r3, #0
{
   1abcc:	b510      	push	{r4, lr}
   1abce:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1abd0:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1abd4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1abd8:	b910      	cbnz	r0, 1abe0 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1abda:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1abde:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1abe0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1abe4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1abe6:	4290      	cmp	r0, r2
	list->head = node;
   1abe8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1abec:	bf08      	it	eq
   1abee:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1abf2:	f003 f948 	bl	1de86 <k_free>
   1abf6:	e7ed      	b.n	1abd4 <svc_attr_memory_release+0xa>

0001abf8 <atomic_and>:
{
   1abf8:	4603      	mov	r3, r0
}
   1abfa:	e8d3 0fef 	ldaex	r0, [r3]
   1abfe:	ea00 0201 	and.w	r2, r0, r1
   1ac02:	e8c3 2fec 	stlex	ip, r2, [r3]
   1ac06:	f1bc 0f00 	cmp.w	ip, #0
   1ac0a:	d1f6      	bne.n	1abfa <atomic_and+0x2>
   1ac0c:	4770      	bx	lr

0001ac0e <discovery_complete_not_found>:
{
   1ac0e:	b510      	push	{r4, lr}
   1ac10:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1ac12:	f7ff ffda 	bl	1abca <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ac16:	f06f 0101 	mvn.w	r1, #1
   1ac1a:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1ac1e:	f7ff ffeb 	bl	1abf8 <atomic_and>
	if (dm->callback->service_not_found) {
   1ac22:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1ac26:	685b      	ldr	r3, [r3, #4]
   1ac28:	b123      	cbz	r3, 1ac34 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1ac2a:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1ac2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1ac32:	4718      	bx	r3
}
   1ac34:	bd10      	pop	{r4, pc}

0001ac36 <bt_gatt_dm_attr_service_val>:
{
   1ac36:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1ac38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ac3c:	2400      	movs	r4, #0
{
   1ac3e:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1ac40:	6801      	ldr	r1, [r0, #0]
   1ac42:	4668      	mov	r0, sp
   1ac44:	f88d 4000 	strb.w	r4, [sp]
   1ac48:	f8ad 3002 	strh.w	r3, [sp, #2]
   1ac4c:	f000 fea4 	bl	1b998 <bt_uuid_cmp>
   1ac50:	b918      	cbnz	r0, 1ac5a <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1ac52:	6828      	ldr	r0, [r5, #0]
   1ac54:	3808      	subs	r0, #8
}
   1ac56:	b003      	add	sp, #12
   1ac58:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1ac5a:	f642 0301 	movw	r3, #10241	; 0x2801
   1ac5e:	6829      	ldr	r1, [r5, #0]
   1ac60:	a801      	add	r0, sp, #4
   1ac62:	f88d 4004 	strb.w	r4, [sp, #4]
   1ac66:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ac6a:	f000 fe95 	bl	1b998 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1ac6e:	2800      	cmp	r0, #0
   1ac70:	d0ef      	beq.n	1ac52 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1ac72:	4620      	mov	r0, r4
   1ac74:	e7ef      	b.n	1ac56 <bt_gatt_dm_attr_service_val+0x20>

0001ac76 <bt_gatt_dm_attr_chrc_val>:
{
   1ac76:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1ac78:	f642 0303 	movw	r3, #10243	; 0x2803
   1ac7c:	2400      	movs	r4, #0
{
   1ac7e:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1ac80:	6801      	ldr	r1, [r0, #0]
   1ac82:	a801      	add	r0, sp, #4
   1ac84:	f88d 4004 	strb.w	r4, [sp, #4]
   1ac88:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ac8c:	f000 fe84 	bl	1b998 <bt_uuid_cmp>
   1ac90:	b918      	cbnz	r0, 1ac9a <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1ac92:	6828      	ldr	r0, [r5, #0]
   1ac94:	3808      	subs	r0, #8
}
   1ac96:	b003      	add	sp, #12
   1ac98:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1ac9a:	4620      	mov	r0, r4
   1ac9c:	e7fb      	b.n	1ac96 <bt_gatt_dm_attr_chrc_val+0x20>

0001ac9e <bt_gatt_dm_conn_get>:
}
   1ac9e:	6800      	ldr	r0, [r0, #0]
   1aca0:	4770      	bx	lr

0001aca2 <bt_gatt_dm_service_get>:
}
   1aca2:	301c      	adds	r0, #28
   1aca4:	4770      	bx	lr

0001aca6 <bt_gatt_dm_char_next>:
{
   1aca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1aca8:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1acac:	b131      	cbz	r1, 1acbc <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1acae:	42a9      	cmp	r1, r5
   1acb0:	d203      	bcs.n	1acba <bt_gatt_dm_char_next+0x14>
	return NULL;
   1acb2:	2500      	movs	r5, #0
}
   1acb4:	4628      	mov	r0, r5
   1acb6:	b003      	add	sp, #12
   1acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1acba:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1acbc:	2600      	movs	r6, #0
   1acbe:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1acc2:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1acc6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1acca:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1acce:	3508      	adds	r5, #8
   1acd0:	42ac      	cmp	r4, r5
   1acd2:	d9ee      	bls.n	1acb2 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1acd4:	6829      	ldr	r1, [r5, #0]
   1acd6:	a801      	add	r0, sp, #4
   1acd8:	f88d 6004 	strb.w	r6, [sp, #4]
   1acdc:	f8ad 7006 	strh.w	r7, [sp, #6]
   1ace0:	f000 fe5a 	bl	1b998 <bt_uuid_cmp>
   1ace4:	2800      	cmp	r0, #0
   1ace6:	d1f2      	bne.n	1acce <bt_gatt_dm_char_next+0x28>
   1ace8:	e7e4      	b.n	1acb4 <bt_gatt_dm_char_next+0xe>

0001acea <bt_gatt_dm_attr_next>:
{
   1acea:	4602      	mov	r2, r0
		prev = dm->attrs;
   1acec:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1acf0:	b111      	cbz	r1, 1acf8 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1acf2:	4299      	cmp	r1, r3
   1acf4:	d30b      	bcc.n	1ad0e <bt_gatt_dm_attr_next+0x24>
   1acf6:	460b      	mov	r3, r1
		if (++prev < end) {
   1acf8:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1acfc:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1ad00:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1ad04:	321c      	adds	r2, #28
	return NULL;
   1ad06:	4290      	cmp	r0, r2
   1ad08:	bf28      	it	cs
   1ad0a:	2000      	movcs	r0, #0
   1ad0c:	4770      	bx	lr
   1ad0e:	2000      	movs	r0, #0
}
   1ad10:	4770      	bx	lr

0001ad12 <bt_gatt_dm_desc_next>:
{
   1ad12:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1ad14:	f7ff ffe9 	bl	1acea <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1ad18:	4604      	mov	r4, r0
   1ad1a:	b158      	cbz	r0, 1ad34 <bt_gatt_dm_desc_next+0x22>
   1ad1c:	2300      	movs	r3, #0
   1ad1e:	f88d 3004 	strb.w	r3, [sp, #4]
   1ad22:	f642 0303 	movw	r3, #10243	; 0x2803
   1ad26:	6801      	ldr	r1, [r0, #0]
   1ad28:	a801      	add	r0, sp, #4
   1ad2a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ad2e:	f000 fe33 	bl	1b998 <bt_uuid_cmp>
   1ad32:	b900      	cbnz	r0, 1ad36 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1ad34:	2400      	movs	r4, #0
}
   1ad36:	4620      	mov	r0, r4
   1ad38:	b002      	add	sp, #8
   1ad3a:	bd10      	pop	{r4, pc}

0001ad3c <bt_gatt_dm_desc_by_uuid>:
{
   1ad3c:	b570      	push	{r4, r5, r6, lr}
   1ad3e:	4605      	mov	r5, r0
   1ad40:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1ad42:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1ad44:	4621      	mov	r1, r4
   1ad46:	4628      	mov	r0, r5
   1ad48:	f7ff ffe3 	bl	1ad12 <bt_gatt_dm_desc_next>
   1ad4c:	4604      	mov	r4, r0
   1ad4e:	b128      	cbz	r0, 1ad5c <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1ad50:	4630      	mov	r0, r6
   1ad52:	6821      	ldr	r1, [r4, #0]
   1ad54:	f000 fe20 	bl	1b998 <bt_uuid_cmp>
   1ad58:	2800      	cmp	r0, #0
   1ad5a:	d1f3      	bne.n	1ad44 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1ad5c:	4620      	mov	r0, r4
   1ad5e:	bd70      	pop	{r4, r5, r6, pc}

0001ad60 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1ad60:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1ad62:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1ad66:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ad68:	f06f 0102 	mvn.w	r1, #2
   1ad6c:	4628      	mov	r0, r5
   1ad6e:	f7ff ff43 	bl	1abf8 <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1ad72:	0783      	lsls	r3, r0, #30
   1ad74:	d509      	bpl.n	1ad8a <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1ad76:	4620      	mov	r0, r4
   1ad78:	f7ff ff27 	bl	1abca <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ad7c:	f06f 0101 	mvn.w	r1, #1
   1ad80:	4628      	mov	r0, r5
   1ad82:	f7ff ff39 	bl	1abf8 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1ad86:	2000      	movs	r0, #0
}
   1ad88:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1ad8a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1ad8e:	e7fb      	b.n	1ad88 <bt_gatt_dm_data_release+0x28>

0001ad90 <bt_scan_stop>:
	return bt_le_scan_stop();
   1ad90:	f7f5 bec8 	b.w	10b24 <bt_le_scan_stop>

0001ad94 <bt_bas_conn>:
}
   1ad94:	6800      	ldr	r0, [r0, #0]
   1ad96:	4770      	bx	lr

0001ad98 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1ad98:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1ad9a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1ad9c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1ad9e:	bf9c      	itt	ls
   1ada0:	6880      	ldrls	r0, [r0, #8]
   1ada2:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1ada4:	3b01      	subs	r3, #1
   1ada6:	1a98      	subs	r0, r3, r2
}
   1ada8:	4770      	bx	lr

0001adaa <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1adaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1adae:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1adb2:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1adb4:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1adb8:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1adba:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1adbc:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1adbe:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1adc0:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1adc2:	d904      	bls.n	1adce <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1adc4:	f000 fd73 	bl	1b8ae <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1adc8:	60ec      	str	r4, [r5, #12]
}
   1adca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1adce:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1add0:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1add4:	f000 fd6b 	bl	1b8ae <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1add8:	4622      	mov	r2, r4
   1adda:	6868      	ldr	r0, [r5, #4]
   1addc:	eb07 0108 	add.w	r1, r7, r8
   1ade0:	e7f0      	b.n	1adc4 <_WriteNoCheck+0x1a>

0001ade2 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1ade2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ade6:	4606      	mov	r6, r0
   1ade8:	4689      	mov	r9, r1
   1adea:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1adec:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1adf0:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1adf2:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1adf4:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1adf6:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1adf8:	bf28      	it	cs
   1adfa:	18e4      	addcs	r4, r4, r3
   1adfc:	3c01      	subs	r4, #1
   1adfe:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1ae00:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1ae02:	42bc      	cmp	r4, r7
   1ae04:	bf28      	it	cs
   1ae06:	463c      	movcs	r4, r7
   1ae08:	4294      	cmp	r4, r2
   1ae0a:	bf28      	it	cs
   1ae0c:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1ae0e:	6870      	ldr	r0, [r6, #4]
   1ae10:	4649      	mov	r1, r9
   1ae12:	4428      	add	r0, r5
   1ae14:	4622      	mov	r2, r4
   1ae16:	f000 fd4a 	bl	1b8ae <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1ae1a:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1ae1c:	4425      	add	r5, r4
      WrOff = 0u;
   1ae1e:	42ab      	cmp	r3, r5
   1ae20:	bf08      	it	eq
   1ae22:	2500      	moveq	r5, #0
  } while (NumBytes);
   1ae24:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1ae26:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1ae28:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1ae2a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1ae2c:	d1e1      	bne.n	1adf2 <_WriteBlocking+0x10>
}
   1ae2e:	4640      	mov	r0, r8
   1ae30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ae34 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1ae34:	f7f2 ba90 	b.w	d358 <_DoInit>

0001ae38 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1ae38:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1ae3a:	f7ff fffb 	bl	1ae34 <SEGGER_RTT_Init>

	return 0;
}
   1ae3e:	2000      	movs	r0, #0
   1ae40:	bd08      	pop	{r3, pc}

0001ae42 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1ae42:	b538      	push	{r3, r4, r5, lr}
   1ae44:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1ae46:	42ab      	cmp	r3, r5
{
   1ae48:	4611      	mov	r1, r2
   1ae4a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1ae4c:	d804      	bhi.n	1ae58 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1ae4e:	461a      	mov	r2, r3
   1ae50:	f000 fd2d 	bl	1b8ae <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1ae54:	4620      	mov	r0, r4
   1ae56:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1ae58:	2400      	movs	r4, #0
   1ae5a:	e7fb      	b.n	1ae54 <_copy+0x12>

0001ae5c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1ae5c:	f000 bd52 	b.w	1b904 <memset>

0001ae60 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1ae60:	09c3      	lsrs	r3, r0, #7
   1ae62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ae66:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1ae6a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1ae6e:	b2c0      	uxtb	r0, r0
   1ae70:	4770      	bx	lr

0001ae72 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1ae72:	78cb      	ldrb	r3, [r1, #3]
   1ae74:	7802      	ldrb	r2, [r0, #0]
   1ae76:	4053      	eors	r3, r2
   1ae78:	7003      	strb	r3, [r0, #0]
   1ae7a:	884b      	ldrh	r3, [r1, #2]
   1ae7c:	7842      	ldrb	r2, [r0, #1]
   1ae7e:	4053      	eors	r3, r2
   1ae80:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1ae82:	680a      	ldr	r2, [r1, #0]
   1ae84:	7883      	ldrb	r3, [r0, #2]
   1ae86:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ae8a:	7083      	strb	r3, [r0, #2]
   1ae8c:	680a      	ldr	r2, [r1, #0]
   1ae8e:	78c3      	ldrb	r3, [r0, #3]
   1ae90:	4053      	eors	r3, r2
   1ae92:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1ae94:	79cb      	ldrb	r3, [r1, #7]
   1ae96:	7902      	ldrb	r2, [r0, #4]
   1ae98:	4053      	eors	r3, r2
   1ae9a:	7103      	strb	r3, [r0, #4]
   1ae9c:	88cb      	ldrh	r3, [r1, #6]
   1ae9e:	7942      	ldrb	r2, [r0, #5]
   1aea0:	4053      	eors	r3, r2
   1aea2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1aea4:	684a      	ldr	r2, [r1, #4]
   1aea6:	7983      	ldrb	r3, [r0, #6]
   1aea8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1aeac:	7183      	strb	r3, [r0, #6]
   1aeae:	684a      	ldr	r2, [r1, #4]
   1aeb0:	79c3      	ldrb	r3, [r0, #7]
   1aeb2:	4053      	eors	r3, r2
   1aeb4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1aeb6:	7acb      	ldrb	r3, [r1, #11]
   1aeb8:	7a02      	ldrb	r2, [r0, #8]
   1aeba:	4053      	eors	r3, r2
   1aebc:	7203      	strb	r3, [r0, #8]
   1aebe:	7a42      	ldrb	r2, [r0, #9]
   1aec0:	894b      	ldrh	r3, [r1, #10]
   1aec2:	4053      	eors	r3, r2
   1aec4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1aec6:	688a      	ldr	r2, [r1, #8]
   1aec8:	7a83      	ldrb	r3, [r0, #10]
   1aeca:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1aece:	7283      	strb	r3, [r0, #10]
   1aed0:	688a      	ldr	r2, [r1, #8]
   1aed2:	7ac3      	ldrb	r3, [r0, #11]
   1aed4:	4053      	eors	r3, r2
   1aed6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1aed8:	7bcb      	ldrb	r3, [r1, #15]
   1aeda:	7b02      	ldrb	r2, [r0, #12]
   1aedc:	4053      	eors	r3, r2
   1aede:	7303      	strb	r3, [r0, #12]
   1aee0:	89cb      	ldrh	r3, [r1, #14]
   1aee2:	7b42      	ldrb	r2, [r0, #13]
   1aee4:	4053      	eors	r3, r2
   1aee6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1aee8:	68ca      	ldr	r2, [r1, #12]
   1aeea:	7b83      	ldrb	r3, [r0, #14]
   1aeec:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1aef0:	7383      	strb	r3, [r0, #14]
   1aef2:	68ca      	ldr	r2, [r1, #12]
   1aef4:	7bc3      	ldrb	r3, [r0, #15]
   1aef6:	4053      	eors	r3, r2
   1aef8:	73c3      	strb	r3, [r0, #15]
}
   1aefa:	4770      	bx	lr

0001aefc <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1aefc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1aefe:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1af00:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1af02:	f88d 2000 	strb.w	r2, [sp]
   1af06:	7942      	ldrb	r2, [r0, #5]
   1af08:	f88d 2001 	strb.w	r2, [sp, #1]
   1af0c:	7a82      	ldrb	r2, [r0, #10]
   1af0e:	f88d 2002 	strb.w	r2, [sp, #2]
   1af12:	7bc2      	ldrb	r2, [r0, #15]
   1af14:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1af18:	7902      	ldrb	r2, [r0, #4]
   1af1a:	f88d 2004 	strb.w	r2, [sp, #4]
   1af1e:	7a42      	ldrb	r2, [r0, #9]
   1af20:	f88d 2005 	strb.w	r2, [sp, #5]
   1af24:	7b82      	ldrb	r2, [r0, #14]
   1af26:	f88d 2006 	strb.w	r2, [sp, #6]
   1af2a:	78c2      	ldrb	r2, [r0, #3]
   1af2c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1af30:	7a02      	ldrb	r2, [r0, #8]
   1af32:	f88d 2008 	strb.w	r2, [sp, #8]
   1af36:	7b42      	ldrb	r2, [r0, #13]
   1af38:	f88d 2009 	strb.w	r2, [sp, #9]
   1af3c:	7882      	ldrb	r2, [r0, #2]
   1af3e:	f88d 200a 	strb.w	r2, [sp, #10]
   1af42:	79c2      	ldrb	r2, [r0, #7]
   1af44:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1af48:	7b02      	ldrb	r2, [r0, #12]
   1af4a:	f88d 200c 	strb.w	r2, [sp, #12]
   1af4e:	7842      	ldrb	r2, [r0, #1]
   1af50:	f88d 200d 	strb.w	r2, [sp, #13]
   1af54:	7982      	ldrb	r2, [r0, #6]
   1af56:	f88d 200e 	strb.w	r2, [sp, #14]
   1af5a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1af5e:	2310      	movs	r3, #16
   1af60:	466a      	mov	r2, sp
   1af62:	4619      	mov	r1, r3
   1af64:	f7ff ff6d 	bl	1ae42 <_copy>
}
   1af68:	b005      	add	sp, #20
   1af6a:	f85d fb04 	ldr.w	pc, [sp], #4

0001af6e <mult_row_column>:
{
   1af6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af70:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1af72:	7808      	ldrb	r0, [r1, #0]
{
   1af74:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1af76:	f7ff ff73 	bl	1ae60 <_double_byte>
   1af7a:	4605      	mov	r5, r0
   1af7c:	7860      	ldrb	r0, [r4, #1]
   1af7e:	f7ff ff6f 	bl	1ae60 <_double_byte>
   1af82:	78a2      	ldrb	r2, [r4, #2]
   1af84:	7863      	ldrb	r3, [r4, #1]
   1af86:	4053      	eors	r3, r2
   1af88:	78e2      	ldrb	r2, [r4, #3]
   1af8a:	4053      	eors	r3, r2
   1af8c:	405d      	eors	r5, r3
   1af8e:	4045      	eors	r5, r0
   1af90:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1af92:	7860      	ldrb	r0, [r4, #1]
   1af94:	7827      	ldrb	r7, [r4, #0]
   1af96:	f7ff ff63 	bl	1ae60 <_double_byte>
   1af9a:	4605      	mov	r5, r0
   1af9c:	78a0      	ldrb	r0, [r4, #2]
   1af9e:	f7ff ff5f 	bl	1ae60 <_double_byte>
   1afa2:	78a3      	ldrb	r3, [r4, #2]
   1afa4:	405f      	eors	r7, r3
   1afa6:	78e3      	ldrb	r3, [r4, #3]
   1afa8:	405f      	eors	r7, r3
   1afaa:	407d      	eors	r5, r7
   1afac:	4045      	eors	r5, r0
   1afae:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1afb0:	78a0      	ldrb	r0, [r4, #2]
   1afb2:	7865      	ldrb	r5, [r4, #1]
   1afb4:	7827      	ldrb	r7, [r4, #0]
   1afb6:	f7ff ff53 	bl	1ae60 <_double_byte>
   1afba:	406f      	eors	r7, r5
   1afbc:	4605      	mov	r5, r0
   1afbe:	78e0      	ldrb	r0, [r4, #3]
   1afc0:	f7ff ff4e 	bl	1ae60 <_double_byte>
   1afc4:	78e3      	ldrb	r3, [r4, #3]
   1afc6:	405f      	eors	r7, r3
   1afc8:	407d      	eors	r5, r7
   1afca:	4045      	eors	r5, r0
   1afcc:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1afce:	7820      	ldrb	r0, [r4, #0]
   1afd0:	f7ff ff46 	bl	1ae60 <_double_byte>
   1afd4:	7863      	ldrb	r3, [r4, #1]
   1afd6:	7825      	ldrb	r5, [r4, #0]
   1afd8:	405d      	eors	r5, r3
   1afda:	78a3      	ldrb	r3, [r4, #2]
   1afdc:	405d      	eors	r5, r3
   1afde:	4045      	eors	r5, r0
   1afe0:	78e0      	ldrb	r0, [r4, #3]
   1afe2:	f7ff ff3d 	bl	1ae60 <_double_byte>
   1afe6:	b2ed      	uxtb	r5, r5
   1afe8:	4045      	eors	r5, r0
   1afea:	70f5      	strb	r5, [r6, #3]
}
   1afec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001afee <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1afee:	b570      	push	{r4, r5, r6, lr}
   1aff0:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1aff2:	4605      	mov	r5, r0
{
   1aff4:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1aff6:	2800      	cmp	r0, #0
   1aff8:	d049      	beq.n	1b08e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1affa:	2900      	cmp	r1, #0
   1affc:	d049      	beq.n	1b092 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1affe:	2a00      	cmp	r2, #0
   1b000:	d049      	beq.n	1b096 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1b002:	2310      	movs	r3, #16
   1b004:	460a      	mov	r2, r1
   1b006:	4668      	mov	r0, sp
   1b008:	4619      	mov	r1, r3
   1b00a:	f7ff ff1a 	bl	1ae42 <_copy>
	add_round_key(state, s->words);
   1b00e:	4621      	mov	r1, r4
   1b010:	4668      	mov	r0, sp
   1b012:	f7ff ff2e 	bl	1ae72 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1b016:	3410      	adds	r4, #16
   1b018:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1b01c:	4668      	mov	r0, sp
   1b01e:	f7f2 f9fb 	bl	d418 <sub_bytes>
		shift_rows(state);
   1b022:	4668      	mov	r0, sp
   1b024:	f7ff ff6a 	bl	1aefc <shift_rows>
	mult_row_column(t, s);
   1b028:	4669      	mov	r1, sp
   1b02a:	a804      	add	r0, sp, #16
   1b02c:	f7ff ff9f 	bl	1af6e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1b030:	a901      	add	r1, sp, #4
   1b032:	a805      	add	r0, sp, #20
   1b034:	f7ff ff9b 	bl	1af6e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1b038:	a902      	add	r1, sp, #8
   1b03a:	a806      	add	r0, sp, #24
   1b03c:	f7ff ff97 	bl	1af6e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1b040:	a903      	add	r1, sp, #12
   1b042:	a807      	add	r0, sp, #28
   1b044:	f7ff ff93 	bl	1af6e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b048:	2310      	movs	r3, #16
   1b04a:	4668      	mov	r0, sp
   1b04c:	4619      	mov	r1, r3
   1b04e:	eb0d 0203 	add.w	r2, sp, r3
   1b052:	f7ff fef6 	bl	1ae42 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1b056:	4621      	mov	r1, r4
   1b058:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1b05a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1b05c:	f7ff ff09 	bl	1ae72 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1b060:	42a6      	cmp	r6, r4
   1b062:	d1db      	bne.n	1b01c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1b064:	f7f2 f9d8 	bl	d418 <sub_bytes>
	shift_rows(state);
   1b068:	4668      	mov	r0, sp
   1b06a:	f7ff ff47 	bl	1aefc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1b06e:	4631      	mov	r1, r6
   1b070:	4668      	mov	r0, sp
   1b072:	f7ff fefe 	bl	1ae72 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1b076:	2310      	movs	r3, #16
   1b078:	466a      	mov	r2, sp
   1b07a:	4619      	mov	r1, r3
   1b07c:	4628      	mov	r0, r5
   1b07e:	f7ff fee0 	bl	1ae42 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1b082:	4668      	mov	r0, sp
   1b084:	2210      	movs	r2, #16
   1b086:	2100      	movs	r1, #0
   1b088:	f7ff fee8 	bl	1ae5c <_set>

	return TC_CRYPTO_SUCCESS;
   1b08c:	2001      	movs	r0, #1
}
   1b08e:	b008      	add	sp, #32
   1b090:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b092:	4608      	mov	r0, r1
   1b094:	e7fb      	b.n	1b08e <tc_aes_encrypt+0xa0>
   1b096:	4610      	mov	r0, r2
   1b098:	e7f9      	b.n	1b08e <tc_aes_encrypt+0xa0>

0001b09a <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b09a:	460a      	mov	r2, r1
{
   1b09c:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b09e:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1b0a2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b0a4:	2b00      	cmp	r3, #0
   1b0a6:	bfb4      	ite	lt
   1b0a8:	2387      	movlt	r3, #135	; 0x87
   1b0aa:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b0ac:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b0b0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b0b4:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1b0b6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b0ba:	d002      	beq.n	1b0c2 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b0bc:	7813      	ldrb	r3, [r2, #0]
   1b0be:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b0c0:	e7f4      	b.n	1b0ac <gf_double+0x12>
	}
}
   1b0c2:	bd10      	pop	{r4, pc}

0001b0c4 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b0c4:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b0c6:	b120      	cbz	r0, 1b0d2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b0c8:	2258      	movs	r2, #88	; 0x58
   1b0ca:	2100      	movs	r1, #0
   1b0cc:	f7ff fec6 	bl	1ae5c <_set>
   1b0d0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b0d2:	bd08      	pop	{r3, pc}

0001b0d4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b0d4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b0d6:	4604      	mov	r4, r0
   1b0d8:	b188      	cbz	r0, 1b0fe <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b0da:	2210      	movs	r2, #16
   1b0dc:	2100      	movs	r1, #0
   1b0de:	f7ff febd 	bl	1ae5c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b0e2:	2210      	movs	r2, #16
   1b0e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b0e8:	2100      	movs	r1, #0
   1b0ea:	f7ff feb7 	bl	1ae5c <_set>
	s->leftover_offset = 0;
   1b0ee:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b0f0:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1b0f2:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1b0f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b0f8:	2001      	movs	r0, #1
   1b0fa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1b0fe:	bd10      	pop	{r4, pc}

0001b100 <tc_cmac_setup>:
{
   1b100:	b570      	push	{r4, r5, r6, lr}
   1b102:	460d      	mov	r5, r1
   1b104:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1b106:	4604      	mov	r4, r0
   1b108:	b310      	cbz	r0, 1b150 <_flash_used+0x34>
   1b10a:	b311      	cbz	r1, 1b152 <_flash_used+0x36>
	_set(s, 0, sizeof(*s));
   1b10c:	2258      	movs	r2, #88	; 0x58
   1b10e:	2100      	movs	r1, #0
   1b110:	f7ff fea4 	bl	1ae5c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1b114:	4629      	mov	r1, r5
   1b116:	4630      	mov	r0, r6
	s->sched = sched;
   1b118:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1b11a:	f7f2 f989 	bl	d430 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b11e:	2210      	movs	r2, #16
   1b120:	2100      	movs	r1, #0
   1b122:	4620      	mov	r0, r4
   1b124:	f7ff fe9a 	bl	1ae5c <_set>
	gf_double (s->K1, s->iv);
   1b128:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b12c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b12e:	4621      	mov	r1, r4
   1b130:	4620      	mov	r0, r4
   1b132:	f7ff ff5c 	bl	1afee <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1b136:	4621      	mov	r1, r4
   1b138:	4628      	mov	r0, r5
   1b13a:	f7ff ffae 	bl	1b09a <gf_double>
	gf_double (s->K2, s->K1);
   1b13e:	4629      	mov	r1, r5
   1b140:	f104 0020 	add.w	r0, r4, #32
   1b144:	f7ff ffa9 	bl	1b09a <gf_double>
	tc_cmac_init(s);
   1b148:	4620      	mov	r0, r4
   1b14a:	f7ff ffc3 	bl	1b0d4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1b14e:	2001      	movs	r0, #1
}
   1b150:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b152:	4608      	mov	r0, r1
   1b154:	e7fc      	b.n	1b150 <_flash_used+0x34>

0001b156 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1b156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b15a:	460d      	mov	r5, r1
   1b15c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b15e:	4604      	mov	r4, r0
   1b160:	2800      	cmp	r0, #0
   1b162:	d061      	beq.n	1b228 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1b164:	b912      	cbnz	r2, 1b16c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1b166:	2001      	movs	r0, #1
}
   1b168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1b16c:	2900      	cmp	r1, #0
   1b16e:	d05b      	beq.n	1b228 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1b170:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1b174:	ea53 0102 	orrs.w	r1, r3, r2
   1b178:	d056      	beq.n	1b228 <tc_cmac_update+0xd2>
	s->countdown--;
   1b17a:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1b17c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1b180:	f142 32ff 	adc.w	r2, r2, #4294967295
   1b184:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1b188:	f1b8 0f00 	cmp.w	r8, #0
   1b18c:	d02a      	beq.n	1b1e4 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b18e:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b192:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1b196:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b198:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1b19a:	d208      	bcs.n	1b1ae <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b19c:	462a      	mov	r2, r5
   1b19e:	4633      	mov	r3, r6
   1b1a0:	4631      	mov	r1, r6
   1b1a2:	f7ff fe4e 	bl	1ae42 <_copy>
			s->leftover_offset += data_length;
   1b1a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b1a8:	4432      	add	r2, r6
   1b1aa:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1b1ac:	e7db      	b.n	1b166 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1b1ae:	463b      	mov	r3, r7
   1b1b0:	462a      	mov	r2, r5
   1b1b2:	4639      	mov	r1, r7
   1b1b4:	f7ff fe45 	bl	1ae42 <_copy>
		s->leftover_offset = 0;
   1b1b8:	2300      	movs	r3, #0
   1b1ba:	3e10      	subs	r6, #16
   1b1bc:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b1be:	4446      	add	r6, r8
		data += remaining_space;
   1b1c0:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b1c2:	1e63      	subs	r3, r4, #1
   1b1c4:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b1c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b1cc:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b1d0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b1d2:	ea82 0200 	eor.w	r2, r2, r0
   1b1d6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b1d8:	d1f6      	bne.n	1b1c8 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b1da:	4621      	mov	r1, r4
   1b1dc:	4620      	mov	r0, r4
   1b1de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b1e0:	f7ff ff05 	bl	1afee <tc_aes_encrypt>
   1b1e4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b1e8:	2e10      	cmp	r6, #16
   1b1ea:	d80a      	bhi.n	1b202 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1b1ec:	2e00      	cmp	r6, #0
   1b1ee:	d0ba      	beq.n	1b166 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1b1f0:	4633      	mov	r3, r6
   1b1f2:	462a      	mov	r2, r5
   1b1f4:	4631      	mov	r1, r6
   1b1f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b1fa:	f7ff fe22 	bl	1ae42 <_copy>
		s->leftover_offset = data_length;
   1b1fe:	6466      	str	r6, [r4, #68]	; 0x44
   1b200:	e7b1      	b.n	1b166 <tc_cmac_update+0x10>
   1b202:	1e63      	subs	r3, r4, #1
   1b204:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1b206:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b20a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b20e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b210:	ea82 0200 	eor.w	r2, r2, r0
   1b214:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b216:	d1f6      	bne.n	1b206 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b218:	4621      	mov	r1, r4
   1b21a:	4620      	mov	r0, r4
   1b21c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b21e:	f7ff fee6 	bl	1afee <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b222:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b224:	3e10      	subs	r6, #16
   1b226:	e7df      	b.n	1b1e8 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1b228:	2000      	movs	r0, #0
   1b22a:	e79d      	b.n	1b168 <tc_cmac_update+0x12>

0001b22c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b22c:	b570      	push	{r4, r5, r6, lr}
   1b22e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b230:	4605      	mov	r5, r0
   1b232:	b1f0      	cbz	r0, 1b272 <tc_cmac_final+0x46>
   1b234:	b371      	cbz	r1, 1b294 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b236:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b238:	2a10      	cmp	r2, #16
   1b23a:	d11b      	bne.n	1b274 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b23c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b23e:	1e63      	subs	r3, r4, #1
   1b240:	3901      	subs	r1, #1
   1b242:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b246:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b24a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b24e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b250:	ea82 0206 	eor.w	r2, r2, r6
   1b254:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1b258:	ea82 0206 	eor.w	r2, r2, r6
   1b25c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b25e:	d1f2      	bne.n	1b246 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b260:	4621      	mov	r1, r4
   1b262:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b264:	4628      	mov	r0, r5
   1b266:	f7ff fec2 	bl	1afee <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b26a:	4620      	mov	r0, r4
   1b26c:	f7ff ff2a 	bl	1b0c4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b270:	2001      	movs	r0, #1
}
   1b272:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b274:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b278:	2100      	movs	r1, #0
   1b27a:	f1c2 0210 	rsb	r2, r2, #16
   1b27e:	4420      	add	r0, r4
   1b280:	f7ff fdec 	bl	1ae5c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b284:	2280      	movs	r2, #128	; 0x80
   1b286:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1b288:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b28c:	4423      	add	r3, r4
   1b28e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b292:	e7d4      	b.n	1b23e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b294:	4608      	mov	r0, r1
   1b296:	e7ec      	b.n	1b272 <tc_cmac_final+0x46>

0001b298 <tc_sha256_update>:
{
   1b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b29a:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1b29c:	b110      	cbz	r0, 1b2a4 <tc_sha256_update+0xc>
   1b29e:	b1f9      	cbz	r1, 1b2e0 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1b2a0:	b90a      	cbnz	r2, 1b2a6 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1b2a2:	2001      	movs	r0, #1
}
   1b2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1b2a6:	2600      	movs	r6, #0
   1b2a8:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1b2aa:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1b2ae:	42a5      	cmp	r5, r4
   1b2b0:	d0f7      	beq.n	1b2a2 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1b2b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b2b4:	1c5a      	adds	r2, r3, #1
   1b2b6:	6682      	str	r2, [r0, #104]	; 0x68
   1b2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b2bc:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b2be:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1b2c0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b2c4:	d9f3      	bls.n	1b2ae <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1b2c6:	4639      	mov	r1, r7
   1b2c8:	f7f2 f906 	bl	d4d8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b2cc:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1b2d0:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1b2d4:	f142 0200 	adc.w	r2, r2, #0
   1b2d8:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1b2dc:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b2de:	e7e6      	b.n	1b2ae <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1b2e0:	4608      	mov	r0, r1
   1b2e2:	e7df      	b.n	1b2a4 <tc_sha256_update+0xc>

0001b2e4 <tc_sha256_final>:
{
   1b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2e6:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1b2e8:	4605      	mov	r5, r0
   1b2ea:	2800      	cmp	r0, #0
   1b2ec:	d055      	beq.n	1b39a <tc_sha256_final+0xb6>
   1b2ee:	2900      	cmp	r1, #0
   1b2f0:	d054      	beq.n	1b39c <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1b2f2:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1b2f4:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1b2f8:	00d8      	lsls	r0, r3, #3
   1b2fa:	1812      	adds	r2, r2, r0
   1b2fc:	f141 0100 	adc.w	r1, r1, #0
   1b300:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b304:	2280      	movs	r2, #128	; 0x80
   1b306:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b308:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b30a:	4423      	add	r3, r4
   1b30c:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1b30e:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1b316:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b31a:	d90a      	bls.n	1b332 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1b31c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1b320:	4639      	mov	r1, r7
   1b322:	4430      	add	r0, r6
   1b324:	f7ff fd9a 	bl	1ae5c <_set>
		compress(s->iv, s->leftover);
   1b328:	4631      	mov	r1, r6
   1b32a:	4620      	mov	r0, r4
   1b32c:	f7f2 f8d4 	bl	d4d8 <compress>
		s->leftover_offset = 0;
   1b330:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1b332:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1b334:	2100      	movs	r1, #0
   1b336:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1b33a:	4430      	add	r0, r6
   1b33c:	f7ff fd8e 	bl	1ae5c <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b340:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1b342:	4631      	mov	r1, r6
   1b344:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b346:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1b348:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b34a:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1b34c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b350:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b354:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b356:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1b358:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b35a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b35e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1b362:	f7f2 f8b9 	bl	d4d8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b366:	1f26      	subs	r6, r4, #4
   1b368:	1d2b      	adds	r3, r5, #4
   1b36a:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1b36e:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b372:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1b374:	0e11      	lsrs	r1, r2, #24
   1b376:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1b37a:	0c11      	lsrs	r1, r2, #16
   1b37c:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1b380:	0a11      	lsrs	r1, r2, #8
   1b382:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1b386:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b38a:	4283      	cmp	r3, r0
   1b38c:	d1ef      	bne.n	1b36e <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1b38e:	4620      	mov	r0, r4
   1b390:	2270      	movs	r2, #112	; 0x70
   1b392:	2100      	movs	r1, #0
   1b394:	f7ff fd62 	bl	1ae5c <_set>
	return TC_CRYPTO_SUCCESS;
   1b398:	2001      	movs	r0, #1
}
   1b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b39c:	4608      	mov	r0, r1
   1b39e:	e7fc      	b.n	1b39a <tc_sha256_final+0xb6>

0001b3a0 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1b3a0:	b530      	push	{r4, r5, lr}
   1b3a2:	1e43      	subs	r3, r0, #1
   1b3a4:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1b3a6:	42a9      	cmp	r1, r5
   1b3a8:	d106      	bne.n	1b3b8 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b3aa:	2136      	movs	r1, #54	; 0x36
   1b3ac:	245c      	movs	r4, #92	; 0x5c
   1b3ae:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b3b0:	1a13      	subs	r3, r2, r0
   1b3b2:	2b3f      	cmp	r3, #63	; 0x3f
   1b3b4:	d90c      	bls.n	1b3d0 <rekey+0x30>
	}
}
   1b3b6:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1b3b8:	780c      	ldrb	r4, [r1, #0]
   1b3ba:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1b3be:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1b3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b3c6:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1b3ca:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1b3ce:	e7ea      	b.n	1b3a6 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b3d0:	f802 1b01 	strb.w	r1, [r2], #1
   1b3d4:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b3d8:	e7ea      	b.n	1b3b0 <rekey+0x10>

0001b3da <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1b3da:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3dc:	460e      	mov	r6, r1
   1b3de:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1b3e0:	4605      	mov	r5, r0
{
   1b3e2:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1b3e4:	b1b8      	cbz	r0, 1b416 <tc_hmac_set_key+0x3c>
   1b3e6:	b341      	cbz	r1, 1b43a <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1b3e8:	b34a      	cbz	r2, 1b43e <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b3ea:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1b3ec:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b3f0:	d813      	bhi.n	1b41a <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1b3f2:	a810      	add	r0, sp, #64	; 0x40
   1b3f4:	f7f2 f958 	bl	d6a8 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1b3f8:	4622      	mov	r2, r4
   1b3fa:	4669      	mov	r1, sp
   1b3fc:	a810      	add	r0, sp, #64	; 0x40
   1b3fe:	f7ff ff4b 	bl	1b298 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1b402:	a910      	add	r1, sp, #64	; 0x40
   1b404:	a834      	add	r0, sp, #208	; 0xd0
   1b406:	f7ff ff6d 	bl	1b2e4 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1b40a:	4622      	mov	r2, r4
   1b40c:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1b40e:	4638      	mov	r0, r7
   1b410:	f7ff ffc6 	bl	1b3a0 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1b414:	2001      	movs	r0, #1
}
   1b416:	b04d      	add	sp, #308	; 0x134
   1b418:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1b41a:	f7f2 f945 	bl	d6a8 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b41e:	4622      	mov	r2, r4
   1b420:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b422:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b426:	4628      	mov	r0, r5
   1b428:	f7ff ff36 	bl	1b298 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b42c:	4629      	mov	r1, r5
   1b42e:	4620      	mov	r0, r4
   1b430:	f7ff ff58 	bl	1b2e4 <tc_sha256_final>
		rekey(ctx->key,
   1b434:	2220      	movs	r2, #32
   1b436:	4621      	mov	r1, r4
   1b438:	e7e9      	b.n	1b40e <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1b43a:	4608      	mov	r0, r1
   1b43c:	e7eb      	b.n	1b416 <tc_hmac_set_key+0x3c>
   1b43e:	4610      	mov	r0, r2
   1b440:	e7e9      	b.n	1b416 <tc_hmac_set_key+0x3c>

0001b442 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1b442:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b444:	4604      	mov	r4, r0
   1b446:	b140      	cbz	r0, 1b45a <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1b448:	f7f2 f92e 	bl	d6a8 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1b44c:	2240      	movs	r2, #64	; 0x40
   1b44e:	4620      	mov	r0, r4
   1b450:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1b454:	f7ff ff20 	bl	1b298 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b458:	2001      	movs	r0, #1
}
   1b45a:	bd10      	pop	{r4, pc}

0001b45c <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1b45c:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b45e:	b110      	cbz	r0, 1b466 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1b460:	f7ff ff1a 	bl	1b298 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b464:	2001      	movs	r0, #1
}
   1b466:	bd08      	pop	{r3, pc}

0001b468 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1b468:	b570      	push	{r4, r5, r6, lr}
   1b46a:	460e      	mov	r6, r1
   1b46c:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b46e:	4605      	mov	r5, r0
   1b470:	b1f0      	cbz	r0, 1b4b0 <tc_hmac_final+0x48>
   1b472:	2920      	cmp	r1, #32
   1b474:	d11c      	bne.n	1b4b0 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1b476:	b1ea      	cbz	r2, 1b4b4 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1b478:	4611      	mov	r1, r2
   1b47a:	f7ff ff33 	bl	1b2e4 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1b47e:	4620      	mov	r0, r4
   1b480:	f7f2 f912 	bl	d6a8 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1b484:	2240      	movs	r2, #64	; 0x40
   1b486:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1b48a:	4620      	mov	r0, r4
   1b48c:	f7ff ff04 	bl	1b298 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1b490:	4632      	mov	r2, r6
   1b492:	4629      	mov	r1, r5
   1b494:	4620      	mov	r0, r4
   1b496:	f7ff feff 	bl	1b298 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1b49a:	4621      	mov	r1, r4
   1b49c:	4628      	mov	r0, r5
   1b49e:	f7ff ff21 	bl	1b2e4 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1b4a2:	4620      	mov	r0, r4
   1b4a4:	22f0      	movs	r2, #240	; 0xf0
   1b4a6:	2100      	movs	r1, #0
   1b4a8:	f7ff fcd8 	bl	1ae5c <_set>

	return TC_CRYPTO_SUCCESS;
   1b4ac:	2001      	movs	r0, #1
}
   1b4ae:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b4b0:	2000      	movs	r0, #0
   1b4b2:	e7fc      	b.n	1b4ae <tc_hmac_final+0x46>
   1b4b4:	4610      	mov	r0, r2
   1b4b6:	e7fa      	b.n	1b4ae <tc_hmac_final+0x46>

0001b4b8 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1b4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4bc:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1b4be:	f04f 0b01 	mov.w	fp, #1
{
   1b4c2:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1b4c4:	2300      	movs	r3, #0
{
   1b4c6:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b4c8:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1b4cc:	4631      	mov	r1, r6
{
   1b4ce:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b4d0:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1b4d2:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1b4d6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1b4da:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b4de:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b4e2:	f7ff ff7a 	bl	1b3da <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1b4e6:	4620      	mov	r0, r4
   1b4e8:	f7ff ffab 	bl	1b442 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b4ec:	2220      	movs	r2, #32
   1b4ee:	4629      	mov	r1, r5
   1b4f0:	4620      	mov	r0, r4
   1b4f2:	f7ff ffb3 	bl	1b45c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1b4f6:	465a      	mov	r2, fp
   1b4f8:	4620      	mov	r0, r4
   1b4fa:	f10d 0106 	add.w	r1, sp, #6
   1b4fe:	f7ff ffad 	bl	1b45c <tc_hmac_update>

	if (data && datalen)
   1b502:	f1b8 0f00 	cmp.w	r8, #0
   1b506:	d007      	beq.n	1b518 <update+0x60>
   1b508:	f1b9 0f00 	cmp.w	r9, #0
   1b50c:	d004      	beq.n	1b518 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1b50e:	464a      	mov	r2, r9
   1b510:	4641      	mov	r1, r8
   1b512:	4620      	mov	r0, r4
   1b514:	f7ff ffa2 	bl	1b45c <tc_hmac_update>
	if (additional_data && additional_datalen)
   1b518:	b13f      	cbz	r7, 1b52a <update+0x72>
   1b51a:	f1ba 0f00 	cmp.w	sl, #0
   1b51e:	d004      	beq.n	1b52a <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1b520:	4652      	mov	r2, sl
   1b522:	4639      	mov	r1, r7
   1b524:	4620      	mov	r0, r4
   1b526:	f7ff ff99 	bl	1b45c <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1b52a:	4622      	mov	r2, r4
   1b52c:	2120      	movs	r1, #32
   1b52e:	4630      	mov	r0, r6
   1b530:	f7ff ff9a 	bl	1b468 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b534:	2220      	movs	r2, #32
   1b536:	4631      	mov	r1, r6
   1b538:	4620      	mov	r0, r4
   1b53a:	f7ff ff4e 	bl	1b3da <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1b53e:	4620      	mov	r0, r4
   1b540:	f7ff ff7f 	bl	1b442 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b544:	2220      	movs	r2, #32
   1b546:	4629      	mov	r1, r5
   1b548:	4620      	mov	r0, r4
   1b54a:	f7ff ff87 	bl	1b45c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b54e:	4622      	mov	r2, r4
   1b550:	2120      	movs	r1, #32
   1b552:	4628      	mov	r0, r5
   1b554:	f7ff ff88 	bl	1b468 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1b558:	f1b8 0f00 	cmp.w	r8, #0
   1b55c:	d03a      	beq.n	1b5d4 <update+0x11c>
   1b55e:	f1b9 0f00 	cmp.w	r9, #0
   1b562:	d037      	beq.n	1b5d4 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b564:	2220      	movs	r2, #32
   1b566:	4631      	mov	r1, r6
   1b568:	4620      	mov	r0, r4
   1b56a:	f7ff ff36 	bl	1b3da <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1b56e:	4620      	mov	r0, r4
   1b570:	f7ff ff67 	bl	1b442 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b574:	2220      	movs	r2, #32
   1b576:	4629      	mov	r1, r5
   1b578:	4620      	mov	r0, r4
   1b57a:	f7ff ff6f 	bl	1b45c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1b57e:	2201      	movs	r2, #1
   1b580:	f10d 0107 	add.w	r1, sp, #7
   1b584:	4620      	mov	r0, r4
   1b586:	f7ff ff69 	bl	1b45c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1b58a:	464a      	mov	r2, r9
   1b58c:	4641      	mov	r1, r8
   1b58e:	4620      	mov	r0, r4
   1b590:	f7ff ff64 	bl	1b45c <tc_hmac_update>
	if (additional_data && additional_datalen)
   1b594:	b13f      	cbz	r7, 1b5a6 <update+0xee>
   1b596:	f1ba 0f00 	cmp.w	sl, #0
   1b59a:	d004      	beq.n	1b5a6 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1b59c:	4652      	mov	r2, sl
   1b59e:	4639      	mov	r1, r7
   1b5a0:	4620      	mov	r0, r4
   1b5a2:	f7ff ff5b 	bl	1b45c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1b5a6:	4622      	mov	r2, r4
   1b5a8:	2120      	movs	r1, #32
   1b5aa:	4630      	mov	r0, r6
   1b5ac:	f7ff ff5c 	bl	1b468 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b5b0:	2220      	movs	r2, #32
   1b5b2:	4631      	mov	r1, r6
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	f7ff ff10 	bl	1b3da <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1b5ba:	4620      	mov	r0, r4
   1b5bc:	f7ff ff41 	bl	1b442 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b5c0:	2220      	movs	r2, #32
   1b5c2:	4629      	mov	r1, r5
   1b5c4:	4620      	mov	r0, r4
   1b5c6:	f7ff ff49 	bl	1b45c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b5ca:	4622      	mov	r2, r4
   1b5cc:	2120      	movs	r1, #32
   1b5ce:	4628      	mov	r0, r5
   1b5d0:	f7ff ff4a 	bl	1b468 <tc_hmac_final>
}
   1b5d4:	b003      	add	sp, #12
   1b5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b5da <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1b5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b5dc:	460c      	mov	r4, r1
   1b5de:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1b5e0:	4605      	mov	r5, r0
   1b5e2:	b1b0      	cbz	r0, 1b612 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1b5e4:	b1b9      	cbz	r1, 1b616 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1b5e6:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1b5e8:	2220      	movs	r2, #32
   1b5ea:	2100      	movs	r1, #0
   1b5ec:	30f0      	adds	r0, #240	; 0xf0
   1b5ee:	f7ff fc35 	bl	1ae5c <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1b5f2:	2220      	movs	r2, #32
   1b5f4:	2101      	movs	r1, #1
   1b5f6:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1b5fa:	f7ff fc2f 	bl	1ae5c <_set>
	update(prng, personalization, plen, 0, 0);
   1b5fe:	4628      	mov	r0, r5
   1b600:	4633      	mov	r3, r6
   1b602:	463a      	mov	r2, r7
   1b604:	4621      	mov	r1, r4
   1b606:	9600      	str	r6, [sp, #0]
   1b608:	f7ff ff56 	bl	1b4b8 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1b60c:	2001      	movs	r0, #1
	prng->countdown = 0;
   1b60e:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1b612:	b003      	add	sp, #12
   1b614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b616:	4608      	mov	r0, r1
   1b618:	e7fb      	b.n	1b612 <tc_hmac_prng_init+0x38>

0001b61a <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1b61a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b61c:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1b61e:	4605      	mov	r5, r0
   1b620:	b180      	cbz	r0, 1b644 <tc_hmac_prng_reseed+0x2a>
   1b622:	b179      	cbz	r1, 1b644 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1b624:	2a1f      	cmp	r2, #31
   1b626:	d90d      	bls.n	1b644 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1b628:	b153      	cbz	r3, 1b640 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1b62a:	b16c      	cbz	r4, 1b648 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1b62c:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1b62e:	f7ff ff43 	bl	1b4b8 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1b632:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1b636:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1b638:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1b63c:	b003      	add	sp, #12
   1b63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1b640:	9300      	str	r3, [sp, #0]
   1b642:	e7f4      	b.n	1b62e <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1b644:	2000      	movs	r0, #0
   1b646:	e7f9      	b.n	1b63c <tc_hmac_prng_reseed+0x22>
   1b648:	4620      	mov	r0, r4
   1b64a:	e7f7      	b.n	1b63c <tc_hmac_prng_reseed+0x22>

0001b64c <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1b64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b650:	460d      	mov	r5, r1
   1b652:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1b654:	4680      	mov	r8, r0
   1b656:	b3d8      	cbz	r0, 1b6d0 <tc_hmac_prng_generate+0x84>
   1b658:	b3d2      	cbz	r2, 1b6d0 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1b65a:	1e4b      	subs	r3, r1, #1
   1b65c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1b660:	d236      	bcs.n	1b6d0 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1b662:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1b666:	b3ab      	cbz	r3, 1b6d4 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1b668:	3b01      	subs	r3, #1
   1b66a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b66e:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b672:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b676:	2220      	movs	r2, #32
   1b678:	4649      	mov	r1, r9
   1b67a:	4620      	mov	r0, r4
   1b67c:	f7ff fead 	bl	1b3da <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1b680:	4620      	mov	r0, r4
   1b682:	f7ff fede 	bl	1b442 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b686:	2220      	movs	r2, #32
   1b688:	4639      	mov	r1, r7
   1b68a:	4620      	mov	r0, r4
   1b68c:	f7ff fee6 	bl	1b45c <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b690:	4622      	mov	r2, r4
   1b692:	2120      	movs	r1, #32
   1b694:	4638      	mov	r0, r7
   1b696:	f7ff fee7 	bl	1b468 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1b69a:	2d20      	cmp	r5, #32
   1b69c:	462e      	mov	r6, r5
   1b69e:	bf28      	it	cs
   1b6a0:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1b6a2:	4640      	mov	r0, r8
   1b6a4:	4633      	mov	r3, r6
   1b6a6:	463a      	mov	r2, r7
   1b6a8:	4631      	mov	r1, r6
   1b6aa:	f7ff fbca 	bl	1ae42 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1b6ae:	2d20      	cmp	r5, #32
   1b6b0:	bf38      	it	cc
   1b6b2:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1b6b4:	3d20      	subs	r5, #32
		out += bufferlen;
   1b6b6:	44b0      	add	r8, r6
	while (outlen != 0) {
   1b6b8:	d1dd      	bne.n	1b676 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1b6ba:	4620      	mov	r0, r4
   1b6bc:	462b      	mov	r3, r5
   1b6be:	462a      	mov	r2, r5
   1b6c0:	4629      	mov	r1, r5
   1b6c2:	9500      	str	r5, [sp, #0]
   1b6c4:	f7ff fef8 	bl	1b4b8 <update>

	return TC_CRYPTO_SUCCESS;
   1b6c8:	2001      	movs	r0, #1
}
   1b6ca:	b003      	add	sp, #12
   1b6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1b6d0:	2000      	movs	r0, #0
   1b6d2:	e7fa      	b.n	1b6ca <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1b6d4:	f04f 30ff 	mov.w	r0, #4294967295
   1b6d8:	e7f7      	b.n	1b6ca <tc_hmac_prng_generate+0x7e>

0001b6da <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b6da:	2100      	movs	r1, #0
   1b6dc:	2001      	movs	r0, #1
   1b6de:	f7f2 b901 	b.w	d8e4 <z_arm_fatal_error>

0001b6e2 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b6e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1b6e4:	f383 880b 	msr	PSPLIM, r3
}
   1b6e8:	4770      	bx	lr

0001b6ea <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b6ea:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1b6ec:	6800      	ldr	r0, [r0, #0]
   1b6ee:	f7f2 b8f9 	b.w	d8e4 <z_arm_fatal_error>

0001b6f2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b6f2:	b508      	push	{r3, lr}
	handler();
   1b6f4:	f7f2 f924 	bl	d940 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1b6f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1b6fc:	f7f2 bb68 	b.w	ddd0 <z_arm_exc_exit>

0001b700 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1b700:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1b704:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1b708:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1b70a:	bf08      	it	eq
   1b70c:	f06f 0015 	mvneq.w	r0, #21
   1b710:	4770      	bx	lr

0001b712 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1b712:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b716:	4684      	mov	ip, r0
   1b718:	4688      	mov	r8, r1
	register const char *s = nptr;
   1b71a:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1b71c:	4621      	mov	r1, r4
   1b71e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1b722:	2b20      	cmp	r3, #32
   1b724:	d0fa      	beq.n	1b71c <strtol+0xa>
   1b726:	f1a3 0009 	sub.w	r0, r3, #9
   1b72a:	2804      	cmp	r0, #4
   1b72c:	d9f6      	bls.n	1b71c <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1b72e:	2b2d      	cmp	r3, #45	; 0x2d
   1b730:	d12d      	bne.n	1b78e <strtol+0x7c>
		neg = 1;
		c = *s++;
   1b732:	784b      	ldrb	r3, [r1, #1]
   1b734:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1b736:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1b738:	2a00      	cmp	r2, #0
   1b73a:	d05a      	beq.n	1b7f2 <strtol+0xe0>
   1b73c:	2a10      	cmp	r2, #16
   1b73e:	d109      	bne.n	1b754 <strtol+0x42>
   1b740:	2b30      	cmp	r3, #48	; 0x30
   1b742:	d107      	bne.n	1b754 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1b744:	7823      	ldrb	r3, [r4, #0]
   1b746:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b74a:	2b58      	cmp	r3, #88	; 0x58
   1b74c:	d14c      	bne.n	1b7e8 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1b74e:	2210      	movs	r2, #16
		c = s[1];
   1b750:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1b752:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1b754:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1b756:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1b75a:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1b75c:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1b760:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1b762:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1b766:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1b76a:	2d09      	cmp	r5, #9
   1b76c:	d815      	bhi.n	1b79a <strtol+0x88>
			c -= '0';
   1b76e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1b770:	429a      	cmp	r2, r3
   1b772:	dd22      	ble.n	1b7ba <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1b774:	1c75      	adds	r5, r6, #1
   1b776:	d007      	beq.n	1b788 <strtol+0x76>
   1b778:	4570      	cmp	r0, lr
   1b77a:	d81b      	bhi.n	1b7b4 <strtol+0xa2>
   1b77c:	d101      	bne.n	1b782 <strtol+0x70>
   1b77e:	454b      	cmp	r3, r9
   1b780:	dc18      	bgt.n	1b7b4 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1b782:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1b784:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1b788:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1b78c:	e7eb      	b.n	1b766 <strtol+0x54>
	} else if (c == '+') {
   1b78e:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1b790:	bf04      	itt	eq
   1b792:	784b      	ldrbeq	r3, [r1, #1]
   1b794:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1b796:	2100      	movs	r1, #0
   1b798:	e7ce      	b.n	1b738 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1b79a:	f043 0520 	orr.w	r5, r3, #32
   1b79e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1b7a0:	2d19      	cmp	r5, #25
   1b7a2:	d80a      	bhi.n	1b7ba <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1b7a4:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1b7a8:	2d1a      	cmp	r5, #26
   1b7aa:	bf34      	ite	cc
   1b7ac:	2537      	movcc	r5, #55	; 0x37
   1b7ae:	2557      	movcs	r5, #87	; 0x57
   1b7b0:	1b5b      	subs	r3, r3, r5
   1b7b2:	e7dd      	b.n	1b770 <strtol+0x5e>
			any = -1;
   1b7b4:	f04f 36ff 	mov.w	r6, #4294967295
   1b7b8:	e7e6      	b.n	1b788 <strtol+0x76>
		}
	}

	if (any < 0) {
   1b7ba:	1c73      	adds	r3, r6, #1
   1b7bc:	d109      	bne.n	1b7d2 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1b7be:	f7fb fead 	bl	1751c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1b7c2:	2326      	movs	r3, #38	; 0x26
   1b7c4:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1b7c6:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1b7c8:	f1b8 0f00 	cmp.w	r8, #0
   1b7cc:	d107      	bne.n	1b7de <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1b7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1b7d2:	b101      	cbz	r1, 1b7d6 <strtol+0xc4>
		acc = -acc;
   1b7d4:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1b7d6:	f1b8 0f00 	cmp.w	r8, #0
   1b7da:	d0f8      	beq.n	1b7ce <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1b7dc:	b10e      	cbz	r6, 1b7e2 <strtol+0xd0>
   1b7de:	f104 3cff 	add.w	ip, r4, #4294967295
   1b7e2:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1b7e6:	e7f2      	b.n	1b7ce <strtol+0xbc>
	if (base == 0) {
   1b7e8:	2330      	movs	r3, #48	; 0x30
   1b7ea:	2a00      	cmp	r2, #0
   1b7ec:	d1b2      	bne.n	1b754 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1b7ee:	2208      	movs	r2, #8
   1b7f0:	e7b0      	b.n	1b754 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1b7f2:	2b30      	cmp	r3, #48	; 0x30
   1b7f4:	d0a6      	beq.n	1b744 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1b7f6:	220a      	movs	r2, #10
   1b7f8:	e7ac      	b.n	1b754 <strtol+0x42>

0001b7fa <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1b7fa:	4603      	mov	r3, r0
   1b7fc:	3901      	subs	r1, #1
   1b7fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1b802:	b90a      	cbnz	r2, 1b808 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1b804:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1b806:	4770      	bx	lr
		*d = *s;
   1b808:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1b80c:	e7f7      	b.n	1b7fe <strcpy+0x4>

0001b80e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1b80e:	b570      	push	{r4, r5, r6, lr}
   1b810:	4605      	mov	r5, r0
   1b812:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1b814:	b142      	cbz	r2, 1b828 <strncpy+0x1a>
   1b816:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1b81a:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1b81c:	b92c      	cbnz	r4, 1b82a <strncpy+0x1c>
   1b81e:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1b820:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1b824:	429a      	cmp	r2, r3
   1b826:	d1fb      	bne.n	1b820 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1b828:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1b82a:	4632      	mov	r2, r6
		*d = *s;
   1b82c:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1b830:	e7ef      	b.n	1b812 <strncpy+0x4>

0001b832 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1b832:	4603      	mov	r3, r0
	size_t n = 0;
   1b834:	2000      	movs	r0, #0

	while (*s != '\0') {
   1b836:	5c1a      	ldrb	r2, [r3, r0]
   1b838:	b902      	cbnz	r2, 1b83c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1b83a:	4770      	bx	lr
		n++;
   1b83c:	3001      	adds	r0, #1
   1b83e:	e7fa      	b.n	1b836 <strlen+0x4>

0001b840 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1b840:	4603      	mov	r3, r0
	size_t n = 0;
   1b842:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1b844:	5c1a      	ldrb	r2, [r3, r0]
   1b846:	b10a      	cbz	r2, 1b84c <strnlen+0xc>
   1b848:	4288      	cmp	r0, r1
   1b84a:	d100      	bne.n	1b84e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1b84c:	4770      	bx	lr
		n++;
   1b84e:	3001      	adds	r0, #1
   1b850:	e7f8      	b.n	1b844 <strnlen+0x4>

0001b852 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1b852:	1e43      	subs	r3, r0, #1
   1b854:	3901      	subs	r1, #1
   1b856:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b85a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1b85e:	4282      	cmp	r2, r0
   1b860:	d101      	bne.n	1b866 <strcmp+0x14>
   1b862:	2a00      	cmp	r2, #0
   1b864:	d1f7      	bne.n	1b856 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1b866:	1a10      	subs	r0, r2, r0
   1b868:	4770      	bx	lr

0001b86a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1b86a:	b510      	push	{r4, lr}
   1b86c:	3901      	subs	r1, #1
   1b86e:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1b870:	4282      	cmp	r2, r0
   1b872:	d009      	beq.n	1b888 <strncmp+0x1e>
   1b874:	7803      	ldrb	r3, [r0, #0]
   1b876:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1b87a:	42a3      	cmp	r3, r4
   1b87c:	d100      	bne.n	1b880 <strncmp+0x16>
   1b87e:	b90b      	cbnz	r3, 1b884 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1b880:	1b18      	subs	r0, r3, r4
   1b882:	e002      	b.n	1b88a <strncmp+0x20>
		s1++;
   1b884:	3001      	adds	r0, #1
		n--;
   1b886:	e7f3      	b.n	1b870 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1b888:	2000      	movs	r0, #0
}
   1b88a:	bd10      	pop	{r4, pc}

0001b88c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1b88c:	4603      	mov	r3, r0
   1b88e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1b890:	b15a      	cbz	r2, 1b8aa <memcmp+0x1e>
   1b892:	3901      	subs	r1, #1
   1b894:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1b896:	f813 0b01 	ldrb.w	r0, [r3], #1
   1b89a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1b89e:	42a3      	cmp	r3, r4
   1b8a0:	d001      	beq.n	1b8a6 <memcmp+0x1a>
   1b8a2:	4290      	cmp	r0, r2
   1b8a4:	d0f7      	beq.n	1b896 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1b8a6:	1a80      	subs	r0, r0, r2
}
   1b8a8:	bd10      	pop	{r4, pc}
		return 0;
   1b8aa:	4610      	mov	r0, r2
   1b8ac:	e7fc      	b.n	1b8a8 <memcmp+0x1c>

0001b8ae <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1b8ae:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1b8b0:	ea81 0400 	eor.w	r4, r1, r0
   1b8b4:	07a5      	lsls	r5, r4, #30
   1b8b6:	4603      	mov	r3, r0
   1b8b8:	d00b      	beq.n	1b8d2 <memcpy+0x24>
   1b8ba:	3b01      	subs	r3, #1
   1b8bc:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1b8be:	4291      	cmp	r1, r2
   1b8c0:	d11b      	bne.n	1b8fa <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1b8c4:	2a00      	cmp	r2, #0
   1b8c6:	d0fc      	beq.n	1b8c2 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1b8c8:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1b8cc:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1b8ce:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1b8d2:	079c      	lsls	r4, r3, #30
   1b8d4:	d1f6      	bne.n	1b8c4 <memcpy+0x16>
   1b8d6:	f022 0403 	bic.w	r4, r2, #3
   1b8da:	1f1d      	subs	r5, r3, #4
   1b8dc:	0896      	lsrs	r6, r2, #2
   1b8de:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1b8e0:	42b9      	cmp	r1, r7
   1b8e2:	d105      	bne.n	1b8f0 <memcpy+0x42>
   1b8e4:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1b8e8:	4423      	add	r3, r4
   1b8ea:	fb05 2206 	mla	r2, r5, r6, r2
   1b8ee:	e7e4      	b.n	1b8ba <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1b8f0:	f851 cb04 	ldr.w	ip, [r1], #4
   1b8f4:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1b8f8:	e7f2      	b.n	1b8e0 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1b8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1b902:	e7dc      	b.n	1b8be <memcpy+0x10>

0001b904 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1b904:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1b906:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1b908:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1b90a:	07a3      	lsls	r3, r4, #30
   1b90c:	d111      	bne.n	1b932 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1b90e:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1b912:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1b916:	f022 0303 	bic.w	r3, r2, #3
   1b91a:	0896      	lsrs	r6, r2, #2
   1b91c:	4423      	add	r3, r4
   1b91e:	429c      	cmp	r4, r3
   1b920:	d10d      	bne.n	1b93e <memset+0x3a>
   1b922:	f06f 0403 	mvn.w	r4, #3
   1b926:	fb04 2206 	mla	r2, r4, r6, r2
   1b92a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1b92c:	4293      	cmp	r3, r2
   1b92e:	d109      	bne.n	1b944 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1b930:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1b932:	2a00      	cmp	r2, #0
   1b934:	d0fc      	beq.n	1b930 <memset+0x2c>
		*(d_byte++) = c_byte;
   1b936:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1b93a:	3a01      	subs	r2, #1
   1b93c:	e7e5      	b.n	1b90a <memset+0x6>
		*(d_word++) = c_word;
   1b93e:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1b942:	e7ec      	b.n	1b91e <memset+0x1a>
		*(d_byte++) = c_byte;
   1b944:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b948:	e7f0      	b.n	1b92c <memset+0x28>

0001b94a <_stdout_hook_default>:
}
   1b94a:	f04f 30ff 	mov.w	r0, #4294967295
   1b94e:	4770      	bx	lr

0001b950 <bt_settings_decode_key>:
{
   1b950:	b570      	push	{r4, r5, r6, lr}
   1b952:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1b954:	2100      	movs	r1, #0
{
   1b956:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1b958:	f7ff f884 	bl	1aa64 <settings_name_next>
   1b95c:	280d      	cmp	r0, #13
   1b95e:	d118      	bne.n	1b992 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1b960:	7b23      	ldrb	r3, [r4, #12]
   1b962:	2b30      	cmp	r3, #48	; 0x30
   1b964:	d111      	bne.n	1b98a <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1b966:	2300      	movs	r3, #0
   1b968:	702b      	strb	r3, [r5, #0]
   1b96a:	f104 060c 	add.w	r6, r4, #12
   1b96e:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1b970:	462a      	mov	r2, r5
   1b972:	4620      	mov	r0, r4
   1b974:	2301      	movs	r3, #1
   1b976:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1b978:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1b97a:	f7fe fcf3 	bl	1a364 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1b97e:	42b4      	cmp	r4, r6
   1b980:	f105 35ff 	add.w	r5, r5, #4294967295
   1b984:	d1f4      	bne.n	1b970 <bt_settings_decode_key+0x20>
	return 0;
   1b986:	2000      	movs	r0, #0
}
   1b988:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1b98a:	2b31      	cmp	r3, #49	; 0x31
   1b98c:	d101      	bne.n	1b992 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1b98e:	2301      	movs	r3, #1
   1b990:	e7ea      	b.n	1b968 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1b992:	f06f 0015 	mvn.w	r0, #21
   1b996:	e7f7      	b.n	1b988 <bt_settings_decode_key+0x38>

0001b998 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1b998:	b510      	push	{r4, lr}
   1b99a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1b99c:	7801      	ldrb	r1, [r0, #0]
   1b99e:	7822      	ldrb	r2, [r4, #0]
{
   1b9a0:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1b9a2:	428a      	cmp	r2, r1
   1b9a4:	d00f      	beq.n	1b9c6 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1b9a6:	4669      	mov	r1, sp
   1b9a8:	f7f2 fdb8 	bl	e51c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1b9ac:	4620      	mov	r0, r4
   1b9ae:	a905      	add	r1, sp, #20
   1b9b0:	f7f2 fdb4 	bl	e51c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1b9b4:	2210      	movs	r2, #16
   1b9b6:	f10d 0115 	add.w	r1, sp, #21
   1b9ba:	f10d 0001 	add.w	r0, sp, #1
   1b9be:	f7ff ff65 	bl	1b88c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1b9c2:	b00a      	add	sp, #40	; 0x28
   1b9c4:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1b9c6:	2a01      	cmp	r2, #1
   1b9c8:	d006      	beq.n	1b9d8 <bt_uuid_cmp+0x40>
   1b9ca:	2a02      	cmp	r2, #2
   1b9cc:	d007      	beq.n	1b9de <bt_uuid_cmp+0x46>
   1b9ce:	b972      	cbnz	r2, 1b9ee <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1b9d0:	8840      	ldrh	r0, [r0, #2]
   1b9d2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1b9d4:	1ac0      	subs	r0, r0, r3
   1b9d6:	e7f4      	b.n	1b9c2 <bt_uuid_cmp+0x2a>
   1b9d8:	6840      	ldr	r0, [r0, #4]
   1b9da:	6863      	ldr	r3, [r4, #4]
   1b9dc:	e7fa      	b.n	1b9d4 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b9de:	2210      	movs	r2, #16
   1b9e0:	1c61      	adds	r1, r4, #1
   1b9e2:	3001      	adds	r0, #1
}
   1b9e4:	b00a      	add	sp, #40	; 0x28
   1b9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b9ea:	f7ff bf4f 	b.w	1b88c <memcmp>
	switch (u1->type) {
   1b9ee:	f06f 0015 	mvn.w	r0, #21
   1b9f2:	e7e6      	b.n	1b9c2 <bt_uuid_cmp+0x2a>

0001b9f4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1b9f4:	2a04      	cmp	r2, #4
{
   1b9f6:	b510      	push	{r4, lr}
	switch (data_len) {
   1b9f8:	d00a      	beq.n	1ba10 <bt_uuid_create+0x1c>
   1b9fa:	2a10      	cmp	r2, #16
   1b9fc:	d00d      	beq.n	1ba1a <bt_uuid_create+0x26>
   1b9fe:	2a02      	cmp	r2, #2
   1ba00:	f04f 0300 	mov.w	r3, #0
   1ba04:	d10f      	bne.n	1ba26 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1ba06:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1ba08:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1ba0a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1ba0c:	2001      	movs	r0, #1
}
   1ba0e:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1ba10:	2301      	movs	r3, #1
   1ba12:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1ba14:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1ba16:	6042      	str	r2, [r0, #4]
		break;
   1ba18:	e7f8      	b.n	1ba0c <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1ba1a:	2302      	movs	r3, #2
   1ba1c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1ba20:	f7ff ff45 	bl	1b8ae <memcpy>
		break;
   1ba24:	e7f2      	b.n	1ba0c <bt_uuid_create+0x18>
	switch (data_len) {
   1ba26:	4618      	mov	r0, r3
   1ba28:	e7f1      	b.n	1ba0e <bt_uuid_create+0x1a>

0001ba2a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1ba2a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1ba2c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1ba2e:	2106      	movs	r1, #6
{
   1ba30:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1ba32:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1ba36:	f7f5 f909 	bl	10c4c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1ba3a:	b918      	cbnz	r0, 1ba44 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1ba3c:	79a3      	ldrb	r3, [r4, #6]
   1ba3e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ba42:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1ba44:	bd10      	pop	{r4, pc}

0001ba46 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1ba46:	280f      	cmp	r0, #15
   1ba48:	d806      	bhi.n	1ba58 <bt_hci_evt_get_flags+0x12>
   1ba4a:	280d      	cmp	r0, #13
   1ba4c:	d80b      	bhi.n	1ba66 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1ba4e:	2805      	cmp	r0, #5
   1ba50:	bf14      	ite	ne
   1ba52:	2002      	movne	r0, #2
   1ba54:	2003      	moveq	r0, #3
   1ba56:	4770      	bx	lr
	switch (evt) {
   1ba58:	2813      	cmp	r0, #19
   1ba5a:	d004      	beq.n	1ba66 <bt_hci_evt_get_flags+0x20>
   1ba5c:	281a      	cmp	r0, #26
   1ba5e:	bf14      	ite	ne
   1ba60:	2002      	movne	r0, #2
   1ba62:	2001      	moveq	r0, #1
   1ba64:	4770      	bx	lr
   1ba66:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1ba68:	4770      	bx	lr

0001ba6a <get_adv_channel_map>:
{
   1ba6a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1ba6c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1ba70:	bf0c      	ite	eq
   1ba72:	2007      	moveq	r0, #7
   1ba74:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1ba76:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1ba78:	bf48      	it	mi
   1ba7a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1ba7e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1ba80:	bf48      	it	mi
   1ba82:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1ba86:	4770      	bx	lr

0001ba88 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ba88:	e8d0 0faf 	lda	r0, [r0]
}
   1ba8c:	4770      	bx	lr

0001ba8e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1ba8e:	2207      	movs	r2, #7
   1ba90:	f7ff bf0d 	b.w	1b8ae <memcpy>

0001ba94 <atomic_or>:
{
   1ba94:	4603      	mov	r3, r0
}
   1ba96:	e8d3 0fef 	ldaex	r0, [r3]
   1ba9a:	ea40 0201 	orr.w	r2, r0, r1
   1ba9e:	e8c3 2fec 	stlex	ip, r2, [r3]
   1baa2:	f1bc 0f00 	cmp.w	ip, #0
   1baa6:	d1f6      	bne.n	1ba96 <atomic_or+0x2>
   1baa8:	4770      	bx	lr

0001baaa <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1baaa:	2207      	movs	r2, #7
   1baac:	f7ff beee 	b.w	1b88c <memcmp>

0001bab0 <atomic_and>:
{
   1bab0:	4603      	mov	r3, r0
}
   1bab2:	e8d3 0fef 	ldaex	r0, [r3]
   1bab6:	ea00 0201 	and.w	r2, r0, r1
   1baba:	e8c3 2fec 	stlex	ip, r2, [r3]
   1babe:	f1bc 0f00 	cmp.w	ip, #0
   1bac2:	d1f6      	bne.n	1bab2 <atomic_and+0x2>
   1bac4:	4770      	bx	lr

0001bac6 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1bac6:	460b      	mov	r3, r1
   1bac8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1baca:	f001 041f 	and.w	r4, r1, #31
   1bace:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bad0:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bad2:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bad4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1bad8:	b112      	cbz	r2, 1bae0 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1bada:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1badc:	f7ff bfda 	b.w	1ba94 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bae0:	43c9      	mvns	r1, r1
}
   1bae2:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bae4:	f7ff bfe4 	b.w	1bab0 <atomic_and>

0001bae8 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1bae8:	f100 0210 	add.w	r2, r0, #16
{
   1baec:	b508      	push	{r3, lr}
   1baee:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1baf0:	4610      	mov	r0, r2
   1baf2:	f7ff ffc9 	bl	1ba88 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1baf6:	0640      	lsls	r0, r0, #25
   1baf8:	d50a      	bpl.n	1bb10 <adv_id_check_connectable_func+0x28>
   1bafa:	4610      	mov	r0, r2
   1bafc:	f7ff ffc4 	bl	1ba88 <atomic_get>
   1bb00:	05c2      	lsls	r2, r0, #23
   1bb02:	d505      	bpl.n	1bb10 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1bb04:	781a      	ldrb	r2, [r3, #0]
   1bb06:	780b      	ldrb	r3, [r1, #0]
   1bb08:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1bb0a:	bf1c      	itt	ne
   1bb0c:	2301      	movne	r3, #1
   1bb0e:	704b      	strbne	r3, [r1, #1]
}
   1bb10:	bd08      	pop	{r3, pc}

0001bb12 <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1bb12:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1bb14:	2106      	movs	r1, #6
   1bb16:	4668      	mov	r0, sp
   1bb18:	f7f5 f898 	bl	10c4c <bt_rand>
	if (err) {
   1bb1c:	b940      	cbnz	r0, 1bb30 <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1bb1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1bb22:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1bb24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bb28:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1bb2c:	f7f3 f9fe 	bl	ef2c <set_random_address>
}
   1bb30:	b003      	add	sp, #12
   1bb32:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb36 <bt_lookup_id_addr>:
}
   1bb36:	4608      	mov	r0, r1
   1bb38:	4770      	bx	lr

0001bb3a <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1bb3a:	f7f3 bc4f 	b.w	f3dc <bt_le_create_conn_legacy>

0001bb3e <bt_hci_disconnect>:
{
   1bb3e:	b570      	push	{r4, r5, r6, lr}
   1bb40:	4606      	mov	r6, r0
   1bb42:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1bb44:	f240 4006 	movw	r0, #1030	; 0x406
   1bb48:	2103      	movs	r1, #3
   1bb4a:	f7f3 f923 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
   1bb4e:	4604      	mov	r4, r0
   1bb50:	b168      	cbz	r0, 1bb6e <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1bb52:	2103      	movs	r1, #3
   1bb54:	3008      	adds	r0, #8
   1bb56:	f7f9 fd09 	bl	1556c <net_buf_simple_add>
	disconn->reason = reason;
   1bb5a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1bb5c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1bb5e:	4621      	mov	r1, r4
}
   1bb60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1bb64:	2200      	movs	r2, #0
   1bb66:	f240 4006 	movw	r0, #1030	; 0x406
   1bb6a:	f7f3 b95d 	b.w	ee28 <bt_hci_cmd_send_sync>
}
   1bb6e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1bb72:	bd70      	pop	{r4, r5, r6, pc}

0001bb74 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1bb74:	8803      	ldrh	r3, [r0, #0]
   1bb76:	8842      	ldrh	r2, [r0, #2]
{
   1bb78:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1bb7a:	4293      	cmp	r3, r2
   1bb7c:	d819      	bhi.n	1bbb2 <bt_le_conn_params_valid+0x3e>
   1bb7e:	2b05      	cmp	r3, #5
   1bb80:	d917      	bls.n	1bbb2 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1bb82:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1bb86:	d814      	bhi.n	1bbb2 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1bb88:	8883      	ldrh	r3, [r0, #4]
   1bb8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1bb8e:	d210      	bcs.n	1bbb2 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1bb90:	f640 4476 	movw	r4, #3190	; 0xc76
   1bb94:	88c0      	ldrh	r0, [r0, #6]
   1bb96:	f1a0 010a 	sub.w	r1, r0, #10
   1bb9a:	b289      	uxth	r1, r1
   1bb9c:	42a1      	cmp	r1, r4
   1bb9e:	d808      	bhi.n	1bbb2 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1bba0:	3301      	adds	r3, #1
   1bba2:	b29b      	uxth	r3, r3
   1bba4:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1bba6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1bbaa:	bf34      	ite	cc
   1bbac:	2001      	movcc	r0, #1
   1bbae:	2000      	movcs	r0, #0
}
   1bbb0:	bd10      	pop	{r4, pc}
		return false;
   1bbb2:	2000      	movs	r0, #0
   1bbb4:	e7fc      	b.n	1bbb0 <bt_le_conn_params_valid+0x3c>

0001bbb6 <bt_le_set_data_len>:
{
   1bbb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbb8:	4607      	mov	r7, r0
   1bbba:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1bbbc:	f242 0022 	movw	r0, #8226	; 0x2022
   1bbc0:	2106      	movs	r1, #6
{
   1bbc2:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1bbc4:	f7f3 f8e6 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
   1bbc8:	4604      	mov	r4, r0
   1bbca:	b170      	cbz	r0, 1bbea <bt_le_set_data_len+0x34>
   1bbcc:	2106      	movs	r1, #6
   1bbce:	3008      	adds	r0, #8
   1bbd0:	f7f9 fccc 	bl	1556c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1bbd4:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1bbd6:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1bbd8:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1bbda:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1bbdc:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1bbde:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1bbe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1bbe6:	f7f3 be1b 	b.w	f820 <bt_hci_cmd_send>
}
   1bbea:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1bbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bbf0 <bt_le_set_phy>:
{
   1bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bbf4:	4680      	mov	r8, r0
   1bbf6:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1bbf8:	f242 0032 	movw	r0, #8242	; 0x2032
   1bbfc:	2107      	movs	r1, #7
{
   1bbfe:	4616      	mov	r6, r2
   1bc00:	461d      	mov	r5, r3
   1bc02:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1bc06:	f7f3 f8c5 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
   1bc0a:	4604      	mov	r4, r0
   1bc0c:	b190      	cbz	r0, 1bc34 <bt_le_set_phy+0x44>
   1bc0e:	2107      	movs	r1, #7
   1bc10:	3008      	adds	r0, #8
   1bc12:	f7f9 fcab 	bl	1556c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1bc16:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1bc1a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1bc1c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1bc1e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1bc20:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1bc22:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1bc26:	4621      	mov	r1, r4
}
   1bc28:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1bc2c:	f242 0032 	movw	r0, #8242	; 0x2032
   1bc30:	f7f3 bdf6 	b.w	f820 <bt_hci_cmd_send>
}
   1bc34:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1bc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001bc3c <bt_addr_le_is_bonded>:
}
   1bc3c:	2000      	movs	r0, #0
   1bc3e:	4770      	bx	lr

0001bc40 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1bc40:	6880      	ldr	r0, [r0, #8]
   1bc42:	f7f4 be0d 	b.w	10860 <enh_conn_complete>

0001bc46 <le_legacy_conn_complete>:
{
   1bc46:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1bc48:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1bc4a:	6881      	ldr	r1, [r0, #8]
{
   1bc4c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1bc4e:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1bc50:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1bc52:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1bc56:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1bc5a:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1bc5c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1bc60:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1bc64:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1bc68:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1bc6c:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1bc70:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1bc74:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1bc78:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1bc7c:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1bc80:	7b4b      	ldrb	r3, [r1, #13]
   1bc82:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1bc86:	f7ff ff02 	bl	1ba8e <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1bc8a:	4669      	mov	r1, sp
   1bc8c:	2206      	movs	r2, #6
   1bc8e:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1bc92:	9400      	str	r4, [sp, #0]
   1bc94:	f8ad 4004 	strh.w	r4, [sp, #4]
   1bc98:	f7ff fe09 	bl	1b8ae <memcpy>
   1bc9c:	2206      	movs	r2, #6
   1bc9e:	4669      	mov	r1, sp
   1bca0:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1bca4:	9400      	str	r4, [sp, #0]
   1bca6:	f8ad 4004 	strh.w	r4, [sp, #4]
   1bcaa:	f7ff fe00 	bl	1b8ae <memcpy>
	enh_conn_complete(&enh);
   1bcae:	a802      	add	r0, sp, #8
   1bcb0:	f7f4 fdd6 	bl	10860 <enh_conn_complete>
}
   1bcb4:	b00a      	add	sp, #40	; 0x28
   1bcb6:	bd10      	pop	{r4, pc}

0001bcb8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bcb8:	e8d0 0faf 	lda	r0, [r0]
}
   1bcbc:	4770      	bx	lr

0001bcbe <tx_notify>:
{
   1bcbe:	b570      	push	{r4, r5, r6, lr}
   1bcc0:	4604      	mov	r4, r0
	__asm__ volatile(
   1bcc2:	f04f 0220 	mov.w	r2, #32
   1bcc6:	f3ef 8311 	mrs	r3, BASEPRI
   1bcca:	f382 8811 	msr	BASEPRI, r2
   1bcce:	f3bf 8f6f 	isb	sy
	return list->head;
   1bcd2:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1bcd4:	b920      	cbnz	r0, 1bce0 <tx_notify+0x22>
	__asm__ volatile(
   1bcd6:	f383 8811 	msr	BASEPRI, r3
   1bcda:	f3bf 8f6f 	isb	sy
}
   1bcde:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1bce2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bce4:	4288      	cmp	r0, r1
	list->tail = node;
   1bce6:	bf08      	it	eq
   1bce8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1bcea:	6222      	str	r2, [r4, #32]
   1bcec:	f383 8811 	msr	BASEPRI, r3
   1bcf0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1bcf4:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1bcf8:	f7f4 ffc0 	bl	10c7c <tx_free>
		cb(conn, user_data);
   1bcfc:	4631      	mov	r1, r6
   1bcfe:	4620      	mov	r0, r4
   1bd00:	47a8      	blx	r5
	while (1) {
   1bd02:	e7de      	b.n	1bcc2 <tx_notify+0x4>

0001bd04 <tx_complete_work>:
	tx_notify(conn);
   1bd04:	3828      	subs	r0, #40	; 0x28
   1bd06:	f7ff bfda 	b.w	1bcbe <tx_notify>

0001bd0a <bt_conn_new>:
{
   1bd0a:	b538      	push	{r3, r4, r5, lr}
   1bd0c:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1bd0e:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bd10:	2501      	movs	r5, #1
   1bd12:	428b      	cmp	r3, r1
   1bd14:	d102      	bne.n	1bd1c <bt_conn_new+0x12>
		return NULL;
   1bd16:	2400      	movs	r4, #0
}
   1bd18:	4620      	mov	r0, r4
   1bd1a:	bd38      	pop	{r3, r4, r5, pc}
   1bd1c:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1bd20:	e8d2 0fef 	ldaex	r0, [r2]
   1bd24:	2800      	cmp	r0, #0
   1bd26:	d104      	bne.n	1bd32 <bt_conn_new+0x28>
   1bd28:	e8c2 5fec 	stlex	ip, r5, [r2]
   1bd2c:	f1bc 0f00 	cmp.w	ip, #0
   1bd30:	d1f6      	bne.n	1bd20 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bd32:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1bd36:	d002      	beq.n	1bd3e <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1bd38:	4604      	mov	r4, r0
   1bd3a:	3301      	adds	r3, #1
   1bd3c:	e7e9      	b.n	1bd12 <bt_conn_new+0x8>
	if (!conn) {
   1bd3e:	2c00      	cmp	r4, #0
   1bd40:	d0ea      	beq.n	1bd18 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1bd42:	22b8      	movs	r2, #184	; 0xb8
   1bd44:	2100      	movs	r1, #0
   1bd46:	4620      	mov	r0, r4
   1bd48:	f7ff fddc 	bl	1b904 <memset>
	return conn;
   1bd4c:	e7e4      	b.n	1bd18 <bt_conn_new+0xe>

0001bd4e <bt_conn_get_security>:
}
   1bd4e:	2001      	movs	r0, #1
   1bd50:	4770      	bx	lr

0001bd52 <bt_conn_reset_rx_state>:
{
   1bd52:	b510      	push	{r4, lr}
   1bd54:	4604      	mov	r4, r0
	if (!conn->rx) {
   1bd56:	6900      	ldr	r0, [r0, #16]
   1bd58:	b118      	cbz	r0, 1bd62 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1bd5a:	f7f9 faf1 	bl	15340 <net_buf_unref>
	conn->rx = NULL;
   1bd5e:	2300      	movs	r3, #0
   1bd60:	6123      	str	r3, [r4, #16]
}
   1bd62:	bd10      	pop	{r4, pc}

0001bd64 <bt_conn_is_peer_addr_le>:
{
   1bd64:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1bd66:	7a03      	ldrb	r3, [r0, #8]
{
   1bd68:	4604      	mov	r4, r0
	if (id != conn->id) {
   1bd6a:	428b      	cmp	r3, r1
{
   1bd6c:	4615      	mov	r5, r2
	if (id != conn->id) {
   1bd6e:	d115      	bne.n	1bd9c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1bd70:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1bd74:	2207      	movs	r2, #7
   1bd76:	4628      	mov	r0, r5
   1bd78:	f7ff fd88 	bl	1b88c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1bd7c:	b180      	cbz	r0, 1bda0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1bd7e:	78e3      	ldrb	r3, [r4, #3]
   1bd80:	2207      	movs	r2, #7
   1bd82:	b943      	cbnz	r3, 1bd96 <bt_conn_is_peer_addr_le+0x32>
   1bd84:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1bd88:	4628      	mov	r0, r5
   1bd8a:	f7ff fd7f 	bl	1b88c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1bd8e:	fab0 f080 	clz	r0, r0
   1bd92:	0940      	lsrs	r0, r0, #5
}
   1bd94:	bd38      	pop	{r3, r4, r5, pc}
   1bd96:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1bd9a:	e7f5      	b.n	1bd88 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1bd9c:	2000      	movs	r0, #0
   1bd9e:	e7f9      	b.n	1bd94 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1bda0:	2001      	movs	r0, #1
   1bda2:	e7f7      	b.n	1bd94 <bt_conn_is_peer_addr_le+0x30>

0001bda4 <bt_conn_ref>:
{
   1bda4:	4603      	mov	r3, r0
   1bda6:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1bda8:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1bdac:	4610      	mov	r0, r2
   1bdae:	f7ff ff83 	bl	1bcb8 <atomic_get>
		if (!old) {
   1bdb2:	b160      	cbz	r0, 1bdce <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1bdb4:	1c41      	adds	r1, r0, #1
   1bdb6:	e8d2 4fef 	ldaex	r4, [r2]
   1bdba:	4284      	cmp	r4, r0
   1bdbc:	d104      	bne.n	1bdc8 <bt_conn_ref+0x24>
   1bdbe:	e8c2 1fec 	stlex	ip, r1, [r2]
   1bdc2:	f1bc 0f00 	cmp.w	ip, #0
   1bdc6:	d1f6      	bne.n	1bdb6 <bt_conn_ref+0x12>
   1bdc8:	d1f0      	bne.n	1bdac <bt_conn_ref+0x8>
}
   1bdca:	4618      	mov	r0, r3
   1bdcc:	bd10      	pop	{r4, pc}
			return NULL;
   1bdce:	4603      	mov	r3, r0
   1bdd0:	e7fb      	b.n	1bdca <bt_conn_ref+0x26>

0001bdd2 <conn_lookup_handle>:
{
   1bdd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bdd6:	4607      	mov	r7, r0
   1bdd8:	460e      	mov	r6, r1
   1bdda:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1bddc:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1bdde:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1bde2:	42b4      	cmp	r4, r6
   1bde4:	d103      	bne.n	1bdee <conn_lookup_handle+0x1c>
	return NULL;
   1bde6:	2300      	movs	r3, #0
}
   1bde8:	4618      	mov	r0, r3
   1bdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1bdee:	fb09 7004 	mla	r0, r9, r4, r7
   1bdf2:	f7ff ffd7 	bl	1bda4 <bt_conn_ref>
   1bdf6:	4603      	mov	r3, r0
		if (!conn) {
   1bdf8:	b158      	cbz	r0, 1be12 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1bdfa:	7a85      	ldrb	r5, [r0, #10]
   1bdfc:	2d01      	cmp	r5, #1
   1bdfe:	d002      	beq.n	1be06 <conn_lookup_handle+0x34>
   1be00:	3d07      	subs	r5, #7
   1be02:	2d01      	cmp	r5, #1
   1be04:	d803      	bhi.n	1be0e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1be06:	881a      	ldrh	r2, [r3, #0]
   1be08:	4542      	cmp	r2, r8
   1be0a:	d0ed      	beq.n	1bde8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1be0c:	4618      	mov	r0, r3
   1be0e:	f7f5 f9b9 	bl	11184 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1be12:	3401      	adds	r4, #1
   1be14:	e7e5      	b.n	1bde2 <conn_lookup_handle+0x10>

0001be16 <bt_conn_get_dst>:
}
   1be16:	3088      	adds	r0, #136	; 0x88
   1be18:	4770      	bx	lr

0001be1a <bt_conn_le_conn_update>:
{
   1be1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be1c:	4607      	mov	r7, r0
   1be1e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1be20:	f242 0013 	movw	r0, #8211	; 0x2013
   1be24:	210e      	movs	r1, #14
   1be26:	f7f2 ffb5 	bl	ed94 <bt_hci_cmd_create>
	if (!buf) {
   1be2a:	4606      	mov	r6, r0
   1be2c:	b1d0      	cbz	r0, 1be64 <bt_conn_le_conn_update+0x4a>
   1be2e:	210e      	movs	r1, #14
   1be30:	3008      	adds	r0, #8
   1be32:	f7f9 fb9b 	bl	1556c <net_buf_simple_add>
   1be36:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1be38:	220e      	movs	r2, #14
   1be3a:	2100      	movs	r1, #0
   1be3c:	f7ff fd62 	bl	1b904 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1be40:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1be42:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1be44:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1be46:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1be48:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1be4a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1be4c:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1be4e:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1be52:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1be54:	88ab      	ldrh	r3, [r5, #4]
   1be56:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1be58:	88eb      	ldrh	r3, [r5, #6]
   1be5a:	8123      	strh	r3, [r4, #8]
}
   1be5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1be60:	f7f2 bfe2 	b.w	ee28 <bt_hci_cmd_send_sync>
}
   1be64:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1be68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001be6a <l2cap_connected>:
}
   1be6a:	4770      	bx	lr

0001be6c <l2cap_disconnected>:
   1be6c:	4770      	bx	lr

0001be6e <bt_l2cap_chan_remove>:
	return list->head;
   1be6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1be70:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1be72:	b17b      	cbz	r3, 1be94 <bt_l2cap_chan_remove+0x26>
   1be74:	2200      	movs	r2, #0
   1be76:	3b08      	subs	r3, #8
   1be78:	b163      	cbz	r3, 1be94 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1be7a:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1be7c:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1be80:	d10e      	bne.n	1bea0 <bt_l2cap_chan_remove+0x32>
	return node->next;
   1be82:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1be84:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1be86:	b932      	cbnz	r2, 1be96 <bt_l2cap_chan_remove+0x28>
   1be88:	42ac      	cmp	r4, r5
	list->head = node;
   1be8a:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1be8c:	d100      	bne.n	1be90 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1be8e:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1be90:	2200      	movs	r2, #0
   1be92:	609a      	str	r2, [r3, #8]
}
   1be94:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1be96:	42ac      	cmp	r4, r5
	parent->next = child;
   1be98:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1be9a:	bf08      	it	eq
   1be9c:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1be9e:	e7f7      	b.n	1be90 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bea0:	2c00      	cmp	r4, #0
   1bea2:	d0f7      	beq.n	1be94 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1bea4:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bea6:	2b00      	cmp	r3, #0
   1bea8:	d0f4      	beq.n	1be94 <bt_l2cap_chan_remove+0x26>
   1beaa:	4622      	mov	r2, r4
   1beac:	3b08      	subs	r3, #8
   1beae:	e7e3      	b.n	1be78 <bt_l2cap_chan_remove+0xa>

0001beb0 <bt_l2cap_chan_del>:
{
   1beb0:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1beb2:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1beb6:	4604      	mov	r4, r0
	if (!chan->conn) {
   1beb8:	b123      	cbz	r3, 1bec4 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1beba:	686b      	ldr	r3, [r5, #4]
   1bebc:	b103      	cbz	r3, 1bec0 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1bebe:	4798      	blx	r3
	chan->conn = NULL;
   1bec0:	2300      	movs	r3, #0
   1bec2:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1bec4:	68e3      	ldr	r3, [r4, #12]
   1bec6:	b10b      	cbz	r3, 1becc <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1bec8:	4620      	mov	r0, r4
   1beca:	4798      	blx	r3
	if (ops->released) {
   1becc:	69eb      	ldr	r3, [r5, #28]
   1bece:	b11b      	cbz	r3, 1bed8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1bed0:	4620      	mov	r0, r4
}
   1bed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1bed6:	4718      	bx	r3
}
   1bed8:	bd70      	pop	{r4, r5, r6, pc}

0001beda <bt_l2cap_disconnected>:
	return list->head;
   1beda:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1bedc:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1bede:	b18b      	cbz	r3, 1bf04 <bt_l2cap_disconnected+0x2a>
   1bee0:	f1b3 0008 	subs.w	r0, r3, #8
   1bee4:	d00e      	beq.n	1bf04 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1bee6:	681c      	ldr	r4, [r3, #0]
   1bee8:	b104      	cbz	r4, 1beec <bt_l2cap_disconnected+0x12>
   1beea:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1beec:	f7ff ffe0 	bl	1beb0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1bef0:	b144      	cbz	r4, 1bf04 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bef2:	f114 0308 	adds.w	r3, r4, #8
   1bef6:	d002      	beq.n	1befe <bt_l2cap_disconnected+0x24>
	return node->next;
   1bef8:	68a3      	ldr	r3, [r4, #8]
   1befa:	b103      	cbz	r3, 1befe <bt_l2cap_disconnected+0x24>
   1befc:	3b08      	subs	r3, #8
{
   1befe:	4620      	mov	r0, r4
   1bf00:	461c      	mov	r4, r3
   1bf02:	e7f3      	b.n	1beec <bt_l2cap_disconnected+0x12>
}
   1bf04:	bd10      	pop	{r4, pc}

0001bf06 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1bf06:	3104      	adds	r1, #4
   1bf08:	f7f5 bc14 	b.w	11734 <bt_conn_create_pdu_timeout>

0001bf0c <bt_l2cap_send_cb>:
{
   1bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf10:	4614      	mov	r4, r2
   1bf12:	4605      	mov	r5, r0
   1bf14:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1bf16:	f102 0008 	add.w	r0, r2, #8
   1bf1a:	2104      	movs	r1, #4
   1bf1c:	461e      	mov	r6, r3
   1bf1e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1bf22:	f7f9 facb 	bl	154bc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1bf26:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1bf28:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1bf2a:	3a04      	subs	r2, #4
   1bf2c:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1bf2e:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1bf30:	4632      	mov	r2, r6
   1bf32:	4621      	mov	r1, r4
   1bf34:	4628      	mov	r0, r5
}
   1bf36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1bf3a:	f7f5 b861 	b.w	11000 <bt_conn_send_cb>

0001bf3e <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1bf3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bf40:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1bf42:	2202      	movs	r2, #2
   1bf44:	2001      	movs	r0, #1
   1bf46:	f7f5 fd47 	bl	119d8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1bf4a:	4604      	mov	r4, r0
   1bf4c:	b160      	cbz	r0, 1bf68 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1bf4e:	2102      	movs	r1, #2
   1bf50:	3008      	adds	r0, #8
   1bf52:	f7f9 fb0b 	bl	1556c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1bf56:	2300      	movs	r3, #0
   1bf58:	4622      	mov	r2, r4
   1bf5a:	7003      	strb	r3, [r0, #0]
   1bf5c:	7043      	strb	r3, [r0, #1]
   1bf5e:	2105      	movs	r1, #5
   1bf60:	4628      	mov	r0, r5
   1bf62:	9300      	str	r3, [sp, #0]
   1bf64:	f7ff ffd2 	bl	1bf0c <bt_l2cap_send_cb>
}
   1bf68:	b003      	add	sp, #12
   1bf6a:	bd30      	pop	{r4, r5, pc}

0001bf6c <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1bf6c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bf6e:	b160      	cbz	r0, 1bf8a <bt_l2cap_le_lookup_tx_cid+0x1e>
   1bf70:	3808      	subs	r0, #8
   1bf72:	b900      	cbnz	r0, 1bf76 <bt_l2cap_le_lookup_tx_cid+0xa>
   1bf74:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1bf76:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1bf7a:	428b      	cmp	r3, r1
   1bf7c:	d005      	beq.n	1bf8a <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf7e:	f110 0308 	adds.w	r3, r0, #8
   1bf82:	d001      	beq.n	1bf88 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1bf84:	6880      	ldr	r0, [r0, #8]
   1bf86:	e7f2      	b.n	1bf6e <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1bf88:	4618      	mov	r0, r3
}
   1bf8a:	4770      	bx	lr

0001bf8c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1bf8c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bf8e:	b160      	cbz	r0, 1bfaa <bt_l2cap_le_lookup_rx_cid+0x1e>
   1bf90:	3808      	subs	r0, #8
   1bf92:	b900      	cbnz	r0, 1bf96 <bt_l2cap_le_lookup_rx_cid+0xa>
   1bf94:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1bf96:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1bf9a:	428b      	cmp	r3, r1
   1bf9c:	d005      	beq.n	1bfaa <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf9e:	f110 0308 	adds.w	r3, r0, #8
   1bfa2:	d001      	beq.n	1bfa8 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1bfa4:	6880      	ldr	r0, [r0, #8]
   1bfa6:	e7f2      	b.n	1bf8e <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1bfa8:	4618      	mov	r0, r3
}
   1bfaa:	4770      	bx	lr

0001bfac <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1bfac:	4770      	bx	lr

0001bfae <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1bfae:	4603      	mov	r3, r0
	return list->head;
   1bfb0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1bfb2:	b128      	cbz	r0, 1bfc0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bfb4:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1bfb6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bfb8:	4288      	cmp	r0, r1
	list->head = node;
   1bfba:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1bfbc:	bf08      	it	eq
   1bfbe:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1bfc0:	4770      	bx	lr

0001bfc2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1bfc2:	4603      	mov	r3, r0
	size_t bytes = 0;
   1bfc4:	2000      	movs	r0, #0

	while (buf) {
   1bfc6:	b903      	cbnz	r3, 1bfca <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1bfc8:	4770      	bx	lr
		bytes += buf->len;
   1bfca:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1bfcc:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1bfce:	4410      	add	r0, r2
		buf = buf->frags;
   1bfd0:	e7f9      	b.n	1bfc6 <net_buf_frags_len+0x4>

0001bfd2 <att_sent>:
	if (chan->ops->sent) {
   1bfd2:	684b      	ldr	r3, [r1, #4]
{
   1bfd4:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1bfd6:	695b      	ldr	r3, [r3, #20]
   1bfd8:	b103      	cbz	r3, 1bfdc <att_sent+0xa>
		chan->ops->sent(chan);
   1bfda:	4718      	bx	r3
}
   1bfdc:	4770      	bx	lr

0001bfde <attr_read_type_cb>:
{
   1bfde:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1bfe0:	68d4      	ldr	r4, [r2, #12]
   1bfe2:	3102      	adds	r1, #2
   1bfe4:	7823      	ldrb	r3, [r4, #0]
   1bfe6:	b913      	cbnz	r3, 1bfee <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1bfe8:	7021      	strb	r1, [r4, #0]
	return true;
   1bfea:	2001      	movs	r0, #1
   1bfec:	e006      	b.n	1bffc <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1bfee:	428b      	cmp	r3, r1
   1bff0:	d0fb      	beq.n	1bfea <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1bff2:	8983      	ldrh	r3, [r0, #12]
   1bff4:	3b02      	subs	r3, #2
   1bff6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1bff8:	2000      	movs	r0, #0
   1bffa:	6110      	str	r0, [r2, #16]
}
   1bffc:	bd10      	pop	{r4, pc}

0001bffe <att_prepare_write_req>:
}
   1bffe:	2006      	movs	r0, #6
   1c000:	4770      	bx	lr

0001c002 <att_op_get_type>:
	switch (op) {
   1c002:	281e      	cmp	r0, #30
   1c004:	d816      	bhi.n	1c034 <att_op_get_type+0x32>
   1c006:	b308      	cbz	r0, 1c04c <att_op_get_type+0x4a>
   1c008:	1e43      	subs	r3, r0, #1
   1c00a:	2b1d      	cmp	r3, #29
   1c00c:	d81e      	bhi.n	1c04c <att_op_get_type+0x4a>
   1c00e:	e8df f003 	tbb	[pc, r3]
   1c012:	2317      	.short	0x2317
   1c014:	23172317 	.word	0x23172317
   1c018:	23172317 	.word	0x23172317
   1c01c:	23172317 	.word	0x23172317
   1c020:	23172317 	.word	0x23172317
   1c024:	231d1d17 	.word	0x231d1d17
   1c028:	1d172317 	.word	0x1d172317
   1c02c:	0f1b1d19 	.word	0x0f1b1d19
   1c030:	2004      	movs	r0, #4
   1c032:	4770      	bx	lr
   1c034:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c038:	2b52      	cmp	r3, #82	; 0x52
   1c03a:	d107      	bne.n	1c04c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1c03c:	2000      	movs	r0, #0
}
   1c03e:	4770      	bx	lr
		return ATT_RESPONSE;
   1c040:	2002      	movs	r0, #2
   1c042:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c044:	2003      	movs	r0, #3
   1c046:	4770      	bx	lr
		return ATT_INDICATION;
   1c048:	2005      	movs	r0, #5
   1c04a:	4770      	bx	lr
		return ATT_COMMAND;
   1c04c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c050:	bf0c      	ite	eq
   1c052:	2006      	moveq	r0, #6
   1c054:	2000      	movne	r0, #0
   1c056:	4770      	bx	lr
		return ATT_REQUEST;
   1c058:	2001      	movs	r0, #1
   1c05a:	4770      	bx	lr

0001c05c <att_notify_mult>:
{
   1c05c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1c05e:	6803      	ldr	r3, [r0, #0]
   1c060:	898a      	ldrh	r2, [r1, #12]
   1c062:	6818      	ldr	r0, [r3, #0]
   1c064:	6889      	ldr	r1, [r1, #8]
   1c066:	f7f8 fe13 	bl	14c90 <bt_gatt_mult_notification>
}
   1c06a:	2000      	movs	r0, #0
   1c06c:	bd08      	pop	{r3, pc}

0001c06e <att_notify>:
{
   1c06e:	b538      	push	{r3, r4, r5, lr}
   1c070:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c072:	f101 0008 	add.w	r0, r1, #8
   1c076:	460c      	mov	r4, r1
   1c078:	f000 ff43 	bl	1cf02 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1c07c:	682d      	ldr	r5, [r5, #0]
   1c07e:	4601      	mov	r1, r0
   1c080:	89a3      	ldrh	r3, [r4, #12]
   1c082:	6828      	ldr	r0, [r5, #0]
   1c084:	68a2      	ldr	r2, [r4, #8]
   1c086:	f000 fea4 	bl	1cdd2 <bt_gatt_notification>
}
   1c08a:	2000      	movs	r0, #0
   1c08c:	bd38      	pop	{r3, r4, r5, pc}

0001c08e <bt_gatt_foreach_attr>:
{
   1c08e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c090:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c094:	2300      	movs	r3, #0
   1c096:	461a      	mov	r2, r3
   1c098:	9300      	str	r3, [sp, #0]
   1c09a:	f7f7 fc4d 	bl	13938 <bt_gatt_foreach_attr_type>
}
   1c09e:	b005      	add	sp, #20
   1c0a0:	f85d fb04 	ldr.w	pc, [sp], #4

0001c0a4 <find_info_cb>:
{
   1c0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c0a6:	6893      	ldr	r3, [r2, #8]
{
   1c0a8:	4605      	mov	r5, r0
   1c0aa:	460e      	mov	r6, r1
   1c0ac:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c0ae:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1c0b0:	b963      	cbnz	r3, 1c0cc <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c0b2:	6850      	ldr	r0, [r2, #4]
   1c0b4:	2101      	movs	r1, #1
   1c0b6:	3008      	adds	r0, #8
   1c0b8:	f7f9 fa58 	bl	1556c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c0bc:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c0be:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c0c0:	781b      	ldrb	r3, [r3, #0]
   1c0c2:	2b00      	cmp	r3, #0
   1c0c4:	bf0c      	ite	eq
   1c0c6:	2301      	moveq	r3, #1
   1c0c8:	2302      	movne	r3, #2
   1c0ca:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c0cc:	68a3      	ldr	r3, [r4, #8]
   1c0ce:	781b      	ldrb	r3, [r3, #0]
   1c0d0:	2b01      	cmp	r3, #1
   1c0d2:	d003      	beq.n	1c0dc <find_info_cb+0x38>
   1c0d4:	2b02      	cmp	r3, #2
   1c0d6:	d019      	beq.n	1c10c <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1c0d8:	2000      	movs	r0, #0
   1c0da:	e016      	b.n	1c10a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c0dc:	682b      	ldr	r3, [r5, #0]
   1c0de:	781b      	ldrb	r3, [r3, #0]
   1c0e0:	2b00      	cmp	r3, #0
   1c0e2:	d1f9      	bne.n	1c0d8 <find_info_cb+0x34>
   1c0e4:	6860      	ldr	r0, [r4, #4]
   1c0e6:	2104      	movs	r1, #4
   1c0e8:	3008      	adds	r0, #8
   1c0ea:	f7f9 fa3f 	bl	1556c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c0ee:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c0f0:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c0f2:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c0f4:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c0f6:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c0f8:	6863      	ldr	r3, [r4, #4]
   1c0fa:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c0fe:	899b      	ldrh	r3, [r3, #12]
   1c100:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c102:	2804      	cmp	r0, #4
   1c104:	bf94      	ite	ls
   1c106:	2000      	movls	r0, #0
   1c108:	2001      	movhi	r0, #1
}
   1c10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c10c:	682b      	ldr	r3, [r5, #0]
   1c10e:	781b      	ldrb	r3, [r3, #0]
   1c110:	2b02      	cmp	r3, #2
   1c112:	d1e1      	bne.n	1c0d8 <find_info_cb+0x34>
   1c114:	6860      	ldr	r0, [r4, #4]
   1c116:	2112      	movs	r1, #18
   1c118:	3008      	adds	r0, #8
   1c11a:	f7f9 fa27 	bl	1556c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c11e:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c120:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c122:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1c124:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c128:	3101      	adds	r1, #1
   1c12a:	f7ff fbc0 	bl	1b8ae <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c12e:	6863      	ldr	r3, [r4, #4]
   1c130:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c134:	899b      	ldrh	r3, [r3, #12]
   1c136:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c138:	2812      	cmp	r0, #18
   1c13a:	e7e3      	b.n	1c104 <find_info_cb+0x60>

0001c13c <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c13c:	68d0      	ldr	r0, [r2, #12]
   1c13e:	3104      	adds	r1, #4
   1c140:	7803      	ldrb	r3, [r0, #0]
   1c142:	b913      	cbnz	r3, 1c14a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c144:	7001      	strb	r1, [r0, #0]
	return true;
   1c146:	2001      	movs	r0, #1
}
   1c148:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c14a:	428b      	cmp	r3, r1
   1c14c:	d0fb      	beq.n	1c146 <attr_read_group_cb+0xa>
		data->group = NULL;
   1c14e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c150:	6891      	ldr	r1, [r2, #8]
   1c152:	898b      	ldrh	r3, [r1, #12]
   1c154:	3b04      	subs	r3, #4
   1c156:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c158:	6110      	str	r0, [r2, #16]
		return false;
   1c15a:	4770      	bx	lr

0001c15c <write_cb>:
{
   1c15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c15e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c160:	4601      	mov	r1, r0
{
   1c162:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c164:	222a      	movs	r2, #42	; 0x2a
   1c166:	6820      	ldr	r0, [r4, #0]
   1c168:	f000 fda4 	bl	1ccb4 <bt_gatt_check_perm>
   1c16c:	4605      	mov	r5, r0
   1c16e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c170:	bb00      	cbnz	r0, 1c1b4 <write_cb+0x58>
	if (!data->req) {
   1c172:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1c174:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c176:	2b00      	cmp	r3, #0
   1c178:	bf14      	ite	ne
   1c17a:	2300      	movne	r3, #0
   1c17c:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c17e:	9301      	str	r3, [sp, #4]
   1c180:	8a63      	ldrh	r3, [r4, #18]
   1c182:	68b7      	ldr	r7, [r6, #8]
   1c184:	9300      	str	r3, [sp, #0]
   1c186:	68e2      	ldr	r2, [r4, #12]
   1c188:	8a23      	ldrh	r3, [r4, #16]
   1c18a:	6820      	ldr	r0, [r4, #0]
   1c18c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1c18e:	1e03      	subs	r3, r0, #0
   1c190:	db05      	blt.n	1c19e <write_cb+0x42>
   1c192:	8a22      	ldrh	r2, [r4, #16]
   1c194:	4293      	cmp	r3, r2
   1c196:	d10b      	bne.n	1c1b0 <write_cb+0x54>
	data->err = 0U;
   1c198:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c19a:	2501      	movs	r5, #1
   1c19c:	e005      	b.n	1c1aa <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1c19e:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1c1a2:	d305      	bcc.n	1c1b0 <write_cb+0x54>
		return -err;
   1c1a4:	425b      	negs	r3, r3
   1c1a6:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1c1a8:	7523      	strb	r3, [r4, #20]
}
   1c1aa:	4628      	mov	r0, r5
   1c1ac:	b003      	add	sp, #12
   1c1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c1b0:	230e      	movs	r3, #14
   1c1b2:	e7f9      	b.n	1c1a8 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1c1b4:	2500      	movs	r5, #0
   1c1b6:	e7f8      	b.n	1c1aa <write_cb+0x4e>

0001c1b8 <att_chan_read>:
{
   1c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1bc:	4680      	mov	r8, r0
   1c1be:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c1c0:	4610      	mov	r0, r2
{
   1c1c2:	4699      	mov	r9, r3
   1c1c4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c1c6:	f7ff fefc 	bl	1bfc2 <net_buf_frags_len>
   1c1ca:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1c1ce:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c1d0:	4283      	cmp	r3, r0
   1c1d2:	d97a      	bls.n	1c2ca <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c1d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1c1d8:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1c1da:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c1dc:	f7f9 f90c 	bl	153f8 <net_buf_frag_last>
	size_t len, total = 0;
   1c1e0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c1e4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c1e6:	4630      	mov	r0, r6
   1c1e8:	f7ff feeb 	bl	1bfc2 <net_buf_frags_len>
   1c1ec:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1c1f0:	f105 0708 	add.w	r7, r5, #8
   1c1f4:	1a24      	subs	r4, r4, r0
   1c1f6:	4638      	mov	r0, r7
   1c1f8:	f000 fe8f 	bl	1cf1a <net_buf_simple_tailroom>
   1c1fc:	4284      	cmp	r4, r0
   1c1fe:	d211      	bcs.n	1c224 <att_chan_read+0x6c>
   1c200:	4630      	mov	r0, r6
   1c202:	f7ff fede 	bl	1bfc2 <net_buf_frags_len>
   1c206:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c20a:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c20c:	bb34      	cbnz	r4, 1c25c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c20e:	79b0      	ldrb	r0, [r6, #6]
   1c210:	f7f8 ff16 	bl	15040 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c214:	2200      	movs	r2, #0
   1c216:	2300      	movs	r3, #0
   1c218:	f000 fe59 	bl	1cece <net_buf_alloc_fixed>
			if (!frag) {
   1c21c:	4605      	mov	r5, r0
   1c21e:	b930      	cbnz	r0, 1c22e <att_chan_read+0x76>
	return total;
   1c220:	4657      	mov	r7, sl
   1c222:	e02c      	b.n	1c27e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c224:	4638      	mov	r0, r7
   1c226:	f000 fe78 	bl	1cf1a <net_buf_simple_tailroom>
   1c22a:	4604      	mov	r4, r0
   1c22c:	e7ee      	b.n	1c20c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c22e:	4601      	mov	r1, r0
   1c230:	4630      	mov	r0, r6
   1c232:	f7f9 f921 	bl	15478 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c236:	4630      	mov	r0, r6
   1c238:	f7ff fec3 	bl	1bfc2 <net_buf_frags_len>
   1c23c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c240:	f105 0708 	add.w	r7, r5, #8
   1c244:	1a24      	subs	r4, r4, r0
   1c246:	4638      	mov	r0, r7
   1c248:	f000 fe67 	bl	1cf1a <net_buf_simple_tailroom>
   1c24c:	4284      	cmp	r4, r0
   1c24e:	d21a      	bcs.n	1c286 <att_chan_read+0xce>
   1c250:	4630      	mov	r0, r6
   1c252:	f7ff feb6 	bl	1bfc2 <net_buf_frags_len>
   1c256:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c25a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c25c:	68a9      	ldr	r1, [r5, #8]
   1c25e:	89aa      	ldrh	r2, [r5, #12]
   1c260:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c264:	440a      	add	r2, r1
   1c266:	9803      	ldr	r0, [sp, #12]
   1c268:	4659      	mov	r1, fp
   1c26a:	f8cd 9000 	str.w	r9, [sp]
   1c26e:	b2a3      	uxth	r3, r4
   1c270:	47b8      	blx	r7
		if (read < 0) {
   1c272:	1e07      	subs	r7, r0, #0
   1c274:	da0c      	bge.n	1c290 <att_chan_read+0xd8>
				return total;
   1c276:	f1ba 0f00 	cmp.w	sl, #0
   1c27a:	bf18      	it	ne
   1c27c:	4657      	movne	r7, sl
}
   1c27e:	4638      	mov	r0, r7
   1c280:	b005      	add	sp, #20
   1c282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c286:	4638      	mov	r0, r7
   1c288:	f000 fe47 	bl	1cf1a <net_buf_simple_tailroom>
   1c28c:	4604      	mov	r4, r0
   1c28e:	e7e5      	b.n	1c25c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c292:	b993      	cbnz	r3, 1c2ba <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c294:	4639      	mov	r1, r7
   1c296:	f105 0008 	add.w	r0, r5, #8
   1c29a:	f7f9 f967 	bl	1556c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c29e:	4630      	mov	r0, r6
   1c2a0:	f7ff fe8f 	bl	1bfc2 <net_buf_frags_len>
   1c2a4:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1c2a8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c2aa:	4283      	cmp	r3, r0
		total += read;
   1c2ac:	44ba      	add	sl, r7
		offset += read;
   1c2ae:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c2b2:	d9b5      	bls.n	1c220 <att_chan_read+0x68>
   1c2b4:	42a7      	cmp	r7, r4
   1c2b6:	d096      	beq.n	1c1e6 <att_chan_read+0x2e>
   1c2b8:	e7b2      	b.n	1c220 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c2ba:	4639      	mov	r1, r7
   1c2bc:	4628      	mov	r0, r5
   1c2be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c2c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c2c2:	4798      	blx	r3
   1c2c4:	2800      	cmp	r0, #0
   1c2c6:	d1e5      	bne.n	1c294 <att_chan_read+0xdc>
   1c2c8:	e7aa      	b.n	1c220 <att_chan_read+0x68>
		return 0;
   1c2ca:	2700      	movs	r7, #0
   1c2cc:	e7d7      	b.n	1c27e <att_chan_read+0xc6>

0001c2ce <bt_att_chan_send>:
{
   1c2ce:	b570      	push	{r4, r5, r6, lr}
   1c2d0:	4604      	mov	r4, r0
   1c2d2:	460e      	mov	r6, r1
	if (!cb) {
   1c2d4:	4615      	mov	r5, r2
   1c2d6:	b132      	cbz	r2, 1c2e6 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1c2d8:	462a      	mov	r2, r5
   1c2da:	4631      	mov	r1, r6
   1c2dc:	4620      	mov	r0, r4
}
   1c2de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1c2e2:	f7f5 be9d 	b.w	12020 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1c2e6:	2200      	movs	r2, #0
   1c2e8:	2300      	movs	r3, #0
   1c2ea:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1c2ee:	f7fc ff01 	bl	190f4 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1c2f2:	2800      	cmp	r0, #0
   1c2f4:	daf0      	bge.n	1c2d8 <bt_att_chan_send+0xa>
}
   1c2f6:	f06f 000a 	mvn.w	r0, #10
   1c2fa:	bd70      	pop	{r4, r5, r6, pc}

0001c2fc <bt_att_chan_send_rsp>:
{
   1c2fc:	b538      	push	{r3, r4, r5, lr}
   1c2fe:	4604      	mov	r4, r0
   1c300:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1c302:	f7ff ffe4 	bl	1c2ce <bt_att_chan_send>
	if (err) {
   1c306:	b130      	cbz	r0, 1c316 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1c308:	4629      	mov	r1, r5
   1c30a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1c30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1c312:	f7f8 bfe7 	b.w	152e4 <net_buf_put>
}
   1c316:	bd38      	pop	{r3, r4, r5, pc}

0001c318 <process_queue>:
{
   1c318:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1c31a:	2200      	movs	r2, #0
{
   1c31c:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1c31e:	2300      	movs	r3, #0
   1c320:	4608      	mov	r0, r1
{
   1c322:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1c324:	f7f8 ff8a 	bl	1523c <net_buf_get>
	if (buf) {
   1c328:	4605      	mov	r5, r0
   1c32a:	b160      	cbz	r0, 1c346 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1c32c:	4601      	mov	r1, r0
   1c32e:	2200      	movs	r2, #0
   1c330:	4620      	mov	r0, r4
   1c332:	f7f5 fe75 	bl	12020 <chan_send>
		if (err) {
   1c336:	4604      	mov	r4, r0
   1c338:	b118      	cbz	r0, 1c342 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1c33a:	4629      	mov	r1, r5
   1c33c:	4630      	mov	r0, r6
   1c33e:	f001 fc3a 	bl	1dbb6 <k_queue_prepend>
}
   1c342:	4620      	mov	r0, r4
   1c344:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c346:	f06f 0401 	mvn.w	r4, #1
   1c34a:	e7fa      	b.n	1c342 <process_queue+0x2a>

0001c34c <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c34c:	2200      	movs	r2, #0
   1c34e:	b510      	push	{r4, lr}
	return list->head;
   1c350:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c352:	b153      	cbz	r3, 1c36a <sys_slist_find_and_remove.isra.0+0x1e>
   1c354:	428b      	cmp	r3, r1
   1c356:	d10e      	bne.n	1c376 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1c358:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1c35a:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c35c:	b932      	cbnz	r2, 1c36c <sys_slist_find_and_remove.isra.0+0x20>
   1c35e:	42a1      	cmp	r1, r4
	list->head = node;
   1c360:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c362:	d100      	bne.n	1c366 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1c364:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c366:	2300      	movs	r3, #0
   1c368:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c36a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c36c:	42a1      	cmp	r1, r4
	parent->next = child;
   1c36e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c370:	bf08      	it	eq
   1c372:	6042      	streq	r2, [r0, #4]
}
   1c374:	e7f7      	b.n	1c366 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1c376:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c378:	681b      	ldr	r3, [r3, #0]
   1c37a:	e7ea      	b.n	1c352 <sys_slist_find_and_remove.isra.0+0x6>

0001c37c <att_exec_write_req>:
   1c37c:	2006      	movs	r0, #6
   1c37e:	4770      	bx	lr

0001c380 <chan_req_send>:
{
   1c380:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c382:	690e      	ldr	r6, [r1, #16]
{
   1c384:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c386:	4630      	mov	r0, r6
   1c388:	f7ff fe1b 	bl	1bfc2 <net_buf_frags_len>
   1c38c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1c390:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c392:	4283      	cmp	r3, r0
   1c394:	d317      	bcc.n	1c3c6 <chan_req_send+0x46>
	chan->req = req;
   1c396:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1c39a:	f106 0008 	add.w	r0, r6, #8
   1c39e:	f000 fdb8 	bl	1cf12 <net_buf_simple_headroom>
	state->len = buf->len;
   1c3a2:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1c3a4:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1c3a6:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1c3a8:	6920      	ldr	r0, [r4, #16]
   1c3aa:	f7f9 f80d 	bl	153c8 <net_buf_ref>
   1c3ae:	2200      	movs	r2, #0
   1c3b0:	4601      	mov	r1, r0
   1c3b2:	4628      	mov	r0, r5
   1c3b4:	f7f5 fe34 	bl	12020 <chan_send>
	if (err) {
   1c3b8:	4605      	mov	r5, r0
   1c3ba:	b110      	cbz	r0, 1c3c2 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1c3bc:	6920      	ldr	r0, [r4, #16]
   1c3be:	f7f8 ffbf 	bl	15340 <net_buf_unref>
}
   1c3c2:	4628      	mov	r0, r5
   1c3c4:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1c3c6:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1c3ca:	e7fa      	b.n	1c3c2 <chan_req_send+0x42>

0001c3cc <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c3cc:	30c8      	adds	r0, #200	; 0xc8
   1c3ce:	e8d0 3fef 	ldaex	r3, [r0]
   1c3d2:	f023 0301 	bic.w	r3, r3, #1
   1c3d6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c3da:	2a00      	cmp	r2, #0
   1c3dc:	d1f7      	bne.n	1c3ce <chan_rsp_sent+0x2>
}
   1c3de:	4770      	bx	lr

0001c3e0 <chan_cfm_sent>:
   1c3e0:	30c8      	adds	r0, #200	; 0xc8
   1c3e2:	e8d0 3fef 	ldaex	r3, [r0]
   1c3e6:	f023 0302 	bic.w	r3, r3, #2
   1c3ea:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c3ee:	2a00      	cmp	r2, #0
   1c3f0:	d1f7      	bne.n	1c3e2 <chan_cfm_sent+0x2>
}
   1c3f2:	4770      	bx	lr

0001c3f4 <read_cb>:
{
   1c3f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c3f8:	4606      	mov	r6, r0
	data->err = 0x00;
   1c3fa:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1c3fc:	f8d2 8000 	ldr.w	r8, [r2]
{
   1c400:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1c402:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c406:	4631      	mov	r1, r6
	data->err = 0x00;
   1c408:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c40a:	2215      	movs	r2, #21
   1c40c:	f000 fc52 	bl	1ccb4 <bt_gatt_check_perm>
   1c410:	4604      	mov	r4, r0
   1c412:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1c414:	b9a0      	cbnz	r0, 1c440 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c416:	e9cd 0000 	strd	r0, r0, [sp]
   1c41a:	88ab      	ldrh	r3, [r5, #4]
   1c41c:	4631      	mov	r1, r6
   1c41e:	4640      	mov	r0, r8
   1c420:	68aa      	ldr	r2, [r5, #8]
   1c422:	f7ff fec9 	bl	1c1b8 <att_chan_read>
	if (ret < 0) {
   1c426:	1e03      	subs	r3, r0, #0
   1c428:	da0c      	bge.n	1c444 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1c42a:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1c42e:	bf32      	itee	cc
   1c430:	230e      	movcc	r3, #14
		return -err;
   1c432:	425b      	negcs	r3, r3
   1c434:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1c436:	732b      	strb	r3, [r5, #12]
}
   1c438:	4620      	mov	r0, r4
   1c43a:	b002      	add	sp, #8
   1c43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1c440:	463c      	mov	r4, r7
   1c442:	e7f9      	b.n	1c438 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1c444:	2401      	movs	r4, #1
   1c446:	e7f7      	b.n	1c438 <read_cb+0x44>

0001c448 <bt_att_sent>:
{
   1c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1c44a:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1c44e:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1c450:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c454:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1c458:	b10b      	cbz	r3, 1c45e <bt_att_sent+0x16>
		chan->sent(chan);
   1c45a:	4638      	mov	r0, r7
   1c45c:	4798      	blx	r3
   1c45e:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1c462:	e8d3 2fef 	ldaex	r2, [r3]
   1c466:	f022 0210 	bic.w	r2, r2, #16
   1c46a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c46e:	2900      	cmp	r1, #0
   1c470:	d1f7      	bne.n	1c462 <bt_att_sent+0x1a>
	if (!att) {
   1c472:	b335      	cbz	r5, 1c4c2 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1c474:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1c478:	b98b      	cbnz	r3, 1c49e <bt_att_sent+0x56>
   1c47a:	686b      	ldr	r3, [r5, #4]
   1c47c:	b17b      	cbz	r3, 1c49e <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c47e:	1d28      	adds	r0, r5, #4
   1c480:	f7ff fd95 	bl	1bfae <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c484:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c486:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c488:	4638      	mov	r0, r7
   1c48a:	f7ff ff79 	bl	1c380 <chan_req_send>
   1c48e:	2800      	cmp	r0, #0
   1c490:	da17      	bge.n	1c4c2 <bt_att_sent+0x7a>
	parent->next = child;
   1c492:	686b      	ldr	r3, [r5, #4]
   1c494:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c496:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1c498:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c49a:	b903      	cbnz	r3, 1c49e <bt_att_sent+0x56>
	list->tail = node;
   1c49c:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1c49e:	4638      	mov	r0, r7
   1c4a0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1c4a4:	f7ff ff38 	bl	1c318 <process_queue>
	if (!err) {
   1c4a8:	b158      	cbz	r0, 1c4c2 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1c4aa:	4638      	mov	r0, r7
   1c4ac:	f105 010c 	add.w	r1, r5, #12
   1c4b0:	f7ff ff32 	bl	1c318 <process_queue>
	if (!err) {
   1c4b4:	b128      	cbz	r0, 1c4c2 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1c4b6:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1c4ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c4be:	f7fc bddd 	b.w	1907c <z_impl_k_sem_give>
   1c4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c4c4 <att_req_send_process>:
{
   1c4c4:	b570      	push	{r4, r5, r6, lr}
   1c4c6:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1c4c8:	3004      	adds	r0, #4
   1c4ca:	f7ff fd70 	bl	1bfae <sys_slist_get>
	if (!node) {
   1c4ce:	4606      	mov	r6, r0
   1c4d0:	b1c0      	cbz	r0, 1c504 <att_req_send_process+0x40>
	return list->head;
   1c4d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c4d4:	b153      	cbz	r3, 1c4ec <att_req_send_process+0x28>
   1c4d6:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1c4da:	d007      	beq.n	1c4ec <att_req_send_process+0x28>
	return node->next;
   1c4dc:	681c      	ldr	r4, [r3, #0]
   1c4de:	b10c      	cbz	r4, 1c4e4 <att_req_send_process+0x20>
   1c4e0:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1c4e4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1c4e8:	b13b      	cbz	r3, 1c4fa <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c4ea:	b964      	cbnz	r4, 1c506 <att_req_send_process+0x42>
	parent->next = child;
   1c4ec:	686b      	ldr	r3, [r5, #4]
   1c4ee:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c4f0:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1c4f2:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c4f4:	b933      	cbnz	r3, 1c504 <att_req_send_process+0x40>
	list->tail = node;
   1c4f6:	60ae      	str	r6, [r5, #8]
}
   1c4f8:	e004      	b.n	1c504 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c4fa:	4631      	mov	r1, r6
   1c4fc:	f7f5 fdfc 	bl	120f8 <bt_att_chan_req_send>
   1c500:	2800      	cmp	r0, #0
   1c502:	dbf2      	blt.n	1c4ea <att_req_send_process+0x26>
}
   1c504:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c506:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1c50a:	d004      	beq.n	1c516 <att_req_send_process+0x52>
	return node->next;
   1c50c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c510:	b10b      	cbz	r3, 1c516 <att_req_send_process+0x52>
   1c512:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1c516:	4620      	mov	r0, r4
   1c518:	461c      	mov	r4, r3
   1c51a:	e7e3      	b.n	1c4e4 <att_req_send_process+0x20>

0001c51c <bt_att_status>:
{
   1c51c:	b538      	push	{r3, r4, r5, lr}
   1c51e:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c520:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1c524:	07db      	lsls	r3, r3, #31
   1c526:	d519      	bpl.n	1c55c <bt_att_status+0x40>
	if (!chan->att) {
   1c528:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1c52c:	b1b0      	cbz	r0, 1c55c <bt_att_status+0x40>
	if (chan->req) {
   1c52e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1c532:	b99b      	cbnz	r3, 1c55c <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1c534:	3004      	adds	r0, #4
   1c536:	f7ff fd3a 	bl	1bfae <sys_slist_get>
	if (!node) {
   1c53a:	4604      	mov	r4, r0
   1c53c:	b170      	cbz	r0, 1c55c <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c53e:	4601      	mov	r1, r0
   1c540:	f1a5 0008 	sub.w	r0, r5, #8
   1c544:	f7f5 fdd8 	bl	120f8 <bt_att_chan_req_send>
   1c548:	2800      	cmp	r0, #0
   1c54a:	da07      	bge.n	1c55c <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1c54c:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1c550:	685a      	ldr	r2, [r3, #4]
   1c552:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c554:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c556:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c558:	b902      	cbnz	r2, 1c55c <bt_att_status+0x40>
	list->tail = node;
   1c55a:	609c      	str	r4, [r3, #8]
}
   1c55c:	bd38      	pop	{r3, r4, r5, pc}

0001c55e <att_write_req>:
{
   1c55e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c560:	460c      	mov	r4, r1
   1c562:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c564:	f101 0008 	add.w	r0, r1, #8
   1c568:	f000 fccb 	bl	1cf02 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1c56c:	89a2      	ldrh	r2, [r4, #12]
   1c56e:	4603      	mov	r3, r0
   1c570:	9201      	str	r2, [sp, #4]
   1c572:	68a2      	ldr	r2, [r4, #8]
   1c574:	2112      	movs	r1, #18
   1c576:	9200      	str	r2, [sp, #0]
   1c578:	4628      	mov	r0, r5
   1c57a:	2213      	movs	r2, #19
   1c57c:	f7f5 ff9a 	bl	124b4 <att_write_rsp.constprop.0>
}
   1c580:	b003      	add	sp, #12
   1c582:	bd30      	pop	{r4, r5, pc}

0001c584 <att_write_cmd>:
{
   1c584:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c586:	460c      	mov	r4, r1
   1c588:	4605      	mov	r5, r0
   1c58a:	f101 0008 	add.w	r0, r1, #8
   1c58e:	f000 fcb8 	bl	1cf02 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1c592:	89a2      	ldrh	r2, [r4, #12]
   1c594:	4603      	mov	r3, r0
   1c596:	9201      	str	r2, [sp, #4]
   1c598:	68a2      	ldr	r2, [r4, #8]
   1c59a:	4628      	mov	r0, r5
   1c59c:	9200      	str	r2, [sp, #0]
   1c59e:	2200      	movs	r2, #0
   1c5a0:	4611      	mov	r1, r2
   1c5a2:	f7f5 ff87 	bl	124b4 <att_write_rsp.constprop.0>
}
   1c5a6:	b003      	add	sp, #12
   1c5a8:	bd30      	pop	{r4, r5, pc}

0001c5aa <att_read_blob_req>:
{
   1c5aa:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1c5ac:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1c5ae:	210c      	movs	r1, #12
   1c5b0:	8813      	ldrh	r3, [r2, #0]
   1c5b2:	8852      	ldrh	r2, [r2, #2]
   1c5b4:	9200      	str	r2, [sp, #0]
   1c5b6:	220d      	movs	r2, #13
   1c5b8:	f7f6 f8d8 	bl	1276c <att_read_rsp>
}
   1c5bc:	b003      	add	sp, #12
   1c5be:	f85d fb04 	ldr.w	pc, [sp], #4

0001c5c2 <att_read_req>:
{
   1c5c2:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1c5c4:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1c5c6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1c5c8:	210a      	movs	r1, #10
   1c5ca:	881b      	ldrh	r3, [r3, #0]
   1c5cc:	9200      	str	r2, [sp, #0]
   1c5ce:	220b      	movs	r2, #11
   1c5d0:	f7f6 f8cc 	bl	1276c <att_read_rsp>
}
   1c5d4:	b003      	add	sp, #12
   1c5d6:	f85d fb04 	ldr.w	pc, [sp], #4

0001c5da <bt_att_init>:
	bt_gatt_init();
   1c5da:	f7f7 b901 	b.w	137e0 <bt_gatt_init>

0001c5de <bt_att_get_mtu>:
{
   1c5de:	b508      	push	{r3, lr}
	att = att_get(conn);
   1c5e0:	f7f5 fb8c 	bl	11cfc <att_get>
	if (!att) {
   1c5e4:	b1d8      	cbz	r0, 1c61e <bt_att_get_mtu+0x40>
	return list->head;
   1c5e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c5e8:	b1c8      	cbz	r0, 1c61e <bt_att_get_mtu+0x40>
   1c5ea:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   1c5ee:	d015      	beq.n	1c61c <bt_att_get_mtu+0x3e>
	return node->next;
   1c5f0:	6803      	ldr	r3, [r0, #0]
   1c5f2:	b10b      	cbz	r3, 1c5f8 <bt_att_get_mtu+0x1a>
   1c5f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1c5f8:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1c5fa:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   1c5fe:	4290      	cmp	r0, r2
   1c600:	bf38      	it	cc
   1c602:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c604:	b15b      	cbz	r3, 1c61e <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c606:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1c60a:	d004      	beq.n	1c616 <bt_att_get_mtu+0x38>
	return node->next;
   1c60c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1c610:	b10a      	cbz	r2, 1c616 <bt_att_get_mtu+0x38>
   1c612:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1c616:	4619      	mov	r1, r3
   1c618:	4613      	mov	r3, r2
   1c61a:	e7ee      	b.n	1c5fa <bt_att_get_mtu+0x1c>
		return 0;
   1c61c:	4608      	mov	r0, r1
}
   1c61e:	bd08      	pop	{r3, pc}

0001c620 <att_req_destroy>:
{
   1c620:	b510      	push	{r4, lr}
   1c622:	4604      	mov	r4, r0
	if (req->buf) {
   1c624:	6900      	ldr	r0, [r0, #16]
   1c626:	b108      	cbz	r0, 1c62c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1c628:	f7f8 fe8a 	bl	15340 <net_buf_unref>
	if (req->destroy) {
   1c62c:	68a3      	ldr	r3, [r4, #8]
   1c62e:	b10b      	cbz	r3, 1c634 <att_req_destroy+0x14>
		req->destroy(req);
   1c630:	4620      	mov	r0, r4
   1c632:	4798      	blx	r3
	bt_att_req_free(req);
   1c634:	4620      	mov	r0, r4
}
   1c636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1c63a:	f7f6 ba35 	b.w	12aa8 <bt_att_req_free>

0001c63e <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1c63e:	898a      	ldrh	r2, [r1, #12]
   1c640:	2300      	movs	r3, #0
   1c642:	6889      	ldr	r1, [r1, #8]
   1c644:	f7f6 ba3c 	b.w	12ac0 <att_handle_rsp>

0001c648 <att_handle_find_type_rsp>:
   1c648:	f7ff bff9 	b.w	1c63e <att_handle_find_info_rsp>

0001c64c <att_handle_read_type_rsp>:
   1c64c:	f7ff bff7 	b.w	1c63e <att_handle_find_info_rsp>

0001c650 <att_handle_read_rsp>:
   1c650:	f7ff bff5 	b.w	1c63e <att_handle_find_info_rsp>

0001c654 <att_handle_read_blob_rsp>:
   1c654:	f7ff bff3 	b.w	1c63e <att_handle_find_info_rsp>

0001c658 <att_handle_read_mult_rsp>:
   1c658:	f7ff bff1 	b.w	1c63e <att_handle_find_info_rsp>

0001c65c <att_handle_read_group_rsp>:
   1c65c:	f7ff bfef 	b.w	1c63e <att_handle_find_info_rsp>

0001c660 <att_handle_write_rsp>:
   1c660:	f7ff bfed 	b.w	1c63e <att_handle_find_info_rsp>

0001c664 <att_handle_prepare_write_rsp>:
   1c664:	f7ff bfeb 	b.w	1c63e <att_handle_find_info_rsp>

0001c668 <att_handle_exec_write_rsp>:
   1c668:	f7ff bfe9 	b.w	1c63e <att_handle_find_info_rsp>

0001c66c <att_confirm>:
   1c66c:	f7ff bfe7 	b.w	1c63e <att_handle_find_info_rsp>

0001c670 <att_mtu_rsp>:
{
   1c670:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1c672:	6889      	ldr	r1, [r1, #8]
{
   1c674:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1c676:	880c      	ldrh	r4, [r1, #0]
{
   1c678:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1c67a:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1c67c:	bf89      	itett	hi
   1c67e:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1c680:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1c682:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1c686:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1c68a:	bf99      	ittee	ls
   1c68c:	2304      	movls	r3, #4
   1c68e:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1c690:	2300      	movhi	r3, #0
   1c692:	8992      	ldrhhi	r2, [r2, #12]
}
   1c694:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1c696:	f7f6 ba13 	b.w	12ac0 <att_handle_rsp>

0001c69a <att_chan_detach>:
{
   1c69a:	b538      	push	{r3, r4, r5, lr}
   1c69c:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1c69e:	6800      	ldr	r0, [r0, #0]
   1c6a0:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1c6a4:	3028      	adds	r0, #40	; 0x28
   1c6a6:	f7ff fe51 	bl	1c34c <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1c6aa:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1c6ae:	4628      	mov	r0, r5
   1c6b0:	f7fc fce4 	bl	1907c <z_impl_k_sem_give>
   1c6b4:	4628      	mov	r0, r5
   1c6b6:	f7fc fce1 	bl	1907c <z_impl_k_sem_give>
   1c6ba:	4628      	mov	r0, r5
   1c6bc:	f7fc fcde 	bl	1907c <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1c6c0:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1c6c4:	2200      	movs	r2, #0
   1c6c6:	2300      	movs	r3, #0
   1c6c8:	4628      	mov	r0, r5
   1c6ca:	f7f8 fdb7 	bl	1523c <net_buf_get>
   1c6ce:	4602      	mov	r2, r0
   1c6d0:	b950      	cbnz	r0, 1c6e8 <att_chan_detach+0x4e>
	if (chan->req) {
   1c6d2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1c6d6:	b123      	cbz	r3, 1c6e2 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1c6d8:	4601      	mov	r1, r0
   1c6da:	230e      	movs	r3, #14
   1c6dc:	4620      	mov	r0, r4
   1c6de:	f7f6 f9ef 	bl	12ac0 <att_handle_rsp>
	chan->att = NULL;
   1c6e2:	2300      	movs	r3, #0
   1c6e4:	6023      	str	r3, [r4, #0]
}
   1c6e6:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1c6e8:	f7f8 fe2a 	bl	15340 <net_buf_unref>
   1c6ec:	e7ea      	b.n	1c6c4 <att_chan_detach+0x2a>

0001c6ee <bt_att_disconnected>:
{
   1c6ee:	b538      	push	{r3, r4, r5, lr}
   1c6f0:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1c6f2:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1c6f6:	f7ff ffd0 	bl	1c69a <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1c6fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c6fc:	b93b      	cbnz	r3, 1c70e <bt_att_disconnected+0x20>
	att_reset(att);
   1c6fe:	4628      	mov	r0, r5
   1c700:	f7f6 fa3c 	bl	12b7c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1c704:	6820      	ldr	r0, [r4, #0]
}
   1c706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1c70a:	f7f8 bbc5 	b.w	14e98 <bt_gatt_disconnected>
}
   1c70e:	bd38      	pop	{r3, r4, r5, pc}

0001c710 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1c710:	6010      	str	r0, [r2, #0]
}
   1c712:	2000      	movs	r0, #0
   1c714:	4770      	bx	lr

0001c716 <gatt_ccc_changed>:
{
   1c716:	460b      	mov	r3, r1
   1c718:	460a      	mov	r2, r1
   1c71a:	b430      	push	{r4, r5}
   1c71c:	f101 0464 	add.w	r4, r1, #100	; 0x64
	uint16_t value = 0x0000;
   1c720:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   1c722:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c724:	320a      	adds	r2, #10
   1c726:	42a9      	cmp	r1, r5
   1c728:	bf38      	it	cc
   1c72a:	4629      	movcc	r1, r5
   1c72c:	42a2      	cmp	r2, r4
   1c72e:	d1f8      	bne.n	1c722 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   1c730:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1c734:	428a      	cmp	r2, r1
   1c736:	d005      	beq.n	1c744 <gatt_ccc_changed+0x2e>
		ccc->value = value;
   1c738:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
		if (ccc->cfg_changed) {
   1c73c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1c73e:	b10b      	cbz	r3, 1c744 <gatt_ccc_changed+0x2e>
}
   1c740:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1c742:	4718      	bx	r3
}
   1c744:	bc30      	pop	{r4, r5}
   1c746:	4770      	bx	lr

0001c748 <gatt_indicate_rsp>:
{
   1c748:	b510      	push	{r4, lr}
   1c74a:	9c02      	ldr	r4, [sp, #8]
   1c74c:	460a      	mov	r2, r1
	params->_ref--;
   1c74e:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1c750:	4621      	mov	r1, r4
	params->_ref--;
   1c752:	3b01      	subs	r3, #1
   1c754:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1c756:	68a3      	ldr	r3, [r4, #8]
   1c758:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1c75a:	68e3      	ldr	r3, [r4, #12]
   1c75c:	b12b      	cbz	r3, 1c76a <gatt_indicate_rsp+0x22>
   1c75e:	7da2      	ldrb	r2, [r4, #22]
   1c760:	b91a      	cbnz	r2, 1c76a <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1c762:	4620      	mov	r0, r4
}
   1c764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1c768:	4718      	bx	r3
}
   1c76a:	bd10      	pop	{r4, pc}

0001c76c <match_uuid>:
	data->attr = attr;
   1c76c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1c76e:	8091      	strh	r1, [r2, #4]
}
   1c770:	2000      	movs	r0, #0
   1c772:	4770      	bx	lr

0001c774 <ccc_set_cb>:
}
   1c774:	2000      	movs	r0, #0
   1c776:	4770      	bx	lr

0001c778 <gen_hash_m>:
{
   1c778:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c77a:	6807      	ldr	r7, [r0, #0]
{
   1c77c:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c77e:	783d      	ldrb	r5, [r7, #0]
{
   1c780:	4614      	mov	r4, r2
   1c782:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c784:	b10d      	cbz	r5, 1c78a <gen_hash_m+0x12>
	switch (u16->val) {
   1c786:	2501      	movs	r5, #1
   1c788:	e014      	b.n	1c7b4 <gen_hash_m+0x3c>
   1c78a:	887b      	ldrh	r3, [r7, #2]
   1c78c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1c790:	d004      	beq.n	1c79c <gen_hash_m+0x24>
   1c792:	d812      	bhi.n	1c7ba <gen_hash_m+0x42>
   1c794:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1c798:	2b03      	cmp	r3, #3
   1c79a:	d8f4      	bhi.n	1c786 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1c79c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c7a0:	2202      	movs	r2, #2
   1c7a2:	4620      	mov	r0, r4
   1c7a4:	f10d 010e 	add.w	r1, sp, #14
   1c7a8:	f7fe fcd5 	bl	1b156 <tc_cmac_update>
   1c7ac:	b9e0      	cbnz	r0, 1c7e8 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1c7ae:	f06f 0315 	mvn.w	r3, #21
   1c7b2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1c7b4:	4628      	mov	r0, r5
   1c7b6:	b009      	add	sp, #36	; 0x24
   1c7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1c7ba:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1c7be:	33ff      	adds	r3, #255	; 0xff
   1c7c0:	b29b      	uxth	r3, r3
   1c7c2:	2b04      	cmp	r3, #4
   1c7c4:	d8df      	bhi.n	1c786 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1c7c6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c7ca:	2202      	movs	r2, #2
   1c7cc:	4620      	mov	r0, r4
   1c7ce:	f10d 010e 	add.w	r1, sp, #14
   1c7d2:	f7fe fcc0 	bl	1b156 <tc_cmac_update>
   1c7d6:	2800      	cmp	r0, #0
   1c7d8:	d0e9      	beq.n	1c7ae <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1c7da:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c7dc:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1c7de:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c7e2:	f10d 010e 	add.w	r1, sp, #14
   1c7e6:	e017      	b.n	1c818 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1c7e8:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c7ea:	2202      	movs	r2, #2
   1c7ec:	4620      	mov	r0, r4
   1c7ee:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1c7f2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c7f6:	f7fe fcae 	bl	1b156 <tc_cmac_update>
   1c7fa:	2800      	cmp	r0, #0
   1c7fc:	d0d7      	beq.n	1c7ae <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1c7fe:	2000      	movs	r0, #0
   1c800:	2310      	movs	r3, #16
   1c802:	4631      	mov	r1, r6
   1c804:	eb0d 0203 	add.w	r2, sp, r3
   1c808:	6877      	ldr	r7, [r6, #4]
   1c80a:	9000      	str	r0, [sp, #0]
   1c80c:	47b8      	blx	r7
		if (len < 0) {
   1c80e:	1e02      	subs	r2, r0, #0
   1c810:	da01      	bge.n	1c816 <gen_hash_m+0x9e>
			state->err = len;
   1c812:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1c814:	e7ce      	b.n	1c7b4 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1c816:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c818:	4620      	mov	r0, r4
   1c81a:	f7fe fc9c 	bl	1b156 <tc_cmac_update>
   1c81e:	2800      	cmp	r0, #0
   1c820:	d1b1      	bne.n	1c786 <gen_hash_m+0xe>
   1c822:	e7c4      	b.n	1c7ae <gen_hash_m+0x36>

0001c824 <bt_addr_le_cmp>:
   1c824:	2207      	movs	r2, #7
   1c826:	f7ff b831 	b.w	1b88c <memcmp>

0001c82a <find_ccc_cfg>:
{
   1c82a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c82c:	4606      	mov	r6, r0
   1c82e:	1c4c      	adds	r4, r1, #1
   1c830:	f101 0565 	add.w	r5, r1, #101	; 0x65
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1c834:	1e67      	subs	r7, r4, #1
		if (conn) {
   1c836:	b14e      	cbz	r6, 1c84c <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1c838:	4622      	mov	r2, r4
   1c83a:	4630      	mov	r0, r6
   1c83c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1c840:	f7ff fa90 	bl	1bd64 <bt_conn_is_peer_addr_le>
   1c844:	b158      	cbz	r0, 1c85e <find_ccc_cfg+0x34>
}
   1c846:	4638      	mov	r0, r7
   1c848:	b003      	add	sp, #12
   1c84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c84c:	4669      	mov	r1, sp
   1c84e:	4620      	mov	r0, r4
   1c850:	9600      	str	r6, [sp, #0]
   1c852:	f8cd 6003 	str.w	r6, [sp, #3]
   1c856:	f7ff ffe5 	bl	1c824 <bt_addr_le_cmp>
   1c85a:	2800      	cmp	r0, #0
   1c85c:	d0f3      	beq.n	1c846 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c85e:	340a      	adds	r4, #10
   1c860:	42ac      	cmp	r4, r5
   1c862:	d1e7      	bne.n	1c834 <find_ccc_cfg+0xa>
	return NULL;
   1c864:	2700      	movs	r7, #0
   1c866:	e7ee      	b.n	1c846 <find_ccc_cfg+0x1c>

0001c868 <ccc_find_cfg>:
{
   1c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c86c:	4604      	mov	r4, r0
   1c86e:	460f      	mov	r7, r1
   1c870:	4690      	mov	r8, r2
   1c872:	2500      	movs	r5, #0
   1c874:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1c876:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1c87a:	4543      	cmp	r3, r8
   1c87c:	d107      	bne.n	1c88e <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1c87e:	4639      	mov	r1, r7
   1c880:	4630      	mov	r0, r6
   1c882:	f7ff ffcf 	bl	1c824 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1c886:	b910      	cbnz	r0, 1c88e <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1c888:	1960      	adds	r0, r4, r5
}
   1c88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c88e:	350a      	adds	r5, #10
   1c890:	2d64      	cmp	r5, #100	; 0x64
   1c892:	f106 060a 	add.w	r6, r6, #10
   1c896:	d1ee      	bne.n	1c876 <ccc_find_cfg+0xe>
	return NULL;
   1c898:	2000      	movs	r0, #0
   1c89a:	e7f6      	b.n	1c88a <ccc_find_cfg+0x22>

0001c89c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1c89c:	2207      	movs	r2, #7
   1c89e:	f7ff b806 	b.w	1b8ae <memcpy>

0001c8a2 <clear_ccc_cfg>:
{
   1c8a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c8a4:	2500      	movs	r5, #0
{
   1c8a6:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c8a8:	4669      	mov	r1, sp
   1c8aa:	3001      	adds	r0, #1
   1c8ac:	9500      	str	r5, [sp, #0]
   1c8ae:	f8cd 5003 	str.w	r5, [sp, #3]
   1c8b2:	f7ff fff3 	bl	1c89c <bt_addr_le_copy>
	cfg->id = 0U;
   1c8b6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1c8b8:	8125      	strh	r5, [r4, #8]
}
   1c8ba:	b003      	add	sp, #12
   1c8bc:	bd30      	pop	{r4, r5, pc}

0001c8be <atomic_or>:
{
   1c8be:	4603      	mov	r3, r0
}
   1c8c0:	e8d3 0fef 	ldaex	r0, [r3]
   1c8c4:	ea40 0201 	orr.w	r2, r0, r1
   1c8c8:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c8cc:	f1bc 0f00 	cmp.w	ip, #0
   1c8d0:	d1f6      	bne.n	1c8c0 <atomic_or+0x2>
   1c8d2:	4770      	bx	lr

0001c8d4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c8d4:	e8d0 0faf 	lda	r0, [r0]
}
   1c8d8:	4770      	bx	lr

0001c8da <gatt_read_mult_rsp>:
{
   1c8da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c8dc:	9d08      	ldr	r5, [sp, #32]
   1c8de:	4606      	mov	r6, r0
	if (err || !length) {
   1c8e0:	460c      	mov	r4, r1
	params->func(conn, 0, params, pdu, length);
   1c8e2:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   1c8e4:	b901      	cbnz	r1, 1c8e8 <gatt_read_mult_rsp+0xe>
   1c8e6:	b94b      	cbnz	r3, 1c8fc <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   1c8e8:	2300      	movs	r3, #0
   1c8ea:	462a      	mov	r2, r5
   1c8ec:	4621      	mov	r1, r4
   1c8ee:	9308      	str	r3, [sp, #32]
	params->func(conn, 0, params, NULL, 0);
   1c8f0:	4630      	mov	r0, r6
   1c8f2:	46bc      	mov	ip, r7
}
   1c8f4:	b003      	add	sp, #12
   1c8f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   1c8fa:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   1c8fc:	9300      	str	r3, [sp, #0]
   1c8fe:	4613      	mov	r3, r2
   1c900:	462a      	mov	r2, r5
   1c902:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   1c904:	9408      	str	r4, [sp, #32]
   1c906:	4623      	mov	r3, r4
   1c908:	462a      	mov	r2, r5
   1c90a:	4621      	mov	r1, r4
   1c90c:	682f      	ldr	r7, [r5, #0]
   1c90e:	e7ef      	b.n	1c8f0 <gatt_read_mult_rsp+0x16>

0001c910 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1c910:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1c912:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1c914:	3001      	adds	r0, #1
   1c916:	4669      	mov	r1, sp
   1c918:	9300      	str	r3, [sp, #0]
   1c91a:	f8cd 3003 	str.w	r3, [sp, #3]
   1c91e:	f7ff ffbd 	bl	1c89c <bt_addr_le_copy>
}
   1c922:	b003      	add	sp, #12
   1c924:	f85d fb04 	ldr.w	pc, [sp], #4

0001c928 <clear_cf_cfg>:
{
   1c928:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c92a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c92c:	2500      	movs	r5, #0
   1c92e:	4669      	mov	r1, sp
   1c930:	3001      	adds	r0, #1
   1c932:	9500      	str	r5, [sp, #0]
   1c934:	f8cd 5003 	str.w	r5, [sp, #3]
   1c938:	f7ff ffb0 	bl	1c89c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1c93c:	f104 0008 	add.w	r0, r4, #8
   1c940:	2201      	movs	r2, #1
   1c942:	4629      	mov	r1, r5
   1c944:	f7fe ffde 	bl	1b904 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c948:	340c      	adds	r4, #12
   1c94a:	e8d4 3fef 	ldaex	r3, [r4]
   1c94e:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1c952:	2a00      	cmp	r2, #0
   1c954:	d1f9      	bne.n	1c94a <clear_cf_cfg+0x22>
}
   1c956:	b003      	add	sp, #12
   1c958:	bd30      	pop	{r4, r5, pc}

0001c95a <gatt_sub_remove>:
{
   1c95a:	b570      	push	{r4, r5, r6, lr}
   1c95c:	460c      	mov	r4, r1
	if (params) {
   1c95e:	4619      	mov	r1, r3
   1c960:	b16b      	cbz	r3, 1c97e <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1c962:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1c966:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1c968:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1c96a:	b97a      	cbnz	r2, 1c98c <gatt_sub_remove+0x32>
   1c96c:	42ae      	cmp	r6, r5
	list->head = node;
   1c96e:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1c970:	d100      	bne.n	1c974 <gatt_sub_remove+0x1a>
	list->tail = node;
   1c972:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1c974:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1c976:	680d      	ldr	r5, [r1, #0]
   1c978:	461a      	mov	r2, r3
   1c97a:	614b      	str	r3, [r1, #20]
   1c97c:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1c97e:	68a3      	ldr	r3, [r4, #8]
   1c980:	b94b      	cbnz	r3, 1c996 <gatt_sub_remove+0x3c>
   1c982:	4620      	mov	r0, r4
}
   1c984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c988:	f7ff bfc2 	b.w	1c910 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1c98c:	42ae      	cmp	r6, r5
	parent->next = child;
   1c98e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c990:	bf08      	it	eq
   1c992:	60e2      	streq	r2, [r4, #12]
}
   1c994:	e7ee      	b.n	1c974 <gatt_sub_remove+0x1a>
   1c996:	bd70      	pop	{r4, r5, r6, pc}

0001c998 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1c998:	2a02      	cmp	r2, #2
{
   1c99a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1c99c:	d108      	bne.n	1c9b0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1c99e:	2300      	movs	r3, #0
   1c9a0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c9a4:	461a      	mov	r2, r3
   1c9a6:	7a00      	ldrb	r0, [r0, #8]
   1c9a8:	f7f6 fb80 	bl	130ac <sc_save>
}
   1c9ac:	2002      	movs	r0, #2
   1c9ae:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1c9b0:	f7f6 fe30 	bl	13614 <sc_clear>
   1c9b4:	e7fa      	b.n	1c9ac <sc_ccc_cfg_write+0x14>

0001c9b6 <gatt_write_ccc_rsp>:
{
   1c9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9ba:	4606      	mov	r6, r0
   1c9bc:	460d      	mov	r5, r1
   1c9be:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c9c0:	f104 0310 	add.w	r3, r4, #16
   1c9c4:	e8d3 2fef 	ldaex	r2, [r3]
   1c9c8:	f022 0204 	bic.w	r2, r2, #4
   1c9cc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c9d0:	2900      	cmp	r1, #0
   1c9d2:	d1f7      	bne.n	1c9c4 <gatt_write_ccc_rsp+0xe>
	if (err) {
   1c9d4:	b1dd      	cbz	r5, 1ca0e <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1c9d6:	f7f6 fa53 	bl	12e80 <gatt_sub_find>
		if (!sub) {
   1c9da:	4601      	mov	r1, r0
   1c9dc:	b300      	cbz	r0, 1ca20 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1c9de:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c9e0:	b143      	cbz	r3, 1c9f4 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1c9e2:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1c9e4:	f104 0014 	add.w	r0, r4, #20
   1c9e8:	4283      	cmp	r3, r0
   1c9ea:	d10b      	bne.n	1ca04 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1c9ec:	4623      	mov	r3, r4
   1c9ee:	4630      	mov	r0, r6
   1c9f0:	f7ff ffb3 	bl	1c95a <gatt_sub_remove>
	if (params->write) {
   1c9f4:	6863      	ldr	r3, [r4, #4]
   1c9f6:	b19b      	cbz	r3, 1ca20 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1c9f8:	4629      	mov	r1, r5
   1c9fa:	4630      	mov	r0, r6
}
   1c9fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1ca00:	2200      	movs	r2, #0
   1ca02:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ca04:	2a00      	cmp	r2, #0
   1ca06:	d0f5      	beq.n	1c9f4 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1ca08:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ca0a:	6812      	ldr	r2, [r2, #0]
   1ca0c:	e7ec      	b.n	1c9e8 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1ca0e:	89a3      	ldrh	r3, [r4, #12]
   1ca10:	2b00      	cmp	r3, #0
   1ca12:	d1ef      	bne.n	1c9f4 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1ca14:	462b      	mov	r3, r5
   1ca16:	462a      	mov	r2, r5
   1ca18:	4621      	mov	r1, r4
   1ca1a:	6827      	ldr	r7, [r4, #0]
   1ca1c:	47b8      	blx	r7
   1ca1e:	e7e9      	b.n	1c9f4 <gatt_write_ccc_rsp+0x3e>
}
   1ca20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ca24 <read_ppcp>:
{
   1ca24:	b513      	push	{r0, r1, r4, lr}
   1ca26:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1ca28:	2218      	movs	r2, #24
   1ca2a:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1ca2e:	2228      	movs	r2, #40	; 0x28
   1ca30:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1ca34:	2200      	movs	r2, #0
   1ca36:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1ca3a:	222a      	movs	r2, #42	; 0x2a
{
   1ca3c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1ca40:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1ca44:	2908      	cmp	r1, #8
   1ca46:	d80b      	bhi.n	1ca60 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1ca48:	f1c1 0408 	rsb	r4, r1, #8
   1ca4c:	429c      	cmp	r4, r3
   1ca4e:	bfa8      	it	ge
   1ca50:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1ca52:	4469      	add	r1, sp
   1ca54:	4622      	mov	r2, r4
   1ca56:	f7fe ff2a 	bl	1b8ae <memcpy>
}
   1ca5a:	4620      	mov	r0, r4
   1ca5c:	b002      	add	sp, #8
   1ca5e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ca60:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1ca64:	e7f9      	b.n	1ca5a <read_ppcp+0x36>

0001ca66 <read_appearance>:
{
   1ca66:	b513      	push	{r0, r1, r4, lr}
   1ca68:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ca6a:	2200      	movs	r2, #0
{
   1ca6c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ca70:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1ca74:	2902      	cmp	r1, #2
   1ca76:	d80d      	bhi.n	1ca94 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1ca78:	f1c1 0402 	rsb	r4, r1, #2
   1ca7c:	429c      	cmp	r4, r3
   1ca7e:	bfa8      	it	ge
   1ca80:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1ca82:	f10d 0306 	add.w	r3, sp, #6
   1ca86:	4622      	mov	r2, r4
   1ca88:	4419      	add	r1, r3
   1ca8a:	f7fe ff10 	bl	1b8ae <memcpy>
}
   1ca8e:	4620      	mov	r0, r4
   1ca90:	b002      	add	sp, #8
   1ca92:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ca94:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1ca98:	e7f9      	b.n	1ca8e <read_appearance+0x28>

0001ca9a <read_name>:
{
   1ca9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca9e:	4698      	mov	r8, r3
   1caa0:	4615      	mov	r5, r2
   1caa2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1caa6:	f7f3 fc85 	bl	103b4 <bt_get_name>
   1caaa:	4607      	mov	r7, r0
				 strlen(name));
   1caac:	f7fe fec1 	bl	1b832 <strlen>
	if (offset > value_len) {
   1cab0:	b283      	uxth	r3, r0
   1cab2:	42b3      	cmp	r3, r6
   1cab4:	d30c      	bcc.n	1cad0 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1cab6:	1b9c      	subs	r4, r3, r6
   1cab8:	4544      	cmp	r4, r8
   1caba:	bfa8      	it	ge
   1cabc:	4644      	movge	r4, r8
   1cabe:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1cac0:	4622      	mov	r2, r4
   1cac2:	4628      	mov	r0, r5
   1cac4:	19b9      	adds	r1, r7, r6
   1cac6:	f7fe fef2 	bl	1b8ae <memcpy>
}
   1caca:	4620      	mov	r0, r4
   1cacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cad0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1cad4:	e7f9      	b.n	1caca <read_name+0x30>

0001cad6 <cf_read>:
{
   1cad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cad8:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1cada:	2300      	movs	r3, #0
{
   1cadc:	4615      	mov	r5, r2
   1cade:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1cae2:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1cae6:	f7f6 f98d 	bl	12e04 <find_cf_cfg>
	if (cfg) {
   1caea:	b128      	cbz	r0, 1caf8 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1caec:	f100 0108 	add.w	r1, r0, #8
   1caf0:	2201      	movs	r2, #1
   1caf2:	a801      	add	r0, sp, #4
   1caf4:	f7fe fedb 	bl	1b8ae <memcpy>
	if (offset > value_len) {
   1caf8:	2e01      	cmp	r6, #1
   1cafa:	d80d      	bhi.n	1cb18 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1cafc:	f1c6 0401 	rsb	r4, r6, #1
   1cb00:	42bc      	cmp	r4, r7
   1cb02:	bfa8      	it	ge
   1cb04:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cb06:	ab01      	add	r3, sp, #4
   1cb08:	4622      	mov	r2, r4
   1cb0a:	4628      	mov	r0, r5
   1cb0c:	1999      	adds	r1, r3, r6
   1cb0e:	f7fe fece 	bl	1b8ae <memcpy>
}
   1cb12:	4620      	mov	r0, r4
   1cb14:	b003      	add	sp, #12
   1cb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cb18:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1cb1c:	e7f9      	b.n	1cb12 <cf_read+0x3c>

0001cb1e <bt_gatt_attr_read_service>:
{
   1cb1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1cb20:	68c9      	ldr	r1, [r1, #12]
{
   1cb22:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1cb24:	780b      	ldrb	r3, [r1, #0]
{
   1cb26:	4610      	mov	r0, r2
   1cb28:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1cb2c:	b993      	cbnz	r3, 1cb54 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cb2e:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1cb30:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cb32:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1cb36:	d819      	bhi.n	1cb6c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1cb38:	f1c5 0202 	rsb	r2, r5, #2
   1cb3c:	4294      	cmp	r4, r2
   1cb3e:	bfa8      	it	ge
   1cb40:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cb42:	4622      	mov	r2, r4
   1cb44:	f10d 0306 	add.w	r3, sp, #6
   1cb48:	1959      	adds	r1, r3, r5
   1cb4a:	f7fe feb0 	bl	1b8ae <memcpy>
}
   1cb4e:	4620      	mov	r0, r4
   1cb50:	b003      	add	sp, #12
   1cb52:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1cb54:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1cb56:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1cb5a:	d807      	bhi.n	1cb6c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1cb5c:	f1c5 0210 	rsb	r2, r5, #16
   1cb60:	4294      	cmp	r4, r2
   1cb62:	bfa8      	it	ge
   1cb64:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cb66:	4429      	add	r1, r5
   1cb68:	4622      	mov	r2, r4
   1cb6a:	e7ee      	b.n	1cb4a <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cb6c:	f06f 0406 	mvn.w	r4, #6
   1cb70:	e7ed      	b.n	1cb4e <bt_gatt_attr_read_service+0x30>

0001cb72 <bt_gatt_attr_read_ccc>:
{
   1cb72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1cb74:	68c9      	ldr	r1, [r1, #12]
{
   1cb76:	4615      	mov	r5, r2
   1cb78:	461f      	mov	r7, r3
   1cb7a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1cb7e:	f7ff fe54 	bl	1c82a <find_ccc_cfg>
	if (cfg) {
   1cb82:	b100      	cbz	r0, 1cb86 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1cb84:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1cb86:	2e02      	cmp	r6, #2
   1cb88:	f8ad 0006 	strh.w	r0, [sp, #6]
   1cb8c:	d80e      	bhi.n	1cbac <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1cb8e:	f1c6 0402 	rsb	r4, r6, #2
   1cb92:	42bc      	cmp	r4, r7
   1cb94:	bfa8      	it	ge
   1cb96:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cb98:	f10d 0306 	add.w	r3, sp, #6
   1cb9c:	4622      	mov	r2, r4
   1cb9e:	4628      	mov	r0, r5
   1cba0:	1999      	adds	r1, r3, r6
   1cba2:	f7fe fe84 	bl	1b8ae <memcpy>
}
   1cba6:	4620      	mov	r0, r4
   1cba8:	b003      	add	sp, #12
   1cbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cbac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1cbb0:	e7f9      	b.n	1cba6 <bt_gatt_attr_read_ccc+0x34>

0001cbb2 <sc_restore_rsp>:
{
   1cbb2:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1cbb4:	f7f6 f926 	bl	12e04 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1cbb8:	b140      	cbz	r0, 1cbcc <sc_restore_rsp+0x1a>
   1cbba:	7a03      	ldrb	r3, [r0, #8]
   1cbbc:	07db      	lsls	r3, r3, #31
   1cbbe:	d505      	bpl.n	1cbcc <sc_restore_rsp+0x1a>
}
   1cbc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1cbc4:	2101      	movs	r1, #1
   1cbc6:	300c      	adds	r0, #12
   1cbc8:	f7ff be79 	b.w	1c8be <atomic_or>
   1cbcc:	bd08      	pop	{r3, pc}

0001cbce <bt_gatt_attr_read>:
{
   1cbce:	b538      	push	{r3, r4, r5, lr}
   1cbd0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1cbd4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1cbd8:	4610      	mov	r0, r2
	if (offset > value_len) {
   1cbda:	42a9      	cmp	r1, r5
   1cbdc:	d80b      	bhi.n	1cbf6 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1cbde:	1a6d      	subs	r5, r5, r1
   1cbe0:	429d      	cmp	r5, r3
   1cbe2:	bfa8      	it	ge
   1cbe4:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1cbe6:	9b05      	ldr	r3, [sp, #20]
   1cbe8:	b2ad      	uxth	r5, r5
   1cbea:	462a      	mov	r2, r5
   1cbec:	4419      	add	r1, r3
   1cbee:	f7fe fe5e 	bl	1b8ae <memcpy>
}
   1cbf2:	4628      	mov	r0, r5
   1cbf4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cbf6:	f06f 0506 	mvn.w	r5, #6
   1cbfa:	e7fa      	b.n	1cbf2 <bt_gatt_attr_read+0x24>

0001cbfc <bt_gatt_attr_value_handle>:
{
   1cbfc:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1cbfe:	4604      	mov	r4, r0
   1cc00:	b910      	cbnz	r0, 1cc08 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1cc02:	2000      	movs	r0, #0
}
   1cc04:	b002      	add	sp, #8
   1cc06:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1cc08:	2300      	movs	r3, #0
   1cc0a:	f88d 3004 	strb.w	r3, [sp, #4]
   1cc0e:	f642 0303 	movw	r3, #10243	; 0x2803
   1cc12:	6800      	ldr	r0, [r0, #0]
   1cc14:	a901      	add	r1, sp, #4
   1cc16:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cc1a:	f7fe febd 	bl	1b998 <bt_uuid_cmp>
   1cc1e:	2800      	cmp	r0, #0
   1cc20:	d1ef      	bne.n	1cc02 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1cc22:	68e3      	ldr	r3, [r4, #12]
   1cc24:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1cc26:	2800      	cmp	r0, #0
   1cc28:	d1ec      	bne.n	1cc04 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1cc2a:	4620      	mov	r0, r4
   1cc2c:	f7f6 fe40 	bl	138b0 <bt_gatt_attr_get_handle>
   1cc30:	3001      	adds	r0, #1
   1cc32:	b280      	uxth	r0, r0
	return handle;
   1cc34:	e7e6      	b.n	1cc04 <bt_gatt_attr_value_handle+0x8>

0001cc36 <bt_gatt_attr_read_chrc>:
{
   1cc36:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1cc38:	68cf      	ldr	r7, [r1, #12]
{
   1cc3a:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1cc3c:	79bb      	ldrb	r3, [r7, #6]
{
   1cc3e:	b087      	sub	sp, #28
   1cc40:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1cc42:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1cc46:	4615      	mov	r5, r2
   1cc48:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1cc4c:	f7ff ffd6 	bl	1cbfc <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1cc50:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1cc52:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1cc56:	780b      	ldrb	r3, [r1, #0]
   1cc58:	b99b      	cbnz	r3, 1cc82 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1cc5a:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1cc5c:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1cc5e:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1cc62:	42b1      	cmp	r1, r6
   1cc64:	d315      	bcc.n	1cc92 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1cc66:	1b89      	subs	r1, r1, r6
   1cc68:	42a1      	cmp	r1, r4
   1cc6a:	bfa8      	it	ge
   1cc6c:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1cc6e:	ab01      	add	r3, sp, #4
   1cc70:	b28c      	uxth	r4, r1
   1cc72:	4622      	mov	r2, r4
   1cc74:	4628      	mov	r0, r5
   1cc76:	1999      	adds	r1, r3, r6
   1cc78:	f7fe fe19 	bl	1b8ae <memcpy>
}
   1cc7c:	4620      	mov	r0, r4
   1cc7e:	b007      	add	sp, #28
   1cc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1cc82:	3101      	adds	r1, #1
   1cc84:	2210      	movs	r2, #16
   1cc86:	f10d 0007 	add.w	r0, sp, #7
   1cc8a:	f7fe fe10 	bl	1b8ae <memcpy>
		value_len += 16U;
   1cc8e:	2113      	movs	r1, #19
   1cc90:	e7e7      	b.n	1cc62 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cc92:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1cc96:	e7f1      	b.n	1cc7c <bt_gatt_attr_read_chrc+0x46>

0001cc98 <bt_gatt_foreach_attr>:
{
   1cc98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1cc9a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1cc9e:	2300      	movs	r3, #0
   1cca0:	461a      	mov	r2, r3
   1cca2:	9300      	str	r3, [sp, #0]
   1cca4:	f7f6 fe48 	bl	13938 <bt_gatt_foreach_attr_type>
}
   1cca8:	b005      	add	sp, #20
   1ccaa:	f85d fb04 	ldr.w	pc, [sp], #4

0001ccae <db_hash_process>:
	db_hash_gen(true);
   1ccae:	2001      	movs	r0, #1
   1ccb0:	f7f6 beae 	b.w	13a10 <db_hash_gen>

0001ccb4 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1ccb4:	07d3      	lsls	r3, r2, #31
{
   1ccb6:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ccb8:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ccba:	d504      	bpl.n	1ccc6 <bt_gatt_check_perm+0x12>
   1ccbc:	f014 0f15 	tst.w	r4, #21
   1ccc0:	d017      	beq.n	1ccf2 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ccc2:	684b      	ldr	r3, [r1, #4]
   1ccc4:	b1ab      	cbz	r3, 1ccf2 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ccc6:	0793      	lsls	r3, r2, #30
   1ccc8:	d504      	bpl.n	1ccd4 <bt_gatt_check_perm+0x20>
   1ccca:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1ccce:	d012      	beq.n	1ccf6 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ccd0:	688b      	ldr	r3, [r1, #8]
   1ccd2:	b183      	cbz	r3, 1ccf6 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1ccd4:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1ccd6:	f014 0f30 	tst.w	r4, #48	; 0x30
   1ccda:	d104      	bne.n	1cce6 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1ccdc:	f014 000c 	ands.w	r0, r4, #12
   1cce0:	bf18      	it	ne
   1cce2:	200f      	movne	r0, #15
}
   1cce4:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1cce6:	f7ff f832 	bl	1bd4e <bt_conn_get_security>
   1ccea:	2802      	cmp	r0, #2
   1ccec:	d8f6      	bhi.n	1ccdc <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1ccee:	2005      	movs	r0, #5
   1ccf0:	e7f8      	b.n	1cce4 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1ccf2:	2002      	movs	r0, #2
   1ccf4:	e7f6      	b.n	1cce4 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1ccf6:	2003      	movs	r0, #3
   1ccf8:	e7f4      	b.n	1cce4 <bt_gatt_check_perm+0x30>

0001ccfa <gatt_discover_next>:
{
   1ccfa:	b570      	push	{r4, r5, r6, lr}
   1ccfc:	4605      	mov	r5, r0
   1ccfe:	4614      	mov	r4, r2
	if (!last_handle)
   1cd00:	b929      	cbnz	r1, 1cd0e <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1cd02:	4621      	mov	r1, r4
   1cd04:	4628      	mov	r0, r5
   1cd06:	f7f7 f9db 	bl	140c0 <bt_gatt_discover>
   1cd0a:	b928      	cbnz	r0, 1cd18 <gatt_discover_next+0x1e>
}
   1cd0c:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1cd0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1cd12:	4291      	cmp	r1, r2
   1cd14:	d107      	bne.n	1cd26 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1cd16:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1cd18:	4622      	mov	r2, r4
   1cd1a:	4628      	mov	r0, r5
   1cd1c:	6863      	ldr	r3, [r4, #4]
   1cd1e:	2100      	movs	r1, #0
}
   1cd20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1cd24:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1cd26:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1cd28:	1c4b      	adds	r3, r1, #1
   1cd2a:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1cd2c:	429a      	cmp	r2, r3
		params->start_handle++;
   1cd2e:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1cd30:	d2e7      	bcs.n	1cd02 <gatt_discover_next+0x8>
   1cd32:	e7f1      	b.n	1cd18 <gatt_discover_next+0x1e>

0001cd34 <gatt_find_type_rsp>:
{
   1cd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd38:	b088      	sub	sp, #32
   1cd3a:	4607      	mov	r7, r0
   1cd3c:	4614      	mov	r4, r2
   1cd3e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1cd42:	b911      	cbnz	r1, 1cd4a <gatt_find_type_rsp+0x16>
   1cd44:	f013 0803 	ands.w	r8, r3, #3
   1cd48:	d008      	beq.n	1cd5c <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1cd4a:	464a      	mov	r2, r9
   1cd4c:	2100      	movs	r1, #0
   1cd4e:	4638      	mov	r0, r7
   1cd50:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1cd54:	b008      	add	sp, #32
   1cd56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1cd5a:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1cd5c:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1cd5e:	f642 0a01 	movw	sl, #10241	; 0x2801
   1cd62:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1cd66:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1cd6a:	42ac      	cmp	r4, r5
   1cd6c:	d107      	bne.n	1cd7e <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1cd6e:	464a      	mov	r2, r9
   1cd70:	4641      	mov	r1, r8
   1cd72:	4638      	mov	r0, r7
}
   1cd74:	b008      	add	sp, #32
   1cd76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1cd7a:	f7ff bfbe 	b.w	1ccfa <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1cd7e:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1cd82:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1cd84:	2900      	cmp	r1, #0
   1cd86:	bf0c      	ite	eq
   1cd88:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1cd8c:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1cd8e:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1cd92:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1cd96:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1cd9a:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1cd9c:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1cd9e:	ab01      	add	r3, sp, #4
   1cda0:	f8ad 1002 	strh.w	r1, [sp, #2]
   1cda4:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1cda6:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1cdaa:	4638      	mov	r0, r7
   1cdac:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1cdae:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1cdb2:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1cdb6:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1cdba:	f8cd d00c 	str.w	sp, [sp, #12]
   1cdbe:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1cdc2:	a903      	add	r1, sp, #12
   1cdc4:	4798      	blx	r3
   1cdc6:	3404      	adds	r4, #4
   1cdc8:	2800      	cmp	r0, #0
   1cdca:	d1ce      	bne.n	1cd6a <gatt_find_type_rsp+0x36>
}
   1cdcc:	b008      	add	sp, #32
   1cdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001cdd2 <bt_gatt_notification>:
{
   1cdd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cdd6:	4607      	mov	r7, r0
   1cdd8:	4688      	mov	r8, r1
   1cdda:	4691      	mov	r9, r2
   1cddc:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1cdde:	f7f6 f84f 	bl	12e80 <gatt_sub_find>
	if (!sub) {
   1cde2:	b1f8      	cbz	r0, 1ce24 <bt_gatt_notification+0x52>
	return list->head;
   1cde4:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1cde6:	b1eb      	cbz	r3, 1ce24 <bt_gatt_notification+0x52>
   1cde8:	f1b3 0614 	subs.w	r6, r3, #20
   1cdec:	d01a      	beq.n	1ce24 <bt_gatt_notification+0x52>
	return node->next;
   1cdee:	681c      	ldr	r4, [r3, #0]
   1cdf0:	b104      	cbz	r4, 1cdf4 <bt_gatt_notification+0x22>
   1cdf2:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1cdf4:	8933      	ldrh	r3, [r6, #8]
   1cdf6:	4543      	cmp	r3, r8
   1cdf8:	d10a      	bne.n	1ce10 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1cdfa:	4653      	mov	r3, sl
   1cdfc:	464a      	mov	r2, r9
   1cdfe:	4631      	mov	r1, r6
   1ce00:	4638      	mov	r0, r7
   1ce02:	6835      	ldr	r5, [r6, #0]
   1ce04:	47a8      	blx	r5
   1ce06:	b918      	cbnz	r0, 1ce10 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1ce08:	4631      	mov	r1, r6
   1ce0a:	4638      	mov	r0, r7
   1ce0c:	f7f7 fea8 	bl	14b60 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1ce10:	b144      	cbz	r4, 1ce24 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ce12:	f114 0514 	adds.w	r5, r4, #20
   1ce16:	d002      	beq.n	1ce1e <bt_gatt_notification+0x4c>
	return node->next;
   1ce18:	6965      	ldr	r5, [r4, #20]
   1ce1a:	b105      	cbz	r5, 1ce1e <bt_gatt_notification+0x4c>
   1ce1c:	3d14      	subs	r5, #20
{
   1ce1e:	4626      	mov	r6, r4
   1ce20:	462c      	mov	r4, r5
   1ce22:	e7e7      	b.n	1cdf4 <bt_gatt_notification+0x22>
}
   1ce24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ce28 <bt_gatt_change_aware>:
{
   1ce28:	b510      	push	{r4, lr}
   1ce2a:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1ce2c:	f7f5 ffea 	bl	12e04 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ce30:	b910      	cbnz	r0, 1ce38 <bt_gatt_change_aware+0x10>
		return true;
   1ce32:	2401      	movs	r4, #1
}
   1ce34:	4620      	mov	r0, r4
   1ce36:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ce38:	7a03      	ldrb	r3, [r0, #8]
   1ce3a:	07db      	lsls	r3, r3, #31
   1ce3c:	d5f9      	bpl.n	1ce32 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1ce3e:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ce42:	4618      	mov	r0, r3
   1ce44:	f7ff fd46 	bl	1c8d4 <atomic_get>
   1ce48:	07c1      	lsls	r1, r0, #31
   1ce4a:	d4f2      	bmi.n	1ce32 <bt_gatt_change_aware+0xa>
	if (!req) {
   1ce4c:	2c00      	cmp	r4, #0
   1ce4e:	d0f1      	beq.n	1ce34 <bt_gatt_change_aware+0xc>
   1ce50:	4618      	mov	r0, r3
   1ce52:	f7ff fd3f 	bl	1c8d4 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1ce56:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ce58:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1ce5c:	d50c      	bpl.n	1ce78 <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ce5e:	e8d3 2fef 	ldaex	r2, [r3]
   1ce62:	f022 0202 	bic.w	r2, r2, #2
   1ce66:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ce6a:	2900      	cmp	r1, #0
   1ce6c:	d1f7      	bne.n	1ce5e <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ce6e:	2101      	movs	r1, #1
   1ce70:	4618      	mov	r0, r3
   1ce72:	f7ff fd24 	bl	1c8be <atomic_or>
}
   1ce76:	e7dd      	b.n	1ce34 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ce78:	2102      	movs	r1, #2
   1ce7a:	e7f9      	b.n	1ce70 <bt_gatt_change_aware+0x48>

0001ce7c <bt_smp_recv>:
{
   1ce7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ce7e:	2100      	movs	r1, #0
   1ce80:	f04f 32ff 	mov.w	r2, #4294967295
   1ce84:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1ce88:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ce8a:	4608      	mov	r0, r1
   1ce8c:	f7ff f83b 	bl	1bf06 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1ce90:	f100 0608 	add.w	r6, r0, #8
   1ce94:	4604      	mov	r4, r0
   1ce96:	2101      	movs	r1, #1
   1ce98:	4630      	mov	r0, r6
   1ce9a:	f7f8 fb67 	bl	1556c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1ce9e:	2505      	movs	r5, #5
   1cea0:	2101      	movs	r1, #1
   1cea2:	7005      	strb	r5, [r0, #0]
   1cea4:	4630      	mov	r0, r6
   1cea6:	f7f8 fb61 	bl	1556c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1ceaa:	7005      	strb	r5, [r0, #0]
   1ceac:	2500      	movs	r5, #0
   1ceae:	4622      	mov	r2, r4
   1ceb0:	462b      	mov	r3, r5
   1ceb2:	2106      	movs	r1, #6
   1ceb4:	4638      	mov	r0, r7
   1ceb6:	9500      	str	r5, [sp, #0]
   1ceb8:	f7ff f828 	bl	1bf0c <bt_l2cap_send_cb>
}
   1cebc:	4628      	mov	r0, r5
   1cebe:	b003      	add	sp, #12
   1cec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cec2 <bt_smp_sign>:
   1cec2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1cec6:	4770      	bx	lr

0001cec8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1cec8:	2000      	movs	r0, #0
   1ceca:	4770      	bx	lr

0001cecc <fixed_data_unref>:
}
   1cecc:	4770      	bx	lr

0001cece <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cece:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1ced0:	6849      	ldr	r1, [r1, #4]
   1ced2:	6809      	ldr	r1, [r1, #0]
   1ced4:	f7f8 b906 	b.w	150e4 <net_buf_alloc_len>

0001ced8 <net_buf_simple_init_with_data>:
	buf->size  = size;
   1ced8:	b292      	uxth	r2, r2
	buf->__buf = data;
   1ceda:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1cedc:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1cede:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1cee0:	8082      	strh	r2, [r0, #4]
}
   1cee2:	4770      	bx	lr

0001cee4 <net_buf_simple_push_u8>:
{
   1cee4:	b510      	push	{r4, lr}
   1cee6:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1cee8:	2101      	movs	r1, #1
   1ceea:	f7f8 fae7 	bl	154bc <net_buf_simple_push>
	*data = val;
   1ceee:	7004      	strb	r4, [r0, #0]
}
   1cef0:	bd10      	pop	{r4, pc}

0001cef2 <net_buf_simple_pull_u8>:
{
   1cef2:	b510      	push	{r4, lr}
	val = buf->data[0];
   1cef4:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1cef6:	2101      	movs	r1, #1
	val = buf->data[0];
   1cef8:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1cefa:	f7f8 fafd 	bl	154f8 <net_buf_simple_pull>
}
   1cefe:	4620      	mov	r0, r4
   1cf00:	bd10      	pop	{r4, pc}

0001cf02 <net_buf_simple_pull_le16>:
{
   1cf02:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1cf04:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1cf06:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1cf08:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1cf0a:	f7f8 faf5 	bl	154f8 <net_buf_simple_pull>
}
   1cf0e:	4620      	mov	r0, r4
   1cf10:	bd10      	pop	{r4, pc}

0001cf12 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1cf12:	6802      	ldr	r2, [r0, #0]
   1cf14:	6880      	ldr	r0, [r0, #8]
}
   1cf16:	1a10      	subs	r0, r2, r0
   1cf18:	4770      	bx	lr

0001cf1a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1cf1a:	8883      	ldrh	r3, [r0, #4]
   1cf1c:	88c2      	ldrh	r2, [r0, #6]
   1cf1e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1cf20:	6803      	ldr	r3, [r0, #0]
   1cf22:	6880      	ldr	r0, [r0, #8]
   1cf24:	1a18      	subs	r0, r3, r0
}
   1cf26:	1a10      	subs	r0, r2, r0
   1cf28:	4770      	bx	lr

0001cf2a <net_buf_simple_add_mem>:
{
   1cf2a:	b538      	push	{r3, r4, r5, lr}
   1cf2c:	460d      	mov	r5, r1
   1cf2e:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1cf30:	4611      	mov	r1, r2
   1cf32:	f7f8 fb1b 	bl	1556c <net_buf_simple_add>
   1cf36:	4622      	mov	r2, r4
   1cf38:	4629      	mov	r1, r5
}
   1cf3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1cf3e:	f7fe bcb6 	b.w	1b8ae <memcpy>

0001cf42 <net_buf_simple_add_u8>:
{
   1cf42:	b510      	push	{r4, lr}
   1cf44:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1cf46:	2101      	movs	r1, #1
   1cf48:	f7f8 fb10 	bl	1556c <net_buf_simple_add>
	*u8 = val;
   1cf4c:	7004      	strb	r4, [r0, #0]
}
   1cf4e:	bd10      	pop	{r4, pc}

0001cf50 <net_buf_simple_add_le16>:
{
   1cf50:	b510      	push	{r4, lr}
   1cf52:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1cf54:	2102      	movs	r1, #2
   1cf56:	f7f8 fb09 	bl	1556c <net_buf_simple_add>
	dst[0] = val;
   1cf5a:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1cf5c:	0a24      	lsrs	r4, r4, #8
   1cf5e:	7044      	strb	r4, [r0, #1]
}
   1cf60:	bd10      	pop	{r4, pc}

0001cf62 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf62:	6843      	ldr	r3, [r0, #4]
}
   1cf64:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf66:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1cf68:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1cf6a:	600b      	str	r3, [r1, #0]
}
   1cf6c:	4770      	bx	lr

0001cf6e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf6e:	6843      	ldr	r3, [r0, #4]
   1cf70:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1cf72:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1cf74:	4042      	eors	r2, r0
   1cf76:	400a      	ands	r2, r1
   1cf78:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1cf7a:	605a      	str	r2, [r3, #4]
}
   1cf7c:	2000      	movs	r0, #0
   1cf7e:	4770      	bx	lr

0001cf80 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf80:	6843      	ldr	r3, [r0, #4]
}
   1cf82:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf84:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1cf86:	6099      	str	r1, [r3, #8]
}
   1cf88:	4770      	bx	lr

0001cf8a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf8a:	6843      	ldr	r3, [r0, #4]
}
   1cf8c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf8e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1cf90:	60d9      	str	r1, [r3, #12]
}
   1cf92:	4770      	bx	lr

0001cf94 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf94:	6843      	ldr	r3, [r0, #4]
}
   1cf96:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf98:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1cf9a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1cf9c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1cf9e:	6053      	str	r3, [r2, #4]
}
   1cfa0:	4770      	bx	lr

0001cfa2 <nrf_gpio_cfg_sense_set>:
{
   1cfa2:	b513      	push	{r0, r1, r4, lr}
   1cfa4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cfa6:	a801      	add	r0, sp, #4
{
   1cfa8:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cfaa:	f7f8 fb43 	bl	15634 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1cfae:	9b01      	ldr	r3, [sp, #4]
   1cfb0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1cfb4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1cfb8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1cfbc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1cfc0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1cfc4:	b002      	add	sp, #8
   1cfc6:	bd10      	pop	{r4, pc}

0001cfc8 <cfg_level_pins>:
{
   1cfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1cfcc:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1cfce:	2500      	movs	r5, #0
	return port->data;
   1cfd0:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1cfd2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1cfd6:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1cfd8:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1cfdc:	4313      	orrs	r3, r2
   1cfde:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1cfe2:	b90c      	cbnz	r4, 1cfe8 <cfg_level_pins+0x20>
}
   1cfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1cfe8:	4226      	tst	r6, r4
   1cfea:	d010      	beq.n	1d00e <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1cfec:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cfee:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1cff2:	40e9      	lsrs	r1, r5
   1cff4:	f001 0101 	and.w	r1, r1, #1
   1cff8:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cffc:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d000:	b2c9      	uxtb	r1, r1
   1d002:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1d006:	f7ff ffcc 	bl	1cfa2 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d00a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d00e:	3501      	adds	r5, #1
		bit <<= 1;
   1d010:	0076      	lsls	r6, r6, #1
   1d012:	e7e6      	b.n	1cfe2 <cfg_level_pins+0x1a>

0001d014 <check_level_trigger_pins>:
{
   1d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d018:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d01a:	2700      	movs	r7, #0
	return port->data;
   1d01c:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1d01e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d022:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d024:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1d028:	430a      	orrs	r2, r1
   1d02a:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1d02e:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1d032:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1d034:	6915      	ldr	r5, [r2, #16]
   1d036:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1d038:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1d03c:	b914      	cbnz	r4, 1d044 <check_level_trigger_pins+0x30>
}
   1d03e:	4628      	mov	r0, r5
   1d040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d044:	4234      	tst	r4, r6
   1d046:	d00a      	beq.n	1d05e <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d048:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d04c:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d050:	2100      	movs	r1, #0
   1d052:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1d056:	f7ff ffa4 	bl	1cfa2 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d05a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d05e:	3701      	adds	r7, #1
		bit <<= 1;
   1d060:	0076      	lsls	r6, r6, #1
   1d062:	e7eb      	b.n	1d03c <check_level_trigger_pins+0x28>

0001d064 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1d064:	6883      	ldr	r3, [r0, #8]
   1d066:	689b      	ldr	r3, [r3, #8]
   1d068:	4718      	bx	r3

0001d06a <vipm_nrf_max_id_val_get>:
}
   1d06a:	2000      	movs	r0, #0
   1d06c:	4770      	bx	lr

0001d06e <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1d06e:	b508      	push	{r3, lr}
   1d070:	b139      	cbz	r1, 1d082 <vipm_nrf_1_set_enabled+0x14>
   1d072:	202a      	movs	r0, #42	; 0x2a
   1d074:	f7f0 fb9e 	bl	d7b4 <arch_irq_enable>
   1d078:	2001      	movs	r0, #1
   1d07a:	f7f9 fe0d 	bl	16c98 <nrfx_ipc_receive_event_enable>
   1d07e:	2000      	movs	r0, #0
   1d080:	bd08      	pop	{r3, pc}
   1d082:	2001      	movs	r0, #1
   1d084:	f7f9 fe26 	bl	16cd4 <nrfx_ipc_receive_event_disable>
   1d088:	e7f9      	b.n	1d07e <vipm_nrf_1_set_enabled+0x10>

0001d08a <uarte_nrfx_config_get>:
{
   1d08a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d08c:	68c2      	ldr	r2, [r0, #12]
   1d08e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d092:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d096:	2000      	movs	r0, #0
   1d098:	4770      	bx	lr

0001d09a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d09a:	6843      	ldr	r3, [r0, #4]
   1d09c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d09e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d0a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d0a6:	4770      	bx	lr

0001d0a8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d0a8:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d0aa:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1d0ac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d0ae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d0b2:	b148      	cbz	r0, 1d0c8 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d0b4:	2000      	movs	r0, #0
	*c = data->rx_data;
   1d0b6:	7d52      	ldrb	r2, [r2, #21]
   1d0b8:	700a      	strb	r2, [r1, #0]
   1d0ba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d0be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d0c2:	2201      	movs	r2, #1
   1d0c4:	601a      	str	r2, [r3, #0]
	return 0;
   1d0c6:	4770      	bx	lr
		return -1;
   1d0c8:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d0cc:	4770      	bx	lr

0001d0ce <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1d0ce:	6843      	ldr	r3, [r0, #4]
{
   1d0d0:	4602      	mov	r2, r0
	return config->uarte_regs;
   1d0d2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d0d4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d0d8:	b148      	cbz	r0, 1d0ee <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d0da:	2000      	movs	r0, #0
	return dev->data;
   1d0dc:	68d2      	ldr	r2, [r2, #12]
   1d0de:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d0e2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d0e6:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1d0e8:	7d52      	ldrb	r2, [r2, #21]
   1d0ea:	700a      	strb	r2, [r1, #0]
   1d0ec:	6018      	str	r0, [r3, #0]
}
   1d0ee:	4770      	bx	lr

0001d0f0 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1d0f0:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d0f2:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1d0f4:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1d0f6:	f04f 0020 	mov.w	r0, #32
   1d0fa:	f3ef 8311 	mrs	r3, BASEPRI
   1d0fe:	f380 8811 	msr	BASEPRI, r0
   1d102:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1d106:	2000      	movs	r0, #0
   1d108:	68c9      	ldr	r1, [r1, #12]
   1d10a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1d10c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d110:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1d114:	f383 8811 	msr	BASEPRI, r3
   1d118:	f3bf 8f6f 	isb	sy
}
   1d11c:	4770      	bx	lr

0001d11e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1d11e:	2201      	movs	r2, #1
   1d120:	68c3      	ldr	r3, [r0, #12]
   1d122:	68db      	ldr	r3, [r3, #12]
   1d124:	739a      	strb	r2, [r3, #14]
}
   1d126:	4770      	bx	lr

0001d128 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1d128:	68c3      	ldr	r3, [r0, #12]
   1d12a:	68db      	ldr	r3, [r3, #12]
   1d12c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d12e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1d132:	b962      	cbnz	r2, 1d14e <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1d134:	6842      	ldr	r2, [r0, #4]
   1d136:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d138:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1d13c:	b140      	cbz	r0, 1d150 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1d13e:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1d142:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1d146:	d003      	beq.n	1d150 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d148:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1d14a:	6119      	str	r1, [r3, #16]
   1d14c:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d14e:	2000      	movs	r0, #0
}
   1d150:	4770      	bx	lr

0001d152 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1d152:	6843      	ldr	r3, [r0, #4]
   1d154:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d156:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1d15a:	3800      	subs	r0, #0
   1d15c:	bf18      	it	ne
   1d15e:	2001      	movne	r0, #1
   1d160:	4770      	bx	lr

0001d162 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1d162:	2210      	movs	r2, #16
	return config->uarte_regs;
   1d164:	6843      	ldr	r3, [r0, #4]
   1d166:	681b      	ldr	r3, [r3, #0]
   1d168:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d16c:	4770      	bx	lr

0001d16e <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1d16e:	2210      	movs	r2, #16
	return config->uarte_regs;
   1d170:	6843      	ldr	r3, [r0, #4]
   1d172:	681b      	ldr	r3, [r3, #0]
   1d174:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d178:	4770      	bx	lr

0001d17a <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1d17a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1d17e:	6843      	ldr	r3, [r0, #4]
   1d180:	681b      	ldr	r3, [r3, #0]
   1d182:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d186:	4770      	bx	lr

0001d188 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1d188:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1d18c:	6843      	ldr	r3, [r0, #4]
   1d18e:	681b      	ldr	r3, [r3, #0]
   1d190:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d194:	4770      	bx	lr

0001d196 <uarte_nrfx_irq_update>:
}
   1d196:	2001      	movs	r0, #1
   1d198:	4770      	bx	lr

0001d19a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1d19a:	68c3      	ldr	r3, [r0, #12]
   1d19c:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1d19e:	e9c3 1200 	strd	r1, r2, [r3]
}
   1d1a2:	4770      	bx	lr

0001d1a4 <uarte_nrfx_irq_is_pending>:
{
   1d1a4:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1d1a6:	6843      	ldr	r3, [r0, #4]
{
   1d1a8:	4604      	mov	r4, r0
	return config->uarte_regs;
   1d1aa:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1d1ac:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1d1b0:	025b      	lsls	r3, r3, #9
   1d1b2:	d405      	bmi.n	1d1c0 <uarte_nrfx_irq_is_pending+0x1c>
   1d1b4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1d1b8:	f010 0010 	ands.w	r0, r0, #16
   1d1bc:	d106      	bne.n	1d1cc <uarte_nrfx_irq_is_pending+0x28>
}
   1d1be:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d1c0:	f7ff ffb2 	bl	1d128 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1d1c4:	2800      	cmp	r0, #0
   1d1c6:	d0f5      	beq.n	1d1b4 <uarte_nrfx_irq_is_pending+0x10>
		||
   1d1c8:	2001      	movs	r0, #1
   1d1ca:	e7f8      	b.n	1d1be <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d1cc:	4620      	mov	r0, r4
   1d1ce:	f7ff ffc0 	bl	1d152 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d1d2:	3800      	subs	r0, #0
   1d1d4:	bf18      	it	ne
   1d1d6:	2001      	movne	r0, #1
   1d1d8:	e7f1      	b.n	1d1be <uarte_nrfx_irq_is_pending+0x1a>

0001d1da <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d1da:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d1dc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d1de:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d1e2:	b938      	cbnz	r0, 1d1f4 <is_tx_ready.isra.0+0x1a>
   1d1e4:	799b      	ldrb	r3, [r3, #6]
   1d1e6:	b933      	cbnz	r3, 1d1f6 <is_tx_ready.isra.0+0x1c>
   1d1e8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d1ec:	3800      	subs	r0, #0
   1d1ee:	bf18      	it	ne
   1d1f0:	2001      	movne	r0, #1
   1d1f2:	4770      	bx	lr
   1d1f4:	2001      	movs	r0, #1
}
   1d1f6:	4770      	bx	lr

0001d1f8 <uarte_nrfx_fifo_fill>:
{
   1d1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1d1fa:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d1fc:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1d1fe:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1d200:	68f3      	ldr	r3, [r6, #12]
   1d202:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d204:	3310      	adds	r3, #16
   1d206:	4294      	cmp	r4, r2
   1d208:	bfa8      	it	ge
   1d20a:	4614      	movge	r4, r2
   1d20c:	2201      	movs	r2, #1
   1d20e:	e8d3 7fef 	ldaex	r7, [r3]
   1d212:	2f00      	cmp	r7, #0
   1d214:	d104      	bne.n	1d220 <uarte_nrfx_fifo_fill+0x28>
   1d216:	e8c3 2fec 	stlex	ip, r2, [r3]
   1d21a:	f1bc 0f00 	cmp.w	ip, #0
   1d21e:	d1f6      	bne.n	1d20e <uarte_nrfx_fifo_fill+0x16>
   1d220:	bf0c      	ite	eq
   1d222:	4613      	moveq	r3, r2
   1d224:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1d226:	d01d      	beq.n	1d264 <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   1d228:	461c      	mov	r4, r3
}
   1d22a:	4620      	mov	r0, r4
   1d22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d22e:	68f2      	ldr	r2, [r6, #12]
   1d230:	5ccf      	ldrb	r7, [r1, r3]
   1d232:	6892      	ldr	r2, [r2, #8]
   1d234:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1d236:	3301      	adds	r3, #1
   1d238:	42a3      	cmp	r3, r4
   1d23a:	dbf8      	blt.n	1d22e <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1d23c:	f04f 0320 	mov.w	r3, #32
   1d240:	f3ef 8111 	mrs	r1, BASEPRI
   1d244:	f383 8811 	msr	BASEPRI, r3
   1d248:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1d24c:	6840      	ldr	r0, [r0, #4]
   1d24e:	f7ff ffc4 	bl	1d1da <is_tx_ready.isra.0>
   1d252:	68f3      	ldr	r3, [r6, #12]
   1d254:	b940      	cbnz	r0, 1d268 <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   1d256:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1d258:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1d25a:	f381 8811 	msr	BASEPRI, r1
   1d25e:	f3bf 8f6f 	isb	sy
	return len;
   1d262:	e7e2      	b.n	1d22a <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1d264:	2300      	movs	r3, #0
   1d266:	e7e7      	b.n	1d238 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d268:	689b      	ldr	r3, [r3, #8]
   1d26a:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d26e:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1d270:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d274:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1d278:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1d27c:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1d280:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d284:	2301      	movs	r3, #1
   1d286:	60ab      	str	r3, [r5, #8]
}
   1d288:	e7e7      	b.n	1d25a <uarte_nrfx_fifo_fill+0x62>

0001d28a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1d28a:	6843      	ldr	r3, [r0, #4]
{
   1d28c:	b410      	push	{r4}
	return config->uarte_regs;
   1d28e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1d290:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d294:	05d2      	lsls	r2, r2, #23
   1d296:	d518      	bpl.n	1d2ca <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d298:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1d29c:	b1aa      	cbz	r2, 1d2ca <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1d29e:	f04f 0120 	mov.w	r1, #32
   1d2a2:	f3ef 8211 	mrs	r2, BASEPRI
   1d2a6:	f381 8811 	msr	BASEPRI, r1
   1d2aa:	f3bf 8f6f 	isb	sy
   1d2ae:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d2b2:	b131      	cbz	r1, 1d2c2 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d2b4:	2100      	movs	r1, #0
   1d2b6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d2ba:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d2be:	2101      	movs	r1, #1
   1d2c0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d2c2:	f382 8811 	msr	BASEPRI, r2
   1d2c6:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1d2ca:	68c2      	ldr	r2, [r0, #12]
   1d2cc:	68d2      	ldr	r2, [r2, #12]
   1d2ce:	b15a      	cbz	r2, 1d2e8 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d2d0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d2d4:	b151      	cbz	r1, 1d2ec <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1d2d6:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1d2d8:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1d2da:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1d2dc:	b134      	cbz	r4, 1d2ec <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1d2de:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1d2e2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1d2e6:	7391      	strb	r1, [r2, #14]
}
   1d2e8:	bc10      	pop	{r4}
   1d2ea:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d2ec:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d2f0:	b121      	cbz	r1, 1d2fc <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d2f2:	2100      	movs	r1, #0
   1d2f4:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1d2f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d2fc:	6813      	ldr	r3, [r2, #0]
   1d2fe:	2b00      	cmp	r3, #0
   1d300:	d0f2      	beq.n	1d2e8 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d302:	6851      	ldr	r1, [r2, #4]
}
   1d304:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d306:	4718      	bx	r3

0001d308 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1d308:	2101      	movs	r1, #1
   1d30a:	f7f9 b9c9 	b.w	166a0 <dk_set_led>

0001d30e <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1d30e:	2100      	movs	r1, #0
   1d310:	f7f9 b9c6 	b.w	166a0 <dk_set_led>

0001d314 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1d314:	f7f9 ba44 	b.w	167a0 <SystemCoreClockUpdate>

0001d318 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1d318:	4700      	bx	r0

0001d31a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1d31a:	f000 bcaf 	b.w	1dc7c <z_impl_k_busy_wait>

0001d31e <metal_device_open>:
{
   1d31e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d320:	460c      	mov	r4, r1
   1d322:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1d324:	4606      	mov	r6, r0
   1d326:	b918      	cbnz	r0, 1d330 <metal_device_open+0x12>
		return -EINVAL;
   1d328:	f06f 0015 	mvn.w	r0, #21
}
   1d32c:	b002      	add	sp, #8
   1d32e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1d330:	f7fe fa7f 	bl	1b832 <strlen>
   1d334:	2800      	cmp	r0, #0
   1d336:	d0f7      	beq.n	1d328 <metal_device_open+0xa>
   1d338:	2c00      	cmp	r4, #0
   1d33a:	d0f5      	beq.n	1d328 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1d33c:	4620      	mov	r0, r4
   1d33e:	f7fe fa78 	bl	1b832 <strlen>
   1d342:	2800      	cmp	r0, #0
   1d344:	d0f0      	beq.n	1d328 <metal_device_open+0xa>
   1d346:	2d00      	cmp	r5, #0
   1d348:	d0ee      	beq.n	1d328 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1d34a:	4630      	mov	r0, r6
   1d34c:	a901      	add	r1, sp, #4
   1d34e:	f7f9 fd35 	bl	16dbc <metal_bus_find>
	if (error)
   1d352:	2800      	cmp	r0, #0
   1d354:	d1ea      	bne.n	1d32c <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1d356:	9801      	ldr	r0, [sp, #4]
   1d358:	6883      	ldr	r3, [r0, #8]
   1d35a:	b11b      	cbz	r3, 1d364 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1d35c:	462a      	mov	r2, r5
   1d35e:	4621      	mov	r1, r4
   1d360:	4798      	blx	r3
	if (error)
   1d362:	e7e3      	b.n	1d32c <metal_device_open+0xe>
		return -ENODEV;
   1d364:	f06f 0012 	mvn.w	r0, #18
   1d368:	e7e0      	b.n	1d32c <metal_device_open+0xe>

0001d36a <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1d36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d36c:	6804      	ldr	r4, [r0, #0]
   1d36e:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d370:	1c66      	adds	r6, r4, #1
   1d372:	d00f      	beq.n	1d394 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d374:	42a9      	cmp	r1, r5
   1d376:	d232      	bcs.n	1d3de <metal_io_block_read+0x74>
		: NULL);
   1d378:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d37a:	185e      	adds	r6, r3, r1
   1d37c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d37e:	bf88      	it	hi
   1d380:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1d382:	6a05      	ldr	r5, [r0, #32]
   1d384:	b155      	cbz	r5, 1d39c <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1d386:	9300      	str	r3, [sp, #0]
   1d388:	2305      	movs	r3, #5
   1d38a:	47a8      	blx	r5
   1d38c:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1d38e:	4618      	mov	r0, r3
   1d390:	b002      	add	sp, #8
   1d392:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d394:	42a9      	cmp	r1, r5
   1d396:	d222      	bcs.n	1d3de <metal_io_block_read+0x74>
   1d398:	2400      	movs	r4, #0
   1d39a:	e7ee      	b.n	1d37a <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1d39c:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1d3a0:	4621      	mov	r1, r4
   1d3a2:	4618      	mov	r0, r3
   1d3a4:	2800      	cmp	r0, #0
   1d3a6:	d0f2      	beq.n	1d38e <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1d3a8:	ea42 0401 	orr.w	r4, r2, r1
   1d3ac:	07a4      	lsls	r4, r4, #30
   1d3ae:	d10a      	bne.n	1d3c6 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d3b0:	2803      	cmp	r0, #3
   1d3b2:	dc0e      	bgt.n	1d3d2 <metal_io_block_read+0x68>
   1d3b4:	3901      	subs	r1, #1
   1d3b6:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1d3b8:	4282      	cmp	r2, r0
   1d3ba:	d0e8      	beq.n	1d38e <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1d3bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1d3c0:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1d3c4:	e7f8      	b.n	1d3b8 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1d3c6:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1d3ca:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1d3cc:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1d3d0:	e7e8      	b.n	1d3a4 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1d3d2:	f851 4b04 	ldr.w	r4, [r1], #4
   1d3d6:	3804      	subs	r0, #4
   1d3d8:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d3dc:	e7e8      	b.n	1d3b0 <metal_io_block_read+0x46>
		return -ERANGE;
   1d3de:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1d3e2:	e7d4      	b.n	1d38e <metal_io_block_read+0x24>

0001d3e4 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1d3e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d3e6:	6804      	ldr	r4, [r0, #0]
   1d3e8:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d3ea:	1c66      	adds	r6, r4, #1
   1d3ec:	d00e      	beq.n	1d40c <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d3ee:	42a9      	cmp	r1, r5
   1d3f0:	d230      	bcs.n	1d454 <metal_io_block_write+0x70>
		: NULL);
   1d3f2:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d3f4:	185e      	adds	r6, r3, r1
   1d3f6:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d3f8:	bf88      	it	hi
   1d3fa:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1d3fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1d3fe:	b94d      	cbnz	r5, 1d414 <metal_io_block_write+0x30>
   1d400:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1d402:	b991      	cbnz	r1, 1d42a <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1d404:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1d408:	4618      	mov	r0, r3
   1d40a:	e006      	b.n	1d41a <metal_io_block_write+0x36>
	if (offset >= io->size)
   1d40c:	42a9      	cmp	r1, r5
   1d40e:	d221      	bcs.n	1d454 <metal_io_block_write+0x70>
   1d410:	2400      	movs	r4, #0
   1d412:	e7ef      	b.n	1d3f4 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1d414:	9300      	str	r3, [sp, #0]
   1d416:	2305      	movs	r3, #5
   1d418:	47a8      	blx	r5
	}
	return retlen;
}
   1d41a:	b002      	add	sp, #8
   1d41c:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1d41e:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1d422:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1d424:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1d428:	e7eb      	b.n	1d402 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1d42a:	ea44 0002 	orr.w	r0, r4, r2
   1d42e:	0780      	lsls	r0, r0, #30
   1d430:	d1f5      	bne.n	1d41e <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d432:	2903      	cmp	r1, #3
   1d434:	dc08      	bgt.n	1d448 <metal_io_block_write+0x64>
   1d436:	3a01      	subs	r2, #1
   1d438:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1d43a:	428c      	cmp	r4, r1
   1d43c:	d0e2      	beq.n	1d404 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1d43e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1d442:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1d446:	e7f8      	b.n	1d43a <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1d448:	f852 0b04 	ldr.w	r0, [r2], #4
   1d44c:	3904      	subs	r1, #4
   1d44e:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d452:	e7ee      	b.n	1d432 <metal_io_block_write+0x4e>
		return -ERANGE;
   1d454:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1d458:	e7df      	b.n	1d41a <metal_io_block_write+0x36>

0001d45a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1d45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d45c:	6804      	ldr	r4, [r0, #0]
   1d45e:	461d      	mov	r5, r3
		: NULL);
   1d460:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d462:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1d464:	d00e      	beq.n	1d484 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d466:	4299      	cmp	r1, r3
   1d468:	d22d      	bcs.n	1d4c6 <metal_io_block_set+0x6c>
		: NULL);
   1d46a:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d46c:	186e      	adds	r6, r5, r1
   1d46e:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1d470:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1d472:	bf88      	it	hi
   1d474:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1d476:	b186      	cbz	r6, 1d49a <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1d478:	2305      	movs	r3, #5
   1d47a:	9500      	str	r5, [sp, #0]
   1d47c:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1d47e:	4628      	mov	r0, r5
   1d480:	b002      	add	sp, #8
   1d482:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d484:	4299      	cmp	r1, r3
   1d486:	d21e      	bcs.n	1d4c6 <metal_io_block_set+0x6c>
   1d488:	2400      	movs	r4, #0
   1d48a:	e7ef      	b.n	1d46c <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1d48c:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d490:	3b01      	subs	r3, #1
   1d492:	b923      	cbnz	r3, 1d49e <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1d494:	f3bf 8f5b 	dmb	ish
   1d498:	e7f1      	b.n	1d47e <metal_io_block_set+0x24>
   1d49a:	462b      	mov	r3, r5
   1d49c:	e7f9      	b.n	1d492 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d49e:	07a1      	lsls	r1, r4, #30
   1d4a0:	d1f4      	bne.n	1d48c <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1d4a2:	0611      	lsls	r1, r2, #24
   1d4a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1d4a8:	4311      	orrs	r1, r2
   1d4aa:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d4ae:	2b03      	cmp	r3, #3
   1d4b0:	dc05      	bgt.n	1d4be <metal_io_block_set+0x64>
   1d4b2:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1d4b4:	429c      	cmp	r4, r3
   1d4b6:	d0ed      	beq.n	1d494 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1d4b8:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1d4bc:	e7fa      	b.n	1d4b4 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1d4be:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d4c2:	3b04      	subs	r3, #4
   1d4c4:	e7f3      	b.n	1d4ae <metal_io_block_set+0x54>
		return -ERANGE;
   1d4c6:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1d4ca:	e7d8      	b.n	1d47e <metal_io_block_set+0x24>

0001d4cc <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1d4cc:	2000      	movs	r0, #0
   1d4ce:	4770      	bx	lr

0001d4d0 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1d4d0:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1d4d2:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1d4d4:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1d4d6:	b984      	cbnz	r4, 1d4fa <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1d4d8:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1d4da:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1d4dc:	291f      	cmp	r1, #31
   1d4de:	bf98      	it	ls
   1d4e0:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1d4e4:	b165      	cbz	r5, 1d500 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1d4e6:	6881      	ldr	r1, [r0, #8]
   1d4e8:	428b      	cmp	r3, r1
   1d4ea:	d209      	bcs.n	1d500 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1d4ec:	6900      	ldr	r0, [r0, #16]
   1d4ee:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1d4f0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d4f4:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1d4f6:	bc30      	pop	{r4, r5}
   1d4f8:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1d4fa:	4623      	mov	r3, r4
}
   1d4fc:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1d4fe:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1d500:	f04f 30ff 	mov.w	r0, #4294967295
   1d504:	e7f7      	b.n	1d4f6 <metal_io_phys+0x26>

0001d506 <virtqueue_create>:
{
   1d506:	b570      	push	{r4, r5, r6, lr}
   1d508:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1d50a:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1d50c:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1d50e:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1d512:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1d514:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1d516:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d518:	1c96      	adds	r6, r2, #2
   1d51a:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1d51c:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1d520:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1d524:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d526:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1d52a:	1c6e      	adds	r6, r5, #1
   1d52c:	4433      	add	r3, r6
   1d52e:	426d      	negs	r5, r5
   1d530:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1d532:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d534:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1d536:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1d53a:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1d53c:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d53e:	b96b      	cbnz	r3, 1d55c <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1d540:	3a01      	subs	r2, #1
   1d542:	4293      	cmp	r3, r2
   1d544:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1d548:	db0a      	blt.n	1d560 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d54a:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1d54c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d550:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1d554:	7393      	strb	r3, [r2, #14]
   1d556:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d55a:	73d3      	strb	r3, [r2, #15]
}
   1d55c:	2000      	movs	r0, #0
   1d55e:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1d560:	3301      	adds	r3, #1
   1d562:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1d564:	e7ed      	b.n	1d542 <virtqueue_create+0x3c>

0001d566 <virtqueue_add_buffer>:
{
   1d566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d56a:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1d56c:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1d570:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d572:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d574:	46ba      	mov	sl, r7
{
   1d576:	b085      	sub	sp, #20
	needed = readable + writable;
   1d578:	18d6      	adds	r6, r2, r3
{
   1d57a:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1d57c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d57e:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1d582:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1d584:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1d586:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1d588:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d58a:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1d58e:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d590:	42be      	cmp	r6, r7
   1d592:	dc19      	bgt.n	1d5c8 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1d594:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d596:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1d598:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d59a:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1d59c:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1d59e:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d5a0:	1e51      	subs	r1, r2, #1
   1d5a2:	885a      	ldrh	r2, [r3, #2]
}
   1d5a4:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1d5a6:	400a      	ands	r2, r1
   1d5a8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1d5ac:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1d5b0:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1d5b4:	69e2      	ldr	r2, [r4, #28]
   1d5b6:	8853      	ldrh	r3, [r2, #2]
   1d5b8:	3301      	adds	r3, #1
   1d5ba:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1d5bc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1d5be:	3301      	adds	r3, #1
   1d5c0:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1d5c2:	b005      	add	sp, #20
   1d5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1d5c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1d5ca:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1d5cc:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1d5d0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1d5d4:	9302      	str	r3, [sp, #8]
   1d5d6:	6803      	ldr	r3, [r0, #0]
   1d5d8:	9203      	str	r2, [sp, #12]
   1d5da:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1d5dc:	6883      	ldr	r3, [r0, #8]
   1d5de:	f108 0808 	add.w	r8, r8, #8
   1d5e2:	4299      	cmp	r1, r3
   1d5e4:	bf28      	it	cs
   1d5e6:	f04f 31ff 	movcs.w	r1, #4294967295
   1d5ea:	f7ff ff71 	bl	1d4d0 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d5ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1d5f2:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1d5f4:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1d5f8:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1d5fc:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1d5fe:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d600:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1d604:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1d606:	bfb6      	itet	lt
   1d608:	2201      	movlt	r2, #1
		dp->flags = 0;
   1d60a:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1d60e:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1d610:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1d612:	bfd8      	it	le
   1d614:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d616:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1d61a:	bfdc      	itt	le
   1d61c:	f042 0202 	orrle.w	r2, r2, #2
   1d620:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d622:	89ed      	ldrh	r5, [r5, #14]
   1d624:	e7b4      	b.n	1d590 <virtqueue_add_buffer+0x2a>

0001d626 <virtqueue_get_buffer>:
{
   1d626:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1d628:	b350      	cbz	r0, 1d680 <virtqueue_get_buffer+0x5a>
   1d62a:	6a05      	ldr	r5, [r0, #32]
   1d62c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1d62e:	886c      	ldrh	r4, [r5, #2]
   1d630:	429c      	cmp	r4, r3
   1d632:	d030      	beq.n	1d696 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1d634:	1c5c      	adds	r4, r3, #1
   1d636:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1d638:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1d63a:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1d63e:	3c01      	subs	r4, #1
   1d640:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1d642:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1d646:	686b      	ldr	r3, [r5, #4]
   1d648:	b29e      	uxth	r6, r3
	if (len)
   1d64a:	b109      	cbz	r1, 1d650 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1d64c:	68ad      	ldr	r5, [r5, #8]
   1d64e:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1d650:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1d654:	b29b      	uxth	r3, r3
   1d656:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1d65a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1d65e:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1d660:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1d662:	442f      	add	r7, r5
	dxp->ndescs--;
   1d664:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1d666:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1d668:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1d66a:	898d      	ldrh	r5, [r1, #12]
   1d66c:	076f      	lsls	r7, r5, #29
   1d66e:	d50e      	bpl.n	1d68e <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1d670:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1d672:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1d674:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1d676:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1d678:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1d67a:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1d67c:	b102      	cbz	r2, 1d680 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1d67e:	8014      	strh	r4, [r2, #0]
}
   1d680:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1d682:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1d684:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1d686:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1d688:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1d68c:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1d68e:	898d      	ldrh	r5, [r1, #12]
   1d690:	07ed      	lsls	r5, r5, #31
   1d692:	d4f6      	bmi.n	1d682 <virtqueue_get_buffer+0x5c>
   1d694:	e7ec      	b.n	1d670 <virtqueue_get_buffer+0x4a>
		return NULL;
   1d696:	2000      	movs	r0, #0
   1d698:	e7f2      	b.n	1d680 <virtqueue_get_buffer+0x5a>

0001d69a <virtqueue_get_available_buffer>:
{
   1d69a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1d69e:	f3bf 8f5b 	dmb	ish
{
   1d6a2:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1d6a4:	69c2      	ldr	r2, [r0, #28]
{
   1d6a6:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1d6a8:	8853      	ldrh	r3, [r2, #2]
   1d6aa:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1d6ac:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1d6ae:	428b      	cmp	r3, r1
   1d6b0:	d045      	beq.n	1d73e <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1d6b2:	1c4b      	adds	r3, r1, #1
   1d6b4:	8603      	strh	r3, [r0, #48]	; 0x30
   1d6b6:	8943      	ldrh	r3, [r0, #10]
   1d6b8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1d6bc:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1d6be:	400b      	ands	r3, r1
   1d6c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1d6c4:	889a      	ldrh	r2, [r3, #4]
   1d6c6:	b293      	uxth	r3, r2
   1d6c8:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1d6ca:	6982      	ldr	r2, [r0, #24]
   1d6cc:	011b      	lsls	r3, r3, #4
   1d6ce:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1d6d2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1d6d6:	bb5b      	cbnz	r3, 1d730 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1d6d8:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1d6dc:	1c62      	adds	r2, r4, #1
   1d6de:	bf09      	itett	eq
   1d6e0:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1d6e4:	ea09 0404 	andne.w	r4, r9, r4
   1d6e8:	681c      	ldreq	r4, [r3, #0]
   1d6ea:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1d6ee:	4621      	mov	r1, r4
   1d6f0:	4640      	mov	r0, r8
   1d6f2:	f7ff feed 	bl	1d4d0 <metal_io_phys>
   1d6f6:	4581      	cmp	r9, r0
   1d6f8:	d009      	beq.n	1d70e <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1d6fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1d6fe:	3301      	adds	r3, #1
   1d700:	441c      	add	r4, r3
		} while (offset < io->size);
   1d702:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d706:	429c      	cmp	r4, r3
   1d708:	d3f1      	bcc.n	1d6ee <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1d70a:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d70e:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1d712:	1c43      	adds	r3, r0, #1
   1d714:	d011      	beq.n	1d73a <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d716:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d71a:	42a3      	cmp	r3, r4
   1d71c:	d90d      	bls.n	1d73a <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1d71e:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1d720:	8832      	ldrh	r2, [r6, #0]
   1d722:	69ab      	ldr	r3, [r5, #24]
   1d724:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1d728:	689b      	ldr	r3, [r3, #8]
   1d72a:	603b      	str	r3, [r7, #0]
}
   1d72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1d730:	4649      	mov	r1, r9
   1d732:	4640      	mov	r0, r8
   1d734:	4798      	blx	r3
   1d736:	4604      	mov	r4, r0
   1d738:	e7e9      	b.n	1d70e <virtqueue_get_available_buffer+0x74>
		: NULL);
   1d73a:	2000      	movs	r0, #0
   1d73c:	e7f0      	b.n	1d720 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1d73e:	2000      	movs	r0, #0
   1d740:	e7f4      	b.n	1d72c <virtqueue_get_available_buffer+0x92>

0001d742 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1d742:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d744:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1d746:	6912      	ldr	r2, [r2, #16]
   1d748:	0092      	lsls	r2, r2, #2
   1d74a:	d515      	bpl.n	1d778 <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d74c:	b94b      	cbnz	r3, 1d762 <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1d74e:	69c2      	ldr	r2, [r0, #28]
   1d750:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1d752:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1d754:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1d756:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1d75a:	1a1b      	subs	r3, r3, r0
   1d75c:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1d75e:	8093      	strh	r3, [r2, #4]
   1d760:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1d762:	2b01      	cmp	r3, #1
   1d764:	d10e      	bne.n	1d784 <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1d766:	6a02      	ldr	r2, [r0, #32]
   1d768:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1d76a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1d76c:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1d76e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1d772:	1a1b      	subs	r3, r3, r0
   1d774:	3b01      	subs	r3, #1
   1d776:	e7f2      	b.n	1d75e <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1d778:	b92b      	cbnz	r3, 1d786 <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1d77a:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1d77c:	8813      	ldrh	r3, [r2, #0]
   1d77e:	f043 0301 	orr.w	r3, r3, #1
   1d782:	8013      	strh	r3, [r2, #0]
}
   1d784:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1d786:	2b01      	cmp	r3, #1
   1d788:	d1fc      	bne.n	1d784 <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1d78a:	6a02      	ldr	r2, [r0, #32]
   1d78c:	e7f6      	b.n	1d77c <virtqueue_disable_cb+0x3a>

0001d78e <virtqueue_kick>:
{
   1d78e:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1d790:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1d794:	6803      	ldr	r3, [r0, #0]
{
   1d796:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1d798:	691a      	ldr	r2, [r3, #16]
   1d79a:	699b      	ldr	r3, [r3, #24]
   1d79c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1d7a0:	d019      	beq.n	1d7d6 <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d7a2:	b97b      	cbnz	r3, 1d7c4 <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1d7a4:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1d7a6:	6a02      	ldr	r2, [r0, #32]
   1d7a8:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1d7aa:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1d7ac:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1d7b0:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1d7b2:	1a9b      	subs	r3, r3, r2
   1d7b4:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1d7b6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1d7b8:	b29b      	uxth	r3, r3
   1d7ba:	429a      	cmp	r2, r3
   1d7bc:	d813      	bhi.n	1d7e6 <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1d7be:	2300      	movs	r3, #0
   1d7c0:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1d7c2:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1d7c4:	2b01      	cmp	r3, #1
   1d7c6:	d1fa      	bne.n	1d7be <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1d7c8:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1d7ca:	69c2      	ldr	r2, [r0, #28]
   1d7cc:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1d7ce:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1d7d0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1d7d4:	e7ec      	b.n	1d7b0 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1d7d6:	b963      	cbnz	r3, 1d7f2 <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1d7d8:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1d7da:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1d7dc:	43db      	mvns	r3, r3
   1d7de:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1d7e2:	2b00      	cmp	r3, #0
   1d7e4:	d0eb      	beq.n	1d7be <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1d7e6:	6923      	ldr	r3, [r4, #16]
   1d7e8:	2b00      	cmp	r3, #0
   1d7ea:	d0e8      	beq.n	1d7be <virtqueue_kick+0x30>
		vq->notify(vq);
   1d7ec:	4620      	mov	r0, r4
   1d7ee:	4798      	blx	r3
   1d7f0:	e7e5      	b.n	1d7be <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1d7f2:	2b01      	cmp	r3, #1
   1d7f4:	d1e3      	bne.n	1d7be <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1d7f6:	69c3      	ldr	r3, [r0, #28]
   1d7f8:	e7ef      	b.n	1d7da <virtqueue_kick+0x4c>

0001d7fa <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1d7fa:	69c2      	ldr	r2, [r0, #28]
   1d7fc:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1d7fe:	8853      	ldrh	r3, [r2, #2]
   1d800:	428b      	cmp	r3, r1
   1d802:	d00a      	beq.n	1d81a <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1d804:	8943      	ldrh	r3, [r0, #10]
   1d806:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1d808:	400b      	ands	r3, r1
   1d80a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1d80e:	889a      	ldrh	r2, [r3, #4]
   1d810:	6983      	ldr	r3, [r0, #24]
   1d812:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1d816:	6898      	ldr	r0, [r3, #8]
	return len;
   1d818:	4770      	bx	lr
		return 0;
   1d81a:	2000      	movs	r0, #0
}
   1d81c:	4770      	bx	lr

0001d81e <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1d81e:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1d822:	68c3      	ldr	r3, [r0, #12]
   1d824:	b103      	cbz	r3, 1d828 <virtqueue_notification+0xa>
		vq->callback(vq);
   1d826:	4718      	bx	r3
}
   1d828:	4770      	bx	lr

0001d82a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1d82a:	f04f 32ff 	mov.w	r2, #4294967295
   1d82e:	f04f 33ff 	mov.w	r3, #4294967295
   1d832:	f7fb bc5f 	b.w	190f4 <z_impl_k_sem_take>

0001d836 <rpmsg_unregister_endpoint>:
{
   1d836:	b570      	push	{r4, r5, r6, lr}
   1d838:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1d83a:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1d83c:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1d840:	4630      	mov	r0, r6
   1d842:	f7ff fff2 	bl	1d82a <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1d846:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d848:	1c5a      	adds	r2, r3, #1
   1d84a:	d010      	beq.n	1d86e <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1d84c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1d850:	2b7f      	cmp	r3, #127	; 0x7f
   1d852:	d80c      	bhi.n	1d86e <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1d854:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1d856:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1d858:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1d85a:	f003 031f 	and.w	r3, r3, #31
   1d85e:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1d862:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1d866:	ea22 0203 	bic.w	r2, r2, r3
   1d86a:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1d86e:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1d872:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1d876:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1d878:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1d87a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1d87e:	2300      	movs	r3, #0
   1d880:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1d882:	4630      	mov	r0, r6
}
   1d884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d888:	f7fb bbf8 	b.w	1907c <z_impl_k_sem_give>

0001d88c <rpmsg_send_ns_message>:
{
   1d88c:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1d88e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1d890:	b08c      	sub	sp, #48	; 0x30
   1d892:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1d894:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1d896:	2220      	movs	r2, #32
   1d898:	4601      	mov	r1, r0
   1d89a:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1d89c:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1d89e:	f7fd ffb6 	bl	1b80e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1d8a2:	2328      	movs	r3, #40	; 0x28
   1d8a4:	2201      	movs	r2, #1
   1d8a6:	4620      	mov	r0, r4
   1d8a8:	e9cd 3200 	strd	r3, r2, [sp]
   1d8ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d8ae:	2235      	movs	r2, #53	; 0x35
   1d8b0:	ab02      	add	r3, sp, #8
   1d8b2:	f7f9 fbaf 	bl	17014 <rpmsg_send_offchannel_raw>
}
   1d8b6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1d8ba:	b00c      	add	sp, #48	; 0x30
   1d8bc:	bd10      	pop	{r4, pc}

0001d8be <rpmsg_get_endpoint>:
{
   1d8be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d8c2:	4680      	mov	r8, r0
   1d8c4:	4689      	mov	r9, r1
   1d8c6:	4615      	mov	r5, r2
   1d8c8:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1d8ca:	6807      	ldr	r7, [r0, #0]
   1d8cc:	45b8      	cmp	r8, r7
   1d8ce:	d101      	bne.n	1d8d4 <rpmsg_get_endpoint+0x16>
	return NULL;
   1d8d0:	2400      	movs	r4, #0
   1d8d2:	e021      	b.n	1d918 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1d8d4:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1d8d6:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1d8da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d8dc:	d006      	beq.n	1d8ec <rpmsg_get_endpoint+0x2e>
   1d8de:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1d8e0:	d01a      	beq.n	1d918 <rpmsg_get_endpoint+0x5a>
		if (name)
   1d8e2:	f1b9 0f00 	cmp.w	r9, #0
   1d8e6:	d106      	bne.n	1d8f6 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1d8e8:	683f      	ldr	r7, [r7, #0]
   1d8ea:	e7ef      	b.n	1d8cc <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1d8ec:	3301      	adds	r3, #1
   1d8ee:	d1f8      	bne.n	1d8e2 <rpmsg_get_endpoint+0x24>
   1d8f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d8f2:	42b3      	cmp	r3, r6
   1d8f4:	e7f4      	b.n	1d8e0 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1d8f6:	2220      	movs	r2, #32
   1d8f8:	4649      	mov	r1, r9
   1d8fa:	4620      	mov	r0, r4
   1d8fc:	f7fd ffb5 	bl	1b86a <strncmp>
		if (!name || !name_match)
   1d900:	2800      	cmp	r0, #0
   1d902:	d1f1      	bne.n	1d8e8 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1d904:	1c72      	adds	r2, r6, #1
   1d906:	d002      	beq.n	1d90e <rpmsg_get_endpoint+0x50>
   1d908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d90a:	42b3      	cmp	r3, r6
   1d90c:	d004      	beq.n	1d918 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1d90e:	1c6b      	adds	r3, r5, #1
   1d910:	d1ea      	bne.n	1d8e8 <rpmsg_get_endpoint+0x2a>
   1d912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d914:	3301      	adds	r3, #1
   1d916:	d1e7      	bne.n	1d8e8 <rpmsg_get_endpoint+0x2a>
}
   1d918:	4620      	mov	r0, r4
   1d91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d91e <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1d91e:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1d920:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1d924:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1d928:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1d92a:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1d92c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1d92e:	6013      	str	r3, [r2, #0]
}
   1d930:	4770      	bx	lr

0001d932 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1d932:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1d934:	4604      	mov	r4, r0
   1d936:	b190      	cbz	r0, 1d95e <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1d938:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1d93a:	b183      	cbz	r3, 1d95e <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1d93c:	7802      	ldrb	r2, [r0, #0]
   1d93e:	b14a      	cbz	r2, 1d954 <rpmsg_destroy_ept+0x22>
   1d940:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1d944:	b133      	cbz	r3, 1d954 <rpmsg_destroy_ept+0x22>
   1d946:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1d948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1d94c:	d302      	bcc.n	1d954 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1d94e:	2101      	movs	r1, #1
   1d950:	f7ff ff9c 	bl	1d88c <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1d954:	4620      	mov	r0, r4
}
   1d956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1d95a:	f7ff bf6c 	b.w	1d836 <rpmsg_unregister_endpoint>
}
   1d95e:	bd10      	pop	{r4, pc}

0001d960 <rpmsg_virtio_tx_callback>:
}
   1d960:	4770      	bx	lr

0001d962 <k_sem_give>:
   1d962:	f7fb bb8b 	b.w	1907c <z_impl_k_sem_give>

0001d966 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1d966:	f04f 32ff 	mov.w	r2, #4294967295
   1d96a:	f04f 33ff 	mov.w	r3, #4294967295
   1d96e:	f7fb bbc1 	b.w	190f4 <z_impl_k_sem_take>

0001d972 <rpmsg_virtio_ns_callback>:
{
   1d972:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1d976:	2a28      	cmp	r2, #40	; 0x28
{
   1d978:	4680      	mov	r8, r0
   1d97a:	460e      	mov	r6, r1
   1d97c:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1d97e:	d12b      	bne.n	1d9d8 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1d980:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1d982:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1d984:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1d988:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1d98a:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1d98c:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1d98e:	1a71      	subs	r1, r6, r1
   1d990:	42a1      	cmp	r1, r4
   1d992:	bf28      	it	cs
   1d994:	f04f 31ff 	movcs.w	r1, #4294967295
   1d998:	f7ff fce7 	bl	1d36a <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1d99c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1d9a0:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1d9a4:	4638      	mov	r0, r7
   1d9a6:	f7ff ffde 	bl	1d966 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1d9aa:	464b      	mov	r3, r9
   1d9ac:	f04f 32ff 	mov.w	r2, #4294967295
   1d9b0:	4669      	mov	r1, sp
   1d9b2:	4628      	mov	r0, r5
   1d9b4:	f7ff ff83 	bl	1d8be <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1d9b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1d9ba:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1d9bc:	07db      	lsls	r3, r3, #31
   1d9be:	d50f      	bpl.n	1d9e0 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1d9c0:	b110      	cbz	r0, 1d9c8 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1d9c2:	f04f 33ff 	mov.w	r3, #4294967295
   1d9c6:	6283      	str	r3, [r0, #40]	; 0x28
   1d9c8:	4638      	mov	r0, r7
   1d9ca:	f7ff ffca 	bl	1d962 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1d9ce:	b11c      	cbz	r4, 1d9d8 <rpmsg_virtio_ns_callback+0x66>
   1d9d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d9d2:	b10b      	cbz	r3, 1d9d8 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1d9d4:	4640      	mov	r0, r8
   1d9d6:	4798      	blx	r3
}
   1d9d8:	2000      	movs	r0, #0
   1d9da:	b009      	add	sp, #36	; 0x24
   1d9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1d9e0:	b950      	cbnz	r0, 1d9f8 <rpmsg_virtio_ns_callback+0x86>
   1d9e2:	4638      	mov	r0, r7
   1d9e4:	f7ff ffbd 	bl	1d962 <k_sem_give>
			if (rdev->ns_bind_cb)
   1d9e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1d9ea:	2b00      	cmp	r3, #0
   1d9ec:	d0f4      	beq.n	1d9d8 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1d9ee:	464a      	mov	r2, r9
   1d9f0:	4669      	mov	r1, sp
   1d9f2:	4628      	mov	r0, r5
   1d9f4:	4798      	blx	r3
   1d9f6:	e7ef      	b.n	1d9d8 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1d9f8:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1d9fc:	4638      	mov	r0, r7
   1d9fe:	f7ff ffb0 	bl	1d962 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1da02:	e7e9      	b.n	1d9d8 <rpmsg_virtio_ns_callback+0x66>

0001da04 <rpmsg_virtio_get_rx_buffer>:
{
   1da04:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1da06:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1da08:	4613      	mov	r3, r2
   1da0a:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1da0c:	b925      	cbnz	r5, 1da18 <rpmsg_virtio_get_rx_buffer+0x14>
}
   1da0e:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1da10:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1da14:	f7ff be07 	b.w	1d626 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1da18:	2d01      	cmp	r5, #1
   1da1a:	d106      	bne.n	1da2a <rpmsg_virtio_get_rx_buffer+0x26>
}
   1da1c:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1da1e:	460a      	mov	r2, r1
   1da20:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1da24:	4619      	mov	r1, r3
   1da26:	f7ff be38 	b.w	1d69a <virtqueue_get_available_buffer>
}
   1da2a:	2000      	movs	r0, #0
   1da2c:	bc30      	pop	{r4, r5}
   1da2e:	4770      	bx	lr

0001da30 <rpmsg_virtio_rx_callback>:
{
   1da30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1da34:	6803      	ldr	r3, [r0, #0]
{
   1da36:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1da38:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1da3a:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1da3e:	4638      	mov	r0, r7
   1da40:	f7ff ff91 	bl	1d966 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1da44:	4630      	mov	r0, r6
   1da46:	f10d 020a 	add.w	r2, sp, #10
   1da4a:	a903      	add	r1, sp, #12
   1da4c:	f7ff ffda 	bl	1da04 <rpmsg_virtio_get_rx_buffer>
   1da50:	4604      	mov	r4, r0
   1da52:	4638      	mov	r0, r7
   1da54:	f7ff ff85 	bl	1d962 <k_sem_give>
	while (rp_hdr) {
   1da58:	b914      	cbnz	r4, 1da60 <rpmsg_virtio_rx_callback+0x30>
}
   1da5a:	b006      	add	sp, #24
   1da5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1da60:	4638      	mov	r0, r7
   1da62:	f7ff ff80 	bl	1d966 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1da66:	f04f 33ff 	mov.w	r3, #4294967295
   1da6a:	2100      	movs	r1, #0
   1da6c:	4630      	mov	r0, r6
   1da6e:	6862      	ldr	r2, [r4, #4]
   1da70:	f7ff ff25 	bl	1d8be <rpmsg_get_endpoint>
   1da74:	4605      	mov	r5, r0
   1da76:	4638      	mov	r0, r7
   1da78:	f7ff ff73 	bl	1d962 <k_sem_give>
		if (ept) {
   1da7c:	b185      	cbz	r5, 1daa0 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1da7e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1da80:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1da82:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1da84:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1da86:	bf08      	it	eq
   1da88:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1da8a:	89a2      	ldrh	r2, [r4, #12]
   1da8c:	9100      	str	r1, [sp, #0]
   1da8e:	4628      	mov	r0, r5
   1da90:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1da94:	f104 0110 	add.w	r1, r4, #16
   1da98:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1da9a:	2800      	cmp	r0, #0
   1da9c:	da00      	bge.n	1daa0 <rpmsg_virtio_rx_callback+0x70>
   1da9e:	e7fe      	b.n	1da9e <rpmsg_virtio_rx_callback+0x6e>
   1daa0:	4638      	mov	r0, r7
   1daa2:	f7ff ff60 	bl	1d966 <__metal_mutex_acquire>
   1daa6:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1daa8:	9b03      	ldr	r3, [sp, #12]
   1daaa:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1daac:	b9b2      	cbnz	r2, 1dadc <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1daae:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1dab0:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1dab4:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1dab8:	2301      	movs	r3, #1
   1daba:	a904      	add	r1, sp, #16
   1dabc:	f7ff fd53 	bl	1d566 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1dac0:	4630      	mov	r0, r6
   1dac2:	f10d 020a 	add.w	r2, sp, #10
   1dac6:	a903      	add	r1, sp, #12
   1dac8:	f7ff ff9c 	bl	1da04 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1dacc:	4604      	mov	r4, r0
   1dace:	2800      	cmp	r0, #0
   1dad0:	d1bf      	bne.n	1da52 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1dad2:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1dad6:	f7ff fe5a 	bl	1d78e <virtqueue_kick>
   1dada:	e7ba      	b.n	1da52 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1dadc:	2a01      	cmp	r2, #1
   1dade:	d1ef      	bne.n	1dac0 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1dae0:	461a      	mov	r2, r3
   1dae2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1dae6:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1daea:	f7f9 fa77 	bl	16fdc <virtqueue_add_consumed_buffer>
   1daee:	e7e7      	b.n	1dac0 <rpmsg_virtio_rx_callback+0x90>

0001daf0 <_rpmsg_virtio_get_buffer_size>:
{
   1daf0:	b508      	push	{r3, lr}
   1daf2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1daf4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1daf6:	b14b      	cbz	r3, 1db0c <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1daf8:	2b01      	cmp	r3, #1
   1dafa:	d10a      	bne.n	1db12 <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1dafc:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1db00:	f7ff fe7b 	bl	1d7fa <virtqueue_get_desc_size>
   1db04:	3810      	subs	r0, #16
   1db06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1db0a:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1db0c:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1db10:	e7fb      	b.n	1db0a <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1db12:	2000      	movs	r0, #0
	return length;
   1db14:	e7f9      	b.n	1db0a <_rpmsg_virtio_get_buffer_size+0x1a>

0001db16 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1db16:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1db18:	6842      	ldr	r2, [r0, #4]
{
   1db1a:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1db1c:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1db1e:	bf29      	itett	cs
   1db20:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1db22:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1db24:	1a84      	subcs	r4, r0, r2
   1db26:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1db28:	bf22      	ittt	cs
   1db2a:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1db2c:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1db2e:	605a      	strcs	r2, [r3, #4]
}
   1db30:	bd10      	pop	{r4, pc}

0001db32 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1db32:	b110      	cbz	r0, 1db3a <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1db34:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1db38:	6001      	str	r1, [r0, #0]
}
   1db3a:	4770      	bx	lr

0001db3c <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1db3c:	f7fd b826 	b.w	1ab8c <z_clock_idle_exit>

0001db40 <k_heap_init>:
{
   1db40:	b410      	push	{r4}
   1db42:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1db46:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1db4a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1db4c:	f7ed b818 	b.w	ab80 <sys_heap_init>

0001db50 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1db50:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1db54:	428b      	cmp	r3, r1
   1db56:	d001      	beq.n	1db5c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1db58:	f7fb b85e 	b.w	18c18 <z_set_prio>
}
   1db5c:	2000      	movs	r0, #0
   1db5e:	4770      	bx	lr

0001db60 <z_impl_k_mutex_init>:
{
   1db60:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1db62:	2000      	movs	r0, #0
   1db64:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1db68:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1db6c:	4770      	bx	lr

0001db6e <z_queue_node_peek>:
{
   1db6e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1db70:	4604      	mov	r4, r0
   1db72:	b130      	cbz	r0, 1db82 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1db74:	6802      	ldr	r2, [r0, #0]
   1db76:	0793      	lsls	r3, r2, #30
   1db78:	d003      	beq.n	1db82 <z_queue_node_peek+0x14>
		ret = anode->data;
   1db7a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1db7c:	b109      	cbz	r1, 1db82 <z_queue_node_peek+0x14>
			k_free(anode);
   1db7e:	f000 f982 	bl	1de86 <k_free>
}
   1db82:	4620      	mov	r0, r4
   1db84:	bd10      	pop	{r4, pc}

0001db86 <z_impl_k_queue_init>:
	list->head = NULL;
   1db86:	2300      	movs	r3, #0
	list->tail = NULL;
   1db88:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1db8c:	6083      	str	r3, [r0, #8]
   1db8e:	f100 030c 	add.w	r3, r0, #12
   1db92:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1db96:	f100 0314 	add.w	r3, r0, #20
   1db9a:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1db9e:	4770      	bx	lr

0001dba0 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1dba0:	2301      	movs	r3, #1
{
   1dba2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1dba4:	9300      	str	r3, [sp, #0]
   1dba6:	2300      	movs	r3, #0
{
   1dba8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1dbaa:	4619      	mov	r1, r3
   1dbac:	f7fa f91c 	bl	17de8 <queue_insert>
}
   1dbb0:	b003      	add	sp, #12
   1dbb2:	f85d fb04 	ldr.w	pc, [sp], #4

0001dbb6 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1dbb6:	2300      	movs	r3, #0
{
   1dbb8:	b507      	push	{r0, r1, r2, lr}
   1dbba:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1dbbc:	9300      	str	r3, [sp, #0]
   1dbbe:	4619      	mov	r1, r3
   1dbc0:	f7fa f912 	bl	17de8 <queue_insert>
}
   1dbc4:	b003      	add	sp, #12
   1dbc6:	f85d fb04 	ldr.w	pc, [sp], #4

0001dbca <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1dbca:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1dbce:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1dbd2:	4298      	cmp	r0, r3
   1dbd4:	bfac      	ite	ge
   1dbd6:	2000      	movge	r0, #0
   1dbd8:	2001      	movlt	r0, #1
   1dbda:	4770      	bx	lr

0001dbdc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1dbdc:	4603      	mov	r3, r0
   1dbde:	b920      	cbnz	r0, 1dbea <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1dbe0:	f3ef 8205 	mrs	r2, IPSR
   1dbe4:	b90a      	cbnz	r2, 1dbea <z_reschedule_irqlock+0xe>
   1dbe6:	f7ef bd8b 	b.w	d700 <arch_swap>
   1dbea:	f383 8811 	msr	BASEPRI, r3
   1dbee:	f3bf 8f6f 	isb	sy
}
   1dbf2:	4770      	bx	lr

0001dbf4 <z_reschedule_unlocked>:
	__asm__ volatile(
   1dbf4:	f04f 0320 	mov.w	r3, #32
   1dbf8:	f3ef 8011 	mrs	r0, BASEPRI
   1dbfc:	f383 8811 	msr	BASEPRI, r3
   1dc00:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dc04:	f7ff bfea 	b.w	1dbdc <z_reschedule_irqlock>

0001dc08 <unpend_thread_no_timeout>:
{
   1dc08:	b510      	push	{r4, lr}
   1dc0a:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1dc0c:	f7fa fa26 	bl	1805c <pended_on>
   1dc10:	4621      	mov	r1, r4
   1dc12:	f7fa fb2b 	bl	1826c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dc16:	7b63      	ldrb	r3, [r4, #13]
   1dc18:	f023 0302 	bic.w	r3, r3, #2
   1dc1c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1dc1e:	2300      	movs	r3, #0
   1dc20:	60a3      	str	r3, [r4, #8]
}
   1dc22:	bd10      	pop	{r4, pc}

0001dc24 <z_priq_dumb_best>:
{
   1dc24:	4603      	mov	r3, r0
	return list->head == list;
   1dc26:	6800      	ldr	r0, [r0, #0]
}
   1dc28:	4283      	cmp	r3, r0
   1dc2a:	bf08      	it	eq
   1dc2c:	2000      	moveq	r0, #0
   1dc2e:	4770      	bx	lr

0001dc30 <z_unpend_all>:
{
   1dc30:	b538      	push	{r3, r4, r5, lr}
   1dc32:	4605      	mov	r5, r0
	int need_sched = 0;
   1dc34:	2000      	movs	r0, #0
   1dc36:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc38:	42a5      	cmp	r5, r4
   1dc3a:	d000      	beq.n	1dc3e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1dc3c:	b904      	cbnz	r4, 1dc40 <z_unpend_all+0x10>
}
   1dc3e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1dc40:	4620      	mov	r0, r4
   1dc42:	f7fa fb3f 	bl	182c4 <z_unpend_thread>
		z_ready_thread(thread);
   1dc46:	4620      	mov	r0, r4
   1dc48:	f7fa fc56 	bl	184f8 <z_ready_thread>
		need_sched = 1;
   1dc4c:	2001      	movs	r0, #1
   1dc4e:	e7f2      	b.n	1dc36 <z_unpend_all+0x6>

0001dc50 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1dc50:	b15a      	cbz	r2, 1dc6a <z_impl_k_sem_init+0x1a>
   1dc52:	428a      	cmp	r2, r1
   1dc54:	d309      	bcc.n	1dc6a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1dc56:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1dc5a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1dc5e:	e9c0 0000 	strd	r0, r0, [r0]
   1dc62:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1dc66:	2000      	movs	r0, #0
   1dc68:	4770      	bx	lr
		return -EINVAL;
   1dc6a:	f06f 0015 	mvn.w	r0, #21
}
   1dc6e:	4770      	bx	lr

0001dc70 <k_is_in_isr>:
   1dc70:	f3ef 8005 	mrs	r0, IPSR
}
   1dc74:	3800      	subs	r0, #0
   1dc76:	bf18      	it	ne
   1dc78:	2001      	movne	r0, #1
   1dc7a:	4770      	bx	lr

0001dc7c <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1dc7c:	b108      	cbz	r0, 1dc82 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1dc7e:	f7ed bbc9 	b.w	b414 <arch_busy_wait>
}
   1dc82:	4770      	bx	lr

0001dc84 <z_impl_k_thread_name_set>:
}
   1dc84:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1dc88:	4770      	bx	lr

0001dc8a <k_thread_name_get>:
}
   1dc8a:	2000      	movs	r0, #0
   1dc8c:	4770      	bx	lr

0001dc8e <k_work_submit_to_queue>:
{
   1dc8e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dc90:	f101 0308 	add.w	r3, r1, #8
   1dc94:	e8d3 2fef 	ldaex	r2, [r3]
   1dc98:	f042 0c01 	orr.w	ip, r2, #1
   1dc9c:	e8c3 cfee 	stlex	lr, ip, [r3]
   1dca0:	f1be 0f00 	cmp.w	lr, #0
   1dca4:	d1f6      	bne.n	1dc94 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1dca6:	07d3      	lsls	r3, r2, #31
   1dca8:	d403      	bmi.n	1dcb2 <k_work_submit_to_queue+0x24>
}
   1dcaa:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1dcae:	f7ff bf77 	b.w	1dba0 <k_queue_append>
}
   1dcb2:	f85d fb04 	ldr.w	pc, [sp], #4

0001dcb6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1dcb6:	f1a0 0110 	sub.w	r1, r0, #16
   1dcba:	6980      	ldr	r0, [r0, #24]
   1dcbc:	f7ff bfe7 	b.w	1dc8e <k_work_submit_to_queue>

0001dcc0 <work_cancel>:
{
   1dcc0:	b570      	push	{r4, r5, r6, lr}
   1dcc2:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1dcc4:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dcc8:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1dccc:	07db      	lsls	r3, r3, #31
   1dcce:	d52f      	bpl.n	1dd30 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1dcd0:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1dcd2:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1dcd4:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1dcd6:	b913      	cbnz	r3, 1dcde <work_cancel+0x1e>
			return -EINVAL;
   1dcd8:	f06f 0015 	mvn.w	r0, #21
}
   1dcdc:	bd70      	pop	{r4, r5, r6, pc}
   1dcde:	429c      	cmp	r4, r3
   1dce0:	d121      	bne.n	1dd26 <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1dce2:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1dce4:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1dce6:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1dcea:	b991      	cbnz	r1, 1dd12 <work_cancel+0x52>
   1dcec:	42b4      	cmp	r4, r6
	list->head = node;
   1dcee:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1dcf0:	d100      	bne.n	1dcf4 <work_cancel+0x34>
	list->tail = node;
   1dcf2:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dcf4:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dcf6:	f003 0303 	and.w	r3, r3, #3
   1dcfa:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1dcfc:	2000      	movs	r0, #0
   1dcfe:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dd00:	e8d5 3fef 	ldaex	r3, [r5]
   1dd04:	f023 0301 	bic.w	r3, r3, #1
   1dd08:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1dd0c:	2a00      	cmp	r2, #0
   1dd0e:	d0e5      	beq.n	1dcdc <work_cancel+0x1c>
   1dd10:	e7f6      	b.n	1dd00 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dd12:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1dd14:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dd16:	f003 0303 	and.w	r3, r3, #3
   1dd1a:	ea43 0300 	orr.w	r3, r3, r0
   1dd1e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1dd20:	bf08      	it	eq
   1dd22:	6051      	streq	r1, [r2, #4]
}
   1dd24:	e7e6      	b.n	1dcf4 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1dd26:	6818      	ldr	r0, [r3, #0]
   1dd28:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1dd2a:	f020 0303 	bic.w	r3, r0, #3
   1dd2e:	e7d2      	b.n	1dcd6 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1dd30:	3010      	adds	r0, #16
   1dd32:	f7fb fdd3 	bl	198dc <z_abort_timeout>
		if (err) {
   1dd36:	2800      	cmp	r0, #0
   1dd38:	d0e0      	beq.n	1dcfc <work_cancel+0x3c>
			return -EALREADY;
   1dd3a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1dd3e:	e7cd      	b.n	1dcdc <work_cancel+0x1c>

0001dd40 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1dd40:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1dd42:	f7fb ff19 	bl	19b78 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1dd46:	bd08      	pop	{r3, pc}

0001dd48 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1dd48:	f7fb bf16 	b.w	19b78 <z_tick_get>

0001dd4c <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dd4c:	f1b1 3fff 	cmp.w	r1, #4294967295
   1dd50:	bf08      	it	eq
   1dd52:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1dd56:	b538      	push	{r3, r4, r5, lr}
   1dd58:	4605      	mov	r5, r0
   1dd5a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dd5c:	d01d      	beq.n	1dd9a <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1dd5e:	ea51 0300 	orrs.w	r3, r1, r0
   1dd62:	d103      	bne.n	1dd6c <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1dd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1dd68:	f7fb bf06 	b.w	19b78 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1dd6c:	f06f 0301 	mvn.w	r3, #1
   1dd70:	1a18      	subs	r0, r3, r0
   1dd72:	f04f 33ff 	mov.w	r3, #4294967295
   1dd76:	eb63 0101 	sbc.w	r1, r3, r1
   1dd7a:	2900      	cmp	r1, #0
   1dd7c:	da0c      	bge.n	1dd98 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1dd7e:	f7fb fefb 	bl	19b78 <z_tick_get>
   1dd82:	2d01      	cmp	r5, #1
   1dd84:	4622      	mov	r2, r4
   1dd86:	f174 0400 	sbcs.w	r4, r4, #0
   1dd8a:	462b      	mov	r3, r5
   1dd8c:	bfbc      	itt	lt
   1dd8e:	2301      	movlt	r3, #1
   1dd90:	2200      	movlt	r2, #0
   1dd92:	1818      	adds	r0, r3, r0
   1dd94:	eb41 0102 	adc.w	r1, r1, r2
}
   1dd98:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1dd9a:	f04f 30ff 	mov.w	r0, #4294967295
   1dd9e:	4601      	mov	r1, r0
   1dda0:	e7fa      	b.n	1dd98 <z_timeout_end_calc+0x4c>

0001dda2 <k_work_submit_to_queue>:
{
   1dda2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dda4:	f101 0308 	add.w	r3, r1, #8
   1dda8:	e8d3 2fef 	ldaex	r2, [r3]
   1ddac:	f042 0c01 	orr.w	ip, r2, #1
   1ddb0:	e8c3 cfee 	stlex	lr, ip, [r3]
   1ddb4:	f1be 0f00 	cmp.w	lr, #0
   1ddb8:	d1f6      	bne.n	1dda8 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1ddba:	07d3      	lsls	r3, r2, #31
   1ddbc:	d403      	bmi.n	1ddc6 <k_work_submit_to_queue+0x24>
}
   1ddbe:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1ddc2:	f7ff beed 	b.w	1dba0 <k_queue_append>
}
   1ddc6:	f85d fb04 	ldr.w	pc, [sp], #4

0001ddca <add_event>:
{
   1ddca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ddcc:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ddce:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ddd2:	4290      	cmp	r0, r2
   1ddd4:	4604      	mov	r4, r0
   1ddd6:	460d      	mov	r5, r1
   1ddd8:	d106      	bne.n	1dde8 <add_event+0x1e>
	node->prev = list->tail;
   1ddda:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1dddc:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1ddde:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1dde0:	6863      	ldr	r3, [r4, #4]
   1dde2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1dde4:	6065      	str	r5, [r4, #4]
}
   1dde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1dde8:	2b00      	cmp	r3, #0
   1ddea:	d0f6      	beq.n	1ddda <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1ddec:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ddee:	b100      	cbz	r0, 1ddf2 <add_event+0x28>
   1ddf0:	386c      	subs	r0, #108	; 0x6c
   1ddf2:	b107      	cbz	r7, 1ddf6 <add_event+0x2c>
   1ddf4:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1ddf6:	4639      	mov	r1, r7
   1ddf8:	f7ff fee7 	bl	1dbca <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ddfc:	2800      	cmp	r0, #0
   1ddfe:	d1ec      	bne.n	1ddda <add_event+0x10>
	return list->head == list;
   1de00:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de02:	42b4      	cmp	r4, r6
   1de04:	d0e9      	beq.n	1ddda <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1de06:	2e00      	cmp	r6, #0
   1de08:	d0e7      	beq.n	1ddda <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1de0a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1de0c:	b101      	cbz	r1, 1de10 <add_event+0x46>
   1de0e:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1de10:	4638      	mov	r0, r7
   1de12:	f7ff feda 	bl	1dbca <z_is_t1_higher_prio_than_t2>
   1de16:	b128      	cbz	r0, 1de24 <add_event+0x5a>
	node->prev = successor->prev;
   1de18:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1de1a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1de1e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1de20:	6075      	str	r5, [r6, #4]
			return;
   1de22:	e7e0      	b.n	1dde6 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1de24:	6863      	ldr	r3, [r4, #4]
   1de26:	429e      	cmp	r6, r3
   1de28:	d0d7      	beq.n	1ddda <add_event+0x10>
   1de2a:	6836      	ldr	r6, [r6, #0]
   1de2c:	e7eb      	b.n	1de06 <add_event+0x3c>

0001de2e <z_handle_obj_poll_events>:
{
   1de2e:	4603      	mov	r3, r0
	return list->head == list;
   1de30:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1de32:	4283      	cmp	r3, r0
   1de34:	d008      	beq.n	1de48 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1de36:	e9d0 3200 	ldrd	r3, r2, [r0]
   1de3a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1de3c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1de3e:	2300      	movs	r3, #0
	node->prev = NULL;
   1de40:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1de44:	f7fb bed6 	b.w	19bf4 <signal_poll_event>
}
   1de48:	4770      	bx	lr

0001de4a <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1de4a:	2904      	cmp	r1, #4
{
   1de4c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1de50:	460d      	mov	r5, r1
   1de52:	bf38      	it	cc
   1de54:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1de56:	1952      	adds	r2, r2, r5
{
   1de58:	4606      	mov	r6, r0
   1de5a:	d209      	bcs.n	1de70 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1de5c:	f04f 0800 	mov.w	r8, #0
   1de60:	f04f 0900 	mov.w	r9, #0
   1de64:	e9cd 8900 	strd	r8, r9, [sp]
   1de68:	f7f9 fcb0 	bl	177cc <k_heap_aligned_alloc>
	if (mem == NULL) {
   1de6c:	4604      	mov	r4, r0
   1de6e:	b918      	cbnz	r0, 1de78 <z_heap_aligned_alloc+0x2e>
		return NULL;
   1de70:	2000      	movs	r0, #0
}
   1de72:	b002      	add	sp, #8
   1de74:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1de78:	462a      	mov	r2, r5
   1de7a:	21ff      	movs	r1, #255	; 0xff
   1de7c:	f7fd fd42 	bl	1b904 <memset>
	*heap_ref = heap;
   1de80:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1de82:	1960      	adds	r0, r4, r5
   1de84:	e7f5      	b.n	1de72 <z_heap_aligned_alloc+0x28>

0001de86 <k_free>:
	if (ptr != NULL) {
   1de86:	b138      	cbz	r0, 1de98 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1de88:	1f03      	subs	r3, r0, #4
   1de8a:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1de8c:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1de90:	1c42      	adds	r2, r0, #1
   1de92:	d0fa      	beq.n	1de8a <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1de94:	f7f9 bd22 	b.w	178dc <k_heap_free>
}
   1de98:	4770      	bx	lr

0001de9a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1de9a:	4770      	bx	lr
